
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыполнитьПереходПоСтраницам();
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы объектов.
//
Процедура ТаблицаОбъектовПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено И НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		ЗаполнитьСведенияОТекущемОбъекте(ТекущиеДанные.Объект, ТекущиеДанные.ПредставлениеАдресаОбъекта);
		
	Иначе
		
		ТаблицаКадастровыхНомеровОбъекта.Очистить();
		ТекущийОбъект               = Неопределено;
		ПредставлениеТекущегоАдреса = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" таблицы объектов.
//
Процедура ТаблицаОбъектовОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипВыбранногоЗначения = ТипЗнч(ВыбранноеЗначение);
	
	Если ТипВыбранногоЗначения = Тип("СправочникСсылка.КВП_Здания") ИЛИ ТипВыбранногоЗначения = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		
		СтандартнаяОбработка = Ложь;
		СтруктураПоиска      = Новый Структура("Объект", ВыбранноеЗначение);
		СтрокиДублейОбъекта  = ТаблицаОбъектов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиДублейОбъекта.Количество() = 0 Тогда
			
			ИдентификаторТекущейСтроки = Элементы.ТаблицаОбъектов.ТекущиеДанные.ПолучитьИдентификатор();
			
			ОбработатьИзменениеОбъектаВТаблицеОбъектов(ВыбранноеЗначение, ИдентификаторТекущейСтроки, Истина);
			ЗаполнитьСведенияОТекущемОбъекте(ВыбранноеЗначение);
			
		Иначе
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Объект уже имеется в таблице.");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" таблицы объектов.
//
Процедура ТаблицаОбъектовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущийОбъект = Элемент.ТекущиеДанные.Объект;
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		
		ИдентификаторТекущейСтроки = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
		
		ОбработатьИзменениеОбъектаВТаблицеОбъектов(Элемент.ТекущиеДанные.Объект, ИдентификаторТекущейСтроки, НоваяСтрока);
		ОпределитьТекущийСтатусВыполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" таблицы объектов.
//
Процедура ТаблицаОбъектовПослеУдаления(Элемент)
	
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПредставлениеАдресаОбъекта" таблицы объектов.
//
Процедура ТаблицаОбъектовПредставлениеАдресаОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокТиповОбъектов  = ПолучитьСписокТиповОбъектов();
	ОповещениеОВыборе    = Новый ОписаниеОповещения("ОбработатьОтветОВыбореТипаОбъекта", ЭтаФорма);
	
	СписокТиповОбъектов.ПоказатьВыборЭлемента(ОповещениеОВыборе, "Выберите тип объекта");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "ПредставлениеАдресаОбъекта" таблицы объектов.
//
Процедура ТаблицаОбъектовПредставлениеАдресаОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные        = Элемент.Родитель.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено И ТекущиеДанные.Свойство("Объект") И ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		
		ОбъектДляОткрытия = ТекущиеДанные.Объект;
		ПараметрыФормы    = Новый Структура("Ключ", ОбъектДляОткрытия);
		
		Если ТипЗнч(ОбъектДляОткрытия) = Тип("СправочникСсылка.КВП_Здания") Тогда
			ОткрытьФорму("Справочник.КВП_Здания.ФормаОбъекта", ПараметрыФормы);
		ИначеЕсли ТипЗнч(ОбъектДляОткрытия) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			ОткрытьФорму("Справочник.УПЖКХ_Помещения.ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НовыйКадастровыйНомер" таблицы объектов.
//
Процедура ТаблицаОбъектовНовыйКадастровыйНомерПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = Элемент.Родитель.ТекущиеДанные.ПолучитьИдентификатор();
	ОбработатьИзменениеОбъектаВТаблицеОбъектов(Неопределено, ИдентификаторТекущейСтроки, Ложь);
	
	Если НЕ ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ИмеютсяНесохраненныеДанные = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "НовыйКадастровыйНомер" таблицы объектов.
//
Процедура ТаблицаОбъектовНовыйКадастровыйНомерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка       = Ложь;
	ИдентификаторСтрокиОбъекта = Элемент.Родитель.ТекущиеДанные.ПолучитьИдентификатор();
	
	ОбработкаВыбораКадастровогоНомераВТаблицеКадастровыхНомеров(Текст, ИдентификаторСтрокиОбъекта);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" таблицы загруженных кадастровых номеров.
//
Процедура ТаблицаЗагруженныхКадастровыхНомеровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		
		ИдентификаторТекущейСтрокиКадастровыхНомеров = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
		ВыбранныйКадастровыйНомер                    = ТаблицаКадастровыхНомеровОбъекта.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиКадастровыхНомеров).КадастровыйНомер;
		
		Если Элементы.ТаблицаОбъектов.ТекущиеДанные = Неопределено Тогда
			
			ОбработкаВыбораКадастровогоНомераВТаблицеКадастровыхНомеров(ВыбранныйКадастровыйНомер);
			
		Иначе
			
			ИдентификаторТекущейСтрокиОбъекта = Элементы.ТаблицаОбъектов.ТекущиеДанные.ПолучитьИдентификатор();
			ОбработкаВыбораКадастровогоНомераВТаблицеКадастровыхНомеров(ВыбранныйКадастровыйНомер, ИдентификаторТекущейСтрокиОбъекта);
			ОпределитьТекущийСтатусВыполнения();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля текущего кадастрового номера.
//
Процедура ПолеТекущийКадастровыйНомерПриИзменении(Элемент)
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		ТаблицаОбъектов[0].НовыйКадастровыйНомер = Элемент.ТекстРедактирования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля текущего адреса.
//
Процедура ПолеПредставлениеТекущегоАдресаПриИзменении(Элемент)
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		Если Элементы.ТаблицаОбъектов.ТекущиеДанные = Неопределено Тогда
			
			ИзменитьПредставлениеАдресаПервогоОбъектаВТаблицеОбъектов(ПредставлениеТекущегоАдреса);
			
		Иначе
			
			ИдентификаторТекущейСтроки = Элементы.ТаблицаОбъектов.ТекущиеДанные.ПолучитьИдентификатор();
			ИзменитьПредставлениеАдресаТекущегоОбъекта(ИдентификаторТекущейСтроки, ПредставлениеТекущегоАдреса);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Далее".
//
Процедура КомандаДалее(Команда)
	
	Если ПроверитьФорматТокена(Токен) Тогда
		СохранитьТокен();
		ВыполнитьПереходПоСтраницам();
	Иначе
		ПоказатьПредупреждение(, "Введен некорректный токен.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьВсемиОбъектами".
//
Процедура КомандаЗаполнитьВсемиОбъектами(Команда)
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		
		ЗаполнитьТаблицуОбъектов();
		ИмеютсяНесохраненныеДанные = Ложь;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОПерезаполненииТаблицыОбъектовВсемиОбъектами", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Таблица объектов не пуста. Очистить таблицу и продолжить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьОбъектамиБезКадастровыхНомеров".
//
Процедура КомандаЗаполнитьОбъектамиБезКадастровыхНомеров(Команда)
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		
		ЗаполнитьТаблицуОбъектов(Ложь);
		ИмеютсяНесохраненныеДанные = Ложь;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОПерезаполненииТаблицыОбъектовОбъектамиБезКадастровыхНомеров", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Таблица объектов не пуста. Очистить таблицу и продолжить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьКадастровыеНомераОбъекта".
//
Процедура КомандаОбновитьКадастровыеНомераОбъекта(Команда)
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		ОбновитьКадастровыеНомераТекущегоОбъектаНаСервере(ТекущийОбъект, ПредставлениеТекущегоАдреса);
		ОпределитьТекущийСтатусВыполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗагрузитьКадастровыеНомера".
//
Процедура КомандаЗагрузитьКадастровыеНомера(Команда)
	
	ЗаполнитьКадастровыеНомераВсехОбъектовНаКлиенте();
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СохранитьКадастровыеНомера".
//
Процедура КомандаСохранитьКадастровыеНомера(Команда)
	
	ВыполняетсяСохранениеКадастровогоНомераПоВыбранномуОбъекту = ЗначениеЗаполнено(ПереданныйОбъект);
	
	Если ВыполняетсяСохранениеКадастровогоНомераПоВыбранномуОбъекту Тогда
		Если ПустаяСтрока(ТекущийКадастровыйНомер) Тогда
			ПоказатьПредупреждение(, "Не выбран кадастровый номер для сохранения.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСохраненныхКадастровыхНомеров = КомандаСохранитьКадастровыеНомераНаСервере();
	
	Оповестить("ОбновитьСведенияОКадастровыхНомерах");
	
	Если ИмеютсяНесохраненныеДанные Тогда
		
		ПоказатьПредупреждение(, "Не удалось сохранить кадастровые номера для некоторых объектов учета.");
		
	Иначе
		
		Если КоличествоСохраненныхКадастровыхНомеров = 0 Тогда
			ПоказатьПредупреждение(, "Нет данных для сохранения. Убедитесь, что новые кадастровые номера заполнены и отличаются от имеющихся в базе.");
		ИначеЕсли ВыполняетсяСохранениеКадастровогоНомераПоВыбранномуОбъекту Тогда
			Закрыть();
		Иначе
			ПоказатьПредупреждение(, "Кадастровые номера успешно сохранены.");
		КонецЕсли;
		
	КонецЕсли;
	
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Показать проблемные объекты".
//
Процедура КомандаПоказатьПроблемныеОбъекты(Команда)
	
	ИзменитьОтображениеПроблемныхОбъектов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Отмена".
//
Процедура КомандаОтмена(Команда)
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		Закрыть();
	Иначе
		
		Если ИмеютсяНесохраненныеДанные Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветОЗакрытииФормы", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, "Имеются несохраненные кадастровые номера. Всё равно закрыть форму?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИзменитьТокен".
//
Процедура КомандаИзменитьТокен(Команда)
	
	ОткрытьФорму("Обработка.УПЖКХ_ЗагрузкаКадастровыхНомеров.Форма.ФормаИзмененияТокена",, ЭтаФорма, Истина,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОТВЕТОВ НА ВОПРОСЫ В ДИАЛОГАХ

#Область ОбработчикиОтветовНаВопросыВДиалогах

&НаКлиенте
// Обработчик ответа на вопрос о перезаполнении таблицы объектов всеми объектами.
//
Процедура ОбработатьВопросОПерезаполненииТаблицыОбъектовВсемиОбъектами(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуОбъектов();
		ИмеютсяНесохраненныеДанные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа на вопрос о перезаполнении таблицы объектов всеми объектами без кадастровых номеров.
//
Процедура ОбработатьВопросОПерезаполненииТаблицыОбъектовОбъектамиБезКадастровыхНомеров(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуОбъектов(Ложь);
		ИмеютсяНесохраненныеДанные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа на вопрос о закрытии формы без сохранения кадастровых номеров.
//
Процедура ОбработатьОтветОЗакрытииФормы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора типа объекта учета при ручном добавлении.
//
Функция ОбработатьОтветОВыбореТипаОбъекта(Ответ, ДополнительныеПараметры) Экспорт
	
	Если НЕ Ответ = Неопределено тогда
		
		ИмяТипа = ПолучитьИмяТипа(Ответ.Значение);
		
		Если ИмяТипа = "УПЖКХ_Помещения" Тогда
			ОткрытьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОбработатьВыборОбъектаУчета", ЭтаФорма));
		ИначеЕсли ИмяТипа = "КВП_Здания" Тогда
			ОткрытьФорму("Справочник.КВП_Здания.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОбработатьВыборОбъектаУчета", ЭтаФорма));
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Изменяет отображение проблемных объектов в таблице объектов.
//
Процедура ИзменитьОтображениеПроблемныхОбъектов()
	
	УстановленОтборПроблемныхОбъектов                               = НЕ УстановленОтборПроблемныхОбъектов;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Пометка = УстановленОтборПроблемныхОбъектов;
	
	Если УстановленОтборПроблемныхОбъектов Тогда
		Элементы.ТаблицаОбъектов.ОтборСтрок = Новый ФиксированнаяСтруктура("КадастровыйНомерЗаполнен", Ложь);
	Иначе
		Элементы.ТаблицаОбъектов.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕХОДЫ МЕЖДУ СТРАНИЦАМИ

#Область ПереходыМеждуСтраницами

&НаСервере
// Выполняет переход на нужную страницу.
//
Функция ВыполнитьПереходПоСтраницам()
	
	Токен = Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПолучитьТокенДляAPIРосреестра();
	
	Если Параметры.Свойство("Объект") Тогда
		ПереданныйОбъект = Параметры.Объект;
	КонецЕсли;
	
	Если Токен = "" Тогда
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВводТокена;
		Элементы.КнопкаИзменитьТокен.Видимость       = Ложь;
		Элементы.КнопкаДалее.Видимость               = Истина;
	Иначе
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаКадастровыхНомеров;
		Элементы.КнопкаИзменитьТокен.Видимость       = Истина;
		Элементы.КнопкаДалее.Видимость               = Ложь;
		
		Если ЗначениеЗаполнено(ПереданныйОбъект) Тогда
			
			ТипОбъекта = ТипЗнч(ПереданныйОбъект);
			
			Если ТипОбъекта = Тип("СправочникСсылка.КВП_Здания") ИЛИ ТипОбъекта = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
				
				ТаблицаОбъектов.Очистить();
				
				ДобавитьОбъектВТаблицуОбъектов(ПереданныйОбъект);
				ЗаполнитьСведенияОТекущемОбъекте(ПереданныйОбъект);
				ОбновитьКадастровыеНомераТекущегоОбъектаНаСервере(ПереданныйОбъект, ПредставлениеТекущегоАдреса);
				УстановитьВидимостьЭлементовПриЗапускеИзФормыОбъектаУчета();
				
			КонецЕсли;
		Иначе
			ОпределитьТекущийСтатусВыполнения();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Устанавливает видимость элементов при запуске обработки напрямую из объекта учета.
//
Процедура УстановитьВидимостьЭлементовПриЗапускеИзФормыОбъектаУчета()
	
	Элементы.ТаблицаОбъектов.Видимость                           = Ложь;
	Элементы.КнопкаЗагрузитьКадастровыеНомера.Видимость          = Ложь;
	Элементы.ГруппаКадастровыйНомерОбъекта.Видимость             = Истина;
	Элементы.КнопкаСохранитьКадастровыеНомера.Заголовок          = "Сохранить кадастровый номер";
	Элементы.КнопкаСохранитьКадастровыеНомера.ЦветФона           = ПолучитьЦветВыделеннойКнопки();
	Элементы.ГруппаЗаполнить.Видимость                           = Ложь;
	Элементы.ПолеИндикаторПроцесса.Видимость                     = Ложь;
	Элементы.ДекорацияПояснениеПоляПредставленияАдреса.Видимость = Ложь;
	
	Если ТаблицаКадастровыхНомеровОбъекта.Количество() = 0 Тогда
		Элементы.ДекорацияЗаполнениеПоОбъектуНеОбнаруженоНомеров.Видимость        = Истина;
		Элементы.ДекорацияЗаполнениеПоОбъектуОбнаруженоНесколькоНомеров.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияЗаполнениеПоОбъектуНеОбнаруженоНомеров.Видимость        = Ложь;
		Элементы.ДекорацияЗаполнениеПоОбъектуОбнаруженоНесколькоНомеров.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТОКЕНОМ

#Область РаботаСТокеном

&НаСервере
// Проверяет правильность формата указанного токена.
//
Функция ПроверитьФорматТокена(ТокенДляAPI)
	
	Возврат Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПроверитьФорматТокена(ТокенДляAPI);
	
КонецФункции

&НаСервере
// Выполняет сохранение токена.
//
Процедура СохранитьТокен()
	
	Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.СохранитьТокен(Токен);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОБЪЕКТОВ УЧЕТА

#Область ЗаполнениеОбъектовУчета

&НаКлиенте
// Обработчик выбора объекта учета при ручном добавлении.
//
Процедура ОбработатьВыборОбъектаУчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		СтрокиДублей               = ТаблицаОбъектов.НайтиСтроки(Новый Структура("Объект", Результат));
		ИдентификаторТекущейСтроки = Элементы.ТаблицаОбъектов.ТекущиеДанные.ПолучитьИдентификатор();
		
		Если СтрокиДублей.Количество() = 0 Тогда
			
			ЗаполнитьОбъектУчетаВИмеющейсяСтроке(ИдентификаторТекущейСтроки, Результат);
			
		Иначе
			
			ЗаполнитьОбъектУчетаВИмеющейсяСтроке(ИдентификаторТекущейСтроки, Неопределено);
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Объект """ + Результат + """ уже есть в таблице!");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение здания в уже имеющейся строка таблицы зданий.
//
Процедура ЗаполнитьОбъектУчетаВИмеющейсяСтроке(ИдентификаторСтроки, ВыбранныйОбъект)
	
	СтрокаТаблицыОбъектов = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗаполнитьОбъектУчетаВТекущейСтроке(СтрокаТаблицыОбъектов, ВыбранныйОбъект);
	ЗаполнитьСведенияОТекущемОбъекте(ВыбранныйОбъект, СтрокаТаблицыОбъектов.ПредставлениеАдресаОбъекта);
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение здания в текущей строке таблицы зданий.
//
Процедура ЗаполнитьОбъектУчетаВТекущейСтроке(ПустаяСтрокаОбъекта, ВыбранныйОбъект)
	
	ПустаяСтрокаОбъекта.Объект                     = ВыбранныйОбъект;
	ПустаяСтрокаОбъекта.ПредставлениеАдресаОбъекта = Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПолучитьПредставлениеАдреса(ВыбранныйОбъект);
	ПустаяСтрокаОбъекта.ТекущийКадастровыйНомер    = ?(ВыбранныйОбъект = Неопределено, "", ВыбранныйОбъект.КадастровыйНомер);
	ПустаяСтрокаОбъекта.КадастровыйНомерСохранен   = Ложь;
	
	ПредставлениеТекущегоАдреса = ПустаяСтрокаОбъекта.ПредставлениеАдресаОбъекта;
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение таблицы объектов.
//
Процедура ЗаполнитьТаблицуОбъектов(ПолучатьОбъектыСКадастровымиНомерами = Истина, ПолучатьЗдания = Истина, ПолучатьПомещения = Истина)
	
	ТаблицаОбъектов.Очистить();
	
	ВыборкаОбъектов = ПолучитьОбъектыУчета(ПолучатьОбъектыСКадастровымиНомерами, ПолучатьЗдания, ПолучатьПомещения);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		ДобавитьОбъектВТаблицуОбъектов(ВыборкаОбъектов.Объект);
	КонецЦикла;
	
	Элементы.ТаблицаОбъектов.Обновить();
	
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаСервере
// Выполняет получение объектов учета для добавления в таблицу объектов.
//
Функция ПолучитьОбъектыУчета(ПолучатьОбъектыСКадастровымиНомерами, ПолучатьЗдания, ПолучатьПомещения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Объект,
	|	КВП_Здания.КадастровыйНомер КАК КадастровыйНомер
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	&ПолучатьЗдания
	|	И НЕ КВП_Здания.ПометкаУдаления
	|	И НЕ КВП_Здания.ЭтоГруппа
	|	И (&ПолучатьОбъектыСКадастровымиНомерами
	|			ИЛИ КВП_Здания.КадастровыйНомер = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_Помещения.Ссылка,
	|	УПЖКХ_Помещения.КадастровыйНомер
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	&ПолучатьПомещения
	|	И НЕ УПЖКХ_Помещения.ПометкаУдаления
	|	И (&ПолучатьОбъектыСКадастровымиНомерами
	|			ИЛИ УПЖКХ_Помещения.КадастровыйНомер = """")";
	
	Запрос.УстановитьПараметр("ПолучатьОбъектыСКадастровымиНомерами", ПолучатьОбъектыСКадастровымиНомерами);
	Запрос.УстановитьПараметр("ПолучатьЗдания",                       ПолучатьЗдания);
	Запрос.УстановитьПараметр("ПолучатьПомещения",                    ПолучатьПомещения);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
// Обрабатывает изменение объекта в таблице объектов.
//
Процедура ОбработатьИзменениеОбъектаВТаблицеОбъектов(НовыйОбъект, ИдентификаторТекущейСтроки, НоваяСтрока)
	
	ТекущаяСтрокаИсточника = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущаяСтрокаИсточника.КадастровыйНомерСохранен = Ложь;
	
	Если НоваяСтрока Тогда
		
		Если НЕ ТекущаяСтрокаИсточника = Неопределено Тогда
			
			ТекущаяСтрокаИсточника.Объект                  = НовыйОбъект;
			ТекущаяСтрокаИсточника.ТекущийКадастровыйНомер = НовыйОбъект.КадастровыйНомер;
			
			СтруктураПоиска                  = Новый Структура("Объект", НовыйОбъект);
			НайденныеСтрокиКадастровыхНомеров = Объект.ТаблицаЗагруженныхКадастровыхНомеров.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиКадастровыхНомеров.Количество() = 1 Тогда
				ТекущаяСтрокаИсточника.НовыйКадастровыйНомер = НайденныеСтрокиКадастровыхНомеров[0].КадастровыйНомер;
			Иначе
				ТекущаяСтрокаИсточника.НовыйКадастровыйНомер = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьСтатусТекущейСтроки(ТекущаяСтрокаИсточника, НоваяСтрока);
	
КонецПроцедуры

&НаСервере
// Добавляет объект в таблицу объектов.
//
Процедура ДобавитьОбъектВТаблицуОбъектов(ОбъектДляДобавления)
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	
	ЗаполнитьОбъектУчетаВТекущейСтроке(НоваяСтрока, ОбъектДляДобавления);
	ОпределитьСтатусТекущейСтроки(НоваяСтрока, Истина);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ ВЫБОРА ТИПОВ ОБЪЕКТОВ

#Область РаботаСПредставлениямиАдресов

&НаСервереБезКонтекста
// Формирует список типов объектов.
//
Функция ПолучитьСписокТиповОбъектов()
	
	СписокТиповОбъектов = Новый СписокЗначений;
	СписокТиповОбъектов.ЗагрузитьЗначения(Метаданные.Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ТабличныеЧасти.ТаблицаЗагруженныхКадастровыхНомеров.Реквизиты.Объект.Тип.Типы());
	
	Возврат СписокТиповОбъектов;
	
КонецФункции

&НаСервереБезКонтекста
// Формирует имя типа объекта.
//
Функция ПолучитьИмяТипа(Тип)
	
	Возврат Метаданные.НайтиПоТипу(Тип).Имя;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРЕДСТАВЛЕНИЯМИ АДРЕСОВ

#Область РаботаСПредставлениямиАдресов

&НаСервере
// Изменяет представление адреса текущего объекта по идентификатору строки объекта в таблице объектов.
//
Процедура ИзменитьПредставлениеАдресаТекущегоОбъекта(ИдентификаторСтроки, НовоеПредставлениеАдреса)
	
	СтрокаТаблицыОбъектов                            = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаТаблицыОбъектов.ПредставлениеАдресаОбъекта = НовоеПредставлениеАдреса;
	
КонецПроцедуры

&НаСервере
// Изменяет представление адреса первого объекта в таблице объектов.
//
Процедура ИзменитьПредставлениеАдресаПервогоОбъектаВТаблицеОбъектов(НовоеПредставлениеАдреса)
	
	СтрокаТаблицыОбъектов                            = ТаблицаОбъектов[0];
	СтрокаТаблицыОбъектов.ПредставлениеАдресаОбъекта = НовоеПредставлениеАдреса;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КАДАСТРОВЫХ НОМЕРОВ

#Область ЗагрузкаКадастровыхНомеров

&НаСервере
// Обновляет кадастровые номера текущего объекта.
//
Процедура ОбновитьКадастровыеНомераТекущегоОбъектаНаСервере(ОбъектДляЗаполнения, ПредставлениеАдресаОбъекта)
	
	ПройденоПроцентов = 0;
	
	ТаблицаТекущегоОбъекта = Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПолучитьТаблицуКадастровыхНомеровОбъекта(ПредставлениеАдресаОбъекта);
	
	УдалитьСтрокиЗагруженныхДанныхОбъекта(ОбъектДляЗаполнения);
	
	Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаТекущегоОбъекта, ОбъектДляЗаполнения, Объект.ТаблицаЗагруженныхКадастровыхНомеров);
	
	ЗаполнитьТаблицуКадастровыхНомеровОбъекта(ОбъектДляЗаполнения);
	ЗаполнитьНовыйКадастровыйНомерОбъекта(ОбъектДляЗаполнения);
	
	ПройденоПроцентов = 100;
	
КонецПроцедуры

&НаКлиенте
// Запускает выполнение заполнения кадастровых номеров всех объектов.
//
Процедура ЗаполнитьКадастровыеНомераВсехОбъектовНаКлиенте()
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		
		СтрокиЗданийСНезаполненнымКадастровымиНомерами     = ТаблицаОбъектов.НайтиСтроки(Новый Структура("КадастровыйНомерЗаполнен", Ложь));
		КоличествоСтрокСНезаполненнымиКадастровымиНомерами = СтрокиЗданийСНезаполненнымКадастровымиНомерами.Количество();
		
		Если КоличествоСтрокСНезаполненнымиКадастровымиНомерами = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для всех объектов учета в таблице уже заполнены кадастровые номера.");
			
		Иначе
			
			ПройденоПроцентов     = 0;
			ПроцентКаждогоОбъекта = 100 / КоличествоСтрокСНезаполненнымиКадастровымиНомерами;
			
			Объект.ТаблицаЗагруженныхКадастровыхНомеров.Очистить();
			
			Для каждого ТекСтрокаОбъекта из ТаблицаОбъектов Цикл
				Если ПустаяСтрока(ТекСтрокаОбъекта.НовыйКадастровыйНомер) Тогда
					ЗаполнитьКадастровыеНомераОбъектаНаСервере(ТекСтрокаОбъекта.Объект, ТекСтрокаОбъекта.ПредставлениеАдресаОбъекта);
					ПройденоПроцентов = ПройденоПроцентов + ПроцентКаждогоОбъекта;
				КонецЕсли;
			КонецЦикла;
			
			ПройденоПроцентов = 100;
			
			ЗаполнитьТаблицуКадастровыхНомеровОбъекта(ТекущийОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПереданныйОбъект) Тогда
		УстановитьВидимостьЭлементовПриЗапускеИзФормыОбъектаУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение кадастровых номеров всех объектов.
//
Процедура ЗаполнитьКадастровыеНомераОбъектаНаСервере(ТекущийОбъект, ПредставлениеАдресаОбъекта)
	
	ТаблицаТекущегоОбъекта = Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПолучитьТаблицуКадастровыхНомеровОбъекта(ПредставлениеАдресаОбъекта);
	
	Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаТекущегоОбъекта, ТекущийОбъект, Объект.ТаблицаЗагруженныхКадастровыхНомеров);
	
	ЗаполнитьНовыйКадастровыйНомерОбъекта(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение нового кадастрового номера объекта.
//
Процедура ЗаполнитьНовыйКадастровыйНомерОбъекта(ОбъектДляЗаполнения)
	
	СтрокиОбъекта = ТаблицаОбъектов.НайтиСтроки(Новый Структура("Объект", ОбъектДляЗаполнения));
	
	Если СтрокиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОбъекта = СтрокиОбъекта[0];
	
	СтрокиКадастровыхНомеровОбъекта          = Объект.ТаблицаЗагруженныхКадастровыхНомеров.НайтиСтроки(Новый Структура("Объект", ОбъектДляЗаполнения));
	КоличествоСтрокКадастровыхНомеровОбъекта = СтрокиКадастровыхНомеровОбъекта.Количество();
	
	Если НЕ КоличествоСтрокКадастровыхНомеровОбъекта = 0 Тогда
		ИмеютсяНесохраненныеДанные             = Истина;
		СтрокаОбъекта.КадастровыйНомерСохранен = Ложь;
	КонецЕсли;
	
	Если КоличествоСтрокКадастровыхНомеровОбъекта = 1 Тогда
		СтрокаОбъекта.НовыйКадастровыйНомер = СтрокиКадастровыхНомеровОбъекта[0].КадастровыйНомер;
	КонецЕсли;
	
	ОпределитьСтатусТекущейСтроки(СтрокаОбъекта);
	
КонецПроцедуры

&НаСервере
// Удаляет строки загруженных данных объекта.
//
Процедура УдалитьСтрокиЗагруженныхДанныхОбъекта(ОбъектДляУдаления)
	
	СтрокиОбъектаДляУдаления = Объект.ТаблицаЗагруженныхКадастровыхНомеров.НайтиСтроки(Новый Структура("Объект", ОбъектДляУдаления));
	
	Для каждого ТекСтрокаДляУдаления из СтрокиОбъектаДляУдаления Цикл
		Объект.ТаблицаЗагруженныхКадастровыхНомеров.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Заполняет таблицу кадастровых номеров объекта.
//
Процедура ЗаполнитьТаблицуКадастровыхНомеровОбъекта(ОбъектДляОтображения)
	
	ТаблицаКадастровыхНомеровОбъекта.Очистить();
	
	Если ЗначениеЗаполнено(ОбъектДляОтображения) Тогда
		
		СтрокиОбъекта = Объект.ТаблицаЗагруженныхКадастровыхНомеров.НайтиСтроки(Новый Структура("Объект", ОбъектДляОтображения));
		
		Для каждого ТекСтрока из СтрокиОбъекта Цикл
			НоваяСтрока = ТаблицаКадастровыхНомеровОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КАДАСТРОВЫХ НОМЕРОВ (ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ)

#Область ЗагрузкаКадастровыхНомеровВспомогательныеФункции

&НаСервере
// Выполняет заполнение сведений о текущем объекте.
//
Процедура ЗаполнитьСведенияОТекущемОбъекте(ОбъектВходящий, ТекущееПредставление = "")
	
	ТекущийОбъект = ОбъектВходящий;
	
	Если ПустаяСтрока(ТекущееПредставление) Тогда
		ПредставлениеТекущегоАдреса = Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПолучитьПредставлениеАдреса(ТекущийОбъект);
	Иначе
		ПредставлениеТекущегоАдреса = ТекущееПредставление;
	КонецЕсли;
	
	ЗаполнитьТаблицуКадастровыхНомеровОбъекта(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАПИСЬ НОВЫХ КАДАСТРОВЫХ НОМЕРОВ

#Область ЗаписьНовыхКадастровыхНомеров

&НаСервере
// Выполняет сохранение кадастровых номеров.
//
Функция КомандаСохранитьКадастровыеНомераНаСервере()
	
	СохраненоУспешно                        = Истина;
	КоличествоСохраненныхКадастровыхНомеров = 0;
	
	Для каждого ТекСтрокаОбъекта из ТаблицаОбъектов Цикл
		
		НовыйКадастровыйНомер = ТекСтрокаОбъекта.НовыйКадастровыйНомер;
		
		Если ПустаяСтрока(НовыйКадастровыйНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаОбъекта.ТекущийКадастровыйНомер = НовыйКадастровыйНомер Тогда
			
			ТекСтрокаОбъекта.КадастровыйНомерЗаполнен = Истина;
			ТекСтрокаОбъекта.КадастровыйНомерСохранен = Истина;
			ОпределитьСтатусТекущейСтроки(ТекСтрокаОбъекта);
			
			Продолжить;
			
		КонецЕсли;
		
		ОбъектДляИзменения                  = ТекСтрокаОбъекта.Объект.ПолучитьОбъект();
		ОбъектДляИзменения.КадастровыйНомер = НовыйКадастровыйНомер;
		
		Если КВП_ЗаписатьОбъект(ОбъектДляИзменения) Тогда
			ТекСтрокаОбъекта.ТекущийКадастровыйНомер  = НовыйКадастровыйНомер;
			ТекСтрокаОбъекта.КадастровыйНомерЗаполнен = Истина;
			ТекСтрокаОбъекта.КадастровыйНомерСохранен = Истина;
			ОпределитьСтатусТекущейСтроки(ТекСтрокаОбъекта);
			
			КоличествоСохраненныхКадастровыхНомеров = КоличествоСохраненныхКадастровыхНомеров + 1;
		Иначе
			ТекСтрокаОбъекта.КадастровыйНомерЗаполнен = Истина;
			СохраненоУспешно                          = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмеютсяНесохраненныеДанные = НЕ СохраненоУспешно;
	
	Возврат КоличествоСохраненныхКадастровыхНомеров;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАГРУЖЕННЫМИ КАДАСТРОВЫМИ НОМЕРАМИ

#Область РаботаСЗагруженнымиКадастровымиНомерами

&НаСервере
// Обработчик выбора кадастрого номера в таблице загруженных кадастровых номеров.
//
Процедура ОбработкаВыбораКадастровогоНомераВТаблицеКадастровыхНомеров(ВыбранныйКадастровыйНомер, ИдентификаторТекущейСтрокиОбъекта = Неопределено)
	
	Если ИдентификаторТекущейСтрокиОбъекта = Неопределено Тогда
		СтрокаТекущегоОбъекта = ТаблицаОбъектов[0];
	Иначе
		СтрокаТекущегоОбъекта = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиОбъекта);
	КонецЕсли;
	
	Если НЕ СтрокаТекущегоОбъекта.НовыйКадастровыйНомер = ВыбранныйКадастровыйНомер Тогда
		СтрокаТекущегоОбъекта.НовыйКадастровыйНомер    = ВыбранныйКадастровыйНомер;
		СтрокаТекущегоОбъекта.КадастровыйНомерСохранен = Ложь;
		
		ИмеютсяНесохраненныеДанные = Истина;
		ТекущийКадастровыйНомер    = ВыбранныйКадастровыйНомер;
		
		ОпределитьСтатусТекущейСтроки(СтрокаТекущегоОбъекта);
		ОпределитьТекущийСтатусВыполнения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СТАТУСОВ ЗАПОЛНЕНИЯ КАДАСТРОВЫХ НОМЕРОВ

#Область ОпределениеСтатусовЗаполненияКадастровыхНомеров

&НаСервере
// Определяет статус заполнения текущей строки.
//
Процедура ОпределитьСтатусТекущейСтроки(СтрокаТаблицыОбъектов, НоваяСтрока = Ложь)
	
	СтрокаТаблицыОбъектов.КадастровыйНомерЗаполнен = Ложь;
	
	Если СтрокаТаблицыОбъектов.КадастровыйНомерСохранен Тогда
		
		СтрокаТаблицыОбъектов.КадастровыйНомерЗаполнен = Истина;
		СтрокаТаблицыОбъектов.СтатусЗаполнения         = "Кадастровый номер сохранен";
		
	Иначе
		
		НовыйКадастровыНомерНеЗаполнен = ПустаяСтрока(СтрокаТаблицыОбъектов.НовыйКадастровыйНомер);
		
		Если НовыйКадастровыНомерНеЗаполнен Тогда
			
			СтрокиОбъекта                           = Объект.ТаблицаЗагруженныхКадастровыхНомеров.НайтиСтроки(Новый Структура("Объект", СтрокаТаблицыОбъектов.Объект));
			КоличествоЗагруженныхКадастровыхНомеров = СтрокиОбъекта.Количество();
			
			Если КоличествоЗагруженныхКадастровыхНомеров = 0 Тогда
				Если НоваяСтрока Тогда
					СтрокаТаблицыОбъектов.СтатусЗаполнения = "Загрузка не выполнялась";
				Иначе
					СтрокаТаблицыОбъектов.СтатусЗаполнения = "Кадастровых номеров не найдено";
				КонецЕсли;
			Иначе
				СтрокаТаблицыОбъектов.СтатусЗаполнения = "Найдено несколько кадастровых номеров";
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицыОбъектов.КадастровыйНомерЗаполнен = Истина;
			СтрокаТаблицыОбъектов.СтатусЗаполнения         = "Кадастровый номер заполнен";
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Определяет текущий статус выполнения заполнения кадастровых номеров.
//
Процедура ОпределитьТекущийСтатусВыполнения()
	
	Если НЕ ЗначениеЗаполнено(ПереданныйОбъект) Тогда
		
		КоличествоОбъектовВсего = ТаблицаОбъектов.Количество();
		
		Если КоличествоОбъектовВсего = 0 Тогда
			СостояниеНетОбъектовВТаблице();
		Иначе
			
			СтрокиСНезагружавшимисяНомерами = ТаблицаОбъектов.НайтиСтроки(Новый Структура("СтатусЗаполнения", "Загрузка не выполнялась"));
			
			КоличествоСтрокСНезагруженнымиНомерами = СтрокиСНезагружавшимисяНомерами.Количество();
			
			// Ни по одному объекту не загружались кададстровые номера.
			Если КоличествоСтрокСНезагруженнымиНомерами = КоличествоОбъектовВсего Тогда
				СостояниеНеЗагружалисьКадастровыеНомера();
			// Не для всех загружались кадастровые номера.
			ИначеЕсли НЕ КоличествоСтрокСНезагруженнымиНомерами = 0 Тогда
				СостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам();
			Иначе
				
				СтрокиСЗаполненнымиНомерами = ТаблицаОбъектов.НайтиСтроки(Новый Структура("КадастровыйНомерЗаполнен", Истина));
				СтрокиССохраненнымиНомерами = ТаблицаОбъектов.НайтиСтроки(Новый Структура("КадастровыйНомерСохранен", Истина));
				
				КоличествоОбъектовЗаполненных = СтрокиСЗаполненнымиНомерами.Количество();
				КоличествоОбъектовСохраненных = СтрокиССохраненнымиНомерами.Количество();
				
				// Все кадастровые номера заполнены.
				Если КоличествоОбъектовЗаполненных = КоличествоОбъектовВсего Тогда
					
					// Все заполнены и сохранены.
					Если КоличествоОбъектовЗаполненных = КоличествоОбъектовСохраненных Тогда
						СостояниеСохраненоУспешно();
					// Все заполнены, но не все сохранены.
					Иначе
						СостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения();
					КонецЕсли;
					
				// Нет заполненных и нет загруженных кадастровых номеров.
				ИначеЕсли КоличествоОбъектовЗаполненных = 0 И Объект.ТаблицаЗагруженныхКадастровыхНомеров.Количество() = 0 Тогда
					
					СостояниеНеЗагружалисьКадастровыеНомера();
					
				// Заполнены не все, но заполненные есть.
				Иначе
					
					СостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер();
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Нет объектов в таблице".
//
Процедура СостояниеНетОбъектовВТаблице()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                               = Истина;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомера.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                                  = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветВыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКадастровыеНомера.ЦветФона               = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКадастровыеНомера.ЦветФона               = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКадастровыеНомера.Доступность               = Ложь;
	Элементы.КнопкаСохранитьКадастровыеНомера.Доступность               = Ложь;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Не загружались кадастровые номера по всем объектам".
//
Процедура СостояниеНеЗагружалисьКадастровыеНомера()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                               = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомера.Видимость                    = Истина;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                                  = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКадастровыеНомера.ЦветФона               = ПолучитьЦветВыделеннойКнопки();
	Элементы.КнопкаСохранитьКадастровыеНомера.ЦветФона               = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКадастровыеНомера.Доступность               = Истина;
	Элементы.КнопкаСохранитьКадастровыеНомера.Доступность               = Ложь;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Не загружались кадастровые номера по некоторым объектам".
//
Процедура СостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                               = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомера.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам.Видимость = Истина;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                                  = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКадастровыеНомера.ЦветФона               = ПолучитьЦветВыделеннойКнопки();
	Элементы.КнопкаСохранитьКадастровыеНомера.ЦветФона               = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКадастровыеНомера.Доступность               = Истина;
	Элементы.КнопкаСохранитьКадастровыеНомера.Доступность               = Истина;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Не для всех объектов заполнены кадастровые номера".
//
Процедура СостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                               = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомера.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер.Видимость         = Истина;
	Элементы.ДекорацияСостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                                  = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКадастровыеНомера.ЦветФона               = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКадастровыеНомера.ЦветФона               = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветВыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКадастровыеНомера.Доступность               = Истина;
	Элементы.КнопкаСохранитьКадастровыеНомера.Доступность               = Истина;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Все кадастровые номера заполнены, но не сохранены".
//
Процедура СостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                               = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомера.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения.Видимость = Истина;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                                  = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКадастровыеНомера.ЦветФона               = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКадастровыеНомера.ЦветФона               = ПолучитьЦветВыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКадастровыеНомера.Доступность               = Истина;
	Элементы.КнопкаСохранитьКадастровыеНомера.Доступность               = Истина;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
	Если УстановленОтборПроблемныхОбъектов Тогда
		ИзменитьОтображениеПроблемныхОбъектов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Все кадастровые номера заполнены и успешно сохранены".
//
Процедура СостояниеСохраненоУспешно()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                               = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомера.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКадастровыеНомераПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКадастровыйНомер.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКадастровыеНомераЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                                  = Истина;
	
	Элементы.ГруппаЗаполнить.ЦветФона                  = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКадастровыеНомера.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКадастровыеНомера.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКадастровыеНомера.Доступность = Истина;
	Элементы.КнопкаСохранитьКадастровыеНомера.Доступность = Истина;
	
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
	Если УстановленОтборПроблемныхОбъектов Тогда
		ИзменитьОтображениеПроблемныхОбъектов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Возвращает цвет кнопки, актуальной согласно текущему состоянию.
//
Функция ПолучитьЦветВыделеннойКнопки()
	
	Возврат Новый Цвет(255, 215, 0);
	
КонецФункции

&НаСервере
// Возвращает цвет кнопки, неактуальной согласно текущему состоянию.
//
Функция ПолучитьЦветНевыделеннойКнопки()
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

#КонецОбласти
