
///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ КАДАСТРОВЫХ НОМЕРОВ ПО ОБЪЕКТУ

#Область ПолучениеКадастровыхНомеровПоОбъекту

// Получает кадастровый номер объекта и указывает, нужно ли открывать форму обработки.
//
Функция ПолучитьКадастровыйНомерПоОбъекту(ОбъектУчета) Экспорт
	
	СтруктураРезультата = Новый Структура("ВыполненоУспешно, КадастровыйНомер", Ложь, "");
	
	Если НЕ ПустаяСтрока(ПолучитьТокенДляAPIРосреестра()) Тогда
		
		ПредставлениеАдресаОбъекта           = ПолучитьПредставлениеАдреса(ОбъектУчета);
		ТаблицаЗагруженныхКадастровыхНомеров = ПолучитьТаблицуКадастровыхНомеровОбъекта(ПредставлениеАдресаОбъекта);
		ТаблицаОтобранныхКадастровыхНомеров  = ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаЗагруженныхКадастровыхНомеров, ОбъектУчета);
		
		Если ТаблицаОтобранныхКадастровыхНомеров.Количество() = 1 Тогда
			СтруктураРезультата.ВыполненоУспешно = Истина;
			СтруктураРезультата.КадастровыйНомер = ТаблицаОтобранныхКадастровыхНомеров[0].КадастровыйНомер;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Заполняет строки загруженных данных объекта.
//
Функция ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаПолученныхДанных, ОбъектДляЗаполнения = Неопределено, ТаблицаДляЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаДляЗаполнения = Неопределено Тогда
		ТаблицаДляЗаполнения = ТаблицаПолученныхДанных.СкопироватьКолонки();
	КонецЕсли;
	
	ЯвляетсяПомещением = ТипЗнч(ОбъектДляЗаполнения) = Тип("СправочникСсылка.УПЖКХ_Помещения");
	
	Если ЯвляетсяПомещением Тогда
		
		ДанныеДляЗаполнения = ТаблицаПолученныхДанных.НайтиСтроки(Новый Структура("Тип", "Помещение"));
		
		Если ДанныеДляЗаполнения.Количество() = 0 Тогда
			ДанныеДляЗаполнения = ТаблицаПолученныхДанных;
		КонецЕсли;
		
	Иначе
		
		ДанныеДляЗаполнения = ТаблицаПолученныхДанных;
		
	КонецЕсли;
	
	Для каждого ТекСтрокаЗагруженныхДанных из ДанныеДляЗаполнения Цикл
		Если ЯвляетсяПомещением ИЛИ НЕ ТекСтрокаЗагруженныхДанных.Тип = "Помещение" Тогда
			
			НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЗагруженныхДанных);
			НоваяСтрока.Объект = ОбъектДляЗаполнения;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляЗаполнения;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТОКЕНОМ

#Область РаботаСТокеном

// Получает токена для работы с API Росреестра.
//
Функция ПолучитьТокенДляAPIРосреестра() Экспорт
	
	ТокенДляAPI = Константы.УПЖКХ_ТокенНаСайтеРосреестра.Получить();
	
	Если ПроверитьФорматТокена(СокрЛП(ТокенДляAPI)) Тогда
		Возврат ТокенДляAPI;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Проверяет правильность формата указанного токена.
//
Функция ПроверитьФорматТокена(ТокенДляAPI) Экспорт
	
	ТокенИмеетПравильныйФормат = НЕ ПустаяСтрока(ТокенДляAPI);
	
	Возврат ТокенИмеетПравильныйФормат;
	
КонецФункции

// Выполняет сохранение токена.
//
Процедура СохранитьТокен(ТокенДляAPI) Экспорт
	
	Константы.УПЖКХ_ТокенНаСайтеРосреестра.Установить(ТокенДляAPI);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С АДРЕСАМИ

#Область РаботаСАдресами

// Формирует представление адреса объекта учета.
//
Функция ПолучитьПредставлениеАдреса(Объект) Экспорт
	
	ПредставлениеАдреса = "";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		ПредставлениеАдреса = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Объект);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		ПредставлениеАдреса = ПолучитьПредставлениеАдресаПомещения(Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Объект.Владелец), Объект);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

// Определяет адрес квартиры, включающий адрес дома.
//
// Параметры
//  Квартира  – СправочникСсылка.УПЖКХ_Помещения – квартира, для которой определяется адрес.
//
// Возвращаемое значение:
//  Строка – адрес квартиры, включающий адрес дома.
//
Функция ПолучитьПредставлениеАдресаПомещения(АдресДома, Помещение)
	
	Адрес = АдресДома + ", " + НРег(Помещение);
	
	Возврат Адрес;
	
КонецФункции  //ПолучитьПредставлениеАдресаПомещения()

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КАДАСТРОВЫХ НОМЕРОВ

#Область ЗагрузкаКадастровыхНомеров

// Получает таблицу кадастровых номеров объекта.
//
Функция ПолучитьТаблицуКадастровыхНомеровОбъекта(ПредставлениеАдресаОбъекта) Экспорт
	
	ТаблицаКадастровыхНомеров = ПолучитьНовуюТаблицуЗагруженныхКадастровыхНомеров();
	
	Если НЕ ПустаяСтрока(СокрЛП(ПредставлениеАдресаОбъекта)) Тогда
		ПолучитьКадастровыеНомераПоАдресу(ПредставлениеАдресаОбъекта, ТаблицаКадастровыхНомеров);
	КонецЕсли;
	
	Возврат ТаблицаКадастровыхНомеров;
	
КонецФункции

// Получает кадастровые номера по представлению адреса.
//
Процедура ПолучитьКадастровыеНомераПоАдресу(ПредставлениеАдресаОбъекта, ТаблицаКадастровыхНомеров)
	
	ОбработанныйАдрес = "query=" + ОтформатироватьПредставлениеАдреса(ПредставлениеАдресаОбъекта);
	
	Попытка
		
		мHTTPСоединение = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьHTTPСоединение("apirosreestr.ru", "", "", Истина, 120);
		
		ЗаголовкиHTTP = Новый Соответствие;
		ЗаголовкиHTTP.Вставить("Connection",   "keep-alive");
		ЗаголовкиHTTP.Вставить("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
		ЗаголовкиHTTP.Вставить("Token",        ПолучитьТокенДляAPIРосреестра());
		ЗаголовкиHTTP.Вставить("User-Agent",   УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьПредставлениеАгентаДляСайта());
		
		ЗапросHTTP = Новый HTTPЗапрос("/api/cadaster/search", ЗаголовкиHTTP);
		ЗапросHTTP.УстановитьТелоИзСтроки(ОбработанныйАдрес);
		ОтветHTTP  = мHTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
		Ответ      = СокрЛ(ОтветHTTP.ПолучитьТелоКакСтроку());
		
		СтруктураОтвета = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьСтруктуруОбъектаJSON(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Строка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтруктураОтвета);
		Иначе
			Если СтруктураОтвета.Свойство("found") И НЕ СтруктураОтвета.found = 0 Тогда
				
				Для каждого ТекОбъект из СтруктураОтвета.objects Цикл
					
					НоваяСтрока = ТаблицаКадастровыхНомеров.Добавить();
					НоваяСтрока.Адрес            = ТекОбъект.ADDRESS;
					НоваяСтрока.КадастровыйНомер = ТекОбъект.CADNOMER;
					НоваяСтрока.Тип              = ТекОбъект.TYPE;
					НоваяСтрока.Площадь          = ТекОбъект.AREA;
					НоваяСтрока.Категория        = ТекОбъект.CATEGORY;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить кадастровые номера по объекту: " + ПредставлениеАдресаОбъекта);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КАДАСТРОВЫХ НОМЕРОВ (ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ)

#Область ЗагрузкаКадастровыхНомеровВспомогательныеФункции

// Выполняет форматирование представления адреса перед отправкой на сервис Росреестра.
//
Функция ОтформатироватьПредставлениеАдреса(ПредставлениеАдресаОбъекта)
	
	СтрокаДляПередачи = НРег(ПредставлениеАдресаОбъекта);
	
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, ".", " ");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, ",", " , ");
	
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " переулок ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " проспект ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " бульвар ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " площадь ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " деревня ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " поселок ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " проезд ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " корпус ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " город ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " улица ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " пр-кт ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " сквер ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " парк ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " корп ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " б-р ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " р-н ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " дом ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " пер ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " пгт ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " пл ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " ст ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " ул ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " кв ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " оф ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " г ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " д ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " п ", "");
	СтрокаДляПередачи = СтрЗаменить(СтрокаДляПередачи, " №", "");
	
	Возврат СтрокаДляПередачи;
	
КонецФункции

// Получает новую таблицу загруженных кадастровых номеров..
//
Функция ПолучитьНовуюТаблицуЗагруженныхКадастровыхНомеров()
	
	ТаблицаКадастровыхНомеров = Новый ТаблицаЗначений;
	ТаблицаКадастровыхНомеров.Колонки.Добавить("Объект");
	ТаблицаКадастровыхНомеров.Колонки.Добавить("Адрес");
	ТаблицаКадастровыхНомеров.Колонки.Добавить("КадастровыйНомер");
	ТаблицаКадастровыхНомеров.Колонки.Добавить("Тип");
	ТаблицаКадастровыхНомеров.Колонки.Добавить("Площадь");
	ТаблицаКадастровыхНомеров.Колонки.Добавить("Категория");
	
	Возврат ТаблицаКадастровыхНомеров;
	
КонецФункции

#КонецОбласти
