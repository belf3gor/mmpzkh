
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура производит заполнение табличной части "СписокДокументов".
//
Процедура ЗаполнитьДокументыВводаОстатков()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ВводНачальногоСальдо.Ссылка КАК Документ
	|ИЗ
	|	Документ.КВП_ВводНачальногоСальдо КАК КВП_ВводНачальногоСальдо
	|ГДЕ
	|	КВП_ВводНачальногоСальдо.Организация = &Организация
	|	И КВП_ВводНачальногоСальдо.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ВводНачальногоСальдо.Дата,
	|	КВП_ВводНачальногоСальдо.Номер";
	
	Объект.СписокДокументов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьДокументыВводаОстатков()

&НаСервере
// Процедура производит заполнение табличной части "Остатки" по данным табличной части "СписокДокументов".
//
Процедура ЗаполнитьДанныеПоОстаткам()
	
	ТаблицаСпискаДокументов = Объект.СписокДокументов.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("ДатаОстатков",     КонецДня(Объект.ДатаВводаОстатков));
	Запрос.УстановитьПараметр("СписокДокументов", ТаблицаСпискаДокументов.ВыгрузитьКолонку("Документ"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Период,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ЛицевойСчет,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.СуммаНачисленияОборот) КАК СуммаОстатка
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(, , Регистратор, Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Регистратор В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Период
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.СуммаНачисленияОборот) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент КАК Контрагент,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Договор КАК Договор
	|ПОМЕСТИТЬ СведенияДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|ГДЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				Остатки.ЛицевойСчет
	|			ИЗ
	|				Остатки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументРасчетовСКонтрагентом.Ссылка,
	|	ДокументРасчетовСКонтрагентом.Контрагент,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента
	|ПОМЕСТИТЬ ДокументыРасчетовСКонтрагентами
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДокументРасчетовСКонтрагентом.Дата) КАК Дата,
	|			ДокументРасчетовСКонтрагентом.Контрагент КАК Контрагент,
	|			ДокументРасчетовСКонтрагентом.ДоговорКонтрагента КАК ДоговорКонтрагента
	|		ИЗ
	|			Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|		ГДЕ
	|			ДокументРасчетовСКонтрагентом.Организация = &Организация
	|			И ДокументРасчетовСКонтрагентом.Контрагент В
	|					(ВЫБРАТЬ
	|						СведенияДляВзаиморасчетов.Контрагент
	|					ИЗ
	|						СведенияДляВзаиморасчетов)
	|			И ДокументРасчетовСКонтрагентом.ДоговорКонтрагента В
	|					(ВЫБРАТЬ
	|						СведенияДляВзаиморасчетов.Договор
	|					ИЗ
	|						СведенияДляВзаиморасчетов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументРасчетовСКонтрагентом.ДоговорКонтрагента,
	|			ДокументРасчетовСКонтрагентом.Контрагент) КАК ДатыПоследнихДокументов
	|		ПО ДокументРасчетовСКонтрагентом.Контрагент = ДатыПоследнихДокументов.Контрагент
	|			И ДокументРасчетовСКонтрагентом.ДоговорКонтрагента = ДатыПоследнихДокументов.ДоговорКонтрагента
	|			И ДокументРасчетовСКонтрагентом.Дата = ДатыПоследнихДокументов.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СведенияДляВзаиморасчетов.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(СведенияДляВзаиморасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	ДокументыРасчетовСКонтрагентами.Ссылка КАК Документ,
	|	СУММА(Остатки.СуммаОстатка) КАК СуммаОстатка
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СведенияДляВзаиморасчетов КАК СведенияДляВзаиморасчетов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДокументыРасчетовСКонтрагентами КАК ДокументыРасчетовСКонтрагентами
	|			ПО СведенияДляВзаиморасчетов.Контрагент = ДокументыРасчетовСКонтрагентами.Контрагент
	|				И СведенияДляВзаиморасчетов.Договор = ДокументыРасчетовСКонтрагентами.ДоговорКонтрагента
	|		ПО Остатки.ЛицевойСчет = СведенияДляВзаиморасчетов.ЛицевойСчет
	|			И (СведенияДляВзаиморасчетов.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					СведенияДляВзаиморасчетов.Период
	|				ИЗ
	|					СведенияДляВзаиморасчетов
	|				ГДЕ
	|					Остатки.Период >= СведенияДляВзаиморасчетов.Период
	|					И Остатки.ЛицевойСчет = СведенияДляВзаиморасчетов.ЛицевойСчет
	|				УПОРЯДОЧИТЬ ПО
	|					СведенияДляВзаиморасчетов.Период УБЫВ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыРасчетовСКонтрагентами.Ссылка,
	|	ЕСТЬNULL(СведенияДляВзаиморасчетов.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ЕСТЬNULL(СведенияДляВзаиморасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Объект.Остатки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьДанныеПоОстаткам()

&НаСервере
// Процедура заполняет счета учета расчетов с контрагентами.
//
Процедура ЗаполнитьСчетаУчетаРасчетовСКонтрагентами()
	
	Для Каждого СтрокаТабличнойЧасти ИЗ Объект.Остатки Цикл
		
		Контрагент         = СтрокаТабличнойЧасти.Контрагент;
		ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Контрагент, ДоговорКонтрагента);
		
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			
		КонецЕсли;
		
		Если НЕ мСписокСчетов.НайтиПоЗначению(СокрЛП(СчетУчетаРасчетов.Код)) = Неопределено Тогда
			
			СтрокаТабличнойЧасти.СчетУчета = СчетУчетаРасчетов;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаРасчетовСКонтрагентами()

&НаСервере
// Процедура формирует список 
//
Функция СформироватьСписокСчетов()
	
	мСписокРазделов = Новый СписокЗначений;
	мСписокРазделов.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками);
	мСписокРазделов.Добавить(Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами);
	
	ТаблицаСчетовРазделовУчета = Новый ТаблицаЗначений;
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаГруппы");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("Счета");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаИсключения");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("РазделУчета");
	
	СписокСчетовРазделовУчета = Документы.ВводНачальныхОстатков.ПолучитьМакет("СписокСчетовРазделовУчета");
	
	ТаблицаСоответствий = СписокСчетовРазделовУчета.ПолучитьОбласть("Строки|Колонки");
	
	Для Строка = 1 По ТаблицаСоответствий.ВысотаТаблицы Цикл
		
		ИмяРазделаУчета = ТаблицаСоответствий.Область("R" + Строка + "C6").Текст;
		
		РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков[ИмяРазделаУчета];
		
		Если мСписокРазделов.НайтиПоЗначению(РазделУчета) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСчетовРазделовУчета.Добавить();
		НоваяСтрока.СчетаГруппы     = ТаблицаСоответствий.Область("R" + Строка + "C1").Текст;
		НоваяСтрока.Счета           = ТаблицаСоответствий.Область("R" + Строка + "C2").Текст;
		НоваяСтрока.СчетаИсключения = ТаблицаСоответствий.Область("R" + Строка + "C3").Текст;
		НоваяСтрока.РазделУчета     = РазделУчета;
		
	КонецЦикла;
	
	мТаблицаСчетов.Очистить();
	
	мСписокСчетов.Очистить();
	
	Для Каждого СтрокаТаблицыРазделовУчета ИЗ ТаблицаСчетовРазделовУчета Цикл
		
		СчетаГруппы     = СтрокаТаблицыРазделовУчета.СчетаГруппы;
		Счета           = СтрокаТаблицыРазделовУчета.Счета;
		СчетаИсключения = СтрокаТаблицыРазделовУчета.СчетаИсключения;
		
		ВыборкаПланаСчетов = ПланыСчетов.Хозрасчетный.Выбрать();
		
		Пока ВыборкаПланаСчетов.Следующий() Цикл
			
			Если ВыборкаПланаСчетов.ЗапретитьИспользоватьВПроводках Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПланаСчетов.Код) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(СчетаГруппы, Лев(Строка(ВыборкаПланаСчетов.Код), 2)) > 0 Тогда
				
				Если Найти(СчетаИсключения, """" + ВыборкаПланаСчетов.Код + """") = 0 Тогда
					
					мСписокСчетов.Добавить(СокрЛП(ВыборкаПланаСчетов.Код), СокрЛП(ВыборкаПланаСчетов.Код) + " (" + СокрЛП(ВыборкаПланаСчетов.Наименование) + ")", ВыборкаПланаСчетов.ПометкаУдаления);
					
					НоваяСтрокаСчета = мТаблицаСчетов.Добавить();
					НоваяСтрокаСчета.Счет        = ВыборкаПланаСчетов.Ссылка;
					НоваяСтрокаСчета.ВидСчета    = ВыборкаПланаСчетов.Ссылка.Вид;
					НоваяСтрокаСчета.РазделУчета = СтрокаТаблицыРазделовУчета.РазделУчета;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Найти(Счета, """" + ВыборкаПланаСчетов.Код + """") <> 0 Тогда
				
				мСписокСчетов.Добавить(СокрЛП(ВыборкаПланаСчетов.Код), СокрЛП(ВыборкаПланаСчетов.Код) + " (" + СокрЛП(ВыборкаПланаСчетов.Наименование) + ")", ВыборкаПланаСчетов.ПометкаУдаления);
				
				НоваяСтрокаСчета = мТаблицаСчетов.Добавить();
				НоваяСтрокаСчета.Счет        = ВыборкаПланаСчетов.Ссылка;
				НоваяСтрокаСчета.ВидСчета    = ВыборкаПланаСчетов.Ссылка.Вид;
				НоваяСтрокаСчета.РазделУчета = СтрокаТаблицыРазделовУчета.РазделУчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат мСписокСчетов;
	
КонецФункции // СформироватьСписокСчетов()

&НаСервере
// Процедура формирует типовые документы ввода начальных остатков.
//
Процедура СформироватьДокументыВводаНачальныхОстатков()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Остатки",       Объект.Остатки.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСчетов", мТаблицаСчетов.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСчетов.РазделУчета,
	|	ТаблицаСчетов.Счет,
	|	ТаблицаСчетов.ВидСчета
	|ПОМЕСТИТЬ ТаблицаСчетов
	|ИЗ
	|	&ТаблицаСчетов КАК ТаблицаСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.СчетУчета,
	|	Остатки.Контрагент,
	|	Остатки.ДоговорКонтрагента,
	|	Остатки.Документ,
	|	Остатки.СуммаОстатка
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	&Остатки КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетов.РазделУчета КАК РазделУчета,
	|	Остатки.СчетУчета,
	|	Остатки.Контрагент,
	|	Остатки.ДоговорКонтрагента,
	|	Остатки.Документ,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетов.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|				ИЛИ ТаблицаСчетов.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|					И Остатки.СуммаОстатка > 0
	|			ТОГДА Остатки.СуммаОстатка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетов.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|				ИЛИ ТаблицаСчетов.ВидСчета = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|					И Остатки.СуммаОстатка < 0
	|			ТОГДА -Остатки.СуммаОстатка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКт
	|ИЗ
	|	ТаблицаСчетов КАК ТаблицаСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ТаблицаСчетов.Счет = Остатки.СчетУчета
	|ИТОГИ ПО
	|	РазделУчета";
	
	ВыборкаРазделов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРазделов.Следующий() Цикл
		
		ДокументОстатка = Документы.ВводНачальныхОстатков.СоздатьДокумент();
		ДокументОстатка.Дата                        = Объект.ДатаВводаОстатков;
		ДокументОстатка.Организация                 = Объект.Организация;
		ДокументОстатка.РазделУчета                 = ВыборкаРазделов.РазделУчета;
		ДокументОстатка.ОтражатьВБухгалтерскомУчете = Истина;
		ДокументОстатка.Комментарий                 = "# Создан автоматически по данным остатков ЖКХ";
		ДокументОстатка.Ответственный               = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("глТекущийПользователь");
		
		ВыборкаОстатков = ВыборкаРазделов.Выбрать();
		
		Пока ВыборкаОстатков.Следующий() Цикл
			
			НоваяСтрока = ДокументОстатка.РасчетыСКонтрагентами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОстатков);
			
		КонецЦикла;
		
		Если НЕ ДокументОстатка.РасчетыСКонтрагентами.Количество() = 0 Тогда
			
			Если НЕ КВП_ЗаписатьОбъект(ДокументОстатка, РежимЗаписиДокумента.Проведение) Тогда
				
				КВП_ЗаписатьОбъект(ДокументОстатка, РежимЗаписиДокумента.Запись)
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументОстатка.Ссылка) Тогда
			
			НоваяСтрокаДокумента = Объект.ДокументыВводаОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумента, ДокументОстатка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДокументыВводаНачальныхОстатков()

&НаСервере
// Процедура формирует документ расчетов с контрагентом для переданных контрагента и договора.
//
Функция СформироватьДокументРасчетовСКонтрагентом(Контрагент, ДоговорКонтрагента)
	
	Док = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	Док.Дата               = Объект.ДатаВводаОстатков;
	Док.Организация        = Объект.Организация;
	Док.Контрагент         = Контрагент;
	Док.ДоговорКонтрагента = ДоговорКонтрагента;
	
	КВП_ЗаписатьОбъект(Док, РежимЗаписиДокумента.Запись);
	
	Возврат ?(НЕ Док.Ссылка.Пустая(), Док.Ссылка, Неопределено);
	
КонецФункции // СформироватьДокументРасчетаСКонтрагентами()

&НаСервере
// Получает дату ввода начальных остатков по данным регистра "ДатыВводаНачальныхОстатков".
//
Процедура ПолучитьДатуНачалаУчета()

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Объект.Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		Объект.ДатаВводаОстатков = МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков;
	Иначе
		Объект.ДатаВводаОстатков = '00010101';
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДатуНачалаУчета()

&НаСервере
// Производит запись даты ввода начальных остатков в регист "ДатыВводаНачальныхОстатков".
//
Процедура УстановитьДатуНачалаУчета(ДатаНачалаУчета)
	
	Объект.ДатаВводаОстатков = ДатаНачалаУчета;
	
	// Если в регистре уже есть записи, то не перезаписываем.
	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Объект.Организация;
	МенеджерЗаписиРегистра.Прочитать();
	
	Если НЕ МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Организация = Объект.Организация;
	КонецЕсли;
	
	МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = ДатаНачалаУчета;
	КВП_ЗаписатьОбъект(МенеджерЗаписиРегистра);
	
КонецПроцедуры // УстановитьДатуНачалаУчета()

&НаКлиенте
// Производит обновление данных на форме обработки.
//
Процедура ОбновитьФорму()
	
	УстановитьВидимость();
	
	ПоказатьПодсказку();
	
КонецПроцедуры // ОбновитьФорму()

&НаСервере
// Выводит подсказку по вводу начальных остатков по данным ЖКХ.
//
Процедура ПоказатьПодсказку(ВыводРезультатов = Ложь)
	
	МакетПомощника = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Справка");
	
	ОбластьТекстЗаголовок = "Заголовок|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстЗаголовок);
	ТекстЗаголовок = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
	
	ОбластьТекстОбщий = "Общий|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	
	Если Объект.Организация.Пустая() Тогда
		ОбластьТекстОрганизация = "ОрганизацияУстановить|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОрганизация);
		ТекстОбласти = "<BODY><FONT color=#ff0000>" + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "</FONT></BODY>";
		ТекстОбщий = ТекстОбщий + ТекстОбласти + "
		|";
	КонецЕсли;
	
	Если НЕ ВыводРезультатов Тогда
		
		Если НЕ Объект.Организация.Пустая() Тогда
			
			Если ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
				ОбластьТекстДата  = "ДатаВводаОстатковИзменить|Справка";
				ОбластьСсылкаДата = "ДатаВводаОстатковИзменить|Ссылка";
			Иначе
				ОбластьТекстДата  = "ДатаВводаОстатковУстановить|Справка";
				ОбластьСсылкаДата = "ДатаВводаОстатковУстановить|Ссылка";
			КонецЕсли;
			
			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстДата);
			ТекстОбласти = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
			ТекстОбласти = СтрЗаменить(ТекстОбласти, "##ДАТА##", Формат(Объект.ДатаВводаОстатков, "ДЛФ=DD"));
			ТекстОбласти = СтрЗаменить(ТекстОбласти, "##ОРГАНИЗАЦИЯ##", СокрЛП(Объект.Организация.Наименование));
			
			Если НЕ ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
				ТекстОбщий = ТекстОбщий + 
				"<BODY><FONT color=#ff0000>" + ТекстОбласти + "</FONT></BODY>
				|";
			Иначе
				ТекстОбщий = ТекстОбщий + ТекстОбласти + "
				|";
			КонецЕсли;
			
			ОбластьТекстаСсылки = МакетПомощника.ПолучитьОбласть(ОбластьСсылкаДата);
			ТекстОбласти = "<A id=Команда href=""1C:ВвестиДату"">" + ОбластьТекстаСсылки.ТекущаяОбласть.Текст + "</A>";
			ТекстОбщий = ТекстОбщий + ТекстОбласти + "
			|";
			
		КонецЕсли;
		
		ОбластьТекстОбщий = "ОбщееОписание|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
		ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
		|";
		
	Иначе
		
		ОбластьТекстОбщий = "ОбщееОписаниеРезультат|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
		ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
		|";
		
	КонецЕсли;
	
	ВстроеннаяСправка_СтилиДокумента = 
	"<STYLE type=text/css>
	|		DIV.top {
	|			PADDING: 0;
	|		}
	|		DIV {
	|			PADDING: 3px 0px 3px 3px;
	|			BORDER-TOP-COLOR: #dadac4;
	|			BORDER-RIGHT-COLOR: #dadac4;
	|			BORDER-BOTTOM-COLOR: #dadac4;
	|			BORDER-LEFT-COLOR: #dadac4;
	|		}
	|		A {
	|			PADDING-TOP: 1px;
	|			PADDING-BOTTOM: 1px;
	|		}
	|		BODY {
	|			SCROLLBAR-FACE-COLOR: #fffbf0;
	|			SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|			SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|			SCROLLBAR-ARROW-COLOR: #708090;
	|			SCROLLBAR-TRACK-COLOR: #fffbf0;
	|			SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|			MARGIN: 5px 0px 5px 5px;
	|			FONT-SIZE: 8pt;
	|			FONT-FAMILY: ""MS Sans Serif"";
	|		}
	|		IMG {
	|			MARGIN-LEFT: 3px;
	|		}
	|	</STYLE>";
	
	ТекстВстроеннойСправки = 
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + ВстроеннаяСправка_СтилиДокумента + "
	|	</HEAD>
	|	<BODY aLink=#3265FE vLink=#3265FE link=#3265FE bgColor=#FEFEFE scroll=auto>
	//|		<IMG src=" + ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, Элементы.ВстроеннаяСправка)+">
	|		<DIV class=""top"" id=true style=""DISPLAY:inline"">
	|			<DIV><STRONG>" + ТекстЗаголовок + "</STRONG></DIV>
	|		</DIV>";
	
	Если СтрЧислоСтрок(ТекстОбщий) > 0 Тогда
		Для НомСтроки = 1 По СтрЧислоСтрок(ТекстОбщий) Цикл
			ТекстСправки = СтрПолучитьСтроку(ТекстОбщий,НомСтроки);
			ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
			|	<DIV>" + ТекстСправки + "</DIV>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
	|	</BODY>
	|</HTML>";
		
	ВстроеннаяСправка = ТекстВстроеннойСправки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // КартинкаУрл()

&НаКлиенте
// Производит поиск элементов в поле табличного документа.
//
Функция НайтиЭлемент(Элемент_HTML, НазваниеТега)
	
	ТекущийЭлемент_HTML = Элемент_HTML;
	
	Пока Истина Цикл
		
		Если ТекущийЭлемент_HTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлемент_HTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлемент_HTML;
		Иначе
			ТекущийЭлемент_HTML = ТекущийЭлемент_HTML.parentNode;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции // НайтиЭлемент()

&НаКлиенте
// Процедура выполняет определенные действия в зависимости от переданной команды.
//
Процедура ВыполнитьКомандуФормы(Команда, Значение)
	
	Если Команда = "ВвестиДату" Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ДатаВводаОстатков", Объект.ДатаВводаОстатков);
		СтруктураПараметров.Вставить("ТекстЗаголовка",    "Установка даты ввода начальных остатков");
		
		ОткрытьФорму("Обработка.ВводНачальныхОстатков.Форма.ФормаУстановкиДатыНачалаВеденияУчета", СтруктураПараметров, ЭтаФорма, Истина,,, Новый ОписаниеОповещения("УстановкаДатыНачалаВеденияУчетаПродолжение", ЭтотОбъект));
		
	Иначе
		
		Сообщить("Неизвестная команда: " + Команда);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКомандуФормы()

&НаКлиенте
// Процедура обрабатывает результат ввода даты начала учета.
Процедура УстановкаДатыНачалаВеденияУчетаПродолжение(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Дата") Тогда
		
		Если Объект.ДатаВводаОстатков = '00010101' Тогда
			ТекстПодсказки = "Установка даты начала ведения учета в программе:";
		Иначе
			ТекстПодсказки = "Изменение даты начала ведения учета в программе:";
		КонецЕсли;
		
		Если Объект.ДатаВводаОстатков = Результат Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьДатуНачалаУчета(Результат);
		ОбновитьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Изменяет шрифт надписи текущего этапа работы ввода начальных остатков.
//
Процедура ОбновитьШрифтНадписиЭтапаВыполнения()
	
	ТекущаяСтраница = Элементы.ПанельДанные.ТекущаяСтраница;
	
	ОбычныйШрифт = Новый Шрифт(, , Ложь);
	ЖирныйШрифт  = Новый Шрифт(, , Истина);
	
	Элементы.НадписьЭтап1.Шрифт = ОбычныйШрифт;
	Элементы.НадписьЭтап2.Шрифт = ОбычныйШрифт;
	Элементы.НадписьЭтап3.Шрифт = ОбычныйШрифт;
	Элементы.НадписьЭтап4.Шрифт = ОбычныйШрифт;
	
	Если ТекущаяСтраница = Элементы.СтраницаДокументыОстатков Тогда
		Элементы.НадписьЭтап1.Шрифт = ЖирныйШрифт;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСчетаУчетаРасчетов Тогда
		Элементы.НадписьЭтап2.Шрифт = ЖирныйШрифт;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОстатков Тогда
		Элементы.НадписьЭтап3.Шрифт = ЖирныйШрифт;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗавершениеРаботы Тогда
		Элементы.НадписьЭтап4.Шрифт = ЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьШрифтНадписиЭтапаВыполнения()

&НаСервереБезКонтекста
// Проверяет, ведется ли на счет учет по документам расчетов.
//
Функция ВестиРасчетыПоДокументам(Счет)
	
	Возврат НЕ (Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") = Неопределено);
	
КонецФункции // ВестиРасчетыПоДокументам()

&НаКлиенте
// Производит автоматическое заполнение документов расчета с контрагентами в строках табличной части "Остатки".
//
Процедура ЗаполнитьДокументыРасчетовСКонтрагентами()
	
	ЗаполнятьДокументы = Ложь;
	
	ПараметрыПоиска = Новый Структура("Документ", ПредопределенноеЗначение("Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка"));
	
	Если НЕ Объект.Остатки.НайтиСтроки(ПараметрыПоиска).Количество() = 0 Тогда
		
		Ответ = Вопрос("В строках табличной части не заполнены документы расчетов с контрагентами.
		               |Заполнить документы автоматически?", РежимДиалогаВопрос.ДаНет);
		
		ЗаполнятьДокументы = (Ответ = КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
	Если НЕ ЗаполнятьДокументы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// заполнение документов расчета с контрагентами.
	Для Каждого СтрокаТабличнойЧасти ИЗ Объект.Остатки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета)
		 ИЛИ НЕ ВестиРасчетыПоДокументам(СтрокаТабличнойЧасти.СчетУчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Документ = СформироватьДокументРасчетовСКонтрагентом(СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДокументыРасчетовСКонтрагентами()

&НаКлиенте
// Проверяет, корректно ли заполнены данные.
//
// Возвращаемое значение:
//  Булево – корректно ли заполнены данные
//
Функция ДанныеЗаполненыКорректно()
	
	Отказ = Ложь;
	
	ДокументыУказаны = Истина;
	
	Если Элементы.ПанельДанные.ТекущаяСтраница = Элементы.СтраницаОстатков Тогда
		
		Для Каждого СтрокаТабличнойЧасти ИЗ Объект.Остатки Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) + """ табличной части: ";
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
				
				СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета""!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);
				
			Иначе
				
				Если ВестиРасчетыПоДокументам(СтрокаТабличнойЧасти.СчетУчета) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
					
					СтрокаСообщения = "Не заполнено значение реквизита ""Документ расчетов""!";
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);
					
					ДокументыУказаны = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат (НЕ Отказ);
	
КонецФункции // ДанныеЗаполненыКорректно()

&НаКлиенте
// Переход на страницу назад.
//
Процедура ВыполнитьПереходНазад()
	
	ИмяТекСтраницы = Элементы.ПанельДанные.ТекущаяСтраница.Имя;
	
	Если ИмяТекСтраницы = "СтраницаДокументыОстатков" Тогда
		Возврат;
	ИначеЕсли ИмяТекСтраницы = "СтраницаСчетаУчетаРасчетов" Тогда
		Элементы.ПанельДанные.ТекущаяСтраница = Элементы.СтраницаДокументыОстатков;
	ИначеЕсли ИмяТекСтраницы = "СтраницаОстатков" Тогда
		Элементы.ПанельДанные.ТекущаяСтраница = Элементы.СтраницаСчетаУчетаРасчетов;
	ИначеЕсли ИмяТекСтраницы = "СтраницаЗавершениеРаботы" Тогда
		Элементы.ПанельДанные.ТекущаяСтраница = Элементы.СтраницаОстатков;
	КонецЕсли;
	
	ОбновитьШрифтНадписиЭтапаВыполнения();
	УстановитьВидимость();
	
КонецПроцедуры // ВыполнитьПереходНазад()

&НаКлиенте
// Переход на страницу вперед.
//
Процедура ВыполнитьПереходДалее()
	
	ТекущаяСтраница = Элементы.ПанельДанные.ТекущаяСтраница;
	ОчиститьСообщения();
	
	Если ТекущаяСтраница = Элементы.СтраницаДокументыОстатков Тогда
		
		Элементы.ПанельДанные.ТекущаяСтраница = Элементы.СтраницаСчетаУчетаРасчетов;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСчетаУчетаРасчетов Тогда
		
		Элементы.ПанельДанные.ТекущаяСтраница = Элементы.СтраницаОстатков;
		
		// данные по остаткам заполним только в том случае, если табличная часть не заполнена.
		Если Объект.Остатки.Количество() = 0 Тогда
			
			ЗаполнитьДанныеПоОстаткам();
			
			ЗаполнитьСчетаУчетаРасчетовСКонтрагентами();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОстатков Тогда
		
		Если Объект.Остатки.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнены данные по остаткам лицевых счетов!");
			Возврат;
			
		КонецЕсли;
		
		ПолучитьДатуНачалаУчета();
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнена дата ввода начальных остатков!");
			Возврат;
		КонецЕсли;
		
		// Заполненим документы расчетов с контрагентами в строках табличной части.
		ЗаполнитьДокументыРасчетовСКонтрагентами();
		
		Если НЕ ДанныеЗаполненыКорректно() Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СформироватьДокументыВводаНачальныхОстатков();
		
		Элементы.ПанельДанные.ТекущаяСтраница = Элементы.СтраницаЗавершениеРаботы;
		
		Если НЕ Объект.ДокументыВводаОстатков.Количество() = 0 Тогда
			Элементы.ГиперссылкаВводНачальныхОстатков.Заголовок = Объект.ДокументыВводаОстатков[0].Ссылка;
		Иначе
			Элементы.ГиперссылкаВводНачальныхОстатков.Заголовок = "<Документ не создан>";
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьШрифтНадписиЭтапаВыполнения();
	УстановитьВидимость();
	
КонецПроцедуры // ВыполнитьПереходДалее()

&НаКлиенте
// Процедура очищает табличные части обработки.
//
Процедура ОчиститьТабличныеЧасти(Отказ = Ложь)
	
	Если НЕ Объект.СписокДокументов.Количество() = 0 ИЛИ НЕ Объект.Остатки.Количество() = 0 Тогда
		
		Ответ = Вопрос("Табличные части будут очищены.
		               |Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Объект.СписокДокументов.Очистить();
			Объект.Остатки.Очистить();
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьТабличныеЧасти()

&НаКлиенте
// Процедура очищает табличную часть "Остатки".
//
Процедура ОчиститьДанныеПоОстаткам(Отказ = Ложь)
	
	Если НЕ Объект.Остатки.Количество() = 0 Тогда
		
		Ответ = Вопрос("Данные по остаткам будут очищены.
		               |Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Объект.Остатки.Очистить();
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьДанныеПоОстаткам()

&НаКлиенте
// Процедура управляет видимостью и доступностью элементов формы.
//
Процедура УстановитьВидимость()
	
	Элементы.Организация.Доступность = Ложь;
	
	ТекущаяСтраница = Элементы.ПанельДанные.ТекущаяСтраница;
	
	НужнаКнопкаДалее  = Ложь;
	НужнаКнопкаНазад  = Ложь;
	
	Если ТекущаяСтраница = Элементы.СтраницаДокументыОстатков Тогда
		
		НужнаКнопкаДалее = Истина;
		
		Элементы.Организация.Доступность = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСчетаУчетаРасчетов Тогда
		
		НужнаКнопкаНазад  = Истина;
		НужнаКнопкаДалее  = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОстатков Тогда
		
		НужнаКнопкаНазад  = Истина;
		НужнаКнопкаДалее  = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗавершениеРаботы Тогда
		
		Элементы.ГруппаХодВыполнения.ТекущаяСтраница = Элементы.СтраницаГотово;
		
		Если Объект.ДокументыВводаОстатков.Количество() > 1 Тогда
			
			Элементы.ПанельРезультатов.ТекущаяСтраница = Элементы.СтраницаСписокДокументов;
			
		Иначе
			
			Элементы.ПанельРезультатов.ТекущаяСтраница = Элементы.СтраницаОдинДокумент;
			
		КонецЕсли;
		
		ПоказатьПодсказку(Истина);
		
	КонецЕсли;
	
	Элементы.ФормаКнопкаНазад.Доступность = НужнаКнопкаНазад;
	Элементы.ФормаКнопкаДалее.Доступность = НужнаКнопкаДалее;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
// Процедура управляет видимостью и доступностью колонок табличной части "Остатки".
//
Процедура ОстаткиУстановитьВидимостьКолонок()
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СчетУчета) Тогда
		
		Для Каждого КолонкаТабличнойЧасти ИЗ Элементы.Остатки.ПодчиненныеЭлементы Цикл
			
			Если КолонкаТабличнойЧасти.Имя = "ОстаткиСчетУчета" Тогда
				Продолжить;
			ИначеЕсли КолонкаТабличнойЧасти.Имя = "ОстаткиГруппаКонтрагент" Тогда
				Для Каждого КолонкаПодгруппы ИЗ КолонкаТабличнойЧасти.ПодчиненныеЭлементы Цикл
					Если КолонкаПодгруппы.Имя = "ОстаткиКонтрагент"
					 ИЛИ КолонкаПодгруппы.Имя = "ОстаткиДоговорКонтрагента" Тогда
						Продолжить;
					КонецЕсли;
					
					КолонкаПодгруппы.ТолькоПросмотр = Истина;
					
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			КолонкаТабличнойЧасти.ТолькоПросмотр = Истина;
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ОстаткиДокумент.ТолькоПросмотр = (НЕ ВестиРасчетыПоДокументам(ТекущиеДанные.СчетУчета));
		
	КонецЕсли;
	
КонецПроцедуры // ОстаткиУстановитьВидимостьКолонок()

&НаКлиенте
// Открывает форму для подбора счета учета расчетов.
//
Процедура НачалоВыбораСчета(Элемент, СписокСчетов = "", ТекущийСчет)
	
	Если ЗначениеЗаполнено(СписокСчетов) Тогда
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Код", СписокСчетов);
		
		ФормаВыбораСчета = ПолучитьФорму("ПланСчетов.Хозрасчетный.ФормаВыбора", Новый Структура("Отбор, ТекущаяСтрока", СтруктураОтбора, ТекущийСчет), Элемент);
		ФормаВыбораСчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораСчета()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСписокСчетов();
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Параметры.Свойство("ВходящиеДокументы") Тогда
		
		Для Каждого ЭлементМассива Из Параметры.ВходящиеДокументы Цикл
			
			НовыйДокумент = Объект.СписокДокументов.Добавить();
			НовыйДокумент.Документ = ЭлементМассива;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолучитьДатуНачалаУчета();
	
	Элементы.ПанельДанные.ТекущаяСтраница = Элементы.ПанельДанные.ПодчиненныеЭлементы.СтраницаДокументыОстатков;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОбновитьШрифтНадписиЭтапаВыполнения();
	
	ОбновитьФорму();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПолучитьДатуНачалаУчета();
	
	ОбновитьФорму();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Очистка" поля ввода "Организация".
//
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Организация".
//
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ (Объект.Организация = ВыбранноеЗначение) Тогда // если выбрано значение, отличное от того, что было
		
		ОчиститьТабличныеЧасти(НЕ СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "OnClick" поля HTML документа "ВстроеннаяСправка".
//
Процедура ВстроеннаяСправкаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Элемент_HTML = НайтиЭлемент(ДанныеСобытия.Element, "A");
	
	Если Элемент_HTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент_HTML.id = "Команда" Тогда
		
		Попытка
			ВыполнитьКомандуФормы(Элемент_HTML.pathname, Элемент_HTML.target);
		Исключение
			Сообщить("Операция не выполнена!", СтатусСообщения.Важное);// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" поля "ГиперссылкаВводНачальных".
//
Процедура ГиперссылкаВводНачальныхОстатковНажатие(Элемент)
	
	Если НЕ Объект.ДокументыВводаОстатков.Количество() = 0 Тогда
		
		ПолучитьФорму("Документ.ВводНачальныхОстатков.ФормаОбъекта", Новый Структура("Ключ", Объект.ДокументыВводаОстатков[0].Ссылка), ЭтаФорма).Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

&НаКлиенте
// Процедура заполняет список табличную часть "Список документов" документами "КВП_ВводНачальногоСальдо".
//
Процедура ЗаполнитьСписокДокументов(Команда)
	
	Отказ = Ложь;
	
	ОчиститьТабличныеЧасти(Отказ);
	
	Если НЕ Отказ Тогда
		
		ЗаполнитьДокументыВводаОстатков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события нажатия кнопки "Назад".
//
Процедура КомандаНазад(Команда)
	
	// назад
	ВыполнитьПереходНазад();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события нажатия кнопки "Далее".
//
Процедура КомандаДалее(Команда)
	
	// далее
	ВыполнитьПереходДалее();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "СПИСОК ДОКУМЕНТОВ".

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличной части.
//
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ОчиститьДанныеПоОстаткам(Отказ);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличной части.
//
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	
	ОчиститьДанныеПоОстаткам(Отказ);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" табличной части.
//
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	
	ОчиститьДанныеПоОстаткам(Отказ);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличной части.
//
Процедура СписокДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование И НЕ Элементы.СписокДокументов.ТекущиеДанные = Неопределено Тогда
		
		Элементы.СписокДокументов.ТекущиеДанные.Документ = ПредопределенноеЗначение("Документ.КВП_ВводНачальногоСальдо.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Документ" табличной части.
//
Процедура СписокДокументовДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	ФормаВыбора = ПолучитьФорму("Документ.КВП_ВводНачальногоСальдо.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора), Элемент);
	
	ФормаВыбора.Элементы.ОтборОрганизация.Доступность = Ложь;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Документ" табличной части.
//
Процедура СписокДокументовДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанныеспискаДокументов = Элементы.СписокДокументов.ТекущиеДанные;
	Если НЕ ТекущиеДанныеспискаДокументов = Неопределено И НЕ (ТекущиеДанныеспискаДокументов.Документ = ВыбранноеЗначение) Тогда // если выбрано значение, отличное от того, что было
		
		СтрокаТабличнойЧасти = Объект.СписокДокументов.НайтиСтроки(Новый Структура("Документ", ВыбранноеЗначение));
		
		Если НЕ СтрокаТабличнойЧасти.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(, "Документ <" + СокрЛП(ВыбранноеЗначение) + "> уже указан в табличной части!", 60);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "ОСТАТКИ".

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части
//
Процедура ОстаткиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОстаткиУстановитьВидимостьКолонок", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "СчетУчет" табличной части.
//
Процедура ОстаткиСчетУчетаПриИзменении(Элемент)
	
	ОстаткиУстановитьВидимостьКолонок();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчет" табличной части.
//
Процедура ОстаткиСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = УПЖКХ_ТиповыеМетодыКлиент.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "СчетУчет" табличной части.
//
Процедура ОстаткиСчетУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанныеОстатков = Элементы.Остатки.ТекущиеДанные;
	
	Если НЕ ТекДанныеОстатков = Неопределено Тогда
		НачалоВыбораСчета(Элемент, мСписокСчетов, ТекДанныеОстатков.СчетУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Документ" табличной части.
//
Процедура ОстаткиДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Остатки.ТекущиеДанные;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Объект.Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, КонецДня(Объект.ДатаВводаОстатков), '00010101');
	
		СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
		СтруктураПараметров.Вставить("СторонаСчета",               ПассивныйИлиАктивныйСчет(ТекущаяСтрока.СчетУчета));
		СтруктураПараметров.Вставить("КонецПериода",               КонецДня(Объект.ДатаВводаОстатков));
	
		УчетВзаиморасчетовКлиент.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ТипЗнч(ТекущаяСтрока.Документ));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Возвращает значение 1 если счет учета пассивный, в противном случае возвращает 0.
//
Функция ПассивныйИлиАктивныйСчет(СчетУчета)
	
	Возврат ?(СчетУчета.Вид = ВидСчета.Пассивный, 1, 0);
	
КонецФункции
