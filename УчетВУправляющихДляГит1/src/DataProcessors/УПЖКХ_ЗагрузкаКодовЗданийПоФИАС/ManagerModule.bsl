
///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ КОДОВ ПО ФИАС ПО ОБЪЕКТУ

#Область ПолучениеКодовФИАСПоОбъекту

&НаСервере
// Получает код по ФИАС объекта и указывает, нужно ли открывать форму обработки.
//
Функция ПолучитьКодДомаПоФИАСПоОбъекту(ОбъектУчета) Экспорт
	
	СтруктураРезультата = Новый Структура("ВыполненоУспешно, КодДомаПоФИАС", Ложь, "");
	
	Если НЕ ПустаяСтрока(ПолучитьAPIКлючДляСервисаDadata()) Тогда
		
		ТаблицаКИ = ПолучитьНачальныеПредставленияАдресов(ОбъектУчета);
		
		ПредставлениеАдресаОбъекта  = ПолучитьНачальноеПредставлениеАдресаЗдания(ОбъектУчета, ТаблицаКИ);
		ТаблицаЗагруженныхКодовФИАС = ПолучитьТаблицуКодовФИАСОбъекта(ПредставлениеАдресаОбъекта);
		ТаблицаОтобранныхКодовФИАС  = ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаЗагруженныхКодовФИАС, ОбъектУчета);
		
		Если ТаблицаОтобранныхКодовФИАС.Количество() = 1 Тогда
			
			ОтобраннаяСтрока = ТаблицаОтобранныхКодовФИАС[0];
			
			Если СравнитьПолученноеПредставлениеАдресаСИмеющимся(ОтобраннаяСтрока.ПредставлениеАдреса, ПредставлениеАдресаОбъекта) Тогда
				СтруктураРезультата.ВыполненоУспешно = Истина;
				СтруктураРезультата.КодДомаПоФИАС    = ОтобраннаяСтрока.КодДомаПоФИАС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Заполняет строки загруженных данных объекта.
//
Функция ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаПолученныхДанных, ОбъектДляЗаполнения = Неопределено, ТаблицаДляЗаполнения = Неопределено) Экспорт
	
	Если ТаблицаДляЗаполнения = Неопределено Тогда
		ТаблицаДляЗаполнения = ТаблицаПолученныхДанных.СкопироватьКолонки();
	КонецЕсли;
	
	Для каждого ТекСтрокаЗагруженныхДанных из ТаблицаПолученныхДанных Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЗагруженныхДанных);
		НоваяСтрока.Объект = ОбъектДляЗаполнения;
		
	КонецЦикла;
	
	Возврат ТаблицаДляЗаполнения;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С API-КЛЮЧОМ

#Область РаботаСAPIКлючом

// Получает API-ключ для работы с сервисом dadata.ru.
//
Функция ПолучитьAPIКлючДляСервисаDadata() Экспорт
	
	APIКлючДляAPI = Константы.УПЖКХ_APIКлючDadata.Получить();
	
	Если ПроверитьФорматAPIКлюча(СокрЛП(APIКлючДляAPI)) Тогда
		Возврат APIКлючДляAPI;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Проверяет правильность формата указанного API-ключа.
//
Функция ПроверитьФорматAPIКлюча(APIКлючДляAPI) Экспорт
	
	APIКлючИмеетПравильныйФормат = НЕ ПустаяСтрока(APIКлючДляAPI);
	
	Возврат APIКлючИмеетПравильныйФормат;
	
КонецФункции

// Выполняет сохранение API-ключа.
//
Процедура СохранитьAPIКлюч(APIКлючДляAPI) Экспорт
	
	Константы.УПЖКХ_APIКлючDadata.Установить(APIКлючДляAPI);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С АДРЕСАМИ

#Область РаботаСАдресами

// Формирует представление адреса здания.
//
Функция ПолучитьПредставлениеАдреса(Объект) Экспорт
	
	ПредставлениеАдреса = "";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		ПредставлениеАдреса = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Объект);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаСервере
// Формирует представления адресов, которые будут использоваться при добавлении зданий в таблицу объектов.
//
Функция ПолучитьНачальныеПредставленияАдресов(Здания, ТаблицаКИДляЗаполнения = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(Здания) = Тип("Массив") Тогда
		МассивЗданий = Новый Массив;
		МассивЗданий.Добавить(Здания);
	Иначе
		МассивЗданий = Здания;
	КонецЕсли;
	
	// Если не передана извне таблица, которую нужно заполнить контактной информацией,
	// то создаем новую. Это нужно при получении кодов по ФИАС непосредственно
	// из справочника "Здания".
	Если ТаблицаКИДляЗаполнения = Неопределено Тогда
		
		КонтактнаяИнформацияВсехЗданий = Новый ТаблицаЗначений;
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("Здание");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("Регион");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("Район");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("Город");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("НаселенныйПункт");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("Улица");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("Дом");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("Корпус");
		КонтактнаяИнформацияВсехЗданий.Колонки.Добавить("ПредставлениеАдреса");
		
	Иначе
		
		КонтактнаяИнформацияВсехЗданий = ТаблицаКИДляЗаполнения;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Регион = КонтактнаяИнформация.Город
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КонтактнаяИнформация.Регион, """")
	|	КОНЕЦ КАК Регион,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Район = КонтактнаяИнформация.Город
	|			ТОГДА """"
	|		ИНАЧЕ ЕСТЬNULL(КонтактнаяИнформация.Район, """")
	|	КОНЕЦ КАК Район,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Город ЕСТЬ NULL
	|				ИЛИ КонтактнаяИнформация.Город = """"
	|			ТОГДА ЕСТЬNULL(КонтактнаяИнформация.Регион, """")
	|		ИНАЧЕ ЕСТЬNULL(КонтактнаяИнформация.Город, """")
	|	КОНЕЦ КАК Город,
	|	ЕСТЬNULL(КонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(КонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(КонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(КонтактнаяИнформация.Корпус, """") КАК Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК КонтактнаяИнформация";
	
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	
	СтруктураОтбора = Новый Структура("Здание");
	
	Для каждого ТекЗдание из КонтактнаяИнформация Цикл
		
		СтруктураОтбора.Здание = ТекЗдание.Здание;
		
		СтрокиЗдания = КонтактнаяИнформацияВсехЗданий.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиЗдания.Количество() = 0 Тогда
			СтрокаКИ = КонтактнаяИнформацияВсехЗданий.Добавить();
		Иначе
			СтрокаКИ = СтрокиЗдания[0];
		КонецЕсли;
		
		ЗаполнитьСтрокуКонтактнойИнформации(ТекЗдание, СтрокаКИ);
		
	КонецЦикла;
	
	Возврат КонтактнаяИнформацияВсехЗданий;
	
КонецФункции

// Заполняет строку контактной информации здания.
//
Процедура ЗаполнитьСтрокуКонтактнойИнформации(СтрокаТекЗдания, СтрокаКИ)
	
	СтрокаКИ.Регион          = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(?(СтрокаТекЗдания.Регион = СтрокаТекЗдания.Город, "", СтрокаТекЗдания.Регион)));
	СтрокаКИ.Район           = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.Район));
	СтрокаКИ.Город           = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.Город));
	СтрокаКИ.НаселенныйПункт = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.НаселенныйПункт));
	СтрокаКИ.Улица           = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.Улица));
	СтрокаКИ.Здание          = СтрокаТекЗдания.Здание;
	
	КодПервогоСимволаКорпуса = КодСимвола(СтрокаТекЗдания.Корпус, 1);
	Если НЕ (КодПервогоСимволаКорпуса > 47 И КодПервогоСимволаКорпуса < 58) Тогда
		СтрокаКИ.Дом    = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.Дом)) + СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.Корпус));
		СтрокаКИ.Корпус = "";
	Иначе
		СтрокаКИ.Дом    = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.Дом));
		СтрокаКИ.Корпус = СокрЛП(Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ОтформатироватьПредставлениеАдреса(СтрокаТекЗдания.Корпус));
	КонецЕсли;
	
	СтрокаКИ.ПредставлениеАдреса = СформироватьПредставлениеАдресаДляНачальногоЗаполнения(СтрокаКИ);
	
КонецПроцедуры

// Формирует представление адреса на основании контактной информации.
//
Функция СформироватьПредставлениеАдресаДляНачальногоЗаполнения(СтрокаКИ)
	
	МассивЭлементовАдреса = Новый Массив;
	
	Если НЕ ПустаяСтрока(СтрокаКИ.Регион) Тогда
		МассивЭлементовАдреса.Добавить(СтрокаКИ.Регион);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаКИ.Район) Тогда
		МассивЭлементовАдреса.Добавить(СтрокаКИ.Район);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаКИ.Город) Тогда
		МассивЭлементовАдреса.Добавить(СтрокаКИ.Город);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаКИ.НаселенныйПункт) Тогда
		МассивЭлементовАдреса.Добавить(СтрокаКИ.НаселенныйПункт);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаКИ.Улица) Тогда
		МассивЭлементовАдреса.Добавить(СтрокаКИ.Улица);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаКИ.Дом) Тогда
		МассивЭлементовАдреса.Добавить(СтрокаКИ.Дом);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаКИ.Корпус) Тогда
		МассивЭлементовАдреса.Добавить(СтрокаКИ.Корпус);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивЭлементовАдреса, ", ");
	
КонецФункции

// Получает изначальное представление адреса здания из таблицы контактной информации.
//
Функция ПолучитьНачальноеПредставлениеАдресаЗдания(Здание, КонтактнаяИнформацияВсехЗданий) Экспорт
	
	Представление = "";
	
	СтрокиЗдания = КонтактнаяИнформацияВсехЗданий.НайтиСтроки(Новый Структура("Здание", Здание));
	
	Если СтрокиЗдания.Количество() = 0 Тогда
		Представление = Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьПредставлениеАдреса(Здание);
	Иначе
		Представление = СтрокиЗдания[0].ПредставлениеАдреса;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Выполняет сравнение полученного представления адреса здания с имеющимся представлением.
//
Функция СравнитьПолученноеПредставлениеАдресаСИмеющимся(ПолученноеПредставление, ИмеющеесяПредставление) Экспорт
	
	Возврат Прав(ПолученноеПредставление, СтрДлина(ИмеющеесяПредставление)) = ИмеющеесяПредставление;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КОДОВ ПО ФИАС

#Область ЗагрузкаКодовФИАС

// Получает таблицу кодов по ФИАС объекта.
//
Функция ПолучитьТаблицуКодовФИАСОбъекта(ПредставлениеАдресаОбъекта) Экспорт
	
	ТаблицаКодовПоФИАС = ПолучитьНовуюТаблицуЗагруженныхКодовПоФИАС();
	
	Если НЕ ПустаяСтрока(СокрЛП(ПредставлениеАдресаОбъекта)) Тогда
		ПолучитьКодыПоФИАСПоАдресу(ПредставлениеАдресаОбъекта, ТаблицаКодовПоФИАС);
	КонецЕсли;
	
	Возврат ТаблицаКодовПоФИАС;
	
КонецФункции

// Получает коды по ФИАС по представлению адреса.
//
Процедура ПолучитьКодыПоФИАСПоАдресу(ПредставлениеАдресаОбъекта, ТаблицаКодовПоФИАС)
	
	Попытка
		
		мHTTPСоединение = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьHTTPСоединение("dadata.ru", "", "", Истина, 120);
		
		ЗаголовкиHTTP = Новый Соответствие;
		ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
		ЗаголовкиHTTP.Вставить("Accept", "application/json");
		ЗаголовкиHTTP.Вставить("Authorization", "Token " + ПолучитьAPIКлючДляСервисаDadata());
		
		ЗапросHTTP = Новый HTTPЗапрос("/api/v2/suggest/address", ЗаголовкиHTTP);
		ЗапросHTTP.УстановитьТелоИзСтроки(СтрШаблон("{""query"":""%1""}", ОтформатироватьПредставлениеАдреса(ПредставлениеАдресаОбъекта)));
		ОтветHTTP  = мHTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
		Ответ      = СокрЛ(ОтветHTTP.ПолучитьТелоКакСтроку());
		
		СтруктураОтвета = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьСтруктуруОбъектаJSON(Ответ);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Строка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтруктураОтвета);
		Иначе
			Если СтруктураОтвета.Свойство("suggestions") И НЕ СтруктураОтвета.suggestions.Количество() = 0 Тогда
				
				Для каждого ТекОбъект из СтруктураОтвета.suggestions Цикл
					
					Если ТекОбъект.Свойство("unrestricted_value") И ТекОбъект.Свойство("data") И ТипЗнч(ТекОбъект.data) = Тип("Структура")
					   И ТекОбъект.data.Свойство("house_fias_id") И ЗначениеЗаполнено(ТекОбъект.data.house_fias_id) Тогда
						
						НоваяСтрока = ТаблицаКодовПоФИАС.Добавить();
						ЗаполнитьСтрокуЗагруженнойКонтактнойИнформации(НоваяСтрока, ТекОбъект);
						
					Иначе
						
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрШаблон("Не найдены коды по ФИАС для здания: %1. Попробуйте изменить представление адреса и повторите снова.", ПредставлениеАдресаОбъекта));
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрШаблон("Не удалось получить коды по ФИАС для здания: %1", ПредставлениеАдресаОбъекта));
				
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрШаблон("Не удалось получить коды по ФИАС для здания: %1", ПредставлениеАдресаОбъекта));
	КонецПопытки;
	
КонецПроцедуры

// Заполняет строку контактной информации на основани загруженных данных.
//
Процедура ЗаполнитьСтрокуЗагруженнойКонтактнойИнформации(СтрокаДляЗаполнения, СтрокаЗагруженная)
	
	СтрокаДляЗаполнения.Адрес         = СтрокаЗагруженная.unrestricted_value;
	СтрокаДляЗаполнения.КодДомаПоФИАС = СтрокаЗагруженная.data.house_fias_id;
	
	Если НЕ СтрокаЗагруженная.data.city = Неопределено Тогда
		СтрокаДляЗаполнения.Город = СокрЛП(СтрокаЗагруженная.data.city + " " + СтрокаЗагруженная.data.city_type);
	КонецЕсли;
	
	Если НЕ СтрокаЗагруженная.data.area = Неопределено Тогда
		СтрокаДляЗаполнения.Район = СокрЛП(СтрокаЗагруженная.data.area + " " + СтрокаЗагруженная.data.area_type);
	КонецЕсли;
	
	Если НЕ СтрокаЗагруженная.data.settlement = Неопределено Тогда
		СтрокаДляЗаполнения.НаселенныйПункт = СокрЛП(СтрокаЗагруженная.data.settlement + " " + СтрокаЗагруженная.data.settlement_type);
	КонецЕсли;
	
	Если НЕ СтрокаЗагруженная.data.street = Неопределено Тогда
		СтрокаДляЗаполнения.Улица = СокрЛП(СтрокаЗагруженная.data.street + " " + СтрокаЗагруженная.data.street_type);
	КонецЕсли;
	
	Если НЕ СтрокаЗагруженная.data.house = Неопределено Тогда
		СтрокаДляЗаполнения.Дом = СокрЛП(СтрокаЗагруженная.data.house);
	КонецЕсли;
	
	Если НЕ СтрокаЗагруженная.data.block = Неопределено Тогда
		СтрокаДляЗаполнения.Корпус = СокрЛП(СтрокаЗагруженная.data.block);
	КонецЕсли;
	
	Если НЕ СтрокаЗагруженная.data.region = Неопределено Тогда
		Если СтрокаЗагруженная.data.city = Неопределено ИЛИ НЕ СтрокаЗагруженная.data.region = СтрокаЗагруженная.data.city Тогда
			СтрокаДляЗаполнения.Регион = СокрЛП(Строка(СтрокаЗагруженная.data.region) + " " + Строка(СтрокаЗагруженная.data.region_type));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаДляЗаполнения.ПредставлениеАдреса = СформироватьПредставлениеАдресаДляНачальногоЗаполнения(СтрокаДляЗаполнения);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КОДОВ ПО ФИАС (ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ)

#Область ЗагрузкаКодовФИАСВспомогательныеФункции

// Выполняет форматирование представления адреса перед отправкой на сервис dadata.ru.
//
Функция ОтформатироватьПредставлениеАдреса(ПредставлениеАдресаОбъекта) Экспорт
	
	СтрокаДляПередачи = СтрЗаменить(ПредставлениеАдресаОбъекта, ".", " ");
	
	Возврат СтрокаДляПередачи;
	
КонецФункции

// Получает новую таблицу загруженных кодов по ФИАС.
//
Функция ПолучитьНовуюТаблицуЗагруженныхКодовПоФИАС()
	
	ТаблицаКодовПоФИАС = Новый ТаблицаЗначений;
	ТаблицаКодовПоФИАС.Колонки.Добавить("Объект");
	ТаблицаКодовПоФИАС.Колонки.Добавить("Адрес");
	ТаблицаКодовПоФИАС.Колонки.Добавить("КодДомаПоФИАС");
	ТаблицаКодовПоФИАС.Колонки.Добавить("Регион");
	ТаблицаКодовПоФИАС.Колонки.Добавить("Район");
	ТаблицаКодовПоФИАС.Колонки.Добавить("Город");
	ТаблицаКодовПоФИАС.Колонки.Добавить("НаселенныйПункт");
	ТаблицаКодовПоФИАС.Колонки.Добавить("Улица");
	ТаблицаКодовПоФИАС.Колонки.Добавить("Дом");
	ТаблицаКодовПоФИАС.Колонки.Добавить("Корпус");
	ТаблицаКодовПоФИАС.Колонки.Добавить("ПредставлениеАдреса");
	
	Возврат ТаблицаКодовПоФИАС;
	
КонецФункции

#КонецОбласти
