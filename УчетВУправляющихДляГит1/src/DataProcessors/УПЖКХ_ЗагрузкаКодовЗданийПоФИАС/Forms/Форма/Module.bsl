
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыполнитьПереходПоСтраницам();
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы объектов.
//
Процедура ТаблицаОбъектовПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено И НЕ ТаблицаОбъектов.Количество() = 0 И Элемент.ТекущиеДанные.Свойство("Объект") Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ЗаполнитьСведенияОТекущемОбъекте(ТекущиеДанные.Объект, ТекущиеДанные.ПредставлениеАдресаОбъекта);
		
	Иначе
		
		ТаблицаКодовЗданияПоФИАС.Очистить();
		ТекущийОбъект               = Неопределено;
		ПредставлениеТекущегоАдреса = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" таблицы объектов.
//
Процедура ТаблицаОбъектовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущийОбъект = Элемент.ТекущиеДанные.Объект;
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		
		ИдентификаторТекущейСтроки = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
		
		ОбработатьИзменениеОбъектаВТаблицеОбъектов(Элемент.ТекущиеДанные.Объект, ИдентификаторТекущейСтроки, НоваяСтрока);
		ОпределитьТекущийСтатусВыполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" таблицы объектов.
//
Процедура ТаблицаОбъектовПослеУдаления(Элемент)
	
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПредставлениеАдресаОбъекта" таблицы объектов.
//
Процедура ТаблицаОбъектовПредставлениеАдресаОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.КВП_Здания.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОбработатьВыборОбъектаУчета", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "ПредставлениеАдресаОбъекта" таблицы объектов.
//
Процедура ТаблицаОбъектовПредставлениеАдресаОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные        = Элемент.Родитель.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено И ТекущиеДанные.Свойство("Объект") И ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Объект);
		ОткрытьФорму("Справочник.КВП_Здания.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НовыйКодПоФИАС" таблицы объектов.
//
Процедура ТаблицаОбъектовНовыйКодПоФИАСПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = Элемент.Родитель.ТекущиеДанные.ПолучитьИдентификатор();
	ОбработатьИзменениеОбъектаВТаблицеОбъектов(Неопределено, ИдентификаторТекущейСтроки, Ложь);
	
	Если НЕ ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		ИмеютсяНесохраненныеДанные = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Новый код дома по ФИАС" таблицы зданий.
//
Процедура ТаблицаОбъектовНовыйКодДомаПоФИАСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка       = Ложь;
	ИдентификаторСтрокиОбъекта = Элемент.Родитель.ТекущиеДанные.ПолучитьИдентификатор();
	
	ОбработкаВыбораКодаФИАСВТаблицеКодовФИАС(Текст, ИдентификаторСтрокиОбъекта);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" таблицы загруженных кодов по ФИАС.
//
Процедура ТаблицаЗагруженныхКодовПоФИАСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		
		ИдентификаторТекущейСтрокиКодовФИАС = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
		ВыбранныйКодДомаПоФИАС              = ТаблицаКодовЗданияПоФИАС.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиКодовФИАС).КодДомаПоФИАС;
		
		Если Элементы.ТаблицаОбъектов.ТекущиеДанные = Неопределено Тогда
			
			ОбработкаВыбораКодаФИАСВТаблицеКодовФИАС(ВыбранныйКодДомаПоФИАС);
			
		Иначе
			
			ИдентификаторТекущейСтрокиОбъекта = Элементы.ТаблицаОбъектов.ТекущиеДанные.ПолучитьИдентификатор();
			ОбработкаВыбораКодаФИАСВТаблицеКодовФИАС(ВыбранныйКодДомаПоФИАС, ИдентификаторТекущейСтрокиОбъекта);
			ОпределитьТекущийСтатусВыполнения();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля текущего кода по ФИАС.
//
Процедура ПолеТекущийКодДомаПоФИАСПриИзменении(Элемент)
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		ТаблицаОбъектов[0].НовыйКодДомаПоФИАС = Элемент.ТекстРедактирования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля представления текущего адреса здания.
//
Процедура ПолеПредставлениеТекущегоАдресаПриИзменении(Элемент)
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		
		Если Элементы.ТаблицаОбъектов.ТекущиеДанные = Неопределено Тогда
			
			ИзменитьПредставлениеАдресаПервогоОбъектаВТаблицеОбъектов(ПредставлениеТекущегоАдреса);
			
		Иначе
			
			ИдентификаторТекущейСтроки = Элементы.ТаблицаОбъектов.ТекущиеДанные.ПолучитьИдентификатор();
			ИзменитьПредставлениеАдресаТекущегоОбъектаПоИдентификаторуСтроки(ИдентификаторТекущейСтроки, ПредставлениеТекущегоАдреса);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Далее".
//
Процедура КомандаДалее(Команда)
	
	Если ПроверитьФорматAPIКлюча(APIКлюч) Тогда
		СохранитьAPIКлюч();
		ВыполнитьПереходПоСтраницам();
	Иначе
		ПоказатьПредупреждение(, "Введен некорректный API-ключ.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьВсемиОбъектами".
//
Процедура КомандаЗаполнитьВсемиЗданиями(Команда)
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		
		ЗаполнитьТаблицуОбъектов();
		ИмеютсяНесохраненныеДанные = Ложь;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОПерезаполненииТаблицыОбъектовВсемиОбъектами", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Таблица объектов не пуста. Очистить таблицу и продолжить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьОбъектамиБезКодовФИАС".
//
Процедура КомандаЗаполнитьЗданиямиБезКодовПоФИАС(Команда)
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		
		ЗаполнитьТаблицуОбъектов(Ложь);
		ИмеютсяНесохраненныеДанные = Ложь;
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОПерезаполненииТаблицыОбъектовОбъектамиБезКодовФИАС", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Таблица объектов не пуста. Очистить таблицу и продолжить?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьКодыФИАСОбъекта".
//
Процедура КомандаОбновитьКодыЗданияПоФИАС(Команда)
	
	Если ЗначениеЗаполнено(ТекущийОбъект) Тогда
		ОбновитьКодыФИАСТекущегоОбъектаНаСервере(ТекущийОбъект, ПредставлениеТекущегоАдреса);
		ОпределитьТекущийСтатусВыполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗагрузитьКодыФИАС".
//
Процедура КомандаЗагрузитьКодыПоФИАС(Команда)
	
	ЗаполнитьКодыФИАСВсехОбъектовНаКлиенте();
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СохранитьКодыФИАС".
//
Процедура КомандаСохранитьКодыПоФИАС(Команда)
	
	ВыполняетсяСохранениеКодаПоФИАСПоВыбранномуОбъекту = ЗначениеЗаполнено(ПереданныйОбъект);
	
	Если ВыполняетсяСохранениеКодаПоФИАСПоВыбранномуОбъекту Тогда
		Если ПустаяСтрока(ТекущийКодДомаПоФИАС) Тогда
			ПоказатьПредупреждение(, "Не выбран код по ФИАС номер для сохранения.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСохраненныхКодовФИАС = КомандаСохранитьКодыФИАСНаСервере();
	
	Оповестить("ОбновитьСведенияОКодахПоФИАС");
	
	Если ИмеютсяНесохраненныеДанные Тогда
		
		ПоказатьПредупреждение(, "Не удалось сохранить коды по ФИАС для некоторых зданий.");
		
	Иначе
		
		Если КоличествоСохраненныхКодовФИАС = 0 Тогда
			ПоказатьПредупреждение(, "Нет данных для сохранения. Убедитесь, что новые коды по ФИАС заполнены и отличаются от имеющихся в базе.");
		ИначеЕсли ВыполняетсяСохранениеКодаПоФИАСПоВыбранномуОбъекту Тогда
			Закрыть();
		Иначе
			ПоказатьПредупреждение(, "Коды по ФИАС успешно сохранены.");
		КонецЕсли;
		
	КонецЕсли;
	
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Показать проблемные объекты".
//
Процедура КомандаПоказатьПроблемныеОбъекты(Команда)
	
	ИзменитьОтображениеПроблемныхОбъектов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Отмена".
//
Процедура КомандаОтмена(Команда)
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		Закрыть();
	Иначе
		
		Если ИмеютсяНесохраненныеДанные Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветОЗакрытииФормы", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, "Имеются несохраненные коды зданий по ФИАС. Всё равно закрыть форму?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИзменитьAPIКлюч".
//
Процедура КомандаИзменитьAPIКлюч(Команда)
	
	ОткрытьФорму("Обработка.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.Форма.ФормаИзмененияAPIКлюча",, ЭтаФорма, Истина,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОТВЕТОВ НА ДИАЛОГИ

#Область ОбработчикиОтветовНаДиалоги

&НаКлиенте
// Обработчик ответа на вопрос о перезаполнении таблицы объектов всеми объектами.
//
Процедура ОбработатьВопросОПерезаполненииТаблицыОбъектовВсемиОбъектами(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуОбъектов();
		ИмеютсяНесохраненныеДанные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа на вопрос о перезаполнении таблицы объектов всеми объектами без кодов по ФИАС.
//
Процедура ОбработатьВопросОПерезаполненииТаблицыОбъектовОбъектамиБезКодовФИАС(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицуОбъектов(Ложь);
		ИмеютсяНесохраненныеДанные = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа на вопрос о закрытии формы без сохранения кодов по ФИАС.
//
Процедура ОбработатьОтветОЗакрытииФормы(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает/отменяет отбор зданий с незаполненными новыми кодами по ФИАС.
//
Процедура ИзменитьОтображениеПроблемныхОбъектов()
	
	УстановленОтборПроблемныхОбъектов                               = НЕ УстановленОтборПроблемныхОбъектов;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Пометка = УстановленОтборПроблемныхОбъектов;
	
	Если УстановленОтборПроблемныхОбъектов Тогда
		Элементы.ТаблицаОбъектов.ОтборСтрок = Новый ФиксированнаяСтруктура("КодДомаПоФИАСЗаполнен", Ложь);
	Иначе
		Элементы.ТаблицаОбъектов.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕХОДЫ МЕЖДУ СТРАНИЦАМИ

#Область ПереходыМеждуСтраницами

&НаСервере
// Выполняет переход на нужную страницу.
//
Функция ВыполнитьПереходПоСтраницам()
	
	APIКлюч = Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьAPIКлючДляСервисаDadata();
	
	Если Параметры.Свойство("Объект") Тогда
		ПереданныйОбъект = Параметры.Объект;
	КонецЕсли;
	
	Если APIКлюч = "" Тогда
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВводAPIКлюча;
		Элементы.КнопкаИзменитьAPIКлюч.Видимость     = Ложь;
		Элементы.КнопкаДалее.Видимость               = Истина;
	Иначе
		Элементы.ГруппаСтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагрузкаКодовПоФИАС;
		Элементы.КнопкаИзменитьAPIКлюч.Видимость     = Истина;
		Элементы.КнопкаДалее.Видимость               = Ложь;
		
		Если ЗначениеЗаполнено(ПереданныйОбъект) Тогда
			
			ТипОбъекта = ТипЗнч(ПереданныйОбъект);
			
			Если ТипОбъекта = Тип("СправочникСсылка.КВП_Здания") Тогда
				
				ТаблицаОбъектов.Очистить();
				
				ПолучитьНачальныеПредставленияАдресов(ПереданныйОбъект);
				ДобавитьОбъектВТаблицуОбъектов(ПереданныйОбъект);
				ЗаполнитьСведенияОТекущемОбъекте(ПереданныйОбъект);
				ОбновитьКодыФИАСТекущегоОбъектаНаСервере(ПереданныйОбъект, ПредставлениеТекущегоАдреса);
				УстановитьВидимостьЭлементовПриЗапускеИзФормыОбъектаУчета();
				
			КонецЕсли;
		Иначе
			ОпределитьТекущийСтатусВыполнения();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Устанавливает видимость элементов при запуске обработки напрямую из объекта учета.
//
Процедура УстановитьВидимостьЭлементовПриЗапускеИзФормыОбъектаУчета()
	
	Элементы.ТаблицаОбъектов.Видимость                           = Ложь;
	Элементы.КнопкаЗагрузитьКодыПоФИАС.Видимость                 = Ложь;
	Элементы.ГруппаКодЗданияПоФИАС.Видимость                     = Истина;
	Элементы.КнопкаСохранитьКодыПоФИАС.Заголовок                 = "Сохранить код ФИАС";
	Элементы.КнопкаСохранитьКодыПоФИАС.ЦветФона                  = ПолучитьЦветВыделеннойКнопки();
	Элементы.ГруппаЗаполнить.Видимость                           = Ложь;
	Элементы.ПолеИндикаторПроцесса.Видимость                     = Ложь;
	Элементы.ДекорацияПояснениеПоляПредставленияАдреса.Видимость = Ложь;
	
	Если ТаблицаКодовЗданияПоФИАС.Количество() > 1 Тогда
		Элементы.ДекорацияЗаполнениеПоОбъектуНеОбнаруженоКодов.Видимость        = Ложь;
		Элементы.ДекорацияЗаполнениеПоОбъектуОбнаруженоНесколькоКодов.Видимость = Истина;
	Иначе
		Элементы.ДекорацияЗаполнениеПоОбъектуНеОбнаруженоКодов.Видимость        = Истина;
		Элементы.ДекорацияЗаполнениеПоОбъектуОбнаруженоНесколькоКодов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С API-КЛЮЧОМ

#Область РаботаСAPIКлючом

&НаСервере
// Проверяет правильность формата указанного API-ключа.
//
Функция ПроверитьФорматAPIКлюча(APIКлючАккаунта)
	
	Возврат Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПроверитьФорматAPIКлюча(APIКлючАккаунта);
	
КонецФункции

&НаСервере
// Выполняет сохранение API-ключа.
//
Процедура СохранитьAPIКлюч()
	
	Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.СохранитьAPIКлюч(APIКлюч);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ЗДАНИЙ

#Область ЗаполнениеЗданий

&НаКлиенте
// Обрабатывает ответ о выборе здания.
//
Процедура ОбработатьВыборОбъектаУчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		СтрокиДублей               = ТаблицаОбъектов.НайтиСтроки(Новый Структура("Объект", Результат));
		ИдентификаторТекущейСтроки = Элементы.ТаблицаОбъектов.ТекущиеДанные.ПолучитьИдентификатор();
		
		Если СтрокиДублей.Количество() = 0 Тогда
			
			ПолучитьНачальныеПредставленияАдресов(Результат);
			ЗаполнитьОбъектУчетаВИмеющейсяСтроке(ИдентификаторТекущейСтроки, Результат);
			
		Иначе
			
			ЗаполнитьОбъектУчетаВИмеющейсяСтроке(ИдентификаторТекущейСтроки, Неопределено);
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Здание """ + Результат + """ уже есть в таблице!");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение здания в уже имеющейся строка таблицы зданий.
//
Процедура ЗаполнитьОбъектУчетаВИмеющейсяСтроке(ИдентификаторСтроки, ВыбранныйОбъект)
	
	СтрокаТаблицыОбъектов = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗаполнитьОбъектУчетаВТекущейСтроке(СтрокаТаблицыОбъектов, ВыбранныйОбъект);
	ЗаполнитьСведенияОТекущемОбъекте(ВыбранныйОбъект, СтрокаТаблицыОбъектов.ПредставлениеАдресаОбъекта);
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение здания в текущей строке таблицы зданий.
//
Процедура ЗаполнитьОбъектУчетаВТекущейСтроке(ПустаяСтрокаОбъекта, ВыбранныйОбъект)
	
	ПустаяСтрокаОбъекта.Объект                     = ВыбранныйОбъект;
	ПустаяСтрокаОбъекта.ПредставлениеАдресаОбъекта = Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьНачальноеПредставлениеАдресаЗдания(ВыбранныйОбъект, Объект.КонтактнаяИнформацияВсехЗданий);
	ПустаяСтрокаОбъекта.ТекущийКодДомаПоФИАС       = ?(ВыбранныйОбъект = Неопределено, "", ВыбранныйОбъект.КодДомаПоФИАС);
	ПустаяСтрокаОбъекта.КодДомаПоФИАССохранен      = Ложь;
	
	ПредставлениеТекущегоАдреса = ПустаяСтрокаОбъекта.ПредставлениеАдресаОбъекта;
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение таблицы зданий.
//
Процедура ЗаполнитьТаблицуОбъектов(ПолучатьОбъектыСКодамиПоФИАС = Истина)
	
	ТаблицаОбъектов.Очистить();
	
	ТаблицаЗданий = ПолучитьОбъектыУчета(ПолучатьОбъектыСКодамиПоФИАС);
	
	Для каждого ТекЗдание из ТаблицаЗданий Цикл
		ДобавитьОбъектВТаблицуОбъектов(ТекЗдание.Объект);
	КонецЦикла;
	
	Элементы.ТаблицаОбъектов.Обновить();
	
	ОпределитьТекущийСтатусВыполнения();
	
КонецПроцедуры

&НаСервере
// Выполняет получение зданий для добавления в таблицу зданий.
//
Функция ПолучитьОбъектыУчета(ПолучатьОбъектыСКодамиПоФИАС)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Объект,
	|	КВП_Здания.КодДомаПоФИАС КАК КодДомаПоФИАС
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ПометкаУдаления
	|	И НЕ КВП_Здания.ЭтоГруппа
	|	И (&ПолучатьОбъектыСКодамиПоФИАС
	|			ИЛИ КВП_Здания.КодДомаПоФИАС = """")";
	
	Запрос.УстановитьПараметр("ПолучатьОбъектыСКодамиПоФИАС", ПолучатьОбъектыСКодамиПоФИАС);
	
	ТаблицаЗданий = Запрос.Выполнить().Выгрузить();
	
	ПолучитьНачальныеПредставленияАдресов(ТаблицаЗданий.ВыгрузитьКолонку("Объект"));
	
	Возврат ТаблицаЗданий;
	
КонецФункции

&НаСервере
// Обрабатывает изменение здания в таблице зданий.
//
Процедура ОбработатьИзменениеОбъектаВТаблицеОбъектов(НовыйОбъект, ИдентификаторТекущейСтроки, НоваяСтрока)
	
	ТекущаяСтрокаИсточника = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущаяСтрокаИсточника.КодДомаПоФИАССохранен = Ложь;
	
	Если НоваяСтрока Тогда
		
		Если НЕ ТекущаяСтрокаИсточника = Неопределено Тогда
			
			ТекущаяСтрокаИсточника.Объект               = НовыйОбъект;
			ТекущаяСтрокаИсточника.ТекущийКодДомаПоФИАС = НовыйОбъект.КодДомаПоФИАС;
			
			СтруктураПоиска         = Новый Структура("Объект", НовыйОбъект);
			НайденныеСтрокиКодовФИАС = Объект.ТаблицаЗагруженныхКодовПоФИАС.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиКодовФИАС.Количество() = 1 Тогда
				ТекущаяСтрокаИсточника.НовыйКодДомаПоФИАС = НайденныеСтрокиКодовФИАС[0].КодДомаПоФИАС;
			Иначе
				ТекущаяСтрокаИсточника.НовыйКодДомаПоФИАС = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьСтатусТекущейСтроки(ТекущаяСтрокаИсточника, НоваяСтрока);
	
КонецПроцедуры

&НаСервере
// Добавляет новое здание в таблицу зданий.
//
Процедура ДобавитьОбъектВТаблицуОбъектов(ОбъектДляДобавления)
	
	НоваяСтрока = ТаблицаОбъектов.Добавить();
	ЗаполнитьОбъектУчетаВТекущейСтроке(НоваяСтрока, ОбъектДляДобавления);
	ОпределитьСтатусТекущейСтроки(НоваяСтрока, Истина);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРЕДСТАВЛЕНИЯМИ АДРЕСОВ

#Область РаботаСПредставлениямиАдресов

&НаСервере
// Формирует начальное представление адреса, используемое при добавлении здания в таблицу зданий.
//
Процедура ПолучитьНачальныеПредставленияАдресов(Здания)
	
	Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьНачальныеПредставленияАдресов(Здания, Объект.КонтактнаяИнформацияВсехЗданий);
	
КонецПроцедуры

&НаСервере
// Изменяет представление адреса текущего объекта по идентификатору строки объекта в таблице зданий.
//
Процедура ИзменитьПредставлениеАдресаТекущегоОбъектаПоИдентификаторуСтроки(ИдентификаторСтроки, НовоеПредставлениеАдреса)
	
	СтрокаТаблицыОбъектов                            = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторСтроки);
	СтрокаТаблицыОбъектов.ПредставлениеАдресаОбъекта = НовоеПредставлениеАдреса;
	
КонецПроцедуры

&НаСервере
// Изменяет представление адреса первого объекта в таблице зданий.
//
Процедура ИзменитьПредставлениеАдресаПервогоОбъектаВТаблицеОбъектов(НовоеПредставлениеАдреса)
	
	СтрокаТаблицыОбъектов                            = ТаблицаОбъектов[0];
	СтрокаТаблицыОбъектов.ПредставлениеАдресаОбъекта = НовоеПредставлениеАдреса;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КОДОВ ПО ФИАС

#Область ЗагрузкаКодовФИАС

&НаСервере
// Обновляет коды по ФИАС текущего здания.
//
Процедура ОбновитьКодыФИАСТекущегоОбъектаНаСервере(ОбъектДляЗаполнения, ПредставлениеАдресаОбъекта)
	
	ПройденоПроцентов      = 0;
	ТаблицаТекущегоОбъекта = Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьТаблицуКодовФИАСОбъекта(ПредставлениеАдресаОбъекта);
	
	УдалитьСтрокиЗагруженныхДанныхОбъекта(ОбъектДляЗаполнения);
	
	Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаТекущегоОбъекта, ОбъектДляЗаполнения, Объект.ТаблицаЗагруженныхКодовПоФИАС);
	
	ЗаполнитьТаблицуКодовФИАСОбъекта(ОбъектДляЗаполнения);
	ЗаполнитьНовыйКодДомаПоФИАСОбъекта(ОбъектДляЗаполнения);
	
	ПройденоПроцентов = 100;
	
КонецПроцедуры

&НаКлиенте
// Запускает выполнение заполнения кодов по ФИАС всех зданий.
//
Процедура ЗаполнитьКодыФИАСВсехОбъектовНаКлиенте()
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		
		СтрокиЗданийСНезаполненнымКодомПоФИАС      = ТаблицаОбъектов.НайтиСтроки(Новый Структура("КодДомаПоФИАСЗаполнен", Ложь));
		КоличествоСтрокСНезаполненнымиКодамиПоФИАС = СтрокиЗданийСНезаполненнымКодомПоФИАС.Количество();
		
		Если КоличествоСтрокСНезаполненнымиКодамиПоФИАС = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для всех зданий в таблице уже заполнены коды по ФИАС.");
			
		Иначе
			
			ПройденоПроцентов     = 0;
			ПроцентКаждогоОбъекта = 100 / КоличествоСтрокСНезаполненнымиКодамиПоФИАС;
			
			Объект.ТаблицаЗагруженныхКодовПоФИАС.Очистить();
			
			Для каждого ТекСтрокаОбъекта из ТаблицаОбъектов Цикл
				Если ПустаяСтрока(ТекСтрокаОбъекта.НовыйКодДомаПоФИАС) Тогда
					ЗаполнитьКодыФИАСОбъектаНаСервере(ТекСтрокаОбъекта.Объект, ТекСтрокаОбъекта.ПредставлениеАдресаОбъекта);
					ПройденоПроцентов = ПройденоПроцентов + ПроцентКаждогоОбъекта;
				КонецЕсли;
			КонецЦикла;
			
			ПройденоПроцентов = 100;
			
			ЗаполнитьТаблицуКодовФИАСОбъекта(ТекущийОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПереданныйОбъект) Тогда
		УстановитьВидимостьЭлементовПриЗапускеИзФормыОбъектаУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение кодов по ФИАС здания.
//
Процедура ЗаполнитьКодыФИАСОбъектаНаСервере(ТекущийОбъект, ПредставлениеАдресаОбъекта)
	
	ТаблицаТекущегоОбъекта = Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьТаблицуКодовФИАСОбъекта(ПредставлениеАдресаОбъекта);
	
	Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ЗаполнитьСтрокиЗагруженныхДанныхОбъекта(ТаблицаТекущегоОбъекта, ТекущийОбъект, Объект.ТаблицаЗагруженныхКодовПоФИАС);
	
	ЗаполнитьНовыйКодДомаПоФИАСОбъекта(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Выполняет заполнение нового кода по ФИАС здания.
//
Процедура ЗаполнитьНовыйКодДомаПоФИАСОбъекта(ОбъектДляЗаполнения)
	
	СтрокиОбъекта = ТаблицаОбъектов.НайтиСтроки(Новый Структура("Объект", ОбъектДляЗаполнения));
	
	Если СтрокиОбъекта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОбъекта                   = СтрокиОбъекта[0];
	
	// Определяем количество загруженных кодов по ФИАС для здания.
	СтрокиКодовФИАСОбъекта          = Объект.ТаблицаЗагруженныхКодовПоФИАС.НайтиСтроки(Новый Структура("Объект", ОбъектДляЗаполнения));
	КоличествоСтрокКодовФИАСОбъекта = СтрокиКодовФИАСОбъекта.Количество();
	
	// Если загружен хотя бы один один код по ФИАС, то устанавливаем флаги в таблице зданий
	// для дальнейшего определения статусов.
	Если НЕ КоличествоСтрокКодовФИАСОбъекта = 0 Тогда
		ИмеютсяНесохраненныеДанные          = Истина;
		СтрокаОбъекта.КодДомаПоФИАССохранен = Ложь;
	КонецЕсли;
	
	// Если найден только один код по ФИАС, то проверяем представление адреса, сформированное
	// на основании данных из базы, с представлением, сформированным на основании загруженных
	// данных.
	// Если представления совпадают, то считаем, что найден верный код по ФИАС. Иначе считаем,
	// что загруженный код по ФИАС нуждается в проверке пользователем.
	Если КоличествоСтрокКодовФИАСОбъекта = 1 Тогда
		
		ИмеющеесяПредставление       = СтрокаОбъекта.ПредставлениеАдресаОбъекта;
		СтрокаЗагруженногоКодаПоФИАС = СтрокиКодовФИАСОбъекта[0];
		
		Если Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.СравнитьПолученноеПредставлениеАдресаСИмеющимся(СтрокаЗагруженногоКодаПоФИАС.ПредставлениеАдреса, ИмеющеесяПредставление) Тогда
			СтрокаОбъекта.НовыйКодДомаПоФИАС = СтрокиКодовФИАСОбъекта[0].КодДомаПоФИАС;
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьСтатусТекущейСтроки(СтрокаОбъекта);
	
КонецПроцедуры

&НаСервере
// Удаляет строки загруженных данных здания.
//
Процедура УдалитьСтрокиЗагруженныхДанныхОбъекта(ОбъектДляУдаления)
	
	СтрокиОбъектаДляУдаления = Объект.ТаблицаЗагруженныхКодовПоФИАС.НайтиСтроки(Новый Структура("Объект", ОбъектДляУдаления));
	
	Для каждого ТекСтрокаДляУдаления из СтрокиОбъектаДляУдаления Цикл
		Объект.ТаблицаЗагруженныхКодовПоФИАС.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Заполняет таблицу кодов по ФИАС здания.
//
Процедура ЗаполнитьТаблицуКодовФИАСОбъекта(ОбъектДляОтображения)
	
	ТаблицаКодовЗданияПоФИАС.Очистить();
	
	Если ЗначениеЗаполнено(ОбъектДляОтображения) Тогда
		
		СтрокиОбъекта = Объект.ТаблицаЗагруженныхКодовПоФИАС.НайтиСтроки(Новый Структура("Объект", ОбъектДляОтображения));
		
		Для каждого ТекСтрока из СтрокиОбъекта Цикл
			НоваяСтрока = ТаблицаКодовЗданияПоФИАС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАГРУЗКА КОДОВ ПО ФИАС (ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ)

#Область ЗагрузкаКодовФИАСВспомогательныеФункции

&НаСервере
// Выполняет заполнение сведений о текущем здании.
//
Процедура ЗаполнитьСведенияОТекущемОбъекте(ОбъектВходящий, ТекущееПредставление = "")
	
	ТекущийОбъект = ОбъектВходящий;
	
	Если ПустаяСтрока(ТекущееПредставление) Тогда
		ПредставлениеТекущегоАдреса = Обработки.УПЖКХ_ЗагрузкаКодовЗданийПоФИАС.ПолучитьНачальноеПредставлениеАдресаЗдания(ОбъектВходящий, Объект.КонтактнаяИнформацияВсехЗданий);
	Иначе
		ПредставлениеТекущегоАдреса = ТекущееПредставление;
	КонецЕсли;
	
	ЗаполнитьТаблицуКодовФИАСОбъекта(ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ЗАПИСЬ НОВЫХ КОДОВ ПО ФИАС

#Область ЗаписьНовыхКодовФИАС

&НаСервере
// Выполняет сохранение кодов по ФИАС.
//
Функция КомандаСохранитьКодыФИАСНаСервере()
	
	СохраненоУспешно               = Истина;
	КоличествоСохраненныхКодовФИАС = 0;
	
	Для каждого ТекСтрокаОбъекта из ТаблицаОбъектов Цикл
		
		НовыйКодДомаПоФИАС = ТекСтрокаОбъекта.НовыйКодДомаПоФИАС;
		
		Если ПустаяСтрока(НовыйКодДомаПоФИАС) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаОбъекта.ТекущийКодДомаПоФИАС = НовыйКодДомаПоФИАС Тогда
			
			ТекСтрокаОбъекта.КодДомаПоФИАСЗаполнен = Истина;
			ТекСтрокаОбъекта.КодДомаПоФИАССохранен = Истина;
			
			ОпределитьСтатусТекущейСтроки(ТекСтрокаОбъекта);
			
			Продолжить;
			
		КонецЕсли;
		
		ОбъектДляИзменения               = ТекСтрокаОбъекта.Объект.ПолучитьОбъект();
		ОбъектДляИзменения.КодДомаПоФИАС = НовыйКодДомаПоФИАС;
		
		Если КВП_ЗаписатьОбъект(ОбъектДляИзменения) Тогда
			
			ТекСтрокаОбъекта.ТекущийКодДомаПоФИАС  = НовыйКодДомаПоФИАС;
			ТекСтрокаОбъекта.КодДомаПоФИАСЗаполнен = Истина;
			ТекСтрокаОбъекта.КодДомаПоФИАССохранен = Истина;
			
			ОпределитьСтатусТекущейСтроки(ТекСтрокаОбъекта);
			
			КоличествоСохраненныхКодовФИАС = КоличествоСохраненныхКодовФИАС + 1;
		Иначе
			ТекСтрокаОбъекта.КодДомаПоФИАСЗаполнен = Истина;
			СохраненоУспешно                       = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмеютсяНесохраненныеДанные = НЕ СохраненоУспешно;
	
	Возврат КоличествоСохраненныхКодовФИАС;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫБОРА КОДОВ ФИАС

#Область ОбработчикиВыбораКодовФИАС

&НаСервере
// Обрабатывает выбор кода ФИАС.
//
Процедура ОбработкаВыбораКодаФИАСВТаблицеКодовФИАС(ВыбранныйКодДомаПоФИАС, ИдентификаторТекущейСтрокиОбъекта = Неопределено)
	
	Если ИдентификаторТекущейСтрокиОбъекта = Неопределено Тогда
		СтрокаТекущегоОбъекта = ТаблицаОбъектов[0];
	Иначе
		СтрокаТекущегоОбъекта = ТаблицаОбъектов.НайтиПоИдентификатору(ИдентификаторТекущейСтрокиОбъекта);
	КонецЕсли;
	
	Если НЕ СтрокаТекущегоОбъекта.НовыйКодДомаПоФИАС = ВыбранныйКодДомаПоФИАС Тогда
		
		СтрокаТекущегоОбъекта.НовыйКодДомаПоФИАС    = ВыбранныйКодДомаПоФИАС;
		СтрокаТекущегоОбъекта.КодДомаПоФИАССохранен = Ложь;
		
		ИмеютсяНесохраненныеДанные = Истина;
		ТекущийКодДомаПоФИАС       = ВыбранныйКодДомаПоФИАС;
		
		ОпределитьСтатусТекущейСтроки(СтрокаТекущегоОбъекта);
		ОпределитьТекущийСтатусВыполнения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СТАТУСОВ ЗАПОЛНЕНИЯ КОДОВ ПО ФИАС ЗДАНИЙ

#Область ОпределениеСтатусовЗаполненияКодовПоФИАСЗданий

&НаСервере
// Определяет статус заполнения текущей строки.
//
Процедура ОпределитьСтатусТекущейСтроки(СтрокаТаблицыОбъектов, НоваяСтрока = Ложь)
	
	СтрокаТаблицыОбъектов.КодДомаПоФИАСЗаполнен = Ложь;
	
	Если СтрокаТаблицыОбъектов.КодДомаПоФИАССохранен Тогда
		
		СтрокаТаблицыОбъектов.СтатусЗаполнения      = "Код по ФИАС сохранен";
		СтрокаТаблицыОбъектов.КодДомаПоФИАСЗаполнен = Истина;
		
	Иначе
		
		НовыйКодДомаПоФИАСНеЗаполнен = ПустаяСтрока(СтрокаТаблицыОбъектов.НовыйКодДомаПоФИАС);
		
		Если НовыйКодДомаПоФИАСНеЗаполнен Тогда
			
			СтрокиОбъекта                    = Объект.ТаблицаЗагруженныхКодовПоФИАС.НайтиСтроки(Новый Структура("Объект", СтрокаТаблицыОбъектов.Объект));
			КоличествоЗагруженныхКодовПоФИАС = СтрокиОбъекта.Количество();
			
			Если КоличествоЗагруженныхКодовПоФИАС = 0 Тогда
				Если НоваяСтрока Тогда
					СтрокаТаблицыОбъектов.СтатусЗаполнения = "Загрузка не выполнялась";
				Иначе
					СтрокаТаблицыОбъектов.СтатусЗаполнения = "Кодов по ФИАС не найдено";
				КонецЕсли;
			ИначеЕсли КоличествоЗагруженныхКодовПоФИАС = 1 Тогда
				СтрокаТаблицыОбъектов.СтатусЗаполнения = "Найденный код по ФИАС может не соответствовать зданию";
			Иначе
				СтрокаТаблицыОбъектов.СтатусЗаполнения = "Найдено несколько кодов по ФИАС";
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицыОбъектов.КодДомаПоФИАСЗаполнен = Истина;
			СтрокаТаблицыОбъектов.СтатусЗаполнения      = "Код по ФИАС заполнен";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Определяет текущий статус выполнения заполнения кодов ФИАС зданий.
//
Процедура ОпределитьТекущийСтатусВыполнения()
	
	Если НЕ ЗначениеЗаполнено(ПереданныйОбъект) Тогда
		
		КоличествоОбъектовВсего = ТаблицаОбъектов.Количество();
		
		Если КоличествоОбъектовВсего = 0 Тогда
			СостояниеНетОбъектовВТаблице();
		Иначе
			
			СтрокиСНезагружавшимисяКодами = ТаблицаОбъектов.НайтиСтроки(Новый Структура("СтатусЗаполнения", "Загрузка не выполнялась"));
			
			КоличествоСтрокСНезагруженнымиКодами = СтрокиСНезагружавшимисяКодами.Количество();
			
			// Ни по одному объекту не загружались кададстровые номера.
			Если КоличествоСтрокСНезагруженнымиКодами = КоличествоОбъектовВсего Тогда
				СостояниеНеЗагружалисьКодыФИАС();
			ИначеЕсли НЕ КоличествоСтрокСНезагруженнымиКодами = 0 Тогда
				СостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам();
			Иначе
				
				СтрокиСЗаполненнымиКодами = ТаблицаОбъектов.НайтиСтроки(Новый Структура("КодДомаПоФИАСЗаполнен", Истина));
				СтрокиССохраненнымиКодами = ТаблицаОбъектов.НайтиСтроки(Новый Структура("КодДомаПоФИАССохранен", Истина));
				
				КоличествоОбъектовЗаполненных = СтрокиСЗаполненнымиКодами.Количество();
				КоличествоОбъектовСохраненных = СтрокиССохраненнымиКодами.Количество();
				
				Если КоличествоОбъектовЗаполненных = КоличествоОбъектовВсего Тогда
					
					Если КоличествоОбъектовЗаполненных = КоличествоОбъектовСохраненных Тогда
						СостояниеСохраненоУспешно();
					Иначе
						СостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения();
					КонецЕсли;
					
				ИначеЕсли КоличествоОбъектовЗаполненных = 0 И Объект.ТаблицаЗагруженныхКодовПоФИАС.Количество() = 0 Тогда
					
					СостояниеНеЗагружалисьКодыФИАС();
					
				Иначе
					
					СостояниеНеДляВсехОбъектовЗаполненКодДомаПоФИАС();
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Нет объектов в таблице зданий".
//
Процедура СостояниеНетОбъектовВТаблице()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                      = Истина;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАС.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКодФИАС.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                         = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветВыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКодыПоФИАС.Доступность                      = Ложь;
	Элементы.КнопкаСохранитьКодыПоФИАС.Доступность                      = Ложь;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Коды по ФИАС еще не загружались".
//
Процедура СостояниеНеЗагружалисьКодыФИАС()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                      = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАС.Видимость                    = Истина;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКодФИАС.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                         = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветВыделеннойКнопки();
	Элементы.КнопкаСохранитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.КнопкаСохранитьКодыПоФИАС.Доступность                      = Ложь;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Коды по ФИАС еще не загружались для некоторых зданий".
//
Процедура СостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                      = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАС.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам.Видимость = Истина;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКодФИАС.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                         = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветВыделеннойКнопки();
	Элементы.КнопкаСохранитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.КнопкаСохранитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Новые коды по ФИАС заполнены не для всех зданий".
//
Процедура СостояниеНеДляВсехОбъектовЗаполненКодДомаПоФИАС()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                      = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАС.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКодФИАС.Видимость         = Истина;
	Элементы.ДекорацияСостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                         = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветВыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.КнопкаСохранитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Новые коды по ФИАС заполнены для всех зданий, но не сохранялись".
//
Процедура СостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                      = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАС.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКодФИАС.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения.Видимость = Истина;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                         = Ложь;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветВыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.КнопкаСохранитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
	// Если включена опция "Показать здания с незаполненными кодами по ФИАС" включена - отключаем.
	Если УстановленОтборПроблемныхОбъектов Тогда
		ИзменитьОтображениеПроблемныхОбъектов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает состояние "Новые коды по ФИАС успешно сохранены".
//
Процедура СостояниеСохраненоУспешно()
	
	Элементы.ДекорацияСостояниеНетОбъектовВТаблице.Видимость                      = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАС.Видимость                    = Ложь;
	Элементы.ДекорацияСостояниеНеЗагружалисьКодыФИАСПоНекоторымОбъектам.Видимость = Ложь;
	Элементы.ДекорацияСостояниеНеДляВсехОбъектовЗаполненКодФИАС.Видимость         = Ложь;
	Элементы.ДекорацияСостояниеВсеКодыФИАСЗаполненыИГотовыДляСохранения.Видимость = Ложь;
	Элементы.ДекорацияСостояниеСохраненоУспешно.Видимость                         = Истина;
	
	Элементы.ГруппаЗаполнить.ЦветФона                                = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаЗагрузитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.КнопкаСохранитьКодыПоФИАС.ЦветФона                      = ПолучитьЦветНевыделеннойКнопки();
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.ЦветФона = ПолучитьЦветНевыделеннойКнопки();
	
	Элементы.КнопкаЗагрузитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.КнопкаСохранитьКодыПоФИАС.Доступность                      = Истина;
	Элементы.ТаблицаОбъектовКнопкаПоказатьПроблемныеОбъекты.Доступность = Ложь;
	
	Если УстановленОтборПроблемныхОбъектов Тогда
		ИзменитьОтображениеПроблемныхОбъектов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Возвращает цвет кнопки, актуальной согласно текущему состоянию.
//
Функция ПолучитьЦветВыделеннойКнопки()
	
	Возврат Новый Цвет(255, 215, 0);
	
КонецФункции

&НаСервере
// Возвращает цвет кнопки, неактуальной согласно текущему состоянию.
//
Функция ПолучитьЦветНевыделеннойКнопки()
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

#КонецОбласти
