
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("Организация", Объект.Организация);
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	ЗаполнитьНастройку();
	СформироватьТаблицу();
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

#Область ОбработчикиСобытийЭлементовУправления

&НаКлиенте
// Обработчик события "ПриИзменении" элемента Организация
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьНастройку();
	СформироватьТаблицу();
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля ТаблицаСоответствия
Процедура ТаблицаСоответствияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЗаписатьСоответствие(Элементы.ТаблицаСоответствия.ТекущиеДанные.ПолучитьИдентификатор(), Элемент.ТекущийЭлемент.Имя);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу соответствий  из регистра "НастройкиСоответствияСтатейИсточников".
Процедура ЗаполнитьНастройку()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НастройкиСоответствияСтатейИсточников.СтатьяЗатрат,
	|	КВП_НастройкиСоответствияСтатейИсточников.Источник,
	|	КВП_НастройкиСоответствияСтатейИсточников.Запись
	|ИЗ
	|	РегистрСведений.КВП_НастройкиСоответствияСтатейИсточников КАК КВП_НастройкиСоответствияСтатейИсточников
	|ГДЕ
	|	КВП_НастройкиСоответствияСтатейИсточников.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Настройка.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Функция возвращает массив всех источников из справочника "Назначение целевых средств".
&НаСервере
Функция ПолучитьСписокИсточников(СписокИсточников = Неопределено)
	
	// Отберем список источников из справочника "Назначение целевых средств".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НазначениеЦелевыхСредств.Ссылка КАК Источник
	|ИЗ
	|	Справочник.НазначениеЦелевыхСредств КАК НазначениеЦелевыхСредств
	|ГДЕ
	|	НазначениеЦелевыхСредств.ПометкаУдаления = ЛОЖЬ";
	
	ВыборкаИсточника = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Источник");
	Возврат ВыборкаИсточника;
	
КонецФункции  // ПолучитьСписокИсточников()

&НаСервере
// Формирует таблицу значений с динамическими колонками.
Процедура СформироватьТаблицу()
	
	СписокИсточников = ПолучитьСписокИсточников();
	ТаблицаСоответствия.Очистить();
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	СоздатьКолонку(МассивДобавляемыхРеквизитов, "Статьи", "Статьи затрат",
					Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	
	Для Сч = 0 По СписокИсточников.Количество()-1 Цикл
			СоздатьКолонку(МассивДобавляемыхРеквизитов, "Кол" + Сч, СписокИсточников[сч], Новый ОписаниеТипов("Булево"));
			СписокПодразделений.Добавить(СписокИсточников[сч]);
	КонецЦикла;
	
	ОбновитьСоставКолонок(МассивДобавляемыхРеквизитов);
	ЗаполнитьТаблицу();
	ОбновитьТабличноеПолеТаблицаСоответствия();
	
КонецПроцедуры //СформироватьТаблицу()

&НаСервере
// Создает колонку в таблице значений с указанными параметрами.
Процедура СоздатьКолонку(МассивДобавляемыхРеквизитов, ИДКолонки, ИмяКолонки, ТипКолонки)
	РеквизитФормы = Новый РеквизитФормы(ИДКолонки, ТипКолонки, "ТаблицаСоответствия", ИмяКолонки); 
	МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
КонецПроцедуры

&НаСервере
// Вызывает создание колонок табличного поля и заполняет свойства
// элементов управления колонок.
Процедура ОбновитьСоставКолонок(МассивДобавляемыхРеквизитов)
	СуществующиеРеквизиты = ЭтаФорма.ПолучитьРеквизиты("ТаблицаСоответствия");
	МассивУдаляемыхРеквизитов = Новый Массив();
	Для Каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
		 МассивУдаляемыхРеквизитов.Добавить(СуществующийРеквизит.Путь + "." + СуществующийРеквизит.Имя);
	КонецЦикла;
	// Создадим реквизиты
	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
КонецПроцедуры // ОбновитьСоставКолонок()

&НаСервере
// Обновляет ТП ТаблицаСоответствия
// значениями табличной части Смета расходов.
Процедура ОбновитьТабличноеПолеТаблицаСоответствия()
	
	МаксШирина = ПолучитьШиринуСтатьи();
	ОчиститьКолонкиТаблицаСоответствия();
	ТЗТаблицаСоответствия = ТаблицаСоответствия.Выгрузить();
	
	ном = 0;
	Для Каждого Колонка Из ТЗТаблицаСоответствия.Колонки Цикл
		
		Элемент = Элементы.Добавить("ТаблицаСоответствия" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаСоответствия);
		Элемент.ПутьКДанным = "ТаблицаСоответствия." + Колонка.Имя;
		Если ном = 0 Тогда
			Элемент.Вид = ВидПоляФормы.ПолеНадписи;
			Элемент.ТолькоПросмотр = Истина;
			Элемент.Ширина = МаксШирина;
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
		ном = ном + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Возвращает ширину колонки Статьи
Функция ПолучитьШиринуСтатьи()
	МаксШирина = 0;
	ТЗТаблицаСоответствия = ТаблицаСоответствия.Выгрузить();
	Для Каждого СтрокаСтатья Из ТЗТаблицаСоответствия Цикл
		ДлинаКолонки = СтрДлина(СтрокаСтатья.Статьи.Наименование);
		Если ДлинаКолонки > МаксШирина Тогда
			МаксШирина = ДлинаКолонки;
		КонецЕсли;
	КонецЦикла;
	
	СуществующиеРеквизиты = ЭтаФорма.ПолучитьРеквизиты("ТаблицаСоответствия");
	
	Для Каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
		ДлинаКолонки = СтрДлина(СуществующийРеквизит.Заголовок);
		Если ДлинаКолонки > МаксШирина Тогда
			МаксШирина = ДлинаКолонки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксШирина;
КонецФункции

&НаСервере
// Очищает колонки элементов ТаблицаСоответствия
Процедура ОчиститьКолонкиТаблицаСоответствия()
	МассивУдаляемыхЭлементов = Новый Массив();
	Для Каждого Элемент Из Элементы Цикл
		Если Найти(Элемент.Имя, "ТаблицаСоответствия") > 0 Тогда
			Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
				МассивУдаляемыхЭлементов.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу статьями затрат из справочника "Статьи затрат".
//
// Параметры:
//	нет.
Процедура ЗаполнитьТаблицу()
	
	ТЗТаблицаСоответствия = ТаблицаСоответствия.Выгрузить();
	ТЗТаблицаСоответствия.Очистить();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьСтатьямиЗатрат(ТЗТаблицаСоответствия);
	КонецЕсли;

	Для каждого Стр Из Настройка Цикл
		
		НайденнаяСтрока = ТЗТаблицаСоответствия.Найти(Стр.СтатьяЗатрат, "Статьи");
		Если НайденнаяСтрока <> Неопределено Тогда
			мСписокПодразделений = СписокПодразделений.НайтиПоЗначению(Стр.Источник);
			Если мСписокПодразделений <> Неопределено Тогда
				НайденнаяСтрока["Кол"+СписокПодразделений.Индекс(мСписокПодразделений)] = Стр.Запись;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТЗТаблицаСоответствия, ТаблицаСоответствия);
	
КонецПроцедуры //ЗаполнитьТаблицУ()

&НаСервере
// Процедура заполняет таблицу соответствия статьями затрат из справочника "Статьи затрат".
//
// Параметры:
//	нет.
Процедура ЗаполнитьСтатьямиЗатрат(ТЗТаблицаСоответствия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ПометкаУдаления = ЛОЖЬ
	|	И СтатьиЗатрат.ЭтоГруппа = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока        = ТЗТаблицаСоответствия.Добавить();
		НоваяСтрока.Статьи = Выборка.СтатьяЗатрат; 
	КонецЦикла;
	
КонецПроцедуры  //ЗаполнитьСтатьямиЗатрат()

&НаСервере
// Процедура записывает измененную строку таблицы соответствия на сервере.
Процедура ЗаписатьСоответствие(СтрокаСоответствия, ИмяКолонки)
	ИмяРеквизита = СтрЗаменить(ИмяКолонки, "ТаблицаСоответствия", "");
	НомерКолонки = Число(СтрЗаменить(ИмяРеквизита, "Кол", ""));
	ТекущаяСтрокаСоответствия = ТаблицаСоответствия.НайтиПоИдентификатору(СтрокаСоответствия);
	Если ТекущаяСтрокаСоответствия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НастройкиЗагрузки = РегистрыСведений.КВП_НастройкиСоответствияСтатейИсточников.СоздатьМенеджерЗаписи();
	НастройкиЗагрузки.Организация  = Объект.Организация;
	НастройкиЗагрузки.СтатьяЗатрат = ТекущаяСтрокаСоответствия.Статьи;
	НастройкиЗагрузки.Источник = СписокПодразделений[НомерКолонки].Значение;
	
	Если ТекущаяСтрокаСоответствия[ИмяРеквизита] Тогда
		НастройкиЗагрузки.Запись   = ТекущаяСтрокаСоответствия[ИмяРеквизита];
		НастройкиЗагрузки.Записать();
	Иначе
		НастройкиЗагрузки.Удалить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
