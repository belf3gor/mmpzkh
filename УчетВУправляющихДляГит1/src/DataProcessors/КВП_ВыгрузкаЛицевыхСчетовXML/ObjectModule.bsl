
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПеременныеМодуля

Перем мРаботаВДиалоге Экспорт;             // Через форму
Перем мПоказыватьСостояние Экспорт;        // Вывод в строку состояния
Перем мНастройкиФормированияПДЖКХ Экспорт; // Хранит настройки формирования платежного документа ЖКХ.

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОГУТ ВЫЗЫВАТЬСЯ ИЗ ВНЕШНЕЙ ОБРАБОТКИ

#Область ЭкспортныеМетоды

// Функция возвращает тип выгружаемых данных.
// Предназначена для вызова из внешней обработки.
//
Функция ПолучитьТипДанныхXML() Экспорт
	Возврат "accounts";
КонецФункции

///////////////////////////////////////////////////////////////////////////////

// Процедура инициализирует значения реквизитов по умолчанию.
//
Процедура ИнициализацияРеквизитов() Экспорт
	
	Если Организация = Неопределено Тогда
		Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
		
	ПериодПросмотра = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();

КонецПроцедуры // ИнициализацияРеквизитов()

// Возвращает Истина, если в ИБ одна организация
Функция ЕдинственнаяОрганизация(ПередатьМассивОрганизации) Экспорт
	
	Количество = 0;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Организация
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	НЕ Организации.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не ПередатьМассивОрганизации Тогда
		Пока Выборка.Следующий() И Количество < 2 Цикл
			Если ЕстьУслугиОрганизации(Выборка.Организация) Тогда
				Количество = Количество + 1;
			КонецЕсли;
		КонецЦикла;
		Возврат (Количество = 1);
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если для организации назначены услуги
Функция ЕстьУслугиОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисления.Регистратор
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Организация = &Организация
	|	И КВП_НазначенныеНачисления.Действует";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ СБОРА ДАННЫХ

#Область ФункцииСбораДанных

// Формирует таблицу, содержащую ссылки на все элементы справочника лицевые счета,
// которые не являются группами и не помечены на удаление.
Функция ПолучитьВсеЛицевыеСчета()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|	И НЕ КВП_ЛицевыеСчета.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует таблицу начислений в разрезе организаций, лицевых счетов и услуг.
// 
// Параметры:
//  СписокОрганизаций - список значений/массив организаций.
//  СписокЛицевыхСчетов - список значений/массив лицевых счетов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица начислений.
//
Функция ПолучитьТаблицуНачислений(СписокОрганизаций, СписокЛицевыхСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втОбъектыЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбъектыЛС.ЛицевойСчет = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбъектыЛС.ЛицевойСчет = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Норма,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбъектыЛС.Здание = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаОПУ
	|ПОМЕСТИТЬ втТаблицаНорм
	|ИЗ
	|	втОбъектыЛС КАК втОбъектыЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ПО (втОбъектыЛС.ЛицевойСчет = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|				ИЛИ втОбъектыЛС.Здание = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Организация,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК НачальноеСальдо
	|ПОМЕСТИТЬ втНачальноеСальдо
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНач,
	|			Организация В (&СписокОрганизаций)
	|				И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоИндПУ,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОПУ
	|ПОМЕСТИТЬ втПотреблениеПоЗданию
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Запись,
	|			Организация В (&СписокОрганизаций)
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|				И (ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК Начислено,
	|	УПЖКХ_НачисленияОбороты.Период КАК Период
	|ПОМЕСТИТЬ втВсеНачисленияЗаПериод
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			День,
	|			Организация В (&СписокОрганизаций)
	|				И ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДн,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНч,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПк,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОбщ,
	|	СУММА(втВсеНачисленияЗаПериод.Начислено) КАК Начислено
	|ПОМЕСТИТЬ втИПУ
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|ГДЕ
	|	втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И (втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента)
	|			ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоДн,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоНч,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПк,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоОбщ,
	|	СУММА(втВсеНачисленияЗаПериод.Начислено) КАК Начислено
	|ПОМЕСТИТЬ втОПУ
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|ГДЕ
	|	втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА втВсеНачисленияЗаПериод.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(втВсеНачисленияЗаПериод.Начислено) КАК Начислено
	|ПОМЕСТИТЬ втБезПУ
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|ГДЕ
	|	втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|	И втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплат,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|					И (втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПерерасчета,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ втВсеНачисленияЗаПериод.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПеней,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЛьгот,
	|	СУММА(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо)
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВводНачальногоСальдо,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ втВсеНачисленияЗаПериод.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И (втВсеНачисленияЗаПериод.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты)
	|						ИЛИ втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги))
	|				ТОГДА втВсеНачисленияЗаПериод.Начислено
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДопНачислений,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втВсеНачисленияЗаПериод.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				ТОГДА втВсеНачисленияЗаПериод.Период
	|			ИНАЧЕ НЕОПРЕДЕЛЕНО
	|		КОНЕЦ) КАК ДатаПоследнейОплаты
	|ПОМЕСТИТЬ втНачисленияБезТарифов
	|ИЗ
	|	втВсеНачисленияЗаПериод КАК втВсеНачисленияЗаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияЗаПериод.Организация,
	|	втВсеНачисленияЗаПериод.ЛицевойСчет,
	|	втВсеНачисленияЗаПериод.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втИПУ.Организация, ЕСТЬNULL(втОПУ.Организация, втБезПУ.Организация)) КАК Организация,
	|	ЕСТЬNULL(втИПУ.ЛицевойСчет, ЕСТЬNULL(втОПУ.ЛицевойСчет, втБезПУ.ЛицевойСчет)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втИПУ.Услуга, ЕСТЬNULL(втОПУ.Услуга, втБезПУ.Услуга)) КАК Услуга,
	|	ЕСТЬNULL(втБезПУ.Количество, 0) + ЕСТЬNULL(втИПУ.КоличествоДн, 0) + ЕСТЬNULL(втИПУ.КоличествоНч, 0) + ЕСТЬNULL(втИПУ.КоличествоПк, 0) + ЕСТЬNULL(втОПУ.КоличествоДн, 0) + ЕСТЬNULL(втОПУ.КоличествоНч, 0) + ЕСТЬNULL(втОПУ.КоличествоПк, 0) КАК РасходВсего,
	|	ЕСТЬNULL(втОПУ.КоличествоДн, 0) + ЕСТЬNULL(втОПУ.КоличествоНч, 0) + ЕСТЬNULL(втОПУ.КоличествоПк, 0) КАК РасходОПУ,
	|	ЕСТЬNULL(втИПУ.Начислено, 0) + ЕСТЬNULL(втБезПУ.Начислено, 0) + ЕСТЬNULL(втОПУ.Начислено, 0) КАК НачисленоВсего,
	|	ЕСТЬNULL(втОПУ.Начислено, 0) КАК НачисленоОПУ
	|ПОМЕСТИТЬ втНачисленияПоУслугам
	|ИЗ
	|	втИПУ КАК втИПУ
	|		ПОЛНОЕ СОЕДИНЕНИЕ втОПУ КАК втОПУ
	|		ПО втИПУ.Организация = втОПУ.Организация
	|			И втИПУ.ЛицевойСчет = втОПУ.ЛицевойСчет
	|			И втИПУ.Услуга = втОПУ.Услуга
	|		ПОЛНОЕ СОЕДИНЕНИЕ втБезПУ КАК втБезПУ
	|		ПО втИПУ.Организация = втБезПУ.Организация
	|			И втИПУ.ЛицевойСчет = втБезПУ.ЛицевойСчет
	|			И втИПУ.Услуга = втБезПУ.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втНачисленияПоУслугам.Организация, ЕСТЬNULL(втНачальноеСальдо.Организация, втНачисленияБезТарифов.Организация)) КАК Организация,
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет, втНачисленияБезТарифов.ЛицевойСчет)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втНачисленияПоУслугам.Услуга, ЕСТЬNULL(втНачальноеСальдо.Услуга, втНачисленияБезТарифов.Услуга)) КАК Услуга,
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет.Адрес.Владелец, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет.Адрес.Владелец, втНачисленияБезТарифов.ЛицевойСчет.Адрес.Владелец)) КАК Здание,
	|	ЕСТЬNULL(втНачисленияПоУслугам.ЛицевойСчет.Адрес.Подъезд, ЕСТЬNULL(втНачальноеСальдо.ЛицевойСчет.Адрес.Подъезд, втНачисленияБезТарифов.ЛицевойСчет.Адрес.Подъезд)) КАК Подъезд
	|ПОМЕСТИТЬ втОбъектыНачислений
	|ИЗ
	|	втНачисленияПоУслугам КАК втНачисленияПоУслугам
	|		ПОЛНОЕ СОЕДИНЕНИЕ втНачальноеСальдо КАК втНачальноеСальдо
	|		ПО втНачисленияПоУслугам.Организация = втНачальноеСальдо.Организация
	|			И втНачисленияПоУслугам.ЛицевойСчет = втНачальноеСальдо.ЛицевойСчет
	|			И втНачисленияПоУслугам.Услуга = втНачальноеСальдо.Услуга
	|		ПОЛНОЕ СОЕДИНЕНИЕ втНачисленияБезТарифов КАК втНачисленияБезТарифов
	|		ПО втНачисленияПоУслугам.Организация = втНачисленияБезТарифов.Организация
	|			И втНачисленияПоУслугам.ЛицевойСчет = втНачисленияБезТарифов.ЛицевойСчет
	|			И втНачисленияПоУслугам.Услуга = втНачисленияБезТарифов.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыНачислений.Организация КАК Организация,
	|	втОбъектыНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	втОбъектыНачислений.Услуга КАК Услуга,
	|	МИНИМУМ(СоставныеУслуги.Услуга) КАК СоставнаяУслуга
	|ПОМЕСТИТЬ втСоставныеУслуги
	|ИЗ
	|	втОбъектыНачислений КАК втОбъектыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги.СоставныеУслуги КАК СоставныеУслуги
	|		ПО втОбъектыНачислений.Услуга = СоставныеУслуги.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыНачислений.Организация,
	|	втОбъектыНачислений.ЛицевойСчет,
	|	втОбъектыНачислений.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСоставныеУслуги.Организация,
	|	втСоставныеУслуги.ЛицевойСчет,
	|	втСоставныеУслуги.Услуга,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА ЕСТЬNULL(КВП_ТарифыСрезПоследних.Тариф, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифДн,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				ТОГДА ЕСТЬNULL(КВП_ТарифыСрезПоследних.Тариф, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифОбщ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифНч,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_ТарифыСрезПоследних.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА КВП_ТарифыСрезПоследних.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифПк
	|ПОМЕСТИТЬ втТарифы
	|ИЗ
	|	втСоставныеУслуги КАК втСоставныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Тарифы.СрезПоследних(&ДатаКон, Организация В (&СписокОрганизаций)) КАК КВП_ТарифыСрезПоследних
	|		ПО втСоставныеУслуги.Организация = КВП_ТарифыСрезПоследних.Организация
	|			И (втСоставныеУслуги.Услуга = КВП_ТарифыСрезПоследних.Услуга
	|				ИЛИ втСоставныеУслуги.СоставнаяУслуга = КВП_ТарифыСрезПоследних.Услуга)
	|			И (втСоставныеУслуги.ЛицевойСчет.Адрес = КВП_ТарифыСрезПоследних.Объект
	|				ИЛИ втСоставныеУслуги.ЛицевойСчет.Адрес.Владелец = КВП_ТарифыСрезПоследних.Объект
	|				ИЛИ КВП_ТарифыСрезПоследних.Объект = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоставныеУслуги.Организация,
	|	втСоставныеУслуги.ЛицевойСчет,
	|	втСоставныеУслуги.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОбъектыНачислений.Организация,
	|	втОбъектыНачислений.ЛицевойСчет,
	|	втОбъектыНачислений.Услуга.ВидУслуги КАК ВидУслуги,
	|	ЕСТЬNULL(УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик, втОбъектыНачислений.Организация) КАК Поставщик,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.НомерСчета
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.НомерСчета
	|	КОНЕЦ КАК РасчетныйСчет,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.Банк
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.Банк.Код
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.Банк.КоррСчет
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.КоррСчет
	|	КОНЕЦ КАК КоррСчет,
	|	СУММА(ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0)) КАК НачисленоПоПоставщику
	|ПОМЕСТИТЬ втПоставщикиУслуг
	|ИЗ
	|	втОбъектыНачислений КАК втОбъектыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПоУслугам КАК втНачисленияПоУслугам
	|		ПО втОбъектыНачислений.Организация = втНачисленияПоУслугам.Организация
	|			И втОбъектыНачислений.Услуга.ВидУслуги = втНачисленияПоУслугам.Услуга.ВидУслуги
	|			И втОбъектыНачислений.ЛицевойСчет = втНачисленияПоУслугам.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияБезТарифов КАК втНачисленияБезТарифов
	|		ПО втОбъектыНачислений.Организация = втНачисленияБезТарифов.Организация
	|			И втОбъектыНачислений.Услуга.ВидУслуги = втНачисленияБезТарифов.Услуга.ВидУслуги
	|			И втОбъектыНачислений.ЛицевойСчет = втНачисленияБезТарифов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|				&ДатаКон,
	|				Организация В (&СписокОрганизаций)
	|					И НЕ ВидУслуги ЕСТЬ NULL ) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|		ПО втОбъектыНачислений.Организация = УПЖКХ_ПоставщикиУслугСрезПоследних.Организация
	|			И втОбъектыНачислений.Услуга.ВидУслуги = УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги
	|			И (ВЫБОР
	|				КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|					ТОГДА втОбъектыНачислений.Здание = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|				КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА втОбъектыНачислений.Подъезд = УПЖКХ_ПоставщикиУслугСрезПоследних.Объект
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыНачислений.Организация,
	|	втОбъектыНачислений.ЛицевойСчет,
	|	втОбъектыНачислений.Услуга.ВидУслуги,
	|	ЕСТЬNULL(УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик, втОбъектыНачислений.Организация),
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.НомерСчета
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.НомерСчета
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.Банк
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.Банк.Код
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.Код
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик ЕСТЬ NULL 
	|			ТОГДА втОбъектыНачислений.Организация.ОсновнойБанковскийСчет.Банк.КоррСчет
	|		ИНАЧЕ УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.КоррСчет
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОбъектыНачислений.Организация КАК Организация,
	|	втОбъектыНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	втОбъектыНачислений.Услуга КАК Услуга,
	|	втОбъектыНачислений.Услуга.Наименование КАК SName,
	|	втОбъектыНачислений.Услуга.ВидУслуги.Наименование КАК VidName,
	|	втОбъектыНачислений.Услуга.Код КАК kod,
	|	втОбъектыНачислений.Услуга.ВидУслуги.ЕдиницаИзмерения КАК edizm,
	|	ВЫБОР
	|		КОГДА втТарифы.ТарифДн = 0
	|			ТОГДА втТарифы.ТарифОбщ
	|		ИНАЧЕ втТарифы.ТарифДн
	|	КОНЕЦ КАК tarif1,
	|	втТарифы.ТарифНч КАК tarif2,
	|	втТарифы.ТарифПк КАК tarif3,
	|	ВЫБОР
	|		КОГДА втОбъектыНачислений.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|				ИЛИ втОбъектыНачислений.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Многотарифная,
	|	ЕСТЬNULL(втНачисленияПоУслугам.РасходВсего, 0) КАК ammount,
	|	ЕСТЬNULL(втНачисленияПоУслугам.РасходОПУ, 0) КАК hammount,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) КАК sum,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОПУ, 0) КАК hsum,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаОплат, 0) КАК sumpayed,
	|	втНачисленияБезТарифов.ДатаПоследнейОплаты,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) КАК correction,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) КАК peni,
	|	ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) КАК compensation,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) КАК msumtopay,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОПУ, 0) + (ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0)) * (ЕСТЬNULL(втНачисленияПоУслугам.НачисленоОПУ, 0) / (ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0)))
	|	КОНЕЦ КАК hsumtopay,
	|	ЕСТЬNULL(втНачальноеСальдо.НачальноеСальдо, 0) КАК debtbeg,
	|	ЕСТЬNULL(втНачальноеСальдо.НачальноеСальдо, 0) + ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаОплат, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) КАК debtend,
	|	ЕСТЬNULL(втТаблицаНорм.Норма, 0) КАК norm,
	|	ЕСТЬNULL(втТаблицаНорм.НормаОПУ, 0) КАК hnorm,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоИндПУ, 0) КАК РасходИПУОбщ,
	|	ЕСТЬNULL(втПотреблениеПоЗданию.КоличествоОПУ, 0) КАК volumeh,
	|	втПоставщикиУслуг.Поставщик.Код КАК CONId,
	|	ЕСТЬNULL(втПоставщикиУслуг.НачисленоПоПоставщику, 0) КАК summ,
	|	ЕСТЬNULL(втНачальноеСальдо.НачальноеСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаОплат, 0) КАК DebtPrev,
	|	ЕСТЬNULL(втНачисленияПоУслугам.НачисленоВсего, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПерерасчета, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаЛьгот, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаВводНачальногоСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаДопНачислений, 0) + ЕСТЬNULL(втНачальноеСальдо.НачальноеСальдо, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаОплат, 0) + ЕСТЬNULL(втНачисленияБезТарифов.СуммаПеней, 0) КАК SumToPay
	|ИЗ
	|	втОбъектыНачислений КАК втОбъектыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПоУслугам КАК втНачисленияПоУслугам
	|		ПО втОбъектыНачислений.Организация = втНачисленияПоУслугам.Организация
	|			И втОбъектыНачислений.ЛицевойСчет = втНачисленияПоУслугам.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втНачисленияПоУслугам.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачальноеСальдо КАК втНачальноеСальдо
	|		ПО втОбъектыНачислений.Организация = втНачальноеСальдо.Организация
	|			И втОбъектыНачислений.ЛицевойСчет = втНачальноеСальдо.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втНачальноеСальдо.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияБезТарифов КАК втНачисленияБезТарифов
	|		ПО втОбъектыНачислений.Организация = втНачисленияБезТарифов.Организация
	|			И втОбъектыНачислений.ЛицевойСчет = втНачисленияБезТарифов.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втНачисленияБезТарифов.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК втТаблицаНорм
	|		ПО втОбъектыНачислений.Услуга = втТаблицаНорм.Услуга
	|			И втОбъектыНачислений.ЛицевойСчет = втТаблицаНорм.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифы КАК втТарифы
	|		ПО втОбъектыНачислений.Организация = втТарифы.Организация
	|			И втОбъектыНачислений.ЛицевойСчет = втТарифы.ЛицевойСчет
	|			И втОбъектыНачислений.Услуга = втТарифы.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПотреблениеПоЗданию КАК втПотреблениеПоЗданию
	|		ПО втОбъектыНачислений.Организация = втПотреблениеПоЗданию.Организация
	|			И втОбъектыНачислений.ЛицевойСчет.Адрес.Владелец = втПотреблениеПоЗданию.Здание
	|			И втОбъектыНачислений.Услуга = втПотреблениеПоЗданию.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоставщикиУслуг КАК втПоставщикиУслуг
	|		ПО втОбъектыНачислений.Организация = втПоставщикиУслуг.Организация
	|			И втОбъектыНачислений.Услуга.ВидУслуги = втПоставщикиУслуг.ВидУслуги
	|			И втОбъектыНачислений.ЛицевойСчет = втПоставщикиУслуг.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ДатаНач",           НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("ДатаКон",           КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("СписокЛС",          СписокЛицевыхСчетов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПолучитьТаблицуНачислений()

// Формирует таблицу сведений об организациях.
// 
// Параметры:
//  СписокОрганизаций - список значений/массив организаций.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица сведений об организациях.
//
Функция ПолучитьТаблицуСведенийОбОрганизациях(СписокОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.Организация,
	|	КОЛИЧЕСТВО(КВП_НазначенныеНачисления.Регистратор) КАК КолвоРегистраторов
	|ПОМЕСТИТЬ втЕстьРегистраторы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Действует
	|	И НЕ КВП_НазначенныеНачисления.Организация.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисления.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(втЕстьРегистраторы.Организация) КАК КолвоОрганизаций
	|ПОМЕСТИТЬ втКолвоОрганизаций
	|ИЗ
	|	втЕстьРегистраторы КАК втЕстьРегистраторы
	|ГДЕ
	|	НЕ втЕстьРегистраторы.КолвоРегистраторов = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК ORGName,
	|	Организации.ИНН КАК inn,
	|	Организации.КПП КАК kpp,
	|	Организации.ОсновнойБанковскийСчет.НомерСчета КАК rs,
	|	Организации.ОсновнойБанковскийСчет.Банк.Код КАК bik,
	|	Организации.ОсновнойБанковскийСчет.Банк.КоррСчет КАК ks,
	|	""accounts"" КАК filetype,
	|	2 КАК version,
	|	ВЫБОР
	|		КОГДА втКолвоОрганизаций.КолвоОрганизаций > 1
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОднаОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации,
	|	втКолвоОрганизаций КАК втКолвоОрганизаций
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)";
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСведенийОбОрганизациях()

// Формирует таблицу сведений о поставщиках услуг.
// 
// Параметры:
//  СписокОрганизаций - список значений/массив организаций.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица поставщиков услуг.
//
Функция ПолучитьСведенияОПоставщиках(СписокОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК executor,
	|	Организации.Ссылка КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Services,
	|	Организации.Ссылка КАК Поставщик,
	|	Организации.Наименование КАК Наименование,
	|	Организации.Код КАК Код,
	|	Организации.ОсновнойБанковскийСчет.НомерСчета КАК РасчетныйСчет,
	|	Организации.ОсновнойБанковскийСчет.Банк КАК Банк,
	|	Организации.ОсновнойБанковскийСчет.Банк.Код КАК БИК,
	|	Организации.ОсновнойБанковскийСчет.Банк.КоррСчет КАК КоррСчет,
	|	Организации.ОсновнойБанковскийСчет.Банк.Город КАК Город
	|ПОМЕСТИТЬ втПоставщики
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Организация,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.Наименование,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.Код,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.НомерСчета,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.Код,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.КоррСчет,
	|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик.ОсновнойБанковскийСчет.Банк.Город
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
	|			&ДатаКон,
	|			Организация В (&СписокОрганизаций)
	|				И НЕ ВидУслуги ЕСТЬ NULL ) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КонтактнаяИнформация.Вид.Наименование = ""Юридический адрес""
	|				ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(150))
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ЮрАдрес,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КонтактнаяИнформация.Вид.Наименование = ""Телефон""
	|				ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(50))
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК Телефон,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КонтактнаяИнформация.Вид.Наименование = ""Факс""
	|				ТОГДА ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(50))
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК Факс
	|ПОМЕСТИТЬ втКонтактнаяИнформация
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				втПоставщики.Организация
	|			ИЗ
	|				втПоставщики КАК втПоставщики)
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформация.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоставщики.Организация КАК Организация,
	|	втПоставщики.executor КАК executor,
	|	втПоставщики.Services КАК Services,
	|	втПоставщики.Поставщик КАК Поставщик,
	|	втПоставщики.Наименование КАК CONName,
	|	втПоставщики.Код КАК CONId,
	|	втПоставщики.РасчетныйСчет КАК rs,
	|	втПоставщики.Банк.Наименование КАК bank,
	|	втПоставщики.БИК КАК bik,
	|	втПоставщики.КоррСчет КАК ks,
	|	втПоставщики.Город КАК city,
	|	втКонтактнаяИнформация.ЮрАдрес КАК address,
	|	втКонтактнаяИнформация.Телефон КАК phone,
	|	втКонтактнаяИнформация.Факс КАК fax
	|ИЗ
	|	втПоставщики КАК втПоставщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втПоставщики.Поставщик = втКонтактнаяИнформация.Ссылка";
	
	Запрос.УстановитьПараметр("ДатаКон",           КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСведенияОПоставщиках()

// Формирует таблицу сведений о ИПУ.
// 
// Параметры:
//  СписокЛицевыхСчетов - список значений/массив лицевых счетов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица сведений о ИПУ.
//
Функция ПолучитьСведенияОбИПУ(СписокЛицевыхСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ втПомещенияЛС
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПомещенияЛС.ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	втПомещенияЛС КАК втПомещенияЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаНач, ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ПО (втПомещенияЛС.ЛицевойСчет = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|				ИЛИ втПомещенияЛС.Помещение = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект)
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПомещенияЛС.ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	втПомещенияЛС КАК втПомещенияЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО (втПомещенияЛС.ЛицевойСчет = КВП_ЗакрепленныеСчетчики.Объект
	|				ИЛИ втПомещенияЛС.Помещение = КВП_ЗакрепленныеСчетчики.Объект)
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Действует
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И (КВП_ЗакрепленныеСчетчики.Объект = втПомещенияЛС.ЛицевойСчет
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Объект = втПомещенияЛС.Помещение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСчетчики.ЛицевойСчет,
	|	втСчетчики.Услуга,
	|	втСчетчики.Счетчик,
	|	ПоказанияСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	ПоказанияСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	ПоказанияСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ПоказанияСчетчиков.НачальноеПоказание,
	|	ПоказанияСчетчиков.Период
	|ПОМЕСТИТЬ втВсеПоказания
	|ИЗ
	|	втСчетчики КАК втСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков КАК ПоказанияСчетчиков
	|		ПО втСчетчики.Счетчик = ПоказанияСчетчиков.Счетчик
	|ГДЕ
	|	ПоказанияСчетчиков.Период МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик,
	|	МАКСИМУМ(втВсеПоказания.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыПоследнихПоказаний
	|ИЗ
	|	втВсеПоказания КАК втВсеПоказания
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик,
	|	втВсеПоказания.НачальноеПоказание,
	|	МАКСИМУМ(втВсеПоказания.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачальныхПоказаний
	|ИЗ
	|	втВсеПоказания КАК втВсеПоказания
	|ГДЕ
	|	втВсеПоказания.НачальноеПоказание
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеПоказания.ЛицевойСчет,
	|	втВсеПоказания.Услуга,
	|	втВсеПоказания.Счетчик,
	|	втВсеПоказания.НачальноеПоказание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыПоследнихПоказаний.ЛицевойСчет,
	|	втПериодыПоследнихПоказаний.Услуга,
	|	втПериодыПоследнихПоказаний.Счетчик,
	|	втВсеПоказания.ДневноеПоказание,
	|	втВсеПоказания.НочноеПоказание,
	|	втВсеПоказания.ПиковоеПоказание,
	|	втВсеПоказания.НачальноеПоказание,
	|	втПериодыПоследнихПоказаний.Период
	|ПОМЕСТИТЬ втТекущиеПоказания
	|ИЗ
	|	втПериодыПоследнихПоказаний КАК втПериодыПоследнихПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеПоказания КАК втВсеПоказания
	|		ПО втПериодыПоследнихПоказаний.ЛицевойСчет = втВсеПоказания.ЛицевойСчет
	|			И втПериодыПоследнихПоказаний.Услуга = втВсеПоказания.Услуга
	|			И втПериодыПоследнихПоказаний.Счетчик = втВсеПоказания.Счетчик
	|			И втПериодыПоследнихПоказаний.Период = втВсеПоказания.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыНачальныхПоказаний.ЛицевойСчет,
	|	втПериодыНачальныхПоказаний.Услуга,
	|	втПериодыНачальныхПоказаний.Счетчик,
	|	втВсеПоказания.ДневноеПоказание,
	|	втВсеПоказания.НочноеПоказание,
	|	втВсеПоказания.ПиковоеПоказание,
	|	втВсеПоказания.НачальноеПоказание,
	|	втПериодыНачальныхПоказаний.Период
	|ПОМЕСТИТЬ втНачальныеПоказания
	|ИЗ
	|	втПериодыНачальныхПоказаний КАК втПериодыНачальныхПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеПоказания КАК втВсеПоказания
	|		ПО втПериодыНачальныхПоказаний.ЛицевойСчет = втВсеПоказания.ЛицевойСчет
	|			И втПериодыНачальныхПоказаний.Услуга = втВсеПоказания.Услуга
	|			И втПериодыНачальныхПоказаний.Счетчик = втВсеПоказания.Счетчик
	|			И втПериодыНачальныхПоказаний.Период = втВсеПоказания.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСчетчики.ЛицевойСчет,
	|	втСчетчики.Услуга,
	|	втСчетчики.Счетчик,
	|	ЕСТЬNULL(ПоказанияСчетчиков.ДневноеПоказание, 0) КАК ДневноеПоказание,
	|	ЕСТЬNULL(ПоказанияСчетчиков.НочноеПоказание, 0) КАК НочноеПоказание,
	|	ЕСТЬNULL(ПоказанияСчетчиков.ПиковоеПоказание, 0) КАК ПиковоеПоказание,
	|	ПоказанияСчетчиков.НачальноеПоказание,
	|	ПоказанияСчетчиков.Период
	|ПОМЕСТИТЬ втПредПоказания
	|ИЗ
	|	втСчетчики КАК втСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаНач, ) КАК ПоказанияСчетчиков
	|		ПО втСчетчики.Счетчик = ПоказанияСчетчиков.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетчики.ЛицевойСчет,
	|	втСчетчики.Услуга.Наименование КАК service,
	|	втСчетчики.Услуга.ВидУслуги.Наименование КАК SName,
	|	втСчетчики.Счетчик.Наименование КАК MName,
	|	втСчетчики.Счетчик.Код КАК kod,
	|	ВЫБОР
	|		КОГДА втСчетчики.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|			ТОГДА 1
	|		КОГДА втСчетчики.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК value_count,
	|	ЕСТЬNULL(втНачальныеПоказания.ДневноеПоказание, ЕСТЬNULL(втПредПоказания.ДневноеПоказание, 0)) КАК indicbef1,
	|	ЕСТЬNULL(втНачальныеПоказания.НочноеПоказание, ЕСТЬNULL(втПредПоказания.НочноеПоказание, 0)) КАК indicbef2,
	|	ЕСТЬNULL(втНачальныеПоказания.ПиковоеПоказание, ЕСТЬNULL(втПредПоказания.ПиковоеПоказание, 0)) КАК indicbef3,
	|	ЕСТЬNULL(втТекущиеПоказания.ДневноеПоказание, ЕСТЬNULL(втНачальныеПоказания.ДневноеПоказание, ЕСТЬNULL(втПредПоказания.ДневноеПоказание, 0))) КАК indiccur1,
	|	ЕСТЬNULL(втТекущиеПоказания.НочноеПоказание, ЕСТЬNULL(втНачальныеПоказания.НочноеПоказание, ЕСТЬNULL(втПредПоказания.НочноеПоказание, 0))) КАК indiccur2,
	|	ЕСТЬNULL(втТекущиеПоказания.ПиковоеПоказание, ЕСТЬNULL(втНачальныеПоказания.ПиковоеПоказание, ЕСТЬNULL(втПредПоказания.ПиковоеПоказание, 0))) КАК indiccur3,
	|	ЕСТЬNULL(втНачальныеПоказания.Период, втПредПоказания.Период) КАК date_indicbef,
	|	ЕСТЬNULL(втТекущиеПоказания.Период, ЕСТЬNULL(втНачальныеПоказания.Период, втПредПоказания.Период)) КАК date_indiccur
	|ИЗ
	|	втСчетчики КАК втСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредПоказания КАК втПредПоказания
	|		ПО втСчетчики.ЛицевойСчет = втПредПоказания.ЛицевойСчет
	|			И втСчетчики.Услуга = втПредПоказания.Услуга
	|			И втСчетчики.Счетчик = втПредПоказания.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТекущиеПоказания КАК втТекущиеПоказания
	|		ПО втСчетчики.ЛицевойСчет = втТекущиеПоказания.ЛицевойСчет
	|			И втСчетчики.Услуга = втТекущиеПоказания.Услуга
	|			И втСчетчики.Счетчик = втТекущиеПоказания.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачальныеПоказания КАК втНачальныеПоказания
	|		ПО втСчетчики.ЛицевойСчет = втНачальныеПоказания.ЛицевойСчет
	|			И втСчетчики.Услуга = втНачальныеПоказания.Услуга
	|			И втСчетчики.Счетчик = втНачальныеПоказания.Счетчик";
	
	Запрос.УстановитьПараметр("ДатаНач",  НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("ДатаКон",  КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЛС", СписокЛицевыхСчетов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСведенияОбИПУ()

// Формирует таблицу сведений об ОПУ.
// 
// Параметры:
//  СписокОрганизаций - список значений/массив организаций.
//  СписокЛицевыхСчетов - список значений/массив лицевых счетов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица сведений об ОПУ.
//
Функция ПолучитьСведенияОбОПУ(СписокОрганизаций, СписокЛицевыхСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Владелец КАК Здание,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Подъезд КАК Подъезд,
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаНач,
	|			Организация В (&СписокОрганизаций)
	|				И Объект В (&СписокЛС)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисления.Объект.Адрес.Владелец,
	|	КВП_НазначенныеНачисления.Объект.Адрес.Подъезд,
	|	КВП_НазначенныеНачисления.Организация,
	|	КВП_НазначенныеНачисления.Услуга
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Активность
	|	И КВП_НазначенныеНачисления.Действует
	|	И КВП_НазначенныеНачисления.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеНачисления.Организация В(&СписокОрганизаций)
	|	И КВП_НазначенныеНачисления.Объект В(&СписокЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНазначенныеУслуги.Организация,
	|	втНазначенныеУслуги.Здание КАК Объект,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ПОМЕСТИТЬ втСчетчикиОПУ
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаНач, ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ПО втНазначенныеУслуги.Здание = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.Организация,
	|	втНазначенныеУслуги.Здание,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО втНазначенныеУслуги.Здание = КВП_ЗакрепленныеСчетчики.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Активность
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.Организация,
	|	втНазначенныеУслуги.Подъезд,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаНач, ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ПО втНазначенныеУслуги.Подъезд = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.Организация,
	|	втНазначенныеУслуги.Подъезд,
	|	втНазначенныеУслуги.Услуга,
	|	КВП_ЗакрепленныеСчетчики.Счетчик
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО втНазначенныеУслуги.Подъезд = КВП_ЗакрепленныеСчетчики.Объект
	|			И втНазначенныеУслуги.Услуга = КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Активность
	|	И КВП_ЗакрепленныеСчетчики.Действует
	|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втСчетчикиОПУ.Организация,
	|	втСчетчикиОПУ.Услуга КАК Услуга,
	|	втСчетчикиОПУ.Объект КАК Объект,
	|	втСчетчикиОПУ.Услуга.Наименование КАК service,
	|	втСчетчикиОПУ.Услуга.ВидУслуги.Наименование КАК VidName,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание, 0) КАК indiccur1,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание, 0) КАК indiccur2,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание, 0) КАК indiccur3,
	|	ВЫБОР
	|		КОГДА втСчетчикиОПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|			ТОГДА 1
	|		КОГДА втСчетчикиОПУ.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК value_count,
	|	втСчетчикиОПУ.Счетчик.Код КАК kod,
	|	втСчетчикиОПУ.Счетчик.Наименование КАК HMName
	|ИЗ
	|	втСчетчикиОПУ КАК втСчетчикиОПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаКон, ) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|		ПО втСчетчикиОПУ.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик";
	
	Запрос.УстановитьПараметр("ДатаНач",           НачалоМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("ДатаКон",           КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("СписокЛС",          СписокЛицевыхСчетов);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСведенияОбОПУ()

// Формирует таблицу сведений о лицевых счетах.
// 
// Параметры:
//  СписокЛицевыхСчетов - список значений/массив лицевых счетов.
//  ТаблицаНачислений - таблица значений с данными о начислениях.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица лицевых счетов.
//
Функция ПолучитьСведенияОЛицевыхСчетах(СписокЛицевыхСчетов, ТаблицаНачислений)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаКон",           КонецМесяца(ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЛС",          СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("Организация",       Организация);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.УдалитьПарольДоступа КАК ПарольЛС,
	|	ЕСТЬNULL(КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
	|	ЕСТЬNULL(КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК НомерПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Наименование КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация КАК Организация,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ПОМЕСТИТЬ втЛицевойСчетБазовая
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|				&ДатаКон,
	|				ЛицевойСчет В (&СписокЛС)
	|					И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|		ПО КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|		ПО КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет = КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втЛицевойСчетБазовая.Здание КАК Объект
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевойСчетБазовая.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчетБазовая.Здание КАК Здание,
	|	втКонтактнаяИнформация.Город,
	|	втКонтактнаяИнформация.Район,
	|	втКонтактнаяИнформация.Регион,
	|	втКонтактнаяИнформация.НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ПОМЕСТИТЬ втАдрес
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛицевойСчетБазовая.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчетБазовая.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК Ответственный,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втОтветственныйСобственник
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевойСчетБазовая.ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади.Наименование = ""Общая площадь""
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади.Наименование = ""Жилая площадь""
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&ДатаКон, ) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет.Адрес = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевойСчетБазовая.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНачислений.Организация,
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.ДатаПоследнейОплаты,
	|	ТаблицаНачислений.SumToPay,
	|	ТаблицаНачислений.DebtPrev,
	|	ТаблицаНачислений.debtbeg КАК НачальноеСальдо,
	|	ТаблицаНачислений.debtend КАК КонечноеСальдо
	|ПОМЕСТИТЬ втНачисленияИзТаблицы
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Организация,
	|	Начисления.ЛицевойСчет,
	|	МАКСИМУМ(Начисления.ДатаПоследнейОплаты) КАК ДатаПоследнейОплаты,
	|	СУММА(Начисления.DebtPrev) КАК ЗадолженностьПред,
	|	СУММА(Начисления.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(Начисления.КонечноеСальдо) КАК КонечноеСальдо,
	|	СУММА(Начисления.SumToPay) КАК СуммаКОплате
	|ПОМЕСТИТЬ втНачисленияНаЛС
	|ИЗ
	|	втНачисленияИзТаблицы КАК Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Организация,
	|	Начисления.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втНачисленияНаЛС.Организация, втЛицевойСчетБазовая.Организация) КАК Организация,
	|	втЛицевойСчетБазовая.ЛицевойСчет,
	|	втЛицевойСчетБазовая.Здание,
	|	втЛицевойСчетБазовая.Подъезд,
	|	втАдрес.Город КАК AddressCity,
	|	втАдрес.Район КАК AddressDistrict,
	|	втЛицевойСчетБазовая.НомерПомещения КАК AddressFlat,
	|	втЛицевойСчетБазовая.Помещение КАК FlatAbbr,
	|	втАдрес.Дом КАК AddressHouse,
	|	втАдрес.Регион КАК AddressRegion,
	|	втАдрес.НаселенныйПункт КАК AddressSettlement,
	|	втАдрес.Улица КАК AddressStreet,
	|	ЕСТЬNULL(втПлощадиПомещений.ОбщаяПлощадь, 0) КАК commonarea,
	|	ЕСТЬNULL(втНачисленияНаЛС.НачальноеСальдо, 0) КАК debtbeg,
	|	ЕСТЬNULL(втНачисленияНаЛС.КонечноеСальдо, 0) КАК debtend,
	|	ВЫБОР
	|		КОГДА втНачисленияНаЛС.ЗадолженностьПред > 0
	|			ТОГДА втНачисленияНаЛС.ЗадолженностьПред
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК debtprev,
	|	ВЫБОР
	|		КОГДА втНачисленияНаЛС.ЗадолженностьПред < 0
	|			ТОГДА -втНачисленияНаЛС.ЗадолженностьПред
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК prepayment,
	|	ЕСТЬNULL(втНачисленияНаЛС.СуммаКОплате, 0) КАК sumtopay,
	|	втНачисленияНаЛС.ДатаПоследнейОплаты КАК lastPaymentDate,
	|	втЛицевойСчетБазовая.АдресЭлектроннойПочты КАК email,
	|	ЕСТЬNULL(втПлощадиПомещений.ЖилаяПлощадь, 0) КАК habarea,
	|	втЛицевойСчетБазовая.ИдентификаторЛС КАК kod_ls,
	|	втЛицевойСчетБазовая.ИдентификаторЛС КАК login,
	|	втОтветственныйСобственник.Ответственный КАК name1,
	|	втЛицевойСчетБазовая.НаименованиеЛС КАК name_ls,
	|	втЛицевойСчетБазовая.ПарольЛС КАК password,
	|	ЕСТЬNULL(втЛицевойСчетБазовая.КоличествоПроживающих, 0) КАК people,
	|	ЕСТЬNULL(втЛицевойСчетБазовая.КоличествоЗарегистрированных, 0) КАК num_of_reg,
	|	втАдрес.Корпус
	|ИЗ
	|	втЛицевойСчетБазовая КАК втЛицевойСчетБазовая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдрес КАК втАдрес
	|		ПО втЛицевойСчетБазовая.Здание = втАдрес.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныйСобственник КАК втОтветственныйСобственник
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втОтветственныйСобственник.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втПлощадиПомещений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияНаЛС КАК втНачисленияНаЛС
	|		ПО втЛицевойСчетБазовая.ЛицевойСчет = втНачисленияНаЛС.ЛицевойСчет";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСведенияОЛицевыхСчетах()

// Формирует таблицу сведений о суммарных начислениях в разрезе поставщиков услуг.
// 
// Параметры:
//  ТаблицаНачислений - таблица значений с данными о начислениях.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица суммарных начислений по поставщикам.
//
Функция ПолучитьСуммыНачисленийПоПоставщикамУслуг(ТаблицаНачислений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Организация,
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.CONId,
	|	ТаблицаНачислений.summ КАК summ
	|ПОМЕСТИТЬ втТаблицаНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНачислений.Организация,
	|	втТаблицаНачислений.ЛицевойСчет,
	|	втТаблицаНачислений.CONId,
	|	СУММА(ЕСТЬNULL(втТаблицаНачислений.summ, 0)) КАК sum
	|ИЗ
	|	втТаблицаНачислений КАК втТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНачислений.Организация,
	|	втТаблицаНачислений.ЛицевойСчет,
	|	втТаблицаНачислений.CONId";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСуммыНачисленийПоПоставщикамУслуг()

// Формирует текст штрих-кода для вывода в квитанцию.
//
// Параметры
//  Объект       – текущий лицевой счет.
//  СуммаОплаты  – сумма к оплате.
//
// Возвращаемое значение:
//  Строка – текст штрих-кода.
//
Функция ПолучитьШтрихКод(Объект, СуммаОплаты, ТекОрганизация) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Дата",        ПериодПросмотра);
	Параметры.Вставить("ЛицевойСчет", Объект);
	Параметры.Вставить("Сумма",       СуммаОплаты);
	
	Параметры.Вставить("ИННОрганизации",           УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ТекОрганизация.inn, 12));
	Параметры.Вставить("РасчетныйСчетОрганизации", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ТекОрганизация.rs,  20));
	
	ТекстКода = УПЖКХ_ПечатьКвитанцийСервер.СформироватьШтрихкод(Параметры, мНастройкиФормированияПДЖКХ);
	
	Возврат ТекстКода;
	
КонецФункции // ПолучитьШтрихКод()

// Функция записывает данные по лицевым счетам в XML-файл.
// Возвращает имя последнего созданного файла.
//
Функция ЗаписатьДанныеXML(ПереданнаяОрганизация = Неопределено, РаботаВДиалоге = Ложь) Экспорт
	
	Если РаботаВДиалоге Тогда
		мРаботаВДиалоге = Истина;
	КонецЕсли;
	
	Если мРаботаВДиалоге = Неопределено Тогда
		мРаботаВДиалоге = Ложь;
	КонецЕсли;
	
	Если мПоказыватьСостояние = Неопределено Тогда
		мПоказыватьСостояние = Ложь;
	КонецЕсли;
	
	// Общие данные
	
	Если мРаботаВДиалоге Тогда
		
		НаименованиеОрганизации = СтрЗаменить(СтрЗаменить(Организация,"""","")," ","_");
		ПорядковыйНомерОтчетногоМесяца = Формат(ПериодПросмотра, "ДФ=MM");
		ПорядковыйНомерГодаВыгрузки    = Формат(ПериодПросмотра, "ДФ=yyyy");
		
		ТД = ТекущаяДата();
		ТД = Формат(ТД, "ДФ=dd") + "." + Формат(ТД, "ДФ=MM") + "." + Формат(ТД, "ДФ=yyyy");
		
		ТаблицаЛС = ЛицевыеСчета;
		
	Иначе
		
		ТаблицаЛС = ПолучитьВсеЛицевыеСчета();
		
	КонецЕсли;
	
	СтрокаОтчетногоПериода = Строка(Формат(НачалоМесяца(ПериодПросмотра),"ДЛФ=Д"));
	
	Если НЕ ПереданнаяОрганизация = Неопределено Тогда
		Организации.Добавить().Организация = ПереданнаяОрганизация;
	КонецЕсли;
	
	// Параметры для запросов
	СписокОрганизаций   = Организации.ВыгрузитьКолонку("Организация");
	СписокЛицевыхСчетов = ТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет");
	
	// Сбор данных
	ТаблицаНачисленийОбщая         = ПолучитьТаблицуНачислений(СписокОрганизаций, СписокЛицевыхСчетов);
	ТаблицаОрганизацийОбщая        = ПолучитьТаблицуСведенийОбОрганизациях(СписокОрганизаций);
	ТаблицаПоставщиковОбщая        = ПолучитьСведенияОПоставщиках(СписокОрганизаций);
	ТаблицаОПУОбщая                = ПолучитьСведенияОбОПУ(СписокОрганизаций, СписокЛицевыхСчетов);
	ТаблицаИПУОбщая                = ПолучитьСведенияОбИПУ(СписокЛицевыхСчетов);
	ТаблицаЛицевыхСчетовОбщая      = ПолучитьСведенияОЛицевыхСчетах(СписокЛицевыхСчетов, ТаблицаНачисленийОбщая);
	ТаблицаНачисленийПоПоставщикам = ПолучитьСуммыНачисленийПоПоставщикамУслуг(ТаблицаНачисленийОбщая);
	
	// Структуры для отборов
	ОтборПоОрганизации          = Новый Структура("Организация");
	ОтборПоОрганизацииИЛС       = Новый Структура("Организация, ЛицевойСчет");
	ОтборПоОрганизацииИЗданию   = Новый Структура("Организация, Объект");
	ОтборПоОрганизацииИПодъезду = Новый Структура("Организация, Объект");
	ОтборПоУслуге               = Новый Структура("Услуга");
	ОтборПоЛС                   = Новый Структура("ЛицевойСчет");
	
	МассивСведений = Новый Массив;
	
	// Проходим каждую организацию
	Для каждого ТекОрганизация из ТаблицаОрганизацийОбщая Цикл
		
		//мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ПериодПросмотра, ТекОрганизация.Организация);
		мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(ТекОрганизация.Организация);
		
		// Устанавливаем организацию в структурах отбора.
		ОтборПоОрганизации.Организация          = ТекОрганизация.Организация;
		ОтборПоОрганизацииИЛС.Организация       = ТекОрганизация.Организация;
		ОтборПоОрганизацииИЗданию.Организация   = ТекОрганизация.Организация;
		ОтборПоОрганизацииИПодъезду.Организация = ТекОрганизация.Организация;
		
		// Отбираем данные.
		СтрокиПоставщиков   = ТаблицаПоставщиковОбщая.НайтиСтроки(ОтборПоОрганизации);
		СтрокиЛицевыхСчетов = ТаблицаЛицевыхСчетовОбщая.НайтиСтроки(ОтборПоОрганизации);
		СтрокиОПУ           = ТаблицаОПУОбщая.НайтиСтроки(ОтборПоОрганизации);
		
		// Устанавливаем наименование файла выгрузки.
		НаименованиеОрганизации = СтрЗаменить(СтрЗаменить(ТекОрганизация.Организация,"""","")," ","_");
		ПорядковыйНомерОтчетногоМесяца = Формат(ПериодПросмотра, "ДФ=MM");
		ПорядковыйНомерГодаВыгрузки    = Формат(ПериодПросмотра, "ДФ=yyyy");
		
		Если УчитыватьТекущуюДатуВНаименовании Тогда
			ИмяФайла = ИмяФайлаДанных + "\" + НаименованиеОрганизации + "_" + ПорядковыйНомерОтчетногоМесяца + "_" + ПорядковыйНомерГодаВыгрузки + "(" + ТД + ")" +  ".xml";
		Иначе
			ИмяФайла = ИмяФайлаДанных + "\" + НаименованиеОрганизации + "_" + ПорядковыйНомерОтчетногоМесяца + "_" + ПорядковыйНомерГодаВыгрузки + ".xml";
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние("Подготовка файла лицевых счетов...");
		#КонецЕсли
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		// Устанавливаем префикс, если это необходимо.
		Если ТекОрганизация.ОднаОрганизация Тогда
			ПрефиксЛС = "";
		Иначе
			КодЛС = СтрЗаменить(ТекОрганизация.Организация.Код, ТекОрганизация.Организация.Префикс, "");
			Попытка
				КодЛС = СокрЛП(Формат(Число(КодЛС) - 1, "ЧГ = 0"));
			Исключение
				
			КонецПопытки;
			ПрефиксЛС = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(КодЛС, "0");
		КонецЕсли;
		
		// Создаем XML файл.
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
		
		// Записываем сведения об организации в элемент "ORG".
		ДокументDOM = Новый ДокументDOM("", "ORG");
		КорневойЭлемент = ДокументDOM.ЭлементДокумента;
		
		КорневойЭлемент.УстановитьАтрибут("filedate", СтрокаОтчетногоПериода);
		КорневойЭлемент.УстановитьАтрибут("name",     ТекОрганизация.ORGName);
		КорневойЭлемент.УстановитьАтрибут("inn",      Строка(ТекОрганизация.inn));
		КорневойЭлемент.УстановитьАтрибут("kpp",      Строка(ТекОрганизация.kpp));
		
		Если ЗначениеЗаполнено(ТекОрганизация.Организация.ОсновнойБанковскийСчет) Тогда
			КорневойЭлемент.УстановитьАтрибут("bank", Строка(ТекОрганизация.Организация.ОсновнойБанковскийСчет.Банк.ПолноеНаименование()));
			КорневойЭлемент.УстановитьАтрибут("rs",   Строка(ТекОрганизация.rs));
			КорневойЭлемент.УстановитьАтрибут("ks",   Строка(ТекОрганизация.ks));
			КорневойЭлемент.УстановитьАтрибут("bik",  Строка(ТекОрганизация.bik));
		КонецЕсли;
		
		КорневойЭлемент.УстановитьАтрибут("filetype", Строка(ТекОрганизация.filetype));
		КорневойЭлемент.УстановитьАтрибут("version",  Строка(ТекОрганизация.version));
		
		// Записываем сведения о поставщиках услуг в элемент "contractors".
		СтрокаПоставщики = ДокументDOM.СоздатьЭлемент("contractors");
		КорневойЭлемент.ДобавитьДочерний(СтрокаПоставщики);
		
		// Записываем поставщиков.
		Для Каждого Поставщик Из СтрокиПоставщиков Цикл
			
			СтрокаПоставщик = ДокументDOM.СоздатьЭлемент("contractor");
			СтрокаПоставщики.ДобавитьДочерний(СтрокаПоставщик);
			
			СтрокаПоставщик.УстановитьАтрибут("id",   Строка(Поставщик.CONId));
			СтрокаПоставщик.УстановитьАтрибут("name", Поставщик.CONName);
			
			Если ЗначениеЗаполнено(Поставщик.executor) Тогда
				СтрокаПоставщик.УстановитьАтрибут("executor", "1");
				
				// Записываем адрес и телефон только для организации исполнителя.
				Если ЗначениеЗаполнено(Поставщик.address) Тогда
					СтрокаПоставщик.УстановитьАтрибут("address", Поставщик.address);
				КонецЕсли;
				
				ЕстьТелефон = ЗначениеЗаполнено(Поставщик.phone);
				ЕстьФакс    = ЗначениеЗаполнено(Поставщик.fax);
				
				Если ЕстьТелефон ИЛИ ЕстьФакс Тогда
					СтрокаТелефон = ?(ЕстьТелефон, Поставщик.phone, "")
					              + ?(ЕстьТелефон И ЕстьФакс, ", ", "")
					              + ?(ЕстьФакс, "факс: " + Поставщик.fax, "");
					
					СтрокаПоставщик.УстановитьАтрибут("phone", СтрокаТелефон);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Поставщик.Services) Тогда
				СтрокаПоставщик.УстановитьАтрибут("services", Строка(Поставщик.Services));
			КонецЕсли;
			
			ПлатежныеРеквизиты = ?(ЗначениеЗаполнено(Поставщик.rs), "р/с " + Поставщик.rs + ", ", "")
			                   + ?(ЗначениеЗаполнено(Поставщик.bank), "в " + Поставщик.bank + ", ", "")
			                   + ?(ЗначениеЗаполнено(Поставщик.city), Поставщик.city + ", ", "") 
			                   + ?(ЗначениеЗаполнено(Поставщик.ks), "к/с " + Поставщик.ks + ", ", "") 
			                   + ?(ЗначениеЗаполнено(Поставщик.bik), "БИК " + Поставщик.bik, "");
			
			Если Прав(ПлатежныеРеквизиты, 2) = ", " Тогда
				ПлатежныеРеквизиты = Лев(ПлатежныеРеквизиты, СтрДлина(ПлатежныеРеквизиты) - 2);
			КонецЕсли;
			
			СтрокаПоставщик.ТекстовоеСодержимое = ПлатежныеРеквизиты;
			
		КонецЦикла;
		
		// Записываем сведения об ОПУ в элемент "hmeter".
		Если НЕ СтрокиОПУ.Количество() = 0 Тогда
			
			СтрокаОПУ = ДокументDOM.СоздатьЭлемент("hmeters");
			КорневойЭлемент.ДобавитьДочерний(СтрокаОПУ);
			
			// Записываем ОПУ.
			Для Каждого ТекСчетчик Из СтрокиОПУ Цикл
				
				// hmeter - данные по общедомовым счетчикам.
				СтрокаСчетчик = ДокументDOM.СоздатьЭлемент("hmeter");
				СтрокаОПУ.ДобавитьДочерний(СтрокаСчетчик);
				
				СтрокаСчетчик.УстановитьАтрибут("value_count", Строка(ТекСчетчик.value_count));
				СтрокаСчетчик.УстановитьАтрибут("indiccur1",   Строка(ТекСчетчик.indiccur1));
				
				Если ТекСчетчик.value_count = 2 Тогда
					СтрокаСчетчик.УстановитьАтрибут("indiccur2", Строка(ТекСчетчик.indiccur2));
				ИначеЕсли ТекСчетчик.value_count = 3 Тогда
					СтрокаСчетчик.УстановитьАтрибут("indiccur2", Строка(ТекСчетчик.indiccur2));
					СтрокаСчетчик.УстановитьАтрибут("indiccur3", Строка(ТекСчетчик.indiccur3));
				КонецЕсли;
				
				СтрокаСчетчик.УстановитьАтрибут("kod",     Строка(ТекСчетчик.kod));
				СтрокаСчетчик.УстановитьАтрибут("name",    Строка(ТекСчетчик.HMName));
				СтрокаСчетчик.УстановитьАтрибут("service", Строка(ТекСчетчик.VidName)); // Вид услуги
				
			КонецЦикла;
		КонецЕсли;
		
		// Записываем сведения о поставщиках услуг в элементы "PersAcc".
		НомерЛС            = 0;
		КоличествоЛС       = СтрокиЛицевыхСчетов.Количество();
		ПредыдущийПрогресс = 0;
		
		Для каждого ТекЛицевойСчет из СтрокиЛицевыхСчетов Цикл
			
			// Устанавливаем лицевой счет в структурах отборов.
			ОтборПоОрганизацииИЛС.ЛицевойСчет   = ТекЛицевойСчет.ЛицевойСчет;
			ОтборПоЛС.ЛицевойСчет               = ТекЛицевойСчет.ЛицевойСчет;
			ОтборПоОрганизацииИЗданию.Объект    = ТекЛицевойСчет.Здание;
			ОтборПоОрганизацииИПодъезду.Объект  = ТекЛицевойСчет.Подъезд;
			
			// Отбираем данные.
			СтрокиНачислений      = ТаблицаНачисленийОбщая.НайтиСтроки(ОтборПоОрганизацииИЛС);
			СтрокиИПУ             = ТаблицаИПУОбщая.НайтиСтроки(ОтборПоЛС);
			ТаблицаОПУДляЗдания   = ТаблицаОПУОбщая.Скопировать(ТаблицаОПУОбщая.НайтиСтроки(ОтборПоОрганизацииИЗданию));
			ТаблицаОПУДляПодъезда = ТаблицаОПУОбщая.Скопировать(ТаблицаОПУОбщая.НайтиСтроки(ОтборПоОрганизацииИПодъезду));
			
			// Прогрессор.
			НомерЛС = НомерЛС + 1;
			
			// Создаем и заполняем элемент "PersAcc".
			СтрокаЛС = ДокументDOM.СоздатьЭлемент("PersAcc");
			КорневойЭлемент.ДобавитьДочерний(СтрокаЛС);
			
			СтрокаЛС.УстановитьАтрибут("AddressCity",       Строка(СокрЛП(ТекЛицевойСчет.AddressCity)));
			СтрокаЛС.УстановитьАтрибут("AddressDistrict",   Строка(СокрЛП(ТекЛицевойСчет.AddressDistrict)));
			СтрокаЛС.УстановитьАтрибут("AddressFlat",       Строка(ТекЛицевойСчет.AddressFlat));
			СтрокаЛС.УстановитьАтрибут("FlatAbbr",          Строка(СокрЛП(ТекЛицевойСчет.FlatAbbr)));
			СтрокаЛС.УстановитьАтрибут("AddressHouse",      Строка(ТекЛицевойСчет.AddressHouse) + ?(ЗначениеЗаполнено(ТекЛицевойСчет.Корпус), "/" + Строка(ТекЛицевойСчет.Корпус), ""));
			СтрокаЛС.УстановитьАтрибут("AddressRegion",     Строка(СокрЛП(ТекЛицевойСчет.AddressRegion)));
			СтрокаЛС.УстановитьАтрибут("AddressSettlement", Строка(СокрЛП(ТекЛицевойСчет.AddressSettlement)));
			СтрокаЛС.УстановитьАтрибут("AddressStreet",     Строка(СокрЛП(ТекЛицевойСчет.AddressStreet)));
			СтрокаЛС.УстановитьАтрибут("Barcode",           ПолучитьШтрихКод(ТекЛицевойСчет.ЛицевойСчет, ТекЛицевойСчет.sumtopay, ТекОрганизация));
			СтрокаЛС.УстановитьАтрибут("commonarea",        Строка(ТекЛицевойСчет.commonarea));
			СтрокаЛС.УстановитьАтрибут("debtbeg",           Строка(ТекЛицевойСчет.debtbeg));
			СтрокаЛС.УстановитьАтрибут("debtend",           Строка(ТекЛицевойСчет.debtend));
			СтрокаЛС.УстановитьАтрибут("debtprev",          Строка(ТекЛицевойСчет.debtprev)); // Задолженность
			СтрокаЛС.УстановитьАтрибут("prepayment",        Строка(ТекЛицевойСчет.prepayment)); // Аванс
			СтрокаЛС.УстановитьАтрибут("sumtopay",          Строка(ТекЛицевойСчет.sumtopay)); // Итого к оплате за расчетный период
			СтрокаЛС.УстановитьАтрибут("lastPaymentDate",   Строка(Формат(ТекЛицевойСчет.lastPaymentDate, "ДФ=дд.ММ.гггг")));
			СтрокаЛС.УстановитьАтрибут("email",             Строка(СокрЛП(ТекЛицевойСчет.email)));
			СтрокаЛС.УстановитьАтрибут("habarea",           Строка(ТекЛицевойСчет.habarea));
			СтрокаЛС.УстановитьАтрибут("kod_ls",            ПрефиксЛС + СокрЛП(ТекЛицевойСчет.kod_ls));
			СтрокаЛС.УстановитьАтрибут("login",             СокрЛП(ТекЛицевойСчет.login));
			СтрокаЛС.УстановитьАтрибут("name",              Строка(ТекЛицевойСчет.name1));
			СтрокаЛС.УстановитьАтрибут("name_ls",           Строка(ТекЛицевойСчет.name_ls));
			СтрокаЛС.УстановитьАтрибут("password",          Строка(ТекЛицевойСчет.password));
			СтрокаЛС.УстановитьАтрибут("people",            Строка(ТекЛицевойСчет.people));
			СтрокаЛС.УстановитьАтрибут("num_of_reg",        Строка(ТекЛицевойСчет.num_of_reg));
			
			// Создаем и заполняем элементы "item".
			Для Каждого ТекНачисление Из СтрокиНачислений Цикл
				
				// Устанавливаем отбор по услуге.
				ОтборПоУслуге.Услуга = ТекНачисление.Услуга;
				
				// Отбираем данные.
				СтрокиОПУДляЛС        = ТаблицаОПУДляЗдания.НайтиСтроки(ОтборПоУслуге);
				СтрокиОПУДляЛСПодъезд = ТаблицаОПУДляПодъезда.НайтиСтроки(ОтборПоУслуге);
				
				// item - данные по начислениям.
				СтрокаУслуга = ДокументDOM.СоздатьЭлемент("item");
				СтрокаЛС.ДобавитьДочерний(СтрокаУслуга);
				СтрокаУслуга.УстановитьАтрибут("ammount",      Строка(ТекНачисление.ammount));
				СтрокаУслуга.УстановитьАтрибут("correction",   Строка(ТекНачисление.correction));
				СтрокаУслуга.УстановитьАтрибут("edizm",        Строка(ТекНачисление.edizm));
				СтрокаУслуга.УстановитьАтрибут("kod",          Строка(ТекНачисление.kod));
				СтрокаУслуга.УстановитьАтрибут("name",         Строка(ТекНачисление.VidName));
				СтрокаУслуга.УстановитьАтрибут("norm",         Строка(ТекНачисление.norm));
				СтрокаУслуга.УстановитьАтрибут("peni",         Строка(ТекНачисление.peni));
				СтрокаУслуга.УстановитьАтрибут("sum",          Строка(ТекНачисление.sum));
				СтрокаУслуга.УстановитьАтрибут("sumpayed",     Строка(-ТекНачисление.sumpayed));
				СтрокаУслуга.УстановитьАтрибут("compensation", Строка(-ТекНачисление.compensation));
				СтрокаУслуга.УстановитьАтрибут("sumtopay",     Строка(ТекНачисление.msumtopay));//КОплате));
				СтрокаУслуга.УстановитьАтрибут("debtbeg",      Строка(ТекНачисление.debtbeg)); // НачальноеСальдо 
				СтрокаУслуга.УстановитьАтрибут("debtend",      Строка(ТекНачисление.debtend)); // КонечноеСальдо
				
				// Записываем данные по ОПУ, если таковые имеются.
				Если НЕ СтрокиОПУДляЛС.Количество()= 0 ИЛИ НЕ СтрокиОПУДляЛСПодъезд.Количество() = 0 Тогда
					ПервыйСчетчик = Истина;
					Сч = 2;
					Для каждого ТекСчетчик из СтрокиОПУДляЛС Цикл
						Если ПервыйСчетчик Тогда
							
							СтрокаУслуга.УстановитьАтрибут("hmeter", Строка(ТекСчетчик.kod));
							ПервыйСчетчик = Ложь;
						Иначе
							СтрокаУслуга.УстановитьАтрибут("hmeter" + Строка(Сч), Строка(ТекСчетчик.kod));
							Сч = Сч + 1;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого ТекСчетчик из СтрокиОПУДляЛСПодъезд Цикл
						Если ПервыйСчетчик Тогда
							
							СтрокаУслуга.УстановитьАтрибут("hmeter", Строка(ТекСчетчик.kod));
							ПервыйСчетчик = Ложь;
						Иначе
							СтрокаУслуга.УстановитьАтрибут("hmeter" + Строка(Сч), Строка(ТекСчетчик.kod));
							Сч = Сч + 1;
						КонецЕсли;
					КонецЦикла;
					
					СтрокаУслуга.УстановитьАтрибут("hammount",  Строка(ТекНачисление.hammount));
					СтрокаУслуга.УстановитьАтрибут("hnorm",     Строка(ТекНачисление.hnorm));
					СтрокаУслуга.УстановитьАтрибут("hsum",      Строка(ТекНачисление.hsum));
					СтрокаУслуга.УстановитьАтрибут("hsumtopay", Строка(Окр(ТекНачисление.hsumtopay, 2, РежимОкругления.Окр15как20)));
					СтрокаУслуга.УстановитьАтрибут("volumeh",   Строка(ТекНачисление.volumeh));
				КонецЕсли;
				
				// Записываем тарифы.
				СтрокаУслуга.УстановитьАтрибут("tarif1", Строка(ТекНачисление.tarif1));
				Если ТекНачисление.Многотарифная Тогда
					СтрокаУслуга.УстановитьАтрибут("tarif2", Строка(ТекНачисление.tarif2));
					СтрокаУслуга.УстановитьАтрибут("tarif3", Строка(ТекНачисление.tarif3));
				КонецЕсли;
				
			КонецЦикла;
			
			// Записываем и заполняем элементы "meter" для текущего элемента "PersAcc".
			Для Каждого ТекСчетчик Из СтрокиИПУ Цикл
				
				// meter - данные по индивидуальным счетчикам.
				СтрокаСчетчик = ДокументDOM.СоздатьЭлемент("meter");
				СтрокаЛС.ДобавитьДочерний(СтрокаСчетчик);
				
				СтрокаСчетчик.УстановитьАтрибут("value_count", Строка(ТекСчетчик.value_count));
				
				// Даты показаний.
				Если ЗначениеЗаполнено(ТекСчетчик.date_indiccur) Тогда
					Если ЗначениеЗаполнено(ТекСчетчик.date_indicbef) 
					И НЕ ТекСчетчик.date_indicbef = ТекСчетчик.date_indiccur Тогда
						
						Если ТекСчетчик.value_count = 1 Тогда
							СтрокаСчетчик.УстановитьАтрибут("indicbef1", Строка(ТекСчетчик.indicbef1));
						ИначеЕсли ТекСчетчик.value_count = 2 Тогда
							СтрокаСчетчик.УстановитьАтрибут("indicbef1", Строка(ТекСчетчик.indicbef1));
							СтрокаСчетчик.УстановитьАтрибут("indicbef2", Строка(ТекСчетчик.indicbef2));
						ИначеЕсли ТекСчетчик.value_count = 3 Тогда
							СтрокаСчетчик.УстановитьАтрибут("indicbef1", Строка(ТекСчетчик.indicbef1));
							СтрокаСчетчик.УстановитьАтрибут("indicbef2", Строка(ТекСчетчик.indicbef2));
							СтрокаСчетчик.УстановитьАтрибут("indicbef3", Строка(ТекСчетчик.indicbef3));
						КонецЕсли;
						
						СтрокаСчетчик.УстановитьАтрибут("date_indicbef", Строка(ТекСчетчик.date_indicbef));
					КонецЕсли;
					
					Если ТекСчетчик.value_count = 1 Тогда
						СтрокаСчетчик.УстановитьАтрибут("indiccur1", Строка(ТекСчетчик.indiccur1));
					ИначеЕсли ТекСчетчик.value_count = 2 Тогда
						СтрокаСчетчик.УстановитьАтрибут("indiccur1", Строка(ТекСчетчик.indiccur1));
						СтрокаСчетчик.УстановитьАтрибут("indiccur2", Строка(ТекСчетчик.indiccur2));
					ИначеЕсли ТекСчетчик.value_count = 3 Тогда
						СтрокаСчетчик.УстановитьАтрибут("indiccur1", Строка(ТекСчетчик.indiccur1));
						СтрокаСчетчик.УстановитьАтрибут("indiccur2", Строка(ТекСчетчик.indiccur2));
						СтрокаСчетчик.УстановитьАтрибут("indiccur3", Строка(ТекСчетчик.indiccur3));
					КонецЕсли;
					
					СтрокаСчетчик.УстановитьАтрибут("date_indiccur", Строка(ТекСчетчик.date_indiccur));
				КонецЕсли;
				
				СтрокаСчетчик.УстановитьАтрибут("kod",     Строка(ТекСчетчик.kod));
				СтрокаСчетчик.УстановитьАтрибут("name",    Строка(ТекСчетчик.MName));
				СтрокаСчетчик.УстановитьАтрибут("service", Строка(ТекСчетчик.SName));
				
			КонецЦикла;
			
			// Создаем и заполняем элементы "contractor" для каждого элемента "PersAcc".
			СтрокиПоставщиков = ТаблицаНачисленийПоПоставщикам.НайтиСтроки(ОтборПоОрганизацииИЛС);
			
			Для Каждого Поставщик Из СтрокиПоставщиков Цикл
				СтрокаПоставщик = ДокументDOM.СоздатьЭлемент("contractor");
				СтрокаЛС.ДобавитьДочерний(СтрокаПоставщик);
				СтрокаПоставщик.УстановитьАтрибут("id",   Строка(Поставщик.CONId));
				СтрокаПоставщик.УстановитьАтрибут("summ", Строка(Поставщик.sum));
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьDOM = Новый ЗаписьDOM();
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
		
		ЗаписьXML.Закрыть();
		
		СтруктураСведений = Новый Структура;
		СтруктураСведений.Вставить("ИмяФайла", ИмяФайла);
		СтруктураСведений.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый УникальныйИдентификатор));
		
		МассивСведений.Добавить(СтруктураСведений);
		
	КонецЦикла;
	
	Возврат МассивСведений;
	
КонецФункции

#КонецОбласти

#КонецЕсли