
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедуры

&НаСервере
// Процедура заполнения таблицы на сервере.
Процедура ЗаполнитьТаблицуНаСервере(СписокЗаполненных)
	
	Для Каждого ТекЛС Из СписокЗаполненных Цикл
		НоваяСтрока             = Объект.ЛицевыеСчета.Добавить();
		НоваяСтрока.ЛицевойСчет = ТекЛС.Значение;
		НоваяСтрока.Владелец 	= УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
									НоваяСтрока.ЛицевойСчет, Объект.ПериодПросмотра);
		НоваяСтрока.Адрес 		= ПолучитьАдресПомещения(НоваяСтрока.ЛицевойСчет.Адрес.Владелец.Наименование, 
														 НоваяСтрока.ЛицевойСчет.Адрес);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения данных строки.
Процедура ЗаполнитьДанныеСтрокиНаСервере(ТекущаяСтрока)
	
	СтрокаДанных = Объект.ЛицевыеСчета.НайтиПоИдентификатору(ТекущаяСтрока);
	СтрокаДанных.Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
								СтрокаДанных.ЛицевойСчет, Объект.ПериодПросмотра);
	СтрокаДанных.Адрес    = СтрокаДанных.ЛицевойСчет.Адрес.Владелец;
	
КонецПроцедуры

&НаСервере
// Процедура помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("УчитыватьТекущуюДатуВНаименовании", Объект.УчитыватьТекущуюДатуВНаименовании);
	СтруктураНастроек.Вставить("Организации", Объект.Организации.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Процедура получает настройки из временного хранилища.
Процедура ПолучитьНастройкиИзХранилища(АдресНастроек)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроек);
	
	Если СтруктураНастроек.Свойство("Организации") Тогда
		Объект.Организации.Загрузить(СтруктураНастроек.Организации);
	КонецЕсли;
	Если СтруктураНастроек.Свойство("УчитыватьТекущуюДатуВНаименовании") Тогда
		Объект.УчитыватьТекущуюДатуВНаименовании = СтруктураНастроек.УчитыватьТекущуюДатуВНаименовании;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для актуализации таблицы организаций.
//
Функция АктуализироватьТаблицуОрганизаций(ТаблицаОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втОрганизаций.Организация
	|ПОМЕСТИТЬ втОрганизаций
	|ИЗ
	|	&втОрганизаций КАК втОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОрганизаций.Организация
	|ИЗ
	|	втОрганизаций КАК втОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО втОрганизаций.Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("втОрганизаций", ТаблицаОрганизаций);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // АктуализироватьТаблицуОрганизаций()

&НаСервере
// Сохраняет данные в хранилище
Процедура ЗаполнитьДанныеВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организации",                       Объект.Организации.Выгрузить());
	СтруктураПараметров.Вставить("УчитыватьТекущуюДатуВНаименовании", Объект.УчитыватьТекущуюДатуВНаименовании);
	

	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("Параметры_КВП_ВыгрузкаЛицевыхСчетовНаСайт",,
																	СтруктураПараметров);
КонецПроцедуры // ЗаполнитьДанныеВХранилище()

&НаСервере
// Производит начальное заполнение параметров обработки.
//
// Параметры:
//  Нет
//
Процедура ИнициализацияРеквизитов()
	
	СтруктураПараметров =
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("Параметры_КВП_ВыгрузкаЛицевыхСчетовНаСайт");
	
	врТаблицаОрганизаций = Неопределено;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("Организации",                       врТаблицаОрганизаций);
		СтруктураПараметров.Свойство("УчитыватьТекущуюДатуВНаименовании", Объект.УчитыватьТекущуюДатуВНаименовании);
		
	КонецЕсли;
	
	Если Не врТаблицаОрганизаций = Неопределено Тогда
		врТаблицаОрганизаций = АктуализироватьТаблицуОрганизаций(врТаблицаОрганизаций);
		Объект.Организации.Загрузить(врТаблицаОрганизаций);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МОДУЛЯ ОБРАБОТКИ

#Область ПроцедурыМодуляОбработки

&НаСервере
// Процедура инициализации реквизитов.
Процедура ИнициализацияРеквизитовНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.КВП_ВыгрузкаЛицевыхСчетовXML"));
	ОбработкаОбъект.ИнициализацияРеквизитов();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура инициализации реквизитов.
Функция ЗаписатьДанныеXMLНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.КВП_ВыгрузкаЛицевыхСчетовXML"));
	
	Возврат ОбработкаОбъект.ЗаписатьДанныеXML(Истина, Истина);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияРеквизитовНаСервере();
	
	ВидПериодаДаты = Перечисления.ДоступныеПериодыОтчета.Месяц;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.ПериодПросмотра", "МесяцСтрока");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ИнициализацияРеквизитов();
	
	Если Объект.Организации.Количество() = 0 Тогда
		КомандаНастройки(ЭтотОбъект.Команды.Найти("КомандаНастройки"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВХранилище();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевыеСчетаЛицевойСчет".
Процедура ЛицевыеСчетаЛицевойСчетПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЛицевыеСчета.ТекущаяСтрока;
	Если Не ТекущаяСтрока = Неопределено Тогда
		ЗаполнитьДанныеСтрокиНаСервере(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаЛицевойСчет".
Процедура ЛицевыеСчетаВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевыеСчетаАдрес".
Процедура ЛицевыеСчетаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаДанных".
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаДанныхНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаДанныхНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайлаДанных = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

///////////////////////
// Поле периода

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МесяцСтрока".
Процедура МесяцСтрокаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.ПериодПросмотра", "МесяцСтрока",
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "МесяцСтрока".
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.ПериодПросмотра", "МесяцСтрока");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "МесяцСтрока".
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.ПериодПросмотра", "МесяцСтрока", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "МесяцСтрока".
Процедура МесяцСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "МесяцСтрока".
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройки".
Процедура КомандаНастройки(Команда)
	
	АдресНастроек = ПоместитьНастройкиВХранилище();
	
	ОткрытьФорму("Обработка.КВП_ВыгрузкаЛицевыхСчетовXML.Форма.ФормаНастройки",
				 Новый Структура("АдресНастроек", АдресНастроек),
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьУказанныеНастройки", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора объектов, вызванного в процедуре-обработчике команды "КомандаНастройки()".
Процедура ОбработатьУказанныеНастройки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		ПолучитьНастройкиИзХранилища(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьУказанныеНастройки()

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	// Вызываем обработку заполнения.
	СтруктураПараметровОтбора = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	СтруктураПараметровОтбора.Вставить("ТипОбъекта"           , "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта"       , "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("НачПериодЛС"          , НачалоМесяца(Объект.ПериодПросмотра));
	СтруктураПараметровОтбора.Вставить("КонПериодЛС"          , КонецМесяца(Объект.ПериодПросмотра));
	СтруктураПараметровОтбора.Вставить("Организация"          , Объект.Организация);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма",
				 СтруктураПараметровОтбора,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборОбъектов", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Обработчик выбора объектов, вызванного в процедуре-обработчике
// команды "Заполнить()".
Процедура ОбработатьВыборОбъектов(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено И РезультатВыбора.Количество() > 0 Тогда
		
		Объект.ЛицевыеСчета.Очистить();
		
		ЗаполнитьТаблицуНаСервере(РезультатВыбора);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОбъектов()

&НаКлиенте
// Обработчик команды "Очистить".
Процедура Очистить(Команда)
	
	Объект.ЛицевыеСчета.Очистить();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Выгрузить".
Процедура Выгрузить(Команда)
	
	Если Объект.Организации.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ЛицевыеСчета.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбраны лицевые счета для выгрузки.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаДанных) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог для выгрузки.");
		Возврат;
	КонецЕсли;
	
	ДанныеВыгружены = Ложь;
	
	МассивСведений = ЗаписатьДанныеXMLНаСервере();
	
	Для Каждого СтруктураСведений Из МассивСведений Цикл
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураСведений.АдресВХранилище);
		
		Если Не ДанныеФайла = Неопределено Тогда
			ДанныеФайла.Записать(СтруктураСведений.ИмяФайла);
			ДанныеВыгружены = Истина;
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось выгрузить данные.");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеВыгружены Тогда
		ПоказатьПредупреждение(Неопределено, "Выгрузка данных завершена.");
	КонецЕсли;
	
	Если ЭтотОбъект.ВладелецФормы <> Неопределено И ЭтотОбъект.МодальныйРежим Тогда
		Закрыть(Объект.ИмяФайлаДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
