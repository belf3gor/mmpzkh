
#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
// Сохраняет настройку показа взаимодействия в хранилище настроек пользователя.
//
Процедура СохранитьНастройкуБольшеНеПоказыватьДаннуюФорму(Тема)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(Тема, "Показывать", Ложь);
	
КонецПроцедуры

&НаКлиенте
// Закрывает форму после успешной отправки сообщения и сохраняет настройку
// больше не показывать форму с данным информацией.
Процедура ПослеОтправкиСообщения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Истина Тогда
		
		ЗакрытьФорму(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает выбор пользователя при ответе на вопрос о закрытии формы.
//
Процедура ОбработатьВыборПриЗакрытииФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "НапомнитьПозже" Тогда
		
		ЗакрытьФорму();
		
	ИначеЕсли Результат = "БольшеНеПоказывать" Тогда
		
		ЗакрытьФорму(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Закрывает текущую форму взаимодействия.
//
Процедура ЗакрытьФорму(БольшеНеПоказывать = Ложь)
	
	ЗакрытьФормуБезПредупреждения = Истина;
	
	Если БольшеНеПоказывать Тогда
		СохранитьНастройкуБольшеНеПоказыватьДаннуюФорму(Тема);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ПАРАМЕТРЫ ФОРМЫ ВЗАИМОДЕЙСТВИЯ:
	//
	// ИсточникПараметровВзаимодействия - строка - имя экспортной функции, например,
	//     "Справочники.КВП_НормыПотребленияУслуг.ПолучитьПараметрыОповещенияОПроверкеФормул",
	//     которая возвращает структуру основных параметров взаимодействия.
	//     Может использоваться при открытии формы при запуске программы через обработчик ожидания.
	//
	// Тема - строка (обязательный) - используется для сохранения параметров открытия и сбора статистики.
	//
	// Для передачи макета взаимодействия можно использовать один из параметров:
	// ПолноеИмяМакета - строка - полное имя HTML-макет в метаданных, например,
	//     "Обработка.УПЖКХ_ВзаимодействиеСПользователями.Макет.ПредупреждениеПоИсключениюДоговоров".
	// АдресХранилищаМакета - строка - адрес во временном хранилище, в котором находится HTML-макет.
	// ТекстМакета - строка HTML - готовый текст HTML-макета.
	
	// По умолчанию параметры оповещения пользователю получаем из параметров формы.
	ПараметрыВзаимодействия = Параметры;
	
	// Параметры оповещения могут быть переданы через имя функции, которая возвращает их.
	Если Параметры.Свойство("ИсточникПараметровВзаимодействия") Тогда
		
		Попытка
			Выполнить("ПараметрыВзаимодействия = " + Параметры.ИсточникПараметровВзаимодействия + "();");
		Исключение
			Отказ = Истина;
			// Вызываем исключение для выявления некорректного источника параметров.
			ВызватьИсключение "Ошибка получения параметров взаимодействия с пользователем:" + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
		// Источник параметров должен быть структурой.
		Если Не ТипЗнч(ПараметрыВзаимодействия) = Тип("Структура") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Тема взаимодействия, должна быть передана обязательно.
	Если ПараметрыВзаимодействия.Свойство("Тема") Тогда
		Тема = ПараметрыВзаимодействия.Тема;
	Иначе
		ВызватьИсключение "Не определена тема взаимодействия с пользователем.";
	КонецЕсли;
	
	// Макет передан по имени макета в обработке взаимодействия.
	Если ПараметрыВзаимодействия.Свойство("ПолноеИмяМакета") Тогда
		
		ИмяМакета = ПараметрыВзаимодействия.ПолноеИмяМакета;
		
		СтруктураИмени = СтрРазделить(ИмяМакета, ".");
		Если СтруктураИмени.Количество() = 2 Тогда
			
			// Это общий макет
			Макет = ПолучитьОбщийМакет(СтруктураИмени[1]);
			
		ИначеЕсли СтруктураИмени.Количество() = 4 Тогда
			
			// Это макет объекта метаданных.
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураИмени[0] + "." + СтруктураИмени[1]);
			Макет = МенеджерОбъекта.ПолучитьМакет(СтруктураИмени[3]);
			
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное имя макета ""%1"" для взаимодействия с пользователем.'"), ИмяМакета);
		КонецЕсли;
		
		ТекстМакета = Макет.ПолучитьТекст();
	
	// Макет передан во временном хранилище.
	ИначеЕсли ПараметрыВзаимодействия.Свойство("АдресХранилищаМакета") Тогда
		
		Макет = ПолучитьИзВременногоХранилища(ПараметрыВзаимодействия.АдресХранилища);
		ТекстМакета = Макет.ПолучитьТекст();
		
	// Передан готовый текст макета.
	ИначеЕсли ПараметрыВзаимодействия.Свойство("ТекстМакета") Тогда
		
		ТекстМакета = ПараметрыВзаимодействия.ТекстМакета;
		
	Иначе
		
		// Если макет не определен, то взаимодействие невозможно.
		Отказ = Истина;
		
	КонецЕсли;
	
	// Заголовок формы.
	Если ПараметрыВзаимодействия.Свойство("Заголовок") Тогда
		Заголовок = ПараметрыВзаимодействия.Заголовок;
	КонецЕсли;
	
	// Использование отправки сообщений разработчику.
	Если ПараметрыВзаимодействия.Свойство("ИспользоватьОтправкуСообщений")
	   И ПараметрыВзаимодействия.ИспользоватьОтправкуСообщений = Истина Тогда
		Элементы.ГруппаОтправкаСообщения.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтправкаСообщения.Видимость = Ложь;
	КонецЕсли;
	
	// Заполнение имени конфигурации в тексте макета.
	ТекстМакета = СтрЗаменить(ТекстМакета, "%ИмяКонфигурации%", Метаданные.Синоним);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы
		 И Не ЗакрытьФормуБезПредупреждения Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПриЗакрытииФормы", ЭтаФорма);
		
		ТекстСообщения = "Вы собираетесь закрыть окно с важной информацией, выберите одно из следующих действий:";
		
		КнопкиВыбора = Новый СписокЗначений;
		КнопкиВыбора.Добавить("НапомнитьПозже",     "Напомнить позже");
		КнопкиВыбора.Добавить("БольшеНеПоказывать", "Больше не показывать");
		КнопкиВыбора.Добавить("Отмена",             "Отмена");
		
		ТекстЗаголовка = "Важная информация для пользователей";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, КнопкиВыбора, , "НапомнитьПозже", ТекстЗаголовка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Декорация".
//
Процедура ДекорацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ОтправитьСообщение") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.УПЖКХ_ВзаимодействиеСПользователями.Форма.ОтправкаСообщения", Новый Структура("Тема", Тема) , , , , , Новый ОписаниеОповещения("ПослеОтправкиСообщения", ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНажатии" поля "ТекстМакета".
//
Процедура ТекстМакетаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	// Если в ссылке содержится навигационная ссылка, открываем ее.
	Если Не ДанныеСобытия.href = Неопределено И СтрНайти(ДанныеСобытия.href, "e1cib") > 0 Тогда
		ПерейтиПоНавигационнойСсылке(Сред(ДанныеСобытия.href, СтрНайти(ДанныеСобытия.href, "e1cib")));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "НапомнитьПозже".
//
Процедура НапомнитьПозже(Команда)
	
	ЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "БольшеНеПоказывать".
//
Процедура БольшеНеПоказывать(Команда)
	
	ЗакрытьФорму(Истина);
	
КонецПроцедуры

#КонецОбласти
