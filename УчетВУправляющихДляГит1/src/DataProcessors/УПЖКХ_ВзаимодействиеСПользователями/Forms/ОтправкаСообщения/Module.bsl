
#Область ПрочиеПроцедурыИФункции

// Функция для подготовки HTTP-заголовков для стандартных запросов на сервис.
Функция ПолучитьЗаголовкиДляHTTPЗапроса(мHTTPСоединение)
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Host",         мHTTPСоединение.Сервер);
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Возврат ЗаголовкиHTTP;
	
КонецФункции

// Функция отправки стандартных POST-запросов на сервис.
//
Функция ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, ТекстЗапроса, ТелоЗапроса)
	
	Возврат УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ОтправитьPOSTЗапрос(мHTTPСоединение, ПолучитьЗаголовкиДляHTTPЗапроса(мHTTPСоединение), ТекстЗапроса, ТелоЗапроса, КодировкаТекста.UTF8);
	
КонецФункции

// Получает объект соединения к веб-сервису.
&НаСервере
Функция ПолучитьHTTPСоединениеССервисом()
	
	Попытка
		// IP для пользователей (недоступен из офиса разработчиков).
		мHTTPСоединение = Новый HTTPСоединение("ws-utility.otr-soft.ru/UtilityWebServices/hs/CustomersFeedback",, "Обмен данными",,,, Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
		Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "/isavailable", "");
	Исключение
		
		Попытка
			// IP для разработчиков (недоступен для пользователей).
			мHTTPСоединение = Новый HTTPСоединение("192.168.112.2:8080/UtilityWebServices/hs/CustomersFeedback", , "Обмен данными", , , 180);
			Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "/isavailable", "");
		Исключение
			// Считаем, что нет подключения к сети Интернет.
			Возврат Неопределено;
		КонецПопытки;
		
	КонецПопытки;
	
	Возврат мHTTPСоединение;
	
КонецФункции

// Выполняет проверку подключения к сети Интернет.
&НаСервере
Функция ПроверитьПодключениеКИнтернету()
	
	мHTTPСоединение = ПолучитьHTTPСоединениеССервисом();
	
	Элементы.ГруппаЕстьИнтернет.Видимость = ?(мHTTPСоединение = Неопределено, Ложь, Истина);
	Элементы.ГруппаНетИнтернета.Видимость = ?(мHTTPСоединение = Неопределено, Истина, Ложь);
	
КонецФункции

// Выполняет отправку сообщения пользователя на сервис.
&НаСервере
Функция ОтправитьСервер()
	
	мHTTPСоединение = ПолучитьHTTPСоединениеССервисом();
	
	Если мHTTPСоединение = Неопределено Тогда
		
		Элементы.ГруппаЕстьИнтернет.Видимость = Ложь;
		Элементы.ГруппаНетИнтернета.Видимость = Истина;
		
		Возврат Новый Структура("status", "nointernet");
		
	КонецЕсли;
	
	ПараметрыЗапроса = СформироватьПараметрыЗапроса();
	
	Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "/addmessage", ПараметрыЗапроса);
	СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Формирует параметры запроса для отправки на веб-сервис.
&НаСервере
Функция СформироватьПараметрыЗапроса()
	
	ПараметрыТехническойИнформации = Новый Структура;
	ПараметрыТехническойИнформации.Вставить("ВидПриложения", ВидПриложения);
	ПараметрыТехническойИнформации.Вставить("Организация",   Справочники.Организации.ОрганизацияПоУмолчанию());
	
	ТехническаяИнформация = УПЖКХ_ИнформацияОРазработчикеИПрограммеСервер.ПолучитьТехническуюИнформацию(ПараметрыТехническойИнформации);
	НастройкиПрограммы    = УПЖКХ_ИнформацияОРазработчикеИПрограммеСервер.ПолучитьНастройкиПрограммы();
	
	ТехническаяИнформация.Записать(КаталогВременныхФайлов() + "\TechInfo.txt");
	НастройкиПрограммы.Записать(КаталогВременныхФайлов() + "\SettingsProg.txt");
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("subject",       Тема);
	ДанныеЗапроса.Вставить("message",       Сообщение);
	ДанныеЗапроса.Вставить("email",         АдресОтвета);
	ДанныеЗапроса.Вставить("technicalInfo", Base64Строка(Новый ДвоичныеДанные(КаталогВременныхФайлов() + "\TechInfo.txt")));
	ДанныеЗапроса.Вставить("settingsProg",  Base64Строка(Новый ДвоичныеДанные(КаталогВременныхФайлов() + "\SettingsProg.txt")));
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
// Возвращает вид приложения клиента.
Функция ВидПриложения()
	
	#Если ВебКлиент Тогда
		Возврат НСтр("ru = 'Веб-клиент'");
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
		Возврат НСтр("ru = 'Толстый клиент, обычное приложение'");
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат НСтр("ru = 'Толстый клиент, управляемое приложение'");
	#ИначеЕсли ТонкийКлиент Тогда
		Возврат НСтр("ru = 'Тонкий клиент'");
	#Иначе
		Возврат "";
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события "ПриСозданииНаСервере" формы.
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Тема") Тогда
		Тема = Параметры.Тема;
		Элементы.Декорация3.Заголовок = СтрЗаменить(Элементы.Декорация3.Заголовок, "%Тема%", Тема);
	КонецЕсли;
	
	ПроверитьПодключениеКИнтернету();
	
КонецПроцедуры

// Обработчик события "ПриОткрытии" формы.
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВидПриложения = ВидПриложения();
КонецПроцедуры

// Обработчик события "ПередЗакрытием" формы.
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ОбработкаПроверкиЗаполненияНаСервере" формы.
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не УПЖКХ_ТиповыеМетодыКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресОтвета) Тогда
		ТекстОшибки = НСтр("ru='Указан некорректный адрес электронной почты.'");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстОшибки, , "АдресОтвета", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Декорация".
&НаКлиенте
Процедура Декорация2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ПроверитьПодключениеКИнтернету") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПроверитьПодключениеКИнтернету();
		
		Пояснение = "Попытка подключения к сети Интернет оказалась неудачной.
					|Попробуйте настроить соединение и повторите попытку подключения.";
		
		Если Элементы.ГруппаНетИнтернета.Видимость Тогда
			ПоказатьОповещениеПользователя("Нет подключения к сети Интернет", , Пояснение, БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды формы "Отправить".
&НаКлиенте
Процедура Отправить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = ОтправитьСервер();
	
	// Удаляем временно созданные файлы.
	Попытка
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПутьТехИнформация", "\TechInfo.txt");
		ДополнительныеПараметры.Вставить("ПутьНастройкиПрограммы", "\SettingsProg.txt");
		
		НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПолучитьКаталогВременныхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры, "ФайловаяОшибка", ЭтотОбъект)) 
	Исключение
	КонецПопытки;
	
	Если СтруктураОтвета.Свойство("status")
		 И СтруктураОтвета.status = "success" Тогда
		
		РезультатОтправки = "Сообщение успешно отправлено";
		Пояснение         = "Спасибо за ответ! Ваше сообщение отправлено разработчикам программы.";
		Картинка = БиблиотекаКартинок.ПроверкаУспешна;
		
	ИначеЕсли СтруктураОтвета.Свойство("status")
			  И СтруктураОтвета.status = "nointernet" Тогда
		
		РезультатОтправки = "Сообщение не отправлено";
		Пояснение         = "Нет подключения к сети Интернет. Попробуйте настроить соединение и повторите попытку подключения.";
		Картинка = БиблиотекаКартинок.ПроверкаНеУспешна;
		
	Иначе
		
		РезультатОтправки = "Сообщение не отправлено";
		Пояснение         = "Сервис не отвечает. Попробуйте отправить сообщение еще раз";
		Картинка = БиблиотекаКартинок.ПроверкаНеУспешна;
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(РезультатОтправки, , Пояснение, Картинка, СтатусОповещенияПользователя.Важное);
	
	Если СтруктураОтвета.Свойство("status")
		 И СтруктураОтвета.status = "success" Тогда
		Закрыть(Истина);
	КонецЕсли;
	
	
КонецПроцедуры

// Обрабатывает продолжение получения каталога временных файлов.
&НаКлиенте
Процедура ПолучитьКаталогВременныхФайловЗавершение(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	ОбратныйВызов = Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект, , "ФайловаяОшибка", ЭтотОбъект);
	НачатьУдалениеФайлов(ОбратныйВызов, ИмяКаталогаВременныхФайлов+ДополнительныеПараметры.ПутьТехИнформация);
	НачатьУдалениеФайлов(ОбратныйВызов, ИмяКаталогаВременныхФайлов+ДополнительныеПараметры.ПутьНастройкиПрограммы);
КонецПроцедуры

// Обрабатывает завершение удаления файлов.
&НаКлиенте
Процедура УдалитьЗавершение(ДополнительныеПараметры) Экспорт
	// Действия при успешном удалении файлов во временном каталоге.
КонецПроцедуры

// Обрабатывает ошибку при выполнении процедур обработки файлов.
&НаКлиенте
Процедура ФайловаяОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("При выполнении файловой операции обнаружена ошибка: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
КонецПроцедуры

#КонецОбласти

