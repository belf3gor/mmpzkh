&НаКлиенте
Перем ИдентификаторСтрокиПроводки;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ Параметры.Свойство("ДокументДвижений") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументДвижений    = Параметры.ДокументДвижений;
	
	ОбновитьДвиженияНаСервере();
	
	УстановитьУсловноеОформление();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ИспользуетсяОтложенноеПроведение = НЕ Объект.РучнаяКорректировка
		И ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Объект.Организация, Объект.Дата);

	Если Параметры.Свойство("АдресХранилищаОтложенныеРасчеты") Тогда
		// Адрес может быть передан при вызове, если фоновое задание запущено одновременно с вызовом формы.
		АдресХранилищаОтложенныеРасчеты = Параметры.АдресХранилищаОтложенныеРасчеты;
	КонецЕсли;
	
	Если ИспользуетсяОтложенноеПроведение Тогда

		Элементы.Актуализировать.Видимость = ЕстьПравоНаРедактирование;
			
		ДокументПоддерживаетВосстановлениеОтложенныхРасчетов = 
			УчетВзаиморасчетовОтложенноеПроведение.ДокументПоддерживаетВосстановлениеОтложенныхРасчетовСКонтрагентами(ДокументДвижений);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента)

	Объект.Проведен = БухгалтерскийУчетПереопределяемый.ДокументПроведен(ДокументДвижений);
	Объект.ЕстьОрганизация = МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено;
	Объект.ЕстьРучнаяКорректировка = МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено;
	ИменаРеквизитов = "Дата,ПометкаУдаления,Организация,РучнаяКорректировка";
	Если НЕ Объект.ЕстьОрганизация Тогда
		ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, ",Организация", "");
	КонецЕсли;
	Если НЕ Объект.ЕстьРучнаяКорректировка Тогда
		ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, ",РучнаяКорректировка", "");
	КонецЕсли;
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДвижений, ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыДокумента);
	РучнаяКорректировка = Объект.РучнаяКорректировка;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	ЕстьПравоНаРедактирование = ПравоДоступа("Изменение", МетаданныеДокумента)
		И ДоступныеОрганизации.Найти(Объект.Организация) <> Неопределено;
	
	ИнформацияОПроведении = Обработки.КорректировкаДвижений.ИнформацияОПроведенииДокумента(ДокументДвижений);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Подразделение, Валютный, Количественный",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ПодразделениеДт", "ВалютныйДт", "КоличественныйДт");
	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Подразделение, Валютный, Количественный",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ПодразделениеКт", "ВалютныйКт", "КоличественныйКт");

	Для каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт, Ложь);
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт, Ложь);
		ЗаполнитьНадписиВПроводке(Проводка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъекта()
	
	Если (ТипЗнч(ДокументДвижений) = Тип("ДокументСсылка.ВводНачальныхОстатков")) Тогда
		Период = КонецМесяца(Объект.Дата) + 1;
	Иначе
		Период = Объект.Дата;
	КонецЕсли;
	
	Если Объект.ЕстьОрганизация Тогда
		
		ПериодФО = Период;
		Если ТипЗнч(ДокументДвижений) = Тип("ДокументСсылка.ОперацияБух") Тогда
			// При переходе с ОСН на УСН в проводках "Операций (БУ и НУ)",
			// введенных первым днем периода применения УСН при выполнении операций "Помощника по переходу на УСН",
			// требуется показывать суммы налогового учета по налогу на прибыль
			Если УчетУСН.ЭтоПервыйДеньПримененияУСНПослеУплатыНалогаНаПрибыль(Объект.Организация, Период) Тогда
				ПериодФО = НачалоДня(Период) - 1;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
			ЭтаФорма,
			Объект.Организация,
			ПериодФО);
		
		Если УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, Период)
			И НЕ УчетнаяПолитика.ВестиУчетПоВидамДеятельностиИП(Объект.Организация, Период) Тогда
			ИПОсновнаяНоменклатурнаяГруппа = УчетнаяПолитика.ОсновнаяНоменклатурнаяГруппа(Объект.Организация, Период);
			ИПОсновнойХарактерДеятельности = УчетнаяПолитика.ОсновнойХарактерДеятельности(Объект.Организация, Период);
		КонецЕсли;
		
		РаздельныйУчетУСНТорговыйСбор = УчетнаяПолитика.ПрименяетсяУСНДоходы(Объект.Организация, Период)
			И УчетнаяПолитика.ПлательщикТорговогоСбораЗаПериод(Объект.Организация, НачалоГода(Период), КонецГода(Период));
		
		Если ПолучитьФункциональнуюОпциюФормы("ПоддержкаПБУ18") Тогда
			Элементы.ХозрасчетныйГруппаНалоговыйУчетДт.Заголовок = НСтр("ru='Сумма Дт'");
			Элементы.ХозрасчетныйГруппаНалоговыйУчетКт.Заголовок = НСтр("ru='Сумма Кт'");
		Иначе
			Элементы.ХозрасчетныйГруппаНалоговыйУчетДт.Заголовок = НСтр("ru='Сумма НУ Дт'");
			Элементы.ХозрасчетныйГруппаНалоговыйУчетКт.Заголовок = НСтр("ru='Сумма НУ Кт'");
		КонецЕсли;
		
	Иначе
		Элементы.ХозрасчетныйГруппаНалоговыйУчетДт.Заголовок = НСтр("ru='Сумма Дт'");
		Элементы.ХозрасчетныйГруппаНалоговыйУчетКт.Заголовок = НСтр("ru='Сумма Кт'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ Объект.Проведен 
		 И НЕ Объект.РучнаяКорректировка Тогда
		
		Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументДвижений) Тогда
			ТекстПредупреждения = НСтр("ru='Регламентная операция не выполнена.
				|Для получения информации о движениях необходимо выполнить регламентную операцию.'");
		ИначеЕсли ТипЗнч(ДокументДвижений) = Тип("ДокументСсылка.ОперацияБух") Тогда
			ТекстПредупреждения = НСтр("ru='Операция помечена на удаление.
				|Для получения информации о движениях необходимо снять пометку на удаление'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Документ не проведен.
				|Для получения информации о движениях необходимо провести документ.'");
		КонецЕсли;

		ПоказатьПредупреждение( , ТекстПредупреждения);

		Отказ = Истина;
		Возврат;

	КонецЕсли;

	Если ТребуетсяПоказатьОтложенныеРасчеты(ЭтотОбъект) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПрочитатьСостояниеОтложенныхРасчетов", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	ОбновитьДвиженияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Сохранить изменения движений?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)

	ВыполнитьДействияПриИзмененииРучнойКорректировки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХозрасчетный

&НаКлиенте
Процедура ХозрасчетныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	ИдСтроки      = Элементы.Хозрасчетный.ТекущаяСтрока;
	
	Если ИдСтроки <> ИдентификаторСтрокиПроводки Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоДт1", "ХозрасчетныйСубконтоДт2", "ХозрасчетныйСубконтоДт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоКт1", "ХозрасчетныйСубконтоКт2", "ХозрасчетныйСубконтоКт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, "", Ложь);
		
		ИдентификаторСтрокиПроводки = ИдСтроки;
	
	КонецЕсли;
	
	// Сначала выполняем общие действия для всех регистров
	Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВПроводке(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУниверсальные

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;
	
	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Свойство("НоменклатурнаяГруппа") И Элемент.ТекущиеДанные.Свойство("ХарактерДеятельности") Тогда
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = ИПОсновнаяНоменклатурнаяГруппа;
		Элемент.ТекущиеДанные.ХарактерДеятельности = ИПОсновнойХарактерДеятельности;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование
		И Элемент.ТекущиеДанные.Свойство("Валюта")
		И Элемент.ТекущиеДанные.Свойство("ОтражениеВУСН") Тогда // Регистр накопления "Расходы при УСН".
		
		Элемент.ТекущиеДанные.Валюта        = ВалютаРегламентированногоУчета;
		Элемент.ТекущиеДанные.ОтражениеВУСН = ПредопределенноеЗначение("Перечисление.ОтражениеВУСН.Принимаются");
		
	КонецЕсли;
	
КонецПроцедуры

// Общая процедура для всех остаточных регистров накопления. Обеспечивает показ правильной картинки в строке.
//
&НаКлиенте
Процедура Подключаемый_ВидДвиженияПриИзменении(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы")
		И ТекущийЭлемент.ТекущиеДанные.Свойство("КартинкаСтроки") Тогда
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			ТекущиеДанные.КартинкаСтроки = 2 + ?(ТекущиеДанные.Активность, 0, 1);
		Иначе
			ТекущиеДанные.КартинкаСтроки = 4 + ?(ТекущиеДанные.Активность, 0, 1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ИзмененаРучнаяКорректировка = Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка <> РучнаяКорректировка;

	Если Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка
		И НЕ РучнаяКорректировка Тогда
		
		ТекстВопроса = НСтр("ru='Ручная корректировка движений документа отменена.
			|Восстановить движения, сформированные автоматически?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросВосстановитьДвиженияЗавершение", ЭтотОбъект, ИзмененаРучнаяКорректировка);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДвижения(Команда)
	
	ОбновитьДвиженияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если НЕ СтрокаРегистра.ПравоНаПросмотр Тогда
			Продолжить;
		КонецЕсли;
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений",  СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьНастройкуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КорректировкаДвижений.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиВСписокРегистра(Команда)
	
	ИмяРегистра = СтрЗаменить(Команда.Имя, "ПерейтиВСписок", "");
	
	// Проверим, что таблица регистра добавлена на форму
	Если Элементы.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяРегистра].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	// установим отбор по организации документа (иначе в некоторых формах установится отбор по основной организации)
	Если Объект.ЕстьОрганизация Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора); 
	КонецЕсли;
	
	// Подготовим ключ записи для позиционирования в форме списка
	ПараметрыТекущейЗаписи = Новый Структура;
	ПараметрыТекущейЗаписи.Вставить("ИмяРегистра", ИмяРегистра);
	ПараметрыТекущейЗаписи.Вставить("Регистратор", ДокументДвижений);
	Если Объект.ЕстьОрганизация Тогда
		ПараметрыТекущейЗаписи.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Для Каждого ЭлементФормыТабПоля ИЗ Элементы[ИмяРегистра].ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормыТабПоля) = Тип("ПолеФормы") Тогда
			ИмяСвойства = СтрЗаменить(ЭлементФормыТабПоля.Имя, ИмяРегистра, "");
			Если ИмяСвойства = "Регистратор" ИЛИ ИмяСвойства = "Организация" Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыТекущейЗаписи.Вставить(ИмяСвойства, ТекущиеДанные[ИмяСвойства]);			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКлючаЗаписи = ПолучитьПараметрыКлючаЗаписи(ПараметрыТекущейЗаписи);
	Если ПараметрыКлючаЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипРегистра = ПараметрыКлючаЗаписи.ТипРегистра;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыКлючаЗаписи.КлючЗаписи);

	ОткрытьФорму(ТипРегистра + "." + ИмяРегистра + ".ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	Для Сч = 1 По 3 Цикл

		///////////////////////
		// Субконто Дт
		
		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться всегда.
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
		
		// Пустое субконто в виде "<...>"

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоДт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
	

		///////////////////////
		// Субконто Кт
		
		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться тоже всегда.

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		
		// Пустое субконто в виде "<...>"
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ХозрасчетныйНаборЗаписей.СубконтоКт" + Сч, ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
		
	КонецЦикла;


	//////////////////////
	// ПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	//////////////////////
	// ПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКт", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	//////////////////////
	// Количество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйНадписьКоличествоКт, ХозрасчетныйКоличествоКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	//////////////////////
	// Валюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютаКт, ХозрасчетныйВалютнаяСуммаКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ХозрасчетныйНаборЗаписей.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// КнигаУчетаДоходовИРасходовДоходТорговыйСбор
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КнигаУчетаДоходовИРасходовДоходТорговыйСбор");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаздельныйУчетУСНТорговыйСбор", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СписокРезультат = РезультатЗакрытия;
	
	Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда
		
		БылиИзменения = Ложь;
		Для каждого СтрокаРегистра Из Регистры Цикл
			СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
			Если СтрокаСписка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
				БылиИзменения = Истина;
				СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
			КонецЕсли;
		КонецЦикла;
		
		Если БылиИзменения Тогда
			
			ВыполнитьДействияПриИзмененииСоставаРегистров();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация",    ТекущиеДанные["Организация"]);
	СписокПараметров.Вставить("СчетУчета",      ТекущиеДанные[ИмяПоляСчетУчета]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "", ОчищатьСвязанныеСубконто = Истина)
	
	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки <> Неопределено Тогда
		СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
		Если ДтКт <> "Кт" Тогда
			
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
			
			Если ОчищатьСвязанныеСубконто Тогда
				ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
			Иначе
				ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоДт1,СубконтоДт2,СубконтоДт3");
				ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
			КонецЕсли;
			
			БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоДт%Индекс%", "ХозрасчетныйСубконтоДт%Индекс%", ПараметрыДокумента);
				
		КонецЕсли;
		Если ДтКт <> "Дт" Тогда
			
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
			
			Если ОчищатьСвязанныеСубконто Тогда
				ЗначенияСубконтоСтрокиТаблицы = СтрокаТаблицы;
			Иначе
				ЗначенияСубконтоСтрокиТаблицы = Новый Структура("СубконтоКт1,СубконтоКт2,СубконтоКт3");
				ЗаполнитьЗначенияСвойств(ЗначенияСубконтоСтрокиТаблицы, СтрокаТаблицы);
			КонецЕсли;
			
			БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, ЗначенияСубконтоСтрокиТаблицы, "СубконтоКт%Индекс%", "ХозрасчетныйСубконтоКт%Индекс%", ПараметрыДокумента);
				
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСчета(ДтКт)

	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "ХозрасчетныйСубконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = "ХозрасчетныйСубконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = "ХозрасчетныйСубконто" + ДтКт + "3";
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные["Счет" + ДтКт], ЭтаФорма, ПоляФормы, Неопределено, Истина, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Подразделение,Валютный,Количественный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";
	ПоляОбъекта.Подразделение  = "Подразделение" + ДтКт;
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт;
	ПоляОбъекта.Организация    = Объект.Организация;
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные["Счет" + ДтКт], ТекущиеДанные, ПоляОбъекта, Истина,, Ложь);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ДтКт);
	
	ЗаполнитьНадписиВПроводке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто"+ДтКт+"%Индекс%", "Счет"+ДтКт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаСервере
Функция ИмяСобытияЖурналаРегистрации()

	Возврат НСтр("ru = 'Корректировка движений'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции
 

&НаСервере
Процедура ЗаписатьДвижения(Отказ)

	Если РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если НЕ ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;

			Для каждого СтрокаРегистра Из Регистры Цикл
				
				Если НЕ СтрокаРегистра.ПравоНаИзменение Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРегистра.ЕстьРеквизит Тогда
					ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
					НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
					НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
					НаборЗаписей.УстановитьАктивность(НЕ Объект.ПометкаУдаления);
					Если НЕ (СтрокаРегистра.ТипРегистра = "РегистрСведений" 
						И (Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений 
						= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический)) Тогда
						Для каждого Запись Из НаборЗаписей Цикл
							Если Запись.Период = '00010101' Тогда
								Запись.Период = Объект.Дата;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			Объект.РучнаяКорректировка = Истина;
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,, 
				ДокументДвижений, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;

	Иначе

		Попытка
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументДвижений) Тогда
				ДокОбъект.ВыполнитьОперацию();
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Объект.РучнаяКорректировка = Истина;
		Исключение
			Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументДвижений) Тогда
				ШаблонОшибки = НСтр("ru='Не удалось выполнить операцию по причине %1'") 
					+ Символы.ПС + НСтр("ru='Регламентная операция отменена.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, 
					ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументДвижений);
				ДокОбъект.ОтменитьОперацию();
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, ДокументДвижений, 
					ТекстОшибки);
			Иначе
				ШаблонОшибки = НСтр("ru='Не удалось перепровести документ по причине %1'") 
					+ Символы.ПС + НСтр("ru='Проведение документа отменено.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, 
					ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументДвижений);
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, ДокументДвижений, 
					ТекстОшибки);
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;

		УстановитьДоступностьСубконто();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()
	
	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();
	
	УстановитьВозможностьРедактированияЗаписей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДвиженияНаСервере()
	
	МетаданныеДокумента = ДокументДвижений.Метаданные();
	ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента);
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъекта();
	
	Элементы.РучнаяКорректировка.Видимость = Объект.ЕстьРучнаяКорректировка;
	ЭтотОбъект.ТолькоПросмотр = НЕ ЕстьПравоНаРедактирование;
	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
		ДокументДвижений, МетаданныеДокумента.Движения);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьВидимостьПриРучнойКорректировке();
	
	УстановитьВозможностьРедактированияЗаписей();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Движения документа: %1'"), 
		Строка(ДокументДвижений));

	ОпределитьМоментАктуальностиОтложенныхРасчетов();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	МетаданныеРегистровНакопления = Метаданные.РегистрыНакопления;
	МетаданныеРегистровСведений   = Метаданные.РегистрыСведений;
	ВидРегистраОстатки            = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	
	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = СтрНайти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		
		Если ТипРегистра = "РегистрБухгалтерии" Тогда
			СтрокаРегистра.ПравоНаПросмотр  = ПравоДоступа("Просмотр", Метаданные.РегистрыБухгалтерии[СтрокаРегистра.Имя]);
			СтрокаРегистра.ПравоНаИзменение = ПравоДоступа("Изменение", Метаданные.РегистрыБухгалтерии[СтрокаРегистра.Имя]);
		ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
			СтрокаРегистра.ПравоНаПросмотр  = ПравоДоступа("Просмотр", МетаданныеРегистровНакопления[СтрокаРегистра.Имя]);
			СтрокаРегистра.ПравоНаИзменение = ПравоДоступа("Изменение", МетаданныеРегистровНакопления[СтрокаРегистра.Имя]);
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			СтрокаРегистра.ПравоНаПросмотр  = ПравоДоступа("Просмотр", МетаданныеРегистровСведений[СтрокаРегистра.Имя]);
			СтрокаРегистра.ПравоНаИзменение = ПравоДоступа("Изменение", МетаданныеРегистровСведений[СтрокаРегистра.Имя]);
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			СтрокаРегистра.РегистрОстатков = МетаданныеРегистра.ВидРегистра = ВидРегистраОстатки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()
	
	ПоказатьХозрасчетный = Ложь;
	ПоказатьКнигаУчетаДоходовИРасходов = Ложь;
	ПоказатьРасшифровкаКУДиР = Ложь;
	ПоказатьЖурналУчетаСчетовФактур = Ложь;

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			ПоказатьХозрасчетный = СтрокаРегистра.Отображение;
			Элементы.ГруппаХозрасчетный.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "КнигаУчетаДоходовИРасходов" Тогда
			ПоказатьКнигаУчетаДоходовИРасходов = СтрокаРегистра.Отображение;
			Элементы.ГруппаКнигаУчетаДоходовИРасходов.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "РасшифровкаКУДиР" Тогда
			ПоказатьРасшифровкаКУДиР = СтрокаРегистра.Отображение;
			Элементы.ГруппаРасшифровкаКУДиР.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			Продолжить;
		ИначеЕсли СтрокаРегистра.Имя = "ЖурналУчетаСчетовФактур" Тогда
			ПоказатьЖурналУчетаСчетовФактур = СтрокаРегистра.Отображение;
			Элементы.ГруппаЖурналУчетаСчетовФактур.Картинка = ?(АктивностьДвижений, 
				БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРБ;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРН;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРС;
			КонецЕсли;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			ТекТаблица.КартинкаСтрок = КартинкаАктивности;
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				ТекТаблица.ПутьКДаннымКартинкиСтроки = ПутьКДаннымТаблицы + ".КартинкаСтроки";
			Иначе
				ТекТаблица.ПутьКДаннымКартинкиСтроки = ПутьКДаннымТаблицы + ".Активность";
			КонецЕсли;
			
			ИмяКоманды   = ИмяТаблицы + "ПерейтиВСписок";
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Картинка  = БиблиотекаКартинок.НайтиВСписке;
			НоваяКоманда.Заголовок = НСтр("ru='Перейти в список движений'");
			НоваяКоманда.Подсказка = НСтр("ru='Перейти в список движений регистра'");
			НоваяКоманда.Действие  = "Подключаемый_ПерейтиВСписокРегистра";
			НоваяКнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ТекТаблица.КоманднаяПанель);
			НоваяКнопка.ИмяКоманды = ИмяКоманды;
			НоваяКнопка.ТолькоВоВсехДействиях = Истина;
			
			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			Если РеквизитыНабораЗаписей.Колонки.Найти("КартинкаСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("КартинкаСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				Если КолонкаРеквизита.Имя = "ВидДвижения"
					И СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
					И СтрокаРегистра.РегистрОстатков Тогда
					ТекКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВидДвиженияПриИзменении");
				КонецЕсли;
				
				Если СтрокаРегистра.Имя = "НДСРаздельныйУчет"
					И КолонкаРеквизита.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыУчетаНДС") Тогда
					
					НовыйПараметр = Новый ПараметрВыбора("ОграничениеСпискаВыбора", "НеОграничивать");
					НовыйМассив = Новый Массив();
					НовыйМассив.Добавить(НовыйПараметр);
					НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив); 
					ТекКолонка.ПараметрыВыбора = НовыеПараметры;
					
				КонецЕсли;
				
			КонецЦикла;
			
			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		ИначеЕсли ТекГруппа <> Неопределено И СтрокаРегистра.Отображение Тогда
			
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.ЖурналПроводок, БиблиотекаКартинок.ЖурналПроводокНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрНакопления, БиблиотекаКартинок.РегистрНакопленияНеактивный);
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = ?(АктивностьДвижений, 
					БиблиотекаКартинок.РегистрСведений, БиблиотекаКартинок.РегистрСведенийНеактивный);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаХозрасчетный.Видимость = ПоказатьХозрасчетный;
	Элементы.ГруппаКнигаУчетаДоходовИРасходов.Видимость = ПоказатьКнигаУчетаДоходовИРасходов;
	Элементы.ГруппаРасшифровкаКУДиР.Видимость = ПоказатьРасшифровкаКУДиР;
	Элементы.ГруппаЖурналУчетаСчетовФактур.Видимость = ПоказатьЖурналУчетаСчетовФактур;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()

	Для Каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта, Ложь);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта, Ложь);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()
	
	Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Объект.ЕстьРучнаяКорректировка;
	Для Каждого СтраницаРегистра Из Элементы.ПанельРегистров.ПодчиненныеЭлементы Цикл
		
		ИмяРегистра = СтрЗаменить(СтраницаРегистра.Имя, "Группа", "");
		
		ВозможностьРедактированияЗаписей = РучнаяКорректировка;
		Если ВозможностьРедактированияЗаписей Тогда
			ОписаниеРегистра = Регистры.НайтиСтроки(Новый Структура("Имя", ИмяРегистра));
			Если ОписаниеРегистра.Количество() <> 0 Тогда
				ВозможностьРедактированияЗаписей = ОписаниеРегистра[0].ПравоНаИзменение;
			КонецЕсли;
		КонецЕсли;
		
		СтраницаРегистра.ТолькоПросмотр = НЕ ВозможностьРедактированияЗаписей;
		ТаблицаРегистра = Элементы[ИмяРегистра];
		ТаблицаРегистра.ИзменятьСоставСтрок  = ВозможностьРедактированияЗаписей;
		ТаблицаРегистра.ИзменятьПорядокСтрок = ВозможностьРедактированияЗаписей;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		СтрокаРегистра.ЕстьДвижения = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено;
		СтрокаРегистра.Отображение  = СтрокаРегистра.ЕстьДвижения И СтрокаРегистра.ПравоНаПросмотр;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	ЭлементПатент             = Элементы.Найти(ИмяРегистра + "Патент");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 

	Если ЭлементПатент <> Неопределено Тогда
		СвязиПараметровПатент = Новый Массив;
		СвязиПараметровПатент.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		ЭлементПатент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровПатент);
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьРеквизитыФормы()

	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "Хозрасчетный"
			ИЛИ СтрокаРегистра.Имя = "КнигаУчетаДоходовИРасходов"
			ИЛИ СтрокаРегистра.Имя = "РасшифровкаКУДиР"
			ИЛИ СтрокаРегистра.Имя = "ЖурналУчетаСчетовФактур" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				КартинкаСтроки = Новый РеквизитФормы("КартинкаСтроки", Новый ОписаниеТипов("Число"), ИмяРеквизита);
				ДобавляемыеРеквизиты.Добавить(КартинкаСтроки);
			КонецЕсли;
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	АктивностьДвижений = Истина;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				Для каждого СтрокаЗаписи Из ЭтотОбъект[ИмяРеквизита] Цикл
					Если СтрокаЗаписи.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						СтрокаЗаписи.КартинкаСтроки = 2 + ?(СтрокаЗаписи.Активность, 0, 1);
					Иначе
						СтрокаЗаписи.КартинкаСтроки = 4 + ?(СтрокаЗаписи.Активность, 0, 1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
			Если СтрокаРегистра.Записывать Тогда
				АктивностьДвижений = АктивностьДвижений И ЭтотОбъект[ИмяРеквизита][0].Активность;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииРучнойКорректировки()
	
	Если РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		ОбновитьДвиженияНаСервере();
		ЭтаФорма.Модифицированность = Ложь;
	Иначе
		УстановитьВидимостьПриРучнойКорректировке();
		УстановитьВозможностьРедактированияЗаписей();
		ВключитьАктивностьДвиженийНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПриРучнойКорректировке()
	
	Если РучнаяКорректировка Тогда
		
		СтрокиСОтображение = Регистры.НайтиСтроки(Новый Структура("Отображение", Истина));
		Если СтрокиСОтображение.Количество() = 0 Тогда
			
			Хозрасчетный = Регистры.НайтиСтроки(Новый Структура("Имя", "Хозрасчетный"));
			Если Хозрасчетный.Количество() > 0 Тогда
				Хозрасчетный[0].Отображение = Истина;
				Элементы.ГруппаХозрасчетный.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИнформацияОПроведении.Видимость = ЗначениеЗаполнено(ИнформацияОПроведении)
												И РучнаяКорректировка = Ложь;

	МоментДокумента = Новый МоментВремени(Объект.Дата, ДокументДвижений);

	Элементы.ТребуетсяАктуализация.Видимость = НЕ РучнаяКорректировка
		И ИспользуетсяОтложенноеПроведение
		И МоментАктуальностиОтложенныхРасчетов <> Неопределено
		И МоментАктуальностиОтложенныхРасчетов.Сравнить(МоментДокумента) <= 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыКлючаЗаписи(ПараметрыЗаписи)
	
	ПараметрыКлючаЗаписи = Новый Структура("КлючЗаписи, ТипРегистра");
	
	ИмяРегистра = ПараметрыЗаписи.ИмяРегистра;
	
	Если НЕ Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрБухгалтерии";

		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыБухгалтерии[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрНакопления";
		
		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыНакопления[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрСведений";
		
		ЗначениеКлючаЗаписи = Новый Структура;
		Если НЕ Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический 
			И ПараметрыЗаписи.Свойство("Период") Тогда
			ЗначениеКлючаЗаписи.Вставить("Период", 		ПараметрыЗаписи.Период); 	
		КонецЕсли;
		Если Метаданные.РегистрыСведений[ИмяРегистра].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору
			И ПараметрыЗаписи.Свойство("Регистратор") Тогда
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор); 	
		КонецЕсли;
		Для Каждого ИзмерениеРегистра ИЗ Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
			Если ПараметрыЗаписи.Свойство(ИзмерениеРегистра.Имя) Тогда
				ЗначениеКлючаЗаписи.Вставить(ИзмерениеРегистра.Имя, ПараметрыЗаписи[ИзмерениеРегистра.Имя]); 		
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыКлючаЗаписи;

КонецФункции

&НаКлиенте
Процедура ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка)
	
	Отказ = Ложь;
	ЗаписатьДвижения(Отказ);
	Если НЕ Отказ Тогда
		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументДвижений);
		КонецЕсли;
		ЭтаФорма.Модифицированность = Ложь;
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", ДокументДвижений));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВосстановитьДвиженияЗавершение(Ответ, ИзмененаРучнаяКорректировка) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка)
	Иначе
		РучнаяКорректировка = Истина;
		УстановитьВидимостьПриРучнойКорректировке();
		УстановитьВозможностьРедактированияЗаписей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ЗаписатьДвижения(Отказ);
		Если НЕ Отказ Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьНУ = НСтр("ru = 'НУ:'");
	Проводка.НадписьПР = НСтр("ru = 'ПР:'");
	Проводка.НадписьВР = НСтр("ru = 'ВР:'");
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

&НаСервере
Процедура ВключитьАктивностьДвиженийНаСервере()
	
	Если РучнаяКорректировка И НЕ АктивностьДвижений Тогда
		
		АктивностьДвижений = Истина;
		
		Для каждого СтрокаРегистра Из Регистры Цикл
			Если НЕ СтрокаРегистра.ЕстьРеквизит Тогда
				Продолжить;
			КонецЕсли;
			
			ТекГруппа = Элементы["Группа" + СтрокаРегистра.Имя];
			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.ЖурналПроводок;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПриНеобходимостиАктуализацииНажатие(Элемент)

	// Пользователь хочет скрыть данные по актуализации, сбрасываем соответствующие признаки.
	МоментАктуальностиОтложенныхРасчетов = Неопределено;
	УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты)
		И НЕ ЗаданиеВыполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда
		// Задание запущено и еще не завершилось, продолжаем ожидание.
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов");
	
	ЗаданиеВыполнено = ЗапуститьОтложенныеРасчетыНаСервере();
	Если ЗаданиеВыполнено Тогда
		ПоказатьРезультатОтложенногоРасчета();
	Иначе
		ОжидатьВыполнениеОтложенныхРасчетов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов");
		ОтменитьВыполнениеЗадания(ИдентификаторЗаданияОтложенныеРасчеты);
		ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
	КонецЕсли;
	
	ОпределитьМоментАктуальностиОтложенныхРасчетов();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания)

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#Область ОтложенныеРасчеты

&НаКлиенте
Процедура Подключаемый_ПрочитатьСостояниеОтложенныхРасчетов()

	ПрочитатьСостояниеОтложенныхРасчетов();

	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда
		ОжидатьВыполнениеОтложенныхРасчетов();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьСостояниеОтложенныхРасчетов()

	// Если используется отложенное проведение и проводится актуализация,
	// то поищем, возможно, фоновое задание для документа уже запущено ранее.
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", 		ДокументДвижений.УникальныйИдентификатор());
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивЗаданий.Количество() > 0 Тогда
		ИдентификаторЗаданияОтложенныеРасчеты = МассивЗаданий[0].УникальныйИдентификатор;
	КонецЕсли;

	ОпределитьМоментАктуальностиОтложенныхРасчетов();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяПоказатьОтложенныеРасчеты(Форма)

	Объект = Форма.Объект;

	Если НЕ Форма.ИспользуетсяОтложенноеПроведение 
		ИЛИ НЕ Форма.ДокументПоддерживаетВосстановлениеОтложенныхРасчетов
		ИЛИ Объект.РучнаяКорректировка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ОпределитьМоментАктуальностиОтложенныхРасчетов()

	Если НЕ ТребуетсяПоказатьОтложенныеРасчеты(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Составим список договоров, которые встречаются в проводках документах,
	// для определения по ним даты актуальности расчетов.
	Договоры = Новый Массив;
	
	ТипДоговорыКонтрагентов = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	
	МассивДтКт = Новый Массив(2);
	МассивДтКт[0] = "Дт";
	МассивДтКт[1] = "Кт";
	
	Для Каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
	
		Для Каждого ДтКт Из МассивДтКт Цикл
	
			Для НомерСубконто = 1 По 3 Цикл
		
				ЗначениеСубконто = Проводка["Субконто" + ДтКт + НомерСубконто];
			
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипЗнч(ЗначениеСубконто) = ТипДоговорыКонтрагентов
					И Договоры.Найти(ЗначениеСубконто) = Неопределено Тогда
					Договоры.Добавить(ЗначениеСубконто);
				КонецЕсли;
			
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;

	Если Договоры.Количество() > 0 Тогда
		МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
			Объект.Организация,
			Объект.Дата,
			,
			Договоры);
			
		ТекстЗаголовка = "";
		Если МоментАктуальностиОтложенныхРасчетов <> Неопределено Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(НСтр("ru = 'Проводки неактуальны с'") + " ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(МоментАктуальностиОтложенныхРасчетов.Дата, "ДЛФ=Д"), Новый Шрифт( , , Истина)));
			МассивСтрок.Добавить(".");

			ТекстЗаголовка = Новый ФорматированнаяСтрока(МассивСтрок);
		КонецЕсли;
		
		Элементы.ТекстПриНеобходимостиАктуализации.Заголовок = ТекстЗаголовка;
			
	Иначе
		МоментАктуальностиОтложенныхРасчетов = Неопределено;
	КонецЕсли;

	УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты();
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты()

	МоментДокумента = Новый МоментВремени(Объект.Дата, ДокументДвижений);
	
	ТребуетсяАктуализация = НЕ Объект.РучнаяКорректировка
		И МоментАктуальностиОтложенныхРасчетов <> Неопределено
		И МоментАктуальностиОтложенныхРасчетов.Сравнить(МоментДокумента) <= 0;

	ОжидаетсяВыполнение = ТребуетсяАктуализация И ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты);

	// Пока выполняется отложенные расчеты не разрешаем делать ручную корректировку,
	// чтобы не создавать коллизий.
	Элементы.РучнаяКорректировка.Видимость 		= Объект.ЕстьРучнаяКорректировка И НЕ ОжидаетсяВыполнение;
	Элементы.ТребуетсяАктуализация.Видимость 	= ТребуетсяАктуализация И НЕ ОжидаетсяВыполнение;
	Элементы.ИдетАктуализация.Видимость			= ОжидаетсяВыполнение;

КонецПроцедуры

&НаСервере
Функция ЗапуститьОтложенныеРасчетыНаСервере()

	ЗаданиеВыполнено = Ложь;

	ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
	АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыРасчета = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
	ПараметрыРасчета.Организация                = Объект.Организация;
	ПараметрыРасчета.ДатаОкончания              = Объект.Дата;
	ПараметрыРасчета.Документ                   = ДокументДвижений;
	ПараметрыРасчета.АдресХранилищаСОшибками    = АдресХранилищаСОшибками;
	ПараметрыРасчета.СообщатьПрогрессВыполнения = Истина;
	
	РезультатЗадания = УчетВзаиморасчетовОтложенноеПроведение.ЗапуститьОтложенныеРасчетыВФоне(
		УникальныйИдентификатор, 
		ПараметрыРасчета,
		ДокументДвижений.УникальныйИдентификатор());

	АдресХранилищаОтложенныеРасчеты = РезультатЗадания.АдресРезультата;
	ИдентификаторЗаданияОтложенныеРасчеты = РезультатЗадания.ИдентификаторЗадания;
	
	Если РезультатЗадания.Статус <> "Выполняется" Тогда
		ЗаданиеВыполнено = Истина;
		ЗагрузитьДанныеПослеОтложенногоРасчета();
	Иначе
		УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура ОжидатьВыполнениеОтложенныхРасчетов()

	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов()

	Попытка
		Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты)
			И ЗаданиеВыполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда 

			ЗагрузитьДанныеПослеОтложенногоРасчета();
			ПоказатьРезультатОтложенногоРасчета();
		
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатОтложенногоРасчета()

	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПослеОтложенногоРасчета()
	
	УчетВзаиморасчетовОтложенноеПроведение.ОбработатьРезультатВыполненияАктуализацияРасчетов(ЭтотОбъект);
	
	// Обновляем наборы записей на форме.
	ОбновитьДвиженияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

