#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция подготавливает параметры и запускает основную процедуру
// перепроведения в фоновом задании.
//
// Возвращаемое значение:
//	ПараметрыПерепроведения - Структура с ключами:
//		- Организация - СправочникСсылка.Организации
//		- УникальныйИдентификаторФормы 
//		- МоментНачала - МоментВремени
//		- ДатаОкончания - Дата
//		- ОстанавливатьсяПоОшибке - Булево
//		- НеПерепроводитьРегламентныеДокументыЗаПоследнийМесяц - Булево,
//			Если Истина, то существующие за последний месяц периода перепроведения документы
//			помечаются как неактуальные, но после выполнения основного перепроведения не проводятся.
//		- ДополнительныеПараметры - 
//			Для возможности передачи произвольных данных, учитываемых в процедурах после завершения
//			длительной операции группового перепроведения. Эти данные возвращаются вместе с результатом
//			процедуры перепроведения.
//		- АдресХранилищаСОшибками - Строка
//			Адрес временного хранилища, в котором сохраняется отчет об ошибках при перепроведении.
//			Необходимо создавать временное хранилище в том сеансе работы с ИБ, в котором потом планируется
//			обращаться к нему для получения отчета. Если были обнаружены ошибки в процессе перепроведения,
//			то хранилище будет доступно до окончания сеанса, в котором оно создано, либо до явного удаления.
//
Функция ПараметрыПерепроведения() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("Организация", 					Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("УникальныйИдентификаторФормы", 	Неопределено);
	Результат.Вставить("МоментНачала", 					Новый МоментВремени('0001-01-01', Неопределено));
	Результат.Вставить("МоментНачалаАктуализацииРасчетовСКонтрагентами", Новый МоментВремени('0001-01-01', Неопределено));
	Результат.Вставить("ДатаОкончания", 				'0001-01-01');
	Результат.Вставить("ДанныеЗаблокированы", 			Ложь);
	Результат.Вставить("ОстанавливатьсяПоОшибке", 		Ложь);
	Результат.Вставить("ЭтоЗакрытиеМесяца",				Ложь);
	Результат.Вставить("ЭтоПомощникПоУчетуНДС",			Ложь);
	Результат.Вставить("СообщатьПрогрессВыполнения",	Ложь); // формировать служебные сообщения о прогрессе выполнения
	Результат.Вставить("ДополнительныеПараметры", 		Неопределено);
	Результат.Вставить("АдресХранилищаСОшибками", 		"");
	
	Возврат Результат;

КонецФункции

// Функция подготавливает параметры и запускает основную процедуру
// перепроведения в фоновом задании.
//
// Параметры:
//	ПараметрыПерепроведения - структура, возвращаемая функцией ПараметрыПерепроведения().
//
Функция ЗапуститьПерепроведение(ПараметрыПерепроведения) Экспорт
	
	// Временное хранилище для отчета об ошибках необходимо создавать
	// в том же сеансе работы с пользователем, из которого требуется обращение к ним, 
	// т.к. временное хранилище очищается при завершении сеанса фонового задания.
	Если НЕ ЗначениеЗаполнено(ПараметрыПерепроведения.АдресХранилищаСОшибками) Тогда
		ПараметрыПерепроведения.Вставить("АдресХранилищаСОшибками", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор()));
	КонецЕсли;

	НаименованиеЗадания = НСтр("ru = 'Групповое перепроведение документов'");
	Результат = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
		ПараметрыПерепроведения.УникальныйИдентификаторФормы,
		"Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов",
		ПараметрыПерепроведения,
		НаименованиеЗадания);
	
	Возврат Результат;
	
КонецФункции

// Необходимо вызывать после завершения фонового задания группового перепроведения
// для снятия захваченных блокировок.
//
// Параметры:
//	УникальныйИдентификаторФормы - УникальныйИдентификатор - Идентфикатор формы, из которой вызвано групповое перепроведение.
//
Процедура ПослеОкончанияПерепроведения(УникальныйИдентификаторФормы) Экспорт

	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификаторФормы);

КонецПроцедуры

// Выполняет групповое перепроведение документов в фоновом задании.
//
// Параметры:
//	Параметры - Структура - см. ПараметрыПерепроведения().
//	АдресХранилища - Строка - Адрес временного хранилища для помещения результата.
//
Процедура ПерепроведениеДокументов(Параметры, АдресХранилища) Экспорт
	
	РезультатОбработки = ВыполнитьПерепроведение(Параметры);
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);
	
КонецПроцедуры

// Выполняет групповое перепроведение документов в том же сеансе, из которого она вызвана.
//
// Параметры:
//	Параметры - Структура - см. ПараметрыПерепроведения().
//
// Возвращаемое значение:
//	Структура - см. РезультатОбработки.
//
Функция ВыполнитьПерепроведение(Параметры) Экспорт
	
	// Отметка времени - начало выполнения.
	// СтандартныеПодсистемы.ОценкаПроизводительности
	НачалоВыполнения = ОценкаПроизводительности.НачатьЗамерВремени();
	НачалоВыполненияДляЖурналаРегистрации = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПредставлениеОперации = ЗакрытиеМесяца.ПредставлениеОперацииПерепроведениеДокументов(
		ОбщегоНазначения.КодОсновногоЯзыка()); // для записи в журнал
	ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(ПредставлениеОперации);
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Обработки.ГрупповоеПерепроведениеДокументов,
							 ,
							 НСтр("ru = 'Начало операции'"),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("ПроведеноДокументов",                      0);
	РезультатОбработки.Вставить("НеУдалосьПровести",                        0);
	РезультатОбработки.Вставить("АктуализированоДоговоров",                 0);
	РезультатОбработки.Вставить("НеУдалосьАктуализировать",                 0);
	РезультатОбработки.Вставить("ПроведениеПрервано",                       Ложь);
	РезультатОбработки.Вставить("ВывестиИнформациюУведомлений",             Ложь);
	РезультатОбработки.Вставить("ПоследовательностьВосстановлена", 			Ложь);
	РезультатОбработки.Вставить("СозданДокументНачисленияЗарплаты", 		Ложь);
	РезультатОбработки.Вставить("СозданДокументНачисленияРезервовОтпусков", Ложь);
	РезультатОбработки.Вставить("ДополнительныеПараметры",		 			Параметры.ДополнительныеПараметры);
	РезультатОбработки.Вставить("АдресХранилищаСОшибками", 					Параметры.АдресХранилищаСОшибками);

	ДатаНачала = '00010101';
	ДатаНачалаПерепроведения = '00010101';
	Если Параметры.МоментНачала <> Неопределено Тогда
		ДатаНачала = Параметры.МоментНачала.Дата;
		ДатаНачалаПерепроведения = ДатаНачала;
	КонецЕсли;
	
	ДатаНачалаАктуализацииРасчетовСКонтрагентами = '00010101';
	Если Параметры.МоментНачалаАктуализацииРасчетовСКонтрагентами <> Неопределено
		И ЗначениеЗаполнено(Параметры.МоментНачалаАктуализацииРасчетовСКонтрагентами.Дата) Тогда

		ДатаНачалаАктуализацииРасчетовСКонтрагентами = Параметры.МоментНачалаАктуализацииРасчетовСКонтрагентами.Дата;
		Если ЗначениеЗаполнено(ДатаНачала) Тогда
			ДатаНачала = Мин(ДатаНачала, ДатаНачалаАктуализацииРасчетовСКонтрагентами);
		Иначе
			ДатаНачала = ДатаНачалаАктуализацииРасчетовСКонтрагентами;
		КонецЕсли;

	КонецЕсли;

	ДатаОкончания = '00010101';
	Если ЗначениеЗаполнено(Параметры.ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(Параметры.ДатаОкончания);
	КонецЕсли;

	// Определим перечень организаций, которые необходимо перепроводить.
	ТаблицаОрганизаций = ПодготовитьТаблицуОрганизаций(Параметры);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОрганизацийДляПерепроведения = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	
	ТаблицаСообщений	= ПроведениеСервер.НовыеСообщенияПользователю();
	ПроведениеПрервано	= Ложь;
	
	Если НЕ Параметры.ДанныеЗаблокированы Тогда
		ПроведениеПрервано = НЕ ЗаблокироватьДанныеПередПроведением(МассивОрганизацийДляПерепроведения, ТаблицаСообщений);
		
		Если ПроведениеПрервано Тогда
			РезультатОбработки.ПроведениеПрервано = ПроведениеПрервано;
			ДобавитьСообщенияВРезультатОбработки(ТаблицаСообщений, РезультатОбработки, ДатаНачала, ДатаОкончания);
			Возврат РезультатОбработки;
		КонецЕсли;
	КонецЕсли;
	
	// Если даты не заданы, то определим их по фактическим данным.
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОпределитьГраницыПериода(МассивОрганизацийДляПерепроведения, ДатаНачала, ДатаОкончания);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачальнаяСсылка", 	?(Параметры.МоментНачала <> Неопределено, Параметры.МоментНачала.Ссылка, Неопределено));
	Запрос.УстановитьПараметр("Организации", 		МассивОрганизацийДляПерепроведения);
	Запрос.УстановитьПараметр("ИспользуетсяПодсистемаУчетаЗарплатыИКадров", УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров());
	Запрос.УстановитьПараметр("УчетЗарплатыИКадровВоВнешнейПрограмме", 		ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме"));
	
	НомераТаблиц = Новый Структура();
	НомераТаблицОтложенноеПроведение = Новый Структура();
	
	ТекстыЗапросов = СформироватьТекстыЗапросовВсеДокументы(Параметры, НомераТаблиц, НомераТаблицОтложенноеПроведение);
	
	// Хранит соответствие типов документов, входящих в последовательность,
	// Инициализируется в функции ДокументВходитВПоследовательность().
	КэшСоставДокументовПоследовательности = Неопределено;
	
	// Хранит информацию о регистрах, которые для данной организации имеют хотя бы одно движение за период.
	РегистрыТребующиеОчисткиПоОрганизациям = Новый Соответствие;
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл

		РегистрыТребующиеОчисткиПоДокументам = ПроведениеСервер.РегистрыТребующиеОчисткиДляОрганизации(
				СтрокаОрганизации.Организация, ДатаНачала, ДатаОкончания);
		РегистрыТребующиеОчисткиПоОрганизациям.Вставить(СтрокаОрганизации.Организация, РегистрыТребующиеОчисткиПоДокументам);
				
	КонецЦикла;
	
	ПараметрыСообщенийПрогресса 			= ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыСообщенийПрогресса();
	ПараметрыСообщенийПрогресса.ИмяЭтапа 	= ЗакрытиеМесяцаКлиентСервер.ИмяЭтапаПерепроведениеДокументов();
	
	ПроверкаЗапрета = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	ДанныеДляПроверки = ПроверкаЗапрета.Добавить();
	ДанныеДляПроверки.Раздел = "БухгалтерскийУчет";
	
	ТекущийМесяц = ДатаНачала;
	
	Пока ТекущийМесяц <= ДатаОкончания Цикл

		ДатаОкончанияМесяца = Мин(ДатаОкончания, КонецМесяца(ТекущийМесяц));
		ДатаПредыдущегоПерепроведения = '00010101';
		
		ТекущаяДатаПроведения  = ТекущийМесяц;

		// Заполним общие параметры для сообщений прогресса.
		ПараметрыСообщенийПрогресса.Месяц = ТекущийМесяц;
		Если ТаблицаОрганизаций.Количество() > 0 Тогда
			ПараметрыСообщенийПрогресса.Организация   = ТаблицаОрганизаций[0].Организация;
		КонецЕсли;
		ПараметрыСообщенийПрогресса.НачальноеЗначение = ТекущийМесяц;
		ПараметрыСообщенийПрогресса.КонечноеЗначение  = ДатаОкончанияМесяца;
		
		Если Параметры.СообщатьПрогрессВыполнения Тогда
			// Сообщим, что начинаем перепроведение за новый месяц и/или по новой организации.
			СообщитьПрогресс(ПараметрыСообщенийПрогресса, НачалоДня(ТекущийМесяц) - 1);
		КонецЕсли;

		// Признак того, что требуется выполнить только отложенные расчеты с контрагентами 
		// без перепроведения других документов за месяц.
		ВыполнятьТолькоАктуализациюРасчетовСКонтрагентами = Ложь; 
		Если ЗначениеЗаполнено(ДатаНачалаАктуализацииРасчетовСКонтрагентами) Тогда
			Если ЗначениеЗаполнено(ДатаНачалаПерепроведения)
				И ДатаНачалаПерепроведения <= ДатаОкончанияМесяца Тогда
				ВыполнятьТолькоАктуализациюРасчетовСКонтрагентами = Ложь;
			Иначе
				ВыполнятьТолькоАктуализациюРасчетовСКонтрагентами = Истина;
			КонецЕсли;
		КонецЕсли;

		Запрос.УстановитьПараметр("ДатаНачала", 		ТекущийМесяц);
		Запрос.УстановитьПараметр("ДатаОкончания", 		ДатаОкончанияМесяца);
		Запрос.УстановитьПараметр("ДатаПредМесяца",		ДобавитьМесяц(НачалоМесяца(ТекущийМесяц), -1));
	
		// При наличии головных организаций и обособленных подразделений регламентные операции необходимо перепроводить
		// после выполнения перепроведения первичных документов по всем организациям, 
		// соблюдая последовательность закрытия. 
		Запрос.Текст 					= ТекстЗапросаРегламентныеОперации();
		ТаблицаРегламентныеОперации		= Запрос.Выполнить().Выгрузить();
		ОтменитьПроведениеРегламентныхОпераций(
			Параметры,
			ТаблицаРегламентныеОперации,
			ТаблицаСообщений,
			ВыполнятьТолькоАктуализациюРасчетовСКонтрагентами);
		
		Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл

			ТекущаяОрганизация = СтрокаОрганизации.Организация;
			
			// Заполним общие параметры для сообщений прогресса.
			ПараметрыСообщенийПрогресса.Организация = ТекущаяОрганизация;
			
			Если Параметры.СообщатьПрогрессВыполнения Тогда
				// Сообщим, что начинаем перепроведение по новой организации.
				СообщитьПрогресс(ПараметрыСообщенийПрогресса, НачалоДня(ТекущийМесяц) - 1);
			КонецЕсли;
			
			// Определим те регистры, по которым нет ни одного движения за период. Их не нужно будет очищать при перепроведении.
			РегистрыТребующиеОчисткиПоДокументам = РегистрыТребующиеОчисткиПоОрганизациям[ТекущаяОрганизация];

			ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(ТекущаяОрганизация, ТекущийМесяц);
			
			// Проверим, что на конец периода не действует дата запрета, т.е. что есть разрешенные для перепроведения дни.
			// Если весь период закрыт, то проводить и сохранять сообщения об ошибках все-равно будем, но не будем сбрасывать
			// последовательность.
			ДанныеДляПроверки.Объект = ТекущаяОрганизация;
			ДанныеДляПроверки.Дата = НачалоДня(ДатаОкончанияМесяца);
			УстановленЗапретИзменения = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета);
			
			// Проверим, требуется ли в текущем месяце выполнять перепроведние документов,
			// кроме отложенных расчетов.
			Если НЕ ВыполнятьТолькоАктуализациюРасчетовСКонтрагентами Тогда

				Если Параметры.ЭтоЗакрытиеМесяца ИЛИ Параметры.ЭтоПомощникПоУчетуНДС Тогда
					// При вызове из закрытия месяца или помощника НДС перепроводим только требуемое с учетом настройки отложенного перепроведения.
					ЭтоПолноеПерепроведение = НЕ ИспользуетсяОтложенноеПроведение;
				Иначе
					// При вызове самостоятельной обработки группового перепроведения всегда делаем полное перепроведение.
					ЭтоПолноеПерепроведение = Истина;
				КонецЕсли;

				// Проверим и при необходимости создадим документы начисления зарплаты и резервов отпусков,
				// чтобы они потом не сбивали последовательность в процессе закрытия месяца.
				ПроверитьНачислениеЗарплатыИРезервовОтпусков(Параметры, НачалоМесяца(ТекущийМесяц), ТекущаяОрганизация, РезультатОбработки);
				
				Запрос.УстановитьПараметр("ДатаНачала", 	Макс(ДатаНачалаПерепроведения, ТекущийМесяц));
				
				Запрос.УстановитьПараметр("Организация", 	ТекущаяОрганизация);

				Если ТекущийМесяц = ДатаНачала Тогда 
					Если ЭтоПолноеПерепроведение Тогда
						Запрос.Текст = ТекстыЗапросов.ПервыйМесяц;
					Иначе
						Запрос.Текст = ТекстыЗапросов.ПервыйМесяцОтложенноеПроведение;
					КонецЕсли;
				Иначе
					Если ЭтоПолноеПерепроведение Тогда
						Запрос.Текст = ТекстыЗапросов.ПоследующиеМесяцы;
					Иначе
						Запрос.Текст = ТекстыЗапросов.ПоследующиеМесяцыОтложенноеПроведение;
					КонецЕсли;
				КонецЕсли;

				ПакетРезультатов = Запрос.ВыполнитьПакет();

				Если ЭтоПолноеПерепроведение Тогда
					ИндексТаблицыРегламентныеОперацииНДС = НомераТаблиц.РегламетныеОперацииНДС;
					ИндексТаблицыПервичныеДокументы      = НомераТаблиц.ПервичныеДокументы;
				Иначе
					ИндексТаблицыРегламентныеОперацииНДС = НомераТаблицОтложенноеПроведение.РегламетныеОперацииНДС;
					ИндексТаблицыПервичныеДокументы      = НомераТаблицОтложенноеПроведение.ПервичныеДокументы;
				КонецЕсли;
				РегламентныеДокументыНДС = ПакетРезультатов[ИндексТаблицыРегламентныеОперацииНДС].Выгрузить();
				ВыборкаПоДокументам      = ПакетРезультатов[ИндексТаблицыПервичныеДокументы].Выбрать();
			
				Пока ВыборкаПоДокументам.Следующий() Цикл

					Если СтрокаОрганизации.ЭтоПервыйДокументПоОрганизации Тогда

						МоментНарушения = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
							ТекущаяОрганизация, Мин(ДатаОкончания, КонецМесяца(ТекущаяДатаПроведения)));
							
						Если МоментНарушения <> Неопределено Тогда
							// Текущий документ является первым среди перепроводимых по организации.
							// Если он лежит позже момента нарушения последовательности, 
							// то считаем его тоже проведенным с нарушением последовательности.
							МоментДокумента = Новый МоментВремени(ВыборкаПоДокументам.Дата, ВыборкаПоДокументам.Ссылка);
							Если МоментДокумента.Сравнить(МоментНарушения) <= 0 Тогда
								СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Истина;
							Иначе
								СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
								// Колонку НоваяДатаНарушенияПоследовательности в этом случае не заполняем, 
								// по этому признаку потом будет сдвигать последовательность в конце цикла перепроведения.

								Если Параметры.ЭтоЗакрытиеМесяца ИЛИ Параметры.ЭтоПомощникПоУчетуНДС Тогда
									ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Для восстановления хронологической последовательности проведения документов необходимо выполнить перепроведение, начиная с %1.'"),
										МоментНарушения);

									ПроведениеСервер.ЗапомнитьСообщенияПользователю(
										ТаблицаСообщений,
										ТекущаяОрганизация,
										ТекстСообщения, 
										МоментНарушения.Ссылка,
										МоментНарушения.Дата,
										Истина, 
										Ложь);

								КонецЕсли;
								
							КонецЕсли;
						КонецЕсли;

						СтрокаОрганизации.ЭтоПервыйДокументПоОрганизации = Ложь;

					КонецЕсли;
					
					ТекущаяДатаПроведения 	= ВыборкаПоДокументам.Дата;
					Успешно = Истина;
					
					Если ВыборкаПоДокументам.ДействиеСДокументом = 0 Тогда
						Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
							Успешно =  ИсключитьИзПоследовательности(ВыборкаПоДокументам, ТаблицаСообщений);
						КонецЕсли;
						
					ИначеЕсли ВыборкаПоДокументам.ДействиеСДокументом = 1 И ВыборкаПоДокументам.РучнаяКорректировка Тогда
						Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
							Успешно = УстановитьСостояниеПоследовательности(
								ВыборкаПоДокументам.Ссылка, 
								ВыборкаПоДокументам.Дата, 
								ВыборкаПоДокументам.Организация,
								Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности, 
								ТаблицаСообщений);
						КонецЕсли;

					Иначе
						
						Успешно = ПровестиПервичныйДокумент(ВыборкаПоДокументам, СтрокаОрганизации, ТаблицаСообщений, РегистрыТребующиеОчисткиПоДокументам);
						Если Успешно И Не СтрокаОрганизации.ПропуститьПроверкуЗапретаИзменения Тогда
							// После первого успешного проведения уже не нужна проверка доступности периода для изменений.
							СтрокаОрганизации.ПропуститьПроверкуЗапретаИзменения = Истина;
						КонецЕсли;
					
					КонецЕсли;

						
					Если Успешно Тогда
						
						РезультатОбработки.ПроведеноДокументов = РезультатОбработки.ПроведеноДокументов + 1;
						
					Иначе
						// Если не смогли перепровести текущий документ, то все последующие документы автоматически будут
						// не в хронологической последовательности. Исключением является, только когда период закрыт от изменения.
						Если Не УстановленЗапретИзменения И СтрокаОрганизации.ПроведенВХронологическойПоследовательности Тогда
							Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
								// Первый документ, на котором возникло нарушение последовательности, отмечаем это. 
								// Ошибки при проведении документов, не входящих в последовательность, будут выведены в общий список 
								// ошибок, но не влияют на саму последовательность.
								СброситьСостояниеПоследовательности(
									ВыборкаПоДокументам.Ссылка,
									ВыборкаПоДокументам.Дата,
									ВыборкаПоДокументам.Организация,
									ТаблицаСообщений);
								
								СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
								// СтрокаОрганизации.НоваяДатаНарушенияПоследовательности здесь не устанавливаем, 
								// т.к. уже отметили нарушение границы самим текущим документом.
							КонецЕсли;
						КонецЕсли;
					
						РезультатОбработки.НеУдалосьПровести = РезультатОбработки.НеУдалосьПровести + 1;
						Если Параметры.ОстанавливатьсяПоОшибке Тогда
							ПроведениеПрервано = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
					// Сообщим, если переходим к следующему дню.
					Если Параметры.СообщатьПрогрессВыполнения 
						И ДатаПредыдущегоПерепроведения <> НачалоДня(ТекущаяДатаПроведения) Тогда

						// Сообщим, что начинаем перепроведение за новый месяц и/или по новой организации.
						СообщитьПрогресс(ПараметрыСообщенийПрогресса, ТекущаяДатаПроведения);
						ДатаПредыдущегоПерепроведения = НачалоДня(ТекущаяДатаПроведения);
						
					КонецЕсли;
					
				КонецЦикла; // по первичным документам за месяца по организации

				Если ПроведениеПрервано Тогда
					// Прекращаем цикл по организациям
					Прервать;
				КонецЕсли;

				// Проводим регламентные документы НДС
				Успешно = ПровестиРегламентныеДокументыЗаМесяцПоНДС(РегламентныеДокументыНДС,
					РезультатОбработки,
					ТаблицаСообщений,
					Параметры.ОстанавливатьсяПоОшибке,
					СтрокаОрганизации.ПропуститьПроверкуЗапретаИзменения);
				
				Если НЕ Успешно Тогда
					// При проведении какого-то из регламентных документов НДС произошла ошибка,
					// поэтому все последующие документы оказываются проведенными вне хронологической последовательности
					Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности Тогда
						СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
						СтрокаОрганизации.НоваяДатаНарушенияПоследовательности = ТекущаяДатаПроведения;
					КонецЕсли;
					
					Если Параметры.ОстанавливатьсяПоОшибке Тогда
						ПроведениеПрервано = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;

			Если ИспользуетсяОтложенноеПроведение Тогда

				// Сразу же выполняем отложенные расчеты с контрагентами.
				Успешно = ВыполнитьОтложенныеРасчеты(
					ТекущаяОрганизация,
					ДатаОкончанияМесяца,
					РезультатОбработки,
					ТаблицаСообщений,
					Параметры);
				
				Если НЕ Успешно Тогда

					СтрокаОрганизации.ЕстьОшибкиПриАктуализацииРасчетов = Истина;
				
					Если Параметры.ОстанавливатьсяПоОшибке Тогда
						ПроведениеПрервано = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // по организации

		Если Параметры.ЭтоЗакрытиеМесяца ИЛИ Параметры.ЭтоПомощникПоУчетуНДС Тогда
			// Восстанавливаем состояние регламентных операций, которое было до начала перепроведения.
			// Их выполнение с учетом новых данных проведения первичных документов будет запущено из 
			// обработки закрытия месяца.
			ВосстановитьСостояниеРегламентныхОпераций(ТаблицаРегламентныеОперации, ТаблицаОрганизаций, Параметры, ТаблицаСообщений);
			
			Если Не УстановленЗапретИзменения Тогда
				РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СброситьФактВыполненияВсехРегламетныхОпераций(
					ТекущаяОрганизация, НачалоКвартала(ТекущаяДатаПроведения));
			КонецЕсли;
			
		Иначе
			// Выполнение регламентных операций закрытия месяца вызываем после выполнения перепроведения 
			// все первичных документов по всем организациям.
			Если НЕ ПроведениеПрервано Тогда
				Успешно = ВыполнитьРегламентныеОперацииЗаМесяц(ТаблицаОрганизаций,
					ТаблицаРегламентныеОперации, 
					РезультатОбработки, 
					ТаблицаСообщений, 
					Параметры.ОстанавливатьсяПоОшибке);
				
				Если НЕ Успешно И Параметры.ОстанавливатьсяПоОшибке Тогда
					ПроведениеПрервано = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПроведениеПрервано Тогда
			Прервать;	
		КонецЕсли;

		ТекущийМесяц = КонецМесяца(ТекущийМесяц) + 1;

	КонецЦикла; // по месяцам
	
	// По каждой организации для первого документа, следующего за тем, 
	// который последний был проведен в хронологической последовательности,
	// установим признак нарушения его последовательности, т.к. сейчас перепровели все 
	// его предыдущие документы, и теперь с него надо начинать перепроведение.
	//
	// Также определим результат выполнения с учетом всех организаций.
	ПроведенВХронологическойПоследовательности = Истина;
	ЕстьОшибкиПриАктуализацииРасчетов          = Ложь;
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
	
		НоваяДатаНарушенияПоследовательности = '0001-01-01';
		Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности И НЕ ПроведениеПрервано Тогда
			// Все месяцы по организации были проведены успешно, 
			// поэтому в следующий раз начинаем со следующей даты.
			НоваяДатаНарушенияПоследовательности = ДатаОкончания + 1;
		Иначе
			// Если в начале цикла перепроведения последовательность была нарушена
			// в периодах, предшествующих периоду перепроведения, 
			// то НоваяДатаНарушенияПоследовательности будет пустой и тогда сдвигать последовательность не надо.
			НоваяДатаНарушенияПоследовательности = СтрокаОрганизации.НоваяДатаНарушенияПоследовательности;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(НоваяДатаНарушенияПоследовательности) Тогда
			
			МоментСледующегоДокумента = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
				СтрокаОрганизации.Организация, НоваяДатаНарушенияПоследовательности);
			Если МоментСледующегоДокумента <> Неопределено Тогда
				
				ДанныеДляПроверки.Объект = СтрокаОрганизации.Организация;
				ДанныеДляПроверки.Дата = НачалоДня(МоментСледующегоДокумента.Дата);
				Если Не ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета) Тогда
					СброситьСостояниеПоследовательности(
						МоментСледующегоДокумента.Ссылка,
						МоментСледующегоДокумента.Дата,
						СтрокаОрганизации.Организация,
						ТаблицаСообщений);
				КонецЕсли;
					
			КонецЕсли;
				
		КонецЕсли;
	
		ПроведенВХронологическойПоследовательности = ПроведенВХронологическойПоследовательности
			И СтрокаОрганизации.ПроведенВХронологическойПоследовательности;

		ЕстьОшибкиПриАктуализацииРасчетов = ЕстьОшибкиПриАктуализацииРасчетов 
			ИЛИ СтрокаОрганизации.ЕстьОшибкиПриАктуализацииРасчетов;
			
	КонецЦикла;
	
	РезультатОбработки.ПроведениеПрервано = ПроведениеПрервано;
	РезультатОбработки.ПоследовательностьВосстановлена = 
		ПроведенВХронологическойПоследовательности И НЕ ЕстьОшибкиПриАктуализацииРасчетов;
	
	ДобавитьСообщенияВРезультатОбработки(ТаблицаСообщений, РезультатОбработки, ДатаНачала, ДатаОкончания);
	
	// Отметка времени - завершение выполнения.
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗакрытиеМесяцаПерепроведениеДокументов", НачалоВыполнения);
	ДлительностьВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоВыполненияДляЖурналаРегистрации;
	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Обработки.ГрупповоеПерепроведениеДокументов,
							 ,
							 СтрШаблон(НСтр("ru = 'Результат операции (%1 мс)'"), ДлительностьВыполнения),
							 РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
	Возврат РезультатОбработки;
	
КонецФункции

// Устанавливает даты начала и окончания периода перепроведения по первой и последней проводке.
//
// Параметры:
//	МассивОрганизаций - Массив - Организации, данные которых перепроводятся.
//	ДатаНачала - Дата - Дата начала периода перепроведения.
//	ДатаОкончания - Дата - Дата окончания периода перепроведения.
//
Процедура ОпределитьГраницыПериода(МассивОрганизаций, ДатаНачала, ДатаОкончания) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Период УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаОкончания = Выборка.Период;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Возвращает массив типов документов, которые поддерживают отложенное проведение.
//
// Возвращаемое значение:
//	Массив.
//
Функция ТипыДокументовПоддерживающихОтложенноеПроведение() Экспорт

	Результат = Новый Соответствие;
	
	ТипыДокументовОтложенныеРасчеты = Метаданные.ОпределяемыеТипы.ДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами.Тип.Типы();
	
	Для Каждого ТипДокумента Из ТипыДокументовОтложенныеРасчеты Цикл
		Результат.Вставить(ТипДокумента, Истина);
	КонецЦикла;
	
	// Документы по учету МПЗ, которые поддерживают отложенное проведение,
	// но при этом не относятся к отложенным расчетам с контрагентами.
	ИменаДокументов = Новый Массив;
	Если Метаданные.Документы.Найти("АвизоМПЗВходящее") <> Неопределено Тогда
		// Документы есть только в КОРП-версии.
		ИменаДокументов.Добавить("АвизоМПЗВходящее");
		ИменаДокументов.Добавить("АвизоМПЗИсходящее");
	КонецЕсли;
	ИменаДокументов.Добавить("КомплектацияНоменклатуры");
	ИменаДокументов.Добавить("ОприходованиеТоваров");
	ИменаДокументов.Добавить("ОтчетПроизводстваЗаСмену");
	ИменаДокументов.Добавить("ПередачаМатериаловВЭксплуатацию");
	ИменаДокументов.Добавить("ПередачаОборудованияВМонтаж");
	ИменаДокументов.Добавить("ПеремещениеТоваров");
	ИменаДокументов.Добавить("РасходыПредпринимателя");
	ИменаДокументов.Добавить("СписаниеТоваров");
	ИменаДокументов.Добавить("ТребованиеНакладная");

	Для Каждого ИмяДокумента Из ИменаДокументов Цикл
		Результат.Вставить(Тип("ДокументСсылка." + ИмяДокумента), Истина);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает список документов, которые в принципе не требуется перепроводить.
//
// Возвращаемое значение:
//	Структура - Содержит ключи с именами документов.
//
Функция ИсключаемыеИзПерепроведенияДокументыБезусловно() Экспорт

	// Список безуcловно исключаемых из перепроведения документов
	// состоит из документов, которые не влияют на движения первичных документов
	// и операции закрытия месяца. 
	// В него не входят документы, для которых в метаданных свойство
	// Проведение = Запретить (например, ОперацияБух). 
	// Такие документы отсекаются в цикле построение текста запроса.

	Результат = Новый Структура();
	
	Результат.Вставить("АвансовыйПлатежИностранцаПоНДФЛ");
	Результат.Вставить("ВедомостьНаВыплатуЗарплатыВБанк");
	Результат.Вставить("ВедомостьНаВыплатуЗарплатыВКассу");
	Результат.Вставить("ВыгрузкаРегламентированныхОтчетов");
	Результат.Вставить("ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ");
	Результат.Вставить("ПачкаДокументовСЗВ_6_1");
	Результат.Вставить("ПачкаДокументовСЗВ_6_4");
	Результат.Вставить("ПачкаРазделов6РасчетаРСВ_1");
	Результат.Вставить("ПодтверждениеЗачисленияЗарплаты");
	Результат.Вставить("ПрекращениеСтандартныхВычетовНДФЛ");
	Результат.Вставить("ПрочиеКонтролируемыеСделки");
	Результат.Вставить("РеестрДСВ_3");
	Результат.Вставить("РеестрСЗВ_6_2");
	Результат.Вставить("СправкиНДФЛДляПередачиВНалоговыйОрган");
	Результат.Вставить("ТаможеннаяДекларацияЭкспорт");
	Результат.Вставить("УведомлениеОПравеНаИмущественныйВычетДляНДФЛ");
	Результат.Вставить("УстановкаПорядкаЗакрытияПодразделений");
	Результат.Вставить("УстановкаЦенНоменклатуры");
	Результат.Вставить("ФормированиеУставногоКапитала");
	
	// Документы библиотеки ЕГАИС
	Результат.Вставить("АктПостановкиНаБалансЕГАИС");
	Результат.Вставить("АктСписанияЕГАИС");
	Результат.Вставить("ВозвратИзРегистра2ЕГАИС");
	Результат.Вставить("ОстаткиЕГАИС");
	Результат.Вставить("ПередачаВРегистр2ЕГАИС");
	Результат.Вставить("ТТНВходящаяЕГАИС");
	Результат.Вставить("ТТНИсходящаяЕГАИС");
	Результат.Вставить("ЧекЕГАИС");
	Результат.Вставить("ЧекЕГАИСВозврат");
	
	// Документы библиотеки ВЕТИС
	Результат.Вставить("ВходящаяТранспортнаяОперацияВЕТИС");
	Результат.Вставить("ЗапросСкладскогоЖурналаВЕТИС");
	Результат.Вставить("ИнвентаризацияПродукцииВЕТИС");
	Результат.Вставить("ИсходящаяТранспортнаяОперацияВЕТИС");
	Результат.Вставить("ОбъединениеЗаписейСкладскогоЖурналаВЕТИС");
	Результат.Вставить("ПроизводственнаяОперацияВЕТИС");
	
	// Регламентные документы по НДС перепроводятся во вторую очередь.
	КоллекцияРегламентныеОперацииНДС = Метаданные.ЖурналыДокументов.РегламентныеОперацииНДС.РегистрируемыеДокументы;
				
	Для Каждого МетаданныеДокумента Из КоллекцияРегламентныеОперацииНДС Цикл
		Результат.Вставить(МетаданныеДокумента.Имя);
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Функция возвращает список документов, которые не требуется перепроводить при отключенной функциональности.
//
// Возвращаемое значение:
//	Структура - Содержит ключи с именами документов.
//
Функция ИсключаемыеИзПерепроведенияДокументыОпционально() Экспорт

	Результат = Новый Структура();
	
	Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
		Результат.Вставить("ДепонированиеЗарплаты");
		Результат.Вставить("СписаниеДепонированнойЗарплаты");
		Результат.Вставить("НачислениеЗарплаты");
		Результат.Вставить("ОтражениеЗарплатыВБухучете");
		Результат.Вставить("ОтражениеЗарплатыВУчете");
		Результат.Вставить("БольничныйЛист");
		Результат.Вставить("Отпуск");
	Иначе
		Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
			Результат.Вставить("ДепонированиеЗарплаты");
			Результат.Вставить("СписаниеДепонированнойЗарплаты");
		КонецЕсли;	
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункции

Функция СформироватьТекстыЗапросовВсеДокументы(Параметры, НомераТаблиц, НомераТаблицОтложенноеПроведение)

	Результат = Новый Структура();
	Результат.Вставить("ПервыйМесяц",       "");
	Результат.Вставить("ПоследующиеМесяцы", "");
	Результат.Вставить("ПервыйМесяцОтложенноеПроведение",       "");
	Результат.Вставить("ПоследующиеМесяцыОтложенноеПроведение", "");

	НомераТаблиц.Вставить("РегламетныеОперацииНДС",                     НомераТаблиц.Количество());
	НомераТаблицОтложенноеПроведение.Вставить("РегламетныеОперацииНДС", НомераТаблицОтложенноеПроведение.Количество());

	ТекстЗапросаРегламетныеОперацииНДС = 
	"ВЫБРАТЬ
	|	Журнал.Дата КАК Дата,
	|	Журнал.Ссылка КАК Ссылка,
	|	Журнал.Организация КАК Организация
	|ИЗ
	|	ЖурналДокументов.РегламентныеОперацииНДС КАК Журнал
	|ГДЕ
	|	Журнал.Проведен
	|	И Журнал.Организация = &Организация
	|	И Журнал.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";

	ТекстыЗапросовПоПервичнымДокументам = ТекстыЗапросовПоПервичнымДокументам(
		Параметры, 
		НомераТаблиц, 
		НомераТаблицОтложенноеПроведение);

	// Тексты запросов для первого месяца: 0 - для обычного проведения, 1 - для отложенного проведения.
	ТекстыЗапросовПервыйМесяц = Новый Массив(2);

	ТекстыЗапросовПервыйМесяц[0] = ТекстЗапросаРегламетныеОперацииНДС
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
		+ ТекстыЗапросовПоПервичнымДокументам.ТекстЗапроса;

	ТекстыЗапросовПервыйМесяц[1] = ТекстЗапросаРегламетныеОперацииНДС
		+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
		+ ТекстыЗапросовПоПервичнымДокументам.ТекстЗапросаОтложенноеПроведение;
		
	ТекстыЗапросовПоследующиеМесяцы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ТекстыЗапросовПервыйМесяц);
	
	// Устанавливаем отбор по периоду
	// Выборка данных осуществляется по-месячно по каждой организации, 
	// поэтому в тексте запроса фильтрацию на период устанавливает всегда.
	// Даты очередного периода будут переданы в запрос в качестве параметров.
	ТекстУсловияПериода1 = "";
	ТекстТабличнаяЧастьУсловияПериода1 = "";
	ТекстЗарплатаМесяцНачисленияУсловияПериода1 = "";
	ТекстЗарплатаПериодРегистрацииУсловияПериода1 = "";
	ТекстВводОстатковУсловияПериода1 = "";

	ТекстУсловияПериода2 = "";
	ТекстТабличнаяЧастьУсловияПериода2 = "";
	ТекстЗарплатаМесяцНачисленияУсловияПериода2 = "";
	ТекстЗарплатаПериодРегистрацииУсловияПериода2 = "";
	ТекстВводОстатковУсловияПериода2 = "";
	
	// Если первым документом-нарушителем последовательности является 
	// ввод начальных остатков (такое может быть в первом месяце начала ведения учета),
	// то при этом начинать перепроведение надо с самого первого документа за первый месяц,
	// поэтому в этом случае отбор по ссылке ввода начальных остатков не устанавливаем.
	
	ЕстьОтборПоСсылке = Истина;
	Если Параметры.МоментНачала <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(Параметры.МоментНачала.Ссылка)
			ИЛИ ТипЗнч(Параметры.МоментНачала.Ссылка) = Тип("ДокументСсылка.ВводНачальныхОстатков") Тогда
			ЕстьОтборПоСсылке = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОтборПоСсылке Тогда
		ТекстУсловияПериода1 = "(Журнал.Дата = &ДатаНачала И Журнал.Ссылка >= &НачальнаяСсылка ИЛИ Журнал.Дата > &ДатаНачала) 
			| И Журнал.Дата <= &ДатаОкончания";
		ТекстУсловияПериода2 = "Журнал.Дата >= &ДатаНачала И Журнал.Дата <= &ДатаОкончания";
		
		ТекстЗарплатаМесяцНачисленияУсловияПериода1 = "(КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) = &ДатаНачала 
			| 		И Журнал.Ссылка >= &НачальнаяСсылка ИЛИ КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) > &ДатаНачала) 
			| И КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) <= &ДатаОкончания";

		ТекстЗарплатаМесяцНачисленияУсловияПериода2 = "КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) >= &ДатаНачала 
			| И КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) <= &ДатаОкончания";
	Иначе
		ТекстУсловияПериода1 	= "Журнал.Дата >= &ДатаНачала И Журнал.Дата <= &ДатаОкончания";
		ТекстУсловияПериода2 	= ТекстУсловияПериода1;
		
		ТекстЗарплатаМесяцНачисленияУсловияПериода1 = "КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) >= &ДатаНачала 
			| И КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ) <= &ДатаОкончания";
		ТекстЗарплатаМесяцНачисленияУсловияПериода2 = ТекстЗарплатаМесяцНачисленияУсловияПериода1;
	КонецЕсли;

	ТекстТабличнаяЧастьУсловиеПериода1 = СтрЗаменить(ТекстУсловияПериода1, "Журнал.Дата", "СтрокиТЧ.Ссылка.Дата");
	ТекстТабличнаяЧастьУсловиеПериода1 = СтрЗаменить(ТекстТабличнаяЧастьУсловиеПериода1, "Журнал.Ссылка", "СтрокиТЧ.Ссылка");
	ТекстТабличнаяЧастьУсловиеПериода2 = СтрЗаменить(ТекстУсловияПериода2, "Журнал.Дата", "СтрокиТЧ.Ссылка.Дата");
	ТекстТабличнаяЧастьУсловиеПериода2 = СтрЗаменить(ТекстТабличнаяЧастьУсловиеПериода2, "Журнал.Ссылка", "СтрокиТЧ.Ссылка");

	ТекстПоследовательностьУсловиеПериода1 = СтрЗаменить(ТекстУсловияПериода1, ".Дата", ".Период");
	ТекстПоследовательностьУсловиеПериода2 = СтрЗаменить(ТекстУсловияПериода2, ".Дата", ".Период");
	
	ТекстПоследовательностьУсловиеПериода1 = СтрЗаменить(ТекстПоследовательностьУсловиеПериода1, ".Ссылка", ".Регистратор");
	ТекстПоследовательностьУсловиеПериода2 = СтрЗаменить(ТекстПоследовательностьУсловиеПериода2, ".Ссылка", ".Регистратор");
	
	ТекстЗарплатаПериодРегистрацииУсловияПериода1 = СтрЗаменить(ТекстЗарплатаМесяцНачисленияУсловияПериода1, ".МесяцНачисления", ".ПериодРегистрации");
	ТекстЗарплатаПериодРегистрацииУсловияПериода2 = СтрЗаменить(ТекстЗарплатаМесяцНачисленияУсловияПериода2, ".МесяцНачисления", ".ПериодРегистрации");

	ТекстВводОстатковУсловияПериода1 = СтрЗаменить(ТекстУсловияПериода1, "&ДатаНачала", "&ДатаПредМесяца");
	ТекстВводОстатковУсловияПериода2 = СтрЗаменить(ТекстУсловияПериода2, "&ДатаНачала", "&ДатаПредМесяца");

	Для Счетчик = 0 По 1 Цикл 

		// Условия по периоду в первом месяце.
		ТекстыЗапросовПервыйМесяц[Счетчик] = СтрЗаменить(ТекстыЗапросовПервыйМесяц[Счетчик], 
			"&УсловиеПериода", 	ТекстУсловияПериода1);
		ТекстыЗапросовПервыйМесяц[Счетчик] = СтрЗаменить(ТекстыЗапросовПервыйМесяц[Счетчик], 
			"&ТабличнаяЧастьУсловиеПериода", ТекстТабличнаяЧастьУсловиеПериода1);
		ТекстыЗапросовПервыйМесяц[Счетчик] = СтрЗаменить(ТекстыЗапросовПервыйМесяц[Счетчик], 
			"&ЗарплатаМесяцНачисленияУсловиеПериода", ТекстЗарплатаМесяцНачисленияУсловияПериода1);
		ТекстыЗапросовПервыйМесяц[Счетчик] = СтрЗаменить(ТекстыЗапросовПервыйМесяц[Счетчик], 
			"&ЗарплатаПериодРегистрацииУсловиеПериода", ТекстЗарплатаПериодРегистрацииУсловияПериода1);
		ТекстыЗапросовПервыйМесяц[Счетчик] = СтрЗаменить(ТекстыЗапросовПервыйМесяц[Счетчик], 
			"&ПоследовательностьУсловиеПериода", 	ТекстПоследовательностьУсловиеПериода1);
		ТекстыЗапросовПервыйМесяц[Счетчик] = СтрЗаменить(ТекстыЗапросовПервыйМесяц[Счетчик], 
			"&ВводОстатковУсловиеПериода", 	ТекстВводОстатковУсловияПериода1);

		// Условия по периоду в последующих месяцах.
		ТекстыЗапросовПоследующиеМесяцы[Счетчик] = СтрЗаменить(ТекстыЗапросовПоследующиеМесяцы[Счетчик], 
			"&УсловиеПериода", 	ТекстУсловияПериода2);
		ТекстыЗапросовПоследующиеМесяцы[Счетчик] = СтрЗаменить(ТекстыЗапросовПоследующиеМесяцы[Счетчик], 
			"&ТабличнаяЧастьУсловиеПериода", ТекстТабличнаяЧастьУсловиеПериода2);
		ТекстыЗапросовПоследующиеМесяцы[Счетчик] = СтрЗаменить(ТекстыЗапросовПоследующиеМесяцы[Счетчик], 
			"&ЗарплатаМесяцНачисленияУсловиеПериода", ТекстЗарплатаМесяцНачисленияУсловияПериода2);
		ТекстыЗапросовПоследующиеМесяцы[Счетчик] = СтрЗаменить(ТекстыЗапросовПоследующиеМесяцы[Счетчик], 
			"&ЗарплатаПериодРегистрацииУсловиеПериода", ТекстЗарплатаПериодРегистрацииУсловияПериода2);
		ТекстыЗапросовПоследующиеМесяцы[Счетчик] = СтрЗаменить(ТекстыЗапросовПоследующиеМесяцы[Счетчик], 
			"&ПоследовательностьУсловиеПериода", 	ТекстПоследовательностьУсловиеПериода2);
		ТекстыЗапросовПоследующиеМесяцы[Счетчик] = СтрЗаменить(ТекстыЗапросовПоследующиеМесяцы[Счетчик], 
			"&ВводОстатковУсловиеПериода", 	ТекстВводОстатковУсловияПериода2);
		
	КонецЦикла;

	// Сохраним тексты запросов в возвращаемую структуру.
	Результат.ПервыйМесяц                     = ТекстыЗапросовПервыйМесяц[0];
	Результат.ПервыйМесяцОтложенноеПроведение = ТекстыЗапросовПервыйМесяц[1];

	Результат.ПоследующиеМесяцы                     = ТекстыЗапросовПоследующиеМесяцы[0];
	Результат.ПоследующиеМесяцыОтложенноеПроведение = ТекстыЗапросовПоследующиеМесяцы[1];

	Возврат Результат;

КонецФункции

Функция ПодготовитьТаблицуОрганизаций(Параметры)

	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация", 									Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизаций.Колонки.Добавить("ПроведенВХронологическойПоследовательности", 	Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ЭтоПервыйДокументПоОрганизации", 				Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ПропуститьПроверкуЗапретаИзменения", 			Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("НоваяДатаНарушенияПоследовательности",			Новый ОписаниеТипов("Дата"));
	ТаблицаОрганизаций.Колонки.Добавить("ЕстьОшибкиПриАктуализацииРасчетов", 			Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Индексы.Добавить("Организация");

	// Пользователь может выбрать в форме обработки группового перепроведения организацию,
	// которая доступна на просмотр в справочнике Организации, 
	// но к данным бухгалтерии которой у пользователя нет доступа.
	// Поэтому составим список организаций, данные которых доступны для изменения.
	ДоступныеОрганизации = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Параметры.Организация, Ложь, Истина);

	Для Каждого Организация Из ДоступныеОрганизации Цикл
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.Организация                                = Организация;
		НоваяСтрока.ПроведенВХронологическойПоследовательности = Истина;
		НоваяСтрока.ЭтоПервыйДокументПоОрганизации             = Истина;
	КонецЦикла;

	Возврат ТаблицаОрганизаций;

КонецФункции

// Выполняет подготовительные действия перед групповым перепроведением, 
// возвращает Истина, если успешно, иначе Ложь.
//
Функция ЗаблокироватьДанныеПередПроведением(МассивОрганизаций, ТаблицаСообщений)
	
	Успешно = Истина;
	
	Для Каждого Организация ИЗ МассивОрганизаций Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация);
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заблокировать данные по организации %1 для группового перепроведения.%2 %3'"),
				Организация,
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			ТекстСообщенияКраткое = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заблокировать данные по организации %1 для группового перепроведения.%2 %3'"),
				Организация,
				Символы.ПС,
				КраткоеПредставлениеОшибки(ИнфоОбОшибке));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Групповое перепроведение документов'", ОбщегоНазначения.КодОсновногоЯзыка()), 
				УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстСообщения);
			РазблокироватьДанныеДляРедактирования();
			
			Успешно = Ложь;
			
			НовоеСообщение 				= Новый СообщениеПользователю();
			НовоеСообщение.КлючДанных 	= Организация;
			НовоеСообщение.Текст 		= ТекстСообщенияКраткое;
			
			ПроведениеСервер.ДобавитьСообщениеПользователю(
				ТаблицаСообщений, 
				Организация,
				НовоеСообщение, 
				Организация,
				'0001-01-01',
				Истина);
			
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

#КонецОбласти

#Область РегламентныеОперации

Функция ТекстЗапросаРегламентныеОперации()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Журнал.Дата КАК Дата,
	|	ВидыРегламентныхОпераций.Порядок КАК Порядок,
	|	Журнал.Ссылка КАК Ссылка,
	|	Журнал.Организация КАК Организация,
	|	ВидыРегламентныхОпераций.Ссылка КАК ВидОперации,
	|	Журнал.РучнаяКорректировка,
	|	Журнал.Состояние,
	|	ЛОЖЬ КАК ВыполненаОтменаПроведения
	|ИЗ
	|	Документ.РегламентнаяОперация КАК Журнал
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыРегламентныхОпераций КАК ВидыРегламентныхОпераций
	|		ПО Журнал.ВидОперации = ВидыРегламентныхОпераций.Ссылка
	|ГДЕ
	|	НЕ Журнал.ПометкаУдаления
	|	И Журнал.Организация В(&Организации)
	|	И Журнал.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Журнал.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|	И Журнал.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Порядок,
	|	Ссылка";

	Возврат ТекстЗапроса;

КонецФункции

Процедура ОтменитьПроведениеРегламентныхОпераций(Параметры, РегДокументы, ТаблицаСообщений, ВыполнятьТолькоАктуализациюРасчетовСКонтрагентами)

	// Документы "Регламентная операция" при групповом проведении делаем неактуальными.
	// При вызове из закрытия месяца сбрасываем активность у движений регистров, 
	// иначе полностью их очищаем.
	// При отмене регламентных операций последовательность не сдвигаем, чтобы можно было  
	// использовать сведения о ее нарушении в основном цикле перепроведения.
	// Также не меняем состояние рег.операции, чтобы в случае сбоя знать, какие операции требуется выполнить заново.
	
	// Все регламентные операции относятся к одному месяцу (введены последним днем), 
	// поэтому дату запрета для регламентных операций проверяем один раз для каждой организации.
	// Не сохраняем этот признак в общей таблице (ТаблицаОрганизаций из ВыполнитьПерепроведение()),
	// т.к. отмена вызывается до начала перепроведения первичных документов и регламентные документы записываются
	// датой конца месяца, поэтому их дата запрета может не затрагивать, 
	// а первичные документы будут находиться в закрытом периоде.
	ЗапретыИзменения = Новый Соответствие;
	ОрганизацииСГраницамиАктуальностиСдвинутымиНазад = Новый Соответствие;
	
	// Инициализируем параметры для выполнения отмены регламентных операций.
	ПараметрыОтменыРегОпераций = Документы.РегламентнаяОперация.НовыеПараметрыОтменыОперации();
	ПараметрыОтменыРегОпераций.УдалитьДвижения = НЕ Параметры.ЭтоЗакрытиеМесяца И НЕ Параметры.ЭтоПомощникПоУчетуНДС;
	ПараметрыОтменыРегОпераций.СдвигатьМоментНарушенияПоследовательности = Ложь;
	ПараметрыОтменыРегОпераций.ОбновитьГраницуАктуальности = Ложь;
	ПараметрыОтменыРегОпераций.СброситьСостояниеОперации = Ложь;
	
	Для Каждого СтрокаДокумента Из РегДокументы Цикл
		
		Отказ = Ложь;
		Попытка	
			
			УстановленЗапретИзменения = ЗапретыИзменения[СтрокаДокумента.Организация];
			Если УстановленЗапретИзменения = Неопределено Тогда
				
				ПроверкаЗапрета = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
				
				ДанныеДляПроверки = ПроверкаЗапрета.Добавить();
				ДанныеДляПроверки.Раздел = "БухгалтерскийУчет";
				ДанныеДляПроверки.Объект = СтрокаДокумента.Организация;
				ДанныеДляПроверки.Дата = НачалоДня(СтрокаДокумента.Дата);
				
				ОписаниеДанных = Новый Структура;
				ОписаниеДанных.Вставить("НоваяВерсия", Ложь);
				ОписаниеДанных.Вставить("Данные", СтрокаДокумента.ВидОперации);
				
				ОписаниеОшибки = "";
				
				УстановленЗапретИзменения = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета, ОписаниеДанных, ОписаниеОшибки);
				Если УстановленЗапретИзменения Тогда
					ПроведениеСервер.ЗапомнитьСообщенияПользователю(
						ТаблицаСообщений,
						СтрокаДокумента.Организация,
						ОписаниеОшибки, 
						СтрокаДокумента.Ссылка,
						СтрокаДокумента.Дата);
				КонецЕсли;
					
				ЗапретыИзменения.Вставить(СтрокаДокумента.Организация, УстановленЗапретИзменения);
				
			КонецЕсли;
			Если УстановленЗапретИзменения Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыполнятьТолькоАктуализациюРасчетовСКонтрагентами Тогда
				// Если выполняются только отложенные расчеты с контрагентами,
				// то отменяем выполнение только тех регламентных операций,
				// которые зависит от отложенных расчетов.
				Если Не ЗакрытиеМесяца.ОперацияТребуетВыполнениеПослеАктуализацииРасчетовСКонтрагентами(
					СтрокаДокумента.ВидОперации,
					СтрокаДокумента.Дата,
					СтрокаДокумента.Организация) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			// Если организация встретилась первый раз, то сразу сдвинем границу актуальности ее рег.операций.
			Если ОрганизацииСГраницамиАктуальностиСдвинутымиНазад[СтрокаДокумента.Организация] = Неопределено Тогда
				// Устарела вся группа операций.
				НомерГруппыТекущейОперации = ЗакрытиеМесяца.ГруппаПоВидуОперации(СтрокаДокумента.ВидОперации);

				РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
					СтрокаДокумента.Организация,
					СтрокаДокумента.Дата,
					НомерГруппыТекущейОперации - 1, 
					СтрокаДокумента.ВидОперации,
					Истина);
				
				// Запоминаем, что обработали организации, чтобы второй раз не делать.
				ОрганизацииСГраницамиАктуальностиСдвинутымиНазад.Вставить(СтрокаДокумента.Организация, Истина);
			КонецЕсли;
		
			ОперацияОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			ОперацияОбъект.ОтменитьОперацию(Ложь, Отказ, ПараметрыОтменыРегОпераций);

			Если Отказ Тогда
				// При отказе могло быть выдано сообщение пользователю, сохраним его
				ПроведениеСервер.ЗапомнитьСообщенияПользователю(
					ТаблицаСообщений,
					СтрокаДокумента.Организация,
					"",
					СтрокаДокумента.Ссылка,
					СтрокаДокумента.Дата);
			Иначе
				СтрокаДокумента.ВыполненаОтменаПроведения = Истина;
			КонецЕсли;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
				ТаблицаСообщений,
				СтрокаДокумента.Организация,
				ТекстОшибки, 
				СтрокаДокумента.Ссылка,
				СтрокаДокумента.Дата);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьРегламентныеОперацииЗаМесяц(ТаблицаОрганизаций, ТаблицаРегламентныеОперации, РезультатОбработки, ТаблицаСообщений, ОстанавливатьсяПоОшибке)
	
	Проведено = 0;
	НеУдалось = 0;
	
	// Регламентные операции в выборке расположены в порядке, 
	// соответствующем их выполнению при закрытии месяца.
	
	Для Каждого СтрокаДокумента Из ТаблицаРегламентныеОперации Цикл
	
		Если НЕ СтрокаДокумента.ВыполненаОтменаПроведения Тогда
			// Регламентная операция не отменялась в начале цикла перепроведения,
			// сейчас ее выполнять не требуется.
			Продолжить;
		КонецЕсли;

		СтрокаОрганизации = ТаблицаОрганизаций.Найти(СтрокаДокумента.Организация, "Организация");

		ТекстСообщения = "";
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		
		Если СтрокаОрганизации <> Неопределено Тогда
			Если СтрокаОрганизации.ПропуститьПроверкуЗапретаИзменения Тогда
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			КонецЕсли;
		КонецЕсли;
			
		Попытка
			Если ДокументОбъект.ВыполнитьОперацию() Тогда
				Проведено = Проведено + 1;
				// При проведении документ может выдать информационные сообщения, 
				// не мешающие проведению, запомним их для вывода в отчет.
				ПроведениеСервер.ЗапомнитьСообщенияПользователю(
					ТаблицаСообщений,
					СтрокаДокумента.Организация,
					"", 
					СтрокаДокумента.Ссылка,
					СтрокаДокумента.Дата,
					Ложь);
			Иначе
				Если ДокументОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
					ТекстСообщения = НСтр("ru = '%1 выполнена с ошибками!'");
				Иначе
					ТекстСообщения = НСтр("ru = '%1 операция не выполнена!'");
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения, 
					Строка(ДокументОбъект));
			КонецЕсли;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
		КонецПопытки;

		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			НеУдалось = НеУдалось + 1;
			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
				ТаблицаСообщений,
				СтрокаДокумента.Организация,
				ТекстСообщения, 
				СтрокаДокумента.Ссылка,
				СтрокаДокумента.Дата);
			
			// Отметим в таблице организаций факт того, что не удалось выполнить
			Если СтрокаОрганизации <> Неопределено Тогда
				Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности Тогда
					СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
					СтрокаОрганизации.НоваяДатаНарушенияПоследовательности = КонецМесяца(СтрокаДокумента.Дата);
				КонецЕсли;
			КонецЕсли;
			
			Если ОстанавливатьсяПоОшибке Тогда
				Прервать;
			КонецЕсли;
		Иначе
			// Операция успешно выполнена, запомним, что больше проверять дату запрета по организации не требуется.
			Если СтрокаОрганизации <> Неопределено Тогда
				СтрокаОрганизации.ПропуститьПроверкуЗапретаИзменения = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	РезультатОбработки.ПроведеноДокументов 	= РезультатОбработки.ПроведеноДокументов + Проведено;
	РезультатОбработки.НеУдалосьПровести	= РезультатОбработки.НеУдалосьПровести + НеУдалось;
	
	Возврат НеУдалось = 0;
	
КонецФункции

Процедура ВосстановитьСостояниеРегламентныхОпераций(РегДокументы, ТаблицаОрганизаций, Параметры, ТаблицаСообщений)

	// Восстанавливаем состояние регламентных операций, которое было до начала перепроведения.
	Успешно = Истина;
	
	ВидПервойОперации = Неопределено;
	ЕстьОперацииНеТребующиеВыполнения = Ложь;
	
	Для Каждого СтрокаДокумента Из РегДокументы Цикл
		Попытка
				
			Если НЕ СтрокаДокумента.ВыполненаОтменаПроведения Тогда
				// Это операции не была отменена, ее повторное выполнение не требуется.
				ЕстьОперацииНеТребующиеВыполнения = Истина;
				Продолжить;
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ВидПервойОперации) Тогда
				ВидПервойОперации = СтрокаДокумента.ВидОперации;
			КонецЕсли;
			
			ОперацияОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			
			// Определим, требуется ли проверка даты запрета редактирования.
			СтрокаОрганизации = ТаблицаОрганизаций.Найти(ОперацияОбъект.Организация, "Организация");
			Если СтрокаОрганизации <> Неопределено Тогда
				Если СтрокаОрганизации.ПропуститьПроверкуЗапретаИзменения Тогда
					ОперацияОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				КонецЕсли;
			КонецЕсли;
			
			Успешно = Успешно И ОперацияОбъект.ВосстановитьОперацию(СтрокаДокумента.Состояние);
			
			Если Успешно И СтрокаОрганизации <> Неопределено Тогда
				СтрокаОрганизации.ПропуститьПроверкуЗапретаИзменения = Истина;
			КонецЕсли;

		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Успешно = Ложь;

			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
				ТаблицаСообщений,
				СтрокаДокумента.Организация,
				ТекстОшибки,
				СтрокаДокумента.Ссылка,
				СтрокаДокумента.Дата);

		КонецПопытки;
	КонецЦикла;

	// Отмечаем операции как неактуальные, т.к. в результате перепроведения
	// первичных документов исходные данные регламентных операций могли измениться.
	Если Успешно И ЗначениеЗаполнено(ВидПервойОперации) Тогда
		Если ЕстьОперацииНеТребующиеВыполнения Тогда
			НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидПервойОперации);
			РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
				Параметры.Организация, НачалоМесяца(Параметры.ДатаОкончания), НомерГруппы, ВидПервойОперации, Истина);
		Иначе
			РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
				Параметры.Организация, НачалоМесяца(Параметры.ДатаОкончания), 0, Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегламентныеДокументыНДС

Функция ПровестиРегламентныеДокументыЗаМесяцПоНДС(РегДокументыНДС, РезультатОбработки, ТаблицаСообщений, ОстанавливатьсяПоОшибке, ПропуститьПроверкуЗапретаИзменения)
	
	Проведено = 0;
	НеУдалось = 0;
	
	Для Каждого СтрокаДокумента Из РегДокументыНДС Цикл		
	
		Успешно = Истина;
		ТекстСообщения = "";
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		
		Попытка
		
			Если ПропуститьПроверкуЗапретаИзменения Тогда
				ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			КонецЕсли;
		
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Проведено = Проведено + 1;
				// При проведении документ может выдать информационные сообщения, 
				// не мешающие проведению, запомним их для вывода в отчет.
				ПроведениеСервер.ЗапомнитьСообщенияПользователю(
					ТаблицаСообщений,
					СтрокаДокумента.Организация,
					"",
					СтрокаДокумента.Ссылка,
					СтрокаДокумента.Дата,
					Ложь);
				ПропуститьПроверкуЗапретаИзменения = Истина;
			Иначе
				Успешно = Ложь;
			КонецЕсли;
		Исключение
			ТекстСообщения = ОписаниеОшибки();
			Успешно = Ложь;
		КонецПопытки;

		Если НЕ Успешно Тогда
			НеУдалось = НеУдалось + 1;
			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
				ТаблицаСообщений,
				СтрокаДокумента.Организация,
				ТекстСообщения, 
				СтрокаДокумента.Ссылка,
				СтрокаДокумента.Дата);
			Если ОстанавливатьсяПоОшибке Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	РезультатОбработки.ПроведеноДокументов 	= РезультатОбработки.ПроведеноДокументов + Проведено;
	РезультатОбработки.НеУдалосьПровести	= РезультатОбработки.НеУдалосьПровести + НеУдалось;
	
	Возврат НеУдалось = 0;
	
КонецФункции

#КонецОбласти

#Область ПервичныеДокументы

Функция ТекстыЗапросовПоПервичнымДокументам(Параметры, НомераТаблиц, НомерТаблицОтложенноеПроведение)

	Результат = Новый Структура();
	Результат.Вставить("ТекстЗапроса", "");
	Результат.Вставить("ТекстЗапросаОтложенноеПроведение", "");

	ДокументыНеТребующиеПерепроведения = ИсключаемыеИзПерепроведенияДокументыБезусловно();
	Для каждого ДокументИсключение Из ИсключаемыеИзПерепроведенияДокументыОпционально() Цикл
		ДокументыНеТребующиеПерепроведения.Вставить(ДокументИсключение.Ключ, ДокументИсключение.Значение);
	КонецЦикла; 

	НомераТаблиц.Вставить("ВТ_ВыплатаЗарплатыВКассу", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_ВыплатаЗарплатыВБанк", 	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ПервичныеДокументы", 		НомераТаблиц.Количество());

	НомерТаблицОтложенноеПроведение.Вставить("ВТ_ВыплатаЗарплатыВКассу", 		НомерТаблицОтложенноеПроведение.Количество());
	НомерТаблицОтложенноеПроведение.Вставить("ВТ_ВыплатаЗарплатыВБанк", 		НомерТаблицОтложенноеПроведение.Количество());
	НомерТаблицОтложенноеПроведение.Вставить("ВТ_ВсеДокументыДляПерепроведения",НомерТаблицОтложенноеПроведение.Количество());
	НомерТаблицОтложенноеПроведение.Вставить("ПервичныеДокументы",				НомерТаблицОтложенноеПроведение.Количество());
	

	// Определяем документы, которые необходимо исключить из последовательности,
	// а также "Операции Бух", которые не проводятся, но тоже двигают последовательность.
	// Также отдельно обрабатываем зарплатные документы, т.к. ими движения формируются не 
	// по дате документа, а по ПериодуРегистрации или МесяцНачисления.
	//
	// Зарплатные документы могут попасть в последовательность в периоде работы с программой,
	// когда были установлены ФО "Вести учет зарплаты в программе", а потом ФО изменилась,
	// но документы в последовательности остались. Поэтому для них указываем действие
	// "Исключить из последовательности", если они не согласуются с текущими настройками ФО.
	
	// Возможные действия с документом:
	//  0 - исключить из последовательности
	//	1 - перепровести
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиТЧ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыплатаЗарплатыВКассу
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК СтрокиТЧ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СтрокиТЧ.Ведомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВКассу)
	|	И СтрокиТЧ.Ссылка.Организация = &Организация
	|	И &ТабличнаяЧастьУсловиеПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиТЧ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ВыплатаЗарплатыВБанк
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК СтрокиТЧ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СтрокиТЧ.Ведомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВБанк)
	|	И СтрокиТЧ.Ссылка.Организация = &Организация
	|	И &ТабличнаяЧастьУсловиеПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Журнал.Период КАК Дата,
	|	Журнал.Регистратор КАК Ссылка,
	|	Журнал.Организация КАК Организация,
	|	ЛОЖЬ КАК РучнаяКорректировка,
	|	0 КАК ДействиеСДокументом,
	|	ЛОЖЬ КАК ПоддерживаетсяОтложенноеПроведение
	|ПОМЕСТИТЬ ВТ_ВсеДокументыДляПерепроведения
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И Журнал.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности)
	|	И &ПоследовательностьУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Дата,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА Журнал.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОперацияБух КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &УсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Период,
	|	Журнал.Регистратор,
	|	Журнал.Организация,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА УстановкаЦенНоменклатуры.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК Журнал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|		ПО Журнал.Регистратор = УстановкаЦенНоменклатуры.Ссылка
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И Журнал.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности)
	|	И &ПоследовательностьУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Дата,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	Журнал.РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА НЕ Журнал.Проведен
	|			ТОГДА 0
	|		КОГДА Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|				ИЛИ Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|						ТОГДА ВЫБОР
	|								КОГДА ТИПЗНАЧЕНИЯ(Журнал.ПлатежнаяВедомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВКассу)
	|									ТОГДА 0
	|								КОГДА НЕ ВТ_ВыплатаЗарплатыВКассу.Ссылка ЕСТЬ NULL
	|									ТОГДА 0
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ИСТИНА
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК Журнал
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыплатаЗарплатыВКассу КАК ВТ_ВыплатаЗарплатыВКассу
	|		ПО Журнал.Ссылка = ВТ_ВыплатаЗарплатыВКассу.Ссылка
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &УсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Журнал.Дата,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	Журнал.РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА НЕ Журнал.Проведен
	|			ТОГДА 0
	|		КОГДА Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|				ИЛИ Журнал.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|						ТОГДА ВЫБОР
	|								КОГДА ТИПЗНАЧЕНИЯ(Журнал.ПлатежнаяВедомость) = ТИП(Документ.ВедомостьНаВыплатуЗарплатыВБанк)
	|									ТОГДА 0
	|								КОГДА НЕ ВТ_ВыплатаЗарплатыВБанк.Ссылка ЕСТЬ NULL
	|									ТОГДА 0
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ИСТИНА
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Журнал
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыплатаЗарплатыВБанк КАК ВТ_ВыплатаЗарплатыВБанк
	|		ПО Журнал.Ссылка = ВТ_ВыплатаЗарплатыВБанк.Ссылка
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &УсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Журнал.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА Журнал.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|				ИЛИ НЕ &УчетЗарплатыИКадровВоВнешнейПрограмме
	|			ТОГДА 0
	|		КОГДА Журнал.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &ЗарплатаПериодРегистрацииУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Журнал.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА Журнал.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	Журнал.РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|				ИЛИ НЕ &УчетЗарплатыИКадровВоВнешнейПрограмме
	|			ТОГДА 0
	|		КОГДА Журнал.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &ЗарплатаПериодРегистрацииУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Журнал.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ)
	|			ТОГДА Журнал.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Журнал.МесяцНачисления, МЕСЯЦ)
	|	КОНЕЦ,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|				ИЛИ &УчетЗарплатыИКадровВоВнешнейПрограмме
	|			ТОГДА 0
	|		КОГДА Журнал.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &ЗарплатаМесяцНачисленияУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Журнал.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА Журнал.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|				ИЛИ &УчетЗарплатыИКадровВоВнешнейПрограмме
	|			ТОГДА 0
	|		КОГДА Журнал.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.БольничныйЛист КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &ЗарплатаПериодРегистрацииУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Журнал.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА Журнал.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|				ИЛИ &УчетЗарплатыИКадровВоВнешнейПрограмме
	|			ТОГДА 0
	|		КОГДА Журнал.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.Отпуск КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &ЗарплатаПериодРегистрацииУсловиеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(Журнал.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА Журнал.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Журнал.ПериодРегистрации, МЕСЯЦ)
	|	КОНЕЦ,
	|	Журнал.Ссылка,
	|	Журнал.Организация,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользуетсяПодсистемаУчетаЗарплатыИКадров
	|			ТОГДА 0
	|		КОГДА Журнал.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК Журнал
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И &ЗарплатаПериодРегистрацииУсловиеПериода";
		
	Если Параметры.ЭтоЗакрытиеМесяца ИЛИ Параметры.ЭтоПомощникПоУчетуНДС Тогда
		// При восстановлении последовательности документы "Ввод начальных остатков"
		// с датами от предыдущего месяца обрабыватываем как документ с ручной корректировкой, 
		// т.е. сам по себе документ не перепроводим, а только меняем его состояние в последовательности.
		// Такие документы нарушают последовательность, начиная с первого дня следующего месяца (после себя).
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Журнал.Дата, МЕСЯЦ), СЕКУНДА, 1) КАК Дата,
		|	Журнал.Ссылка КАК Ссылка,
		|	Журнал.Организация КАК Организация,
		|	ИСТИНА КАК РучнаяКорректировка,
		|	ВЫБОР
		|		КОГДА Журнал.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДействиеСДокументом,
		|	ИСТИНА КАК ПоддерживаетсяОтложенноеПроведение
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК Журнал
		|ГДЕ
		|	Журнал.Организация = &Организация
		|	И &ВводОстатковУсловиеПериода
		|";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии") Тогда
		// При включении учета зарплаты в "этой" программе (БП) надо исключить
		// из перепроведения документы выплаты зарплаты, которые могли быть введены,
		// когда настройка была "Учет во внешней программе".
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедомостьНаВыплатуЗарплатыВБанк", "ВедомостьНаВыплатуЗарплаты"); 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедомостьНаВыплатуЗарплатыВКассу", "ВедомостьНаВыплатуЗарплаты");
	КонецЕсли;
	
	ТипыДокументыПоддерживающихОтложенноеПроведение = ТипыДокументовПоддерживающихОтложенноеПроведение();
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл

		// У некоторых ролей нет прав на отдельные документы
		Если НЕ РольДоступна("ПолныеПрава") Тогда
			Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяДокумента = МетаданныеДокумента.Имя;
		ТипДокумента = Тип("ДокументСсылка." + ИмяДокумента);

		// Отсекаем документы, которые не следует перепроводить
		Если ДокументыНеТребующиеПерепроведения.Свойство(ИмяДокумента) Тогда
			Продолжить;
		КонецЕсли;

		// Отсечь документы с префиксом Удалить
		Если СтрНайти(МетаданныеДокумента.Имя, "Удалить") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Квартплата +
		// При перепроведении документов за месяц не всегда необходимо перепроводить документы подсистемы ЖКХ по умолчанию,
		// поэтому в зависимости от настройки пользователя определяем необходимость перепроведения документов подсистемы ЖКХ.
		Если Параметры.Свойство("ПерепроводитьДокументыПодсистемыЖКХ")
		И Не Параметры.ПерепроводитьДокументыПодсистемыЖКХ = Истина Тогда
			
			// Отсекаем документы с префиксами "КВП_" и "УПЖКХ_".
			Если СтрНайти(МетаданныеДокумента.Имя, "КВП_") = 1
			 Или СтрНайти(МетаданныеДокумента.Имя, "УПЖКХ_") = 1 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		// Квартплата -
		
		Если МетаданныеДокумента.Проведение <> Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено Тогда
			// Документы без организации могут быть добавлены на конкретном внедрении у пользователей,
			// но они не могут влиять на последовательность и учетные данные в регистрах, 
			// т.к. организация является ключевым измерением.
			// Поэтому такие документы не перепроводим.
			Продолжить;
		КонецЕсли;
		
		Если ИмяДокумента = "НачислениеЗарплаты"
			ИЛИ ИмяДокумента = "ОтражениеЗарплатыВБухучете"
			ИЛИ ИмяДокумента = "ОтражениеЗарплатыВУчете" 
			ИЛИ ИмяДокумента = "БольничныйЛист" 
			ИЛИ ИмяДокумента = "Отпуск" 
			ИЛИ ИмяДокумента = "НачислениеОценочныхОбязательствПоОтпускам" 
			Тогда
			// Зарплатные документы проводятся по месяцу начисления, а не по дате, 
			// поэтому их обрабатываем отдельно.
			Продолжить;
		ИначеЕсли ИмяДокумента = "РасходныйКассовыйОрдер"
			ИЛИ ИмяДокумента = "СписаниеСРасчетногоСчета" Тогда
			// Ввиду того что документами может выплачиваться зарплата в зависимости 
			// от способа учета зарплаты в/вне программы,  их обрабатываем отдельно.
			Продолжить;
		Иначе
			ПолеДата = "Дата";
			ПолеУсловиеПериода = "&УсловиеПериода";
		КонецЕсли;

		ЕстьРучнаяКорректировка = МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено;
		ПоддерживаетсяОтложенноеПроведение = ТипыДокументыПоддерживающихОтложенноеПроведение[ТипДокумента] <> Неопределено;
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	Журнал.Дата КАК Дата,
			|	Журнал.Ссылка КАК Ссылка, 
			|	Журнал.Организация КАК Организация,
			|	" + ?(ЕстьРучнаяКорректировка, "РучнаяКорректировка", "ЛОЖЬ") + " КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом,
			|	" + ?(ПоддерживаетсяОтложенноеПроведение, "ИСТИНА", "ЛОЖЬ") + " КАК ПоддерживаетсяОтложенноеПроведение
			|ИЗ Документ." + ИмяДокумента + " КАК Журнал
			|ГДЕ 
			|	Журнал.Организация = &Организация  // Все оставшиеся в списке перепроводимых документы имеют реквизит Организация
			|	И &УсловиеПериода" 
			+ ?(ИмяДокумента = "СчетФактураВыданный", "
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)", "")
			+ ?(ИмяДокумента = "СчетФактураПолученный", "
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
				|	И Журнал.ВидСчетаФактуры <> ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный)", "");
			
	КонецЦикла;
	
	// Текст запроса к документа, если отложенное проведение не используется.
	Результат.ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_ВсеДокументыДляПерепроведения", "");
	Результат.ТекстЗапроса = Результат.ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Дата, 
	|	Ссылка";
	
	// При отложенном проведении исключим из перепроведения те документы, которых нет в последовательности.
	// Их движения будут актуализированы процедурами отложенного восстановления расчетов соответствующего механизма.
	Результат.ТекстЗапросаОтложенноеПроведение = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ПоддерживаетсяОтложенноеПроведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВТ_ВсеДокументыДляПерепроведения.Дата КАК Дата,
	|	ВТ_ВсеДокументыДляПерепроведения.Ссылка КАК Ссылка,
	|	ВТ_ВсеДокументыДляПерепроведения.Организация КАК Организация,
	|	ВТ_ВсеДокументыДляПерепроведения.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ВТ_ВсеДокументыДляПерепроведения.ДействиеСДокументом КАК ДействиеСДокументом,
	|	ВТ_ВсеДокументыДляПерепроведения.ПоддерживаетсяОтложенноеПроведение КАК ПоддерживаетсяОтложенноеПроведение
	|ИЗ
	|	ВТ_ВсеДокументыДляПерепроведения КАК ВТ_ВсеДокументыДляПерепроведения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ДокументыОрганизаций КАК ПоследовательностьДокументыОрганизаций
	|		ПО ВТ_ВсеДокументыДляПерепроведения.Ссылка = ПоследовательностьДокументыОрганизаций.Регистратор
	|			И ВТ_ВсеДокументыДляПерепроведения.ПоддерживаетсяОтложенноеПроведение
	|			И ПоследовательностьДокументыОрганизаций.Организация = &Организация
	|ГДЕ
	|	ВТ_ВсеДокументыДляПерепроведения.ПоддерживаетсяОтложенноеПроведение = ЛОЖЬ
	|	ИЛИ НЕ ПоследовательностьДокументыОрганизаций.Регистратор ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Возврат Результат;
	
КонецФункции

Функция ДокументВходитВПоследовательность(СсылкаНаДокумент, КэшСоставДокументовПоследовательности)

	Если КэшСоставДокументовПоследовательности = Неопределено Тогда
		КэшСоставДокументовПоследовательности = Новый Соответствие;

		МетаданныеПоследовательности = Метаданные.Последовательности.ДокументыОрганизаций.Документы;
		
		Для Каждого МетаДок Из МетаданныеПоследовательности Цикл
			
			ТипРегистратора = Тип("ДокументСсылка." + МетаДок.Имя);
		
			Если НЕ РаботаСПоследовательностями.ДокументРегистрируетсяВПоследовательности(ТипРегистратора) Тогда
				// Некоторые документы не меняют последовательность,
				// но в составе типов оставлены, чтобы не делать реструктуризацию при обновлении ИБ.
				Продолжить;
			КонецЕсли;
		
			КэшСоставДокументовПоследовательности.Вставить(ТипРегистратора, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(СсылкаНаДокумент);
	
	Результат = КэшСоставДокументовПоследовательности[ТипДокумента];
	Если Результат = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПровестиПервичныйДокумент(ВыборкаПоДокументам, СостояниеПоОрганизации, ТаблицаСообщений, РегистрыТребующиеОчисткиПоДокументам)

	Успешно = Истина;

	Попытка
	
		// Обычное перепроведение документа
		ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетСтатуса", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности",
														СостояниеПоОрганизации.ПроведенВХронологическойПоследовательности);
		Если СостояниеПоОрганизации.ПропуститьПроверкуЗапретаИзменения Тогда
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрыТребующиеОчисткиПоДокументам",
														РегистрыТребующиеОчисткиПоДокументам);

		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			// При проведении документ может выдать информационные сообщения, 
			// не мешающие проведению, запомним их для вывода в отчет.
			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
				ТаблицаСообщений,
				ВыборкаПоДокументам.Организация,
				"",
				ВыборкаПоДокументам.Ссылка,
				ВыборкаПоДокументам.Дата,
				Ложь);
		Иначе
			Успешно = Ложь;
			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
				ТаблицаСообщений,
				ВыборкаПоДокументам.Организация,
				"",
				ВыборкаПоДокументам.Ссылка,
				ВыборкаПоДокументам.Дата);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();

		ПроведениеСервер.ЗапомнитьСообщенияПользователю(
			ТаблицаСообщений,
			ВыборкаПоДокументам.Организация,
			ТекстОшибки,
			ВыборкаПоДокументам.Ссылка,
			ВыборкаПоДокументам.Дата);

		Успешно = Ложь;

	КонецПопытки;

	Возврат Успешно;

КонецФункции

Функция УстановитьСостояниеПоследовательности(Регистратор, Период, Организация, НовоеСостояние, ТаблицаСообщений)

	Успешно = Истина;

	НаборЗаписейПоследовательности = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Последовательность.ДокументыОрганизаций.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		Блокировка.Заблокировать();
		
		НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(Регистратор, Истина);
		
		НаборЗаписейПоследовательности.Прочитать();
		ЕстьЗаписьПоОрганизации = Ложь;
		Для Каждого Движение Из НаборЗаписейПоследовательности Цикл
			Если Движение.Организация = Организация И Движение.Период = Период Тогда
				Движение.СостояниеПроведения = НовоеСостояние;
				ЕстьЗаписьПоОрганизации = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЗаписьПоОрганизации Тогда
			Движение = НаборЗаписейПоследовательности.Добавить();
			Движение.Период 		= Период;
			Движение.Регистратор	= Регистратор;
			Движение.Организация	= Организация;
			Движение.СостояниеПроведения = НовоеСостояние;
		КонецЕсли;
		
		НаборЗаписейПоследовательности.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		ПроведениеСервер.ЗапомнитьСообщенияПользователю(
			ТаблицаСообщений,
			Организация,
			ТекстОшибки,
			Регистратор,
			Период);

		Успешно = Ложь;

	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

Функция СброситьСостояниеПоследовательности(Регистратор, Период, Организация, ТаблицаСообщений)

	Успешно = Истина;

	Попытка
		РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
			Регистратор,
			Период,
			Организация);
	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		
		ПроведениеСервер.ЗапомнитьСообщенияПользователю(
			ТаблицаСообщений,
			Организация,
			ТекстОшибки,
			Регистратор,
			Период);

		Успешно = Ложь;

	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

Функция ИсключитьИзПоследовательности(ВыборкаПоДокументам, ТаблицаСообщений)

	Успешно = Истина;

	НаборЗаписейПоследовательности = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();

	НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Последовательность.ДокументыОрганизаций.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаПоДокументам.Ссылка);
		Блокировка.Заблокировать();
		
		НаборЗаписейПоследовательности.Прочитать();
		ВГраница = НаборЗаписейПоследовательности.Количество() - 1;
		Для Сч = 0 По ВГраница Цикл
			Движение = НаборЗаписейПоследовательности[ВГраница - Сч];
			Если Движение.Организация = ВыборкаПоДокументам.Организация Тогда
				НаборЗаписейПоследовательности.Удалить(Движение);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписейПоследовательности.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		ПроведениеСервер.ЗапомнитьСообщенияПользователю(
			ТаблицаСообщений,
			ВыборкаПоДокументам.Организация,
			ТекстОшибки,
			ВыборкаПоДокументам.Ссылка,
			ВыборкаПоДокументам.Дата);

		Успешно = Ложь;

	КонецПопытки;

	Возврат Успешно;

КонецФункции

// Запускает выполнение отложенных расчетов с контрагентами.
//
Функция ВыполнитьОтложенныеРасчеты(Организация, ДатаОкончания, РезультатОбработки, ТаблицаСообщений, Параметры)

	ПараметрыРасчета = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
	ПараметрыРасчета.Организация 				= Организация;	
	ПараметрыРасчета.ДатаОкончания 				= ДатаОкончания;
	ПараметрыРасчета.ОстанавливатьсяПоОшибке 	= Параметры.ОстанавливатьсяПоОшибке;
	ПараметрыРасчета.СообщатьПрогрессВыполнения = Параметры.СообщатьПрогрессВыполнения;
	
	РезультатРасчета = УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
	
	// Переносим сообщения отложенного расчета в общую таблицу сообщений.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчета.Сообщения, ТаблицаСообщений);

	РезультатОбработки.АктуализированоДоговоров = РезультатОбработки.АктуализированоДоговоров + РезультатРасчета.УспешноОбработаноДоговоров;
	РезультатОбработки.НеУдалосьАктуализировать = РезультатОбработки.НеУдалосьАктуализировать + РезультатРасчета.КоличествоДоговоровСОшибками;
	
	Возврат РезультатРасчета.КоличествоДоговоровСОшибками = 0;

КонецФункции

// При выполнении группового перепроведения в рамках закрытия месяца может возникать 
// ситуация, когда запустили закрытие месяца, но не провели документ "Начисление зарплаты".
// В этом случае создание документа "Начисление зарплаты" приведет к нарушению последовательности
// и прерыванию дальнейших процедур закрытия месяца.
// Поэтому создадим документ "Начисление зарплаты" самостоятельно, 
// если по данным базы его необходимо ввести.
// Аналогично для резервов отпусков.
//
Процедура ПроверитьНачислениеЗарплатыИРезервовОтпусков(Параметры, МесяцНачисления, Организация, РезультатОбработки)

	// При вызове группового перепроведения как самостоятельной операции (не в рамках закрытия месяца),
	// зарплату не проверяем.
	Если НЕ Параметры.ЭтоЗакрытиеМесяца Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНачислениеЗарплаты 	= УчетЗарплаты.ЕстьДокументНачисленияЗарплаты(МесяцНачисления, Организация);
	ЕстьРезервыОтпусков 	= УчетЗарплаты.ЕстьДокументНачисленияРезервовОтпусков(МесяцНачисления, Организация);
	
	// Если уже все начислено, то ничего не делаем.
	Если ЕстьНачислениеЗарплаты И ЕстьРезервыОтпусков Тогда
		Возврат;
	КонецЕсли;

	// Если начисление зарплаты не требуется по данным базы, то ничего не делаем.
	Если НЕ УчетЗарплаты.НеобходимоНачислятьЗарплату(Организация, МесяцНачисления) Тогда
		Возврат;
	КонецЕсли;

	// Создадим документ начисления зарплаты.
	Если НЕ ЕстьНачислениеЗарплаты Тогда

		ДокументНачисленияЗарплаты = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(МесяцНачисления, Организация);
		Если ЗначениеЗаполнено(ДокументНачисленияЗарплаты) Тогда

			Объект = ДокументНачисленияЗарплаты.ПолучитьОбъект();
			Попытка
				Если Объект.ПометкаУдаления Тогда
					Объект.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				Объект.Записать(РежимЗаписиДокумента.Проведение);
				
				// Сообщим основному процессу закрытия месяца, что самостоятельно создали документ начисления зарплаты.
				РезультатОбработки.СозданДокументНачисленияЗарплаты = Истина;
				
			Исключение
				ИнфоОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось провести документ ""Начисление зарплаты"" за %1 по %2 по причине:%3'"),
					Формат(МесяцНачисления, "ДФ='ММММ гггг'"),
					Организация,
					ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Групповое перепроведение документов'", ОбщегоНазначения.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
			КонецПопытки;
		
		КонецЕсли;

	КонецЕсли;

	// Создадим документ начисления резервов отпусков.
	Если УчетЗарплаты.ВедетсяУчетРезервовОтпусков(Организация, МесяцНачисления)
		И НЕ ЕстьРезервыОтпусков Тогда

		ДокументНачисленияРезервовОтпусков = УчетЗарплаты.ПолучитьДокументНачисленияРезерваОтпусков(МесяцНачисления, Организация);
		Если ЗначениеЗаполнено(ДокументНачисленияРезервовОтпусков) Тогда

			Объект = ДокументНачисленияРезервовОтпусков.ПолучитьОбъект();
			Попытка
				Если Объект.ПометкаУдаления Тогда
					Объект.ПометкаУдаления = Ложь;
				КонецЕсли;
				
				Объект.Записать(РежимЗаписиДокумента.Проведение);
				
				// Сообщим основному процессу закрытия месяца, что самостоятельно создали документ начисления резервов отпусков.
				РезультатОбработки.СозданДокументНачисленияРезервовОтпусков = Истина;
				
			Исключение
				ИнфоОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось провести документ ""Начисление оценочных обязательств по отпускам"" за %1 по %2 по причине:%3'"),
					Формат(МесяцНачисления, "ДФ='ММММ гггг'"),
					Организация,
					ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Групповое перепроведение документов'", ОбщегоНазначения.КодОсновногоЯзыка()), 
					УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстСообщения);
			КонецПопытки;
		
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Сообщения

Процедура ДобавитьСообщенияВРезультатОбработки(ТаблицаСообщений, РезультатОбработки, ДатаНачала, ДатаОкончания)

	Если ТаблицаСообщений.Количество() > 0 Тогда
		
		РезультатОбработки.ВывестиИнформациюУведомлений = Истина;
		
		ПараметрыОтчета = ПроведениеСервер.НовыеПараметрыОтчетаССообщениямиПользователю(
			"Перепроведение",
			ТаблицаСообщений);
		ПараметрыОтчета.ДатаНачала               = ДатаНачала;
		ПараметрыОтчета.ДатаОкончания            = ДатаОкончания;
		ПараметрыОтчета.ПроведеноДокументов      = РезультатОбработки.ПроведеноДокументов;
		ПараметрыОтчета.НеУдалосьПровести        = РезультатОбработки.НеУдалосьПровести;
		ПараметрыОтчета.АктуализированоДоговоров = РезультатОбработки.АктуализированоДоговоров;
		ПараметрыОтчета.НеУдалосьАктуализировать = РезультатОбработки.НеУдалосьАктуализировать;
		
		ТабДокумент = ПроведениеСервер.ВывестиСообщенияПользователю(ПараметрыОтчета);
		
		ПроведениеСервер.ПоместитьСообщенияПользователюВоВременноеХранилищеДляФормыОшибок(
			ТаблицаСообщений,
			ТабДокумент,
			РезультатОбработки.АдресХранилищаСОшибками);
		
	Иначе
		// Если ошибок не возникло, то уничтожим временное хранилище для них, чтобы место не занимало.
		Если ЭтоАдресВременногоХранилища(РезультатОбработки.АдресХранилищаСОшибками) Тогда
			УдалитьИзВременногоХранилища(РезультатОбработки.АдресХранилищаСОшибками);
		КонецЕсли;
		РезультатОбработки.АдресХранилищаСОшибками = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьПрогресс(ПараметрыСообщенийПрогресса, ТекущаяДатаПроведения)

	ПараметрыСообщенийПрогресса.ДостигнутоеЗначение = ТекущаяДатаПроведения;

	Если ПараметрыСообщенийПрогресса.НачальноеЗначение > ТекущаяДатаПроведения
		ИЛИ ПараметрыСообщенийПрогресса.КонечноеЗначение < ТекущаяДатаПроведения Тогда
		// Значение, которое лежит за пределами диапазона, не показываем.
		ТекстСообщения = "";
	Иначе
		ТекстСообщения = Формат(ТекущаяДатаПроведения, "ДФ=""д ММММ гггг 'г.'""");
	КонецЕсли;

	ДлительныеОперации.СообщитьПрогресс(, ТекстСообщения, ПараметрыСообщенийПрогресса);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
