#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура загрузки данных закрытия месяца

Процедура ЗагрузитьДанныеВИБ(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	СписокОшибок = Новый СписокЗначений;
	
	ИдентификаторКонфигурации = "";
	
	ВебКлиент = Ложь;
	Если ПараметрыВыгрузки.Свойство("ВебКлиент") Тогда
		ВебКлиент = ПараметрыВыгрузки.ВебКлиент;
	КонецЕсли;
	
	ЭтоАрхив = Ложь;
	Если ПараметрыВыгрузки.Свойство("ЭтоАрхив") Тогда
		ЭтоАрхив = ПараметрыВыгрузки.ЭтоАрхив;
	КонецЕсли;
	
	Если ЭтоАрхив Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;	
	ДвоичныеДанныеФайла = ПараметрыВыгрузки.ДвоичныеДанныеФайла;
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	// считывание заголовка
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяВременногоФайла;
	Попытка
		ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
	Исключение
		ТекстСообщения = НСтр("ru = 'При чтении данных произошла ошибка:'") + Символы.ПС
		                 + ОписаниеОшибки()+ Символы.ПС 
						 + НСтр("ru = 'Ошибка в формате файла данных.'");
		РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Истина);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	КонецПопытки;
		
	Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
		ТекстСообщения = НСтр("ru = 'При чтении данных произошла ошибка.'");
		РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Истина);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	Иначе		
		ФайлОбмена = Новый ЧтениеXML();
		ФайлОбмена.ОткрытьФайл(ИмяВременногоФайла);
		ФайлОбмена.Прочитать();		
		ИдентификаторКонфигурации = ФайлОбмена.ПолучитьАтрибут("ИдентификаторКонфигурации");
		Если ИдентификаторКонфигурации = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить программу-источник данных.'");
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка, ИдентификаторКонфигурации", ТекстСообщения, Истина, "");
			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
			Возврат;
		Иначе
			ГраницаВыгрузкиОборотов = ФайлОбмена.ПолучитьАтрибут("ГраницаВыгрузкиОборотов");
			Если ГраницаВыгрузкиОборотов  = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось определить программу-источник данных.'");
				РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка, ИдентификаторКонфигурации", ТекстСообщения, Истина, ИдентификаторКонфигурации);
				ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
				Возврат;
			Иначе
				
				ИдентификаторКонфигурации = СОКРЛП(ИдентификаторКонфигурации);
				Если ИдентификаторКонфигурации = "BU42TK" Тогда
					ИмяОбработкиЗагрузчика = "ОбработчикиЗагрузкиИзБухгалтерии77";				
				ИначеЕсли ИдентификаторКонфигурации = "BASUOR" Тогда
					ИмяОбработкиЗагрузчика = "ОбработчикиЗагрузкиИзУСН77";				
				ИначеЕсли ИдентификаторКонфигурации = "PBOUL" Тогда
					ИмяОбработкиЗагрузчика = "ОбработчикиЗагрузкиИзПредпринимателя77";				
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось определить программу-источник данных.'");
					РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка, ИдентификаторКонфигурации", ТекстСообщения, Истина, ИдентификаторКонфигурации);
					ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
					Возврат;
				КонецЕсли;
				// считывание параметров загружаемого файла
				ЕстьСправочники          = Число(ФайлОбмена.ПолучитьАтрибут("ЕстьСправочники"));
				ЕстьОстатки              = Число(ФайлОбмена.ПолучитьАтрибут("ЕстьОстатки"));
				ЕстьОбороты              = Число(ФайлОбмена.ПолучитьАтрибут("ЕстьОбороты"));
				ЕстьДокументы            = Число(ФайлОбмена.ПолучитьАтрибут("ЕстьДокументы"));
				
				КонрольныеДанные    = ФайлОбмена.ПолучитьАтрибут("КонрольныеДанные");
				КонрольныеЗначения  = ФайлОбмена.ПолучитьАтрибут("КонрольныеЗначения");
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена                  = "Загрузка";
	ОбработкаОбмена.ИмяФайлаОбмена               = ИмяВременногоФайла;
	ОбработкаОбмена.РежимОтладкиАлгоритмов       = 3;
	ОбработкаОбмена.ФлагРежимОтладкиОбработчиков = Истина;
	ОбработкаОбмена.ФлагРежимОтладки             = Истина;	
	ОбработкаОбмена.ОбрезатьСтрокиСправа         = Истина;	
		
	ОбработкаОбмена.ИмяФайлаВнешнейОбработкиОбработчиковСобытий = ИмяОбработкиЗагрузчика;
	Если НЕ ВебКлиент Тогда
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла("txt");
	КонецЕсли;
			
	ОбработкаОбмена.ВыполнитьЗагрузку();
	
	Если ОбработкаОбмена.ФлагОшибки Тогда		
		ТекстСообщения = НСтр("ru = 'При загрузке данных произошла ошибка.'");		
		РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка, СписокОшибок, ИдентификаторКонфигурации", ТекстСообщения, Истина, СписокОшибок, ИдентификаторКонфигурации);
	Иначе		
		ТекстСообщения =  НСтр("ru = 'Загрузка данных завершена.'");	
		РезультатВыполнения = Новый Структура("ТекстСообщения, ИдентификаторКонфигурации, Организация, НачалоПериодаВыгрузки, 
		                                       |ОкончаниеПериодаВыгрузки, ГраницаВыгрузкиОборотов, 
											   |ЕстьСправочники, ЕстьОстатки, ЕстьОбороты, ЕстьДокументы, Ошибка, 
											   |КонрольныеДанные, КонрольныеЗначения, СписокОшибок", 
											   ТекстСообщения, ИдентификаторКонфигурации, ОбработкаОбмена.Параметры.Организация, ОбработкаОбмена.ДатаНачала, 
											   ОбработкаОбмена.ДатаОкончания, XMLЗначение(Тип("Дата"),ГраницаВыгрузкиОборотов), 
											   ЕстьСправочники, ЕстьОстатки, ЕстьОбороты, ЕстьДокументы, Ложь,
		                                       КонрольныеДанные, КонрольныеЗначения, СписокОшибок);
	КонецЕсли;

	
	Если НЕ ОбработкаОбмена.ФлагОшибки Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаЗапроса = Результат.Выбрать();
			ВыборкаЗапроса.Следующий();
			Если ВыборкаЗапроса.КоличествоОрганизаций = 1 Тогда
				РезультатВыполнения.Вставить("ОсновнаяОрганизация", Истина);				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
	Если НЕ ОбработкаОбмена.ФлагОшибки Тогда
		
		Если ВебКлиент Тогда
			ПараметрыПроведения = Новый Структура("ВебКлиент, Организация, НачалоПериодаВыгрузки, ОкончаниеПериодаВыгрузки, ГраницаВыгрузкиОборотов, ЕстьОстатки, ЕстьОбороты, ЕстьДокументы", 
			Истина, РезультатВыполнения.Организация, РезультатВыполнения.НачалоПериодаВыгрузки, РезультатВыполнения.ОкончаниеПериодаВыгрузки, РезультатВыполнения.ГраницаВыгрузкиОборотов, РезультатВыполнения.ЕстьОстатки, РезультатВыполнения.ЕстьОбороты, РезультатВыполнения.ЕстьДокументы);
			ПровестиДокументы(ПараметрыПроведения, АдресХранилища, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура проведения документов

Процедура ПровестиДокументы(ПараметрыПроведения, АдресХранилища, РезультатВыполнения = Неопределено) Экспорт
		
	Ошибка = Ложь;
	
	СписокОшибок = Новый СписокЗначений;
	
	ВебКлиент = Ложь;
	Если ПараметрыПроведения.Свойство("ВебКлиент") Тогда
		ВебКлиент = ПараметрыПроведения.ВебКлиент;
	КонецЕсли;
		
	Попытка
		Организация = ПараметрыПроведения.Организация.ПолучитьОбъект();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать файл данных и получить сведения о загружаемой организации'");		
		Если НЕ ВебКлиент Тогда		
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Истина);
		Иначе
			РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка", Истина);
		КонецЕсли;
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	КонецПопытки;
	
	
	ДатаНач                 = НачалоДня(ПараметрыПроведения.НачалоПериодаВыгрузки - 1);
	ДатаКон                 = ПараметрыПроведения.ОкончаниеПериодаВыгрузки;
	ГраницаВыгрузкиОборотов = ПараметрыПроведения.ГраницаВыгрузкиОборотов;
		
	мНаборыШаблон = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация.Ссылка);
	
	Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
		
		УСН = ?(ДокументМетаданные.Имя = "ЗаписьКУДиР", "Истина", "Ложь");
		
		Если ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, НАЧАЛОПЕРИОДА(Дата, Месяц) КАК МесяцДокумента, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ НЕ ПометкаУдаления И Дата <= &ДатаКон И Организация = &Организация";
		КонецЕсли;
		
		Если ДокументМетаданные.Имя = "УстановкаЦенНоменклатуры" Тогда
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, НАЧАЛОПЕРИОДА(Дата, Месяц) КАК МесяцДокумента, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ НЕ ПометкаУдаления И Дата <= &ДатаКон";
		КонецЕсли;

	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));	
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
	ВсегоДокументов = ТаблицаДокументов.Количество();

	ИндексСтрокиНачалаДаты = Неопределено;
	ТекущаяДатаПроведения = Неопределено;
	
	ТекущийМесяц = '00010101';
	Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
		СтрокаДокумента = ТаблицаДокументов[индекс];
		Если (ТекущийМесяц <> СтрокаДокумента.МесяцДокумента) Тогда
			Если ТекущийМесяц > ДатаНач Тогда
				ПериодРегистрации = ТекущийМесяц;
				ВыполнитьЗакрытиеМесяца(Организация.Ссылка, ПериодРегистрации, ГраницаВыгрузкиОборотов);
			КонецЕсли;
			ТекущийМесяц = СтрокаДокумента.МесяцДокумента;
		КонецЕсли;

		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		ЭтоРегОперация = ДокументОбъект.Метаданные().Имя = "РегламентнаяОперация";
		
		Если ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить И НЕ ЭтоРегОперация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяДатаПроведения <> ДокументОбъект.Дата Тогда
			ИндексСтрокиНачалаДаты = индекс;
			ТекущаяДатаПроведения = ДокументОбъект.Дата;
		КонецЕсли;
		
		Попытка
			Если ЭтоРегОперация Тогда
				ДокументОбъект.ОтменитьОперацию();
			ИначеЕсли (ДокументОбъект.Метаданные().Имя = "ФормированиеЗаписейКнигиПокупок")
				      или (ДокументОбъект.Метаданные().Имя = "ФормированиеЗаписейКнигиПродаж") Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения,РежимПроведенияДокумента.Неоперативный);	  
			ИначеЕсли (ДокументОбъект.Метаданные().Имя = "ВедомостьНаВыплатуЗарплатыВБанк")
				      или (ДокументОбъект.Метаданные().Имя = "ВедомостьНаВыплатуЗарплатыВКассу") Тогда
				СкорректироватьЗаполнениеВедомости(ДокументОбъект, СписокОшибок, Ошибка);
			Иначе
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Иначе
					
					Ошибка = Истина;
					
					ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен!
					| По причине: %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			Ошибка = Истина;
						
			ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен!
			| По причине: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
						
			Если НЕ ЭтоРегОперация Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);					
				Исключение
					ШаблонСообщения = НСтр("ru = 'Документ %1 не удалось отменить проведение!
					| По причине: %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
				КонецПопытки;
			КонецЕсли;			
		КонецПопытки;
	КонецЦикла;
	
	Если ТекущийМесяц > ДатаНач Тогда
		ПериодРегистрации = ТекущийМесяц;
		ВыполнитьЗакрытиеМесяца(Организация.Ссылка, ПериодРегистрации, ГраницаВыгрузкиОборотов);
	КонецЕсли;

	Если НЕ Ошибка Тогда		
		ТекстСообщения =  НСтр("ru = 'Проведение документов завершено.'");	
	Иначе		
		ТекстСообщения = НСтр("ru = 'При проведении документов произошли ошибки.'");		
	КонецЕсли;
	
	Если НЕ ВебКлиент Тогда
		РезультатВыполнения = Новый Структура("ТекстСообщения, СписокОшибок, Ошибка", ТекстСообщения, СписокОшибок, Ошибка);
	Иначе
		РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
		РезультатВыполнения.Вставить("Ошибка", Ошибка);
		РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
	Если НЕ Ошибка Тогда		
		Если ВебКлиент Тогда
			ПроверитьДанные(РезультатВыполнения, АдресХранилища, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗакрытиеМесяца(Организация, ПериодРегистрации, ГраницаВыгрузкиОборотов)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	
	Если НЕ ЗначениеЗаполнено(ГраницаВыгрузкиОборотов) Тогда
		СформироватьЗаписиКнигиПокупокИКнигиПродаж(Организация, ПериодРегистрации);
		Результат = Обработки.ЗакрытиеМесяца.ЗакрытьМесяцПоЗагруженнымДанным(ПериодРегистрации, Организация);
	Иначе
		Если КонецМесяца(ПериодРегистрации) = КонецМесяца(ГраницаВыгрузкиОборотов) Тогда
			Результат = Обработки.ЗакрытиеМесяца.ЗакрытьМесяцПоЗагруженнымДанным(ПериодРегистрации, Организация, Истина);
		ИначеЕсли КонецМесяца(ПериодРегистрации) > КонецМесяца(ГраницаВыгрузкиОборотов) Тогда 
			СформироватьЗаписиКнигиПокупокИКнигиПродаж(Организация, ПериодРегистрации);
			Результат = Обработки.ЗакрытиеМесяца.ЗакрытьМесяцПоЗагруженнымДанным(ПериодРегистрации, Организация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьЗаписиКнигиПокупокИКнигиПродаж(Организация, ПериодРегистрации)
	
	// формирование книги покупок
	Объект = Документы.ФормированиеЗаписейКнигиПокупок.СоздатьДокумент();
	Объект.Организация = Организация;
	Объект.Дата = ПериодРегистрации;
	
	СтруктураПараметров = Новый Структура("Организация, Дата, ПредъявленНДСКВычету0, ИмяТабЧасти, ЗаполнитьПоВсемДокументам",
			Организация, ПериодРегистрации, Ложь, Неопределено, Истина);
			
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Документы.ФормированиеЗаписейКнигиПокупок.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ВычетПоПриобретеннымЦенностям") Тогда
		Объект.ВычетПоПриобретеннымЦенностям.Загрузить(СтруктураДанных.ВычетПоПриобретеннымЦенностям);
	КонецЕсли;
	Если СтруктураДанных.Свойство("НДСсАвансов") Тогда
		Объект.НДСсАвансов.Загрузить(СтруктураДанных.НДСсАвансов);
	КонецЕсли;
	Если СтруктураДанных.Свойство("НДСсАвансовВыданных") Тогда
		Объект.НДСсАвансовВыданных.Загрузить(СтруктураДанных.НДСсАвансовВыданных);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВычетНДСПоНалоговомуАгенту") Тогда
		Объект.ВычетНДСПоНалоговомуАгенту.Загрузить(СтруктураДанных.ВычетНДСПоНалоговомуАгенту);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВычетПриИзмененииСтоимостиВСторонуУменьшения") Тогда
		Объект.ВычетПриИзмененииСтоимостиВСторонуУменьшения.Загрузить(СтруктураДанных.ВычетПриИзмененииСтоимостиВСторонуУменьшения);
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Проведение);
	
	// формирование книги продаж
	Объект = Документы.ФормированиеЗаписейКнигиПродаж.СоздатьДокумент();
	Объект.Организация = Организация;
	Объект.Дата = ПериодРегистрации;
	
	СтруктураПараметров = Новый Структура("ИмяТабЧасти,Дата,Организация,Реализация0",
		Неопределено, ПериодРегистрации, Организация, Объект.Реализация0);
	

	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Документы.ФормированиеЗаписейКнигиПродаж.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураДанных.Свойство("Реализация") Тогда
		Объект.Реализация.Загрузить(СтруктураДанных.Реализация);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Авансы") Тогда
		Объект.Авансы.Загрузить(СтруктураДанных.Авансы);
	КонецЕсли;
	Если СтруктураДанных.Свойство("НачисленКУплате") Тогда
		Объект.НачисленКУплате.Загрузить(СтруктураДанных.НачисленКУплате);
	КонецЕсли;
	Если СтруктураДанных.Свойство("ВосстановленПоАвансам") Тогда
		Объект.ВосстановленПоАвансам.Загрузить(СтруктураДанных.ВосстановленПоАвансам);
	КонецЕсли;
	Если СтруктураДанных.Свойство("Восстановлен") Тогда
		Объект.Восстановлен.Загрузить(СтруктураДанных.Восстановлен);
	КонецЕсли;
	Если СтруктураДанных.Свойство("НеОтражаетсяВКниге") Тогда
		Объект.НеОтражаетсяВКниге.Загрузить(СтруктураДанных.НеОтражаетсяВКниге);
	КонецЕсли;
	
	Объект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура СкорректироватьЗаполнениеВедомости(ДокументОбъект, СписокОшибок, Ошибка)
	
	Попытка
		
		МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
		ПараметрыЗаполнения = МенеджерВедомости.ПараметрыЗаполненияПоОбъекту(ДокументОбъект);
		
		ЗарплатаИсходная = ДокументОбъект.Зарплата.Выгрузить();
		
		МестоВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			МестоВыплаты = ДокументОбъект.ВидМестаВыплаты;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(МестоВыплаты) Тогда
			МестоВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
		КонецЕсли;
		
		МестаВыплатыЗарплаты = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
		Для Каждого СтрокаТаблицы ИЗ ЗарплатаИсходная Цикл
			ЗаполнитьЗначенияСвойств(МестаВыплатыЗарплаты, СтрокаТаблицы);
			МестаВыплатыЗарплаты.Прочитать();
			Если МестаВыплатыЗарплаты.Вид <> МестоВыплаты Тогда
				ЗаполнитьЗначенияСвойств(МестаВыплатыЗарплаты, СтрокаТаблицы);
				МестаВыплатыЗарплаты.Вид = МестоВыплаты;
				МестаВыплатыЗарплаты.Записать();
			КонецЕсли;
		КонецЦикла;
		
		ЗарплатаНовая = ВедомостьНаВыплатуЗарплаты.ЗарплатаКВыплате(
			ПараметрыЗаполнения.ОписаниеОперации,
			ПараметрыЗаполнения.ОтборСотрудников,
			ПараметрыЗаполнения.ПараметрыРасчетаЗарплаты,
			ПараметрыЗаполнения.Финансирование,
			ДокументОбъект.Ссылка);
		
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы ИЗ ЗарплатаНовая Цикл
			НайденныеСтроки = ЗарплатаИсходная.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник));
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			ЗарплатаНовая.Удалить(СтрокаКУдалению);
		КонецЦикла;
		Для Каждого СтрокаТаблицы ИЗ ЗарплатаИсходная Цикл
			НайденныеСтроки = ЗарплатаНовая.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТаблицы.Сотрудник));
			Если НайденныеСтроки.Количество() = 0 Тогда
				Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
					ЗаполнитьЗначенияСвойств(ЗарплатаНовая.Добавить(), НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.ЗагрузитьВыплаты(ЗарплатаНовая, ДокументОбъект.НДФЛ.Выгрузить());
		
		Зарплата               = ДокументОбъект.Зарплата.Выгрузить();
		ТаблицаИдентификаторов = ДокументОбъект.Зарплата.Выгрузить();
		ТаблицаИдентификаторов.Свернуть("ИдентификаторСтроки, Сотрудник");
		Для Каждого СтрокаТаблицыИдентификаторов ИЗ ТаблицаИдентификаторов Цикл
			ИсходныеСтроки = ЗарплатаИсходная.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТаблицыИдентификаторов.Сотрудник));
			КВыплатеСумма = 0;
			Для Каждого ИсхонаяСтрока ИЗ ИсходныеСтроки Цикл
				КВыплатеСумма = КВыплатеСумма + ИсхонаяСтрока.Квыплате;
			КонецЦикла;
			
			ЗарплатаСтрокиСостава = Зарплата.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТаблицыИдентификаторов.ИдентификаторСтроки));
			ЗарплатаКадры.РазнестиСуммуПоБазе(КВыплатеСумма, ЗарплатаСтрокиСостава, "КВыплате");
		КонецЦикла;
		
		НДФЛ = ВедомостьНаВыплатуЗарплаты.НалогиКУдержанию(
			Зарплата, 
			ПараметрыЗаполнения.ОписаниеОперации, 
			ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ, 
			ПараметрыЗаполнения.Финансирование,
			ДокументОбъект.Ссылка);
			
		Если Зарплата.Колонки.Найти("НомерЛицевогоСчета") <> Неопределено Тогда
			Зарплата.Колонки.Удалить("НомерЛицевогоСчета");
		КонецЕсли;
		
		ДокументОбъект.ЗагрузитьВыплаты(Зарплата, НДФЛ);
		
		Если ДокументОбъект.ПометкаУдаления Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
		
	Исключение
		Ошибка = Истина;
					
		ШаблонСообщения = НСтр("ru = 'Документ %1 не записан!
		| По причине: %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
					
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);					
		Исключение
			ШаблонСообщения = НСтр("ru = 'Документ %1 не удалось отменить проведение!
			| По причине: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура проверки данных

Процедура ПроверитьДанные(ПараметрыПроверки, АдресХранилища,РезультатВыполнения = Неопределено) Экспорт
	
	
	ВебКлиент = Ложь;
	Если ПараметрыПроверки.Свойство("ВебКлиент") Тогда
		ВебКлиент = ПараметрыПроверки.ВебКлиент;
	КонецЕсли;
	
	ИдентификаторКонфигурации = ПараметрыПроверки.ИдентификаторКонфигурации;
	СписокОшибок = ПараметрыПроверки.СписокОшибок;
	
	Если НЕ ИдентификаторКонфигурации = "BU42TK" 
		И НЕ ИдентификаторКонфигурации = "BASUOR" 
		И НЕ ИдентификаторКонфигурации = "PBOUL" Тогда
		
		ТекстСообщения = Нстр("ru = 'Для выбранной конфигурации проверка данных не поддерживается'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		СписокОшибок.Добавить(ТекстСообщения);
		Ошибка = Истина;
		Если НЕ ВебКлиент Тогда
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Ошибка);
		Иначе
			РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка", Ошибка);
			РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		РезультатПроверки = Новый СписокЗначений;		
		Если ИдентификаторКонфигурации = "BU42TK" Тогда
			ПроверитьДанныеПереносаИзБухгалтерии(ПараметрыПроверки, РезультатПроверки);
		ИначеЕсли ИдентификаторКонфигурации = "BASUOR" Тогда
			ПроверитьДанныеПереносаИзУСН(ПараметрыПроверки, РезультатПроверки);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = Нстр("ru = 'Не удалось провести проверку данных'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		СписокОшибок.Добавить(ТекстСообщения);
		Ошибка = Истина;
		Если НЕ ВебКлиент Тогда
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Ошибка);
		Иначе
			РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка", Ошибка);
			РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		Возврат;
		
	КонецПопытки;
	
	Если РезультатПроверки.Количество() <> 0 Тогда
		Ошибка = Истина;
		Для Каждого ОписаниеОшибки ИЗ РезультатПроверки Цикл				
			СписокОшибок.Добавить(ОписаниеОшибки.Значение);				
		КонецЦикла;			
	КонецЕсли;
	
	Если НЕ ВебКлиент Тогда
		РезультатВыполнения = Новый Структура("ТекстСообщения, СписокОшибок, Ошибка", ТекстСообщения, СписокОшибок, Ошибка);
	Иначе
		РезультатВыполнения.Вставить("Ошибка", Ошибка);
		РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
		РезультатВыполнения.Вставить("ЭтапКонвертации", "Проверка данных");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверитьДанныеПереносаИзБухгалтерии(ПараметрыПроверки, СписокОшибок)
	
	НачПериода     = ПараметрыПроверки.НачалоПериодаВыгрузки;	
	КонПериода     = ПараметрыПроверки.ОкончаниеПериодаВыгрузки;
	Организация    = ПараметрыПроверки.Организация;
	СписокИменБП   = ПараметрыПроверки.КонрольныеДанные;
	СписокДанныхБП = ПараметрыПроверки.КонрольныеЗначения;
	ЕстьОстатки    = ПараметрыПроверки.ЕстьОстатки;
	ЕстьОбороты    = ПараметрыПроверки.ЕстьОбороты;
	ЕстьДокументы  = ПараметрыПроверки.ЕстьДокументы;
		
	Если НЕ ЕстьОстатки И НЕ ЕстьОбороты И НЕ ЕстьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	
	//Преобразуем строки в многострочную часть
	СписокИмен = СтрЗаменить(СписокИменБП, ",", Символы.ПС);
	СписокДанных = СтрЗаменить(СписокДанныхБП, ",", Символы.ПС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	//********************************************************
	// Итоговая сверка
	
	ВсегоСНД = 0;
	ВсегоСНК = 0;
	ВсегоДО	= 0;
	ВсегоКО	= 0;
	ВсегоСКД = 0;
	ВсегоСКК = 0;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(СписокИмен) Цикл
		Если Лев(СтрПолучитьСтроку(СписокИмен, НомерСтроки),3) = "СНД"  Тогда
			ВсегоСНД	= ВсегоСНД + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки));
			ВсегоСНК	= ВсегоСНК + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+1));
			ВсегоДО		= ВсегоДО + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+2));
			ВсегоКО		= ВсегоКО + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+3));
			ВсегоСКД	= ВсегоСКД + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+4));
			ВсегоСКК	= ВсегоСКК + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+5));
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			,
	|			НЕ Счет.Забалансовый
	|				И Счет.Код <> ""000""
	|				И НЕ Счет.ЗапретитьИспользоватьВПроводках,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый = ЛОЖЬ
	|	И ХозрасчетныйОстаткиИОбороты.Счет.Код <> ""000""
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет
	|ИТОГИ ПО
	|	Счет ИЕРАРХИЯ";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ЕстьОстатки Тогда
		
		ТекстСообщения = НСтр("ru = 'Проверка итогового начального сальдо'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Результат.Строки.Итог("СуммаНачальныйОстатокДт") <> ВсегоСНД  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое начальное сальдо по дебету
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСНД, Результат.Строки.Итог("СуммаНачальныйОстатокДт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового начального сальдо по дебету прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Результат.Строки.Итог("СуммаНачальныйОстатокКт") <> ВсегоСНК  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое начальное сальдо по кредиту
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСНК, Результат.Строки.Итог("СуммаНачальныйОстатокКт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового начального сальдо по кредиту прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОбороты ИЛИ ЕстьДокументы Тогда
		
		ТекстСообщения = НСтр("ru = 'Проверка итоговых оборотов за период'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Результат.Строки.Итог("СуммаОборотДт") <> ВсегоДО  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговый оборот по дебету
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоДО, Результат.Строки.Итог("СуммаОборотДт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итоговых оборотов по дебету прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Результат.Строки.Итог("СуммаОборотКт") <> ВсегоКО  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговый оборот по кредиту
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоКО, Результат.Строки.Итог("СуммаОборотКт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итоговых оборотов по кредиту прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		
		ТекстСообщения = НСтр("ru = 'Проверка итогового конечного сальдо'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Результат.Строки.Итог("СуммаКонечныйОстатокДт") <> ВсегоСКД  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое конечное сальдо по дебету
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСКД, Результат.Строки.Итог("СуммаКонечныйОстатокДт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового конечного сальдо по дебету прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Результат.Строки.Итог("СуммаКонечныйОстатокКт") <> ВсегоСКК  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое конечное сальдо по кредиту
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСКК, Результат.Строки.Итог("СуммаКонечныйОстатокКт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового конечного сальдо по кредиту прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	//********************************************************
	// Сверка по счетам
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачПериода, &КонПериода, , , , , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый = ЛОЖЬ
	|	И ХозрасчетныйОстаткиИОбороты.Счет.Код <> ""000""
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет
	|ИТОГИ
	|	СУММА(СуммаНачальныйОстатокДт),
	|	СУММА(СуммаНачальныйОстатокКт),
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаКонечныйОстатокДт),
	|	СУММА(СуммаКонечныйОстатокКт)
	|ПО
	|	Счет ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрокаРезультата ИЗ Результат.Строки Цикл
		Найден = Ложь;
		
		// В строке имен найдем номер строки с которой начинаем проверку счетов соответствующих БП
		Для НомерСтроки = 1 По СтрЧислоСтрок(СписокИмен) Цикл
			Если СтрПолучитьСтроку(СписокИмен, НомерСтроки) = "СНД" + СокрЛП(СтрокаРезультата.Счет.Код) Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найден Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка итогов по найденному счету
		
		СНД		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки));
		СНК		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+1));
		ДО		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+2));
		КО		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+3));
		СКД		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+4));
		СКК		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+5));
		
		Если ЕстьОстатки Тогда
			ШаблонСообщения = НСтр("ru = 'Проверка начального сальдо для счета %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если СтрокаРезультата.СуммаНачальныйОстатокДт <> СНД Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает начальное сальдо по дебету счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СНД, СтрокаРезультата.СуммаНачальныйОстатокДт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка начального сальдо по дебету для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаРезультата.СуммаНачальныйОстатокКт <> СНК Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает начальное сальдо по кредиту счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СНК, СтрокаРезультата.СуммаНачальныйОстатокКт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка начального сальдо по кредиту для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОбороты ИЛИ ЕстьДокументы Тогда
			ШаблонСообщения = НСтр("ru = 'Проверка оборотов за период для счета %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если СтрокаРезультата.СуммаОборотДт <> ДО Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает оборот по дебету счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				ДО, СтрокаРезультата.СуммаОборотДт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка оборотов по дебету для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаРезультата.СуммаОборотКт <> КО Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает оборот по кредиту счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				КО, СтрокаРезультата.СуммаОборотКт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка оборотов по кредиту для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Проверка конечного сальдо для счета %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если СтрокаРезультата.СуммаКонечныйОстатокДт <> СКД Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает конечное сальдо по дебету счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СКД, СтрокаРезультата.СуммаКонечныйОстатокДт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка конечного сальдо по дебету для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаРезультата.СуммаКонечныйОстатокКт <> СКК Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает конечное сальдо по кредиту счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СКК, СтрокаРезультата.СуммаКонечныйОстатокКт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка конечного сальдо по кредиту для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДанныеПереносаИзУСН(ПараметрыПроверки, СписокОшибок)
	
	НачПериода     = ПараметрыПроверки.НачалоПериодаВыгрузки;	
	КонПериода     = ПараметрыПроверки.ОкончаниеПериодаВыгрузки;
	Организация    = ПараметрыПроверки.Организация;
	СписокИменБП   = ПараметрыПроверки.КонрольныеДанные;
	СписокДанныхБП = ПараметрыПроверки.КонрольныеЗначения;
	ЕстьОстатки    = ПараметрыПроверки.ЕстьОстатки;
	ЕстьОбороты    = ПараметрыПроверки.ЕстьОбороты;
	ЕстьДокументы  = ПараметрыПроверки.ЕстьДокументы;
	
	Если НЕ ЕстьОстатки И НЕ ЕстьОбороты И НЕ ЕстьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	
	//Преобразуем строки в многострочную часть
	СписокИмен = СтрЗаменить(СписокИменБП, ",", Символы.ПС);
	СписокДанных = СтрЗаменить(СписокДанныхБП, ",", Символы.ПС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(НачПериода));
	Запрос.УстановитьПараметр("Период",     КонецДня(КонецКвартала(КонПериода)));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	//********************************************************
	// Итоговая сверка
	
	ВсегоСНД = 0;
	ВсегоСНК = 0;
	ВсегоДО	= 0;
	ВсегоКО	= 0;
	ВсегоСКД = 0;
	ВсегоСКК = 0;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(СписокИмен) Цикл
		Если Лев(СтрПолучитьСтроку(СписокИмен, НомерСтроки),3) = "СНД"  Тогда
			ВсегоСНД	= ВсегоСНД + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки));
			ВсегоСНК	= ВсегоСНК + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+1));
			ВсегоДО		= ВсегоДО + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+2));
			ВсегоКО		= ВсегоКО + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+3));
			ВсегоСКД	= ВсегоСКД + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+4));
			ВсегоСКК	= ВсегоСКК + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+5));
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			,
	|			НЕ Счет.Забалансовый
	|				И Счет.Код <> ""000""
	|				И НЕ Счет.ЗапретитьИспользоватьВПроводках,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый = ЛОЖЬ
	|	И ХозрасчетныйОстаткиИОбороты.Счет.Код <> ""000""
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет
	|ИТОГИ ПО
	|	Счет ИЕРАРХИЯ";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ЕстьОстатки Тогда
		
		ТекстСообщения = НСтр("ru = 'Проверка итогового начального сальдо'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Результат.Строки.Итог("СуммаНачальныйОстатокДт") <> ВсегоСНД  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое начальное сальдо по дебету
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСНД, Результат.Строки.Итог("СуммаНачальныйОстатокДт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового начального сальдо по дебету прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Результат.Строки.Итог("СуммаНачальныйОстатокКт") <> ВсегоСНК  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое начальное сальдо по кредиту
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСНК, Результат.Строки.Итог("СуммаНачальныйОстатокКт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового начального сальдо по кредиту прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОбороты ИЛИ ЕстьДокументы Тогда
		
		ТекстСообщения = НСтр("ru = 'Проверка итоговых оборотов за период'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Результат.Строки.Итог("СуммаОборотДт") <> ВсегоДО  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговый оборот по дебету
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоДО, Результат.Строки.Итог("СуммаОборотДт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итоговых оборотов по дебету прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Результат.Строки.Итог("СуммаОборотКт") <> ВсегоКО  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговый оборот по кредиту
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоКО, Результат.Строки.Итог("СуммаОборотКт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итоговых оборотов по кредиту прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		
		ТекстСообщения = НСтр("ru = 'Проверка итогового конечного сальдо'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Результат.Строки.Итог("СуммаКонечныйОстатокДт") <> ВсегоСКД  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое конечное сальдо по дебету
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСКД, Результат.Строки.Итог("СуммаКонечныйОстатокДт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового конечного сальдо по дебету прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Результат.Строки.Итог("СуммаКонечныйОстатокКт") <> ВсегоСКК  Тогда
			ШаблонСообщения = НСтр("ru = 'Не совпадает итоговое конечное сальдо по кредиту
			|	Значение в базе-источнике: %1
			|	Значение в базе-приемнике: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСКК, Результат.Строки.Итог("СуммаКонечныйОстатокКт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru = 'Проверка итогового конечного сальдо по кредиту прошла успешно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	//********************************************************
	// Сверка по счетам
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачПериода, &КонПериода, , , , , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый = ЛОЖЬ
	|	И ХозрасчетныйОстаткиИОбороты.Счет.Код <> ""000""
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет
	|ИТОГИ
	|	СУММА(СуммаНачальныйОстатокДт),
	|	СУММА(СуммаНачальныйОстатокКт),
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаКонечныйОстатокДт),
	|	СУММА(СуммаКонечныйОстатокКт)
	|ПО
	|	Счет ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрокаРезультата ИЗ Результат.Строки Цикл
		Найден = Ложь;
		
		// В строке имен найдем номер строки с которой начинаем проверку счетов соответствующих БП
		Для НомерСтроки = 1 По СтрЧислоСтрок(СписокИмен) Цикл
			Если СтрПолучитьСтроку(СписокИмен, НомерСтроки) = "СНД" + СокрЛП(СтрокаРезультата.Счет.Код) Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найден Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка итогов по найденному счету
		
		СНД		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки));
		СНК		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+1));
		ДО		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+2));
		КО		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+3));
		СКД		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+4));
		СКК		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+5));
		
		Если ЕстьОстатки Тогда
			ШаблонСообщения = НСтр("ru = 'Проверка начального сальдо для счета %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если СтрокаРезультата.СуммаНачальныйОстатокДт <> СНД Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает начальное сальдо по дебету счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СНД, СтрокаРезультата.СуммаНачальныйОстатокДт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка начального сальдо по дебету для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаРезультата.СуммаНачальныйОстатокКт <> СНК Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает начальное сальдо по кредиту счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СНК, СтрокаРезультата.СуммаНачальныйОстатокКт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка начального сальдо по кредиту для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОбороты ИЛИ ЕстьДокументы Тогда
			ШаблонСообщения = НСтр("ru = 'Проверка оборотов за период для счета %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если СтрокаРезультата.СуммаОборотДт <> ДО Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает оборот по дебету счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				ДО, СтрокаРезультата.СуммаОборотДт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка оборотов по дебету для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаРезультата.СуммаОборотКт <> КО Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает оборот по кредиту счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				КО, СтрокаРезультата.СуммаОборотКт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка оборотов по кредиту для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Проверка конечного сальдо для счета %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если СтрокаРезультата.СуммаКонечныйОстатокДт <> СКД Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает конечное сальдо по дебету счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СКД, СтрокаРезультата.СуммаКонечныйОстатокДт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка конечного сальдо по дебету для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаРезультата.СуммаКонечныйОстатокКт <> СКК Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает конечное сальдо по кредиту счета %1
				|	Значение в базе-источнике: %2
				|	Значение в базе-приемнике: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СКК, СтрокаРезультата.СуммаКонечныйОстатокКт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Проверка конечного сальдо по кредиту для счета %1 прошла успешно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//********************************************************
	// Сверка КУДиР
	Если ЕстьОбороты ИЛИ ЕстьДокументы Тогда
		
		ТекстСообщения = НСтр("ru = 'Проверка данных Книги учета доходов и расходов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот КАК Графа4,
		|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Графа5,
		|	КнигаУчетаДоходовИРасходовОбороты.Графа6Оборот КАК Графа6,
		|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Графа7,
		|	КнигаУчетаДоходовИРасходовОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоГода, &Период, Квартал, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		// В строке имен найдем номер строки с которой начинаем проверку записей КУДиР соответствующих БП
		Найден = Ложь;
		Для НомерСтроки = 1 По СтрЧислоСтрок(СписокИмен) Цикл
			Если СтрПолучитьСтроку(СписокИмен, НомерСтроки) = "ДоходыБУ" Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Найден Тогда
			
			Графа4		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки));
			Графа5		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+1));
			Графа6		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+2));
			Графа7		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+3));
			
			Если Результат.Итог("Графа4") <> Графа4 Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает сумма доходов:
				|	Значение в базе-источнике: %1
				|	Значение в базе-приемнике: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Графа4,
				Результат.Итог("Графа4"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Проверка суммы доходов прошла успешно'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если Результат.Итог("Графа5") <> Графа5 Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает сумма принимаемых доходов:
				|	Значение в базе-источнике: %1
				|	Значение в базе-приемнике: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Графа5,
				Результат.Итог("Графа5"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Проверка суммы принимаемых доходов прошла успешно'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если Результат.Итог("Графа6") <> Графа6 Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает сумма расходов:
				|	Значение в базе-источнике: %1
				|	Значение в базе-приемнике: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Графа6,
				Результат.Итог("Графа6"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Проверка суммы расходов прошла успешно'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если Результат.Итог("Графа7") <> Графа7 Тогда
				ШаблонСообщения = НСтр("ru = 'Не совпадает сумма принимаемых расходов:
				|	Значение в базе-источнике: %1
				|	Значение в базе-приемнике: %2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Графа7,
				Результат.Итог("Графа7"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Проверка суммы принимаемых расходов прошла успешно'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура печати отчета

Процедура ПолучитьОтчетОбОшибках(ОтчетОбОшибках, ИмяИБ = "", ПутьКИБ = "", ИмяФайлаВыгруженныхДанных = "", ТаблицаОшибок) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.СписокОшибок");	

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если ЗначениеЗаполнено(ИмяИБ) Тогда
		ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = ПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = "Файл данных";
		ОбластьШапка.Параметры.ПутьКИБ = ИмяФайлаВыгруженныхДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап = СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации = СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка = СтрокаТаблицы.Расшифровка;

		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры


#КонецЕсли