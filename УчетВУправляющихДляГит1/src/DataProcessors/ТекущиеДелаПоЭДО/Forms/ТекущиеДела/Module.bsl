
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	ИнициализироватьДерево();
	
	ИнициализироватьРазделы();
	Элементы.ПанельСписков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	АдресКэшаРасчетов = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	
	РежимОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "РежимОтображения", "ВсеДокументы");
	ОбновитьЗаголовокФормы();
	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);
	
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаПодписать.Заголовок = НСтр("ru = 'Подписать'");
		Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать и подписать'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать, подписать и подготовить к отправке
			|выделенные электронные документы'");
		Если НЕ ИспользоватьЭП Тогда
			Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать и подготовить к отправке
				|выделенные электронные документы'");
		КонецЕсли;
	ИначеЕсли НЕ ИспользоватьЭП Тогда
		Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать и отправить'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать и отправить
			|выделенные электронные документы'");
	КонецЕсли;
	
	СформироватьТаблицуБыстрогоОтбора();
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр И ЭлементОтбора.Тип = ЭлементКоллекции.Тип Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НедоступныеКоманды = Новый СписокЗначений;
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		
		НедоступныеКоманды.Добавить("ЗакрытьПринудительно");
		НедоступныеКоманды.Добавить("Перенаправить");
		НедоступныеКоманды.Добавить("УтвердитьЭД");
		НедоступныеКоманды.Добавить("ПодписатьВх");
		НедоступныеКоманды.Добавить("ПодписатьИсх");
		НедоступныеКоманды.Добавить("ОтклонитьПодписаниеИсх");
		НедоступныеКоманды.Добавить("Аннулировать");
		НедоступныеКоманды.Добавить("ОтклонитьАннулирование");
		НедоступныеКоманды.Добавить("ИзменитьДокумент");
		НедоступныеКоманды.Добавить("СформироватьЭД");
		НедоступныеКоманды.Добавить("ОтправитьПакеты");
		НедоступныеКоманды.Добавить("ОтменитьПакеты");
		НедоступныеКоманды.Добавить("РаспаковатьПакеты");
		НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьВх");
		НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьИсх");
		НедоступныеКоманды.Добавить("СформироватьПодписатьИОтправить");
		
	КонецЕсли;
	
	НастроитьСпискиРазделов();
	ОбновитьНавигациюПоРазделамНаСервере(Истина, Ложь);
	
	ПоказатьРаздел("Входящие");
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Сформировать.Дата", "СформироватьЭДДата");
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД"
		Или ИмяСобытия = "ОбновитьТекущиеДелаЭДО" Тогда
		
		ОбновитьНавигациюПоРазделам();
		ОбновитьОтображениеДанных();
		РазблокироватьЗаблокированныеЭлементыФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьСкрытьБыстрыйПоиск();
	ОбменСКонтрагентамиСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранитьОтборы(ИмяФормы, "Отборы", БыстрыеОтборы);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "РежимОтображения", РежимОтображения);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьНавигациюПоРазделамНаСервере(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСсылкаИдеяНажатие(Элемент)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСтраницуОпроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораНажатие(Элемент)
	
	ПоказатьБыстрыйПоиск = Не ПоказатьБыстрыйПоиск;
	ПоказатьСкрытьБыстрыйПоиск();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = БыстрыеОтборы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтрНайти(Поле.Имя, "Кнопка") <> 0 Тогда
		
		ИмяСписка = СписокРаздела(ТекущийРаздел);
		Список = ЭтотОбъект[ИмяСписка];
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Раздел", ТекущийРаздел);
		
		Оповещение = Новый ОписаниеОповещения("ПриОкончанииНастройкиСписка", ЭтотОбъект, ДопПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Настройка списка'"));
		ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", Список.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
		ПараметрыФормы.Вставить("Настройки", Список.КомпоновщикНастроек.Настройки);
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", Список.КомпоновщикНастроек.ПользовательскиеНастройки);
		ПараметрыФормы.Вставить("ФиксированныеНастройки", Список.КомпоновщикНастроек.ФиксированныеНастройки);
		
		ОткрытьФорму("Обработка.ТекущиеДелаПоЭДО.Форма.ФормаНастройкиСписка", 
			ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		ДанныеВыбора = СписокАктуальныхВидовЭД();
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйРаздел = Элемент.ТекущиеДанные.Значение;
	Если НовыйРаздел <> ТекущийРаздел Тогда
		ПриИзмененииРаздела(НовыйРаздел);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеЭД

&НаКлиенте
Процедура ВходящиеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаЭД = Элемент.ДанныеСтроки(ВыбраннаяСтрока).Ссылка;
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеЭД

&НаКлиенте
Процедура ИсходящиеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СсылкаНаЭД = Элемент.ДанныеСтроки(ВыбраннаяСтрока).Ссылка;
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(СсылкаНаЭД);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформироватьЭД

&НаКлиенте
Процедура СформироватьЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭДПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриглашенияЭД

&НаКлиенте
Процедура ПриглашенияЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаЭДО", ВыбраннаяСтрока);
	ПараметрыФормы.Вставить("ФормаОткрытаИзНастройкиЭДО", Ложь);
	ОткрытьФорму("Справочник.УдалитьСоглашенияОбИспользованииЭД.Форма.ФормаПриглашения", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОзнакомитьсяЭД

&НаКлиенте
Процедура ОзнакомитьсяЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	ПоказатьЗначение(, Данные.ЭлектронныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьРежимПросмотра(Команда)
	
	ПараметрыФормы = Новый Структура("РежимОтображения", РежимОтображения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРежимПросмотраОкончание", ЭтотОбъект);
	ОткрытьФорму("Обработка.ТекущиеДелаПоЭДО.Форма.ФормаВыбораРежимаПросмотра", ПараметрыФормы, ЭтотОбъект, 
		УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНавигациюПоРазделам();
	РазблокироватьЗаблокированныеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьПолучитьОбменСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокумент(Команда)
	
	Если Элементы.СформироватьЭД.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.СформироватьЭД.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененПакета(Команда)
	
	УстановитьСтатусОтменен(Элементы.ПакетыЭД.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.РаспаковатьПакетыЭДНаКлиенте(Элементы.ПакетыЭД.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.СформироватьЭД.ВыделенныеСтроки);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьУтвердитьПодписатьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.СформироватьЭД.ВыделенныеСтроки);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьПоказать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	Если ТекущийРаздел = "Сформировать" Тогда
		МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Документ");
	Иначе
		МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ВладелецЭД");
	КонецЕсли;
	
	ОбменСКонтрагентамиКлиент.ЗакрытьПринудительноЭДО(МассивСсылок);
	
	ОбновитьНавигациюПоРазделам();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(Неопределено, "УтвердитьОтправить", , МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	Если Элементы.ВходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаПодписать.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПодписать");
		ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьИсх(Команда)
	
	Если Элементы.ИсходящиеЭД.ВыделенныеСтроки.Количество() Тогда 
		Элементы.КомандаПодписатьИсх.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПодписатьИсх");
		ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписатьИсх", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеИсх(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьПодписаниеИсхОповещение", ЭтотОбъект);
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	Если МассивСсылок.Количество() > 0 Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(МассивСсылок, Истина,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)
	
	Если Элементы.ВходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправить.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаУтвердитьПодписатьИОтправить");
		ПодключитьОбработчикОжидания("ВыполнитьУтвердитьПодписатьИОтправить", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправитьИсх(Команда)
	
	Если Элементы.ИсходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправитьИсх.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаУтвердитьПодписатьИОтправитьИсх");
		ПодключитьОбработчикОжидания("ВыполнитьУтвердитьПодписатьИОтправитьИсх", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакеты(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы(
				"РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивЭД", Элементы.ПакетыЭД.ВыделенныеСтроки);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправитьПакетыОповещение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	РазвернутыеРазделы = ПолучитьРазвернутыеРазделы(ДеревоДействий);
	
	СброситьОтборНаСервере();
	
	РазвернутьРазделы(РазвернутыеРазделы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ПриглашенияЭД.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтправитьПриглашениеОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения, МассивПрофилейНастроекЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ПриглашенияЭД.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ПринятьПриглашенияОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения, МассивПрофилейНастроекЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	ОчиститьСообщения();
	
	МассивНастроекЭДО = Элементы.ПриглашенияЭД.ВыделенныеСтроки;
	МассивПрофилейНастроекЭДО = ПрофилиНастроекЭДО(МассивНастроекЭДО);
	
	Если Не ЗначениеЗаполнено(МассивПрофилейНастроекЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОповещения = Новый ОписаниеОповещения("ОтклонитьПриглашенияОповещение", ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработкаОповещения, МассивПрофилейНастроекЭДО);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭДО(Команда)
	
	ОбменСКонтрагентамиКлиент.ОткрытьФормуНастроекЭДОСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивЭДО(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.АрхивЭлектронныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ОбработатьПредложениеОбАннулировании(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОбработатьПредложениеОбАннулировании(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ИмяТаблицы = ТаблицаРаздела(ТекущийРаздел);
	
	ТекущаяТаблица = Элементы[ИмяТаблицы];
	Если ТипЗнч(ТекущаяТаблица) = Тип("ТаблицаФормы")
		И ТекущаяТаблица.ВыделенныеСтроки.Количество() > 0 Тогда
		
		МассивЭД = Новый Массив;
		Если ТекущаяТаблица = Элементы.ОзнакомитьсяЭД Тогда
			
			Строки = ТекущаяТаблица.ВыделенныеСтроки;
			ВыделенныеДокументы = ЭлектронныеДокументыНаОзнакомление(Строки);
			МассивЭД = ФайлыЭлектронныхДокументов(ВыделенныеДокументы);
			
		ИначеЕсли ТекущаяТаблица = Элементы.ВходящиеЭД
			ИЛИ ТекущаяТаблица = Элементы.ИсходящиеЭД Тогда
			
			МассивЭД = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
			
		Иначе
			МассивЭД = ТекущаяТаблица.ВыделенныеСтроки;
		КонецЕсли;
		
		УстановитьОтветственного(МассивЭД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьИнструкциюПо1СБухфон();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)
	
	Строки = Элементы.ОзнакомитьсяЭД.ВыделенныеСтроки;
	
	ВыделенныеДокументы = ЭлектронныеДокументыНаОзнакомление(Строки);
	
	ОтправитьВАрхивНаСервере(ВыделенныеДокументы);
	
	ОбновитьНавигациюПоРазделам();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСРазделами

///////////////////////////////////////////////////////////////////////////////////////////////////
// Описание, реквизиты, команды и элементы разделов.

&НаСервере 
Процедура ИнициализироватьРазделы()
	
	ДобавитьОписаниеРаздела("Входящие", НСтр("ru = 'Входящие'"), , Ложь);
	ДобавитьОписаниеРаздела("Обработать", НСтр("ru = 'Отразить в учете'"));
	ДобавитьОписаниеРаздела("Утвердить", НСтр("ru = 'Утвердить'"));
	ДобавитьОписаниеРаздела("Подписать", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела("Исправить", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела("Аннулировать", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела("НаКонтроле", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела("Исходящие", НСтр("ru = 'Исходящие'"), , Ложь);
	ДобавитьОписаниеРаздела("Сформировать", НСтр("ru = 'Создать'"));
	ДобавитьОписаниеРаздела("ПодписатьИсх", НСтр("ru = 'Подписать'"));
	ДобавитьОписаниеРаздела("ИсправитьИсх", НСтр("ru = 'Исправить'"));
	ДобавитьОписаниеРаздела("АннулироватьИсх", НСтр("ru = 'Аннулировать'"));
	ДобавитьОписаниеРаздела("НаКонтролеИсх", НСтр("ru = 'На контроле'"));
	
	ДобавитьОписаниеРаздела("Ознакомиться", НСтр("ru = 'Ознакомиться'"));
	
	ДобавитьОписаниеРаздела("Отправить", НСтр("ru = 'Отправить'"));
	ДобавитьОписаниеРаздела("Распаковать", НСтр("ru = 'Распаковать'"));
	
	ДобавитьОписаниеРаздела("Приглашения", НСтр("ru = 'Приглашения'"), , Ложь);
	ДобавитьОписаниеРаздела("ТребуетсяПригласить", НСтр("ru = 'Требуется пригласить'"));
	ДобавитьОписаниеРаздела("ЖдемСогласия", НСтр("ru = 'Ждем согласия'"));
	ДобавитьОписаниеРаздела("ТребуетсяСогласие", НСтр("ru = 'Требуется согласие'"));
	
КонецПроцедуры

&НаСервере
Функция ДобавитьОписаниеРаздела(Знач Имя, Знач Представление = "", Знач Видимость = Истина, Знач РассчитыватьКоличество = Истина) 
	
	НовыйРаздел = ОписаниеРазделов.Добавить();
	НовыйРаздел.Имя = Имя;
	НовыйРаздел.Представление = Представление;
	НовыйРаздел.Видимость = Видимость;
	НовыйРаздел.РассчитыватьКоличество = РассчитыватьКоличество;
	НовыйРаздел.КоличествоРассчитано = Ложь;
	
	Возврат НовыйРаздел;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокРаздела(Знач Раздел)
	
	СпискиРазделов = Новый Соответствие;
	СпискиРазделов.Вставить("Входящие", "ВходящиеЭД");
	СпискиРазделов.Вставить("Обработать", "ВходящиеЭД");
	СпискиРазделов.Вставить("Утвердить", "ВходящиеЭД");
	СпискиРазделов.Вставить("Подписать", "ВходящиеЭД");
	СпискиРазделов.Вставить("Исправить", "ВходящиеЭД");
	СпискиРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	СпискиРазделов.Вставить("НаКонтроле", "ВходящиеЭД");
	
	СпискиРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	СпискиРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");
	
	СпискиРазделов.Вставить("Сформировать", "Сформировать");
	
	СпискиРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");
	
	СпискиРазделов.Вставить("Отправить", "ПакетыЭД");
	СпискиРазделов.Вставить("Распаковать", "ПакетыЭД");
	
	СпискиРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	
	Список = СпискиРазделов.Получить(Раздел);
	
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтраницаРаздела(Знач Раздел)
	
	Страница = Неопределено;
	
	СтраницыРазделов = Новый Соответствие;
	СтраницыРазделов.Вставить("Входящие", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Обработать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Утвердить", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Подписать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Исправить", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("НаКонтроле", "ВходящиеЭД");
	
	СтраницыРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");
	
	СтраницыРазделов.Вставить("Сформировать", "СформироватьЭД");
	
	СтраницыРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");
	
	СтраницыРазделов.Вставить("Отправить", "ПакетыЭД");
	СтраницыРазделов.Вставить("Распаковать", "ПакетыЭД");
	
	СтраницыРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	
	Страница = СтраницыРазделов.Получить(Раздел);

	Если ЗначениеЗаполнено(Страница) Тогда
		Страница = "Страница" + СтраницыРазделов.Получить(Раздел);
	КонецЕсли;
	
	Возврат Страница;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаРаздела(Знач Раздел)
	
	ТаблицыРазделов = Новый Соответствие;
	ТаблицыРазделов.Вставить("Входящие", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Обработать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Утвердить", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Подписать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Исправить", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("НаКонтроле", "ВходящиеЭД");
	
	ТаблицыРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");
	
	ТаблицыРазделов.Вставить("Сформировать", "СформироватьЭД");
	
	ТаблицыРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");
	
	ТаблицыРазделов.Вставить("Отправить", "ПакетыЭД");
	ТаблицыРазделов.Вставить("Распаковать", "ПакетыЭД");
	
	ТаблицыРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	
	Таблица = ТаблицыРазделов.Получить(Раздел);
	
	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоляРаздела(Знач Раздел)
	
	ПоляТаблицыВходящие = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание";
	ПоляТаблицыИсходящие = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, Подписи, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание";
	ПоляТаблицыСформировать = "ВидДокумента, Дата, Номер, Документ, Контрагент, Организация, СуммаДокумента";
	ПоляТаблицыПакетыЭД = "Дата, Контрагент, Организация, Соглашение, СтатусПакета, Ссылка";
	ПоляТаблицыПриглашения = "Контрагент, ИдентификаторКонтрагента, Организация, СтатусПодключения, ЭлектроннаяПочта, ТекстПриглашения, ОписаниеОшибки";
	ПоляТаблицыОзнакомиться = "ВидЭД, Дата, Номер, СостояниеЭДО, Организация, Контрагент, ОзнакомитьсяЭДСуммаДокумента";
	
	ПоляТаблицы = "";
	ПоляРаздела = "";
	
	Если Раздел = "Входящие" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание";
		
	ИначеЕсли Раздел = "Обработать" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения";
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация";
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация";
		
	ИначеЕсли Раздел = "Исправить" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения";
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание";
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация";
		
	ИначеЕсли Раздел = "Исходящие" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание";
		
	ИначеЕсли Раздел = "Сформировать" Тогда
		
		ПоляТаблицы = ПоляТаблицыСформировать;
		ПоляРаздела = ПоляТаблицыСформировать;
		
	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, Подписи, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, Описание";
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание";
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание";
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		ПоляРаздела = "ВидЭД, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, Описание";
		
	ИначеЕсли Раздел = "Ознакомиться" Тогда
		
		ПоляТаблицы = ПоляТаблицыОзнакомиться;
		ПоляРаздела = ПоляТаблицыОзнакомиться;
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		ПоляТаблицы = ПоляТаблицыПакетыЭД;
		ПоляРаздела = "Дата, Контрагент, Организация, СтатусПакета, Ссылка";
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		ПоляТаблицы = ПоляТаблицыПакетыЭД;
		ПоляРаздела = "Дата, Контрагент, Организация, Соглашение, Ссылка";
		
	ИначеЕсли Раздел = "Приглашения" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, СтатусПодключения, ОписаниеОшибки";
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, ЭлектроннаяПочта, ТекстПриглашения, ОписаниеОшибки";
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, ЭлектроннаяПочта";
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, ИдентификаторКонтрагента, Организация";
		
	КонецЕсли;
	
	ПоляТаблицы = СтрЗаменить(ПоляТаблицы, " ", "");
	ПоляРаздела = СтрЗаменить(ПоляРаздела, " ", "");
	
	МассивПолеТаблицы = СтрРазделить(ПоляТаблицы, ",", Ложь);
	МассивПолейРаздела = СтрРазделить(ПоляРаздела, ",", Ложь);
	
	ВидимостьПолей = Новый Соответствие;
	Для каждого Поле Из МассивПолеТаблицы Цикл
		
		Видимость = (МассивПолейРаздела.Найти(Поле) <> Неопределено);
		ВидимостьПолей.Вставить(Поле, Видимость);
		
	КонецЦикла;
	
	Возврат ВидимостьПолей;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Настройка отображения разделов.

&НаСервере 
Функция НастройкиОтображенияРазделов() 
	
	СписокПользователей = Новый Массив;
	СписокПользователей.Добавить(ПользователиКлиентСервер.АвторизованныйПользователь());
	Если РежимОтображения <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	
	НастройкиОтображения = Новый Структура;
	НастройкиОтображения.Вставить("РежимОтображения", РежимОтображения);
	НастройкиОтображения.Вставить("СписокПользователей", СписокПользователей);
	
	Возврат НастройкиОтображения;
	
КонецФункции

&НаСервере
Процедура НастроитьСпискиРазделов()
	
	НастройкиОтображения = НастройкиОтображенияРазделов();
	
	УстановитьПараметрыСписковРазделов(НастройкиОтображения);
	
	СоздатьОтборПоРазделамВСпискахРазделов(НастройкиОтображения);
	
	СоздатьБыстрыйОтборВСпискахРазделов();
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьПараметрыСписковРазделов(Знач НастройкиОтображения)
	
	Форма = ЭтотОбъект;
	
	ОграничениеОтбора = Новый Массив;
	ОграничениеОтбора.Добавить("СписокПользователей");
	
	ИмяСписка = СписокРаздела("Входящие");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);
	
	ИмяСписка = СписокРаздела("Исходящие");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьБыстрыйОтборВСпискахРазделов() 
	
	ВсеСписки = Новый Массив;
	ВсеСписки.Добавить(ВходящиеЭД);
	ВсеСписки.Добавить(ИсходящиеЭД);
	ВсеСписки.Добавить(ПакетыЭД);
	ВсеСписки.Добавить(ПриглашенияЭД);
	ВсеСписки.Добавить(Сформировать);
	
	Для каждого Список Из ВсеСписки Цикл
		
		ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьОтборПоРазделамВСпискахРазделов(Знач НастройкиОтображения)
	
	// Исходящие
	Список = ИсходящиеЭД;
	
	Разделы = Новый Массив;
	Разделы.Добавить("ПодписатьИсх");
	Разделы.Добавить("ИсправитьИсх");
	Разделы.Добавить("АннулироватьИсх");
	Разделы.Добавить("НаКонтролеИсх");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Входящие
	Список = ВходящиеЭД;
	
	Разделы = Новый Массив;
	Разделы.Добавить("Обработать");
	Разделы.Добавить("Утвердить");
	Разделы.Добавить("Подписать");
	Разделы.Добавить("Исправить");
	Разделы.Добавить("Аннулировать");
	Разделы.Добавить("НаКонтроле");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Пакеты
	Список = ПакетыЭД;
	
	Разделы = Новый Массив;
	Разделы.Добавить("Отправить");
	Разделы.Добавить("Распаковать");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Приглашения
	Список = ПриглашенияЭД;
	
	Разделы = Новый Массив;
	Разделы.Добавить("ТребуетсяПригласить");
	Разделы.Добавить("ЖдемСогласия");
	Разделы.Добавить("ТребуетсяСогласие");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьГруппуОтбораПоРазделам(Знач Разделы, Знач НастройкиОтображения, Отбор)
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, "ОтборПоРазделам", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Для каждого Раздел Из Разделы Цикл
		
		ГруппаРаздел = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтборПоРазделам, "Раздел" + Раздел, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
		СоздатьОтборПоРазделу(Раздел, НастройкиОтображения, ГруппаРаздел);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура СоздатьОтборПоРазделу(Знач Раздел, Знач НастройкиОтображения, ГруппаОтбора)
	
	// Изменения в отборы вносить согласовано с текстами запросов количества элементов в разделе.
	// См. метод ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора.
	
	РежимОтображения = НастройкиОтображения.РежимОтображения;
	СписокПользователей = НастройкиОтображения.СписокПользователей;
	
	Если Раздел = "Обработать" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Ложь;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ЕстьОснование", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ВидЭД", Значение, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.Отклонен"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.Аннулирован"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НеСформирован"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаУтверждении"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		Если РежимОтображения = "МоиДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		// Группа: Вариант1 ИЛИ Вариант2
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Вариант 1
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		// Вариант 2
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИОП"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Утвержден");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СтатусЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "Исправить" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОшибкаПередачи"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяКорректировка"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		Если РежимОтображения = "МоиДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"НаПодпись", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		// Группа: Вариант1 ИЛИ Вариант2
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Вариант 1
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		// Вариант 2
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИОП"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Утвержден");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СтатусЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОшибкаПередачи"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяКорректировка"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Направление", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПакета", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Направление", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Неизвестный"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.КРаспаковке"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПакета", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Ошибка"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда 
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ОжидаемСогласия"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда 
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяСогласие"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора(Знач Раздел) 
	
	// Изменения в тексты запросов вносить согласовано с отборами по разделу.
	// См. метод СоздатьОтборПоРазделу.
	
	ТекстЗапроса = Неопределено;
	
	Если Раздел = "Обработать" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументВходящий.ПометкаУдаления)
		|	ГДЕ
		|		НЕ ЭлектронныйДокументВходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Аннулирован), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно))
		|		И НЕ ЭлектронныйДокументВходящий.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
		|		И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И НЕ 1 В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						1
		|					ИЗ
		|						Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|					ГДЕ
		|						ЭлектронныйДокументВходящий.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка)
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументВходящий.ПометкаУдаления)
		|	ГДЕ
		|		ЭлектронныйДокументВходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаУтверждении)
		|		И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументВходящий.ПометкаУдаления)
		|	ГДЕ
		|		(ЭлектронныйДокументВходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
		|					И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|				ИЛИ НЕ ЭлектронныйДокументВходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
		|					И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ))
		|					И ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))
		|		И (&РежимОтображения <> ""МоиДокументы""
		|				ИЛИ ЭлектронныйДокументВходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Исправить" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументВходящий.ПометкаУдаления)
		|	ГДЕ
		|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И ЭлектронныйДокументВходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент))
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументВходящий.ПометкаУдаления)
		|	ГДЕ
		|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И ЭлектронныйДокументВходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать)
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументВходящий.ПометкаУдаления)
		|	ГДЕ
		|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И ЭлектронныйДокументВходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяКорректировка), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора))
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументВходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Сформировать" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|	ГДЕ
		|		СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ПакетЭД
		|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
		|	ГДЕ
		|		(ЭлектронныйДокументИсходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
		|					И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|				ИЛИ НЕ ЭлектронныйДокументИсходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
		|					И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ))
		|					И ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))
		|		И 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.СостояниеПодписанияЭД КАК ЭДНаПодписи
		|				ГДЕ
		|					ЭДПрисоединенныеФайлы.Ссылка = ЭДНаПодписи.Объект
		|					И ЭДНаПодписи.Текущий
		|					И ЭДНаПодписи.Объект ССЫЛКА Справочник.ЭДПрисоединенныеФайлы
		|					И (&РежимОтображения <> ""КИсполнению""
		|						ИЛИ ЭДНаПодписи.Подписант В (&СписокПользователей)))
		|		И (&РежимОтображения <> ""МоиДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
		|	ГДЕ
		|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И ЭлектронныйДокументИсходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент))
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
		|	ГДЕ
		|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И ЭлектронныйДокументИсходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|				И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
		|	ГДЕ
		|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
		|		И ЭлектронныйДокументИсходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяКорректировка), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора))
		|		И (&РежимОтображения = ""ВсеДокументы""
		|				ИЛИ ЭлектронныйДокументИсходящий.Ответственный В (&СписокПользователей))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Ознакомиться" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|	ГДЕ
		|		ЭлектронныйДокументВходящий.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументВходящий.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1
		|	ИЗ
		|		Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|	ГДЕ
		|		ЭлектронныйДокументИсходящий.НаОзнакомлении
		|		И НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ПакетЭД КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.ПометкаУдаления = ЛОЖЬ
		|		И ОсновнаяТаблица.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|		И ОсновнаяТаблица.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
		|		И НЕ ОсновнаяТаблица.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Документ.ПакетЭД КАК ОсновнаяТаблица
		|	ГДЕ
		|		ОсновнаяТаблица.ПометкаУдаления = ЛОЖЬ
		|		И ОсновнаяТаблица.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|		И ОсновнаяТаблица.СтатусПакета В (ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.Неизвестный), ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.КРаспаковке))
		|		И НЕ ОсновнаяТаблица.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.УдалитьЧерезВебРесурсБанка)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.УдалитьСоглашенияОбИспользованииЭД КАК ОсновнаяТаблица
		|	ГДЕ
		|		НЕ ОсновнаяТаблица.ПометкаУдаления
		|		И ОсновнаяТаблица.СтатусПодключения В (ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяОтправить), ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Ошибка))) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.УдалитьСоглашенияОбИспользованииЭД КАК ОсновнаяТаблица
		|	ГДЕ
		|		НЕ ОсновнаяТаблица.ПометкаУдаления
		|		И ОсновнаяТаблица.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ОжидаемСогласия)) КАК ВложенныйЗапрос";
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(1) КАК _Счетчик
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1000
		|		1 КАК _Счетчик
		|	ИЗ
		|		Справочник.УдалитьСоглашенияОбИспользованииЭД КАК ОсновнаяТаблица
		|	ГДЕ
		|		НЕ ОсновнаяТаблица.ПометкаУдаления
		|		И ОсновнаяТаблица.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.ТребуетсяСогласие)) КАК ВложенныйЗапрос";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Навигация по разделам.

&НаКлиенте
Процедура ПриИзмененииРаздела(Знач НовыйРаздел)
	
	// &ЗамерПроизводительности
	ИмяОперации = СтрШаблон("Обработка.ТекущиеДелаПоЭДО.Форма.ТекущиеДела.ПоказатьРаздел.%1", НовыйРаздел);
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяОперации);
	
	ПоказатьРаздел(НовыйРаздел);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРаздел(Знач Раздел)
	
	ТекущийРаздел = Раздел;
	
	ПоказатьКомандыРаздела(Раздел);
	ПоказатьСписокРаздела(Раздел);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКомандыРаздела(Знач Раздел)
	
	КомандыРазделов = Новый Соответствие;
	КомандыРазделов.Вставить("Входящие", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьПодписатьИОтправитьВх, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Обработать", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Утвердить", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьЭД, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Подписать", "Обновить, ЗакрытьПринудительно, Перенаправить, ПодписатьВх, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Исправить", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Аннулировать", "Обновить, ЗакрытьПринудительно, Перенаправить, Аннулировать, ОтклонитьАннулирование, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("НаКонтроле", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Исходящие", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьПодписатьИОтправитьИсх, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("Сформировать", "Обновить, ЗакрытьПринудительно, ИзменитьДокумент, СформироватьЭД, СформироватьПодписатьИОтправить, КомандыСформироватьЭД");
	КомандыРазделов.Вставить("ПодписатьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, ПодписатьИсх, ОтклонитьПодписаниеИсх, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("ИсправитьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("АннулироватьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, Аннулировать, ОтклонитьАннулирование, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("НаКонтролеИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("Ознакомиться", "ОтправитьВАрхив, Перенаправить, Обновить");
	КомандыРазделов.Вставить("Отправить", "Обновить, ОтправитьПакеты, ОтменитьПакеты, КомандыПакетыЭД");
	КомандыРазделов.Вставить("Распаковать", "Обновить, РаспаковатьПакеты, ОтменитьПакеты, КомандыПакетыЭД");
	КомандыРазделов.Вставить("Приглашения", "Обновить, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ТребуетсяПригласить", "Обновить, ОтправитьПриглашения, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ЖдемСогласия", "Обновить, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ТребуетсяСогласие", "Обновить, ПринятьПриглашения, ОтклонитьПриглашения, КомандыПриглашенияЭД");
		
	ЭлементыКоманд = Новый Соответствие;
	ЭлементыКоманд.Вставить("КомандыВходящиеЭД", Элементы.ГруппаКомандыВходящиеЭД);
	ЭлементыКоманд.Вставить("КомандыИсходящиеЭД", Элементы.ГруппаКомандыИсходящиеЭД);
	ЭлементыКоманд.Вставить("КомандыСформироватьЭД", Элементы.ГруппаКомандыСформироватьЭД);
	ЭлементыКоманд.Вставить("КомандыПакетыЭД", Элементы.ГруппаКомандыПакетыЭД);
	ЭлементыКоманд.Вставить("КомандыПриглашенияЭД", Элементы.ГруппаКомандыПриглашенияЭД);
	ЭлементыКоманд.Вставить("Обновить", Элементы.КомандаОбновить);
	ЭлементыКоманд.Вставить("ЗакрытьПринудительно", Элементы.КомандаЗакрытьПринудительно);
	ЭлементыКоманд.Вставить("Перенаправить", Элементы.КомандаПеренаправить);
	ЭлементыКоманд.Вставить("УтвердитьЭД", Элементы.КомандаУтвердитьЭД);
	ЭлементыКоманд.Вставить("ПодписатьВх", Элементы.КомандаПодписать);
	ЭлементыКоманд.Вставить("ПодписатьИсх", Элементы.КомандаПодписатьИсх);
	ЭлементыКоманд.Вставить("ОтклонитьПодписаниеИсх", Элементы.КомандаОтклонитьПодписаниеИсх);
	ЭлементыКоманд.Вставить("Аннулировать", Элементы.КомандаАннулировать);
	ЭлементыКоманд.Вставить("ОтклонитьАннулирование", Элементы.КомандаОтклонитьАннулирование);
	ЭлементыКоманд.Вставить("ИзменитьДокумент", Элементы.КомандаИзменитьДокумент);
	ЭлементыКоманд.Вставить("СформироватьЭД", Элементы.КомандаСформироватьЭД);
	ЭлементыКоманд.Вставить("ОтправитьВАрхив", Элементы.КомандаОтправитьВАрхив);
	ЭлементыКоманд.Вставить("ОтправитьПакеты", Элементы.КомандаОтправитьПакеты);
	ЭлементыКоманд.Вставить("ОтменитьПакеты", Элементы.КомандаОтменитьПакеты);
	ЭлементыКоманд.Вставить("РаспаковатьПакеты", Элементы.КомандаРаспаковатьПакеты);
	ЭлементыКоманд.Вставить("ОтправитьПриглашения", Элементы.КомандаОтправитьПриглашения);
	ЭлементыКоманд.Вставить("ПринятьПриглашения", Элементы.КомандаПринятьПриглашения);
	ЭлементыКоманд.Вставить("ОтклонитьПриглашения", Элементы.КомандаОтклонитьПриглашения);
	ЭлементыКоманд.Вставить("УтвердитьПодписатьИОтправитьВх", Элементы.КомандаУтвердитьПодписатьИОтправить);
	ЭлементыКоманд.Вставить("УтвердитьПодписатьИОтправитьИсх", Элементы.КомандаУтвердитьПодписатьИОтправитьИсх);
	ЭлементыКоманд.Вставить("СформироватьПодписатьИОтправить", Элементы.КомандаСформироватьПодписатьИОтправить);
	
	КомандыРаздела = КомандыРазделов.Получить(Раздел);
	
	Для каждого КлючЗначение Из ЭлементыКоманд Цикл
		
		ИмяКоманды = КлючЗначение.Ключ;
		ЭлементФормы = КлючЗначение.Значение;
		
		ЕстьКоманда = (СтрНайти(КомандыРаздела, ИмяКоманды) > 0);
		КомандаДоступна = (НедоступныеКоманды.НайтиПоЗначению(ИмяКоманды) = Неопределено);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, ЭлементФормы.Имя, "Видимость", ЕстьКоманда И КомандаДоступна);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСписокРаздела(Знач Раздел)
	
	ПоказатьСтраницуРаздела(Раздел);
	
	ПоказатьПоляРаздела(Раздел);
	
	ПрименитьОтборыКРазделу(Раздел);
	
КонецПроцедуры

&НаСервере 
Процедура ПоказатьСтраницуРаздела(Знач Раздел) 
	
	ИмяСтраницы = СтраницаРаздела(Раздел);
	
	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Элементы.ПанельСписков.ТекущаяСтраница = Элементы[ИмяСтраницы];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ПоказатьПоляРаздела(Знач Раздел)
	
	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляТаблицы = ПоляРаздела(Раздел);
	
	Для каждого Поле Из ПоляТаблицы Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, ИмяТаблицы + Поле.Ключ, "Видимость", Поле.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьНавигациюПоРазделамНаСервере(Знач ПересчитатьКоличество = Истина, Знач ПересчитатьКоличествоОтбор = Истина)
	
	РассчитатьКоличествоЭлементовВРазделах(ПересчитатьКоличество, ПересчитатьКоличествоОтбор);
	
	ДеревоНавигации = РеквизитФормыВЗначение("ДеревоДействий");
	
	Для каждого Раздел Из ОписаниеРазделов Цикл
		
		СтрокаНавигации = ДеревоНавигации.Строки.Найти(Раздел.Имя, "Значение", Истина);
		Если СтрокаНавигации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНавигации.Представление = Раздел.Представление;
		
		Если Раздел.РассчитыватьКоличество И Раздел.КоличествоРассчитано И Раздел.Количество > 0 Тогда
			
			КоличествоОтборСтрокой = ?(Раздел.КоличествоОтбор >= 1000, "999+", Формат(Раздел.КоличествоОтбор, "ЧН=0; ЧГ=0"));
			СтрокаНавигации.Представление = СтрокаНавигации.Представление + " (" + КоличествоОтборСтрокой;
			
			Если Раздел.Количество <> Раздел.КоличествоОтбор Тогда
				
				КоличествоСтрокой = ?(Раздел.Количество >= 1000, "999+", Формат(Раздел.Количество, "ЧН=0; ЧГ=0"));
				СтрокаНавигации.Представление = СтрокаНавигации.Представление + "/" + КоличествоСтрокой;
				
			КонецЕсли;
			
			СтрокаНавигации.Представление = СтрокаНавигации.Представление + ")";
				
		КонецЕсли;
		
		СтрокаНавигации.ТребуетсяОбработка = (Раздел.Количество > 0);
		
	КонецЦикла;
	
	Отбор = Новый Структура("ТребуетсяОбработка, Скрыть", Истина, Ложь);
	
	СтрокаВходящие = ДеревоНавигации.Строки.Найти("Входящие", "Значение");
	МассивСтрок = СтрокаВходящие.Строки.НайтиСтроки(Отбор);
	СтрокаВходящие.Представление = НСтр("ru = 'Входящие'");
	СтрокаВходящие.ТребуетсяОбработка = МассивСтрок.Количество();
	
	СтрокаИсходящие = ДеревоНавигации.Строки.Найти("Исходящие", "Значение");
	МассивСтрок = СтрокаИсходящие.Строки.НайтиСтроки(Отбор);
	СтрокаИсходящие.Представление = НСтр("ru = 'Исходящие'");
	СтрокаИсходящие.ТребуетсяОбработка = МассивСтрок.Количество();
	
	СтрокаИсходящие = ДеревоНавигации.Строки.Найти("Приглашения", "Значение");
	МассивСтрок = СтрокаИсходящие.Строки.НайтиСтроки(Отбор);
	СтрокаИсходящие.Представление = НСтр("ru = 'Приглашения'");
	СтрокаИсходящие.ТребуетсяОбработка = МассивСтрок.Количество();
	
	ЗначениеВРеквизитФормы(ДеревоНавигации, "ДеревоДействий");
	
	ПерейтиВТекущийРазделНаСервере();
	ОбновитьДинамическиеСписки();
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьНавигациюПоРазделам()
	
	РазвернутыеРазделы = ПолучитьРазвернутыеРазделы(ДеревоДействий);
	
	ОбновитьНавигациюПоРазделамНаСервере();
	
	РазвернутьРазделы(РазвернутыеРазделы);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРазвернутыеРазделы(Знач СтрокаДерева, РазвернутыеРазделы = Неопределено)
	
	Если РазвернутыеРазделы = Неопределено Тогда
		РазвернутыеРазделы = Новый Массив;
	КонецЕсли;
	
	Для каждого Строка Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если Элементы.ДеревоДействий.Развернут(Строка.ПолучитьИдентификатор()) Тогда
			
			РазвернутыеРазделы.Добавить(Строка.Значение);
			
			ПолучитьРазвернутыеРазделы(Строка, РазвернутыеРазделы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазвернутыеРазделы;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьРазделы(Знач Разделы)
	
	Для каждого Раздел Из Разделы Цикл
		
		ИдентификаторСтроки = 0;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Значение", ИдентификаторСтроки, ДеревоДействий.ПолучитьЭлементы(), Раздел, Ложь);
		
		Элементы.ДеревоДействий.Развернуть(ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВТекущийРаздел() 
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Значение", ИдентификаторСтроки, ДеревоДействий.ПолучитьЭлементы(), ТекущийРаздел, Ложь);
	
	Если Элементы.ДеревоДействий.ТекущаяСтрока <> ИдентификаторСтроки Тогда
		Элементы.ДеревоДействий.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиВТекущийРазделНаСервере() 
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Значение", ИдентификаторСтроки, ДеревоДействий.ПолучитьЭлементы(), ТекущийРаздел, Ложь);
	
	Если Элементы.ДеревоДействий.ТекущаяСтрока <> ИдентификаторСтроки Тогда
		Элементы.ДеревоДействий.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с отборами списков разделов.

&НаСервере
Процедура ПрименитьОтборыКРазделу(Знач Раздел)
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	
	ПрименитьОтборыКСпискуРаздела(Раздел, Список);
	
	УстановитьТекстКнопкиБыстрыхОтборов(Раздел);
	
	УстановитьДоступностьСбросаОтбора(Раздел);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборыКСпискуРаздела(Знач Раздел, Список)
	
	УстановитьОтборПоРазделу(Раздел, Список);
	
	УстановитьБыстрыеОтборыПоРазделу(Раздел, БыстрыеОтборы, Список);
	
	ОбработатьПересечениеПользовательскихОтборовИОтбораПоРазделу(Раздел, Список);
	
	ОбработатьПересечениеПользовательскихОтборовИБыстрыхОтборов(Раздел, Список);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтборПоРазделу(Знач Раздел, Список)
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборПоРазделам");
	Если ГруппаОтборПоРазделам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Включаем использование группы отбора, соответствующей разделу.
	РазделНайден = Ложь;
	Для каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
		
		Если ГруппаРаздела.Представление = "Раздел" + Раздел Тогда
			ГруппаРаздела.Использование = Истина;
			РазделНайден = Истина;
		Иначе
			ГруппаРаздела.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	// Если не удалось найти группу раздела, то включаем все разделы.
	Если Не РазделНайден Тогда
		Для каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
			ГруппаРаздела.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьБыстрыеОтборыПоРазделу(Знач Раздел, Знач БыстрыеОтборы, Список)
	
	Отбор = Список.Отбор;
	
	ПоляОтборов = Новый Соответствие;
	ПоляОтборов.Вставить("Организация", "Организация");
	ПоляОтборов.Вставить("Контрагент", "Контрагент");
	ПоляОтборов.Вставить("НаправлениеЭД", "НаправлениеЭД");
	ПоляОтборов.Вставить("ВидЭД", "ВидЭД");
	ПоляОтборов.Вставить("Сумма_С", "СуммаДокумента");
	ПоляОтборов.Вставить("Сумма_По", "СуммаДокумента");
	ПоляОтборов.Вставить("Дата_С", "Дата");
	ПоляОтборов.Вставить("Дата_По", "Дата");
	ПоляОтборов.Вставить("ДополнительнаяИнформация", "ДополнительнаяИнформация");
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	Режим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаБыстрыйОтбор.РежимОтображения = Режим;
		
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл
			
		Имя = СтрокаОтбора.Параметр;
		Значение = СтрокаОтбора.Значение;
		Поле = ПоляОтборов[Имя];
		
		Если Не ПолеДоступноДляОтбора(Отбор, Поле) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Имя = "Организация" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
				
		ИначеЕсли Имя = "Контрагент" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
				
		ИначеЕсли Имя = "НаправлениеЭД" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
				
		ИначеЕсли Имя = "ВидЭД" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
				
		ИначеЕсли Имя = "ДополнительнаяИнформация" Тогда
			
			ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаБыстрыйОтбор, НСтр("ru = 'Дополнительная информация'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
				
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаИЛИ, "ДополнительнаяИнформация", ВидСравненияКомпоновкиДанных.Содержит, Значение,, Использование, Режим);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаИЛИ, "ПричинаОтклонения", ВидСравненияКомпоновкиДанных.Содержит, Значение,, Использование, Режим);
			
		ИначеЕсли Имя = "Дата_С" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(Значение),, Использование, Режим);
				
		ИначеЕсли Имя = "Дата_По" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(Значение),, Использование, Режим);
				
		ИначеЕсли Имя = "Сумма_С" Тогда
			
			Использование = (ЗначениеЗаполнено(Значение) ИЛИ Значение = 0);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Значение,, Использование, Режим);
				
		ИначеЕсли Имя = "Сумма_По" Тогда
			
			Использование = (ЗначениеЗаполнено(Значение) ИЛИ Значение = 0);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Значение,, Использование, Режим);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьПересечениеПользовательскихОтборовИОтбораПоРазделу(Знач Раздел, Список)
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ВсеЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборПоРазделам");
	Если ГруппаОтборПоРазделам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВсеЭлементыОР = ЭлементыОтбора(ГруппаОтборПоРазделам);
	
	Для каждого ЭлементПО Из ВсеЭлементыПО Цикл
		
		Если Не ЭлементПО.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементОР Из ВсеЭлементыОР Цикл
			
			Если ЭлементПО.ЛевоеЗначение = ЭлементОР.ЛевоеЗначение Тогда
				
				ЭлементПО.Использование = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ОбработатьПересечениеПользовательскихОтборовИБыстрыхОтборов(Знач Раздел, Список) 
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "БыстрыйОтбор");
	Если ГруппаБыстрыйОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементыБО = ЭлементыОтбора(ГруппаБыстрыйОтбор);
	
	Для каждого ЭлементПО Из ЭлементыПО Цикл
		
		Если Не ЭлементПО.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементБО Из ЭлементыБО Цикл
			
			Если ЭлементПО.ЛевоеЗначение = ЭлементБО.ЛевоеЗначение Тогда
				
				ЭлементБО.Использование = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстКнопкиБыстрыхОтборов(Знач Раздел)
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ВсеЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);
	
	// Определяем текст основной кнопки открытия настроек.
	
	КоличествоЭлементов = 0;
	Для каждого Элемент Из ВсеЭлементыПО Цикл
		Если Элемент.Использование Тогда
			КоличествоЭлементов = КоличествоЭлементов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТекстКнопкиПО = НСтр("ru = 'еще'");
	Если ЗначениеЗаполнено(КоличествоЭлементов) Тогда
		ТекстКнопкиПО = НСтр("ru = 'и еще'") + " " + Строка(КоличествоЭлементов);
	КонецЕсли;
	
	// Устанавливаем текст кнопок быстрого поиска (при пересечении с пользовательскими отборами).
	
	ПараметрыОтборовПолей = Новый Соответствие;
	ПараметрыОтборовПолей.Вставить("Организация", "Организация");
	ПараметрыОтборовПолей.Вставить("Контрагент", "Контрагент");
	ПараметрыОтборовПолей.Вставить("НаправлениеЭД", "НаправлениеЭД");
	ПараметрыОтборовПолей.Вставить("ВидЭД", "ВидЭД");
	ПараметрыОтборовПолей.Вставить("СуммаДокумента", "Сумма_С,Сумма_По");
	ПараметрыОтборовПолей.Вставить("Дата", "Дата_С,Дата_По");
	ПараметрыОтборовПолей.Вставить("ДополнительнаяИнформация", "ДополнительнаяИнформация");
	ПараметрыОтборовПолей.Вставить("ПричинаОтклонения", "ДополнительнаяИнформация");
	
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл
		
		Если СтрокаОтбора.Параметр = "ПользовательскийОтбор" Тогда
			Если СтрокаОтбора.Кнопка <> ТекстКнопкиПО Тогда
				СтрокаОтбора.Кнопка = ТекстКнопкиПО;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ТекстКнопки = "";
		УстановленПО = Ложь;
		
		Для каждого ЭлементПО Из ВсеЭлементыПО Цикл
			
			Если Не ЭлементПО.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = Строка(ЭлементПО.ЛевоеЗначение);
			ПараметрыОтбора = ПараметрыОтборовПолей[ИмяПоля];
			
			Если Не ЗначениеЗаполнено(ПараметрыОтбора) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ПараметрыОтбора, СтрокаОтбора.Параметр) <> 0 Тогда
				
				Если ЭлементПО.Родитель = Неопределено И Не УстановленПО Тогда
					
					ТекстКнопки = СтрокаОтбора.ПредставлениеПараметра
						+ " " + Строка(ЭлементПО.ВидСравнения)
						+ " " + Строка(ЭлементПО.ПравоеЗначение);
					
				Иначе
					
					ТекстКнопки = СтрокаОтбора.ПредставлениеПараметра
						+ " " + НСтр("ru = '(сложный фильтр)'");
						
				КонецЕсли;
					
				УстановленПО = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаОтбора.Кнопка <> ТекстКнопки Тогда
			
			СтрокаОтбора.Кнопка = ТекстКнопки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСбросаОтбора(Знач Раздел)

	ЕстьОтборы = Ложь;
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	Если Не ЕстьОтборы Тогда
		
		ИмяСписка = СписокРаздела(Раздел);
		Список = ЭтотОбъект[ИмяСписка];
		Отбор = ПользовательскийОтборСписка(Список);
		ВсеЭлементыОтбора = ЭлементыОтбора(Отбор);
		Для каждого ЭлементОтбора Из ВсеЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СброситьОтбор", "Доступность", ЕстьОтборы);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьПользовательскиеОтборы(Знач ИмяСпискаИсточника) 
	
	ТекущийСписок = ИмяСпискаИсточника;
	СписокИсточник = ЭтотОбъект[ТекущийСписок];
	ОтборИсточник = ПользовательскийОтборСписка(СписокИсточник);
	
	ВсеСписки = Новый Массив;
	ВсеСписки.Добавить("ВходящиеЭД");
	ВсеСписки.Добавить("ИсходящиеЭД");
	
	Если ВсеСписки.Найти(ТекущийСписок) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИмяСписка Из ВсеСписки Цикл
		
		Если ИмяСписка = ТекущийСписок Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПриемник = ЭтотОбъект[ИмяСписка];
		ОтборПриемник = ПользовательскийОтборСписка(СписокПриемник);
		ОтборПриемник.Элементы.Очистить();
		
		СкопироватьЭлементыОтбораРекурсивно(ОтборПриемник, ОтборПриемник, ОтборИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПользовательскийОтборПоРазделу(Знач Раздел) 
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	
	Отбор = ПользовательскийОтборСписка(Список);
	ЕстьПользовательскийОтбор = (Отбор.Элементы.Количество() > 0);
	
	ЕстьБыстрыйОтбор = Ложь;
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл
		
		Если ЗначениеЗаполнено(СтрокаОтбора.Значение) 
			ИЛИ (СтрокаОтбора.Тип = "Число" И СтрокаОтбора.Значение <> Неопределено) Тогда
			
			ЕстьБыстрыйОтбор = Истина;
			Прервать;
	
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ЕстьПользовательскийОтбор ИЛИ ЕстьБыстрыйОтбор;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с быстрым поиском.

&НаКлиенте
Процедура ПриОкончанииНастройкиСписка(Настройки, ДопПараметры) Экспорт
	
	Раздел = ДопПараметры.Раздел;
	
	Если ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		
		РазвернутыеРазделы = ПолучитьРазвернутыеРазделы(ДеревоДействий);
		
		ЗагрузитьПользовательскиеНастройкиПоРазделу(Раздел, Настройки);
		
		РазвернутьРазделы(РазвернутыеРазделы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройкиПоРазделу(Знач Раздел, Знач Настройки) 
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	Список.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
	СинхронизироватьПользовательскиеОтборы(ИмяСписка);
	ПриИзмененииОтбораНаСервере();
	
КонецПроцедуры

&НаСервере 
Процедура СброситьПользовательскиеОтборы() 
	
	СпискиРазделов = Новый Массив;
	СпискиРазделов.Добавить(ВходящиеЭД);
	СпискиРазделов.Добавить(ИсходящиеЭД);
	СпискиРазделов.Добавить(Сформировать);
	СпискиРазделов.Добавить(ПакетыЭД);
	СпискиРазделов.Добавить(ПриглашенияЭД);
	
	Для каждого Список Из СпискиРазделов Цикл
		
		Отбор = ПользовательскийОтборСписка(Список);
		Отбор.Элементы.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	РазвернутыеРазделы = ПолучитьРазвернутыеРазделы(ДеревоДействий);
	
	ПриИзмененииОтбораНаСервере();
	
	РазвернутьРазделы(РазвернутыеРазделы);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()
	
	ОбновитьКэшРасчетовОтбор = Истина;
	ПрименитьОтборыКРазделу(ТекущийРаздел);
	ОбновитьНавигациюПоРазделамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СброситьОтборНаСервере() 
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	СброситьПользовательскиеОтборы();
	ПриИзмененииОтбораНаСервере();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Расчет количества элементов в разделах.

&НаСервере
Процедура СброситьКэшРасчетов()
	
	Если Не (ОбновитьКэшРасчетовОбщий ИЛИ ОбновитьКэшРасчетовОтбор) Тогда
		Возврат;
	КонецЕсли;
	
	КэшРасчетов = ПолучитьИзВременногоХранилища(АдресКэшаРасчетов);
	
	Для каждого КлючЗначение Из КэшРасчетов Цикл
		
		Раздел = КлючЗначение.Ключ;
		Макеты = КлючЗначение.Значение;
		
		Если ОбновитьКэшРасчетовОбщий Тогда
			Макеты.Общий = Неопределено;
		КонецЕсли;
		Если ОбновитьКэшРасчетовОтбор Тогда
			Макеты.Отбор = Неопределено;
		КонецЕсли;
		
		КэшРасчетов.Вставить(Раздел, Макеты);
		
	КонецЦикла;
	
	ОбновитьКэшРасчетовОбщий = Ложь;
	ОбновитьКэшРасчетовОтбор = Ложь;
	
	ПоместитьВоВременноеХранилище(КэшРасчетов, АдресКэшаРасчетов);
	
КонецПроцедуры

&НаСервере
Функция МакетРасчетаПоРазделу(Знач Раздел, Знач УчитыватьПользовательскиеНастройки, КэшРасчетов)
	
	// Ищем макет в кэше.
	
	Макет = Неопределено;
	ИспользуемыйМакет = ?(УчитыватьПользовательскиеНастройки, "Отбор", "Общий");
	
	Макеты = КэшРасчетов[Раздел];
	
	Если Макеты = Неопределено Тогда
		Макеты = Новый Структура("Общий,Отбор");
	Иначе
		Макет = Макеты[ИспользуемыйМакет];
	КонецЕсли;
	
	Если Макет <> Неопределено Тогда
		Возврат Макет;
	КонецЕсли;
	
	// Не нашли в кэше, формируем новый.
	
	Форма = ЭтотОбъект;
	
	// Заполняем СписокЭД копией списка раздела, 
	// применяем к нему необходимые отборы,
	// получаем из него итоговые настройки.
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = форма[ИмяСписка];
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	ЗаполнитьЗначенияСвойств(СписокЭД, СвойстваСписка);
	
	ФиксированныеНастройки = Список.КомпоновщикНастроек.ФиксированныеНастройки;
	СписокЭД.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройки);
	СписокЭД.Порядок.Элементы.Очистить();
	
	Если УчитыватьПользовательскиеНастройки Тогда
		// Добавляем пользовательские настройки.
		ПользовательскиеНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки;
		СписокЭД.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	Иначе
		// Убираем пользовательские отборы.
		ПользовательскийОтбор = ПользовательскийОтборСписка(СписокЭД);
		ПользовательскийОтбор.Элементы.Очистить();
	КонецЕсли;
	
	ПрименитьОтборыКСпискуРаздела(Раздел, СписокЭД);
	
	Если Не УчитыватьПользовательскиеНастройки Тогда
		// Убираем быстрый поиск из настроек.
		ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(СписокЭД.Отбор.Элементы, "БыстрыйОтбор");
		ГруппаБыстрыйОтбор.Использование = Ложь;
	КонецЕсли;
	
	Настройки = СписокЭД.КомпоновщикНастроек.ПолучитьНастройки();
	
	Настройки.Порядок.Элементы.Очистить();
	Настройки.УсловноеОформление.Элементы.Очистить();
	
	// Определяем схему компоновки и меняем запрос.
	
	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Таблица = Форма.Элементы[ИмяТаблицы];
	Схема = Таблица.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных[0].Запрос);
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	Для каждого Оператор Из ПоследнийЗапрос.Операторы Цикл
		
		Оператор.КоличествоПолучаемыхЗаписей = 1000;
		ПолеСчетчик = Оператор.ВыбираемыеПоля.Добавить("1");
		
	КонецЦикла;
	КолонкаСчетчик = ПоследнийЗапрос.Колонки.Найти(ПолеСчетчик);
	КолонкаСчетчик.Псевдоним = "_Счетчик";
	
	Схема.НаборыДанных[0].Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// Выбираем в настройках только поле-счетчик и выполняем схему.
	
	Настройки.Структура.Очистить();
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("_Счетчик");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	// Помещаем рассчитанный макет в кэш
	Макеты[ИспользуемыйМакет] = Макет;
	КэшРасчетов.Вставить(Раздел, Макеты);
	
	Возврат Макет;
	
КонецФункции

&НаСервере
Процедура РассчитатьКоличествоЭлементовВРазделах(Знач ПересчитатьКоличество = Истина, Знач ПересчитатьКоличествоОтбор = Истина)
	
	Если Не (ПересчитатьКоличество ИЛИ ПересчитатьКоличествоОтбор) Тогда
		Возврат;
	КонецЕсли;
	
	СброситьКэшРасчетов();
	
	КэшРасчетов = ПолучитьИзВременногоХранилища(АдресКэшаРасчетов);
	
	Форма = ЭтотОбъект;
	
	ДанныеДляРасчета = Новый Массив;
	
	Для каждого Раздел Из ОписаниеРазделов Цикл
		
		Если Не (Раздел.РассчитыватьКоличество И Раздел.Видимость) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПересчитатьКоличество Тогда
			ЭлементРасчета = Новый Структура("Раздел, УчитыватьОтбор, Количество", Раздел.Имя, Ложь, 0);
			ДанныеДляРасчета.Добавить(ЭлементРасчета);
		КонецЕсли;
		
		Если ПересчитатьКоличествоОтбор И ЕстьПользовательскийОтборПоРазделу(Раздел.Имя) Тогда
			ЭлементРасчета = Новый Структура("Раздел, УчитыватьОтбор, Количество", Раздел.Имя, Истина, 0);
			ДанныеДляРасчета.Добавить(ЭлементРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета, КэшРасчетов);
	
	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		ОтборРаздела = Новый Структура("Имя", ЭлементРасчета.Раздел);
		ВсеСтрокиРаздела = ОписаниеРазделов.НайтиСтроки(ОтборРаздела);
		
		Для каждого СтрокаРаздела Из ВсеСтрокиРаздела Цикл
			
			Если ЭлементРасчета.УчитыватьОтбор Тогда
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			Иначе
				СтрокаРаздела.Количество = ЭлементРасчета.Количество;
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			КонецЕсли;
			
			СтрокаРаздела.КоличествоРассчитано = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(КэшРасчетов, АдресКэшаРасчетов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета, КэшРасчетов)
	
	Если Не ЗначениеЗаполнено(ДанныеДляРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЧастиТекстаЗапроса = Новый Массив;
	
	НастройкиОтображения = НастройкиОтображенияРазделов();
	
	Запрос.УстановитьПараметр("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Запрос.УстановитьПараметр("СписокПользователей", НастройкиОтображения.СписокПользователей);
	
	ПоложениеРезультатовВПакете = Новый ТаблицаЗначений;
	ПоложениеРезультатовВПакете.Колонки.Добавить("Раздел");
	ПоложениеРезультатовВПакете.Колонки.Добавить("УчитыватьОтбор");
	ПоложениеРезультатовВПакете.Колонки.Добавить("Индекс");
	
	КоличествоЗапросовВПакете = 0;
	РазделительЗапросовВПакете = 
		"
		|;
		|";
	
	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		Если ЭлементРасчета.УчитыватьОтбор Тогда
			
			Макет = МакетРасчетаПоРазделу(ЭлементРасчета.Раздел, ЭлементРасчета.УчитыватьОтбор, КэшРасчетов);
			ТекстЗапроса = Макет.НаборыДанных[0].Запрос;
			
			// Обернем запрос в выборку количества
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
			Шаблон = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(1) КАК _Счетчик
			|ИЗ
			|	(%1) КАК _ВложенныйЗапрос";
			ТекстЗапроса = СтрШаблон(Шаблон, ТекстЗапроса);
			
			// Переименовываем и устанавливаем параметры запроса.
			
			Префикс = СтрШаблон("%1_%2_", ЭлементРасчета.Раздел, Формат(ЭлементРасчета.УчитыватьОтбор, "БЛ=Ложь; БИ=Истина"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&", "&" + Префикс);
			
			Для каждого Параметр Из Макет.ЗначенияПараметров Цикл
				Запрос.УстановитьПараметр(Префикс + Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			
		Иначе
			
			ТекстЗапроса = ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора(ЭлементРасчета.Раздел);
			Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавляем уничтожение временных таблиц, чтобы избежать конфликта имен.
		
		КоличествоВТ = ДобавитьУничтожениеВременныхТаблицВЗапрос(ТекстЗапроса);
		
		Если ЗначениеЗаполнено(ЧастиТекстаЗапроса) Тогда
			ЧастиТекстаЗапроса.Добавить(РазделительЗапросовВПакете);
		КонецЕсли;
		
		ТекстЗапросаВПакете = СтрШаблон(
			"////////////////////////////////////////////////////////////////////////////
			|// %1 (%2)
			|
			|%3", ЭлементРасчета.Раздел, ЭлементРасчета.УчитыватьОтбор, ТекстЗапроса);
		ЧастиТекстаЗапроса.Добавить(ТекстЗапросаВПакете);
		
		// Вычисляем положение результата по разделу в пакете.
			
		КоличествоЗапросовВПакете = КоличествоЗапросовВПакете + 1 + КоличествоВТ * 2;
		
		СтрокаПоложения = ПоложениеРезультатовВПакете.Добавить();
		СтрокаПоложения.Раздел = ЭлементРасчета.Раздел;
		СтрокаПоложения.УчитыватьОтбор = ЭлементРасчета.УчитыватьОтбор;
		СтрокаПоложения.Индекс = КоличествоЗапросовВПакете - КоличествоВТ - 1;
		
	КонецЦикла;
	
	// Заполняем результаты по разделам по данным пакета.
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса);
	Результаты = Запрос.ВыполнитьПакет();
	
	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		ОтборСтрок = Новый Структура("Раздел,УчитыватьОтбор");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ЭлементРасчета);
		
		НайденныеСтроки = ПоложениеРезультатовВПакете.НайтиСтроки(ОтборСтрок);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексРезультата = НайденныеСтроки[0].Индекс;
		
		Результат = Результаты[ИндексРезультата];
		
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		КоличествоЭлементов = 0;
		Пока Выборка.Следующий() Цикл
			КоличествоЭлементов = КоличествоЭлементов + Выборка._Счетчик;
		КонецЦикла;
		ЭлементРасчета.Количество = КоличествоЭлементов;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗапросами

&НаСервере
Функция ДобавитьУничтожениеВременныхТаблицВЗапрос(ТекстЗапроса) 
	
	ВременныеТаблицы = Новый Массив;
	КоличествоВременныхТаблиц = 0;
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для каждого ТекущийЗапрос Из Схема.ПакетЗапросов Цикл
		Если ТипЗнч(ТекущийЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			// Добавляем временную таблицу на уничтожение.
			Если ЗначениеЗаполнено(ТекущийЗапрос.ТаблицаДляПомещения) Тогда
				ВременныеТаблицы.Добавить(ТекущийЗапрос.ТаблицаДляПомещения);
				КоличествоВременныхТаблиц = КоличествоВременныхТаблиц + 1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Индекс = ВременныеТаблицы.Найти(ТекущийЗапрос.ИмяТаблицы);
			// Уже есть уничтожение временной таблицы.
			Если Индекс <> Неопределено Тогда
				ВременныеТаблицы.Удалить(Индекс);
				КоличествоВременныхТаблиц = КоличествоВременныхТаблиц - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		
		ЗапросУничтоженияВТ = Схема.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросУничтоженияВТ.ИмяТаблицы = ИмяТаблицы;
		
	КонецЦикла;
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	Возврат КоличествоВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область РаботаСОтборами

&НаСервереБезКонтекста 
Функция ПолеДоступноДляОтбора(Знач Отбор, Знач Поле) 
	
	Если Поле = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	ДоступноеПоле = Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле);
	
	Возврат (ДоступноеПоле <> Неопределено);
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПользовательскийОтборСписка(Знач Список) 
	
	ИдентификаторНастройки = Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
	
	Возврат ПользовательскийОтбор;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ЭлементыОтбора(Знач Отбор)
	
	НайденныеЭлементы = Новый Массив;
	
	Для каждого Элемент Из Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			НайденныеЭлементыГруппы = ЭлементыОтбора(Элемент);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеЭлементы, НайденныеЭлементыГруппы);
			
		Иначе
			
			НайденныеЭлементы.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеЭлементы;
	
КонецФункции

&НаСервереБезКонтекста 
Процедура СкопироватьЭлементыОтбораРекурсивно(Отбор, Приемник, Источник) 
	
	Для каждого ЭлементОтбора Из Источник.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ГруппаПриемник = Приемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГруппаПриемник, ЭлементОтбора);
				
			СкопироватьЭлементыОтбораРекурсивно(Отбор, ГруппаПриемник, ЭлементОтбора);
			
		Иначе
			
			ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			
			Если Не ПолеДоступноДляОтбора(Отбор, ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Приемник, ИмяПоля, ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, 
				ЭлементОтбора.Представление, ЭлементОтбора.Использование, ЭлементОтбора.РежимОтображения, 
				ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ИзменитьРежимПросмотраОкончание(ВыбранныйРежим, ДополнительныеПараметры) Экспорт

	Если ВыбранныйРежим <> Неопределено Тогда
		
		РежимОтображения = ВыбранныйРежим;
		
		РазвернутыеРазделы = ПолучитьРазвернутыеРазделы(ДеревоДействий);
		
		РежимОтображенияПриИзмененииНаСервере();
		
		РазвернутьРазделы(РазвернутыеРазделы);
		ПерейтиВТекущийРаздел();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашенияОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Отклоняются приглашения'");
		
		КоличествоОтклоненныхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоОтклоненныхПриглашений, СоответствиеПрофилейИПараметровСертификатов, Ложь);
		
		ШаблонСообщения = НСтр("ru = 'Отклонено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоОтклоненныхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьНавигациюПоРазделам();
		
	Иначе
		ТекстОшибки = НСтр("ru = 'При отклонении приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашенияОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Принимаются приглашения'");
		
		КоличествоПринятыхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейИПараметровСертификатов, Истина);
		
		ШаблонСообщения = НСтр("ru = 'Принято приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПринятыхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьНавигациюПоРазделам();
		
	Иначе
		ТекстОшибки = НСтр("ru = 'При принятии приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений получателям'");
		
		ОтправленоПриглашений = 0;
		ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейИПараметровСертификатов);
		
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОтправленоПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьНавигациюПоРазделам();
		
	Иначе
		ТекстОшибки = НСтр("ru = 'При отправке приглашений возникли ошибки.
			|Необходимо выполнить тест настроек ЭДО с указанными контрагентами.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакетыОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = Результат.СоответствиеПрофилейИПараметровСертификатов;
	
	МассивПЭД = ДополнительныеПараметры.МассивЭД;
	ОтправленныеДокументы = Новый Массив;
	КоличествоОтправленных = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоответствиеПрофилейИПараметровСертификатов, ОтправленныеДокументы);
	
	ПараметрыОповещения = Новый Структура("ЭлектронныеДокументы", ОтправленныеДокументы);
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);

	ЗаголовокОповещения = НСтр("ru = 'Отправка электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоОповещение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеИсхОповещение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьНавигациюПоРазделам();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧН=");

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыПредставлениеПараметра.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Сформировать";
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("НаправлениеЭД");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Отправить";
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("НаправлениеЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Распаковать";
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("НаправлениеЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяТекущейСтраницы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "СтраницаНаРучномРазборе";


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("НаправлениеЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	СписокЗначений.Добавить("Контрагент");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.ТребуетсяОбработка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, Ложь, Ложь, Ложь, ));
	
	
	// Скрытие строк дерева действий
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийДействие.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийНомерКартинки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.Скрыть");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость колонок редактирования быстрого отбора
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыПредставлениеПараметра.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Кнопка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость колонки с кнопкой
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыКнопка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Кнопка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	Для Каждого ЭД Из МассивСсылок Цикл
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(ЭД, ОтклонитьАннулирование);
	КонецЦикла;
	Если МассивСсылок.Количество() > 0 Тогда
		ОбновитьНавигациюПоРазделам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеВыделенныхСтрокРаздела(Знач Раздел, Знач ПутьКДанным)
	
	МассивДанных = Новый Массив;
	
	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Таблица = Элементы[ИмяТаблицы];
	
	Для каждого СтрокаТаблицы Из Таблица.ВыделенныеСтроки Цикл
		
		Данные = Таблица.ДанныеСтроки(СтрокаТаблицы);
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДанных.Добавить(Данные[ПутьКДанным]);
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивДокументов(Знач МассивКлючей)
	
	МассивВозврата = Новый Массив;
	Для Каждого Запись Из МассивКлючей Цикл
		МассивВозврата.Добавить(Запись.СсылкаНаОбъект);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ОбновитьДинамическиеСписки(ПеречитыватьДанные = Истина)
	
	ИмяСписка = СтрЗаменить(Элементы.ПанельСписков.ТекущаяСтраница.Имя, "Страница", "");
	
	Если ПеречитыватьДанные Тогда
		Элементы[ИмяСписка].Обновить();
	Иначе
		Элементы[ИмяСписка].ТекущаяСтрока = Элементы[ИмяСписка].ТекущаяСтрока;
	КонецЕсли;
	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		Попытка
			Пакет = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОперации  = НСтр("ru = 'изменение статуса пакетов ЭД'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстОперации, ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	
	СтрокаВходящие = Дерево.Строки.Добавить();
	СтрокаВходящие.Значение = "Входящие";
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Обработать";
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Утвердить";
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Подписать";
	КонецЕсли;
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Исправить";
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Аннулировать";
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";

	СтрокаИсходящие = Дерево.Строки.Добавить();
	СтрокаИсходящие.Значение = "Исходящие";
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "Сформировать";
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "ПодписатьИсх";
	КонецЕсли;
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "ИсправитьИсх";
	
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "АннулироватьИсх";
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтролеИсх";
	
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Ознакомиться";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Отправить";
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Распаковать";
	
	СтрокаПриглашения = Дерево.Строки.Добавить();
	СтрокаПриглашения.Значение = "Приглашения";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяПригласить";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ЖдемСогласия";
	НовЗапись = СтрокаПриглашения.Строки.Добавить();
	НовЗапись.Значение = "ТребуетсяСогласие";
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЭД");
	
	Если ИспользуетсяНесколькоОрганизацийЭД Тогда
		
		НазваниеСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
		Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
			НазваниеСправочникаОрганизации = "Организации";
		КонецЕсли;

		НоваяСтрока = БыстрыеОтборы.Добавить();
		НоваяСтрока.Параметр = "Организация";
		НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
		НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
		НоваяСтрока.Значение = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Организации");
		НоваяСтрока.Кнопка = "";
	КонецЕсли;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ПользовательскийОтбор";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дополнительно'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	НоваяСтрока.Кнопка = "еще";
	
КонецПроцедуры

&НаСервере
Процедура РежимОтображенияПриИзмененииНаСервере()
	
	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);
	ОбновитьНавигациюПоРазделамНаСервере();
	ОбновитьЗаголовокФормы();
	
	НастроитьСпискиРазделов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()

	Если РежимОтображения = "КИсполнению" Тогда
		СуффиксЗаголовка = НСтр("ru = 'к исполнению'");
	ИначеЕсли РежимОтображения = "МоиДокументы" Тогда 
		СуффиксЗаголовка = НСтр("ru = 'мои документы'");
	ИначеЕсли РежимОтображения = "ВсеДокументы" Тогда 
		СуффиксЗаголовка = НСтр("ru = 'весь документооборот'");
	Иначе
		СуффиксЗаголовка = "";
	КонецЕсли;
	
	Заголовок = СтрШаблон(НСтр("ru = 'Текущие дела ЭДО (%1)'"), СуффиксЗаголовка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРазделовДерева(Дерево, РежимОтображения)
	
	РазделыСПеременнойВидимостью = Новый Структура;
	
	Скрыть = РежимОтображения = "КИсполнению";
	РазделыСПеременнойВидимостью.Вставить("НаКонтроле", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("НаКонтролеИсх", Скрыть);
	
	Скрыть = РежимОтображения = "МоиДокументы";
	РазделыСПеременнойВидимостью.Вставить("Сформировать", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("Приглашения", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ТребуетсяПригласить", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ТребуетсяСогласие", Скрыть);
	
	Скрыть = РежимОтображения <> "ВсеДокументы";
	РазделыСПеременнойВидимостью.Вставить("Отправить", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("Распаковать", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ЖдемСогласия", Скрыть);
	
	Скрыть = Не ИспользоватьЭП;
	РазделыСПеременнойВидимостью.Вставить("Подписать", Скрыть);
	
	Скрыть = Не ОбменСКонтрагентамиСлужебный.ИспользоватьОзнакомлениеСЭД();
	РазделыСПеременнойВидимостью.Вставить("Ознакомиться", Скрыть);
	
	Для Каждого Раздел Из РазделыСПеременнойВидимостью Цикл
		УстановитьЗначениеРеквизитаДерева(Дерево, Раздел.Ключ, "Скрыть", Раздел.Значение);
	КонецЦикла;
	
	Для каждого Раздел Из ОписаниеРазделов Цикл
		
		Скрыть = Ложь;
		Если РазделыСПеременнойВидимостью.Свойство(Раздел.Имя, Скрыть) Тогда
			Раздел.Видимость = Не Скрыть;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеРеквизитаДерева(Дерево, ИмяДействия, ИмяРеквизита, Значение, Установлено = Ложь)

	Для Каждого ПодчиненнаяСтрока Из Дерево.ПолучитьЭлементы() Цикл
		Если ПодчиненнаяСтрока.Значение = ИмяДействия Тогда
			ПодчиненнаяСтрока[ИмяРеквизита] = Значение;
			Установлено = Ложь;
		Иначе
			УстановитьЗначениеРеквизитаДерева(ПодчиненнаяСтрока, ИмяДействия, ИмяРеквизита, Значение, Установлено);
		КонецЕсли;
		
		Если Установлено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)
	
	Количество = 0;
	УстановитьСтатусПакетов(МассивЭД, ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен"), Количество);
	ТекстОповещения = НСтр("ru = 'Изменен статус пакетов на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	ОбновитьНавигациюПоРазделам();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(МассивЭД)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("УстановитьОтветственногоОповещение", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, ОбработкаОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокАктуальныхВидовЭД()
	
	МассивАктуальныхЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивАктуальныхЭД);
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СброситьОтбор", "Доступность", Доступность);
	
КонецПроцедуры

&НаСервере
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандаПодписать()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандаПодписатьИсх()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУтвердитьПодписатьИОтправить()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУтвердитьПодписатьИОтправитьИсх()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(ПараметрКоманды)
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Неопределено, МассивСсылок);
		ОбновитьНавигациюПоРазделам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПриглашенияСервер(ОтправленоПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам)
	
	// Готовим таблицу с реквизитами контрагентов
	ТаблицаПриглашений = Новый ТаблицаЗначений;
	ТаблицаПриглашений.Колонки.Добавить("ПрофильНастроекЭДО");
	ТаблицаПриглашений.Колонки.Добавить("НастройкаЭДО");
	ТаблицаПриглашений.Колонки.Добавить("Получатель");
	ТаблицаПриглашений.Колонки.Добавить("Идентификатор");
	ТаблицаПриглашений.Колонки.Добавить("Наименование");
	ТаблицаПриглашений.Колонки.Добавить("НаименованиеДляСообщенияПользователю");
	ТаблицаПриглашений.Колонки.Добавить("ИНН");
	ТаблицаПриглашений.Колонки.Добавить("КПП");
	ТаблицаПриглашений.Колонки.Добавить("АдресЭП");
	ТаблицаПриглашений.Колонки.Добавить("ТекстПриглашения");
	ТаблицаПриглашений.Колонки.Добавить("ВнешнийКод");
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
	ИмяРеквизитаВнешнийКодКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ВнешнийКодКонтрагента");
	ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагентаДляСообщенияПользователю");
	
	Для каждого НастройкаЭДО Из Элементы.ПриглашенияЭД.ВыделенныеСтроки Цикл
		
		СтруктураПараметровНастройкиЭДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаЭДО,
			"ИдентификаторКонтрагента, ЭлектроннаяПочтаДляПриглашения, Контрагент, ТекстПриглашения, ПрофильНастроекЭДО");
		
		СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметровНастройкиЭДО.ПрофильНастроекЭДО, "СпособОбменаЭД");
		
		Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И Не ЗначениеЗаполнено(СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения) Тогда
			
			ШаблонСообщения = НСтр("ru = 'Для отправки приглашения к обмену ЭД для получателя %1
										|необходимо заполнить электронную почту.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметровКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметровНастройкиЭДО.Контрагент,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагента + ", "
			+ ИмяРеквизитаВнешнийКодКонтрагента + ", " + ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю);
	
		Если Не ЗначениеЗаполнено(СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента]) Тогда
			ШаблонСообщения = НСтр("ru = 'Для отправки приглашения к обмену ЭД для получателя %1
										|необходимо заполнить ИНН.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПараметровНастройкиЭДО.Контрагент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриглашений.Добавить();
		НоваяСтрока.ПрофильНастроекЭДО = СтруктураПараметровНастройкиЭДО.ПрофильНастроекЭДО;
		НоваяСтрока.НастройкаЭДО       = НастройкаЭДО;
		НоваяСтрока.Получатель         = СтруктураПараметровНастройкиЭДО.Контрагент;
		НоваяСтрока.Идентификатор      = СтруктураПараметровНастройкиЭДО.ИдентификаторКонтрагента;
		НоваяСтрока.ТекстПриглашения   = СтруктураПараметровНастройкиЭДО.ТекстПриглашения;
		НоваяСтрока.АдресЭП            = СтруктураПараметровНастройкиЭДО.ЭлектроннаяПочтаДляПриглашения;
		
		НоваяСтрока.Наименование       = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагента];
		НоваяСтрока.НаименованиеДляСообщенияПользователю = СтруктураПараметровКонтрагента[ИмяРеквизитаНаименованиеКонтрагентаДляСообщенияПользователю];
		НоваяСтрока.ИНН                = СтруктураПараметровКонтрагента[ИмяРеквизитаИННКонтрагента];
		НоваяСтрока.КПП                = СтруктураПараметровКонтрагента[ИмяРеквизитаКППКонтрагента];
		НоваяСтрока.ВнешнийКод         = СтруктураПараметровКонтрагента[ИмяРеквизитаВнешнийКодКонтрагента];
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТаблицаПриглашений) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СоответствиеПрофилейНастроекЭДОМаркерам Цикл
		ПрофильНастроекЭДО = КлючИЗначение.Ключ;
		СтруктураСертификата = КлючИЗначение.Значение;
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПриглашений = Новый Структура;
		ОтборПриглашений.Вставить("ПрофильНастроекЭДО", ПрофильНастроекЭДО);
		
		ТаблицаПриглашенийДляОтправки = ТаблицаПриглашений.Скопировать(ОтборПриглашений);
		
		ДопПараметры = Новый Структура;
		ИмяФайла = ОбменСКонтрагентамиВнутренний.ИсходящийЗапросПриглашенияОператораЭДО(ТаблицаПриглашенийДляОтправки, ДопПараметры);
		Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
			Возврат;
		КонецЕсли;
		
		ПутьДляПриглашений = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("invite", Новый УникальныйИдентификатор);
		ИмяФайлаПриглашения = ПутьДляПриглашений + "SendContacts.xml";
		КопироватьФайл(ИмяФайла, ИмяФайлаПриглашения);
		РезультатОтправки = ОбменСКонтрагентамиВнутренний.ОтправитьЧерезОператораЭДО(
			Маркер,
			ПутьДляПриглашений,
			"SendContacts",
			ПрофильНастроекЭДО);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПутьДляПриглашений);
		
		Если РезультатОтправки <> 0 Тогда
			Для каждого СтрокаТаблицы Из ТаблицаПриглашений Цикл
				ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыПриглашений.ОжидаемСогласия;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ОжидаетсяСогласование;
				ИскомаяНастройкаЭДО.ОписаниеОшибки = "";
				ИскомаяНастройкаЭДО.Записать();
			КонецЦикла;
			ОтправленоПриглашений = ТаблицаПриглашений.Количество();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьВАрхивНаСервере(Знач ДокументыВАрхив) 
	
	Для каждого ЭлектронныйДокумент Из ДокументыВАрхив Цикл
		
		ОбменСКонтрагентамиСлужебный.УстановитьНеобходимостьОзнакомленияСЭД(ЭлектронныйДокумент, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, СоответствиеПрофилейНастроекЭДОМаркерам, ПриглашениеПринято)
	
	Для каждого НастройкаЭДО Из Элементы.ПриглашенияЭД.ВыделенныеСтроки Цикл
		
		СтруктураСертификата = СоответствиеПрофилейНастроекЭДОМаркерам.Получить(НастройкаЭДО.ПрофильНастроекЭДО);
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Ложь;
		
		ИскомаяНастройкаЭДО = НастройкаЭДО.ПолучитьОбъект();
		Если ИскомаяНастройкаЭДО.НастройкаЭДОУникальна() Тогда
			Результат = ОбменСКонтрагентамиВнутренний.ПринятьОтклонитьКонтактЧерезОператораЭДО(
				НастройкаЭДО.ИдентификаторКонтрагента, ПриглашениеПринято, Маркер, НастройкаЭДО.ПрофильНастроекЭДО);
		КонецЕсли;
		Если Результат Тогда
			Если ПриглашениеПринято Тогда
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыПриглашений.Принято;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости;
			Иначе
				ИскомаяНастройкаЭДО.СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено;
				ИскомаяНастройкаЭДО.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.Закрыто;
			КонецЕсли;
			ИскомаяНастройкаЭДО.Записать();
			
			КоличествоПринятыхПриглашений = КоличествоПринятыхПриглашений + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрофилиНастроекЭДО(Знач МассивНастроекЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.Ссылка В(&МассивНастроекЭДО)";
	
	Запрос.УстановитьПараметр("МассивНастроекЭДО", МассивНастроекЭДО);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица.ВыгрузитьКолонку("ПрофильНастроекЭДО");
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСкрытьБыстрыйПоиск()
	
	Элементы.ЗаголовокОтбора.Заголовок = НСтр("ru = 'Быстрый поиск'")
		+ ?(ПоказатьБыстрыйПоиск, " " + НСтр("ru = '(скрыть)'"),  " " + НСтр("ru = '(показать)'"));
		
	Элементы.БыстрыеОтборы.Видимость = ПоказатьБыстрыйПоиск;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьЗаблокированныеЭлементыФормы()
	
	Для Каждого ЗаблокированныйЭлементыФормы Из ЗаблокированныеЭлементыФормы Цикл 
		
		Элементы[ЗаблокированныйЭлементыФормы.Значение].Доступность = Истина;
		
	КонецЦикла;
	
	ЗаблокированныеЭлементыФормы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция ЭлектронныеДокументыНаОзнакомление(Знач ИдентификаторыСтрок) 
	
	ЭлектронныеДокументы = Новый Массив;
	
	Для каждого Идентификатор Из ИдентификаторыСтрок Цикл
		
		Строка = Элементы.ОзнакомитьсяЭД.ДанныеСтроки(Идентификатор);
		ЭлектронныеДокументы.Добавить(Строка.ЭлектронныйДокумент);
		
	КонецЦикла;
	
	Возврат ЭлектронныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлыЭлектронныхДокументов(Знач ЭлектронныеДокументы) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла В(&ЭлектронныеДокументы)
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЭДПрисоединенныеФайлы.ВладелецФайла.ТипЭлементаВерсииЭД";
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецОбласти
