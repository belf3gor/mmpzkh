#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Механизм_Подключения_Дополнительной_Обработки

// Для внутреннего использования. Сведения для регистрации отчета.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.3.1.84");
	
	ПараметрыРегистрации.Вид               = "ДополнительнаяОбработка";
	ПараметрыРегистрации.Версия            = "1.1";
	//ПараметрыРегистрации.Назначение.Добавить("<Объект>.<ИмяОбъекта>");
	ПараметрыРегистрации.Наименование      = "Внешняя обработка: " + "Шаблон формирования штрихкода";
	ПараметрыРегистрации.БезопасныйРежим   = Ложь;
	ПараметрыРегистрации.Информация        = "Шаблон формирования штрихкода";
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление        = НСтр("ru = 'Шаблон формирования штрихкода (внешняя обработка)'");
	НоваяКоманда.Идентификатор        = "КВП_ШаблонФормированияШтрихКода";
	НоваяКоманда.Использование        = "ВызовСерверногоМетода";
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()

// Выполнение команд для нефайловой базы.
// ИдентификаторКоманды - вызываемая команда: "СформироватьОтчет".
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
КонецПроцедуры

#КонецОбласти // Механизм_Подключения_Дополнительной_Обработки

#Область Механизм_ФормированияИРазбораОдномерногоШК

// Проверяет считанный текст штрих-кода на наличие контрольной строки и
// раскладывает его на составляющие согласно настройкам учетной политики.
//
// Параметры:
//  Текст        – Строка - текст штрих-кода,
//  ПараметрыФормированияПД – Структура – настройки формирования платежного документа,
//  Параметры    – Структура – параметры для обработки штрихкода: код лицевого счета, сумма оплаты
//
// Возвращаемое значение:
//  Булево – корректен ли переданный текст штрих-кода
//
Функция ОбработатьИРазобратьЛинейныйШтрихКодИзШаблона(Знач Текст, ПараметрыФормированияПД, Параметры = Неопределено) Экспорт // SS - переименовал вызов
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура("КодЛС,Сумма");
	КонецЕсли;
	
	глКонтрольнаяСтрокаШК = СокрЛП(ПараметрыФормированияПД.КонстантаОрганизацииДляШтрихКода);
	глИндексВставкиКСШК   = ИндексВставкиКСШК();
	
	ДлинаСтрокиОп = СтрДлина(глКонтрольнаяСтрокаШК);
	
	// Код организации.
	Если Параметры.ПризнакОплатыПоКР Тогда
		КодОрганизации = ПараметрыФормированияПД.КодОрганизацииДляОдномерногоШКПоУслугамКР;
	Иначе
		КодОрганизации = ПараметрыФормированияПД.КодОрганизацииДляОдномерногоШКПоОсн;
	КонецЕсли;
	
	// Длина кода лицевого счета.
	Если ПараметрыФормированияПД.ИдентификаторЛСШтрихкода Тогда
		ДлинаКодаЛС = ?(ПараметрыФормированияПД.ДлинаИдентификатораШтрихкода = 0,
						9,
						ПараметрыФормированияПД.ДлинаИдентификатораШтрихкода);
	Иначе
		ДлинаКодаЛС = 9;
	КонецЕсли;
	
	Если СтрДлина(Текст) < глИндексВставкиКСШК + ДлинаСтрокиОп Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Подстрока = Сред(Текст, глИндексВставкиКСШК + 1, ДлинаСтрокиОп);
	
	Если Не Подстрока = глКонтрольнаяСтрокаШК Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Текст = Лев(Текст, глИндексВставкиКСШК)
	+ Прав(Текст, СтрДлина(Текст) - глИндексВставкиКСШК - СтрДлина(глКонтрольнаяСтрокаШК));
	
	// Убираем код организации.
	Если Лев(Текст, СтрДлина(КодОрганизации)) = КодОрганизации Тогда
		Текст = Сред(Текст, СтрДлина(КодОрганизации) + 1);
	КонецЕсли;
	Параметры.КодЛС = Лев(Текст, ДлинаКодаЛС);
	Параметры.Сумма = Сред(Текст, 14);
	
	// Определим лицевой счет.
	Если ПараметрыФормированияПД.ИдентификаторЛСШтрихкода Тогда
		Параметры.КодЛС = Справочники.КВП_ЛицевыеСчета.НайтиПоРеквизиту("Идентификатор", Параметры.КодЛС);
	Иначе
		Параметры.КодЛС = Справочники.КВП_ЛицевыеСчета.НайтиПоКоду(Параметры.КодЛС);
	КонецЕсли;
	
	// Преобразуем строку суммы к числу.
	Пока Лев(Параметры.Сумма, 1) = "0" Цикл
		Параметры.Сумма = Сред(Параметры.Сумма, 2);
	КонецЦикла;
	Если ПустаяСтрока(Параметры.Сумма) Тогда
		Параметры.Сумма = "0";
	КонецЕсли;
	Попытка
		Параметры.Сумма = Число(Параметры.Сумма);
	Исключение
		Параметры.Сумма = 0;
	КонецПопытки;
	Если ПараметрыФормированияПД.РазделительДробнойЧастиСуммы = "не выводить" Тогда
		Параметры.Сумма = Параметры.Сумма / 100;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует штрихкод по переданным данным согласно настройкам учетной политики.
//
// Параметры
//  Параметры    – Структура – параметры для подстановки в штрихкод: дата, лицевой счет, сумма;
//  ПараметрыФормированияПД – Структура – параметры учетной политики
//
// Возвращаемое значение:
//  Строка – сформированный штрихкод
//
Функция СформироватьШтрихкодИзШаблона(Параметры, ПараметрыФормированияПД) Экспорт
	
	// Дополним структуру параметров.
	Параметры.Вставить("Константа", СокрЛП(ПараметрыФормированияПД.КонстантаОрганизацииДляШтрихКода));
	Если Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("МесяцОплаты", Формат(Параметры.Дата, "ДФ=MM"));
		Параметры.Вставить("ГодОплаты",   Формат(Параметры.Дата, "ДФ=yy"));
	КонецЕсли;
	Если Параметры.Свойство("ЛицевойСчет") Тогда
		Если ПараметрыФормированияПД.ИдентификаторЛСШтрихкода Тогда
			Параметры.Вставить( "КодЛС",
								УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(СокрЛП(Параметры.ЛицевойСчет.Идентификатор),
																			 ПараметрыФормированияПД.ДлинаИдентификатораШтрихкода,
																			 "0"));
		Иначе
			Параметры.Вставить("КодЛС", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(СокрЛП(Параметры.ЛицевойСчет.Код), 9, "0"));
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("Сумма") Тогда
		Если ПараметрыФормированияПД.РазделительДробнойЧастиСуммы = "не выводить" Тогда
			Параметры.Вставить("СуммаКОплате", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(Формат(Параметры.Сумма * 100, "ЧГ=0"),
																						ПараметрыФормированияПД.ДлинаСуммыШтрихкода,
																						"0"));
		ИначеЕсли ПараметрыФормированияПД.РазделительДробнойЧастиСуммы = " . (точка)" Тогда
				Параметры.Вставить("СуммаКОплате", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(Формат(Параметры.Сумма, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0"),
																						ПараметрыФормированияПД.ДлинаСуммыШтрихкода + 1,
																						"0"));
		ИначеЕсли ПараметрыФормированияПД.РазделительДробнойЧастиСуммы = " , (запятая)" Тогда
				Параметры.Вставить("СуммаКОплате", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(Формат(Параметры.Сумма, "ЧДЦ=2; ЧРД=,; ЧН=; ЧГ=0"),
																						ПараметрыФормированияПД.ДлинаСуммыШтрихкода + 1,
																						"0"));
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ПризнакОплатыПоКР Тогда
		ТекстКода = ПараметрыФормированияПД.КодОрганизацииДляОдномерногоШКПоУслугамКР;
	Иначе
		ТекстКода = ПараметрыФормированияПД.КодОрганизацииДляОдномерногоШКПоОсн;
	КонецЕсли;
	
	// Сформируем текст штрихкода.
	ТекстКода = ТекстКода + Параметры.КодЛС + Параметры.МесяцОплаты
			  + Параметры.ГодОплаты + Параметры.СуммаКОплате;
	УПЖКХ_ПечатьКвитанцийСервер.ВставитьКонтрольнуюСтрокуШК(ТекстКода, ПараметрыФормированияПД);
	
	Возврат ТекстКода;
	
КонецФункции // СформироватьШтрихкодИзШаблона()

#КонецОбласти

#Область Механизм_ФормированияИРазбораQRкода

#Область ФормированиеQRКода

Функция СформироватьQRкодИзШаблона(Объект, СтруктураНастроек, ОбщиеДанные) Экспорт
	
	// !!!В данном списке необходимо перечислить все дополнительные поля, которые Вам необходимо включить в состав QR кода.
	// !!!Состав всех допустимых дополнительных полей и их назначение можно посмотреть в функции "ПолучитьСтруктуруПредставленийИРеквизитовQR()".
	РеквизитыQRКодаПользователя = Новый СписокЗначений;
	РеквизитыQRКодаПользователя.Добавить("Sum", , Истина);
	РеквизитыQRКодаПользователя.Добавить("Purpose", , Истина);
	РеквизитыQRКодаПользователя.Добавить("lastName", , Истина);
	РеквизитыQRКодаПользователя.Добавить("firstName", , Истина);
	РеквизитыQRКодаПользователя.Добавить("middleName", , Истина);
	РеквизитыQRКодаПользователя.Добавить("persAcc", , Истина);
	РеквизитыQRКодаПользователя.Добавить("phone", , Истина);
	//РеквизитыQRКодаПользователя.Добавить("");
	
	// Структура с полями не по стандарту УФЭБС и полями для дополнительной обработки.
	СтруктураПолейДляДополнительнойОбработки = Новый Структура("Sum1,
															   |Sum2,
															   |persAcc1,
															   |Purpose1,
															   |Purpose2,
															   |FIO,
															   |counterId,
															   |counterVal");
	
	// Подготовим состав реквизитов в списке и структуре реквизитов QR кода.
	ОбработатьСоставРеквизитов(РеквизитыQRКодаПользователя, СтруктураПолейДляДополнительнойОбработки);
	
	// Получим структуру с данными согласно стандарту УФЭБС + дополнительные поля не по стандарту УФЭБС.
	СтруктураДанныхQR = ЗаполнитьДанныеQRШтрихкода(Объект, СтруктураНастроек, ОбщиеДанные, РеквизитыQRКодаПользователя);
	
	Попытка
		СтрокаQRКода = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(СтруктураДанныхQR);
		
		// Дополним строку QR штихкода значениями дополнительных реквизитов.
		ДополнитьСтрокуQRКодаРеквизитами(СтрокаQRКода, РеквизитыQRКодаПользователя, СтруктураПолейДляДополнительнойОбработки,
										 Объект, СтруктураНастроек, ОбщиеДанные);
		
		Возврат СтрокаQRКода;
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции // СформироватьQRкодИзШаблона()

// Процедура подготавливает состав реквизитов в списке и структуре реквизитов QR кода
// для дальнейшей обработки.
Процедура ОбработатьСоставРеквизитов(РеквизитыQRКодаПользователя, ПоляДляДопОбработки)
	
	МассивРеквизитовДляУдаления = Новый Массив;
	Для Каждого ТекРеквизит ИЗ ПоляДляДопОбработки Цикл
		Если РеквизитыQRКодаПользователя.НайтиПоЗначению(ТекРеквизит.Ключ) = Неопределено Тогда
			МассивРеквизитовДляУдаления.Добавить(ТекРеквизит.Ключ);
		Иначе
			НайденныйЭлемент = РеквизитыQRКодаПользователя.НайтиПоЗначению(ТекРеквизит.Ключ);
			Если НЕ НайденныйЭлемент = Неопределено Тогда
				РеквизитыQRКодаПользователя.Удалить(НайденныйЭлемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если реквизита нет в списке реквизитов пользователя, то 
	// его исключаем из структуры реквизитов для дополнительной обработки.
	Для Каждого ТекЭлемент Из МассивРеквизитовДляУдаления Цикл
		ПоляДляДопОбработки.Удалить(ТекЭлемент);
	КонецЦикла;

КонецПроцедуры // ОбработатьСоставРеквизитов()

// Заполняет реквизиты QR штрихкода данными.
Функция ЗаполнитьДанныеQRШтрихкода(Объект, СтруктураНастроек, ОбщиеДанные, РеквизитыQRКодаПользователя)
	
	СтруктураДанныхQR = Новый Структура();
	
	// Объязательные реквизиты.
	СтруктураДанныхQR.Вставить("Name",        СокрЛП(ОбщиеДанные.Организация));
	
	СтруктураДанныхQR.Вставить("PersonalAcc", ОбщиеДанные.РасчетныйСчет);
	СтруктураДанныхQR.Вставить("BankName",    СокрЛП(ОбщиеДанные.Банк));
	СтруктураДанныхQR.Вставить("BIC",         ОбщиеДанные.БИК);
	СтруктураДанныхQR.Вставить("CorrespAcc",  ОбщиеДанные.КоррСчет);
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		СтруктураДанныхQR.Вставить("PersonalAcc", ОбщиеДанные.РасчетныйСчетКР);
		СтруктураДанныхQR.Вставить("BankName",    СокрЛП(ОбщиеДанные.БанкКР));
		СтруктураДанныхQR.Вставить("BIC",         ОбщиеДанные.БИККР);
		СтруктураДанныхQR.Вставить("CorrespAcc",  ОбщиеДанные.КоррСчетКР);
	КонецЕсли;
	
	// Заполним структуру данных QR реквизитами из полученного списока реквизитов.
	Для Каждого ЭлементСписка Из РеквизитыQRКодаПользователя Цикл
		// Делаем проверку, если настройки пометки сохранены неверно.
		Если ЭлементСписка.Пометка Тогда
			СтруктураДанныхQR.Вставить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Имеются следующие коды назначений платежа по стандарту УФЭБС:
	//			01				Мобильная связь, стационарный телефон.
	//			02				Коммунальные услуги, ЖКХ.
	//			03				ГИБДД, налоги, пошлины, бюджетные платежи.
	//			04				Охранные услуги
	//			05				Услуги, оказываемые УФМС.
	//			06				ПФР
	//			07				Погашение кредитов
	//			08				Образовательные учреждения.
	//			09				Интернет и ТВ
	//			10				Электронные деньги
	//			11				Отдых и путешествия.
	//			12				Инвестиции и страхование.
	//			13				Спорт и здоровье
	//			14				Благотворительные и общественные организации.
	//			15				Прочие услуги.
	
	КодНазначенияПлатежа = "02"; // Технический код, по умолчанию "Коммунальные услуги, ЖКХ".
	
	// Заполняем структуру данных QR реквизитами пользователя и данными.
	ЗаполнитьЗначенияДополнительныхПараметровQRКода(Объект, СтруктураДанныхQR, ОбщиеДанные, СтруктураНастроек, КодНазначенияПлатежа);
	
	// Заполним структуру данных QR согласно представлениям.
	СтруктураПредставлений  = ПолучитьСтруктуруПредставленийИРеквизитовQR();
	
	// Для замены ключей реквизитов структуры СтруктураДанныхQR на их представления по страндарту УФЭБС
	// запомним ключи в массиве, для последующего удаления.
	МассивКлючейДляУдаления = Новый Массив;
	Для Каждого ТекРеквизит Из СтруктураДанныхQR Цикл
		Если СтруктураПредставлений.Свойство(ТекРеквизит.Ключ) Тогда
			СтруктураДанныхQR.Вставить(СтруктураПредставлений[ТекРеквизит.Ключ], ТекРеквизит.Значение);
			МассивКлючейДляУдаления.Добавить(ТекРеквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ Из МассивКлючейДляУдаления Цикл
		СтруктураДанныхQR.Удалить(Ключ);
	КонецЦикла;
	
	Возврат СтруктураДанныхQR;
	
КонецФункции // ЗаполнитьДанныеQRШтрихкода()

// Процедура заполняет значения дополнительных параметров QR кода.
//
// Параметры:
//  СтруктураДанныхQR - структура дополнительных параметров QR кода, используемые пользователем.
//  Параметры - структура обязательных параметров QR кода.
//  ОбщиеДанные - структура данных по лицевому счету.
//  СтруктураНастроек - структура настроек отчета.
//  КодНазначенияПлатежа - код платежа.
//
Процедура ЗаполнитьЗначенияДополнительныхПараметровQRКода(Объект, СтруктураДанныхQR, ОбщиеДанные,
														  СтруктураНастроек, КодНазначенияПлатежа)
	
	ФИОСтруктура = Неопределено;
	Для Каждого ТекущийЭлемент Из СтруктураДанныхQR Цикл
		
		ИмяПараметра = ТекущийЭлемент.Ключ;
		
		Если ИмяПараметра = "Sum" И ЗначениеЗаполнено(ОбщиеДанные.ВсегоКОплатеДляШК) Тогда
			СтруктураДанныхQR[ИмяПараметра] = Формат(ОбщиеДанные.ВсегоКОплатеДляШК,"ЧГ=0");
		КонецЕсли;
		
		Если ИмяПараметра = "Purpose" Тогда
			Если ОбщиеДанные.КвитанцияНаКР Тогда
				СтруктураДанныхQR[ИмяПараметра] = "Оплата за КАПРЕМОНТ";
			Иначе
				СтруктураДанныхQR[ИмяПараметра] = "Оплата за ЖКУ";
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "KPP" И ЗначениеЗаполнено(ОбщиеДанные.КППОрганизации) Тогда
			СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.КППОрганизации);
		КонецЕсли;
		
		Если ИмяПараметра = "PayeeINN" И ЗначениеЗаполнено(ОбщиеДанные.ИННОрганизации) Тогда
			СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИННОрганизации);
		КонецЕсли;
		
		// ФИО
		Если ЗначениеЗаполнено(ОбщиеДанные.ФИО) Тогда
			Если ФИОСтруктура = Неопределено И ОбщиеДанные.ВладелецЖилец Тогда
				ФИОСтруктура = РазделитьФИО(СокрЛП(ОбщиеДанные.ФИО));
			КонецЕсли;
			Если ИмяПараметра = "lastName" ИЛИ ИмяПараметра = "firstName" ИЛИ ИмяПараметра = "middleName" Тогда
				Если ОбщиеДанные.ВладелецЖилец Тогда
					Если ИмяПараметра = "lastName" И ЗначениеЗаполнено(ФИОСтруктура.Фамилия) Тогда
						СтруктураДанныхQR[ИмяПараметра] = ФИОСтруктура.Фамилия;
					ИначеЕсли ИмяПараметра = "middleName" И ЗначениеЗаполнено(ФИОСтруктура.Отчество) Тогда
						СтруктураДанныхQR[ИмяПараметра] = ФИОСтруктура.Отчество;
					ИначеЕсли ИмяПараметра = "firstName" И ЗначениеЗаполнено(ФИОСтруктура.Имя) Тогда
						СтруктураДанныхQR[ИмяПараметра] = ФИОСтруктура.Имя;
					КонецЕсли;
				ИначеЕсли ИмяПараметра = "firstName" Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ФИО);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "PayerINN" ИЛИ ИмяПараметра = "birthDate" ИЛИ ИмяПараметра = "pensAcc" ИЛИ ИмяПараметра = "phone" Тогда
			Если Не ОбщиеДанные.ВладелецЖилец И ТипЗнч(ОбщиеДанные.ФИО) = Тип("СправочникСсылка.Контрагенты") Тогда
				Контрагент         = ОбщиеДанные.ФИО;
				Если ИмяПараметра = "PayerINN" И ЗначениеЗаполнено(Контрагент.ИНН) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(Контрагент.ИНН);
				ИначеЕсли ИмяПараметра = "phone" И ЗначениеЗаполнено(ОбщиеДанные.ЛицевойСчет.Телефон) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ЛицевойСчет.Телефон);
				КонецЕсли;
			ИначеЕсли ОбщиеДанные.ВладелецЖилец Тогда
				Если ИмяПараметра = "PayerINN" И ЗначениеЗаполнено(ОбщиеДанные.ИННВладельцаЖильца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИННВладельцаЖильца);
				ИначеЕсли ИмяПараметра = "birthDate" И ЗначениеЗаполнено(ОбщиеДанные.ДатаРожденияВладельца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = Формат(ОбщиеДанные.ДатаРожденияВладельца, "ДФ=dd.MM.yyyy");
				ИначеЕсли ИмяПараметра = "pensAcc" И ЗначениеЗаполнено(ОбщиеДанные.СтраховойНомерПФРВладельца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.СтраховойНомерПФРВладельца);
				ИначеЕсли ИмяПараметра = "phone" И ЗначениеЗаполнено(ОбщиеДанные.ТелефонВладельцаЖильца) Тогда
					СтруктураДанныхQR[ИмяПараметра] = СокрЛП(ОбщиеДанные.ТелефонВладельцаЖильца);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "payerAddress" Тогда
			АдресПомещения = СокрЛП(ОбщиеДанные.Адрес);
			Если СтруктураНастроек.ПараметрыФормированияПД.ИсключитьИзАдресаПомещенияСимволыНомерИТочка Тогда
				АдресПомещения = СтрЗаменить(АдресПомещения, "№", "");
				АдресПомещения = СтрЗаменить(АдресПомещения, ".", "");
			КонецЕсли;
			СтруктураДанныхQR[ИмяПараметра] = АдресПомещения;
		КонецЕсли;
		
		Если ИмяПараметра = "contract" Тогда
			СведенияДляВзаиморасчетов = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(
									ОбщиеДанные.ЛицевойСчет, ОбщиеДанные.ОрганизацияОбъект, КонецМесяца(СтруктураНастроек.ПериодПросмотра));
			Если ЗначениеЗаполнено(СведенияДляВзаиморасчетов.Договор.Номер) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СокрЛП(СведенияДляВзаиморасчетов.Договор.Номер);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "persAcc" Тогда
			СтруктураДанныхQR[ИмяПараметра] = СокрЛП(Объект);
		КонецЕсли;
		
		Если ИмяПараметра = "flat" Тогда
			СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.Помещение.Наименование;
		КонецЕсли;

		Если ИмяПараметра = "paymTerm" И ЗначениеЗаполнено(ОбщиеДанные.СрокОплатыДата) Тогда
			СтруктураДанныхQR[ИмяПараметра] = ОбщиеДанные.СрокОплатыДата;
		КонецЕсли;
		
		Если ИмяПараметра = "paymPeriod" И ЗначениеЗаполнено(СтруктураНастроек.ПериодПросмотра) Тогда
			ФорматПериодаОплаты = СтруктураНастроек.ПараметрыФормированияПД.ФорматПериодаОплаты;
			Если ФорматПериодаОплаты = "ММГГГГ" Тогда
				ФорматПериодаОплаты = "ММгггг";
			ИначеЕсли ФорматПериодаОплаты = "ММГГММГГ" Тогда
				ФорматПериодаОплаты = "ММггММгг";
			ИначеЕсли ФорматПериодаОплаты = "ММГГ" Тогда
				ФорматПериодаОплаты = "ММгг";
			ИначеЕсли ФорматПериодаОплаты = "ММ.ГГГГ" Тогда
				ФорматПериодаОплаты = "ММ.гггг";
			Иначе
				ФорматПериодаОплаты = "ММгггг"; // по умолчанию.
			КонецЕсли;
			СтруктураДанныхQR[ИмяПараметра] = Формат(СтруктураНастроек.ПериодПросмотра, "ДФ=" + ФорматПериодаОплаты);
		КонецЕсли;
		
		Если ИмяПараметра = "addAmount" Тогда
			Если Не ОбщиеДанные.КОплатеПени = "0,00" Тогда
				СтруктураДанныхQR[ИмяПараметра] = Формат(ОбщиеДанные.КОплатеПени * 100,"ЧГ=0");
			Иначе
				СтруктураДанныхQR[ИмяПараметра] = "000";
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяПараметра = "TechCode" Тогда
			СтруктураДанныхQR[ИмяПараметра] = КодНазначенияПлатежа;
		КонецЕсли;

		Если ИмяПараметра = "category" Тогда
			
			Если ОбщиеДанные.КвитанцияНаКР И ЗначениеЗаполнено(СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоУслугамКР)Тогда
				СтруктураДанныхQR[ИмяПараметра] = СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоУслугамКР;
			ИначеЕсли НЕ ОбщиеДанные.КвитанцияНаКР И ЗначениеЗаполнено(СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоОсн) Тогда
				СтруктураДанныхQR[ИмяПараметра] = СтруктураНастроек.ПараметрыФормированияПД.КодОрганизацииДляQRКодаПоОсн;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяПараметра = "serviceName" И ЗначениеЗаполнено(СтруктураНастроек.ПараметрыФормированияПД.КодУслугиДляШтрихКода) Тогда
			СтруктураДанныхQR[ИмяПараметра] = СтруктураНастроек.ПараметрыФормированияПД.КодУслугиДляШтрихКода;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначенияДополнительныхПараметровQRКода()

// Заполняет дополнительные поля структуры данных QR, не входящие в стандарт УФЭБС.
Процедура ДополнитьСтрокуQRКодаРеквизитами(СтрокаQRКода, РеквизитыQRКодаПользователя, ПоляДопОбработки,
										   Объект, СтруктураНастроек, ОбщиеДанные)
	
	ПараметрыФормированияПД = СтруктураНастроек.ПараметрыФормированияПД;
	СтрокаПараметра         = "";
	
	Для Каждого ТекущийЭлемент Из ПоляДопОбработки Цикл
		
		ИмяПараметра = ТекущийЭлемент.Ключ;
		
		Если ИмяПараметра = "Sum1" И ЗначениеЗаполнено(ОбщиеДанные.ИтогоНачислено) Тогда
			ПоляДопОбработки[ИмяПараметра] = Формат(Число(ОбщиеДанные.ИтогоНачислено) * 100,"ЧГ=0");
		КонецЕсли;
		
		Если ИмяПараметра = "Sum2" И ЗначениеЗаполнено(ОбщиеДанные.Задолженность) Тогда
			ПоляДопОбработки[ИмяПараметра] = Формат(Число(ОбщиеДанные.Задолженность) * 100,"ЧГ=0");
		КонецЕсли;
		
		Если ИмяПараметра = "persAcc1" Тогда
			ПоляДопОбработки[ИмяПараметра] = СокрЛП(ОбщиеДанные.ИдентификаторЛС);
		КонецЕсли;
		
		Если ИмяПараметра = "Purpose1" Тогда
			ПоляДопОбработки[ИмяПараметра] = "Текущие начисления";
		КонецЕсли;
		
		Если ИмяПараметра = "Purpose2" Тогда
			ПоляДопОбработки[ИмяПараметра] = "Сумма задолженности";
		КонецЕсли;
		
		Если ИмяПараметра = "FIO" И ЗначениеЗаполнено(ОбщиеДанные.ФИО) Тогда
			ПоляДопОбработки[ИмяПараметра] = СокрЛП(ОбщиеДанные.ФИО);
		КонецЕсли;
		
		Если ИмяПараметра = "counterId" ИЛИ ИмяПараметра = "counterVal" Тогда
			ТаблицаИПУ = ОбщиеДанные.ТаблицаИПУ;
			Если Не ТаблицаИПУ.Количество() = 0 Тогда
				// Показания с номерами счетчиков.
				Если ИмяПараметра = "counterVal" Тогда
					СтрокаПоказанийСчетчиков = "";
					Для Каждого ТекущийСчетчик Из ТаблицаИПУ Цикл
						НачальнаяСтрокаПоказания = СтрокаПоказанийСчетчиков + "|counterId=" + СтрЗаменить(СтрЗаменить(ТекущийСчетчик.Абонент, " ", ""), Символы.НПП,"")
																			+ "|counterVal=";
						Если Не ТекущийСчетчик.ПредыдущееПоказаниеДн = 0 Тогда
							СтрокаПоказанийСчетчиков = НачальнаяСтрокаПоказания + "Дн " + Формат(ТекущийСчетчик.ПредыдущееПоказаниеДн, "ЧГ=0");
						КонецЕсли;
						Если Не ТекущийСчетчик.ПредыдущееПоказаниеНч = 0 Тогда
							СтрокаПоказанийСчетчиков = НачальнаяСтрокаПоказания + "Нч " + Формат(ТекущийСчетчик.ПредыдущееПоказаниеНч, "ЧГ=0");
						КонецЕсли;
						Если Не ТекущийСчетчик.ПредыдущееПоказаниеПк = 0 Тогда
							СтрокаПоказанийСчетчиков = НачальнаяСтрокаПоказания + "Пк " + Формат(ТекущийСчетчик.ПредыдущееПоказаниеПк, "ЧГ=0");
						КонецЕсли;
					КонецЦикла;
					ПоляДопОбработки[ИмяПараметра] = СтрокаПоказанийСчетчиков;
					ПоляДопОбработки.Удалить("counterId");
				КонецЕсли;
				// Только номера счетчиков.
				Если ИмяПараметра = "counterId" И Не ПоляДопОбработки.Свойство("counterVal") Тогда
					СтрокаСчетчиков = "";
					Для Каждого ТекущийСчетчик Из ТаблицаИПУ Цикл
						СтрокаСчетчиков = СтрокаСчетчиков + "|counterId=" + ТекущийСчетчик.Абонент;
					КонецЦикла;
					ПоляДопОбработки[ИмяПараметра] = СтрокаСчетчиков;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеПоля = ПоляДопОбработки[ИмяПараметра];
		
		Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
			
			// Заменяем имя параметра, если необходимо.
			Если ИмяПараметра = "persAcc1" Тогда
				ИмяПараметра = "persAcc";
			КонецЕсли;
			
			Если ИмяПараметра = "counterVal" Тогда
				СтрокаПараметра = СтрокаПараметра + ЗначениеПоля;
			Иначе
				СтрокаПараметра = СтрокаПараметра + "|" + ИмяПараметра + "=" + ЗначениеПоля;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формат кодировки текста QR.
	СтрокаQRКодаБезСлужебнойЧасти = Сред(СтрокаQRКода, Найти(СтрокаQRКода, "|"), СтрДлина(СтрокаQRКода));
	
	СтрокаQRКода                  = УПЖКХ_ПечатьКвитанцийСервер.СтрокаСтандартаQRКода()
								// !!!Доступны 2 значения!!!:
								// "1" - (соответствует Windows-1251)
								// "2" - (соответствует UTF-8)
								  + "2"
								  + СтрокаQRКодаБезСлужебнойЧасти;
	
	// Итоговая строка QR штрихкода.
	СтрокаQRКода = СтрокаQRКода + СтрокаПараметра;
	
КонецПроцедуры // ДополнитьСтрокуQRКодаРеквизитами()

// Возвращает полную структуру реквиизитов QR штрихкода с представлениями по стандарту УФЭБ.
Функция ПолучитьСтруктуруПредставленийИРеквизитовQR()
	
	СтруктураВозврата = Новый Структура();
	
	// !!! Данные поля не включаем в список "РеквизитыQRКодаПользователя"!!!
	
	// Обязательные поля структуры.
	СтруктураВозврата.Вставить("Name",        "ТекстПолучателя");
	СтруктураВозврата.Вставить("PersonalAcc", "НомерСчетаПолучателя");
	СтруктураВозврата.Вставить("BankName",    "НаименованиеБанкаПолучателя");
	СтруктураВозврата.Вставить("BIC",         "БИКБанкаПолучателя");
	СтруктураВозврата.Вставить("CorrespAcc",  "СчетБанкаПолучателя");
	// !!!
	
	// Дополнительные поля структуры.
	СтруктураВозврата.Вставить("Sum",          "СуммаЧислом");
	СтруктураВозврата.Вставить("Purpose",      "НазначениеПлатежа");
	СтруктураВозврата.Вставить("PayeeINN",     "ИННПолучателя");
	СтруктураВозврата.Вставить("PayerINN",     "ИННПлательщика");
	СтруктураВозврата.Вставить("DrawerStatus", "СтатусСоставителя");
	СтруктураВозврата.Вставить("KPP",          "КПППолучателя");
	СтруктураВозврата.Вставить("CBC",          "КодБК");
	СтруктураВозврата.Вставить("OKTMO",        "КодОКТМО");
	СтруктураВозврата.Вставить("PaytReason",   "ПоказательОснования");
	СтруктураВозврата.Вставить("TaxPeriod",    "ПоказательПериода");
	СтруктураВозврата.Вставить("DocNo",        "ПоказательНомера");
	СтруктураВозврата.Вставить("DocDate",      "ПоказательДаты");
	СтруктураВозврата.Вставить("TaxPaytKind",  "ПоказательТипа");
	
	// Прочие дополнительные поля.
	СтруктураВозврата.Вставить("lastName",           "ФамилияПлательщика");
	СтруктураВозврата.Вставить("firstName",          "ИмяПлательщика");
	СтруктураВозврата.Вставить("middleName",         "ОтчествоПлательщика");
	СтруктураВозврата.Вставить("payerAddress",       "АдресПлательщика");
	СтруктураВозврата.Вставить("personalAccount",    "ЛицевойСчетБюджетногоПолучателя");
	СтруктураВозврата.Вставить("docIdx",             "ИндексПлатежногоДокумента");
	СтруктураВозврата.Вставить("pensAcc",            "СНИЛС");
	СтруктураВозврата.Вставить("contract",           "НомерДоговора");
	СтруктураВозврата.Вставить("persAcc",            "НомерЛицевогоСчетаПлательщика");
	СтруктураВозврата.Вставить("flat",               "НомерКвартиры");
	СтруктураВозврата.Вставить("phone",              "НомерТелефона");
	СтруктураВозврата.Вставить("payerIdType",        "ВидПлательщика");
	СтруктураВозврата.Вставить("payerIdNum",         "НомерПлательщика");
	СтруктураВозврата.Вставить("childFio",           "ФИОРебенка");
	СтруктураВозврата.Вставить("birthDate",          "ДатаРождения");
	СтруктураВозврата.Вставить("paymTerm",           "СрокПлатежа");
	СтруктураВозврата.Вставить("paymPeriod",         "ПериодОплаты");
	СтруктураВозврата.Вставить("category",           "ВидПлатежа");
	СтруктураВозврата.Вставить("serviceName",        "КодУслуги");
	СтруктураВозврата.Вставить("counterId",          "НомерПрибораУчета");
	СтруктураВозврата.Вставить("counterVal",         "ПоказаниеПрибораУчета");
	СтруктураВозврата.Вставить("quittId",            "НомерИзвещения");
	СтруктураВозврата.Вставить("quittDate",          "ДатаИзвещения");
	СтруктураВозврата.Вставить("instNum",            "НомерУчреждения");
	СтруктураВозврата.Вставить("classNum",           "НомерГруппы");
	СтруктураВозврата.Вставить("specFio",            "ФИОПреподавателя");
	СтруктураВозврата.Вставить("addAmount",          "СуммаСтраховки");
	СтруктураВозврата.Вставить("ruleId",             "НомерПостановления");
	СтруктураВозврата.Вставить("execId",             "НомерИсполнительногоПроизводства");
	СтруктураВозврата.Вставить("regType",            "КодВидаПлатежа");
	СтруктураВозврата.Вставить("uin",                "ИдентификаторНачисления");
	СтруктураВозврата.Вставить("TechCode",           "ТехническийКод");
	
	Возврат СтруктураВозврата;
	
КонецФункции // ПолучитьСтруктуруПредставленийИРеквизитовQR()

#КонецОбласти

// Определяет формат считанного текста - ШтрихКод это или QR-код, и запускает процесс его разбора.
//
// Параметры:
//  Текст        – Строка - текст штрих-кода,
//  ПараметрыФормированияПД – Структура – настройки формирования платежного документа,
//  Параметры    – Структура – параметры для обработки штрихкода: код лицевого счета, сумма оплаты
//
// Возвращаемое значение:
//  Булево – корректен ли переданный текст штрих-кода
//
Функция ОбработатьИРазобратьШтрихКодИзШаблона(Знач Текст, НастройкиФормированияПД, Параметры = Неопределено) Экспорт
	
	// QR-код, формируемый в нашей программе всегдан начинается со строки "ST0001".
	Если СтрНайти(Текст, УПЖКХ_ПечатьКвитанцийСервер.СтрокаСтандартаQRКода()) = 1 Тогда
		
		Если Не ОбработатьИРазобратьQRКодИзШаблона(Текст, НастройкиФормированияПД, Параметры) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неизвестный формат QR-кода.");
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		Если Не ОбработатьИРазобратьЛинейныйШтрихКодИзШаблона(Текст, НастройкиФормированияПД, Параметры) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неизвестный формат штрих-кода.");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьИРазобратьQRКодИзШаблона(Знач Текст, ПараметрыФормированияПД, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		
		Параметры = Новый Структура("КодЛС, Сумма, МесяцНачисления, ВедетсяРаздельныйУчетПоУслугамКапремонта, ПризнакОплатыПоКР");
		
		Параметры.КодЛС                                    = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
		Параметры.Сумма                                    = 0;
		Параметры.МесяцНачисления                          = '00010101';
		Параметры.ВедетсяРаздельныйУчетПоУслугамКапремонта = Ложь;
		Параметры.ПризнакОплатыПоКР                        = Ложь;
		
	КонецЕсли;
	
	// Разбор строки QR-кода в структуру.
	МассивПолейQRКода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "|");
	
	СтруктураПолейQRКода = Новый Структура;
	
	Для Каждого ПараКлючЗначение Из МассивПолейQRКода Цикл
		
		МассивПарыКлючЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараКлючЗначение, "=");
		
		Если МассивПарыКлючЗначение.Количество() = 2 Тогда
			СтруктураПолейQRКода.Вставить(МассивПарыКлючЗначение[0], МассивПарыКлючЗначение[1]);
		КонецЕсли;
		
	КонецЦикла;
	
	////////////////////////////////////////
	// ЛИЦЕВОЙ СЧЕТ (Наименование или идентификатор лицевого счета плательщика в организации)
	
	ЛицевойСчетСсылка = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	Если СтруктураПолейQRКода.Свойство("persAcc") Тогда
		
		// Поле "persAcc" может быть как наименованием, так и идентификатором лицевого счета.
		ЛицевойСчетСсылка = Справочники.КВП_ЛицевыеСчета.НайтиПоНаименованию(СтруктураПолейQRКода.persAcc);
		
		Если ЛицевойСчетСсылка.Пустая() Тогда
			ЛицевойСчетСсылка = Справочники.КВП_ЛицевыеСчета.НайтиПоРеквизиту("Идентификатор", СтруктураПолейQRКода.persAcc);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка и запись в структуру параметров.
	Если ЛицевойСчетСсылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры.КодЛС = ЛицевойСчетСсылка;
	
	////////////////////////////////////////
	// СУММА (Сумма платежа, в копейках)
	
	Сумма = 0;
	Если СтруктураПолейQRКода.Свойство("Sum") Тогда
		
		Попытка
			Сумма = Число(СтруктураПолейQRКода.Sum);
		Исключение
			Сумма = 0;
		КонецПопытки;
		
	КонецЕсли;
	
	Параметры.Сумма = Сумма / 100;
	
	////////////////////////////////////////
	// МЕСЯЦ НАЧИСЛЕНИЯ (Период оплаты)
	
	Дата = '00010101';
	Если СтруктураПолейQRКода.Свойство("paymPeriod") Тогда
		
		ФорматПериодаОплаты = ПараметрыФормированияПД.ФорматПериодаОплаты;
		
		Если ФорматПериодаОплаты = "ММГГГГ" Или ФорматПериодаОплаты = "ММ.ГГГГ" Или ФорматПериодаОплаты = "" Или ФорматПериодаОплаты = Неопределено Тогда
			
			ДатаСтрокой = Прав(СтруктураПолейQRКода.paymPeriod, 4) + Лев(СтруктураПолейQRКода.paymPeriod, 2) + "01";
			
		ИначеЕсли ФорматПериодаОплаты = "ММГГММГГ" Или ФорматПериодаОплаты = "ММГГ" Тогда
			
			ДатаСтрокой = "20" + Сред(СтруктураПолейQRКода.paymPeriod, 3, 2) + Лев(СтруктураПолейQRКода.paymPeriod, 2) + "01";
			
		КонецЕсли;
		
		Попытка
			Дата = Дата(ДатаСтрокой);
		Исключение
			Дата = '00010101';
		КонецПопытки;
		
	КонецЕсли;
	
	Параметры.МесяцНачисления = Дата;
	
	////////////////////////////////////////
	// ПРИЗНАК ОПЛАТЫ ПО КАП.РЕМОНТУ (Наименование платежа (назначение))
	
	НазначениеПлатежаСтрока = "";
	Если СтруктураПолейQRКода.Свойство("Purpose", НазначениеПлатежаСтрока) Тогда
		
		Если НазначениеПлатежаСтрока = "Оплата за КАПРЕМОНТ" Тогда
			Параметры.ПризнакОплатыПоКР = Истина;
		Иначе
			Параметры.ПризнакОплатыПоКР = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработатьИРазобратьQRКодИзШаблона()

#КонецОбласти

#КонецЕсли