#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	
	ЗаполнитьСтрокиДокумента(СтруктураПараметров, СтруктураПараметров.ТаблицаРезультатов);
	ДанныеДляЗаполнения.Вставить("Список", СтруктураПараметров.ТаблицаРезультатов);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДокумента(СтруктураПараметров, ТаблицаРезультатов)

	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(СтруктураПараметров.Организация, СтруктураПараметров.КонецПериода);

	Если НЕ УпрощенныйУчетНДС Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСНачисленныйОбороты.Покупатель КАК Контрагент,
		|	НДСНачисленныйОбороты.СчетФактура КАК ДокументОснование,
		|	НДСНачисленныйОбороты.СтавкаНДС КАК СтавкаНДС,
		|	НДСНачисленныйОбороты.СчетФактура.Дата КАК Дата,
		|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход КАК Сумма,
		|	НДСНачисленныйОбороты.НДСПриход КАК СуммаНДС
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Период,
		|			Организация = &Организация
		|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате)
		|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСНачисленКУплате)) КАК НДСНачисленныйОбороты
		|ГДЕ
		|	НДСНачисленныйОбороты.СуммаБезНДСПриход + НДСНачисленныйОбороты.НДСПриход <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НДСПродажи.Покупатель,
		|	НДСПродажи.СчетФактура,
		|	НДСПродажи.СтавкаНДС,
		|	НДСПродажи.СчетФактура.Дата,
		|	НДСПродажи.СуммаБезНДСОборот + НДСПродажи.НДСОборот,
		|	НДСПродажи.НДСОборот
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
		|			&НачалоПериодаКнигаПродаж,
		|			&КонецПериода,
		|			Период,
		|			Организация = &Организация
		|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате)) КАК НДСПродажи
		|ГДЕ
		|	НДСПродажи.СуммаБезНДСОборот + НДСПродажи.НДСОборот <> 0";

		Запрос.УстановитьПараметр("ПустаяДата",    '00010101');
		Запрос.УстановитьПараметр("Организация",   СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("НачалоПериода", Новый Граница (СтруктураПараметров.НачалоПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецДня(СтруктураПараметров.КонецПериода), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("НачалоПериодаКнигаПродаж", 
			?(СтруктураПараметров.НачалоПериода >= '20120101', Новый Граница(СтруктураПараметров.НачалоПериода, ВидГраницы.Включая), '20120101'));

		ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();

	КонецЕсли;

	// Определяем счет-фактуру, соответствующий строке (выписанный ранее)
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.СтавкаНДС,
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
			|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу)
			|";

		Запрос.УстановитьПараметр("ДокументыОснования", ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
			ТаблицаРезультатов.ВыгрузитьКолонку("ДокументОснование"), Истина));

		СФПоДокументам = Запрос.Выполнить().Выгрузить();

		Если СФПоДокументам.Количество() > 0 Тогда

			СФПоДокументам.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
			ТаблицаРезультатов.Колонки.Добавить("СчетФактура");

			СтруктураОтбора = Новый Структура("ДокументОснование, СтавкаНДС");
			СтруктураОтбора.Вставить("Использован", Ложь);

			Для каждого СтрокаРезультата Из ТаблицаРезультатов Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрокаРезультата);
				СтрокаСФ = СФПоДокументам.НайтиСтроки(СтруктураОтбора);
				Если СтрокаСФ.Количество() > 0 Тогда
					СтрокаРезультата.СчетФактура = СтрокаСФ[0].СчетФактура;
					СтрокаСФ[0].Использован = Истина;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// ПРОЦЕДУРЫ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

Процедура СформироватьСчетаФактуры(СтруктураПараметров, АдресХранилища) Экспорт
	
	Список = СтруктураПараметров.ТаблицыСчетовФактур.Список;
	НеиспользуемыеСчетаФактуры = СтруктураПараметров.ТаблицыСчетовФактур.НеиспользуемыеСчетаФактуры;
	
	ЕстьОшибки = ВыполнитьФормированиеСчетовФактурСуммовыеРазницы(СтруктураПараметров, Список, НеиспользуемыеСчетаФактуры);
	
	Если Не ЕстьОшибки Тогда
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
			НачалоКвартала(СтруктураПараметров.НачалоПериода),
			СтруктураПараметров.Организация, Неопределено,
			Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы, НЕ ЕстьОшибки);	
	КонецЕсли;
		
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Список", Список);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Функция ВыполнитьФормированиеСчетовФактурСуммовыеРазницы(СтруктураПараметров, Список, НеиспользуемыеСчетаФактуры)
	
	Если СтруктураПараметров.Свойство("ОчиститьСписокНеиспользуемыхСчетовФактур")
		И СтруктураПараметров.ОчиститьСписокНеиспользуемыхСчетовФактур Тогда
		НеиспользуемыеСчетаФактуры.Очистить();
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("УстановитьПометкиУдаления")
		И СтруктураПараметров.УстановитьПометкиУдаления Тогда
		УстановитьПометкиУдаления(НеиспользуемыеСчетаФактуры);
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	Ответственный = Пользователи.ТекущийПользователь();

	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	КолонкаСчетФактура = Список.ВыгрузитьКолонку("СчетФактура");
	СписокСФ = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(КолонкаСчетФактура , Истина);
	Для Каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	
	ПараметрыОтбораИспользован = Новый Структура("Использован", Ложь);
	МассивНеиспользованныхСф = НеиспользуемыеСчетаФактуры.НайтиСтроки(ПараметрыОтбораИспользован);
	СчетчикНеиспользованныхСф = 0;
	Для каждого Документ Из Список Цикл

		ОшибкаФормирования = Ложь;

		// Создать/использовать Счет-фактуру
		Если НЕ Документ.СчетФактура = ПустаяСсылкаСФ Тогда
			СчФ = Документ.СчетФактура.ПолучитьОбъект();
		ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы Тогда
			Попытка
				СчФ = МассивНеиспользованныхСф[СчетчикНеиспользованныхСф].Ссылка;
				СчетчикНеиспользованныхСф = СчетчикНеиспользованныхСф + 1;
			Исключение
				СчФ = Неопределено;
			КонецПопытки;
			Если СчФ = Неопределено Тогда
				ИспользоватьРанееОбнаруженныеДокументы = Ложь;
				СчФ  = Документы.СчетФактураВыданный.СоздатьДокумент();
				СчФ.Ответственный = Ответственный;
			Иначе
				МассивНеиспользованныхСф[СчетчикНеиспользованныхСф].Использован = Истина;
				СчФ = СчФ.Ссылка.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			СчФ.Ответственный = Ответственный;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СчФ,Документ);
		СчФ.Организация = СтруктураПараметров.Организация;
		СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу;
		СчФ.Под0 = Ложь;
		СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
		
		Если УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(СчФ.Дата) = 2 Тогда
			СчФ.КодВидаОперации = "09";
			СчФ.КодСпособаВыставления = 1;
			Счф.СчетФактураНеВыставляется = Истина;
		КонецЕсли;

		СчФ.ДокументыОснования.Очистить();
		СчФ.ДокументыОснования.Добавить().ДокументОснование = Документ.ДокументОснование;

		СчФ.ВалютаДокумента = ВалютаРегламентированногоУчета;
		СчФ.СуммаДокумента	= Документ.Сумма;
		СчФ.ДоговорКонтрагента = Неопределено;

		СчФ.ПометкаУдаления = Ложь;

		Если ОшибкаФормирования Тогда
			Документ.СФсформирован = Ложь;
			Документ.СчетФактура = Неопределено;
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;

		СчФ.УстановитьВремя();

		ТипОснования = ТипЗнч(Документ.ДокументОснование);

		Если ТипОснования = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
			СчФ.НомерПлатежноРасчетногоДокумента = СчФ.ДокументОснование.НомерВходящегоДокумента;
			СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.ДатаВходящегоДокумента;
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			СчФ.НомерПлатежноРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СчФ.ДокументОснование);
			СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.Дата;
		Иначе
			СчФ.НомерПлатежноРасчетногоДокумента = "";
			СчФ.ДатаПлатежноРасчетногоДокумента =  Неопределено;
		КонецЕсли;

		СТрокаПРД = СчФ.ПлатежноРасчетныеДокументы.Добавить();
		СтрокаПРД.ДатаДокумента  = СчФ.ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерДокумента = СчФ.НомерПлатежноРасчетногоДокумента;
		
		Если СчФ.ЭтоНовый() Тогда
			ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(СчФ);
		КонецЕсли;
		
		Попытка
			СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Документ.СФсформирован = Истина;
			Документ.СчетФактура = СчФ.Ссылка;
		Исключение
			Документ.СФсформирован = Ложь;
			Документ.СчетФактура = Неопределено;
			ЕстьОшибки = Истина;
		КонецПопытки;

	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

Процедура УстановитьПометкиУдаления(НеиспользуемыеСчетаФактуры)
	
	Для Каждого Документ Из НеиспользуемыеСчетаФактуры Цикл
		Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Ссылка, "ПометкаУдаления") Тогда
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли