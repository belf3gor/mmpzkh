
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Процедура устанавливает видимость элементов формы.
Процедура УправлениеФормой()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	ВыбраноЗаявок = 0;
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаЗаявок Цикл
		Если СтрокаТаблицы.Использовать Тогда
			ВыбраноЗаявок = ВыбраноЗаявок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		ТекстНадписи = ПредметИсчисленияПрописью(ВыбраноЗаявок, НСтр("ru = 'заявка,заявки,заявок'"));
		Элементы.ДекорацияОкончаниеТекста.Заголовок = ТекстНадписи;
		
		Элементы.КомандаНазад.Доступность        = Ложь;
		Элементы.КомандаДалее.Видимость          = Истина;
		Элементы.КомандаДалее.КнопкаПоУмолчанию  = Истина;
		
		Элементы.СформироватьДокументы.Видимость          = Ложь;
		Элементы.ПоказатьСписокОтобранныхЗаявок.Видимость = Ложь;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Элементы.ГруппаСтраницыВторогоЭтапа.ТекущаяСтраница = Элементы.ГруппаСтраницыВторогоЭтапа.ПодчиненныеЭлементы.СтраницаОбеспечениеЗаявок;
		
		Элементы.КомандаНазад.Доступность       = Истина;
		Элементы.КомандаДалее.Видимость         = Ложь;
		Элементы.КомандаДалее.КнопкаПоУмолчанию = Ложь;
		
		Элементы.СформироватьДокументы.Видимость         = Истина;
		Элементы.СформироватьДокументы.КнопкаПоУмолчанию = Истина;
		
		ТекстНадписи = ПредметИсчисленияПрописью(ВыбраноЗаявок, НСтр("ru = 'заявки,заявок,заявок'"));
		
		Элементы.ПоказатьСписокОтобранныхЗаявок.Заголовок = "Обеспечение " + Строка(ВыбраноЗаявок) + " " + ТекстНадписи;
		Элементы.ПоказатьСписокОтобранныхЗаявок.Видимость = Истина;
		
		ЗаполнитьТаблицуМатериалов();
		ОбновитьСвязанныеТаблицы();
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаКлиенте
// Процедура устанавливает доступность кнопки "Сформировать документы".
Процедура УстановитьДоступностьКнопкиСформироватьДокументы(ЗаблокироватьКнопку = Истина)
	
	Элементы.СформироватьДокументы.Доступность = НЕ ЗаблокироватьКнопку;
	
КонецПроцедуры // УстановитьДоступностьКнопкиСформироватьДокументы()

&НаСервере
// Процедура заполняет Склад по ответственному Мастеру.
Процедура ЗаполнитьСкладНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница КАК Склад
	|ИЗ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(, ) КАК ОтветственныеЛицаСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = &Мастер";
	Запрос.УстановитьПараметр("Мастер", Объект.Мастер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.Склад = Выборка.Склад;
	Иначе
		Объект.Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСкладНаСервере()

&НаСервере
// Процедура заполняет табличную часть заявками по критериям отбора.
Процедура ПодобратьЗаявкиНаСервере()
	
	Объект.ТаблицаЗаявок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка КАК Заявка
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРабот.Проведен
	|	И КВП_ЗаявкаНаВыполнениеРабот.СтатусВыполнения В (ЗНАЧЕНИЕ(Перечисление.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыСтатусовВыполненияРабот.Принята))
	|	И КВП_ЗаявкаНаВыполнениеРабот.Организация = &Организация
	|	И КВП_ЗаявкаНаВыполнениеРабот.ОтветственныйЗаВыполнение = &Мастер
	|	И КВП_ЗаявкаНаВыполнениеРабот.Склад = &Склад
	|	И &УсловиеНаПериод";
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("Мастер",          Объект.Мастер);
	Запрос.УстановитьПараметр("Склад",           Объект.Склад);
	Запрос.УстановитьПараметр("ПериодНачало",    НачалоДня(Объект.ПериодНачало));
	Запрос.УстановитьПараметр("ПериодОкончание", КонецДня(Объект.ПериодОкончание));
	
	СтрокаЗаменыУсловия = "Истина";
	Если ЗначениеЗаполнено(Объект.ПериодНачало) Тогда
		СтрокаЗаменыУсловия = СтрокаЗаменыУсловия + " И КВП_ЗаявкаНаВыполнениеРабот.ВремяУдобноеДляЗаказчика >= &ПериодНачало";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПериодОкончание) Тогда
		СтрокаЗаменыУсловия = СтрокаЗаменыУсловия + " И КВП_ЗаявкаНаВыполнениеРабот.ВремяУдобноеДляЗаказчика <= &ПериодОкончание";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПериод", СтрокаЗаменыУсловия);
	
	// Заполняем таблицу заявок:
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ТаблицаЗаявок.Добавить();
		НоваяСтрока.Заявка = Выборка.Заявка;
	КонецЦикла;
	
КонецПроцедуры // ПодобратьЗаявкиНаСервере()

&НаСервере
// Процедура заполняет таблицу материалов по данным отобранных заявок.
Процедура ЗаполнитьТаблицуМатериалов()
	
	ПолнаяТаблицаТребуемыхМатериалов.Очистить();
	ПолнаяТаблицаОстатковМатериалов.Очистить();
	ТаблицаДокументовПеремещения.Очистить();
	
	// Переход на 2й этап мастера возможен только если ведется учет по складам,
	// а значит "Склад" является либо 2-м, либо 3-м субконто счета.
	Если ПланыСчетов.Хозрасчетный.Материалы.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		СтрокаНомераСубконто = "Субконто3";
	Иначе
		СтрокаНомераСубконто = "Субконто2";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Номенклатура КАК Номенклатура,
	|	СУММА(КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.КоличествоПлан) КАК Необходимо,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка КАК Заявка,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.Склад КАК Склад,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.ОтветственныйЗаВыполнение КАК Мастер
	|ПОМЕСТИТЬ ТаблицаМатериалов
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот.НарядЗаказ КАК КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.Проведен
	|	И КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.СтатусВыполнения В (ЗНАЧЕНИЕ(Перечисление.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыСтатусовВыполненияРабот.Принята))
	|	И КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.Организация = &Организация
	|	И &УсловиеНаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Номенклатура,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.ЕдиницаИзмерения,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.Склад,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.ОтветственныйЗаВыполнение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМатериалов.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалов.Необходимо КАК Необходимо,
	|	ТаблицаМатериалов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаМатериалов.Заявка КАК Заявка,
	|	ТаблицаМатериалов.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаМатериалов.Склад = &Склад
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СкладПрочегоМастера,
	|	ТаблицаМатериалов.Мастер КАК Мастер
	|ИЗ
	|	ТаблицаМатериалов КАК ТаблицаМатериалов
	|ГДЕ
	|	(ТаблицаМатериалов.Склад = &Склад
	|				И ТаблицаМатериалов.Заявка В (&СписокЗаявок)
	|			ИЛИ ТаблицаМатериалов.Склад <> &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК ВНаличии
	|ПОМЕСТИТЬ ТаблицаОстатковПоСкладам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы)), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковПоСкладам.СчетУчета КАК СчетУчета,
	|	ТаблицаОстатковПоСкладам.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковПоСкладам.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаОстатковПоСкладам.Склад = &Склад
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СкладПрочегоМастера,
	|	ТаблицаОстатковПоСкладам.ВНаличии КАК ВНаличии,
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК Мастер,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = &ПустоеФизЛицо
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбщийСклад
	|ИЗ
	|	ТаблицаОстатковПоСкладам КАК ТаблицаОстатковПоСкладам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(, ) КАК ОтветственныеЛицаСрезПоследних
	|		ПО (ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница = ТаблицаОстатковПоСкладам.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НЕ ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = &ПустоеФизЛицо,
	|	ТаблицаОстатковПоСкладам.Склад";
	
	Запрос.УстановитьПараметр("СписокЗаявок",    Объект.ТаблицаЗаявок.Выгрузить(Новый Структура("Использовать", Истина)).ВыгрузитьКолонку("Заявка"));
	Запрос.УстановитьПараметр("Период",          ТекущаяДата());
	Запрос.УстановитьПараметр("Организация",     Объект.Организация);
	Запрос.УстановитьПараметр("Склад",           Объект.Склад);
	Запрос.УстановитьПараметр("Мастер",          Объект.Мастер);
	Запрос.УстановитьПараметр("ПериодНачало",    НачалоДня(Объект.ПериодНачало));
	Запрос.УстановитьПараметр("ПериодОкончание", КонецДня(Объект.ПериодОкончание));
	
	// В общем случае считаем, что склад является "Общим", если у него не заполнено ответственное лицо.
	Запрос.УстановитьПараметр("ПустоеФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	// Вносим условия на период обеспечения.
	СтрокаЗаменыУсловия = "Истина";
	Если ЗначениеЗаполнено(Объект.ПериодНачало) Тогда
		СтрокаЗаменыУсловия = СтрокаЗаменыУсловия + " И КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.ВремяУдобноеДляЗаказчика >= &ПериодНачало";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПериодОкончание) Тогда
		СтрокаЗаменыУсловия = СтрокаЗаменыУсловия + " И КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.ВремяУдобноеДляЗаказчика <= &ПериодОкончание";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаПериод", СтрокаЗаменыУсловия);
	
	// Вносим условия на субконто "Склад".
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Субконто2", СтрокаНомераСубконто);
	
	ПакетРезультат = Запрос.ВыполнитьПакет();
	
	// Заполняем таблицу материалов полную:
	Выборка = ПакетРезультат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ПолнаяТаблицаТребуемыхМатериалов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ЗаявкаОбеспечена = Истина;
	КонецЦикла;
	
	Выборка = ПакетРезультат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ПолнаяТаблицаОстатковМатериалов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуМатериалов()

&НаКлиенте
// Процедура обновляет отображаемые пользователю таблицы.
Процедура ОбновитьСвязанныеТаблицы()
	
	ТаблицаТребуемыхМатериалов.Очистить();
	
	// На основании "Полной таблицы требуемых материалов" и "Полной таблицы остатков материалов"
	// заполняем "Таблицу требуемых материалов", отображаемую пользователю:
	СтрокиТребуемыхМатериаловМастера = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Склад", Объект.Склад));
	Для Каждого СтрокаМатериала Из СтрокиТребуемыхМатериаловМастера Цикл
		НайденныеСтроки = ТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", СтрокаМатериала.Номенклатура, СтрокаМатериала.ЕдиницаИзмерения));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТекущегоМатериала = ТаблицаТребуемыхМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТекущегоМатериала, СтрокаМатериала);
		Иначе
			СтрокаТекущегоМатериала = НайденныеСтроки[0];
			СтрокаТекущегоМатериала.Необходимо = СтрокаТекущегоМатериала.Необходимо + СтрокаМатериала.Необходимо;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаОстатка Из ПолнаяТаблицаОстатковМатериалов Цикл
		
		НайденныеСтроки = ТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура", СтрокаОстатка.Номенклатура));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТекущегоМатериала = НайденныеСтроки[0];
			Если СтрокаОстатка.Склад = Объект.Склад Тогда
				СтрокаТекущегоМатериала.ВНаличии = СтрокаТекущегоМатериала.ВНаличии + СтрокаОстатка.ВНаличии;
			Иначе
				СтрокаТекущегоМатериала.ИмеетсяНаСкладах = СтрокаТекущегоМатериала.ИмеетсяНаСкладах + СтрокаОстатка.ВНаличии;
				СтрокаТекущегоМатериала.Получить         = СтрокаТекущегоМатериала.Получить         + СтрокаОстатка.Получить;
			КонецЕсли;
			// Заполнение данного реквизита необходимо для подсветки строк таблицы требуемых материалов
			// в зависимости от суммарного количества материала на всех складах.
			СтрокаТекущегоМатериала.ИмеетсяНаСкладахВсего = СтрокаТекущегоМатериала.ИмеетсяНаСкладахВсего + СтрокаОстатка.ВНаличии;
		КонецЕсли;
		
		
		// Заполним свободные остатки
		Если СтрокаОстатка.Склад = Объект.Склад Тогда
			// Свободные остатки интересны только для прочих мастеров.
			СтрокаОстатка.Свободно = СтрокаОстатка.ВНаличии;
			Продолжить;
		ИначеЕсли СтрокаОстатка.ОбщийСклад Тогда
			// Для общих складов все остатки считаются свободными.
			СтрокаОстатка.Свободно = СтрокаОстатка.ВНаличии;
			Продолжить;
		КонецЕсли;
		
		СтрокиТребуемыхМатериалов = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтрокаОстатка.Номенклатура, СтрокаОстатка.Склад));
		ТребуемоеКоличествоПрочемуМастеру = 0;
		Для Каждого НайденнаяСтрока Из СтрокиТребуемыхМатериалов Цикл
			ТребуемоеКоличествоПрочемуМастеру = ТребуемоеКоличествоПрочемуМастеру + НайденнаяСтрока.Необходимо;
		КонецЦикла;
		СтрокаОстатка.Свободно = СтрокаОстатка.ВНаличии - ТребуемоеКоличествоПрочемуМастеру;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыТребуемыхМатериалов Из ТаблицаТребуемыхМатериалов Цикл
		
		Недостаток = СтрокаТаблицыТребуемыхМатериалов.Необходимо - СтрокаТаблицыТребуемыхМатериалов.ВНаличии;
		СтрокаТаблицыТребуемыхМатериалов.Недостаток = ?(Недостаток > 0, Недостаток, 0);
		
		Если СтрокаТаблицыТребуемыхМатериалов.Необходимо <= СтрокаТаблицыТребуемыхМатериалов.ВНаличии Тогда
			СтрокаТаблицыТребуемыхМатериалов.ПризнакВозможностиОбеспечить = 0;
		ИначеЕсли СтрокаТаблицыТребуемыхМатериалов.Необходимо > СтрокаТаблицыТребуемыхМатериалов.ВНаличии И СтрокаТаблицыТребуемыхМатериалов.Необходимо <= СтрокаТаблицыТребуемыхМатериалов.ИмеетсяНаСкладахВсего Тогда
			СтрокаТаблицыТребуемыхМатериалов.ПризнакВозможностиОбеспечить = 1;
		Иначе
			СтрокаТаблицыТребуемыхМатериалов.ПризнакВозможностиОбеспечить = 2;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТребуемыхМатериалов.Сортировать("ПризнакВозможностиОбеспечить УБЫВ, Номенклатура");
	
	// Отсортируем полную таблицу остатков материалов:
	ПолнаяТаблицаОстатковМатериалов.Сортировать("ОбщийСклад УБЫВ, Склад ВОЗР, Свободно УБЫВ");
	
КонецПроцедуры // ОбновитьСвязанныеТаблицы()

&НаКлиенте
// Процедура выполняет автоматическое заполнение получения требуемых материалов свободными остатками.
Процедура ЗаполнитьСвободнымиОстатками(Материал = Неопределено, Знач ТребуемоеКоличествоМатериала = Неопределено)
	
	// Установим флаг "ЗаявкаОбеспечена" в строках таблицы требуемых материалов для того, чтобы строки заявок мастера,
	// для выполнения которых требуется текущий материал, не подсвечивались красным цветом.
	// При любом ручном редактировании обеспечиваемого материала, а также при заполнении свободными остатками
	// данный флаг будем сбрасывать в "ЛОЖЬ", т.к. однозначно нельзя сказать, для каких заявок перемещается материал.
	Для Каждого СтрокаМатериала Из ПолнаяТаблицаТребуемыхМатериалов Цикл
		СтрокаМатериала.ЗаявкаОбеспечена = Истина;
	КонецЦикла;
	
	// Если параметр "Материал" передан, значит происходит ручное изменение получаемого количества
	// в таблице требуемых материалов и нужно выполнять автоматическое распределение только одной строки таблицы.
	Если НЕ Материал = Неопределено Тогда
		СтрокиТаблицыТребуемыхМатериалов = ТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура", Материал));
	Иначе
		СтрокиТаблицыТребуемыхМатериалов = ТаблицаТребуемыхМатериалов;
	КонецЕсли;
	
	Для Каждого СтрокаТребуемогоМатериала Из СтрокиТаблицыТребуемыхМатериалов Цикл
		Если НЕ СтрокаТребуемогоМатериала.Недостаток = 0 Тогда
			
			Если Материал = Неопределено Тогда
				ТребуемоеКоличествоМатериала = СтрокаТребуемогоМатериала.Недостаток;
			КонецЕсли;
			
			НайденныеСтрокиПолнойТаблицыОстатковМатериалов = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТребуемогоМатериала.Номенклатура));
			Для Каждого СтрокаОстатковМатериалов Из НайденныеСтрокиПолнойТаблицыОстатковМатериалов Цикл
				
				// Очистим в полной таблице остатков материалов получаемое количество материала.
				СтрокаОстатковМатериалов.Получить = 0;
				
				// Если по текущему материалу требуемое количество равно (или стало равно в процессе работы цикла) 0,
				// то завершаем цикл и переходим к следующему материалу.
				Если ТребуемоеКоличествоМатериала = 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Строки с пустым количеством имеющегося в наличии материала и строки текущего склада Мастера пропускаем.
				Если СтрокаОстатковМатериалов.ВНаличии = 0 ИЛИ СтрокаОстатковМатериалов.Склад = Объект.Склад Тогда
					Продолжить;
				Иначе
					СтрокаОстатковМатериалов.Получить = Мин(ТребуемоеКоличествоМатериала, СтрокаОстатковМатериалов.Свободно);
					ТребуемоеКоличествоМатериала = ТребуемоеКоличествоМатериала - СтрокаОстатковМатериалов.Получить;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// НЕ нужно, чтобы таблицы не перерисовывались
	//ОбновитьСвязанныеТаблицы();
	
КонецПроцедуры // ЗаполнитьСвободнымиОстатками()

&НаКлиенте
// Процедура выполняет автоматическое заполнение получения требуемых материалов по полностью закрываемым заявкам.
Процедура ЗаполнитьЗакрываемыеЗаявки()
	
	// Очистим получаемые количества материалов.
	Для Каждого СтрокаОстатков Из ПолнаяТаблицаОстатковМатериалов Цикл
		СтрокаОстатков.Получить = 0;
		СтрокаОстатков.Занято   = 0;
	КонецЦикла;
	
	Для Каждого СтрокаМатериала Из ПолнаяТаблицаТребуемыхМатериалов Цикл
		
		// Очистим флаг "ЗаявкаОбработана".
		СтрокаМатериала.ЗаявкаОбработана = Ложь;
		
		// Установим флаг "ЗаявкаОбеспечена" в строках таблицы требуемых материалов для того, чтобы строки заявок мастера,
		// для выполнения которых требуется текущий материал, не подсвечивались красным цветом.
		// При любом ручном редактировании обеспечиваемого материала, а также при заполнении свободными остатками
		// данный флаг будем сбрасывать в "ЛОЖЬ", т.к. однозначно нельзя сказать, для каких заявок перемещается материал.
		СтрокаМатериала.ЗаявкаОбеспечена = Истина;
		
	КонецЦикла;
	
	СтрокиТребуемыхМатериаловМастера = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("СкладПрочегоМастера", Ложь));
	Для Каждого СтрокаМатериала Из СтрокиТребуемыхМатериаловМастера Цикл
		
		Если СтрокаМатериала.ЗаявкаОбработана Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтрокиЗаявки = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Заявка", СтрокаМатериала.Заявка));
		СвободныхМатериаловДостаточноДляЗаявки = Истина;
		Для Каждого СтрокаТребуемогоМатериала Из НайденныеСтрокиЗаявки Цикл
			
			Если НЕ СвободныхМатериаловДостаточноДляЗаявки Тогда
				СтрокаТребуемогоМатериала.ЗаявкаОбработана = Истина;
				СтрокаТребуемогоМатериала.ЗаявкаОбеспечена = Ложь;
				Продолжить;
			КонецЕсли;
			
			ОстатокНаСкладеМастера = 0;
			ЗанятоеКоличествоМатериала = 0;
			СтрокиОстатковМастера = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтрокаТребуемогоМатериала.Номенклатура, Объект.Склад));
			Для Каждого СтрокаОстаткаМастера Из СтрокиОстатковМастера Цикл
				ОстатокНаСкладеМастера = ОстатокНаСкладеМастера + СтрокаОстаткаМастера.ВНаличии;
				ЗанятоеКоличествоМатериала = ЗанятоеКоличествоМатериала + СтрокаОстаткаМастера.Занято;
			КонецЦикла;
			
			СтрокиОстатковПрочихМастеров = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура, СкладПрочегоМастера", СтрокаТребуемогоМатериала.Номенклатура, Истина));
			// Если свободных остатков + остатков на складе самого мастера хотя бы по одной позиции требуемой номенклатуры
			// заявки недостаточно, то перемещение материалов для такой заявки не выполняем.
			СвободныйОстатокПрочихМастеров = 0;
			Для Каждого СтрокаОстаткаПрочегоМастера Из СтрокиОстатковПрочихМастеров Цикл
				СвободныйОстатокПрочихМастеров = СвободныйОстатокПрочихМастеров + СтрокаОстаткаПрочегоМастера.Свободно - СтрокаОстаткаПрочегоМастера.Занято;
			КонецЦикла;
			Если СвободныйОстатокПрочихМастеров + ОстатокНаСкладеМастера - ЗанятоеКоличествоМатериала < СтрокаТребуемогоМатериала.Необходимо Тогда
				СвободныхМатериаловДостаточноДляЗаявки = Ложь;
				СтрокаТребуемогоМатериала.ЗаявкаОбработана = Истина;
				СтрокаТребуемогоМатериала.ЗаявкаОбеспечена = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СвободныхМатериаловДостаточноДляЗаявки Тогда
			Для Каждого СтрокаТребуемогоМатериала Из НайденныеСтрокиЗаявки Цикл
				ЗаполнитьЗаявкуМатериалами(СтрокаТребуемогоМатериала.Номенклатура, СтрокаТребуемогоМатериала.Необходимо);
				СтрокаТребуемогоМатериала.ЗаявкаОбработана = Истина;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТребуемогоМатериала Из НайденныеСтрокиЗаявки Цикл
				СтрокаТребуемогоМатериала.ЗаявкаОбеспечена = Ложь;
				СтрокаТребуемогоМатериала.ЗаявкаОбработана = Истина;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСвязанныеТаблицы();
	
КонецПроцедуры // ЗаполнитьЗакрываемыеЗаявки()

&НаКлиенте
// Процедура выполняет автоматическое заполнение получения требуемых материалов отдельной заявки свободными остатками.
Процедура ЗаполнитьЗаявкуМатериалами(Номенклатура, Знач Необходимо)
	
	// Сперва проверим хватает ли собственных остатков Мастера для выполнения заявки по текущему материалу.
	НайденныеСтрокиОстатковМатериаловМастера = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура, СкладПрочегоМастера", Номенклатура, Ложь));
	Для Каждого СтрокаОстатковМатериалов Из НайденныеСтрокиОстатковМатериаловМастера Цикл
		
		Если СтрокаОстатковМатериалов.Свободно - СтрокаОстатковМатериалов.Занято = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееЗанимаемоеКоличество = Мин(Необходимо, СтрокаОстатковМатериалов.Свободно - СтрокаОстатковМатериалов.Занято);
		СтрокаОстатковМатериалов.Занято = СтрокаОстатковМатериалов.Занято + ТекущееЗанимаемоеКоличество;
		
		Необходимо = Необходимо - ТекущееЗанимаемоеКоличество;
		
	КонецЦикла;
	
	// Если остатков материала на складе самого Мастера недостаточно, то будем получать с Прочих складов.
	Если Необходимо > 0 Тогда
		НайденныеСтрокиОстатковМатериалаНаПрочихСкладах = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура, СкладПрочегоМастера", Номенклатура, Истина));
		Для Каждого СтрокаОстатковМатериалов Из НайденныеСтрокиОстатковМатериалаНаПрочихСкладах Цикл
			
			// Если свободных остатков на складе мастера за вычетом занятых на обеспечение други заявок недостаточно,
			// то переходим к следующему складу.
			Если СтрокаОстатковМатериалов.Свободно - СтрокаОстатковМатериалов.Занято = 0 ИЛИ Необходимо = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущееПеремещаемоеКоличество = Мин(Необходимо, СтрокаОстатковМатериалов.Свободно - СтрокаОстатковМатериалов.Занято);
			СтрокаОстатковМатериалов.Занято   = СтрокаОстатковМатериалов.Занято   + ТекущееПеремещаемоеКоличество;
			СтрокаОстатковМатериалов.Получить = СтрокаОстатковМатериалов.Получить + ТекущееПеремещаемоеКоличество;
			
			Необходимо = Необходимо - ТекущееПеремещаемоеКоличество;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗаявкуМатериалами()

&НаКлиенте
// Процедура выполняет переход к следующему этапу.
Процедура ПоказатьСледующийЭтап()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап2;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры // ПоказатьСледующийЭтап()

&НаКлиенте
// Процедура выполняет переход к предыдущему этапу.
Процедура ПоказатьПредыдущийЭтап()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап1;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры // ПоказатьПредыдущийЭтап()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура-обработчик события формы "ПриСозданииНаСервере".
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация",     Объект.Организация);
	Параметры.Свойство("Мастер",          Объект.Мастер);
	Параметры.Свойство("ПериодНачало",    Объект.ПериодНачало);
	Параметры.Свойство("ПериодОкончание", Объект.ПериодОкончание);
	Если НЕ Объект.Мастер.Пустая() Тогда
		ЗаполнитьСкладНаСервере();
	КонецЕсли;
	
	ВедетсяУчетПоСкладам = ПланыСчетов.Хозрасчетный.Материалы.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) <> Неопределено;
	
	Объект.ПериодНачало    = ?(ЗначениеЗаполнено(Объект.ПериодНачало), НачалоДня(Объект.ПериодНачало), НачалоДня(ТекущаяДата()));
	Объект.ПериодОкончание = ?(ЗначениеЗаполнено(Объект.ПериодОкончание), КонецДня(Объект.ПериодОкончание), КонецДня(ТекущаяДата()));
	
	мПериодНачало    = Объект.ПериодНачало;
	мПериодОкончание = Объект.ПериодОкончание;
	
	// Установим значения по умолчанию для обязательных реквизитов.
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельНавигации);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события формы "ПриОткрытии".
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ВедетсяУчетПоСкладам Тогда
		
		СсылкаНаИнструкцию = Новый ФорматированнаяСтрока("инструкцией",,,, "https://vgkh.ru/faq-1s-zhkh/avariyno_dispetcherskaya_sluzhba_3_0/master_obespecheniya_zayavok/");
		
		Массив = Новый Массив;
		Массив.Добавить(БиблиотекаКартинок.Предупреждение);
		Массив.Добавить(" Учет запасов по складам (местам хранения) не ведется!" + Символы.ПС + "Мастер обеспечения заявок АДС недоступен."
						+ Символы.ПС + "Рекомендуем ознакомиться с ");
		Массив.Добавить(СсылкаНаИнструкцию);
		Массив.Добавить(" по работе мастера.");
		
		ТекстПредупреждения = Новый ФорматированнаяСтрока(Массив);
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПоказатьПредупреждениеЗавершение", ЭтотОбъект), ТекстПредупреждения);
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик оповещения о закрытии предупреждения.
Процедура ПоказатьПредупреждениеЗавершение(ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.ТаблицаЗаявок.Очистить();
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Мастер".
Процедура МастерПриИзменении(Элемент)
	
	ЗаполнитьСкладНаСервере();
	Объект.ТаблицаЗаявок.Очистить();
	УправлениеФормой();
	
КонецПроцедуры // МастерПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ПериодНачало".
Процедура ПериодНачалоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПериодНачало) И ЗначениеЗаполнено(Объект.ПериодОкончание) И Объект.ПериодНачало > Объект.ПериодОкончание Тогда
		ПоказатьПредупреждение(, "Начало периода обеспечения заявок не может быть больше окончания периода!");
		Объект.ПериодНачало = мПериодНачало;
	Иначе
		мПериодНачало = Объект.ПериодНачало;
	КонецЕсли;
	
	Объект.ТаблицаЗаявок.Очистить();
	
КонецПроцедуры // ПериодНачалоПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ПериодОкончание".
Процедура ПериодОкончаниеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПериодНачало) И ЗначениеЗаполнено(Объект.ПериодОкончание) И Объект.ПериодНачало > Объект.ПериодОкончание Тогда
		ПоказатьПредупреждение(, "Начало периода обеспечения заявок не может быть больше окончания периода!");
		Объект.ПериодОкончание = мПериодОкончание;
	Иначе
		мПериодОкончание = Объект.ПериодОкончание;
	КонецЕсли;
	
	Объект.ТаблицаЗаявок.Очистить();
	
КонецПроцедуры // ПериодОкончаниеПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Использовать" таблицы "ТаблицаЗаявок".
Процедура ТаблицаЗаявокИспользоватьПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры // ТаблицаЗаявокИспользоватьПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриАктивизацииСтроки" таблицы "ТаблицаТребуемыхМатериалов".
Процедура ТаблицаТребуемыхМатериаловПриАктивизацииСтроки(Элемент)
	
	ТаблицаЗаявокМатериала.Очистить();
	ТаблицаНаличияНаСкладах.Очистить();
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		// Заполняем таблицу заявок по материалу:
		НайденныеСтроки = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура, Склад", Элемент.ТекущиеДанные.Номенклатура, Объект.Склад));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаЗаявокМатериала.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
		
		// Заполняем таблицу остатков на складах по материалу:
		НайденныеСтрокиОстатковМатериала = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура", Элемент.ТекущиеДанные.Номенклатура));
		Для Каждого НайденнаяСтрока Из НайденныеСтрокиОстатковМатериала Цикл
			Если НайденнаяСтрока.Склад = Объект.Склад Тогда
				Продолжить;
			КонецЕсли;
			НайденныеСтрокиСклада = ТаблицаНаличияНаСкладах.НайтиСтроки(Новый Структура("Склад", НайденнаяСтрока.Склад));
			Если НайденныеСтрокиСклада.Количество() = 0 Тогда
				СтрокаСклада = ТаблицаНаличияНаСкладах.Добавить();
			Иначе
				СтрокаСклада = НайденныеСтрокиСклада[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаСклада, НайденнаяСтрока);
		КонецЦикла;
		
		// Заполняем свободные остатки прочих мастеров:
		Для Каждого СтрокаТаблицыНаличияНаСкладах Из ТаблицаНаличияНаСкладах Цикл
			
			// Для общих складов все остатки считаются свободными.
			
			НайденныеСтрокиМастера = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтрокаТаблицыНаличияНаСкладах.Номенклатура, СтрокаТаблицыНаличияНаСкладах.Склад));
			КоличествоТребуемогоМатериалаПрочемуМастеру = 0;
			Для Каждого НайденнаяСтрока Из НайденныеСтрокиМастера Цикл
				КоличествоТребуемогоМатериалаПрочемуМастеру = КоличествоТребуемогоМатериалаПрочемуМастеру + НайденнаяСтрока.Необходимо;
			КонецЦикла;
			
			СтрокаТаблицыНаличияНаСкладах.Свободно = СтрокаТаблицыНаличияНаСкладах.ВНаличии - КоличествоТребуемогоМатериалаПрочемуМастеру;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отсортируем таблицу наличия на складах:
	ТаблицаНаличияНаСкладах.Сортировать("ОбщийСклад УБЫВ, Склад ВОЗР, Свободно УБЫВ");
	
КонецПроцедуры // ТаблицаТребуемыхМатериаловПриАктивизацииСтроки()

&НаКлиенте
// Процедура-обработчик события "ПриАктивизацииСтроки" таблицы "ТаблицаНаличияНаСкладах".
Процедура ТаблицаНаличияНаСкладахПриАктивизацииСтроки(Элемент)
	
	ТаблицаЗаявокПрочихМастеров.Очистить();
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Заполняем таблицу заявок "Прочего" мастера по материалу и складу:
		НайденныеСтроки = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура, Склад", Элемент.ТекущиеДанные.Номенклатура, Элемент.ТекущиеДанные.Склад));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = ТаблицаЗаявокПрочихМастеров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНаличияНаСкладахПриАктивизацииСтроки()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Получить" таблицы "ТаблицаНаличияНаСкладах".
Процедура ТаблицаНаличияНаСкладахПолучитьПриИзменении(Элемент)
	
	ТекущиеДанныеТаблицыНаличияНаСкладах = Элемент.Родитель.ТекущиеДанные;
	
	Если ТекущиеДанныеТаблицыНаличияНаСкладах.Получить > ТекущиеДанныеТаблицыНаличияНаСкладах.ВНаличии Тогда
		ТекстСообщения = НСтр("ru = 'Перемещаемое количество материала не может быть больше, чем имеющееся на складе количество материала! Установлено максимальное доступное количество материала для перемещения.'");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		ТекущиеДанныеТаблицыНаличияНаСкладах.Получить = ТекущиеДанныеТаблицыНаличияНаСкладах.ВНаличии;
	КонецЕсли;
	
	ПеремещаемоеКоличество = 0;
	Для Каждого СтрокаТаблицыНаличияНаСкладах Из ТаблицаНаличияНаСкладах Цикл
		ПеремещаемоеКоличество = ПеремещаемоеКоличество + СтрокаТаблицыНаличияНаСкладах.Получить;
	КонецЦикла;
	
	// Установим перемещаемое количество материала в таблице материалов мастера:
	Элементы.ТаблицаТребуемыхМатериалов.ТекущиеДанные.Получить = ПеремещаемоеКоличество;
	
	// Заполним перемещаемое количество материала в полной таблице остатков материалов:
	СтрокиТаблицыОстатковМатериалов = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура, Склад", ТекущиеДанныеТаблицыНаличияНаСкладах.Номенклатура, ТекущиеДанныеТаблицыНаличияНаСкладах.Склад));
	// По логике работы в найденных строках будет только 1 строка.
	Для Каждого СтрокаПеремещаемогоМатериала Из СтрокиТаблицыОстатковМатериалов Цикл
		СтрокаПеремещаемогоМатериала.Получить = ТекущиеДанныеТаблицыНаличияНаСкладах.Получить;
	КонецЦикла;
	
	// Установим флаг "ЗаявкаОбеспечена" в строках таблицы требуемых материалов для того, чтобы строки заявок мастера,
	// для выполнения которых требуется текущий материал, не подсвечивались красным цветом.
	// При любом ручном редактировании обеспечиваемого материала, а также при заполнении свободными остатками
	// данный флаг будем сбрасывать в "ЛОЖЬ", т.к. однозначно нельзя сказать, для каких заявок перемещается материал.
	Для Каждого СтрокаМатериала Из ПолнаяТаблицаТребуемыхМатериалов Цикл
		СтрокаМатериала.ЗаявкаОбеспечена = Истина;
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНаличияНаСкладахПолучитьПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Получить" таблицы "ТаблицаТребуемыхМатериалов".
Процедура ТаблицаТребуемыхМатериаловПолучитьПриИзменении(Элемент)
	
	ТекущиеДанныеТаблицыТребуемыхМатериалов = Элемент.Родитель.ТекущиеДанные;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Получить",         ТекущиеДанныеТаблицыТребуемыхМатериалов.Получить);
	ДопПараметры.Вставить("ИмеетсяНаСкладах", ТекущиеДанныеТаблицыТребуемыхМатериалов.ИмеетсяНаСкладах);
	ДопПараметры.Вставить("ВНаличии",         ТекущиеДанныеТаблицыТребуемыхМатериалов.ВНаличии);
	ДопПараметры.Вставить("Номенклатура",     ТекущиеДанныеТаблицыТребуемыхМатериалов.Номенклатура);
	ДопПараметры.Вставить("ТаблицаФормы",     Элемент.Родитель);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаРучноеИзменениеПолучаемогоМатериала", ЭтотОбъект, ДопПараметры);
	ТекстВопроса = "При изменении количества перемещаемого материала все ранее введенные данные по перемещению данного материалов будут очищены. Продолжить?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ТаблицаТребуемыхМатериаловПолучитьПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного при ручном изменении
// количества перемещаемого материала в таблице требуемых материалов.
Процедура ОбработатьРезультатВопросаРучноеИзменениеПолучаемогоМатериала(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если ДополнительныеПараметры.Получить > ДополнительныеПараметры.ИмеетсяНаСкладах Тогда
			ТекстСообщения = НСтр("ru = 'Перемещаемое количество материала не может быть больше, чем имеющееся на складе количество материала! Установлено максимальное доступное количество материала для перемещения.'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
			ДополнительныеПараметры.Получить = ДополнительныеПараметры.ВНаличии;
		КонецЕсли;
		
		ЗаполнитьСвободнымиОстатками(ДополнительныеПараметры.Номенклатура, ДополнительныеПараметры.Получить);
		
		// Вызовем событие "ПриАктивизацииСтроки" таблицы требуемых материалов,
		// чтобы после ручного изменения значения "Получить" обновились данные в таблице остатков на прочих складах.
		ТаблицаТребуемыхМатериаловПриАктивизацииСтроки(ДополнительныеПараметры.ТаблицаФормы);
		
	Иначе
		
		// Нужно вернуть то значение, которое было установлено в поле до изменения пользователем.
		НайденныеСтрокиПолнойТаблицыОстатков = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура", ДополнительныеПараметры.Номенклатура));
		ИсходноеПолучаемоеКоличество = 0;
		Для Каждого НайденнаяСтрока Из НайденныеСтрокиПолнойТаблицыОстатков Цикл
			ИсходноеПолучаемоеКоличество = ИсходноеПолучаемоеКоличество + НайденнаяСтрока.Получить;
		КонецЦикла;
		
		НайденныеСтрокиТаблицыТребуемыхМатериалов = ТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура", ДополнительныеПараметры.Номенклатура));
		Для Каждого НайденнаяСтрока Из НайденныеСтрокиТаблицыТребуемыхМатериалов Цикл
			НайденнаяСтрока.Получить = ИсходноеПолучаемоеКоличество;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаРучноеИзменениеПолучаемогоМатериала()

&НаКлиенте
// Процедура-обработчик события "Выбор" таблицы "ТаблицаЗаявокМатериала".
Процедура ТаблицаЗаявокМатериалаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийМатериал = Элементы.ТаблицаТребуемыхМатериалов.ТекущиеДанные.Номенклатура;
	
	Заявка = Элемент.ТекущиеДанные.Заявка;
	ДопПараметры = Новый Структура("Заявка, Номенклатура", Заявка, ТекущийМатериал);
	
	ОписаниеОповещенияОЗакрытииЗаявки = Новый ОписаниеОповещения("ОбработчикЗакрытияЗаявки", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура("Ключ", Заявка);
	ФормаЗаявки = ОткрытьФорму("Документ.КВП_ЗаявкаНаВыполнениеРабот.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещенияОЗакрытииЗаявки,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	// Заблокируем для пользователя изменение Организации, текущего мастера Заявки и времени, удобного для заказчика.
	ФормаЗаявки.Элементы.Организация.Доступность                                 = Ложь;
	ФормаЗаявки.Элементы.ОтветственныйЗаВыполнение.Доступность                   = Ложь;
	ФормаЗаявки.Элементы.ВремяУдобноеДляЗаказчика.Доступность                    = Ложь;
	ФормаЗаявки.Элементы.НарядЗаказОткрытьМастерОбеспеченияЗаявокАДС.Доступность = Ложь;
	
	ФормаЗаявки.Элементы.ОсновнаяПанель.ТекущаяСтраница = ФормаЗаявки.Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.СтраницаНарядЗаказ;
	НайденныеСтрокиМатериала = ФормаЗаявки.Объект.НарядЗаказ.НайтиСтроки(Новый Структура("Номенклатура", ТекущийМатериал));
	Если НЕ НайденныеСтрокиМатериала.Количество() = 0 Тогда
		ФормаЗаявки.Элементы.НарядЗаказ.ТекущаяСтрока = НайденныеСтрокиМатериала[0].НомерСтроки - 1;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЗаявокМатериалаВыбор()

&НаКлиенте
// Процедура-обработчик оповещения о закрытии формы Заявки.
Процедура ОбработчикЗакрытияЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Заявка = ДополнительныеПараметры.Заявка;
	ВыделенныйМатериал = ДополнительныеПараметры.Номенклатура;
	
	ОбновитьТаблицыНаСервере(Заявка);
	ОбновитьСвязанныеТаблицы();
	
	НайденныеСтрокиВыделенногоМатериала = ТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура", ВыделенныйМатериал));
	Если НайденныеСтрокиВыделенногоМатериала.Количество() > 0 Тогда
		// Если материал, на котором стоял курсор остался в таблице требуемых материалов,
		// то найдем эту строку (она одна) и установим на нее курсор после обновления таблиц.
		
		// Найдем идентификатор строки в "ДанныеФормыКоллекция" и установим этот идентификатор в таблице формы.
		ИдентификаторСтроки = НайденныеСтрокиВыделенногоМатериала[0].ПолучитьИдентификатор();
		Элементы.ТаблицаТребуемыхМатериалов.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикЗакрытияЗаявки()

&НаСервере
// Процедура выполняет запрос к базе данных для получения актуальных данных по требуемым
// материалам и остаткам материалов и по полученным данным заполняет таблицы.
Процедура ОбновитьТаблицыНаСервере(Заявка)
	
	Если ПланыСчетов.Хозрасчетный.Материалы.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
		СтрокаНомераСубконто = "Субконто3";
	Иначе
		СтрокаНомераСубконто = "Субконто2";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Номенклатура КАК Номенклатура,
	|	СУММА(КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.КоличествоПлан) КАК Необходимо,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка КАК Заявка,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.Склад КАК Склад,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.ОтветственныйЗаВыполнение КАК Мастер
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот.НарядЗаказ КАК КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка = &Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Номенклатура,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.ЕдиницаИзмерения,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.Склад,
	|	КВП_ЗаявкаНаВыполнениеРаботНарядЗаказ.Ссылка.ОтветственныйЗаВыполнение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Субконто2 КАК Склад,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК ВНаличии
	|ПОМЕСТИТЬ ТаблицаОстатковПоСкладам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы)), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатковПоСкладам.СчетУчета КАК СчетУчета,
	|	ТаблицаОстатковПоСкладам.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатковПоСкладам.Склад КАК Склад,
	|	ТаблицаОстатковПоСкладам.ВНаличии КАК ВНаличии,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаОстатковПоСкладам.Склад = &Склад
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СкладПрочегоМастера,
	|	ОтветственныеЛицаСрезПоследних.ФизическоеЛицо КАК Мастер,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = &ПустоеФизЛицо
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбщийСклад
	|ИЗ
	|	ТаблицаОстатковПоСкладам КАК ТаблицаОстатковПоСкладам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(, ) КАК ОтветственныеЛицаСрезПоследних
	|		ПО (ОтветственныеЛицаСрезПоследних.СтруктурнаяЕдиница = ТаблицаОстатковПоСкладам.Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НЕ ОтветственныеЛицаСрезПоследних.ФизическоеЛицо = &ПустоеФизЛицо,
	|	ТаблицаОстатковПоСкладам.Склад";
	
	Запрос.УстановитьПараметр("Заявка",      Заявка);
	Запрос.УстановитьПараметр("Период",      ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	// В общем случае считаем, что склад является "Общим", если у него не заполнено ответственное лицо.
	Запрос.УстановитьПараметр("Склад",         Объект.Склад);
	Запрос.УстановитьПараметр("ПустоеФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ПакетРезультат = Запрос.ВыполнитьПакет();
	
	// Заполняем таблицу материалов полную:
	ТаблицаМатериаловЗаявки = ПакетРезультат[0].Выгрузить();
	Для Каждого СтрокаТаблицыМатериаловЗаявки Из ТаблицаМатериаловЗаявки Цикл
		// Ищем в полной таблице требуемых материалов требуемый материал по заявке
		НайденныеСтрокиТаблицыТребуемыхМатериалов = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура, Заявка", СтрокаТаблицыМатериаловЗаявки.Номенклатура, Заявка));
		Если НайденныеСтрокиТаблицыТребуемыхМатериалов.Количество() = 0 Тогда
			// Если требуемый материал отсутствует, то добавляем его.
			НоваяСтрока = ПолнаяТаблицаТребуемыхМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыМатериаловЗаявки);
		Иначе
			// Если требуемый материал уже есть в таблице, то изменяем количество, необходимое для заявки.
			СтрокаМатериала = НайденныеСтрокиТаблицыТребуемыхМатериалов[0];
			СтрокаМатериала.Необходимо = СтрокаТаблицыМатериаловЗаявки.Необходимо;
		КонецЕсли;
	КонецЦикла;
	
	// Возможно, что из Заявки был удален (заменен) какой-либо материал, поэтому необходимо проверить,
	// не нужно ли удалить какие-то строки материалов из полной таблицы требуемых материалов по заявке.
	ВсеСтрокиМатериаловЗаявки = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Заявка", Заявка));
	Для Каждого СтрокаТаблицы Из ВсеСтрокиМатериаловЗаявки Цикл
		
		// Ищем материал по заявке в последней версии наряд-заказа Заявки.
		// Если материал отсутствует, то удаляем его из полной таблицы требуемых материалов.
		НайденныеСтроки = ТаблицаМатериаловЗаявки.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТаблицы.Номенклатура));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ПолнаяТаблицаТребуемыхМатериалов.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем таблицу остатков материалов полную:
	ТаблицаОстатков = ПакетРезультат[2].Выгрузить();
	
	ТаблицаДобавляемыхОстатков = ТаблицаОстатков.СкопироватьКолонки();
	
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		НайденныеСтрокиОстатков = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Номенклатура", СтрокаОстатков.Номенклатура));
		// Если в заявку добавился новый материал, который отсутствует в других обеспечиваемых заявках,
		// значит информации об остатках в таблице остатков нет, и необходимо добавить.
		Если НайденныеСтрокиОстатков.Количество() = 0 Тогда
			// Добавим строку во временную таблицу добавляемых строк.
			НоваяСтрока = ТаблицаДобавляемыхОстатков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
		КонецЕсли;
	КонецЦикла;
	// Добавим в полную таблицу остатков материалов остатки по "вновь появившимся материалам".
	Для Каждого СтрокаДобавляемыхОстатков Из ТаблицаДобавляемыхОстатков Цикл
		НоваяСтрока = ПолнаяТаблицаОстатковМатериалов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДобавляемыхОстатков);
	КонецЦикла;
	
	// Возможно, что из Заявки был удален (заменен) какой-либо материал, поэтому необходимо проверить,
	// не нужно ли удалить какие-то строки остатков материалов из полной таблицы остатков материалов по заявке.
	МассивУдаляемыхОстатков = Новый Массив;
	Для Каждого СтрокаПолнойТаблицыОстатков Из ПолнаяТаблицаОстатковМатериалов Цикл
		НайденныеСтрокиМатериалов = ПолнаяТаблицаТребуемыхМатериалов.НайтиСтроки(Новый Структура("Номенклатура", СтрокаПолнойТаблицыОстатков.Номенклатура));
		Если НайденныеСтрокиМатериалов.Количество() = 0 Тогда
			МассивУдаляемыхОстатков.Добавить(СтрокаПолнойТаблицыОстатков);
		КонецЕсли;
	КонецЦикла;
	// Удалим строки остатков по материалам, которые больше не нужны в связи с изменением Заявки.
	Для Каждого УдаляемаяСтрокаОстатка Из МассивУдаляемыхОстатков Цикл
		ПолнаяТаблицаОстатковМатериалов.Удалить(УдаляемаяСтрокаОстатка);
	КонецЦикла;
	
КонецПроцедуры

#Область БлокировкаДобавленияУдаленияВТаблицах

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" таблицы "ТаблицаТребуемыхМатериалов".
Процедура ТаблицаТребуемыхМатериаловПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаТребуемыхМатериаловПередУдалением()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "ТаблицаТребуемыхМатериалов".
Процедура ТаблицаТребуемыхМатериаловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаТребуемыхМатериаловПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" таблицы "ТаблицаЗаявокМатериал".
Процедура ТаблицаЗаявокМатериалаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаявокМатериалаПередУдалением()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "ТаблицаЗаявокМатериал".
Процедура ТаблицаЗаявокМатериалаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаявокМатериалаПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" таблицы "ТаблицаНаличияНаСкладах".
Процедура ТаблицаНаличияНаСкладахПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаНаличияНаСкладахПередУдалением()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "ТаблицаНаличияНаСкладах".
Процедура ТаблицаНаличияНаСкладахПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаНаличияНаСкладахПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" таблицы "ТаблицаЗаявок".
Процедура ТаблицаЗаявокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаявокПередУдалением()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "ТаблицаЗаявок".
Процедура ТаблицаЗаявокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаявокПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" таблицы "ТаблицаЗаявокПрочихМастеров".
Процедура ТаблицаЗаявокПрочихМастеровПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаявокПрочихМастеровПередУдалением()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "ТаблицаЗаявокПрочихМастеров".
Процедура ТаблицаЗаявокПрочихМастеровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаЗаявокПрочихМастеровПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик события "ПередУдалением" таблицы "ТаблицаДокументовПеремещения".
Процедура ТаблицаДокументовПеремещенияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры // ТаблицаДокументовПеремещенияПередУдалением()

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "ТаблицаДокументовПеремещения".
Процедура ТаблицаДокументовПеремещенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры // ТаблицаДокументовПеремещенияПередНачаломДобавления()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура-обработчик команды "ПоказатьСписокОтобранныхЗаявок".
Процедура ПоказатьСписокОтобранныхЗаявок(Команда)
	
	ДопПараметры = Новый Структура;
	
	СписокОтобранныхЗаявок = Новый Массив;
	Для Каждого СтрокаЗаявки Из Объект.ТаблицаЗаявок Цикл
		Если СтрокаЗаявки.Использовать Тогда
			СписокОтобранныхЗаявок.Добавить(СтрокаЗаявки.Заявка);
		КонецЕсли;
	КонецЦикла;
	ДопПараметры.Вставить("СписокОтобранныхЗаявок", СписокОтобранныхЗаявок);
	
	//ФормаСпискаЗаявок = ОткрытьФорму("ВнешняяОбработка.УПЖКХ_МастерОбеспеченияЗаявокАДС.Форма.ФормаСпискаОбеспечиваемыхЗаявок", ДопПараметры, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
	ФормаСпискаЗаявок = ОткрытьФорму("Обработка.УПЖКХ_МастерОбеспеченияЗаявокАДС.Форма.ФормаСпискаОбеспечиваемыхЗаявок", ДопПараметры, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры // ПоказатьСписокОтобранныхЗаявок()

&НаКлиенте
// Процедура-обработчик команды "ПодобратьЗаявки".
Процедура ПодобратьЗаявки(Команда)
	
	Отказ = ДанныеЗаполненыКорректно();
	
	Если Не Отказ Тогда
		Если Объект.ТаблицаЗаявок.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьТаблицаЗаявок", ЭтотОбъект);
			ТекстВопроса = "Перед заполнением табличное поле будет очищено. Продолжить?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ПодобратьЗаявкиНаСервере();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьЗаявки()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного перед заполнением таблицы заявок (команда: "ПодобратьЗаявки").
Процедура ОбработатьРезультатВопросаЗаполнитьТаблицаЗаявок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодобратьЗаявкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьТаблицаЗаявок()

&НаКлиенте
// Процедура-обработчик команды "КомандаДалее".
Процедура КомандаДалее(Команда)
	
	Отказ = ДанныеЗаполненыКорректно(Истина);
	
	Если Не Отказ Тогда
		ПоказатьСледующийЭтап();
	КонецЕсли;
	
КонецПроцедуры // КомандаДалее()

&НаКлиенте
// Процедура-обработчик команды "КомандаНазад".
Процедура КомандаНазад(Команда)
	
	Если ПолнаяТаблицаОстатковМатериалов.Итог("Получить") > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаВозвратНаПервыйЭтап", ЭтотОбъект);
		ТекстВопроса = "При возврате на первый этап введенные данные по перемещению материалов будут очищены. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПоказатьПредыдущийЭтап();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаНазад()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного при возврате на первый этап (команда: "КомандаНазад").
Процедура ОбработатьРезультатВопросаВозвратНаПервыйЭтап(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьПредыдущийЭтап();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаВозвратНаПервыйЭтап()

&НаКлиенте
// Процедура-обработчик команды "ТаблицаЗаявокВыделитьВсе".
Процедура ТаблицаЗаявокВыделитьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаЗаявок Цикл
		СтрокаТаблицы.Использовать = Истина;
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры // ТаблицаЗаявокВыделитьВсе()

&НаКлиенте
// Процедура-обработчик команды "ТаблицаЗаявокВыделитьВсе".
Процедура ТаблицаЗаявокСнятьВсе(Команда)
	
	Для Каждого СтрокаТаблицы Из Объект.ТаблицаЗаявок Цикл
		СтрокаТаблицы.Использовать = Ложь;
	КонецЦикла;
	
	УправлениеФормой();
	
КонецПроцедуры // ТаблицаЗаявокСнятьВсе()

&НаКлиенте
// Процедура-обработчик команды "СформироватьДокументы".
Процедура КомандаСформироватьДокументы(Команда)
	
	Если ПолнаяТаблицаОстатковМатериалов.Итог("Получить") > 0 Тогда
		СформироватьДокументы();
	Иначе
		СтрокаСообщения = НСтр("ru = 'Не заполнено количество перемещаемого материала ни в одной строке таблицы материалов!'");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументы()

&НаКлиенте
// Процедура-обработчик команды "ЗаполнитьСвободнымиОстатками".
Процедура КомандаЗаполнитьСвободнымиОстатками(Команда)
	
	Если ПолнаяТаблицаОстатковМатериалов.Итог("Получить") > 0 Тогда
		
		ДопПараметры = Новый Структура("ВариантЗаполнения", 1);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаАвтоматическоеЗаполнение", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = "При автоматическом заполнении все введенные данные по перемещению материалов будут очищены. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьСвободнымиОстатками();
		ОбновитьСвязанныеТаблицы();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьСвободнымиОстатками()

&НаКлиенте
// Процедура-обработчик команды "ЗаполнитьЗакрываемыеЗаявки".
Процедура КомандаЗаполнитьЗакрываемыеЗаявки(Команда)
	
	Если ПолнаяТаблицаОстатковМатериалов.Итог("Получить") > 0 Тогда
		
		ДопПараметры = Новый Структура("ВариантЗаполнения", 2);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаАвтоматическоеЗаполнение", ЭтотОбъект, ДопПараметры);
		ТекстВопроса = "При автоматическом заполнении все введенные данные по перемещению материалов будут очищены. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьЗакрываемыеЗаявки();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЗакрываемыеЗаявки()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного при автоматическом заполнении перемещаемых материалов
// (команды: "ЗаполнитьСвободнымиОстатками" и "ЗаполнитьЗакрываемыеЗаявки").
Процедура ОбработатьРезультатВопросаАвтоматическоеЗаполнение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ВариантЗаполнения = 1 Тогда
			ЗаполнитьСвободнымиОстатками();
			ОбновитьСвязанныеТаблицы();
		Иначе
			ЗаполнитьЗакрываемыеЗаявки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаАвтоматическоеЗаполнение()

&НаКлиенте
// Процедура-обработчик команды "ОбновитьТаблицуМатериалов".
Процедура ОбновитьТаблицуМатериалов(Команда)
	
	Если ПолнаяТаблицаОстатковМатериалов.Итог("Получить") > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбновитьТаблицуМатериалов", ЭтотОбъект);
		ТекстВопроса = "При обновлении таблицы материалов все ранее введенные данные по перемещению материалов будут очищены. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьТаблицуМатериалов();
		ОбновитьСвязанныеТаблицы();
		
		// Разлокируем доступность кнопки "Сформировать документы".
		УстановитьДоступностьКнопкиСформироватьДокументы(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТаблицуМатериалов()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного при нажатии на кнопку обновления таблицы материалов
// (команда: "ОбновитьТаблицуМатериалов").
Процедура ОбработатьРезультатВопросаОбновитьТаблицуМатериалов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьТаблицуМатериалов();
		ОбновитьСвязанныеТаблицы();
		
		// Разлокируем доступность кнопки "Сформировать документы".
		УстановитьДоступностьКнопкиСформироватьДокументы(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОбновитьТаблицуМатериалов()

&НаКлиенте
Процедура ПоказатьПодсказкуАвтозаполнения(Команда)
	
	ТекстПодсказки = "Автоматическое заполнение недостающих материалов можно выполнить 2 способами: 
						| 
						| ""Имеющимися свободными остатками"" - перемещаемое количество материала заполняется значением, 
						| ограничиваемым свободными остатками материала на прочих складах.
						| 
						| ""Только по заявкам, которые можно полностью обеспечить"" - аналогично первому варианту, 
						| но заполнение перемещаемых материалов происходит в рамках заявок по принципу ""Либо все, либо ничего"".
						| Т.е. если по заявке нельзя полностью обеспечить свободными остатками хотя бы один материал, то и обеспечение 
						| всех других материалов заявки выполнено не будет.";
	ПоказатьПредупреждение(, ТекстПодсказки);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ФормированиеДокументовПеремещения

&НаКлиенте
// Процедура формирует документы перемещения материалов.
Процедура СформироватьДокументы()
	
	// Полная таблица остатков материалов уже отсортирована по складам.
	
	ТекущийСклад    = Неопределено;
	ПредыдущийСклад = Неопределено;
	
	Для Каждого СтрокаПолнойТаблицыОстатковМатериалов Из ПолнаяТаблицаОстатковМатериалов Цикл
		ТекущийСклад = СтрокаПолнойТаблицыОстатковМатериалов.Склад;
		Если ТекущийСклад = ПредыдущийСклад ИЛИ ТекущийСклад = Объект.Склад ИЛИ СтрокаПолнойТаблицыОстатковМатериалов.Получить = 0 Тогда
			Продолжить;
		Иначе
			СтрокиТекущегоПрочегоСклада = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Склад", ТекущийСклад));
			СформироватьДокументПеремещения(ТекущийСклад);
			ПредыдущийСклад = ТекущийСклад;
		КонецЕсли;
	КонецЦикла;
	
	// Заблокируем доступность кнопки "Сформировать документы". Кнопка вновь станет активной,
	// если пользователь нажмет на форме кнопку "Обновить", обновив тем самым таблицу материалов
	// после формирования документов перемещения материалов.
	УстановитьДоступностьКнопкиСформироватьДокументы(Истина);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Формирование документов перемещения завершено.");
	
КонецПроцедуры // СформироватьДокументы()

&НаСервере
// Процедура формирует документ "Перемещение товаров".
Процедура СформироватьДокументПеремещения(СкладОтправитель)
	
	СтрокиПеремещенияМатериалов = ПолнаяТаблицаОстатковМатериалов.НайтиСтроки(Новый Структура("Склад", СкладОтправитель));
	
	ДокументПеремещения = Документы.ПеремещениеТоваров.СоздатьДокумент();
	
	УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументПеремещения, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
	
	ДокументПеремещения.Дата             = ТекущаяДата();
	ДокументПеремещения.Организация      = Объект.Организация;
	ДокументПеремещения.СкладОтправитель = СкладОтправитель;
	ДокументПеремещения.СкладПолучатель  = Объект.Склад;
	
	Для Каждого СтрокаМатериала Из СтрокиПеремещенияМатериалов Цикл
		Если СтрокаМатериала.Получить > 0 Тогда
			НоваяСтрока = ДокументПеремещения.Товары.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаМатериала.Номенклатура;
			НоваяСтрока.Количество     = СтрокаМатериала.Получить;
			НоваяСтрока.СчетУчета      = СтрокаМатериала.СчетУчета;
			НоваяСтрока.НовыйСчетУчета = СтрокаМатериала.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	
	ДокументЗаписан = Ложь;
	ДокументПроведен = Ложь;
	
	Попытка
		ДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);
		ДокументПроведен = Истина;
	Исключение
		Попытка
			ДокументПеремещения.Записать(РежимЗаписиДокумента.Запись);
			ДокументЗаписан = Истина;
		Исключение
		КонецПопытки;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось провести документ " + ДокументПеремещения + "!" + ?(ДокументЗаписан, " Документ записан.", ""));
	КонецПопытки;
	
	//Если НЕ КВП_ЗаписатьОбъект(ДокументПеремещения, РежимЗаписиДокумента.Проведение) Тогда
	//	ДокументЗаписан = КВП_ЗаписатьОбъект(ДокументПеремещения, РежимЗаписиДокумента.Запись);
	//КонецЕсли;
	
	Если ДокументЗаписан ИЛИ ДокументПроведен Тогда
		СтрокаДокумента = ТаблицаДокументовПеремещения.Добавить();
		СтрокаДокумента.ДокументПеремещения = ДокументПеремещения.Ссылка;
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументПеремещения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет заполненность требуемых реквизитов для перехода к следующему этапу.
// Возвращает Истина, если данные заполнены корректно, в противном случае возвращает Ложь.
&НаКлиенте
Функция ДанныеЗаполненыКорректно(ЭтоПереходДалее = Ложь)
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	Отказ = Ложь;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			НСтрока = НСтр("ru = 'Не указана организация!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Мастер) Тогда
			НСтрока = НСтр("ru = 'Не указан мастер!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
				НСтрока = НСтр("ru = 'К текущему мастеру не привязан ни один склад!'");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПереходДалее Тогда
			ЕстьВыбранныеЗаявки = Ложь;
			Для Каждого СтрокаТаблицыЗаявок Из Объект.ТаблицаЗаявок Цикл
				Если СтрокаТаблицыЗаявок.Использовать Тогда
					ЕстьВыбранныеЗаявки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЕстьВыбранныеЗаявки Тогда
				НСтрока = НСтр("ru = 'Не выбрана ни одна заявка!'");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Отказ;
	
КонецФункции // ДанныеЗаполненыКорректно()

// Возвращает текстовое единицы измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                         для двух и для пяти единиц, разделитель - запятая.
//
// Возвращаемое значение:
//  Строка - текстовое представление единицы измерения.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "минут".
Функция ПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления)

	Результат = Формат(Число, "ЧН=0");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции // ПредметИсчисленияПрописью()

#КонецОбласти
