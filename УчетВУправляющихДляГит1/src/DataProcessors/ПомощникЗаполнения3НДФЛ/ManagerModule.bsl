#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Срок",   ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусУплаты(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает дату, с которой используется помощник заполнения 3-НДФЛ.
// Функция используется, чтобы открывать помощник заполнения из списка задач.
//
// Возвращаемое значение:
//    Дата - Дата, с которой применяется помощник заполнения 3-НДФЛ
//
Функция ДатаНачалаПрименения() Экспорт
	
	// Помощник можно использовать для декларации за 2017 год и позднее.
	Возврат '20170101';
	
КонецФункции

// Функция проверяет, поддерживает ли Помощник заполнение выбранной формы декларации.
//
// Параметры:
//   ВыбраннаяФорма - Строка - форма декларации 3-НДФЛ
//
// Возвращаемое значение:
//    Булево - Истина, если поддерживается заполнение выбранной формы отчета
//
Функция ФормаЗаполняетсяПомощником(ВыбраннаяФорма) Экспорт
	
	ПоддерживаемыеФормы = Новый Массив;
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2018кв1"));
	ПоддерживаемыеФормы.Добавить(НРег("ФормаОтчета2019кв1"));
	
	Возврат (ПоддерживаемыеФормы.Найти(НРег(СокрЛП(ВыбраннаяФорма))) <> Неопределено);
	
КонецФункции

// Возвращает список документов на уплату НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ПериодУплаты - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ДокументыУплаты(Организация, ПериодУплаты, ПравилоУплаты) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.Правило = ПравилоУплаты;
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДФЛ_ИП);
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(Перечисления.ВидыНалогов.НДФЛ_ФизЛицо);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	НачалоПериода = НачалоГода(ПериодУплаты);
	КонецПериода  = КонецГода(ПериодУплаты);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

// Возвращает ссылку на декларацию 3-НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НалоговыйПериод - Дата - дата в пределах налогового периода
//   ФормаОтчета - Строка - форма декларации
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет
//
Функция НайтиДекларацию3НДФЛ(Организация, НалоговыйПериод, ФормаОтчета = "") Экспорт
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет("РегламентированныйОтчет3НДФЛ", Организация, КонецГода(НалоговыйПериод), , ФормаОтчета);
	
	Возврат Декларация;
	
КонецФункции

// Возвращает ссылку на декларацию 4-НДФЛ.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   НалоговыйПериод - Дата - дата в пределах налогового периода
//   ФормаОтчета - Строка - форма декларации
//
// Возвращаемое значение:
//   ДокументСсылка.РегламентированныйОтчет
//
Функция НайтиДекларацию4НДФЛ(Организация, НалоговыйПериод, ФормаОтчета = "") Экспорт
	
	Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет("РегламентированныйОтчет4НДФЛ", Организация, КонецГода(НалоговыйПериод), , ФормаОтчета);
	
	Возврат Декларация;
	
КонецФункции

// Процедура заполняет декларацию 3-НДФЛ.
//
// Параметры:
//   СтруктураПараметров - Структура
//   АдресРезультата - УникальныйИдентификатор
//
Процедура ЗаполнитьДекларацию(СтруктураПараметров, АдресРезультата) Экспорт
	
	Период = СтруктураПараметров.Период;
	Организация = СтруктураПараметров.Организация;
	НомерКорректировки = СтруктураПараметров.НомерКорректировки;
	НомерКорректировки4НДФЛ = СтруктураПараметров.НомерКорректировки4НДФЛ;
	ДоходыВычеты = СтруктураПараметров.ДоходыВычеты;
	ДанныеПомощникаЗаполнения = СтруктураПараметров.ДанныеПомощникаЗаполнения;
	Декларация3НДФЛ = СтруктураПараметров.Декларация3НДФЛ;
	ВыбраннаяФорма3НДФЛ = СтруктураПараметров.Декларация3НДФЛВыбраннаяФорма;
	
	СформироватьДекларацию4НДФЛ = СтруктураПараметров.СформироватьДекларацию4НДФЛ;
	ПредполагаемаяСуммаДоходов = СтруктураПараметров.ПредполагаемаяСуммаДоходов;
	Декларация4НДФЛ = СтруктураПараметров.Декларация4НДФЛ;
	ВыбраннаяФорма4НДФЛ = СтруктураПараметров.Декларация4НДФЛВыбраннаяФорма;
	
	Если Не ФормаЗаполняетсяПомощником(ВыбраннаяФорма3НДФЛ) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Заполнение декларации за %1 год будет реализовано в будущих версиях программы'"),
			Формат(Период, "ДФ=yyyy"));
	КонецЕсли;
	
	КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации(ВыбраннаяФорма3НДФЛ);
	ПризнакиУплатыВозврата = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУплатыВозврата(ВыбраннаяФорма3НДФЛ);
	ВидыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыДоходов(ВыбраннаяФорма3НДФЛ);
	НалоговыеСтавки = Отчеты.РегламентированныйОтчет3НДФЛ.НалоговыеСтавки(ВыбраннаяФорма3НДФЛ);
	СписокКБК = Отчеты.РегламентированныйОтчет3НДФЛ.КБК(ВыбраннаяФорма3НДФЛ);
	ПределыВычетов = Отчеты.РегламентированныйОтчет3НДФЛ.ПределыВычетов(ВыбраннаяФорма3НДФЛ);
	НеоблагаемыеСуммыДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.НеоблагаемыеСуммыДоходов(ВыбраннаяФорма3НДФЛ);
	КодыВидовПредпринимательскойДеятельности =
		Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовПредпринимательскойДеятельности(ВыбраннаяФорма3НДФЛ);
	
	РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	ОКТМОналогоплательщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПоОКТМО");
	
	ПоказателиИмущественногоВычета = ОписаниеПоказателейИмущественногоВычета(ВыбраннаяФорма3НДФЛ);
	КодыИсточниковДоходов = Отчеты.РегламентированныйОтчет3НДФЛ.КодыИсточниковДоходов(ВыбраннаяФорма3НДФЛ);
	
	ТаблицаДанныхЗаполнения = Отчеты.РегламентированныйОтчет3НДФЛ.НоваяТаблицаДанныхЗаполнения();
	
	// Добавляем служебную колонку
	МассивТиповВида = Новый Массив;
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ИсточникиДоходовФизическихЛиц"));
	МассивТиповВида.Добавить(Тип("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	
	ВидДоходаВычета = ТаблицаДанныхЗаполнения.Колонки.Добавить("Вид", Новый ОписаниеТипов(МассивТиповВида));
	
	Для Каждого СтрокаТаблицы Из ДоходыВычеты Цикл
		
		Если СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = ОКТМОналогоплательщика;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПредпринимательскаяДеятельность(СтрокаТаблицы.СтруктураДоходовВычетов, КодыВидовПредпринимательскойДеятельности.ПредпринимательскаяДеятельность);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества
			Или СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПродажаИмущества(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, Период);
			НоваяСтрока.ОКТМО = НоваяСтрока.СтруктураДанных.ОКТМОИсточникаДоходаРФ;
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
			ДобавитьДанныеЗаполненияИмущественногоВычета(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы.СтруктураДоходовВычетов,
				НоваяСтрока.ВидДохода,
				НоваяСтрока.НалоговаяСтавка,
				ПоказателиИмущественногоВычета,
				КодыИсточниковДоходов);
			
			ДобавитьДанныеКадастровойИнформации(
				ТаблицаДанныхЗаполнения,
				СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СдачаИмуществаВАренду(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_Подарок(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = СтрокаТаблицы.СтруктураДоходовВычетов.СтавкаНалога;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Дивиденды;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.Дивиденды;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПрочиеДоходы(СтрокаТаблицы.СтруктураДоходовВычетов, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеОтчетности.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ОплатаТруда(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеОтчетности, НоваяСтрока.НалоговаяСтавка, КлючиПоказателей);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.ОКТМО = СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации.ОКТМО;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ОперацииСЦеннымиБумагами(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаНалогаУдержаннаяРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ДоходЗаПределамиРФ(СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			НоваяСтрока.СуммаНалогаИсчисленная = НоваяСтрока.СтруктураДанных.СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ;
			НоваяСтрока.СуммаНалогаУплаченнаяУдержанная = НоваяСтрока.СтруктураДанных.СуммаПодлежащаяЗачетуВРФ;
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СтандартныйВычет(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ВычетНаДетей(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СоциальныеВычеты(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ПенсионныеВзносыСтрахованиеЖизни(СтрокаТаблицы.СтруктураДоходовВычетов);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ИнвестиционныйВычет(СтрокаТаблицы.СтруктураДоходовВычетов);
			НоваяСтрока.СуммаНалогаИсчисленная = СуммаНалогаИсчисленная(
				НоваяСтрока.СтруктураДанных.ИнвестиционныйВычетКВосстановлению, НоваяСтрока.НалоговаяСтавка);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_ВычетНаПриобретениеИлиСтроительствоНедвижимости(
				СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			
		ИначеЕсли СтрокаТаблицы.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами Тогда
			
			НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			НоваяСтрока.ВидДохода = ВидыДоходов.Иное;
			НоваяСтрока.НалоговаяСтавка = НалоговыеСтавки.ПоУмолчанию;
			НоваяСтрока.Вид = СтрокаТаблицы.Вид;
			НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(
				СтрокаТаблицы.СтруктураДоходовВычетов.ДанныеДекларации, НоваяСтрока.НалоговаяСтавка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьИтоговыеПоказателиПредпринимательскойДеятельности(ДанныеПомощникаЗаполнения, ТаблицаДанныхЗаполнения);
	ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ);
	РассчитатьСуммуДоходовНеПодлежащуюНалогообложению(ТаблицаДанныхЗаполнения, ВидыДоходов.Иное, НалоговыеСтавки.ПоУмолчанию, НеоблагаемыеСуммыДоходов);
	
	ТаблицаНалоговойБазы = ТаблицаНалоговойБазы(ТаблицаДанныхЗаполнения, ПределыВычетов, ВидыДоходов.Иное, НалоговыеСтавки.ПоУмолчанию);
	НалогКУплате = ТаблицаНалоговойБазы.Итог("СуммаНалогаПодлежащаяУплате");
	НалогКВозврату = ТаблицаНалоговойБазы.Итог("СуммаНалогаПодлежащаяВозврату");
	СведенияОСуммахНалога = ТаблицаСведенийОСуммахНалога(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ПризнакиУплатыВозврата, СписокКБК, ОКТМОналогоплательщика);
	
	// Объединяем таблицы и удаляем служебную колонку.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНалоговойБазы, ТаблицаДанныхЗаполнения);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СведенияОСуммахНалога, ТаблицаДанныхЗаполнения);
	ТаблицаДанныхЗаполнения.Колонки.Удалить(ВидДоходаВычета);
	
	// Дополним данные помощника рассчитанными налогами.
	// Это нужно, чтобы сразу сохранить правильные данные в отчете и не вызывать повторное сохранение.
	ДанныеПомощникаЗаполнения.НалогКУплате   = НалогКУплате;
	ДанныеПомощникаЗаполнения.НалогКВозврату = НалогКВозврату;
	
	Отчеты.РегламентированныйОтчет3НДФЛ.СоздатьЗаполнитьОтчет(
		Декларация3НДФЛ,
		Организация,
		Период,
		ВыбраннаяФорма3НДФЛ,
		НомерКорректировки,
		ТаблицаДанныхЗаполнения,
		ДанныеПомощникаЗаполнения);
		
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		Статус3НДФЛ = Новый Структура("СсылкаНаОбъект, Статус", Декларация3НДФЛ, НСтр("ru = 'Подготовлено'"));
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(Статус3НДФЛ);
	КонецЕсли;
	
	Если СформироватьДекларацию4НДФЛ Тогда
		Отчеты.РегламентированныйОтчет4НДФЛ.СоздатьЗаполнитьОтчет(
			Декларация4НДФЛ,
			Организация,
			ДобавитьМесяц(Период, 12),
			ВыбраннаяФорма4НДФЛ,
			НомерКорректировки4НДФЛ,
			Новый Структура("ПредполагаемаяСуммаДоходов", ПредполагаемаяСуммаДоходов));
		Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
			Статус4НДФЛ = Новый Структура("СсылкаНаОбъект, Статус", Декларация4НДФЛ, НСтр("ru = 'Подготовлено'"));
			ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(Статус4НДФЛ);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Декларация3НДФЛ", Декларация3НДФЛ);
	Результат.Вставить("Декларация4НДФЛ", Декларация4НДФЛ);
	Результат.Вставить("НалогКУплате",    НалогКУплате);
	Результат.Вставить("НалогКВозврату",  НалогКВозврату);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Процедура заполняет доходы и расходы от предпринимательской деятельности,
// уплаченные авансовые платежи по НДФЛ и уплаченный торговый сбор.
//
// Параметры:
//   ПараметрыЗаполнения - Структура - структура с ключами:
//      * Организация - СправочникСсылка.Организации
//      * НачалоПериода - Дата
//      * КонецПериод - Дата
//   АдресРезультата - УникальныйИдентификатор
//
Процедура ЗаполнитьДоходыРасходыОтПредпринимательскойДеятельностиВФоне(ПараметрыЗаполнения, АдресРезультата) Экспорт
	
	Организация   = ПараметрыЗаполнения.Организация;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = КонецДня(ПараметрыЗаполнения.КонецПериода);
	
	РезультатВыполнения = Новый Структура;
	
	ДоходыРасходыПредпринимателя = ТаблицаДоходовОтПредпринимательскойДеятельности(Организация, НачалоПериода, КонецПериода);
	РезультатВыполнения.Вставить("ДоходыПредпринимателя", ДоходыРасходыПредпринимателя);
	
	РезультатВыполнения.Вставить("АвансовыеПлатежи", АвансовыеПлатежиПоНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода));
	
	Если ТорговыйСбор.УплачиваетсяТорговыйСбор(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.КонецПериода) Тогда
		УплаченныйТорговыйСбор = ТорговыйСборУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода);
	Иначе
		УплаченныйТорговыйСбор = 0;
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ТорговыйСбор", УплаченныйТорговыйСбор);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоддерживаемыеНалоговыеПериоды() Экспорт
	
	ПоддерживаемыеНалоговыеПериоды = Новый Массив;
	
	Период = НачалоГода(ДатаНачалаПрименения());
	Пока Период <= НачалоГода(ТекущаяДатаСеанса()) Цикл
		ПоддерживаемыеНалоговыеПериоды.Добавить(Период);
		Период = ДобавитьМесяц(Период, 12);
	КонецЦикла;
	
	Возврат ПоддерживаемыеНалоговыеПериоды;
	
КонецФункции

Функция ДанныеПомощникаЗаполнения(Декларация) Экспорт
	
	Если Не ЗначениеЗаполнено(Декларация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеДанныхОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "ДанныеОтчета");
	Если ТипЗнч(ХранилищеДанныхОтчета) <> Тип("ХранилищеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ХранилищеДанныхОтчета.Получить();
	Если ДанныеОтчета.Свойство("ДанныеПомощникаЗаполнения")
		И ДанныеОтчета.ДанныеПомощникаЗаполнения.Количество() > 0 Тогда
		Возврат ДанныеОтчета.ДанныеПомощникаЗаполнения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТаблицаПлатежейДляФормированияПлатежныхПоручений(НалогиКУплате, ПериодУплаты) Экспорт
	
	ТаблицаПлатежей = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
	
	Для Каждого СтрокаНалогКУплате Из НалогиКУплате Цикл
		
		Если СтрокаНалогКУплате.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйПлатеж = ТаблицаПлатежей.Добавить();
		НовыйПлатеж.ВидНалога = СтрокаНалогКУплате.ВидНалога;
		НовыйПлатеж.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НовыйПлатеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(СтрокаНалогКУплате.ВидНалога);
		НовыйПлатеж.СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(НовыйПлатеж.Налог, ПериодУплаты);
		НовыйПлатеж.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НовыйПлатеж.Сумма = СтрокаНалогКУплате.Сумма;
		
	КонецЦикла;
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

Функция СтруктураНавигации() Экспорт
	
	СтруктураНавигации = НавигацияПомощников.НовыйСтруктураНавигации();
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(1), СтруктураШагаДоходыВычеты(1));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(2), СтруктураШагаДекларация(2));
	СтруктураНавигации.Структура.Вставить(НавигацияПомощниковКлиентСервер.ИмяШага(3), СтруктураШагаОплатаНалога(3));
	
	Возврат СтруктураНавигации;
	
КонецФункции

Функция СтруктураШагаДоходыВычеты(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Доходы и вычеты'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ДоходыВычеты";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаДекларация(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Декларация'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "Декларация";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Функция СтруктураШагаОплатаНалога(НомерШага)
	
	СтруктураШага                = НавигацияПомощников.НовыйСтруктураШага();
	СтруктураШага.ИмяПомощника   = "ПомощникЗаполнения3НДФЛ";
	СтруктураШага.НомерШага      = НомерШага;
	СтруктураШага.ИмяФормы       = "Обработка.ПомощникЗаполнения3НДФЛ.Форма.Форма";
	СтруктураШага.ТекстНавигации = НСтр("ru = 'Оплата налога'");
	СтруктураШага.СтруктураПараметровФормы.НавигацияПараметрФормы = "ОплатаНалога";
	
	ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага);
	
	Возврат СтруктураШага;
	
КонецФункции

Процедура ДобавитьКлючевыеПараметрыФормыПомощника(СтруктураШага)
	
	// Ключевые параметры формы помощника.
	СтруктураШага.СтруктураПараметровФормы.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	СтруктураШага.СтруктураПараметровФормы.Вставить("Период", Дата(1, 1, 1));
	
КонецПроцедуры

Функция ТаблицаДоходовОтПредпринимательскойДеятельности(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", НачалоПериода);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета", КонецПериода);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", "");
	
	ТаблицаДоходов = УчетДоходовИРасходовПредпринимателя.ТаблицаДоходовРасходовПоВидамПредпринимательскойДеятельности3НДФЛ(ПараметрыОтчета);
	ТаблицаДоходов.Колонки.Добавить("КодОКВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(8));
	ТаблицаДоходов.Колонки.Добавить("НаименованиеОКВЭД", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ОсновнойВидДеятельности = УчетнаяПолитика.ОсновнойВидДеятельности(Организация, НачалоПериода);
	
	ОКВЭДОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КодОКВЭД2, НаименованиеОКВЭД2");
	КодыВидовДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаДоходов.ВыгрузитьКолонку("ВидДеятельности"), "КодОКВЭД");
	
	КлассификаторОКВЭД2 = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД2");
	
	Для Каждого СтрокаДоходов Из ТаблицаДоходов Цикл
		
		СтрокаДоходов.КодОКВЭД = КодыВидовДеятельности.Получить(СтрокаДоходов.ВидДеятельности);
		Если Не ЗначениеЗаполнено(СтрокаДоходов.КодОКВЭД)
			И СтрокаДоходов.ВидДеятельности = ОсновнойВидДеятельности Тогда
			СтрокаДоходов.КодОКВЭД = ОКВЭДОрганизации.КодОКВЭД2;
		КонецЕсли;
		
		СтрокаДоходов.НаименованиеОКВЭД = КлассификаторОКВЭД2.Получить(СтрокаДоходов.КодОКВЭД);
		
	КонецЦикла;
	
	Возврат ТаблицаДоходов;
	
КонецФункции

Функция ТорговыйСборУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	СуммаТорговогоСбора = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетНачисления", ПланыСчетов.Хозрасчетный.ТорговыйСбор);
	
	СчетаУплаты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУплаты, БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	Запрос.УстановитьПараметр("СчетаУплаты", СчетаУплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		СчетДт = &СчетНачисления,
	|		,
	|		СчетКт В (&СчетаУплаты),
	|		,
	|		Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаТорговогоСбора = Выборка.Сумма;
	КонецЕсли;
	
	Возврат СуммаТорговогоСбора;
	
КонецФункции

Функция АвансовыеПлатежиПоНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода) Экспорт
	
	СуммаАвансовыхПлатежей = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Налог", Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ_ИП));
	Запрос.УстановитьПараметр("ПравилаУплатыАвансов", ВыполнениеЗадачБухгалтера.ПравилаУплатыАвансовПоНДФЛ());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация КАК Организация,
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Платеж
	|ПОМЕСТИТЬ ОтборПлатежи
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило В(&ПравилаУплатыАвансов)
	|	И ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Платеж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.СуммаДокумента КАК Сумма
	|ИЗ
	|	ОтборПлатежи КАК ОтборПлатежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО (ПлатежноеПоручение.Организация = ОтборПлатежи.Организация)
	|			И (ПлатежноеПоручение.Ссылка = ОтборПлатежи.Платеж)
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И ПлатежноеПоручение.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И ПлатежноеПоручение.Налог = &Налог
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	ОтборПлатежи КАК ОтборПлатежи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО (РасходныйКассовыйОрдер.Организация = ОтборПлатежи.Организация)
	|			И (РасходныйКассовыйОрдер.Ссылка = ОтборПлатежи.Платеж)
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Налог = &Налог
	|	И РасходныйКассовыйОрдер.Проведен
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ОБЩИЕ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		СуммаАвансовыхПлатежей = Выборка.Сумма;
	КонецЕсли;
	
	Возврат СуммаАвансовыхПлатежей;
	
КонецФункции

Функция НомерКорректировки(Декларация) Экспорт
	
	Если ЗначениеЗаполнено(Декларация) Тогда
		НомерКорректировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "Вид");
	Иначе
		НомерКорректировки = 0;
	КонецЕсли;
	
	Возврат НомерКорректировки;
	
КонецФункции

Функция СтатусУплаты(ПараметрыЗадачи)
	
	Организация                 = ПараметрыЗадачи.Организация;
	ПериодСобытия               = ПараметрыЗадачи.ПериодСобытия;
	РегистрацияВНалоговомОргане = ПараметрыЗадачи.РегистрацияВНалоговомОргане;
	Правило                     = ПараметрыЗадачи.Правило;
	Срок                        = ПараметрыЗадачи.Срок;
	
	Статус = "";
	
	ПоказательПериода = ВыполнениеЗадачБухгалтера.ПоказательПериодаПлатежаПоДекларации(Правило, ПериодСобытия, Срок);
	ДанныеДекларации = ВыполнениеЗадачБухгалтера.ДанныеДляУплатыНалогаПоДекларации(
		Правило, Организация, РегистрацияВНалоговомОргане, ПериодСобытия, Срок, ПоказательПериода);
	
	Если ДанныеДекларации <> Неопределено И ДанныеДекларации.Платежи.Количество() > 0 Тогда
		НалогКУплате = ДанныеДекларации.Платежи.Итог("Сумма");
	Иначе
		НалогКУплате = 0;
	КонецЕсли;
	
	ДокументыУплаты = ДокументыУплаты(Организация, ПериодСобытия, Правило);
	Уплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ДокументыУплаты);
	
	Если Уплачено >= НалогКУплате Тогда
		Статус = "Оплачено";
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#Область СохранениеДекларации

Функция ТаблицаНалоговойБазы(ТаблицаДанныхЗаполнения, ПределыВычетов, ВидДоходаПоУмолчанию, НалоговаяСтавкаПоУмолчанию)
	
	ТаблицаНалоговойБазы = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяУплате", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНалоговойБазы.Колонки.Добавить("СуммаНалогаПодлежащаяВозврату", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	КолонкиГруппировок = ("ВидДохода, НалоговаяСтавка");
	ВидыДоходов = ТаблицаДанныхЗаполнения.Скопировать(, КолонкиГруппировок);
	ВидыДоходов.Свернуть(КолонкиГруппировок, );
	ВидыДоходов.Сортировать(КолонкиГруппировок);
	ТаблицаДанныхЗаполнения.Индексы.Добавить(КолонкиГруппировок);
	
	ОтборДанныхЗаполнения = Новый Структура(КолонкиГруппировок);
	Для Каждого ВидДохода Из ВидыДоходов Цикл
		
		Если ВидДохода.ВидДохода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетНалоговойБазы = НоваяСтруктураРасчетаНалоговойБазы(ВидДохода.НалоговаяСтавка, ВидДохода.ВидДохода);
		
		ЗаполнитьЗначенияСвойств(ОтборДанныхЗаполнения, ВидДохода);
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхЗаполнения) Цикл
			ДобавитьРасчетНалоговойБазыПоВидуДохода(СтрокаТаблицы.Вид, СтрокаТаблицы.СтруктураДанных, РасчетНалоговойБазы);
		КонецЦикла;
		
		РассчитатьИтогиРасчетаНалоговойБазы(РасчетНалоговойБазы, ТаблицаДанныхЗаполнения, ПределыВычетов);
		
		// Раздел 2 заполняется только при наличии доходов с таким же видом и налоговой ставкой.
		Если РасчетНалоговойБазы.ОбщаяСуммаДоходов <> 0 Тогда
			НоваяСтрока = ТаблицаНалоговойБазы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидДохода);
			НоваяСтрока.СтруктураДанных = РасчетНалоговойБазы;
			НоваяСтрока.СуммаНалогаПодлежащаяУплате   = РасчетНалоговойБазы.СуммаНалогаПодлежащаяУплате;
			НоваяСтрока.СуммаНалогаПодлежащаяВозврату = РасчетНалоговойБазы.СуммаНалогаПодлежащаяВозврату;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если нет ни одного дохода или вычета, подается нулевая декларация.
	// Добавляем пустую строку данных для заполнения раздела 2.
	Если ТаблицаНалоговойБазы.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		НоваяСтрока.ВидДохода = ВидДоходаПоУмолчанию;
		НоваяСтрока.НалоговаяСтавка = НалоговаяСтавкаПоУмолчанию;
		НоваяСтрока.СтруктураДанных = НоваяСтруктураРасчетаНалоговойБазы(НалоговаяСтавкаПоУмолчанию, ВидДоходаПоУмолчанию);
	КонецЕсли;
	
	Возврат ТаблицаНалоговойБазы;
	
КонецФункции

Функция ДанныеЗаполнения_ПродажаИмущества(ДанныеФормы, НалоговаяСтавка, Период)
	
	ДанныеОтчетности = ДанныеФормы.ДанныеОтчетности;
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеОтчетности.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеОтчетности.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеОтчетности.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеОтчетности.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеОтчетности.НаименованиеИсточникаДохода);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.ОблагаемыйДоход);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.ОблагаемыйДоход, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СдачаИмуществаВАренду(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.НаименованиеИсточникаДохода);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_Подарок(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПрочиеДоходы(ДанныеФормы, НалоговаяСтавка, КлючиПоказателей)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", ДанныеФормы.СтавкаНалога);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.НаименованиеИсточникаДохода);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.СуммаДоходаОблагаемая);
	Если КлючиПоказателей.Найти("СуммаОблагаемогоДоходаРФ") <> Неопределено Тогда
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", Окр(ДанныеФормы.СуммаНалога, 0));
	Иначе
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	КонецЕсли;
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",  Окр(ДанныеФормы.СуммаНалогаУдержанная, 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СтандартныйВычет(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("СтандартныйВычетПо218_1_1", ДанныеФормы.ДанныеДекларации.СуммаВычета3000);
	ДанныеДекларации.Вставить("СтандартныйВычетПо218_1_2", ДанныеФормы.ДанныеДекларации.СуммаВычета500);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ВычетНаДетей(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетей", ДанныеФормы.СтандартныйВычет);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейЕдинственномуРодителю", ДанныеФормы.ДвойнойВычет);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейИнвалидов",  ДанныеФормы.ВычетНаИнвалидов);
	ДанныеДекларации.Вставить("СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю",  ДанныеФормы.ДвойнойВычетНаИнвалидов);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СоциальныеВычеты(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("СоциальныйВычетПожертвования", ДанныеФормы.Пожертвования);
	ДанныеДекларации.Вставить("СоциальныйВычетОбучениеДетей", ДанныеФормы.ОбучениеДетей);
	ДанныеДекларации.Вставить("СоциальныйВычетДорогостоящееЛечение", ДанныеФормы.ДорогостоящееЛечение);
	ДанныеДекларации.Вставить("СоциальныйВычетОбучениеСвое", ДанныеФормы.ОбучениеСвое);
	ДанныеДекларации.Вставить("СоциальныйВычетЛечениеМедикаменты", ДанныеФормы.ЛечениеМедикаменты);
	ДанныеДекларации.Вставить("СоциальныйВычетМедицинскоеСтрахование", ДанныеФормы.МедицинскоеСтрахование);
	ДанныеДекларации.Вставить("СтраховыеВзносыНаПенсиюВсего", ДанныеФормы.СтраховыеВзносыНаПенсию);
	ДанныеДекларации.Вставить("СтраховыеВзносыНаПенсиюКВычету", ДанныеФормы.СтраховыеВзносыНаПенсию);
	ДанныеДекларации.Вставить("РасходыНаПрохождениеНезависимойОценкиКвалификации", ДанныеФормы.ОценкаКвалификации);
	ДанныеДекларации.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПенсионныеВзносыСтрахованиеЖизни(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("ИННПенсионногоФонда", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КПППенсионногоФонда", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ВидДоговораПенсионногоОбеспечения", ДанныеФормы.ВидДоговора);
	ДанныеДекларации.Вставить("НаименованиеПенсионногоФонда", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("ДатаДоговораПенсионногоОбеспечения", ДанныеФормы.ДатаДоговора);
	ДанныеДекларации.Вставить("НомерДоговораПенсионногоОбеспечения", ДанныеФормы.НомерДоговора);
	ДанныеДекларации.Вставить("СуммаВзносовПенсионныйФондВсего", ДанныеФормы.СуммаВзносов);
	ДанныеДекларации.Вставить("СуммаВзносовПенсионныйФондКВычету", ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ИнвестиционныйВычет(ДанныеФормы)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("ИнвестиционныйВычет", ДанныеФормы.СуммаВычета);
	ДанныеДекларации.Вставить("ИнвестиционныйВычетКВосстановлению", ДанныеФормы.СуммаДохода);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ПредпринимательскаяДеятельность(ДанныеФормы, КодВидаДеятельности)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КодВидаДеятельностиИП", КодВидаДеятельности);
	ДанныеДекларации.Вставить("ОКВЭДИП", ДанныеФормы.КодОКВЭД);
	ДанныеДекларации.Вставить("СуммаДоходаИП", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаРасходовИП", ДанныеФормы.ИтогоПодтвержденныхРасходов);
	ДанныеДекларации.Вставить("МатериальныеРасходыИП", ДанныеФормы.МатериальныеРасходы);
	ДанныеДекларации.Вставить("АмортизацияИП", ДанныеФормы.Амортизация);
	ДанныеДекларации.Вставить("ЗарплатаИП", ДанныеФормы.Зарплата);
	Если ДанныеФормы.Свойство("ВыплатыПоТрудовымДоговорам") Тогда
		ДанныеДекларации.Вставить("ЗарплатаПоТрудовымДоговорамИП", ДанныеФормы.ВыплатыПоТрудовымДоговорам);
	Иначе
		ДанныеДекларации.Вставить("ЗарплатаПоТрудовымДоговорамИП", 0);
	КонецЕсли;
	ДанныеДекларации.Вставить("ПрочиеРасходыИП", ДанныеФормы.ПрочиеРасходы);
	Если ДанныеФормы.Свойство("ИтогоРасходовНоНормативу") Тогда
		ДанныеДекларации.Вставить("СуммаРасходовВПределахНормативаИП", ДанныеФормы.ИтогоРасходовНоНормативу);
	Иначе
		ДанныеДекларации.Вставить("СуммаРасходовВПределахНормативаИП", 0);
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ВычетНаПриобретениеИлиСтроительствоНедвижимости(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КодНаименованияОбъектаНедвижимости", ДанныеФормы.КодНаименованияОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ВидСобственностиНаОбъектНедвижимости", ДанныеФормы.ФормаСобственности);
	ДанныеДекларации.Вставить("ПризнакНалогоплательщикаОбъектаНедвижимости", ДанныеФормы.ПризнакНалогоплательщикаОбъектаНедвижимости);
	ДанныеДекларации.Вставить("НалогоплательщикПенсионер", ДанныеФормы.НалогоплательщикПенсионер);
	ДанныеДекларации.Вставить("КодНомераОбъектаНедвижимости", ДанныеФормы.КодНомераОбъектаНедвижимости);
	ДанныеДекларации.Вставить("КадастровыйНомерОбъектаНедвижимости", ДанныеФормы.КадастровыйНомерОбъектаНедвижимости);
	ДанныеДекларации.Вставить("АдресОбъектаНедвижимости", ДанныеФормы.АдресОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ДатаАктаОПередачеОбъектаНедвижимости", ДанныеФормы.ДатаАктаОПередачеОбъектаНедвижимости);
	ДанныеДекларации.Вставить("ДатаРегистрацииПравСобственностиНаЖилье", ДанныеФормы.ДатаРегистрацииПравСобственностиНаЖилье);
	ДанныеДекларации.Вставить("ДатаРегистрацииПравСобственностиНаЗемлю", ДанныеФормы.ДатаРегистрацииПравСобственностиНаЗемлю);
	ДанныеДекларации.Вставить("ДатаЗаявленияОРаспределенииВычета", ДанныеФормы.ДатаЗаявленияОРаспределенииВычета);
	ДанныеДекларации.Вставить("ДоляВПравеСобственностиЧислитель", ДанныеФормы.ДоляВПравеСобственностиЧислитель);
	ДанныеДекларации.Вставить("ДоляВПравеСобственностиЗнаменатель", ДанныеФормы.ДоляВПравеСобственностиЗнаменатель);
	ДанныеДекларации.Вставить("ГодНачалаИспользованияВычета", ДанныеФормы.ГодНачалаИспользованияВычета);
	ДанныеДекларации.Вставить("СуммаРасходовНаПриобретениеНедвижимости", ДанныеФормы.СуммаРасходовНаПриобретениеНедвижимости);
	ДанныеДекларации.Вставить("СуммаПроцентовПоКредитуНаНедвижимость", ДанныеФормы.СуммаПроцентовПоКредитуНаНедвижимость);
	
	// Временные ключи для расчета итогов по данному вычету.
	ДанныеДекларации.Вставить("ОбъектПриобретенДо2014Года", ДанныеФормы.ОбъектПриобретенДо2014Года);
	ДанныеДекларации.Вставить("КредитОформленДо2014Года", ДанныеФормы.КредитОформленДо2014Года);
	ДанныеДекларации.Вставить("ВычетПрошлыхЛетСтоимость",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ВычетПрошлыхЛетСтоимость", 0));
	ДанныеДекларации.Вставить("ВычетПрошлыхЛетПроценты",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеФормы, "ВычетПрошлыхЛетПроценты", 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ОперацииСЦеннымиБумагами(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ", ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ", ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ", ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ", ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ", ДанныеФормы.НалоговаяБаза);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ", СуммаНалогаИсчисленная(ДанныеФормы.НалоговаяБаза, НалоговаяСтавка));
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",  Окр(ДанныеФормы.НалогУдержанный, 0));
	
	// Временные поля для расчета данных декларации.
	ДанныеДекларации.Вставить("ТаблицаДоходовВычетов", ДанныеФормы.Доходы);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ОплатаТруда(ДанныеФормы, НалоговаяСтавка, КлючиПоказателей)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаРФ",       НалоговаяСтавка);
	ДанныеДекларации.Вставить("КодВидаДоходаРФ",               ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ИННИсточникаДоходаРФ",          ДанныеФормы.ИНН);
	ДанныеДекларации.Вставить("КППИсточникаДоходаРФ",          ДанныеФормы.КПП);
	ДанныеДекларации.Вставить("ОКТМОИсточникаДоходаРФ",        ДанныеФормы.ОКТМО);
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаРФ", ДанныеФормы.Наименование);
	ДанныеДекларации.Вставить("СуммаДоходаРФ",                 ДанныеФормы.СуммаДохода);
	ДанныеДекларации.Вставить("СуммаОблагаемогоДоходаРФ",      ДанныеФормы.НалоговаяБаза);
	Если КлючиПоказателей.Найти("СуммаОблагаемогоДоходаРФ") <> Неопределено Тогда
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",  СуммаНалогаИсчисленная(ДанныеФормы.НалоговаяБаза, НалоговаяСтавка));
	Иначе
		ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяРФ",  СуммаНалогаИсчисленная(ДанныеФормы.СуммаДохода, НалоговаяСтавка));
	КонецЕсли;
	ДанныеДекларации.Вставить("СуммаНалогаУдержаннаяРФ",       Окр(ДанныеФормы.СуммаНалога, 0));
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_ДоходЗаПределамиРФ(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("НалоговаяСтавкаДоходаЗаПределамиРФ", НалоговаяСтавка);
	ДанныеДекларации.Вставить("ОКСМДоходаЗаПределамиРФ", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.Страна, "Код"));
	ДанныеДекларации.Вставить("НаименованиеИсточникаДоходаЗаПределамиРФ", ДанныеФормы.ИсточникДохода);
	ДанныеДекларации.Вставить("ВалютаДоходаЗаПределамиРФ", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФормы.Валюта, "Код"));
	ДанныеДекларации.Вставить("КодВидаДоходаЗаПределамиРФ", ДанныеФормы.КодВидаДохода);
	ДанныеДекларации.Вставить("ДатаПолученияДоходаЗаПределамиРФ", ДанныеФормы.ДатаПолученияДохода);
	ДанныеДекларации.Вставить("КурсНаДатуДоходаЗаПределамиРФ", ДанныеФормы.КурсНаДатуПолученияДохода);
	ДанныеДекларации.Вставить("СуммаДоходаЗаПределамиРФ", ДанныеФормы.СуммаДоходаВВалюте);
	ДанныеДекларации.Вставить("СуммаРубДоходаЗаПределамиРФ", ДанныеФормы.СуммаДоходаВРублях);
	ДанныеДекларации.Вставить("ДатаУплатыНалогаЗаПределамиРФ", ДанныеФормы.ДатаУплатыНалога);
	ДанныеДекларации.Вставить("КурсНаДатуУплатыНалогаЗаПределамиРФ", ДанныеФормы.КурсНаДатуУплатыНалога);
	ДанныеДекларации.Вставить("СуммаНалогаУплаченнаяЗаПределамиРФ", ДанныеФормы.СуммаНалогаВВалюте);
	ДанныеДекларации.Вставить("СуммаНалогаРубУплаченнаяЗаПределамиРФ", ДанныеФормы.СуммаНалогаВРублях);
	ДанныеДекларации.Вставить("СуммаНалогаИсчисленнаяДоходаЗаПределамиРФ", ДанныеФормы.СуммаНалогаИсчисленная);
	ДанныеДекларации.Вставить("СуммаПодлежащаяЗачетуВРФ", ДанныеФормы.СуммаНалогаПодлежащаяЗачету);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(ДанныеФормы, НалоговаяСтавка)
	
	ДанныеДекларации = Новый Структура;
	
	// Временные поля для расчета данных декларации.
	ДанныеДекларации.Вставить("ВидСчета",        ДанныеФормы.ВидСчета);
	ДанныеДекларации.Вставить("Год",             ДанныеФормы.ГодУбытка);
	ДанныеДекларации.Вставить("СуммаУбыткаЦБ",   ДанныеФормы.УбытокЦБ);
	ДанныеДекларации.Вставить("СуммаУбыткаПФИ",  ДанныеФормы.УбытокПФИ);
	
	Возврат ДанныеДекларации;
	
КонецФункции

Функция ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("КБК", РезультатРасчета.КБК);
	ДанныеДекларации.Вставить("ОКТМО", РезультатРасчета.ОКТМО);
	
	Если РезультатРасчета.СуммаНалога > 0 Тогда
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.Уплата);
		ДанныеДекларации.Вставить("СуммаНалога", РезультатРасчета.СуммаНалога);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", 0);
	ИначеЕсли РезультатРасчета.СуммаНалога < 0 Тогда
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.Возврат);
		ДанныеДекларации.Вставить("СуммаНалога", 0);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", -РезультатРасчета.СуммаНалога);
	Иначе
		ДанныеДекларации.Вставить("ПризнакУплатыВозврата", ПризнакиУплатыВозврата.ОтсутствиеУплатыВозврата);
		ДанныеДекларации.Вставить("СуммаНалога", 0);
		ДанныеДекларации.Вставить("СуммаВозвратаНалога", 0);
	КонецЕсли;
	
	Возврат ДанныеДекларации;
	
КонецФункции

#Область ОперацииСЦеннымиБумагами

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2018кв1" Тогда
		ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2018(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	Иначе
		ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2019(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаОтчета2018кв1

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2018(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Заполнение убытков зависит от наличия доходов по операциям с ценными бумагами.
		// Если нет доходов, то в строках с убытками нужно удалить служебные поля.
		ОтборСтрок.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаУбытков Из НайденныеСтроки Цикл
			СтрокаУбытков.СтруктураДанных.Очистить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ВидыОперацийСЦеннымиБумагами = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	
	// Соберем доходы и вычеты от всех брокеров в одну таблицу.
	ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НайденнаяСтрока.СтруктураДанных.ТаблицаДоходовВычетов, ТаблицаДоходовВычетов);
		НайденнаяСтрока.СтруктураДанных.Удалить("ТаблицаДоходовВычетов");
	КонецЦикла;
	
	ТаблицаДоходовВычетов.Свернуть("КодДохода, КодВычета", "СуммаДохода, СуммаВычета");
	
	// Инициализация структуры показателей листа декларации.
	ПоказателиОперацииНаИИС = НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС);
	ПоказателиИныеОперации  = НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидыОперацийСЦеннымиБумагами.ИныеОперации);
	
	// Заполнение части показателей по данным доходов/вычетов.
	СоответствиеПоказателейКодамДоходовВычетов = НовыйСоответствиеПоказателейОперацийСЦеннымиБумагамиКодамДоходовВычетов2НДФЛ();
	Для Каждого СтрокаДоходовВычетов Из ТаблицаДоходовВычетов Цикл
		ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(
			СтрокаДоходовВычетов, ПоказателиОперацииНаИИС, СоответствиеПоказателейКодамДоходовВычетов.ОперацииПоИИС);
		
		ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(
			СтрокаДоходовВычетов, ПоказателиИныеОперации, СоответствиеПоказателейКодамДоходовВычетов.ИныеОперации);
	КонецЦикла;
	
	// Учтем убытки прошлых лет.
	// Заполним таблицу убытков, чтобы отсортировать их в хронологическом порядке.
	ТаблицаУбытков = НовыйОписаниеТаблицыУбытков();
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид",
		Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами));
	ВидыИнвестиционныхСчетов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыИнвестиционныхСчетов();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СтрокаУбытков = ТаблицаУбытков.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУбытков, НайденнаяСтрока.СтруктураДанных);
		Если НайденнаяСтрока.СтруктураДанных.Свойство("ВидСчета") Тогда
			Если НайденнаяСтрока.СтруктураДанных.ВидСчета = ВидыИнвестиционныхСчетов.ИндивидуальныйИнвестиционныйСчет Тогда
				СтрокаУбытков.КодВидаОперации = ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС;
			Иначе
				СтрокаУбытков.КодВидаОперации = ВидыОперацийСЦеннымиБумагами.ИныеОперации;
			КонецЕсли;
		КонецЕсли;
		
		// СтруктураДанных содержит только служебные ключи, которые больше не нужны. Удалим их.
		НайденнаяСтрока.СтруктураДанных.Очистить();
	КонецЦикла;
	
	ТаблицаУбытков.Сортировать("КодВидаОперации, Год");
	
	// Заполним показатели убытков по операциям на ИИС.
	УбыткиОперацииНаИИС = ТаблицаУбытков.НайтиСтроки(Новый Структура("КодВидаОперации", ВидыОперацийСЦеннымиБумагами.ОперацииПоИИС));
	ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(УбыткиОперацииНаИИС, ПоказателиОперацииНаИИС);
	
	// Заполним показатели убытков по операциям на прочих счетах.
	УбыткиИныеОперации = ТаблицаУбытков.НайтиСтроки(Новый Структура("КодВидаОперации", ВидыОперацийСЦеннымиБумагами.ИныеОперации));
	ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(УбыткиИныеОперации, ПоказателиИныеОперации);
	
	// Расчет показателей листов декларации.
	РассчитатьПоказателиОперацийСЦеннымиБумагами(ПоказателиОперацииНаИИС);
	РассчитатьПоказателиОперацийСЦеннымиБумагами(ПоказателиИныеОперации);
	
	// Добавление итоговых строк в таблицу данных заполнения.
	Если ПоказателиОперацииНаИИС.ЦенныеБумагиИтогоСуммаДоходов <> 0 Тогда
		ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ПоказателиОперацииНаИИС);
	КонецЕсли;
	
	Если ПоказателиИныеОперации.ЦенныеБумагиИтогоСуммаДоходов <> 0 Тогда
		ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, ПоказателиИныеОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОписаниеТаблицыУбытков()
	
	ТаблицаУбытков = Новый ТаблицаЗначений;
	ТаблицаУбытков.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ОписаниеТипаСтрока(1));
	ТаблицаУбытков.Колонки.Добавить("Год",             ОбщегоНазначения.ОписаниеТипаЧисло(4));
	ТаблицаУбытков.Колонки.Добавить("СуммаУбыткаЦБ",   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаУбытков.Колонки.Добавить("СуммаУбыткаПФИ",  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ТаблицаУбытков.Индексы.Добавить("КодВидаОперации");
	
	Возврат ТаблицаУбытков;
	
КонецФункции

Функция НовыйСтруктураПоказателейОперацийСЦеннымиБумагами(ВидОперации)
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("ЦенныеБумагиВидОперации", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение2", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение3", ВидОперации);
	Показатели.Вставить("ЦенныеБумагиВидОперацииПродолжение4", ВидОперации);
	
	Показатели.Вставить("ЦБНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаРЕПО", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПоЗаймам", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаПроцентногоРасхода", 0);
	Показатели.Вставить("ЦБНаОРЦБОбщаяСуммаРасходов", 0);
	Показатели.Вставить("ЦБНаОРЦБНалоговаяБаза", 0);
	Показатели.Вставить("ЦБНаОРЦБОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ЦБНаОРЦБИнвестиционныйВычет", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПоПФИ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ", 0);
	Показатели.Вставить("ЦБНаОРЦБСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаДохода", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаРасходов", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ", 0);
	Показатели.Вставить("ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБОбщаяСуммаРасходов", 0);
	Показатели.Вставить("ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаРасходов", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеНалоговаяБаза", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ", 0);
	Показатели.Вставить("ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаРасходов", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеНалоговаяБаза", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые", 0);
	Показатели.Вставить("ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод", 0);
	
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаДохода", 0);
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаРасходов", 0);
	Показатели.Вставить("ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода", 0);
	
	Показатели.Вставить("РЕПОСуммаДохода", 0);
	Показатели.Вставить("РЕПОСуммаРасходов", 0);
	Показатели.Вставить("РЕПОСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("РЕПОСуммаУбытка", 0);
	Показатели.Вставить("РЕПОСуммаУбыткаЦБНаОРЦБ", 0);
	Показатели.Вставить("РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ", 0);
	
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаДохода", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаРасходов", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбытка", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ", 0);
	Показатели.Вставить("ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетОстатокНаНачало", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод1", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод2", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод3", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод4", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод5", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод6", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод7", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод8", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод9", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетГод10", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод1", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод2", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод3", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод4", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод5", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод6", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод7", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод8", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод9", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаГод10", 0);
	
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетОстатокНаНачало", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод1", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод2", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод3", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод4", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод5", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод6", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод7", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод8", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод9", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаГод10", 0);
	
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетНалоговаяБаза", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетНалоговаяБаза", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету", 0);
	Показатели.Вставить("ЦБУбыткиПрошлыхЛетОстатокНаКонец", 0);
	Показатели.Вставить("ПФИУбыткиПрошлыхЛетОстатокНаКонец", 0);
	
	Показатели.Вставить("ЦБУбыткиПереходящиеНаБудущиеПериоды", 0);
	Показатели.Вставить("ПФИУбыткиПереходящиеНаБудущиеПериоды", 0);
	
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаДоходов", 0);
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода", 0);
	Показатели.Вставить("ЦенныеБумагиИтогоСуммаРасходовКВычету", 0);
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("КодДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КодВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("СуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("СуммаВычета", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция НовыйСоответствиеПоказателейОперацийСЦеннымиБумагамиКодамДоходовВычетов2НДФЛ(ИндивидуальныйИнвестиционныйСчет = Ложь)
	
	Результат = Новый Структура;
	
	// Операции на индивидуальном инвестиционном счете.
	Доходы = Новый Соответствие;
	Доходы.Вставить("1544", "ЦБНаОРЦБСуммаДохода");
	Доходы.Вставить("1545", "ЦБНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1546", "ПФИНаОРЦБФондовыеСуммаДохода");
	Доходы.Вставить("1547", "ПФИНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1548", "ПФИНаОРЦБНеФондовыеСуммаДохода");
	Доходы.Вставить("1549", "ЦБПрекратившиеОбращениеСуммаДохода");
	Доходы.Вставить("1551", "РЕПОСуммаДохода");
	Доходы.Вставить("1552", "ЗаймыЦеннымиБумагамиСуммаДохода");
	Доходы.Вставить("1553", "РЕПОСуммаДохода");
	Доходы.Вставить("1554", "РЕПОСуммаДохода");
	
	Вычеты = Новый Соответствие;
	Вычеты.Вставить("225", "ЦБНаОРЦБСуммаРасходов"); // 1544
	Вычеты.Вставить("226", "ЦБНеОбрНаОРЦБСуммаРасходов"); // 1545
	Вычеты.Вставить("227", "ЦБПрекратившиеОбращениеСуммаРасходов"); // 1549
	Вычеты.Вставить("228", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1546
	Вычеты.Вставить("229", "ПФИНаОРЦБНеФондовыеСуммаРасходов"); // 1548
	Вычеты.Вставить("230", "РЕПОСуммаРасходов"); // 1551
	Вычеты.Вставить("231", "РЕПОСуммаРасходов"); // 1553
	Вычеты.Вставить("232", "ЗаймыЦеннымиБумагамиСуммаРасходов"); // 1552
	Вычеты.Вставить("233", "ЦБНаОРЦБСуммаПроцентногоРасхода"); // 1544
	Вычеты.Вставить("234", "ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода"); // 1545
	Вычеты.Вставить("235", "ПФИНеОбрНаОРЦБСуммаРасходов"); // 1547
	Вычеты.Вставить("236", "ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ"); // 1549
	Вычеты.Вставить("237", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ"); // 1544
	Вычеты.Вставить("238", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1545
	Вычеты.Вставить("239", "РЕПОСуммаУбыткаЦБНаОРЦБ"); // 1544
	Вычеты.Вставить("240", "РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1545
	Вычеты.Вставить("241", "ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые"); // 1548
	Вычеты.Вставить("250", "ЦБНаОРЦБСуммаРасходов"); // 1546
	Вычеты.Вставить("251", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1546, 1544
	Вычеты.Вставить("252", "ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые"); // 1548
	Вычеты.Вставить("620", "РЕПОСуммаРасходов"); // 1554
	
	Результат.Вставить("ОперацииПоИИС", Новый Структура("Доходы, Вычеты", Доходы, Вычеты));
	
	// Операции на индивидуальном инвестиционном счете.
	Доходы = Новый Соответствие;
	Доходы.Вставить("1530", "ЦБНаОРЦБСуммаДохода");
	Доходы.Вставить("1531", "ЦБНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1532", "ПФИНаОРЦБФондовыеСуммаДохода");
	Доходы.Вставить("1533", "ПФИНеОбрНаОРЦБСуммаДохода");
	Доходы.Вставить("1535", "ПФИНаОРЦБНеФондовыеСуммаДохода");
	Доходы.Вставить("1536", "ЦБПрекратившиеОбращениеСуммаДохода");
	Доходы.Вставить("1537", "РЕПОСуммаДохода");
	Доходы.Вставить("1538", "ЗаймыЦеннымиБумагамиСуммаДохода");
	Доходы.Вставить("1539", "РЕПОСуммаДохода");
	Доходы.Вставить("1541", "РЕПОСуммаДохода");
	
	Вычеты = Новый Соответствие;
	Вычеты.Вставить("201", "ЦБНаОРЦБСуммаРасходов"); // 1530
	Вычеты.Вставить("202", "ЦБНеОбрНаОРЦБСуммаРасходов"); // 1531
	Вычеты.Вставить("203", "ЦБПрекратившиеОбращениеСуммаРасходов"); // 1536
	Вычеты.Вставить("205", "ЦБНаОРЦБСуммаРасходов"); // 1532
	Вычеты.Вставить("206", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1532
	Вычеты.Вставить("207", "ПФИНаОРЦБНеФондовыеСуммаРасходов"); // 1535
	Вычеты.Вставить("208", "ПФИНаОРЦБФондовыеСуммаРасходов"); // 1530, 1532
	Вычеты.Вставить("209", "ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые"); // 1535
	Вычеты.Вставить("210", "ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые"); // 1535
	Вычеты.Вставить("211", "РЕПОСуммаРасходов"); // 1537
	Вычеты.Вставить("213", "РЕПОСуммаРасходов"); // 1539
	Вычеты.Вставить("215", "ЗаймыЦеннымиБумагамиСуммаРасходов"); // 1538
	Вычеты.Вставить("216", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ"); // 1530
	Вычеты.Вставить("217", "ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1531
	Вычеты.Вставить("218", "ЦБНаОРЦБСуммаПроцентногоРасхода"); // 1530
	Вычеты.Вставить("219", "ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода"); // 1531
	Вычеты.Вставить("220", "ПФИНеОбрНаОРЦБСуммаРасходов"); // 1533
	Вычеты.Вставить("222", "РЕПОСуммаУбыткаЦБНаОРЦБ"); // 1530
	Вычеты.Вставить("223", "РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ"); // 1531
	Вычеты.Вставить("224", "ЦБНаОРЦБСуммаРасходов"); // 1536
	Вычеты.Вставить("618", "ЦБНаОРЦБИнвестиционныйВычет"); // 1535
	Вычеты.Вставить("620", "РЕПОСуммаРасходов"); // 1541
	
	Результат.Вставить("ИныеОперации", Новый Структура("Доходы, Вычеты", Доходы, Вычеты));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПоказателиОперацийСЦеннымиБумагамиПоКодамДоходовВычетов(СтрокаДоходовВычетов, Показатели, СоответствиеПоказателейКодамДоходовВычетов)
	
	ИмяПоказателя = СоответствиеПоказателейКодамДоходовВычетов.Доходы.Получить(СокрЛП(СтрокаДоходовВычетов.КодДохода));
	Если ИмяПоказателя <> Неопределено Тогда
		Показатели[ИмяПоказателя] = Показатели[ИмяПоказателя] + СтрокаДоходовВычетов.СуммаДохода;
	КонецЕсли;
	
	ИмяПоказателя = СоответствиеПоказателейКодамДоходовВычетов.Вычеты.Получить(СокрЛП(СтрокаДоходовВычетов.КодВычета));
	Если ИмяПоказателя <> Неопределено Тогда
		Показатели[ИмяПоказателя] = Показатели[ИмяПоказателя] + СтрокаДоходовВычетов.СуммаВычета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоказателиУбытковПрошлыхЛетПоОперациямСЦеннымиБумагами(ТаблицаУбытки, Показатели)
	
	КоличествоСтрок = Мин(ТаблицаУбытки.Количество(), 10);
	СуммаУбыткаЦБВсего = 0;
	СуммаУбыткаПФИВсего = 0;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Если ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаЦБ = 0 И ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаПФИ = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Показатели["ЦБУбыткиПрошлыхЛетГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].Год;
		Показатели["ЦБУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаЦБ;
		Показатели["ПФИУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки] = ТаблицаУбытки[НомерСтроки - 1].СуммаУбыткаПФИ;
		
		СуммаУбыткаЦБВсего = СуммаУбыткаЦБВсего + Показатели["ЦБУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки];
		СуммаУбыткаПФИВсего = СуммаУбыткаПФИВсего + Показатели["ПФИУбыткиПрошлыхЛетСуммаУбыткаГод" + НомерСтроки];
	КонецЦикла;
	
	Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало = СуммаУбыткаЦБВсего;
	Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало = СуммаУбыткаПФИВсего;
	
КонецПроцедуры

Процедура РассчитатьПоказателиОперацийСЦеннымиБумагами(Показатели)
	
	// 402
	Показатели.РЕПОСуммаРасходов = Показатели.РЕПОСуммаРасходов + Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ + Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 403
	Показатели.РЕПОСуммаНалогооблагаемогоДохода = Макс(0, Показатели.РЕПОСуммаДохода - Показатели.РЕПОСуммаРасходов);
	
	// 404
	Показатели.РЕПОСуммаУбытка = Макс(0, Показатели.РЕПОСуммаРасходов - Показатели.РЕПОСуммаДохода);
	
	// 405
	Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ = Макс(0, Показатели.РЕПОСуммаУбытка - Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 406
	Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ = Мин(Показатели.РЕПОСуммаУбытка, Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 103
	Показатели.ЦБНаОРЦБСуммаУбыткаРЕПО = Показатели.РЕПОСуммаУбыткаЦБНаОРЦБ;
	
	// 207
	Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО = Показатели.РЕПОСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 408
	Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов = Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ + Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 409
	Показатели.ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаДохода - Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов);
	
	// 410
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаРасходов - Показатели.ЗаймыЦеннымиБумагамиСуммаДохода);
	
	// 411
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ = Макс(0, Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка - Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 412
	Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ = Мин(Показатели.ЗаймыЦеннымиБумагамиСуммаУбытка, Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ);
	
	// 104
	Показатели.ЦБНаОРЦБСуммаУбыткаПоЗаймам = Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНаОРЦБ;
	
	// 208
	Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам = Показатели.ЗаймыЦеннымиБумагамиСуммаУбыткаЦБНеОбрНаОРЦБ;
	
	// 106
	Показатели.ЦБНаОРЦБОбщаяСуммаРасходов =
		Показатели.ЦБНаОРЦБСуммаРасходов + Показатели.ЦБНаОРЦБСуммаУбыткаРЕПО
		+ Показатели.ЦБНаОРЦБСуммаУбыткаПоЗаймам + Показатели.ЦБНаОРЦБСуммаПроцентногоРасхода;
	
	// 107
	Показатели.ЦБНаОРЦБНалоговаяБаза = Макс(0, Показатели.ЦБНаОРЦБСуммаДохода - Показатели.ЦБНаОРЦБОбщаяСуммаРасходов);
	
	// 108
	Показатели.ЦБНаОРЦБОбщаяСуммаУбытка = Макс(0, Показатели.ЦБНаОРЦБОбщаяСуммаРасходов - Показатели.ЦБНаОРЦБСуммаДохода);
	
	// 113
	НалоговаяБаза = Показатели.ЦБПрекратившиеОбращениеСуммаДохода - Показатели.ЦБПрекратившиеОбращениеСуммаРасходов;
	Если НалоговаяБаза > 0 Тогда
		Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ = Мин(НалоговаяБаза, Показатели.ЦБНаОРЦБОбщаяСуммаУбытка);
	КонецЕсли;
	
	// 203
	Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ = Мин(Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ,
		Показатели.ЦБПрекратившиеОбращениеСуммаДохода - Показатели.ЦБПрекратившиеОбращениеСуммаРасходов);
	
	Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ = Макс(0, Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ);
	Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ = Показатели.ЦБПрекратившиеОбращениеСуммаУбыткаПоЦБНаОРЦБ;
	
	// 204
	Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода = 
		Показатели.ЦБПрекратившиеОбращениеСуммаДохода
		- Показатели.ЦБПрекратившиеОбращениеСуммаРасходов
		- Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода;
	
	// 211
	Показатели.ЦБНеОбрНаОРЦБОбщаяСуммаРасходов = Показатели.ЦБНеОбрНаОРЦБСуммаРасходов
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаРЕПО
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаПоЗаймам
		+ Показатели.ЦБНеОбрНаОРЦБСуммаПроцентногоРасхода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаУбыткаИнвестТоварищества;
	
	// 212
	Показатели.ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ЦБНеОбрНаОРЦБСуммаДохода - Показатели.ЦБНеОбрНаОРЦБОбщаяСуммаРасходов);
	
	// 303
	Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза = Макс(0, Показатели.ПФИНаОРЦБФондовыеСуммаДохода - Показатели.ПФИНаОРЦБФондовыеСуммаРасходов);
	
	// 304
	Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка = Макс(0, Показатели.ПФИНаОРЦБФондовыеСуммаРасходов - Показатели.ПФИНаОРЦБФондовыеСуммаДохода);
	
	Если Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза > 0 Тогда
		// 306
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ = Мин(Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза,
			Показатели.ЦБНаОРЦБОбщаяСуммаУбытка - Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ);
		
		// 308
		Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ;
		
		// 114
		Показатели.ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ = Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаОтЦБНаОРЦБ;
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБНалоговаяБаза > 0 Тогда
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБНалоговаяБаза;
		
		// 109
		Показатели.ЦБНаОРЦБИнвестиционныйВычет = Мин(Показатели.ЦБНаОРЦБИнвестиционныйВычет, Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода);
		
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБИнвестиционныйВычет;
		
		Если Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка > 0 Тогда
			// 310
			Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ = Мин(Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода, Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка);
			
			// 110
			Показатели.ЦБНаОРЦБСуммаУбыткаПоПФИ = Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ;
			
			// 112
			Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБСуммаУбыткаПоПФИ;
		КонецЕсли;
	КонецЕсли;
	
	// 314
	Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза = Макс(0, Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода - Показатели.ПФИНаОРЦБНеФондовыеСуммаРасходов);
	
	// 315
	Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка = Макс(0, Показатели.ПФИНаОРЦБНеФондовыеСуммаРасходов - Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода);
	
	Если Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза > 0 Тогда
		// 317
		Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые = Мин(
			Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка, Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза);
		
		// 318
		Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые;
		
		// 309
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые = Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПФИНаОРЦБФондовые;
		
		// 311
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод = Показатели.ПФИНаОРЦБФондовыеОбщаяСуммаУбытка
			- Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляПФИНаОРЦБНеФондовые - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаДляЦБНаОРЦБ;
		
	ИначеЕсли Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка > 0 Тогда
		
		Если Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
			// 319
			Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые = 
				Мин(Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода, Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка);
			
			// 307
			Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые = Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые;
			
			// 308
			Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПФИНаОРЦБНеФондовые;
		КонецЕсли;
		
		// 320
		Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод = Показатели.ПФИНаОРЦБНеФондовыеОбщаяСуммаУбытка - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаДляПФИНаОРЦБФондовые;
		
	КонецЕсли;
	
	// 323
	Показатели.ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода = Макс(0, Показатели.ПФИНеОбрНаОРЦБСуммаДохода - Показатели.ПФИНеОбрНаОРЦБСуммаРасходов);
	
	// 115
	Если Показатели.ЦБНаОРЦБОбщаяСуммаУбытка > 0 Тогда
		Показатели.ЦБНаОРЦБСуммаУбыткаБудущийПериод = Показатели.ЦБНаОРЦБОбщаяСуммаУбытка
			- Показатели.ЦБНаОРЦБСуммаУбыткаЦБПрекратившихОбращениеНаОРЦБ
			- Показатели.ЦБНаОРЦБСуммаУбыткаУменьшениеДоходаПФИ;
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБНалоговаяБаза > 0
		И Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало > 0 Тогда
		
		// 523
		Показатели.ЦБУбыткиПрошлыхЛетНалоговаяБаза = Показатели.ЦБНаОРЦБНалоговаяБаза;
		
		// 525
		Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету =
			Мин(Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало, Показатели.ЦБУбыткиПрошлыхЛетНалоговаяБаза);
		
	КонецЕсли;
	
	ПФИУбыткиПрошлыхЛетНалоговаяБаза = Показатели.ПФИНаОРЦБФондовыеНалоговаяБаза
		+ Показатели.ПФИНаОРЦБНеФондовыеНалоговаяБаза;
	
	Если ПФИУбыткиПрошлыхЛетНалоговаяБаза > 0
		И Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало > 0 Тогда
		
		// 524
		Показатели.ПФИУбыткиПрошлыхЛетНалоговаяБаза = ПФИУбыткиПрошлыхЛетНалоговаяБаза;
		
		// 526
		Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету =
			Мин(Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало, Показатели.ПФИУбыткиПрошлыхЛетНалоговаяБаза);
		
	КонецЕсли;
	
	Если Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода > 0 Тогда
		// 111
		Показатели.ЦБНаОРЦБСуммаУбыткаПрошлыхЛет = Мин(Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода, Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету);
		
		// 112
		Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода - Показатели.ЦБНаОРЦБСуммаУбыткаПрошлыхЛет;
	КонецЕсли;
	
	Если Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
		// 305
		Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет = Мин(Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету, Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода);
		
		// 308
		Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода = Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет;
	КонецЕсли;
	
	Если Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода > 0 Тогда
		УбытокДоступныйКВычету = Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету - Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаПрошлыхЛет;
		Если УбытокДоступныйКВычету > 0 Тогда
			//316
			Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет =
				Мин(УбытокДоступныйКВычету, Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода);
			
			//318
			Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода =
				Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода - Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаПрошлыхЛет;
		КонецЕсли;
	КонецЕсли;
	
	// 527
	Показатели.ЦБУбыткиПрошлыхЛетОстатокНаКонец = Макс(0,
		Показатели.ЦБУбыткиПрошлыхЛетОстатокНаНачало - Показатели.ЦБУбыткиПрошлыхЛетСуммаУбыткаКВычету);
	
	// 528
	Показатели.ПФИУбыткиПрошлыхЛетОстатокНаКонец = Макс(0,
		Показатели.ПФИУбыткиПрошлыхЛетОстатокНаНачало - Показатели.ПФИУбыткиПрошлыхЛетСуммаУбыткаКВычету);
	
	// 529
	Показатели.ЦБУбыткиПереходящиеНаБудущиеПериоды = Показатели.ЦБУбыткиПрошлыхЛетОстатокНаКонец + Показатели.ЦБНаОРЦБСуммаУбыткаБудущийПериод;
	
	// 530
	Показатели.ПФИУбыткиПереходящиеНаБудущиеПериоды = Показатели.ПФИУбыткиПрошлыхЛетОстатокНаКонец
		+ Показатели.ПФИНаОРЦБФондовыеСуммаУбыткаБудущийПериод
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаУбыткаБудущийПериод;
	
	// 531
	Показатели.ЦенныеБумагиИтогоСуммаДоходов = Показатели.ЦБНаОРЦБСуммаДохода
		+ Показатели.ЦБПрекратившиеОбращениеСуммаДохода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаДохода
		+ Показатели.ПФИНаОРЦБФондовыеСуммаДохода
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаДохода
		+ Показатели.ПФИНеОбрНаОРЦБСуммаДохода
		+ Показатели.РЕПОСуммаДохода
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаДохода;
	
	// 532
	Показатели.ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода = Показатели.ЦБНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.ЦБПрекратившиеОбращениеСуммаНалогооблагаемогоДохода
		+ Показатели.ЦБНеОбрНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНаОРЦБФондовыеСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНаОРЦБНеФондовыеСуммаНалогооблагаемогоДохода
		+ Показатели.ПФИНеОбрНаОРЦБСуммаНалогооблагаемогоДохода
		+ Показатели.РЕПОСуммаНалогооблагаемогоДохода
		+ Показатели.ЗаймыЦеннымиБумагамиСуммаНалогооблагаемогоДохода;
	
	// 533
	Показатели.ЦенныеБумагиИтогоСуммаРасходовКВычету = Макс(0,
		Показатели.ЦенныеБумагиИтогоСуммаДоходов - Показатели.ЦенныеБумагиИтогоСуммаНалогооблагаемогоДохода);
	
КонецПроцедуры

Процедура ДобавитьИтогиРасчетаПоказателейОперацийСЦеннымиБумагами(ТаблицаДанныхЗаполнения, Показатели)
	
	СтрокаЭталон = ТаблицаДанныхЗаполнения.Найти(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, "Вид");
	
	НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
	НоваяСтрока.Вид = СтрокаЭталон.Вид;
	НоваяСтрока.ВидДохода = СтрокаЭталон.ВидДохода;
	НоваяСтрока.НалоговаяСтавка = СтрокаЭталон.НалоговаяСтавка;
	НоваяСтрока.КБК = СтрокаЭталон.КБК;
	НоваяСтрока.СтруктураДанных = Показатели;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОтчета2019кв1

Процедура ДобавитьИтоговыеПоказателиПоОперациямСЦеннымиБумагами2019(ТаблицаДанныхЗаполнения, ВыбраннаяФорма3НДФЛ)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		// Заполнение убытков зависит от наличия доходов по операциям с ценными бумагами.
		// Если нет доходов, то в строках с убытками нужно удалить служебные поля.
		ОтборСтрок.Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаУбытков Из НайденныеСтроки Цикл
			СтрокаУбытков.СтруктураДанных.Очистить();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	КодыВидовОпераций = Отчеты.РегламентированныйОтчет3НДФЛ.КодыВидовОперацийСЦеннымиБумагами(ВыбраннаяФорма3НДФЛ);
	ПризнакиУчетаУбытков = Отчеты.РегламентированныйОтчет3НДФЛ.ПризнакиУчетаУбытковПоЦеннымБумагам(ВыбраннаяФорма3НДФЛ);
	
	// Соберем доходы и вычеты от всех брокеров в одну таблицу.
	// Заодно преобразуем коды видов доходов в коды видов операций.
	ТаблицаВидовОпераций = ТаблицаСоответствияВидовДоходовВычетовВидамОперацийСЦеннымиБумагами(КодыВидовОпераций);
	ТаблицаДоходовВычетов = НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2019();
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДополнитьОбщуюТаблицуДоходовВычетовПоОперациямСЦеннымиБумагами2019(
			ТаблицаДоходовВычетов, НайденнаяСтрока.СтруктураДанных.ТаблицаДоходовВычетов, ТаблицаВидовОпераций);
		НайденнаяСтрока.СтруктураДанных.Удалить("ТаблицаДоходовВычетов");
	КонецЦикла;
	
	ТаблицаДоходовВычетов.Свернуть("КодДохода, КодУбытка",
		"ЦенныеБумагиСуммаДохода, ЦенныеБумагиСуммаРасходовПоРеализации, ЦенныеБумагиСуммаУбытка,
		|ЦенныеБумагиСуммаПрибылиКВычету, ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету");
	
	// Дополним убытками прошлых лет
	ДополнитьОбщуюТаблицуДоходовВычетовУбыткамиПоОперациямСЦеннымиБумагами2019(
		ТаблицаДоходовВычетов, ТаблицаДанныхЗаполнения, КодыВидовОпераций);
	
	// Заполнение показателей декларации
	СтрокаЭталон = ТаблицаДанныхЗаполнения.Найти(Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами, "Вид");
	МассивКодовОпераций = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДоходовВычетов, "КодДохода", Истина);
	Для Каждого КодВидаОперации Из МассивКодовОпераций Цикл
		
		СуммаВычетов = 0;
		ИтогоУбыток = 0;
		
		СтруктураДанных = НовыйСтруктураДанныхСтрокиОперацийСЦеннымиБумагами();
		СтруктураДанных.ЦенныеБумагиВидОперации = КодВидаОперации;
		СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокНеУчитывается;
		
		СтрокиОперации = ТаблицаДоходовВычетов.НайтиСтроки(Новый Структура("КодДохода", КодВидаОперации));
		Для Каждого НайденнаяСтрока Из СтрокиОперации Цикл
			
			Для Каждого Колонка Из ТаблицаДоходовВычетов.Колонки Цикл
				
				Если СтруктураДанных.Свойство(Колонка.Имя) И ТипЗнч(СтруктураДанных[Колонка.Имя]) = Тип("Число") Тогда
					СтруктураДанных[Колонка.Имя] = СтруктураДанных[Колонка.Имя] + НайденнаяСтрока[Колонка.Имя];
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(НайденнаяСтрока.КодУбытка) Тогда
				СтруктураДанных.ЦенныеБумагиПризнакУчетаУбытков = ПризнакиУчетаУбытков.УбытокУчитывается;
				
				СтрокаКодУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.НайтиПоЗначению(НайденнаяСтрока.КодУбытка);
				Если СтрокаКодУбытка = Неопределено Тогда
					СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Добавить(НайденнаяСтрока.КодУбытка);
					СтруктураДанных.ЦенныеБумагиСуммаУбытка.Добавить(НайденнаяСтрока.ЦенныеБумагиСуммаУбытка);
				Иначе
					ИндексКодаУбытка = СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Индекс(СтрокаКодУбытка);
					СтрокаСуммаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[ИндексКодаУбытка];
					СтрокаСуммаУбытка.Значение = СтрокаСуммаУбытка.Значение + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
				КонецЕсли;
				
				// Накапливаем сумму убытков
				СуммаВычетов = СуммаВычетов + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
				ИтогоУбыток = ИтогоУбыток + НайденнаяСтрока.ЦенныеБумагиСуммаУбытка;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = ИтогоУбыток;
		СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = СтруктураДанных.ЦенныеБумагиСуммаРасходовПоРеализации;
		
		// Учитываем ограничение - сумма вычетов не может превышать сумму дохода
		СуммаВычетов = СуммаВычетов
			+ СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы
			+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету
			+ СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
		
		Если СуммаВычетов > СтруктураДанных.ЦенныеБумагиСуммаДохода Тогда
			ДоступныйВычет = СтруктураДанных.ЦенныеБумагиСуммаДохода;
			
			СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы = Мин(СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаРасходовУменьшающаяДоходы;
			
			СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиКВычету;
			
			СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету = Мин(СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету, ДоступныйВычет);
			ДоступныйВычет = ДоступныйВычет - СтруктураДанных.ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету;
			
			// Ограничим общую сумму убытка, принимаемую к вычету
			СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка = Мин(СтруктураДанных.ЦенныеБумагиИтогоСуммаУбытка, ДоступныйВычет);
			
			// Распределим доступный вычет по строкам убытков
			КоличествоСтрокУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка.Количество() - 1;
			Для Индекс = 0 По КоличествоСтрокУбытка Цикл
				СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[Индекс];
				СтрокаУбытка.Значение = Мин(СтрокаУбытка.Значение, ДоступныйВычет);
				ДоступныйВычет = ДоступныйВычет - СтрокаУбытка.Значение;
			КонецЦикла;
			
			// Удалим пустые строки убытков
			Для Индекс = 0 По КоличествоСтрокУбытка Цикл
				СтрокаУбытка = СтруктураДанных.ЦенныеБумагиСуммаУбытка[КоличествоСтрокУбытка - Индекс];
				Если Не ЗначениеЗаполнено(СтрокаУбытка.Значение) Тогда
					СтруктураДанных.ЦенныеБумагиСуммаУбытка.Удалить(СтрокаУбытка);
					СтруктураДанных.ЦенныеБумагиУчетУбытковВидОперации.Удалить(КоличествоСтрокУбытка - Индекс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Запишем строку операций с ценными бумагами в ТаблицаДанныхЗаполнения
		Если СтруктураДанных.ЦенныеБумагиСуммаДохода <> 0 Тогда
			СтрокаДанныхЗаполнения = ТаблицаДанныхЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныхЗаполнения, СтрокаЭталон);
			СтрокаДанныхЗаполнения.СтруктураДанных = СтруктураДанных;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйТаблицаДоходовВычетовПоОперациямСЦеннымиБумагами2019()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("КодДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КодУбытка",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаДохода", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаРасходовПоРеализации", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаУбытка", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаПрибылиКВычету", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаЗначений.Колонки.Добавить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ДополнитьОбщуюТаблицуДоходовВычетовПоОперациямСЦеннымиБумагами2019(Приемник, Источник, ТаблицаВидовОпераций)
	
	Для Каждого СтрокаИсточник Из Источник Цикл
		СтрокаПриемник = Приемник.Добавить();
		
		КлючДохода = ТаблицаВидовОпераций.Найти(СтрокаИсточник.КодДохода, "КодДоходаВычета");
		Если КлючДохода <> Неопределено Тогда
			СтрокаПриемник.КодДохода = КлючДохода.КодВидаОперации;
			СтрокаПриемник[КлючДохода.ИмяПоляСумма] = СтрокаПриемник[КлючДохода.ИмяПоляСумма] + СтрокаИсточник.СуммаДохода;
		КонецЕсли;
		
		КлючВычета = ТаблицаВидовОпераций.Найти(СтрокаИсточник.КодВычета, "КодДоходаВычета");
		Если КлючВычета <> Неопределено Тогда
			Если КлючВычета.ЭтоУбыток Тогда
				СтрокаПриемник.КодУбытка = КлючВычета.КодВидаОперации;
			КонецЕсли;
			СтрокаПриемник[КлючВычета.ИмяПоляСумма] = СтрокаПриемник[КлючВычета.ИмяПоляСумма] + СтрокаИсточник.СуммаВычета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОбщуюТаблицуДоходовВычетовУбыткамиПоОперациямСЦеннымиБумагами2019(ТаблицаДоходовВычетов, ТаблицаДанныхЗаполнения, КодыВидовОпераций)
	
	УчетУбытковПрошлыхЛет = ПараметрыУчетаУбытковПрошлыхЛет2019(КодыВидовОпераций);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(Новый Структура("Вид",
		Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами));
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		УчетУбытковПоСчету = Неопределено;
		Если Не УчетУбытковПрошлыхЛет.Свойство(НайденнаяСтрока.СтруктураДанных.ВидСчета, УчетУбытковПоСчету) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Параметры Из УчетУбытковПоСчету Цикл
			СтрокаВычета = ТаблицаДоходовВычетов.Добавить();
			СтрокаВычета.КодДохода = Параметры.КодДохода;
			СтрокаВычета.КодУбытка = Параметры.КодУбытка;
			СтрокаВычета.ЦенныеБумагиСуммаУбытка = НайденнаяСтрока.СтруктураДанных[Параметры.ИмяПоляСумма];
		КонецЦикла;
		
		// СтруктураДанных содержит только служебные ключи, которые больше не нужны
		НайденнаяСтрока.СтруктураДанных.Очистить();
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСоответствияВидовДоходовВычетовВидамОперацийСЦеннымиБумагами(КодыВидовОпераций)
	
	ТаблицаВидовОпераций = НовыйТаблицаВидовОперацийЦеннымиБумагами();
	
	// Операции на обычном брокерском счете и прочих инвестиционных счетах,
	// кроме индивидуальных инвестиционных счетов.
	ДобавитьСтрокуТаблицыВидовОпераций("1530", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1531", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1532", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1533", КодыВидовОпераций.ПФИнаПрочихРынках, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1535", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1536", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращение, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1537", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1538", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1539", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1541", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	
	ДобавитьСтрокуТаблицыВидовОпераций("201", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("202", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("203", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращение, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1536
	ДобавитьСтрокуТаблицыВидовОпераций("205", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1532
	ДобавитьСтрокуТаблицыВидовОпераций("206", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1532
	ДобавитьСтрокуТаблицыВидовОпераций("207", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("208", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530, 1532
	ДобавитьСтрокуТаблицыВидовОпераций("209", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("210", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1535
	ДобавитьСтрокуТаблицыВидовОпераций("211", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1537
	ДобавитьСтрокуТаблицыВидовОпераций("213", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1539
	ДобавитьСтрокуТаблицыВидовОпераций("215", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1538
	ДобавитьСтрокуТаблицыВидовОпераций("216", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("217", КодыВидовОпераций.Займы, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("218", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("219", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("220", КодыВидовОпераций.ПФИнаПрочихРынках, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1533
	ДобавитьСтрокуТаблицыВидовОпераций("222", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1530
	ДобавитьСтрокуТаблицыВидовОпераций("223", КодыВидовОпераций.РЕПО, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1531
	ДобавитьСтрокуТаблицыВидовОпераций("224", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1536
	ДобавитьСтрокуТаблицыВидовОпераций("618", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, "ЦенныеБумагиСуммаПрибылиКВычету", ТаблицаВидовОпераций); // 1530
	
	// Операции на индивидуальном инвестиционном счете
	ДобавитьСтрокуТаблицыВидовОпераций("1544", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1545", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1546", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1547", КодыВидовОпераций.ПФИнаПрочихРынкахИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1548", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1549", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращениеИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1551", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1552", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1553", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	ДобавитьСтрокуТаблицыВидовОпераций("1554", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаДохода", ТаблицаВидовОпераций);
	
	ДобавитьСтрокуТаблицыВидовОпераций("225", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("226", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("227", КодыВидовОпераций.ЦенныеБумагиПрекратившиеОбращениеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1549
	ДобавитьСтрокуТаблицыВидовОпераций("228", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1546
	ДобавитьСтрокуТаблицыВидовОпераций("229", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("230", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1551
	ДобавитьСтрокуТаблицыВидовОпераций("231", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1553
	ДобавитьСтрокуТаблицыВидовОпераций("232", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1552
	ДобавитьСтрокуТаблицыВидовОпераций("233", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("234", КодыВидовОпераций.ЦенныеБумагиНаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("235", КодыВидовОпераций.ПФИнаПрочихРынкахИИС, "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1547
	ДобавитьСтрокуТаблицыВидовОпераций("236", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1549
	ДобавитьСтрокуТаблицыВидовОпераций("237", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("238", КодыВидовОпераций.ЗаймыИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("239", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1544
	ДобавитьСтрокуТаблицыВидовОпераций("240", КодыВидовОпераций.РЕПОнаИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1545
	ДобавитьСтрокуТаблицыВидовОпераций("241", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("250", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1546
	ДобавитьСтрокуТаблицыВидовОпераций("251", КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1546, 1544
	ДобавитьСтрокуТаблицыВидовОпераций("252", КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаУбытка", ТаблицаВидовОпераций, Истина); // 1548
	ДобавитьСтрокуТаблицыВидовОпераций("619", КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, "ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", ТаблицаВидовОпераций); // 1544
	
	// Вычеты, общие для обоих видов счетов
	ДобавитьСтрокуТаблицыВидовОпераций("620", "", "ЦенныеБумагиСуммаРасходовПоРеализации", ТаблицаВидовОпераций); // 1541, 1554
	
	Возврат ТаблицаВидовОпераций;
	
КонецФункции

Функция НовыйТаблицаВидовОперацийЦеннымиБумагами()
	
	КлючиПоказателей = Новый ТаблицаЗначений;
	КлючиПоказателей.Колонки.Добавить("КодДоходаВычета", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("КодВидаОперации", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ИмяПоляСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КлючиПоказателей.Колонки.Добавить("ЭтоУбыток", Новый ОписаниеТипов("Булево"));
	
	Возврат КлючиПоказателей;
	
КонецФункции

Процедура ДобавитьСтрокуТаблицыВидовОпераций(КодДоходаВычета, КодВидаОперации, ИмяПоляСумма, ТаблицаВидовОпераций, ЭтоУбыток = Ложь)
	
	Если ТаблицаВидовОпераций.Найти(КодДоходаВычета, "КодДоходаВычета") <> Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль кода вида доходов (вычетов) ""%1""'"), КодДоходаВычета);
	КонецЕсли;
	
	НоваяСтрока = ТаблицаВидовОпераций.Добавить();
	НоваяСтрока.ИмяПоляСумма = ИмяПоляСумма;
	НоваяСтрока.КодДоходаВычета = КодДоходаВычета;
	НоваяСтрока.КодВидаОперации = КодВидаОперации;
	НоваяСтрока.ЭтоУбыток = ЭтоУбыток;
	
КонецПроцедуры

Функция НовыйСтруктураДанныхСтрокиОперацийСЦеннымиБумагами()
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ЦенныеБумагиВидОперации", "");
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаДохода", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаРасходовПоРеализации", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаРасходовУменьшающаяДоходы", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиПризнакУчетаУбытков", "");
	СтруктураСтроки.Вставить("ЦенныеБумагиУчетУбытковВидОперации", Новый СписокЗначений);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаУбытка", Новый СписокЗначений);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаПрибылиКВычету", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиСуммаПрибылиПоОперациямНаИИСкВычету", 0);
	СтруктураСтроки.Вставить("ЦенныеБумагиИтогоСуммаУбытка", 0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

Функция ПараметрыУчетаУбытковПрошлыхЛет2019(КодыВидовОпераций)
	
	Результат = Новый Структура;
	
	// Операции на индивидуальном инвестиционном счете
	УбыткиПоИИС = Новый Массив;
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоЦеннымБумагамНаИИС, "СуммаУбыткаЦБ"));
	
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоПФИнаИИС, "СуммаУбыткаПФИ"));
	
	УбыткиПоИИС.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынкеИИС, КодыВидовОпераций.УбыткиПоПФИнаИИС, "СуммаУбыткаПФИ"));
	
	// Операции на обычном брокерском счете и прочих инвестиционных счетах,
	// кроме индивидуальных инвестиционных счетов.
	УбыткиПоПрочимСчетам = Новый Массив;
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ЦенныеБумагиНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоЦеннымБумагам, "СуммаУбыткаЦБ"));
	
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсЦенныхБумагНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоПФИ, "СуммаУбыткаПФИ"));
	
	УбыткиПоПрочимСчетам.Добавить(
		Новый Структура("КодДохода, КодУбытка, ИмяПоляСумма",
			КодыВидовОпераций.ПФИсТоваровНаОрганизованномРынке, КодыВидовОпераций.УбыткиПоПФИ, "СуммаУбыткаПФИ"));
	
	ВидыИнвестиционныхСчетов = Отчеты.РегламентированныйОтчет3НДФЛ.ВидыИнвестиционныхСчетов();
	
	Результат.Вставить(ВидыИнвестиционныхСчетов.ИндивидуальныйИнвестиционныйСчет, УбыткиПоИИС);
	Результат.Вставить(ВидыИнвестиционныхСчетов.ПрочиеСчета, УбыткиПоПрочимСчетам);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДанныеЗаполненияИмущественногоВычета

Процедура ДобавитьДанныеЗаполненияИмущественногоВычета(ТаблицаДанныхЗаполнения, ДанныеФормы, ВидДохода, НалоговаяСтавка, ТаблицаПоказателей, КодыИсточниковДоходов)
	
	Перем СуммаДохода, СуммаВычетаПоВидуИмущества, ОбщаяСуммаВычета;
	
	Если ДанныеФормы.СуммаВычета = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидИмущества = ДанныеФормы.ДанныеОтчетности.ВидИмущества;
	ВидВычета = ДанныеФормы.ДанныеОтчетности.ВидВычета;
	
	ОтборПоказателей = Новый Структура("ВидИмущества, ВидВычета", ВидИмущества, ВидВычета);
	СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(ОтборПоказателей);
	
	Если СтрокиПоказателей.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	КлючДохода = СтрокиПоказателей[0].КлючДохода;
	КлючВычета = СтрокиПоказателей[0].КлючВычета;
	КлючОбщейСуммыВычета = СтрокиПоказателей[0].КлючОбщейСуммыВычета;
	ВычетСсылка = СтрокиПоказателей[0].ВидВычетаСсылка;
	
	ИмущественныйВычет = ТаблицаДанныхЗаполнения.Найти(ВычетСсылка, "Вид");
	Если ИмущественныйВычет = Неопределено Тогда
		ИмущественныйВычет = ТаблицаДанныхЗаполнения.Добавить();
		ИмущественныйВычет.ВидДохода = ВидДохода;
		ИмущественныйВычет.НалоговаяСтавка = НалоговаяСтавка;
		ИмущественныйВычет.Вид = ВычетСсылка;
		СтруктураВычета = Новый Структура;
	Иначе
		СтруктураВычета = ИмущественныйВычет.СтруктураДанных;
	КонецЕсли;
	
	Если Не СтруктураВычета.Свойство(КлючДохода, СуммаДохода) Тогда
		СуммаДохода = 0;
	КонецЕсли;
	Если Не СтруктураВычета.Свойство(КлючВычета, СуммаВычетаПоВидуИмущества) Тогда
		СуммаВычетаПоВидуИмущества = 0;
	КонецЕсли;
	Если Не СтруктураВычета.Свойство(КлючОбщейСуммыВычета, ОбщаяСуммаВычета) Тогда
		ОбщаяСуммаВычета = 0;
	КонецЕсли;
	
	СуммаДохода = СуммаДохода + ДанныеФормы.СуммаДохода;
	
	СуммаВычета = 0;
	Если ВидВычета = "Норматив" Тогда
		СуммаВычета = Мин(СуммаДохода, ДанныеФормы.СуммаВычета);
	ИначеЕсли ВидВычета = "Расходы" Тогда
		СуммаВычета = ДанныеФормы.СуммаВычета;
	КонецЕсли;
	СуммаВычетаПоВидуИмущества = СуммаВычетаПоВидуИмущества + СуммаВычета;
	ОбщаяСуммаВычета = ОбщаяСуммаВычета + СуммаВычета;
	
	СтруктураВычета.Вставить(КлючДохода, СуммаДохода);
	СтруктураВычета.Вставить(КлючВычета, СуммаВычетаПоВидуИмущества);
	СтруктураВычета.Вставить(КлючОбщейСуммыВычета, ОбщаяСуммаВычета);
	Если ВычетСсылка = Перечисления.ВычетыФизическихЛиц.Профессиональный Тогда
		СтруктураВычета.Вставить("ИсточникДоходовПрофессиональногоВычета", КодыИсточниковДоходов.ДоходРФ);
	КонецЕсли;
	
	ИмущественныйВычет.СтруктураДанных = СтруктураВычета;
	
КонецПроцедуры

Функция ОписаниеПоказателейИмущественногоВычета(ВыбраннаяФорма3НДФЛ)
	
	Если ВыбраннаяФорма3НДФЛ = "ФормаОтчета2018кв1" Тогда
		Возврат ОписаниеПоказателейИмущественногоВычета2018();
	Иначе
		Возврат ОписаниеПоказателейИмущественногоВычета2019();
	КонецЕсли;
	
КонецФункции

Функция ОписаниеПоказателейИмущественногоВычета2018()
	
	ТаблицаПоказателей = НовыйОписаниеПоказателейИмущественногоВычета();
	
	ВычетИмущественный = Перечисления.ВычетыФизическихЛиц.Имущественный;
	ВычетПрофессиональный = Перечисления.ВычетыФизическихЛиц.Профессиональный;
	
	КлючОбщейСуммыИмущественный = "ОбщаяСуммаИмущественногоВычета";
	КлючОбщейСуммыПрофессиональный = "ОбщаяСуммаПрофессиональногоВычета";
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Норматив", "ДоходыПродажаЖилойНедвижимости",
		"ИмущественныйВычетПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Норматив", "ДоходыПродажаДолиЖилойНедвижимости",
		"ИмущественныйВычетПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Норматив", "ДоходыПродажаИнойНедвижимости",
		"ИмущественныйВычетПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Расходы", "ДоходыСРасходамиПродажаИнойНедвижимости",
		"РасходыПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Норматив", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Расходы", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Норматив", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Расходы", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетПрофессиональный, КлючОбщейСуммыПрофессиональный, ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ОписаниеПоказателейИмущественногоВычета2019()
	
	ТаблицаПоказателей = НовыйОписаниеПоказателейИмущественногоВычета();
	
	ВычетИмущественный = Перечисления.ВычетыФизическихЛиц.Имущественный;
	
	КлючОбщейСуммыИмущественный = "ОбщаяСуммаИмущественногоВычета";
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Норматив", "ДоходыПродажаЖилойНедвижимости",
		"ИмущественныйВычетПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Норматив", "ДоходыПродажаДолиЖилойНедвижимости",
		"ИмущественныйВычетПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Жилая", "Расходы", "ДоходыСРасходамиПродажаЖилойНедвижимости",
		"РасходыПродажаЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Доля", "Расходы", "ДоходыСРасходамиПродажаДолиЖилойНедвижимости",
		"РасходыПродажаДолиЖилойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Норматив", "ДоходыПродажаИнойНедвижимости",
		"ИмущественныйВычетПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочаяНедвижимость", "Расходы", "ДоходыСРасходамиПродажаИнойНедвижимости",
		"РасходыПродажаИнойНедвижимости", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Норматив", "ДоходыПродажаИногоИмущества",
		"ИмущественныйВычетПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("Автомобиль", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ПрочееИмущество", "Расходы", "ДоходыСРасходамиПродажаИногоИмущества",
		"РасходыПродажаИногоИмущества", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Норматив", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДолевоеСтроительство", "Расходы", "ДоходыДолевоеСтроительство",
		"РасходыДолевоеСтроительство", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Норматив", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	ДобавитьПоказательИмущественногоВычета("ДоляУставногоКапитала", "Расходы", "ДоходыПродажаДолиУставногоКапитала",
		"РасходыПродажаДолиУставногоКапитала", ВычетИмущественный, КлючОбщейСуммыИмущественный, ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция НовыйОписаниеПоказателейИмущественногоВычета()
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ВидИмущества",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ВидВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КлючДохода",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("КлючВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("ВидВычетаСсылка",   Новый ОписаниеТипов("ПеречислениеСсылка.ВычетыФизическихЛиц"));
	ТаблицаЗначений.Колонки.Добавить("КлючОбщейСуммыВычета",   ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура ДобавитьПоказательИмущественногоВычета(ВидИмущества, ВидВычета, КлючДохода, КлючВычета, ВычетСсылка, КлючОбщейСуммы, КлючиПоказателей)
	
	Если КлючиПоказателей.НайтиСтроки(Новый Структура("ВидИмущества, ВидВычета", ВидИмущества, ВидВычета)).Количество() > 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Дубль показателя ""%1"" имущественного вычета при продаже недвижимости'"), ВидИмущества);
	КонецЕсли;
	
	НоваяСтрока = КлючиПоказателей.Добавить();
	НоваяСтрока.ВидИмущества = ВидИмущества;
	НоваяСтрока.ВидВычета = ВидВычета;
	НоваяСтрока.КлючДохода = КлючДохода;
	НоваяСтрока.КлючВычета = КлючВычета;
	НоваяСтрока.ВидВычетаСсылка = ВычетСсылка;
	НоваяСтрока.КлючОбщейСуммыВычета = КлючОбщейСуммы;
	
КонецПроцедуры

#КонецОбласти

Функция КБКИсточникаДохода(ИсточникДохода, СписокКБК, НалогУдержан = Ложь)
	
	Если ИсточникДохода = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
		Возврат СписокКБК.ДоходыОтПредпринимательскойДеятельности;
	ИначеЕсли НалогУдержан Тогда
		Возврат СписокКБК.ДоходыПолученныеОтНалоговыхАгентов;
	Иначе
		Возврат СписокКБК.ДоходыПриПолученииКоторыхНеУдержанНалог;
	КонецЕсли;
	
КонецФункции

Функция СуммаНалогаИсчисленная(НалоговаяБаза, НалоговаяСтавка)
	
	Возврат Окр(НалоговаяБаза * НалоговаяСтавка / 100, 0);
	
КонецФункции

Процедура ДобавитьДанныеКадастровойИнформации(ТаблицаДанныхЗаполнения, ДанныеФормы)
	
	Если НЕ (ДанныеФормы.ДанныеОтчетности.Свойство("НедвижимостьПриобретенаПосле01012016") И
		ДанныеФормы.ДанныеОтчетности.НедвижимостьПриобретенаПосле01012016) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтчетности = ДанныеФормы.ДанныеОтчетности;
	
	КадастроваяИнформация = ТаблицаДанныхЗаполнения.Добавить();
	СтруктураКадастровойИнформации = Новый Структура;
	СтруктураКадастровойИнформации.Вставить("НомерКадастровыйОтчуждаемогоОбъектаНедвижимогоИмущества", ДанныеОтчетности.КадастровыйНомер);
	СтруктураКадастровойИнформации.Вставить("КадастроваяСтоимостьГодРегистрации", ДанныеОтчетности.КадастроваяСтоимость);
	СтруктураКадастровойИнформации.Вставить("ДоходПродажиЦенаДоговора", ДанныеОтчетности.СуммаПоДоговору);
	СтруктураКадастровойИнформации.Вставить("КадастроваяСтоимостьКоэффициент", ДанныеОтчетности.СкорректированнаяКадастроваяСтоимость);
	СтруктураКадастровойИнформации.Вставить("ДоходПродажиНалогооблагаемый", ДанныеФормы.СуммаДохода);
	
	КадастроваяИнформация.СтруктураДанных = СтруктураКадастровойИнформации;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеПоказателиПредпринимательскойДеятельности(ДанныеПомощникаЗаполнения, ТаблицаДанныхЗаполнения)
	
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяСуммаДохода = 0;
	ОбщаяСуммаРасходов = 0;
	ОбщаяСуммаРасходовВПределахНорматива = 0;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		ОбщаяСуммаДохода = ОбщаяСуммаДохода + СтруктураДанных.СуммаДоходаИП;
		ОбщаяСуммаРасходов = ОбщаяСуммаРасходов + СтруктураДанных.СуммаРасходовИП;
		ОбщаяСуммаРасходовВПределахНорматива = ОбщаяСуммаРасходовВПределахНорматива + СтруктураДанных.СуммаРасходовВПределахНормативаИП;
	КонецЦикла;
	ОбщаяСуммаВычета = Макс(ОбщаяСуммаРасходов, ОбщаяСуммаРасходовВПределахНорматива);
	
	// В декларации заполняется либо вычет по нормативу, либо вычет по подтвержденным расходам.
	// Очистим поля в зависимости от применяемого вычета.
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		Если ОбщаяСуммаРасходовВПределахНорматива > ОбщаяСуммаРасходов Тогда
			СтруктураДанных.СуммаРасходовИП = 0;
			СтруктураДанных.МатериальныеРасходыИП = 0;
			СтруктураДанных.АмортизацияИП = 0;
			СтруктураДанных.ЗарплатаИП = 0;
			СтруктураДанных.ЗарплатаПоТрудовымДоговорамИП = 0;
			СтруктураДанных.ПрочиеРасходыИП = 0;
		Иначе
			СтруктураДанных.СуммаРасходовВПределахНормативаИП = 0;
		КонецЕсли;
	КонецЦикла;
	
	ИндексИтоговойСтроки = -1;
	Для Каждого Строка Из НайденныеСтроки Цикл
		ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
	КонецЦикла;
	
	ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки];
	
	ИтоговаяСтрока.СтруктураДанных.Вставить("ОбщаяСуммаДоходаИП", ОбщаяСуммаДохода);
	ИтоговаяСтрока.СтруктураДанных.Вставить("ОбщаяСуммаВычетаИП", ОбщаяСуммаВычета);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаНачисленныхАвансовыхПлатежейИП", ДанныеПомощникаЗаполнения.АвансовыеПлатежиИП);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаУплаченныхАвансовыхПлатежейИП", ДанныеПомощникаЗаполнения.АвансовыеПлатежиИП);
	ИтоговаяСтрока.СтруктураДанных.Вставить("СуммаТорговогоСбора", ДанныеПомощникаЗаполнения.ТорговыйСбор);
	
	ИтоговаяСтрока.СуммаНалогаИсчисленная = Окр((ОбщаяСуммаДохода - ОбщаяСуммаВычета) * ИтоговаяСтрока.НалоговаяСтавка / 100, 0);
	ИтоговаяСтрока.СуммаНалогаУплаченнаяУдержанная = ДанныеПомощникаЗаполнения.АвансовыеПлатежиИП;
	
КонецПроцедуры

Процедура РассчитатьСуммуДоходовНеПодлежащуюНалогообложению(ТаблицаДанныхЗаполнения, ВидДохода, НалоговаяСтавка, НеоблагаемыеСуммыДоходов)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.Подарок);
	ОтборСтрок.Вставить("ВидДохода", ВидДохода);
	ОтборСтрок.Вставить("НалоговаяСтавка", НалоговаяСтавка);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетДоходовНеПодлежащихНалогообложению = НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению();
	
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		Если ЗначениеЗаполнено(СтруктураДанных.ИННИсточникаДоходаРФ) Тогда
			РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков =
				РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков + СтруктураДанных.СуммаДоходаРФ;
		КонецЕсли;
		
	КонецЦикла;
	
	РасчетДоходовНеПодлежащихНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению =
		Мин(РасчетДоходовНеПодлежащихНалогообложению.ОбщаяСтоимостьПодарков, НеоблагаемыеСуммыДоходов.Подарок);
	
	РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению =
		РасчетДоходовНеПодлежащихНалогообложению.СуммаДоходовНеПодлежащаяНалогообложению
		+ РасчетДоходовНеПодлежащихНалогообложению.СтоимостьПодарковНеПодлежащаяНалогообложению;
	
	НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
	НоваяСтрока.ВидДохода = ВидДохода;
	НоваяСтрока.НалоговаяСтавка = НалоговаяСтавка;
	НоваяСтрока.СтруктураДанных = РасчетДоходовНеПодлежащихНалогообложению;
	
КонецПроцедуры

Функция НоваяСтруктураРасчетаДоходовНеПодлежащихНалогообложению()
	
	РасчетДоходовНеПодлежащихНалогообложению = Новый Структура;
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("ОбщаяСтоимостьПодарков", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СтоимостьПодарковНеПодлежащаяНалогообложению", 0);
	РасчетДоходовНеПодлежащихНалогообложению.Вставить("СуммаДоходовНеПодлежащаяНалогообложению", 0);
	
	Возврат РасчетДоходовНеПодлежащихНалогообложению;
	
КонецФункции

Функция ТаблицаСведенийОСуммахНалога(ТаблицаДанныхЗаполнения, ТаблицаНалоговойБазы, ПризнакиУплатыВозврата, СписокКБК, ОКТМОналогоплательщика)
	
	ТаблицаРасчетов = Новый ТаблицаЗначений;
	ТаблицаРасчетов.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ТаблицаРасчетов.Колонки.Добавить("ОКТМО", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТаблицаРасчетов.Колонки.Добавить("СуммаНалога", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	// Распределим результаты расчета Раздела 2 по доходам и вычетам.
	КолонкиПоиска = "ВидДохода, НалоговаяСтавка";
	ТаблицаДанныхЗаполнения.Индексы.Добавить(КолонкиПоиска);
	ОтборДанныхЗаполнения = Новый Структура(КолонкиПоиска);
	Для Каждого НалоговаяБаза Из ТаблицаНалоговойБазы Цикл
		
		СуммаНалогаПодлежащаяУплате   = НалоговаяБаза.СуммаНалогаПодлежащаяУплате;
		СуммаНалогаПодлежащаяВозврату = НалоговаяБаза.СуммаНалогаПодлежащаяВозврату;
		
		ПоследняяСтрока = Неопределено;
		
		ЗаполнитьЗначенияСвойств(ОтборДанныхЗаполнения, НалоговаяБаза);
		Для Каждого ДанныеЗаполнения Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхЗаполнения) Цикл
			
			Если СуммаНалогаПодлежащаяУплате > 0 Тогда
				СуммаНалога = Мин(СуммаНалогаПодлежащаяУплате, Окр(ДанныеЗаполнения.СуммаНалогаИсчисленная - ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная, 0));
				Если СуммаНалога <> 0 Тогда
					СтрокаРасчета = ТаблицаРасчетов.Добавить();
					СтрокаРасчета.КБК = КБКИсточникаДохода(ДанныеЗаполнения.Вид, СписокКБК, Ложь);
					СтрокаРасчета.ОКТМО = ОКТМОналогоплательщика; // доплата налога всегда по месту регистрации налогоплательщика
					СтрокаРасчета.СуммаНалога = СуммаНалога;
					СуммаНалогаПодлежащаяУплате = СуммаНалогаПодлежащаяУплате - СуммаНалога;
					ДанныеЗаполнения.СуммаНалогаИсчисленная = ДанныеЗаполнения.СуммаНалогаИсчисленная - СуммаНалога;
				КонецЕсли;
			КонецЕсли;
			
			Если СуммаНалогаПодлежащаяВозврату > 0 Тогда
				СуммаНалога = Мин(СуммаНалогаПодлежащаяВозврату, Окр(ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная, 0));
				Если СуммаНалога <> 0 Тогда
					СтрокаРасчета = ТаблицаРасчетов.Добавить();
					СтрокаРасчета.КБК = КБКИсточникаДохода(ДанныеЗаполнения.Вид, СписокКБК, Истина);
					СтрокаРасчета.ОКТМО = ДанныеЗаполнения.ОКТМО;
					СтрокаРасчета.СуммаНалога = -СуммаНалога;
					СуммаНалогаПодлежащаяВозврату = СуммаНалогаПодлежащаяВозврату - СуммаНалога;
					ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная = ДанныеЗаполнения.СуммаНалогаУплаченнаяУдержанная - СуммаНалога;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Убеждаемся, что распределен весь результат расчетов.
		Если ТаблицаРасчетов.Количество() > 0 Тогда
			ПоследняяСтрока = ТаблицаРасчетов[ТаблицаРасчетов.Количество() - 1];
			Если СуммаНалогаПодлежащаяУплате <> 0 Тогда
				ПоследняяСтрока.СуммаНалога = ПоследняяСтрока.СуммаНалога + СуммаНалогаПодлежащаяУплате;
			КонецЕсли;
			Если СуммаНалогаПодлежащаяВозврату <> 0 Тогда
				ПоследняяСтрока.СуммаНалога = ПоследняяСтрока.СуммаНалога - СуммаНалогаПодлежащаяВозврату;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Свернем таблицу доходов по КБК и ОКТМО, чтобы получить итоги расчетов.
	КолонкиГруппировок = "КБК, ОКТМО";
	ТаблицаРасчетов.Свернуть(КолонкиГруппировок, "СуммаНалога");
	ТаблицаРасчетов.Сортировать(КолонкиГруппировок);
	
	// Если нет налога к уплате или возврату, то нужно выводить пустой раздел 1.
	Если ТаблицаРасчетов.Количество() = 0 Тогда
		СтрокаРасчета = ТаблицаРасчетов.Добавить();
		СтрокаРасчета.КБК = СписокКБК.ДоходыОтПредпринимательскойДеятельности;
		СтрокаРасчета.ОКТМО = ОКТМОналогоплательщика;
	КонецЕсли;
	
	ТаблицаСведенийОСуммахНалога = ТаблицаДанныхЗаполнения.СкопироватьКолонки();
	Для Каждого РезультатРасчета Из ТаблицаРасчетов Цикл
		НоваяСтрока = ТаблицаСведенийОСуммахНалога.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатРасчета);
		НоваяСтрока.СтруктураДанных = ДанныеЗаполнения_СведенияОСуммахНалога(РезультатРасчета, ПризнакиУплатыВозврата);
	КонецЦикла;
	
	Возврат ТаблицаСведенийОСуммахНалога;
	
КонецФункции

Функция НоваяСтруктураРасчетаНалоговойБазы(НалоговаяСтавка, ВидДохода)
	
	РасчетНалоговойБазы = Новый Структура;
	РасчетНалоговойБазы.Вставить("НалоговаяСтавка", НалоговаяСтавка);
	РасчетНалоговойБазы.Вставить("ВидДохода", ВидДохода);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходов", 0);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовНеПодлежащаяНалогообложению", 0);
	РасчетНалоговойБазы.Вставить("СуммаРасходов", 0);
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовКИК", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалоговыхВычетов", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаУдержанная", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаУдержаннаяСМатериальнойВыгоды", 0);
	РасчетНалоговойБазы.Вставить("СуммаТорговогоСбора", 0);
	РасчетНалоговойБазы.Вставить("СуммаУплаченныхАвансовыхПлатежей", 0);
	РасчетНалоговойБазы.Вставить("СуммаФиксированныхАвансовыхПлатежей", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИностранногоГосударства", 0);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПСН", 0);
	
	Возврат РасчетНалоговойБазы;
	
КонецФункции

Функция НоваяСтруктураРасчетаСтандартныхИСоциальныхВычетов()
	
	РасчетСоциальныхВычетов = Новый Структура;
	РасчетСоциальныхВычетов.Вставить("СтраховыеВзносыНаПенсиюВсего", 0);
	РасчетСоциальныхВычетов.Вставить("СтраховыеВзносыНаПенсиюКВычету", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаВзносовПенсионныйФонд", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСоциальныхВычетовСОграничением", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСтандартныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("СоциальныйВычетПожертвования", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСоциальныхВычетовБезОграничения", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяЗаявляемаяСуммаСоциальныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("ОбщаяСуммаСтандартныхСоциальныхВычетов", 0);
	РасчетСоциальныхВычетов.Вставить("ИнвестиционныйВычет", 0);
	РасчетСоциальныхВычетов.Вставить("ИнвестиционныйВычетКВосстановлению", 0);
	
	Возврат РасчетСоциальныхВычетов;
	
КонецФункции

Процедура РассчитатьИтогиРасчетаНалоговойБазы(РасчетНалоговойБазы, ТаблицаДанныхЗаполнения, ПределыВычетов)
	
	// Расчет налоговой базы
	
	// Расчет суммы доходов, подлежащей налогообложению.
	ОбщаяСуммаДоходовПодлежащаяНалогообложению = Макс(0,
		РасчетНалоговойБазы.ОбщаяСуммаДоходов - РасчетНалоговойБазы.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению);
	
	// Расчет стандартных и социальных вычетов на листах Е1 и Е2.
	// Расчет вычета на пожертвования зависит от суммы доходов, подлежащей налогообложению.
	РассчитатьИтоговыеПоказателиСтандартныхИСоциальныхВычетов(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, ОбщаяСуммаДоходовПодлежащаяНалогообложению, ПределыВычетов);
	
	// В совокупности не может превышать значение показателя строки 030.
	СуммаРазницы = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетНалоговойБазы.СуммаРасходов - ОбщаяСуммаДоходовПодлежащаяНалогообложению;
	Если СуммаРазницы > 0 Тогда
		
		// Сначала уменьшаем сумму вычета по листам З и И - убытки могут быть перенесены на следующие годы.
		РасчетНалоговойБазы.СуммаРасходов = Макс(0, РасчетНалоговойБазы.СуммаРасходов - СуммаРазницы);
		СуммаРазницы = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетНалоговойБазы.СуммаРасходов - ОбщаяСуммаДоходовПодлежащаяНалогообложению;
		
		Если СуммаРазницы > 0 Тогда
			// Если вычетов все равно больше, уменьшаем сумму вычетов по строке 040.
			РасчетНалоговойБазы.СуммаНалоговыхВычетов = Макс(0, РасчетНалоговойБазы.СуммаНалоговыхВычетов - СуммаРазницы);
		КонецЕсли;
		
	КонецЕсли;
	
	НалоговаяБаза = Макс(0,
		ОбщаяСуммаДоходовПодлежащаяНалогообложению
		+ РасчетНалоговойБазы.ОбщаяСуммаДоходовКИК
		- РасчетНалоговойБазы.СуммаНалоговыхВычетов
		- РасчетНалоговойБазы.СуммаРасходов);
	
	// Расчет имущественного вычета на приобретение недвижимости.
	РассчитатьПоказателиВычетаНаПриобретениеНедвижимости(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, НалоговаяБаза, ПределыВычетов);
	
	// Расчет суммы налога, подлежащей уплате (доплате) / возврату.
	
	СуммаНалогаИсчисленная = Окр(НалоговаяБаза * РасчетНалоговойБазы.НалоговаяСтавка / 100, 0);
	
	СуммаНалогаИсчисленнаяКУплате = Макс(0,
		СуммаНалогаИсчисленная
		- РасчетНалоговойБазы.СуммаНалогаУдержанная
		- РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды
		- РасчетНалоговойБазы.СуммаТорговогоСбора
		- РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей
		- РасчетНалоговойБазы.СуммаФиксированныхАвансовыхПлатежей
		- РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства);
	
	СуммаНалогаПодлежащаяУплате = Макс(0, СуммаНалогаИсчисленнаяКУплате - РасчетНалоговойБазы.СуммаНалогаПСН);
	
	МаксСуммаНалогаПодлежащаяВозврату = РасчетНалоговойБазы.СуммаНалогаУдержанная + РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды + РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей;
	РасчетнаяСуммаНалогаПодлежащаяВозврату =
		РасчетНалоговойБазы.СуммаНалогаУдержанная
		+ РасчетНалоговойБазы.СуммаНалогаУдержаннаяСМатериальнойВыгоды
		+ РасчетНалоговойБазы.СуммаТорговогоСбора
		+ РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей
		+ РасчетНалоговойБазы.СуммаФиксированныхАвансовыхПлатежей
		+ РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства
		- СуммаНалогаИсчисленная;
	
	СуммаНалогаПодлежащаяВозврату = Макс(0, Мин(МаксСуммаНалогаПодлежащаяВозврату, РасчетнаяСуммаНалогаПодлежащаяВозврату));
	
	РасчетНалоговойБазы.Вставить("ОбщаяСуммаДоходовПодлежащаяНалогообложению", ОбщаяСуммаДоходовПодлежащаяНалогообложению);
	РасчетНалоговойБазы.Вставить("НалоговаяБаза", НалоговаяБаза);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИсчисленная", СуммаНалогаИсчисленная);
	РасчетНалоговойБазы.Вставить("СуммаНалогаИсчисленнаяКУплате", СуммаНалогаИсчисленнаяКУплате);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПодлежащаяУплате", СуммаНалогаПодлежащаяУплате);
	РасчетНалоговойБазы.Вставить("СуммаНалогаПодлежащаяВозврату", СуммаНалогаПодлежащаяВозврату);
	
КонецПроцедуры

Процедура РассчитатьПоказателиВычетаНаПриобретениеНедвижимости(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, НалоговаяБаза, ПределыВычетов)
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Вид", Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости);
	ОтборСтрок.Вставить("ВидДохода", РасчетНалоговойБазы.ВидДохода);
	ОтборСтрок.Вставить("НалоговаяСтавка", РасчетНалоговойБазы.НалоговаяСтавка);
	
	НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборСтрок);
	
	ОбщаяСуммаСтоимость = 0;
	ОбщаяСуммаПроценты = 0;
	
	ПределВычетаНаПриобретениеНедвижимостиСтоимость = ПределыВычетов.НаПриобретениеНедвижимостиСтоимость;
	
	ЕстьВычетПоПроцентам = Ложь;
	
	СтрокаСНедвижимостьюДо2014Года = Неопределено;
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		Если СтрокаДанныхЗаполнения.СтруктураДанных.ОбъектПриобретенДо2014Года Тогда
			СтрокаСНедвижимостьюДо2014Года = СтрокаДанныхЗаполнения;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДанныхЗаполнения.СтруктураДанных;
		
		// Если недвижимость приобретена до 2014 года, то вычет предоставляется только по одному объекту недвижимости.
		// Используем первую найденную строку с такой недвижимостью.
		Если СтрокаСНедвижимостьюДо2014Года <> Неопределено И СтрокаДанныхЗаполнения <> СтрокаСНедвижимостьюДо2014Года Тогда
			СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = 0;
			СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 0;
			Продолжить;
		КонецЕсли;
		
		// Если объект приобретен до 2014 года в долевую собственность, то предел рассчитывается пропорционально доле.
		Если СтрокаДанныхЗаполнения = СтрокаСНедвижимостьюДо2014Года Тогда
			ПределВычетаНаПриобретениеНедвижимостиСтоимость =
				Окр(ПределВычетаНаПриобретениеНедвижимостиСтоимость
				* СтруктураДанных.ДоляВПравеСобственностиЧислитель
				/ СтруктураДанных.ДоляВПравеСобственностиЗнаменатель, 2);
		КонецЕсли;
		
		// Если объектов несколько, то общая сумма строк 120 листа Д1 не должна превышать предел вычета.
		// Поэтому рассчитываем значение строки 120 листа Д1 с учетом предела.
		СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = Мин(СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости,
			ПределВычетаНаПриобретениеНедвижимостиСтоимость - ОбщаяСуммаСтоимость);
		
		// Проверим, чтобы значение строки не стало отрицательным.
		СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости = Макс(0,
			СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости);
		
		ОбщаяСуммаСтоимость = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость,
			ОбщаяСуммаСтоимость + СтруктураДанных.СуммаРасходовНаПриобретениеНедвижимости);
		
		// Вычет по процентам предоставляется только по одному объекту недвижимости.
		Если СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость > 0
			И НЕ ЕстьВычетПоПроцентам Тогда
			
			ЕстьВычетПоПроцентам = Истина;
			
			// По кредитам, оформленным после 2014 года, максимальная сумма вычета ограничена пределом вычета.
			Если Не СтруктураДанных.КредитОформленДо2014Года Тогда
				СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 
					Мин(ПределыВычетов.НаПриобретениеНедвижимостиПроценты, СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость);
			КонецЕсли;
			
			ОбщаяСуммаПроценты = СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость;
			
		ИначеЕсли СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость > 0
			И ЕстьВычетПоПроцентам Тогда
			
			СтруктураДанных.СуммаПроцентовПоКредитуНаНедвижимость = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Рассчитаем промежуточные итоги листа Д1.
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ИндексИтоговойСтроки = -1;
		Для Каждого Строка Из НайденныеСтроки Цикл
			ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
		КонецЦикла;
		
		ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки];
		СтруктураДанных = ИтоговаяСтрока.СтруктураДанных;
		
		СтруктураДанных.Вставить("РазмерНалоговойБазыДляРасчетаИмущественногоВычета", НалоговаяБаза);
		
		// Вычет по стоимости, принятый к учету в предыдущие годы. Не может превышать предела.
		ВычетПрошлыхЛет = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость, СтруктураДанных.ВычетПрошлыхЛетСтоимость);
		
		МаксимальныйВычет = Мин(ПределВычетаНаПриобретениеНедвижимостиСтоимость, ОбщаяСуммаСтоимость);
		ДоступныйВычет = Макс(0, МаксимальныйВычет - ВычетПрошлыхЛет);
		СтоимостьКВычету = Мин(ДоступныйВычет, НалоговаяБаза);
		
		// Остаток рассчитывается от общей стоимости, а не от предела вычета.
		ОстатокСтоимостиНаКонец = ОбщаяСуммаСтоимость - ВычетПрошлыхЛет - СтоимостьКВычету;
		
		СтруктураДанных.Вставить("СуммаВычетовЗаПредыдущиеГодыПоРасходамНаПриобретениеНедвижимости", ВычетПрошлыхЛет);
		СтруктураДанных.Вставить("СуммаРасходовНаПриобретениеНедвижимостиКВычету", СтоимостьКВычету);
		СтруктураДанных.Вставить("ОстатокНаКонецРасходыНаПриобретениеНедвижимости", ОстатокСтоимостиНаКонец);
		
		ДоступныйВычет = Макс(0, ОбщаяСуммаПроценты - СтруктураДанных.ВычетПрошлыхЛетПроценты);
		ПроцентыКВычету = Мин(НалоговаяБаза - СтоимостьКВычету, ДоступныйВычет);
		ОстатокПроцентыНаКонец = Макс(0, ОбщаяСуммаПроценты - СтруктураДанных.ВычетПрошлыхЛетПроценты - ПроцентыКВычету);
		
		// Сумма процентов к вычету с учетом ограничения, но без учета размера налоговой базы.
		СтруктураДанных.Вставить("СуммаВычетовЗаПредыдущиеГодыПроцентыПоКредиту", СтруктураДанных.ВычетПрошлыхЛетПроценты);
		СтруктураДанных.Вставить("СуммаПроцентовПоКредитуНаНедвижимостьКВычету",  ПроцентыКВычету);
		СтруктураДанных.Вставить("ОстатокНаКонецПроцентыПоКредитуНаНедвижимость", ОстатокПроцентыНаКонец);
		
		// Скорректируем налоговую базу и налоговые вычеты.
		НалоговаяБаза = НалоговаяБаза - СтоимостьКВычету - ПроцентыКВычету;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + СтоимостьКВычету + ПроцентыКВычету;
		
	КонецЕсли;
	
	// Удалим служебные ключи.
	Для Каждого СтрокаДанныхЗаполнения Из НайденныеСтроки Цикл
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ОбъектПриобретенДо2014Года");
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("КредитОформленДо2014Года");
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ВычетПрошлыхЛетСтоимость");
		СтрокаДанныхЗаполнения.СтруктураДанных.Удалить("ВычетПрошлыхЛетПроценты");
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеПоказателиСтандартныхИСоциальныхВычетов(ТаблицаДанныхЗаполнения, РасчетНалоговойБазы, ОблагаемыйДоход, ПределыВычетов)
	
	МассивВычетов = Новый Массив;
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.Социальный);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни);
	МассивВычетов.Добавить(Перечисления.ВычетыФизическихЛиц.Инвестиционный);
	
	РасчетВычетов = НоваяСтруктураРасчетаСтандартныхИСоциальныхВычетов();
	
	ОтборДанныхВычета = Новый Структура("Вид, ВидДохода, НалоговаяСтавка");
	ОтборДанныхВычета.ВидДохода = РасчетНалоговойБазы.ВидДохода;
	ОтборДанныхВычета.НалоговаяСтавка = РасчетНалоговойБазы.НалоговаяСтавка;
	
	Для Каждого Вычет Из МассивВычетов Цикл
		ОтборДанныхВычета.Вид = Вычет;
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхВычета) Цикл
			ДобавитьРасчетСтандартныхИСоциальныхВычетов(СтрокаТаблицы.Вид, СтрокаТаблицы.СтруктураДанных, РасчетВычетов);
		КонецЦикла;
	КонецЦикла;
	
	// Социальный вычет на пожертвования не может превышать 25% от общей суммы доходов, подлежащей налогообложению.
	РасчетВычетов.СоциальныйВычетПожертвования = Мин(
		РасчетВычетов.СоциальныйВычетПожертвования,
		Окр(ОблагаемыйДоход * ПределыВычетов.ПожертвованияПроцентДохода, 2));
	
	РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения =
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения + РасчетВычетов.СоциальныйВычетПожертвования;
	
	// Связанные показатели.
	РасчетВычетов.ОбщаяСуммаВзносовПенсионныйФонд = РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни;
	
	// Сумма отдельных социальных вычетов не должна превышать установленного предела.
	РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
		Мин(РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением, ПределыВычетов.СоциальныеВычеты);
	
	// Итоговые показатели групп.
	РасчетВычетов.ОбщаяЗаявляемаяСуммаСоциальныхВычетов =
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением + РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения;
	
	РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов =
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
		+ РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
		+ РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения;
	
	// Увеличиваем общую сумму налоговых вычетов.
	РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов;
	
	// Показатели расчета, которые переносятся на лист Е1 с последней страницы листа Е2
	ИтоговыеПоказателиЛистаЕ2 = Новый Массив;
	ИтоговыеПоказателиЛистаЕ2.Добавить("СтраховыеВзносыНаПенсиюВсего");
	ИтоговыеПоказателиЛистаЕ2.Добавить("СтраховыеВзносыНаПенсиюКВычету");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ОбщаяСуммаВзносовПенсионныйФонд");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ИнвестиционныйВычет");
	ИтоговыеПоказателиЛистаЕ2.Добавить("ИнвестиционныйВычетКВосстановлению");
	ЗаполнитьИтовыеПоказателиЛистаЕ2 = Ложь;
	
	// Добавим итоговые показатели вычетов в таблицу данных, чтобы заполнить лист декларации.
	Если РасчетВычетов.ОбщаяСуммаСтандартныхСоциальныхВычетов <> 0 Тогда
		НоваяСтрока = ТаблицаДанныхЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РасчетНалоговойБазы, "ВидДохода, НалоговаяСтавка");
		СтруктураДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасчетВычетов);
		Для Каждого ИмяПоказателяЛистаЕ2 Из ИтоговыеПоказателиЛистаЕ2 Цикл
			СтруктураДанных.Удалить(ИмяПоказателяЛистаЕ2);
			ЗаполнитьИтовыеПоказателиЛистаЕ2 = ЗаполнитьИтовыеПоказателиЛистаЕ2
				Или РасчетВычетов[ИмяПоказателяЛистаЕ2] <> 0;
		КонецЦикла;
		НоваяСтрока.СтруктураДанных = СтруктураДанных;
	ИначеЕсли РасчетВычетов.ИнвестиционныйВычет <> 0
		Или РасчетВычетов.ИнвестиционныйВычетКВосстановлению <> 0 Тогда
		ЗаполнитьИтовыеПоказателиЛистаЕ2 = Истина;
	КонецЕсли;
	
	Если ЗаполнитьИтовыеПоказателиЛистаЕ2 Тогда
		
		ОтборДанныхВычета.Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни;
		НайденныеСтроки = ТаблицаДанныхЗаполнения.НайтиСтроки(ОтборДанныхВычета);
		
		ИндексИтоговойСтроки = -1;
		Для Каждого Строка Из НайденныеСтроки Цикл
			ИндексИтоговойСтроки = Макс(ТаблицаДанныхЗаполнения.Индекс(Строка), ИндексИтоговойСтроки);
		КонецЦикла;
		
		Если ИндексИтоговойСтроки >= 0 Тогда
			ИтоговаяСтрока = ТаблицаДанныхЗаполнения[ИндексИтоговойСтроки]
		Иначе
			ИтоговаяСтрока = ТаблицаДанныхЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(ИтоговаяСтрока, РасчетНалоговойБазы, "ВидДохода, НалоговаяСтавка");
		КонецЕсли;
		
		Для Каждого ИмяПоказателяЛистаЕ2 Из ИтоговыеПоказателиЛистаЕ2 Цикл
			ИтоговаяСтрока.СтруктураДанных.Вставить(ИмяПоказателяЛистаЕ2, РасчетВычетов[ИмяПоказателяЛистаЕ2]);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасчетСтандартныхИСоциальныхВычетов(Вид, ДанныеВычета, РасчетВычетов)
	
	Если Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
		
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов =
			РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
			+ ДанныеВычета.СтандартныйВычетПо218_1_1
			+ ДанныеВычета.СтандартныйВычетПо218_1_2;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
		
		РасчетВычетов.ОбщаяСуммаСтандартныхВычетов =
			РасчетВычетов.ОбщаяСуммаСтандартныхВычетов
			+ ДанныеВычета.СтандартныйВычетНаДетей
			+ ДанныеВычета.СтандартныйВычетНаДетейЕдинственномуРодителю
			+ ДанныеВычета.СтандартныйВычетНаДетейИнвалидов
			+ ДанныеВычета.СтандартныйВычетНаДетейИнвалидовЕдинственномуРодителю;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
		
		РасчетВычетов.СоциальныйВычетПожертвования =
			РасчетВычетов.СоциальныйВычетПожертвования + ДанныеВычета.СоциальныйВычетПожертвования;
		
		РасчетВычетов.СтраховыеВзносыНаПенсиюВсего =
			РасчетВычетов.СтраховыеВзносыНаПенсиюВсего + ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
		
		РасчетВычетов.СтраховыеВзносыНаПенсиюКВычету =
			РасчетВычетов.СтраховыеВзносыНаПенсиюКВычету + ДанныеВычета.СтраховыеВзносыНаПенсиюКВычету;
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения = 
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовБезОграничения
			+ ДанныеВычета.СоциальныйВычетОбучениеДетей
			+ ДанныеВычета.СоциальныйВычетДорогостоящееЛечение;
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
			+ ДанныеВычета.СоциальныйВычетОбучениеСвое
			+ ДанныеВычета.СоциальныйВычетЛечениеМедикаменты
			+ ДанныеВычета.СоциальныйВычетМедицинскоеСтрахование
			+ ДанныеВычета.РасходыНаПрохождениеНезависимойОценкиКвалификации
			+ ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
		
		РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни =
			РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни
			+ ДанныеВычета.СтраховыеВзносыНаПенсиюВсего;
		
		// Удалим временные ключи.
		ДанныеВычета.Удалить("СтраховыеВзносыНаПенсиюВсего");
		ДанныеВычета.Удалить("СтраховыеВзносыНаПенсиюКВычету");
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
		
		РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением =
			РасчетВычетов.ОбщаяСуммаСоциальныхВычетовСОграничением
			+ ДанныеВычета.СуммаВзносовПенсионныйФондКВычету;
		
		РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни =
			РасчетВычетов.ОбщаяСуммаПенсионныеВзносыИСтрахованиеЖизни
			+ ДанныеВычета.СуммаВзносовПенсионныйФондКВычету;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		
		РасчетВычетов.ИнвестиционныйВычет =
			РасчетВычетов.ИнвестиционныйВычет + ДанныеВычета.ИнвестиционныйВычет;
		
		РасчетВычетов.ИнвестиционныйВычетКВосстановлению =
			РасчетВычетов.ИнвестиционныйВычетКВосстановлению + ДанныеВычета.ИнвестиционныйВычетКВосстановлению;
		
		// Удалим временные ключи.
		ДанныеВычета.Удалить("ИнвестиционныйВычет");
		ДанныеВычета.Удалить("ИнвестиционныйВычетКВосстановлению");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРасчетНалоговойБазыПоВидуДохода(Вид, ДоходВычет, РасчетНалоговойБазы)
	
	Если Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность
		И ДоходВычет.Свойство("ОбщаяСуммаДоходаИП") Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.ОбщаяСуммаДоходаИП;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаВычетаИП;
		РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей = РасчетНалоговойБазы.СуммаУплаченныхАвансовыхПлатежей + ДоходВычет.СуммаУплаченныхАвансовыхПлатежейИП;
		
		РасчетНалоговойБазы.СуммаТорговогоСбора = РасчетНалоговойБазы.СуммаТорговогоСбора + ДоходВычет.СуммаТорговогоСбора;
		ДоходВычет.Удалить("СуммаТорговогоСбора");
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
		
		КолонкиДоходов = "ЦенныеБумагиИтогоСуммаДоходов,ЦенныеБумагиСуммаДохода";
		Для Каждого КолонкаДохода Из Новый Структура(КолонкиДоходов) Цикл
			Если ДоходВычет.Свойство(КолонкаДохода.Ключ) Тогда
				РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет[КолонкаДохода.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		КолонкиРасходов = "ЦенныеБумагиИтогоСуммаРасходовКВычету,ЦенныеБумагиСуммаРасходовУменьшающаяДоходы,ЦенныеБумагиИтогоСуммаУбытка";
		Для Каждого КолонкаРасхода Из Новый Структура(КолонкиРасходов) Цикл
			Если ДоходВычет.Свойство(КолонкаРасхода.Ключ) Тогда
				РасчетНалоговойБазы.СуммаРасходов = РасчетНалоговойБазы.СуммаРасходов + ДоходВычет[КолонкаРасхода.Ключ];
			КонецЕсли;
		КонецЦикла;
		
		Если ДоходВычет.Свойство("СуммаНалогаУдержаннаяРФ") Тогда
			РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаДоходаРФ;
		РасчетНалоговойБазы.СуммаНалогаУдержанная = РасчетНалоговойБазы.СуммаНалогаУдержанная + ДоходВычет.СуммаНалогаУдержаннаяРФ;
		
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.СуммаРубДоходаЗаПределамиРФ;
		
		РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства =
			РасчетНалоговойБазы.СуммаНалогаИностранногоГосударства + Окр(ДоходВычет.СуммаПодлежащаяЗачетуВРФ, 0);
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходов = РасчетНалоговойБазы.ОбщаяСуммаДоходов + ДоходВычет.ИнвестиционныйВычетКВосстановлению;
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ИнвестиционныйВычет;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Имущественный Тогда
		
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаИмущественногоВычета;
		
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Профессиональный Тогда
		
		РасчетНалоговойБазы.СуммаНалоговыхВычетов = РасчетНалоговойБазы.СуммаНалоговыхВычетов + ДоходВычет.ОбщаяСуммаПрофессиональногоВычета;
		
	ИначеЕсли ДоходВычет.Свойство("СуммаДоходовНеПодлежащаяНалогообложению") Тогда
		
		РасчетНалоговойБазы.ОбщаяСуммаДоходовНеПодлежащаяНалогообложению = ДоходВычет.СуммаДоходовНеПодлежащаяНалогообложению;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли