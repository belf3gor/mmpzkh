
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.Период) Тогда
		Объект.Период = НачалоГода(Параметры.Период);
	Иначе
		ПрошлыйГод = НачалоГода(ДобавитьМесяц(ОбщегоНазначения.ТекущаяДатаПользователя(), -12));
		Объект.Период = Макс(ПрошлыйГод, Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ВыбраннаяФорма) Тогда
		Декларация3НДФЛВыбраннаяФорма = Параметры.ВыбраннаяФорма;
	Иначе
		Декларация3НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет3НДФЛ.ФормаПоУмолчанию(Объект.Период);
	КонецЕсли;
	Декларация4НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет4НДФЛ.ФормаПоУмолчанию(ПериодДекларации4НДФЛ(Объект.Период));
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	Иначе
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОсновнаяОрганизация) Тогда
			Объект.Организация = ОсновнаяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.КонтекстныйВызов Тогда
		Если Объект.Период < Обработки.ПомощникЗаполнения3НДФЛ.ДатаНачалаПрименения() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// Помощник открыт из списка задач или рег. отчета
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(Объект.Период), КонецГода(Объект.Период), Истина);
		Заголовок = СтрШаблон(НСтр("ru = 'Помощник заполнения 3-НДФЛ за %1'"), ПредставлениеПериода);
		Элементы.Период.Видимость = Ложь;
		// Скрываем поле ввода, оставляем гиперссылку
		Элементы.Организация.Видимость = Ложь;
	Иначе
		Заголовок = НСтр("ru = 'Помощник заполнения 3-НДФЛ'");
		Элементы.Период.Видимость = Истина;
		// Скрываем гиперссылку в зависимости от ФО
		Элементы.ОрганизацияПредставление.Видимость = Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	КонецЕсли;
	
	ОрганизацияПредставление = Объект.Организация;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПравилаСрокиПредставленияОтчетаУплатыНалога(Объект.Организация, Объект.Период));
	
	СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация);
	
	СпособСдачиОтчетности = "Интернет";
	
	УстановитьФункциональныеОпцииФормы();
	
	НайтиИПрочитатьДекларации();
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		Если Параметры.СоздатьПриОткрытии Тогда
			// Помощник открыт командой "Создать"
			УстановитьНомерКорректировкиНовойДекларации(ЭтотОбъект);
			ИзменитьЭтапНаСервере("ДоходыВычеты");
		ИначеЕсли Параметры.ДействиеКалендаряБухгалтера = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога Тогда
			// Помощник открыт командой "Оплатить"
			СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
			СостояниеДекларации4НДФЛ = СостояниеДекларации(Декларация4НДФЛСостояниеОтправки);
			Если (СостояниеДекларации3НДФЛ.Сдано И (Не Объект.СформироватьДекларацию4НДФЛ Или СостояниеДекларации4НДФЛ.Сдано)) Тогда
				ИзменитьЭтапНаСервере("ОплатаНалога");
			Иначе
				ИзменитьЭтапНаСервере("Декларация");
			КонецЕсли;
		Иначе
			ИзменитьЭтапНаСервере("Декларация");
		КонецЕсли;
	Иначе
		ИзменитьЭтапНаСервере("ДоходыВычеты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Декларация3НДФЛ) И ПлательщикНДФЛ Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьДоходыВычетыПоДаннымУчета", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Модифицированность ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,
		,
		КодВозвратаДиалога.Да);
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		ИзменитьЭтап(Параметр, Истина); // Навигация возможна только в обратном направлении
		
	ИначеЕсли (ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Или ИмяСобытия = "ИзменениеВыписки")
		И НавигацияПараметрФормы = "ОплатаНалога" Тогда
		
		НайтиИОтобразитьСвязанныеПлатежи();
		УправлениеЗакладкойОплата(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация);
		УправлениеЗакладкойДоходыВычеты(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ЗакрытьПомощникЗаполнения3НДФЛ"
		И Декларация3НДФЛ = Параметр Тогда
		
		// Пользователь сохранил измененную декларацию - закрываем помощник.
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "Запись_РегламентированныйОтчет" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Ссылка") Тогда
		Если Параметр.Ссылка = Декларация3НДФЛ Тогда
			Декларация3НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация3НДФЛ);
			УправлениеФормой(ЭтотОбъект)
		ИначеЕсли Параметр.Ссылка = Декларация4НДФЛ Тогда
			Декларация4НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация4НДФЛ);
			УправлениеФормой(ЭтотОбъект)
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		СтандартнаяОбработка = Ложь;
		
		// Для корректной работы навигации необходимо передавать ключевые параметры формы.
		СтруктураНавигации = СтруктураНавигации();
		СтруктураШага = СтруктураНавигации[НавигационнаяСсылкаФорматированнойСтроки];
		Если СтруктураШага <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураШага.СтруктураПараметровФормы, Параметры);
		КонецЕсли;
		
		НавигацияПомощниковКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтруктураНавигации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДекларацию4НДФЛПриИзменении(Элемент)
	
	Если Не Объект.СформироватьДекларацию4НДФЛ Тогда
		Объект.ПредполагаемаяСуммаДоходов = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСдачиОтчетностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаДекларация3НДФЛНажатие(Элемент)
	ОткрытьДекларацию3НДФЛ();
КонецПроцедуры

&НаКлиенте
Процедура КартинкаДекларация4НДФЛНажатие(Элемент)
	ОткрытьДекларацию4НДФЛ();
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйВизитКонтактыГосорганов_ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ФНС_Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		Платежи, "Платеж", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",        Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",  "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты",   ПроверяемыеРеквизитыОрганизации());
	ПараметрыФормы.Контекст.Вставить("Период",        Объект.Период);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", ИмяРеглОтчета());
	
	ОткрытьФорму("Справочник.Организации.Форма.РеквизитыПредпринимателяДляОтчетности", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоходыВычеты

&НаКлиенте
Процедура ДоходыВычетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоходВычетДляРедактирования(Элементы.ДоходыВычеты.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыВычетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыВычетыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьДоходВычетДляРедактирования(Элементы.ДоходыВычеты.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыВычетыПослеУдаления(Элемент)
	
	// Если пользователь удалил все доходы от предпринимательской деятельности,
	// то очистим также и авансовые платежи с торговым сбором.
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Объект.АвансовыеПлатежиИП = 0;
		Объект.ТорговыйСбор = 0;
	КонецЕсли;
	
	УправлениеЗакладкойДоходыВычеты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДоходыВычеты(Команда)
	
	УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	
	ЗаполнитьДоходыВычетыПоДаннымУчетаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоходыВычеты(Команда)
	
	ИзменитьЭтап("ДоходыВычеты", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДекларацию(Команда)
	
	ИзменитьЭтап("Декларация");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДекларацию(Команда)
	
	ИзменитьЭтап("Декларация", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНалог(Команда)
	
	ИзменитьЭтап("ОплатаНалога");
	
КонецПроцедуры

&НаКлиенте
Процедура Декларация3НДФЛ(Команда)
	
	ОткрытьДекларацию3НДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура Декларация4НДФЛ(Команда)
	
	ОткрытьДекларацию4НДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить1СОтчетность(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Процедура КакИзменитьДекларацию(Команда)
	
	ПараметрыИнформации = Новый Структура;
	ПараметрыИнформации.Вставить("ЗаголовокФормы",      НСтр("ru='Как изменить декларацию?'"));
	ПараметрыИнформации.Вставить("КлючНазначенияФормы", "КакИзменитьДекларацию");
	ПараметрыИнформации.Вставить("Организация",         Объект.Организация);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.ПолезнаяИнформация", ПараметрыИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура КакВнестиДругиеДоходы(Команда)
	
	ПараметрыИнформации = Новый Структура;
	ПараметрыИнформации.Вставить("ЗаголовокФормы",      НСтр("ru='Как внести другие доходы?'"));
	ПараметрыИнформации.Вставить("КлючНазначенияФормы", "КакВнестиДругиеДоходы");
	ПараметрыИнформации.Вставить("Организация",         Объект.Организация);
	ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма.ПолезнаяИнформация", ПараметрыИнформации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСверку(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписьВложения(Команда)
	
	АдресДанныхОписи = ПодготовитьДанныеОписиВложения();
	
	ДополнительныеПараметрыПечати = Новый Структура("АдресДанныхОписи", АдресДанныхОписи);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы, ДополнительныеПараметры",
		НСтр("ru='Опись вложения'"),
		ДополнительныеПараметрыПечати);
	
	ПараметрыКомандыПечати = Новый Массив;
	ПараметрыКомандыПечати.Добавить(Объект.Организация);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьОписиВложения",
		"ОписьВложения",
		ПараметрыКомандыПечати,
		ЭтотОбъект,
		ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Конверт(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыПечати", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФНС_Контрагент));
	ПараметрыФормы.Вставить("СведенияОПолучателеКонверта", ФНС_СведенияОПолучателеКонверта);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПечатиКонвертов", ПараметрыФормы);
	
КонецПроцедуры

#Область КомандыДобавленияДоходовВычетов

&НаКлиенте
Процедура ДобавитьДоходОтПредпринимательскойДеятельности(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиНедвижимости(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости"), "Недвижимость");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиАвтомобиля(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"), "Автомобиль");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиДолиУставногоКапитала(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"), "ДоляУставногоКапитала");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтПродажиПрочегоИмущества(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества"), "Прочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходПодарок(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.Подарок"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтАренды(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтДивидендов(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.Дивиденды"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтОплатыТруда(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОплатаТруда"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИнойДоходОтИсточникаРФ(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтИсточникаЗаПределамиРФ(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходОтОперацийСЦеннымиБумагами(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетСтандартныйНаНалогоплательщика(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетСтандартныйНаДетей(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаДетей"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетНаПриобретениеИлиСтроительствоНедвижимости(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетСоциальный(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Социальный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетДобровольныеПенсионныеВзносыИСтрахованиеЖизни(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетИнвестиционный(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Инвестиционный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВычетУбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами(Команда)
	
	ДобавитьДоходВычет(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоходыИВычеты

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	ПериодПоддерживается = Истина;
	
	ПоддерживаемыеНалоговыеПериоды = Обработки.ПомощникЗаполнения3НДФЛ.ПоддерживаемыеНалоговыеПериоды();
	Если ЗначениеЗаполнено(Объект.Период) И ПоддерживаемыеНалоговыеПериоды.Количество() <> 0 Тогда
		Если Объект.Период < ПоддерживаемыеНалоговыеПериоды[0] Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Декларацию за %1 год и ранее можно заполнить только вручную через 1С-Отчетность'"),
				Формат(ДобавитьМесяц(ПоддерживаемыеНалоговыеПериоды[0], -12), "ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Период", "Объект");
			Объект.Период = ПоддерживаемыеНалоговыеПериоды[0];
			ПериодПоддерживается = Ложь;
		ИначеЕсли Объект.Период > ПоддерживаемыеНалоговыеПериоды[ПоддерживаемыеНалоговыеПериоды.ВГраница()] Тогда
			ТекстОшибки = НСтр("ru = 'Декларацию нельзя заполнить будущей датой'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Период", "Объект");
			Объект.Период = ПоддерживаемыеНалоговыеПериоды[ПоддерживаемыеНалоговыеПериоды.ВГраница()];
			ПериодПоддерживается = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Декларация3НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет3НДФЛ.ФормаПоУмолчанию(Объект.Период);
	Если ЗначениеЗаполнено(Объект.Период) И ПериодПоддерживается Тогда
		Если Не Обработки.ПомощникЗаполнения3НДФЛ.ФормаЗаполняетсяПомощником(Декларация3НДФЛВыбраннаяФорма) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Заполнение декларации за %1 год будет реализовано в будущих версиях программы'"),
				Формат(Объект.Период, "ДФ=yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Период", "Объект");
		КонецЕсли;
	КонецЕсли;
	Декларация4НДФЛВыбраннаяФорма = Отчеты.РегламентированныйОтчет4НДФЛ.ФормаПоУмолчанию(ПериодДекларации4НДФЛ(Объект.Период));
	
	УстановитьФункциональныеОпцииФормы();
	
	ПравилаСроки = ПравилаСрокиПредставленияОтчетаУплатыНалога(Объект.Организация, Объект.Период);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПравилаСроки);
	
	НайтиИПрочитатьДекларации();
	
	Если Не ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОрганизацияПредставление = Объект.Организация;
	
	УстановитьФункциональныеОпцииФормы();
	
	// Проверка заполненности реквизитов организации, необходимых для заполнения декларации.
	РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация);
	
	ПравилаСроки = ПравилаСрокиПредставленияОтчетаУплатыНалога(Объект.Организация, Объект.Период);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПравилаСроки);
	
	НайтиИПрочитатьДекларации();
	
	Если Не ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДоходВычет(Вид, КлючНазначенияФормы = Неопределено)
	
	// Для отдельных видов доходов и вычетов не поддерживается добавление нескольких экземпляров.
	Если МожноДобавитьНовыйДоходВычет(Вид) Тогда
		ДобавитьНовыйДоходВычет(Вид, КлючНазначенияФормы);
	Иначе
		СтрокиПоВидуДоходаВычета = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", Вид));
		ОткрытьДоходВычетДляРедактирования(СтрокиПоВидуДоходаВычета[0].ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноДобавитьНовыйДоходВычет(ВидДоходаВычета)
	
	Если ДоходыВычетыВЕдинственномЭкземпляре().Найти(ВидДоходаВычета) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокиПоВидуДоходаВычета = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", ВидДоходаВычета));
	
	Возврат СтрокиПоВидуДоходаВычета.Количество() = 0;
	
КонецФункции

&НаКлиенте
Функция ДоходыВычетыВЕдинственномЭкземпляре()
	
	МассивДоходовВычетов = Новый Массив;
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика"));
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.СтандартныйНаДетей"));
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Социальный"));
	МассивДоходовВычетов.Добавить(ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.Инвестиционный"));
	
	Возврат МассивДоходовВычетов;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНовыйДоходВычет(Вид, КлючНазначенияФормы = Неопределено)
	
	ИмяФормыДоходаВычета = ИмяФормыДоходаВычета(Вид);
	
	Если ЗначениеЗаполнено(ИмяФормыДоходаВычета) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Период", Объект.Период);
		ПараметрыФормы.Вставить("Декларация3НДФЛВыбраннаяФорма", Декларация3НДФЛВыбраннаяФорма);
		ПараметрыФормы.Вставить("АдресКлючейПоказателей", АдресКлючейПоказателей);
		ПараметрыФормы.Вставить("Вид",    Вид);
		Если ЗначениеЗаполнено(КлючНазначенияФормы) Тогда
			ПараметрыФормы.Вставить("КлючНазначенияФормы", КлючНазначенияФормы);
		КонецЕсли;
		
		Если Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
			
			ПараметрыФормы.Вставить("АвансовыеПлатежи", Объект.АвансовыеПлатежиИП);
			ПараметрыФормы.Вставить("УплаченныйТорговыйСбор", Объект.ТорговыйСбор);
			
		ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
			
			Если ЕстьВычетНаПриобретениеИлиСтроительствоНедвижимости() Тогда
				ПараметрыФормы.Вставить("ВычетПоПроцентамНедоступен", ВычетНаПриобретениеНедвижимостиДоступноИспользованиеВычетаПоПроцентам());
				ПараметрыФормы.Вставить("ВычетПрименяетсяВпервые", ВычетНаПриобретениеНедвижимостиПрименяетсяВпервые());
				ПараметрыФормы.Вставить("ВычетПрошлыхЛетСтоимость", ПримененныйВычетПоРасходамНаПриобретениеНедвижимости());
				ПараметрыФормы.Вставить("ВычетПрошлыхЛетПроценты", ПримененныйВычетПроцентыПоКредитуНаНедвижимость());
			Иначе
				ПараметрыФормы.Вставить("ВычетПоПроцентамНедоступен", Ложь);
				ПараметрыФормы.Вставить("ВычетПрименяетсяВпервые", Истина);
			КонецЕсли;
			
		ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыФормы, СтруктураДоходовДляВычетаПоУбыткамПрошлыхЛет());
			
		ИначеЕсли Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества")
			ИЛИ Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости") Тогда
			
			ПараметрыФормы.Вставить("ИспользованныйВычет", ИспользованныйИмущественныйВычет(Объект.ДоходыВычеты));
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеДоходаВычетаЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма." + ИмяФормыДоходаВычета, ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДоходВычетДляРедактирования(ИдентификаторСтроки)
	
	СтрокаДоходВычет = Объект.ДоходыВычеты.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаДоходВычет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыДоходаВычета = ИмяФормыДоходаВычета(СтрокаДоходВычет.Вид);
	
	Если ЗначениеЗаполнено(ИмяФормыДоходаВычета) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Период", Объект.Период);
		ПараметрыФормы.Вставить("Декларация3НДФЛВыбраннаяФорма", Декларация3НДФЛВыбраннаяФорма);
		ПараметрыФормы.Вставить("АдресКлючейПоказателей", АдресКлючейПоказателей);
		ПараметрыФормы.Вставить("Вид",    СтрокаДоходВычет.Вид);
		ПараметрыФормы.Вставить("СтруктураДоходовВычетов", СтрокаДоходВычет.СтруктураДоходовВычетов);
		
		Если СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
			
			ПараметрыФормы.Вставить("АвансовыеПлатежи", Объект.АвансовыеПлатежиИП);
			ПараметрыФормы.Вставить("УплаченныйТорговыйСбор", Объект.ТорговыйСбор);
			
		ИначеЕсли СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
			
			ПараметрыФормы.Вставить("ВычетПоПроцентамНедоступен", 
				ВычетНаПриобретениеНедвижимостиДоступноИспользованиеВычетаПоПроцентам(СтрокаДоходВычет.ПолучитьИдентификатор()));
				
		ИначеЕсли СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества")
			ИЛИ СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости") Тогда
			
			ИспользованныйВычет = ИспользованныйИмущественныйВычет(Объект.ДоходыВычеты);
			
			Если СтрокаДоходВычет.СтруктураДоходовВычетов.ВидВычета = "Норматив" Тогда
				Если СтрокаДоходВычет.СтруктураДоходовВычетов.ВидИмущества = "ПрочаяНедвижимость" Тогда
					ИспользованныйВычет.ПрочаяНедвижимость = ИспользованныйВычет.ПрочаяНедвижимость - СтрокаДоходВычет.СуммаВычета;
				ИначеЕсли СтрокаДоходВычет.СтруктураДоходовВычетов.ВидИмущества = "ДоляУставногоКапитала" Тогда
					ИспользованныйВычет.ДоляУставногоКапитала = ИспользованныйВычет.ДоляУставногоКапитала - СтрокаДоходВычет.СуммаВычета;
				ИначеЕсли СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости") Тогда
					ИспользованныйВычет.Недвижимость = ИспользованныйВычет.Недвижимость - СтрокаДоходВычет.СуммаВычета;
				ИначеЕсли СтрокаДоходВычет.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПродажаИмущества") Тогда
					ИспользованныйВычет.Имущество = ИспользованныйВычет.Имущество - СтрокаДоходВычет.СуммаВычета;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыФормы.Вставить("ИспользованныйВычет", ИспользованныйВычет);
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеДоходаВычетаЗавершение", ЭтотОбъект, СтрокаДоходВычет);
		ОткрытьФорму("Обработка.ПомощникЗаполнения3НДФЛ.Форма." + ИмяФормыДоходаВычета, ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользованныйИмущественныйВычет(Знач ДоходыВычеты)
	
	ИспользованныйВычет = Новый Структура;
	ИспользованныйВычет.Вставить("Недвижимость", 0);
	ИспользованныйВычет.Вставить("Имущество", 0);
	ИспользованныйВычет.Вставить("ПрочаяНедвижимость", 0);
	ИспользованныйВычет.Вставить("ДоляУставногоКапитала", 0);
	
	ВидыДоходов = Новый Массив;
	ВидыДоходов.Добавить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости);
	ВидыДоходов.Добавить(Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества);
	
	Для Каждого ВидДохода Из ВидыДоходов Цикл
		
		ТаблицаДоходов = ДоходыВычеты.Выгрузить(Новый Структура("Вид", ВидДохода));
		
		Для Каждого Строка Из ТаблицаДоходов Цикл
			
			Если НЕ Строка.СтруктураДоходовВычетов.ВидВычета = "Норматив" Тогда
				Продолжить;
			КонецЕсли;
			
			// Для прочей недвижимости отдельный лимит норматива, поэтому вычислим его дополнительно.
			Если Строка.СтруктураДоходовВычетов.ВидИмущества = "ПрочаяНедвижимость" Тогда
				
				ИспользованныйВычет.ПрочаяНедвижимость = ИспользованныйВычет.ПрочаяНедвижимость + Строка.СуммаВычета;
				
			ИначеЕсли Строка.СтруктураДоходовВычетов.ВидИмущества = "ДоляУставногоКапитала" Тогда
				
				ИспользованныйВычет.ДоляУставногоКапитала = ИспользованныйВычет.ДоляУставногоКапитала + Строка.СуммаВычета;
				
			ИначеЕсли Строка.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
				
				ИспользованныйВычет.Недвижимость = ИспользованныйВычет.Недвижимость + Строка.СуммаВычета;
				
			ИначеЕсли Строка.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества Тогда
				
				ИспользованныйВычет.Имущество = ИспользованныйВычет.Имущество + Строка.СуммаВычета;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИспользованныйВычет;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыДоходаВычета(Вид)
	
	Если Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность Тогда
		ИмяФормы = "ПредпринимательскаяДеятельность";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаИмущества
		ИЛИ Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПродажаНедвижимости Тогда
		ИмяФормы = "ПродажаИмущества";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.СдачаИмуществаВАренду Тогда
		ИмяФормы = "СдачаИмуществаВАренду";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ИнойДоходОтИсточникаРФ
		ИЛИ Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Дивиденды Тогда
		ИмяФормы = "ИнойДоходОтИсточникаРФ";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ДоходЗаПределамиРФ Тогда
		ИмяФормы = "ДоходЗаПределамиРФ";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаНалогоплательщика Тогда
		ИмяФормы = "СтандартныйВычетНалогоплательщика";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.СтандартныйНаДетей Тогда
		ИмяФормы = "СтандартныйВычетНаДетей";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Социальный Тогда
		ИмяФормы = "СоциальныеВычеты";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.ДобровольныеПенсионныеВзносыИСтрахованиеЖизни Тогда
		ИмяФормы = "ДобровольныеПенсионныеВзносыИСтрахованиеЖизни";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.Инвестиционный Тогда
		ИмяФормы = "ИнвестиционныйВычет";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости Тогда
		ИмяФормы = "НаПриобретениеИлиСтроительствоНедвижимости";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОплатаТруда Тогда
		ИмяФормы = "ОплатаТруда";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.Подарок Тогда
		ИмяФормы = "Подарок";
	ИначеЕсли Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами Тогда
		ИмяФормы = "ОперацииСЦеннымиБумагами";
	ИначеЕсли Вид = Перечисления.ВычетыФизическихЛиц.УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами Тогда
		ИмяФормы = "УбыткиПрошлыхЛетПоОперациямСЦеннымиБумагами";
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

&НаКлиенте
Процедура ДобавлениеДоходаВычетаЗавершение(СтруктураДоходовВычетов, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СтруктураДоходовВычетов) = Тип("Структура") Тогда
		
		НоваяСтрока = Объект.ДоходыВычеты.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДоходовВычетов);
		НоваяСтрока.СтруктураДоходовВычетов = СтруктураДоходовВычетов;
		
		// Авансовые платежи и торговый сбор общие для всех видов предпринимательской деятельности.
		Если НоваяСтрока.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
			
			Объект.АвансовыеПлатежиИП = СтруктураДоходовВычетов.АвансовыеПлатежи;
			Объект.ТорговыйСбор = СтруктураДоходовВычетов.УплаченныйТорговыйСбор;
			
		// Остаток вычетов по расходам и по процентам общий для всех приобретаемых объектов недвижимости.
		ИначеЕсли НоваяСтрока.Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
			ОбновитьОстатокВычетовНаПриобретениеНедвижимости(НоваяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
		
		Модифицированность = Истина;
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеДоходаВычетаЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	ТекущиеДанные.СтруктураДоходовВычетов = Результат;
	
	// Авансовые платежи и торговый сбор общие для всех видов предпринимательской деятельности.
	Если ТекущиеДанные.Вид = ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность") Тогда
		
		Объект.АвансовыеПлатежиИП = Результат.АвансовыеПлатежи;
		Объект.ТорговыйСбор = Результат.УплаченныйТорговыйСбор;
		
	// Остаток вычетов по расходам и по процентам общий для всех приобретаемых объектов недвижимости.
	ИначеЕсли ТекущиеДанные.Вид = ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости") Тогда
		ОбновитьОстатокВычетовНаПриобретениеНедвижимости(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьВычетНаПриобретениеИлиСтроительствоНедвижимости()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	Возврат НайденныеСтроки.Количество() <> 0;
	
КонецФункции

&НаКлиенте
Функция ВычетНаПриобретениеНедвижимостиДоступноИспользованиеВычетаПоПроцентам(ИдентификаторРедактируемойСтроки = Неопределено)
	
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости")));
	
	ИдентификаторСтрокиСВычетамиПоПроцентам = Неопределено;
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.СтруктураДоходовВычетов.ДанныеФормы.ИспользоватьВычетПоПроцентам Тогда
			ИдентификаторСтрокиСВычетамиПоПроцентам = НайденнаяСтрока.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторСтрокиСВычетамиПоПроцентам = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ИдентификаторРедактируемойСтроки = Неопределено
			ИЛИ ИдентификаторСтрокиСВычетамиПоПроцентам <> ИдентификаторРедактируемойСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ВычетНаПриобретениеНедвижимостиПрименяетсяВпервые()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ВычетПрименяетсяВпервые = Истина;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВычетПрименяетсяВпервые = НайденныеСтроки[0].СтруктураДоходовВычетов.ДанныеФормы.ВычетПрименяетсяВпервые;
	КонецЕсли;
	
	Возврат ВычетПрименяетсяВпервые;
	
КонецФункции

&НаКлиенте
Функция ПримененныйВычетПоРасходамНаПриобретениеНедвижимости()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ВычетПрошлыхЛетСтоимость = 0;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВычетПрошлыхЛетСтоимость = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НайденныеСтроки[0].СтруктураДоходовВычетов.ДанныеФормы, "ВычетПрошлыхЛетСтоимость", 0);
	КонецЕсли;
	
	Возврат ВычетПрошлыхЛетСтоимость;
	
КонецФункции

&НаКлиенте
Функция ПримененныйВычетПроцентыПоКредитуНаНедвижимость()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ВычетПрошлыхЛетПроценты = 0;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ВычетПрошлыхЛетПроценты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НайденныеСтроки[0].СтруктураДоходовВычетов.ДанныеФормы, "ВычетПрошлыхЛетПроценты", 0);
	КонецЕсли;
	
	Возврат ВычетПрошлыхЛетПроценты;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОстатокВычетовНаПриобретениеНедвижимости(ИдентификаторСтрокиЭталона)
	
	Эталон = Объект.ДоходыВычеты.НайтиПоИдентификатору(ИдентификаторСтрокиЭталона);
	ДанныеФормыЭталон = Эталон.СтруктураДоходовВычетов.ДанныеФормы;
	ДанныеДекларацииЭталон = Эталон.СтруктураДоходовВычетов.ДанныеДекларации;
	
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ВычетыФизическихЛиц.НаПриобретениеИлиСтроительствоНедвижимости")));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДанныеФормы = НайденнаяСтрока.СтруктураДоходовВычетов.ДанныеФормы;
		ДанныеФормы.Вставить("ВычетПрименяетсяВпервые",  ДанныеФормыЭталон.ВычетПрименяетсяВпервые);
		ДанныеФормы.Вставить("ВычетПрошлыхЛетСтоимость", ДанныеФормыЭталон.ВычетПрошлыхЛетСтоимость);
		ДанныеФормы.Вставить("ВычетПрошлыхЛетПроценты",  ДанныеФормыЭталон.ВычетПрошлыхЛетПроценты);
		
		ДанныеДекларации = НайденнаяСтрока.СтруктураДоходовВычетов.ДанныеДекларации;
		ДанныеДекларации.Вставить("ВычетПрошлыхЛетСтоимость", ДанныеДекларацииЭталон.ВычетПрошлыхЛетСтоимость);
		ДанныеДекларации.Вставить("ВычетПрошлыхЛетПроценты",  ДанныеДекларацииЭталон.ВычетПрошлыхЛетПроценты);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураДоходовДляВычетаПоУбыткамПрошлыхЛет()
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ОперацииСЦеннымиБумагами"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	ЕстьДоходыПоИИС = Ложь;
	ЕстьДоходыПоИнымОперациям = Ложь;
	Для Каждого СтрокаДоходовВычетов Из НайденныеСтроки Цикл
		
		ДанныеФормы = СтрокаДоходовВычетов.СтруктураДоходовВычетов.ДанныеФормы;
		
		ЕстьДоходыПоИИС = ЕстьДоходыПоИИС ИЛИ ДанныеФормы.ЕстьДоходыПоИИС;
		ЕстьДоходыПоИнымОперациям = ЕстьДоходыПоИнымОперациям ИЛИ ДанныеФормы.ЕстьДоходыПоИнымОперациям;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьДоходыПоИИС", ЕстьДоходыПоИИС);
	Результат.Вставить("ЕстьДоходыПоИнымОперациям", ЕстьДоходыПоИнымОперациям);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СохранениеДанныхПомощника

&НаСервере
Функция ДанныеПомощникаЗаполнения()
	
	ДанныеПомощникаЗаполнения = НовыйДанныеПомощникаЗаполнения();
	ЗаполнитьЗначенияСвойств(ДанныеПомощникаЗаполнения, ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ДанныеПомощникаЗаполнения, Объект,, "ДоходыВычеты");
	ДанныеПомощникаЗаполнения.ДоходыВычеты = Объект.ДоходыВычеты.Выгрузить();
	
	Возврат ДанныеПомощникаЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеПомощникаЗаполнения()
	
	ДанныеПомощникаЗаполнения = Новый Структура;
	ДанныеПомощникаЗаполнения.Вставить("ДоходыВычеты",                Неопределено);
	ДанныеПомощникаЗаполнения.Вставить("СпособСдачиОтчетности",       "Интернет");
	ДанныеПомощникаЗаполнения.Вставить("НалогКВозврату",              0); // Будет рассчитан при заполнении декларации.
	ДанныеПомощникаЗаполнения.Вставить("НалогКУплате",                0); // Будет рассчитан при заполнении декларации.
	ДанныеПомощникаЗаполнения.Вставить("СформироватьДекларацию4НДФЛ", Ложь);
	ДанныеПомощникаЗаполнения.Вставить("АвансовыеПлатежиИП",          0);
	ДанныеПомощникаЗаполнения.Вставить("ТорговыйСбор",                0);
	ДанныеПомощникаЗаполнения.Вставить("ПредполагаемаяСуммаДоходов",  0);
	
	Возврат ДанныеПомощникаЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		// Если нажали кнопку "Отмена", то ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
		Если СостояниеДекларации3НДФЛ.Сдано Тогда
			ПоказатьВопросЕслиДекларацияСдана("ЗаписатьИЗакрыть");
		ИначеЕсли СостояниеДекларации3НДФЛ.Отправлено Тогда
			ПоказатьВопросЕслиДекларацияОтправлена("ЗаписатьИЗакрыть");
		Иначе
			ЗаполнитьДекларациюНаКлиенте(Истина);
		КонецЕсли;
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДоходовВычетовПоДаннымУчета

&НаКлиенте
Процедура Подключаемый_ЗаполнитьДоходыВычетыПоДаннымУчета()
	
	УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(ЭтотОбъект);
	
	ЗаполнитьДоходыВычетыПоДаннымУчетаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоходыВычетыПоДаннымУчетаНаКлиенте()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьДоходыВычетыПоДаннымУчетаНаСервере(Объект.Организация, Объект.Период, УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		// Ошибка проверки заполнения.
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Доходы и вычеты заполняются по данным учета'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияЗаполнитьДоходыВычеты", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДоходыВычетыПоДаннымУчетаНаСервере(Организация, Период, ИдентификаторФормы)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",   Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоГода(Период));
	ПараметрыЗаполнения.Вставить("КонецПериода",  КонецГода(Период));
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Помощник заполнения 3-НДФЛ: заполнение доходов от предпринимательской деятельности'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникЗаполнения3НДФЛ.ЗаполнитьДоходыРасходыОтПредпринимательскойДеятельностиВФоне",
		ПараметрыЗаполнения,
		НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияЗаполнитьДоходыВычеты(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДоходовВычетов(ДлительнаяОперация.АдресРезультата);
	Иначе
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДоходовВычетов(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АвансовыеПлатежиИП = Результат.АвансовыеПлатежи;
	Объект.ТорговыйСбор = Результат.ТорговыйСбор;
	
	Если Результат.ДоходыПредпринимателя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеВидыДеятельности = Новый Массив;
	ОтборСтрок = Новый Структура("Вид", Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность);
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаДоходыВычеты Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДоходыВычеты.СтруктураДоходовВычетов;
		Если СтруктураДанных.СпособЗаполнения <> "ПоДаннымУчета" Тогда
			ИсключаемыеВидыДеятельности.Добавить(СтруктураДанных.ВидДеятельности);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцентПрофВычета = Отчеты.РегламентированныйОтчет3НДФЛ.ПроцентПрофессиональногоВычета(Декларация3НДФЛВыбраннаяФорма);
	
	Для Каждого Доход Из Результат.ДоходыПредпринимателя Цикл
		
		// Возможно вид деятельности заполнен вручную. Еще раз не заполняем.
		Если ИсключаемыеВидыДеятельности.Найти(Доход.ВидДеятельности) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Доход.ИтогоДоходов = 0 И Доход.ИтогоРасходов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДоходыВычеты = Объект.ДоходыВычеты.Добавить();
		СтрокаДоходыВычеты.Вид = Перечисления.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность;
		СтрокаДоходыВычеты.СуммаДохода = Доход.ИтогоДоходов;
		СтрокаДоходыВычеты.СуммаВычета = Доход.ИтогоРасходов;
		СтрокаДоходыВычеты.ЕстьОшибкиЗаполнения = ПустаяСтрока(Доход.КодОКВЭД);
		
		Если СтрокаДоходыВычеты.ЕстьОшибкиЗаполнения Тогда
			СтрокаДоходыВычеты.Информация = НСтр("ru = 'Укажите код по ОКВЭД'");
		Иначе
			СтрокаДоходыВычеты.Информация = Доход.НаименованиеОКВЭД;
		КонецЕсли;
		
		СтруктураДоходовВычетов = Новый Структура;
		СтруктураДоходовВычетов.Вставить("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
		СтруктураДоходовВычетов.Вставить("КодОКВЭД",                    Доход.КодОКВЭД);
		СтруктураДоходовВычетов.Вставить("ВидДеятельности",             Доход.ВидДеятельности);
		СтруктураДоходовВычетов.Вставить("НаименованиеОКВЭД",           Доход.НаименованиеОКВЭД);
		СтруктураДоходовВычетов.Вставить("Информация",                  Доход.НаименованиеОКВЭД);
		СтруктураДоходовВычетов.Вставить("СуммаДохода",                 СтрокаДоходыВычеты.СуммаДохода);
		СтруктураДоходовВычетов.Вставить("СуммаВычета",                 СтрокаДоходыВычеты.СуммаВычета);
		СтруктураДоходовВычетов.Вставить("МатериальныеРасходы",         Доход.МатериальныеРасходы);
		СтруктураДоходовВычетов.Вставить("Амортизация",                 Доход.Амортизация);
		СтруктураДоходовВычетов.Вставить("Зарплата",                    Доход.РасходыНаОплатуТруда);
		СтруктураДоходовВычетов.Вставить("ВыплатыПоТрудовымДоговорам",  Доход.РасходыНаОплатуТруда);
		СтруктураДоходовВычетов.Вставить("ПрочиеРасходы",               Доход.ПрочиеРасходы);
		СтруктураДоходовВычетов.Вставить("ИтогоПодтвержденныхРасходов", СтрокаДоходыВычеты.СуммаВычета);
		СтруктураДоходовВычетов.Вставить("ИтогоРасходовНоНормативу",    СтрокаДоходыВычеты.СуммаДохода * ПроцентПрофВычета / 100);
		СтруктураДоходовВычетов.Вставить("СпособЗаполнения",            "ПоДаннымУчета");
		
		СтрокаДоходыВычеты.СтруктураДоходовВычетов = СтруктураДоходовВычетов;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДоходыВычетыЗаполненныеПоДаннымУчета(Форма)
	
	// Поддерживается автоматическое заполнение следующих данных:
	//   - Доходы от предпринимательской деятельности;
	//   - Авансовые платежи по налогу;
	//   - Уплаченный торговый сбор.
	
	Объект = Форма.Объект;
	
	Объект.АвансовыеПлатежиИП = 0;
	Объект.ТорговыйСбор = 0;
	
	// Перед заполнением удалим заполненные ранее доходы от предпринимательской деятельности.
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	НайденныеСтроки = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаДоходовВычетов Из НайденныеСтроки Цикл
		
		СтруктураДанных = СтрокаДоходовВычетов.СтруктураДоходовВычетов;
		Если СтруктураДанных.СпособЗаполнения = "ПоДаннымУчета" Тогда
			Объект.ДоходыВычеты.Удалить(СтрокаДоходовВычетов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Декларация

&НаКлиентеНаСервереБезКонтекста
Функция СрокПредставленияОтчетаПоУмолчанию(Период)
	
	Возврат Дата(Год(Период) + 1, 04, 30);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьДекларацию3НДФЛ()
	
	Если НЕ ЗначениеЗаполнено(Декларация3НДФЛ) ИЛИ ОтчетностьГотовится Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДекларации(Декларация3НДФЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДекларацию4НДФЛ()

	Если НЕ ЗначениеЗаполнено(Декларация4НДФЛ) ИЛИ ОтчетностьГотовится Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДекларации(Декларация4НДФЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДекларации(СсылкаНаДекларацию)
	
	Если ДоступнаПечатьPDF417(СсылкаНаДекларацию) Тогда
		ФормаОтчета = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(СсылкаНаДекларацию);
		Если ФормаОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ФормаОтчета, "ПомощникЗаполнения3НДФЛ");
	Иначе
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуРеглОтчета(СсылкаНаДекларацию);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаПечатьPDF417(СсылкаНаДекларацию)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДекларацию) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДекларацию, "ИсточникОтчета, ВыбраннаяФорма");
	
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Отчет." + РеквизитыДекларации.ИсточникОтчета);
	
	Возврат МенеджерОтчета.ДоступнаПечатьPDF417(РеквизитыДекларации.ВыбраннаяФорма);
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеОписиВложения()
	
	ГосударственныйОрган = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	
	ВложенныеПредметы = Обработки.ПечатьОписиВложения.НоваяТаблицаВложенийОписи();
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		СтрокаВложенныеПредметы = ВложенныеПредметы.Добавить();
		СтрокаВложенныеПредметы.НаименованиеПредмета = Декларация3НДФЛ.НаименованиеОтчета;
		СтрокаВложенныеПредметы.Количество = 1;
		СтрокаВложенныеПредметы.ОбъявленнаяЦенность = 1;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		СтрокаВложенныеПредметы = ВложенныеПредметы.Добавить();
		СтрокаВложенныеПредметы.НаименованиеПредмета = Декларация4НДФЛ.НаименованиеОтчета;
		СтрокаВложенныеПредметы.Количество = 1;
		СтрокаВложенныеПредметы.ОбъявленнаяЦенность = 1;
	КонецЕсли;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация, Объект.Период);
	
	ДанныеОписи = Новый Структура;
	ДанныеОписи.Вставить("Отправитель",       СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
	ДанныеОписи.Вставить("ВложенныеПредметы", ВложенныеПредметы);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОписи, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПериодДекларации4НДФЛ(Период)
	
	Возврат ДобавитьМесяц(Период, 12);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеглОтчета()
	Возврат "РегламентированныйОтчет3НДФЛ";
КонецФункции

#КонецОбласти

#Область ОплатаНалога

&НаСервереБезКонтекста
Функция ПравилаСрокиПредставленияОтчетаУплатыНалога(Организация, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("СрокПредставленияОтчета", СрокПредставленияОтчетаПоУмолчанию(Период));
	Результат.Вставить("ПравилоПредставленияОтчета", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	Результат.Вставить("СрокУплатыНалога", СрокУплатыНалогаПоУмолчанию(Период));
	Результат.Вставить("ПравилоУплатыНалога", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если УчетнаяПолитика.ПлательщикНДФЛ(Организация, КонецГода(Период)) Тогда
			ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ИП;
		Иначе
			ВидНалога = Перечисления.ВидыНалогов.НДФЛ_ФизЛицо;
		КонецЕсли;
		
		Правила = ВыполнениеЗадачБухгалтера.ПравилаПредоставленияОтчетаУплатыНДФЛПредпринимателя(КонецГода(Период));
		
		Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
			Организация, Правила, КонецГода(Период));
		
		Если Порядок.Отчет <> Неопределено Тогда
			Результат.СрокПредставленияОтчета    = Порядок.Отчет.Срок;
			Результат.ПравилоПредставленияОтчета = Порядок.Отчет.Правило;
		Иначе
			Результат.СрокПредставленияОтчета    = СрокПредставленияОтчетаПоУмолчанию(Период);
			Результат.ПравилоПредставленияОтчета = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(Правила.Задача, Правила.Отчет);
		КонецЕсли;
		
		Если Порядок.Уплата <> Неопределено Тогда
			Результат.СрокУплатыНалога    = Порядок.Уплата.Срок;
			Результат.ПравилоУплатыНалога = Порядок.Уплата.Правило;
		Иначе
			// Задача по уплате налога для ИП на УСН настраивается опционально и может отсутствовать в списке задач.
			Результат.СрокУплатыНалога    = СрокУплатыНалогаПоУмолчанию(Период);
			Результат.ПравилоУплатыНалога = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(Правила.Задача, Правила.Уплата);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СрокУплатыНалогаПоУмолчанию(Период)
	
	Возврат Дата(Год(Период) + 1, 07, 15);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОплаченныйНалог(Платежи)
	
	СуммаОплаты = 0;
	
	ОтборСтрок = Новый Структура("Оплачено", Истина);
	ОплаченныеПлатежи = Платежи.НайтиСтроки(ОтборСтрок);
	Для Каждого Платеж Из ОплаченныеПлатежи Цикл
		СуммаОплаты = СуммаОплаты + Платеж.Сумма;
	КонецЦикла;
	
	Возврат СуммаОплаты;
	
КонецФункции

&НаКлиенте
Процедура Оплатить(СпособОплаты)
	
	ДокументыОплаты = ОплатитьНаСервере(СпособОплаты);
	Если ДокументыОплаты <> Неопределено И ДокументыОплаты.Количество() > 0 Тогда
		ТипСозданныхДокументов = ТипЗнч(ДокументыОплаты[0]);
		ОповеститьОбИзменении(ТипСозданныхДокументов);
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОплатитьНаСервере(СпособОплаты)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	СозданныеДокументы = Новый Массив;
	
	// Определим налоги к уплате с детализацией до видов налогов.
	ТаблицаНалогиКУплате = ТаблицаНеоплаченныеНалоги(Декларация3НДФЛ, Платежи);
	
	ТаблицаПлатежей = 
		Обработки.ПомощникЗаполнения3НДФЛ.ТаблицаПлатежейДляФормированияПлатежныхПоручений(ТаблицаНалогиКУплате, Объект.Период);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Правило",         ПравилоУплатыНалога);
	СтруктураПараметров.Вставить("ПериодСобытия",   КонецГода(Объект.Период));
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("НалоговыйПериод", НачалоГода(Объект.Период));
	СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(ТаблицаПлатежей));
	СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
	СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
	
	СозданныеДокументы = 
		Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров);
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеЗакладкойОплата(ЭтотОбъект);
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаНеоплаченныеНалоги(Декларация, Платежи)
	
	// Получим налоги к оплате по декларации.
	НалогиКУплате = Отчеты.РегламентированныйОтчет3НДФЛ.ДанныеРеглОтчета(Декларация);
	
	// Дополним таблицу оплатами с противоположным знаком и свернем таблицу,
	// чтобы получить неоплаченную часть налога.
	Для Каждого СтрокаПлатеж Из Платежи Цикл
		СтрокаНалогКУплате = НалогиКУплате.Добавить();
		СтрокаНалогКУплате.ВидНалога = СтрокаПлатеж.ВидНалога;
		СтрокаНалогКУплате.Сумма = -СтрокаПлатеж.Сумма;
	КонецЦикла;
	
	НалогиКУплате.Свернуть("ВидНалога", "Сумма");
	
	Возврат НалогиКУплате;
	
КонецФункции

&НаСервере
Процедура НайтиИОтобразитьСвязанныеПлатежи()
	
	Платежи.Очистить();
	
	ТаблицаПлатежей = Обработки.ПомощникЗаполнения3НДФЛ.ДокументыУплаты(
		Объект.Организация, Объект.Период, ПравилоУплатыНалога);
	
	Если ТаблицаПлатежей <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			ЗаполнитьЗначенияСвойств(Платежи.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, Платежи, "Платеж");
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Сверка

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(ПравилоУплатыНалога)
		Или Не ЗначениеЗаполнено(СрокУплатыНалога) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляСверки       = ПараметрыДляСверки();
	СтруктураСведенийОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСведенийОСверке,
		"СверкаВыполнена, ОписаниеДействияСверка, ЗапросНаСверкуНаименование");
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСверки()
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Объект.Организация;
	ПараметрыДляСверки.Правило = ПравилоУплатыНалога;
	ПараметрыДляСверки.ИдентификаторЗадачи = ПравилоУплатыНалога.Владелец.Код;
	ПараметрыДляСверки.ПериодСобытия = Объект.Период;
	ПараметрыДляСверки.Срок = СрокУплатыНалога;
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

#КонецОбласти

#Область ЧтениеДанныхПомощника

&НаСервереБезКонтекста
Функция ДекларацияСодержитДанныеПомощника(Знач Декларация)
	
	Возврат (Обработки.ПомощникЗаполнения3НДФЛ.ДанныеПомощникаЗаполнения(Декларация) <> Неопределено)
	
КонецФункции

&НаСервере
Процедура НайтиИПрочитатьДекларации()
	
	// 3-НДФЛ
	Декларация3НДФЛ = Обработки.ПомощникЗаполнения3НДФЛ.НайтиДекларацию3НДФЛ(
		Объект.Организация,
		Объект.Период,
		Декларация3НДФЛВыбраннаяФорма);
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		ДанныеПомощника = Обработки.ПомощникЗаполнения3НДФЛ.ДанныеПомощникаЗаполнения(Декларация3НДФЛ);
		Если ДанныеПомощника <> Неопределено Тогда
			ВосстановитьДанныеПомощника(ДанныеПомощника);
		КонецЕсли;
		Объект.НомерКорректировки = НомерКорректировки(Декларация3НДФЛ);
		Декларация3НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация3НДФЛ);
	Иначе
		Объект.НомерКорректировки = 0;
		Декларация3НДФЛСостояниеОтправки = Неопределено;
	КонецЕсли;
	
	КлючиПоказателей = Отчеты.РегламентированныйОтчет3НДФЛ.КлючиПоказателейДекларации(Декларация3НДФЛВыбраннаяФорма);
	АдресКлючейПоказателей = ПоместитьВоВременноеХранилище(КлючиПоказателей, УникальныйИдентификатор);
	
	// 4-НДФЛ
	Если ПлательщикНДФЛ Тогда
		Декларация4НДФЛ = Обработки.ПомощникЗаполнения3НДФЛ.НайтиДекларацию4НДФЛ(
			Объект.Организация,
			ПериодДекларации4НДФЛ(Объект.Период),
			Декларация4НДФЛВыбраннаяФорма);
	Иначе
		Декларация4НДФЛ = Документы.РегламентированныйОтчет.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		Объект.СформироватьДекларацию4НДФЛ = Истина;
		ДанныеДекларации4НДФЛ = Отчеты.РегламентированныйОтчет4НДФЛ.ДанныеРеглОтчета(Декларация4НДФЛ);
		Если ДанныеДекларации4НДФЛ.Количество() <> 0 Тогда
			Объект.ПредполагаемаяСуммаДоходов = ДанныеДекларации4НДФЛ[0].Сумма;
		Иначе
			Объект.ПредполагаемаяСуммаДоходов = 0;
		КонецЕсли;
		
		Объект.НомерКорректировки4НДФЛ = НомерКорректировки(Декларация4НДФЛ);
		Декларация4НДФЛСостояниеОтправки = СостояниеОтправкиДекларации(Декларация4НДФЛ);
	Иначе
		Объект.СформироватьДекларацию4НДФЛ = Ложь;
		Объект.ПредполагаемаяСуммаДоходов = 0;
		
		Объект.НомерКорректировки4НДФЛ = 0;
		Декларация4НДФЛСостояниеОтправки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеОтправкиДекларации(Знач Декларация)
	
	Возврат ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(Декларация);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеДекларации(СостояниеОтправки)
	
	Если СостояниеОтправки = Неопределено Тогда
		
		Возврат ИнтерфейсыВзаимодействияБРОКлиентСервер.НовыйСостояниеДокумента();
		
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

&НаСервере
Процедура ВосстановитьДанныеПомощника(ДанныеПомощникаЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПомощникаЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеПомощникаЗаполнения, , "ДоходыВычеты");
	Объект.ДоходыВычеты.Загрузить(ДанныеПомощникаЗаполнения.ДоходыВычеты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОГосударственныхОрганах()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоОрганизации(Объект.Организация));
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.НавигацияПараметрФормы = "ДоходыВычеты" Тогда
		
		УправлениеЗакладкойДоходыВычеты(Форма);
		
	ИначеЕсли Форма.НавигацияПараметрФормы = "Декларация" Тогда
		
		УправлениеЗакладкойДекларация(Форма);
		
	ИначеЕсли Форма.НавигацияПараметрФормы = "ОплатаНалога" Тогда
		
		УправлениеЗакладкойОплата(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, КонецГода(Объект.Период));
	ЭлектронныйДокументооборотДоступен = ЭлектронныйДокументооборотДоступен(Объект.Организация);
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойДоходыВычеты(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.Корректировка = СтрШаблон(НСтр("ru = 'Корректировка №%1'"), Формат(Объект.НомерКорректировки, "ЧГ=0"));
	Элементы.Корректировка.Видимость = (Объект.НомерКорректировки <> 0);
	
	Элементы.ДоходыВычетыЗаполнитьДоходыВычеты.Видимость = Форма.ПлательщикНДФЛ;
	Элементы.ДоходыВычетыКонтекстноеМенюЗаполнитьДоходыВычеты.Видимость = Форма.ПлательщикНДФЛ;
	Элементы.ДоходыВычетыДобавитьДоходыОтПредпринимательскойДеятельности.Видимость = Форма.ПлательщикНДФЛ;
	Элементы.ДоходыВычетыКонтекстноеМенюДобавитьДоходОтПредпринимательскойДеятельности.Видимость = Форма.ПлательщикНДФЛ;
	
	СуммаДоходовИП = СуммаДоходовИП(Форма);
	Форма.ПодсказкаПорядкаОпределенияАвансовыхПлатежей = ТекстПодсказкиПорядкаОпределенияАвансовыхПлатежей(Объект.Период, СуммаДоходовИП);
	Элементы.ПодсказкаПорядкаОпределенияАвансовыхПлатежей.Высота =
		СтрЧислоВхождений(Форма.ПодсказкаПорядкаОпределенияАвансовыхПлатежей, Символы.ПС) + 1;
	
	Форма.Корректировка4НДФЛ = СтрШаблон(НСтр("ru = '(корректировка №%1)'"), Формат(Объект.НомерКорректировки4НДФЛ, "ЧГ=0"));
	Элементы.Корректировка4НДФЛ.Видимость = (Объект.НомерКорректировки4НДФЛ <> 0);
	
	Элементы.ПредполагаемаяСуммаДоходов.Доступность = Объект.СформироватьДекларацию4НДФЛ;
	
	Элементы.ЗаполнитьДекларациюДалее.Доступность = Форма.РеквизитыОрганизацииЗаполнены;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость = ЗначениеЗаполнено(Объект.Организация)
		И Не Форма.РеквизитыОрганизацииЗаполнены;
	
	Элементы.ПорядокОпределенияАвансовыхПлатежей.Видимость = Форма.ПлательщикНДФЛ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаДоходовИП(Форма)
	
	Объект = Форма.Объект;
	
	СуммаДоходов = 0;
	СуммаРасходов = 0;
	СуммаПрофВычета = 0;
	
	ОтборСтрок = Новый Структура("Вид", ПредопределенноеЗначение("Перечисление.ИсточникиДоходовФизическихЛиц.ПредпринимательскаяДеятельность"));
	СтрокиПредпринимательскойДеятельности = Объект.ДоходыВычеты.НайтиСтроки(ОтборСтрок);
	
	Для Каждого Строка Из СтрокиПредпринимательскойДеятельности Цикл
		СуммаДоходов = СуммаДоходов + Строка.СуммаДохода;
		СуммаРасходов = СуммаРасходов + Строка.СтруктураДоходовВычетов.ИтогоПодтвержденныхРасходов;
		СуммаПрофВычета = СуммаПрофВычета + Строка.СтруктураДоходовВычетов.ИтогоРасходовНоНормативу;
	КонецЦикла;
	
	СуммаВычета = Макс(СуммаРасходов, СуммаПрофВычета);
	
	Возврат (СуммаДоходов - СуммаВычета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиПорядкаОпределенияАвансовыхПлатежей(Период, СуммаДоходовИП)
	
	Если СуммаДоходовИП > 0 Тогда
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Если в %1 году планируется изменение доходов от предпринимательской деятельности
					   |более чем на 50%% (меньше %2 или больше %3 %4),
					   |вы обязаны подать декларацию 4-НДФЛ для уточнения авансовых платежей.'"),
			Формат(ПериодДекларации4НДФЛ(Период), "ДФ=yyyy"),
			Формат(СуммаДоходовИП * 0.5, "ЧЦ=15; ЧДЦ=0; ЧН="),
			Формат(СуммаДоходовИП * 1.5, "ЧЦ=15; ЧДЦ=0; ЧН="),
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Иначе
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Если в %1 году планируется получение доходов от предпринимательской деятельности,
					   |вы обязаны подать декларацию 4-НДФЛ для расчета авансовых платежей.'"),
			Формат(ПериодДекларации4НДФЛ(Период), "ДФ=yyyy"));
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойДекларация(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ОтчетностьГотовится = Форма.ОтчетностьГотовится;
	
	Если ОтчетностьГотовится Тогда
		Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Отчетность готовится...'");
	Иначе
		Элементы.ДекорацияСостояние.Заголовок = НСтр("ru = 'Отчетность готова!'");
	КонецЕсли;
	
	ПредставлениеПериода3НДФЛ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(Объект.Период), КонецГода(Объект.Период), Истина);
	
	// 3-НДФЛ
	Представление3НДФЛ = Новый Массив;
	Представление3НДФЛ.Добавить(СтрШаблон(НСтр("ru = '3-НДФЛ, декларация за %1'"), ПредставлениеПериода3НДФЛ));
	СостояниеОтправки3НДФЛ = СостояниеДекларации(Форма.Декларация3НДФЛСостояниеОтправки);
	Если Не ПустаяСтрока(СостояниеОтправки3НДФЛ.Представление) Тогда
		Представление3НДФЛ.Добавить(СтрШаблон("(%1)", СостояниеОтправки3НДФЛ.Представление));
	КонецЕсли;
	Элементы.Декларация3НДФЛ.Заголовок = СтрСоединить(Представление3НДФЛ, " ");
	Элементы.Декларация3НДФЛКартинкаФормируется.Видимость = ОтчетностьГотовится;
	Элементы.Декларация3НДФЛФормируется.Видимость         = ОтчетностьГотовится;
	Элементы.Декларация3НДФЛКартинкаPDF.Видимость         = НЕ ОтчетностьГотовится И ДоступнаПечатьPDF417(Форма.Декларация3НДФЛ);
	
	// 4-НДФЛ
	Представление4НДФЛ = Новый Массив;
	ПредставлениеПериода4НДФЛ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоГода(ПериодДекларации4НДФЛ(Объект.Период)), КонецГода(ПериодДекларации4НДФЛ(Объект.Период)), Истина);
	Представление4НДФЛ.Добавить(СтрШаблон(НСтр("ru = '4-НДФЛ, предполагаемый доход на %1'"), ПредставлениеПериода4НДФЛ));
	СостояниеОтправки4НДФЛ = СостояниеДекларации(Форма.Декларация4НДФЛСостояниеОтправки);
	Если Не ПустаяСтрока(СостояниеОтправки4НДФЛ.Представление) Тогда
		Представление4НДФЛ.Добавить(СтрШаблон("(%1)", СостояниеОтправки4НДФЛ.Представление));
	КонецЕсли;
	
	Элементы.ГруппаДекларация4НДФЛ.Видимость = Объект.СформироватьДекларацию4НДФЛ;
	Элементы.Декларация4НДФЛ.Заголовок = СтрСоединить(Представление4НДФЛ, " ");
	Элементы.Декларация4НДФЛКартинкаФормируется.Видимость = ОтчетностьГотовится;
	Элементы.Декларация4НДФЛФормируется.Видимость         = ОтчетностьГотовится;
	Элементы.Декларация4НДФЛКартинкаPDF.Видимость         = НЕ ОтчетностьГотовится И ДоступнаПечатьPDF417(Форма.Декларация4НДФЛ);
	
	// Суммы налога.
	Элементы.ПредставлениеНалогКУплате.Заголовок = 
		СтрШаблон(НСтр("ru = 'Налог к уплате: %1 руб.'"), Формат(Объект.НалогКУплате, "ЧЦ=15; ЧДЦ=; ЧН=0"));
		
	Элементы.ПредставлениеНалогКВозврату.Заголовок = 
		СтрШаблон(НСтр("ru = 'Налог к возврату: %1 руб.'"), Формат(Форма.НалогКВозврату, "ЧЦ=15; ЧДЦ=; ЧН=0"));
	
	Элементы.СтраницыДействияСОтчетами.ТекущаяСтраница = Элементы[Форма.СпособСдачиОтчетности];
	
	Элементы.НалогРассчитывается.Видимость         = ОтчетностьГотовится;
	Элементы.ПредставлениеНалогКУплате.Видимость   = НЕ ОтчетностьГотовится И Объект.НалогКУплате > 0;
	Элементы.ПредставлениеНалогКВозврату.Видимость = НЕ ОтчетностьГотовится И Форма.НалогКВозврату > 0;
	
	// Способ сдачи отчетности.
	СрокПредставленияОтчета = ?(ЗначениеЗаполнено(Форма.СрокПредставленияОтчета), 
		Форма.СрокПредставленияОтчета,
		СрокПредставленияОтчетаПоУмолчанию(Объект.Период));
	Форма.ПредставлениеСрокаСдачиОтчетности = ПредставлениеСрокаСдачиОтчетности(СрокПредставленияОтчета);
	Если Форма.Используется1СОтчетность Тогда
		Элементы.Группа1СОтчетность.Видимость = Истина;
		Элементы.ЗаголовокПодключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.ОписаниеПодключить1СОтчетность.Видимость  = НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.Подключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.Открыть1СОтчетность.Видимость    = Форма.ЭлектронныйДокументооборотДоступен;
	Иначе
		Элементы.Группа1СОтчетность.Видимость = Ложь;
	КонецЕсли;
	Элементы.Гиперссылка1СОтчетность.Видимость = Не Форма.Используется1СОтчетность;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСрокаСдачиОтчетности(СрокПредставленияОтчета)
	
	Представление = СтрШаблон(НСтр("ru = 'Сдать отчетность следует не позднее %1'"), Формат(СрокПредставленияОтчета, "ДЛФ=DD"));
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойОплата(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// Оплата
	СрокУплатыНалога = ?(ЗначениеЗаполнено(Форма.СрокУплатыНалога), Форма.СрокУплатыНалога, СрокУплатыНалогаПоУмолчанию(Объект.Период));
	
	Форма.ПредставлениеНалогаКУплате = ПредставлениеНалогаКУплате(Объект.НалогКУплате, ОплаченныйНалог(Форма.Платежи), СрокУплатыНалога);
	Элементы.ГруппаОплатаНалога.Видимость = Не (Объект.НалогКУплате = 0 И Форма.НалогКВозврату <> 0);
	
	Элементы.ГруппаВозвратНалога.Видимость = Форма.НалогКВозврату <> 0;
	
	Элементы.ПояснениеНалогКВозврату.Заголовок = СтрШаблон(
		НСтр("ru = 'Можно вернуть %1 руб. излишне удержанного налога'"),
		Формат(Форма.НалогКВозврату, "ЧЦ=15; ЧДЦ="));
	
	ОплатаДоступна = (Объект.НалогКУплате > Форма.Платежи.Итог("Сумма"));
	
	КнопкиОплаты = Новый Массив;
	КнопкиОплаты.Добавить(Элементы.ОплатитьСБанковскогоСчета);
	КнопкиОплаты.Добавить(Элементы.ОплатитьНаличными);
	
	Для Каждого Кнопка Из КнопкиОплаты Цикл
		Если Кнопка.Доступность = ОплатаДоступна Тогда
			Продолжить;
		КонецЕсли;
		Кнопка.Доступность = ОплатаДоступна;
		Кнопка.Шрифт = Новый Шрифт(Кнопка.Шрифт, , , ОплатаДоступна);
		Кнопка.ЦветФона = ?(ОплатаДоступна, ЦветФонаКнопкиПоУмолчанию(), Новый Цвет);
	КонецЦикла;
	
	// Сверка
	Если Форма.Используется1СОтчетность Тогда
		Элементы.ГруппаСверка.Видимость = Истина;
		Если Форма.СверкаВыполнена Тогда
			Элементы.ЗапроситьСверкуСсылка.Заголовок = Форма.ЗапросНаСверкуНаименование;
			Элементы.ЗапроситьСверкуСсылка.Видимость = Истина;
			Элементы.ЗапроситьСверку.Видимость       = Ложь;
		Иначе
			Элементы.ЗапроситьСверкуСсылка.Видимость = Ложь;
			Элементы.ЗапроситьСверку.Видимость       = Истина;
		КонецЕсли;
		Элементы.ЗапроситьСверку.Доступность = ЗначениеЗаполнено(Объект.Организация)
			И ЗначениеЗаполнено(Объект.Период);
	Иначе
		Элементы.ГруппаСверка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветФонаКнопкиПоУмолчанию()
	
	Возврат ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНалогаКУплате(НалогКУплате, ОплаченныйНалог, СрокУплатыНалога)
	
	НеоплаченныйНалог = Макс(0, НалогКУплате - ОплаченныйНалог);
	Если НеоплаченныйНалог > 0 Тогда
		Представление = СтрШаблон(НСтр("ru = 'Оплатите %1 %2 не позднее %3'"),
			Формат(НеоплаченныйНалог, "ЧЦ=15; ЧДЦ="),
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),
			Формат(СрокУплатыНалога, "ДЛФ=DD"));
	ИначеЕсли НалогКУплате = 0 Тогда
		Представление = НСтр("ru = 'Отсутствует налог к оплате'")
	Иначе
		Представление = НСтр("ru = 'Налог оплачен'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлектронныйДокументооборотДоступен(Знач Организация)
	
	Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, Перечисления.ТипыКонтролирующихОрганов.ФНС);
	
КонецФункции

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура ИзменитьЭтап(Идентификатор, ОбратноеНаправление = Ложь)
	
	СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
	
	Если Идентификатор = "ДоходыВычеты" Тогда
		Если ОбратноеНаправление Тогда
			Если СостояниеДекларации3НДФЛ.Сдано Тогда
				ПоказатьВопросЕслиДекларацияСдана(Идентификатор);
				Возврат;
			ИначеЕсли СостояниеДекларации3НДФЛ.Отправлено Тогда
				ПоказатьВопросЕслиДекларацияОтправлена(Идентификатор);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Идентификатор = "Декларация" Тогда
		Если Не ОбратноеНаправление И (Модифицированность Или Не ЗначениеЗаполнено(Декларация3НДФЛ)) Тогда
			Если СостояниеДекларации3НДФЛ.Сдано Тогда
				ПоказатьВопросЕслиДекларацияСдана(Идентификатор);
				Возврат;
			ИначеЕсли СостояниеДекларации3НДФЛ.Отправлено Тогда
				ПоказатьВопросЕслиДекларацияОтправлена(Идентификатор);
				Возврат;
			Иначе
				ЗаполнитьДекларациюНаКлиенте();
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьЭтапНаСервере(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭтапНаСервере(Идентификатор)
	
	Если Идентификатор = "ДоходыВычеты" Тогда
		
		РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация);
		
		Если ЗначениеЗаполнено(Декларация3НДФЛ) И Не ДекларацияСодержитДанныеПомощника(Декларация3НДФЛ) Тогда
			// Найдена декларация 3-НДФЛ, заполненная вручную.
			Модифицированность = Истина;
		КонецЕсли;
		
		УстановитьВидимостьСтраницы(Элементы, Элементы.СтраницаДоходыВычеты);
		Элементы.ЗаполнитьДекларациюДалее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Идентификатор = "Декларация" Тогда
		
		ЗаполнитьСведенияОГосударственныхОрганах();
		
		УстановитьВидимостьСтраницы(Элементы, Элементы.СтраницаДекларация);
		Элементы.ОплатитьНалогДалее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Идентификатор = "ОплатаНалога" Тогда
		
		НайтиИОтобразитьСвязанныеПлатежи();
		
		ПолучитьСведенияОСверке();
		
		УстановитьВидимостьСтраницы(Элементы, Элементы.СтраницаОплатаНалога);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	НавигацияПомощников.РазместитьНавигацию(
		ЭтотОбъект,
		СтруктураНавигации(),
		Новый Структура("НавигацияПараметрФормы", Идентификатор));
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСтраницы(Элементы, ТекущаяСтраница)
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = ТекущаяСтраница;
	Для Каждого Страница ИЗ Элементы.СтраницыПомощника.ПодчиненныеЭлементы Цикл
		Страница.Видимость = (Страница = ТекущаяСтраница);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураНавигации()
	
	Возврат Обработки.ПомощникЗаполнения3НДФЛ.СтруктураНавигации().Структура;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервереБезКонтекста
Функция ПроверитьРеквизитыОрганизации(Организация)
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация, ПроверяемыеРеквизитыОрганизации(), НезаполненныеРеквизиты);
	
	// Проверка корректности заполнения кода по ОКТМО
	КодПоОКТМО = Справочники.Организации.КодТерриторииМестаРегистрации(Организация);
	ОшибкиПроверкиОКТМО = ОрганизацииФормыДляОтчетностиКлиентСервер.ПроверитьКодПоОКТМО(КодПоОКТМО);
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиОКТМО) Тогда
		РеквизитыОрганизацииЗаполнены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыОрганизацииЗаполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	СтрокаРеквизиты = "ИНН,ФамилияИП,ИмяИП,Адрес,КодПоОКТМО,Телефон,КодНалоговогоОргана";
	Возврат СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДекларации

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияСдана(ЭтапПомощника)
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Декларация 3-НДФЛ за %1 год уже сдана.
		|Вы хотите создать уточненную декларацию?'"), Формат(Объект.Период, "ДФ=yyyy"));
	
	ПоказатьВопросЕслиДекларацияОтправленаСдана(ТекстВопроса, ЭтапПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияОтправлена(ЭтапПомощника)
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Декларация 3-НДФЛ за %1 год уже отправлена в ФНС.
		|Вы хотите создать уточненную декларацию?'"), Формат(Объект.Период, "ДФ=yyyy"));
	
	ПоказатьВопросЕслиДекларацияОтправленаСдана(ТекстВопроса, ЭтапПомощника);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияОтправленаСдана(ТекстВопроса, ЭтапПомощника)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ПоказатьВопросЕслиДекларацияОтправленаСданаЗавершение",
		ЭтотОбъект, Новый Структура("ЭтапПомощника", ЭтапПомощника));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Создать", НСтр("ru = 'Создать уточненную'"));
	Кнопки.Добавить("Отменить", НСтр("ru = 'Отменить'"));
	
	ДополнительныеПараметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ДополнительныеПараметры.Заголовок = Заголовок;
	ДополнительныеПараметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОписаниеОповещенияОЗавершении,
		ТекстВопроса,
		Кнопки,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЕслиДекларацияОтправленаСданаЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ.Значение = "Создать" Тогда
		
		УстановитьНомерКорректировкиНовойДекларации(ЭтотОбъект);
		
		Если ДополнительныеПараметры.ЭтапПомощника = "ДоходыВычеты" Тогда
			ИзменитьЭтапНаСервере(ДополнительныеПараметры.ЭтапПомощника);
		ИначеЕсли ДополнительныеПараметры.ЭтапПомощника = "Декларация" Тогда
			ЗаполнитьДекларациюНаКлиенте(Ложь);
		ИначеЕсли ДополнительныеПараметры.ЭтапПомощника = "ЗаписатьИЗакрыть" Тогда
			ЗаполнитьДекларациюНаКлиенте(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНомерКорректировкиНовойДекларации(Форма)
	
	Объект = Форма.Объект;
	
	Декларация3НДФЛ = Форма.Декларация3НДФЛ;
	Декларация3НДФЛСостояниеОтправки = Форма.Декларация3НДФЛСостояниеОтправки;
	
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		СостояниеДекларации3НДФЛ = СостояниеДекларации(Декларация3НДФЛСостояниеОтправки);
		Если СостояниеДекларации3НДФЛ.Сдано Или СостояниеДекларации3НДФЛ.Отправлено Тогда
			Объект.НомерКорректировки = НомерКорректировки(Декларация3НДФЛ) + 1;
			Форма.Декларация3НДФЛ = Неопределено;
			Форма.Декларация3НДФЛСостояниеОтправки = Неопределено;
		Иначе
			Объект.НомерКорректировки = НомерКорректировки(Декларация3НДФЛ);
		КонецЕсли;
	Иначе
		Объект.НомерКорректировки = 0;
	КонецЕсли;
	
	Декларация4НДФЛ = Форма.Декларация4НДФЛ;
	Декларация4НДФЛСостояниеОтправки = Форма.Декларация4НДФЛСостояниеОтправки;
	
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		СостояниеДекларации4НДФЛ = СостояниеДекларации(Декларация4НДФЛСостояниеОтправки);
		Если СостояниеДекларации4НДФЛ.Сдано Или СостояниеДекларации4НДФЛ.Отправлено Тогда
			Объект.НомерКорректировки4НДФЛ = НомерКорректировки(Декларация4НДФЛ) + 1;
			Форма.Декларация4НДФЛ = Неопределено;
			Форма.Декларация4НДФЛСостояниеОтправки = Неопределено;
		Иначе
			Объект.НомерКорректировки4НДФЛ = НомерКорректировки(Декларация4НДФЛ);
		КонецЕсли;
	Иначе
		Объект.НомерКорректировки4НДФЛ = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерКорректировки(Знач Декларация)
	
	Возврат Обработки.ПомощникЗаполнения3НДФЛ.НомерКорректировки(Декларация);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДекларациюНаКлиенте(ЗакрытьФормуПослеВыполнения = Ложь)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьДекларациюВФоне();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ОтчетностьГотовится = Ложь;
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ПолучатьРезультат = Истина;
		
		Если ЗакрытьФормуПослеВыполнения Тогда
			НастройкиОжидания.ВыводитьОкноОжидания = Истина;
		Иначе
			// Индикация длительной операции - на закладке "Декларация"
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			ИзменитьЭтапНаСервере("Декларация");
		КонецЕсли;
			
		ПараметрыОбработчика = Новый Структура("ЗакрытьФормуПослеВыполнения", ЗакрытьФормуПослеВыполнения);
		Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияЗаполнитьДекларацию", ЭтотОбъект, ПараметрыОбработчика);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДекларациюВФоне()
	
	ОтчетностьГотовится = Истина;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период", Объект.Период);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("НомерКорректировки", Объект.НомерКорректировки);
	СтруктураПараметров.Вставить("НомерКорректировки4НДФЛ", Объект.НомерКорректировки4НДФЛ);
	СтруктураПараметров.Вставить("ДоходыВычеты", Объект.ДоходыВычеты.Выгрузить());
	СтруктураПараметров.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения());
	СтруктураПараметров.Вставить("Декларация3НДФЛ", Декларация3НДФЛ);
	СтруктураПараметров.Вставить("Декларация3НДФЛВыбраннаяФорма", Декларация3НДФЛВыбраннаяФорма);
	
	СтруктураПараметров.Вставить("СформироватьДекларацию4НДФЛ", Объект.СформироватьДекларацию4НДФЛ);
	СтруктураПараметров.Вставить("ПредполагаемаяСуммаДоходов", Объект.ПредполагаемаяСуммаДоходов);
	СтруктураПараметров.Вставить("Декларация4НДФЛ", Декларация4НДФЛ);
	СтруктураПараметров.Вставить("Декларация4НДФЛВыбраннаяФорма", Декларация4НДФЛВыбраннаяФорма);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение декларации 3-НДФЛ из помощника'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникЗаполнения3НДФЛ.ЗаполнитьДекларацию", СтруктураПараметров, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияЗаполнитьДекларацию(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДекларации(ДлительнаяОперация.АдресРезультата);
	Иначе
		ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация);
	КонецЕсли;
	ОтчетностьГотовится = Ложь;
	
	ПараметрОповещения = Новый Структура("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Декларация3НДФЛ) Тогда
		ПараметрОповещения.Вставить("Ссылка", Декларация3НДФЛ);
		Оповестить("Запись_РегламентированныйОтчет", ПараметрОповещения);
	КонецЕсли;
	Если ЗначениеЗаполнено(Декларация4НДФЛ) Тогда
		ПараметрОповещения.Вставить("Ссылка", Декларация4НДФЛ);
		Оповестить("Запись_РегламентированныйОтчет", ПараметрОповещения);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если ДлительнаяОперация.Статус = "Выполнено" И ДополнительныеПараметры.ЗакрытьФормуПослеВыполнения Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияЗаполненияДекларации(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Декларация3НДФЛ = Результат.Декларация3НДФЛ;
	
	Объект.НалогКУплате = Результат.НалогКУплате;
	НалогКВозврату = Результат.НалогКВозврату;
	
	Декларация4НДФЛ = Результат.Декларация4НДФЛ;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуЗаполненияДекларации(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при заполнении декларации 3-НДФЛ:'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти