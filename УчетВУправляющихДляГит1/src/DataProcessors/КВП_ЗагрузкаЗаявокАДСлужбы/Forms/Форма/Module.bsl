
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Загружает сведения о заявках из файла.
//
Процедура ЗагрузитьЗаявки(АдресДвоичныхДанных, Отказ)
	
	Попытка
		
		ИмяФайлаДанныхНаСервере = ПолучитьИмяВременногоФайла(".xml");
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресДвоичныхДанных);
		ДвоичныеДанные.Записать(ИмяФайлаДанныхНаСервере);
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ИмяФайлаДанныхНаСервере);
		
		ПостроительDOM = Новый ПостроительDOM();
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
		ЧтениеXML.Закрыть();
		
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	СоответствиеСтатусов = Новый Соответствие;
	СписокСтатусов = ДокументDOM.ПолучитьЭлементыПоимени("", "status");
	Для Каждого ТекЭлемент Из СписокСтатусов Цикл
		СоответствиеСтатусов.Вставить(ТекЭлемент.ПолучитьАтрибут("id"), ТекЭлемент.ПолучитьАтрибут("title"));
	КонецЦикла;
	
	СоотвСтатусовПеречисление = Новый Соответствие;
	Для Каждого ТекЭлемент Из Перечисления.КВП_ВидыСтатусовВыполненияРабот Цикл
		СоотвСтатусовПеречисление.Вставить(Строка(ТекЭлемент), ТекЭлемент);
	КонецЦикла;

	СоответствиеОценок = Новый Соответствие;
	СписокОценок = ДокументDOM.ПолучитьЭлементыПоимени("", "mark");
	Для Каждого ТекЭлемент Из СписокОценок Цикл
		СоответствиеОценок.Вставить(ТекЭлемент.ПолучитьАтрибут("id"), ТекЭлемент.ПолучитьАтрибут("title"));
	КонецЦикла;
	
	СоотвОценокПеречисление = Новый Соответствие;
	Для Каждого ТекЭлемент Из Перечисления.КВП_ВидыОценокВыполненияРабот Цикл
		СоотвОценокПеречисление.Вставить(Строка(ТекЭлемент), ТекЭлемент);
	КонецЦикла;
	
	СписокЗаявок = ДокументDOM.ПолучитьЭлементыПоимени("", "request");
	Для Каждого ТекЭлемент Из СписокЗаявок Цикл
		НомерЗаявкиСтр   = ТекЭлемент.ПолучитьАтрибут("id");
		ДатаЗаявкиСтр    = ТекЭлемент.ПолучитьАтрибут("datecreate");
		ЛицевойСчетСтр   = ТекЭлемент.ПолучитьАтрибут("author");
		ОтветственныйСтр = ТекЭлемент.ПолучитьАтрибут("responsible_user");
		СтатусЗаявкиСтр  = ТекЭлемент.ПолучитьАтрибут("status");
		ОценкаЗаявкиСтр  = ТекЭлемент.ПолучитьАтрибут("mark");
		ТекстЗаявкиСтр   = СокрЛП(ТекЭлемент.ТекстовоеСодержимое);
		
		НоваяСтрока = Объект.Заявки.Добавить();
		НоваяСтрока.ФлагЗагрузки = Истина;
		НоваяСтрока.НомерЗаявки = НомерЗаявкиСтр;
		НоваяСтрока.ДатаЗаявки = ПолучитьДату(ДатаЗаявкиСтр);
		
		Если НЕ ЛицевойСчетСтр = "" Тогда
			НайденныйЛС = Справочники.КВП_ЛицевыеСчета.НайтиПоРеквизиту("Идентификатор", ЛицевойСчетСтр);
			Если НЕ НайденныйЛС = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
				НоваяСтрока.ЛицевойСчет = НайденныйЛС;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОтветственныйСтр = "" Тогда
			НайденныйОтветственный = Справочники.ФизическиеЛица.НайтиПоКоду(ОтветственныйСтр);
			Если НЕ НайденныйОтветственный = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
				НоваяСтрока.Ответственный = НайденныйОтветственный;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.СтатусЗаявки = СоотвСтатусовПеречисление[СоответствиеСтатусов[СтатусЗаявкиСтр]];
		НоваяСтрока.ОценкаЗаявки = СоотвОценокПеречисление[СоответствиеОценок[ОценкаЗаявкиСтр]];
		НоваяСтрока.ТекстЗаявки = ТекстЗаявкиСтр;
		
	КонецЦикла;
	
КонецПроцедуры  //ЗагрузитьЗаявки()

&НаСервере
// Формирует документы "Заявка на выполнение работ" на основании загруженных или введенных данных.
//
Процедура СформироватьЗаявки()
	
	Для Каждого СтрокаТЧ Из Объект.Заявки Цикл
		
		Если НЕ СтрокаТЧ.Документ.Пустая() ИЛИ СтрокаТЧ.ФлагЗагрузки = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОбъект = Документы.КВП_ЗаявкаНаВыполнениеРабот.СоздатьДокумент();
		ДокОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету;
		ДокОбъект.Организация = Объект.Организация;
		
		ОргПрефикс = Объект.Организация.Префикс;
		ДокОбъект.Номер = ?(ОргПрефикс = "", СтрокаТЧ.НомерЗаявки, 
		  ОргПрефикс + Прав(СтрокаТЧ.НомерЗаявки, СтрДлина(СтрокаТЧ.НомерЗаявки) - СтрДлина(ОргПрефикс)));
		ДокОбъект.Дата = СтрокаТЧ.ДатаЗаявки;
		
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокОбъект,
																	УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
		
		ДокОбъект.Приоритет      = Перечисления.КВП_ВидыПриоритетовВыполненияРабот.Средний;
		ДокОбъект.КатегорияВыполняемыхРабот = Справочники.УПЖКХ_КатегорииРабот.ТекущийРемонт;
		ДокОбъект.ВремяУдобноеДляЗаказчика = ДокОбъект.Дата;
		
		ДокОбъект.ЛицевойСчет = СтрокаТЧ.ЛицевойСчет;
		
		Если НЕ ДокОбъект.ЛицевойСчет.Пустая() Тогда
			СтруктАдрес = ПолучитьАдрес(ДокОбъект.ЛицевойСчет.Адрес.Владелец,
										Перечисления.КВП_ВидыАдресов.Здание);
			АдресДома   = СтруктАдрес.Представление;
			ДокОбъект.Адрес       = ПолучитьАдресПомещения(АдресДома, ДокОбъект.ЛицевойСчет.Адрес);
			ДокОбъект.Телефон     = ДокОбъект.ЛицевойСчет.Телефон;
		КонецЕсли;
		
		ДокОбъект.ОтветственныйЗаВыполнение = СтрокаТЧ.Ответственный;
		ДокОбъект.СтатусВыполнения = ?(СтрокаТЧ.СтатусЗаявки = Неопределено, 
									   Перечисления.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка, 
									   СтрокаТЧ.СтатусЗаявки);
		ДокОбъект.ОценкаВыполнения = СтрокаТЧ.ОценкаЗаявки;
		ДокОбъект.ТекстЗаявки = СтрокаТЧ.ТекстЗаявки;
		
		Попытка
			Если ДокОбъект.ОтветственныйЗаВыполнение.Пустая() Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			СтрокаТЧ.Документ = ДокОбъект.Ссылка;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован документ ""Заявка на выполнение работ"" № " + ДокОбъект.Номер + " от " + ДокОбъект.Дата);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Строка " + СтрокаТЧ.НомерСтроки + ": " + ОписаниеОшибки(), , , , Ложь);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры  //СформироватьЗаявки()

&НаСервере
// Преобразует полученный параметр в значение типа Дата.
//
Функция ПолучитьДату(ДатаЗаявкиСтр)
	
	Если ТипЗнч(ДатаЗаявкиСтр) = Тип("Строка") Тогда
		
		Попытка
			Возврат Дата(ДатаЗаявкиСтр);
		Исключение
		КонецПопытки;
		
		СтрокаЗначениеПоля = ДатаЗаявкиСтр;
		СпПараметровДаты = Новый СписокЗначений;
		
		РазделительДаты = ".";
		// Прочитаем параметры даты из файла загрузки.
		Для Индекс = 1 По 3 Цикл
			Позиция      = Найти(СтрокаЗначениеПоля, РазделительДаты);
			Если Позиция = 0 Тогда
				ПозицияПробела = Найти(СтрокаЗначениеПоля, " ");
				Если ПозицияПробела = 0 Тогда
					Позиция = СтрДлина(СтрокаЗначениеПоля) + 1;
				Иначе
					Позиция = ПозицияПробела;
				КонецЕсли;
			КонецЕсли;
			ПараметрДаты = Сред(СтрокаЗначениеПоля, 1, Позиция - 1);
			Если ПараметрДаты = "" Тогда
				Возврат Null;
			Иначе
				СпПараметровДаты.Добавить(ПараметрДаты);
			КонецЕсли;
			СтрокаЗначениеПоля = Прав(СтрокаЗначениеПоля, СтрДлина(СтрокаЗначениеПоля) - Позиция);
		КонецЦикла;
		
		ПараметрГод   = СпПараметровДаты[2].Значение;
		Если СтрДлина(ПараметрГод) = 2 Тогда
			ПараметрГод = "20" + ПараметрГод;
		КонецЕсли;
		
		Попытка
			Возврат Дата(Число(ПараметрГод), Число(СпПараметровДаты[1].Значение), Число(СпПараметровДаты[0].Значение));
		Исключение
			Возврат Null;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Null;
	
КонецФункции  //ПолучитьДату()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "Открытие" элемента ИмяФайлаЗагрузки.
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), "explorer " + Объект.ИмяФайлаЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	

КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" элемента ИмяФайлаЗагрузки.
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = "Файл данных (*.xml)|*.xml";
	ДиалогВыбораФайла.Расширение              = "xml";
	ДиалогВыбораФайла.Заголовок               = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = Объект.ИмяФайлаЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайлаЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

#Область ОбработчикиСобытийКоманднойПанели

&НаКлиенте
// Установить все флажки в табличной части.
//
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.Заявки Цикл
		Строка.ФлагЗагрузки = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Снять все флажки в табличной части.
//
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из Объект.Заявки Цикл
		Строка.ФлагЗагрузки = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на кнопку "Загрузить заявки".
//
Процедура ЗагрузитьЗаявкиНажатие(Команда)

	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗагрузитьЗаявкиНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаявкиНажатиеЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Заявки.Количество() > 0 Тогда
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗагрузитьЗаявкиНажатие", ЭтаФорма),
		"Табличная часть будет очищена. Продолжить?",
		РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗаявкиНажатиеПродолжение();

КонецПроцедуры //ЗагрузитьЗаявкиНажатие()

&НаКлиенте
// Обработчик результата вопроса, вызваннго в процедуре "ЗагрузитьЗаявкиНажатие()".
Процедура ОбработатьРезультатВопросаЗагрузитьЗаявкиНажатие(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Заявки.Очистить();
	ЗагрузитьЗаявкиНажатиеПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаЗагрузитьЗаявкиНажатие

&НаКлиенте
// Процедура-продолжение процедуры "ЗагрузитьЗаявкиНажатие()".
Процедура ЗагрузитьЗаявкиНажатиеПродолжение()
	
	Отказ = Ложь;
	
	Попытка
		
		ДвоичныеДанные = Новый ДвоичныеДанные(Объект.ИмяФайлаЗагрузки);
		АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если Не Отказ Тогда
		ЗагрузитьЗаявки(АдресДвоичныхДанных, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В процессе обработки файла возникли ошибки. Чтение файла не выполнено!");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗаявкиНажатие()

&НаКлиенте
// Обработчик нажатия на кнопку "Сформировать документы."
//
Процедура СформироватьДокументыНажатие(Команда)
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.");
		Возврат;
	КонецЕсли;
	
	СформироватьЗаявки()
	
КонецПроцедуры  //СформироватьДокументыНажатие()

#КонецОбласти