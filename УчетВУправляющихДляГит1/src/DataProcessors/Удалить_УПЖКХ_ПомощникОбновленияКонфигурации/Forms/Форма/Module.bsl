
#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервереФормы".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	Если Не ЭтоПолноправныйПользователь Тогда
		Возврат;
	КонецЕсли;
	
	РегламентныеЗаданияЗаблокированы = РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована();
	Если Не РегламентныеЗаданияЗаблокированы Тогда
		// Необходимо запретить работу регламентных заданий на время выполнения обновления.
		РегламентныеЗаданияСервер.ЗаблокироватьРаботуСВнешнимиРесурсами();
	КонецЕсли;
	
	// Обработка может быть запущена в 2 режимах: в режиме выгрузки и в режиме загрузки.
	Если Параметры.Свойство("ЗапуститьПомощникОбновленияДляЗагрузкиДанных") Тогда
		
		// В зависимости от этого параметра производится основное разделение механизма на выгрузку и загрузку.
		ЭтоРежимЗагрузкиДанных = Истина;
		
		ПараметрыОбновления = Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Получить().Получить();
		Если ТипЗнч(ПараметрыОбновления) = Тип("Структура") Тогда
			ПутьКФайлуЗагрузки = ПараметрыОбновления.ПутьКФайлуВыгрузки;
			ДанныеЗагружены    = ПараметрыОбновления.ДанныеЗагружены;
		КонецЕсли;
		
	КонецЕсли;
	
	ТипФайлаРезервнойКопии = 1;
	ЗаполнитьСписокВыбораВариантовРезервнойКопии();
	
	СценарийОбновленияКонфигурации(ЭтоРежимЗагрузкиДанных);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	Если Не ЭтоПолноправныйПользователь Тогда
		ПоказатьПредупреждение(,"Обновление версии программы доступно только пользователям с полными правами. Обратитесь к администратору.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьПорядковыйНомерПерехода(0);
	
	Если ЭтоРежимЗагрузкиДанных Тогда
		
		Файл = Новый Файл(ПутьКФайлуЗагрузки);
		Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		// Если путь к файлу сохранен, получен из константы, а файл существует, то давать пользователю выбирать
		// файл не будем - он должен загрузить данные из этого файла.
		Элементы.ПутьКФайлуЗагрузки.ТолькоПросмотр = Истина;
		Элементы.ПутьКФайлуЗагрузки.КнопкаВыбора   = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПредЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "Для закрытия программы необходимо завершить или отменить процедуру обновления.";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// РЗ не были заблокированы до начала обновления. Необходимо вернуть начальное состояние.
	Если Не РегламентныеЗаданияЗаблокированы Тогда
		РазблокироватьРЗНаСервере();
	КонецЕсли;
	
	Если ЭтоРежимЗагрузкиДанных Тогда
		
		Если Не ДанныеЗагружены Тогда
			// Режим загрузки данных. Пока пользователь не загрузит данные - работа в программе невозможна.
			ЗавершитьРаботуСистемы(Ложь);
		Иначе
			РазблокироватьИБ(ИБЗаблокирована);
		КонецЕсли;
		
	Иначе
		
		// Данные удалены. Корректная работа программы невозможна, завершаем работу системы.
		Если ДанныеУдаленыУспешно Тогда
			ИнформацияОСоединениях = ПолучитьСоединенияНаСервере();
			Если Не ИнформацияОСоединениях.НаличиеСоединенияКонфигуратором Тогда
				ЗавершитьРаботуСистемы(Ложь, Истина, "CONFIG");
			Иначе
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
		Иначе
			РазблокироватьИБ(ИБЗаблокирована);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыУправленияВнешнимВидомФормы

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью и доступностью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ПутьКФайлуРезервнойКопии.Видимость = Форма.РезервнаяКопияСделана;
	Элементы.ТипФайлаРезервнойКопии.Видимость   = Форма.РезервнаяКопияСделана;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПутьКФайлуРезервнойКопии".
//
Процедура ПутьКФайлуРезервнойКопииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипФайлаРезервнойКопии = 1 Тогда
		Фильтр = "Файл выгрузки информационной базы 1С (*.dt)|*.dt";
	ИначеЕсли ТипФайлаРезервнойКопии = 2 Тогда
		Фильтр = "Файл базы данных 1С (*.1CD)|*.1CD";
	ИначеЕсли ТипФайлаРезервнойКопии = 3 Тогда
		Фильтр = "Любой файл|*.*";
	Иначе
		Фильтр = "";
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл резервной копии информационной базы";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Фильтр                      = Фильтр;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ПутьКФайлуРезервнойКопииНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуРезервнойКопииНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПутьКФайлуРезервнойКопии = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РезервнаяКопияСделана".
//
Процедура РезервнаяКопияСделанаПриИзменении(Элемент)
	
	Если Не РезервнаяКопияСделана Тогда
		ПутьКФайлуРезервнойКопии = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КаталогСохраненияФайлов".
//
Процедура КаталогСохраненияФайловНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога сохранения файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогСохраненияФайловНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияФайловНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогСохраненияФайлов = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "КаталогСохраненияФайлов".
//
Процедура КаталогСохраненияФайловОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогСохраненияФайловОткрытиеЗавершение", ЭтотОбъект), "explorer " + КаталогСохраненияФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогСохраненияФайловОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПутьКФайлуЗагрузки".
//
Процедура ПутьКФайлуЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл загрузки данных";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Фильтр             = "(Файл загрузки данных (*.xml)|*.xml";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ПутьКФайлуЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПутьКФайлуЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "ПутьКФайлуЗагрузки".
//
Процедура ПутьКФайлуЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на гиперссылку "АктивныеПользователи".
//
Процедура АктивныеПользователиНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокАктивныхПользователейЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.АктивныеПользователи", , , , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипФайлаРезервнойКопии".
//
Процедура ТипФайлаРезервнойКопииПриИзменении(Элемент)
	
	ПутьКФайлуРезервнойКопии = "";
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаНавигационнойСсылки" поля "ДекорацияСделатьРезервнуюКопию".
//
Процедура ДекорацияСделатьРезервнуюКопиюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "Открыть конфигуратор" Тогда
		Если Не КонфигураторЗапущен() Тогда
			ЗавершитьРаботуСистемы(Истина, Истина, "CONFIG");
		Иначе
			ЗавершитьРаботуСистемы(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДекорацияСделатьРезервнуюКопиюОбработкаНавигационнойСсылки()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаДалее".
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаГотово".
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаОтмена".
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СделатьРезервнуюКопию".
//
Процедура КомандаСделатьРезервнуюКопию(Команда)
	
	Если Не КонфигураторЗапущен() Тогда
		ЗавершитьРаботуСистемы(Истина, Истина, "CONFIG");
	Иначе
		ЗавершитьРаботуСистемы(Истина);
	КонецЕсли;
	
КонецПроцедуры // КомандаСделатьРезервнуюКопию()

#КонецОбласти

#Область ПроцедурыОбработкиПереходаМеждуСтраницами

&НаСервере
// Процедура заполнения сценария помощника.
Процедура СценарийОбновленияКонфигурации(ЭтоРежимЗагрузкиДанных)
	
	ТаблицаПереходов.Очистить();
	
	Если Не ЭтоРежимЗагрузкиДанных Тогда
		// Сценарий выгрузки.
		ТаблицаПереходовНоваяСтрока(0, "ГруппаРезервнаяКопия",  "СтраницаНавигацииНачало",
									, , "ГруппаРезервнаяКопия_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(1, "ГруппаОшибкаБлокировкиИБ", "СтраницаНавигацииПродолжение",,
										"ГруппаОшибкаБлокировкиИБ_ПриОткрытии", "ГруппаОшибкаБлокировкиИБ_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(2, "ГруппаВыгрузкаДанных", "СтраницаНавигацииПродолжение",
									, , "ГруппаВыгрузкаДанных_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(3, "ГруппаУдалениеДанных", "СтраницаНавигацииПродолжение",,
										"ГруппаУдалениеДанных_ПриОткрытии", "ГруппаУдалениеДанных_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(4, "ГруппаЗавершено", "СтраницаНавигацииОкончание");
		
		ТаблицаПереходовНоваяСтрока(5, "ГруппаЗавершеноСОшибкой", "СтраницаНавигацииОкончание",,
										"ГруппаЗавершеноСОшибкой_ПриОткрытии");
		
	Иначе
		// Сценарий загрузки.
		ТаблицаПереходовНоваяСтрока(0, "ГруппаЗагрузка",  "СтраницаНавигацииНачало",
									, , "ГруппаЗагрузка_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(1, "ГруппаОшибкаБлокировкиИБ", "СтраницаНавигацииПродолжение",,
										"ГруппаОшибкаБлокировкиИБ_ПриОткрытии", "ГруппаОшибкаБлокировкиИБ_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(2, "ГруппаЗагрузкаЗавершение", "СтраницаНавигацииОкончание");
		ТаблицаПереходовНоваяСтрока(3, "ГруппаЗавершеноСОшибкой", "СтраницаНавигацииОкончание",,
										"ГруппаЗавершеноСОшибкой_ПриОткрытии");
		
	КонецЕсли;
	
КонецПроцедуры // СценарийОбновленияКонфигурации()

&НаСервере
// Процедура добавляет новую строку в таблицу переходов.
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры // ТаблицаПереходовНоваяСтрока()

&НаКлиенте
// Процедура изменяет порядковый номер перехода.
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры // ИзменитьПорядковыйНомерПерехода()

&НаКлиенте
// Процедура устанавливает порядковый номер перехода.
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры // УстановитьПорядковыйНомерПерехода()

&НаКлиенте
// Возникает при изменении порядкового номера перехода.
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);

	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = 
		ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	//
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ГруппаОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		КнопкаДалее.Заголовок = УстановитьТекстКнопкиДалееПоТекущейСтранице(Элементы.ГруппаОсновная.ТекущаяСтраница);
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			КнопкаГотово.Заголовок = УстановитьТекстКнопкиДалееПоТекущейСтранице(Элементы.ГруппаОсновная.ТекущаяСтраница);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ПорядковыйНомерПереходаПриИзменении()

&НаКлиенте
// Функция возвращает кнопку формы по имени команды.
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьКнопкуФормыПоИмениКоманды()

&НаКлиенте
// Процедура выполняет обработчики длительной операции.
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = 
		ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОбработчикДлительнойОперации()

&НаКлиенте
// Процедура выполняет обработчики перехода.
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = 
			ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = 
			ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = 
		ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОбработчикиСобытийПерехода()

#КонецОбласти

#Область ОбработчикиПереходаМеждуСтраницами

&НаКлиенте
// Обработчик перехода со страницы "ГруппаРезервнаяКопия".
//
Функция Подключаемый_ГруппаРезервнаяКопия_ПриПереходеДалее(Отказ)
	
	Отказ = Не РезервнаяКопияСделана;
	Если Отказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для продолжения необходимо сохранить резервную копию.");
		Возврат Неопределено;
	КонецЕсли;
	
	Отказ = ПустаяСтрока(ПутьКФайлуРезервнойКопии) Или Не ФайлСуществует(ПутьКФайлуРезервнойКопии);
	Если Отказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файл резервной копии не выбран или не существует.");
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = Элементы.ДекорацияРасшифровкаОшибки.Заголовок;
	ТекстОшибки = СтрШаблон(ТекстОшибки, ПутьКФайлуРезервнойКопии);
	Элементы.ДекорацияРасшифровкаОшибки.Заголовок = ТекстОшибки;
	
	ЗаблокироватьИБ(ИБЗаблокирована);
	
	Если ИБЗаблокирована Тогда
		ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода);
	КонецЕсли;
	
КонецФункции // Подключаемый_ГруппаРезервнаяКопия_ПриПереходеДалее()

&НаКлиенте
// Обработчик перехода со страницы "ГруппаВыгрузкаДанных".
//
Функция Подключаемый_ГруппаВыгрузкаДанных_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(КаталогСохраненияФайлов) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог сохранения файлов обмена.");
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьСуществованиеКаталога(КаталогСохраненияФайлов) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Путь к каталогу указан неверно, либо недостаточно прав для работы с каталогом.");
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	НачатьПроцессВыгрузкиДанных();
	
КонецФункции // Подключаемый_ГруппаВыгрузкаДанных_ПриПереходеДалее()

&НаКлиенте
// Обработчик перехода со страницы "ГруппаУдалениеДанных".
//
Функция Подключаемый_ГруппаУдалениеДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ТекстСообщения = Элементы.ДекорацияУдалениеИнформация.Заголовок;
	Элементы.ДекорацияУдалениеИнформация.Заголовок = СтрШаблон(ТекстСообщения, КаталогСохраненияФайлов);
	
КонецФункции // Подключаемый_ГруппаУдалениеДанных_ПриОткрытии()

&НаКлиенте
// Обработчик перехода со страницы "ГруппаУдалениеДанных".
//
Функция Подключаемый_ГруппаУдалениеДанных_ПриПереходеДалее(Отказ)
	
	Форма = ОткрытьФормуДлительнойОперации(3);
	
	УдалитьДанныеНаСервере(Отказ);
	
	Форма.Закрыть();
	
	Если Отказ Тогда
		УстановитьПорядковыйНомерПерехода(4);
	КонецЕсли;
	
КонецФункции // Подключаемый_ГруппаУдалениеДанных_ПриПереходеДалее()

&НаКлиенте
// Обработчик перехода со страницы "ГруппаЗавершеноСОшибкой".
//
Функция Подключаемый_ГруппаЗавершеноСОшибкой_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.ДекорацияСообщениеОбОшибке.Заголовок = ТекстОшибки;
	ЭтотОбъект.Заголовок = "Возникли ошибки при обновлении конфигурации";
	
КонецФункции // Подключаемый_ГруппаЗавершеноСОшибкой_ПриОткрытии()

&НаКлиенте
// Обработчик перехода со страницы "ГруппаЗагрузка".
//
Функция Подключаемый_ГруппаЗагрузка_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(ПутьКФайлуЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан путь к файлу загрузки.");
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ФайлСуществует(ПутьКФайлуЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Путь к файлу загрузки указан неверно или файл не существует.");
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаблокироватьИБ(ИБЗаблокирована);
	
	// Если ИБ удалось заблокировать, то показывать будем начальную страницу загрузки, при этом начнем загрузку данных.
	// По окончании загрузки, "перескочим" через страницу ошибки блокировки и перейдем сразу на страницу успешного завершения.
	Если ИБЗаблокирована Тогда
		
		Если ПорядковыйНомерПерехода = 1 Тогда
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода);
		КонецЕсли;
		
		ЗагрузитьДанные();
		
	КонецЕсли;
	
КонецФункции // Подключаемый_ГруппаЗагрузка_ПриПереходеДалее()

&НаКлиенте
// Обработчик перехода со страницы "ГруппаОшибкаБлокировкиИБ".
//
Функция Подключаемый_ГруппаОшибкаБлокировкиИБ_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ОбновитьКоличествоАктивныхСеансов();
	ПодключитьОбработчикОжидания("ОбновитьКоличествоАктивныхСеансов", 10, Истина);
	
	Если Не ЭтоРежимЗагрузкиДанных Тогда
		Элементы.ТекстСообщенияОбОшибке.Заголовок = "Невозможно начать обновление программы, т.к. с ней работают другие пользователи:";
	Иначе
		Элементы.ТекстСообщенияОбОшибке.Заголовок = "Невозможно начать загрузку данных, т.к. с программой работают другие пользователи:";
	КонецЕсли;
	
КонецФункции // Подключаемый_ГруппаОшибкаБлокировкиИБ_ПриОткрытии()

&НаКлиенте
// Обработчик перехода со страницы "ГруппаОшибкаБлокировкиИБ".
//
Функция Подключаемый_ГруппаОшибкаБлокировкиИБ_ПриПереходеДалее(Отказ)
	
	Отказ = Истина;
	
	ОбновитьКоличествоАктивныхСеансов();
	
КонецФункции // Подключаемый_ГруппаОшибкаБлокировкиИБ_ПриПереходеДалее()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Формирует список выбора вариантов типов резервных типов.
//
Процедура ЗаполнитьСписокВыбораВариантовРезервнойКопии()
	
	Элементы.ТипФайлаРезервнойКопии.СписокВыбора.Очистить();
	
	НовыйЭлемент = Элементы.ТипФайлаРезервнойКопии.СписокВыбора.Добавить();
	НовыйЭлемент.Значение = 1;
	НовыйЭлемент.Представление = "Файл выгрузки информационной базы 1С (*.dt)";
	
	Если УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая() Тогда
		НовыйЭлемент = Элементы.ТипФайлаРезервнойКопии.СписокВыбора.Добавить();
		НовыйЭлемент.Значение = 2;
		НовыйЭлемент.Представление = "Файл базы данных 1С (*.1CD)";
	КонецЕсли;
	
	НовыйЭлемент = Элементы.ТипФайлаРезервнойКопии.СписокВыбора.Добавить();
	НовыйЭлемент.Значение = 3;
	НовыйЭлемент.Представление = "Резервная копия в ином формате";
	
КонецПроцедуры // ЗаполнитьСписокВыбораВариантовРезервнойКопии()

&НаКлиенте
// Вызывает процедуру обновления списка активных пользователей.
//
Процедура ОткрытьСписокАктивныхПользователейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКоличествоАктивныхСеансов();
	
КонецПроцедуры // ОткрытьСписокАктивныхПользователейЗавершение()

&НаКлиенте
// Получает актуальную информацию о текущих активных сеансах.
//
Процедура ОбновитьКоличествоАктивныхСеансов()
	
	ОтключитьОбработчикОжидания("ОбновитьКоличествоАктивныхСеансов");
	
	АктивныеПользователи = "АктивныеПользователи";
	АктивныеПользователиШаблон = НСтр("ru = 'Активные пользователи (%1)'");
	
	Результат = КоличествоАктивныхСеансовНаСервере();
	Если Результат > 0 Тогда
		
		// Раз в 10 секунд будем проверять, остались ли еще активные пользователи.
		Элементы[АктивныеПользователи].Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(АктивныеПользователиШаблон, Результат);
		ПодключитьОбработчикОжидания("ОбновитьКоличествоАктивныхСеансов", 10, Истина);
		
	Иначе
		
		ЗаблокироватьИБ(ИБЗаблокирована);
		Если ИБЗаблокирована Тогда
			Если ЭтоРежимЗагрузкиДанных Тогда
				// Для режима загрузки данных алгоритм следующий:
				// 1. Как только все пользователи вышли, показываем обратно первую страницу - до загрузки.
				// 2. При этом начинаем загружать данные - автоматически, не дожидаясь каких-либо действий пользователя.
				// 3. После загрузки данных в ручном режиме переходим на последнюю страницу.
				
				ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода);
				
				ЗагрузитьДанные();
				
			Иначе
				// Для режима выгрузки данных автоматически переходим на следующую страницу, на которой производим непосредственно
				// саму выгрузку.
				ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода);
				
			КонецЕсли;
			
			// Если мы в сценарии загрузки, сразу начинаем загрузку.
		Иначе
			ПодключитьОбработчикОжидания("ОбновитьКоличествоАктивныхСеансов", 10, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьКоличествоАктивныхСеансов()

&НаСервереБезКонтекста
// Возвращает количество сеансов, препятствующих блокировке ИБ.
//
Функция КоличествоАктивныхСеансовНаСервере()
	
	СеансыИнформационнойБазы = ПолучитьСеансыИнформационнойБазы();
	
	НомерСеансаТекущегоПользователя = НомерСеансаИнформационнойБазы();
	КоличествоСеансовПрепятствующихПродолжению = 0;
	Для Каждого СеансИБ Из СеансыИнформационнойБазы Цикл
		
		Если СеансИБ.ИмяПриложения = "Designer"
			Или СеансИБ.НомерСеанса = НомерСеансаТекущегоПользователя Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСеансовПрепятствующихПродолжению = КоличествоСеансовПрепятствующихПродолжению + 1;
	КонецЦикла;
	
	Возврат КоличествоСеансовПрепятствующихПродолжению;
	
КонецФункции // КоличествоАктивныхСеансовНаСервере()

&НаСервереБезКонтекста
// Возвращает факт запуска конфигуратора.
//
Функция КонфигураторЗапущен()
	
	Возврат СоединенияИБ.ИнформацияОСоединениях().НаличиеСоединенияКонфигуратором;
	
КонецФункции // КонфигураторЗапущен()

&НаСервереБезКонтекста
// Возвращает информацию о текущих соединениях.
//
Функция ПолучитьСоединенияНаСервере()
	
	Возврат СоединенияИБ.ИнформацияОСоединениях();
	
КонецФункции // ПолучитьСоединенияНаСервере()

&НаКлиенте
// Устанавливает текст кнопки "Далее" в зависимости от текущей страницы основной панели.
//
Функция УстановитьТекстКнопкиДалееПоТекущейСтранице(ТекущаяСтраница)
	
	ТекстКнопки = "Далее >>";
	
	Если ТекущаяСтраница = Элементы.ГруппаРезервнаяКопия Тогда
		ТекстКнопки = "Продолжить >>";
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаОшибкаБлокировкиИБ Тогда
		ТекстКнопки = "Повторить";
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаВыгрузкаДанных Тогда
		ТекстКнопки = "Выгрузить данные >>";
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаУдалениеДанных Тогда
		ТекстКнопки = "Продолжить >>";
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗавершено Тогда
		ТекстКнопки = "Завершить работу и перейти к обновлению конфигурации";
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗавершеноСОшибкой Тогда
		ТекстКнопки = "Завершить";
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		ТекстКнопки = "Загрузить данные >>";
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗагрузкаЗавершение Тогда
		ТекстКнопки = "Начать работу";
	КонецЕсли;
	
	Возврат ТекстКнопки;
	
КонецФункции // УстановитьТекстКнопкиДалееПоТекущейСтранице()

&НаСервереБезКонтекста
// Устанавливает или снимает привилегированный режим.
//
// Устанавливаем при выгрузке, удалении и загрузке данных.
//
// Если Параметр = Истина, то устанавливаем, в противном случае - снимаем.
Процедура УстановитьСнятьПривелигированныйРежим(Параметр)
	
	ПривилегированныйРежим = ПривилегированныйРежим();
	Если Не Параметр = ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Параметр);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСнятьПривелигированныйРежим()

&НаСервереБезКонтекста
// Выполняет попытку блокировки ИБ.
//
Процедура ЗаблокироватьИБ(ИБЗаблокирована)
	
	Попытка
		ОбщегоНазначения.ЗаблокироватьИБ();
		ИБЗаблокирована = Истина;
	Исключение
		ИБЗаблокирована = Ложь;
	КонецПопытки;
	
КонецПроцедуры // ЗаблокироватьИБ()

&НаСервереБезКонтекста
// При необходимости выполняет разблокировку ИБ.
//
Процедура РазблокироватьИБ(ИБЗаблокирована)
	
	Если ИБЗаблокирована Тогда
		ОбщегоНазначения.РазблокироватьИБ();
		ИБЗаблокирована = Ложь;
	КонецЕсли;
	
КонецПроцедуры // РазблокироватьИБ()

&НаСервереБезКонтекста
// Процедура выполняет разблокировку регламентых заданий.
//
Процедура РазблокироватьРЗНаСервере()
	
	РегламентныеЗаданияСервер.РазблокироватьРаботуСВнешнимиРесурсами();
	
КонецПроцедуры // РазблокироватьРЗНаСервере()

&НаСервереБезКонтекста
// Получает макет по имени из текущей обработки.
//
Функция ПолучитьМакетНаСервере(ИмяМакета)
	
	Возврат Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМакет(ИмяМакета);
	
КонецФункции // ПолучитьМакетНаСервере()

&НаКлиенте
// Проверяет существование каталога по переданному пути.
//
Функция ПроверитьСуществованиеКаталога(ИмяКаталога)
	
	Попытка
		КаталогНаДиске = Новый Файл(ИмяКаталога);
		Возврат КаталогНаДиске.Существует();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ПроверитьСуществованиеКаталога()

&НаКлиенте
// Проверка существования файла по переданному пути.
//
Функция ФайлСуществует(ПутьФайла)
	
	Попытка
		ОписательФайла = Новый Файл(ПутьФайла);
		Возврат ОписательФайла.Существует() И ОписательФайла.Размер() > 0;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ФайлСуществует()

&НаКлиенте
// Выполняет распаковку заархивированного файла формата zip.
//
Функция РаспаковатьZipФайл(ИмяФайлаДляРаспаковки)
	
	ИмяРаспакованногоФайла = "";
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ИмяФайлаДляРаспаковки, "");
		
		Если Архиватор.Элементы.Количество() > 0 Тогда
			
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогСохраненияФайлов);
			ИмяРаспакованногоФайла = ПолучитьИмяФайлаОбмена(КаталогСохраненияФайлов, Архиватор.Элементы[0].Имя);
			
		Иначе
			
			ИмяРаспакованногоФайла = "";
			
		КонецЕсли;
		
		Архиватор.Закрыть();
	
	Исключение
		Возврат "";
	КонецПопытки;
	
	Возврат ИмяРаспакованногоФайла;
	
КонецФункции // РаспаковатьZipФайл()

&НаКлиенте
// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры:
//  ИмяКаталога  - Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     - Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка - полное имя файла с учетом каталога.
//
Функция ПолучитьИмяФайлаОбмена(ИмяКаталога, ИмяФайла)
	
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;	
	Иначе
		Возврат ИмяКаталога;
	КонецЕсли;
	
КонецФункции // ПолучитьИмяФайлаОбмена()

&НаКлиенте
// Открывает форму ожидания процесса.
//
Функция ОткрытьФормуДлительнойОперации(КодОперации)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекстСообщения", ПолучитьОписаниеТекущейОперацииПоКоду(КодОперации));
	Если ЭтоРежимЗагрузкиДанных Тогда
		ПараметрыОткрытия.Вставить("ЗаголовокФормы", "Завершение обновления версии программы");
	КонецЕсли;
	
	Возврат ОткрытьФорму("Обработка.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.Форма.ДлительнаяОперация", ПараметрыОткрытия, ЭтотОбъект, ,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецФункции // ОткрытьФормуДлительнойОперации()

&НаСервереБезКонтекста
// Записывает параметр по ключу в константу "УПЖКХ_ПараметрыОбновленияКонфигурации".
//
Процедура ЗаписатьПараметрОбновленияВКонстанту(Ключ, Значение)
	
	ПараметрыОбновления = Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Получить().Получить();
	Если ТипЗнч(ПараметрыОбновления) = Тип("Структура") Тогда
		ПараметрыОбновления.Вставить(Ключ, Значение);
		Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Установить(Новый ХранилищеЗначения(ПараметрыОбновления));
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьПараметрОбновленияВКонстанту()

&НаКлиенте
// Удаляет файл по переданному пути.
//
Процедура УдалитьФайлНаКлиенте(Имя)
	
	Попытка
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлНаКлиентеЗавершение", ЭтотОбъект), Имя);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрШаблон("Не удалось удалить файл %1", Имя));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлНаКлиентеЗавершение(ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры // УдалитьФайлНаКлиенте()

&НаКлиенте
// Получает текст описания ждля формы ожидания по числовому коду.
//
Функция ПолучитьОписаниеТекущейОперацииПоКоду(Код)
	
	ТекстОписания = "";
	Если Код = 1 Тогда
		
		// Сравнение конфигураций.
		ТекстОписания = "Выполняется анализ структуры метаданных конфигурации.";
		
	ИначеЕсли Код = 2 Тогда
		
		// Выгрузка данных.
		ТекстОписания = "Производится выгрузка данных. Процесс выгрузки может занять длительное время в зависимости от объема данных.";
		
	ИначеЕсли Код = 3 Тогда
		
		// Удаление данных.
		ТекстОписания = "Производится очистка данных. Процесс очистки может занять длительное время в зависимости от объема данных.";
		
	ИначеЕсли Код = 4 Тогда
		
		// Загрузка данных.
		ТекстОписания = "Производится загрузка данных. Процесс загрузки может занять длительное время в зависимости от объема данных.";
		
	КонецЕсли;
	
	Возврат ТекстОписания;
	
КонецФункции // ПолучитьОписаниеТекущейОперацииПоКоду()

&НаКлиенте
// Переходит на страницу ошибки операции.
//
Процедура ПерейтиНаСтраницуОшибкиОбновления(Текст)
	
	// Реквизиту формы присваиваем текст текущей ошибки для отображения в форме.
	ТекстОшибки = Текст;
	
	Если ЭтоРежимЗагрузкиДанных Тогда
		УстановитьПорядковыйНомерПерехода(3);
	Иначе
		УстановитьПорядковыйНомерПерехода(5);
	КонецЕсли;
	
КонецПроцедуры // ПерейтиНаСтраницуОшибкиОбновления()

#КонецОбласти

#Область ПроцедурыИФункцииУниверсальнойВыгрузкиЗагрузкиДанных

// СРАВНЕНИЕ КОНФИГУРАЦИЙ.

&НаКлиенте
// Получает файл структуры конфигурации из mxl макета, разархивирует его и помещает во временное хранилище
// для извлечения на сервере.
//
Функция НачатьПроцессВыгрузкиДанных()
	
	// Первым делом производим сравнение конфигураций.
	МакетСтруктурыКонфигурации = ПолучитьМакетНаСервере("СтруктураКонфигурации");
	
	ИмяВременногоФайла = "Архив структуры конфигурации.zip";
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяВременногоФайла, "\");
	
	КоличествоПодстрок = МассивПодстрок.Количество();
	Если КоличествоПодстрок > 0 Тогда
		ИмяФайла = СокрЛП(МассивПодстрок.Получить(КоличествоПодстрок - 1));
		ИмяАрхиваДляЗаписиПравилОбмена = КаталогСохраненияФайлов + "\" + ИмяФайла;
	КонецЕсли;
	
	Попытка
		МакетСтруктурыКонфигурации.Записать(ИмяАрхиваДляЗаписиПравилОбмена);
		MXLФайлСтруктурыКонфигурации = РаспаковатьZipФайл(ИмяАрхиваДляЗаписиПравилОбмена);
		УдалитьФайлНаКлиенте(ИмяАрхиваДляЗаписиПравилОбмена);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Недостаточно прав для сохранения файлов в выбранном каталоге.");
		Возврат Неопределено;
	КонецПопытки;
	
	ДопПараметры = Новый Структура;
	//ДопПараметры.Вставить("Отказ", Отказ);
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_СравнениеКонфигураций", ЭтаФорма, ДопПараметры),
						 ,
						 MXLФайлСтруктурыКонфигурации,
						 Ложь,
						 Новый УникальныйИдентификатор);
	
КонецФункции // НачатьПроцессВыгрузкиДанных()

&НаКлиенте
// Выполняет сравнение основной конфигурации и конфигурации поставщика.
// Если отличия не найдены - начинает выгрузку данных.
Процедура ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_СравнениеКонфигураций(РезультатПомещения, АдресФайлаВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если РезультатПомещения = Истина Тогда
		
		Форма = ОткрытьФормуДлительнойОперации(1);
		
		ЕстьОтличияВКонфигурациях = ПроверитьОтличияВМетаданныхОсновнойКонфигурацииИКонфигурацииПоставкиНаСервере(АдресФайлаВХранилище);
		
		Форма.Закрыть();
		
		Если Не ЕстьОтличияВКонфигурациях Тогда
			
			НачатьВыгрузкуДанных();
			
		Иначе
			
			ПерейтиНаСтраницуОшибкиОбновления("В основной конфигурации имеются изменения относительно конфигурации поставщика.");
			
		КонецЕсли;
		
		УдалитьФайлНаКлиенте(ВыбранноеИмяФайла);
		
	Иначе
		
		ПерейтиНаСтраницуОшибкиОбновления("Возникла ошибка при передаче файла на сервер.");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_СравнениеКонфигураций()

// ВЫГРУЗКА.

&НаКлиенте
// Получает файл правил обмена из xml макета, разархивирует его и помещает во временное хранилище
// для последующего извлечения на сервере.
//
Процедура НачатьВыгрузкуДанных()
	
	ИмяАрхиваДляЗаписиПравилОбмена = "";
	ИмяXMLДляЗаписиПравилОбмена = "";
	
	// Загрузка правил обмена.
	//МакетПравилОбмена = Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМакет("ПравилаОбмена");
	МакетПравилОбмена = ПолучитьМакетНаСервере("ПравилаОбмена");
	
	ИмяВременногоФайла = "Архив правил обмена.zip";
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяВременногоФайла, "\");
	
	КоличествоПодстрок = МассивПодстрок.Количество();
	Если КоличествоПодстрок > 0 Тогда
		ИмяФайла = СокрЛП(МассивПодстрок.Получить(КоличествоПодстрок - 1));
		ИмяАрхиваДляЗаписиПравилОбмена = КаталогСохраненияФайлов + "\" + ИмяФайла;
	КонецЕсли;
	
	Попытка
		МакетПравилОбмена.Записать(ИмяАрхиваДляЗаписиПравилОбмена);
		ИмяXMLДляЗаписиПравилОбмена = РаспаковатьZipФайл(ИмяАрхиваДляЗаписиПравилОбмена);
		УдалитьФайлНаКлиенте(ИмяАрхиваДляЗаписиПравилОбмена);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Недостаточно прав для сохранения файлов в выбранном каталоге.");
		Возврат;
	КонецПопытки;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекОперация", "ВыгрузкаДанных");
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_ВыгрузкаДанных", ЭтаФорма, ДопПараметры),
						 ,
						 ИмяXMLДляЗаписиПравилОбмена,
						 Ложь,
						 Новый УникальныйИдентификатор);
	
КонецПроцедуры // НачатьВыгрузкуДанных()

&НаКлиенте
// Выгружает данные в файл и записывает полученный файл на клиенте в выбранный каталог.
//
Процедура ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_ВыгрузкаДанных(РезультатПомещения, АдресФайлаВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если РезультатПомещения = Истина Тогда
		
		Форма = ОткрытьФормуДлительнойОперации(2);
		
		ПутьКФайлуВыгрузки = ВыгрузитьДанныеНаСервере(АдресФайлаВХранилище);
		
		Форма.Закрыть();
		
		Если Не ПустаяСтрока(ПутьКФайлуВыгрузки) Тогда
		
			ИмяФайлаВКаталоге = КаталогСохраненияФайлов + "\Файл выгрузки данных.xml";
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлуВыгрузки);
			ДанныеФайла.Записать(ИмяФайлаВКаталоге);
			
			// Запись пути файла в константу.
			ЗаписатьПараметрОбновленияВКонстанту("ПутьКФайлуВыгрузки", ИмяФайлаВКаталоге);
			
		Иначе
			
			ПерейтиНаСтраницуОшибкиОбновления("Возникли ошибки при выгрузке данных.");
			
		КонецЕсли;
		
		УдалитьФайлНаКлиенте(ВыбранноеИмяФайла);
		
	Иначе
		
		ПерейтиНаСтраницуОшибкиОбновления("Возникла ошибка при передаче файла на сервер.");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_ВыгрузкаДанных()

&НаСервере
// Выполняет выгрузку данных на основании правил обмена.
//
Функция ВыгрузитьДанныеНаСервере(АдресФайлаПравилОбменаВХранилище)
	
	УстановитьСнятьПривелигированныйРежим(Истина);
	
	АдресФайлаВыгрузки = "";
	
	Попытка
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаПравилОбменаВХранилище);
		ИмяXMLДляЗаписиПравилОбмена = ПолучитьИмяВременногоФайла("xml");
		
		ДанныеФайла.Записать(ИмяXMLДляЗаписиПравилОбмена);
	Исключение
		Возврат АдресФайлаВыгрузки;
	КонецПопытки;
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	
	ОбъектДляСервера.ЗагрузитьПравилаОбмена(ИмяXMLДляЗаписиПравилОбмена);
	
	// Выгрузка.
	ИмяФайлаВыгрузки = ПолучитьИмяВременногоФайла("xml");
	ОбъектДляСервера.ИмяФайлаОбмена = ИмяФайлаВыгрузки;
	//МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяВременногоФайла, "\");
	
	ТаблицаПравилВыгрузки = ОбъектДляСервера.ТаблицаПравилВыгрузки;
	
	ИзменитьДеревоПравилВыгрузки(ОбъектДляСервера.ТаблицаПравилВыгрузки.Строки, ТаблицаПравилВыгрузки.Строки);
	
	ВыгрузкаВыполненаУспешно = Ложь;
	
	// Имя файла выгрузки записываем в реквизит формы.
	ИмяФайлаВыгрузки = ОбъектДляСервера.ИмяФайлаОбмена;
	
	// Вызов процедуры непосредственной выгрузки.
	ОбъектДляСервера.ВыполнитьВыгрузку(ВыгрузкаВыполненаУспешно);
	
	ОбъектДляСервера.ТаблицаПравилВыгрузки = РеквизитФормыВЗначение("Объект.ТаблицаПравилВыгрузки");
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	Если ВыгрузкаВыполненаУспешно Тогда
		
		// Дополнительная выгрузка данных, которые нельзя удалять.
		ВыгрузитьРегистрВерсииПодсистем();
		ВыгрузитьРеквизитыОрганизаций();
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.ИмяФайлаОбмена) Тогда
		ДанныеВыгрузки = Новый ДвоичныеДанные(Объект.ИмяФайлаОбмена);
		АдресФайлаВыгрузки = ПоместитьВоВременноеХранилище(ДанныеВыгрузки);
	КонецЕсли;
	
	УстановитьСнятьПривелигированныйРежим(Ложь);
	
	Возврат АдресФайлаВыгрузки;
	
КонецФункции // ВыгрузитьДанныеНаСервере()

// Вспомогательные методы выгрузки.

&НаСервере
// Изменяет дерево ПВД в соответствии с деревом на форме.
//
Процедура ИзменитьДеревоПравилВыгрузки(СтрокиИсходногоДерева, СтрокиЗаменяемогоДерева)
	
	КолонкаВключить = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("Включить");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаВключить, "Включить");
	КолонкаУзел = СтрокиЗаменяемогоДерева.ВыгрузитьКолонку("СсылкаНаУзелОбмена");
	СтрокиИсходногоДерева.ЗагрузитьКолонку(КолонкаУзел, "СсылкаНаУзелОбмена");
	
	Для Каждого СтрокаИсходногоДерева Из СтрокиИсходногоДерева Цикл
		
		ИндексСтроки = СтрокиИсходногоДерева.Индекс(СтрокаИсходногоДерева);
		СтрокаИзменяемогоДерева = СтрокиЗаменяемогоДерева.Получить(ИндексСтроки);
		
		ИзменитьДеревоПравилВыгрузки(СтрокаИсходногоДерева.Строки, СтрокаИзменяемогоДерева.Строки);
		
	КонецЦикла;
	
КонецПроцедуры // ИзменитьДеревоПравилВыгрузки()

&НаСервере
// Выгружает регистр сведений "ВерсииПодсистем" в таблицу значений, которую помещает в константу.
//
Процедура ВыгрузитьРегистрВерсииПодсистем()
	
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	
	ТаблицаЗаписей.Колонки.Добавить("ИмяПодсистемы",                              УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаЗаписей.Колонки.Добавить("Версия",                                     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(15));
	ТаблицаЗаписей.Колонки.Добавить("ПланОбновления",                             Новый ОписаниеТипов("ХранилищеЗначения"));
	ТаблицаЗаписей.Колонки.Добавить("ЭтоОсновнаяКонфигурация",                    Новый ОписаниеТипов("Булево"));
	ТаблицаЗаписей.Колонки.Добавить("ВыполненаРегистрацияОтложенныхОбработчиков", Новый ОписаниеТипов("Булево"));
	
	ВыборкаЗаписей = РегистрыСведений.ВерсииПодсистем.Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		Запись = ВыборкаЗаписей.ПолучитьМенеджерЗаписи();
		Запись.Прочитать();
		
		НоваяСтрока = ТаблицаЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		
	КонецЦикла;
	
	ЗаписатьПараметрОбновленияВКонстанту("ВерсииПодсистем", ТаблицаЗаписей);
	
КонецПроцедуры // ВыгрузитьРегистрВерсииПодсистем()

&НаСервере
// Выгружает часть реквизитов организаций в структуру, которую помещает в константу.
//
Процедура ВыгрузитьРеквизитыОрганизаций()
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	ВыборкаОрганизаций = Справочники.Организации.Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ФайлЛоготип",                       ВыборкаОрганизаций.ФайлЛоготип);
		СтруктураРеквизитов.Вставить("ФайлПечать",                        ВыборкаОрганизаций.ФайлПечать);
		СтруктураРеквизитов.Вставить("ФайлПодписьГлавногоБухгалтера",     ВыборкаОрганизаций.ФайлПодписьГлавногоБухгалтера);
		СтруктураРеквизитов.Вставить("ФайлПодписьРуководителя",           ВыборкаОрганизаций.ФайлПодписьРуководителя);
		СтруктураРеквизитов.Вставить("ФайлФаксимильнаяПечать",            ВыборкаОрганизаций.ФайлФаксимильнаяПечать);
		
		СтруктураРеквизитов.Вставить("ВидОбменаСКонтролирующимиОрганами", ВыборкаОрганизаций.ВидОбменаСКонтролирующимиОрганами);
		СтруктураРеквизитов.Вставить("УчетнаяЗаписьОбмена",               ВыборкаОрганизаций.УчетнаяЗаписьОбмена);
		СтруктураРеквизитов.Вставить("ТерриториальныеУсловияПФР",         ВыборкаОрганизаций.ТерриториальныеУсловияПФР);
		
		СоответствиеРеквизитов.Вставить(ВыборкаОрганизаций.Ссылка, СтруктураРеквизитов);
		
	КонецЦикла;
	
	ЗаписатьПараметрОбновленияВКонстанту("РеквизитыОрганизаций", СоответствиеРеквизитов);
	
КонецПроцедуры // ВыгрузитьРеквизитыОрганизаций()

// УДАЛЕНИЕ.

&НаСервере
// Выполняет удаление данных в соответствии с правилами обмена.
// Удаление происходит в транзакции.
//
Процедура УдалитьДанныеНаСервере(Отказ)
	
	УстановитьСнятьПривелигированныйРежим(Истина);
	
	ДеревоУдаляемыхДанных = Новый ДеревоЗначений;
	ДеревоУдаляемыхДанных.Колонки.Добавить("Метаданные",    Новый ОписаниеТипов("Строка"));
	ДеревоУдаляемыхДанных.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	ЗаполнитьСписокТиповДоступныхДляУдаления(ДеревоУдаляемыхДанных);
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ОбъектДляСервера.ИнициализироватьМенеджерыИСообщения();
	
	// Удаление данных производим полностью или не удаляем данные вообще.
	// Используем транзакцию.
	НачатьТранзакцию();
	
	Отказ = Ложь;
	Для Каждого СтрокаДерева Из ДеревоУдаляемыхДанных.Строки Цикл
		
		Для Каждого СтрокаМД Из СтрокаДерева.Строки Цикл
			
			ТипСтрокой = СтрокаМД.Метаданные;
			ОбъектДляСервера.УдалитьОбъектыТипа(ТипСтрокой, Отказ);
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		ДанныеУдаленыУспешно = Истина;
		
		ЗаписатьПараметрОбновленияВКонстанту("ДанныеУдалены", ДанныеУдаленыУспешно);
		
	КонецЕсли;
	
	УстановитьСнятьПривелигированныйРежим(Ложь);
	
КонецПроцедуры // УдалитьДанныеНаСервере()

&НаСервере
// Заполняет список типов, которые будут удаляться.
//
Процедура ЗаполнитьСписокТиповДоступныхДляУдаления(ДеревоДанных)
	
	// В список доступных типов добавим справочники, регистры сведений, документы.
	// Регистры накопления очистятся автоматически при удалении документов.
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Представление = Нстр("ru = 'Справочники'");
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		
		МассивСправочников = Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМассивСправочников();
		Если МассивСправочников.Найти(ОбъектМД) = Неопределено Или Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Представление = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "СправочникСсылка." + ОбъектМД.Имя;
		
	КонецЦикла;
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Представление = Нстр("ru = 'Документы'");
	
	Для каждого ОбъектМД Из Метаданные.Документы Цикл
		
		МассивДокументов = Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМассивДокументов();
		Если МассивДокументов.Найти(ОбъектМД) = Неопределено Или Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Представление = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "ДокументСсылка." + ОбъектМД.Имя;
		
	КонецЦикла;
	
	СтрокаДерева = ДеревоДанных.Строки.Добавить();
	СтрокаДерева.Представление = "РегистрыСведений";
	
	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		
		МассивРегистровСведений = Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМассивРегистровСведений();
		Если МассивРегистровСведений.Найти(ОбъектМД) = Неопределено Или Не ПравоДоступа("Удаление", ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;
		
		Подчинен = (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		Если Подчинен Тогда Продолжить КонецЕсли;
		
		СтрокаМД = СтрокаДерева.Строки.Добавить();
		СтрокаМД.Представление = ОбъектМД.Имя;
		СтрокаМД.Метаданные = "РегистрСведенийЗапись." + ОбъектМД.Имя;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокТиповДоступныхДляУдаления()

// ЗАГРУЗКА.

&НаКлиенте
// Помещает файл загрузки во временное хранилище для последующего извлечения на сервере.
//
Процедура ЗагрузитьДанные()
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекОперация", "ЗагрузкаДанных");
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_ЗагрузкаДанных", ЭтаФорма, ДопПараметры),
						 ,
						 ПутьКФайлуЗагрузки,
						 Ложь,
						 Новый УникальныйИдентификатор);
	
КонецПроцедуры // ЗагрузитьДанные()

&НаКлиенте
// Извлекает файл с данными на сервере и выполняет загрузку в объекты информационной базы в соответствии с правилами
// обмена.
//
Процедура ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_ЗагрузкаДанных(РезультатПомещения, АдресФайлаВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если РезультатПомещения = Истина Тогда
		
		Форма = ОткрытьФормуДлительнойОперации(4);
		
		ЕстьОшибкиПриЗагрузке = ЗагрузитьДанныеНаСервере(АдресФайлаВХранилище);
		
		Форма.Закрыть();
		
		Если Не ЕстьОшибкиПриЗагрузке Тогда
			
			ДанныеЗагружены = Истина;
			
			ЗаписатьПараметрОбновленияВКонстанту("ДанныеЗагружены",             Истина);
			ЗаписатьПараметрОбновленияВКонстанту("НеобходимоВыполнитьЗагрузку", Ложь);
			
			УправлениеФормой(ЭтотОбъект);
			
			// Загрузка прошла успешно, "перескакиваем" через страницу ошибки блокировки, переходим на страницу успешного завершения.
			Если ПорядковыйНомерПерехода = 0 Тогда
				ПорядковыйНомерПерехода = 2;
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода);
			КонецЕсли;
		Иначе
			
			ПерейтиНаСтраницуОшибкиОбновления("Возникли ошибки при загрузке данных.");
			
		КонецЕсли;
		
		УдалитьФайлНаКлиенте(ВыбранноеИмяФайла);
		
	Иначе
		
		ПерейтиНаСтраницуОшибкиОбновления("Возникла ошибка при передаче файла на сервер.");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище_ЗагрузкаДанных()

&НаСервере
// Выполняет загрузку данных на сервере.
//
Функция ЗагрузитьДанныеНаСервере(АдресФайлаВХранилище)
	
	УстановитьСнятьПривелигированныйРежим(Истина);
	
	Попытка
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ИмяФайлаЗагрузки = ПолучитьИмяВременногоФайла("xml");
		ДанныеФайла.Записать(ИмяФайлаЗагрузки);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Возникла ошибка при получении файла на сервере");
		Возврат Ложь;
	КонецПопытки;
	
	ЕстьОшибки = Ложь;
	
	ОбъектДляСервера = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(ОбъектДляСервера, Объект);
	
	ОбъектДляСервера.ИмяФайлаОбмена = ИмяФайлаЗагрузки;
	
	ОбъектДляСервера.ВыполнитьЗагрузку(ЕстьОшибки);
	ЗначениеВРеквизитФормы(ОбъектДляСервера, "Объект");
	
	ЗначениеКонстанты = Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Получить().Получить();
	Если ТипЗнч(ЗначениеКонстанты) = Тип("Структура") И ЗначениеКонстанты.Свойство("РеквизитыОрганизаций") Тогда
		
		СоответствиеРеквизитов = ЗначениеКонстанты.РеквизитыОрганизаций;
		Для Каждого Организация Из СоответствиеРеквизитов Цикл
			
			Попытка
				ОрганизацияОбъект = Организация.Ключ.ПолучитьОбъект();
				Для Каждого ТекРеквизит Из Организация.Значение Цикл
					ОрганизацияОбъект[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
				КонецЦикла;
				
				КВП_ЗаписатьОбъект(ОрганизацияОбъект);
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), Организация.Ключ);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьСнятьПривелигированныйРежим(Ложь);
	
	Возврат ЕстьОшибки;
	
КонецФункции // ЗагрузитьДанныеНаСервере()

#КонецОбласти

#Область МетодыСравненияКонфигураций

&НаСервере
// Выполняет сравнение:
// 1. Конфигурации поставщика, структура которой записана в mxl макет.
// 2. Основной конфигурации - анализ по метаданным.
// Возвращает результат сравнения в виде Булева значения.
//
Функция ПроверитьОтличияВМетаданныхОсновнойКонфигурацииИКонфигурацииПоставкиНаСервере(АдресФайлаВХранилище)
	
	ЕстьОтличия = Ложь;
	
	// ПОЛУЧЕНИЕ ИСХОДНОЙ ТАБЛИЦЫ МЕТАДАННЫХ.
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Попытка
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ВременныйФайл = ПолучитьИмяВременногоФайла("mxl");
		ДанныеФайла.Записать(ВременныйФайл);
		
		ТабличныйДокумент.Прочитать(ВременныйФайл);
	Исключение
		ТекЗаданиеВыполнено = Истина;
		Возврат Истина;
	КонецПопытки;
	
	ТаблицаМетаданныхИсходная = ПолучитьПустуюТаблицуМетаданных();
	
	КоличествоКолонок = 10;
	// Считывание табличного документа в таблицу значений.
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		НоваяСтрока = ТаблицаМетаданныхИсходная.Добавить();
		
		Для ТекКолонка = 1 По КоличествоКолонок Цикл
			
			ТекЗначение = ТабличныйДокумент.Область(НомерСтроки, ТекКолонка).Текст;
			Если ТекКолонка = 7 Или ТекКолонка = 9 Тогда
				Значение = ПредставитьЗначениеВВидеБулево(СокрЛП(ТекЗначение));
			ИначеЕсли ТекКолонка = 5 Или ТекКолонка = 6 Или ТекКолонка = 8 Тогда
				Значение = ПредставитьЗначениеВВидеЧисла(СокрЛП(ТекЗначение));
			Иначе
				Значение = СокрЛП(ТекЗначение);
			КонецЕсли;
			
			НоваяСтрока[ТекКолонка - 1] = Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаМетаданныхИсходная.Количество() = 0 Тогда
		ТекЗаданиеВыполнено = Истина;
		Возврат Истина;
	КонецЕсли;
	
	// ПОЛУЧЕНИЕ ТЕКУЩЕЙ ТАБЛИЦЫ МЕТАДАННЫХ.
	
	ТаблицаМетаданныхТекущая = ПолучитьПустуюТаблицуМетаданных();
	
	// Добавление справочников.
	
	МассивСправочников = Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМассивСправочников();
	
	// Справочник организаций добавим отдельно, так как в общей функции он не учитывается, но сравнивать его необходимо.
	МассивСправочников.Добавить(Метаданные.Справочники["Организации"]);
	
	Для Каждого СпрМетаданные Из МассивСправочников Цикл
		
		Для Каждого ТекРеквизит Из СпрМетаданные.Реквизиты Цикл
			
			ТипыРеквизита = ТекРеквизит.Тип.Типы();
			Для Каждого ТекТип Из ТипыРеквизита Цикл
				
				НоваяСтрока = ТаблицаМетаданныхТекущая.Добавить();
				НоваяСтрока.ИмяОбъекта = СпрМетаданные.Имя;
				
				НоваяСтрока.ИмяТЧ = "";
				НоваяСтрока.ИмяРеквизита = ТекРеквизит.Имя;
				
				Попытка
					ТекСсылка = Новый(ТекТип);
					НоваяСтрока.ИмяТипа = ТекСсылка.Метаданные().ПолноеИмя();
				Исключение
					
					НоваяСтрока.ИмяТипа = Строка(ТекТип);
					
					Если НоваяСтрока.ИмяТипа = "Число" Тогда
						НоваяСтрока.КвалификаторыЧисла_Длина           = ТекРеквизит.Тип.КвалификаторыЧисла.Разрядность;
						НоваяСтрока.КвалификаторыЧисла_Точность        = ТекРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
						НоваяСтрока.КвалификаторыЧисла_Неотрицательное = ?(Строка(ТекРеквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак) = "Любой", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Строка" Тогда
						НоваяСтрока.КвалификаторыСтроки_Длина =  ТекРеквизит.Тип.КвалификаторыСтроки.Длина;
						НоваяСтрока.КвалификаторыСтроки_Фиксированная =  ?(Строка(ТекРеквизит.Тип.КвалификаторыСтроки.ДопустимаяДлина) = "Переменная", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Дата" Тогда
						НоваяСтрока.КвалификаторыДаты_Состав = Строка(ТекРеквизит.Тип.КвалификаторыДаты.ЧастиДаты);
					КонецЕсли;
				
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ТекТЧ Из СпрМетаданные.ТабличныеЧасти Цикл
			Для Каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
				
				ТипыРеквизита = ТекРеквизит.Тип.Типы();
				Для Каждого ТекТип Из ТипыРеквизита Цикл
					
					НоваяСтрока = ТаблицаМетаданныхТекущая.Добавить();
					НоваяСтрока.ИмяОбъекта = СпрМетаданные.Имя;
					
					НоваяСтрока.ИмяТЧ        = ТекТЧ.Имя;
					НоваяСтрока.ИмяРеквизита = ТекРеквизит.Имя;
					
					Попытка
						ТекСсылка = Новый(ТекТип);
						НоваяСтрока.ИмяТипа = ТекСсылка.Метаданные().ПолноеИмя();
					Исключение
						
						НоваяСтрока.ИмяТипа = Строка(ТекТип);
						
						Если НоваяСтрока.ИмяТипа = "Число" Тогда
							НоваяСтрока.КвалификаторыЧисла_Длина = ТекРеквизит.Тип.КвалификаторыЧисла.Разрядность;
							НоваяСтрока.КвалификаторыЧисла_Точность = ТекРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
							НоваяСтрока.КвалификаторыЧисла_Неотрицательное = ?(Строка(ТекРеквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак) = "Любой", Ложь, Истина);
						ИначеЕсли НоваяСтрока.ИмяТипа = "Строка" Тогда
							НоваяСтрока.КвалификаторыСтроки_Длина = ТекРеквизит.Тип.КвалификаторыСтроки.Длина;
							НоваяСтрока.КвалификаторыСтроки_Фиксированная = ?(Строка(ТекРеквизит.Тип.КвалификаторыСтроки.ДопустимаяДлина) = "Переменная", Ложь, Истина);
						ИначеЕсли НоваяСтрока.ИмяТипа = "Дата" Тогда
							НоваяСтрока.КвалификаторыДаты_Состав = Строка(ТекРеквизит.Тип.КвалификаторыДаты.ЧастиДаты);
						КонецЕсли;
					
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавление документов.
	
	МассивДокументов = Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМассивДокументов();
	Для Каждого ДокМетаданные Из МассивДокументов Цикл
		
		Для Каждого ТекРеквизит Из ДокМетаданные.Реквизиты Цикл
			
			ТипыРеквизита = ТекРеквизит.Тип.Типы();
			Для Каждого ТекТип Из ТипыРеквизита Цикл
				
				НоваяСтрока = ТаблицаМетаданныхТекущая.Добавить();
				НоваяСтрока.ИмяОбъекта = ДокМетаданные.Имя;
				
				НоваяСтрока.ИмяТЧ = "";
				НоваяСтрока.ИмяРеквизита = ТекРеквизит.Имя;
				
				Попытка
					ТекСсылка = Новый(ТекТип);
					НоваяСтрока.ИмяТипа = ТекСсылка.Метаданные().ПолноеИмя();
				Исключение
					
					НоваяСтрока.ИмяТипа = Строка(ТекТип);
					
					Если НоваяСтрока.ИмяТипа = "Число" Тогда
						НоваяСтрока.КвалификаторыЧисла_Длина           = ТекРеквизит.Тип.КвалификаторыЧисла.Разрядность;
						НоваяСтрока.КвалификаторыЧисла_Точность        = ТекРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
						НоваяСтрока.КвалификаторыЧисла_Неотрицательное = ?(Строка(ТекРеквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак) = "Любой", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Строка" Тогда
						НоваяСтрока.КвалификаторыСтроки_Длина =  ТекРеквизит.Тип.КвалификаторыСтроки.Длина;
						НоваяСтрока.КвалификаторыСтроки_Фиксированная =  ?(Строка(ТекРеквизит.Тип.КвалификаторыСтроки.ДопустимаяДлина) = "Переменная", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Дата" Тогда
						НоваяСтрока.КвалификаторыДаты_Состав = Строка(ТекРеквизит.Тип.КвалификаторыДаты.ЧастиДаты);
					КонецЕсли;
				
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ТекТЧ Из ДокМетаданные.ТабличныеЧасти Цикл
			Для Каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
				
				ТипыРеквизита = ТекРеквизит.Тип.Типы();
				Для Каждого ТекТип Из ТипыРеквизита Цикл
					
					НоваяСтрока = ТаблицаМетаданныхТекущая.Добавить();
					НоваяСтрока.ИмяОбъекта = ДокМетаданные.Имя;
					
					НоваяСтрока.ИмяТЧ        = ТекТЧ.Имя;
					НоваяСтрока.ИмяРеквизита = ТекРеквизит.Имя;
					
					Попытка
						ТекСсылка = Новый(ТекТип);
						НоваяСтрока.ИмяТипа = ТекСсылка.Метаданные().ПолноеИмя();
					Исключение
						
						НоваяСтрока.ИмяТипа = Строка(ТекТип);
						
						Если НоваяСтрока.ИмяТипа = "Число" Тогда
							НоваяСтрока.КвалификаторыЧисла_Длина = ТекРеквизит.Тип.КвалификаторыЧисла.Разрядность;
							НоваяСтрока.КвалификаторыЧисла_Точность = ТекРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
							НоваяСтрока.КвалификаторыЧисла_Неотрицательное = ?(Строка(ТекРеквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак) = "Любой", Ложь, Истина);
						ИначеЕсли НоваяСтрока.ИмяТипа = "Строка" Тогда
							НоваяСтрока.КвалификаторыСтроки_Длина = ТекРеквизит.Тип.КвалификаторыСтроки.Длина;
							НоваяСтрока.КвалификаторыСтроки_Фиксированная = ?(Строка(ТекРеквизит.Тип.КвалификаторыСтроки.ДопустимаяДлина) = "Переменная", Ложь, Истина);
						ИначеЕсли НоваяСтрока.ИмяТипа = "Дата" Тогда
							НоваяСтрока.КвалификаторыДаты_Состав = Строка(ТекРеквизит.Тип.КвалификаторыДаты.ЧастиДаты);
						КонецЕсли;
					
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавление регистров сведений.
	МассивРегистров = Обработки.Удалить_УПЖКХ_ПомощникОбновленияКонфигурации.ПолучитьМассивРегистровСведений();
	Для Каждого РегМетаданные Из МассивРегистров Цикл
		
		Для Каждого ТекИзмерение Из РегМетаданные.Измерения Цикл
			ТипыИзмерения = ТекИзмерение.Тип.Типы();
			Для Каждого ТекТип Из ТипыИзмерения Цикл
				
				НоваяСтрока = ТаблицаМетаданныхТекущая.Добавить();
				НоваяСтрока.ИмяОбъекта = РегМетаданные.Имя;
				
				НоваяСтрока.ИмяТЧ        = "";
				НоваяСтрока.ИмяРеквизита = ТекИзмерение.Имя;
				
				Попытка
					ТекСсылка = Новый(ТекТип);
					НоваяСтрока.ИмяТипа = ТекСсылка.Метаданные().ПолноеИмя();
				Исключение
					
					НоваяСтрока.ИмяТипа = Строка(ТекТип);
					
					Если НоваяСтрока.ИмяТипа = "Число" Тогда
						НоваяСтрока.КвалификаторыЧисла_Длина = ТекРеквизит.Тип.КвалификаторыЧисла.Разрядность;
						НоваяСтрока.КвалификаторыЧисла_Точность = ТекРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
						НоваяСтрока.КвалификаторыЧисла_Неотрицательное = ?(Строка(ТекРеквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак) = "Любой", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Строка" Тогда
						НоваяСтрока.КвалификаторыСтроки_Длина = ТекРеквизит.Тип.КвалификаторыСтроки.Длина;
						НоваяСтрока.КвалификаторыСтроки_Фиксированная = ?(Строка(ТекРеквизит.Тип.КвалификаторыСтроки.ДопустимаяДлина) = "Переменная", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Дата" Тогда
						НоваяСтрока.КвалификаторыДаты_Состав = Строка(ТекРеквизит.Тип.КвалификаторыДаты.ЧастиДаты);
					КонецЕсли;
				
				КонецПопытки;
				
			КонецЦикла;
			
			
		КонецЦикла;
		
		Для Каждого ТекРесурс Из РегМетаданные.Ресурсы Цикл
			ТипыРесурса = ТекРесурс.Тип.Типы();
			Для Каждого ТекТип Из ТипыРесурса Цикл
				
				НоваяСтрока = ТаблицаМетаданныхТекущая.Добавить();
				НоваяСтрока.ИмяОбъекта = РегМетаданные.Имя;
				
				НоваяСтрока.ИмяТЧ        = "";
				НоваяСтрока.ИмяРеквизита = ТекРесурс.Имя;
				
				Попытка
					ТекСсылка = Новый(ТекТип);
					НоваяСтрока.ИмяТипа = ТекСсылка.Метаданные().ПолноеИмя();
				Исключение
					
					НоваяСтрока.ИмяТипа = Строка(ТекТип);
					
					Если НоваяСтрока.ИмяТипа = "Число" Тогда
						НоваяСтрока.КвалификаторыЧисла_Длина = ТекРеквизит.Тип.КвалификаторыЧисла.Разрядность;
						НоваяСтрока.КвалификаторыЧисла_Точность = ТекРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
						НоваяСтрока.КвалификаторыЧисла_Неотрицательное = ?(Строка(ТекРеквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак) = "Любой", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Строка" Тогда
						НоваяСтрока.КвалификаторыСтроки_Длина = ТекРеквизит.Тип.КвалификаторыСтроки.Длина;
						НоваяСтрока.КвалификаторыСтроки_Фиксированная = ?(Строка(ТекРеквизит.Тип.КвалификаторыСтроки.ДопустимаяДлина) = "Переменная", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Дата" Тогда
						НоваяСтрока.КвалификаторыДаты_Состав = Строка(ТекРеквизит.Тип.КвалификаторыДаты.ЧастиДаты);
					КонецЕсли;
				
				КонецПопытки;
			
			КонецЦикла;
			
			
		КонецЦикла;
		
		Для Каждого ТекРеквизит Из РегМетаданные.Реквизиты Цикл
			
			ТипыРеквизита = ТекРеквизит.Тип.Типы();
			Для Каждого ТекТип Из ТипыРеквизита Цикл
				
				НоваяСтрока = ТаблицаМетаданныхТекущая.Добавить();
				НоваяСтрока.ИмяОбъекта = РегМетаданные.Имя;
				
				НоваяСтрока.ИмяТЧ        = "";
				НоваяСтрока.ИмяРеквизита = ТекРеквизит.Имя;
				
				Попытка
					ТекСсылка = Новый(ТекТип);
					НоваяСтрока.ИмяТипа = ТекСсылка.Метаданные().ПолноеИмя();
				Исключение
					
					НоваяСтрока.ИмяТипа = Строка(ТекТип);
					
					Если НоваяСтрока.ИмяТипа = "Число" Тогда
						НоваяСтрока.КвалификаторыЧисла_Длина = ТекРеквизит.Тип.КвалификаторыЧисла.Разрядность;
						НоваяСтрока.КвалификаторыЧисла_Точность = ТекРеквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
						НоваяСтрока.КвалификаторыЧисла_Неотрицательное = ?(Строка(ТекРеквизит.Тип.КвалификаторыЧисла.ДопустимыйЗнак) = "Любой", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Строка" Тогда
						НоваяСтрока.КвалификаторыСтроки_Длина = ТекРеквизит.Тип.КвалификаторыСтроки.Длина;
						НоваяСтрока.КвалификаторыСтроки_Фиксированная = ?(Строка(ТекРеквизит.Тип.КвалификаторыСтроки.ДопустимаяДлина) = "Переменная", Ложь, Истина);
					ИначеЕсли НоваяСтрока.ИмяТипа = "Дата" Тогда
						НоваяСтрока.КвалификаторыДаты_Состав = Строка(ТекРеквизит.Тип.КвалификаторыДаты.ЧастиДаты);
					КонецЕсли;
				
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СравнитьКонфигурации(ТаблицаМетаданныхИсходная, ТаблицаМетаданныхТекущая);
	
КонецФункции // ПроверитьОтличияВМетаданныхОсновнойКонфигурацииИКонфигурацииПоставкиНаСервере()

&НаСервере
// Возвращает пустую таблицу значений метаданных с колонками.
//
Функция ПолучитьПустуюТаблицуМетаданных()
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	
	ТаблицаМетаданных.Колонки.Добавить("ИмяОбъекта",                         УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	ТаблицаМетаданных.Колонки.Добавить("ИмяТЧ",                              УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	ТаблицаМетаданных.Колонки.Добавить("ИмяРеквизита",                       УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	ТаблицаМетаданных.Колонки.Добавить("ИмяТипа",                            УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(150));
	ТаблицаМетаданных.Колонки.Добавить("КвалификаторыЧисла_Длина",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3, 0));
	ТаблицаМетаданных.Колонки.Добавить("КвалификаторыЧисла_Точность",        УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(2, 0));
	ТаблицаМетаданных.Колонки.Добавить("КвалификаторыЧисла_Неотрицательное", Новый ОписаниеТипов("Булево"));
	ТаблицаМетаданных.Колонки.Добавить("КвалификаторыСтроки_Длина",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3, 0));
	ТаблицаМетаданных.Колонки.Добавить("КвалификаторыСтроки_Фиксированная",  Новый ОписаниеТипов("Булево"));
	ТаблицаМетаданных.Колонки.Добавить("КвалификаторыДаты_Состав",           УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(30));
	
	Возврат ТаблицаМетаданных;
	
КонецФункции // ПолучитьПустуюТаблицуМетаданных()

&НаСервере
// Возвращает текстовое значение типа Булево.
//
Функция ПредставитьЗначениеВВидеБулево(Значение)
	
	Если Значение = "Нет" Тогда
		Возврат Ложь;
	ИначеЕсли Значение = "Да" Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ПредставитьЗначениеВВидеБулево()

&НаСервере
// Переводит строковое значение в число. Если строка пустая - возвращает 0.
//
Функция ПредставитьЗначениеВВидеЧисла(Значение)
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат 0;
	Иначе
		Возврат Число(Значение);
	КонецЕсли;
	
КонецФункции // ПредставитьЗначениеВВидеЧисла()

&НаСервере
// Сравнивает 2 таблицы значений полным внешним соединением по всем полям.
//
Функция СравнитьКонфигурации(ТЗИсходная, ТЗТекущая)
	
	ЕстьОтличия = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗИсходная", ТЗИсходная);
	Запрос.УстановитьПараметр("ТЗТекущая",  ТЗТекущая);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗИсходная.ИмяОбъекта,
	|	ТЗИсходная.ИмяТЧ,
	|	ТЗИсходная.ИмяРеквизита,
	|	ТЗИсходная.ИмяТипа,
	|	ТЗИсходная.КвалификаторыЧисла_Длина,
	|	ТЗИсходная.КвалификаторыЧисла_Точность,
	|	ТЗИсходная.КвалификаторыЧисла_Неотрицательное,
	|	ТЗИсходная.КвалификаторыСтроки_Длина,
	|	ТЗИсходная.КвалификаторыСтроки_Фиксированная,
	|	ТЗИсходная.КвалификаторыДаты_Состав
	|ПОМЕСТИТЬ втИсходнаяТаблица
	|ИЗ
	|	&ТЗИсходная КАК ТЗИсходная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗТекущая.ИмяОбъекта,
	|	ТЗТекущая.ИмяТЧ,
	|	ТЗТекущая.ИмяРеквизита,
	|	ТЗТекущая.ИмяТипа,
	|	ТЗТекущая.КвалификаторыЧисла_Длина,
	|	ТЗТекущая.КвалификаторыЧисла_Точность,
	|	ТЗТекущая.КвалификаторыЧисла_Неотрицательное,
	|	ТЗТекущая.КвалификаторыСтроки_Длина,
	|	ТЗТекущая.КвалификаторыСтроки_Фиксированная,
	|	ТЗТекущая.КвалификаторыДаты_Состав
	|ПОМЕСТИТЬ втТекущаяТаблица
	|ИЗ
	|	&ТЗТекущая КАК ТЗТекущая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втИсходнаяТаблица.ИмяОбъекта, """") КАК ИмяИсходногоОбъекта,
	|	ЕСТЬNULL(втТекущаяТаблица.ИмяОбъекта, """") КАК ИмяТекущегоОбъекта
	|ПОМЕСТИТЬ втСоединениеТаблиц
	|ИЗ
	|	втИсходнаяТаблица КАК втИсходнаяТаблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТекущаяТаблица КАК втТекущаяТаблица
	|		ПО втИсходнаяТаблица.ИмяОбъекта = втТекущаяТаблица.ИмяОбъекта
	|			И втИсходнаяТаблица.ИмяТЧ = втТекущаяТаблица.ИмяТЧ
	|			И втИсходнаяТаблица.ИмяРеквизита = втТекущаяТаблица.ИмяРеквизита
	|			И втИсходнаяТаблица.ИмяТипа = втТекущаяТаблица.ИмяТипа
	|			И втИсходнаяТаблица.КвалификаторыЧисла_Длина = втТекущаяТаблица.КвалификаторыЧисла_Длина
	|			И втИсходнаяТаблица.КвалификаторыЧисла_Точность = втТекущаяТаблица.КвалификаторыЧисла_Точность
	|			И втИсходнаяТаблица.КвалификаторыЧисла_Неотрицательное = втТекущаяТаблица.КвалификаторыЧисла_Неотрицательное
	|			И втИсходнаяТаблица.КвалификаторыСтроки_Длина = втТекущаяТаблица.КвалификаторыСтроки_Длина
	|			И втИсходнаяТаблица.КвалификаторыСтроки_Фиксированная = втТекущаяТаблица.КвалификаторыСтроки_Фиксированная
	|			И втИсходнаяТаблица.КвалификаторыДаты_Состав = втТекущаяТаблица.КвалификаторыДаты_Состав
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоединениеТаблиц.ИмяИсходногоОбъекта,
	|	втСоединениеТаблиц.ИмяТекущегоОбъекта
	|ИЗ
	|	втСоединениеТаблиц КАК втСоединениеТаблиц
	|ГДЕ
	|	(втСоединениеТаблиц.ИмяТекущегоОбъекта = """"
	|			ИЛИ втСоединениеТаблиц.ИмяИсходногоОбъекта = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЕстьОтличия = Истина;
	Конецесли;
	
	Возврат ЕстьОтличия;
	
КонецФункции // СравнитьКонфигурации()

#КонецОбласти
