&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ПоказатьИнформациюОЗавершенииРегистрации();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОЗавершенииРегистрации()
	
	Если ПараметрЗаполненияДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Регистрация счетов-фактур выполнена.'");
	ПоказатьПредупреждение(, ТекстСообщения);

КонецПроцедуры 

&НаСервере
Функция ЗаполнитьСчетаФактурыНаСервере(ИБФайловая)

	Объект.Список.Очистить();

	ТипДокументаОснования = Метаданные.Обработки.РегистрацияСчетовФактурНалоговогоАгента.ТабличныеЧасти.Список.Реквизиты.ДокументОснование.Тип;
	СтруктураПараметров = Новый Структура("Организация, НачалоПериода, КонецПериода, ТипДокументаОснования, Список",
		Объект.Организация, Объект.НачалоПериода, Объект.КонецПериода, ТипДокументаОснования, Объект.Список.Выгрузить());

	Если ИБФайловая Тогда
		ЭтаФорма.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
		Обработки.РегистрацияСчетовФактурНалоговогоАгента.ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);

	Иначе
		НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение табличной части ""Регистрация счетов-фактур налогового агента""'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.РегистрацияСчетовФактурНалоговогоАгента.ПодготовитьДанныеДляЗаполнения",
			СтруктураПараметров,
			НаименованиеФоновогоЗадания);

		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;

	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Если СтруктураДанных.Свойство("Список") Тогда
		Объект.Список.Загрузить(СтруктураДанных.Список);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияКомандДокументаНаКлиенте()

	ОчиститьСообщения();

	ИБФайловая = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Если ПараметрЗаполненияДокумента Тогда
		Результат = ЗаполнитьСчетаФактурыНаСервере(ИБФайловая);
	Иначе
		Результат = СоздатьСчетаФактурыНаСервере(ИБФайловая);
	КонецЕсли;

	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);

		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
	Иначе
		ПоказатьИнформациюОЗавершенииРегистрации();
	КонецЕсли;

	Если Не ПараметрЗаполненияДокумента Тогда
		Оповестить("СостояниеРегламентнойОперации", 
			?(Результат.ЗаданиеВыполнено, ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено"), 
			   ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено")));
	КонецЕсли;
							   
КонецПроцедуры

&НаСервере
Функция СоздатьСчетаФактурыНаСервере(ИБФайловая)

	СтруктураПараметров = Новый Структура("Организация, НачалоПериода, КонецПериода, Список",
		Объект.Организация, Объект.НачалоПериода, Объект.КонецПериода, Объект.Список.Выгрузить());

	Если ИБФайловая Тогда
		ЭтаФорма.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
		Обработки.РегистрацияСчетовФактурНалоговогоАгента.СформироватьСчетаФактуры(СтруктураПараметров, ЭтаФорма.АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);

	Иначе
		НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование счетов-фактур в ""Регистрация счетов-фактур налогового агента""'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.РегистрацияСчетовФактурНалоговогоАгента.СформироватьСчетаФактуры",
			СтруктураПараметров,
			НаименованиеФоновогоЗадания);

		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;

	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Пересчет суммы НДС и валютной суммы при изменении суммы регл.
&НаКлиентеНаСервереБезКонтекста
Процедура ПересчетНДСПоСтроке(ТД)

	ТД.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(ТД.Сумма, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыИзПараметровФормы(Форма)
	
	ПараметрыЗаполненияФормы = Неопределено;
	
	Объект = Форма.Объект;
	
	Если Форма.Параметры.Свойство("ПараметрыЗаполненияФормы",ПараметрыЗаполненияФормы) Тогда
	
		ЗаполнитьЗначенияСвойств(Объект,ПараметрыЗаполненияФормы);			
	
	Иначе
		
		РабочаяДатаСеанса = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		Объект.НачалоПериода = РабочаяДатаСеанса;
		Объект.КонецПериода  = РабочаяДатаСеанса;

	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполненияТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Список.Очистить();
		Если ПроверитьЗаполнение() Тогда
			ПараметрЗаполненияДокумента = Истина;
			ИнициализацияКомандДокументаНаКлиенте();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)

	Если Объект.Список.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполненияТабличнойЧастиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,
			"Регистрация счетов-фактур налогового агента");
	Иначе
		Если ПроверитьЗаполнение() Тогда
			ПараметрЗаполненияДокумента = Истина;
			ИнициализацияКомандДокументаНаКлиенте();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)

	Если НЕ ПроверитьЗаполнение() Тогда
		Для Каждого СтрокаТаблицы Из Объект.Список Цикл
			СтрокаТаблицы.СчетФактураСформирован = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ПараметрЗаполненияДокумента = Ложь;
	ИнициализацияКомандДокументаНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактур(Команда)

	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("Организация",		Объект.Организация);
	ПараметрыОтбор.Вставить("ВидСчетаФактуры",	ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыОтбораСписка", ПараметрыОтбор);
	
	Если Объект.НачалоПериода <> '00010101' ИЛИ Объект.КонецПериода <> '00010101' Тогда
		Если Объект.НачалоПериода = '00010101' Тогда
			ПараметрыФормы.Вставить("ДатаМеньшеИлиРавно", КонецДня(Объект.КонецПериода));
		ИначеЕсли Объект.КонецПериода = '00010101' Тогда
			ПараметрыФормы.Вставить("ДатаБольшеИлиРавно", Объект.НачалоПериода);
		Иначе
			// ИнтервалВключаяГраницы с НачалоПериода по КонецПериода
			ПараметрыФормы.Вставить("ДатаБольшеИлиРавно", Объект.НачалоПериода);
			ПараметрыФормы.Вставить("ДатаМеньшеИлиРавно", КонецДня(Объект.КонецПериода));
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СчетФактураВыданный.ФормаСписка", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если Объект.НачалоПериода > Объект.КонецПериода Тогда
		Объект.КонецПериода = Объект.НачалоПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если Объект.КонецПериода < Объект.НачалоПериода Тогда
		Объект.НачалоПериода = Объект.КонецПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Объект.Список.Очистить();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "СПИСОК"

&НаКлиенте
Процедура СписокСуммаПриИзменении(Элемент)

	ПересчетНДСПоСтроке(Объект.Список[Элементы.Список.ТекущиеДанные.НомерСтроки - 1]);

КонецПроцедуры

&НаКлиенте
Процедура СписокСтавкаНДСПриИзменении(Элемент)

	ПересчетНДСПоСтроке(Объект.Список[Элементы.Список.ТекущиеДанные.НомерСтроки - 1]);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьРеквизитыИзПараметровФормы(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.Выполнить.Доступность = Форма.Объект.Список.Количество() <> 0;
	
КонецПроцедуры


&НаСервере
Функция ВидАгентскогоДоговора(Договор)
	
	ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ВидАгентскогоДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидАгентскогоДоговора");
	КонецЕсли;
	
	Возврат ВидАгентскогоДоговора;
	
КонецФункции

&НаКлиенте
Процедура СписокДоговорКонтрагентаПриИзменении(Элемент)
	
		
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВидАгентскогоДоговора = ВидАгентскогоДоговора(ТекущиеДанные.ДоговорКонтрагента);
	
КонецПроцедуры

