#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт

	ДанныеДляЗаполнения = Новый Структура;

	Список = СтруктураПараметров.Список;

	ЗаполнитьСтрокиДокумента(СтруктураПараметров, Список);
	ДанныеДляЗаполнения.Вставить("Список", Список);

	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

Процедура СформироватьСчетаФактуры(СтруктураПараметров, АдресХранилища) Экспорт

	Список = СтруктураПараметров.Список;

	ЕстьОшибки = ВыполнитьФормированиеСчетовФактурНалоговогоАгента(СтруктураПараметров, Список);

	Если Не ЕстьОшибки Тогда
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
			НачалоКвартала(СтруктураПараметров.НачалоПериода),
			СтруктураПараметров.Организация, Неопределено, 
			Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента, 
			НЕ ЕстьОшибки);
	КонецЕсли;
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("Список", Список);

	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСтрокиДокумента(СтруктураПараметров, ТаблицаРезультатов)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",       СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",     СтруктураПараметров.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонецДня(СтруктураПараметров.КонецПериода));

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);

	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);

	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОснование,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт3 КАК ДокументРасчетов
	|ПОМЕСТИТЬ ХозрасчетныйОплатаПоДоговоруНалоговогоАгента
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			НЕ СчетДт В (&СчетаИсключения),
	|			&ВидыСубконто,
	|			НЕ СчетКт.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(СубконтоДт2 КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС) КАК ХозрасчетныйОборотыДтКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОплата.ДокументОснование КАК ДокументОснование,
	|	ХозрасчетныйОплата.Контрагент КАК Контрагент,
	|	ХозрасчетныйОплата.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаРасчетов.ДатаРегистратора < ДАТАВРЕМЯ(2019, 1, 1)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеДокументаРасчетов.ДатаРегистратора < ДАТАВРЕМЯ(2019, 1, 1)
	|				ТОГДА ХозрасчетныйОплата.СуммаОборот + ХозрасчетныйОплата.СуммаОборот * 18 / 100
	|			ИНАЧЕ ХозрасчетныйОплата.СуммаОборот + ХозрасчетныйОплата.СуммаОборот * 20 / 100
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеДокументаРасчетов.ДатаРегистратора < ДАТАВРЕМЯ(2019, 1, 1)
	|				ТОГДА ХозрасчетныйОплата.СуммаОборот * 18 / 100
	|			ИНАЧЕ ХозрасчетныйОплата.СуммаОборот * 20 / 100
	|		КОНЕЦ) КАК СуммаНДС,
	|	ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ДанныеДокументаОснования.ДатаРегистратора КАК Дата,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидАгентскогоДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.ПустаяСсылка)) КАК ВидАгентскогоДоговора
	|ИЗ
	|	ХозрасчетныйОплатаПоДоговоруНалоговогоАгента КАК ХозрасчетныйОплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|		ПО ХозрасчетныйОплата.ДокументОснование = СчетФактураВыданный.ДокументОснование
	|			И ХозрасчетныйОплата.ДоговорКонтрагента = СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	|			И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент))
	|			И (СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ)
	|			И (НЕ СчетФактураВыданный.Ссылка.Исправление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеДокументаОснования
	|		ПО (ДанныеДокументаОснования.Организация = &Организация)
	|			И ХозрасчетныйОплата.ДокументОснование = ДанныеДокументаОснования.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеДокументаРасчетов
	|		ПО (ДанныеДокументаРасчетов.Организация = &Организация)
	|			И ХозрасчетныйОплата.ДокументРасчетов = ДанныеДокументаРасчетов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ХозрасчетныйОплата.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидАгентскогоДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров)
	|	И ЕСТЬNULL(ДоговорыКонтрагентов.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)) = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОплата.ДокументОснование,
	|	ХозрасчетныйОплата.Контрагент,
	|	ХозрасчетныйОплата.ДоговорКонтрагента,
	|	ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ДанныеДокументаОснования.ДатаРегистратора,
	|	ДоговорыКонтрагентов.ВидАгентскогоДоговора,
	|	ВЫБОР
	|		КОГДА ДанныеДокументаРасчетов.ДатаРегистратора < ДАТАВРЕМЯ(2019, 1, 1)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";

	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();

	// В результате могут содержаться строки, соответствующие начислению НДС при поступлении,
	// тип значение в колонке ДокументОснование не соответствует разрешенным. Такие строки надо удалить
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		Если Не СтруктураПараметров.ТипДокументаОснования.СодержитТип(ТипЗнч(СтрокаТаблицы.ДокументОснование)) Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);
	КонецЦикла;

КонецПроцедуры

Функция ВыполнитьФормированиеСчетовФактурНалоговогоАгента(СтруктураПараметров, Список)

	ЕстьОшибки = Ложь;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПустаяСсылкаСФ = Документы.СчетФактураВыданный.ПустаяСсылка();
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"), Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчетФактура = СчФ.ПолучитьОбъект();
			СчетФактура.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;

	МассивДокументов = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		Список.ВыгрузитьКолонку("ДокументОснование"));
	МассивДоговоров = Новый Массив;

	СтруктураОтбораДокумент = Новый Структура("ДокументОснование");
	СтруктураОтбораДоговор = Новый Структура();
	Ответственный = Пользователи.ТекущийПользователь();

	Для Каждого Документ Из МассивДокументов Цикл

		СтруктураОтбораДокумент.ДокументОснование = Документ;
		СтрокиПоДокументу = Список.НайтиСтроки(СтруктураОтбораДокумент);

		МассивДоговоров.Очистить();
		Для Каждого СтрокаОтбора Из СтрокиПоДокументу Цикл
			МассивДоговоров.Добавить(СтрокаОтбора.ДоговорКонтрагента);
		КонецЦикла;
		МассивДоговоров = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
		ТЧАвансыСтарые = Новый Соответствие;

		Для Каждого Договор Из МассивДоговоров Цикл
			СтруктураОтбораДоговор.Вставить("ДокументОснование",  Документ);
			СтруктураОтбораДоговор.Вставить("ДоговорКонтрагента", Договор);
			СтрокиПоДоговору = Список.НайтиСтроки(СтруктураОтбораДоговор);

			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();

			ОшибкаФормирования = Ложь;

			Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл

				Если СчФ = Неопределено Тогда
					// Создать/использовать Счет-фактуру
					Если Не СтрокаОтбораДоговор.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ = СтрокаОтбораДоговор.СчетФактура.ПолучитьОбъект();
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаОтбораДоговор);

					СчФ.Дата = КонецДня(СчФ.Дата);

					Если УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(СчФ.Дата) Тогда
						СчФ.КодВидаОперации = "06";
						СчФ.СчетФактураНеВыставляется = Истина;
						СчФ.КодСпособаВыставления = 1;
					КонецЕсли;
					
					СчФ.ПометкаУдаления = Ложь;
					СчФ.Организация = СтруктураПараметров.Организация;
					СчФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент;
					СчФ.Под0 = Ложь;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;

					СчФ.ВалютаДокумента = ВалютаРегламентированногоУчета;

					СчФ.СуммаДокумента = СтрокаОтбораДоговор.Сумма;

					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаОтбораДоговор.ДокументОснование;

					СчФ.Авансы.Очистить();

				Иначе

					СчФ.Сумма = СчФ.Сумма + СтрокаОтбораДоговор.Сумма;
					СчФ.СуммаНДС = СчФ.СуммаНДС + СтрокаОтбораДоговор.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаОтбораДоговор.Сумма;

				КонецЕсли;

				Если НЕ Перечисления.ВидыАгентскихДоговоров.НалогУплачиваетсяПриНачислении(
					СтрокаОтбораДоговор.ВидАгентскогоДоговора) Тогда
					
					СчФ.ПлатежноРасчетныеДокументы.Очистить();
					Если ТипЗнч(СтрокаОтбораДоговор.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = СтрокаОтбораДоговор.ДокументОснование.НомерВходящегоДокумента;
						СчФ.ДатаПлатежноРасчетногоДокумента =  СтрокаОтбораДоговор.ДокументОснование.ДатаВходящегоДокумента;
					Иначе
						СчФ.НомерПлатежноРасчетногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
							СтрокаОтбораДоговор.ДокументОснование);
						СчФ.ДатаПлатежноРасчетногоДокумента = СтрокаОтбораДоговор.ДокументОснование.Дата;
					КонецЕсли;
				КонецЕсли;
				

				СтрокаПРД = СчФ.ПлатежноРасчетныеДокументы.Добавить();
				СтрокаПРД.ДатаДокумента = СчФ.ДатаПлатежноРасчетногоДокумента;
				СтрокаПРД.НомерДокумента = СчФ.НомерПлатежноРасчетногоДокумента;

				СуммаПоСтроке = СтрокаОтбораДоговор.Сумма;
				СуммаНДСПоСтроке = СтрокаОтбораДоговор.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаОтбораДоговор.СтавкаНДС;
				Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
					Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
						Если СуммаПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаСтарая.Сумма = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтбораДоговор.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
							НоваяСтрокаПоСуммам 			 = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
							НоваяСтрокаПоСуммам.Содержание 	 = СтрокаСтарая.Содержание;
							НоваяСтрокаПоСуммам.Сумма 		 = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
							НоваяСтрокаПоСуммам.СуммаНДС 	 = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
							НоваяСтрокаПоСуммам.СтавкаНДС 	 = СтрокаОтбораДоговор.СтавкаНДС;
							СуммаПоСтроке 					 = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
							СуммаНДСПоСтроке 				 = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
							СтрокаСтарая.Сумма 				 = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
							СтрокаСтарая.СуммаНДС 			 = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;
						КонецЕсли;
					КонецЦикла;
					Если СуммаПоСтроке <> 0 Тогда
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						НоваяСтрокаПоСуммам.Сумма = СуммаПоСтроке;
						НоваяСтрокаПоСуммам.СуммаНДС = СуммаНДСПоСтроке;
						НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
						НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					КонецЕсли;
				Иначе
					НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаОтбораДоговор);
					НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					Если НоваяСтрокаПоСуммам.Номенклатура.Услуга Тогда
						НоваяСтрокаПоСуммам.Содержание = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс.НаименованиеПолное;
					КонецЕсли;
				КонецЕсли;
			
				СчФ.Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
			
			КонецЦикла;
			
			Если СчФ.ЭтоНовый() Тогда
				ОтветственныеЛицаБП.УстановитьОтветственныхЛиц(СчФ);
			КонецЕсли;
	
			Попытка
				НовыйСФ = СчФ.ЭтоНовый();
				СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);

				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					СтрокаОтбораДоговор.СчетФактураСформирован = Истина;
					СтрокаОтбораДоговор.СчетФактура = СчФ.Ссылка;
				КонецЦикла;
			Исключение
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					СтрокаОтбораДоговор.СчетФактураСформирован = Ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
			КонецПопытки;

		КонецЦикла;

	КонецЦикла;

	Возврат ЕстьОшибки;

КонецФункции

#КонецОбласти

#КонецЕсли