
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы обработки.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияРеквизитов();
	
	Объект.Период = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьРабочуюДату();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы обработки.
//
Процедура ПриОткрытии(Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.Период", "МесяцСтрока");
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВХранилище();
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Каталог выгрузки".
//
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Каталог выгрузки".
//
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Объект.КаталогВыгрузки);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КаталогВыгрузкиОткрытие()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

#Область ОбработчикиСобытийКомандныхПанелей

&НаКлиенте
// Заполняет все табличные части.
//
Процедура ЗаполнитьВсе(Команда)
	
	Если НЕ ЗаполненыОбязательныеРеквизиты() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Таблица_ФайлСчетов.Количество() = 0 ИЛИ НЕ Объект.Таблица_ФайлНачислений.Количество() = 0 ИЛИ НЕ Объект.Таблица_ФайлСчетчиков.Количество() = 0 Тогда
		
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТЧЗаполнитьВсе", ЭтаФорма),
						"Перед заполнением все табличные части будут очищены. Заполнить все?",
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВсеПродолжение();
	
КонецПроцедуры // ЗаполнитьВсе()

&НаКлиенте
// Обработка результата вопроса, вызваннго в процедуре "ЗаполнитьВсе()".
Процедура ОбработатьРезультатВопросаОчиститьТЧЗаполнитьВсе(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьВсеПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТЧЗаполнитьВсе()

&НаКлиенте
// Продолжение процедуры "ЗаполнитьВсе()".
Процедура ЗаполнитьВсеПродолжение()
	
	Объект.Таблица_ФайлСчетов.Очистить();
	Объект.Таблица_ФайлНачислений.Очистить();
	Объект.Таблица_ФайлСчетчиков.Очистить();
	
	ЗаполнитьТЧНаСервере("");
	
КонецПроцедуры // ЗаполнитьВсеПродолжение()

&НаКлиенте
// Выгружает все табличные части в файлы.
//
Процедура ВыгрузитьВсе(Команда)
	
	Если Объект.Таблица_ФайлСчетов.Количество() > 0 Тогда
		ИмяФайла = Объект.КаталогВыгрузки + "\CLI" + ВРег(Формат(Объект.Период, "ДФ=yyyy")) + ВРег(Формат(Объект.Период, "ДФ=MM")) + ".csv";
		СтруктураСведений = ВыгрузитьТаблицуСчетовНаСервере(ИмяФайла);
		ЗаписатьФайлНаКлиенте(СтруктураСведений, ИмяФайла);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют данные для выгрузки в файл счетов!");
	КонецЕсли;
	Если Объект.Таблица_ФайлНачислений.Количество() > 0 Тогда
		ИмяФайла = Объект.КаталогВыгрузки + "\NACH" + ВРег(Формат(Объект.Период, "ДФ=yyyy")) + ВРег(Формат(Объект.Период, "ДФ=MM")) + ".csv";
	СтруктураСведений = ВыгрузитьТаблицуНачисленийНаСервере(ИмяФайла);
		ЗаписатьФайлНаКлиенте(СтруктураСведений, ИмяФайла);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют данные для выгрузки в файл начислений!");
	КонецЕсли;
	Если Объект.Таблица_ФайлСчетчиков.Количество() > 0 Тогда
		ИмяФайла = Объект.КаталогВыгрузки + "\SCHET" + ВРег(Формат(Объект.Период, "ДФ=yyyy")) + ВРег(Формат(Объект.Период, "ДФ=MM")) + ".csv";
		СтруктураСведений = ВыгрузитьТаблицуСчетчиковНаСервере(ИмяФайла);
		ЗаписатьФайлНаКлиенте(СтруктураСведений, ИмяФайла);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют данные для выгрузки в файл счетчиков!");
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьВсе()

&НаКлиенте
// Заполняет табличную часть "Таблица_ФайлСчетов".
//
Процедура ФайлСчетовЗаполнить(Команда)
	
	Если НЕ ЗаполненыОбязательныеРеквизиты() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Таблица_ФайлСчетов.Количество() = 0 Тогда
		
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТЧФайлСчетовЗаполнить", ЭтаФорма),
						"Перед заполнением табличная часть будет очищена. Заполнить?",
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ФайлСчетовЗаполнитьПродолжение();
	
КонецПроцедуры // ФайлСчетовЗаполнить()

&НаКлиенте
// Обработка результата вопроса, вызваннго в процедуре "ФайлСчетовЗаполнить()".
Процедура ОбработатьРезультатВопросаОчиститьТЧФайлСчетовЗаполнить(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФайлСчетовЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТЧФайлСчетовЗаполнить()

&НаКлиенте
// Продолжение процедуры "ФайлСчетовЗаполнить()".
Процедура ФайлСчетовЗаполнитьПродолжение()
	
	Объект.Таблица_ФайлСчетов.Очистить();
	
	ЗаполнитьТЧНаСервере("Таблица_ФайлСчетов");
	
КонецПроцедуры // ФайлСчетовЗаполнитьПродолжение()

&НаКлиенте
// Заполняет табличную часть "Таблица_ФайлНачислений".
//
Процедура ФайлНачисленийЗаполнить(Команда)
	
	Если НЕ ЗаполненыОбязательныеРеквизиты() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Таблица_ФайлНачислений.Количество() = 0 Тогда
		
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТЧФайлНачисленийЗаполнить", ЭтаФорма),
						"Перед заполнением табличная часть будет очищена. Заполнить?",
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ФайлНачисленийЗаполнитьПродолжение();
	
КонецПроцедуры // ФайлНачисленийЗаполнить()

&НаКлиенте
// Обработка результата вопроса, вызваннго в процедуре "ФайлСчетовЗаполнить()".
Процедура ОбработатьРезультатВопросаОчиститьТЧФайлНачисленийЗаполнить(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФайлНачисленийЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТЧФайлНачисленийЗаполнить()

&НаКлиенте
// Продолжение процедуры "ФайлСчетовЗаполнить()".
Процедура ФайлНачисленийЗаполнитьПродолжение()
	
	Объект.Таблица_ФайлНачислений.Очистить();
	
	ЗаполнитьТЧНаСервере("Таблица_ФайлНачислений");
	
КонецПроцедуры // ФайлНачисленийЗаполнитьПродолжение()

&НаКлиенте
// Заполняет табличную часть "Таблица_ФайлСчетчиков".
//
Процедура ФайлСчетчиковЗаполнить(Команда)
	
	Если НЕ ЗаполненыОбязательныеРеквизиты() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.Таблица_ФайлСчетчиков.Количество() = 0 Тогда
		
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТЧФайлСчетчиковЗаполнить", ЭтаФорма),
						"Перед заполнением табличная часть будет очищена. Заполнить?",
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ФайлСчетчиковЗаполнитьПродолжение();
	
КонецПроцедуры // ФайлСчетчиковЗаполнить()

&НаКлиенте
// Обработка результата вопроса, вызваннго в процедуре "ФайлСчетовЗаполнить()".
Процедура ОбработатьРезультатВопросаОчиститьТЧФайлСчетчиковЗаполнить(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФайлСчетчиковЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТЧФайлСчетчиковЗаполнить()

&НаКлиенте
// Продолжение процедуры "ФайлСчетовЗаполнить()".
Процедура ФайлСчетчиковЗаполнитьПродолжение()
	
	Объект.Таблица_ФайлСчетчиков.Очистить();
	
	ЗаполнитьТЧНаСервере("Таблица_ФайлСчетчиков");
	
КонецПроцедуры // ФайлСчетчиковЗаполнитьПродолжение()

&НаКлиенте
// Выгружает данные табличной части "Таблица_ФайлСчетов" в файл.
//
Процедура ФайлСчетовВыгрузить(Команда)
	
	Если Объект.Таблица_ФайлСчетов.Количество() > 0 Тогда
		ИмяФайла = Объект.КаталогВыгрузки + "\CLI" + ВРег(Формат(Объект.Период, "ДФ=yyyy")) + ВРег(Формат(Объект.Период, "ДФ=MM")) + ".csv";
		СтруктураСведений = ВыгрузитьТаблицуСчетовНаСервере(ИмяФайла);
		ЗаписатьФайлНаКлиенте(СтруктураСведений, ИмяФайла);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют данные для выгрузки в файл счетов!");
	КонецЕсли;
	
КонецПроцедуры // ФайлСчетовВыгрузить()

&НаКлиенте
// Выгружает данные табличной части "Таблица_ФайлНачислений" в файл.
//
Процедура ФайлНачисленийВыгрузить(Команда)
	
	Если Объект.Таблица_ФайлНачислений.Количество() > 0 Тогда
		ИмяФайла = Объект.КаталогВыгрузки + "\NACH" + ВРег(Формат(Объект.Период, "ДФ=yyyy")) + ВРег(Формат(Объект.Период, "ДФ=MM")) + ".csv";
		СтруктураСведений = ВыгрузитьТаблицуНачисленийНаСервере(ИмяФайла);
		ЗаписатьФайлНаКлиенте(СтруктураСведений, ИмяФайла);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют данные для выгрузки в файл начислений!");
	КонецЕсли;
	
КонецПроцедуры // ФайлНачисленийВыгрузить()

&НаКлиенте
// Выгружает данные табличной части "Таблица_ФайлСчетчиков" в файл.
//
Процедура ФайлСчетчиковВыгрузить(Команда)
	
	Если Объект.Таблица_ФайлСчетчиков.Количество() > 0 Тогда
		ИмяФайла = Объект.КаталогВыгрузки + "\SCHET" + ВРег(Формат(Объект.Период, "ДФ=yyyy")) + ВРег(Формат(Объект.Период, "ДФ=MM")) + ".csv";
		СтруктураСведений = ВыгрузитьТаблицуСчетчиковНаСервере(ИмяФайла);
		ЗаписатьФайлНаКлиенте(СтруктураСведений, ИмяФайла);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют данные для выгрузки в файл счетчиков!");
	КонецЕсли;
	
КонецПроцедуры // ФайлСчетчиковВыгрузить()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕДСТАВЛЕНИЯ МЕСЯЦА

#Область ОбработчикиСобытийПериода

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
//
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.Период",
													 "МесяцСтрока", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
//
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.Период", "МесяцСтрока");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "Период".
//
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.Период",
													  "МесяцСтрока", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
//
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
//
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыОбщегоНазначения

&НаСервере
// Процедура заполняет табличные части на сервере.
//
Процедура ЗаполнитьТЧНаСервере(ИмяТаблицы)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.КВП_УдалитьВыгрузкаВСистемуПлатон"));
	ТаблицаЛС = ОбработкаОбъект.ПолучитьТаблицуОбъектовКвитанции();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Если ТаблицаЛС.Количество() > 0 Тогда
		СписокЛС = Новый СписокЗначений;;
		СписокЛС.ЗагрузитьЗначения(ТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет"));
		
		СписокПомещений = Новый СписокЗначений;
		СписокПомещений.ЗагрузитьЗначения(ТаблицаЛС.ВыгрузитьКолонку("Помещение"));
		
		Если ИмяТаблицы = "Таблица_ФайлСчетов" Тогда
			ЗаполнитьТаблицу_ФайлСчетов(ТаблицаЛС, СписокЛС, СписокПомещений);
		ИначеЕсли ИмяТаблицы = "Таблица_ФайлНачислений" Тогда
			ЗаполнитьТаблицу_ФайлНачислений(ТаблицаЛС, СписокЛС, СписокПомещений);
		ИначеЕсли ИмяТаблицы = "Таблица_ФайлСчетчиков" Тогда
			ЗаполнитьТаблицу_ФайлСчетчиков(ТаблицаЛС, СписокЛС, СписокПомещений);
		Иначе
			ЗаполнитьТаблицу_ФайлСчетов(ТаблицаЛС, СписокЛС, СписокПомещений);
			ЗаполнитьТаблицу_ФайлСчетчиков(ТаблицаЛС, СписокЛС, СписокПомещений);
			ЗаполнитьТаблицу_ФайлНачислений(ТаблицаЛС, СписокЛС, СписокПомещений);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТЧНаСервере()

&НаСервере
// Процедура предназначена для заполнения таблицы "Файл счетов", данными о состояних лицевых счетов.
//
Процедура ЗаполнитьТаблицу_ФайлСчетов(ТаблицаЛС, СписокЛС, СписокПомещений)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.КВП_УдалитьВыгрузкаВСистемуПлатон"));
	ТаблицаСведенийЛС = ОбработкаОбъект.ПолучитьТаблицуСведенийЛС(ТаблицаЛС, СписокЛС, СписокПомещений);
		
	Если ТаблицаСведенийЛС.Количество() > 0 Тогда
		Для Каждого ТекЛС Из ТаблицаСведенийЛС Цикл
			НоваяСтрока = Объект.Таблица_ФайлСчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЛС);
			НоваяСтрока.НомерЛицевогоСчета = ОбработкаОбъект.ПодготовитьНомерЛСДляВывода(ТекЛС.ЛицевойСчет);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицу_ФайлСчетов()

&НаСервере
// Процедура предназначена для заполнения таблицы "Файл начислений", данными о начислениях на лицевые счета в отчетном месяце.
//
Процедура ЗаполнитьТаблицу_ФайлНачислений(ТаблицаЛС, СписокЛС, СписокПомещений)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.КВП_УдалитьВыгрузкаВСистемуПлатон"));
	ОбработкаОбъект.ИнициализацияПараметров();
	
	ТаблицаЛьготЛС      = ОбработкаОбъект.ПолучитьТаблицуЛьготСправочно(СписокЛС);
	ТаблицаНачисленийЛС = ОбработкаОбъект.ПолучитьТаблицуНачисленийЛС(ТаблицаЛС, СписокЛС, СписокПомещений);
	
	ИтоговаяТаблица     = ТаблицаНачисленийЛС.СкопироватьКолонки();
	ИтоговаяТаблица.Колонки.Добавить("ВидДляВывода",        Новый ОписаниеТипов("Строка"));
	ИтоговаяТаблица.Колонки.Добавить("КОплате",             Новый ОписаниеТипов("Число"));
	ИтоговаяТаблица.Колонки.Добавить("ТарифДляВывода",      Новый ОписаниеТипов("Строка"));
	
	ТаблицаЛС = ТаблицаНачисленийЛС.Скопировать();
	ТаблицаЛС.Свернуть("ЛицевойСчет, ОтветственныйВладелец");
	Для Каждого ТекЛС Из ТаблицаЛС Цикл
		ТаблицаДляВывода = ОбработкаОбъект.ПолучитьТаблицуНачисленияПоТекущемуОбъекту(ТаблицаНачисленийЛС, ТаблицаЛьготЛС, ТекЛС.ЛицевойСчет, ТекЛС.ОтветственныйВладелец);
		Если ТаблицаДляВывода.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ТаблицаДляВывода Цикл
				НоваяСтрока = ИтоговаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ИтоговаяТаблица Цикл
		НоваяСтрока = Объект.Таблица_ФайлНачислений.Добавить();
		НоваяСтрока.НомерЛицевогоСчета                 = ОбработкаОбъект.ПодготовитьНомерЛСДляВывода(ТекСтрока.ЛицевойСчет);
		НоваяСтрока.РасчетныйПериод                    = Формат(Объект.Период, "ДФ=ММММ") + " " + Формат(Объект.Период, "ДФ=yyyy");
		НоваяСтрока.ФИОПлательщика                     = ТекСтрока.ОтветственныйВладелец;
		НоваяСтрока.КодУслуги                          = ТекСтрока.КодУслуги;
		НоваяСтрока.НаименованиеУслуги                 = ТекСтрока.Услуга;
		НоваяСтрока.ФактическаяСуммаНачисленийПоУслуге = ТекСтрока.КОплате;
		НоваяСтрока.ВходящееСальдоПоУслуге             = ТекСтрока.НачальноеСальдо;
		НоваяСтрока.ФактическаяСуммаПлатежейПоУслуге   = ТекСтрока.Оплачено;
		НоваяСтрока.ИсходящееСальдоПоУслуге            = ТекСтрока.КонечноеСальдо;
		НоваяСтрока.ВходящееСальдоПениПоСчету          = ТекСтрока.НачальноеСальдоПоПени;
		НоваяСтрока.СуммаПениПоСчету                   = ТекСтрока.Пени;
		НоваяСтрока.ИсходящееСальдоПениПоСчету         = ТекСтрока.КонечноеСальдоПоПени;
		НоваяСтрока.СуммаЛьготПоУслуге                 = ТекСтрока.Льгота;
		НоваяСтрока.СуммаПерерасчетовПоУслуге          = ТекСтрока.Перерасчет;
		Если НЕ ТекСтрока.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ФиксированноеНачисление Тогда
			НоваяСтрока.ОбъемПотребления               = ТекСтрока.Количество;
		КонецЕсли;
		Если ТекСтрока.УслугаПоСчетчикам Тогда
			НоваяСтрока.СпособОпределенияРасхода       = "По счетчику";
		ИначеЕсли ТекСтрока.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоНормамПотребления 
			  ИЛИ ТекСтрока.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
			НоваяСтрока.СпособОпределенияРасхода       = "По норме расхода";
		КонецЕсли;
		НоваяСтрока.ЕдиницаИзмерения                   = ТекСтрока.ЕдИзм;
		НоваяСтрока.РазмерТарифа                       = ТекСтрока.ТарифДляВывода;
		НоваяСтрока.СуммаНачислений                    = ТекСтрока.КОплате;
		НоваяСтрока.СуммаПерерасчетаПени               = ТекСтрока.ПерерасчетПени;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицу_ФайлНачислений()

&НаСервере
// Процедура предназначена для заполнения таблицы "Файл счетчиков", данными об установленных ИПУ на лицевых счетах.
//
Процедура ЗаполнитьТаблицу_ФайлСчетчиков(ТаблицаЛС, СписокЛС, СписокПомещений)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.КВП_УдалитьВыгрузкаВСистемуПлатон"));
	ТаблицаСчетчиков = ОбработкаОбъект.ПолучитьТаблицуСчетчиков(ТаблицаЛС, СписокЛС, СписокПомещений);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Для Каждого ТекЛС Из ТаблицаСчетчиков Цикл
			НоваяСтрока = Объект.Таблица_ФайлСчетчиков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЛС);
			НоваяСтрока.НомерЛицевогоСчета = ОбработкаОбъект.ПодготовитьНомерЛСДляВывода(ТекЛС.ЛицевойСчет);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТаблицу_ФайлСчетчиков()

&НаСервере
// Процедура предназначена для выгрузки данных о состояних лицевых счетов в csv-файл.
//
Функция ВыгрузитьТаблицуСчетовНаСервере(ИмяФайла)
	
	Попытка
		// Создаем текстовый документ.
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТипФайла("windows-1251");
		
		// Сформировать шапку документа
		ШапкаТаблицыСчетов = СформироватьМассивШапкиТаблицыСчетов();
		ТекСтрока = "";
		Для Каждого ТекЭлемент Из ШапкаТаблицыСчетов Цикл
			ТекСтрока = ТекСтрока + ТекЭлемент + ";";
		КонецЦикла;
		ТекСтрока = Лев(ТекСтрока, СтрДлина(ТекСтрока) - 1);
		ТекСтрока = ТекСтрока + Символы.ПС + Символы.ВК;
		ТД.ДобавитьСтроку(ТекСтрока);
		
		Для Каждого ТекСтр Из Объект.Таблица_ФайлСчетов Цикл
			ТекСтрока = "" + ТекСтр.НомерСтроки + ";" + ТекСтр.НомерЛицевогоСчета + ";" + ТекСтр.ТипНаселенногоПункта + ";"
					  + ТекСтр.НаименованиеНаселенногоПункта + ";" + ТекСтр.ТипУлицы + ";" + ТекСтр.НаименованиеНаселенногоПункта + ";"
					  + ТекСтр.НомерДома + ";" + ТекСтр.НомерКорпуса + ";" + ТекСтр.НомерКвартиры + ";" + ТекСтр.ФИООтветственногоСобственника + ";" + ";" + ";"
					  + ТекСтр.ОбщаяПлощадь + ";" + ТекСтр.ЖилаяПлощадь + ";" + ТекСтр.КоличествоПроживающих + ";"
					  + ТекСтр.КоличествоВременноПроживающих + ";" + ТекСтр.КоличествоВременноОтсутствующих + Символы.ПС + Символы.ВК;
			ТД.ДобавитьСтроку(ТекСтрока);
		КонецЦикла;
		врИмяФайла = ПолучитьИмяВременногоФайла("txt");
		ТД.Записать(врИмяФайла);
		
		СтруктураСведений = Новый Структура;
		СтруктураСведений.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(врИмяФайла), Новый УникальныйИдентификатор));
		Возврат СтруктураСведений;
		
	Исключение
		// Обработка ошибок экспорта данных из 1С
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Ошибка записи данных файла :" + ИмяФайла);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ВыгрузитьТаблицуСчетчиков()

&НаСервере
// Процедура предназначена для выгрузки данных о начислениях в csv-файл.
//
Функция ВыгрузитьТаблицуНачисленийНаСервере(ИмяФайла)

		Попытка
		// Создаем текстовый документ.
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТипФайла("windows-1251");
		
		ТекСтрока = "";
		// Сформировать шапку документа
		ШапкаТаблицыНачислений = СформироватьМассивШапкиТаблицыНачислений();
		Для Каждого ТекЭлемент Из ШапкаТаблицыНачислений Цикл
			ТекСтрока = ТекСтрока + ТекЭлемент + ";";
		КонецЦикла;
		ТекСтрока = Лев(ТекСтрока, СтрДлина(ТекСтрока) - 1);
		ТекСтрока = ТекСтрока + Символы.ПС + Символы.ВК;
		ТД.ДобавитьСтроку(ТекСтрока);
		
		РасчетныйПериод = Формат(Объект.Период, "ДФ=MMMM") + " " + Формат(Объект.Период, "ДФ=yyyy");
		
		Для Каждого ТекСтр Из Объект.Таблица_ФайлНачислений Цикл
			ТекСтрока = "" + ТекСтр.НомерСтроки + ";" + РасчетныйПериод + ";" + ТекСтр.НомерЛицевогоСчета + ";"
					  + ТекСтр.ФИОПлательщика + ";" + ТекСтр.КодУслуги + ";" + ТекСтр.НаименованиеУслуги + ";"
					  + ТекСтр.ФактическаяСуммаНачисленийПоУслуге + ";" + ТекСтр.ВходящееСальдоПоУслуге + ";" 
					  + ТекСтр.ФактическаяСуммаПлатежейПоУслуге + ";" + ТекСтр.СуммаНачисленийПоСчету + ";"
					  + ТекСтр.ИсходящееСальдоПоУслуге + ";" + ТекСтр.ВходящееСальдоПениПоСчету + ";"
					  + ТекСтр.СуммаПениПоСчету + ";" + ТекСтр.ИсходящееСальдоПениПоСчету + ";"
					  + ТекСтр.СуммаЛьготПоУслуге + ";" + ТекСтр.СуммаПерерасчетовПоУслуге + ";"
					  + ТекСтр.СуммаСубсидийПоУслуге + ";" + ТекСтр.ОбъемПотребления + ";"
					  + ТекСтр.СпособОпределенияРасхода + ";" + ТекСтр.ЕдиницаИзмерения + ";"
					  + ТекСтр.РазмерТарифа + ";" + ТекСтр.СуммаНачислений + ";" + ТекСтр.СуммаПерерасчетаВходящегоСальдо + ";"
					  + ТекСтр.СуммаЛьготПоСчету + ";" + ТекСтр.СуммаПерерасчетовПоСчету + ";" + ТекСтр.СуммаСубсидийПоСчету + ";"
					  + ТекСтр.СуммаПерерасчетаПени + Символы.ПС + Символы.ВК;
			ТД.ДобавитьСтроку(ТекСтрока);
		КонецЦикла;
		врИмяФайла = ПолучитьИмяВременногоФайла("txt");
		ТД.Записать(врИмяФайла);
		
		СтруктураСведений = Новый Структура;
		СтруктураСведений.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(врИмяФайла), Новый УникальныйИдентификатор));
		Возврат СтруктураСведений;
	Исключение
		// Обработка ошибок экспорта данных из 1С
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Ошибка записи данных файла :" + ИмяФайла);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ВыгрузитьТаблицуНачислений()

&НаСервере
// Процедура предназначена для выгрузки данных о действовавших счетчиках в csv-файл.
//
Функция ВыгрузитьТаблицуСчетчиковНаСервере(ИмяФайла)
	
	Попытка
		// Создаем текстовый документ.
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТипФайла("windows-1251");
		
		ТекСтрока = "";
		// Сформировать шапку документа
		ШапкаТаблицыСчетчиков = СформироватьМассивШапкиТаблицыСчетчиков();
		Для Каждого ТекЭлемент Из ШапкаТаблицыСчетчиков Цикл
			ТекСтрока = ТекСтрока + ТекЭлемент + ";";
		КонецЦикла;
		ТекСтрока = Лев(ТекСтрока, СтрДлина(ТекСтрока) - 1);
		ТекСтрока = ТекСтрока + Символы.ПС + Символы.ВК;
		ТД.ДобавитьСтроку(ТекСтрока);
		
		Для Каждого ТекСтр Из Объект.Таблица_ФайлСчетчиков Цикл
			ТекСтрока = "" + ТекСтр.НомерСтроки + ";" + ТекСтр.НомерЛицевогоСчета + ";"
					  + ТекСтр.КодУслуги + ";" + ТекСтр.ИдентификаторСчетчика + Символы.ПС + Символы.ВК;
			ТД.ДобавитьСтроку(ТекСтрока);
		КонецЦикла;
		врИмяФайла = ПолучитьИмяВременногоФайла("txt");
		ТД.Записать(врИмяФайла);
		
		СтруктураСведений = Новый Структура;
		СтруктураСведений.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(врИмяФайла), Новый УникальныйИдентификатор));
		
		Возврат СтруктураСведений;
		
	Исключение
		// Обработка ошибок экспорта данных из 1С
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Ошибка записи данных файла :" + ИмяФайла);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ВыгрузитьТаблицуСчетчиков()

&НаКлиенте
// Функция предназначена для проверки заполнения обязательных реквизитов выгрузки.
//
Функция ЗаполненыОбязательныеРеквизиты()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не заполнен период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена организация!", "Не заполнена организация!");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогВыгрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнен каталог выгрузки!", "Не заполнен каталог выгрузки!");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ЗаполненыОбязательныеРеквизиты()

&НаСервере
// Производит начальное заполнение параметров обработки.
//
// Параметры:
//  Нет
//
Процедура ИнициализацияРеквизитов()
	
	СтруктураПараметров =
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("Параметры_КВП_ВыгрузкаВСистемуПлатон");
	
	врТаблицаОрганизаций = Неопределено;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("КаталогВыгрузки", Объект.КаталогВыгрузки);
		СтруктураПараметров.Свойство("Организация",     Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияРеквизитов()

&НаСервереБезКонтекста
// Функция формирует массив наименований шапки ТЧ "Таблица_ФайлСчетов".
//
Функция СформироватьМассивШапкиТаблицыСчетов()
	
	ШапкаТаблицыСчетов = Новый Массив;
	ШапкаТаблицыСчетов.Добавить("№");
	ШапкаТаблицыСчетов.Добавить("Номер лицевого счета плательщика");
	ШапкаТаблицыСчетов.Добавить("Тип населенного пункта");
	ШапкаТаблицыСчетов.Добавить("Название населенного пункта");
	ШапкаТаблицыСчетов.Добавить("Тип улицы");
	ШапкаТаблицыСчетов.Добавить("Название улицы");
	ШапкаТаблицыСчетов.Добавить("Номер дома");
	ШапкаТаблицыСчетов.Добавить("Номер корпуса");
	ШапкаТаблицыСчетов.Добавить("Номер квартиры");
	ШапкаТаблицыСчетов.Добавить("Фамилия имя отчество плательщика");
	ШапкаТаблицыСчетов.Добавить("Имя плательщика");
	ШапкаТаблицыСчетов.Добавить("Отчество плательщика");
	ШапкаТаблицыСчетов.Добавить("Общая площадь квартиры/помещения или ее части приходящаяся на данный лицевой счет (кв.м)");
	ШапкаТаблицыСчетов.Добавить("Жилая площадь квартиры/помещения или ее части приходящаяся на данный лицевой счет (кв.м)");
	ШапкаТаблицыСчетов.Добавить("Число постоянно проживающих (чел.)");
	ШапкаТаблицыСчетов.Добавить("Число временно проживающих (чел.)");
	ШапкаТаблицыСчетов.Добавить("Число временно отсутствующих (чел.)");
	
	Возврат ШапкаТаблицыСчетов;
	
КонецФункции //СформироватьМассивШапкиТаблицыСчетов()

&НаСервереБезКонтекста
// Функция формирует массив наименований шапки ТЧ "Таблица_ФайлНачислений".
//
Функция СформироватьМассивШапкиТаблицыНачислений()
	
	ШапкаТаблицыНачислений = Новый Массив;
	ШапкаТаблицыНачислений.Добавить("№");
	ШапкаТаблицыНачислений.Добавить("Расчетный период");
	ШапкаТаблицыНачислений.Добавить("Номер лицевого счета плательщика");
	ШапкаТаблицыНачислений.Добавить("ФИО плательщика");
	ШапкаТаблицыНачислений.Добавить("Код услуги");
	ШапкаТаблицыНачислений.Добавить("Наименование услуги");
	ШапкаТаблицыНачислений.Добавить("Сумма, начисленная  по услуге, с учетом всех льгот и перерасчетов (руб.)");
	ШапкаТаблицыНачислений.Добавить("Входящее сальдо по услуге или по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма платежей по услуге или по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма начислений по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Исходящее сальдо по услуге или по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Входящее сальдо (задолженность на начало расчетного периода)  по пени  по счету в целом (руб. )");
	ШапкаТаблицыНачислений.Добавить("Начисленная сумма пени по счету в целом с учетом возможных перерасчетов (руб.)");
	ШапкаТаблицыНачислений.Добавить("Исходящее сальдо по пени по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма льгот по услуге (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма перерасчетов по услуге (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма субсидий по услуге (руб.)");
	ШапкаТаблицыНачислений.Добавить("Объем потребленного ресурса по услуге");
	ШапкаТаблицыНачислений.Добавить("Способ определения расхода (по счетчику, по норме расхода)");
	ШапкаТаблицыНачислений.Добавить("Единица измерения объема потребленного ресурса по услуге");
	ШапкаТаблицыНачислений.Добавить("Размер текущего тарифа по услуге (руб.)");
	ШапкаТаблицыНачислений.Добавить("Начисленная сумма по услуге (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма перерасчета входящего сальдо по услуге или по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма льгот по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма перерасчетов по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма субсидий по счету в целом (руб.)");
	ШапкаТаблицыНачислений.Добавить("Сумма перерасчета пени (руб.)");
	
	Возврат ШапкаТаблицыНачислений;
	
КонецФункции // СформироватьМассивШапкиТаблицыНачислений()

&НаСервереБезКонтекста
// Функция формирует массив наименований шапки ТЧ "Таблица_ФайлСчетчиков".
//
Функция СформироватьМассивШапкиТаблицыСчетчиков()
	
	ШапкаТаблицыСчетчиков = Новый Массив;
	ШапкаТаблицыСчетчиков.Добавить("№");
	ШапкаТаблицыСчетчиков.Добавить("Номер лицевого счета плательщика");
	ШапкаТаблицыСчетчиков.Добавить("Код услуги");
	ШапкаТаблицыСчетчиков.Добавить("Идентификатор (код) счетчика");
	
	Возврат ШапкаТаблицыСчетчиков;
	
КонецФункции // СформироватьМассивШапкиТаблицыСчетчиков()

&НаСервере
// Сохраняет данные в хранилище.
//
Процедура ЗаполнитьДанныеВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогВыгрузки", Объект.КаталогВыгрузки);
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("Параметры_КВП_ВыгрузкаВСистемуПлатон",,
																	СтруктураПараметров);
	
КонецПроцедуры // ЗаполнитьДанныеВХранилище()

&НаКлиенте
// Записывает файл из двоичных данных по адресу временного хранилища.
//
Процедура ЗаписатьФайлНаКлиенте(СтруктураСведений, ИмяФайла)
	
	Если Не СтруктураСведений = Неопределено Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(СтруктураСведений.АдресВХранилище);
		ДанныеФайла.Записать(ИмяФайла); 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файл выгружен успешно: "  + ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
