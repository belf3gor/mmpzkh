
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

#Область ПеременныеМодуля

Перем мНастройкиУчетнойПолитикиТСЖотказ1 Экспорт; // Флаг отказа в получении настроек учетной политики по ТСЖ.
Перем мНастройкиУчетнойПолитикиТСЖ1 Экспорт;      // Хранит настройки учетной политики по ТСЖ.
Перем ЛьготыСправочно1 Экспорт;                   // Хранит информацию о способе учета льгот.

#КонецОбласти

#Область ПроцедурыМодуля

// Процедура предназначена для установки первоначальных значений переменных обработки.
//
Процедура ИнициализацияПараметров() Экспорт
	
	мНастройкиУчетнойПолитикиТСЖотказ1 = Ложь;
	мНастройкиУчетнойПолитикиТСЖ1 = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(Период),
																									Организация,
																									мНастройкиУчетнойПолитикиТСЖотказ1);
	
	ЛьготыСправочно1 = ?(мНастройкиУчетнойПолитикиТСЖотказ1, Ложь, мНастройкиУчетнойПолитикиТСЖ1.НеУчитыватьЛьготыВоВзаиморасчетах);
	
КонецПроцедуры // ИнициализацияПараметров()

// Функция предназначена для проверки заполнения обязательных реквизитов выгрузки.
//
Функция ЗаполненыОбязательныеРеквизиты() Экспорт
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не заполнен период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена организация!", "Не заполнена организация!");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнен каталог выгрузки!", "Не заполнен каталог выгрузки!");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ЗаполненыОбязательныеРеквизиты()

// Получает таблицу с лицевыми счетами, помещениями и зданиями, соответствующими
// объектам отчета.
//
// Параметры:
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//   Таблица значений   - таблица со всеми объектами отчета.
//
Функция ПолучитьТаблицуОбъектовКвитанции() Экспорт
	
	// Группа л/с.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	СписокОткрытыхЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	СписокОткрытыхЛС.ЛицевойСчет.Адрес КАК Помещение,
	|	СписокОткрытыхЛС.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
	|	СписокОткрытыхЛС.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|	ИЗ
	|		РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаНач, ) КАК КВП_ЛицевыеСчетаСрезПоследних
	|	ГДЕ
	|		КВП_ЛицевыеСчетаСрезПоследних.Действует
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		КВП_ЛицевыеСчета.ЛицевойСчет
	|	ИЗ
	|		РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|	ГДЕ
	|		КВП_ЛицевыеСчета.Действует
	|		И КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон) КАК СписокОткрытыхЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , ) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|		ПО СписокОткрытыхЛС.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|ГДЕ
	|	(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток > 0
	|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход > 0
	|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияРасход > 0
	|			ИЛИ НЕ СписокОткрытыхЛС.ЛицевойСчет ЕСТЬ NULL )
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Код,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет.Адрес.Суффикс,
	|	СписокОткрытыхЛС.ЛицевойСчет,
	|	СписокОткрытыхЛС.ЛицевойСчет.Адрес,
	|	СписокОткрытыхЛС.ЛицевойСчет.Адрес.Владелец,
	|	СписокОткрытыхЛС.ЛицевойСчет.Адрес.Подъезд
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерКвартиры,
	|	СуффиксКвартиры";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Период));
	
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЛС.Сортировать("ЛицевойСчет");
	ТаблицаЛС.Свернуть("ЛицевойСчет, Помещение, Подъезд, Здание");
	
	Возврат ТаблицаЛС;

КонецФункции // ПолучитьТаблицуОбъектовКвитанции()

// Предназаначена для получения данных из базы о состояних лицевых счетов в указанном периоде.
//
Функция ПолучитьТаблицуСведенийЛС(ТаблицаЛС, СписокЛС, СписокПомещений) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",         НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаЛС",       ТаблицаЛС);
	Запрос.УстановитьПараметр("СписокЛС",        СписокЛС);
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	Запрос.УстановитьПараметр("ВидПлощади1",     Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	Запрос.УстановитьПараметр("ВидПлощади2",     Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.ЛицевойСчет,
	|	ТаблицаЛС.Помещение
	|ПОМЕСТИТЬ втЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛС.Помещение.Владелец КАК Объект
	|ИЗ
	|	втЛС КАК втЛС
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛС.Помещение.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛС.ЛицевойСчет,
	|	втЛС.Помещение,
	|	ЕСТЬNULL(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец, """") КАК ОтветственныйСобственник,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади, """") = &ВидПлощади1
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|							ТОГДА ВЫБОР
	|									КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|										ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель * КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади, """") = &ВидПлощади2
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|							ТОГДА ВЫБОР
	|									КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|										ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель * КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|		КОНЕЦ) КАК ЖилаяПлощадь,
	|	втКонтактнаяИнформация.НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	втЛС КАК втЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЛС.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|		ПО втЛС.ЛицевойСчет = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКон,
	|				Объект В (&СписокПомещений)
	|					И ВидПлощади В (&ВидПлощади1, &ВидПлощади2)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втЛС.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛС.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛС.ЛицевойСчет,
	|	втЛС.Помещение,
	|	ЕСТЬNULL(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец, """"),
	|	втКонтактнаяИнформация.НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СписокЗарегистрированных.ЛицевойСчет, СписокПроживающих.ЛицевойСчет) КАК ЛицевойСчет,
	|	СУММА(ЕСТЬNULL(СписокЗарегистрированных.КоличествоЗарегистрированных, 0)) КАК КоличествоЗарегистрированных,
	|	СУММА(ЕСТЬNULL(СписокПроживающих.КоличествоПроживающих, 0)) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втЛС_РС_СведенияОПроживающих
	|ИЗ
	|	(ВЫБРАТЬ
	|		УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|	ИЗ
	|		РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				&ДатаКон,
	|				ЛицевойСчет В (&СписокЛС)
	|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|	ГДЕ
	|		УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет) КАК СписокПроживающих
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|					&ДатаКон,
	|					ЛицевойСчет В (&СписокЛС)
	|						И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ГДЕ
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет) КАК СписокЗарегистрированных
	|		ПО СписокПроживающих.ЛицевойСчет = СписокЗарегистрированных.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(СписокЗарегистрированных.ЛицевойСчет, СписокПроживающих.ЛицевойСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
	|		ИНАЧЕ втУчетКоличестваЖильцов.ЛицевойСчет
	|	КОНЕЦ КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЛС_РС_СведенияОПроживающих.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЛС_РС_СведенияОПроживающих.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествЖильцов
	|ИЗ
	|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЛС_РС_СведенияОПроживающих КАК втЛС_РС_СведенияОПроживающих
	|		ПО втУчетКоличестваЖильцов.ЛицевойСчет = втЛС_РС_СведенияОПроживающих.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПлощади.ЛицевойСчет КАК ЛицевойСчет,
	|	втПлощади.Помещение,
	|	втПлощади.Помещение.Код КАК НомерКвартиры,
	|	втПлощади.ОтветственныйСобственник КАК ФИООтветственногоСобственника,
	|	втПлощади.ОбщаяПлощадь,
	|	втПлощади.ЖилаяПлощадь,
	|	втКоличествЖильцов.КоличествоПроживающих,
	|	втКоличествЖильцов.КоличествоЗарегистрированных КАК КоличествоПостоянноПроживающих,
	|	ВЫБОР
	|		КОГДА втКоличествЖильцов.КоличествоПроживающих - втКоличествЖильцов.КоличествоЗарегистрированных > 0
	|			ТОГДА втКоличествЖильцов.КоличествоПроживающих - втКоличествЖильцов.КоличествоЗарегистрированных
	|	КОНЕЦ КАК КоличествоВременноПроживающих,
	|	ВЫБОР
	|		КОГДА втКоличествЖильцов.КоличествоЗарегистрированных - втКоличествЖильцов.КоличествоПроживающих > 0
	|			ТОГДА втКоличествЖильцов.КоличествоЗарегистрированных - втКоличествЖильцов.КоличествоПроживающих
	|	КОНЕЦ КАК КоличествоВременноОтсутствующих,
	|	втПлощади.НаселенныйПункт КАК ТипНаселенногоПункта,
	|	втПлощади.Улица КАК ТипУлицы,
	|	втПлощади.Дом КАК НомерДома,
	|	втПлощади.Корпус КАК НомерКорпуса
	|ИЗ
	|	втПлощади КАК втПлощади
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествЖильцов КАК втКоличествЖильцов
	|		ПО втПлощади.ЛицевойСчет = втКоличествЖильцов.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	ТаблицаСведенийЛС = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСведенийЛС;
	
КонецФункции // ЗаполнитьТаблицу_ФайлСчетов()

// Функция предназначена для получения данных из базы о начислениях в указанном периоде.
//
Функция ПолучитьТаблицуНачисленийЛС(ТаблицаЛС, СписокЛС, СписокПомещений) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.ЛицевойСчет,
	|	ТаблицаЛС.Помещение
	|ПОМЕСТИТЬ втЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛС.ЛицевойСчет,
	|	втЛС.Помещение,
	|	ЕСТЬNULL(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец, """") КАК ОтветственныйВладелец
	|ПОМЕСТИТЬ втОтветственныеВладельцыЛС
	|ИЗ
	|	втЛС КАК втЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЛС.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга.Код КАК КодУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Льгота,
	|	СУММА(ВЫБОР
	|			КОГДА (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
	|					И (УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|						ИЛИ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Перерасчет,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|				ТОГДА 0
	|			ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		КОНЕЦ) КАК Начислено,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаПоСчетчикам,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам
	|ПОМЕСТИТЬ втНачислений
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга.Код
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ЛицевойСчет,
	//|	Услуга";
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачислений.Услуга КАК Услуга,
	|	втНачислений.Тариф,
	|	втНачислений.Количество,
	|	втНачислений.Льгота,
	|	втНачислений.Перерасчет,
	|	втНачислений.Начислено,
	|	СУММА(ЕСТЬNULL(КВП_ВзаиморасчетыПоЛСОстаткиНаНачало.СуммаНачисленияОстаток, 0)) КАК НачальноеСальдо,
	|	СУММА(ЕСТЬNULL(КВП_ВзаиморасчетыПоЛСОстаткиНаКонец.СуммаНачисленияОстаток, 0)) КАК КонечноеСальдо,
	|	втНачислений.СоставнаяУслуга,
	|	втНачислений.ВидТарифа,
	|	втНачислений.УслугаЯвляетсяСоставной,
	|	втНачислений.УслугаПоСчетчикам,
	|	втНачислений.УслугаСоставнаяПоСчетчикам,
	|	втНачислений.ЕдИзм,
	|	втНачислений.ВидУслуги,
	|	втНачислений.КодУслуги
	|ПОМЕСТИТЬ втСальдоПоУслуге
	|ИЗ
	|	втНачислений КАК втНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаНач,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛСОстаткиНаНачало
	|		ПО втНачислений.ЛицевойСчет = КВП_ВзаиморасчетыПоЛСОстаткиНаНачало.ЛицевойСчет
	|			И втНачислений.Услуга = КВП_ВзаиморасчетыПоЛСОстаткиНаНачало.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаКон,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛСОстаткиНаКонец
	|		ПО втНачислений.ЛицевойСчет = КВП_ВзаиморасчетыПоЛСОстаткиНаКонец.ЛицевойСчет
	|			И втНачислений.Услуга = КВП_ВзаиморасчетыПоЛСОстаткиНаКонец.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачислений.ЛицевойСчет,
	|	втНачислений.Услуга,
	|	втНачислений.Тариф,
	|	втНачислений.Количество,
	|	втНачислений.Льгота,
	|	втНачислений.Перерасчет,
	|	втНачислений.Начислено,
	|	втНачислений.СоставнаяУслуга,
	|	втНачислений.ВидТарифа,
	|	втНачислений.УслугаЯвляетсяСоставной,
	|	втНачислений.УслугаПоСчетчикам,
	|	втНачислений.УслугаСоставнаяПоСчетчикам,
	|	втНачислений.ЕдИзм,
	|	втНачислений.ВидУслуги,
	|	втНачислений.КодУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСальдоПоУслуге.ЛицевойСчет,
	|	втСальдоПоУслуге.Услуга,
	|	втСальдоПоУслуге.Тариф,
	|	втСальдоПоУслуге.Количество,
	|	втСальдоПоУслуге.Льгота,
	|	втСальдоПоУслуге.Перерасчет,
	|	втСальдоПоУслуге.Начислено,
	|	втСальдоПоУслуге.НачальноеСальдо,
	|	втСальдоПоУслуге.КонечноеСальдо,
	|	втСальдоПоУслуге.СоставнаяУслуга,
	|	втСальдоПоУслуге.ВидТарифа,
	|	втСальдоПоУслуге.УслугаЯвляетсяСоставной,
	|	втСальдоПоУслуге.УслугаПоСчетчикам,
	|	втСальдоПоУслуге.УслугаСоставнаяПоСчетчикам,
	|	втСальдоПоУслуге.ЕдИзм,
	|	втСальдоПоУслуге.ВидУслуги,
	|	втСальдоПоУслуге.КодУслуги,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА КВП_ВзаиморасчетыПоЛСНаКонец.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|					ТОГДА КВП_ВзаиморасчетыПоЛСНаКонец.СуммаНачисленияОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК КонечноеСальдоПоПени,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА КВП_ВзаиморасчетыПоЛСНаНачало.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|					ТОГДА КВП_ВзаиморасчетыПоЛСНаНачало.СуммаНачисленияОстаток
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0)) КАК НачальноеСальдоПоПени
	|ПОМЕСТИТЬ втСальдоПоПени
	|ИЗ
	|	втСальдоПоУслуге КАК втСальдоПоУслуге
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаНач,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛСНаНачало
	|		ПО втСальдоПоУслуге.ЛицевойСчет = КВП_ВзаиморасчетыПоЛСНаНачало.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаКон,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛСНаКонец
	|		ПО втСальдоПоУслуге.ЛицевойСчет = КВП_ВзаиморасчетыПоЛСНаКонец.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втСальдоПоУслуге.Услуга,
	|	втСальдоПоУслуге.ЛицевойСчет,
	|	втСальдоПоУслуге.СоставнаяУслуга,
	|	втСальдоПоУслуге.ВидТарифа,
	|	втСальдоПоУслуге.УслугаЯвляетсяСоставной,
	|	втСальдоПоУслуге.УслугаПоСчетчикам,
	|	втСальдоПоУслуге.УслугаСоставнаяПоСчетчикам,
	|	втСальдоПоУслуге.ЕдИзм,
	|	втСальдоПоУслуге.ВидУслуги,
	|	втСальдоПоУслуге.КодУслуги,
	|	втСальдоПоУслуге.Тариф,
	|	втСальдоПоУслуге.Количество,
	|	втСальдоПоУслуге.Льгота,
	|	втСальдоПоУслуге.Перерасчет,
	|	втСальдоПоУслуге.Начислено,
	|	втСальдоПоУслуге.НачальноеСальдо,
	|	втСальдоПоУслуге.КонечноеСальдо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Пени,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И (УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|						ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПерерасчетПени,
	|	втСальдоПоПени.ЛицевойСчет,
	|	втСальдоПоПени.Услуга,
	|	втСальдоПоПени.Тариф,
	|	втСальдоПоПени.Количество,
	|	втСальдоПоПени.Льгота,
	|	втСальдоПоПени.Перерасчет,
	|	втСальдоПоПени.Начислено,
	|	втСальдоПоПени.НачальноеСальдо,
	|	втСальдоПоПени.КонечноеСальдо,
	|	втСальдоПоПени.СоставнаяУслуга,
	|	втСальдоПоПени.ВидТарифа,
	|	втСальдоПоПени.УслугаЯвляетсяСоставной,
	|	втСальдоПоПени.УслугаПоСчетчикам,
	|	втСальдоПоПени.УслугаСоставнаяПоСчетчикам,
	|	втСальдоПоПени.ЕдИзм,
	|	втСальдоПоПени.ВидУслуги,
	|	втСальдоПоПени.КодУслуги,
	|	втСальдоПоПени.КонечноеСальдоПоПени,
	|	втСальдоПоПени.НачальноеСальдоПоПени
	|ПОМЕСТИТЬ втПени
	|ИЗ
	|	втСальдоПоПени КАК втСальдоПоПени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Месяц,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)
	|					И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК УПЖКХ_НачисленияОбороты
	|		ПО втСальдоПоПени.ЛицевойСчет = УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втСальдоПоПени.ВидУслуги,
	|	втСальдоПоПени.Услуга,
	|	втСальдоПоПени.КодУслуги,
	|	втСальдоПоПени.ЛицевойСчет,
	|	втСальдоПоПени.ЕдИзм,
	|	втСальдоПоПени.УслугаСоставнаяПоСчетчикам,
	|	втСальдоПоПени.УслугаПоСчетчикам,
	|	втСальдоПоПени.УслугаЯвляетсяСоставной,
	|	втСальдоПоПени.ВидТарифа,
	|	втСальдоПоПени.СоставнаяУслуга,
	|	втСальдоПоПени.Тариф,
	|	втСальдоПоПени.Количество,
	|	втСальдоПоПени.Льгота,
	|	втСальдоПоПени.Перерасчет,
	|	втСальдоПоПени.Начислено,
	|	втСальдоПоПени.НачальноеСальдо,
	|	втСальдоПоПени.КонечноеСальдо,
	|	втСальдоПоПени.КонечноеСальдоПоПени,
	|	втСальдоПоПени.НачальноеСальдоПоПени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПени.Пени,
	|	втПени.ПерерасчетПени,
	|	втПени.ЛицевойСчет,
	|	втПени.Услуга,
	|	втПени.Тариф,
	|	втПени.Количество,
	|	втПени.Льгота,
	|	втПени.Перерасчет,
	|	втПени.Начислено,
	|	втПени.НачальноеСальдо,
	|	втПени.КонечноеСальдо,
	|	втПени.СоставнаяУслуга,
	|	втПени.ВидТарифа,
	|	втПени.УслугаЯвляетсяСоставной,
	|	втПени.УслугаПоСчетчикам,
	|	втПени.УслугаСоставнаяПоСчетчикам,
	|	втПени.ЕдИзм,
	|	втПени.ВидУслуги,
	|	втПени.КодУслуги,
	|	втПени.КонечноеСальдоПоПени,
	|	втПени.НачальноеСальдоПоПени,
	|	СУММА(ЕСТЬNULL(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)) КАК Оплачено
	|ПОМЕСТИТЬ втОплат
	|ИЗ
	|	втПени КАК втПени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Месяц,
	|				Организация = &Организация
	|					И ЛицевойСчет В (&СписокЛС)
	|					И ВидНАчисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	|		ПО втПени.ЛицевойСчет = УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|			И втПени.Услуга = УПЖКХ_НачисленияОбороты.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втПени.ВидТарифа,
	|	втПени.ЛицевойСчет,
	|	втПени.КодУслуги,
	|	втПени.Услуга,
	|	втПени.УслугаСоставнаяПоСчетчикам,
	|	втПени.ЕдИзм,
	|	втПени.СоставнаяУслуга,
	|	втПени.ВидУслуги,
	|	втПени.УслугаЯвляетсяСоставной,
	|	втПени.УслугаПоСчетчикам,
	|	втПени.Пени,
	|	втПени.ПерерасчетПени,
	|	втПени.Тариф,
	|	втПени.Количество,
	|	втПени.Льгота,
	|	втПени.Перерасчет,
	|	втПени.Начислено,
	|	втПени.НачальноеСальдо,
	|	втПени.КонечноеСальдо,
	|	втПени.КонечноеСальдоПоПени,
	|	втПени.НачальноеСальдоПоПени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныеВладельцыЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втОтветственныеВладельцыЛС.Помещение,
	|	втОтветственныеВладельцыЛС.ОтветственныйВладелец,
	|	втОплат.Пени,
	|	втОплат.ПерерасчетПени,
	|	втОплат.Услуга,
	|	втОплат.Тариф,
	|	втОплат.Количество,
	|	втОплат.Льгота,
	|	втОплат.Перерасчет,
	|	втОплат.Начислено,
	|	втОплат.НачальноеСальдо,
	|	втОплат.КонечноеСальдо,
	|	втОплат.СоставнаяУслуга,
	|	втОплат.ВидТарифа,
	|	втОплат.УслугаЯвляетсяСоставной,
	|	втОплат.УслугаПоСчетчикам,
	|	втОплат.УслугаСоставнаяПоСчетчикам,
	|	втОплат.ЕдИзм,
	|	втОплат.ВидУслуги,
	|	втОплат.КодУслуги,
	|	втОплат.КонечноеСальдоПоПени,
	|	втОплат.НачальноеСальдоПоПени,
	|	втОплат.Оплачено
	|ИЗ
	|	втОплат КАК втОплат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтветственныеВладельцыЛС КАК втОтветственныеВладельцыЛС
	|		ПО втОплат.ЛицевойСчет = втОтветственныеВладельцыЛС.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	Запрос.УстановитьПараметр("ДатаНач",         НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ТаблицаЛС",       ТаблицаЛС);
	Запрос.УстановитьПараметр("СписокЛС",        СписокЛС);
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	
	ТаблицаНачисленийЛС = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНачисленийЛС;
	
КонецФункции // ПолучитьТаблицуНачислений()

// Формирует таблицу с информацией о льготах, начисленных справочно.
//
// Параметры:
//  Организация – организация, на которую формируется квитанция.
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция.
//  СписокЛицевыхСчетов - список лицевых счетов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со льготами.
//
Функция ПолучитьТаблицуЛьготСправочно(СписокЛС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга,
	|	СУММА(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот) КАК Льгота
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НачисленныеЛьготыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга";
	
	Запрос.УстановитьПараметр("НачалоМесяца",        НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛС);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуЛьготСправочно()

// Подготавливает таблицу начислений по текущему л/с.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура с таблица данных по всем л/с отчета.
//  ТекущиеДанные - стуктура с данными по текущему л/с.
//  ОбщиеДанные - структура с общими данными.
//  СтруктураНастроек - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица начисления.
//
Функция ПолучитьТаблицуНачисленияПоТекущемуОбъекту(ТаблицаНачисленийЛС, ТаблицаЛьготЛС, ЛицевойСчет, ОтветственныйВладелец) Экспорт
	
	// Выбираем из общей таблицы начислений начисления по текущему л/с.
	ТаблицаСНачислениями = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаНачисленийЛС, "ЛицевойСчет", ЛицевойСчет);
	ТаблицаЛьготЛС       = ПолучитьТаблицуДанныхСОтборомПоКритерию(ТаблицаЛьготЛС, "ЛицевойСчет", ЛицевойСчет);
	//ТекущиеДанные.Вставить("ТаблицаСНачислениями", ТаблицаСНачислениями);
	
	ТаблицаНачисления = ТаблицаСНачислениями.СкопироватьКолонки();
	
	// Компонуем и детализируем начисления.
	СкомпоноватьНачисления(ТаблицаСНачислениями, ТаблицаЛьготЛС, ТаблицаНачисления, ЛицевойСчет, ОтветственныйВладелец);
	
	Возврат ТаблицаНачисления;
	
КонецФункции // ПолучитьТаблицуНачисленияПоТекущемуОбъекту()

// Формирует таблицу с данными на основе исходной таблицы по заданым критерия отбора.
//
// Параметры:
//  ИсходнаяТаблица - исходная таблица.
//  НазваниеКритерия - наименование колонки, по значениям которой будем выполнять отбор.
//  ЗначениеКритерия - значение критерия отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с найденными строками.
//
Функция ПолучитьТаблицуДанныхСОтборомПоКритерию(ИсходнаяТаблица, НазваниеКритерия, ЗначениеКритерия, НазваниеДопКритерия = Неопределено, 
												ЗначениеДопКритерия = Неопределено)
	
	НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(Новый Структура(НазваниеКритерия, ЗначениеКритерия));
	ИтоговаяТаблица = ИсходнаяТаблица.Скопировать(НайденныеСтроки);
	
	Если Не НазваниеДопКритерия = Неопределено И Не ЗначениеДопКритерия = Неопределено Тогда
		НайденныеДопСтроки = ИсходнаяТаблица.НайтиСтроки(Новый Структура(НазваниеДопКритерия, ЗначениеДопКритерия));
		
		Для Каждого Строка Из НайденныеДопСтроки Цикл
			ЗаполнитьЗначенияСвойств(ИтоговаяТаблица.Добавить(), Строка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИтоговаяТаблица;
	
КонецФункции // ПолучитьТаблицуДанныхПоТекущемуЛицевомуСчету()

// Обрабатывает таблицу со всеми начислениями по текущему лицевому счету, компонуя
// строки начисления, детализируя по видам тарифов и по составляющим услугам.
//
// Параметры:
//  ТекущиеДанные - структура с данными по текущему л/с.
//  ТаблицаНачисления - таблица начисления по текущему л/с.
//  ОбщиеДанные - структура с общими данными.
//  СтруктураНастроек - структура с пользовательскими настройками.
//
Процедура СкомпоноватьНачисления(ТаблицаСНачислениями, ТаблицаЛьготСправочно, ТаблицаНачисления, ЛицевойСчет, ОтветственныйВладелец)
	
	ТаблицаУслуг = ТаблицаСНачислениями.Скопировать();
	ТаблицаУслуг.Свернуть("Услуга, ВидУслуги, ЕдИзм, УслугаЯвляетсяСоставной, УслугаПоСчетчикам, УслугаСоставнаяПоСчетчикам");
	ТаблицаУслуг.Сортировать("Услуга Возр");
	ТаблицаНачисления.Колонки.Добавить("ВидДляВывода",        Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("КОплате",             Новый ОписаниеТипов("Число"));

	ТаблицаНачисления.Колонки.Добавить("ТарифДляВывода",      Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("ОбщИДнТарифыНеРавны", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаУслуги Из ТаблицаУслуг Цикл 
		
		Услуга = СтрокаУслуги.Услуга;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Услуга", Услуга);
		СтрокиНачисления = ТаблицаСНачислениями.НайтиСтроки(Отбор);
		ТаблицаПоУслуге  = ТаблицаСНачислениями.Скопировать(СтрокиНачисления);
		
		// Если в выборке из регистра имеется только одна строка по текущей
		// услуге, начисления по данной услуге компоновать и детализировать
		// не требуется.
		Если ТаблицаПоУслуге.Количество() = 1 Тогда
			СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ТаблицаЛьготСправочно, ОтветственныйВладелец);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУслуги.УслугаПоСчетчикам Тогда
			// Компонуем и детализируем начисления по видам тарифов для услуг со 
			// способом расчета "По показаниям счетчика".
			ДетализироватьПоВидамТарифа(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ТаблицаЛьготСправочно, ОтветственныйВладелец);
		ИначеЕсли СтрокаУслуги.УслугаЯвляетсяСоставной Тогда 
			// Компонуем и детализируем начисления по составляющим услугам для составных услуг.
			ДетализироватьПоСоставляющимУслугам(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ТаблицаЛьготСправочно, ОтветственныйВладелец);
		Иначе
			// Компонуем начисления для всех остальных услуг.
			СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ТаблицаЛьготСправочно, ОтветственныйВладелец);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкомпоноватьНачисления()

// Для услуг, по которым нет необходимости детализировать начисления, добавляет единственную
// строку в итоговую таблицу.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге.
//  ЛицевойСчет - текущий лицевой счет.
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге.
//  ТаблицаНачисления - итоговая таблица начисления.
//  СтруктураНастроек - структура с настройками пользователя.
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно.
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с.
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//
Процедура СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ТаблицаЛьготСправочно, ОтветственныйВладелец)
	
	Услуга    = СтрокаУслуги.Услуга;
	ВидУслуги = СтрокаУслуги.ВидУслуги;
	ЕдИзм     = СтрокаУслуги.ЕдИзм;
	КодУслуги = СтрокаУслуги.Услуга.Код;
	
	Количество            = ТаблицаПоУслуге.Итог("Количество");
	Начислено             = ТаблицаПоУслуге.Итог("Начислено");
	Перерасчет            = ТаблицаПоУслуге.Итог("Перерасчет");
	Льгота                = ТаблицаПоУслуге.Итог("Льгота");
	Пени                  = ТаблицаПоУслуге[0].Пени;
	ПерерасчетПени        = ТаблицаПоУслуге[0].ПерерасчетПени;
	НачальноеСальдо       = ТаблицаПоУслуге[0].НачальноеСальдо;
	КонечноеСальдо        = ТаблицаПоУслуге[0].КонечноеСальдо;
	НачальноеСальдоПоПени = ТаблицаПоУслуге[0].НачальноеСальдоПоПени;
	КонечноеСальдоПоПени  = ТаблицаПоУслуге[0].КонечноеСальдоПоПени;
	Оплачено              = ТаблицаПоУслуге[0].Оплачено;
	КОплате               = Начислено + Перерасчет - Льгота;
	
	ПредставлениеТарифа = ПолучитьТарифПоУслуге(Организация, КонецМесяца(Период), 
												ЛицевойСчет, Услуга, ТаблицаПоУслуге);
	РазмерТарифа        = ПолучитьРазмерТарифа(ПредставлениеТарифа);
	
	НоваяСтрока                            = ТаблицаНачисления.Добавить();
	НоваяСтрока.ЛицевойСчет                = ЛицевойСчет;
	НоваяСтрока.ОтветственныйВладелец      = ОтветственныйВладелец;
	НоваяСтрока.КодУслуги                  = КодУслуги;
	НоваяСтрока.Услуга                     = Услуга;
	НоваяСтрока.ВидУслуги                  = ВидУслуги;
	НоваяСтрока.ВидТарифа                  = ТаблицаПоУслуге.Получить(0).ВидТарифа;
	НоваяСтрока.ВидДляВывода               = ВидУслуги;
	НоваяСтрока.ЕдИзм                      = ЕдИзм;
	НоваяСтрока.ТарифДляВывода             = ПредставлениеТарифа;
	НоваяСтрока.Тариф                      = РазмерТарифа;
	НоваяСтрока.Количество                 = Количество;
	НоваяСтрока.Начислено                  = Начислено;
	НоваяСтрока.Перерасчет                 = Перерасчет;
	НоваяСтрока.Льгота                     = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно1);
	НоваяСтрока.Пени                       = Пени;
	НоваяСтрока.ПерерасчетПени             = ПерерасчетПени;
	НоваяСтрока.НачальноеСальдо            = НачальноеСальдо;
	НоваяСтрока.КонечноеСальдо             = КонечноеСальдо;
	НоваяСтрока.НачальноеСальдоПоПени      = НачальноеСальдоПоПени;
	НоваяСтрока.КонечноеСальдоПоПени       = КонечноеСальдоПоПени;
	НоваяСтрока.Оплачено                   = Оплачено;
	НоваяСтрока.КОплате                    = КОплате;
	НоваяСтрока.УслугаПоСчетчикам          = СтрокаУслуги.УслугаПоСчетчикам;
	НоваяСтрока.УслугаСоставнаяПоСчетчикам = СтрокаУслуги.УслугаСоставнаяПоСчетчикам;
	
КонецПроцедуры // СвернутьНачисленияПоУслуге()

// Анализирует таблицу начисления по текущей услуге и при необходимости детализирует
// начисления по видам тарифа. Полученные строки начисления записываются в 
// итоговую таблицу начисления.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге.
//  ЛицевойСчет - текущий л/с.
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге.
//  ТаблицаНачисления - итоговая таблица начисления.
//  СтруктураНастроек - структура с пользовательскими настройками.
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно.
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с.
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//
Процедура ДетализироватьПоВидамТарифа(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ТаблицаЛьготСправочно, ОтветственныйВладелец)
	
	Услуга    = СтрокаУслуги.Услуга;
	ВидУслуги = СтрокаУслуги.ВидУслуги;
	ЕдИзм     = СтрокаУслуги.ЕдИзм;
	КодУслуги = СтрокаУслуги.Услуга.Код;
	
	Перерасчет            = ТаблицаПоУслуге.Итог("Перерасчет");
	Льгота                = ТаблицаПоУслуге.Итог("Льгота");
	Количество            = ТаблицаПоУслуге.Итог("Количество");
	Начислено             = ТаблицаПоУслуге.Итог("Начислено");
	Пени                  = ТаблицаПоУслуге[0].Пени;
	ПерерасчетПени        = ТаблицаПоУслуге[0].ПерерасчетПени;
	НачальноеСальдо       = ТаблицаПоУслуге[0].НачальноеСальдо;
	КонечноеСальдо        = ТаблицаПоУслуге[0].КонечноеСальдо;
	НачальноеСальдоПоПени = ТаблицаПоУслуге[0].НачальноеСальдоПоПени;
	КонечноеСальдоПоПени  = ТаблицаПоУслуге[0].КонечноеСальдоПоПени;
	Оплачено              = ТаблицаПоУслуге[0].Оплачено;
	
	// Пытаемся найти строки начисления по всем возможным видам тарифов.
	СтрокаОбщ = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Общий,   "ВидТарифа");
	СтрокаДн  = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Дневной, "ВидТарифа");
	СтрокаНч  = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Ночной,  "ВидТарифа");
	СтрокаПик = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Пиковый, "ВидТарифа");

	НоваяСтрока                       = ТаблицаНачисления.Добавить();
	НоваяСтрока.ЛицевойСчет           = ЛицевойСчет;
	НоваяСтрока.ОтветственныйВладелец = ОтветственныйВладелец;
	НоваяСтрока.КодУслуги             = КодУслуги;
	НоваяСтрока.Услуга                = Услуга;
	НоваяСтрока.ВидУслуги             = ВидУслуги;
	НоваяСтрока.ВидТарифа             = Перечисления.КВП_ВидыТарифов.Дневной;
	НоваяСтрока.ВидДляВывода          = ВидУслуги;
	НоваяСтрока.ЕдИзм                 = ЕдИзм;
	НоваяСтрока.Тариф                 = ПолучитьТарифПоУслугеСоСчетчиком(Организация, КонецМесяца(Период),
																		ЛицевойСчет, Услуга, СтрокаДн, СтрокаОбщ, СтрокаНч, СтрокаПик);
	
	СтрокаТарифа = СформироватьСтрокуТарифа(СтрокаОбщ, СтрокаДн, СтрокаНч, СтрокаПик);
	Если ПустаяСтрока(СтрокаТарифа) Тогда
		НоваяСтрока.ТарифДляВывода    = СтрокаТарифа;
	Иначе
		НоваяСтрока.ТарифДляВывода    = "" + НоваяСтрока.Тариф;
	КонецЕсли;
	НоваяСтрока.Количество            = Количество;
	НоваяСтрока.Начислено             = Начислено;
	НоваяСтрока.Перерасчет            = Перерасчет;
	НоваяСтрока.Льгота                = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно1);
	НоваяСтрока.Оплачено              = Оплачено;
	НоваяСтрока.КОплате               = Начислено + Перерасчет - Льгота;
	НоваяСтрока.Пени                  = Пени;
	НоваяСтрока.ПерерасчетПени        = ПерерасчетПени;
	НоваяСтрока.НачальноеСальдо       = НачальноеСальдо;
	НоваяСтрока.КонечноеСальдо        = КонечноеСальдо;
	НоваяСтрока.НачальноеСальдоПоПени = НачальноеСальдоПоПени;
	НоваяСтрока.КонечноеСальдоПоПени  = КонечноеСальдоПоПени;
	НоваяСтрока.УслугаПоСчетчикам = Истина;
	
КонецПроцедуры // ДетализироватьПоВидамТарифа()

// Анализирует таблицу начисления по текущей услуге и при необходимости детализирует
// начисления по составляющим услугам. Полученные строки начисления записываются в 
// итоговую таблицу начисления.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге.
//  ЛицевойСчет - текущий л/с.
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге.
//  ТаблицаНачисления - итоговая таблица начисления.
//  СтруктураНастроек - структура с пользовательскими настройками.
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно.
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с.
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//
Процедура ДетализироватьПоСоставляющимУслугам(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ТаблицаЛьготСправочно, ОтветственныйВладелец)
	
	//ЛьготыСправочно = СтруктураНастроек.ЛьготыСправочно;
	
	Услуга                     = СтрокаУслуги.Услуга;
	ВидУслуги                  = СтрокаУслуги.ВидУслуги;
	ЕдИзм                      = СтрокаУслуги.ЕдИзм;
	УслугаПоСчетчикам          = СтрокаУслуги.УслугаПоСчетчикам;
	УслугаСоставнаяПоСчетчикам = СтрокаУслуги.УслугаСоставнаяПоСчетчикам;
	КодУслуги                  = СтрокаУслуги.Услуга.Код;
	
	Количество            = ТаблицаПоУслуге.Итог("Количество");
	Перерасчет            = ТаблицаПоУслуге.Итог("Перерасчет");
	Льгота                = ТаблицаПоУслуге.Итог("Льгота");
	Начислено             = ТаблицаПоУслуге.Итог("Начислено");
	Пени                  = ТаблицаПоУслуге[0].Пени;
	ПерерасчетПени        = ТаблицаПоУслуге[0].ПерерасчетПени;
	Оплачено              = ТаблицаПоУслуге[0].Оплачено;
	НачальноеСальдо       = ТаблицаПоУслуге[0].НачальноеСальдо;
	КонечноеСальдо        = ТаблицаПоУслуге[0].КонечноеСальдо;
	НачальноеСальдоПоПени = ТаблицаПоУслуге[0].НачальноеСальдоПоПени;
	КонечноеСальдоПоПени  = ТаблицаПоУслуге[0].КонечноеСальдоПоПени;
	
	НайденныеСтроки = ТаблицаПоУслуге.НайтиСтроки(Новый Структура("СоставнаяУслуга", Справочники.КВП_Услуги.ПустаяСсылка()));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТаблицаЛьгот    = ТаблицаПоУслуге.Скопировать(НайденныеСтроки);
		Льгота          = ТаблицаЛьгот.Итог("Льгота");
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ТаблицаПоУслуге.Удалить(ТекСтрока);
		КонецЦикла;
	Иначе
		Льгота = 0;
	КонецЕсли;
	
	ТаблицаСостУслуг = ТаблицаПоУслуге.Скопировать();
		
	НоваяСтрока                            = ТаблицаНачисления.Добавить();
	НоваяСтрока.ЛицевойСчет                = ЛицевойСчет;
	НоваяСтрока.ОтветственныйВладелец      = ОтветственныйВладелец;
	// Выводим код составной услуги.
	НоваяСтрока.КодУслуги                  = КодУслуги;
	НоваяСтрока.Услуга                     = Услуга;
	НоваяСтрока.ВидУслуги                  = ВидУслуги;
	НоваяСтрока.ВидДляВывода               = ВидУслуги;
	НоваяСтрока.ЕдИзм                      = ЕдИзм;
	НоваяСтрока.ТарифДляВывода             = СформироватьТарифДляВыводаСоставнойУслуги(ТаблицаСостУслуг, ЛицевойСчет, ТаблицаПоУслуге);
	НоваяСтрока.Количество                 = Количество;
	НоваяСтрока.Начислено                  = Начислено;
	НоваяСтрока.Перерасчет                 = Перерасчет;
	НоваяСтрока.Льгота                     = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно1);
	НоваяСтрока.Оплачено                   = Оплачено;
	НоваяСтрока.КОплате                    = Начислено + Перерасчет - Льгота;
	НоваяСтрока.Пени                       = Пени;
	НоваяСтрока.ПерерасчетПени             = ПерерасчетПени;
	НоваяСтрока.НачальноеСальдо            = НачальноеСальдо;
	НоваяСтрока.КонечноеСальдо             = КонечноеСальдо;
	НоваяСтрока.НачальноеСальдоПоПени      = НачальноеСальдоПоПени;
	НоваяСтрока.КонечноеСальдоПоПени       = КонечноеСальдоПоПени;
	НоваяСтрока.УслугаПоСчетчикам          = УслугаПоСчетчикам;
	НоваяСтрока.УслугаСоставнаяПоСчетчикам = УслугаСоставнаяПоСчетчикам;
	
КонецПроцедуры // ДетализироватьПоСоставляющимУслугам()

// Получает строковое представление тарифа по услуге без счетчика.
//
// Параметры:
//  Организация - организация, на которую формируется квитанция.
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция.
//  ЛицевойСчет - текущий лицевой счет.
//  Услуга - текущая услуга.
//  Таблица - таблица с начислением по текущей услуге.
//  СоставляющаяУслуга - признак, является ли услуга составляющей.
// 
// Возвращаемое значение:
//  Строка - строковое представление тарифа по текущей услуге.
// 
Функция ПолучитьТарифПоУслуге(Организация, ПериодПросмотра, ЛицевойСчет, Услуга, Таблица, СоставляющаяУслуга = Ложь)
	
	Тариф = "";
	
	// Если услуга составляющая, находим строки с начислением по ней.
	Если СоставляющаяУслуга Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("СоставнаяУслуга", Услуга);
		СтрокиПоУслуге  = Таблица.НайтиСтроки(Отбор);
		ТаблицаПоУслуге = Таблица.Скопировать(СтрокиПоУслуге);
	Иначе
		ТаблицаПоУслуге = Таблица.Скопировать();
	КонецЕсли;
	
	// Ищем тариф в выборке из регистра.
	// В случае необходимости вывода в одной строке начислений по нескольким видам
	// тарифа, указываем размеры тарифов через слэш.

	СтрокаОбщ = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Общий,   "ВидТарифа");
	СтрокаДн  = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Дневной, "ВидТарифа");
	СтрокаНч  = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Ночной,  "ВидТарифа");
	СтрокаПик = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Пиковый, "ВидТарифа");
	
	Для Каждого Строка Из ТаблицаПоУслуге Цикл
		
		Если Не СтрокаОбщ = Неопределено Тогда
			Тариф = Тариф + СтрокаОбщ.Тариф;
			СтрокаОбщ = Неопределено;
		ИначеЕсли Не СтрокаДн = Неопределено Тогда
			Тариф = Тариф + СтрокаДн.Тариф;
			СтрокаДн = Неопределено;
		КонецЕсли;
		
		Если Не СтрокаНч = Неопределено Тогда
			Если ЗначениеЗаполнено(Тариф) Тогда
				Тариф = Тариф + "/" + СтрокаНч.Тариф;
			Иначе
				Тариф = Тариф + СтрокаНч.Тариф;
			КонецЕсли;
			СтрокаНч = Неопределено;
		КонецЕсли;
		
		Если Не СтрокаПик = Неопределено Тогда
			Если ЗначениеЗаполнено(Тариф) Тогда
				Тариф = Тариф + "/" + СтрокаПик.Тариф;
			Иначе
				Тариф = Тариф + СтрокаПик.Тариф;
			КонецЕсли;
			СтрокаПик = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если тариф в выборке не найден, значит начислений в отчетном месяце не было.
	// Были начислены льготы, либо проведены перерасчеты.					
	Если Не ЗначениеЗаполнено(Тариф) Тогда
		РазмерТарифа = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПериодПросмотра), Организация, Услуга, ЛицевойСчет);
		
		ПроверитьДлинуДробнойЧастиТарифа(РазмерТарифа);
		
		Тариф = "" + РазмерТарифа;
	КонецЕсли;
			
	Возврат Тариф;
	
КонецФункции // ПолучитьТарифПоУслуге()

// Получает размер тарифа по строковому представлению.
//
// Параметры:
//  ПредставлениеТарифа - строковое представление тарифа.
//
// Возвращаемое значение:
//  Число - размер тарифа.
//
Функция ПолучитьРазмерТарифа(ПредставлениеТарифа)
	
	Попытка
		Возврат Число(ПредставлениеТарифа);
	Исключение
		Возврат 0;
	КонецПопытки;	
	
КонецФункции // ПолучитьРазмерТарифа()

// Функция предназначена для получения данных из базы о наличии действующих ИПУ на лицевых счетах.
//
Функция ПолучитьТаблицуСчетчиков(ТаблицаЛС, СписокЛС, СписокПомещений) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.ЛицевойСчет,
	|	ТаблицаЛС.Помещение
	|ПОМЕСТИТЬ втЛС
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Идентификатор КАК ИдентификаторСчетчика,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.Код КАК КодУслуги
	|ИЗ
	|	втЛС КАК втЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаКон, Объект В (&СписокЛС) И ДатаИзменения <= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ПО втЛС.ЛицевойСчет = КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Счетчик";
	
	Запрос.УстановитьПараметр("ДатаНач",         НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",         КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ТаблицаЛС",       ТаблицаЛС);
	Запрос.УстановитьПараметр("СписокЛС",        СписокЛС);
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции // ПолучитьТаблицуСчетчиков()

// Получает сумму начисленной льготы по текущей услуге с учетом настроек УП.
//
// Параметры:
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно.
//  Льгота - сумма льгот, полученная из РН "Начисления".
//  Услуга - текущая услуга.
//  ЛьготыСправочно - пользовательская настройка.
//
// Возвращаемое значение:
//  Число - сумма льгот.
//
Функция ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно)
	
	СуммаЛьготы = Льгота;
	
	Если ЛьготыСправочно И Не ТаблицаЛьготСправочно.Количество() = 0 Тогда
		СтрокаТекУслуги = ТаблицаЛьготСправочно.Найти(Услуга, "Услуга");
		
		Если Не СтрокаТекУслуги = Неопределено Тогда
			СуммаЛьготы = СтрокаТекУслуги.Льгота;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаЛьготы;
	
КонецФункции // ПолучитьЛьготуПоТекущейУслуге()

// Получает тариф по услуге со счетчиком. 
// 
// Параметры:
//  Организация - организация, на которую формируется квитанция.
//  ПериодПросмотра - дата, по состоянию на которую формируется квитанция.
//  ЛицевойСчет - текущий лицевой счет.
//  Услуга - текущая услуга.
//  СтрокаОбщ - строка начисления в разрезе общего вида тарифа.
//  СтрокаДн - строка начисления в разрезе дневного вида тарифа.
//  СтрокаНч - строка начисления в разрезе ночного вида тарифа.
//  СтрокаПик - строка начисления в разрезе пикового вида тарифа.
//  
// Возвращаемое значение:
//  Число - тариф по текущей услуге.
//  
Функция ПолучитьТарифПоУслугеСоСчетчиком(Организация, ПериодПросмотра, ЛицевойСчет, Услуга, СтрокаДн, СтрокаОбщ, СтрокаНч, СтрокаПик)
	
	// Ищем тариф в выборке из регистра.
	Тариф = ?(Не СтрокаДн = Неопределено, СтрокаДн.Тариф, ?(Не СтрокаОбщ = Неопределено, 
	      СтрокаОбщ.Тариф, ?(Не СтрокаНч = Неопределено, СтрокаНч.Тариф, СтрокаПик. Тариф)));
		  
	// Если тариф в выборке не найден, значит начислений в отчетном месяце не было.
	// Были начислены льготы, либо проведены перерасчеты.
	Если Тариф = Неопределено Тогда
		Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПериодПросмотра), Организация, Услуга, ЛицевойСчет);	  
	КонецЕсли;
	
	Возврат Тариф;
	
КонецФункции // ПолучитьТарифПоУслугеСоСчетчиком()

// Убирает из наименования лицевого счета не цифровые символы.
// 
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет) Экспорт
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет.Наименование);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

// Проверяет длину дробной части тарифа по услуге. Если она состоит более, чем из
// 3-х цифр, округляет до 3-х знаков после запятой.
//
// Параметры:
//  Тариф - тариф по услуге 
//
Процедура ПроверитьДлинуДробнойЧастиТарифа(Тариф) Экспорт
	
	ТарифСтрока  = Строка(Тариф);
	ДлинаСтроки  = СтрДлина(ТарифСтрока);
	НомерЗапятой = Найти(ТарифСтрока, ",");
	
	Если НомерЗапятой = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СимволовСправа = ДлинаСтроки - НомерЗапятой;	
	ДробнаяЧасть   = Прав(ТарифСтрока, СимволовСправа); 
	
	Если СтрДлина(ДробнаяЧасть) > 3 Тогда
		Тариф = Окр(Тариф, 3);
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьДлинуТарифа()

// Функция предназначена для формирования строки с тарифами по услуге.
//
Функция СформироватьСтрокуТарифа(СтрокаОбщ, СтрокаДн, СтрокаНч, СтрокаПик)
	
	СтрокаДляВозврата = "";
	
	Если НЕ СтрокаОбщ = Неопределено Тогда
		СтрокаДляВозврата = СтрокаОбщ.ТарифДляВывода;
	КонецЕсли;
	
	Если НЕ СтрокаДн = Неопределено Тогда
		СтрокаДляВозврата = ?(НЕ ПустаяСтрока(СтрокаДляВозврата), СтрокаДляВозврата + "/" + СтрокаДн.Тариф, СтрокаДляВозврата + СтрокаДн.Тариф);
	КонецЕсли;
	
	Если НЕ СтрокаНч = Неопределено Тогда
		СтрокаДляВозврата = ?(НЕ ПустаяСтрока(СтрокаДляВозврата), СтрокаДляВозврата + "/" + СтрокаНч.Тариф, СтрокаДляВозврата + СтрокаНч.Тариф);
	КонецЕсли;
	
	Если НЕ СтрокаПик = Неопределено Тогда
		СтрокаДляВозврата = ?(НЕ ПустаяСтрока(СтрокаДляВозврата), СтрокаДляВозврата + "/" + СтрокаПик.Тариф, СтрокаДляВозврата + СтрокаПик.Тариф);
	КонецЕсли;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // СформироватьСтрокуТарифа()

// Функция предназначена для формирования строки с тарифом по составной услуге.
//
Функция СформироватьТарифДляВыводаСоставнойУслуги(ТаблицаСостУслуг, ЛицевойСчет, ТаблицаПоУслуге)
	
	СтрокаДляВозврата = "";
	//ТаблицаСостУслуг.Сортировать("Тариф Возр");
	ТаблицаСостУслуг.Свернуть("СоставнаяУслуга, ЕдИзм");
	Для Каждого ТекУслуга Из ТаблицаСостУслуг Цикл
		СостУслуга = ТекУслуга.СоставнаяУслуга;
		ПредставлениеТарифа = ПолучитьТарифПоУслуге(Организация, Период, 
													ЛицевойСчет, СостУслуга, ТаблицаПоУслуге, Истина);
		//РазмерТарифа        = ПолучитьРазмерТарифа(ПредставлениеТарифа);
		
		СтрокаДляВозврата = ?(НЕ ПустаяСтрока(СтрокаДляВозврата), СтрокаДляВозврата + "/"+ ПредставлениеТарифа, СтрокаДляВозврата + ПредставлениеТарифа);
		
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // СформироватьТарифДляВыводаСоставнойУслуги()

#КонецОбласти

#КонецЕсли