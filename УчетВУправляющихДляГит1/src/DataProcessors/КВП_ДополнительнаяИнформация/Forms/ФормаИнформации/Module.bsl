////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	КонфигурацияБазовая       = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	КонфигурацияМоделиСервиса = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ОпределитьКаталогВременныхФайлов();
	
	СтандартныйПрефиксБезКода = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/";
	СтандартныйПрефиксСКодом = СтандартныйПрефиксБезКода + ТекущийКодЛокализации() + "/";
	
	ПравоСохраненияДанных = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	Если КонфигурацияБазовая ИЛИ НЕ ПравоСохраненияДанных Тогда
		Элементы.ПоказыватьПриНачалеРаботы.Видимость = Ложь;
	Иначе
		ПоказыватьПриНачалеРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЖКХ_ИнформацияПриЗапуске",
																					 "Показывать", Истина);
	КонецЕсли;
	
	Если НЕ ЗаполнитьКоманды()
		ИЛИ НЕ ПодготовитьДанныеФормы() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ КонфигурацияБазовая И ПравоСохраненияДанных Тогда
		СохранитьСостояниеФлажка(ПоказыватьПриНачалеРаботы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
// Обработчик события "ПриНажатии" поля "ВебСодержимое".
Процедура ВебСодержимоеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия.Свойство("href") Тогда
		СтандартнаяОбработка = Ложь;
		ИмяОткрываемойСтраницы = ДанныеСобытия.href;
		ИмяОткрываемойСтраницы = СтрЗаменить(ИмяОткрываемойСтраницы, СтандартныйПрефиксСКодом, "");
		ИмяОткрываемойСтраницы = СтрЗаменить(ИмяОткрываемойСтраницы, СтандартныйПрефиксБезКода, "");
		Если ИмяОткрываемойСтраницы = ДанныеСобытия.href Тогда
			ПерейтиПоНавигационнойСсылке(ИмяОткрываемойСтраницы);
		Иначе
			ПросмотрСтраницы("ПоВнутреннейСсылке", ИмяОткрываемойСтраницы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Вперед".
Процедура Вперед(Команда)
	ПросмотрСтраницы("Вперед", Неопределено);
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Назад".
Процедура Назад(Команда)
	ПросмотрСтраницы("Назад", Неопределено);
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Подключаемый_ПерейтиКСтранице".
Процедура Подключаемый_ПерейтиКСтранице(Команда)
	ПросмотрСтраницы("КомандаИзКоманднойПанели", Команда.Имя);
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедуры

&НаСервере
// Определить каталог временных файлов.
Процедура ОпределитьКаталогВременныхФайлов()
	ПутьККаталогу = ПолучитьИмяВременногоФайла("extras");
	СоздатьКаталог(ПутьККаталогу);
	Каталог = Новый Файл(ПутьККаталогу);
	КаталогВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог.ПолноеИмя);
	Каталог = Неопределено;
КонецПроцедуры

&НаСервере
// Заполнить команды.
Функция ЗаполнитьКоманды()
	// Считывает данные макета "Описатель", заполняя таблицу "ДобавленныеКоманды"
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТабличныйДокумент = ОбработкаОбъект.ПолучитьМакет("Описатель");
	
	Для НомерСтроки = 3 По ТабличныйДокумент.ВысотаТаблицы Цикл
		ПрефиксСтроки = "R"+ НомерСтроки +"C";
		
		// Чтение данных первой колонки
		ИмяМакета = ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 1, , "КонецТаблицы");
		Если НРег(ИмяМакета) = "конецтаблицы" Тогда
			Прервать;
		КонецЕсли;
		
		// Чтение и преобразование сведений о команде в требуемый формат
		СведенияОКоманде = Новый Структура;
		СведенияОКоманде.Вставить("Раздел",                        ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 2));
		СведенияОКоманде.Вставить("НаименованиеСтартовойСтраницы", ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 3));
		СведенияОКоманде.Вставить("ИмяФайлаСтартовойСтраницы",     ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 4));
		СведенияОКоманде.Вставить("ДатаНачалаПоказа",
								  ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 5, "Дата", '00010101'));
		СведенияОКоманде.Вставить("ДатаОкончанияПоказа",
								  ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 6, "Дата", '29990101'));
		СведенияОКоманде.Вставить("ВключатьВПервыйПоказ",
								  ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 7, "Число", 0));
		СведенияОКоманде.Вставить("ПоказыватьВПроф",
								  ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 8,  "Булево", Истина));
		СведенияОКоманде.Вставить("ПоказыватьВБазовой",
								  ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 9,  "Булево", Истина));
		СведенияОКоманде.Вставить("ПоказыватьВМоделиСервиса",
								  ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 10, "Булево", Истина));
		
		// Пропуск если данные не актуальны
		Если СведенияОКоманде.ДатаНачалаПоказа > ТекущаяДатаСеанса
			ИЛИ СведенияОКоманде.ДатаОкончанияПоказа < ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропуск если данные не подходят к конфигурации
		Если КонфигурацияБазовая Тогда
			Если НЕ СведенияОКоманде.ПоказыватьВБазовой Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли КонфигурацияМоделиСервиса Тогда
			Если НЕ СведенияОКоманде.ПоказыватьВМоделиСервиса Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если НЕ СведенияОКоманде.ПоказыватьВПроф Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление информации о команде
		СтрокаТаблицы = ДобавленныеКоманды.Добавить();
		СтрокаТаблицы.ИмяМакета = ИмяМакета;
		СтрокаТаблицы.Идентификатор = Строка(НомерСтроки - 2);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СведенияОКоманде);
		
		Если НРег(СтрокаТаблицы.Раздел) = НРег(НСтр("ru = 'Реклама'")) Тогда
			СтрокаТаблицы.Приоритет = 0;
		ИначеЕсли СтрокаТаблицы.ВключатьВПервыйПоказ <> 0 Тогда
			СтрокаТаблицы.Приоритет = СтрокаТаблицы.ВключатьВПервыйПоказ;
		Иначе
			СтрокаТаблицы.Приоритет = 100;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеКоманды.Количество() > 0;
	
КонецФункции

&НаСервере
// Подготовливает данные формы.
Функция ПодготовитьДанныеФормы()
	ПоказываемыеИнформационныеСтраницы = Новый Массив;
	ИнформационныеСтраницы = Новый Массив;
	РекламныеСтраницы = Новый Массив;
	
	НаименованиеТекущегоРаздела = "-";
	ТекущееПодменю = Неопределено;
	ДобавленоПодменю = 0;
	МинимальныйПриоритет = 100;
	
	ДобавленныеКоманды.Сортировать("Раздел");
	Для Каждого СтрокаТаблицы Из ДобавленныеКоманды Цикл
		
		НаименованиеРаздела = СокрЛП(СтрокаТаблицы.Раздел);
		
		Если НаименованиеТекущегоРаздела <> НаименованиеРаздела Тогда
			НаименованиеТекущегоРаздела = НаименованиеРаздела;
			
			Если НаименованиеРаздела = НСтр("ru = 'Главная'") ИЛИ НаименованиеРаздела = "" Тогда
				ТекущееПодменю = Элементы.БезПодменю;
			Иначе
				ДобавленоПодменю = ДобавленоПодменю + 1;
				ТекущееПодменю = Элементы.Добавить("Подменю" + Строка(ДобавленоПодменю),
												   Тип("ГруппаФормы"), Элементы.ВерхняяПанель);
				ТекущееПодменю.Вид = ВидГруппыФормы.Подменю;
				ТекущееПодменю.Заголовок = НаименованиеРаздела;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.ЗаголовокФормы = НСтр("ru = 'Информация'");
		Если ТекущееПодменю <> Элементы.БезПодменю Тогда
			СтрокаТаблицы.ЗаголовокФормы = СтрокаТаблицы.ЗаголовокФормы + ": " + СтрокаТаблицы.Раздел
										 + " / " + СтрокаТаблицы.НаименованиеСтартовойСтраницы;
		КонецЕсли;
		
		ИмяКоманды = "ДобавленныйЭлемент_" + СтрокаТаблицы.Идентификатор;
		
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Действие = "Подключаемый_ПерейтиКСтранице";
		Команда.Заголовок = СтрокаТаблицы.НаименованиеСтартовойСтраницы;
		
		Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ТекущееПодменю);
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		МинимальныйПриоритет = Мин(СтрокаТаблицы.Приоритет, МинимальныйПриоритет);
		
	КонецЦикла;
	
	//Если МинимальныйПриоритет = 100 Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Найденные = ДобавленныеКоманды.НайтиСтроки(Новый Структура("Приоритет", МинимальныйПриоритет));
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	НомерСтроки = ГенераторСлучайныхЧисел.СлучайноеЧисло(1, Найденные.Количество());
	
	Возврат ПросмотрСтраницы("КомандаИзТаблицыДобавленных", Найденные[НомерСтроки-1]);
КонецФункции

&НаСервере
// Открывает просмотр страницы.
Функция ПросмотрСтраницы(ТипДействия, Параметр = Неопределено)
	Перем СтрокаКоманды, АдресСтраницы, НоваяСтрокаИстории, НоваяСтрокаИсторииИндекс; //, Назад, Вперед;
	
	Если ТипДействия = "ПоВнутреннейСсылке" Тогда
		
		ИмяОткрываемойСтраницы = Параметр;
		СтрокаИстории = ИсторияПросмотра.НайтиПоИдентификатору(ТекущаяСтрокаИстории);
		СтрокаКоманды = ДобавленныеКоманды.НайтиПоИдентификатору(СтрокаИстории.КомандаИдентификатор);
		
		Поиск = Новый Структура("ОтносительноеИмя", СтрЗаменить(ИмяОткрываемойСтраницы, "\", "/"));
		
		Найденные = СтрокаКоманды.ВебСтраницы.НайтиСтроки(Поиск);
		Если Найденные.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		АдресСтраницы = Найденные[0].Адрес;
		
	ИначеЕсли ТипДействия = "Назад" ИЛИ ТипДействия = "Вперед" Тогда
		
		СтрокаИстории = ИсторияПросмотра.НайтиПоИдентификатору(ТекущаяСтрокаИстории);
		
		НоваяСтрокаИсторииИндекс = ИсторияПросмотра.Индекс(СтрокаИстории) + ?(ТипДействия = "Назад", -1, +1);
		НоваяСтрокаИстории = ИсторияПросмотра[НоваяСтрокаИсторииИндекс];
		
		СтрокаКоманды = ДобавленныеКоманды.НайтиПоИдентификатору(НоваяСтрокаИстории.КомандаИдентификатор);
		АдресСтраницы = НоваяСтрокаИстории.АдресСтраницы;
		
	ИначеЕсли ТипДействия = "КомандаИзКоманднойПанели" Тогда
		
		ИмяКоманды = Параметр;
		Найденные = ДобавленныеКоманды.НайтиСтроки(Новый Структура("Идентификатор",
												   СтрЗаменить(ИмяКоманды, "ДобавленныйЭлемент_", "")));
		Если Найденные.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		СтрокаКоманды = Найденные[0];
		
	ИначеЕсли ТипДействия = "КомандаИзТаблицыДобавленных" Тогда
		
		СтрокаКоманды = Параметр;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Размещение во временном хранилище
	РазместитьСтраницыКоманды(СтрокаКоманды);
	
	// Получение адреса размещения страницы во временном хранилище
	Если АдресСтраницы = Неопределено Тогда
		АдресСтраницы = СтрокаКоманды.АдресСтартовойСтраницы;
	КонецЕсли;
	
	// Регистрация в истории просмотра
	Если НоваяСтрокаИстории = Неопределено Тогда
		
		НоваяСтрокаИсторииСтруктура = Новый Структура("КомандаИдентификатор, АдресСтраницы");
		НоваяСтрокаИсторииСтруктура.КомандаИдентификатор = СтрокаКоманды.ПолучитьИдентификатор();
		НоваяСтрокаИсторииСтруктура.АдресСтраницы = АдресСтраницы;
		
		Найденные = ИсторияПросмотра.НайтиСтроки(НоваяСтрокаИсторииСтруктура);
		Для Каждого НоваяСтрокаИсторииДубль Из Найденные Цикл
			ИсторияПросмотра.Удалить(НоваяСтрокаИсторииДубль);
		КонецЦикла;
		
		НоваяСтрокаИстории = ИсторияПросмотра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИстории, НоваяСтрокаИсторииСтруктура);
		
		НоваяСтрокаИсторииИндекс = ИсторияПросмотра.Индекс(НоваяСтрокаИстории);
		
	КонецЕсли;
	
	ТекущаяСтрокаИстории = НоваяСтрокаИстории.ПолучитьИдентификатор();
	
	// Видимость / Доступность
	Элементы.ФормаНазад.Доступность = (НоваяСтрокаИсторииИндекс > 0);
	Элементы.ФормаВперед.Доступность = (НоваяСтрокаИсторииИндекс < ИсторияПросмотра.Количество() - 1);
	
	// Установка веб содержимого и заголовка формы
	ВебСодержимое = ПолучитьИзВременногоХранилища(АдресСтраницы);
	Заголовок = СтрокаКоманды.ЗаголовокФормы;
	
	Возврат Истина;
КонецФункции

&НаСервере
// Размещает страницы команды на форме.
Процедура РазместитьСтраницыКоманды(СтрокаТаблицы)
	
	Если СтрокаТаблицы.АдресСтартовойСтраницы <> "" Тогда
		Возврат;
	КонецЕсли;
	
	// Извлечение страницы
	Попытка
		ДвоичныеДанные = РеквизитФормыВЗначение("Объект").ПолучитьМакет(СтрокаТаблицы.ИмяМакета);
		ДвоичныеДанные.Записать(КаталогВременныхФайлов + "tmp.zip");
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Стандартные подсистемы. Дополнительная информация'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(КаталогВременныхФайлов + "tmp.zip");
	ЧтениеZipФайла.ИзвлечьВсе(КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	УдалитьФайлы(КаталогВременныхФайлов, "tmp.zip");
	
	Картинки = Новый Соответствие; // Ключ - относительное имя, Значение - адрес в хранилище.
	
	Найденные = НайтиФайлы(КаталогВременныхФайлов, "*", Истина);
	Для Каждого Файл Из Найденные Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ОтносительноеИмя = СтрЗаменить(Файл.ПолноеИмя, КаталогВременныхФайлов, "");
		ОтносительноеИмя = СтрЗаменить(ОтносительноеИмя, "\", "/");
		
		Расширение = СтрЗаменить(НРег(Файл.Расширение), ".", "");
		
		Если Расширение = "htm" ИЛИ Расширение = "html" Тогда
			ОтносительныйКаталог = "";
			Каталоги = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтносительноеИмя, "/");
			Каталоги.Удалить(Каталоги.ВГраница());
			Для Каждого Каталог Из Каталоги Цикл
				ОтносительныйКаталог = ОтносительныйКаталог + Каталог + "/";
			КонецЦикла;
			
			РазмещениеФайла = СтрокаТаблицы.ВебСтраницы.Добавить();
			РазмещениеФайла.ОтносительноеИмя = ОтносительноеИмя;
			РазмещениеФайла.Адрес = Файл.ПолноеИмя;
			РазмещениеФайла.ОтносительныйКаталог = ОтносительныйКаталог;
		Иначе
			АдресКартинки = ПоместитьВоВременноеХранилище(Новый Картинка(Новый ДвоичныеДанные(Файл.ПолноеИмя)),
																		 УникальныйИдентификатор);
			Картинки.Вставить(ОтносительноеИмя, АдресКартинки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РазмещениеФайла Из СтрокаТаблицы.ВебСтраницы Цикл
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(РазмещениеФайла.Адрес);
		
		ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();
		
		ФайлВПодкаталоге = ЗначениеЗаполнено(РазмещениеФайла.ОтносительныйКаталог);
		Для Каждого КлючИЗначение Из Картинки Цикл
			ПутьККартинке = КлючИЗначение.Ключ;
			АдресКартинки = КлючИЗначение.Значение;
			Если ФайлВПодкаталоге Тогда
				Если Найти(ПутьККартинке, "/") = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПутьККартинке = СтрЗаменить(ПутьККартинке, РазмещениеФайла.ОтносительныйКаталог, "");
			КонецЕсли;
			ТекстHTML = СтрЗаменить(ТекстHTML, ПутьККартинке, АдресКартинки);
		КонецЦикла;
		
		РазмещениеФайла.Адрес = ПоместитьВоВременноеХранилище(ТекстHTML, УникальныйИдентификатор);
		
		Если РазмещениеФайла.ОтносительноеИмя = СтрокаТаблицы.ИмяФайлаСтартовойСтраницы Тогда
			СтрокаТаблицы.АдресСтартовойСтраницы = РазмещениеФайла.Адрес;
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьФайлы(КаталогВременныхФайлов, "*");
КонецПроцедуры

&НаСервереБезКонтекста
// Сохраняет состояние флажка.
Процедура СохранитьСостояниеФлажка(ПоказыватьПриНачалеРаботы)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЖКХ_ИнформацияПриЗапуске", "Показывать", ПоказыватьПриНачалеРаботы);
КонецПроцедуры

&НаСервере
// Функция возвращает данные колонки.
Функция ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, НомерКолонки, Тип = "Строка", ЗначениеПоУмолчанию = "")
	Результат = СокрЛП(ТабличныйДокумент.Область(ПрефиксСтроки + Строка(НомерКолонки)).Текст);
	Если ПустаяСтрока(Результат) Тогда
		Возврат ЗначениеПоУмолчанию;
	ИначеЕсли Тип = "Число" Тогда
		Возврат Число(Результат);
	ИначеЕсли Тип = "Дата" Тогда
		Возврат Дата(Результат);
	ИначеЕсли Тип = "Булево" Тогда
		Возврат Результат <> "0";
	Иначе
		Возврат Результат;
	КонецЕсли;
КонецФункции

#КонецОбласти
