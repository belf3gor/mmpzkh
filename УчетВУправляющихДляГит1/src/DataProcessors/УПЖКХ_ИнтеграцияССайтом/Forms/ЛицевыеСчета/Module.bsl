

#Область ОбщееДляВсехФорматовОбмена
///////////////////////////////////////////////////////////////////////////////
// ОБЩЕЕ ДЛЯ ВСЕХ ФОРМАТОВ.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработка события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ИнтеграцияССайтом"));
	
	ТекОбъект.ИнициализацияРеквизитов();
	
	ЗначениеВДанныеФормы(ТекОбъект, Объект);
	
	УправлениеВидимостьюКнопкиПодбораЛС();
	
	Если НЕ Объект.НастройкаДоступа = Справочники.УПЖКХ_НастройкиДоступаКСайту.ПустаяСсылка() Тогда
		ЗаполнитьПараметрыПодключения();
		ПервоеОткрытие = УстановитьФактПервогоОткрытия(Объект.НастройкаДоступа);
	Иначе
		ПервоеОткрытие = Ложь;
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКнопки);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработка события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	// Начальные настройки
	Элементы.ГруппаГенерацияПараметровДоступаНаСайтВерсия3.Видимость = Ложь;
	Элементы.ГруппаГенерацияПараметровДоступаНаСайтВерсия4.Видимость = Ложь;
	Элементы.ГруппаПовторноеСоединение.Видимость                     = Ложь;
	Элементы.ГруппаЭтапыВерсия4.Видимость                            = Ложь;
	Элементы.ТаблицаПинкодов.Видимость                               = Ложь;
	Элементы.ГруппаОбновлятьПараметрыВерсия4.Видимость               = Ложь;
	
	ПолучитьСтруктуруИнформацииОСайте();
	
	ОпределитьПараметрыОткрытияФормыПодбора();
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ИнициализацияФормы", 0.1, Истина);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработка события "Оповещение" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЭтаФорма.Активизировать();
	
	// Заполнение ТЧ.
	Если ИмяСобытия = "ПередачаТЗ" ИЛИ ИмяСобытия = "ПередачаВыбранныхЛС" Тогда
		
		АдресВХранилище    = Параметр;
		МассивЛСПолученный = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Если МассивЛСПолученный.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран ни один лицевой счет.");
			
		Иначе
			
			// Проверяем л/с на соответствие организации, указанной в настройке доступа.
			МассивЛС = ОтобратьЛСПоНастройкеПараметровДоступа(МассивЛСПолученный);
			
			Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 3 Тогда
				ЗаполнитьТаблицуЛицевыхСчетов(МассивЛС);
			ИначеЕсли СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
				ЗаполнитьТаблицуПинкодов(МассивЛС);
			КонецЕсли;
			
			АктуализироватьСведенияОНаличииПараметровДоступа();
			
		КонецЕсли;
		
	// Получение пароля при первом открытии формы.
	ИначеЕсли ИмяСобытия = "ПарольДляПервогоОткрытияФормы" Тогда
		
		ПараметрыПодключения.Пароль = Параметр;
		ОбработчикПервогоОткрытияФормы();
		
	// Передача ПД 3-я версия.
	ИначеЕсли ИмяСобытия = "ПарольДляПередачиПараметров3" Тогда
		
		ПараметрыПодключения.Пароль = Параметр;
		ОбработчикПередачиПД();
		
	// Получение сведений о наличии параметров доступа 4-я версия
	ИначеЕсли ИмяСобытия = "ПарольДляПолученияСведенийОПараметрахССайта4" Тогда
		
		ПараметрыПодключения.Пароль = Параметр;
		ОбработчикПолученияСведенийОНаличииПараметровДоступаССайта4();
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Обработка события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЛС.Количество() > 0 И НЕ ВсеПараметрыЗаписаны Тогда
		
		ЗадатьВопрос("Имеются несохраненные данные. При закрытии они будут утеряны. Продолжить?", "ОбработатьНесохраненныеДанныеПередЗакрытием");
		
		Отказ = Истина;
		
	КонецЕсли;
	
	СохранитьРеквизиты();
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода настройки доступа.
//
Процедура НастройкаДоступаПриИзменении(Элемент)
	
	ПолучитьСтруктуруИнформацииОСайте();
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 3 Тогда
		
		Если ЗначениеЗаполнено(Объект.НастройкаДоступа) И УстановитьФактПервогоОткрытия(Объект.НастройкаДоступа) Тогда
			ОбработкаПервогоОткрытияФормы();
		КонецЕсли;
		
	ИначеЕсли СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		
		ПолучитьССайтаДанныеОПараметрахДоступаЛСВерсия4();
		
	КонецЕсли;
	
	ВсеПараметрыСгенерированы = Ложь;
	ВсеПараметрыЗаписаны      = Ложь;
	ВсеПараметрыПереданы      = Ложь;
	ВсеКарточкиРаспечатаны    = Ложь;
	
	ОпределитьПараметрыОткрытияФормыПодбора();
	
	УправлениеФормой();
	
КонецПроцедуры // НастройкаДоступаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Инициализирует состояние элементов формы.
//
Процедура ИнициализацияФормы()
	
	Если НЕ СтруктураИнформацииОСайте = Неопределено Тогда
		
		Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 3 Тогда
			
			// Автозаполнение нужно только в 3-й версии обмена.
			Если ПервоеОткрытие Тогда
				ОбработкаПервогоОткрытияФормы();
			КонецЕсли;
			
		ИначеЕсли СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
			
			ПолучитьССайтаДанныеОПараметрахДоступаЛСВерсия4();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Осуществляет отбор л/с, у контрагентов которых есть договор с организацией,
// указанной в выбранной настройке доступа.
// 
Функция ОтобратьЛСПоНастройкеПараметровДоступа(МассивЛС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация = &Организация
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЛССоответствуетОрганизации
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(, ЛицевойСчет В (&МассивЛС)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|ГДЕ
	|	втЛицевыеСчета.ЛССоответствуетОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.ЛицевойСчет.Наименование КАК НаименованиеЛС
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|ГДЕ
	|	НЕ втЛицевыеСчета.ЛССоответствуетОрганизации";
	
	Запрос.УстановитьПараметр("МассивЛС",    МассивЛС);
	Запрос.УстановитьПараметр("Организация", Объект.НастройкаДоступа.Организация);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаОтобранныхЛС                = РезультатЗапроса[1].Выгрузить();
	ТаблицаЛСБезДоговоровСОрганизацией = РезультатЗапроса[2].Выгрузить();
	
	Если ТаблицаОтобранныхЛС.Количество() = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выбранные лицевые счета не соответствуют организации, указанной в настройке доступа к сайту.
		                                                 |Пожалуйста, убедитесь, что контрагенты выбранных лицевых счетов имеют договоры с данной организацией.");
		
	ИначеЕсли НЕ ТаблицаЛСБезДоговоровСОрганизацией.Количество() = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для выполнения обмена данными требуется наличие договора между контрагентом по лицевому счету и организацией, указанной в настройке доступа к сайту.
		                                                 |В силу отсутствия таких договоров не выполнен обмен по следующим лицевым счетам:");
		Для каждого ТекЛС из ТаблицаЛСБезДоговоровСОрганизацией Цикл
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекЛС.НаименованиеЛС);
		КонецЦикла;
		
	КонецЕсли;
	
	ОрганизацияВыбранныхЛицевыхСчетов = Объект.НастройкаДоступа.Организация;
	
	Возврат ТаблицаОтобранныхЛС.ВыгрузитьКолонку("ЛицевойСчет");
	
КонецФункции

&НаСервере
// Функция проверяет наличие соответствия организации, использованной при отборе л/с,
// и организации, указанной в выбранной настройке доступа.
//
Функция ПроверитьСоответствиеОрганизацииЛСиНастройкиДоступа()
	
	ОрганизацииСоответствуют = ОрганизацияВыбранныхЛицевыхСчетов = Объект.НастройкаДоступа.Организация;
	
	Если НЕ ОрганизацииСоответствуют Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Операция не будет выполнена: организация, указанная в настройке доступа, не соответствует организации, для которой осуществлялся подбор лицевых счетов.");
	КонецЕсли;
	
	Возврат ОрганизацииСоответствуют;
	
КонецФункции

&НаКлиенте
// Управляет видимостью и доступностью элементов формы.
//
Процедура УправлениеФормой()
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 0 Тогда
		
		Элементы.ГруппаРазличныхВерсий.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаРазличныхВерсий.Видимость = Истина;
		
		Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 3 Тогда
			
			Элементы.ГруппаГенерацияПараметровДоступаНаСайтВерсия4.Видимость = Ложь;
			Элементы.ГруппаГенерацияПараметровДоступаНаСайтВерсия3.Видимость = Истина;
			
			УправлениеФормойВерсия3();
			
		ИначеЕсли СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
			
			Элементы.ГруппаГенерацияПараметровДоступаНаСайтВерсия3.Видимость = Ложь;
			Элементы.ГруппаГенерацияПараметровДоступаНаСайтВерсия4.Видимость = Истина;
			
			Если НЕ Элементы.ГруппаПовторноеСоединение.Видимость Тогда
				
				Элементы.ГруппаГенерацияПараметровДоступаНаСайтВерсия4.Видимость = Истина;
				Элементы.ТаблицаПинкодовЛогин.Видимость                          = ИспользоватьЛогиныВВерсии4;
				Элементы.ТаблицаПинкодовЗаписатьЛогины.Видимость                 = ИспользоватьЛогиныВВерсии4;
				Элементы.ТаблицаПинкодовПинкод.Заголовок                         = ?(ИспользоватьЛогиныВВерсии4, "Пароль", "Пинкод");
				
				УправлениеФормойВерсия4();
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Сохраняет настройки пользователя в хранилище настроек.
//
Процедура СохранитьРеквизиты()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НастройкаДоступа", Объект.НастройкаДоступа);
	
	ХранилищеОбщихНастроек.Сохранить("Обработка.УПЖКХ_ИнтеграцияССайтом", , СтруктураНастроек);
	
КонецПроцедуры // СохранитьРеквизиты()

&НаСервере
// Формирует структуру с параметрами подключения к сайту.
//
Процедура ЗаполнитьПараметрыПодключения()
	
	ХранитьПароль = Объект.НастройкаДоступа.ХранитьПароль;
	
	Если ХранитьПароль Тогда
		
		Пароль = Объект.НастройкаДоступа.Пароль;
		
	Иначе
		
		Пароль = ?(ПараметрыПодключения = Неопределено, "", ПараметрыПодключения.Пароль);
		
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ХранитьПароль", ХранитьПароль);
	ПараметрыПодключения.Вставить("Пароль",        Пароль);
	
	
КонецПроцедуры // ЗаполнитьПараметрыПодключения()

&НаКлиенте
// Открывает форму для ввода пароля.
//
Процедура ПолучитьПарольДоступа(Параметр = Неопределено)
	
	Если Параметр = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ВидОперации", Параметр);
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ВебИнтеграцияВводПароля", СтруктураПараметров, ЭтаФорма, Истина,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПолучитьПарольДоступа()

&НаСервере
// Выполняет выгрузку параметров доступа на сайт.
//
Процедура ВыполнитьВыгрузкуПараметровДоступаНаСервере(Пароль)
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		
		ТаблицаЗагрузки = ПолучитьТаблицуПинкодовДляВыгрузки();
		
	Иначе
		// Выгружаем данные только по тем л/с, по которым имеются и логин и пароль.
		ТаблицаЗагрузки = ПолучитьТаблицуЛСДляВыгрузки();
	КонецЕсли;
	
	УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьВыгрузкуПараметровДоступаПоЛС(Объект.НастройкаДоступа,
																			   ТаблицаЗагрузки,
																			   ВсеПараметрыПереданы,
																			   СтруктураИнформацииОСайте,
																			   ,
																			   Пароль,
																			   Объект.ОбновлятьПараметрыДоступа,
																			   ИспользоватьЛогиныВВерсии4);
	
КонецПроцедуры // ВыполнитьВыгрузкуПараметровДоступаНаСервере()

&НаСервере
// Процедура производит генерацию ПД на сервере.
//
Функция СгенерироватьПараметрыНаСервере(ЛицевойСчет, ДопЧисло, МассивЛогинов)
	
	СтруктураПД = Новый Структура;
	
	// Генерируем логин, меняем доп. число.
	СтруктураПД.Вставить("Логин", УПЖКХ_ВебИнтеграцияОбщегоНазначения.ПолучитьИдентификаторЛогина( ,
																								  УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Наименование"),
																								  ДопЧисло,
																								  МассивЛогинов));
	ДопЧисло = ДопЧисло + 1;
	
	МассивЛогинов.Добавить(СтруктураПД.Логин);
	
	// Генерируем пароль.
	СтруктураПД.Вставить("Пароль", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПарольДоступаВеб(, ДопЧисло));
	
	Возврат СтруктураПД;
	
КонецФункции // СгенерироватьПараметрыНаСервере()

&НаСервереБезКонтекста
// Формирует массив логинов по л/с, которые уже есть в БД.
//
// Возвращаемое значение:
//  Массив - логины, имеющиеся в БД.
//
Функция ПолучитьМассивЛогиновИмеющихсяВБД(ОбновлятьПД = Ложь, МассивЛС = Неопределено)
	
	Если МассивЛС = Неопределено Тогда
		МассивЛС = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЛогинДоступа
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ (ВЫРАЗИТЬ(КВП_ЛицевыеСчета.ЛогинДоступа КАК СТРОКА(1))) = """"
	|	И ВЫБОР
	|			КОГДА &ОбновлятьПД
	|				ТОГДА НЕ КВП_ЛицевыеСчета.Ссылка В (&МассивЛС)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ОбновлятьПД", ОбновлятьПД);
	Запрос.УстановитьПараметр("МассивЛС",    МассивЛС);
	
	ТаблицаЛогинов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЛогинов.ВыгрузитьКолонку("ЛогинДоступа");
	
КонецФункции // ПолучитьМассивЛогиновИмеющихсяВБД()

&НаСервере
// Добавляет в массив логинов, имеющихся в БД, логины, которые уже есть в ТЧ на форме.
//
// Параметры:
//  МассивЛогинов - Массив - массив с логинами, имеющимися в БД.
//
Процедура ДополнитьМассивЛогиновДаннымиИзТЧ(МассивЛогинов, ЧетвертыйФормат = Ложь)
	
	ТаблицаСЛогинами = ?(ЧетвертыйФормат, ТаблицаПинкодов, ТаблицаЛС);
	
	Для Каждого Строка ИЗ ТаблицаСЛогинами Цикл
		Если Не ПустаяСтрока(Строка.Логин) Тогда
			МассивЛогинов.Добавить(Строка.Логин);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьМассивЛогиновДаннымиИзТЧ()

&НаСервере
// Функция, формирует представление адреса лицевого счета.
Функция ПолучитьПредставлениеАдреса(ЛицевойСчет)
	
	Помещение = ЛицевойСчет.Адрес;
	Возврат Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Помещение.Владелец) + ", кв." + Строка(Помещение.Код) + Помещение.Суффикс;
	
КонецФункции

&НаСервере
// Процедура, выполняет отправку сообщения по электронной почте.
Процедура ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭлПочты, ПараметрыПисьма)
	
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭлПочты, ПараметрыПисьма);
	
КонецПроцедуры

&НаСервере
// Функция помещает таблицу сведений об отправке почты во временное хранилище.
//
Функция ПолучитьАдресТаблицыСведенийОбОтправкеПоЭлПочте()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОтчетаОбОтправке.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Функция получает структуру с информацией о сайте.
//
Процедура ПолучитьСтруктуруИнформацииОСайте()
	
	Если НЕ Объект.НастройкаДоступа.Пустая() Тогда
		
		ЗаполнитьПараметрыПодключения();
		
		СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(Объект.НастройкаДоступа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Определяет параметры открытия формы подбора лицевых счетов.
//
Процедура ОпределитьПараметрыОткрытияФормыПодбора()
	
	ПараметрыОткрытияФормыПодбора = Новый Структура;
	Если Не Объект.НастройкаДоступа.Пустая() Тогда
		
		Организация = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.НастройкаДоступа, "Организация");
		Если Не Организация.Пустая() Тогда
			ПараметрыОткрытияФормыПодбора.Вставить("Организация", Организация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОпределитьПараметрыОткрытияФормыПодбора(0

#КонецОбласти

#Область ТретийФорматОбмена

///////////////////////////////////////////////////////////////////////////////
// 3-ЫЙ ФОРМАТ.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода лицевого счета.
//
Процедура ТаблицаЛСЛицевойСчетПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаЛС.ТекущиеДанные;
	
	Если ТаблицаЛС.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекДанные.ЛицевойСчет)).Количество() = 1 Тогда
		ИндексСтроки = ТаблицаЛС.Индекс(ТаблицаЛС.НайтиПоИдентификатору(ТекДанные.ПолучитьИдентификатор()));
		ЗаполнитьТаблицуЛицевыхСчетов(ТекДанные.ЛицевойСчет, Истина, ИндексСтроки);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выбранный лицевой счет уже имеется в таблице.");
		ТекДанные.ЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЛСЛицевойСчетПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличной части "ТаблицаЛС".
//
Процедура ТаблицаЛСПередУдалением(Элемент, Отказ)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ТаблицаЛСДействиеОповещение");//, Элемент.ТекущаяСтрока);
		
		Отказ = Истина;
		
	Иначе
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЛСПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" табличной части "ТаблицаЛС".
//
Процедура ТаблицаЛСПередНачаломИзменения(Элемент, Отказ)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ТаблицаЛСДействиеОповещение");
		
		Отказ = Истина;
		
	Иначе
	
	УправлениеФормой();
	
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЛСПередНачаломИзменения()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличной части "ТаблицаЛС".
//
Процедура ТаблицаЛСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ТаблицаЛСДействиеОповещение");
		
		Отказ = Истина;
		
	Иначе
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаЛСПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флага "Обновлять параметры доступа".
//
Процедура ПолеОбновлятьПараметрыПриИзменении(Элемент)
	
	Если Объект.ОбновлятьПараметрыДоступа Тогда
		
		ЗадатьВопрос("Старые параметры будут заменены. Продолжить редактирование?", "ОбработатьОтветОбОбновленииПараметровДоступа");
		
	КонецЕсли;
	
КонецПроцедуры // ПолеОбновлятьПараметрыПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
// Процедура - обработчик команды заполнения ТЧ "ТаблицаЛС" автоматически с отбором.
//
Процедура КомандаЗаполнитьСОтбором(Команда)
	
	Если ПустаяСтрока(ПутьКФормеПодбора) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Форма подбора не найдена.");
		
		Возврат;
	КонецЕсли;
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ЗаполнитьСОтбором");
		
	Иначе
		
		Если ТаблицаЛС.Количество() > 0 Тогда
			
			ЗадатьВопросОбОчисткеТаблицыЛС("Заполнение с отбором");
			
		Иначе
			
			ОткрытьФорму(ПутьКФормеПодбора, ПараметрыОткрытияФормыПодбора);
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьСОтбором()

&НаКлиенте
// Процедура - обработчик команды заполнения ТЧ "ТаблицаЛС" вручную.
//
Процедура КомандаЗаполнитьЛСПодбором(Команда)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ЗаполнитьЛСПодбором");
		
	Иначе
		
		Если ТаблицаЛС.Количество() > 0 Тогда
			
			ЗадатьВопросОбОчисткеТаблицыЛС("Заполнение подбором");
			
		Иначе
			
			ФормаПодбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаПодбора");
			ФормаПодбора.Открыть();
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЛСПодбором()

&НаКлиенте
// Процедура - обработчик команды генерации параметров доступа
//
Процедура СгенерироватьПараметры(Команда)
	
	Если ПроверитьСоответствиеОрганизацииЛСиНастройкиДоступа() Тогда
		
		Если ВсеПараметрыПереданы Тогда
			
			ЗадатьВопросЕслиНеВсеДанныеПереданы("ОбработчикПриНаличииПереданныхДанных");
			
		Иначе
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Логин", "");
			МассивПустыхЛогинов = ТаблицаЛС.НайтиСтроки(ПараметрыОтбора);
			
			Если Не МассивПустыхЛогинов.Количество() = ТаблицаЛС.Количество() И Объект.ОбновлятьПараметрыДоступа Тогда
				
				ЗадатьВопрос("Имеющиеся логины и пароли будут заменены новыми. Продолжить?", "ОбработатьОтветОЗаменеПараметровДоступа");
				
			Иначе
				
				ДопЧисло = 0;
				МассивЛогинов = ПолучитьМассивЛогиновИмеющихсяВБД(Ложь, ПолучитьМассивЛС());
				ДополнитьМассивЛогиновДаннымиИзТЧ(МассивЛогинов);
				
				// Перезаполняем все строки ТЧ.
				Для Каждого СтрокаТЧ Из ТаблицаЛС Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаТЧ.Логин) Тогда
						СтруктураПД = СгенерироватьПараметрыНаСервере(СтрокаТЧ.ЛицевойСчет, ДопЧисло, МассивЛогинов);
					Иначе
						Продолжить;
					КонецЕсли;
					
					СтрокаТЧ.Логин          = СтруктураПД.Логин;
					СтрокаТЧ.Пароль         = СтруктураПД.Пароль;
					СтрокаТЧ.ПДИзменены     = Истина;
					СтрокаТЧ.ДанныеЗаписаны = Ложь;
					
					ДопЧисло = ДопЧисло + 1;
					
				КонецЦикла;
				
				ВсеПараметрыСгенерированы = Истина;
				ВсеПараметрыЗаписаны      = Ложь;
				ВсеПараметрыПереданы      = Ложь;
				ВсеКарточкиРаспечатаны    = Ложь;
				
				УправлениеФормой();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СгенерироватьПараметры()

&НаКлиенте
// Процедура - обработчик команды печати памяток.
//
Процедура КомандаРаспечататьПамяткиДоступа(Команда)
	
	Если ЗначениеЗаполнено(Объект.НастройкаДоступа) Тогда
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Объект.НастройкаДоступа);
		
		// Проверяем, есть ли лицевые счета, которым отправляли параметры доступа по электронной почте.
		Если НЕ ТаблицаЛС.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Истина)).Количество() = 0 Тогда
			
			ЗадатьВопрос("Печатать памятки по лицевым счетам, которым были отправлены параметры доступа по электронной почте?", "ОбработатьОтветОПечатиПамятокДоступа", ПараметрКоманды);
			
		Иначе
			
			АдресВоВременномХранилище = ПолучитьАдресТаблицыЛСВоВременномХранилище(Ложь);
			ПараметрКоманды.Добавить(АдресВоВременномХранилище);
			
			УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Обработка.УПЖКХ_ИнтеграцияССайтом",
															 "ПамяткаДоступа",
															 ПараметрКоманды,
															 Неопределено,
															 УПЖКХ_ТиповыеМетодыКлиент.ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды));
			
			ОбработатьПечатьПамяток();
			
			УправлениеФормой();
			
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана настройка обмена данными.");
		
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры // КомандаРаспечататьПамяткиДоступа()

&НаКлиенте
// Процедура, отправляет параметры доступа на электронные ящики лицевых счетов.
//
Процедура КомандаОтправитьПараметрыДоступаПоЭлПочте(Команда)
	
	НастройкаДоступа = Объект.НастройкаДоступа;
	Организация      = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НастройкаДоступа, "Организация");
	
	Если ЗначениеЗаполнено(НастройкаДоступа) Тогда
		УчетнаяЗаписьЭлПочты = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НастройкаДоступа, "УчетнаяЗаписьЭлПочты");
		АдресСайта           = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НастройкаДоступа, "АдресСайта");
		
		Если НЕ УчетнаяЗаписьЭлПочты = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка") Тогда
			
			// Отправка параметров доступа для л/с, по которым сведения еще не отправлены.
			СтрокиБезОтправленныхСообщений = ТаблицаЛС.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Ложь));
			
			Для каждого ТекСтрокаЛС из СтрокиБезОтправленныхСообщений Цикл
				ТекЛС = ТекСтрокаЛС.ЛицевойСчет;
				Если НЕ ТекЛС = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
					ЭлПочта = СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекЛС, "АдресЭлектроннойПочты"));
					Если НЕ ЭлПочта = "" Тогда
						Попытка
							ПараметрыПисьма = Новый Структура("Кому, Тема, Тело");
							ПараметрыПисьма.Кому = ЭлПочта;
							ПараметрыПисьма.Тема = "Параметры доступа в личный кабинет";
							ПараметрыПисьма.Тело = 
							"Параметры доступа в личный кабинет на сайте " + АдресСайта + ":
							|Логин: " + ТекСтрокаЛС.Логин + "
							|Пароль: " + ТекСтрокаЛС.Пароль + "
							|
							|В целях безопасности при первом посещении личного кабинета Вам необходимо сменить пароль.";
							ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭлПочты, ПараметрыПисьма);
							
							ТекСтрокаЛС.ДанныеПереданыПоЭлПочте = Истина;
						Исключение
							ТекСтрокаЛС.ДанныеПереданыПоЭлПочте = Ложь;
							
							УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось отправить сообщение на электронную почту " + ЭлПочта + " лицевого счета " + УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекЛС, "Наименование") + ": "
							+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//////////////////////////////////////////////////////////////////////////////////
			// ФОРМИРОВАНИЕ ОТЧЕТА ОБ ОТПРАВКЕ ПАРАМЕТРОВ ДОСТУПА
			
			// Определяем, по каким л/с данные были отправлены, а по каким нет, а так же их количество.
			СтрокиПараметрыОтправлены     = ТаблицаЛС.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Истина));
			СтрокиПараметрыНеОтправлены   = ТаблицаЛС.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Ложь));
			КоличествоСтрокОтправленных   = СтрокиПараметрыОтправлены.Количество();
			КоличествоСтрокНеОтправленных = СтрокиПараметрыНеОтправлены.Количество();
			
			// Определяем количество строк таблицы.
			КоличествоСтрок = ?(КоличествоСтрокОтправленных > КоличествоСтрокНеОтправленных, КоличествоСтрокОтправленных, КоличествоСтрокНеОтправленных);
			
			// Заполняем таблицу.
			ТаблицаОтчетаОбОтправке.Очистить();
			
			Для ТекНомерСтроки = 1 по КоличествоСтрок Цикл
				НоваяСтрока = ТаблицаОтчетаОбОтправке.Добавить();
				
				Если НЕ ТекНомерСтроки > КоличествоСтрокОтправленных Тогда
					ЛицевойСчет = СтрокиПараметрыОтправлены[ТекНомерСтроки - 1].ЛицевойСчет;
					НоваяСтрока.ЛицевойСчетОтправлено = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Наименование") + " (" + ПолучитьПредставлениеАдреса(ЛицевойСчет) + ")";
				КонецЕсли;
				
				Если НЕ ТекНомерСтроки > КоличествоСтрокНеОтправленных Тогда
					ЛицевойСчет = СтрокиПараметрыНеОтправлены[ТекНомерСтроки - 1].ЛицевойСчет;
					НоваяСтрока.ЛицевойСчетНеОтправлено = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Наименование") + " (" + ПолучитьПредставлениеАдреса(ЛицевойСчет) + ")";
				КонецЕсли;
			КонецЦикла;
			
			// Выводим отчет.
			ПараметрКоманды = Новый Массив;
			ПараметрКоманды.Добавить(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.НастройкаДоступа, "Организация"));
			ПараметрКоманды.Добавить(ПолучитьАдресТаблицыСведенийОбОтправкеПоЭлПочте());
			
			УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Обработка.УПЖКХ_ИнтеграцияССайтом", "СведенияОбОтправкеПараметровДоступа",
																 ПараметрКоманды, Неопределено, Неопределено);
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для отправки почты необходимо указать учетную запись электронной почты.");
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для отправки почты необходимо заполнить поле ""Настройка доступа к сайту"".");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды заполнения ТЧ "ТаблицаЛС" всеми счетами,
// для которых не указаны параметры доступа.
//
Процедура КомандаЗаполнитьВсемиЛСБезПараметров(Команда)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ЗаполнитьВсемиЛСБезПараметров3");
		
	Иначе
		
		Если ТаблицаЛС.Количество() > 0 Тогда
			
			ЗадатьВопросОбОчисткеТаблицыЛС("Заполнить лс без параметров");
			
		Иначе
			
			ЗаполнитьТаблицуЛСБезПараметров();
			
			Если ТаблицаЛС.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Параметры доступа имеются у всех лицевых счетов.");
			КонецЕсли;
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсемиЛСБезПараметров()

&НаКлиенте
// Процедура - обработчик команды передачи параметров доступа на сайт.
//
Процедура ПередатьПараметрыВерсия3(Команда)
	
	Если ПроверитьСоответствиеОрганизацииЛСиНастройкиДоступа() Тогда
		
		Если Не ВсеПараметрыЗаписаны Тогда
			
			ЗадатьВопрос("Не все данные были записаны. Хотите сохранить их и передать на сайт?", "ОбработатьОтветОСохраненииНесохраненныхДанных");
			
		Иначе
			
			// Если все параметры записаны, передаем их на сайт.
			Если ВсеПараметрыЗаписаны Тогда
				Если ПаролиСгенерированы() Тогда
					
					ЗаполнитьПараметрыПодключения();
					
					Если ПараметрыПодключения.ХранитьПароль Тогда
						ОбработчикПередачиПД();
					Иначе
						ПолучитьПарольДоступа("ПарольДляПередачиПараметров3");
					КонецЕсли;
					
				Иначе
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо указать пароли для всех лицевых счетов.");
				КонецЕсли;
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо записать параметры доступа.");
			КонецЕсли;
			
			ВсеКарточкиРаспечатаны = Ложь;
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередатьПараметры()

&НаКлиенте
// Процедура - обработчик команды записи параметров доступа.
//
Процедура КомандаЗаписатьПараметрыДоступаВерсия3(Команда)
	
	Если ПроверитьСоответствиеОрганизацииЛСиНастройкиДоступа() Тогда
		
		Если ВсеПараметрыПереданы Тогда
			
			ЗадатьВопросЕслиНеВсеДанныеПереданы("ОбработчикПриНаличииПереданныхДанных");
			
		Иначе
			
			Если ЗначениеЗаполнено(Объект.НастройкаДоступа) Тогда
				ЗаписатьПараметрыДоступаНаСервереВерсия3();
				
				ВсеПараметрыПереданы   = Ложь;
				ВсеКарточкиРаспечатаны = Ложь;
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана настройка доступа.");
			КонецЕсли;
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьПараметрыДоступа()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Формирует массив л/с, имеющихся в ТЧ на форме.
//
// Возвращаемое значение:
//  Массив - массив с л/с
//
Функция ПолучитьМассивЛС()
	
	МассивЛС = Новый Массив;
	
	Для Каждого Строка Из ТаблицаЛС Цикл
		МассивЛС.Добавить(Строка.ЛицевойСчет);
	КонецЦикла;
	
	Возврат МассивЛС;
	
КонецФункции // ПолучитьМассивЛС()

&НаКлиенте
// Управляет видимостью и доступностью элементов формы 3-й версии обмена.
//
Процедура УправлениеФормойВерсия3()
	
	Если ВсеКарточкиРаспечатаны Тогда
		Элементы.ДекорацияЗаполнитьВыполнено.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессе.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполнено.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессе.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполнено.Видимость        = Истина;
		Элементы.ДекорацияЛогиныВПроцессе.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполнено.Видимость      = Истина;
		Элементы.ДекорацияПередачаВПроцессе.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполнено.Видимость       = Истина;
		Элементы.ДекорацияПамяткиВПроцессе.Видимость       = Ложь;
		
		Элементы.ТаблицаЛСГруппаЗаполнить.Доступность   = Истина;
		Элементы.ТаблицаЛССгенерировать.Доступность     = Истина;
		Элементы.ТаблицаЛСКнопкаЗаписать.Доступность    = Истина;
		Элементы.ТаблицаЛСПередатьПараметры.Доступность = Истина;
		Элементы.КнопкаРаспечататьПамятки.Доступность   = Истина;
		Элементы.КнопкаОтправитьПоЭлПочте.Доступность   = Истина;
		
		Элементы.КнопкаРаспечататьПамятки.КнопкаПоУмолчанию = Ложь;
		Элементы.КнопкаОтправитьПоЭлПочте.КнопкаПоУмолчанию = Ложь;
		
	ИначеЕсли ВсеПараметрыПереданы Тогда
		Элементы.ДекорацияЗаполнитьВыполнено.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессе.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполнено.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессе.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполнено.Видимость        = Истина;
		Элементы.ДекорацияЛогиныВПроцессе.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполнено.Видимость      = Истина;
		Элементы.ДекорацияПередачаВПроцессе.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполнено.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессе.Видимость       = Истина;
		
		Элементы.ТаблицаЛСГруппаЗаполнить.Доступность   = Истина;
		Элементы.ТаблицаЛССгенерировать.Доступность     = Истина;
		Элементы.ТаблицаЛСКнопкаЗаписать.Доступность    = Истина;
		Элементы.ТаблицаЛСПередатьПараметры.Доступность = Истина;
		Элементы.КнопкаРаспечататьПамятки.Доступность   = Истина;
		Элементы.КнопкаОтправитьПоЭлПочте.Доступность   = Истина;
		
		Элементы.КнопкаРаспечататьПамятки.КнопкаПоУмолчанию = Истина;
		Элементы.КнопкаОтправитьПоЭлПочте.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВсеПараметрыЗаписаны Тогда
		Элементы.ДекорацияЗаполнитьВыполнено.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессе.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполнено.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессе.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполнено.Видимость        = Истина;
		Элементы.ДекорацияЛогиныВПроцессе.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполнено.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессе.Видимость      = Истина;
		Элементы.ДекорацияПамяткиВыполнено.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессе.Видимость       = Ложь;
		
		Элементы.ТаблицаЛСГруппаЗаполнить.Доступность   = Истина;
		Элементы.ТаблицаЛССгенерировать.Доступность     = Истина;
		Элементы.ТаблицаЛСКнопкаЗаписать.Доступность    = Истина;
		Элементы.ТаблицаЛСПередатьПараметры.Доступность = Истина;
		Элементы.КнопкаРаспечататьПамятки.Доступность   = Ложь;
		Элементы.КнопкаОтправитьПоЭлПочте.Доступность   = Ложь;
		
		Элементы.ТаблицаЛСПередатьПараметры.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВсеПараметрыСгенерированы Тогда
		Элементы.ДекорацияЗаполнитьВыполнено.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессе.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполнено.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессе.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполнено.Видимость        = Ложь;
		Элементы.ДекорацияЛогиныВПроцессе.Видимость        = Истина;
		Элементы.ДекорацияПередачаВыполнено.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессе.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполнено.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессе.Видимость       = Ложь;
		
		Элементы.ТаблицаЛСГруппаЗаполнить.Доступность   = Истина;
		Элементы.ТаблицаЛССгенерировать.Доступность     = Истина;
		Элементы.ТаблицаЛСКнопкаЗаписать.Доступность    = Истина;
		Элементы.ТаблицаЛСПередатьПараметры.Доступность = Ложь;
		Элементы.КнопкаРаспечататьПамятки.Доступность   = Ложь;
		Элементы.КнопкаОтправитьПоЭлПочте.Доступность   = Ложь;
		
		Элементы.ТаблицаЛСКнопкаЗаписать.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли НЕ ТаблицаЛС.Количество() = 0 Тогда
		Элементы.ДекорацияЗаполнитьВыполнено.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессе.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполнено.Видимость = Ложь;
		Элементы.ДекорацияСгенерироватьВПроцессе.Видимость = Истина;
		Элементы.ДекорацияЛогиныВыполнено.Видимость        = Ложь;
		Элементы.ДекорацияЛогиныВПроцессе.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполнено.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессе.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполнено.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессе.Видимость       = Ложь;
		
		Элементы.ТаблицаЛСГруппаЗаполнить.Доступность   = Истина;
		Элементы.ТаблицаЛССгенерировать.Доступность     = Истина;
		Элементы.ТаблицаЛСКнопкаЗаписать.Доступность    = Ложь;
		Элементы.ТаблицаЛСПередатьПараметры.Доступность = Ложь;
		Элементы.КнопкаРаспечататьПамятки.Доступность   = Ложь;
		Элементы.КнопкаОтправитьПоЭлПочте.Доступность   = Ложь;
		
		Элементы.ТаблицаЛССгенерировать.КнопкаПоУмолчанию = Истина;
		
	Иначе
		Элементы.ДекорацияЗаполнитьВыполнено.Видимость     = Ложь;
		Элементы.ДекорацияЗаполнитьВПроцессе.Видимость     = Истина;
		Элементы.ДекорацияСгенерироватьВыполнено.Видимость = Ложь;
		Элементы.ДекорацияСгенерироватьВПроцессе.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполнено.Видимость        = Ложь;
		Элементы.ДекорацияЛогиныВПроцессе.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполнено.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессе.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполнено.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессе.Видимость       = Ложь;
		
		Элементы.ТаблицаЛСГруппаЗаполнить.Доступность   = Истина;
		Элементы.ТаблицаЛССгенерировать.Доступность     = Ложь;
		Элементы.ТаблицаЛСКнопкаЗаписать.Доступность    = Ложь;
		Элементы.ТаблицаЛСПередатьПараметры.Доступность = Ложь;
		Элементы.КнопкаРаспечататьПамятки.Доступность   = Ложь;
		Элементы.КнопкаОтправитьПоЭлПочте.Доступность   = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Производить запись сформированных логинов в БД.
//
Процедура ЗаписатьПараметрыДоступаНаСервереВерсия3()
	
	ВсеПараметрыЗаписаны = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ЗаписатьПараметрыДоступаНаСервереВерсия3(ТаблицаЛС,
																										   Объект.ОбновлятьПараметрыДоступа,
																										   Объект.НастройкаДоступа);
	
КонецПроцедуры // ЗаписатьПараметрыДоступаНаСервере()

&НаКлиенте
// Проверяет, для всех ли лицевых счетов указаны пароли.
//
// Возвращаемое значение:
//  Булево
//
Функция ПаролиСгенерированы()
	
	Для Каждого Строка ИЗ ТаблицаЛС Цикл
		Если ПустаяСтрока(Строка.Пароль) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПаролиСгенерированы()

&НаСервере
// Формирует таблицу с л/с, у которых имеются и логин и пароль.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуЛСДляВыгрузки()
	
	ТаблицаЗагрузки = ТаблицаЛС.Выгрузить().СкопироватьКолонки();
	
	Для Каждого Строка ИЗ ТаблицаЛС Цикл
		Если НЕ ПустаяСтрока(Строка.Логин) И НЕ ПустаяСтрока(Строка.Пароль) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаЗагрузки.Добавить(), Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗагрузки;
	
КонецФункции // ПолучитьТаблицуЛСДляВыгрузки()

&НаКлиенте
// При первом открытии предлагает пользователю загрузить в БД данные об аккаунтах
// лицевых счетов на сайте.
//
Процедура ОбработкаПервогоОткрытияФормы()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьПервоеОткрытиеФормы", ЭтаФорма);
	
	ТекстВопроса = "Данные о личных кабинетах жильцов не обнаружены.
					|Загрузить их с сайта?";
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Дополнительное
Процедура ОбработатьПервоеОткрытиеФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПодключения.ХранитьПароль Тогда
		ОбработчикПервогоОткрытияФормы();
	Иначе
		ПолучитьПарольДоступа("ПарольДляПервогоОткрытияФормы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет таблицу формы данными по лицевым счетам.
//
// Параметры:
//  МассивЛС - Массив - массив лицевых счетов, данные по которым надо собрать и вывести.
//  ДобавлениеСтроки - Булево - признак того, что в таблицу будет добавлена только 1 строка.
//  ИндексСтроки - Число - индекс строки, в которой необходимо вывести данные по л/с.
//
Процедура ЗаполнитьТаблицуЛицевыхСчетов(МассивЛС, ДобавлениеСтроки = Ложь, ИндексСтроки = Неопределено)
	
	ТаблицаДанных = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеПоЛС(МассивЛС);
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		Если НЕ ДобавлениеСтроки Тогда
			ТаблицаЛС.Загрузить(ТаблицаДанных);
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаЛС.Получить(ИндексСтроки), ТаблицаДанных[0]);
		КонецЕсли;
	КонецЕсли;
	
	ВсеПараметрыЗаписаны   = Ложь;
	ВсеПараметрыПереданы   = Ложь;
	ВсеКарточкиРаспечатаны = Ложь;
	
КонецПроцедуры // ЗаполнитьТаблицуЛицевыхСчетов()

&НаСервере
// Функция заполняет таблицу всеми лицевыми счетами, для которых не зафиксированы параметры доступа.
//
Функция ЗаполнитьТаблицуЛСБезПараметров()
	
	ТаблицаДанных = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьЛСНеИмеющиеПараметровДоступа(Объект.НастройкаДоступа);
	ТаблицаЛС.Загрузить(ТаблицаДанных);
	
	ОрганизацияВыбранныхЛицевыхСчетов = Объект.НастройкаДоступа.Организация;
	
КонецФункции // ЗаполнитьТаблицуЛСБезПараметров()

&НаКлиенте
// Процедура заполняет поле "КарточкаРаспечатана" в ТЧ "ТаблицаЛС".
//
Процедура ОбработатьПечатьПамяток()
	
	Если ТаблицаЛС.Количество() > 0 Тогда
		Для Каждого СтрокаЛС ИЗ ТаблицаЛС Цикл
			СтрокаЛС.КарточкаРаспечатана = Истина;
		КонецЦикла;
		ВсеКарточкиРаспечатаны = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПечатьПамяток()

&НаСервере
// Анализирует наличие формы подбора объектов в составе конфигурации.
// Если ее нет, не выводить соответствующую кнопку в командной панели таблицы.
//
Процедура УправлениеВидимостьюКнопкиПодбораЛС()
	
	Если НЕ Метаданные.ОбщиеФормы.Найти("УПЖКХ_ПодборОбъектов") = Неопределено Тогда
		ПутьКФормеПодбора = "ОбщаяФорма.УПЖКХ_ПодборОбъектов";
	ИначеЕсли НЕ Метаданные.Обработки.УПЖКХ_ИнтеграцияССайтом.Формы.Найти("ПодборОбъектов") = Неопределено Тогда
		ПутьКФормеПодбора = "Обработка.УПЖКХ_ИнтеграцияССайтом.Форма.ПодборОбъектов";
	Иначе
		ПутьКФормеПодбора = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКФормеПодбора) Тогда
		Элементы.ТаблицаЛСЗаполнитьСОтбором.Видимость = Ложь;
	Иначе
		Элементы.ТаблицаЛСЗаполнитьСОтбором.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюКнопкиПодбораЛС()

&НаСервереБезКонтекста
// Проверяет, генерировались ли уже параметры доступа в разрезе текущей настройки.
//
// Параметры:
//  НастройкаДоступа - СправочникСсылка.УПЖКХ_НастройкиДоступаКСайту - настройка доступа.
//
// Возвращаемое значение:
//  Булево.
//
Функция УстановитьФактПервогоОткрытия(НастройкаДоступа)
	
	Возврат УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.УстановитьФактПервогоОткрытия(НастройкаДоступа);
	
КонецФункции // УстановитьФактПервогоОткрытия()

&НаКлиенте
// Функция проверяет, переданы ли параметры на сайт.
//
// Возвращаемое значение:
//  Булево
//
Процедура ЗадатьВопросЕслиНеВсеДанныеПереданы(НаименованиеОповещения, ДопПараметры = Неопределено)
	
	ЗадатьВопрос("Параметры доступа уже переданы на сайт." + Символы.ПС
				 + "Табличная часть будет очищена." + Символы.ПС
				 + "Продолжить?", НаименованиеОповещения, ДопПараметры);
	
КонецПроцедуры // ЗадатьВопросЕслиНеВсеДанныеПереданы()

&НаСервере
// Функция помещает таблицу л/с для печати памяток во временное хранилище.
//
Функция ПолучитьАдресТаблицыЛСВоВременномХранилище(ОтбиратьНеотправленные)
	
	Если ОтбиратьНеотправленные Тогда
		
		ПолнаяТаблицаДанных = ТаблицаЛС.Выгрузить();
		ТаблицаДляСохранения = ПолнаяТаблицаДанных.Скопировать(ПолнаяТаблицаДанных.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Ложь)));
		Возврат ПоместитьВоВременноеХранилище(ТаблицаДляСохранения, Новый УникальныйИдентификатор);
		
	Иначе
		
		Возврат ПоместитьВоВременноеХранилище(ТаблицаЛС.Выгрузить(), Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЧетвертыйФорматОбмена

///////////////////////////////////////////////////////////////////////////////
// 4-ЫЙ ФОРМАТ.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

&НаКлиенте
// Процедура - обработчик нажатия кнопки повторного подключения.
//
Процедура КомандаПовторноеПодключение(Команда)
	
	ПолучитьССайтаДанныеОПараметрахДоступаЛСВерсия4();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды заполнения ТЧ "ТаблицаПинкодов" автоматически с отбором.
//
Процедура КомандаЗаполнитьСОтборомВерсия4(Команда)
	
	Если ПустаяСтрока(ПутьКФормеПодбора) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Форма подбора не найдена.");
		
		Возврат;
	КонецЕсли;
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ЗаполнитьСОтбором");
		
	Иначе
		
		Если ТаблицаПинкодов.Количество() > 0 Тогда
			
			ЗадатьВопросОбОчисткеТаблицыПинкодов("Заполнение с отбором");
			
		Иначе
			
			ОткрытьФорму(ПутьКФормеПодбора, ПараметрыОткрытияФормыПодбора);
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды заполнения ТЧ "ТаблицаПинкодов" вручную.
//
Процедура КомандаЗаполнитьЛСПодборомВерсия4(Команда)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ЗаполнитьЛСПодбором");
		
	Иначе
		
		Если ТаблицаПинкодов.Количество() > 0 Тогда
			
			ЗадатьВопросОбОчисткеТаблицыПинкодов("Заполнение подбором");
			
		Иначе
			
			ФормаПодбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаПодбора");
			ФормаПодбора.Открыть();
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды заполнения ТЧ "ТаблицаПинкодов" всеми счетами,
// для которых не указаны параметры доступа.
//
Процедура КомандаЗаполнитьВсемиЛСБезПараметровВерсия4(Команда)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ЗаполнитьВсемиЛСБезПараметров4");
		
	Иначе
		
		Если ТаблицаПинкодов.Количество() > 0 Тогда
			
			ЗадатьВопросОбОчисткеТаблицыПинкодов("Заполнить лс без параметров");
			
		Иначе
			
			ПолучитьССайтаДанныеОПараметрахДоступаЛСВерсия4(Истина);
			ПолучитьТаблицуПинкодовБезПараметров();
			
			Если ТаблицаПинкодов.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Параметры доступа имеются у всех лицевых счетов.");
			КонецЕсли;
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды генерации параметров доступа.
//
Процедура СгенерироватьПараметрыВерсия4(Команда)
	
	Если ПроверитьСоответствиеОрганизацииЛСиНастройкиДоступа() Тогда
		
		Если ВсеПараметрыПереданы Тогда
			
			ЗадатьВопросЕслиНеВсеДанныеПереданы("ОбработчикПриНаличииПереданныхДанных");
			
		Иначе
			
			
			// Перезаполняем все строки ТЧ.
			Если НЕ ТаблицаПинкодов.Количество() = 0 И НЕ ТаблицаПинкодов.НайтиСтроки(Новый Структура("ЕстьПараметрыДоступа", Истина)) = Неопределено И Объект.ОбновлятьПараметрыДоступа Тогда
				
				ЗадатьВопрос("Имеющиеся логины и пароли будут заменены новыми. Продолжить?", "ОбработатьОтветОЗаменеПараметровДоступаВерсия4");
				
			Иначе
				
				СгенерироватьПинкодыНаСервереВерсия4();
				
				УправлениеФормой();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет генерацию параметров доступа.
//
Процедура СгенерироватьПинкодыНаСервереВерсия4()
	
	ДопЧисло      = 0;
	МассивЛогинов = ПолучитьМассивЛогиновИмеющихсяВБД();
	ДополнитьМассивЛогиновДаннымиИзТЧ(МассивЛогинов, Истина);
	
	Для Каждого СтрокаТЧ Из ТаблицаПинкодов Цикл
		
		ЛогинНеЗаполнен = СтрокаТЧ.Логин = "";
		
		Если ЛогинНеЗаполнен ИЛИ Не СтрокаТЧ.ЕстьПараметрыДоступа ИЛИ Объект.ОбновлятьПараметрыДоступа Тогда
			СтруктураПД = СгенерироватьПараметрыНаСервере(СтрокаТЧ.ЛицевойСчет, ДопЧисло, МассивЛогинов);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЛогинНеЗаполнен Тогда
			СтрокаТЧ.Логин                = СтруктураПД.Логин;
			СтрокаТЧ.ЕстьПараметрыДоступа = Ложь;
		КонецЕсли;
		
		СтрокаТЧ.Пинкод = СтруктураПД.Пароль;
		
		ДопЧисло = ДопЧисло + 1;
		
	КонецЦикла;
	
	ВсеПараметрыСгенерированы = Истина;
	ВсеПараметрыЗаписаны      = Ложь;
	ВсеПараметрыПереданы      = Ложь;
	ВсеКарточкиРаспечатаны    = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды записи параметров доступа.
//
Процедура КомандаЗаписатьПараметрыДоступаВерсия4(Команда)
	
	Если ПроверитьСоответствиеОрганизацииЛСиНастройкиДоступа() Тогда
		
		Если ВсеПараметрыПереданы Тогда
			
			ЗадатьВопросЕслиНеВсеДанныеПереданы("ОбработчикПриНаличииПереданныхДанных");
			
		Иначе
			
			Если ЗначениеЗаполнено(Объект.НастройкаДоступа) Тогда
				ЗаписатьПараметрыДоступаНаСервереВерсия4();
				
				ВсеПараметрыПереданы   = Ложь;
				ВсеКарточкиРаспечатаны = Ложь;
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана настройка доступа.");
			КонецЕсли;
			
			УправлениеФормой();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды передачи параметров доступа на сайт.
//
Процедура ПередатьПараметрыВерсия4(Команда)
	
	Если ПроверитьСоответствиеОрганизацииЛСиНастройкиДоступа() Тогда
		
		Если ПроверитьНаличиеСгенерированныхПинов() Тогда
			
			ЗаполнитьПараметрыПодключения();
			
			ОбработчикПередачиПД();
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Нет данных для передачи на сайт.");
		КонецЕсли;
		
		ВсеКарточкиРаспечатаны = Ложь;
		
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура, отправляет параметры доступа на электронные ящики лицевых счетов.
//
Процедура КомандаОтправитьПараметрыДоступаПоЭлПочтеВерсия4(Команда)
	
	НастройкаДоступа = Объект.НастройкаДоступа;
	Организация      = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НастройкаДоступа, "Организация");
	
	Если ЗначениеЗаполнено(НастройкаДоступа) Тогда
		УчетнаяЗаписьЭлПочты = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НастройкаДоступа, "УчетнаяЗаписьЭлПочты");
		АдресСайта           = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НастройкаДоступа, "АдресСайта");
		
		Если НЕ УчетнаяЗаписьЭлПочты = ПредопределенноеЗначение("Справочник.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка") Тогда
			
			// Отправка параметров доступа для л/с, по которым сведения еще не отправлены.
			СтрокиБезОтправленныхСообщений = ТаблицаПинкодов.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Ложь));
			
			Для каждого ТекСтрокаЛС из СтрокиБезОтправленныхСообщений Цикл
				ТекЛС = ТекСтрокаЛС.ЛицевойСчет;
				Если НЕ ТекЛС = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
					ЭлПочта = СокрЛП(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекЛС, "АдресЭлектроннойПочты"));
					Если НЕ ЭлПочта = "" Тогда
						Попытка
							ПараметрыПисьма = Новый Структура("Кому, Тема, Тело");
							ПараметрыПисьма.Кому = ЭлПочта;
							ПараметрыПисьма.Тема = "Параметры доступа в личный кабинет";
							ПараметрыПисьма.Тело = 
							"Параметры доступа в личный кабинет на сайте " + АдресСайта + ":";
							
							Если ИспользоватьЛогиныВВерсии4 Тогда
								ПараметрыПисьма.Тело = ПараметрыПисьма.Тело + "
								|Логин: " + ТекСтрокаЛС.Логин + "
								|Пароль: " + ТекСтрокаЛС.Пинкод + "
								|
								|В целях безопасности при первом посещении личного кабинета Вам необходимо сменить пароль.";
							Иначе
								ПараметрыПисьма.Тело = ПараметрыПисьма.Тело + "
								|Пинкод: " + ТекСтрокаЛС.Пинкод + "
								|
								|Пинкод необходим для активации аккаунта на сайте.";
							КонецЕсли;
							
							ОтправитьПочтовоеСообщение(УчетнаяЗаписьЭлПочты, ПараметрыПисьма);
							
							ТекСтрокаЛС.ДанныеПереданыПоЭлПочте = Истина;
						Исключение
							ТекСтрокаЛС.ДанныеПереданыПоЭлПочте = Ложь;
							
							УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось отправить сообщение на электронную почту " + ЭлПочта + " лицевого счета " + УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекЛС, "Наименование") + ": "
							+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			//////////////////////////////////////////////////////////////////////////////////
			// ФОРМИРОВАНИЕ ОТЧЕТА ОБ ОТПРАВКЕ ПАРАМЕТРОВ ДОСТУПА
			
			// Определяем, по каким л/с данные были отправлены, а по каким нет, а так же их количество.
			СтрокиПараметрыОтправлены     = ТаблицаПинкодов.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Истина));
			СтрокиПараметрыНеОтправлены   = ТаблицаПинкодов.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Ложь));
			КоличествоСтрокОтправленных   = СтрокиПараметрыОтправлены.Количество();
			КоличествоСтрокНеОтправленных = СтрокиПараметрыНеОтправлены.Количество();
			
			// Определяем количество строк таблицы.
			КоличествоСтрок = ?(КоличествоСтрокОтправленных > КоличествоСтрокНеОтправленных, КоличествоСтрокОтправленных, КоличествоСтрокНеОтправленных);
			
			// Заполняем таблицу.
			ТаблицаОтчетаОбОтправке.Очистить();
			
			Для ТекНомерСтроки = 1 по КоличествоСтрок Цикл
				НоваяСтрока = ТаблицаОтчетаОбОтправке.Добавить();
				
				Если НЕ ТекНомерСтроки > КоличествоСтрокОтправленных Тогда
					ЛицевойСчет = СтрокиПараметрыОтправлены[ТекНомерСтроки - 1].ЛицевойСчет;
					НоваяСтрока.ЛицевойСчетОтправлено = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Наименование") + " (" + ПолучитьПредставлениеАдреса(ЛицевойСчет) + ")";
				КонецЕсли;
				
				Если НЕ ТекНомерСтроки > КоличествоСтрокНеОтправленных Тогда
					ЛицевойСчет = СтрокиПараметрыНеОтправлены[ТекНомерСтроки - 1].ЛицевойСчет;
					НоваяСтрока.ЛицевойСчетНеОтправлено = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Наименование") + " (" + ПолучитьПредставлениеАдреса(ЛицевойСчет) + ")";
				КонецЕсли;
			КонецЦикла;
			
			// Выводим отчет.
			ПараметрКоманды = Новый Массив;
			ПараметрКоманды.Добавить(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.НастройкаДоступа, "Организация"));
			ПараметрКоманды.Добавить(ПолучитьАдресТаблицыСведенийОбОтправкеПоЭлПочте());
			
			УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Обработка.УПЖКХ_ИнтеграцияССайтом", "СведенияОбОтправкеПараметровДоступа",
																 ПараметрКоманды, Неопределено, Неопределено);
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для отправки почты необходимо указать учетную запись электронной почты.");
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для отправки почты необходимо заполнить поле ""Настройка доступа к сайту"".");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды печати памяток.
//
Процедура КомандаРаспечататьПамяткиДоступаВерсия4(Команда)
	
	Если ЗначениеЗаполнено(Объект.НастройкаДоступа) Тогда
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Объект.НастройкаДоступа);
		
		// Проверяем, есть ли лицевые счета, которым отправляли параметры доступа по электронной почте.
		Если НЕ ТаблицаПинкодов.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Истина)).Количество() = 0 Тогда
			
			ЗадатьВопрос("Печатать памятки по лицевым счетам, которым были отправлены параметры доступа по электронной почте?", "ОбработатьОтветОПечатиПамятокДоступа4", ПараметрКоманды);
			
		Иначе
			
			АдресВоВременномХранилище = ПолучитьАдресТаблицыЛСВоВременномХранилищеВерсия4(Ложь);
			ПараметрКоманды.Добавить(АдресВоВременномХранилище);
			
			УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Обработка.УПЖКХ_ИнтеграцияССайтом",
															 ?(ИспользоватьЛогиныВВерсии4, "ПамяткаДоступаВерсия4СЛогинами", "ПамяткаДоступаВерсия4БезЛогинов"),
															 ПараметрКоманды,
															 Неопределено,
															 УПЖКХ_ТиповыеМетодыКлиент.ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды));
			ОбработатьПечатьПамятокВерсия4();
			
			УправлениеФормой();
			
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана настройка обмена данными.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода лицевого счета.
//
Процедура ТаблицаПинкодовЛицевойСчетПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаПинкодов.ТекущиеДанные;
	
	Если ТаблицаПинкодов.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекДанные.ЛицевойСчет)).Количество() = 1 Тогда
		ИндексСтроки = ТаблицаПинкодов.Индекс(ТаблицаПинкодов.НайтиПоИдентификатору(ТекДанные.ПолучитьИдентификатор()));
		ЗаполнитьТаблицуПинкодов(ТекДанные.ЛицевойСчет, Истина, ИндексСтроки);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выбранный лицевой счет уже имеется в таблице.");
		ТекДанные.ЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличной части.
//
Процедура ТаблицаПинкодовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ТаблицаЛСДействиеОповещение");
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломИзменения" табличной части.
//
Процедура ТаблицаПинкодовПередНачаломИзменения(Элемент, Отказ)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ТаблицаЛСДействиеОповещение");
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличной части.
//
Процедура ТаблицаПинкодовПередУдалением(Элемент, Отказ)
	
	Если ВсеПараметрыПереданы Тогда
		
		ЗадатьВопросЕслиНеВсеДанныеПереданы("ТаблицаЛСДействиеОповещение");
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Логин".
//
Процедура ТаблицаПинкодовЛогинПриИзменении(Элемент)
	
	Элемент.Родитель.ТекущиеДанные.ЕстьПараметрыДоступа = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флага "Обновлять параметры доступа".
//
Процедура ПолеОбновлятьПараметрыВерсия4ПриИзменении(Элемент)
	
	Если Объект.ОбновлятьПараметрыДоступа Тогда
		
		ЗадатьВопрос("Старые параметры будут заменены. Продолжить редактирование?", "ОбработатьОтветОбОбновленииПараметровДоступаВерсия4");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Управляет видимостью и доступностью элементов формы 4-й версии обмена.
//
Процедура УправлениеФормойВерсия4()
	
	Если ВсеКарточкиРаспечатаны Тогда
		
		Элементы.ДекорацияЗаполнитьВыполненоВерсия4.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессеВерсия4.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполненоВерсия4.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессеВерсия4.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполненоВерсия4.Видимость        = ИспользоватьЛогиныВВерсии4;
		Элементы.ДекорацияЛогиныВПроцессеВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполненоВерсия4.Видимость      = Истина;
		Элементы.ДекорацияПередачаВПроцессеВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполненоВерсия4.Видимость       = Истина;
		Элементы.ДекорацияПамяткиВПроцессеВерсия4.Видимость       = Ложь;
		Элементы.ТаблицаПинкодовГруппаЗаполнить.Доступность       = Истина;
		Элементы.ТаблицаПинкодовСгенерировать.Доступность         = Истина;
		Элементы.ТаблицаПинкодовЗаписатьЛогины.Доступность        = Истина;
		Элементы.ТаблицаПинкодовПередать.Доступность              = Истина;
		Элементы.ТаблицаПинкодовРаспечататьПамятки.Доступность    = Истина;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.Доступность    = Истина;
		
		Элементы.ТаблицаПинкодовРаспечататьПамятки.КнопкаПоУмолчанию = Ложь;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.КнопкаПоУмолчанию = Ложь;
		
	ИначеЕсли ВсеПараметрыПереданы Тогда
		
		Элементы.ДекорацияЗаполнитьВыполненоВерсия4.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессеВерсия4.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполненоВерсия4.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессеВерсия4.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполненоВерсия4.Видимость        = ИспользоватьЛогиныВВерсии4;
		Элементы.ДекорацияЛогиныВПроцессеВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполненоВерсия4.Видимость      = Истина;
		Элементы.ДекорацияПередачаВПроцессеВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполненоВерсия4.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессеВерсия4.Видимость       = Истина;
		Элементы.ТаблицаПинкодовГруппаЗаполнить.Доступность       = Истина;
		Элементы.ТаблицаПинкодовСгенерировать.Доступность         = Истина;
		Элементы.ТаблицаПинкодовЗаписатьЛогины.Доступность        = Истина;
		Элементы.ТаблицаПинкодовПередать.Доступность              = Истина;
		Элементы.ТаблицаПинкодовРаспечататьПамятки.Доступность    = Истина;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.Доступность    = Истина;
		
		Элементы.ТаблицаПинкодовРаспечататьПамятки.КнопкаПоУмолчанию = Истина;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВсеПараметрыЗаписаны Тогда
		
		Элементы.ДекорацияЗаполнитьВыполненоВерсия4.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессеВерсия4.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполненоВерсия4.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессеВерсия4.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполненоВерсия4.Видимость        = Истина;
		Элементы.ДекорацияЛогиныВПроцессеВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполненоВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессеВерсия4.Видимость      = Истина;
		Элементы.ДекорацияПамяткиВыполненоВерсия4.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессеВерсия4.Видимость       = Ложь;
		Элементы.ТаблицаПинкодовГруппаЗаполнить.Доступность       = Истина;
		Элементы.ТаблицаПинкодовСгенерировать.Доступность         = Истина;
		Элементы.ТаблицаПинкодовЗаписатьЛогины.Доступность        = Истина;
		Элементы.ТаблицаПинкодовПередать.Доступность              = Истина;
		Элементы.ТаблицаПинкодовРаспечататьПамятки.Доступность    = Ложь;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.Доступность    = Ложь;
		
		Элементы.ТаблицаПинкодовПередать.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВсеПараметрыСгенерированы Тогда
		
		Элементы.ДекорацияЗаполнитьВыполненоВерсия4.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессеВерсия4.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполненоВерсия4.Видимость = Истина;
		Элементы.ДекорацияСгенерироватьВПроцессеВерсия4.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполненоВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияЛогиныВПроцессеВерсия4.Видимость        = ИспользоватьЛогиныВВерсии4;
		Элементы.ДекорацияПередачаВыполненоВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессеВерсия4.Видимость      = НЕ ИспользоватьЛогиныВВерсии4;
		Элементы.ДекорацияПамяткиВыполненоВерсия4.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессеВерсия4.Видимость       = Ложь;
		Элементы.ТаблицаПинкодовГруппаЗаполнить.Доступность       = Истина;
		Элементы.ТаблицаПинкодовСгенерировать.Доступность         = Истина;
		Элементы.ТаблицаПинкодовЗаписатьЛогины.Доступность        = ИспользоватьЛогиныВВерсии4;
		Элементы.ТаблицаПинкодовПередать.Доступность              = НЕ ИспользоватьЛогиныВВерсии4;
		Элементы.ТаблицаПинкодовРаспечататьПамятки.Доступность    = Ложь;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.Доступность    = Ложь;
		
		Если ИспользоватьЛогиныВВерсии4 Тогда
			Элементы.ТаблицаПинкодовЗаписатьЛогины.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ТаблицаПинкодовПередать.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	ИначеЕсли НЕ ТаблицаПинкодов.Количество() = 0 Тогда
		
		Элементы.ДекорацияЗаполнитьВыполненоВерсия4.Видимость     = Истина;
		Элементы.ДекорацияЗаполнитьВПроцессеВерсия4.Видимость     = Ложь;
		Элементы.ДекорацияСгенерироватьВыполненоВерсия4.Видимость = Ложь;
		Элементы.ДекорацияСгенерироватьВПроцессеВерсия4.Видимость = Истина;
		Элементы.ДекорацияЛогиныВыполненоВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияЛогиныВПроцессеВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполненоВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессеВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполненоВерсия4.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессеВерсия4.Видимость       = Ложь;
		Элементы.ТаблицаПинкодовГруппаЗаполнить.Доступность       = Истина;
		Элементы.ТаблицаПинкодовСгенерировать.Доступность         = Истина;
		Элементы.ТаблицаПинкодовЗаписатьЛогины.Доступность        = Ложь;
		Элементы.ТаблицаПинкодовПередать.Доступность              = Ложь;
		Элементы.ТаблицаПинкодовРаспечататьПамятки.Доступность    = Ложь;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.Доступность    = Ложь;
		
		Элементы.ТаблицаПинкодовСгенерировать.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Элементы.ДекорацияЗаполнитьВыполненоВерсия4.Видимость     = Ложь;
		Элементы.ДекорацияЗаполнитьВПроцессеВерсия4.Видимость     = Истина;
		Элементы.ДекорацияСгенерироватьВыполненоВерсия4.Видимость = Ложь;
		Элементы.ДекорацияСгенерироватьВПроцессеВерсия4.Видимость = Ложь;
		Элементы.ДекорацияЛогиныВыполненоВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияЛогиныВПроцессеВерсия4.Видимость        = Ложь;
		Элементы.ДекорацияПередачаВыполненоВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПередачаВПроцессеВерсия4.Видимость      = Ложь;
		Элементы.ДекорацияПамяткиВыполненоВерсия4.Видимость       = Ложь;
		Элементы.ДекорацияПамяткиВПроцессеВерсия4.Видимость       = Ложь;
		Элементы.ТаблицаПинкодовГруппаЗаполнить.Доступность       = Истина;
		Элементы.ТаблицаПинкодовСгенерировать.Доступность         = Ложь;
		Элементы.ТаблицаПинкодовЗаписатьЛогины.Доступность        = Ложь;
		Элементы.ТаблицаПинкодовПередать.Доступность              = Ложь;
		Элементы.ТаблицаПинкодовРаспечататьПамятки.Доступность    = Ложь;
		Элементы.ТаблицаПинкодовОтправитьПоЭлПочте.Доступность    = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Получает данные о параметрах доступа с сайта и проверяет успешность получения данных.
//
Процедура ПолучитьССайтаДанныеОПараметрахДоступаЛСВерсия4(ЕстьПароль = Ложь)
	
	ВсеПараметрыСгенерированы = Ложь;
	ВсеПараметрыЗаписаны      = Ложь;
	ВсеПараметрыПереданы      = Ложь;
	ВсеКарточкиРаспечатаны    = Ложь;
	
	ЗаполнитьПараметрыПодключения();
	
	Если ПараметрыПодключения.ХранитьПароль ИЛИ ЕстьПароль Тогда
		ОбработчикПолученияСведенийОНаличииПараметровДоступаССайта4();
		УправлениеФормой();
	Иначе
		ПолучитьПарольДоступа("ПарольДляПолученияСведенийОПараметрахССайта4");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Получает сведения о параметрах доступа.
//
Функция ПолучитьСведенияОНаличииПараметровДоступаССайта()
	
	ТаблицаСведенийОПараметрахДоступаЛС.Очистить();
	
	СведенияОбОшибке = "";
	
	ФайлОбмена = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ЗагрузитьДанныеССайта("accexistence",
																				Объект.НастройкаДоступа,
																				ПараметрыПодключения.Пароль,
																				СведенияОбОшибке,
																				СтруктураИнформацииОСайте);
	
	Если НЕ ФайлОбмена = Неопределено И ФайлОбмена.Свойство("details") И ФайлОбмена.details.Свойство("temporary_file_name") Тогда
		СтруктураСведений = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеИзXML(ФайлОбмена.details.temporary_file_name, Объект.НастройкаДоступа, СведенияОбОшибке, СтруктураИнформацииОСайте);
		
		ИспользоватьЛогиныВВерсии4 = СтруктураСведений.ИспользоватьЛогиныВВерсии4;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаАккаунтов.id КАК СТРОКА(100)) КАК Идентификатор
		|ПОМЕСТИТЬ втТаблицаАккаунтов
		|ИЗ
		|	&ТаблицаАккаунтов КАК ТаблицаАккаунтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
		|ИЗ
		|	втТаблицаАккаунтов КАК втТаблицаАккаунтов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|		ПО втТаблицаАккаунтов.Идентификатор = КВП_ЛицевыеСчета.Идентификатор
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка ЕСТЬ НЕ NULL ";
		
		Запрос.УстановитьПараметр("ТаблицаАккаунтов", СтруктураСведений.accs);
		
		ТаблицаСведенийОПараметрахДоступаЛС.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Актуализирует сведения о наличии параметров доступа в ТЧ "ТаблицаПинкодов".
//
Процедура АктуализироватьСведенияОНаличииПараметровДоступа()
	
	СтруктураОтбора = Новый Структура("ЛицевойСчет");
	
	Для каждого ТекСтрока из ТаблицаПинкодов Цикл
		
		СтруктураОтбора.ЛицевойСчет = ТекСтрока.ЛицевойСчет;
		СтрокиЛС = ТаблицаСведенийОПараметрахДоступаЛС.НайтиСтроки(СтруктураОтбора);
		ТекСтрока.ЕстьПараметрыДоступа = (НЕ СтрокиЛС.Количество() = 0);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Производить запись сформированных логинов в БД.
//
Процедура ЗаписатьПараметрыДоступаНаСервереВерсия4()
	
	ВсеПараметрыЗаписаны = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ЗаписатьПараметрыДоступаНаСервереВерсия4(ТаблицаПинкодов,
																										   Объект.ОбновлятьПараметрыДоступа,
																										   Объект.НастройкаДоступа);
	
КонецПроцедуры // ЗаписатьПараметрыДоступаНаСервере()

&НаСервере
// Проверяет, для всех ли лицевых счетов указаны пинкоды.
//
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьНаличиеСгенерированныхПинов()
	
	Для каждого ТекСтрока из ТаблицаПинкодов Цикл
		
		Если (НЕ ТекСтрока.ЕстьПараметрыДоступа ИЛИ Объект.ОбновлятьПараметрыДоступа) И НЕ ТекСтрока.Пинкод = "" Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Формирует таблицу с л/с, у которых имеются параметры доступа.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуПинкодовДляВыгрузки()
	
	ТаблицаЗагрузки = ТаблицаПинкодов.Выгрузить().СкопироватьКолонки();
	
	Если ИспользоватьЛогиныВВерсии4 Тогда
		
		Для Каждого Строка ИЗ ТаблицаПинкодов Цикл
			Если (НЕ Строка.ЕстьПараметрыДоступа ИЛИ Объект.ОбновлятьПараметрыДоступа) И НЕ ПустаяСтрока(Строка.Логин) И НЕ ПустаяСтрока(Строка.Пинкод) Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаЗагрузки.Добавить(), Строка);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка ИЗ ТаблицаПинкодов Цикл
			Если (НЕ Строка.ЕстьПараметрыДоступа ИЛИ Объект.ОбновлятьПараметрыДоступа) И НЕ ПустаяСтрока(Строка.Пинкод) Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаЗагрузки.Добавить(), Строка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗагрузки;
	
КонецФункции // ПолучитьТаблицуЛСДляВыгрузки()

&НаСервере
// Заполняет таблицу пинкодов всеми л/с, не имеющими параметров доступа на сайте.
//
Процедура ПолучитьТаблицуПинкодовБезПараметров()
	
	ТаблицаДанных = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьЛСНеИмеющиеПараметровДоступа(Объект.НастройкаДоступа, 4, ТаблицаСведенийОПараметрахДоступаЛС.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	ТаблицаПинкодов.Загрузить(ТаблицаДанных);
	
	ОрганизацияВыбранныхЛицевыхСчетов = Объект.НастройкаДоступа.Организация;
	
КонецПроцедуры

&НаСервере
// Заполняет таблицу формы данными по лицевым счетам.
//
// Параметры:
//  МассивЛС - Массив - массив лицевых счетов, данные по которым надо собрать и вывести.
//  ДобавлениеСтроки - Булево - признак того, что в таблицу будет добавлена только 1 строка.
//  ИндексСтроки - Число - индекс строки, в которой необходимо вывести данные по л/с.
//
Процедура ЗаполнитьТаблицуПинкодов(МассивЛС, ДобавлениеСтроки = Ложь, ИндексСтроки = Неопределено)
	
	ТаблицаДанных = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеПоЛС(МассивЛС);
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		Если НЕ ДобавлениеСтроки Тогда
			ТаблицаПинкодов.Загрузить(ТаблицаДанных);
			ТаблицаПинкодов.Сортировать("ЛицевойСчет");
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаПинкодов.Получить(ИндексСтроки), ТаблицаДанных[0]);
		КонецЕсли;
	КонецЕсли;
	
	ВсеПараметрыЗаписаны   = Ложь;
	ВсеПараметрыПереданы   = Ложь;
	ВсеКарточкиРаспечатаны = Ложь;
	
КонецПроцедуры // ЗаполнитьТаблицуЛицевыхСчетов()

&НаКлиенте
// Обрабатывает ответ на вопрос об очистке ТЧ "ТаблицаПинкодов".
//
Процедура ОбработкаВопросаНаОчисткуТаблицыПинкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПинкодов.Очистить();
	ВсеПараметрыСгенерированы = Ложь;
	ВсеПараметрыЗаписаны      = Ложь;
	
	Если ДополнительныеПараметры = "Заполнение подбором" Тогда
		
		ФормаПодбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаПодбора");
		ФормаПодбора.Открыть();
		
	ИначеЕсли ДополнительныеПараметры = "Заполнение с отбором" Тогда
		
		ОткрытьФорму(ПутьКФормеПодбора, ПараметрыОткрытияФормыПодбора);
		
	ИначеЕсли ДополнительныеПараметры = "Заполнить лс без параметров" Тогда
		
		ПолучитьССайтаДанныеОПараметрахДоступаЛСВерсия4(Истина);
		ПолучитьТаблицуПинкодовБезПараметров();
		
		Если ТаблицаПинкодов.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Параметры доступа имеются у всех лицевых счетов.");
		КонецЕсли;
		
	КонецЕсли;
	
	АктуализироватьСведенияОНаличииПараметровДоступа();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает ответ на вопрос об очистке ТЧ "ТаблицаПинкодов".
//
Процедура ОбработкаВопросаНаОчисткуТаблицыЛС(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЛС.Очистить();
	ВсеПараметрыСгенерированы = Ложь;
	ВсеПараметрыЗаписаны      = Ложь;
	
	Если ДополнительныеПараметры = "Заполнение подбором" Тогда
		
		ФормаПодбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаПодбора");
		ФормаПодбора.Открыть();
		
	ИначеЕсли ДополнительныеПараметры = "Заполнение с отбором" Тогда
		
		ОткрытьФорму(ПутьКФормеПодбора, ПараметрыОткрытияФормыПодбора);
		
	ИначеЕсли ДополнительныеПараметры = "Заполнить лс без параметров" Тогда
		
		ЗаполнитьТаблицуЛСБезПараметров();
		
		Если ТаблицаЛС.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Параметры доступа имеются у всех лицевых счетов.");
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет поле "КарточкаРаспечатана" в ТЧ "ТаблицаПинкодов".
//
Процедура ОбработатьПечатьПамятокВерсия4()
	
	Если ТаблицаПинкодов.Количество() > 0 Тогда
		Для Каждого СтрокаЛС ИЗ ТаблицаПинкодов Цикл
			СтрокаЛС.КарточкаРаспечатана = Истина;
		КонецЦикла;
		ВсеКарточкиРаспечатаны = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПечатьПамяток()

&НаСервере
// Функция помещает таблицу л/с для печати памяток во временное хранилище.
//
Функция ПолучитьАдресТаблицыЛСВоВременномХранилищеВерсия4(ОтбиратьНеотправленные)
	
	Если ОтбиратьНеотправленные Тогда
		
		ПолнаяТаблицаДанных = ТаблицаПинкодов.Выгрузить();
		ТаблицаДляСохранения = ПолнаяТаблицаДанных.Скопировать(ПолнаяТаблицаДанных.НайтиСтроки(Новый Структура("ДанныеПереданыПоЭлПочте", Ложь)));
		
		Возврат ПоместитьВоВременноеХранилище(ТаблицаДляСохранения, Новый УникальныйИдентификатор);
		
	Иначе
		
		Возврат ПоместитьВоВременноеХранилище(ТаблицаПинкодов.Выгрузить(), Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Задает вопрос об очистке ТЧ "ТаблицаПинкодов".
//
Процедура ЗадатьВопросОбОчисткеТаблицыПинкодов(КомандаЗаполнения)
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаНаОчисткуТаблицыПинкодов", ЭтаФорма, КомандаЗаполнения);
	
	ПоказатьВопрос(Оповещение, "Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Задает вопрос об очистке ТЧ "ТаблицаЛС".
//
Процедура ЗадатьВопросОбОчисткеТаблицыЛС(КомандаЗаполнения)
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаНаОчисткуТаблицыЛС", ЭтаФорма, КомандаЗаполнения);
	
	ПоказатьВопрос(Оповещение, "Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Задает произвольный вопрос.
Процедура ЗадатьВопрос(ТекстВопроса, ИмяОповещения, ДопПараметры = Неопределено)
	
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ЭтаФорма, ДопПараметры);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ

///////////////////////
// ОБЩИЕ

&НаКлиенте
// Обработчик первого открытия формы.
//
Процедура ОбработчикПервогоОткрытияФормы()
	
	СведенияОбОшибке = "";
	
	УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьЗагрузкуСведенияОбАккаунтах(Объект.НастройкаДоступа, ПараметрыПодключения.Пароль,, СтруктураИнформацииОСайте);
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает несохраненные данные перед закрытием формы.
//
Процедура ОбработатьНесохраненныеДанныеПередЗакрытием(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВсеПараметрыЗаписаны = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик заполнения табличной части с отбором.
//
Процедура ЗаполнитьСОтбором(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПутьКФормеПодбора, ПараметрыОткрытияФормыПодбора);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик очистки табличной части.
//
Процедура ОчиститьТабличныеЧасти()
	
	ТаблицаЛС.Очистить();
	ТаблицаПинкодов.Очистить();
	ВсеПараметрыЗаписаны      = Ложь;
	ВсеПараметрыПереданы      = Ложь;
	ВсеКарточкиРаспечатаны    = Ложь;
	ВсеПараметрыСгенерированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик заполнения табличной части подбором.
//
Процедура ЗаполнитьЛСПодбором(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
	Иначе
		Возврат;
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаПодбора");
	ФормаПодбора.Открыть();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик передачи параметров доступа.
//
Процедура ОбработчикПередачиПД()
	
	ВыполнитьВыгрузкуПараметровДоступаНаСервере(ПараметрыПодключения.Пароль);
	ОбработчикПолученияСведенийОНаличииПараметровДоступаССайта4();
	АктуализироватьСведенияОНаличииПараметровДоступа();
	
	ВсеКарточкиРаспечатаны = Ложь;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик очистки табличной части.
//
Процедура ТаблицаЛСДействиеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОчиститьТабличныеЧасти();
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик при наличии переданных данных.
//
Процедура ОбработчикПриНаличииПереданныхДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
	Иначе
		Возврат;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

///////////////////////
// 3-Я ВЕРСИЯ

&НаКлиенте
// Обработчик ответа о замене параметров доступа.
//
Процедура ОбработатьОтветОЗаменеПараметровДоступа(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОбновлятьПараметрыДоступа = Ложь;
		Возврат;
	КонецЕсли;
	
	ДопЧисло = 0;
	МассивЛогинов = ПолучитьМассивЛогиновИмеющихсяВБД(Истина, ПолучитьМассивЛС());
	
	// Перезаполняем все строки ТЧ.
	Для Каждого СтрокаТЧ Из ТаблицаЛС Цикл
		
		СтруктураПД = СгенерироватьПараметрыНаСервере(СтрокаТЧ.ЛицевойСчет, ДопЧисло, МассивЛогинов);
		
		СтрокаТЧ.Логин          = СтруктураПД.Логин;
		СтрокаТЧ.Пароль         = СтруктураПД.Пароль;
		СтрокаТЧ.ПДИзменены     = Истина;
		СтрокаТЧ.ДанныеЗаписаны = Ложь;
		
		ДопЧисло = ДопЧисло + 1;
		
	КонецЦикла;
	
	ВсеПараметрыСгенерированы = Истина;
	ВсеПараметрыЗаписаны      = Ложь;
	ВсеПараметрыПереданы      = Ложь;
	ВсеКарточкиРаспечатаны    = Ложь;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа о печати памяток доступа.
//
Процедура ОбработатьОтветОПечатиПамятокДоступа(Результат, ДополнительныеПараметры) Экспорт
	
	// Если не печатать памятки, то отбираем только л/с, по которым не было отправлено уведомлений по эл. почте.
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ОтбиратьНеотправленные = Истина;
		
	Иначе
		ОтбиратьНеотправленные = Ложь;
	КонецЕсли;
	
	АдресВоВременномХранилище = ПолучитьАдресТаблицыЛСВоВременномХранилище(ОтбиратьНеотправленные);
	ДополнительныеПараметры.Добавить(АдресВоВременномХранилище);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Обработка.УПЖКХ_ИнтеграцияССайтом",
													 "ПамяткаДоступа",
													 ДополнительныеПараметры,
													 Неопределено,
													 УПЖКХ_ТиповыеМетодыКлиент.ПолучитьЗаголовокПечатнойФормы(ДополнительныеПараметры));
	
	ОбработатьПечатьПамяток();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа о сохранении несохраненных данных.
//
Процедура ОбработатьОтветОСохраненииНесохраненныхДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НастройкаДоступа) Тогда
		ЗаписатьПараметрыДоступаНаСервереВерсия3();
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана настройка доступа.");
	КонецЕсли;
	
	// Если все параметры записаны, передаем их на сайт.
	Если ВсеПараметрыЗаписаны Тогда
		Если ПаролиСгенерированы() Тогда
			
			ЗаполнитьПараметрыПодключения();
			
			Если ПараметрыПодключения.ХранитьПароль Тогда
				ОбработчикПередачиПД();
			Иначе
				ПолучитьПарольДоступа("ПарольДляПередачиПараметров3");
			КонецЕсли;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо указать пароли для всех лицевых счетов.");
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо записать параметры доступа.");
	КонецЕсли;
	
	ВсеКарточкиРаспечатаны = Ложь;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик заполнения всеми л/с без параметров доступа.
//
Процедура ЗаполнитьВсемиЛСБезПараметров3(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОчиститьТабличныеЧасти();
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуЛСБезПараметров();
	
	Если ТаблицаЛС.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Параметры доступа имеются у всех лицевых счетов.");
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

///////////////////////
// 4-Я ВЕРСИЯ

&НаКлиенте
// Обработчик ответа о печати памяток доступа.
//
Процедура ОбработатьОтветОПечатиПамятокДоступа4(Результат, ДополнительныеПараметры) Экспорт
	
	// Если не печатать памятки, то отбираем только л/с, по которым не было отправлено уведомлений по эл. почте.
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ОтбиратьНеотправленные = Истина;
	Иначе
		ОтбиратьНеотправленные = Ложь;
	КонецЕсли;
	
	АдресВоВременномХранилище = ПолучитьАдресТаблицыЛСВоВременномХранилищеВерсия4(ОтбиратьНеотправленные);
	ДополнительныеПараметры.Добавить(АдресВоВременномХранилище);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Обработка.УПЖКХ_ИнтеграцияССайтом",
													 ?(ИспользоватьЛогиныВВерсии4, "ПамяткаДоступаВерсия4СЛогинами", "ПамяткаДоступаВерсия4БезЛогинов"),
													 ДополнительныеПараметры,
													 Неопределено,
													 УПЖКХ_ТиповыеМетодыКлиент.ПолучитьЗаголовокПечатнойФормы(ДополнительныеПараметры));
	
	ОбработатьПечатьПамятокВерсия4();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик заполнения табличной части всеми л/с без параметров доступа.
//
Процедура ЗаполнитьВсемиЛСБезПараметров4(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьТабличныеЧасти();
	Иначе
		Возврат;
	КонецЕсли;
	
	ПолучитьССайтаДанныеОПараметрахДоступаЛСВерсия4(Истина);
	ПолучитьТаблицуПинкодовБезПараметров();
	
	Если ТаблицаПинкодов.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Параметры доступа имеются у всех лицевых счетов.");
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик получения сведений о наличии параметров доступа с сайта.
//
Процедура ОбработчикПолученияСведенийОНаличииПараметровДоступаССайта4()
	
	ДанныеПолучены = ПолучитьСведенияОНаличииПараметровДоступаССайта();
	
	Если ДанныеПолучены Тогда
		
		Элементы.ГруппаПовторноеСоединение.Видимость       = Ложь;
		Элементы.ГруппаЭтапыВерсия4.Видимость              = Истина;
		Элементы.ТаблицаПинкодов.Видимость                 = Истина;
		Элементы.ГруппаОбновлятьПараметрыВерсия4.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаПовторноеСоединение.Видимость       = Истина;
		Элементы.ГруппаЭтапыВерсия4.Видимость              = Ложь;
		Элементы.ТаблицаПинкодов.Видимость                 = Ложь;
		Элементы.ГруппаОбновлятьПараметрыВерсия4.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа о замене параметров доступа.
//
Процедура ОбработатьОтветОЗаменеПараметровДоступаВерсия4(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Объект.ОбновлятьПараметрыДоступа = Ложь;
		Возврат;
	КонецЕсли;
	
	СгенерироватьПинкодыНаСервереВерсия4();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа об обновлении параметров доступа.
//
Процедура ОбработатьОтветОбОбновленииПараметровДоступаВерсия4(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ОбновлятьПараметрыДоступа = НЕ Объект.ОбновлятьПараметрыДоступа;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик ответа об обновлении параметров доступа.
//
Процедура ОбработатьОтветОбОбновленииПараметровДоступа(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ОбновлятьПараметрыДоступа = НЕ Объект.ОбновлятьПараметрыДоступа;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти