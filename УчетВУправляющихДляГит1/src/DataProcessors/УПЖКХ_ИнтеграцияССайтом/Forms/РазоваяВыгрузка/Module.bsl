
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработка события "ПриОткрытии" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ИнтеграцияССайтом"));
	
	ТекОбъект.ИнициализацияРеквизитов();
	
	ЗначениеВДанныеФормы(ТекОбъект, Объект);
	
	УправлениеВидимостьюКнопкиПодбораЛС();
	УправлениеДоступностьюФлагаВыгрузкиЭлектронныхПаспортов();
	УправлениеДоступностьюФлагаЗагрузкиОплат();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКнопки);
	// Конец ОбщиеМеханизмыИКоманды
	
	УправлениеФормой();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработка события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	МесяцОбмена       = ТекущаяДата();
	МесяцОбменаСтрока = Формат(МесяцОбмена, "ДФ='MMMM yyyy'");
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработка события "Оповещение" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		
		УправлениеФормой();
		
	ИначеЕсли ИмяСобытия = "ПередачаТЗ" ИЛИ ИмяСобытия = "ПередачаВыбранныхЛС" Тогда
		
		АдресВХранилище = Параметр;
		МассивЛС        = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		ЗаполнитьТаблицуЛицевыхСчетов(МассивЛС);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Обработка события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьРеквизиты();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область ОбработчикиКоманд

&НаКлиенте
// Процедура - обработчик команды "КомандаВыполнитьОбмен".
//
Процедура КомандаВыполнитьОбмен(Команда)
	
	Если ДанныеЗаполнены() Тогда
		
		ПараметрыПодключения = ПолучитьПараметрыПодключения();
		
		Если ПараметрыПодключения.ХранитьПароль Тогда
			НачатьЗамерВремениВыполнения();
			ВыполнитьОбменНаСервере(ПараметрыПодключения.Пароль);
			ОстановитьЗамерВремениВыполнения();
		Иначе
			ПолучитьПарольДоступа();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаВыполнитьОбмен()

&НаКлиенте
// Процедура - обработчик команды "КомандаЗаполнитьЛСПодбором".
//
Процедура КомандаЗаполнитьЛСПодбором(Команда)
	
	Если ЛицевыеСчета.Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЛСПодборомЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьЛСПодборомФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьЛСПодбором()

&НаКлиенте
// Обработчик результата вопроса, вызваного в процедуре "КомандаЗаполнитьЛСПодбором()".
Процедура КомандаЗаполнитьЛСПодборомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЛицевыеСчета.Очистить();
	
	КомандаЗаполнитьЛСПодборомФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьЛСПодборомЗавершение()

&НаКлиенте
// Продолжение процедуры "КомандаЗаполнитьЛСПодбором()".
Процедура КомандаЗаполнитьЛСПодборомФрагмент()
	
	ФормаПодбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаПодбора");
	ФормаПодбора.Открыть();
	
КонецПроцедуры // КомандаЗаполнитьЛСПодбором()

&НаКлиенте
// Процедура - обработчик команды "КомандаЗаполнитьСОтбором".
//
Процедура КомандаЗаполнитьСОтбором(Команда)
	
	Если ПустаяСтрока(ПутьКФормеПодбора) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Форма подбора не найдена.");
		Возврат;
	КонецЕсли;
	
	Если ЛицевыеСчета.Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
		ПоказатьВопрос(	Новый ОписаниеОповещения("КомандаЗаполнитьСОтборомЗавершение", ЭтотОбъект),
						ТекстВопроса,
						РежимДиалогаВопрос.ДаНет,,
						КодВозвратаДиалога.Да,);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьСОтборомФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьСОтбором()

&НаКлиенте
// Обработчик результата вопроса, вызванонго из процедуры "КомандаЗаполнитьСОтбором()".
Процедура КомандаЗаполнитьСОтборомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЛицевыеСчета.Очистить();
	
	КомандаЗаполнитьСОтборомФрагмент();
	
КонецПроцедуры // КомандаЗаполнитьСОтборомЗавершение()

&НаКлиенте
// Продолжение процедуры "КомандаЗаполнитьСОтбором()".
Процедура КомандаЗаполнитьСОтборомФрагмент()
	
	ПараметрыОткрытияФормыПодбора = Новый Структура;
	Если Не Объект.НастройкаДоступа.Пустая() Тогда
		
		Организация = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.НастройкаДоступа, "Организация");
		Если Не Организация.Пустая() Тогда
			ПараметрыОткрытияФормыПодбора.Вставить("Организация", Организация);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму(ПутьКФормеПодбора, ПараметрыОткрытияФормыПодбора);
	
КонецПроцедуры // КомандаЗаполнитьСОтборомФрагмент()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

#Область ОбработчикиСобытийЭлементовУправления

&НаКлиенте
// Процедура - обработчик события "Регулирование" реквизита "МесяцОбменаСтрока".
//
Процедура МесяцОбменаСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)

	МесяцОбмена       = ДобавитьМесяц(МесяцОбмена, Направление);
	МесяцОбменаСтрока = Формат(МесяцОбмена, "ДФ='MMMM yyyy'");
	
КонецПроцедуры // МесяцОбменаСтрокаРегулирование()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "МесяцОбменаСтрока".
//
Процедура МесяцОбменаСтрокаПриИзменении(Элемент)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПодобратьДатуПоТексту(МесяцОбменаСтрока, МесяцОбмена);
	МесяцОбменаСтрока = Формат(МесяцОбмена, "ДФ='MMMM yyyy'");
	
КонецПроцедуры // МесяцОбменаСтрокаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" реквизита "МесяцОбменаСтрока".
//
Процедура МесяцОбменаСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцОбменаСтрокаОкончаниеВводаТекста()

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" реквизита "МесяцОбменаСтрока".
//
Процедура МесяцОбменаСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцОбменаСтрокаАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "МесяцОбменаСтрока".
//
Процедура МесяцОбменаСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииНачалоВыбора(ЭтаФорма, "МесяцОбмена", "МесяцОбменаСтрока", 
														Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцОбменаСтрокаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "УказатьЛицевыеСчета".
//
Процедура УказатьЛицевыеСчетаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры // УказатьЛицевыеСчетаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода лицевого счета.
//
Процедура ЛицевыеСчетаЛицевойСчетПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЛицевыеСчета.ТекущиеДанные;
	
	Если ЛицевыеСчета.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекДанные.ЛицевойСчет)).Количество() = 1 Тогда
		ИндексСтроки = ЛицевыеСчета.Индекс(ЛицевыеСчета.НайтиПоИдентификатору(ТекДанные.ПолучитьИдентификатор()));
		ЗаполнитьТаблицуЛицевыхСчетов(ТекДанные.ЛицевойСчет, Истина, ИндексСтроки);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выбранный лицевой счет уже имеется в таблице.");
		ТекДанные.ЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флага "Выгрузка данных по ЛС".
//
Процедура ВыгрузкаДанныхПоЛСПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" тумблера "Выбор периода".
//
Процедура ТумблерВыборПериодаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Настройка доступа".
//
Процедура НастройкаДоступаПриИзменении(Элемент)
	
	УправлениеДоступностьюФлагаВыгрузкиЭлектронныхПаспортов();
	
	УправлениеДоступностьюФлагаЗагрузкиОплат();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Настройка обмена".
//
Процедура НастройкаОбменаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - открывает настройки многопоточности.
//
Процедура ГиперссылкаНаСтраницуНастройкуМногопоточностиНажатие(Элемент)
	
	КВП_РаботаСДиалогамиКлиент.ПерейтиНаСтраницуНастроекПроизводительности();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Заполняет таблицу формы данными по лицевым счетам.
//
// Параметры:
//  МассивЛС - Массив - массив лицевых счетов, данные по которым надо собрать и вывести.
//  ДобавлениеСтроки - Булево - признак того, что в таблицу будет добавлена только 1 строка.
//  ИндексСтроки - Число - индекс строки, в которой необходимо вывести данные по л/с.
//
Процедура ЗаполнитьТаблицуЛицевыхСчетов(МассивЛС, ДобавлениеСтроки = Ложь, ИндексСтроки = Неопределено)
	
	ТаблицаДанных = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеПоЛС(МассивЛС);
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		Если НЕ ДобавлениеСтроки Тогда
			ЛицевыеСчета.Загрузить(ТаблицаДанных);
		Иначе
			ЗаполнитьЗначенияСвойств(ЛицевыеСчета.Получить(ИндексСтроки), ТаблицаДанных[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуЛицевыхСчетов()

&НаСервере
// Управляет видимостью и доступностью элементов формы.
//
Процедура УправлениеФормой()
	
	Элементы.ГруппаЛицевыеСчета.Видимость        = ВыгрузкаДанныхПоЛС;
	Элементы.ГруппаТаблицаЛицевыеСчета.Видимость = УказатьЛицевыеСчета;
	
	Элементы.МесяцОбменаСтрока.Видимость           = ОбменЗаАктуальныйПериод = 1;
	Элементы.ЗагрузкаСведенийОбОплатах.Видимость   = ОбменЗаАктуальныйПериод = 0;
	Элементы.ЗагрузкаСведенийОПоказаниях.Видимость = ОбменЗаАктуальныйПериод = 0;
	
	// Если база серверная и многопоточность не используется, показываем гиперссылку.
	Если УПЖКХ_МногопоточнаяОбработкаДанных.ПоказыватьСсылкиНаСтраницуНастроекМногопоточности() Тогда
		
		Если УПЖКХ_МногопоточнаяОбработкаДанных.ПроверитьВключенаЛиМногопоточнаяОбработкаДанных() Тогда
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "При обмене исползуется многопоточная обработка данных. Нажмите, чтобы перейти к настройке многопоточности";
		Иначе
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "Механизм обмена может работать быстрее при использовании многопоточной обработки данных. Нажмите, чтобы перейти к настройке многопоточности";
		КонецЕсли;
		
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Истина;
		
	Иначе
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Ложь
	КонецЕсли;
	
	// Гиперссылка на настройку сбора данных.
	УПЖКХ_ПодключаемыеЭлементыФормСервер.ДобавитьГиперссылкуНаНастройкуСбораДанныхПоНастройкеОбменаДанными(ЭтаФорма, Элементы.ГруппаНастройкаВыгрузкаДанныхПоЛС, Объект.НастройкаОбмена, ВыгрузкаДанныхПоЛС);
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Выполняет выгрузку на сайт данных по л/с.
//
Процедура ВыполнитьОбменНаСервере(Пароль)
	
	ПараметрыОбмена  = Новый Структура;
	НастройкаДоступа = Объект.НастройкаДоступа;
	
	СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(НастройкаДоступа);
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если УказатьЛицевыеСчета Тогда
		ПараметрыОбмена.Вставить("ЛицевыеСчета", ЛицевыеСчета.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("НастройкаОбмена",  Объект.НастройкаОбмена);
	ПараметрыОбмена.Вставить("МесяцОбмена",      ?(ОбменЗаАктуальныйПериод = 1, МесяцОбмена, КонецМесяца(ТекущаяДата())));
	ПараметрыОбмена.Вставить("НастройкаДоступа", НастройкаДоступа);
	ПараметрыОбмена.Вставить("ВыгрузкаДанныхПоЛС",           ВыгрузкаДанныхПоЛС);
	ПараметрыОбмена.Вставить("ВыгрузкаЭлектронныхПаспортов", ВыгрузкаЭлектронныхПаспортов);
	
	Если ВыгрузкаДанныхПоЛС ИЛИ ВыгрузкаЭлектронныхПаспортов ИЛИ ОбменЗаАктуальныйПериод = 1 Тогда
		Если ВыгрузкаДанныхПоЛС И УказатьЛицевыеСчета Тогда
			ПараметрыОбмена.Вставить("ЛицевыеСчета", ЛицевыеСчета.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
		КонецЕсли;
		
		УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьВыгрузкуДанныхПоЛС(,Пароль, ПараметрыОбмена, СтруктураИнформацииОСайте);
	КонецЕсли;
	
	Если ОбменЗаАктуальныйПериод = 0 Тогда
		Если ЗагрузкаРеестраПлатежей Тогда
			УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьЗагрузкуРеестраПлатежей(ПараметрыОбмена, Пароль, СтруктураИнформацииОСайте);
		КонецЕсли;
		
		Если ЗагрузкаПоказанийПУ Тогда
			УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьЗагрузкуПоказанийПоПУ(ПараметрыОбмена, Пароль, СтруктураИнформацииОСайте);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьОбменНаСервере()

&НаСервере
// Анализирует наличие формы подбора объектов в составе конфигурации.
// Если ее нет, не выводить соответствующую кнопку в командной панели таблицы.
//
Процедура УправлениеВидимостьюКнопкиПодбораЛС()
	
	Если НЕ Метаданные.ОбщиеФормы.Найти("УПЖКХ_ПодборОбъектов") = Неопределено Тогда
		ПутьКФормеПодбора = "ОбщаяФорма.УПЖКХ_ПодборОбъектов";
	ИначеЕсли НЕ Метаданные.Обработки.УПЖКХ_ИнтеграцияССайтом.Формы.Найти("ПодборОбъектов") = Неопределено Тогда
		ПутьКФормеПодбора = "Обработка.УПЖКХ_ИнтеграцияССайтом.Форма.ПодборОбъектов";
	Иначе
		ПутьКФормеПодбора = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКФормеПодбора) Тогда
		Элементы.ЛицевыеСчетаЗаполнитьСОтбором.Видимость = Ложь;
	Иначе
		Элементы.ЛицевыеСчетаЗаполнитьСОтбором.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюКнопкиПодбораЛС()

&НаСервере
// Анализирует наличие модуля электронных паспортов домов на сайте
// и управляет доступностью флага "Выгружать электронные паспорта".
//
Процедура УправлениеДоступностьюФлагаВыгрузкиЭлектронныхПаспортов()
	
	Элементы.ВыгрузкаЭлектронныхПаспортов.Доступность = Ложь;
	
	Если НЕ Объект.НастройкаДоступа.Пустая() Тогда
		
		СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(Объект.НастройкаДоступа);
		
		Если СтруктураИнформацииОСайте.МассивУстановленныхНаСайтеМодулей.Найти(УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьНаименованиеМодуляЭПДНаСайте()) = Неопределено Тогда
			ВыгрузкаЭлектронныхПаспортов = Ложь;
		Иначе
			Элементы.ВыгрузкаЭлектронныхПаспортов.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Анализирует наличие модуля оплат на сайте и управляет доступностью флага "Загружать оплаты".
//
Процедура УправлениеДоступностьюФлагаЗагрузкиОплат()
	
	Элементы.ЗагрузкаСведенийОбОплатах.Доступность = Ложь;
	
	Если НЕ Объект.НастройкаДоступа.Пустая() Тогда
		
		СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(Объект.НастройкаДоступа);
		
		Если НЕ СтруктураИнформацииОСайте.НомерБилда = 1 И СтруктураИнформацииОСайте.МассивУстановленныхНаСайтеМодулей.Найти(УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьНаименованиеМодуляОплатНаСайте()) = Неопределено Тогда
			ЗагрузкаРеестраПлатежей = Ложь;
		Иначе
			Элементы.ЗагрузкаСведенийОбОплатах.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Сохраняет настройки пользователя в хранилище настроек.
//
Процедура СохранитьРеквизиты()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("НастройкаДоступа", Объект.НастройкаДоступа);
	СтруктураНастроек.Вставить("НастройкаОбмена",  Объект.НастройкаОбмена);
	
	ХранилищеОбщихНастроек.Сохранить("Обработка.УПЖКХ_ИнтеграцияССайтом", , СтруктураНастроек);
	
КонецПроцедуры // СохранитьРеквизиты()

&НаКлиенте
// Проверяет, заполнены ли данные, необходимые для выгрузки.
//
// Возвращаемое значение:
//  Булево
//
Функция ДанныеЗаполнены()
	
	ДанныеЗаполнены = Истина;
	
	Если Объект.НастройкаДоступа = ПредопределенноеЗначение("Справочник.УПЖКХ_НастройкиДоступаКСайту.ПустаяСсылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана настройка доступа к сайту.");
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если Объект.НастройкаОбмена = ПредопределенноеЗначение("Справочник.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.ПустаяСсылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана настройка обмена.");
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если МесяцОбмена = Дата('00010101') Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана дата обмена.");
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если НЕ ВыгрузкаДанныхПоЛС И НЕ ВыгрузкаЭлектронныхПаспортов Тогда
		Если ОбменЗаАктуальныйПериод = 1 ИЛИ НЕ ЗагрузкаРеестраПлатежей И НЕ ЗагрузкаПоказанийПУ Тогда
			ПоказатьПредупреждение(, "Не выбран ни один вид обмена.");
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции // ДанныеЗаполнены()

&НаСервере
// Формирует структуру с параметрами подключения к сайту.
//
Функция ПолучитьПараметрыПодключения()
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Пароль",        Объект.НастройкаДоступа.Пароль);
	ПараметрыПодключения.Вставить("ХранитьПароль", Объект.НастройкаДоступа.ХранитьПароль);
	
	Возврат ПараметрыПодключения;
	
КонецФункции // ПолучитьПараметрыПодключения()

&НаКлиенте
// Открывает форму для ввода пароля.
//
Процедура ПолучитьПарольДоступа()
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ВебИнтеграцияВводПароля",,,,,,
				 Новый ОписаниеОповещения("ОбработчикЗакрытияФормыВводаПароля", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ПолучитьПарольДоступа()

&НаКлиенте
// Процедура-обработчик данных, полученных после закрытия формы ввода пароля.
Процедура ОбработчикЗакрытияФормыВводаПароля(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = "" Тогда
		ВыполнитьОбменНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры // ОбработчикЗакрытияФормыВводаПароля()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область ФунцкионалОтладки

&НаКлиенте
// Запускает замер времени выполнения.
//
Процедура НачатьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.НачатьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры

&НаКлиенте
// Завершает замер времени выполнения.
//
Процедура ОстановитьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.ОстановитьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры

#КонецОбласти
