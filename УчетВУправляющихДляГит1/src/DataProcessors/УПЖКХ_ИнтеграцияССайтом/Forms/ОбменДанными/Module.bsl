
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработка события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ИнтеграцияССайтом"));
	
	ТекОбъект.ИнициализацияРеквизитов();
	
	ЗначениеВДанныеФормы(ТекОбъект, Объект);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКнопки);
	// Конец ОбщиеМеханизмыИКоманды

	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработка события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборСпискаВариантовОбмена();
	УстановитьОтборВЖурналеОбмена();
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработка события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьРеквизиты();
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Обработка события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

#Область ОбработчикиСобытийЭлементовУправления

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода настройки доступа.
//
Процедура НастройкаДоступаПриИзменении(Элемент)
	
	УстановитьОтборСпискаВариантовОбмена();
	
	УстановитьОтборВЖурналеОбмена();
	
КонецПроцедуры // НастройкаДоступаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" журнала обмена.
//
Процедура ЖурналОбменаПриАктивизацииСтроки(Элемент)
	
	// Обработчик используется только в режиме отладки.
	
	ИспользуетсяРежимОтладки = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ИспользуетсяРежимОтладки();
	
	Если ИспользуетсяРежимОтладки И НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		ТекущийВидОбмена = Элемент.ТекущиеДанные.ВидОбмена;
		
		Если ВидОбменаЯвляетсяВыгрузкойНаСайт(ТекущийВидОбмена) Тогда
			
			Элементы.КнопкаОтладкаОтправитьФайлПовторно.Видимость = Истина;
			Элементы.КнопкаОтладкаЗагрузитьФайлПовторно.Видимость = Ложь;
			
		Иначе
			
			Элементы.КнопкаОтладкаОтправитьФайлПовторно.Видимость = Ложь;
			Элементы.КнопкаОтладкаЗагрузитьФайлПовторно.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - открывает настройки многопоточности.
//
Процедура ГиперссылкаНаСтраницуНастройкуМногопоточностиНажатие(Элемент)
	
	КВП_РаботаСДиалогамиКлиент.ПерейтиНаСтраницуНастроекПроизводительности();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область ОбработчикиКоманд

&НаКлиенте
// Процедура - обработчик команды "КомандаВыполнитьОбменСейчас".
//
Процедура КомандаВыполнитьОбменСейчас(Команда)
	
	НачатьЗамерВремениВыполнения();
	
	ТекущийВариантОбмена = Элементы.ВариантыОбмена.ТекущаяСтрока;
	
	Если ТекущийВариантОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыПодключения();
	
	Если ПараметрыПодключения.ХранитьПароль Тогда
		Пароль = ПараметрыПодключения.Пароль;
	Иначе
		ДополнительныеПараметры = Новый Структура("ТекущийВариантОбмена", ТекущийВариантОбмена);
		ФормаВводаПароля = ПолучитьФорму("ОбщаяФорма.УПЖКХ_ВебИнтеграцияВводПароля");
		ФормаВводаПароля.ОписаниеОповещенияОЗакрытии   = Новый ОписаниеОповещения("ПолучитьПарольДоступа", ЭтаФорма, ДополнительныеПараметры);
		ФормаВводаПароля.ВладелецФормы                 = ЭтаФорма;
		ФормаВводаПароля.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВводаПароля.РежимОткрытияОкна             = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаПароля.Открыть();
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбменДаннымиССайтом(Пароль, ТекущийВариантОбмена);
	
	ОстановитьЗамерВремениВыполнения();
	
КонецПроцедуры // КомандаВыполнитьОбменСейчас()

&НаКлиенте
// Открывает форму для ввода пароля.
Функция ПолучитьПарольДоступа(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Пароль               = РезультатЗакрытия;
	ТекущийВариантОбмена = ДополнительныеПараметры.ТекущийВариантОбмена;
	
	ВыполнитьОбменДаннымиССайтом(Пароль, ТекущийВариантОбмена);
	
КонецФункции // ПолучитьПарольДоступа()

&НаКлиенте
// Процедура вызывает механизм обмена данными с сайтом.
Процедура ВыполнитьОбменДаннымиССайтом(Пароль, ТекущийВариантОбмена)
	
	УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьОбменДаннымиССайтом(ТекущийВариантОбмена, Пароль);
	
КонецПроцедуры // КомандаВыполнитьОбменСейчас()

&НаКлиенте
// Процедура - обработчик команды "ВыполнитьРазовуюВыгрузкуДанных".
//
Процедура КомандаВыполнитьРазовуюВыгрузкуДанных(Команда)
	
	ФормаРазовойВыгрузки = ПолучитьФорму("Обработка.УПЖКХ_ИнтеграцияССайтом.Форма.РазоваяВыгрузка");
	ФормаРазовойВыгрузки.Объект.НастройкаДоступа = Объект.НастройкаДоступа;
	
	Если Не ФормаРазовойВыгрузки.Открыта() Тогда
		ФормаРазовойВыгрузки.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "КомандаОбновитьЖурналОбмена".
//
Процедура КомандаОбновитьЖурналОбмена(Команда)
	
	ОбновитьЖурналОбмена();
	
КонецПроцедуры // КомандаОбновитьЖурналОбмена()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Сохраняет настройки пользователя в хранилище настроек.
//
Процедура СохранитьРеквизиты()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("НастройкаДоступа", Объект.НастройкаДоступа);
	
	ХранилищеОбщихНастроек.Сохранить("Обработка.УПЖКХ_ИнтеграцияССайтом", , СтруктураНастроек);
	
КонецПроцедуры // СохранитьРеквизиты()

&НаСервере
// Формирует структуру с параметрами подключения к сайту.
//
Процедура ЗаполнитьПараметрыПодключения()
	
	ПараметрыПодключения = Новый Структура;
	
	ПараметрыПодключения.Вставить("Пароль",        Объект.НастройкаДоступа.Пароль);
	ПараметрыПодключения.Вставить("ХранитьПароль", Объект.НастройкаДоступа.ХранитьПароль);
	
КонецПроцедуры // ЗаполнитьПараметрыПодключения()

&НаКлиенте
// Обновляет данные в журнале обмена.
//
Процедура ОбновитьЖурналОбмена()
	
	Элементы.ЖурналОбмена.Обновить();
	
КонецПроцедуры // ОбновитьЖурналОбмена()

&НаКлиенте
// Устанавливает отбор в таблице с вариантами обмена.
//
Процедура УстановитьОтборСпискаВариантовОбмена()
	
	ВариантыОбмена.Отбор.Элементы.Очистить();
	
	НовыйОтбор = ВариантыОбмена.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НастройкаДоступа");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Объект.НастройкаДоступа;
	
КонецПроцедуры // УстановитьОтборСпискаВариантовОбмена()

&НаКлиенте
// Устанавливает отбор в журнале обмена.
//
Процедура УстановитьОтборВЖурналеОбмена()
	
	ЖурналОбмена.Отбор.Элементы.Очистить();
	
	НовыйОтбор = ЖурналОбмена.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НастройкаДоступа");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйОтбор.ПравоеЗначение = Объект.НастройкаДоступа;
	
КонецПроцедуры // УстановитьОтборВЖурналеОбмена()

&НаКлиенте
// Устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	// Если база серверная и многопоточность не используется, показываем гиперссылку.
	Если УПЖКХ_МногопоточнаяОбработкаДанных.ПоказыватьСсылкиНаСтраницуНастроекМногопоточности() Тогда
		
		Если УПЖКХ_МногопоточнаяОбработкаДанных.ПроверитьВключенаЛиМногопоточнаяОбработкаДанных() Тогда
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "При обмене исползуется многопоточная обработка данных. Нажмите, чтобы перейти к настройке многопоточности";
		Иначе
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "Механизм обмена может работать быстрее при использовании многопоточной обработки данных. Нажмите, чтобы перейти к настройке многопоточности";
		КонецЕсли;
		
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Истина;
		
	Иначе
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Ложь
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область КомандыОтладки

&НаКлиенте
// Процедура - обработчик команды "КомандаОтладкаОтправитьФайлПовторно".
//
Процедура КомандаОтладкаОтправитьФайлПовторно(Команда)
	
	// Подготавливаем параметры подключения к сайту.
	ЗаполнитьПараметрыПодключения();
	
	// Если не храним пароль в настройках доступа, то запрашиваем у пользователя.
	Если НЕ ПараметрыПодключения.ХранитьПароль Тогда
		ФормаВводаПароля = ПолучитьФорму("ОбщаяФорма.УПЖКХ_ВебИнтеграцияВводПароля");
		ФормаВводаПароля.ОписаниеОповещенияОЗакрытии   = Новый ОписаниеОповещения("ПолучитьПарольДоступаДляПовторнойОтправкиНаСайт", ЭтаФорма);
		ФормаВводаПароля.ВладелецФормы                 = ЭтаФорма;
		ФормаВводаПароля.ЗакрыватьПриЗакрытииВладельца = Истина;
		ФормаВводаПароля.РежимОткрытияОкна             = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВводаПароля.Открыть();
		Возврат;
	КонецЕсли;
	
	ВыполнитьПовторнуюОтправкуФайлаНаСайт();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "КомандаОтладкаЗагрузитьФайлПовторно".
//
Процедура КомандаОтладкаЗагрузитьФайлПовторно(Команда)
	
	ВыполнитьПовторнуюЗагрузкуФайлаВБазу();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииИспользуемыеПриОтладке

&НаКлиенте
// Открывает форму для ввода пароля при отладке.
//
Функция ПолучитьПарольДоступаДляПовторнойОтправкиНаСайт(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Пароль = РезультатЗакрытия;
	
	ВыполнитьПовторнуюОтправкуФайлаНаСайт(Пароль);
	
КонецФункции // ПолучитьПарольДоступа()

&НаКлиенте
// Формирует структуру отбора записи из журнала обмена.
//
Функция ПолучитьСтруктуруОтбораТекущейЗаписиЖурналаОбмена()
	
	СтруктураОтбора = Новый Структура("НастройкаДоступа, ВариантОбмена, ВидОбмена, Дата");
	
	ТекущаяСтрокаЖурнала = Элементы.ЖурналОбмена.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущаяСтрокаЖурнала);
	
	СтруктураОтбора.НастройкаДоступа = Объект.НастройкаДоступа;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервере
// Определяет, является ли указанный вид обмена данными с сайтом выгрузкой данных на сайт.
//
Функция ВидОбменаЯвляетсяВыгрузкойНаСайт(ТекущийВидОбмена)
	
	Возврат ТекущийВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаДанныхЛС
		ИЛИ ТекущийВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаЭлектронныхПаспортов
		ИЛИ ТекущийВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаДанныхЛСИЭлектронныхПаспортов
		ИЛИ ТекущийВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяВыгрузкаДанныхНаСайт
		ИЛИ ТекущийВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаПараметровДоступа
		ИЛИ ТекущийВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяОтправкаПараметровДоступаНаСайт;
	
КонецФункции

&НаКлиенте
// Выполняет повторную отправку файла на сайт.
//
Процедура ВыполнитьПовторнуюОтправкуФайлаНаСайт(Пароль = Неопределено)
	
	СтруктураОтбора = ПолучитьСтруктуруОтбораТекущейЗаписиЖурналаОбмена();
	
	УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьПовторнуюВыгрузкуФайла(СтруктураОтбора, Пароль);
	
КонецПроцедуры

&НаКлиенте
// Выполняет повторную загрузку сохраненного файла в базу.
//
Процедура ВыполнитьПовторнуюЗагрузкуФайлаВБазу()
	
	СтруктураОтбора = ПолучитьСтруктуруОтбораТекущейЗаписиЖурналаОбмена();
	
	УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьПовторнуюЗагрузкуФайла(СтруктураОтбора);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область ФунцкионалОтладки

&НаКлиенте
// Запускает замер времени выполнения.
//
Процедура НачатьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.НачатьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры

&НаКлиенте
// Завершает замер времени выполнения.
//
Процедура ОстановитьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.ОстановитьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры

#КонецОбласти
