#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Считывает данные файла в табличный документ и определяет загружаемые колонки.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанныхФайла - ХранилищеЗначения - двоичные данные файла, упакованные в хранилище значений.
//      * РасширениеФайла - Строка - расширение файла.
//      * ОписаниеКолонок - ТаблицаЗначений - описание загружаемых колонок, см. НовыйОписаниеЗагружаемыхКолонок().
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ОбработатьДанныеИзФайла(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ПараметрыЗадания.Вставить("МакетЗаголовка", ПолучитьМакет("МакетЗаголовка"));
	
	ТабличныйДокумент = ЗагрузкаДанныхИзВнешнихФайлов.ЗагрузитьФайлВТабличныйДокумент(ПараметрыЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеФайла", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// По данным табличного документа заполняет таблицу контрагентов для загрузки.
// Выполняет поиск существующих контрагентов.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанных - ХранилищеЗначения - табличный документ, содержащий данные.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ПолучитьТаблицуДанныхДляЗагрузки(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания.ХранилищеДанных.Получить();
	
	ЗагружаемыеДанные = НовыйТаблицаЗагружаемыхДанных();
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	// Строки с пустым наименованием будем удалять.
	СтрокиКУдалению = Новый Массив;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		
		НоваяСтрока = ЗагружаемыеДанные.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			ИмяКолонки = ТабличныйДокумент.Область(1, НомерКолонки).ПараметрРасшифровки;
			ТекущаяОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			Если ТекущаяОбласть.ПараметрРасшифровки <> "НеЗагружать" Тогда
				НоваяСтрока.ЗначенияКолонок.Вставить(ИмяКолонки, СокрЛП(ТекущаяОбласть.Текст));
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.ЗначенияКолонок);
		
		НоваяСтрока.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусНовый();
		НоваяСтрока.Представление = НСтр("ru = 'Новый: '") + НоваяСтрока.Наименование;
		
		Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
			СтрокиКУдалению.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ЗагружаемыеДанные.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	// Ищем контрагентов в базе и проставляем статусы для найденных строк.
	НайтиКонтрагентов(ЗагружаемыеДанные);
	
	ПоместитьВоВременноеХранилище(ЗагружаемыеДанные, АдресРезультата);
	
КонецПроцедуры

// Загружает подготовленные данные в информационную базу.
// Создает новых контрагентов, банковские счета, контактных лиц.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ЗагружаемыеДанные - ТаблицаЗначений - таблица значений с данными для загрузки.
//      * ГруппаДляНовыхКонтрагентов - СправочникСсылка.Контрагенты - группа для новых контрагентов.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ЗагрузитьДанныеИзФайла(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ЗагружаемыеДанные = ПараметрыЗадания.ЗагружаемыеДанные;
	ГруппаДляНовыхКонтрагентов = ПараметрыЗадания.ГруппаДляНовыхКонтрагентов;
	
	Ошибки = Неопределено;
	ТекстОшибки = НСтр("ru = 'Не удалось записать контрагента %1 по причине:
		|%2'");
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			ДанныеЗаполненияКонтрагента = ДанныеЗаполненияКонтрагента(СтрокаДанных);
			ДанныеЗаполненияБанковскихСчетов = ДанныеЗаполненияБанковскихСчетов(СтрокаДанных.ЗначенияКолонок);
			
			Если ПустаяСтрока(ДанныеЗаполненияКонтрагента.ИНН) Тогда
				ДанныеЗаполненияКонтрагента.Вставить("ЮридическоеФизическоеЛицо",
					ВидКонтрагентаПоНомеруБанковскогоСчета(ДанныеЗаполненияБанковскихСчетов));
			КонецЕсли;
			
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			
			НовыйКонтрагент.Заполнить(ДанныеЗаполненияКонтрагента);
			Если ДанныеЗаполненияКонтрагента.Свойство("ДанныеКонтактногоЛица") Тогда
				НовыйКонтрагент.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеЗаполненияКонтрагента.ДанныеКонтактногоЛица);
			КонецЕсли;
			
			НовыйКонтрагент.Родитель = ГруппаДляНовыхКонтрагентов;
			
			НовыйКонтрагент.Записать();
			
			ОсновнойБанковскийСчет = СоздатьБанковскийСчет(НовыйКонтрагент.Ссылка, ДанныеЗаполненияБанковскихСчетов, Ошибки);
			
			Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
				НовыйКонтрагент.ДополнительныеСвойства.Очистить();
				НовыйКонтрагент.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
				НовыйКонтрагент.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ТекстСообщения = СтрШаблон(ТекстОшибки, СтрокаДанных.Наименование, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
			ТекстСообщения = СтрШаблон(ТекстОшибки, СтрокаДанных.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ЗагрузкаДанныхИзВнешнихФайлов.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Справочники.Контрагенты, , ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Ошибки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Удаляет строки и колонки, не содержащие полезной информации для загрузки.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанных - ХранилищеЗначения - табличный документ, содержащий данные.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура УдалитьВсеНенужныеСтрокиТаблицы(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания.ХранилищеДанных.Получить();
	
	НайденыНенужныеСтроки = Ложь;
	ЗагрузкаДанныхИзВнешнихФайлов.УдалитьВсеНенужныеСтрокиТаблицы(ТабличныйДокумент, НайденыНенужныеСтроки);
	
	Результат = Новый Структура;
	Результат.Вставить("НайденыНенужныеСтроки", НайденыНенужныеСтроки);
	Результат.Вставить("ХранилищеДанных", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ОписаниеЗагружаемыхКолонок() Экспорт
	
	ОписаниеКолонок = ЗагрузкаДанныхИзВнешнихФайлов.НовыйОписаниеЗагружаемыхКолонок();
	
	// Наименование
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Наименование";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Наименование'");
	НоваяСтрока.ОбязательнаДляЗаполнения = Истина;
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиНаименования();
	
	// Полное наименование
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "НаименованиеПолное";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Полное наименование'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиПолноеНаименование();
	
	// ИНН
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ИНН";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'ИНН'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ИНН");
	
	// КПП
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "КПП";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'КПП'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("КПП");
	
	// ОГРН
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ОГРН";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'ОГРН'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ОГРН");
	
	// Код по ОКПО
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "КодПоОКПО";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Код по ОКПО'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиОКПО();
	
	// Юридический адрес
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ЮридическийАдрес";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Юридический адрес'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиЮридическогоАдреса();
	
	// Фактический адрес
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ФактическийАдрес";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Фактический адрес'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Фактический адрес");
	
	// Банковские реквизиты
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "БанковскиеРеквизиты";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Банковские реквизиты'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Банковские реквизиты");
	
	// Расчетный счет
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "НомерСчета";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Номер банковского счета'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиРасчетногоСчета();
	
	// БИК банка
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "БИК";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'БИК банка'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиБИКБанка();
	
	// Контактное лицо
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "КонтактноеЛицо";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Контактное лицо'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиКонтактноеЛицо();
	
	// Должность контактного лица
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ДолжностьКонтактногоЛица";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Должность контактного лица'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиДолжностьКонтактногоЛица();
	
	// Телефон
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Телефон";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Телефон'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиТелефон();
	
	// Email
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Email";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Email'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиАдресЭлектроннойПочты();
	
	Возврат ОписаниеКолонок;
	
КонецФункции

#Область ОписаниеВозможныхЗаголовковВЗагружаемыхФайлах

Функция ПодходящиеЗаголовкиНаименования()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Наименование");
	МассивЗаголовков.Добавить("Название контрагента");
	МассивЗаголовков.Добавить("Наименование контрагента");
	МассивЗаголовков.Добавить("Название");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиПолноеНаименование()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Наименование полное");
	МассивЗаголовков.Добавить("Полное наименование");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиОКПО()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("ОКПО");
	МассивЗаголовков.Добавить("Код по ОКПО");
	МассивЗаголовков.Добавить("Код ОКПО");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиЮридическогоАдреса()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Юридический адрес");
	МассивЗаголовков.Добавить("Адрес контрагента");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиРасчетногоСчета()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Расчетный счет");
	МассивЗаголовков.Добавить("Номер счета");
	МассивЗаголовков.Добавить("Номер банковского счета");
	МассивЗаголовков.Добавить("Номер расчетного счета");
	МассивЗаголовков.Добавить("р/с");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиБИКБанка()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Бик");
	МассивЗаголовков.Добавить("Банк бик");
	МассивЗаголовков.Добавить("БИК банка");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиКонтактноеЛицо()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Контактное лицо");
	МассивЗаголовков.Добавить("Контакт");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиДолжностьКонтактногоЛица()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Должность");
	МассивЗаголовков.Добавить("Контактное лицо (должность)");
	МассивЗаголовков.Добавить("Должность контактного лица");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиТелефон()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Телефон");
	МассивЗаголовков.Добавить("Номер телефона");
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиАдресЭлектроннойПочты()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Email");
	МассивЗаголовков.Добавить("E-mail");
	МассивЗаголовков.Добавить("Электронная почта");
	МассивЗаголовков.Добавить("Адрес электронной почты");
	
	Возврат МассивЗаголовков;
	
КонецФункции

#КонецОбласти

#Область ПоискИСозданиеЭлементов

Функция НовыйТаблицаЗагружаемыхДанных()
	
	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	
	Для Каждого Реквизит Из Метаданные.Обработки.ЗагрузкаКонтрагентовИзФайла.ТабличныеЧасти.ЗагружаемыеДанные.Реквизиты Цикл
	
		ЗагружаемыеДанные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	
	КонецЦикла;
	
	ЗагружаемыеДанные.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ЗагружаемыеДанные.Колонки.Добавить("ЗначенияКолонок", Новый ОписаниеТипов("Структура"));
	
	Возврат ЗагружаемыеДанные;
	
КонецФункции

Функция ЗначениеКолонкиПоИдентификатору(ЗначенияКолонок, Идентификатор)
	
	ЗначениеКолонки = Неопределено;
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат ЗначениеКолонки;
	КонецЕсли;
	
	Для Каждого Элемент Из ЗначенияКолонок Цикл
		Если Элемент.Ключ = Идентификатор Тогда
			ЗначениеКолонки = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеКолонки;
	
КонецФункции

#Область КонтрагентыКонтактныеЛица

Процедура НайтиКонтрагентов(ЗагружаемыеДанные)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаДляПоиска", ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Наименование КАК Наименование,
	|	Таблица.ИНН КАК ИНН,
	|	Таблица.КПП КАК КПП
	|ПОМЕСТИТЬ ТаблицаДляПоиска
	|ИЗ
	|	&ТаблицаДляПоиска КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки КАК НомерСтроки,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ТаблицаДляПоиска.Наименование КАК Наименование,
	|	ТаблицаДляПоиска.ИНН КАК ИНН,
	|	ТаблицаДляПоиска.КПП КАК КПП,
	|	0 КАК ВесВыборки
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.ИНН = ТаблицаДляПоиска.ИНН)
	|			И (Контрагенты.КПП = ТаблицаДляПоиска.КПП)
	|			И ТаблицаДляПоиска.ИНН <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки,
	|	Контрагенты.Ссылка,
	|	ТаблицаДляПоиска.Наименование,
	|	ТаблицаДляПоиска.ИНН,
	|	ТаблицаДляПоиска.КПП,
	|	1
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.ИНН = ТаблицаДляПоиска.ИНН)
	|			И (ТаблицаДляПоиска.КПП = &ПустаяСтрока)
	|			И ТаблицаДляПоиска.ИНН <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки,
	|	Контрагенты.Ссылка,
	|	ТаблицаДляПоиска.Наименование,
	|	ТаблицаДляПоиска.ИНН,
	|	ТаблицаДляПоиска.КПП,
	|	ВЫБОР
	|		КОГДА Контрагенты.ИНН = &ПустаяСтрока
	|			ТОГДА 2
	|		ИНАЧЕ 4
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Наименование = ТаблицаДляПоиска.Наименование)
	|			И ТаблицаДляПоиска.Наименование <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки,
	|	Контрагенты.Ссылка,
	|	ТаблицаДляПоиска.Наименование,
	|	ТаблицаДляПоиска.ИНН,
	|	ТаблицаДляПоиска.КПП,
	|	ВЫБОР
	|		КОГДА Контрагенты.ИНН = &ПустаяСтрока
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.НаименованиеПолное = ТаблицаДляПоиска.Наименование)
	|			И ТаблицаДляПоиска.Наименование <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВесВыборки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПараметрыПоиска = Новый Структура("НомерСтроки");
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		Выборка.Сбросить();
		ПараметрыПоиска.НомерСтроки = СтрокаТаблицы.НомерСтроки;
		Если Выборка.НайтиСледующий(ПараметрыПоиска) Тогда
			Если Не ПустаяСтрока(Выборка.ИНН) И Выборка.ВесВыборки = 4 Тогда
				// Нашли контрагента с тем же наименование, что и в файле, но с другим ИНН. Сопоставлять нельзя.
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Контрагент = Выборка.Контрагент;
			СтрокаТаблицы.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусНайденный();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЗаполненияКонтрагента(СтрокаДанных)
	
	ДанныеЗаполнения = Новый Структура;
	
	// Основная информация о контрагенте
	ДанныеЗаполнения.Вставить("Наименование", Справочники.Контрагенты.ПолучитьКраткоеНаименованиеКонтрагента(СтрокаДанных.Наименование));
	ДанныеЗаполнения.Вставить("ИНН", СтрокаДанных.ИНН);
	Если Не ПустаяСтрока(ДанныеЗаполнения.ИНН) И СтрДлина(ДанныеЗаполнения.ИНН) = 10 Тогда
		ДанныеЗаполнения.Вставить("КПП", СтрокаДанных.КПП);
		КодПричиныПостановкиНаУчет = ИдентификационныеНомераНалогоплательщиков.КодПричиныПостановкиНаУчет(ДанныеЗаполнения.КПП);
		Если КодПричиныПостановкиНаУчет <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("ОбособленноеПодразделение",
				Не ИдентификационныеНомераНалогоплательщиков.ЭтоПричинаПостановкиНаУчетОрганизацииВЦелом(КодПричиныПостановкиНаУчет));
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификационныеНомераНалогоплательщиков.ЭтоИННФизическогоЛица(ДанныеЗаполнения.ИНН) Тогда
		ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Иначе
		ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("РегистрационныйНомер", ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "ОГРН"));
	
	ДанныеЗаполнения.Вставить("КодПоОКПО", ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "КодПоОКПО"));
	
	НаименованиеПолное = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "НаименованиеПолное");
	Если НаименованиеПолное <> Неопределено И Не ПустаяСтрока(НаименованиеПолное) Тогда
		ДанныеЗаполнения.Вставить("НаименованиеПолное", НаименованиеПолное);
	Иначе
		ДанныеЗаполнения.Вставить("НаименованиеПолное", СтрокаДанных.Наименование);
	КонецЕсли;
	
	// Адреса
	ЮридическийАдрес = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "ЮридическийАдрес");
	Если ЮридическийАдрес <> Неопределено И Не ПустаяСтрока(ЮридическийАдрес) Тогда
		ЮридическийАдресЗначениеJSON = ПривестиАдресКФорматуБСП(ЮридическийАдрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		ДанныеЗаполнения.Вставить("ЮридическийАдресЗначениеJSON", ЮридическийАдресЗначениеJSON);
	Иначе
		ДанныеЗаполнения.Вставить("ЮридическийАдресЗначениеJSON", "");
	КонецЕсли;
	
	ФактическийАдрес = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "ФактическийАдрес");
	Если ФактическийАдрес <> Неопределено И Не ПустаяСтрока(ФактическийАдрес) Тогда
		ФактическийАдресЗначениеJSON = ПривестиАдресКФорматуБСП(ФактическийАдрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ДанныеЗаполнения.Вставить("ФактическийАдресЗначениеJSON", ФактическийАдресЗначениеJSON);
	КонецЕсли;
	
	// Контактное лицо
	ДанныеКонтактногоЛица = РаспознанныеДанныеКонтактногоЛица(СтрокаДанных.ЗначенияКолонок);
	Если ДанныеКонтактногоЛица <> Неопределено Тогда
		ДанныеЗаполнения.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
	КонецЕсли;
	
	// Контактная информация
	Телефон = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "Телефон");
	Если Телефон <> Неопределено И Не ПустаяСтрока(Телефон) Тогда
		ТелефонЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		ДанныеЗаполнения.Вставить("ТелефонЗначениеJSON", ТелефонЗначениеJSON);
	КонецЕсли;
	
	Email = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "Email");
	Если Email <> Неопределено И Не ПустаяСтрока(Email) Тогда
		EmailЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			Email, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		ДанныеЗаполнения.Вставить("АдресЭлектроннойПочтыЗначениеJSON", EmailЗначениеJSON);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция РаспознанныеДанныеКонтактногоЛица(ЗначенияКолонок)
	
	КонтактноеЛицо = ЗначениеКолонкиПоИдентификатору(ЗначенияКолонок, "КонтактноеЛицо");
	Если КонтактноеЛицо = Неопределено Или ПустаяСтрока(КонтактноеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеКонтактногоЛица = Новый Структура;
	ДанныеКонтактногоЛица.Вставить("Наименование", КонтактноеЛицо);
	
	// В поле может быть указано ФИО и должность через ",".
	// Весь текст перед "," - ФИО контактного лица.
	// Весь текст после "," - должность.
	ФИОДолжность = СтрРазделить(КонтактноеЛицо, ",", Ложь);
	Если ФИОДолжность.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФИОЛица = СтрРазделить(ФИОДолжность[0], " ", Ложь);
	
	КоличествоСлов = ФИОЛица.Количество();
	Если КоличествоСлов >= 1 Тогда
		ДанныеКонтактногоЛица.Вставить("Фамилия", ФИОЛица[0]);
	КонецЕсли;
	
	Если КоличествоСлов >= 2 Тогда
		ДанныеКонтактногоЛица.Вставить("Имя", ФИОЛица[1]);
	КонецЕсли;
	
	Если КоличествоСлов >= 3 Тогда
		ДанныеКонтактногоЛица.Вставить("Отчество", ФИОЛица[2]);
	КонецЕсли;
	
	Если ФИОДолжность.Количество() > 1 Тогда
		ДанныеКонтактногоЛица.Вставить("Должность", ФИОДолжность[1]);
	КонецЕсли;
	
	Должность = ЗначениеКолонкиПоИдентификатору(ЗначенияКолонок, "ДолжностьКонтактногоЛица");
	Если Должность <> Неопределено И Не ПустаяСтрока(Должность) Тогда
		ДанныеКонтактногоЛица.Вставить("Должность", Должность);
	КонецЕсли;
	
	Возврат ДанныеКонтактногоЛица;
	
КонецФункции

#КонецОбласти

#Область БанковскиеСчета

Функция СоздатьБанковскийСчет(Контрагент, ДанныеЗаполненияБанковскихСчетов, Ошибки)
	
	Если ТипЗнч(ДанныеЗаполненияБанковскихСчетов) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СозданныеСчета = Новый Массив;
	Для Каждого ДанныеЗаполнения Из ДанныеЗаполненияБанковскихСчетов Цикл
		
		НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		НовыйБанковскийСчет.Владелец = Контрагент;
		НовыйБанковскийСчет.Заполнить(ДанныеЗаполнения);
		
		НовыйБанковскийСчет.Записать();
		СозданныеСчета.Добавить(НовыйБанковскийСчет.Ссылка);
		
	КонецЦикла;
	
	Если СозданныеСчета.Количество() = 1 Тогда
		ОсновнойБанковскийСчет = СозданныеСчета[0];
	Иначе
		ОсновнойБанковскийСчет = Неопределено;
	КонецЕсли;
	
	Возврат ОсновнойБанковскийСчет;
	
КонецФункции

Функция ДанныеЗаполненияБанковскихСчетов(ЗначенияКолонок)
	
	СтруктураБанковскогоСчета = НовыйСтруктураБанковскогоСчета();
	
	ЗаполнитьЗначенияСвойств(СтруктураБанковскогоСчета, ЗначенияКолонок);
	Если СтруктураБанковскогоСчета.НомерСчета = Неопределено Тогда
		БанковскиеСчета = РаспознанныеБанковскиеРеквизиты(ЗначенияКолонок);
	ИначеЕсли Не ПустаяСтрока(СтруктураБанковскогоСчета.НомерСчета) Тогда
		БанковскиеСчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураБанковскогоСчета);
	Иначе
		БанковскиеСчета = Новый Массив;
	КонецЕсли;
	
	Для Каждого БанковскийСчет Из БанковскиеСчета Цикл
	
		// Номер счета может быть разделен для наглядности пробелами на блоки по 4 цифры.
		БанковскийСчет.НомерСчета = СтрЗаменить(БанковскийСчет.НомерСчета, " ", "");
		
		// Так как некоторые алгоритмы преобразовывают БИК к числу, 
		// то нередко БИК предоставляется с ошибкой: теряется первая цифра "0" в номере БИК.
		БанковскийСчет.БИК = БанковскиеПравила.ИсправитьБИК(БанковскийСчет.БИК);
		
		// Для российского счета можно определить валюту по номеру счета.
		Если БанковскиеПравила.СтрокаСоответствуетФорматуБанковскогоСчета(БанковскийСчет.НомерСчета)
			И Не БанковскиеПравила.ЭтоРублевыйСчет(БанковскийСчет.НомерСчета) Тогда
			КодВалюты = БанковскиеПравила.КодВалютыБанковскогоСчета(БанковскийСчет.НомерСчета);
			БанковскийСчет.ВалютаДенежныхСредств = БанковскиеСчетаВызовСервера.ПолучитьВалютуПоКоду(КодВалюты);
			БанковскийСчет.Валютный = Истина;
		Иначе
			БанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			БанковскийСчет.Валютный = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БанковскиеСчета;
	
КонецФункции

Функция РаспознанныеБанковскиеРеквизиты(ЗначенияКолонок)
	
	БанковскиеСчета = Новый Массив;
	
	БанковскиеРеквизиты = ЗначениеКолонкиПоИдентификатору(ЗначенияКолонок, "БанковскиеРеквизиты");
	Если БанковскиеРеквизиты = Неопределено Тогда
		Возврат БанковскиеСчета;
	КонецЕсли;
	
	// Возможно загружается файл с банковскими реквизитами. Попробуем их разобрать.
	// Разбираем строки вида:
	//   Р/с: [НомерСчета], Банк: [Наименование банка], БИК: [БИК банка], К/с: [Корр. счет];
	//   Р/с:[НомерСчета],Банк:[Наименование банка],БИК:[БИК банка],К/с:[Корр. счет],Открыт,Комментарий:;
	// , разделенные ";"
	// На выходе должны получить массив структур НовыйСтруктураБанковскогоСчета().
	
	// Строки без разделительного ":" не разбираем.
	Если СтрНайти(БанковскиеРеквизиты, ":") = 0 Тогда
		Возврат БанковскиеСчета;
	КонецЕсли;
	
	ИдентификаторыНомераСчета = СтрРазделить(НРег(СтрСоединить(ПодходящиеЗаголовкиРасчетногоСчета(), ",")), ",");
	ИдентификаторыБИКБанка = СтрРазделить(НРег(СтрСоединить(ПодходящиеЗаголовкиБИКБанка(), ",")), ",");
	
	МассивОписанийСчетов = СтрРазделить(БанковскиеРеквизиты, ";");
	Для Каждого ОписаниеСчета Из МассивОписанийСчетов Цикл
		
		БанковскийСчет = НовыйСтруктураБанковскогоСчета();
		
		ПоляСчета = СтрРазделить(ОписаниеСчета, ",");
		Для Каждого ОписаниеПоля Из ПоляСчета Цикл
			
			ПозицияДвоеточия = СтрНайти(ОписаниеПоля, ":");
			Если ПозицияДвоеточия = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Ключ = СокрЛП(Лев(ОписаниеПоля, ПозицияДвоеточия - 1));
			Значение = СокрЛП(Сред(ОписаниеПоля, ПозицияДвоеточия + 1));
			
			Если ИдентификаторыНомераСчета.Найти(НРег(Ключ)) <> Неопределено Тогда
				БанковскийСчет.НомерСчета = Значение;
			КонецЕсли;
			
			Если ИдентификаторыБИКБанка.Найти(НРег(Ключ)) <> Неопределено Тогда
				БанковскийСчет.БИК = Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
			БанковскиеСчета.Добавить(БанковскийСчет);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БанковскиеСчета;
	
КонецФункции

Функция НовыйСтруктураБанковскогоСчета()
	
	СтруктураБанковскогоСчета = Новый Структура;
	СтруктураБанковскогоСчета.Вставить("НомерСчета");
	СтруктураБанковскогоСчета.Вставить("БИК");
	СтруктураБанковскогоСчета.Вставить("Валютный");
	СтруктураБанковскогоСчета.Вставить("ВалютаДенежныхСредств");
	
	Возврат СтруктураБанковскогоСчета;
	
КонецФункции

Функция ВидКонтрагентаПоНомеруБанковскогоСчета(ДанныеЗаполненияБанковскихСчетов)
	
	ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Если ТипЗнч(ДанныеЗаполненияБанковскихСчетов) <> Тип("Массив") Тогда
		Возврат ВидКонтрагента;
	КонецЕсли;
	
	Для Каждого ДанныеБанковскогоСчета Из ДанныеЗаполненияБанковскихСчетов Цикл
		
		Если Не БанковскиеПравила.СтрокаСоответствуетФорматуБанковскогоСчета(ДанныеБанковскогоСчета.НомерСчета) Тогда
			НомерСчетаСоответствуетПравиламЦБР = Ложь;
		ИначеЕсли ЗначениеЗаполнено(ДанныеБанковскогоСчета.БИК) Тогда
			Если БанковскиеПравила.ЭтоРублевыйСчет(ДанныеБанковскогоСчета.НомерСчета) Тогда
				// Ограничиваемся простой проверкой, так как для проверки по контрольному ключу нужен БИК, а он не всегда надежен
				НомерСчетаСоответствуетПравиламЦБР = Истина;
			Иначе
				НомерСчетаСоответствуетПравиламЦБР = БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета(ДанныеБанковскогоСчета.НомерСчета, ДанныеБанковскогоСчета.БИК, Истина);
			КонецЕсли;
		Иначе
			НомерСчетаСоответствуетПравиламЦБР = Истина;
		КонецЕсли;
		
		Если Не НомерСчетаСоответствуетПравиламЦБР Тогда
			Продолжить;
		КонецЕсли;
		
		БалансовыйСчет = БанковскиеПравила.БалансовыйСчет(ДанныеБанковскогоСчета.НомерСчета);
		Если БанковскиеПравила.ЭтоСчетИндивидуальногоПредпринимателя(БалансовыйСчет)
			Или БанковскиеПравила.ЭтоСчетДепозитовФизическихЛиц(БалансовыйСчет) Тогда
			ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидКонтрагента;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеАдреса

Функция ПривестиАдресКФорматуБСП(ИсходныйАдрес, ОжидаемыйВидКонтактнойИнформации)
	
	АдресВФорматеБСП = "";
	
	// Раскладываем исходный адрес на слова и пытаемся в них распознать наименование и сокращение адресного элемента.
	// Если нашли наименование и сокращение, то у сокращений убираем точки и ставим их после наименования.
	НаименованиеОсновнаяСтрана = СокрЛП(РаботаСАдресамиКлиентСервер.ОсновнаяСтрана().Наименование);
	ДанныеАнализа = ЧастиАдресаТаблицей(ИсходныйАдрес);
	Если ДанныеАнализа.Количество() = 0 Тогда
		Возврат АдресВФорматеБСП;
	КонецЕсли;
	
	ОпределитьСтрануИИндекс(ДанныеАнализа);
	СтрокаСтраны = ДанныеАнализа.Найти(-2, "Уровень");
	Если СтрокаСтраны = Неопределено Тогда
		Страна = НаименованиеОсновнаяСтрана;
	Иначе
		Страна = СокрЛП(ВРег(СтрокаСтраны.Значение));
	КонецЕсли;
	
	// По уровням адресных сведений разбираются только российские адреса.
	// Остальные адреса считаем введенными в свободной форме.
	Если Страна = НаименованиеОсновнаяСтрана Тогда
		УстановитьПорядокНаименованийИСокращений(ДанныеАнализа);
		ПреобразованныйАдрес = СтрСоединить(ДанныеАнализа.ВыгрузитьКолонку("Значение"), ",");
	Иначе
		ПреобразованныйАдрес = ИсходныйАдрес;
	КонецЕсли;
	
	АдресВJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(ПреобразованныйАдрес, ОжидаемыйВидКонтактнойИнформации);
	СтруктураАдреса = УправлениеКонтактнойИнформациейСлужебный.СтрокуJSONВСтруктуру(АдресВJSON);
	
	// Если удалось разобрать адрес полностью на уровни, то сформируем новое представление адреса.
	Если Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(СтруктураАдреса.addressType) Тогда
		СтруктураВидаКонтактнойИнформации = Новый Структура;
		СтруктураВидаКонтактнойИнформации.Вставить("ФорматАдреса", "ФИАС"); // Всегда используем разрезы ФИАС.
		СтруктураВидаКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОжидаемыйВидКонтактнойИнформации, "ВключатьСтрануВПредставление"));
		
		СтруктураАдреса.value = ""; // Сначала нужно очистить старое представление
		
		// Сформируем новое представление адреса
		ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтруктураАдреса, СтруктураВидаКонтактнойИнформации);
		СтруктураАдреса.value = ПредставлениеАдреса;
		
		АдресВФорматеБСП = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(СтруктураАдреса);
	Иначе
		АдресВФорматеБСП = АдресВJSON;
	КонецЕсли;
	
	Возврат АдресВФорматеБСП;
	
КонецФункции

Процедура ОпределитьСтрануИИндекс(ДанныеАдреса)
	
	Классификатор = РаботаСАдресами.ТаблицаКлассификатора();
	Для каждого ЭлементАдреса Из ДанныеАдреса Цикл
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		Индекс = ОписаниеТипаЧисло.ПривестиЗначение(ЭлементАдреса.Наименование);
		Если Индекс >= 100000 И Индекс < 1000000 Тогда
			ЭлементАдреса.Уровень = -1;
		Иначе
			Если Классификатор.Найти(ВРег(ЭлементАдреса.Наименование), "Наименование") <> Неопределено Тогда
				ЭлементАдреса.Уровень = -2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЧастиАдресаТаблицей(Знач Текст)
	
	ТипСтрока = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(128));
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Уровень", ТипЧисло);
	Колонки.Добавить("Позиция", ТипЧисло);
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Наименование", ТипСтрока);
	Колонки.Добавить("Сокращение", ТипСтрока);
	Колонки.Добавить("Начало", ТипЧисло);
	Колонки.Добавить("Длина", ТипЧисло);
	Колонки.Добавить("Идентификатор", ТипСтрока);
	
	Номер = 1;
	Для Каждого Часть Из СловаТекстаТаблицей(Текст, "," + Символы.ПС) Цикл
		Значение = СокрЛП(Часть.Значение);
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка = Результат.Добавить();
		
		Строка.Уровень = 0;
		Строка.Позиция  = Номер;
		Номер = Номер + 1;
		
		Строка.Начало = Часть.Начало;
		Строка.Длина  = Часть.Длина;
		
		Позиция = СтрДлина(Значение);
		Пока Позиция > 0 Цикл
			Символ = Сред(Значение, Позиция, 1);
			Если ПустаяСтрока(Символ) Тогда
				Строка.Наименование = СокрЛП(Лев(Значение, Позиция-1));
				Прервать;
			КонецЕсли;
			Строка.Сокращение = Символ + Строка.Сокращение;
			Позиция = Позиция - 1;
		КонецЦикла;
		
		Если ПустаяСтрока(Строка.Наименование) Тогда
			Строка.Наименование = СокрЛП(Строка.Сокращение);
			Строка.Сокращение   = "";
		КонецЕсли;
		Строка.Значение = СокрЛП(Строка.Наименование + " " + Строка.Сокращение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СловаТекстаТаблицей(Знач Текст, Знач Разделители = Неопределено)
	
	// Удаление из текста спец. символов "точек", "номеров".
	Текст = СтрЗаменить(Текст, "№", "");
	
	НачалоСлова = 0;
	Состояние   = 0;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло  = Новый ОписаниеТипов("Число");
	
	Результат = Новый ТаблицаЗначений;
	Колонки = Результат.Колонки;
	Колонки.Добавить("Значение", ТипСтрока);
	Колонки.Добавить("Начало",   ТипЧисло);
	Колонки.Добавить("Длина",    ТипЧисло);
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), СтрНайти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Строка = Результат.Добавить();
			Строка.Начало = НачалоСлова;
			Строка.Длина  = Позиция-НачалоСлова;
			Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина);
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Строка = Результат.Добавить();
		Строка.Начало = НачалоСлова;
		Строка.Длина  = Позиция-НачалоСлова;
		Строка.Значение = Сред(Текст, Строка.Начало, Строка.Длина)
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УстановитьПорядокНаименованийИСокращений(ЧастиАдреса)
	
	ОбработатьОбщепринятыеСокращения(ЧастиАдреса);
	
	АдресныеСокращенияСоответствие = АдресныйКлассификатор.СокращенияАдресныхОбъектов(Новый Массив);
	АдресныеСокращенияПоиск = Новый Массив;
	Для Каждого Элемент Из АдресныеСокращенияСоответствие Цикл
		АдресныеСокращенияПоиск.Добавить(НРег(Элемент.Значение));
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ЧастиАдреса Цикл
		
		// Проверим, является ли наименование адресным сокращением.
		НаименованиеБезПробелов = СокрЛП(СтрокаТаблицы.Наименование);
		НаименованиеБезТочки = ?(СтрЗаканчиваетсяНа(НаименованиеБезПробелов, "."),
			Лев(НаименованиеБезПробелов, СтрДлина(НаименованиеБезПробелов) - 1), НаименованиеБезПробелов);
		ИндексСокращения = АдресныеСокращенияПоиск.Найти(НаименованиеБезТочки);
		Если ИндексСокращения <> Неопределено Тогда
			// Если сокращение начинается с числа - скорее всего это дом/корпус и пр.
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(СтрокаТаблицы.Сокращение, 1)) Тогда
				СтрокаТаблицы.Наименование = АдресныеСокращенияПоиск[ИндексСокращения];
				СтрокаТаблицы.Значение = СтрокаТаблицы.Наименование + " " + СтрокаТаблицы.Сокращение;
			Иначе
				СтрокаТаблицы.Наименование = СтрокаТаблицы.Сокращение;
				СтрокаТаблицы.Сокращение = АдресныеСокращенияПоиск[ИндексСокращения];
				СтрокаТаблицы.Значение = СтрокаТаблицы.Наименование + " " + СтрокаТаблицы.Сокращение;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Проверим сокращение без разделителей.
		СокращениеБезПробелов = СокрЛП(СтрокаТаблицы.Сокращение);
		СокращениеБезТочки = ?(СтрЗаканчиваетсяНа(СокращениеБезПробелов, "."),
			Лев(СокращениеБезПробелов, СтрДлина(СокращениеБезПробелов) - 1), СокращениеБезПробелов);
		ИндексСокращения = АдресныеСокращенияПоиск.Найти(СокращениеБезТочки);
		Если ИндексСокращения <> Неопределено Тогда
			СтрокаТаблицы.Сокращение = АдресныеСокращенияПоиск[ИндексСокращения];
			СтрокаТаблицы.Значение = СтрокаТаблицы.Наименование + " " + СтрокаТаблицы.Сокращение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОбщепринятыеСокращения(ДоступныеУровни)
	
	Фильтр = Новый Структура("Уровень", 0);
	НераспознанныеСтроки = ДоступныеУровни.НайтиСтроки(Фильтр);
	Для каждого НераспознаннаяЧастьАдреса Из НераспознанныеСтроки Цикл
		Если (ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "МОСКВА" 
			ИЛИ ВРЕГ(НераспознаннаяЧастьАдреса.Наименование) = "САНКТ-ПЕТЕРБУРГ")
			И ПустаяСтрока(НераспознаннаяЧастьАдреса.Сокращение) Тогда
				НераспознаннаяЧастьАдреса.Сокращение = "г";
				НераспознаннаяЧастьАдреса.Значение = НераспознаннаяЧастьАдреса.Наименование + " " + НераспознаннаяЧастьАдреса.Сокращение;
		КонецЕсли;
		Если (ВРЕГ(НераспознаннаяЧастьАдреса.Сокращение) = "МОСКВА" 
			ИЛИ ВРЕГ(НераспознаннаяЧастьАдреса.Сокращение) = "САНКТ-ПЕТЕРБУРГ") Тогда
				НераспознаннаяЧастьАдреса.Наименование = НераспознаннаяЧастьАдреса.Сокращение;
				НераспознаннаяЧастьАдреса.Сокращение = "г";
				НераспознаннаяЧастьАдреса.Значение = НераспознаннаяЧастьАдреса.Наименование + " " + НераспознаннаяЧастьАдреса.Сокращение;
		КонецЕсли;
		Если СтрНачинаетсяС(ВРЕГ(НераспознаннаяЧастьАдреса.Наименование), "КОРП") Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Корпус";
			НераспознаннаяЧастьАдреса.Значение = НераспознаннаяЧастьАдреса.Наименование + " " + НераспознаннаяЧастьАдреса.Сокращение;
		КонецЕсли;
		Если СтрНачинаетсяС(ВРЕГ(НераспознаннаяЧастьАдреса.Наименование), "КВ") Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Квартира";
			НераспознаннаяЧастьАдреса.Значение = НераспознаннаяЧастьАдреса.Наименование + " " + НераспознаннаяЧастьАдреса.Сокращение;
		КонецЕсли;
		Если СтрНачинаетсяС(ВРЕГ(НераспознаннаяЧастьАдреса.Наименование), "Д")
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(НераспознаннаяЧастьАдреса.Сокращение)) Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Дом";
			НераспознаннаяЧастьАдреса.Значение = НераспознаннаяЧастьАдреса.Наименование + " " + НераспознаннаяЧастьАдреса.Сокращение;
		КонецЕсли;
		Если СтрНачинаетсяС(ВРЕГ(НераспознаннаяЧастьАдреса.Наименование), "ЛИТЕР") Тогда
			НераспознаннаяЧастьАдреса.Наименование = "Литера";
			НераспознаннаяЧастьАдреса.Значение = НераспознаннаяЧастьАдреса.Наименование + " " + НераспознаннаяЧастьАдреса.Сокращение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли