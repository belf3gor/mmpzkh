#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
//
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. 
// После отладки рекомендуется внести соответствующие исправления обработчиков
// в базе «Конвертация данных 2.0» и заново сформировать файл правил.
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем Параметры;
Перем Правила;
Перем Алгоритмы;
Перем Запросы;
Перем ТаблицаПравилВыгрузки;
Перем ТаблицаНастройкиПараметров;
Перем УзелДляОбмена; // только для on-line обмена
Перем ОбщиеПроцедурыФункции;
Перем ДатаНачала;
Перем ДатаОкончания;
Перем ДатаВыгрузкиДанных; // только для on-line обмена
Перем КомментарийПриВыгрузкеДанных;
Перем КомментарийПриЗагрузкеДанных;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")
Перем одТипТип;			  		  // Тип("Тип")
Перем одТипСоответствие;		  // Тип("Соответствие")

Перем одТипУзлаXML_КонецЭлемента;
Перем одТипУзлаXML_НачалоЭлемента;
Перем одТипУзлаXML_Текст;

Перем ЗначениеПустаяДата;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)

Процедура Конвертация_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован,  
											ИмяТипаОбъекта, ОбъектНайден) Экспорт
	Если ИмяТипаОбъекта = "Справочник" ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
			
			Объект.УстановитьНовыйКод();
			
		КонецЕсли;
		
		РеквизитОрганизация = Объект.Метаданные().Реквизиты.Найти("Организация");
		Если РеквизитОрганизация <> Неопределено
			И (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
			
			Если (НЕ Объект.ЭтоГруппа) ИЛИ (РеквизитОрганизация.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
				Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяТипаОбъекта = "Документ" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			Объект.УстановитьНовыйНомер();
		КонецЕсли;
		
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", Объект.Метаданные()) 
			И (НЕ ЗначениеЗаполнено(Объект.Организация)) Тогда
			Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
КонецЕсли

КонецПроцедуры

Процедура Конвертация_ПередЗагрузкойДанных(ФайлОбмена, Отказ) Экспорт

	Если Параметры.Свойство("КомиссияПоСтрокамТабличнойЧасти") Тогда
		Параметры.КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
	Иначе
		Параметры.Вставить("КомиссияПоСтрокамТабличнойЧасти", Новый Соответствие);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ

Процедура ПКО_ПослеЗагрузки_АвансовыйОтчет(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, ИмяТипаОбъекта, 
											ОбъектНайден, НаборЗаписей) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.ОплатаПоставщикам Цикл
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента);
		
		СтрокаТабличнойЧасти.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		
		Если СтрокаТабличнойЧасти.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
			СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		Иначе
			ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.ДоговорКонтрагента, "ВидДоговора");
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку Тогда
				
				СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
				
			Иначе
				СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
			СтрокаТабличнойЧасти.Сделка = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары") + Объект.ОплатаПоставщикам.Итог("Сумма") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Прочее");
	
КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ВозвратТоваровОтПокупателя(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если НЕ Параметры.Свойство("КомиссияПоСтрокамТабличнойЧасти") Тогда
		
		Параметры.Вставить("КомиссияПоСтрокамТабличнойЧасти", Новый Соответствие);
		
	КонецЕсли;
	
	КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
	
	Пока ФайлОбмена.Прочитать() Цикл
			
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		ТипУзла = ФайлОбмена.ТипУзла;
		
		Если ИмяУзла = "Строка" Тогда
			
			КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, "НомерСтроки"), одЗначениеЭлемента(ФайлОбмена, Тип("Булево")));
			
		ИначеЕсли (ИмяУзла = "КомиссияПоСтрокамТабличнойЧасти") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Объект.Ссылка, КомиссияПоСтрокамТабличнойЧасти);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВозвратТоваровОтПокупателя(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);					   
										   
	КомиссияПоСтрокамТабличнойЧасти = Параметры.КомиссияПоСтрокамТабличнойЧасти[Ссылка];
	
	Если КомиссияПоСтрокамТабличнойЧасти<> Неопределено Тогда
		Для каждого Значение из КомиссияПоСтрокамТабличнойЧасти Цикл
			СтрокаТЧ = Объект.Товары.Получить(Значение.Ключ - 1);
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.Склад);

			Если Значение.Значение Тогда
				Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
					СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СчетаУчета.СчетПередачи) Тогда
					СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
	Объект.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
	Объект.СчетУчетаРасчетовПоТаре           = СчетаУчета.СчетУчетаТарыПокупателя;
	
	Объект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары");

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ВозвратТоваровПоставщику(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	ЭтоКомиссия = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ЭтоКомиссия = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоПретензиям     = СчетаУчета.СчетРасчетовПоПретензиям;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);			
		
	Для каждого СтрокаТЧ из Объект.Товары Цикл
		Если ЭтоКомиссия Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			СтрокаТЧ.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
			СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	    КонецЕсли;
	
	КонецЦикла;
	
	Документы.ВозвратТоваровПоставщику.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
		
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары");
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Доверенность(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ИнвентаризацияТоваровНаСкладе(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);		
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_КорректировкаДолга(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Объект.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("Сумма");
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("Сумма");
	Иначе
		Объект.СуммаДтЗадолженности = Объект.ДебиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
		Объект.СуммаКтЗадолженности = Объект.КредиторскаяЗадолженность.Итог("СуммаВзаиморасчетов");
	КонецЕсли;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОприходованиеТоваров(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт
										   
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);											   					   
	
	// Корректируем количество с учетом коэффициента
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ОтчетОРозничныхПродажах(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если НЕ Параметры.Свойство("КомиссияПоСтрокамТабличнойЧасти") Тогда
		
		Параметры.Вставить("КомиссияПоСтрокамТабличнойЧасти", Новый Соответствие);
		
	КонецЕсли;
	
	КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
	
	Пока ФайлОбмена.Прочитать() Цикл
			
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		ТипУзла = ФайлОбмена.ТипУзла;
		
		Если ИмяУзла = "Строка" Тогда
			
			КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, "НомерСтроки"), одЗначениеЭлемента(ФайлОбмена, Тип("Булево")));
			
		ИначеЕсли (ИмяУзла = "КомиссияПоСтрокамТабличнойЧасти") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
					
			Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Объект.Ссылка, КомиссияПоСтрокамТабличнойЧасти);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОтчетОРозничныхПродажах(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
													ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт
	Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, ДеятельностьНаПатенте, Склад, Реализация, АТТПоПродажнойСтоимости");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Реализация = Истина;
	
	ДанныеОбъекта.АТТПоПродажнойСтоимости = Истина;
	
	Для каждого СтрокаТЧ из Объект.Товары Цикл
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.Склад);
		Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТЧ, "Товары", СчетаУчета);
	КонецЦикла;
	
	КомиссияПоСтрокамТабличнойЧасти = Параметры.КомиссияПоСтрокамТабличнойЧасти[Ссылка];
	
	Если КомиссияПоСтрокамТабличнойЧасти <> Неопределено Тогда
		Для каждого Значение из КомиссияПоСтрокамТабличнойЧасти Цикл
			СтрокаТЧ = Объект.Товары.Получить(Значение.Ключ - 1);
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.Склад);
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТЧ, "Товары", СчетаУчета);
			Если Значение.Значение Тогда
				Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
					СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары");

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОтчетКомиссионераОПродажах(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
	ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаРасчетовСКонтрагентом          = СчетаУчета.СчетРасчетовПокупателя;
	Если Объект.УдержатьВознаграждение Тогда
		Объект.СчетУчетаРасчетовПоАвансамПолученным = СчетаУчета.СчетРасчетовСКомитентом;
	Иначе
		Объект.СчетУчетаРасчетовПоАвансамПолученным = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	Объект.СчетУчетаРасчетовЗаПосредническиеУслуги = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансамВыданным      = СчетаУчета.СчетАвансов;
	Объект.СчетУчетаНДС                            = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
	Объект.СчетУчетаЗатрат                         = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
	
	Если УчетнаяПолитика.СистемаНалогообложения(Объект.Организация, Объект.Дата) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
		
		Объект.СчетУчетаРасчетовСКонтрагентомУСН          = СчетаУчета.СчетРасчетовПокупателяУСН;
		Объект.СчетУчетаРасчетовПоАвансамПолученнымУСН    = СчетаУчета.СчетАвансовПокупателяУСН;
		Объект.СчетУчетаРасчетовЗаПосредническиеУслугиУСН = СчетаУчета.СчетРасчетовУСН;
		Объект.СчетУчетаРасчетовПоАвансамВыданнымУСН      = СчетаУчета.СчетАвансовУСН;
		
	КонецЕсли;
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент <> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаДокумента      = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары");
	Объект.СуммаВознаграждения = Объект.Товары.Итог("СуммаВознаграждения");
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОтчетКомитентуОПродажах(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Если Объект.УдержатьВознаграждение Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетРасчетовСКомитентом;
	Иначе
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
			
	ДанныеОбъекта = Новый Структура("Дата, Организация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.УслугаПоВознаграждению, ДанныеОбъекта);

	Если СведенияОНоменклатуре<> Неопределено Тогда
			
		СчетаПоУслуге = СведенияОНоменклатуре.СчетаУчета;
		Объект.СчетУчетаНДСПоРеализации	= СчетаПоУслуге.СчетУчетаНДСПродажи;
		Объект.СчетДоходов				= СчетаПоУслуге.СчетДоходов;
					
	КонецЕсли;
	
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары");
	Объект.СуммаВознаграждения = Объект.Товары.Итог("СуммаВознаграждения")+?(Объект.СуммаВключаетНДС,0,Объект.Товары.Итог("СуммаНДСВознаграждения"))

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПеремещениеТоваров(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	УчетВПродажныхЦенах = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата)
		= Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	ТипСкладаОтправителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладОтправитель, "ТипСклада");
	ТипСкладаПолучателя  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СкладПолучатель, "ТипСклада");
	
	Если УчетВПродажныхЦенах
		И (ТипСкладаОтправителя <> Перечисления.ТипыСкладов.ОптовыйСклад
		ИЛИ ТипСкладаПолучателя <> Перечисления.ТипыСкладов.ОптовыйСклад) Тогда
		
		Для каждого СтрокаТЧ Из Объект.Товары Цикл
			
			Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
				СтрокаТЧ.СчетУчета, ТипСкладаОтправителя);
			Документы.ПеремещениеТоваров.ЗаполнитьСчетУчетаТовараРозницаВПродажныхЦенах(
				СтрокаТЧ.НовыйСчетУчета, ТипСкладаПолучателя);
			
		КонецЦикла;
		
	КонецЕсли;
	  
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);			
	//
	//								   
	//									   
	//Для каждого СтрокаТЧ из Объект.Товары Цикл
	//	
	//	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.СкладОтправитель);
	//	НовыеСчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.СкладПолучатель);
	//	Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТЧ, "Товары", СчетаУчета, НовыеСчетаУчета);
	//	
	//КонецЦикла;
	//
	//Для каждого СтрокаТЧ из Объект.ТоварыНаКомиссии Цикл
	//	
	//	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.СкладОтправитель);
	//	НовыеСчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.СкладПолучатель);
	//	Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТЧ, "ТоварыНаКомиссии", СчетаУчета, НовыеСчетаУчета);
	//	
	//КонецЦикла;
	//
	//Для каждого СтрокаТЧ из Объект.ВозвратнаяТара Цикл
	//	
	//	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.СкладОтправитель);
	//	НовыеСчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура, Объект.СкладПолучатель);
	//	Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТЧ, "ВозвратнаяТара", СчетаУчета, НовыеСчетаУчета);
	//	
	//КонецЦикла;
	//
		
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПереоценкаТоваровВРознице(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Для каждого Строка Из Объект.Товары Цикл
			
		Если Строка.СуммаПереоценки = 0 Тогда
				Строка.СуммаПереоценки = Строка.Количество * (Строка.ЦенаВРознице - Строка.ЦенаВРозницеСтарая);
		КонецЕсли;
					
	КонецЦикла;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПриходныйКассовыйОрдер(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Иначе
		Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	КонецЕсли;	
	
	МассивПустыхСтрок = Новый Массив;
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам)Тогда
	
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика тогда
	
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
	
			Иначе
	
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
	
			КонецЕсли;
	
			Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
				МассивПустыхСтрок.Добавить(СтрокаПлатеж);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
		 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПоступлениеДопРасходов(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);	
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
	Объект.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Объект.Сумма, Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Объект.СтавкаНДС));
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПоступлениеТоваровУслугПрочее(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПоступлениеТоваровУслуг(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ЭтоКомиссия = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ЭтоКомиссия = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого СтрокаТЧ из Объект.Товары Цикл
		Если ЭтоКомиссия Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			СтрокаТЧ.СчетРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
			СтрокаТЧ.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	    КонецЕсли;
	КонецЦикла;
		
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПоступлениеТоваровУслугРозница(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
	
	//ЭтоКомиссия = Ложь;
	//Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	//	Если Объект.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	//		ЭтоКомиссия = Истина;
	//	КонецЕсли;
	//КонецЕсли;	
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_РеализацияТоваровУслуг(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если НЕ Параметры.Свойство("КомиссияПоСтрокамТабличнойЧасти") Тогда
		
		Параметры.Вставить("КомиссияПоСтрокамТабличнойЧасти", Новый Соответствие);
		
	КонецЕсли;
	
	КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
	
	Пока ФайлОбмена.Прочитать() Цикл
			
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		ТипУзла = ФайлОбмена.ТипУзла;
		
		Если ИмяУзла = "Строка" Тогда
			
			КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, "НомерСтроки"), одЗначениеЭлемента(ФайлОбмена, Тип("Булево")));
			
		ИначеЕсли (ИмяУзла = "КомиссияПоСтрокамТабличнойЧасти") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Объект.Ссылка, КомиссияПоСтрокамТабличнойЧасти);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_РеализацияТоваровУслуг(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт
			   
	ЭтоКомиссия = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ЭтоКомиссия = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
	
	КомиссияПоСтрокамТабличнойЧасти = Параметры.КомиссияПоСтрокамТабличнойЧасти[Ссылка];
	
	Если КомиссияПоСтрокамТабличнойЧасти<> Неопределено Тогда
		Для каждого Значение из КомиссияПоСтрокамТабличнойЧасти Цикл
			СтрокаТЧ = Объект.Товары.Получить(Значение.Ключ - 1);
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура);
			Если Значение.Значение Тогда
				Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
					СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СчетаУчета.СчетПередачи) Тогда
					СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Объект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Объект.СчетУчетаРасчетовПоТаре        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
	КонецЕсли;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
	
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
		
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Услуги");
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_РеализацияТоваровУслугПрочее(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
		
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
		
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Услуги");
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
									   
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_РеализацияРозница(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если НЕ Параметры.Свойство("КомиссияПоСтрокамТабличнойЧасти") Тогда
		
		Параметры.Вставить("КомиссияПоСтрокамТабличнойЧасти", Новый Соответствие);
		
	КонецЕсли;
	
	КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
	
	Пока ФайлОбмена.Прочитать() Цикл
			
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		ТипУзла = ФайлОбмена.ТипУзла;
		
		Если ИмяУзла = "Строка" Тогда
			
			КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, "НомерСтроки"), одЗначениеЭлемента(ФайлОбмена, Тип("Булево")));
			
		ИначеЕсли (ИмяУзла = "КомиссияПоСтрокамТабличнойЧасти") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Объект.Ссылка, КомиссияПоСтрокамТабличнойЧасти);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_РеализацияРозница(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	ЭтоКомиссия = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ЭтоКомиссия = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
	
	КомиссияПоСтрокамТабличнойЧасти = Параметры.КомиссияПоСтрокамТабличнойЧасти[Ссылка];
	
	Если КомиссияПоСтрокамТабличнойЧасти<> Неопределено Тогда
		Для каждого Значение из КомиссияПоСтрокамТабличнойЧасти Цикл
			СтрокаТЧ = Объект.Товары.Получить(Значение.Ключ - 1);
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура);
			Если Значение.Значение Тогда
				Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
					СтрокаТЧ.СчетУчета = СчетаУчета.СчетУчета;
				КонецЕсли;
			
				Если ЗначениеЗаполнено(СчетаУчета.СчетПередачи) Тогда
					СтрокаТЧ.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Объект.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Объект.СчетУчетаРасчетовПоТаре        = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
	КонецЕсли;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТарыПокупателя;
			
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
		
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Товары") + УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект, "Услуги");
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	Если Объект.Склад.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад Тогда
		Сообщить("Загружен документ розничной реализации с оптового склада! Необходимо передать товары в розницу вручную!", СтатусСообщения.Важное);
		Сообщить("" + Объект.Ссылка);
	КонецЕсли;

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_РасходныйКассовыйОрдер(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатежа = Объект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатежа.СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
	Объект.НомерЧекаККМ = 0;
	
	Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Иначе
		Объект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	КонецЕсли;	
	
	МассивПустыхСтрок = Новый Массив;
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		
		Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам)Тогда
	
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	
			Если Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю тогда
	
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
	
			Иначе
	
				Если СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	
				ИначеЕсли СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	
				Иначе
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	
				КонецЕсли;
	
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
	
			КонецЕсли;
	
		КонецЕсли;
		
		Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
			МассивПустыхСтрок.Добавить(СтрокаПлатеж);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
		 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_СписаниеТоваров(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если НЕ Параметры.Свойство("КомиссияПоСтрокамТабличнойЧасти") Тогда
		
		Параметры.Вставить("КомиссияПоСтрокамТабличнойЧасти", Новый Соответствие);
		
	КонецЕсли;
	
	КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
	
	Пока ФайлОбмена.Прочитать() Цикл
			
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		ТипУзла = ФайлОбмена.ТипУзла;
		
		Если ИмяУзла = "Строка" Тогда
			
			КомиссияПоСтрокамТабличнойЧасти.Вставить(одАтрибут(ФайлОбмена, одТипЧисло, "НомерСтроки"), одЗначениеЭлемента(ФайлОбмена, Тип("Булево")));
			
		ИначеЕсли (ИмяУзла = "КомиссияПоСтрокамТабличнойЧасти") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти = Новый Соответствие;
			
			Параметры.КомиссияПоСтрокамТабличнойЧасти.Вставить(Объект.Ссылка, КомиссияПоСтрокамТабличнойЧасти);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СписаниеТоваров(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
		
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
		
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПлатежноеПоручениеВходящее(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли;	
	
	МассивПустыхСтрок = Новый Массив;
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда
	
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
	
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика тогда
	
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
	
			Иначе
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
	
			КонецЕсли;
			
			Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
				МассивПустыхСтрок.Добавить(СтрокаПлатеж);
			КонецЕсли;
	
		КонецЕсли;
	КонецЦикла;
	
	Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
		 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПлатежныйОрдерСписаниеДенежныхСредств(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		Объект.СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли;	
	
	МассивПустыхСтрок = Новый Массив;
	
	Для каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ (Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) Тогда
	
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, СтрокаПлатеж.ДоговорКонтрагента);
			Если СтрокаПлатеж.СуммаПлатежа = 0  Тогда
				МассивПустыхСтрок.Добавить(СтрокаПлатеж);
			КонецЕсли;
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю тогда
	
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансовПокупателя;
	
			Иначе
	
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетов;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам        = СчетаУчета.СчетАвансов;
	
			КонецЕсли;
			
			Если СтрокаПлатеж.КурсВзаиморасчетов = 0 Тогда
				СтрокаПлатеж.КурсВзаиморасчетов =1;
			КонецЕсли;
	
		КонецЕсли;
	КонецЦикла;
	
	Объект.СчетУчетаРасчетовСКонтрагентом    = СчетаУчета.СчетРасчетовПокупателя;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Для каждого ПустойПлатеж Из МассивПустыхСтрок Цикл
		 Объект.РасшифровкаПлатежа.Удалить(ПустойПлатеж);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СчетФактураВыданный(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Объект.КодВидаОперации = "" Тогда
		Объект.КодВидаОперации = "01";
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		НеНашлиДокументОснование = Истина;
		Для каждого ДокументОснование из Объект.ДокументыОснования Цикл
			Если ДокументОснование.ДокументОснование = Объект.ДокументОснование Тогда
				НеНашлиДокументОснование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
		Если НеНашлиДокументОснование Тогда
			НовыйДокументОснование = Объект.ДокументыОснования.Добавить();
			НовыйДокументОснование.ДокументОснование = Объект.ДокументОснование;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			Объект.Контрагент = Неопределено;
			Объект.ДоговорКонтрагента = Неопределено;
			Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс) И (Объект.Авансы.Количество() = 0) Тогда
			Объект.Авансы.Добавить();
			Объект.Авансы[0].СтавкаНДС = Объект.СтавкаНДС;
			Объект.Авансы[0].СуммаНДС = Объект.СуммаНДС;
			Объект.Авансы[0].Сумма = Объект.Сумма;
			Объект.СуммаДокумента = Объект.Сумма;
			
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СчетФактураВыданныйИспр(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		НеНашлиДокументОснование = Истина;
		Для каждого ДокументОснование из Объект.ДокументыОснования Цикл
			Если ДокументОснование.ДокументОснование = Объект.ДокументОснование Тогда
				НеНашлиДокументОснование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
		Если НеНашлиДокументОснование Тогда
			НовыйДокументОснование = Объект.ДокументыОснования.Добавить();
			НовыйДокументОснование.ДокументОснование = Объект.ДокументОснование;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			Объект.Контрагент = Неопределено;
			Объект.ДоговорКонтрагента = Неопределено;
			Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс) И (Объект.Авансы.Количество() = 0) Тогда
			Объект.Авансы.Добавить();
			Объект.Авансы[0].СтавкаНДС = Объект.СтавкаНДС;
			Объект.Авансы[0].СуммаНДС = Объект.СуммаНДС;
			Объект.Авансы[0].Сумма = Объект.Сумма;
			Объект.СуммаДокумента = Объект.Сумма;
			
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_СчетФактураПолученный(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Если ОбъектНайден Тогда
		Объект.ДокументыОснования.Очистить();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СчетФактураПолученный(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Объект.КодВидаОперации = "" Тогда
		Объект.КодВидаОперации = "01";
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		НеНашлиДокументОснование = Истина;
		Для каждого ДокументОснование из Объект.ДокументыОснования Цикл
			Если ДокументОснование = Объект.ДокументОснование Тогда
				НеНашлиДокументОснование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НеНашлиДокументОснование Тогда
			НовыйДокументОснование = Объект.ДокументыОснования.Добавить();
			НовыйДокументОснование.ДокументОснование = Объект.ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс) И (Объект.Авансы.Количество() = 0) Тогда
			Объект.Авансы.Добавить();
			Объект.Авансы[0].СуммаНДС = Объект.СуммаНДС;
			Объект.Авансы[0].Сумма = Объект.Сумма;
			Объект.СуммаДокумента = Объект.Сумма;
	КонецЕсли;
	Если Не(Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс) Тогда	
		Объект.ОпределениеПараметровСчетаФактуры();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПоступлениеТоваровУслугИмпорт(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
	Иначе
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
	Объект.СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	
	ЭтоКомиссия = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ДоговорКонтрагента  = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ЭтоКомиссия = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);

	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Объект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(Объект);
	
	Объект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ГТДИмпорт(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.09");
	Объект.СчетУчетаРасчетовСКонтрагентомВал = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.29");
	
	ЭтоКомиссия = Ложь;
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ЭтоКомиссия = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого СтрокаТЧ из Объект.Товары Цикл
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, СтрокаТЧ.Номенклатура);
		Документы.ГТДИмпорт.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТЧ, "Товары", СчетаУчета);
	КонецЦикла;
	
	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПлатежноеПоручениеИсходящее(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СчетНаОплатуПокупателюПоЗаявке(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	// Корректируем количество с учетом коэффициента
	Для каждого СтрокаТоваров Из Объект.Товары Цикл
		СтрокаТоваров.Количество = СтрокаТоваров.Количество * СтрокаТоваров.Коэффициент;
		Если СтрокаТоваров.Коэффициент<> 0 Тогда 
			СтрокаТоваров.Цена       = СтрокаТоваров.Цена / СтрокаТоваров.Коэффициент;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_КомплектацияНоменклатуры(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация, Объект.Номенклатура, Объект.Склад);
		
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			Объект.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			Объект.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		СчетаУчета = СведенияОНоменклатуре;
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			Объект.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			Объект.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);

	Если Объект.Ответственный.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Контрагенты(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка() Тогда
		Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоГруппа Тогда
		Объект.ГоловнойКонтрагент = Объект.Ссылка;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Организации(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.РайонныйКоэффициент< 1 
	ИЛИ Объект.РайонныйКоэффициент> 3 Тогда
	Объект.РайонныйКоэффициент = 1;
	КонецЕсли;
	
	Объект.ГоловнаяОрганизация = Объект.Ссылка;
	
	Параметры.Вставить("Организация", Объект.Ссылка);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ И ГРУПП СВОЙСТВ ОБЪЕКТОВ


////////////////////////////////////////////////////////////////////////////////
//                             ВНИМАНИЕ 
//            ИЗМЕНЯТЬ КОД В ЭТОМ БЛОКЕ (НИЖЕ) ЗАПРЕЩЕНО!
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ОБЩИХ ПРОЦЕДУР И ФУНКЦИЙ


// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО                      - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "") Экспорт
						   
	Возврат ОбщиеПроцедурыФункции.ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО);
	
КонецФункции

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.СоздатьУзел(Имя); 

КонецФункции

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьУзел(УзелРодитель, Имя); 

КонецФункции

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Возврат ОбщиеПроцедурыФункции.КопироватьУзел(Узел); 
	
КонецФункции 

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина) Экспорт

	ОбщиеПроцедурыФункции.УстановитьОбменДаннымиЗагрузка(Объект, Значение);
	
КонецПроцедуры

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт
	
	ОбщиеПроцедурыФункции.УстановитьАтрибут(Узел, Имя, Значение);
	
КонецПроцедуры

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	ОбщиеПроцедурыФункции.ДобавитьПодчиненный(УзелРодитель, Узел);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	ОбщиеПроцедурыФункции.одЗаписатьЭлемент(Объект, Имя, Значение);
	
КонецПроцедуры

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одАтрибут(Объект, Тип, Имя);
		
КонецФункции
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "") Экспорт
	
	ОбщиеПроцедурыФункции.одПропустить(Объект, Имя);
	
КонецПроцедуры

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществляется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина) Экспорт

	Возврат ОбщиеПроцедурыФункции.одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству, ОбрезатьСтрокуСправа);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//	Значение - значение перечисления
//
// Возвращаемое значение:
//	Строка - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одИмяЗначенияПеречисления(Значение);
	
КонецФункции

// Определяет заполнено ли переданное значение
//
// Параметры:
//	Значение - значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//	Истина - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПустое(Значение, ЭтоNULL);
	
КонецФункции

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//	ЗначениеТипа - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одОписаниеТипа(ЗначениеТипа);
	
КонецФункции

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//	Тип - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьПустоеЗначение(Тип);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
	НайденныйОбъектПоУникальномуИдентификатору = Неопределено,
	ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено,
	РежимПоискаОсновногоОбъекта = Истина,
	СтрокаЗапросаПоискаПоУникальномуИдентификатору = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
		НайденныйОбъектПоУникальномуИдентификатору,
		ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска,
		РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//	Стр - Строка - значение свойства, по которому осуществляется поиск объекта;
//	Тип - тип искомого объекта;
//	Свойство - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//	Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство);
	
КонецФункции

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одТипЗначенияСтрокой(ЗначениеИлиТип);
	
КонецФункции

// Возвращает XML представление объекта ОписаниеТипов
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  ОписаниеТипов  - объект ОписаниеТипов, XML представление которого требуется получить
//
// Возвращаемое значение:
//  Строка - XML представление переданного объекта ОписаниеТипов
//
Функция одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//	Стр          - разбираемая строка;
//	Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//	Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ОтделитьРазделителем(Стр, Разделитель, Режим);
	
КонецФункции

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//	Стр            - Разбираемая строка
//	Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//	Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Возврат ОбщиеПроцедурыФункции.МассивИзСтроки(Стр, Разделитель);

КонецФункции

// Возвращает строку номера без символьных префиксов
// Например:
//	ПолучитьСтроковыйНомерБезПрефиксов("УТ0000001234") = "0000001234"
//
// Параметры:
//	Номер - Строка - номер, из которого необходимо вычислить результат функции
// 
// Возвращаемое значение:
//	Строка номера без символьных префиксов
//
Функция ПолучитьСтроковыйНомерБезПрефиксов(Номер) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьСтроковыйНомерБезПрефиксов(Номер);
	
КонецФункции

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть, Режим);
	
КонецФункции

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина,
	Префикс = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПривестиНомерКДлине(Стр, Длина,
		ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера, Префикс);
	
КонецФункции

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добавляемая к префиксу подстрока;
//  Длина        - требуемая результирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьКПрефиксу(Стр, Добавок, Длина, Режим); 

КонецФункции

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одДополнитьСтроку(Стр, Длина, Чем);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохраняемый в файл
//
Процедура ЗаписатьВФайл(Узел) Экспорт

	ОбщиеПроцедурыФункции.ЗаписатьВФайл(Узел);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="") Экспорт

	Возврат ОбщиеПроцедурыФункции.НайтиПравило(Объект, ИмяПравила);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
//

// Выполняет передачу строки данных для загрузки в базе-приемнике
//
// Параметры:
//	ИнформацияДляЗаписиВФайл - Строка (текст XML) - строка с данными
//	СтрокаОшибкиВБазеПриемнике - Строка - содержит описание ошибки при загрузке в базе-приемнике
// 
Процедура ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике);
	
КонецПроцедуры

// Выполняет запись имени, типа и значения параметра в файл сообщения обмена для передачи в базу-приемник
//
Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации);
	
КонецПроцедуры

// Передает все дополнительные параметры в приемник
//
Процедура ПередатьДополнительныеПараметрыВПриемник() Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьДополнительныеПараметрыВПриемник();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНСТРУКТОР И ДЕСТРУКТОР ОБРАБОТКИ

Процедура Конструктор(Владелец) Экспорт

	ОбщиеПроцедурыФункции      = Владелец;
	Параметры                  = Владелец.Параметры;
	Запросы                    = Владелец.Запросы;
	Правила                    = Владелец.Правила;
	ТаблицаПравилВыгрузки      = Владелец.ТаблицаПравилВыгрузки;
	ТаблицаНастройкиПараметров = Владелец.ТаблицаНастройкиПараметров;
	
	КомментарийПриВыгрузкеДанных = Владелец.КомментарийПриВыгрузкеДанных;
	КомментарийПриЗагрузкеДанных = Владелец.КомментарийПриЗагрузкеДанных;
	
	
	//переменная для универсального обмена
	Попытка
		ДатаНачала = Владелец.ДатаНачала;
	Исключение
	КонецПопытки;
	
	//переменная для универсального обмена
	Попытка
		ДатаОкончания = Владелец.ДатаОкончания;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		ДатаВыгрузкиДанных = Владелец.ДатаВыгрузкиДанных;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		УзелДляОбмена = Владелец.УзелДляОбмена;
	Исключение
	КонецПопытки;
	
	// Типы
	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");
	одТипТип                   = Тип("Тип");
	одТипСоответствие          = Тип("Соответствие");
	
	ЗначениеПустаяДата		   = Дата('00010101');
	
	// Типы узлов xml
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;
	
	Алгоритмы = Владелец.Алгоритмы;
	

КонецПроцедуры


Процедура Деструктор() Экспорт
	
	ОбщиеПроцедурыФункции = Неопределено;
	
КонецПроцедуры

#КонецЕсли