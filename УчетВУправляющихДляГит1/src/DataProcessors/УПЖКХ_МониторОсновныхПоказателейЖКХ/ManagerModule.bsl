#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейсПодключаемый

// Формирует и возвращает структуру значений по умолчанию.
Функция ПолучитьСтандартныеНастройки() Экспорт
	
	СписокРазделов = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.СписокРазделовМонитораРуководителяПоУмолчанию();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокРазделов",                  СписокРазделов);
	СтруктураПараметров.Вставить("ВариантОкругления",               1000);
	СтруктураПараметров.Вставить("ВыполнитьСравнение",              Ложь);
	СтруктураПараметров.Вставить("ПоказыватьУведомлениеОНастройке", Истина);
	СтруктураПараметров.Вставить("ТипПериода",                      0);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура вызывает механизм формирования платежного документа из модуля объекта отчета.
//
// Параметры:
//  ПараметрыОтчета - табличный документ, в который будет осуществлен вывод
//  АдресХранилища - Булево - показывать ли заголовок.
//
Процедура ОбновитьДанные(СтруктураПараметров, АдресХранилища) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьТабличныйДокумент(ТабличныйДокумент, СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры // СформироватьОтчет()

#КонецОбласти

#Область Заполнение_табличного_документа_данными

// Заполняет табличный документ для монитора.
Процедура ЗаполнитьТабличныйДокумент(ТабличныйДокумент, СтруктураПараметров)
	
	Макет = Обработки.УПЖКХ_МониторОсновныхПоказателейЖКХ.ПолучитьМакет("Макет1");
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда
		ОбластьОрганизация = ПолучитьОбластьОрганизации(Макет, СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	ОбластьЗаголовок = ПолучитьОбластьЗаголовка(Макет, СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Показатели в таблицах.
	ОбластьПоказатели = ПолучитьОбластьПоказателей(Макет, СтруктураПараметров);
	
	// Показатели в графиках.
	ОбластьДиаграмма = ПолучитьОбластьДиаграмм(Макет, СтруктураПараметров);
	
	врТабличныйДокументПоказатели = Новый ТабличныйДокумент;
	врТабличныйДокументПоказатели.Присоединить(ОбластьПоказатели);
	врТабличныйДокументПоказатели.Присоединить(ОбластьДиаграмма);
	
	ТабличныйДокумент.Вывести(врТабличныйДокументПоказатели);
	
КонецПроцедуры

// Возвращает область организации отчета.
Функция ПолучитьОбластьОрганизации(Макет, СтруктураПараметров)
	
	СтруктураЗаполнения = Новый Структура("Организация");
	СтруктураЗаполнения.Организация = Строка(СтруктураПараметров.Организация);
	
	ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
	ОбластьОрганизация.Параметры.Заполнить(СтруктураЗаполнения);
	
	Возврат ОбластьОрганизация;
	
КонецФункции

// Возвращает область заголовка отчета.
Функция ПолучитьОбластьЗаголовка(Макет, СтруктураПараметров)
	
	СтруктураЗаполнения = Новый Структура("Сегодня", Формат(СтруктураПараметров.ТекущийПериод, "ДФ='dd MMMM yyyy ""г."" H:mm'"));
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокМонитора");
	ОбластьЗаголовок.Параметры.Заполнить(СтруктураЗаполнения);
	
	Возврат ОбластьЗаголовок;
	
КонецФункции

// Возвращает область показателей.
Функция ПолучитьОбластьПоказателей(Макет, СтруктураПараметров)
	
	ДанныеРазделовМонитора = ПолучитьДанныеПараметровДляМонитора(СтруктураПараметров);
	ИтоговыеДанныеРазделов = ПолучитьИтоговыеДанныеОбластиПоказателей(ДанныеРазделовМонитора, СтруктураПараметров);
	МакетПоказатели        = Новый ТабличныйДокумент;
	
	ОбластьЗаголовокТаблицыМонитораЕдИз = Макет.ПолучитьОбласть("ЗаголовокТаблицыМонитораЕдИз");
	
	ПервыйОбход = Истина;
	
	Для Каждого ТекущаяСтрокаМонитора Из ИтоговыеДанныеРазделов.Строки Цикл
		
		ОбластьЗаголовокТаблицыМонитораЕдИз = ПолучитьМакетЗаголовокТаблицыМонитораЕдИз(Макет, ТекущаяСтрокаМонитора.Раздел,
																						СтруктураПараметров.ВариантОкругления);
		МакетПоказатели.Вывести(ОбластьЗаголовокТаблицыМонитораЕдИз);
		
		Если ПервыйОбход Тогда
			ОбластьЗаголовокТаблицыМонитора = ПолучитьМакетЗаголовокТаблицыМонитора(Макет, СтруктураПараметров);
			МакетПоказатели.Присоединить(ОбластьЗаголовокТаблицыМонитора);
			ПервыйОбход = Ложь;
		КонецЕсли;
		
		МакетРаздела = ЗаполнитьМакетРазделаПоказателейМонитора(Макет, ТекущаяСтрокаМонитора, СтруктураПараметров);
		МакетПоказатели.Вывести(МакетРаздела);
		
		МакетОтступа = Макет.ПолучитьОбласть("ОтступРаздела");
		МакетПоказатели.Вывести(МакетОтступа);
		
	КонецЦикла;
	
	Возврат МакетПоказатели;
	
КонецФункции

// Возвращает область заголовка таблицы параметров отчета.
Функция ПолучитьМакетЗаголовокТаблицыМонитора(Макет, СтруктураПараметров)
	
	Если СтруктураПараметров.ВыполнитьСравнение Тогда
		ОбластьЗаголовокТаблицыМонитора = Макет.ПолучитьОбласть("ЗаголовокТаблицыМонитораСравнение");
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовокТаблицыМонитора.Параметры, СтруктураПараметров, "ПредставлениеПериода1, ПредставлениеПериода2");
	Иначе
		ОбластьЗаголовокТаблицыМонитора = Макет.ПолучитьОбласть("ЗаголовокТаблицыМонитораТекущийПериод");
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовокТаблицыМонитора.Параметры, СтруктураПараметров, "ПредставлениеПериода1");
	КонецЕсли;
	
	Возврат ОбластьЗаголовокТаблицыМонитора;
	
КонецФункции

// Возвращает область единицы измерения для раздера монитора с учетом округления значений параметров.
Функция ПолучитьМакетЗаголовокТаблицыМонитораЕдИз(Макет, РазделМонитора, ВариантОкругления)
	
	ОбластьЗаголовокТаблицыМонитораЕдИз = Макет.ПолучитьОбласть("ЗаголовокТаблицыМонитораЕдИз");
	Если РазделМонитора = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.АДС Тогда
		ОбластьЗаголовокТаблицыМонитораЕдИз.Параметры.ЕдиницаИзмерения = НСтр("ru = 'Шт'");
	Иначе
		ОбластьЗаголовокТаблицыМонитораЕдИз.Параметры.ЕдиницаИзмерения = ?(ВариантОкругления = 1, НСтр("ru = 'Руб'"), НСтр("ru = 'Тыс. руб'"));
	КонецЕсли;
	
	Возврат ОбластьЗаголовокТаблицыМонитораЕдИз;
	
КонецФункции

// Создает пустую таблицу контейнер для данных монитора руководителя
//
// Параметры:
//  ДляСравнения - Булево - параметр определяет структуру колонок дерева значений.
// 
// Возвращаемое значение:
//  ДеревоЗначений - Пустое дереов данных монитора руководителя.
//
Функция ПолучитьДеревоДанныхДляЗаполнения(ДляСравнения = Ложь, ДляДиаграмм = Ложь) Экспорт
	
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2));
	
	Дерево = Новый ДеревоЗначений;
	
	Дерево.Колонки.Добавить("Раздел",            Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_РазделыМонитораРуководителяЖКХ"));
	Дерево.Колонки.Добавить("Представление",     Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(250)));
	Дерево.Колонки.Добавить("Порядок",           Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3)));
	Дерево.Колонки.Добавить("Сумма",             ОписаниеТиповЧисло15_2);
	Дерево.Колонки.Добавить("Период",            Новый ОписаниеТипов("Дата"));
	Дерево.Колонки.Добавить("СуммаДляСравнения", ОписаниеТиповЧисло15_2);
	
	Если ДляСравнения И ДляДиаграмм Тогда
		Дерево.Колонки.Добавить("ПериодСтрока", Новый ОписаниеТипов("Строка", ,,,Новый КвалификаторыСтроки(30)));
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Возвращает дерево значений для заполнения области показателей.
//
// Параметры:
//  ДанныеРазделовМонитора	 - Дерево значений - дерево данных показателей монитора.
//  СтруктураПараметров		 - Структура - Параметры данных.
// 
// Возвращаемое значение:
//  Дерево значений
//
Функция ПолучитьИтоговыеДанныеОбластиПоказателей(ДанныеРазделовМонитора, СтруктураПараметров)
	
	ИтоговыеДанные = ПолучитьДеревоДанныхДляЗаполнения(СтруктураПараметров.ВыполнитьСравнение);
	
	Для Каждого ТекущийЭлементРаздел Из СтруктураПараметров.СписокРазделов Цикл
		
		НайденныеСтрокиРаздела = ДанныеРазделовМонитора.НайтиСтроки(Новый Структура("РазделМонитора", ТекущийЭлементРаздел.Значение));
		Если НайденныеСтрокиРаздела.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Ошибка получения итоговых данных раздела """ + ТекущийЭлементРаздел.Значение + """ для заполнения области параметров.");
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаРаздел        = ИтоговыеДанные.Строки.Добавить();
		НоваяСтрокаРаздел.Раздел = ТекущийЭлементРаздел.Значение;
		
		Для Каждого ТекущиеДанные Из НайденныеСтрокиРаздела Цикл
			
			ДеревоДанных     = ТекущиеДанные.ДеревоДанных;
			МассивПараметров = Новый Массив;
			
			Для Каждого ТекущаяСтрокаДерева Из ДеревоДанных.Строки Цикл
				
				Если МассивПараметров.Найти(ТекущаяСтрокаДерева.Представление) = Неопределено Тогда
					МассивПараметров.Добавить(ТекущаяСтрокаДерева.Представление);
				Иначе
					Продолжить;
				КонецЕсли;
				
				НайденныеСтрокиДерева = ДеревоДанных.Строки.НайтиСтроки(Новый Структура("Представление", ТекущаяСтрокаДерева.Представление));
				Если НайденныеСтрокиДерева.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекущийЭлементРаздел.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.СводныеДанныеПоНачислениямИОплатам
					ИЛИ ТекущийЭлементРаздел.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.АДС Тогда
					
					Для Каждого ТекущиеДанныеСтроки Из НайденныеСтрокиДерева Цикл
						
						НайденныеСтроки = НоваяСтрокаРаздел.Строки.НайтиСтроки(Новый Структура("Представление", ТекущиеДанныеСтроки.Представление));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрокаПараметра = НоваяСтрокаРаздел.Строки.Добавить();
							НоваяСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
							НоваяСтрокаПараметра.Представление = ТекущиеДанныеСтроки.Представление;
							НоваяСтрокаПараметра.Порядок       = ТекущиеДанныеСтроки.Порядок;
						Иначе
							НоваяСтрокаПараметра = НайденныеСтроки[0];
						КонецЕсли;
						
						Если ТекущиеДанные.ДанныеДляСравнения Тогда
							НоваяСтрокаПараметра.СуммаДляСравнения = НоваяСтрокаПараметра.СуммаДляСравнения + ТекущиеДанныеСтроки.Сумма;
						Иначе
							НоваяСтрокаПараметра.Сумма = НоваяСтрокаПараметра.Сумма + ТекущиеДанныеСтроки.Сумма;
						КонецЕсли;
						
						Для Каждого ПодстрокаПараметра Из ТекущиеДанныеСтроки.Строки Цикл
							
							НайденныеПодСтроки = НоваяСтрокаПараметра.Строки.НайтиСтроки(Новый Структура("Представление", ПодстрокаПараметра.Представление));
							Если НайденныеПодСтроки.Количество() = 0 Тогда
								НоваяПодСтрокаПараметра = НоваяСтрокаПараметра.Строки.Добавить();
								НоваяПодСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
								НоваяПодСтрокаПараметра.Представление = ПодстрокаПараметра.Представление;
								НоваяПодСтрокаПараметра.Порядок       = ПодстрокаПараметра.Порядок;
							Иначе
								НоваяПодСтрокаПараметра = НайденныеПодСтроки[0];
							КонецЕсли;
							
							Если ТекущиеДанные.ДанныеДляСравнения Тогда
								НоваяПодСтрокаПараметра.СуммаДляСравнения = НоваяПодСтрокаПараметра.СуммаДляСравнения + ПодстрокаПараметра.Сумма;
							Иначе
								НоваяПодСтрокаПараметра.Сумма = НоваяПодСтрокаПараметра.Сумма + ПодстрокаПараметра.Сумма;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли ТекущийЭлементРаздел.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.ДинамикаЗадолженностиПоВсемУслугам Тогда
					
					ПредставлениеПараметра = НайденныеСтрокиДерева[0].Представление;
					ПериодПараметра        = НайденныеСтрокиДерева[0].Период;
					
					Если ПредставлениеПараметра = "Начальное сальдо" Тогда
						
						МинимальнаяДата = ПериодПараметра;
						Для Каждого ТекущиеДанныеСтроки Из НайденныеСтрокиДерева Цикл
							Если МинимальнаяДата >= ТекущиеДанныеСтроки.Период Тогда
								МинимальнаяДата = ТекущиеДанныеСтроки.Период;
							КонецЕсли;
						КонецЦикла;
						
						НайденнаяСтрокаНачальногоСальдо = Неопределено;
						Для Каждого ТекущиеДанныеСтроки Из НайденныеСтрокиДерева Цикл
							Если ТекущиеДанныеСтроки.Период = МинимальнаяДата Тогда
								НайденнаяСтрокаНачальногоСальдо = ТекущиеДанныеСтроки;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если НайденнаяСтрокаНачальногоСальдо = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						НайденныеСтроки = НоваяСтрокаРаздел.Строки.НайтиСтроки(Новый Структура("Представление", ТекущиеДанныеСтроки.Представление));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрокаПараметра               = НоваяСтрокаРаздел.Строки.Добавить();
							НоваяСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
							НоваяСтрокаПараметра.Представление = НайденнаяСтрокаНачальногоСальдо.Представление;
							НоваяСтрокаПараметра.Порядок       = НайденнаяСтрокаНачальногоСальдо.Порядок;
						Иначе
							НоваяСтрокаПараметра = НайденныеСтроки[0];
						КонецЕсли;
						
						Если ТекущиеДанные.ДанныеДляСравнения Тогда
							НоваяСтрокаПараметра.СуммаДляСравнения = НайденнаяСтрокаНачальногоСальдо.Сумма;
						Иначе
							НоваяСтрокаПараметра.Сумма = НайденнаяСтрокаНачальногоСальдо.Сумма;
						КонецЕсли;
						
						Если НайденнаяСтрокаНачальногоСальдо.Строки.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого ТекущаяПодстрокаНачальногоСальдо Из НайденнаяСтрокаНачальногоСальдо.Строки Цикл
							
							НайденныеСтроки = НоваяСтрокаПараметра.Строки.НайтиСтроки(Новый Структура("Представление", ТекущаяПодстрокаНачальногоСальдо.Представление));
							Если НайденныеСтроки.Количество() = 0 Тогда
								НоваяПодСтрокаПараметра               = НоваяСтрокаПараметра.Строки.Добавить();
								НоваяПодСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
								НоваяПодСтрокаПараметра.Представление = ТекущаяПодстрокаНачальногоСальдо.Представление;
								НоваяПодСтрокаПараметра.Порядок       = ТекущаяПодстрокаНачальногоСальдо.Порядок;
							Иначе
								НоваяПодСтрокаПараметра = НайденныеСтроки[0];
							КонецЕсли;
							
							Если ТекущиеДанные.ДанныеДляСравнения Тогда
								НоваяПодСтрокаПараметра.СуммаДляСравнения = ТекущаяПодстрокаНачальногоСальдо.Сумма;
							Иначе
								НоваяПодСтрокаПараметра.Сумма = ТекущаяПодстрокаНачальногоСальдо.Сумма;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли ПредставлениеПараметра = "Конечное сальдо" Тогда
						
						МаксимальнаяДата = ПериодПараметра;
						Для Каждого ТекущиеДанныеСтроки Из НайденныеСтрокиДерева Цикл
							Если МаксимальнаяДата <= ТекущиеДанныеСтроки.Период Тогда
								МаксимальнаяДата = ТекущиеДанныеСтроки.Период;
							КонецЕсли;
						КонецЦикла;
						
						НайденнаяСтрокаКонечногоСальдо = Неопределено;
						Для Каждого ТекущиеДанныеСтроки Из НайденныеСтрокиДерева Цикл
							Если ТекущиеДанныеСтроки.Период = МаксимальнаяДата Тогда
								НайденнаяСтрокаКонечногоСальдо = ТекущиеДанныеСтроки;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если НайденнаяСтрокаКонечногоСальдо = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						НайденныеСтроки = НоваяСтрокаРаздел.Строки.НайтиСтроки(Новый Структура("Представление", ТекущиеДанныеСтроки.Представление));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрокаПараметра               = НоваяСтрокаРаздел.Строки.Добавить();
							НоваяСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
							НоваяСтрокаПараметра.Представление = НайденнаяСтрокаКонечногоСальдо.Представление;
							НоваяСтрокаПараметра.Порядок       = НайденнаяСтрокаКонечногоСальдо.Порядок;
						Иначе
							НоваяСтрокаПараметра = НайденныеСтроки[0];
						КонецЕсли;
						
						Если ТекущиеДанные.ДанныеДляСравнения Тогда
							НоваяСтрокаПараметра.СуммаДляСравнения = НайденнаяСтрокаКонечногоСальдо.Сумма;
						Иначе
							НоваяСтрокаПараметра.Сумма = НайденнаяСтрокаКонечногоСальдо.Сумма;
						КонецЕсли;
						
						Если НайденнаяСтрокаКонечногоСальдо.Строки.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого ТекущаяПодстрокаКонечногоСальдо Из НайденнаяСтрокаКонечногоСальдо.Строки Цикл
							
							НайденныеСтроки = НоваяСтрокаПараметра.Строки.НайтиСтроки(Новый Структура("Представление", ТекущаяПодстрокаКонечногоСальдо.Представление));
							Если НайденныеСтроки.Количество() = 0 Тогда
								НоваяПодСтрокаПараметра               = НоваяСтрокаПараметра.Строки.Добавить();
								НоваяПодСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
								НоваяПодСтрокаПараметра.Представление = ТекущаяПодстрокаКонечногоСальдо.Представление;
								НоваяПодСтрокаПараметра.Порядок       = ТекущаяПодстрокаКонечногоСальдо.Порядок;
							Иначе
								НоваяПодСтрокаПараметра = НайденныеСтроки[0];
							КонецЕсли;
							
							Если ТекущиеДанные.ДанныеДляСравнения Тогда
								НоваяПодСтрокаПараметра.СуммаДляСравнения = ТекущаяПодстрокаКонечногоСальдо.Сумма;
							Иначе
								НоваяПодСтрокаПараметра.Сумма = ТекущаяПодстрокаКонечногоСальдо.Сумма;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИтоговыеДанные;
	
КонецФункции

// Возвращает область строк параметров раздела монитора.
Функция ЗаполнитьМакетРазделаПоказателейМонитора(Макет, ТекущаяСтрокаМонитора, СтруктураПараметров)
	
	МакетРаздела = Новый ТабличныйДокумент;
	
	СтруктураЗаполнения  = Новый Структура("Заголовок, Представление, СуммаДляСравнения, Сумма, Отклонение");
	СтруктураРасшифровки = ПолучитьСтруктуруРасшифровки(ТекущаяСтрокаМонитора.Раздел, СтруктураПараметров);
	
	// Выводим заголовок раздела.
	СтруктураЗаполнения.Заголовок = ТекущаяСтрокаМонитора.Раздел;
	МакетЗаголовка                = Макет.ПолучитьОбласть("ЗаголовокРаздела");
	ЗаполнитьЗначенияСвойств(МакетЗаголовка.Параметры, СтруктураЗаполнения, "Заголовок");
	МакетЗаголовка.Области.ЗаголовокРаздела.Расшифровка = СтруктураРасшифровки;
	МакетРаздела.Вывести(МакетЗаголовка);
	
	// Определяем области для заполнения и полследующего вывода.
	МакетСтрокиОтступ2                     = Макет.ПолучитьОбласть("СтрокаРазделаПредставлениеОтступ2");
	МакетСтрокиПоказанияОтступ2            = Макет.ПолучитьОбласть("СтрокаРазделаПоказанияОтступ2Сравнение");
	МакетВТомЧисле                         = Макет.ПолучитьОбласть("СтрокаВТомЧисле");
	МакетСтрокаРазделаПредставлениеОтступ6 = Макет.ПолучитьОбласть("СтрокаРазделаПредставлениеОтступ6");
	МакетСтрокиПоказанияОтступ6            = Макет.ПолучитьОбласть("СтрокаРазделаПоказанияОтступ6Сравнение");
	
	Для Каждого СтрокаДерева Из ТекущаяСтрокаМонитора.Строки Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаДерева);
		
		МакетСтрокиОтступ2.Параметры.Заполнить(СтруктураЗаполнения);
		МакетРаздела.Вывести(МакетСтрокиОтступ2);
		
		МакетСтрокиПоказанияОтступ2.Параметры.Заполнить(СтруктураЗаполнения);
		Если СтруктураПараметров.ВыполнитьСравнение Тогда
			Если СтруктураЗаполнения.Сумма = 0 И СтруктураЗаполнения.СуммаДляСравнения = 0 Тогда
				СтруктураЗаполнения.Отклонение = 0;
			ИначеЕсли СтруктураЗаполнения.Сумма = 0 Тогда
				СтруктураЗаполнения.Отклонение = 100;
			ИначеЕсли СтруктураЗаполнения.СуммаДляСравнения = 0 Тогда
				СтруктураЗаполнения.Отклонение = -100;
			Иначе
				Если СтруктураЗаполнения.СуммаДляСравнения > СтруктураЗаполнения.Сумма Тогда
					СтруктураЗаполнения.Отклонение = Окр(?(СтруктураЗаполнения.Сумма = 0, 0, СтруктураЗаполнения.СуммаДляСравнения / СтруктураЗаполнения.Сумма - 1) * 100, 1);
				Иначе
					СтруктураЗаполнения.Отклонение = -1 * Окр((1- ?(СтруктураЗаполнения.Сумма = 0, 0, СтруктураЗаполнения.СуммаДляСравнения / СтруктураЗаполнения.Сумма)) * 100, 1);
				КонецЕсли;
			КонецЕсли;
			МакетСтрокиПоказанияОтступ2.Области.КартинкаИзменениеСтрокаОтступ2.Картинка = ПолучитьКартинкуОтклонения(СтруктураЗаполнения.Отклонение);
			
			МакетСтрокиПоказанияОтступ2.Параметры.Заполнить(СтруктураЗаполнения);
			МакетРаздела.Присоединить(МакетСтрокиПоказанияОтступ2);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			МакетРаздела.Вывести(МакетВТомЧисле);
			
			Для Каждого СтрокаВТомЧисле Из СтрокаДерева.Строки Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, СтрокаВТомЧисле);
				
				МакетСтрокаРазделаПредставлениеОтступ6.Параметры.Заполнить(СтруктураЗаполнения);
				МакетРаздела.Вывести(МакетСтрокаРазделаПредставлениеОтступ6);
				
				Если СтруктураПараметров.ВыполнитьСравнение Тогда
					Если СтруктураЗаполнения.Сумма = 0 И СтруктураЗаполнения.СуммаДляСравнения = 0 Тогда
						СтруктураЗаполнения.Отклонение = 0;
					ИначеЕсли СтруктураЗаполнения.Сумма = 0 Тогда
						СтруктураЗаполнения.Отклонение = 100;
					ИначеЕсли СтруктураЗаполнения.СуммаДляСравнения = 0 Тогда
						СтруктураЗаполнения.Отклонение = -100;
					Иначе
						Если СтруктураЗаполнения.СуммаДляСравнения > СтруктураЗаполнения.Сумма Тогда
							СтруктураЗаполнения.Отклонение = Окр((?(СтруктураЗаполнения.Сумма = 0, 0, СтруктураЗаполнения.СуммаДляСравнения / СтруктураЗаполнения.Сумма) - 1) * 100, 1);
						Иначе
							СтруктураЗаполнения.Отклонение = -1 * Окр((1 - ?(СтруктураЗаполнения.Сумма = 0, 0, СтруктураЗаполнения.СуммаДляСравнения / СтруктураЗаполнения.Сумма)) * 100, 1);
						КонецЕсли;
					КонецЕсли;
					МакетСтрокиПоказанияОтступ6.Области.КартинкаИзменениеСтрокаОтступ6.Картинка = ПолучитьКартинкуОтклонения(СтруктураЗаполнения.Отклонение);
					
					МакетСтрокиПоказанияОтступ6.Параметры.Заполнить(СтруктураЗаполнения);
					МакетРаздела.Присоединить(МакетСтрокиПоказанияОтступ6);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МакетРаздела;
	
КонецФункции // ЗаполнитьМакетРазделаПоказателейМонитора()

// Возвращает картинку отклонения.
Функция ПолучитьКартинкуОтклонения(Отклонение)
	
	КартинкаОтклонения = Новый Картинка;
	
	Если Отклонение > 0 Тогда
		КартинкаОтклонения = БиблиотекаКартинок.ДосьеУвеличениеПоказателя;
	ИначеЕсли Отклонение < 0 Тогда
		КартинкаОтклонения = БиблиотекаКартинок.ДосьеУменьшениеПоказателя
	КонецЕсли;
	
	Возврат КартинкаОтклонения
	
КонецФункции

// Возвращает область с диаграммами.
Функция ПолучитьОбластьДиаграмм(Макет, СтруктураПараметров)
	
	ДанныеРазделовМонитора = ПолучитьДанныеПараметровДляМонитора(СтруктураПараметров, Истина);
	ОбластьДиаграмм        = Новый ТабличныйДокумент;
	
	Отбор = Новый Структура("РазделМонитора");
	
	Если СтруктураПараметров.ВыполнитьСравнение Тогда
		
		ТаблицаПериодов = ПолучитьТаблицуПериодовДиаграммДляСравнения(СтруктураПараметров);
		
		СтруктураПараметров.Вставить("ТаблицаПериодов", ТаблицаПериодов);
		
		ИтоговыеДанные = ПолучитьИтоговыеДанныеОбластиДиаграммДляСравнения(ДанныеРазделовМонитора, СтруктураПараметров);
		
		Для Каждого РазделМонитора Из СтруктураПараметров.СписокРазделов Цикл
			
			Отбор = Новый Структура("Раздел", РазделМонитора.Значение);
			МассивДанныеРаздела = ИтоговыеДанные.Строки.НайтиСтроки(Отбор);
			Если МассивДанныеРаздела.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Если РазделМонитора.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.СводныеДанныеПоНачислениямИОплатам Тогда
					ЗаполнитьОбластьДиаграммПоРазделуСводныеДанныеПоНачислениямИОплатамСравнение(РазделМонитора.Значение, МассивДанныеРаздела[0], ОбластьДиаграмм, Макет, СтруктураПараметров);
				ИначеЕсли РазделМонитора.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.ДинамикаЗадолженностиПоВсемУслугам Тогда
					ЗаполнитьОбластьДиаграммПоРазделуДинамикаЗадолженностиПоВсемУслугамСравнение(РазделМонитора.Значение, МассивДанныеРаздела[0], ОбластьДиаграмм, Макет, СтруктураПараметров);
				ИначеЕсли РазделМонитора.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.АДС Тогда
					ЗаполнитьОбластьДиаграммПоРазделуАДССравнение(РазделМонитора.Значение, МассивДанныеРаздела[0], ОбластьДиаграмм, Макет, СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаПериодов = ПолучитьТаблицуПериодов(СтруктураПараметров.НачалоПериода1, СтруктураПараметров.КонецПериода1);
		
		СтруктураПараметров.Вставить("ПредставлениеПериодаСтрока", СтруктураПараметров.ПредставлениеПериода1);
		СтруктураПараметров.Вставить("ТаблицаПериодов",            ТаблицаПериодов);
		
		Для Каждого РазделМонитора Из СтруктураПараметров.СписокРазделов Цикл
			
			Отбор = Новый Структура("РазделМонитора", РазделМонитора.Значение);
			МассивДанныеРаздела = ДанныеРазделовМонитора.НайтиСтроки(Отбор);
			Если МассивДанныеРаздела.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Если РазделМонитора.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.СводныеДанныеПоНачислениямИОплатам Тогда
					ЗаполнитьОбластьДиаграммПоРазделуСводныеДанныеПоНачислениямИОплатам(РазделМонитора.Значение, МассивДанныеРаздела[0].ДеревоДанных, ОбластьДиаграмм, Макет, СтруктураПараметров);
				ИначеЕсли РазделМонитора.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.ДинамикаЗадолженностиПоВсемУслугам Тогда
					ЗаполнитьОбластьДиаграммПоРазделуДинамикаЗадолженностиПоВсемУслугам(РазделМонитора.Значение, МассивДанныеРаздела[0].ДеревоДанных, ОбластьДиаграмм, Макет, СтруктураПараметров);
				ИначеЕсли РазделМонитора.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.АДС Тогда
					ЗаполнитьОбластьДиаграммПоРазделуАДС(РазделМонитора.Значение, МассивДанныеРаздела[0].ДеревоДанных, ОбластьДиаграмм, Макет, СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОбластьДиаграмм;
	
КонецФункции // ПолучитьОбластьДиаграмм()

// Возвращает дерево значений для заполнения области показателей.
//
// Параметры:
//  ДанныеРазделовМонитора	 - Дерево значений - дерево данных показателей монитора.
//  СтруктураПараметров		 - Структура - Параметры данных.
// 
// Возвращаемое значение:
//  Дерево значений
//
Функция ПолучитьИтоговыеДанныеОбластиДиаграммДляСравнения(ДанныеРазделовМонитора, СтруктураПараметров)
	
	ТаблицаПериодов = СтруктураПараметров.ТаблицаПериодов;
	ИтоговыеДанные  = ПолучитьДеревоДанныхДляЗаполнения(СтруктураПараметров.ВыполнитьСравнение, Истина);
	
	Для Каждого ТекущийЭлементРаздел Из СтруктураПараметров.СписокРазделов Цикл
		
		НайденныеСтрокиРаздела = ДанныеРазделовМонитора.НайтиСтроки(Новый Структура("РазделМонитора", ТекущийЭлементРаздел.Значение));
		Если НайденныеСтрокиРаздела.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Ошибка получения итоговых данных раздела """ + ТекущийЭлементРаздел.Значение + """ для заполнения области параметров.");
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаРаздел        = ИтоговыеДанные.Строки.Добавить();
		НоваяСтрокаРаздел.Раздел = ТекущийЭлементРаздел.Значение;
		
		Для Каждого ТекущиеДанные Из НайденныеСтрокиРаздела Цикл
			
			ДеревоДанных = ТекущиеДанные.ДеревоДанных;
			ДеревоДанных.Строки.Сортировать("Период Возр");
			
			МассивПараметров = Новый Массив;
			Для Каждого ТекущаяСтрокаДерева Из ДеревоДанных.Строки Цикл
				
				НайденныеСтрокиДерева = ДеревоДанных.Строки.НайтиСтроки(Новый Структура("Представление", ТекущаяСтрокаДерева.Представление));
				Если НайденныеСтрокиДерева.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если МассивПараметров.Найти(ТекущаяСтрокаДерева.Представление) = Неопределено Тогда
					МассивПараметров.Добавить(ТекущаяСтрокаДерева.Представление);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ТекущийЭлементРаздел.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.СводныеДанныеПоНачислениямИОплатам 
				 ИЛИ ТекущийЭлементРаздел.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.АДС Тогда
					
					Для Каждого ТекущиеДанныеСтроки Из НайденныеСтрокиДерева Цикл
						
						Если ТекущиеДанные.ДанныеДляСравнения Тогда
							НайденныеСтрокиТаблицыПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("ПериодДляСравнения", ТекущиеДанныеСтроки.Период));
							Если НайденныеСтрокиТаблицыПериодов.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							НайденныеСтрокиТаблицыПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("ПериодТекущий", ТекущиеДанныеСтроки.Период));
							Если НайденныеСтрокиТаблицыПериодов.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						ИмяПериода = НайденныеСтрокиТаблицыПериодов[0].ПериодСтрока;
						
						НайденныеСтроки = НоваяСтрокаРаздел.Строки.НайтиСтроки(Новый Структура("Представление, ПериодСтрока", ТекущиеДанныеСтроки.Представление, ИмяПериода));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрокаПараметра = НоваяСтрокаРаздел.Строки.Добавить();
							НоваяСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
							НоваяСтрокаПараметра.Представление = ТекущиеДанныеСтроки.Представление;
							НоваяСтрокаПараметра.Порядок       = ТекущиеДанныеСтроки.Порядок;
							НоваяСтрокаПараметра.ПериодСтрока  = ИмяПериода;
							НоваяСтрокаПараметра.Период        = ТекущиеДанныеСтроки.Период;
						Иначе
							НоваяСтрокаПараметра = НайденныеСтроки[0];
						КонецЕсли;
						
						Если ТекущиеДанные.ДанныеДляСравнения Тогда
							НоваяСтрокаПараметра.СуммаДляСравнения = ТекущиеДанныеСтроки.Сумма;
						Иначе
							НоваяСтрокаПараметра.Сумма = ТекущиеДанныеСтроки.Сумма;
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли ТекущийЭлементРаздел.Значение = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.ДинамикаЗадолженностиПоВсемУслугам Тогда
					
					ПредставлениеПараметра = НайденныеСтрокиДерева[0].Представление;
					ПериодПараметра        = НайденныеСтрокиДерева[0].Период;
					
					Для Каждого ТекущиеДанныеСтроки Из НайденныеСтрокиДерева Цикл
						
						Если ТекущиеДанные.ДанныеДляСравнения Тогда
							НайденныеСтрокиТаблицыПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("ПериодДляСравнения", ТекущиеДанныеСтроки.Период));
							Если НайденныеСтрокиТаблицыПериодов.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							НайденныеСтрокиТаблицыПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("ПериодТекущий", ТекущиеДанныеСтроки.Период));
							Если НайденныеСтрокиТаблицыПериодов.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						ИмяПериода = НайденныеСтрокиТаблицыПериодов[0].ПериодСтрока;
						
						НайденныеСтроки = НоваяСтрокаРаздел.Строки.НайтиСтроки(Новый Структура("Представление, ПериодСтрока", ТекущиеДанныеСтроки.Представление, ИмяПериода));
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрокаПараметра               = НоваяСтрокаРаздел.Строки.Добавить();
							НоваяСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
							НоваяСтрокаПараметра.Представление = ТекущиеДанныеСтроки.Представление;
							НоваяСтрокаПараметра.Порядок       = ТекущиеДанныеСтроки.Порядок;
							НоваяСтрокаПараметра.ПериодСтрока  = ИмяПериода;
							НоваяСтрокаПараметра.Период        = ТекущиеДанныеСтроки.Период;
						Иначе
							НоваяСтрокаПараметра = НайденныеСтроки[0];
						КонецЕсли;
						
						Если ТекущиеДанные.ДанныеДляСравнения Тогда
							НоваяСтрокаПараметра.СуммаДляСравнения = ТекущиеДанныеСтроки.Сумма;
						Иначе
							НоваяСтрокаПараметра.Сумма = ТекущиеДанныеСтроки.Сумма;
						КонецЕсли;
						
						Если ТекущиеДанныеСтроки.Строки.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого ТекущаяПодстрокаКонечногоСальдо Из ТекущиеДанныеСтроки.Строки Цикл
							
							НайденныеСтроки = НоваяСтрокаПараметра.Строки.НайтиСтроки(Новый Структура("Представление", ТекущаяПодстрокаКонечногоСальдо.Представление));
							Если НайденныеСтроки.Количество() = 0 Тогда
								НоваяПодСтрокаПараметра               = НоваяСтрокаПараметра.Строки.Добавить();
								НоваяПодСтрокаПараметра.Раздел        = ТекущийЭлементРаздел.Значение;
								НоваяПодСтрокаПараметра.Представление = ТекущаяПодстрокаКонечногоСальдо.Представление;
								НоваяПодСтрокаПараметра.Порядок       = ТекущаяПодстрокаКонечногоСальдо.Порядок;
							Иначе
								НоваяПодСтрокаПараметра = НайденныеСтроки[0];
							КонецЕсли;
							
							НоваяПодСтрокаПараметра.Сумма = ТекущаяПодстрокаКонечногоСальдо.Сумма;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ИтоговыеДанные;
	
КонецФункции

// Возвращает таблицу периодов отчета.
Функция ПолучитьТаблицуПериодов(НачалоПериода, КонецПериода)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ПериодНачальный = НачалоПериода;
	
	Пока ПериодНачальный <= КонецПериода Цикл
		ТаблицаПериодов.Добавить().Период = КонецМесяца(ПериодНачальный);
		ПериодНачальный = КонецМесяца(ДобавитьМесяц(ПериодНачальный, 1));
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Возвращает таблицу периодов отчета.
Функция ПолучитьТаблицуПериодовДиаграммДляСравнения(СтруктураПараметров)
	
	ПериодыОдногоГода           = (Год(СтруктураПараметров.НачалоПериода1) = Год(СтруктураПараметров.НачалоПериода2));
	ПериодыСОдинаковымиМесяцами = (Месяц(СтруктураПараметров.НачалоПериода1) = Месяц(СтруктураПараметров.НачалоПериода2));
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ПериодСтрока",       Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(30)));
	ТаблицаПериодов.Колонки.Добавить("ПериодТекущий",      Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ПериодДляСравнения", Новый ОписаниеТипов("Дата"));
	
	ПериодНачальный = СтруктураПараметров.НачалоПериода1;
	Пока ПериодНачальный <= СтруктураПараметров.КонецПериода1 Цикл
		ТаблицаПериодов.Добавить().ПериодТекущий = КонецМесяца(ПериодНачальный);
		ПериодНачальный = КонецМесяца(ДобавитьМесяц(ПериодНачальный, 1));
	КонецЦикла;
	ТаблицаПериодов.Сортировать("ПериодТекущий");
	
	врТаблицаПериодов = ТаблицаПериодов.СкопироватьКолонки();
	
	ПериодНачальный = СтруктураПараметров.НачалоПериода2;
	Пока ПериодНачальный <= СтруктураПараметров.КонецПериода2 Цикл
		врТаблицаПериодов.Добавить().ПериодДляСравнения = КонецМесяца(ПериодНачальный);
		ПериодНачальный = КонецМесяца(ДобавитьМесяц(ПериодНачальный, 1));
	КонецЦикла;
	врТаблицаПериодов.Сортировать("ПериодДляСравнения");
	
	ПоследнийИндекс = ТаблицаПериодов.Количество() - 1;
	Для ТекущийИндекс = 0 По ПоследнийИндекс Цикл
		ТекущаяСтрока  = ТаблицаПериодов[ТекущийИндекс];
		ТекущаяСтрока2 = врТаблицаПериодов[ТекущийИндекс];
		
		ТекущаяСтрока.ПериодДляСравнения = ТекущаяСтрока2.ПериодДляСравнения;
		
		Если ПериодыСОдинаковымиМесяцами Тогда
			ТекущаяСтрока.ПериодСтрока = Лев(Формат(ТекущаяСтрока.ПериодТекущий, "ДФ=ММММ"), 3) + ".";
		Иначе
			ТекущаяСтрока.ПериодСтрока = Лев(Формат(ТекущаяСтрока.ПериодТекущий, "ДФ='ММММ'"), 3) + "."
									   + Формат(ТекущаяСтрока.ПериодТекущий, "ДФ='гг'")
									   + "/"
									   + Лев(Формат(ТекущаяСтрока.ПериодДляСравнения, "ДФ='ММММ'"), 3) + "."
									   + Формат(ТекущаяСтрока.ПериодДляСравнения, "ДФ='гг'");
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

// Возвращает тип диаграммы по виду периода.
Функция ПолучитьТипДиаграммыПоВидуПериода(ВидПериода, ВПроцентах = Ложь, ВыбранПериодЗаОдинМесяц = Ложь)
	
	Если ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц ИЛИ ВыбранПериодЗаОдинМесяц Тогда
		Возврат ТипДиаграммы.Гистограмма;
	ИначеЕсли ВПроцентах Тогда
		Возврат ТипДиаграммы.График;
	Иначе
		Возврат ТипДиаграммы.ГрафикСОбластями;
	КонецЕсли;
	
КонецФункции

// Возвращает тип диаграммы по типу и виду периода.
Функция ПолучитьТипДиаграммыПоТипуПериода(ТипПериода, ВидПериода, ВПроцентах = Ложь, ВыбранПериодЗаОдинМесяц)
	
	Если ТипПериода = 5 Тогда
		Возврат ПолучитьТипДиаграммыПоВидуПериода(ВидПериода, ВПроцентах, ВыбранПериодЗаОдинМесяц);
	Иначе
		Если ТипПериода = 0 ИЛИ ТипПериода = 1 Тогда
			Возврат ТипДиаграммы.Гистограмма;
		ИначеЕсли ВПроцентах Тогда
			Возврат ТипДиаграммы.График;
		Иначе
			Возврат ТипДиаграммы.ГрафикСОбластями;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Заполняет области диаграмм по разделу "Сводные данные по начислениям и оплатам" для сравнения.
Процедура ЗаполнитьОбластьДиаграммПоРазделуСводныеДанныеПоНачислениямИОплатамСравнение(РазделМонитора, ДанныеНачислений, ОбластьДиаграмм, Макет, СтруктураПараметров)
	
	ТипДиаграмм = ПолучитьТипДиаграммыПоВидуПериода(СтруктураПараметров.ВидПериода);
	
	// График с начислениями.
	МакетДиаграммаНачислений                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыНачислений                 = МакетДиаграммаНачислений.Рисунки[0];
	РисунокДиаграммыНачислений.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаНачислений                        = РисунокДиаграммыНачислений.Объект;
	ДиаграммаНачислений.ТипДиаграммы           = ТипДиаграмм;
	ДиаграммаНачислений.ОбластьЗаголовка.Текст = "Сравнение начислений,в "
												  + ?(СтруктураПараметров.ВариантОкругления = 1, НСтр("ru = 'руб.'"), НСтр("ru = 'тыс.руб.'"));
	// График с оплатами.
	МакетДиаграммаОплат                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыОплат                 = МакетДиаграммаОплат.Рисунки[0];
	РисунокДиаграммыОплат.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаОплат                        = РисунокДиаграммыОплат.Объект;
	ДиаграммаОплат.ТипДиаграммы           = ТипДиаграмм;
	ДиаграммаОплат.ОбластьЗаголовка.Текст = "Сравнение оплат,в "
										  + ?(СтруктураПараметров.ВариантОкругления = 1, НСтр("ru = 'руб.'"), НСтр("ru = 'тыс.руб.'"));
	// График Процент собираемости оплат.
	МакетДиаграммаПроцентСобираемостиОплат                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыПроцентСобираемостиОплат                 = МакетДиаграммаПроцентСобираемостиОплат.Рисунки[0];
	РисунокДиаграммыПроцентСобираемостиОплат.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаПроцентСобираемостиОплат                        = РисунокДиаграммыПроцентСобираемостиОплат.Объект;
	ДиаграммаПроцентСобираемостиОплат.ТипДиаграммы           = ПолучитьТипДиаграммыПоВидуПериода(СтруктураПараметров.ВидПериода, Истина);
	ДиаграммаПроцентСобираемостиОплат.ОбластьЗаголовка.Текст = "Сравнение процента собираемости оплат, в %";
	
	МассивПараметров = Новый Массив;
	Для Каждого ТекущийПараметр Из ДанныеНачислений.Строки Цикл
		
		НайденныеСтроки = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Период", ТекущийПараметр.Период));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			
			Если ТекущаяСтрока.Представление = "Начисления" Тогда
				СтрокаНачислено = ТекущаяСтрока;
			ИначеЕсли ТекущаяСтрока.Представление = "Оплаты" Тогда
				СтрокаОплаты = ТекущаяСтрока;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОплаты <> Неопределено И СтрокаНачислено <> Неопределено Тогда
				
				СерияПроцентСобираемости       = ДиаграммаПроцентСобираемостиОплат.УстановитьСерию("Период 1");
				СерияПроцентСобираемости.Текст = СтруктураПараметров.ПредставлениеПериода1;
				СерияПроцентСобираемости.Цвет  = СтруктураПараметров.ЦветКрасный;
				
				ТочкаПроцентСобираемости       = ДиаграммаПроцентСобираемостиОплат.УстановитьТочку(ТекущаяСтрока.ПериодСтрока);
				ТочкаПроцентСобираемости.Текст = ТекущаяСтрока.ПериодСтрока;
				ПроцентСобираемостиОплат       = ?(СтрокаОплаты.Сумма = 0, 0, Окр(?(СтрокаНачислено.Сумма = 0, 0, СтрокаОплаты.Сумма / СтрокаНачислено.Сумма) * 100, 2));
				
				ДиаграммаПроцентСобираемостиОплат.УстановитьЗначение(ТочкаПроцентСобираемости, СерияПроцентСобираемости, ПроцентСобираемостиОплат);
				
				СерияПроцентСобираемости       = ДиаграммаПроцентСобираемостиОплат.УстановитьСерию("Период 2");
				СерияПроцентСобираемости.Текст = СтруктураПараметров.ПредставлениеПериода2;
				СерияПроцентСобираемости.Цвет  = СтруктураПараметров.ЦветЖелтый;
				
				ТочкаПроцентСобираемости       = ДиаграммаПроцентСобираемостиОплат.УстановитьТочку(ТекущаяСтрока.ПериодСтрока);
				ТочкаПроцентСобираемости.Текст = ТекущаяСтрока.ПериодСтрока;
				ПроцентСобираемостиОплат       = ?(СтрокаОплаты.СуммаДляСравнения = 0, 0, Окр(?(СтрокаНачислено.СуммаДляСравнения = 0, 0, СтрокаОплаты.СуммаДляСравнения / СтрокаНачислено.СуммаДляСравнения) * 100, 2));
				
				ДиаграммаПроцентСобираемостиОплат.УстановитьЗначение(ТочкаПроцентСобираемости, СерияПроцентСобираемости, ПроцентСобираемостиОплат);
			КонецЕсли;
			
		КонецЦикла;
		
		НайденныеСтрокиПараметра = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Представление", ТекущийПараметр.Представление));
		
		СтрокаНачислено = Неопределено;
		СтрокаОплаты    = Неопределено;
		
		Если МассивПараметров.Найти(ТекущийПараметр.Представление) = Неопределено Тогда
			МассивПараметров.Добавить(ТекущийПараметр.Представление);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаПараметра Из НайденныеСтрокиПараметра Цикл
			
			Если ТекущаяСтрокаПараметра.Представление = "Начисления" Тогда
				СтрокаНачислено = ТекущаяСтрокаПараметра;
			ИначеЕсли ТекущаяСтрокаПараметра.Представление = "Оплаты" Тогда
				СтрокаОплаты = ТекущаяСтрокаПараметра;
			Иначе
				Прервать;
			КонецЕсли;
			
			ТекстТочки = ТекущаяСтрокаПараметра.ПериодСтрока;
			
			Если СтрокаНачислено <> Неопределено Тогда
				Серия       = ДиаграммаНачислений.УстановитьСерию("Период 1");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода1;
				Серия.Цвет  = СтруктураПараметров.ЦветКрасный;
				
				ТочкаНачисленоТекущее       = ДиаграммаНачислений.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоТекущее.Текст = ТекстТочки;
				
				ДиаграммаНачислений.УстановитьЗначение(ТочкаНачисленоТекущее, Серия, СтрокаНачислено.Сумма);
				
				Серия       = ДиаграммаНачислений.УстановитьСерию("Период 2");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода2;
				Серия.Цвет  = СтруктураПараметров.ЦветЖелтый;
				
				ТочкаНачисленоДляСравнения       = ДиаграммаНачислений.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоДляСравнения.Текст = ТекстТочки;
				
				ДиаграммаНачислений.УстановитьЗначение(ТочкаНачисленоДляСравнения, Серия, СтрокаНачислено.СуммаДляСравнения);
			КонецЕсли;
			
			Если СтрокаОплаты <> Неопределено Тогда
				Серия       = ДиаграммаОплат.УстановитьСерию("Период 1");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода1;
				Серия.Цвет  = СтруктураПараметров.ЦветКрасный;
				
				ТочкаОплатыТекущее       = ДиаграммаОплат.УстановитьТочку(ТекстТочки);
				ТочкаОплатыТекущее.Текст = ТекстТочки;
				
				ДиаграммаОплат.УстановитьЗначение(ТочкаОплатыТекущее, Серия, СтрокаОплаты.Сумма);
				
				Серия       = ДиаграммаОплат.УстановитьСерию("Период 2");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода2;
				Серия.Цвет  = СтруктураПараметров.ЦветЖелтый;
				
				ТочкаОплатыДляСравнения       = ДиаграммаОплат.УстановитьТочку(ТекстТочки);
				ТочкаОплатыДляСравнения.Текст = ТекстТочки;
				
				ДиаграммаОплат.УстановитьЗначение(ТочкаОплатыДляСравнения, Серия, СтрокаОплаты.СуммаДляСравнения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбластьДиаграмм.Вывести(МакетДиаграммаНачислений);
	ОбластьДиаграмм.Вывести(МакетДиаграммаОплат);
	ОбластьДиаграмм.Вывести(МакетДиаграммаПроцентСобираемостиОплат);
	
КонецПроцедуры

// Заполняет области диаграмм по разделу "Динамика задолженности по всем услугам" для сравнения.
Процедура ЗаполнитьОбластьДиаграммПоРазделуДинамикаЗадолженностиПоВсемУслугамСравнение(РазделМонитора, ДанныеНачислений, ОбластьДиаграмм, Макет, СтруктураПараметров)
	
	ТипДиаграмм = ПолучитьТипДиаграммыПоВидуПериода(СтруктураПараметров.ВидПериода);
	
	// График по задолженности.
	МакетДиаграммаЗадолженности                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыЗадолженности                 = МакетДиаграммаЗадолженности.Рисунки[0];
	РисунокДиаграммыЗадолженности.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаЗадолженности                        = РисунокДиаграммыЗадолженности.Объект;
	ДиаграммаЗадолженности.ТипДиаграммы           = ТипДиаграмм;
	ДиаграммаЗадолженности.ОбластьЗаголовка.Текст = "Сравнение конечной задолженности,в "
												  + ?(СтруктураПараметров.ВариантОкругления = 1, НСтр("ru = 'руб.'"), НСтр("ru = 'тыс.руб.'"));
	МассивПараметров = Новый Массив;
	Для Каждого ТекущийПараметр Из ДанныеНачислений.Строки Цикл
		
		НайденныеСтрокиПараметра = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Представление", ТекущийПараметр.Представление));
		
		СтрокаНачислено = Неопределено;
		СтрокаОплаты    = Неопределено;
		
		Если МассивПараметров.Найти(ТекущийПараметр.Представление) = Неопределено Тогда
			МассивПараметров.Добавить(ТекущийПараметр.Представление);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаПараметра Из НайденныеСтрокиПараметра Цикл
			
			Если ТекущаяСтрокаПараметра.Представление = "Конечное сальдо" Тогда
				СтрокаНачислено = ТекущаяСтрокаПараметра;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ТекстТочки = ТекущаяСтрокаПараметра.ПериодСтрока;
			
			Если СтрокаНачислено <> Неопределено Тогда
				Серия       = ДиаграммаЗадолженности.УстановитьСерию("Период 1");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода1;
				Серия.Цвет  = СтруктураПараметров.ЦветКрасный;
				
				ТочкаНачисленоТекущее       = ДиаграммаЗадолженности.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоТекущее.Текст = ТекстТочки;
				
				ДиаграммаЗадолженности.УстановитьЗначение(ТочкаНачисленоТекущее, Серия, СтрокаНачислено.Сумма);
				
				Серия       = ДиаграммаЗадолженности.УстановитьСерию("Период 2");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода2;
				Серия.Цвет  = СтруктураПараметров.ЦветЖелтый;
				
				ТочкаНачисленоДляСравнения       = ДиаграммаЗадолженности.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоДляСравнения.Текст = ТекстТочки;
				
				ДиаграммаЗадолженности.УстановитьЗначение(ТочкаНачисленоДляСравнения, Серия, СтрокаНачислено.СуммаДляСравнения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбластьДиаграмм.Вывести(МакетДиаграммаЗадолженности);
	
КонецПроцедуры

// Заполняет области диаграмм по разделу "Аварийно-диспетчерская служба" для сравнения.
Процедура ЗаполнитьОбластьДиаграммПоРазделуАДССравнение(РазделМонитора, ДанныеНачислений, ОбластьДиаграмм, Макет, СтруктураПараметров)
	
	ТипДиаграмм = ПолучитьТипДиаграммыПоВидуПериода(СтруктураПараметров.ВидПериода);
	
	// График по количеству заявок.
	МакетДиаграммаВсегоЗаявок                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыВсегоЗаявок                 = МакетДиаграммаВсегоЗаявок.Рисунки[0];
	РисунокДиаграммыВсегоЗаявок.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаВсегоЗаявок                        = РисунокДиаграммыВсегоЗаявок.Объект;
	ДиаграммаВсегоЗаявок.ТипДиаграммы           = ТипДиаграмм;
	ДиаграммаВсегоЗаявок.ОбластьЗаголовка.Текст = "Сравнение количества всех заявок,в шт.";
	
	// График по выполненным заявкам.
	МакетДиаграммаВыполненоЗаявок                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыВыполненоЗаявок                 = МакетДиаграммаВыполненоЗаявок.Рисунки[0];
	РисунокДиаграммыВыполненоЗаявок.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаВыполненоЗаявок                        = РисунокДиаграммыВыполненоЗаявок.Объект;
	ДиаграммаВыполненоЗаявок.ТипДиаграммы           = ТипДиаграмм;
	ДиаграммаВыполненоЗаявок.ОбластьЗаголовка.Текст = "Сравнение количества выполненных заявок,в шт.";
	
	МассивПараметров = Новый Массив;
	Для Каждого ТекущийПараметр Из ДанныеНачислений.Строки Цикл
		
		НайденныеСтрокиПараметра = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Представление", ТекущийПараметр.Представление));
		
		СтрокаВсегоЗаявок = Неопределено;
		СтрокаОплаты      = Неопределено;
		
		Если МассивПараметров.Найти(ТекущийПараметр.Представление) = Неопределено Тогда
			МассивПараметров.Добавить(ТекущийПараметр.Представление);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаПараметра Из НайденныеСтрокиПараметра Цикл
			
			Если ТекущаяСтрокаПараметра.Представление = "Всего заявок" Тогда
				СтрокаВсегоЗаявок = ТекущаяСтрокаПараметра;
				
				ТекстТочки = ТекущаяСтрокаПараметра.ПериодСтрока;
				
				Серия       = ДиаграммаВсегоЗаявок.УстановитьСерию("Период 1");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода1;
				Серия.Цвет  = СтруктураПараметров.ЦветКрасный;
				
				ТочкаНачисленоТекущее       = ДиаграммаВсегоЗаявок.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоТекущее.Текст = ТекстТочки;
				
				ДиаграммаВсегоЗаявок.УстановитьЗначение(ТочкаНачисленоТекущее, Серия, ТекущаяСтрокаПараметра.Сумма);
				
				Серия       = ДиаграммаВсегоЗаявок.УстановитьСерию("Период 2");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода2;
				Серия.Цвет  = СтруктураПараметров.ЦветЖелтый;
				
				ТочкаНачисленоДляСравнения       = ДиаграммаВсегоЗаявок.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоДляСравнения.Текст = ТекстТочки;
				
				ДиаграммаВсегоЗаявок.УстановитьЗначение(ТочкаНачисленоДляСравнения, Серия, ТекущаяСтрокаПараметра.СуммаДляСравнения);
				
			ИначеЕсли ТекущаяСтрокаПараметра.Представление = "Выполнено заявок" Тогда
				
				ТекстТочки = ТекущаяСтрокаПараметра.ПериодСтрока;
				
				Серия       = ДиаграммаВыполненоЗаявок.УстановитьСерию("Период 1");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода1;
				Серия.Цвет  = СтруктураПараметров.ЦветКрасный;
				
				ТочкаНачисленоТекущее       = ДиаграммаВыполненоЗаявок.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоТекущее.Текст = ТекстТочки;
				
				ДиаграммаВыполненоЗаявок.УстановитьЗначение(ТочкаНачисленоТекущее, Серия, ТекущаяСтрокаПараметра.Сумма);
				
				Серия       = ДиаграммаВыполненоЗаявок.УстановитьСерию("Период 2");
				Серия.Текст = СтруктураПараметров.ПредставлениеПериода2;
				Серия.Цвет  = СтруктураПараметров.ЦветЖелтый;
				
				ТочкаНачисленоДляСравнения       = ДиаграммаВыполненоЗаявок.УстановитьТочку(ТекстТочки);
				ТочкаНачисленоДляСравнения.Текст = ТекстТочки;
				
				ДиаграммаВыполненоЗаявок.УстановитьЗначение(ТочкаНачисленоДляСравнения, Серия, ТекущаяСтрокаПараметра.СуммаДляСравнения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбластьДиаграмм.Вывести(МакетДиаграммаВсегоЗаявок);
	ОбластьДиаграмм.Вывести(МакетДиаграммаВыполненоЗаявок);
	
КонецПроцедуры

// Заполняет области диаграмм по разделу "Сводные данные по начислениям и оплатам".
Процедура ЗаполнитьОбластьДиаграммПоРазделуСводныеДанныеПоНачислениямИОплатам(РазделМонитора, ДанныеНачислений, ОбластьДиаграмм, Макет, СтруктураПараметров)
	
	ТаблицаПериодов = СтруктураПараметров.ТаблицаПериодов;
	
	// График с начислениями и оплатами.
	МакетДиаграммаНачисленийИОплат                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыНачисленийИОплат                 = МакетДиаграммаНачисленийИОплат.Рисунки[0];
	РисунокДиаграммыНачисленийИОплат.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаНачисленийИОплат                        = РисунокДиаграммыНачисленийИОплат.Объект;
	ДиаграммаНачисленийИОплат.ТипДиаграммы           = ПолучитьТипДиаграммыПоТипуПериода(СтруктураПараметров.ТипПериода, СтруктураПараметров.ВидПериода, , СтруктураПараметров.ВыбранПериодЗаОдинМесяц);
	ДиаграммаНачисленийИОплат.ОбластьЗаголовка.Текст = "Начисления и оплаты за "
													  + СтруктураПараметров.ПредставлениеПериодаСтрока
													  + ", в "
													  + ?(СтруктураПараметров.ВариантОкругления = 1, НСтр("ru = 'руб.'"), НСтр("ru = 'тыс.руб.'"));
	// График Процент собираемости оплат.
	МакетДиаграммаПроцентСобираемостиОплат                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыПроцентСобираемостиОплат                 = МакетДиаграммаПроцентСобираемостиОплат.Рисунки[0];
	РисунокДиаграммыПроцентСобираемостиОплат.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаПроцентСобираемостиОплат                        = РисунокДиаграммыПроцентСобираемостиОплат.Объект;
	ДиаграммаПроцентСобираемостиОплат.ТипДиаграммы           = ПолучитьТипДиаграммыПоТипуПериода(СтруктураПараметров.ТипПериода, СтруктураПараметров.ВидПериода, Истина, СтруктураПараметров.ВыбранПериодЗаОдинМесяц);
	ДиаграммаПроцентСобираемостиОплат.ОбластьЗаголовка.Текст = "Процент собираемости оплат за "
															  + СтруктураПараметров.ПредставлениеПериодаСтрока + ", в %";
	ДанныеНачислений.Строки.Сортировать("Период Возр");
	
	Для Каждого ТекущийПериод Из ТаблицаПериодов Цикл
		
		ТекстТочки     = Формат(ТекущийПериод.Период,"ДФ='MMMM yy'");
		ПозицияПробела = Найти(ТекстТочки, " ");
		ТекстТочки     = "" + Лев(ТекстТочки, 3) + "." + СокрЛП(Прав(ТекстТочки, СтрДлина(ТекстТочки) - ПозицияПробела));
		
		НайденныеСтрокиПериода = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Период", ТекущийПериод.Период));
		
		СтрокаНачислено = Неопределено;
		СтрокаОплаты    = Неопределено;
		Для Каждого ТекущаяСтрокаПараметра Из НайденныеСтрокиПериода Цикл
			Если ТекущаяСтрокаПараметра.Представление = "Начисления" Тогда
				СтрокаНачислено = ТекущаяСтрокаПараметра;
			ИначеЕсли ТекущаяСтрокаПараметра.Представление = "Оплаты" Тогда
				СтрокаОплаты = ТекущаяСтрокаПараметра;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОплаты <> Неопределено И СтрокаНачислено <> Неопределено Тогда
				// Процент собираемости оплат.
				СерияПроцентСобираемости       = ДиаграммаПроцентСобираемостиОплат.УстановитьСерию("ПроцентСобираемостиОплат");
				СерияПроцентСобираемости.Текст = "Процент собираемости оплат";
				СерияПроцентСобираемости.Цвет  = СтруктураПараметров.ЦветЖелтый;
				
				ТочкаПроцентСобираемости       = ДиаграммаПроцентСобираемостиОплат.УстановитьТочку(ТекущийПериод.Период);
				ТочкаПроцентСобираемости.Текст = ТекстТочки;
				ПроцентСобираемостиОплат       = ?(СтрокаНачислено.Сумма = 0, 0, СтрокаОплаты.Сумма / СтрокаНачислено.Сумма) * 100;
				
				ДиаграммаПроцентСобираемостиОплат.УстановитьЗначение(ТочкаПроцентСобираемости, СерияПроцентСобираемости, ПроцентСобираемостиОплат);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаНачислено <> Неопределено Тогда
			Серия       = ДиаграммаНачисленийИОплат.УстановитьСерию("Начислено");
			Серия.Текст = "Начислено";
			Серия.Цвет  = СтруктураПараметров.ЦветКрасный;
			
			ТочкаНачислено       = ДиаграммаНачисленийИОплат.УстановитьТочку(ТекущийПериод.Период);
			ТочкаНачислено.Текст = ТекстТочки;
			
			ДиаграммаНачисленийИОплат.УстановитьЗначение(ТочкаНачислено, Серия, СтрокаНачислено.Сумма);
		КонецЕсли;
		
		Если СтрокаОплаты <> Неопределено Тогда
			Серия       = ДиаграммаНачисленийИОплат.УстановитьСерию("Оплаты");
			Серия.Текст = "Оплачено";
			Серия.Цвет  = СтруктураПараметров.ЦветЗеленый;
			
			ТочкаОплаты       = ДиаграммаНачисленийИОплат.УстановитьТочку(ТекущийПериод.Период);
			ТочкаОплаты.Текст = ТекстТочки;
			
			ДиаграммаНачисленийИОплат.УстановитьЗначение(ТочкаОплаты, Серия, СтрокаОплаты.Сумма);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьДиаграмм.Вывести(МакетДиаграммаНачисленийИОплат);
	ОбластьДиаграмм.Вывести(МакетДиаграммаПроцентСобираемостиОплат);
	
КонецПроцедуры

// Заполняет области диаграмм по разделу "Динамика задолженности по всем услугам".
Процедура ЗаполнитьОбластьДиаграммПоРазделуДинамикаЗадолженностиПоВсемУслугам(РазделМонитора, ДанныеНачислений, ОбластьДиаграмм, Макет, СтруктураПараметров)
	
	ТаблицаПериодов = СтруктураПараметров.ТаблицаПериодов;
	СтрокиОбщийДолг = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Представление", "Конечное сальдо"));
	
	Если СтрокиОбщийДолг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипГрафика = ПолучитьТипДиаграммыПоТипуПериода(СтруктураПараметров.ТипПериода, СтруктураПараметров.ВидПериода, , СтруктураПараметров.ВыбранПериодЗаОдинМесяц);
	
	// График общей задолженности.
	МакетДиаграммаОбщийДолг                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыОбщийДолг                 = МакетДиаграммаОбщийДолг.Рисунки[0];
	РисунокДиаграммыОбщийДолг.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаОбщийДолг                        = РисунокДиаграммыОбщийДолг.Объект;
	ДиаграммаОбщийДолг.ТипДиаграммы           = ТипГрафика;
	ДиаграммаОбщийДолг.ОбластьЗаголовка.Текст = "Задолженность за "
											  + СтруктураПараметров.ПредставлениеПериодаСтрока
											  + ", в "
											  + ?(СтруктураПараметров.ВариантОкругления = 1, НСтр("ru = 'руб.'"), НСтр("ru = 'тыс.руб.'"));
	
	// График задолженностей.
	МакетДиаграммаДолги                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыДолги                 = МакетДиаграммаДолги.Рисунки[0];
	РисунокДиаграммыДолги.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаДолги                        = РисунокДиаграммыДолги.Объект;
	ДиаграммаДолги.ТипДиаграммы           = ТипГрафика;
	ДиаграммаДолги.ОбластьЗаголовка.Текст = "Динамика задолженностей за "
										  + СтруктураПараметров.ПредставлениеПериодаСтрока
										  + ", в "
										  + ?(СтруктураПараметров.ВариантОкругления = 1, НСтр("ru = 'руб.'"), НСтр("ru = 'тыс.руб.'"));
	
	Для Каждого ТекущаяСтрокаПериода Из ТаблицаПериодов Цикл
		
		ТекущийПериод = ТекущаяСтрокаПериода.Период;
		
		НайденныеСтрокиДерева = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Период, Представление", ТекущийПериод, "Конечное сальдо"));
		Если НайденныеСтрокиДерева.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаДанных = НайденныеСтрокиДерева[0];
		
		ТекстТочки     = Формат(ТекущийПериод,"ДФ='MMMM yy'");
		ПозицияПробела = Найти(ТекстТочки, " ");
		ТекстТочки     = "" + Лев(ТекстТочки, 3) + "." + СокрЛП(Прав(ТекстТочки, СтрДлина(ТекстТочки) - ПозицияПробела));
		
		// Общая задолженность.
		СерияДолг       = ДиаграммаОбщийДолг.УстановитьСерию("ОбщаяЗадолженность");
		СерияДолг.Текст = "Задолженность";
		СерияДолг.Цвет  = СтруктураПараметров.ЦветКрасный;
		
		ТочкаОбщийДолг       = ДиаграммаОбщийДолг.УстановитьТочку(ТекущийПериод);
		ТочкаОбщийДолг.Текст = ТекстТочки;
		
		ДиаграммаОбщийДолг.УстановитьЗначение(ТочкаОбщийДолг, СерияДолг, СтрокаДанных.Сумма);
		
		Если СтрокаДанных.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПодСтрокаДанных Из СтрокаДанных.Строки Цикл
			
			ТочкаЗадолженности       = ДиаграммаДолги.УстановитьТочку(ТекущийПериод);
			ТочкаЗадолженности.Текст = ТекстТочки;
			
			Если ПодСтрокаДанных. Представление = "по пени" Тогда
				СерияДолгПени       = ДиаграммаДолги.УстановитьСерию("ЗадолженностьПени");
				СерияДолгПени.Текст = "Пени";
				СерияДолгПени.Цвет  = СтруктураПараметров.ЦветЖелтый;
				ДиаграммаДолги.УстановитьЗначение(ТочкаЗадолженности, СерияДолгПени, ПодСтрокаДанных.Сумма);
			КонецЕсли;
			
			Если ПодСтрокаДанных. Представление = "по начислениям" Тогда
				СерияДолгНачисления       = ДиаграммаДолги.УстановитьСерию("ЗадолженностьНачисления");
				СерияДолгНачисления.Текст = "Начисления";
				СерияДолгНачисления.Цвет  = СтруктураПараметров.ЦветКрасный;
				ДиаграммаДолги.УстановитьЗначение(ТочкаЗадолженности, СерияДолгНачисления, ПодСтрокаДанных.Сумма);
			КонецЕсли;
			
			Если ПодСтрокаДанных. Представление = "по рассрочке" Тогда
				СерияДолгРассрочка       = ДиаграммаДолги.УстановитьСерию("ЗадолженностьРассрочка");
				СерияДолгРассрочка.Текст = "Рассрочка";
				СерияДолгРассрочка.Цвет  = СтруктураПараметров.ЦветЗеленый;
				ДиаграммаДолги.УстановитьЗначение(ТочкаЗадолженности, СерияДолгРассрочка, ПодСтрокаДанных.Сумма);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбластьДиаграмм.Вывести(МакетДиаграммаОбщийДолг);
	ОбластьДиаграмм.Вывести(МакетДиаграммаДолги);
	
КонецПроцедуры

// Заполняет области диаграмм по разделу "Аварийно-диспетчерская служба".
Процедура ЗаполнитьОбластьДиаграммПоРазделуАДС(РазделМонитора, ДанныеНачислений, ОбластьДиаграмм, Макет, СтруктураПараметров)
	
	ТаблицаПериодов = СтруктураПараметров.ТаблицаПериодов;
	
	// График динамики заявок.
	МакетДиаграммаВсегоЗаявок                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыВсегоЗаявок                 = МакетДиаграммаВсегоЗаявок.Рисунки[0];
	РисунокДиаграммыВсегоЗаявок.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаВсегоЗаявок                        = РисунокДиаграммыВсегоЗаявок.Объект;
	ДиаграммаВсегоЗаявок.ТипДиаграммы           = ПолучитьТипДиаграммыПоТипуПериода(СтруктураПараметров.ТипПериода, СтруктураПараметров.ВидПериода, , СтруктураПараметров.ВыбранПериодЗаОдинМесяц);
	ДиаграммаВсегоЗаявок.ОбластьЗаголовка.Текст = "Динамика количества заявок за "
												  + СтруктураПараметров.ПредставлениеПериодаСтрока
												  + ", в шт.";
	
	// График динамики выполнения заявок.
	МакетДиаграммаВыполненоЗаявок                   = Макет.ПолучитьОбласть("Диаграмма");
	РисунокДиаграммыВыполненоЗаявок                 = МакетДиаграммаВыполненоЗаявок.Рисунки[0];
	РисунокДиаграммыВыполненоЗаявок.Расшифровка     = ПолучитьСтруктуруРасшифровки(РазделМонитора, СтруктураПараметров);
	ДиаграммаВыполненоЗаявок                        = РисунокДиаграммыВыполненоЗаявок.Объект;
	ДиаграммаВыполненоЗаявок.ТипДиаграммы           = ПолучитьТипДиаграммыПоТипуПериода(СтруктураПараметров.ТипПериода, СтруктураПараметров.ВидПериода, Истина, СтруктураПараметров.ВыбранПериодЗаОдинМесяц);
	ДиаграммаВыполненоЗаявок.ОбластьЗаголовка.Текст = "Процент выполнения заявок за "
													  + СтруктураПараметров.ПредставлениеПериодаСтрока
													  + ", в %.";
	
	Для Каждого ТекущаяСтрока Из ТаблицаПериодов Цикл
		
		ТекущийПериод = ТекущаяСтрока.Период;
		
		СтрокаДанныхВсегоЗаявок     = Неопределено;
		СтрокаДанныхВыполненоЗаявок = Неопределено;
		
		ТекстТочки     = Формат(ТекущийПериод,"ДФ='MMMM yy'");
		ПозицияПробела = Найти(ТекстТочки, " ");
		ТекстТочки     = "" + Лев(ТекстТочки, 3) + "." + СокрЛП(Прав(ТекстТочки, СтрДлина(ТекстТочки) - ПозицияПробела));
		
		НайденныеСтрокиДерева = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Период, Представление", ТекущийПериод, "Всего заявок"));
		Если НайденныеСтрокиДерева.Количество() > 0 Тогда
			СтрокаДанныхВсегоЗаявок = НайденныеСтрокиДерева[0];
			
			СерияВсегоЗаявок       = ДиаграммаВсегоЗаявок.УстановитьСерию("ВсегоЗаявок");
			СерияВсегоЗаявок.Текст = "Всего";
			СерияВсегоЗаявок.Цвет  = СтруктураПараметров.ЦветКрасный;
			
			ТочкаВсегоЗаявок       = ДиаграммаВсегоЗаявок.УстановитьТочку(ТекущийПериод);
			ТочкаВсегоЗаявок.Текст = ТекстТочки;
			
			ДиаграммаВсегоЗаявок.УстановитьЗначение(ТочкаВсегоЗаявок, СерияВсегоЗаявок, СтрокаДанныхВсегоЗаявок.Сумма);
		КонецЕсли;
		
		НайденныеСтрокиДерева = ДанныеНачислений.Строки.НайтиСтроки(Новый Структура("Период, Представление", ТекущийПериод, "Выполнено заявок"));
		Если НайденныеСтрокиДерева.Количество() > 0 Тогда
			СтрокаДанныхВыполненоЗаявок = НайденныеСтрокиДерева[0];
			
			СерияВыполненоЗаявок       = ДиаграммаВсегоЗаявок.УстановитьСерию("ВыполненоЗаявок");
			СерияВыполненоЗаявок.Текст = "Выполнено";
			СерияВыполненоЗаявок.Цвет  = СтруктураПараметров.ЦветЗеленый;
			
			ТочкаВыполненоЗаявок       = ДиаграммаВсегоЗаявок.УстановитьТочку(ТекущийПериод);
			ТочкаВыполненоЗаявок.Текст = ТекстТочки;
			
			ДиаграммаВсегоЗаявок.УстановитьЗначение(ТочкаВыполненоЗаявок, СерияВыполненоЗаявок, СтрокаДанныхВыполненоЗаявок.Сумма);
		КонецЕсли;
		
		Если СтрокаДанныхВсегоЗаявок <> Неопределено И СтрокаДанныхВыполненоЗаявок <> Неопределено Тогда
			// Динамика выполненных заявок.
			ТочкаВыполненныеЗаявки       = ДиаграммаВыполненоЗаявок.УстановитьТочку(ТекущийПериод);
			ТочкаВыполненныеЗаявки.Текст = ТекстТочки;
			
			СерияВыполненоЗаявок       = ДиаграммаВыполненоЗаявок.УстановитьСерию("ВыполненоЗаявок");
			СерияВыполненоЗаявок.Текст = "Выполненные заявки";
			СерияВыполненоЗаявок.Цвет  = СтруктураПараметров.ЦветЖелтый;
			
			ПроцентВыполнения = ?(СтрокаДанныхВсегоЗаявок.Сумма = 0, 0, СтрокаДанныхВыполненоЗаявок.Сумма / СтрокаДанныхВсегоЗаявок.Сумма) * 100;
			
			ДиаграммаВыполненоЗаявок.УстановитьЗначение(ТочкаВыполненныеЗаявки, СерияВыполненоЗаявок, ПроцентВыполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьДиаграмм.Вывести(МакетДиаграммаВсегоЗаявок);
	ОбластьДиаграмм.Вывести(МакетДиаграммаВыполненоЗаявок);
	
КонецПроцедуры // ЗаполнитьОбластьДиаграмм()

// Возвращает структуру расшифровки.
Функция ПолучитьСтруктуруРасшифровки(Раздел, СтруктураПараметров)
	
	СтруктураРасшифровки = Новый Структура;
	
	Если Раздел = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.СводныеДанныеПоНачислениямИОплатам Тогда
		
		СтруктураРасшифровки.Вставить("ФормаОтчета",  "Отчет.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта", "НачисленияИОплаты");
		
	ИначеЕсли Раздел = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.ДинамикаЗадолженностиПоВсемУслугам Тогда
		
		СтруктураРасшифровки.Вставить("ФормаОтчета",  "Отчет.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта", "ДинамикаЗадолженности");
		
	ИначеЕсли Раздел = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.АДС Тогда
		
		СтруктураРасшифровки.Вставить("ФормаОтчета", "Отчет.КВП_ОтчетПоЗаявкам.Форма.ФормаОтчета");
		
		Отбор = Новый Массив;
		Отбор.Добавить(Новый Структура("Поле, Значение, ВидСравнения",
					"Заявка.Организация", СтруктураПараметров.Организация, ВидСравненияКомпоновкиДанных.ВСписке));
		СтруктураРасшифровки.Вставить("Отбор", Отбор);
		
	КонецЕсли;
	
	Если СтруктураПараметров.ВыполнитьСравнение Тогда
		СтруктураРасшифровки.Вставить("НачалоПериода", СтруктураПараметров.НачалоПериода1);
		СтруктураРасшифровки.Вставить("КонецПериода",  СтруктураПараметров.КонецПериода2);
	Иначе
		СтруктураРасшифровки.Вставить("НачалоПериода", СтруктураПараметров.НачалоПериода1);
		СтруктураРасшифровки.Вставить("КонецПериода",  СтруктураПараметров.КонецПериода1);
	КонецЕсли;
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

#КонецОбласти

#Область Получение_данных

// Получает и возвращает таблицу с данными по разделам.
Функция ПолучитьДанныеПараметровДляМонитора(СтруктураПараметров, ДляДиаграмм = Ложь)
	
	ДанныеМонитора = ПустаяТаблицаДанных();
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация",       СтруктураПараметров.Организация);
	Параметры.Вставить("ВариантОкругления", СтруктураПараметров.ВариантОкругления);
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ДляДиаграмм Тогда
		Параметры.Вставить("НачалоПериода", СтруктураПараметров.НачалоПериода1);
		Параметры.Вставить("КонецПериода",  СтруктураПараметров.КонецПериода1);
	Иначе
		Параметры.Вставить("НачалоПериода", СтруктураПараметров.НачалоПериода1);
		Параметры.Вставить("КонецПериода",  СтруктураПараметров.КонецПериода1);
	КонецЕсли;
	
	ЗаполнитьДанныеМонитора(ДанныеМонитора, Параметры, СтруктураПараметров.СписокРазделов, Ложь);
	
	Если СтруктураПараметров.ВыполнитьСравнение Тогда
		
		Параметры.Вставить("НачалоПериода", СтруктураПараметров.НачалоПериода2);
		Параметры.Вставить("КонецПериода",  СтруктураПараметров.КонецПериода2);
		
		ЗаполнитьДанныеМонитора(ДанныеМонитора, Параметры, СтруктураПараметров.СписокРазделов, Истина);
	КонецЕсли;
	
	Возврат ДанныеМонитора;
	
КонецФункции

// Возвращает пустую таблицу для заполнения данными таблицу разделов.
Функция ПустаяТаблицаДанных()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("РазделМонитора",     Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_РазделыМонитораРуководителяЖКХ"));
	Таблица.Колонки.Добавить("ДанныеДляСравнения", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ДеревоДанных");
	
	Возврат Таблица;
	
КонецФункции

// Заполняет таблицу разделов данными.
Процедура ЗаполнитьДанныеМонитора(ДанныеМонитора, ПараметрыДанных, СписокРазделов, ДляСравнения)
	
	Для Каждого Раздел Из СписокРазделов Цикл
		
		ТекущийРаздел = Раздел.Значение;
		
		Данные = Неопределено;
		
		Если ТекущийРаздел = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.СводныеДанныеПоНачислениямИОплатам Тогда
			ПараметрыДанных.Вставить("ВариантОтчета", "НачисленияИОплаты");
			Данные = Отчеты.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.ПолучитьДанныеДляМонитораЖКХ(ПараметрыДанных, ТекущийРаздел);
		ИначеЕсли ТекущийРаздел = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.ДинамикаЗадолженностиПоВсемУслугам Тогда
			ПараметрыДанных.Вставить("ВариантОтчета", "ДинамикаЗадолженности");
			Данные = Отчеты.УПЖКХ_СводныеДанныеПоНачислениямИОплатам.ПолучитьДанныеДляМонитораЖКХ(ПараметрыДанных, ТекущийРаздел);
		ИначеЕсли ТекущийРаздел = Перечисления.УПЖКХ_РазделыМонитораРуководителяЖКХ.АДС Тогда
			Данные = Отчеты.КВП_ОтчетПоЗаявкам.ПолучитьДанныеДляМонитораЖКХ(ПараметрыДанных);
		КонецЕсли;
		
		Если Данные <> Неопределено Тогда
			НовыеДанные = ДанныеМонитора.Добавить();
			НовыеДанные.РазделМонитора     = ТекущийРаздел;
			НовыеДанные.ДеревоДанных       = Данные;
			НовыеДанные.ДанныеДляСравнения = ДляСравнения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли