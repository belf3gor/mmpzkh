
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.ТекущийПериод = ТекущаяДатаСеанса();
	СтандартныеНастройки = Обработки.УПЖКХ_МониторОсновныхПоказателейЖКХ.ПолучитьСтандартныеНастройки();
	АдресХранилища       = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ИБФайловая           = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	ВостановитьНастройки();
	
	ОбновитьСписокВидаПериода();
	
	ОбновитьГраницыПериодов();
	
	ОбновитьНаСервере();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаЧастоЗадаваемыеВопросы);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкуМонитора("ТипПериода", Объект.ТипПериода);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ОткрытьНастройкиМонитора" формы.
Процедура ОткрытьНастройкиМонитора(Команда)
	
	СохранитьНастройкуМонитора("ТипПериода", Объект.ТипПериода);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокРазделов",                  Объект.СписокРазделов);
	СтруктураПараметров.Вставить("ВариантОкругления",               Объект.ВариантОкругления);
	СтруктураПараметров.Вставить("ВыполнитьСравнение",              Объект.ВыполнитьСравнение);
	СтруктураПараметров.Вставить("ПоказыватьУведомлениеОНастройке", Объект.ПоказыватьУведомлениеОНастройке);
	
	ОткрытьФорму("Обработка.УПЖКХ_МониторОсновныхПоказателейЖКХ.Форма.ФормаНастройки",
				СтруктураПараметров,
				ЭтаФорма,
				Новый УникальныйИдентификатор,
				ВариантОткрытияОкна.ОтдельноеОкно,
				,
				Новый ОписаниеОповещения("ОткрытьНастройкиМонитораЗавершение", ЭтаФорма),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОтправитьПоЭлектроннойПочте" формы.
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ТемаПисьма = "Монитор основных показателей ЖКХ";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Тема",     ТемаПисьма);
	ДополнительныеПараметры.Вставить("ИмяФайла", ТемаПисьма);
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Обновить" формы.
Процедура Обновить(Команда)
	
	Если НЕ Объект.ВыполнитьСравнение
	   И Объект.ТипПериода = 5
	   И Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод")
	   И КонецПериода1 > КонецПериода2 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Период задан неверно! Начальный период не должен быть больше конечного периода.");
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьОбновлениеМонитора");
	
	УстановитьСостояниеПоляТабличногоДокумента("ПолучениеДанных");
	
	ПодключитьОбработчикОжидания("ОбновитьНаКлиенте", 0.5, Истина);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипПериода".
Процедура ТипПериодаПриИзменении(Элемент)
	
	ОбновитьГраницыПериодов();
	
	УправлениеФормой();
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "СкрытьУведомлениеОНастройке".
Процедура СкрытьУведомлениеОНастройкеНажатие(Элемент)
	
	Объект.ПоказыватьУведомлениеОНастройке = Ложь;
	
	СохранитьНастройкуМонитора("ПоказыватьУведомлениеОНастройке", Объект.ПоказыватьУведомлениеОНастройке);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "Результат".
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Расшифровка = Область.Расшифровка;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		
		ГруппировкаОтчета = ?(Расшифровка.Свойство("ГруппировкаОтчета"), Расшифровка.ГруппировкаОтчета, Неопределено);
		КлючВарианта      = ?(Расшифровка.Свойство("КлючВарианта"),      Расшифровка.КлючВарианта,      Неопределено);
		Отбор             = ?(Расшифровка.Свойство("Отбор"),             Расшифровка.Отбор,             Неопределено);
		НачалоПериода     = ?(Расшифровка.Свойство("НачалоПериода"),     Расшифровка.НачалоПериода,     Неопределено);
		КонецПериода      = ?(Расшифровка.Свойство("КонецПериода"),      Расшифровка.КонецПериода,      Неопределено);
		КлючеваяОперация  = ?(Расшифровка.Свойство("КлючеваяОперация"),  Расшифровка.КлючеваяОперация,  Неопределено);
		
		Если ЗначениеЗаполнено(КлючеваяОперация) Тогда
			ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
		КонецЕсли;
		
		ОткрытьОтчет(Расшифровка.ФормаОтчета, Отбор, КлючВарианта, НачалоПериода, КонецПериода);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииОбласти" поля "Результат".
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Организация".
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

#Область НастройкиПериодов

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	Если Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		ВидПериодаПереопределяемый = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
	Иначе
		ВидПериодаПереопределяемый = Объект.ВидПериода;
	КонецЕсли;
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
	ОбновитьГраницыПериодов();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ВидПериода".
Процедура ВидПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено
	   И (Объект.ВыполнитьСравнение ИЛИ Объект.ТипПериода = 5)
	   И Объект.ВидПериода = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период1".
Процедура Период1ПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период1Текст, НачалоПериода1, КонецПериода1);
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период1".
Процедура Период1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Период1НачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериодаПереопределяемый, НачалоПериода1, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода1.
Процедура Период1НачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		
		//Объект.ВидПериода = СтруктураПериода.ВидПериода;
		Период1Текст      = СтруктураПериода.Период;
		НачалоПериода1    = СтруктураПериода.НачалоПериода;
		КонецПериода1     = СтруктураПериода.КонецПериода;
		
		УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период1".
Процедура Период1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериодаПереопределяемый, Период1Текст, НачалоПериода1, КонецПериода1);
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период1".
Процедура Период1АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ВидПериодаПереопределяемый = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Текст = "";
	ИначеЕсли ВидПериодаПереопределяемый = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц")
	 ИЛИ ВидПериодаПереопределяемый = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Текст = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериодаПереопределяемый, Период1Текст, НачалоПериода1, КонецПериода1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период1".
Процедура Период1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериодаПереопределяемый, Период1Текст, НачалоПериода1, КонецПериода1);
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период2".
Процедура Период2ПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период2Текст, НачалоПериода2, КонецПериода2);
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период2".
Процедура Период2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Период2НачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериодаПереопределяемый, НачалоПериода2, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода2.
Процедура Период2НачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		
		//Объект.ВидПериода = СтруктураПериода.ВидПериода;
		Период2Текст      = СтруктураПериода.Период;
		НачалоПериода2    = СтруктураПериода.НачалоПериода;
		КонецПериода2     = СтруктураПериода.КонецПериода; 
		
		УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период2".
Процедура Период2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериодаПереопределяемый, Период2Текст, НачалоПериода2, КонецПериода2);
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период2".
Процедура Период2АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ВидПериодаПереопределяемый = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Текст = "";
	ИначеЕсли ВидПериодаПереопределяемый = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц")
	 ИЛИ ВидПериодаПереопределяемый = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Текст = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериодаПереопределяемый, Период2Текст, НачалоПериода2, КонецПериода2);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период2".
Процедура Период2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериодаПереопределяемый, Период2Текст, НачалоПериода2, КонецПериода2);
	
	УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Обработчик при активизации области поля "Результат".
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
// Вычисляет сумму значений полей табличного документа.
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает текст в поля периодов.
Процедура ОбновитьТекстыПериодов()
	
	Если Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
	Иначе
		ВидПериода = Объект.ВидПериода;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элементы.ВидПериода, ВидПериода, НачалоПериода1, КонецПериода1, Период1Текст);
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элементы.ВидПериода, ВидПериода, НачалоПериода2, КонецПериода2, Период2Текст);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает значения периодов.
Процедура ОбновитьГраницыПериодов()
	
	Если Объект.ВыполнитьСравнение Тогда
		
		ТекущийПериод1 = ?(НачалоПериода1 = Дата(1, 1, 1), Объект.ТекущийПериод, НачалоПериода1);
		ТекущийПериод2 = ?(НачалоПериода2 = Дата(1, 1, 1), Объект.ТекущийПериод, НачалоПериода2);
		
		Если ВидПериодаПереопределяемый = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
			
			НачалоПериода1 = НачалоМесяца(ТекущийПериод1);
			КонецПериода1  = КонецМесяца(ТекущийПериод1);
			
			НачалоПериода2 = НачалоМесяца(ТекущийПериод2);
			КонецПериода2  = КонецМесяца(ТекущийПериод2);
			
		ИначеЕсли ВидПериодаПереопределяемый = Перечисления.ДоступныеПериодыОтчета.Квартал Тогда
			
			НачалоПериода1 = НачалоГода(ТекущийПериод1);
			КонецПериода1  = КонецМесяца(ДобавитьМесяц(НачалоПериода1, 3));
			
			НачалоПериода2 = НачалоГода(ТекущийПериод2);
			КонецПериода2  = КонецМесяца(ДобавитьМесяц(НачалоПериода2, 3));
			
		ИначеЕсли ВидПериодаПереопределяемый = Перечисления.ДоступныеПериодыОтчета.Полугодие Тогда
			
			НачалоПериода1 = НачалоГода(ТекущийПериод1);
			КонецПериода1  = КонецМесяца(ДобавитьМесяц(НачалоПериода1, 6));
			
			НачалоПериода2 = НачалоГода(ТекущийПериод2);
			КонецПериода2  = КонецМесяца(ДобавитьМесяц(НачалоПериода2, 6));
			
		ИначеЕсли ВидПериодаПереопределяемый = Перечисления.ДоступныеПериодыОтчета.Год Тогда
			
			НачалоПериода1 = НачалоГода(ТекущийПериод1);
			КонецПериода1  = КонецГода(ТекущийПериод1);
			
			НачалоПериода2 = НачалоГода(ТекущийПериод2);
			КонецПериода2  = КонецГода(ТекущийПериод2);
			
		КонецЕсли;
		
	Иначе
		
		ТипПериода = Объект.ТипПериода;
		
		Если ТипПериода <> 5 Тогда
			ТекущийПериод = Объект.ТекущийПериод;
		Иначе
			ТекущийПериод = ?(НачалоПериода1 = Дата(1, 1, 1), Объект.ТекущийПериод, НачалоПериода1);
		КонецЕсли;
		
		Если ТипПериода = 0 Тогда
			
			НачалоПериода1 = НачалоМесяца(ТекущийПериод);
			КонецПериода1  = КонецМесяца(ТекущийПериод);
			
		ИначеЕсли ТипПериода = 1 Тогда
			
			НачалоПериода1 = НачалоМесяца(ДобавитьМесяц(ТекущийПериод, -1));
			КонецПериода1  = КонецМесяца(ДобавитьМесяц(ТекущийПериод, -1));
			
		ИначеЕсли ТипПериода = 2 Тогда
			
			НачалоПериода1 = НачалоГода(ТекущийПериод);
			КонецПериода1  = КонецМесяца(ТекущийПериод);
			
		ИначеЕсли ТипПериода = 3 Тогда
			
			НачалоПериода1 = НачалоГода(ТекущийПериод);
			КонецПериода1  = КонецМесяца(ДобавитьМесяц(ТекущийПериод, -1));
			
		ИначеЕсли ТипПериода = 4 Тогда
			
			НачалоПериода1 = НачалоГода(ДобавитьМесяц(ТекущийПериод, -12));
			КонецПериода1  = КонецГода(ДобавитьМесяц(ТекущийПериод, -12));
			
		ИначеЕсли ТипПериода = 5 Тогда
			
			НачалоПериода1 = НачалоМесяца(ТекущийПериод);
			КонецПериода1  = КонецМесяца(ТекущийПериод);
			НачалоПериода2 = НачалоМесяца(ТекущийПериод);
			КонецПериода2  = КонецМесяца(ТекущийПериод);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость элементов формы.
Процедура УправлениеФормой()
	
	Если Объект.ВыполнитьСравнение Тогда
		
		Элементы.ГруппаСтрока2.Видимость = Ложь;
		
		Элементы.Период1.Заголовок = "Сравнить данные за ";
		Элементы.Период2.Заголовок = "с данными за ";
		
		Элементы.Период2.Видимость       = Истина;
		Элементы.ГруппаСтрока3.Видимость = Истина;
		
		ОбновитьТекстыПериодов();
		
	Иначе
		
		Если Объект.ТипПериода = 5 Тогда
			Если Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
				Элементы.Период1.Заголовок = "Данные с";
				Элементы.Период2.Заголовок = "по";
				Элементы.Период2.Видимость = Истина;
			Иначе
				Элементы.Период1.Заголовок       = "Период";
				Элементы.Период2.Видимость       = Ложь;
			КонецЕсли;
			Элементы.ГруппаСтрока3.Видимость = Истина;
			
			ОбновитьТекстыПериодов();
			
		Иначе
			Элементы.ГруппаСтрока3.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаСтрока2.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаУведомлениеОНастройке.Видимость = Объект.ПоказыватьУведомлениеОНастройке;
	
КонецПроцедуры

&НаКлиенте
// Обрабточик результата закрытия формы настроек.
Процедура ОткрытьНастройкиМонитораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВостановитьНастройки();
	ОбновитьСписокВидаПериода();
	ОбновитьГраницыПериодов();
	УправлениеФормой();
	
	Обновить(Неопределено);
	
КонецПроцедуры

&НаСервере
// Процедура восстанавливает сохраненные значения реквизитов или
// устанавливает значения по умолчанию.
//
Процедура ВостановитьНастройки()
	
	РазделыМонитораИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителяЖКХ", "СписокРазделов");
	Если РазделыМонитораИзНастроек = Неопределено Тогда
		Объект.СписокРазделов = СтандартныеНастройки.СписокРазделов;
	Иначе
		Объект.СписокРазделов = РазделыМонитораИзНастроек;
	КонецЕсли;
	
	ПоказыватьУведомлениеИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителяЖКХ", "ПоказыватьУведомлениеОНастройке");
	Если ПоказыватьУведомлениеИзНастроек = Неопределено Тогда
		Объект.ПоказыватьУведомлениеОНастройке = СтандартныеНастройки.ПоказыватьУведомлениеОНастройке;
	Иначе
		Объект.ПоказыватьУведомлениеОНастройке = ПоказыватьУведомлениеИзНастроек;
	КонецЕсли;
	
	ВыполнитьСравнениеИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителяЖКХ", "ВыполнитьСравнение");
	Если ВыполнитьСравнениеИзНастроек = Неопределено Тогда
		Объект.ВыполнитьСравнение = СтандартныеНастройки.ВыполнитьСравнение;
	Иначе
		Объект.ВыполнитьСравнение = ВыполнитьСравнениеИзНастроек;
	КонецЕсли;
	
	ВариантОкругленияИзНастроек = ХранилищеОбщихНастроек.Загрузить("МониторРуководителяЖКХ", "ВариантОкругления");
	Если ВариантОкругленияИзНастроек = Неопределено Тогда
		// По умолчанию до тысяч рублей
		Объект.ВариантОкругления = СтандартныеНастройки.ВариантОкругления;
	Иначе
		// Нельзя допустить 0
		Объект.ВариантОкругления = Макс(ВариантОкругленияИзНастроек, 1);
	КонецЕсли;
	
	ТипПериодаПредыдущий = ХранилищеОбщихНастроек.Загрузить("МониторРуководителяЖКХ", "ТипПериода");
	Если ТипПериодаПредыдущий = Неопределено Тогда
		Объект.ТипПериода = СтандартныеНастройки.ТипПериода;
	Иначе
		Объект.ТипПериода = ТипПериодаПредыдущий;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура управляет состояние поля табличного документа.
//
// Параметры:
//  ПолеТабличногоДокумента - ПолеФормы - поле формы с видом ПолеТабличногоДокумента,
//                            для которого необходимо установить состояние.
//  Состояние               - Строка - задает вид состояния.
//
Процедура УстановитьСостояниеПоляТабличногоДокумента(Состояние = "НеИспользовать")
	
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
		ОтображениеСостояния.Видимость                      = Ложь;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка                       = Новый Картинка;
		ОтображениеСостояния.Текст                          = "";
	ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = Новый Картинка;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Данные не актуальны. Нажмите ""Обновить"" для получения данных.'");;
	ИначеЕсли ВРег(Состояние) = "ПОЛУЧЕНИЕДАННЫХ" Тогда  
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Получение данных...'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура сохраняет настройку в Хранилище общих настроек.
//
// Параметры:
//  КлючНастроек - 	Текст - имя ключа настройки.
//  Настройки	 - 	Произвольное значение - сохраняемое значение.
//
Процедура СохранитьНастройкуМонитора(КлючНастроек, Настройки)
	
	ХранилищеОбщихНастроек.Сохранить("МониторРуководителяЖКХ", КлючНастроек, Настройки);
	
КонецПроцедуры

&НаКлиенте
// Процедура запускает механизм получения данных.
Процедура ОбновитьНаКлиенте()
	
	Попытка
		
		РезультатВыполнения = ОбновитьНаСервере();
		
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
			ПараметрыОбработчикаОжидания = Неопределено;
			УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьОбновлениеМонитора", 1, Истина);
		КонецЕсли;
		
	Исключение
		
		УстановитьСостояниеПоляТабличногоДокумента("НеАктуальность");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить данные.
														 |Обратитесь за помощью к разработчикам: otr@rarus.ru");
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Откувает форму отчета.
Процедура ОткрытьОтчет(Отчет, Отборы = Неопределено, КлючВарианта = Неопределено,
						НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки( НачалоПериода, КонецПериода);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если Отборы <> Неопределено И ТипЗнч(Отборы) = Тип("Массив") Тогда
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
		КонецЦикла;
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии",   Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки",            2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
// Возвращает структуру расшифровки.
Функция ПользовательскиеНастройкиДляРасшифровки(Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено)
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = НачалоМесяца(Объект.ТекущийПериод);
	КонецЕсли;
	
	Если КонецПериода = Неопределено Тогда
		КонецПериода = Объект.ТекущийПериод;
	КонецЕсли;
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю.
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",	Истина);
	ДополнительныеСвойства.Вставить("Организация", 		Объект.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 	НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода", 	КонецПериода);
	ДополнительныеСвойства.Вставить("Период", 			Объект.ТекущийПериод);
	
	Если Объект.ВариантОкругления = 1000 Тогда
		
		// Установим формат цифр для рублевых сумм
		ТекущееУсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		ТекущееУсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		ЭлементУсловногоОформления = ТекущееУсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Суммы в тыс.'");
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление,"Формат", "ЧДЦ=; ЧС=3");
		ЭлементУсловногоОформления.Использование = Истина;
		
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаСервере
// Заполняет список выбора поля "Вид периода".
Процедура ОбновитьСписокВидаПериода()
	
	СписокВидовПериодов = Элементы.ВидПериода.СписокВыбора;
	
	СписокВидовПериодов.Очистить();
	
	Если СписокВидовПериодов.НайтиПоЗначению(Перечисления.ДоступныеПериодыОтчета.Месяц) = Неопределено Тогда
		СписокВидовПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Месяц);
	КонецЕсли;
	
	Если СписокВидовПериодов.НайтиПоЗначению(Перечисления.ДоступныеПериодыОтчета.Квартал) = Неопределено Тогда
		СписокВидовПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Квартал);
	КонецЕсли;
	
	Если СписокВидовПериодов.НайтиПоЗначению(Перечисления.ДоступныеПериодыОтчета.Полугодие) = Неопределено Тогда
		СписокВидовПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Полугодие);
	КонецЕсли;
	
	Если СписокВидовПериодов.НайтиПоЗначению(Перечисления.ДоступныеПериодыОтчета.Год) = Неопределено Тогда
		СписокВидовПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.Год);
	КонецЕсли;
	
	НайденныйЭлементПроизвольныйПериод = СписокВидовПериодов.НайтиПоЗначению(Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод);
	Если Объект.ВыполнитьСравнение И НайденныйЭлементПроизвольныйПериод <> Неопределено Тогда
		СписокВидовПериодов.Удалить(НайденныйЭлементПроизвольныйПериод);
	ИначеЕсли НЕ Объект.ВыполнитьСравнение И НайденныйЭлементПроизвольныйПериод = Неопределено Тогда
		СписокВидовПериодов.Добавить(Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод);
	КонецЕсли;
	
	Если Объект.ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПустаяСсылка()
	 ИЛИ Объект.ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
		Объект.ВидПериода = Перечисления.ДоступныеПериодыОтчета.Месяц;
		ВидПериодаПереопределяемый = Объект.ВидПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция получает данные для вывода.
Функция ОбновитьНаСервере()
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияОбновлениеМонитора);
	
	ИдентификаторЗаданияОбновлениеМонитора = Неопределено;
	
	Отказ = Ложь;
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	
	Если СтруктураПараметров = Неопределено Тогда
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Если ИБФайловая Тогда
		Обработки.УПЖКХ_МониторОсновныхПоказателейЖКХ.ОбновитьДанные(СтруктураПараметров, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"Обработки.УПЖКХ_МониторОсновныхПоказателейЖКХ.ОбновитьДанные",
						СтруктураПараметров,
						"Обновление монитора ЖКХ");
						
		АдресХранилища                         = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗаданияОбновлениеМонитора = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
// Процедура проверяет выполнение задания.
Процедура Подключаемый_ПроверитьОбновлениеМонитора()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗаданияОбновлениеМонитора) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УстановитьСостояниеПоляТабличногоДокумента("НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьОбновлениеМонитора",
										 ПараметрыОбработчикаОжидания.ТекущийИнтервал,
										 Истина);
		КонецЕсли;
	Исключение
		УстановитьСостояниеПоляТабличногоДокумента("НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	Результат.Очистить();
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УстановитьСостояниеПоляТабличногоДокумента("НеИспользовать");
	
КонецПроцедуры

&НаСервере
// Функция заполняет и возвращает структура параметров.
Функция ПолучитьСтруктуруПараметров()
	
	СписокРазделов = Новый СписокЗначений;
	Для Каждого ТекущийРаздел Из Объект.СписокРазделов Цикл
		Если ТекущийРаздел.Пометка Тогда
			СписокРазделов.Добавить(ТекущийРаздел.Значение, ТекущийРаздел.Представление, ТекущийРаздел.Пометка);
		КонецЕсли;
	КонецЦикла;
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		СписокОрганизаций = Новый СписокЗначений;
		Для Каждого ТекущаяОрганизация Из СписокДоступныхОрганизаций Цикл
			СписокОрганизаций.Добавить(ТекущаяОрганизация);
		КонецЦикла;
	ИначеЕсли СписокДоступныхОрганизаций.Найти(Объект.Организация) <> Неопределено Тогда
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Объект.Организация);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",        СписокОрганизаций);
	СтруктураПараметров.Вставить("ТипПериода",         Объект.ТипПериода);
	СтруктураПараметров.Вставить("ВидПериода",         Объект.ВидПериода);
	СтруктураПараметров.Вставить("ВыполнитьСравнение", Объект.ВыполнитьСравнение);
	СтруктураПараметров.Вставить("СписокРазделов",     СписокРазделов);
	СтруктураПараметров.Вставить("ТекущийПериод",      Объект.ТекущийПериод);
	СтруктураПараметров.Вставить("АдресХранилища",     АдресХранилища);
	СтруктураПараметров.Вставить("ИнтервалОбновления", 600);
	СтруктураПараметров.Вставить("ВариантОкругления",  Объект.ВариантОкругления);
	СтруктураПараметров.Вставить("НачалоПериода1",     НачалоПериода1);
	
	Если Объект.ВыполнитьСравнение Тогда
		СтруктураПараметров.Вставить("КонецПериода1",  КонецПериода1);
		СтруктураПараметров.Вставить("НачалоПериода2", НачалоПериода2);
		СтруктураПараметров.Вставить("КонецПериода2",  КонецПериода2);
		
		СтруктураПараметров.Вставить("ПредставлениеПериода1", ?(ПустаяСтрока(Период1Текст), Формат(НачалоПериода1, "ДФ='ММММ гггг'"), Период1Текст) + "г.");
		СтруктураПараметров.Вставить("ПредставлениеПериода2", ?(ПустаяСтрока(Период2Текст), Формат(НачалоПериода2, "ДФ='ММММ гггг'"), Период2Текст) + "г.");
	Иначе
		Если Объект.ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
			СтруктураПараметров.Вставить("КонецПериода1", КонецПериода2);
		Иначе
			СтруктураПараметров.Вставить("КонецПериода1", КонецПериода1);;
		КонецЕсли;
		ВыбранПериодЗаОдинМесяц = Год(СтруктураПараметров.НачалоПериода1) = Год(СтруктураПараметров.КонецПериода1)
								И Месяц(СтруктураПараметров.НачалоПериода1) = Месяц(СтруктураПараметров.КонецПериода1);
		СтруктураПараметров.Вставить("ВыбранПериодЗаОдинМесяц", ВыбранПериодЗаОдинМесяц);
		СтруктураПараметров.Вставить("ПредставлениеПериода1", ПолучитьПредставлениеПериодаБыстрогоОтбора(ВыбранПериодЗаОдинМесяц))
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЦветКрасный", Новый Цвет(255, 163, 132));
	СтруктураПараметров.Вставить("ЦветЗеленый", Новый Цвет(192, 255, 202));
	СтруктураПараметров.Вставить("ЦветЖелтый",  Новый Цвет(251, 225, 81));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
// Функция формирует и возвращает строку периода.
Функция ПолучитьПредставлениеПериодаБыстрогоОтбора(ВыбранПериодЗаОдинМесяц)
	
	Если Объект.ТипПериода = 0 ИЛИ Объект.ТипПериода = 1 Тогда
		ПредставлениеПериода = Формат(НачалоПериода1, "ДФ='ММММ гггг'") + "г.";
	ИначеЕсли Объект.ТипПериода = 2 ИЛИ Объект.ТипПериода = 3 Тогда
		ПредставлениеПериода = Формат(НачалоПериода1, "ДФ='ММММ'") + " - "
							 + Формат(КонецПериода1, "ДФ='ММММ'")
							 + " "
							 + Формат(НачалоПериода1, "ДФ=гггг")
							 + "г.";
	ИначеЕсли Объект.ТипПериода = 4 Тогда
		ПредставлениеПериода = Формат(НачалоПериода1, "ДФ='гггг'") + "г.";
	ИначеЕсли Объект.ТипПериода = 5 Тогда
		Если Объект.ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
			Если ВыбранПериодЗаОдинМесяц Тогда
				ПредставлениеПериода = Формат(НачалоПериода1, "ДФ='ММММ гггг'")
									 + "г.";
			ИначеЕсли Год(НачалоПериода1) = Год(НачалоПериода2) Тогда
				ПредставлениеПериода = Формат(НачалоПериода1, "ДФ=ММММ")
									 + " - "
									 + Формат(НачалоПериода2, "ДФ=ММММ")
									 + " "
									 + Формат(НачалоПериода1, "ДФ=гггг")
									 + "г.";
			Иначе
				ПредставлениеПериода = ?(ПустаяСтрока(Период1Текст), Формат(НачалоПериода1, "ДФ='ММММ гггг'"), Период1Текст) + "г. - "
									 + ?(ПустаяСтрока(Период2Текст), Формат(НачалоПериода2, "ДФ='ММММ гггг'"), Период2Текст) + "г.";
			КонецЕсли;
		Иначе
			ПредставлениеПериода = ?(ПустаяСтрока(Период1Текст), Формат(НачалоПериода1, "ДФ='ММММ гггг'"), Период1Текст) + "г.";
		КонецЕсли;
	Иначе
		ПредставлениеПериода = Формат(НачалоПериода1, "ДФ='ММММ гггг'") + "г.";
	КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

#КонецОбласти
