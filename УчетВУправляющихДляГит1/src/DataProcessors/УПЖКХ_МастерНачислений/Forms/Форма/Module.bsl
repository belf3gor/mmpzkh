
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЕ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Процедура устанавливает видимость элементов формы.
Процедура УправлениеФормой()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Элементы.КомандаНазад.Доступность        = Ложь;
		Элементы.КомандаДалее.Заголовок          = "Далее >>";
		Элементы.КомандаДалее.Доступность        = Истина;
		Элементы.КомандаДалее.Видимость          = Истина;
		Элементы.СформироватьДокументы.Видимость = Ложь;
		
	
		// Заблокируем настройки "Мастера начислений" для случая продолжения незавершенной задачи.
		Если ЭтоПродолжениеЗадачи Тогда
			
			Элементы.ГруппаПериодФормирования.ТолькоПросмотр        = Истина;
			Элементы.Организация.ТолькоПросмотр                     = Истина;
			Элементы.НачислятьУслуги.ТолькоПросмотр                 = Истина;
			Элементы.НачислятьЛьготы.ТолькоПросмотр                 = Истина;
			Элементы.НачислятьПени.ТолькоПросмотр                   = Истина;
			Элементы.ЗакрытьПериодПоНачислениямЖКХ.ТолькоПросмотр   = Истина;
			Элементы.ДеревоУслугВыбратьНастройкуУслуг.Доступность   = Ложь;
			Элементы.ДеревоУслугСохранитьНастройкуУслуг.Доступность = Ложь;
			Элементы.ДеревоУслугУдалитьНастройкуУслуг.Доступность   = Ложь;
			
			Элементы.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам.Доступность = Ложь;
	
		КонецЕсли;
		
		// Определим видимость настройки дня регистрации документов.
		Элементы.ДеньРегистрацииДокументов.Видимость = (ВариантРегистрацииДокументов = 1);
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап2 Тогда
		
		ЗаполнитьДеревоУслуг();
		РасставитьФлажкиУслуг();
		Элементы.ДеревоУслуг.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		
		Элементы.КомандаНазад.Доступность        = Истина;
		Элементы.КомандаДалее.Заголовок          = "Далее >>";
		Элементы.КомандаДалее.Доступность        = Истина;
		Элементы.КомандаДалее.КнопкаПоУмолчанию  = Истина;
		Элементы.КомандаДалее.Видимость          = Истина;
		Элементы.СформироватьДокументы.Видимость = Ложь;
	
		Элементы.ДеревоУслугФормироватьНачисления.Видимость = Объект.НачислятьУслуги;
		Элементы.ДеревоУслугФормироватьЛьготы.Видимость     = Объект.НачислятьЛьготы;
	
		Элементы.ГруппаУслуги.Видимость = Объект.НачислятьУслуги ИЛИ Объект.НачислятьЛьготы;
	
		// Заблокируем настройки "Мастера начислений" для случая продолжения незавершенной задачи.
		Если ЭтоПродолжениеЗадачи Тогда
			
			Элементы.Здания.ТолькоПросмотр               = Истина;
			Элементы.ЗданияЗаполнить.Доступность         = Ложь;
			Элементы.ЗданияЗаполнитьСОтбором.Доступность = Ложь;
			
			РасставитьФлажкиУслуг();
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап3 Тогда
		
		Элементы.КомандаНазад.Доступность        = Истина;
		Элементы.КомандаДалее.Заголовок          = "Закрыть";
		Элементы.КомандаДалее.Видимость          = Ложь;
		Элементы.СформироватьДокументы.Видимость = Истина;
		
		Элементы.СформироватьДокументы.КнопкаПоУмолчанию = Истина;
		// Скроем группу, отображающую прогресс формирования документов.
		Элементы.ГруппаПрогрессФормированияДокументов.Видимость = Ложь;
	
		ЗаполнитьСпискиДокументов();
		Элементы.ДеревоДокументовНачисленияУслуг.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		Элементы.ДеревоДокументовНачисленияЛьгот.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		
		Элементы.ДокументыНачисления.Видимость      = Объект.НачислятьУслуги;
		Элементы.ДокументыЛьгот.Видимость           = Объект.НачислятьЛьготы;
		Элементы.ДокументыПени.Видимость            = Объект.НачислятьПени;
		Элементы.ДокументыЗакрытияПериода.Видимость = Объект.ЗакрытьПериодПоНачислениямЖКХ;
		
	КонецЕсли;
	
	// Если база серверная и многопоточность не используется, показываем гиперссылку.
	Если УПЖКХ_МногопоточнаяОбработкаДанных.ПоказыватьСсылкиНаСтраницуНастроекМногопоточности() Тогда
		
		Если УПЖКХ_МногопоточнаяОбработкаДанных.ПроверитьВключенаЛиМногопоточнаяОбработкаДанных() Тогда
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "При расчете начислений используется многопоточная обработка данных. Нажмите, чтобы перейти к настройке многопоточности";
		Иначе
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "Механизм расчета начислений может работать быстрее при использовании многопоточной обработки данных. Нажмите, чтобы перейти к настройке многопоточности";
		КонецЕсли;
		
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Истина;
		
	Иначе
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Ложь
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет необходимые действия с формой после завершения формирования всех документов.
Процедура ОбработатьДанныеФормы(СтруктураСформированныхДокументов)
	
	// Скроем группу, отображающую прогресс формирования документов.
	Элементы.ГруппаПрогрессФормированияДокументов.Видимость = Ложь;
	Элементы.ПредупреждениеПередЗапуском.Видимость = Ложь;
	
	ЗаполнитьСпискиДокументов(Истина);
	
	// Разворачиваем дерево документов начисления услуг.
	Если Объект.НачислятьУслуги Тогда
		Элементы.ДеревоДокументовНачисленияУслуг.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	// Разворачиваем дерево документов расчета льгот.
	Если Объект.НачислятьЛьготы Тогда
		Элементы.ДеревоДокументовНачисленияЛьгот.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	Элементы.КомандаДалее.Видимость = Истина;
	Элементы.СформироватьДокументы.Видимость = Ложь;
	
	Элементы.КомандаДалее.Доступность = Истина;
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	
	ВывестиИнформациюПользователю(СтруктураСформированныхДокументов);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет переход к следующему этапу.
Процедура ПоказатьСледующийЭтап()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап2;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап3;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап3 Тогда
		
		Закрыть();
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет переход к предыдущему этапу.
Процедура ПоказатьПредыдущийЭтап()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап1;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап3 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап2;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура блокирует доступность некоторых кнопок формы после начала формирования документов.
Процедура ЗаблокироватьДоступностьКнопокНаФорме()
	
	Элементы.КомандаНазад.Доступность          = Ложь;
	Элементы.СформироватьДокументы.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура выводит пользователю информацию о затраченном на формирование документов времени
// и количестве сформированных документов.
Процедура ВывестиИнформациюПользователю(СтруктураСформированныхДокументов)
	
	ВремяОкончанияФормирования = ТекущаяДата();
	
	КоличествоПустыхДокументовНачисленияНаЛС        = СтруктураСформированныхДокументов.КоличествоПустыхДокументовНачисленияНаЛС;
	КоличествоПустыхДокументовНачисленияСтрахования = СтруктураСформированныхДокументов.КоличествоПустыхДокументовНачисленияСтрахования;
	КоличествоПустыхДокументовНачисленияПоПУ        = СтруктураСформированныхДокументов.КоличествоПустыхДокументовНачисленияПоПУ;
	КоличествоПустыхДокументовНачисленияЛьгот       = СтруктураСформированныхДокументов.КоличествоПустыхДокументовНачисленияЛьгот;
	КоличествоПустыхДокументовНачисленияПени        = СтруктураСформированныхДокументов.КоличествоПустыхДокументовНачисленияПени;
	
	КоличествоДокументовНачисленияНаЛС        = СтруктураСформированныхДокументов.КоличествоДокументовНачисленияНаЛС - КоличествоПустыхДокументовНачисленияНаЛС;
	КоличествоДокументовНачисленияСтрахования = СтруктураСформированныхДокументов.КоличествоДокументовНачисленияСтрахования  - КоличествоПустыхДокументовНачисленияСтрахования;
	КоличествоДокументовНачисленияПоПУ        = СтруктураСформированныхДокументов.КоличествоДокументовНачисленияПоПУ - КоличествоПустыхДокументовНачисленияПоПУ;
	КоличествоДокументовНачисленияЛьгот       = СтруктураСформированныхДокументов.КоличествоДокументовНачисленияЛьгот - КоличествоПустыхДокументовНачисленияЛьгот;
	КоличествоДокументовНачисленияПени        = СтруктураСформированныхДокументов.КоличествоДокументовНачисленияПени - КоличествоПустыхДокументовНачисленияПени;
	КоличествоДокументовЗакрытияПериода       = СтруктураСформированныхДокументов.КоличествоДокументовЗакрытияПериода;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("" + ВремяОкончанияФормирования + " - Формирование документов завершено.");
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформировано: ");
	
	СтрокаСообщения = ?(Объект.НачислятьУслуги,
					"" + КоличествоДокументовНачисленияНаЛС + " документ(а\ов) начисления услуг на лицевые счета" + ?(КоличествоПустыхДокументовНачисленияНаЛС > 0, ", не сформировано пустых документов: " + КоличествоПустыхДокументовНачисленияНаЛС, ""),"");
	
	Если НЕ СтрокаСообщения = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	
	СтрокаСообщения = ?(Объект.НачислятьУслуги,
					"" + КоличествоДокументовНачисленияСтрахования + " документ(а\ов) начисления добровольного страхования" + ?(КоличествоПустыхДокументовНачисленияСтрахования > 0, ", не сформировано пустых документов: " + КоличествоПустыхДокументовНачисленияСтрахования, ""),"");
	
	Если НЕ СтрокаСообщения = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	
	СтрокаСообщения = ?(Объект.НачислятьУслуги,
					"" + КоличествоДокументовНачисленияПоПУ + " документ(а\ов) начисления услуг по приборам учета" + ?(КоличествоПустыхДокументовНачисленияПоПУ > 0, ", не сформировано пустых документов: " + КоличествоПустыхДокументовНачисленияПоПУ, ""),"");
	
	Если НЕ СтрокаСообщения = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	
	СтрокаСообщения = ?(Объект.НачислятьЛьготы,
					"" + КоличествоДокументовНачисленияЛьгот + " документ(а\ов) расчета льгот" + ?(КоличествоПустыхДокументовНачисленияЛьгот > 0, ", не сформировано пустых документов: " + КоличествоПустыхДокументовНачисленияЛьгот, ""),"");
	
	Если НЕ СтрокаСообщения = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	
	СтрокаСообщения = ?(Объект.НачислятьПени,
					"" + КоличествоДокументовНачисленияПени  + " документ(а\ов) начисления пени" + ?(КоличествоПустыхДокументовНачисленияПени > 0, ", не сформировано пустых документов: " + КоличествоПустыхДокументовНачисленияПени, ""),"");
	
	Если НЕ СтрокаСообщения = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;

	СтрокаСообщения = ?(Объект.ЗакрытьПериодПоНачислениямЖКХ, "" + КоличествоДокументовЗакрытияПериода + " документ(а\ов) закрытия периода","");

	Если НЕ СтрокаСообщения = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	
	ВремяФормирования = ВремяОкончанияФормирования - ВремяНачалаФормирования;
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Общее время формирования документов - " + ПолучитьВремя(ВремяФормирования));
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает время от числа переданных секунд с разбивкой по часам, минутам и секундам.
Функция ПолучитьВремя(Значение)
	
	Значение = Число(Значение);
	КоличествоСекунд = Значение % 60;
	Если КоличествоСекунд > 0 Тогда
		Результат = "" + КоличествоСекунд + " сек."
	КонецЕсли;
	
	КоличествоМинут = Цел(Значение / 60) % 60;
	Если КоличествоМинут > 0 Тогда
		Результат = "" + КоличествоМинут + " мин. " + Результат;
	КонецЕсли;
	
	КоличествоЧасов = Цел(Значение / 3600);
	Если КоличествоЧасов > 0 Тогда
		Результат = "" + КоличествоЧасов + " ч. " + Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
// Процедура очищает временные данные регистра сведений.
Процедура ОчиститьВременныеДанныеРегистра(ИдентификаторСеанса)
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
// Процедура снимает флаг "Заблокировано" со всех записей регистра сведений "Задачи сеансов мастера начислений"
// с текущим идентификатором сеанса.
// Необходимо снимать данный флаг, т.к. в случае возникновения сбоя, например
// выключение компьютера/сервера, в регистре могут быть записи, заблокированные не отработавшим до конца
// фоновым заданием.
// Поэтому необходимо "освободить" данные записи, чтобы не нарушить последовательность
// выполнения заданий с учетом всех приоритетов.
Процедура СнятьБлокировкиЗаписейРегистра(ИдентификаторСеанса)
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
	НаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.ЗаписьЗаблокирована = Ложь;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
// Процедура-прослойка между клиентом и сервером, вызывается для заполнения
// таблицы значений формы "ТаблицаПриоритетовУслуг".
// 
Процедура ЗаполнитьТаблицуПриоритетовУслугНаСервере()
	
	ТЗТаблицаПриоритетовУслуг = ПолучитьТаблицуПриоритетовУслуг();
	Если НЕ ТЗТаблицаПриоритетовУслуг = Неопределено Тогда
		ЗначениеВРеквизитФормы(ТЗТаблицаПриоритетовУслуг, "ТаблицаПриоритетовУслуг");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуПриоритетовУслугНаСервере()

&НаСервере
// Функция получает список приоритетов для услуг документов "Начисления услуг".
Функция ПолучитьТаблицуПриоритетовУслуг()
	
	ТЗТаблицаПриоритетовУслуг = Новый ТаблицаЗначений;
	ТЗТаблицаПриоритетовУслуг.Колонки.Добавить("Услуга",                      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТЗТаблицаПриоритетовУслуг.Колонки.Добавить("Приоритет",                   Новый ОписаниеТипов("Число"));
	ТЗТаблицаПриоритетовУслуг.Колонки.Добавить("НачислятьУслугуСОбщедомовой", Новый ОписаниеТипов("Булево"));
	ТЗТаблицаПриоритетовУслуг.Колонки.Добавить("УслугаОбщедомовогоСчетчика",  Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	ЗаполнитьТабличнуюЧастьУслуги();
	
	// Услуги НЕ по ПУ будем начислять в первую очередь - у них будет самый минимальный приоритет "1".
	Приоритет = 1;
	
	СписокУслугЛС = Объект.Услуги.Выгрузить(Новый Структура("ЭтоУслугаЛС", Истина)).ВыгрузитьКолонку("Услуга");
	
	Для Каждого ТекУслугаЛС Из СписокУслугЛС Цикл
		
		СтрокаТаблицыПриоритетовУслуг           = ТЗТаблицаПриоритетовУслуг.Добавить();
		СтрокаТаблицыПриоритетовУслуг.Услуга    = ТекУслугаЛС;
		СтрокаТаблицыПриоритетовУслуг.Приоритет = Приоритет;
		
	КонецЦикла;
	
	
	// Для услуг по ПУ нужно определить приоритеты для определения порядка начисления услуг.
	СписокУслугПоПУ = Объект.Услуги.Выгрузить(Новый Структура("ЭтоУслугаЛС", Ложь));
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслугПоПУ.Услуга КАК Услуга
	|ПОМЕСТИТЬ ТаблицаУслугПоПУ
	|ИЗ
	|	&СписокУслугПоПУ КАК ТаблицаУслугПоПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.Услуга КАК УслугаОснование
	|ПОМЕСТИТЬ ТаблицаУслугОснований
	|ИЗ
	|	РегистрСведений.УПЖКХ_УслугиОбщедомовогоСчетчика КАК УПЖКХ_УслугиОбщедомовогоСчетчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.УслугаОбщедомовогоСчетчика КАК УслугаОбщедомовогоСчетчика
	|ПОМЕСТИТЬ ТаблицаОбщедомовыхУслуг
	|ИЗ
	|	РегистрСведений.УПЖКХ_УслугиОбщедомовогоСчетчика КАК УПЖКХ_УслугиОбщедомовогоСчетчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслугПоПУ.Услуга
	|ИЗ
	|	ТаблицаУслугПоПУ КАК ТаблицаУслугПоПУ
	|ГДЕ
	|	НЕ ТаблицаУслугПоПУ.Услуга В
	|				(ВЫБРАТЬ
	|					ТаблицаУслугОснований.УслугаОснование
	|				ИЗ
	|					ТаблицаУслугОснований)
	|	И НЕ ТаблицаУслугПоПУ.Услуга В
	|				(ВЫБРАТЬ
	|					ТаблицаОбщедомовыхУслуг.УслугаОбщедомовогоСчетчика
	|				ИЗ
	|					ТаблицаОбщедомовыхУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.Услуга
	|ИЗ
	|	РегистрСведений.УПЖКХ_УслугиОбщедомовогоСчетчика КАК УПЖКХ_УслугиОбщедомовогоСчетчика
	|ГДЕ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.Услуга В
	|			(ВЫБРАТЬ
	|				ТаблицаУслугПоПУ.Услуга
	|			ИЗ
	|				ТаблицаУслугПоПУ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.УслугаОбщедомовогоСчетчика
	|ИЗ
	|	РегистрСведений.УПЖКХ_УслугиОбщедомовогоСчетчика КАК УПЖКХ_УслугиОбщедомовогоСчетчика
	|ГДЕ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.УслугаОбщедомовогоСчетчика В
	|			(ВЫБРАТЬ
	|				ТаблицаУслугПоПУ.Услуга
	|			ИЗ
	|				ТаблицаУслугПоПУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.Услуга КАК УслугаОснование,
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.УслугаОбщедомовогоСчетчика,
	|	УПЖКХ_УслугиОбщедомовогоСчетчика.РаспределятьНаУслугуБазаРасчета
	|ИЗ
	|	РегистрСведений.УПЖКХ_УслугиОбщедомовогоСчетчика КАК УПЖКХ_УслугиОбщедомовогоСчетчика";
	Запрос.УстановитьПараметр("СписокУслугПоПУ", СписокУслугПоПУ);
	
	ПакетРезультат = Запрос.ВыполнитьПакет();
	
	// Услуги по ПУ, которые не входят в состав регистра сведений "Услуги общедомового счетчика" будем начислять во вторую очередь - у них будет приоритет "2".
	Приоритет = 2;
	
	Выборка = ПакетРезультат[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицыПриоритетовУслуг           = ТЗТаблицаПриоритетовУслуг.Добавить();
		СтрокаТаблицыПриоритетовУслуг.Услуга    = Выборка.Услуга;
		СтрокаТаблицыПриоритетовУслуг.Приоритет = Приоритет;
		
	КонецЦикла;
	
	// Услуги по ПУ, которые входят в состав регистра сведений "Услуги общедомового счетчика" будем начислять
	// в соответствии с правилами приоритетов - если услуга является услугой общедомового счетчика,
	// то сперва должна быть начислена услуга основание.
	Приоритет = 3;
	
	Выборка = ПакетРезультат[4].Выбрать();
	ТаблицаЗависимостей = ПакетРезультат[5].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		// Обходим поочереди все выбранные услуги, содержащиеся в регистре "Услуги общедомового счетчика".
		Если Отказ Тогда
			Возврат Неопределено;
		Иначе
			ДобавитьУслугуОбщедомовогоСчетчика(Приоритет, Выборка.Услуга, , ТаблицаЗависимостей, ТЗТаблицаПриоритетовУслуг, Новый Массив);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТЗТаблицаПриоритетовУслуг;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура рекурсивно добавляет услуги, являющиеся либо услугой основанием, либо услугой общедомового счетчика,
// по данным регистра "Услуги общедомового счетчика".
Процедура ДобавитьУслугуОбщедомовогоСчетчика(Приоритет, Услуга, УслугаОбщедомовогоСчетчика, ТаблицаОбщедомовыхУслуг, ТЗТаблицаПриоритетовУслуг, МассивСвязанныхУслуг, НачислятьУслугуСОбщедомовой = Ложь)
	
	НайденнаяСтрока = ТЗТаблицаПриоритетовУслуг.Найти(Услуга, "Услуга");
	Если НайденнаяСтрока = Неопределено Тогда
		// Текущей услуге еще не назначен приоритет - необходимо обработать ее.
		
		// Проверяем, есть ли текущая услуга в списке услуг общедомового счетчика.
		НайденныеСтрокиОбщедомовые = ТаблицаОбщедомовыхУслуг.НайтиСтроки(Новый Структура("УслугаОбщедомовогоСчетчика", Услуга));
		Если НайденныеСтрокиОбщедомовые.Количество() = 0 Тогда
			// Если услуги нет в списке общедомовых, значит она не является общедомовой, а является услугой-основанием
			// для каких-то других услуг и ее необходимо добавить в таблицу приоритетов услуг с текущим приоритетом
			// при условии, что эта услуга вообще выбрана в списке услуг по ПУ.
			Если Объект.Услуги.НайтиСтроки(Новый Структура("Услуга", Услуга)).Количество() > 0 Тогда
				СтрокаТаблицыПриоритетовУслуг                             = ТЗТаблицаПриоритетовУслуг.Добавить();
				СтрокаТаблицыПриоритетовУслуг.Услуга                      = Услуга;
				СтрокаТаблицыПриоритетовУслуг.Приоритет                   = Приоритет;
				СтрокаТаблицыПриоритетовУслуг.НачислятьУслугуСОбщедомовой = НачислятьУслугуСОбщедомовой;
				СтрокаТаблицыПриоритетовУслуг.УслугаОбщедомовогоСчетчика  = УслугаОбщедомовогоСчетчика;
				
				Приоритет = Приоритет + 1;
			КонецЕсли;
		Иначе
			// Услуга является общедомовой - необходимо проверить все услуги, являющиеся для нее услугой-основанием.
			
			// Параллельно будем проверять, не произошло ли "зацикливание" в зависимостях услуг-оснований и услуг общедомового счетчика.
			Если МассивСвязанныхУслуг.Найти(Услуга) = Неопределено Тогда
				МассивСвязанныхУслуг.Добавить(Услуга);
			Иначе
				
				СтрокаСообщения = "Обнаружено ""зацикливание"" между услугами-основаниями и услугами общедомового счетчика: ";
				Для Каждого ТекУслуга Из МассивСвязанныхУслуг Цикл
					СтрокаСообщения = СтрокаСообщения + ТекУслуга + "; ";
				КонецЦикла;
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ТекСтрока Из НайденныеСтрокиОбщедомовые Цикл
				
				// Пример: в регистре "Услуги общедомового счетчика" есть следующие записи:
				// |№|УслугаОбщедомовогоСчетчика| Услуга   |РаспределятьНаУслугуБазаРасчета|
				// -------------------------------------------------------------------------
				// |1| Услуга1                  | Услуга2  | Истина                        |
				// |2| Услуга2                  | Услуга3  | Ложь                          |
				//
				// Если для строки настройки регистра установлен флаг "Распределять на услугу-базу расчета" (строка №1 в примере)
				// и при этом услуга - база расчета (Услуга2) сама является услугой общедомового счетчика
				// для другой услуги - базы расчета (Услуга3 в строке №2 в примере), то такое ведение учета считаем некорректным.
				// В данном случае согласно логике работы документа начисления Услуга2 (по строке №1 в примере) начислится
				// совместно с Услугой1 в одном документе начисления услуг, т.е. отдельный документ по Услуге2
				// согласно настройке (строка №1 в примере) создавать не нужно.
				// Но согласно второй настройке (строка №2 в примере) для Услуги2 должен быть создан отдельный документ
				// начислений услуг, причем после физического создания и проведения документа начисления по Услуге3,
				// что противоречит первой строке настройки.
				// 
				Если ТекСтрока.РаспределятьНаУслугуБазаРасчета Тогда
					
					// Ищем текущую услугу - базу расчета в других строках настроек среди общедомовых:
					НайденныеСтрокиБазыСредиОбщедомовых = ТаблицаОбщедомовыхУслуг.НайтиСтроки(Новый Структура("УслугаОбщедомовогоСчетчика", ТекСтрока.УслугаОснование));
					
					// Если услуги найдены, значит обнаружено некорректное ведение учета.
					Если НайденныеСтрокиБазыСредиОбщедомовых.Количество() > 0 Тогда
						
						СтрокаСообщения = "Обнаружено несоответствие настроек зависимости услуг между услугами-основаниями и услугами общедомового счетчика.";
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
						Отказ = Истина;
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ДобавитьУслугуОбщедомовогоСчетчика(Приоритет, ТекСтрока.УслугаОснование, Услуга, ТаблицаОбщедомовыхУслуг, ТЗТаблицаПриоритетовУслуг, МассивСвязанныхУслуг, ТекСтрока.РаспределятьНаУслугуБазаРасчета);
				
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
			// После того, как обработали все услуги-основания текущей услуги,
			// нужно добавить уже саму текущую услугу в таблицу приоритетов услуг.
			Если Объект.Услуги.НайтиСтроки(Новый Структура("Услуга", Услуга)).Количество() > 0 Тогда
				СтрокаТаблицыПриоритетовУслуг           = ТЗТаблицаПриоритетовУслуг.Добавить();
				СтрокаТаблицыПриоритетовУслуг.Услуга    = Услуга;
				СтрокаТаблицыПриоритетовУслуг.Приоритет = Приоритет;
				Приоритет = Приоритет + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает текущий приоритет для формирования документов.
Функция ПолучитьТекущийПриоритет()
	
	ТекущийПриоритет = 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(УПЖКХ_ЗадачиСеансовМастераНачислений.Приоритет) КАК Приоритет
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И (НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 2
	|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 3)";
	Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
	Запрос.УстановитьПараметр("МесяцНачисления",     Объект.МесяцНачисления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекущийПриоритет = Выборка.Приоритет;
	КонецЕсли;
	
	Возврат ТекущийПриоритет;
	
КонецФункции

&НаКлиенте
// Процедура обновляет параметры дл регистрации документов.
//
Процедура ОбновитьПараметрыМесяцаНачисленияИДняРегистрацииДокументов()
	
	// Сдвинем дату месяца начисления в конец месяца.
	Объект.МесяцНачисления = КонецМесяца(Объект.МесяцНачисления);
	
	КоличествоДнейВМесяце = День(КонецМесяца(Объект.МесяцНачисления));
	
	// Установим максимальное значение дня регистрации документов.
	Элементы.ДеньРегистрацииДокументов.МаксимальноеЗначение = КоличествоДнейВМесяце;
	
	// Сдвигаем день регистрации на конец месяца.
	Если Объект.ДеньРегистрацииДокументов > КоличествоДнейВМесяце Тогда
		Объект.ДеньРегистрацииДокументов = КоличествоДнейВМесяце;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
// Функция проверяет наличие добавленного здания в списке уже добавленных зданий.
Функция ПроверитьНаличиеЗданияВСписке(ЗданиеСсылка, НомерТекСтроки)
	
	ЗданиеУжеДобавлено = Ложь;
	
	НайденныеСтроки = Объект.Здания.НайтиСтроки(Новый Структура("Объект", ЗданиеСсылка));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если (НайденныеСтроки.Количество() = 1 И НЕ НайденныеСтроки[0].НомерСтроки = НомерТекСтроки) ИЛИ НайденныеСтроки.Количество() > 1 Тогда
			ЗданиеУжеДобавлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗданиеУжеДобавлено;
	
КонецФункции

&НаСервере
// Функция получает здания из выбранной группы, которые необходимо добавить в табличную часть.
Функция ПолучитьЗданияИзГруппы(ЗданиеСсылка, НомерТекСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Ссылка В ИЕРАРХИИ(&ГруппаЗданий)
	|	И НЕ ЭтоГруппа
	|	И НЕ ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ГруппаЗданий", ЗданиеСсылка);
	
	ВыборкаЗданий = Запрос.Выполнить().Выбрать();
	
	СписокДобавляемыхЗданий = Новый СписокЗначений;
	
	ЗданияУжеДобавлены = Ложь;
	
	Пока ВыборкаЗданий.Следующий() Цикл
		
		НайденныеСтроки = Объект.Здания.НайтиСтроки(Новый Структура("Объект", ВыборкаЗданий.Ссылка));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СписокДобавляемыхЗданий.Добавить(ВыборкаЗданий.Ссылка);
		Иначе
			Если НЕ НайденныеСтроки[0].НомерСтроки = НомерТекСтроки Тогда
				ЗданияУжеДобавлены = Истина;
			Иначе
				ЗданиеСсылка = НайденныеСтроки[0].Объект;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗданияУжеДобавлены Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Некоторые здания данной группы уже добавлены в список зданий и не будут добавлены повторно.");
	КонецЕсли;
	
	Возврат СписокДобавляемыхЗданий;
	
КонецФункции

&НаСервере
// Процедура заполняет табличную часть "Здания" всеми зданиями из справочника.
Процедура ЗаполнитьТабличнуюЧастьЗдания()
	
	Объект.Здания.Очистить();
	
	СписокДобавляемыхЗданий = ПолучитьСписокВсехЗданий();
	
	Для Каждого ТекЗдание Из СписокДобавляемыхЗданий Цикл
		СтрокаЗдания = Объект.Здания.Добавить();
		СтрокаЗдания.Объект = ТекЗдание.Здание;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция получает список всех зданий справочника "Здания".
Функция ПолучитьСписокВсехЗданий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисления.Объект.Адрес.Владелец КАК Здание
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(&КонецПериода, Организация = &Организация) КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Действует
	|	И КВП_НазначенныеНачисления.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|	И НЕ КВП_НазначенныеНачисления.Объект.Адрес.Владелец.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_НазначенныеНачисления.Объект.Адрес.Владелец.Наименование";
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
// Процедура заполняет табличные части услуг выбранными значениями из дерева услуг.
Процедура ЗаполнитьТабличнуюЧастьУслуги()
	
	ДЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	
	// Дерево значений услуг имеет статическую трехуровневую иерархию:
	//   1й уровень - "Все услуги".
	//   2й уровень - "Услуги по л/с, "Услуги по ПУ", "Добровольное страхование".
	//   3й уровень - непосредственно сами услуги.
	// Поэтому будем перебирать только элементы самого нижнего уровня 3го уровня.
	УровеньВсеУслуги         = ДЗДеревоУслуг.Строки[0];
	УровеньУслугиЛС          = УровеньВсеУслуги.Строки[0];
	УровеньУслугиПУ          = УровеньВсеУслуги.Строки[1];
	УровеньУслугиСтрахования = УровеньВсеУслуги.Строки[2];
	
	Объект.Услуги.Очистить();
	
	Для Каждого УслугаЛС Из УровеньУслугиЛС.Строки Цикл
		Если (Объект.НачислятьУслуги И УслугаЛС.ФормироватьНачисления)
			  ИЛИ (Объект.НачислятьЛьготы И УслугаЛС.ФормироватьЛьготы) Тогда
			НоваяСтрокаУслуги = Объект.Услуги.Добавить();
			НоваяСтрокаУслуги.Услуга                     = УслугаЛС.Услуга;
			НоваяСтрокаУслуги.ФормироватьНачисления      = УслугаЛС.ФормироватьНачисления И Объект.НачислятьУслуги;
			НоваяСтрокаУслуги.ФормироватьЛьготы          = УслугаЛС.ФормироватьЛьготы И Объект.НачислятьЛьготы;
			НоваяСтрокаУслуги.ЭтоУслугаЛС                = Истина;
			НоваяСтрокаУслуги.ЭтоДобровольноеСтрахование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УслугаПУ Из УровеньУслугиПУ.Строки Цикл
		Если (Объект.НачислятьУслуги И УслугаПУ.ФормироватьНачисления)
			  ИЛИ (Объект.НачислятьЛьготы И УслугаПУ.ФормироватьЛьготы) Тогда
			НоваяСтрокаУслуги = Объект.Услуги.Добавить();
			НоваяСтрокаУслуги.Услуга                     = УслугаПУ.Услуга;
			НоваяСтрокаУслуги.ФормироватьНачисления      = УслугаПУ.ФормироватьНачисления И Объект.НачислятьУслуги;
			НоваяСтрокаУслуги.ФормироватьЛьготы          = УслугаПУ.ФормироватьЛьготы И Объект.НачислятьЛьготы;
			НоваяСтрокаУслуги.ЭтоУслугаЛС                = Ложь;
			НоваяСтрокаУслуги.ЭтоДобровольноеСтрахование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УслугаСтрахования Из УровеньУслугиСтрахования.Строки Цикл
		Если (Объект.НачислятьУслуги И УслугаСтрахования.ФормироватьНачисления) Тогда
			НоваяСтрокаУслуги = Объект.Услуги.Добавить();
			НоваяСтрокаУслуги.Услуга                     = УслугаСтрахования.Услуга;
			НоваяСтрокаУслуги.ФормироватьНачисления      = УслугаСтрахования.ФормироватьНачисления И Объект.НачислятьУслуги;
			НоваяСтрокаУслуги.ФормироватьЛьготы          = УслугаСтрахования.ФормироватьЛьготы И Объект.НачислятьЛьготы;
			НоваяСтрокаУслуги.ЭтоУслугаЛС                = Ложь;
			НоваяСтрокаУслуги.ЭтоДобровольноеСтрахование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДЕРЕВЬЕВ

// ДЕРЕВО УСЛУГ

&НаСервере
// Процедура заполняет дерево списка услуг.
Процедура ЗаполнитьДеревоУслуг(ЭтоЗагрузкаНастройкиУслуг = Ложь)
	
	ТаблицаУслуг = ПолучитьТаблицуНастроекСпискаУслуг(ЭтоЗагрузкаНастройкиУслуг);
	
	СписокУслугЛС          = ТаблицаУслуг.НайтиСтроки(Новый Структура("ЭтоУслугаЛС, ЭтоДобровольноеСтрахование", Истина, Ложь));
	СписокУслугПУ          = ТаблицаУслуг.НайтиСтроки(Новый Структура("ЭтоУслугаЛС, ЭтоДобровольноеСтрахование", Ложь, Ложь));
	СписокУслугСтрахование = ТаблицаУслуг.НайтиСтроки(Новый Структура("ЭтоДобровольноеСтрахование", Истина));
	
	ДЗДеревоУслуг = РеквизитФормыВЗначение("ДеревоУслуг", Тип("ДеревоЗначений"));
	
	ДЗДеревоУслуг.Строки.Очистить();
	
	ВеткаВсеУслуги                 = ДЗДеревоУслуг.Строки.Добавить();
	ВеткаВсеУслуги.Услуга          = "Все услуги";
	ВеткаВсеУслуги.УровеньИерархии = 0;
	
	ВеткаУслугЛС                 = ВеткаВсеУслуги.Строки.Добавить();
	ВеткаУслугЛС.Услуга          = "Начисления по л/с";
	ВеткаУслугЛС.УровеньИерархии = 1;
	
	Для Каждого ТекУслуга Из СписокУслугЛС Цикл
		ВеткаУслугаЛС                       = ВеткаУслугЛС.Строки.Добавить();
		ВеткаУслугаЛС.Услуга                = ТекУслуга.Услуга;
		ВеткаУслугаЛС.ФормироватьНачисления = ТекУслуга.ФормироватьНачисления;
		ВеткаУслугаЛС.ФормироватьЛьготы     = ТекУслуга.ФормироватьЛьготы;
		ВеткаУслугаЛС.УровеньИерархии       = 2;
	КонецЦикла;
	
	ВеткаУслугПУ                 = ВеткаВсеУслуги.Строки.Добавить();
	ВеткаУслугПУ.Услуга          = "Начисления по ПУ";
	ВеткаУслугПУ.УровеньИерархии = 1;
	
	Для Каждого ТекУслуга Из СписокУслугПУ Цикл
		ВеткаУслугаПУ                       = ВеткаУслугПУ.Строки.Добавить();
		ВеткаУслугаПУ.Услуга                = ТекУслуга.Услуга;
		ВеткаУслугаПУ.ФормироватьНачисления = ТекУслуга.ФормироватьНачисления;
		ВеткаУслугаПУ.ФормироватьЛьготы     = ТекУслуга.ФормироватьЛьготы;
		ВеткаУслугаПУ.УровеньИерархии       = 2;
	КонецЦикла;
	
	ВеткаУслугСтрахования                 = ВеткаВсеУслуги.Строки.Добавить();
	ВеткаУслугСтрахования.Услуга          = "Начисления по добровольному страхованию";
	ВеткаУслугСтрахования.УровеньИерархии = 1;
	
	Для Каждого ТекУслуга Из СписокУслугСтрахование Цикл
		ВеткаУслугСтрахования                       = ВеткаУслугСтрахования.Строки.Добавить();
		ВеткаУслугСтрахования.Услуга                = ТекУслуга.Услуга;
		ВеткаУслугСтрахования.ФормироватьНачисления = ТекУслуга.ФормироватьНачисления;
		ВеткаУслугСтрахования.ФормироватьЛьготы     = ТекУслуга.ФормироватьЛьготы;
		ВеткаУслугСтрахования.УровеньИерархии       = 2;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗДеревоУслуг, "ДеревоУслуг");
	
КонецПроцедуры

&НаСервере
// Функция получает последние использованные настройки списка услуг пользователя в виде таблицы значений.
Функция ПолучитьТаблицуНастроекСпискаУслуг(ЭтоЗагрузкаНастройкиУслуг)
	
	Запрос = Новый Запрос;
	
	Если ЭтоПродолжениеЗадачи Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.Услуга КАК Услуга,
		|	ИСТИНА КАК ФормироватьНачисления
		|ПОМЕСТИТЬ ТаблицаНачисляемыхУслуг
		|ИЗ
		|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
		|ГДЕ
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
		|	И (УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС)
		|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ)
		|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.Услуга КАК Услуга,
		|	ИСТИНА КАК ФормироватьЛьготы
		|ПОМЕСТИТЬ ТаблицаНачисляемыхЛьгот
		|ИЗ
		|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
		|ГДЕ
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
		|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаНачисляемыхУслуг.Услуга, ТаблицаНачисляемыхЛьгот.Услуга) КАК Услуга,
		|	ЕСТЬNULL(ТаблицаНачисляемыхУслуг.ФормироватьНачисления, ЛОЖЬ) КАК ФормироватьНачисления,
		|	ЕСТЬNULL(ТаблицаНачисляемыхЛьгот.ФормироватьЛьготы, ЛОЖЬ) КАК ФормироватьЛьготы
		|ИЗ
		|	ТаблицаНачисляемыхУслуг КАК ТаблицаНачисляемыхУслуг
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаНачисляемыхЛьгот КАК ТаблицаНачисляемыхЛьгот
		|		ПО (ТаблицаНачисляемыхЛьгот.Услуга = ТаблицаНачисляемыхУслуг.Услуга)";
		
		Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
		ТаблицаНастроекСпискаУслуг = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Если ЭтоЗагрузкаНастройкиУслуг Тогда
			ТаблицаНастроекСпискаУслуг = Объект.Услуги.Выгрузить();
		Иначе
			ТаблицаНастроекСпискаУслуг = ПолучитьПоследниеНастройкиСпискаУслугПользователя();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаНастроекСпискаУслуг = Неопределено ИЛИ НЕ ТипЗнч(ТаблицаНастроекСпискаУслуг) = Тип("ТаблицаЗначений") Тогда
		ТаблицаНастроекСпискаУслуг = Новый ТаблицаЗначений;
		ТаблицаНастроекСпискаУслуг.Колонки.Добавить("Услуга",                     Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ТаблицаНастроекСпискаУслуг.Колонки.Добавить("ЭтоУслугаЛС",                Новый ОписаниеТипов("Булево"));
		ТаблицаНастроекСпискаУслуг.Колонки.Добавить("ЭтоДобровольноеСтрахование", Новый ОписаниеТипов("Булево"));
		ТаблицаНастроекСпискаУслуг.Колонки.Добавить("ФормироватьНачисления",      Новый ОписаниеТипов("Булево"));
		ТаблицаНастроекСпискаУслуг.Колонки.Добавить("ФормироватьЛьготы",          Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	СписокСпособовРасчетаДляУслугЛС = Новый СписокЗначений;
	СписокСпособовРасчетаДляУслугПУ = Новый СписокЗначений;
	
	СписокСпособовРасчетаДляУслугПУ.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика);
	СписокСпособовРасчетаДляУслугПУ.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме);
	
	СписокСпособовРасчетаДляУслугЛС = СписокСпособовРасчетаДляУслугПУ.Скопировать();
	СписокСпособовРасчетаДляУслугЛС.Добавить(Перечисления.КВП_СпособыРасчета.КомиссияБанка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНастроекСпискаУслуг.Услуга КАК Услуга,
	|	ТаблицаНастроекСпискаУслуг.ФормироватьНачисления КАК ФормироватьНачисления,
	|	ТаблицаНастроекСпискаУслуг.ФормироватьЛьготы КАК ФормироватьЛьготы
	|ПОМЕСТИТЬ ТаблицаНастроек
	|ИЗ
	|	&ТаблицаНастроекСпискаУслуг КАК ТаблицаНастроекСпискаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Услуги.Ссылка КАК Услуга,
	|	КВП_Услуги.СпособРасчета КАК СпособРасчета
	|ПОМЕСТИТЬ врТаблицаУслуг
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа
	|	И НЕ КВП_Услуги.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Услуга КАК Услуга,
	|	ИСТИНА КАК ЭтоУслугаЛС,
	|	ЛОЖЬ КАК ЭтоДобровольноеСтрахование,
	|	ЕСТЬNULL(ТаблицаНастроек.ФормироватьНачисления, 0) КАК ФормироватьНачисления,
	|	ЕСТЬNULL(ТаблицаНастроек.ФормироватьЛьготы, ЛОЖЬ) КАК ФормироватьЛьготы
	|ИЗ
	|	врТаблицаУслуг КАК ТаблицаУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНастроек КАК ТаблицаНастроек
	|		ПО (ТаблицаНастроек.Услуга = ТаблицаУслуг.Услуга)
	|ГДЕ
	|	НЕ ТаблицаУслуг.СпособРасчета В (&СписокСпособовРасчетаДляУслугЛС)
	|	И ВЫБОР
	|			КОГДА &ВестиУчетНачисленийПоДобровольномуСтрахованию
	|				ТОГДА НЕ ТаблицаУслуг.Услуга = &УслугаДобровольногоСтрахования
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(ТаблицаНастроек.ФормироватьНачисления, 0),
	|	ЕСТЬNULL(ТаблицаНастроек.ФормироватьЛьготы, ЛОЖЬ)
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(, УслугаОснование.СпособРасчета В (&СписокСпособовРасчетаДляУслугПУ)) КАК КВП_ЗависимостиУслугСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНастроек КАК ТаблицаНастроек
	|		ПО (ТаблицаНастроек.Услуга = КВП_ЗависимостиУслугСрезПоследних.Услуга)
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует
	|	И &ЗависимыеУслугиПоСобственномуНормативу
	|	И КВП_ЗависимостиУслугСрезПоследних.Услуга.СпособРасчета В(&СписокСпособовРасчетаДляУслугПУ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Услуга,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЕСТЬNULL(ТаблицаНастроек.ФормироватьНачисления, 0),
	|	ЕСТЬNULL(ТаблицаНастроек.ФормироватьЛьготы, ЛОЖЬ)
	|ИЗ
	|	врТаблицаУслуг КАК ТаблицаУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНастроек КАК ТаблицаНастроек
	|		ПО (ТаблицаНастроек.Услуга = ТаблицаУслуг.Услуга)
	|ГДЕ
	|	ТаблицаУслуг.СпособРасчета В(&СписокСпособовРасчетаДляУслугПУ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Услуга,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЕСТЬNULL(ТаблицаНастроек.ФормироватьНачисления, 0),
	|	ЛОЖЬ
	|ИЗ
	|	врТаблицаУслуг КАК ТаблицаУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНастроек КАК ТаблицаНастроек
	|		ПО (ТаблицаНастроек.Услуга = ТаблицаУслуг.Услуга)
	|ГДЕ
	|	&ВестиУчетНачисленийПоДобровольномуСтрахованию
	|	И ТаблицаУслуг.Услуга = &УслугаДобровольногоСтрахования";
	
	Запрос.УстановитьПараметр("СписокСпособовРасчетаДляУслугЛС",               СписокСпособовРасчетаДляУслугЛС);
	Запрос.УстановитьПараметр("СписокСпособовРасчетаДляУслугПУ",               СписокСпособовРасчетаДляУслугПУ);
	Запрос.УстановитьПараметр("ТаблицаНастроекСпискаУслуг",                    ТаблицаНастроекСпискаУслуг);
	Запрос.УстановитьПараметр("ВестиУчетНачисленийПоДобровольномуСтрахованию", ВестиУчетНачисленийПоДобровольномуСтрахованию);
	Запрос.УстановитьПараметр("УслугаДобровольногоСтрахования",                УслугаДобровольногоСтрахования);
	
	// ОСОБЕННОСТЬ:
	// При начислении "обычных" услуг теперь начисляются в т.ч. зависимые услуги по ПУ, рассчитываемые по собственному нормативу.
	// Поэтому добавляем в список нужные услуги.
	Запрос.УстановитьПараметр("ЗависимыеУслугиПоСобственномуНормативу",        Константы.УПЖКХ_НачислятьЗависимуюУслугуПоСобственномуНормативу.Получить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
// Функция возвращает настройки списка услуг пользователя, если таковые имеются,
// в противном случае возвращает Неопределено.
Функция ПолучитьПоследниеНастройкиСпискаУслугПользователя()
	
	ТаблицаНастроекУслугНачисленияУслуг = Неопределено;
	ТаблицаНастроекУслугНачисленияЛьгот = Неопределено;
	
	Если Объект.НачислятьУслуги Тогда
		ТаблицаНастроекУслугНачисленияУслуг = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиУслугМастераНачислений", "ПоследняяНастройкаУслугНачисленияУслуг");
	КонецЕсли;
	
	Если Объект.НачислятьЛьготы Тогда
		ТаблицаНастроекУслугНачисленияЛьгот = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиУслугМастераНачислений", "ПоследняяНастройкаУслугНачисленияЛьгот");
	КонецЕсли;
	
	Если ТаблицаНастроекУслугНачисленияУслуг = Неопределено Тогда
		ТаблицаНастроекУслугНачисленияУслуг = ПолучитьПустуюТаблицуНастроекСпискаУслуг();
	КонецЕсли;
	
	Если ТаблицаНастроекУслугНачисленияЛьгот = Неопределено Тогда
		ТаблицаНастроекУслугНачисленияЛьгот = ПолучитьПустуюТаблицуНастроекСпискаУслуг();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНастроекУслугНачисленияУслуг.Услуга КАК Услуга,
	|	ТаблицаНастроекУслугНачисленияУслуг.ФормироватьНачисления КАК ФормироватьНачисления,
	|	ТаблицаНастроекУслугНачисленияУслуг.ФормироватьЛьготы КАК ФормироватьЛьготы
	|ПОМЕСТИТЬ ТаблицаНастроекУслугНачисленияУслуг
	|ИЗ
	|	&ТаблицаНастроекУслугНачисленияУслуг КАК ТаблицаНастроекУслугНачисленияУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНастроекУслугНачисленияЛьгот.Услуга КАК Услуга,
	|	ТаблицаНастроекУслугНачисленияЛьгот.ФормироватьНачисления КАК ФормироватьНачисления,
	|	ТаблицаНастроекУслугНачисленияЛьгот.ФормироватьЛьготы КАК ФормироватьЛьготы
	|ПОМЕСТИТЬ ТаблицаНастроекУслугНачисленияЛьгот
	|ИЗ
	|	&ТаблицаНастроекУслугНачисленияЛьгот КАК ТаблицаНастроекУслугНачисленияЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаНастроекУслугНачисленияУслуг.Услуга, ТаблицаНастроекУслугНачисленияЛьгот.Услуга) КАК Услуга,
	|	ЕСТЬNULL(ТаблицаНастроекУслугНачисленияУслуг.ФормироватьНачисления, ЛОЖЬ) КАК ФормироватьНачисления,
	|	ЕСТЬNULL(ТаблицаНастроекУслугНачисленияЛьгот.ФормироватьЛьготы, ЛОЖЬ) КАК ФормироватьЛьготы
	|ИЗ
	|	ТаблицаНастроекУслугНачисленияУслуг КАК ТаблицаНастроекУслугНачисленияУслуг
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаНастроекУслугНачисленияЛьгот КАК ТаблицаНастроекУслугНачисленияЛьгот
	|		ПО (ТаблицаНастроекУслугНачисленияЛьгот.Услуга = ТаблицаНастроекУслугНачисленияУслуг.Услуга)";
	Запрос.УстановитьПараметр("ТаблицаНастроекУслугНачисленияУслуг", ТаблицаНастроекУслугНачисленияУслуг);
	Запрос.УстановитьПараметр("ТаблицаНастроекУслугНачисленияЛьгот", ТаблицаНастроекУслугНачисленияЛьгот);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// ДЕРЕВЬЯ ДОКУМЕНТОВ

&НаСервере
// Процедура заполняет списки документов начисления услуг, начисления пени и закрытия периода.
Процедура ЗаполнитьСпискиДокументов(ЭтоВыводРезультата = Ложь)
	
	ЗаполнитьТаблицуДействующихУслугПоЗданиям(ЭтоВыводРезультата);
	
	// Определим переменную по умолчанию.
	Запрос = Новый Запрос;
	
	// Определим исходный запрос по объектам учета.
	Если Объект.НачислятьУслуги
	 Или Объект.НачислятьЛьготы
	 Или Объект.НачислятьПени
	 Или Объект.ЗакрытьПериодПоНачислениямЖКХ Тогда
		
		Запрос = СоздатьЗапросТаблицыОбъектов();
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Начисление услуг.
	Если Объект.НачислятьУслуги Тогда
		ТаблицаДокументовНачисленияУслуг = СформироватьТаблицуНачисленияУслуг(Запрос, ЭтоВыводРезультата);
	
		УдалитьНедействующиеУслугиИзТаблицыДокументов(ТаблицаДокументовНачисленияУслуг);
	
		ИсключитьУслугиБазыРасчетаНачисляемыеСОбщедомовыми(ТаблицаДокументовНачисленияУслуг);
		ЗаполнитьДеревоДокументовНачисления(ТаблицаДокументовНачисленияУслуг);
	Иначе
		ДЗДеревоДокументовНачисленияУслуг = РеквизитФормыВЗначение("ДеревоДокументовНачисленияУслуг", Тип("ДеревоЗначений"));
		ДЗДеревоДокументовНачисленияУслуг.Строки.Очистить();
		ЗначениеВРеквизитФормы(ДЗДеревоДокументовНачисленияУслуг, "ДеревоДокументовНачисленияУслуг");
	КонецЕсли;
	
	// Начисление льгот.
	Если Объект.НачислятьЛьготы Тогда
		
		ТаблицаДокументовНачисленияЛьгот = СформироватьТаблицуНачисленияЛьгот(Запрос, ЭтоВыводРезультата);
		ЗаполнитьДеревоДокументовЛьгот(ТаблицаДокументовНачисленияЛьгот);
		
	Иначе
		ДЗДеревоДокументовНачисленияЛьгот = РеквизитФормыВЗначение("ДеревоДокументовНачисленияЛьгот", Тип("ДеревоЗначений"));
		ДЗДеревоДокументовНачисленияЛьгот.Строки.Очистить();
		ЗначениеВРеквизитФормы(ДЗДеревоДокументовНачисленияЛьгот, "ДеревоДокументовНачисленияЛьгот");
	КонецЕсли;
	
	// Начисление пени.
	Если Объект.НачислятьПени Тогда
		ТаблицаДокументовНачисленияПени = СформироватьТаблицуНачисленияПени(Запрос, ЭтоВыводРезультата);
		ЗаполнитьДеревоДокументовПени(ТаблицаДокументовНачисленияПени);
	Иначе
		ДЗДеревоДокументовНачисленияПени = РеквизитФормыВЗначение("ДеревоДокументовНачисленияПени", Тип("ДеревоЗначений"));
		ДЗДеревоДокументовНачисленияПени.Строки.Очистить();
		ЗначениеВРеквизитФормы(ДЗДеревоДокументовНачисленияПени, "ДеревоДокументовНачисленияПени");
	КонецЕсли;
	
	// Закрытие периода ЖКХ.
	Если Объект.ЗакрытьПериодПоНачислениямЖКХ Тогда
		ТаблицаДокументовЗакрытияПериода = СформироватьТаблицуЗакрытияПериода(Запрос, ЭтоВыводРезультата);
		ЗаполнитьДеревоДокументовЗакрытия(ТаблицаДокументовЗакрытияПериода);
	Иначе
		ДЗДеревоДокументовЗакрытияПериода = РеквизитФормыВЗначение("ДеревоДокументовЗакрытияПериода", Тип("ДеревоЗначений"));
		ДЗДеревоДокументовЗакрытияПериода.Строки.Очистить();
		ЗначениеВРеквизитФормы(ДЗДеревоДокументовЗакрытияПериода, "ДеревоДокументовЗакрытияПериода");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция создает запрос в рамках менеджера временных таблиц для дальнейшего получения таблиц документов.
Функция СоздатьЗапросТаблицыОбъектов()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗданий.Объект КАК Объект
	|ПОМЕСТИТЬ ТаблицаЗданий
	|ИЗ
	|	&ТаблицаЗданий КАК ТаблицаЗданий";
	
	Запрос.УстановитьПараметр("ТаблицаЗданий", Объект.Здания.Выгрузить());
	Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
	Возврат Запрос;
	
КонецФункции

&НаСервере
// Процедура заполняет дерево документов начисления услуг.
Процедура ЗаполнитьДеревоДокументовНачисления(ТаблицаОбъектов)
	
	ДЗДеревоДокументовНачисленияУслуг = РеквизитФормыВЗначение("ДеревоДокументовНачисленияУслуг", Тип("ДеревоЗначений"));
	ДЗДеревоДокументовНачисленияУслуг.Строки.Очистить();
	
	ПервыйОбходРезультата = Истина;
	Ном = 1;
	
	Для Каждого ТекЗначение Из ТаблицаОбъектов Цикл
		
		Если ПервыйОбходРезультата Тогда
			
			ТекущийОбъект      = ТекЗначение.Объект;
			ТекущийВидОперации = ТекЗначение.ВидОперации;
			ТекущаяУслуга      = ТекЗначение.Услуга;
			
			ВеткаОбъект                     = ДЗДеревоДокументовНачисленияУслуг.Строки.Добавить();
			ВеткаОбъект.Ном                 = Ном;
			ВеткаОбъект.Объект              = ТекЗначение.Объект;
			ВеткаОбъект.ОбъектПредставление = ТекЗначение.Объект;
			ВеткаОбъект.Доп_УровеньСтроки   = 1;
			
			ВеткаВидОперации                     = ВеткаОбъект.Строки.Добавить();
			ВеткаВидОперации.Объект              = ТекЗначение.ВидОперации;
			ВеткаВидОперации.ОбъектПредставление = ТекЗначение.ВидОперации;
			ВеткаВидОперации.Доп_УровеньСтроки   = 2;
			
			Если ЗначениеЗаполнено(ТекЗначение.Услуга) Тогда
				ВеткаУслуга                     = ВеткаВидОперации.Строки.Добавить();
				ВеткаУслуга.Объект              = ТекЗначение.Услуга;
				ВеткаУслуга.ОбъектПредставление = ТекЗначение.ПредставлениеУслуги;
				ВеткаУслуга.ДокументНачисления  = ТекЗначение.ДокументНачисления;
				ВеткаУслуга.СуммаДокумента      = ТекЗначение.СуммаДокумента;
				ВеткаУслуга.Комментарий         = ТекЗначение.Комментарий;
				ВеткаУслуга.Доп_Проведен        = ТекЗначение.ДокументПроведен;
				ВеткаУслуга.Доп_УровеньСтроки   = 3;
				
				// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
				// по выбранным объектам в текущем периоде.
				ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументНачисления.Пустая());
				
			КонецЕсли;
			
			ПервыйОбходРезультата = Ложь;
			
			Ном = Ном + 1;
			
		Иначе
			
			Если ТекЗначение.Объект = ТекущийОбъект Тогда
				
				Если ТекущийВидОперации = ТекЗначение.ВидОперации Тогда
					
					ВеткаУслуга                     = ВеткаВидОперации.Строки.Добавить();
					ВеткаУслуга.Объект              = ТекЗначение.Услуга;
					ВеткаУслуга.ОбъектПредставление = ТекЗначение.ПредставлениеУслуги;
					ВеткаУслуга.ДокументНачисления  = ТекЗначение.ДокументНачисления;
					ВеткаУслуга.СуммаДокумента      = ТекЗначение.СуммаДокумента;
					ВеткаУслуга.Комментарий         = ТекЗначение.Комментарий;
					ВеткаУслуга.Доп_Проведен        = ТекЗначение.ДокументПроведен;
					ВеткаУслуга.Доп_УровеньСтроки   = 3;
					
					// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
					// по выбранным объектам в текущем периоде.
					ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументНачисления.Пустая());
					
				Иначе
					
					ВеткаВидОперации                     = ВеткаОбъект.Строки.Добавить();
					ВеткаВидОперации.Объект              = ТекЗначение.ВидОперации;
					ВеткаВидОперации.ОбъектПредставление = ТекЗначение.ВидОперации;
					ВеткаВидОперации.Доп_УровеньСтроки   = 2;
					
					Если ЗначениеЗаполнено(ТекЗначение.Услуга) Тогда
						ВеткаУслуга                     = ВеткаВидОперации.Строки.Добавить();
						ВеткаУслуга.Объект              = ТекЗначение.Услуга;
						ВеткаУслуга.ОбъектПредставление = ТекЗначение.ПредставлениеУслуги;
						ВеткаУслуга.ДокументНачисления  = ТекЗначение.ДокументНачисления;
						ВеткаУслуга.СуммаДокумента      = ТекЗначение.СуммаДокумента;
						ВеткаУслуга.Комментарий         = ТекЗначение.Комментарий;
						ВеткаУслуга.Доп_Проведен        = ТекЗначение.ДокументПроведен;
						ВеткаУслуга.Доп_УровеньСтроки   = 3;
						
						// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
						// по выбранным объектам в текущем периоде.
						ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументНачисления.Пустая());
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ВеткаОбъект                     = ДЗДеревоДокументовНачисленияУслуг.Строки.Добавить();
				ВеткаОбъект.Ном                 = Ном;
				ВеткаОбъект.Объект              = ТекЗначение.Объект;
				ВеткаОбъект.ОбъектПредставление = ТекЗначение.Объект;
				ВеткаОбъект.Доп_УровеньСтроки   = 1;
				
				ВеткаВидОперации                     = ВеткаОбъект.Строки.Добавить();
				ВеткаВидОперации.Объект              = ТекЗначение.ВидОперации;
				ВеткаВидОперации.ОбъектПредставление = ТекЗначение.ВидОперации;
				ВеткаВидОперации.Доп_УровеньСтроки   = 2;
				
				Если ЗначениеЗаполнено(ТекЗначение.Услуга) Тогда
					ВеткаУслуга                     = ВеткаВидОперации.Строки.Добавить();
					ВеткаУслуга.Объект              = ТекЗначение.Услуга;
					ВеткаУслуга.ОбъектПредставление = ТекЗначение.ПредставлениеУслуги;
					ВеткаУслуга.ДокументНачисления  = ТекЗначение.ДокументНачисления;
					ВеткаУслуга.СуммаДокумента      = ТекЗначение.СуммаДокумента;
					ВеткаУслуга.Комментарий         = ТекЗначение.Комментарий;
					ВеткаУслуга.Доп_Проведен        = ТекЗначение.ДокументПроведен;
					ВеткаУслуга.Доп_УровеньСтроки   = 3;
					
					// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
					// по выбранным объектам в текущем периоде.
					ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументНачисления.Пустая());
					
				КонецЕсли;
				
				Ном = Ном + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийОбъект      = ТекЗначение.Объект;
		ТекущийВидОперации = ТекЗначение.ВидОперации;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗДеревоДокументовНачисленияУслуг, "ДеревоДокументовНачисленияУслуг");
	
КонецПроцедуры

&НаСервере
// Процедура заполняет дерево документов расчета льгот.
Процедура ЗаполнитьДеревоДокументовЛьгот(ТаблицаОбъектов)
	
	ДЗДеревоДокументовНачисленияЛьгот = РеквизитФормыВЗначение("ДеревоДокументовНачисленияЛьгот", Тип("ДеревоЗначений"));
	ДЗДеревоДокументовНачисленияЛьгот.Строки.Очистить();
	
	ПервыйОбходРезультата = Истина;
	Ном = 1;
	
	Для Каждого ТекЗначение Из ТаблицаОбъектов Цикл
		
		Если ПервыйОбходРезультата Тогда
			
			ТекущийОбъект      = ТекЗначение.Объект;
			ТекущаяУслуга      = ТекЗначение.Услуга;
			
			ВеткаОбъект                   = ДЗДеревоДокументовНачисленияЛьгот.Строки.Добавить();
			ВеткаОбъект.Ном               = Ном;
			ВеткаОбъект.Объект            = ТекЗначение.Объект;
			ВеткаОбъект.Доп_УровеньСтроки = 1;
			
			Если ЗначениеЗаполнено(ТекЗначение.Услуга) Тогда
				ВеткаУслуга                    = ВеткаОбъект.Строки.Добавить();
				ВеткаУслуга.Объект             = ТекЗначение.Услуга;
				ВеткаУслуга.ДокументЛьгот      = ТекЗначение.ДокументЛьгот;
				ВеткаУслуга.СуммаДокумента     = ТекЗначение.СуммаДокумента;
				ВеткаУслуга.Комментарий        = ТекЗначение.Комментарий;
				ВеткаУслуга.Доп_Проведен       = ТекЗначение.ДокументПроведен;
				ВеткаУслуга.Доп_УровеньСтроки  = 2;
				
				// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
				// по выбранным объектам в текущем периоде.
				ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументЛьгот.Пустая());
				
			КонецЕсли;
			
			ПервыйОбходРезультата = Ложь;
			
			Ном = Ном + 1;
			
		Иначе
			
			Если ТекЗначение.Объект = ТекущийОбъект Тогда
				
				Если ЗначениеЗаполнено(ТекЗначение.Услуга) Тогда
					ВеткаУслуга                    = ВеткаОбъект.Строки.Добавить();
					ВеткаУслуга.Объект             = ТекЗначение.Услуга;
					ВеткаУслуга.ДокументЛьгот      = ТекЗначение.ДокументЛьгот;
					ВеткаУслуга.СуммаДокумента     = ТекЗначение.СуммаДокумента;
					ВеткаУслуга.Комментарий        = ТекЗначение.Комментарий;
					ВеткаУслуга.Доп_Проведен       = ТекЗначение.ДокументПроведен;
					ВеткаУслуга.Доп_УровеньСтроки  = 2;
					
					// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
					// по выбранным объектам в текущем периоде.
					ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументЛьгот.Пустая());
					
				КонецЕсли;
				
			Иначе
				
				ВеткаОбъект                   = ДЗДеревоДокументовНачисленияЛьгот.Строки.Добавить();
				ВеткаОбъект.Ном               = Ном;
				ВеткаОбъект.Объект            = ТекЗначение.Объект;
				ВеткаОбъект.Доп_УровеньСтроки = 1;
				
				Если ЗначениеЗаполнено(ТекЗначение.Услуга) Тогда
					ВеткаУслуга                    = ВеткаОбъект.Строки.Добавить();
					ВеткаУслуга.Объект             = ТекЗначение.Услуга;
					ВеткаУслуга.ДокументЛьгот      = ТекЗначение.ДокументЛьгот;
					ВеткаУслуга.СуммаДокумента     = ТекЗначение.СуммаДокумента;
					ВеткаУслуга.Комментарий        = ТекЗначение.Комментарий;
					ВеткаУслуга.Доп_Проведен       = ТекЗначение.ДокументПроведен;
					ВеткаУслуга.Доп_УровеньСтроки  = 2;
					
					// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
					// по выбранным объектам в текущем периоде.
					ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументЛьгот.Пустая());
					
				КонецЕсли;
				
				Ном = Ном + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийОбъект      = ТекЗначение.Объект;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗДеревоДокументовНачисленияЛьгот, "ДеревоДокументовНачисленияЛьгот");
	
КонецПроцедуры

&НаСервере
// Процедура заполняет дерево документов начисления пени.
Процедура ЗаполнитьДеревоДокументовПени(ТаблицаОбъектов)
	
	ДЗДеревоДокументовНачисленияПени = РеквизитФормыВЗначение("ДеревоДокументовНачисленияПени", Тип("ДеревоЗначений"));
	ДЗДеревоДокументовНачисленияПени.Строки.Очистить();
	
	Ном = 1;
	
	Для Каждого ТекЗначение Из ТаблицаОбъектов Цикл
		
		ТекущийОбъект      = ТекЗначение.Объект;
		
		ВеткаОбъект                = ДЗДеревоДокументовНачисленияПени.Строки.Добавить();
		ВеткаОбъект.Ном            = Ном;
		ВеткаОбъект.Объект         = ТекЗначение.Объект;
		ВеткаОбъект.ДокументПени   = ТекЗначение.ДокументПени;
		ВеткаОбъект.СуммаДокумента = ТекЗначение.СуммаДокумента;
		ВеткаОбъект.Комментарий    = ТекЗначение.Комментарий;
		ВеткаОбъект.Доп_Проведен   = ТекЗначение.ДокументПроведен;
		
		// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
		// по выбранным объектам в текущем периоде.
		ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументПени.Пустая());
		
		Ном = Ном + 1;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗДеревоДокументовНачисленияПени, "ДеревоДокументовНачисленияПени");
	
КонецПроцедуры

&НаСервере
// Процедура заполняет дерево документов закрытия периода.
Процедура ЗаполнитьДеревоДокументовЗакрытия(ТаблицаОбъектов)
	
	ДЗДеревоДокументовЗакрытияПериода = РеквизитФормыВЗначение("ДеревоДокументовЗакрытияПериода", Тип("ДеревоЗначений"));
	ДЗДеревоДокументовЗакрытияПериода.Строки.Очистить();
	
	Ном = 1;
	
	Для Каждого ТекЗначение Из ТаблицаОбъектов Цикл
		
		ТекущийОбъект      = ТекЗначение.Объект;
		
		ВеткаОбъект                  = ДЗДеревоДокументовЗакрытияПериода.Строки.Добавить();
		ВеткаОбъект.Ном              = Ном;
		ВеткаОбъект.Объект           = ТекЗначение.Объект;
		ВеткаОбъект.ДокументЗакрытия = ТекЗначение.ДокументЗакрытия;
		ВеткаОбъект.Комментарий      = ТекЗначение.Комментарий;
		ВеткаОбъект.Доп_Проведен     = ТекЗначение.ДокументПроведен;
		
		// Заполним флаг "ЕстьСформированныеДокументы", определяющий наличие уже сформированных документов
		// по выбранным объектам в текущем периоде.
		ЕстьСформированныеДокументы = ЕстьСформированныеДокументы ИЛИ (НЕ ТекЗначение.ДокументЗакрытия.Пустая());
		
		Ном = Ном + 1;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДЗДеревоДокументовЗакрытияПериода, "ДеревоДокументовЗакрытияПериода");
	
КонецПроцедуры

&НаСервере
// Функция формирует таблицу объектов документов начисления услуг.
Функция СформироватьТаблицуНачисленияУслуг(Запрос, ЭтоВыводРезультата = Ложь)
	
	ДополнитьЗапросТаблицейУслуг(Запрос, Истина);
	
	ТаблицаОбъектов = Неопределено;
	Если ЭтоВыводРезультата Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	ТаблицаОбъектов.ВидОперации КАК ВидОперации,
		|	ТаблицаОбъектов.Услуга КАК Услуга,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаОбъектов.Услуга) КАК ПредставлениеУслуги,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументСсылка КАК ДокументНачисления,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументПроведен КАК ДокументПроведен,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.СуммаДокумента КАК СуммаДокумента,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.Комментарий КАК Комментарий
		|ИЗ
		|	ТаблицаОбъектовУслугДляНачисления КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
		|		ПО (УПЖКХ_ЗадачиСеансовМастераНачислений.Объект = ТаблицаОбъектов.Объект)
		|			И (ВЫБОР
		|				КОГДА УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС)
		|					ТОГДА ТаблицаОбъектов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета)
		|				КОГДА УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ)
		|					ТОГДА ТаблицаОбъектов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ)
		|				КОГДА УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования)
		|					ТОГДА ТаблицаОбъектов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования)
		|			КОНЕЦ)
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.Услуга = ТаблицаОбъектов.Услуга)
		|			И (КОНЕЦПЕРИОДА(УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбъектов.Объект,
		|	ТаблицаОбъектов.ВидОперации";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	ТаблицаОбъектов.ВидОперации КАК ВидОперации,
		|	ТаблицаОбъектов.Услуга КАК Услуга,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаОбъектов.Услуга) КАК ПредставлениеУслуги,
		|	ЕСТЬNULL(КВП_НачислениеУслуг.Ссылка, ЗНАЧЕНИЕ(Документ.КВП_НачислениеУслуг.ПустаяСсылка)) КАК ДокументНачисления,
		|	КВП_НачислениеУслуг.Проведен КАК ДокументПроведен,
		|	КВП_НачислениеУслуг.СуммаДокумента КАК СуммаДокумента,
		|	"""" КАК Комментарий
		|ИЗ
		|	ТаблицаОбъектовУслугДляНачисления КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
		|		ПО (КВП_НачислениеУслуг.Объект = ТаблицаОбъектов.Объект)
		|			И (КВП_НачислениеУслуг.Организация = &Организация)
		|			И (КВП_НачислениеУслуг.ВидОперации = ТаблицаОбъектов.ВидОперации)
		|			И (КВП_НачислениеУслуг.Услуга = ТаблицаОбъектов.Услуга)
		|			И (НЕ КВП_НачислениеУслуг.ПометкаУдаления)
		|			И (КОНЕЦПЕРИОДА(КВП_НачислениеУслуг.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбъектов.Объект,
		|	ТаблицаОбъектов.ВидОперации";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",      Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

&НаСервере
// Процедура дополняет запрос таблицей услуг в соответствии с указанными параметрами.
Процедура ДополнитьЗапросТаблицейУслуг(Запрос, ЭтоНачислениеУслуг = Ложь)
	
	Если ЭтоНачислениеУслуг Тогда
		СписокУслуг = Объект.Услуги.Выгрузить(Новый Структура("ФормироватьНачисления", Истина));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокУслуг.Услуга КАК Услуга,
		|	ВЫБОР
		|		КОГДА СписокУслуг.ЭтоУслугаЛС
		|				И НЕ СписокУслуг.ЭтоДобровольноеСтрахование
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета)
		|		КОГДА НЕ СписокУслуг.ЭтоУслугаЛС
		|				И НЕ СписокУслуг.ЭтоДобровольноеСтрахование
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеДобровольногоСтрахования)
		|	КОНЕЦ КАК ВидОперации
		|ПОМЕСТИТЬ ТаблицаУслугДляНачисления
		|ИЗ
		|	&СписокУслуг КАК СписокУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗданий.Объект,
		|	ТаблицаУслугДляНачисления.Услуга,
		|	ТаблицаУслугДляНачисления.ВидОперации
		|ПОМЕСТИТЬ ТаблицаОбъектовУслугДляНачисления
		|ИЗ
		|	ТаблицаЗданий КАК ТаблицаЗданий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУслугДляНачисления КАК ТаблицаУслугДляНачисления
		|		ПО (ИСТИНА)";
	Иначе
		СписокУслуг = Объект.Услуги.Выгрузить(Новый Структура("ФормироватьЛьготы", Истина));
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокУслуг.Услуга КАК Услуга,
		|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот) КАК ВидОперации
		|ПОМЕСТИТЬ ТаблицаУслугДляЛьгот
		|ИЗ
		|	&СписокУслуг КАК СписокУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗданий.Объект,
		|	ТаблицаУслугДляЛьгот.Услуга,
		|	ТаблицаУслугДляЛьгот.ВидОперации
		|ПОМЕСТИТЬ ТаблицаОбъектовУслугДляЛьгот
		|ИЗ
		|	ТаблицаЗданий КАК ТаблицаЗданий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУслугДляЛьгот КАК ТаблицаУслугДляЛьгот
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
// Процедура исключает из таблицы документов начисления услуг строки по услугам, которые являются базами расчета
// для услуг общедомовых счетчиков (также выбранных в мастере для начисления).
Процедура ИсключитьУслугиБазыРасчетаНачисляемыеСОбщедомовыми(ТаблицаДокументовНачисленияУслуг)
	
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаДокументовНачисленияУслуг Цикл
		НайденныеСтроки = ТаблицаПриоритетовУслуг.НайтиСтроки(Новый Структура("Услуга, НачислятьУслугуСОбщедомовой", СтрокаТаблицыДокументов.Услуга, Истина));
		
		Для Каждого СтрокаУслуги Из НайденныеСтроки Цикл
			
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицыДокументов);
			
			НайденныеСтрокиОбщедомовыхУслуг = ТаблицаДокументовНачисленияУслуг.НайтиСтроки(Новый Структура("Объект, Услуга", СтрокаТаблицыДокументов.Объект, СтрокаУслуги.УслугаОбщедомовогоСчетчика));
			
			Для Каждого СтрокаОбщедомойУслуги Из НайденныеСтрокиОбщедомовыхУслуг Цикл
				СтрокаОбщедомойУслуги.ПредставлениеУслуги = СтрокаОбщедомойУслуги.ПредставлениеУслуги + " (" + СтрокаТаблицыДокументов.ПредставлениеУслуги + ")";
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		ТаблицаДокументовНачисленияУслуг.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция формирует таблицу объектов документов расчета льгот.
Функция СформироватьТаблицуНачисленияЛьгот(Запрос, ЭтоВыводРезультата = Ложь)
	
	ДополнитьЗапросТаблицейУслуг(Запрос, Ложь);
	
	ТаблицаОбъектов = Неопределено;
	
	Если ЭтоВыводРезультата Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	ТаблицаОбъектов.ВидОперации КАК ВидОперации,
		|	ТаблицаОбъектов.Услуга КАК Услуга,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументСсылка КАК ДокументЛьгот,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументПроведен КАК ДокументПроведен,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.СуммаДокумента КАК СуммаДокумента,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.Комментарий КАК Комментарий
		|ИЗ
		|	ТаблицаОбъектовУслугДляЛьгот КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
		|		ПО (УПЖКХ_ЗадачиСеансовМастераНачислений.Объект = ТаблицаОбъектов.Объект)
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот))
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.Услуга = ТаблицаОбъектов.Услуга)
		|			И (КОНЕЦПЕРИОДА(УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбъектов.Объект";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.Объект КАК Объект,
		|	ТаблицаОбъектов.ВидОперации КАК ВидОперации,
		|	ТаблицаОбъектов.Услуга КАК Услуга,
		|	ЕСТЬNULL(КВП_РасчетЛьгот.Ссылка, ЗНАЧЕНИЕ(Документ.КВП_РасчетЛьгот.ПустаяСсылка)) КАК ДокументЛьгот,
		|	КВП_РасчетЛьгот.Проведен КАК ДокументПроведен,
		|	КВП_РасчетЛьгот.СуммаДокумента КАК СуммаДокумента,
		|	"""" КАК Комментарий
		|ИЗ
		|	ТаблицаОбъектовУслугДляЛьгот КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РасчетЛьгот КАК КВП_РасчетЛьгот
		|		ПО (КВП_РасчетЛьгот.Объект = ТаблицаОбъектов.Объект)
		|			И (КВП_РасчетЛьгот.Организация = &Организация)
		|			И (КВП_РасчетЛьгот.Услуга = ТаблицаОбъектов.Услуга)
		|			И (НЕ КВП_РасчетЛьгот.ПометкаУдаления)
		|			И (КОНЕЦПЕРИОДА(КВП_РасчетЛьгот.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаОбъектов.Объект";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",      Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

&НаСервере
// Функция формирует таблицу объектов документов начисления пени.
Функция СформироватьТаблицуНачисленияПени(Запрос, ЭтоВыводРезультата = Ложь)
	
	ТаблицаОбъектов = Неопределено;
	
	Если ЭтоВыводРезультата Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗданий.Объект КАК Объект,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументСсылка КАК ДокументПени,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументПроведен КАК ДокументПроведен,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.СуммаДокумента КАК СуммаДокумента,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.Комментарий КАК Комментарий
		|ИЗ
		|	ТаблицаЗданий КАК ТаблицаЗданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
		|		ПО (УПЖКХ_ЗадачиСеансовМастераНачислений.Объект = ТаблицаЗданий.Объект)
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени))
		|			И (КОНЕЦПЕРИОДА(УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса)";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗданий.Объект КАК Объект,
		|	ЕСТЬNULL(КВП_НачислениеПени.Ссылка, ЗНАЧЕНИЕ(Документ.КВП_НачислениеПени.ПустаяСсылка)) КАК ДокументПени,
		|	КВП_НачислениеПени.Проведен КАК ДокументПроведен,
		|	КВП_НачислениеПени.СуммаДокумента КАК СуммаДокумента,
		|	"""" КАК Комментарий
		|ИЗ
		|	ТаблицаЗданий КАК ТаблицаЗданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_НачислениеПени КАК КВП_НачислениеПени
		|		ПО (КВП_НачислениеПени.Объект = ТаблицаЗданий.Объект)
		|			И (КВП_НачислениеПени.Организация = &Организация)
		|			И (НЕ КВП_НачислениеПени.ПометкаУдаления)
		|			И (КОНЕЦПЕРИОДА(КВП_НачислениеПени.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",      Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

&НаСервере
// Функция формирует таблицу объектов документов начисления пени.
Функция СформироватьТаблицуЗакрытияПериода(Запрос, ЭтоВыводРезультата = Ложь)
	
	ТаблицаОбъектов = Неопределено;
	
	Если ЭтоВыводРезультата Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗданий.Объект КАК Объект,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументСсылка КАК ДокументЗакрытия,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.ДокументПроведен КАК ДокументПроведен,
		|	УПЖКХ_ЗадачиСеансовМастераНачислений.Комментарий КАК Комментарий
		|ИЗ
		|	ТаблицаЗданий КАК ТаблицаЗданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
		|		ПО (УПЖКХ_ЗадачиСеансовМастераНачислений.Объект = ТаблицаЗданий.Объект)
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода))
		|			И (КОНЕЦПЕРИОДА(УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))
		|			И (УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса)";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗданий.Объект КАК Объект,
		|	ЕСТЬNULL(УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.Ссылка, ЗНАЧЕНИЕ(Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.ПустаяСсылка)) КАК ДокументЗакрытия,
		|	УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.Проведен КАК ДокументПроведен,
		|	"""" КАК Комментарий
		|ИЗ
		|	ТаблицаЗданий КАК ТаблицаЗданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ КАК УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
		|		ПО (УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.Объект = ТаблицаЗданий.Объект)
		|			И (УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.Организация = &Организация)
		|			И (НЕ УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.ПометкаУдаления)
		|			И (КОНЕЦПЕРИОДА(УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ.Дата, МЕСЯЦ) = КОНЕЦПЕРИОДА(&Период, МЕСЯЦ))";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Период",      Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

&НаКлиенте
// Возвращает структуру параметров для заполнения с отбором.
//
Функция ПолучитьСтруктуруПараметровДляЗаполненияСОтбором()
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	// Параметры запросов.
	СтруктураПараметров.Вставить("НачПериодЛС"             , НачалоМесяца(Объект.МесяцНачисления));
	СтруктураПараметров.Вставить("КонПериодЛС"             , КонецМесяца(Объект.МесяцНачисления));
	СтруктураПараметров.Вставить("ОрганизацияЛС"           , Объект.Организация);
	
	СтруктураПараметров.Вставить("ТипОбъекта"              , "Здания");
	СтруктураПараметров.Вставить("ТипЗначОбъекта"          , "Здания");
	СтруктураПараметров.Вставить("ЗаблокироватьТипОбъекта" , Истина);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
// Возвращает таблицу значений с действующими услугами здания
//
Функция ПолучитьДействующиеУслугиПоЗданию(Здание)
	
		// 1. Получить список лицевых счетов по зданию
		Здания = Новый СписокЗначений;
		Здания.Добавить(Здание);
		ЛСЗдания = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(Здания, НачалоМесяца(Объект.МесяцНачисления), КонецМесяца(Объект.МесяцНачисления), Ложь);
	
		// 2. Получить список услуг по перечню лицевых счетов
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Организация", Объект.Организация);
		ТаблицаДействующихУслуг = КВП_ПолучитьТаблицуДействующихУслугВПериоде(КонецМесяца(Объект.МесяцНачисления), ЛСЗдания, Неопределено, СтруктураПараметров, "", "");
	
		ТаблицаДействующихУслуг.Свернуть("Услуга");
		
		Возврат ТаблицаДействующихУслуг;
		
КонецФункции

&НаСервере
// Заполняет таблицу действующих услуг в разрезе зданий
//
Процедура ЗаполнитьТаблицуДействующихУслугПоЗданиям(ЭтоВыводРезультата)
	
	// Повторный вызов при выводе результата.
	// Отсечку делать не надо, использовать услуги, которые уже есть в таблице.
	Если ЭтоВыводРезультата Тогда
		Возврат;
	КонецЕсли;

	// Первый вызов.
	// Настройка отсечки не установлена.
	// Очищаем таблицу и не заполняем ее.
	Если Не Объект.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам Тогда
		
		Если ДействующиеУслугиПоЗданиям.Количество() > 0 Тогда
			ДействующиеУслугиПоЗданиям.Очистить();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Перед заполнением очистить таблицу
	Если ДействующиеУслугиПоЗданиям.Количество() > 0 Тогда
			ДействующиеУслугиПоЗданиям.Очистить();
	КонецЕсли;
	
	// Заполнить таблицу действующими услугами.
	Для Каждого СтрокаЗдания Из Объект.Здания Цикл
	
		ТаблицаДействующихУслугПоЗданию = ПолучитьДействующиеУслугиПоЗданию(СтрокаЗдания.Объект);
	
		Для Каждого СтрокаТаблицаДействующихУслугПоЗданию Из ТаблицаДействующихУслугПоЗданию Цикл
	
			СтрокаТаблицаДействующихУслугПоЗданиям        = ДействующиеУслугиПоЗданиям.Добавить();
			СтрокаТаблицаДействующихУслугПоЗданиям.Здание = СтрокаЗдания.Объект;
			СтрокаТаблицаДействующихУслугПоЗданиям.Услуга = СтрокаТаблицаДействующихУслугПоЗданию.Услуга;
	
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНедействующиеУслугиИзТаблицыДокументов(ТаблицаДокументов)
	
	// Если настройка отсечки не установлена, то не удаляем недействующие услуги
	Если Не Объект.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокНаУдаление = Новый Массив;
	
	Для Каждого СтрокаТаблицаДокументов Из ТаблицаДокументов Цикл
	
		// Условие отбора по паре параметров: здание и услуга
		ОтборУслуги = Новый Структура("Здание, Услуга", СтрокаТаблицаДокументов.Объект, СтрокаТаблицаДокументов.Услуга);
	
		// Отбор строк с действующей услугой по зданию
		ДействующаяУслугаПоЗданию = ДействующиеУслугиПоЗданиям.НайтиСтроки(ОтборУслуги);
	
		// Услуга из строки ТаблицаДокументов недействующая
		// Записать строку ТЗ ТаблицаДокументов для последующего удаления.
		Если ДействующаяУслугаПоЗданию.Количество() = 0 Тогда
			МассивСтрокНаУдаление.Добавить(СтрокаТаблицаДокументов);
		КонецЕсли;
	
	КонецЦикла;
	
	// Удаление недействующих услуг
	Для Каждого ЭлементМассиваНаУдаление Из МассивСтрокНаУдаление Цикл
		
		ТаблицаДокументов.Удалить(ЭлементМассиваНаУдаление);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДОКУМЕНТОВ

&НаСервере
// Функция возвращает структуру формирования документов, содержащую
// количество каждого вида документов, общее количество и количество готовых документов.
Функция ПолучитьСтруктуруФормированияДокументов()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(УПЖКХ_ЗадачиСеансовМастераНачислений.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ПриоритетСледующегоНачисления
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И (НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 2
	|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 3)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ОбщееКоличествоДокументов
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ОбщееКоличествоГотовыхДокументов
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ОбщееКоличествоДокументовТекущегоНачисления
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.Приоритет = &ТекущийПриоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоГотовыхДокументовТекущегоНачисления
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.Приоритет = &ТекущийПриоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоОшибочныхДокументовТекущегоНачисления
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.Приоритет = &ТекущийПриоритет
	|	И (УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 2
	|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 3)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации КАК ТекущийВидОперации
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.Приоритет = &ТекущийПриоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетСледующегоНачисления.Приоритет КАК СледующийПриоритет
	|ИЗ
	|	ПриоритетСледующегоНачисления КАК ПриоритетСледующегоНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументовНачисленияНаЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументовНачисленияСтрахования
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументовНачисленияПоПУ
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументовНачисленияЛьгот
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументовНачисленияПени
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДокументовЗакрытияПериода
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоПустыхДокументовНачисленияНаЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС)
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоПустыхДокументовНачисленияСтрахования
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования)
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоПустыхДокументовНачисленияПоПУ
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ)
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоПустыхДокументовНачисленияЛьгот
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот)
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоПустыхДокументовНачисленияПени
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени)
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.СтатусОшибки = 4";
	
	Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
	Запрос.УстановитьПараметр("МесяцНачисления",     Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("ТекущийПриоритет",    ТекущийПриоритет);
	
	ПакетРезультат = Запрос.ВыполнитьПакет();
	
	ОбщееКоличествоДокументов                       = 0;
	ОбщееКоличествоГотовыхДокументов                = 0;
	ОбщееКоличествоДокументовТекущегоНачисления     = 0;
	КоличествоГотовыхДокументовТекущегоНачисления   = 0;
	КоличествоОшибочныхДокументовТекущегоНачисления = 0;
	ТекущийВидОперации                              = Неопределено;
	СледующийПриоритет                              = 0;
	КоличествоДокументовНачисленияНаЛС              = 0;
	КоличествоДокументовНачисленияСтрахования       = 0;
	КоличествоДокументовНачисленияПоПУ              = 0;
	КоличествоДокументовНачисленияЛьгот             = 0;
	КоличествоДокументовНачисленияПени              = 0;
	КоличествоДокументовЗакрытияПериода             = 0;
	КоличествоПустыхДокументовНачисленияНаЛС        = 0;
	КоличествоПустыхДокументовНачисленияСтрахования = 0;
	КоличествоПустыхДокументовНачисленияПоПУ        = 0;
	КоличествоПустыхДокументовНачисленияЛьгот       = 0;
	КоличествоПустыхДокументовНачисленияПени        = 0;
	
	Выборка = ПакетРезультат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщееКоличествоДокументов = Выборка.ОбщееКоличествоДокументов;
	КонецЕсли;
	
	Выборка = ПакетРезультат[2].Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщееКоличествоГотовыхДокументов = Выборка.ОбщееКоличествоГотовыхДокументов;
	КонецЕсли;
	
	Выборка = ПакетРезультат[3].Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщееКоличествоДокументовТекущегоНачисления = Выборка.ОбщееКоличествоДокументовТекущегоНачисления;
	КонецЕсли;
	
	Выборка = ПакетРезультат[4].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоГотовыхДокументовТекущегоНачисления = Выборка.КоличествоГотовыхДокументовТекущегоНачисления;
	КонецЕсли;
	
	Выборка = ПакетРезультат[5].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоОшибочныхДокументовТекущегоНачисления = Выборка.КоличествоОшибочныхДокументовТекущегоНачисления;
	КонецЕсли;
	
	Выборка = ПакетРезультат[6].Выбрать();
	Если Выборка.Следующий() Тогда
		ТекущийВидОперации = Выборка.ТекущийВидОперации;
	КонецЕсли;
	
	Выборка = ПакетРезультат[7].Выбрать();
	Если Выборка.Следующий() Тогда
		СледующийПриоритет = Выборка.СледующийПриоритет;
	КонецЕсли;
	
	Выборка = ПакетРезультат[8].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДокументовНачисленияНаЛС = Выборка.КоличествоДокументовНачисленияНаЛС;
	КонецЕсли;
	
	Выборка = ПакетРезультат[9].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДокументовНачисленияСтрахования = Выборка.КоличествоДокументовНачисленияСтрахования;
	КонецЕсли;
	
	Выборка = ПакетРезультат[10].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДокументовНачисленияПоПУ = Выборка.КоличествоДокументовНачисленияПоПУ;
	КонецЕсли;
	
	Выборка = ПакетРезультат[11].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДокументовНачисленияЛьгот = Выборка.КоличествоДокументовНачисленияЛьгот;
	КонецЕсли;
	
	Выборка = ПакетРезультат[12].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДокументовНачисленияПени = Выборка.КоличествоДокументовНачисленияПени;
	КонецЕсли;
	
	Выборка = ПакетРезультат[13].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДокументовЗакрытияПериода = Выборка.КоличествоДокументовЗакрытияПериода;
	КонецЕсли;
	
	Выборка = ПакетРезультат[14].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПустыхДокументовНачисленияНаЛС = Выборка.КоличествоПустыхДокументовНачисленияНаЛС;
	КонецЕсли;
	
	Выборка = ПакетРезультат[15].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПустыхДокументовНачисленияСтрахования = Выборка.КоличествоПустыхДокументовНачисленияСтрахования;
	КонецЕсли;
	
	Выборка = ПакетРезультат[16].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПустыхДокументовНачисленияПоПУ = Выборка.КоличествоПустыхДокументовНачисленияПоПУ;
	КонецЕсли;
	
	Выборка = ПакетРезультат[17].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПустыхДокументовНачисленияЛьгот = Выборка.КоличествоПустыхДокументовНачисленияЛьгот;
	КонецЕсли;
	
	Выборка = ПакетРезультат[18].Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоПустыхДокументовНачисленияПени = Выборка.КоличествоПустыхДокументовНачисленияПени;
	КонецЕсли;
	
	// Для отображения прогресса выполнения задач посчитаем сколько процентов документов из общего числа уже готово.
	Если ОбщееКоличествоДокументов = 0 Тогда
		Сч = 100;
	ИначеЕсли ОбщееКоличествоГотовыхДокументов = 0 Тогда
		Сч = 1;
	Иначе
		Сч = Окр(100 * ОбщееКоличествоГотовыхДокументов / ОбщееКоличествоДокументов);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Сч", Сч);
	
	СтруктураПараметров.Вставить("ОбщееКоличествоГотовыхДокументов", ОбщееКоличествоГотовыхДокументов);
	СтруктураПараметров.Вставить("ОбщееКоличествоДокументов",        ОбщееКоличествоДокументов);
	
	СтруктураПараметров.Вставить("ОбщееКоличествоДокументовТекущегоНачисления",     ОбщееКоличествоДокументовТекущегоНачисления);
	СтруктураПараметров.Вставить("КоличествоГотовыхДокументовТекущегоНачисления",   КоличествоГотовыхДокументовТекущегоНачисления);
	СтруктураПараметров.Вставить("КоличествоОшибочныхДокументовТекущегоНачисления", КоличествоОшибочныхДокументовТекущегоНачисления);
	СтруктураПараметров.Вставить("ТекущийВидОперации",                              ТекущийВидОперации);
	СтруктураПараметров.Вставить("СледующийПриоритет",                              СледующийПриоритет);
	
	СтруктураПараметров.Вставить("КоличествоДокументовНачисленияНаЛС",              КоличествоДокументовНачисленияНаЛС);
	СтруктураПараметров.Вставить("КоличествоДокументовНачисленияСтрахования",       КоличествоДокументовНачисленияСтрахования);
	СтруктураПараметров.Вставить("КоличествоДокументовНачисленияПоПУ",              КоличествоДокументовНачисленияПоПУ);
	СтруктураПараметров.Вставить("КоличествоДокументовНачисленияЛьгот",             КоличествоДокументовНачисленияЛьгот);
	СтруктураПараметров.Вставить("КоличествоДокументовНачисленияПени",              КоличествоДокументовНачисленияПени);
	СтруктураПараметров.Вставить("КоличествоДокументовЗакрытияПериода",             КоличествоДокументовЗакрытияПериода);
	
	СтруктураПараметров.Вставить("КоличествоПустыхДокументовНачисленияНаЛС",        КоличествоПустыхДокументовНачисленияНаЛС);
	СтруктураПараметров.Вставить("КоличествоПустыхДокументовНачисленияСтрахования", КоличествоПустыхДокументовНачисленияСтрахования);
	СтруктураПараметров.Вставить("КоличествоПустыхДокументовНачисленияПоПУ",        КоличествоПустыхДокументовНачисленияПоПУ);
	СтруктураПараметров.Вставить("КоличествоПустыхДокументовНачисленияЛьгот",       КоличествоПустыхДокументовНачисленияЛьгот);
	СтруктураПараметров.Вставить("КоличествоПустыхДокументовНачисленияПени",        КоличествоПустыхДокументовНачисленияПени);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
// Функция создает список документов (набор записей) в регистре сведений
// для последующего формирования документов по данному списку.
// Возвращает "Истина" в переменную "Отказ", если не удалось сформировать список документов.
//            "Ложь" - если список документов успешно создан.
Функция СоздатьСписокФормируемыхДокументов()
	
	ТаблицаДокументовНачисленияУслуг = ПолучитьТаблицуДокументовНачисленияУслуг();
	ТаблицаДокументовНачисленияЛьгот = ПолучитьТаблицуДокументовНачисленияЛьгот();
	ТаблицаДокументовНачисленияПени  = ПолучитьТаблицуДокументовНачисленияПени();
	ТаблицаДокументовЗакрытияПериода = ПолучитьТаблицуДокументовЗакрытияПериода();
	
	Организация = Объект.Организация;
	
	ПриоритетДокумента = 1;
	МаксимальныйПриоритет = ПриоритетДокумента;
	
	// СОЗДАДИМ НАБОР ЗАПИСЕЙ В РЕГИСТРЕ СВЕДЕНИЙ "Задачи сеансов мастера начислений" ДЛЯ ДОКУМЕНТОВ НАЧИСЛЕНИЯ УСЛУГ.
	Для Каждого СтрокаТаблицы Из ТаблицаДокументовНачисленияУслуг Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета Тогда
			ВидОперацииМастераНачислений = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС;
		ИначеЕсли СтрокаТаблицы.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
			ВидОперацииМастераНачислений = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ;
		Иначе
			ВидОперацииМастераНачислений = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования;
		КонецЕсли;
		
		// Определим приоритет текущей услуги среди остальных услуг.
		НайденныйПриоритетУслуги = ТаблицаПриоритетовУслуг.НайтиСтроки(Новый Структура("Услуга", СтрокаТаблицы.Услуга));
		
		Если НайденныйПриоритетУслуги.Количество() > 0 Тогда
			ПриоритетДокумента = НайденныйПриоритетУслуги[0].Приоритет;
		КонецЕсли;
		
		// Запомним максимальный приоритет услуги, чтобы использовать его для установки приоритетов
		// расчета льгот, начисления пени и закрытия периода.
		Если МаксимальныйПриоритет < ПриоритетДокумента Тогда
			МаксимальныйПриоритет = ПриоритетДокумента;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
		НаборЗаписей.Отбор.МесяцНачисления.Установить(Объект.МесяцНачисления);
		НаборЗаписей.Отбор.ВидОперации.Установить(ВидОперацииМастераНачислений);
		НаборЗаписей.Отбор.Объект.Установить(СтрокаТаблицы.Здание);
		НаборЗаписей.Отбор.Услуга.Установить(СтрокаТаблицы.Услуга);
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ИдентификаторСеанса = ИдентификаторСеанса;
			НоваяЗапись.МесяцНачисления     = Объект.МесяцНачисления;
			НоваяЗапись.Объект              = СтрокаТаблицы.Здание;
			НоваяЗапись.ВидОперации         = ВидОперацииМастераНачислений;
			НоваяЗапись.Услуга              = СтрокаТаблицы.Услуга;
			НоваяЗапись.Организация         = Организация;
			НоваяЗапись.ДокументСсылка      = СтрокаТаблицы.Документ;
			НоваяЗапись.Приоритет           = ПриоритетДокумента;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// СОЗДАДИМ НАБОР ЗАПИСЕЙ В РЕГИСТРЕ СВЕДЕНИЙ "Задачи сеансов мастера начислений" ДЛЯ ДОКУМЕНТОВ РАСЧЕТА ЛЬГОТ.
	
	// Увеличим приоритет документа на "1" - это будет приоритет для расчета льгот.
	ПриоритетДокумента = МаксимальныйПриоритет + 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументовНачисленияЛьгот Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
		НаборЗаписей.Отбор.МесяцНачисления.Установить(Объект.МесяцНачисления);
		НаборЗаписей.Отбор.ВидОперации.Установить(Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот);
		НаборЗаписей.Отбор.Объект.Установить(СтрокаТаблицы.Здание);
		НаборЗаписей.Отбор.Услуга.Установить(СтрокаТаблицы.Услуга);
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ИдентификаторСеанса = ИдентификаторСеанса;
			НоваяЗапись.МесяцНачисления     = Объект.МесяцНачисления;
			НоваяЗапись.Объект              = СтрокаТаблицы.Здание;
			НоваяЗапись.ВидОперации         = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот;
			НоваяЗапись.Услуга              = СтрокаТаблицы.Услуга;
			НоваяЗапись.Организация         = Организация;
			НоваяЗапись.ДокументСсылка      = СтрокаТаблицы.Документ;
			НоваяЗапись.Приоритет           = ПриоритетДокумента;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// СОЗДАДИМ НАБОР ЗАПИСЕЙ В РЕГИСТРЕ СВЕДЕНИЙ "Задачи сеансов мастера начислений" ДЛЯ ДОКУМЕНТОВ НАЧИСЛЕНИЯ ПЕНИ.
	
	// Увеличим приоритет документа на "1" - это будет приоритет для начислений пени.
	ПриоритетДокумента = МаксимальныйПриоритет + 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументовНачисленияПени Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
		НаборЗаписей.Отбор.МесяцНачисления.Установить(Объект.МесяцНачисления);
		НаборЗаписей.Отбор.Объект.Установить(СтрокаТаблицы.Здание);
		НаборЗаписей.Отбор.ВидОперации.Установить(Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени);
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ИдентификаторСеанса = ИдентификаторСеанса;
			НоваяЗапись.МесяцНачисления     = Объект.МесяцНачисления;
			НоваяЗапись.Объект              = СтрокаТаблицы.Здание;
			НоваяЗапись.ВидОперации         = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени;
			НоваяЗапись.Организация         = Организация;
			НоваяЗапись.ДокументСсылка      = СтрокаТаблицы.Документ;
			НоваяЗапись.Приоритет           = ПриоритетДокумента;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	// СОЗДАДИМ НАБОР ЗАПИСЕЙ В РЕГИСТРЕ СВЕДЕНИЙ "Мастер начислений" ДЛЯ ДОКУМЕНТОВ ЗАКРЫТИЯ ПЕРИОДА.
	
	// Увеличим приоритет документа на "1" - это будет приоритет для закрытия периода.
	ПриоритетДокумента = ПриоритетДокумента + 1;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокументовЗакрытияПериода Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
		НаборЗаписей.Отбор.МесяцНачисления.Установить(Объект.МесяцНачисления);
		НаборЗаписей.Отбор.Объект.Установить(СтрокаТаблицы.Здание);
		НаборЗаписей.Отбор.ВидОперации.Установить(Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода);
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ИдентификаторСеанса = ИдентификаторСеанса;
			НоваяЗапись.МесяцНачисления     = Объект.МесяцНачисления;
			НоваяЗапись.Объект              = СтрокаТаблицы.Здание;
			НоваяЗапись.ВидОперации         = Перечисления.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода;
			НоваяЗапись.Организация         = Организация;
			НоваяЗапись.ДокументСсылка      = СтрокаТаблицы.Документ;
			НоваяЗапись.Приоритет           = ПриоритетДокумента;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Процедура запускает формирование документов начисления услуг, начисления пени и закрытия периода.
Процедура СформироватьДокументы(Приоритет = 1, ЭтоДоработкаДокументов = Ложь)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СнятьБлокировкиЗаписейРегистра(ИдентификаторСеанса);
	
	ОбработкаОбъект.СформироватьДокументы(ИдентификаторСеанса, Приоритет, ЭтоДоработкаДокументов);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Функция возвращает таблицу документов начисления услуг на основании данных, содержащихся в дереве значений.
Функция ПолучитьТаблицуДокументовНачисленияУслуг()
	
	// Создадим и заполним таблицу значений по данным дерева значений документов начисления услуг.
	ТаблицаДокументовНачисленияУслуг = Новый ТаблицаЗначений;
	ТаблицаДокументовНачисленияУслуг.Колонки.Добавить("Здание",      Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	ТаблицаДокументовНачисленияУслуг.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыОперацийНачисленияУслуг"));
	ТаблицаДокументовНачисленияУслуг.Колонки.Добавить("Услуга",      Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаДокументовНачисленияУслуг.Колонки.Добавить("Документ",    Новый ОписаниеТипов("ДокументСсылка.КВП_НачислениеУслуг"));
	ТаблицаДокументовНачисленияУслуг.Колонки.Добавить("Проведен",    Новый ОписаниеТипов("Булево"));
	ТаблицаДокументовНачисленияУслуг.Колонки.Добавить("Приоритет",   Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекВеткаЗдание Из ДеревоДокументовНачисленияУслуг.ПолучитьЭлементы() Цикл
		Для Каждого ТекВеткаОперация Из ТекВеткаЗдание.ПолучитьЭлементы() Цикл
			Для Каждого ТекВеткаУслуга Из ТекВеткаОперация.ПолучитьЭлементы() Цикл
				
				СтрокаТаблицы             = ТаблицаДокументовНачисленияУслуг.Добавить();
				СтрокаТаблицы.Здание      = ТекВеткаЗдание.Объект;
				СтрокаТаблицы.ВидОперации = ТекВеткаОперация.Объект;
				СтрокаТаблицы.Услуга      = ТекВеткаУслуга.Объект;
				СтрокаТаблицы.Документ    = ТекВеткаУслуга.ДокументНачисления;
				СтрокаТаблицы.Проведен    = ТекВеткаУслуга.Доп_Проведен;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаДокументовНачисленияУслуг;
	
КонецФункции

&НаСервере
// Функция возвращает таблицу документов расчета льгот на основании данных, содержащихся в дереве значений.
Функция ПолучитьТаблицуДокументовНачисленияЛьгот()
	
	// Создадим и заполним таблицу значений по данным дерева значений документов расчета льгот.
	ТаблицаДокументовНачисленияЛьгот = Новый ТаблицаЗначений;
	ТаблицаДокументовНачисленияЛьгот.Колонки.Добавить("Здание",    Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	ТаблицаДокументовНачисленияЛьгот.Колонки.Добавить("Услуга",    Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаДокументовНачисленияЛьгот.Колонки.Добавить("Документ",  Новый ОписаниеТипов("ДокументСсылка.КВП_РасчетЛьгот"));
	ТаблицаДокументовНачисленияЛьгот.Колонки.Добавить("Проведен",  Новый ОписаниеТипов("Булево"));
	ТаблицаДокументовНачисленияЛьгот.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекВеткаЗдание Из ДеревоДокументовНачисленияЛьгот.ПолучитьЭлементы() Цикл
		
		Для Каждого ТекВеткаУслуга Из ТекВеткаЗдание.ПолучитьЭлементы() Цикл
			
			СтрокаТаблицы           = ТаблицаДокументовНачисленияЛьгот.Добавить();
			СтрокаТаблицы.Здание    = ТекВеткаЗдание.Объект;
			СтрокаТаблицы.Услуга    = ТекВеткаУслуга.Объект;
			СтрокаТаблицы.Документ  = ТекВеткаУслуга.ДокументЛьгот;
			СтрокаТаблицы.Проведен  = ТекВеткаУслуга.Доп_Проведен;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументовНачисленияЛьгот;
	
КонецФункции

&НаСервере
// Функция возвращает таблицу документов начисления пени на основании данных, содержащихся в дереве значений.
Функция ПолучитьТаблицуДокументовНачисленияПени()
	
	// Создадим и заполним таблицу значений по данным дерева значений документов начисления пени.
	ТаблицаДокументовНачисленияПени = Новый ТаблицаЗначений;
	ТаблицаДокументовНачисленияПени.Колонки.Добавить("Здание",    Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	ТаблицаДокументовНачисленияПени.Колонки.Добавить("Документ",  Новый ОписаниеТипов("ДокументСсылка.КВП_НачислениеПени"));
	ТаблицаДокументовНачисленияПени.Колонки.Добавить("Проведен",  Новый ОписаниеТипов("Булево"));
	ТаблицаДокументовНачисленияПени.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекВеткаЗдание Из ДеревоДокументовНачисленияПени.ПолучитьЭлементы() Цикл
		
		СтрокаТаблицы           = ТаблицаДокументовНачисленияПени.Добавить();
		СтрокаТаблицы.Здание    = ТекВеткаЗдание.Объект;
		СтрокаТаблицы.Документ  = ТекВеткаЗдание.ДокументПени;
		СтрокаТаблицы.Проведен  = ТекВеткаЗдание.Доп_Проведен;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументовНачисленияПени;
	
КонецФункции

&НаСервере
// Функция возвращает таблицу документов закрытия периода на основании данных, содержащихся в дереве значений.
Функция ПолучитьТаблицуДокументовЗакрытияПериода()
	
	// Создадим и заполним таблицу значений по данным дерева значений документов закрытия периода.
	ТаблицаДокументовЗакрытияПериода = Новый ТаблицаЗначений;
	ТаблицаДокументовЗакрытияПериода.Колонки.Добавить("Здание",    Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	ТаблицаДокументовЗакрытияПериода.Колонки.Добавить("Документ",  Новый ОписаниеТипов("ДокументСсылка.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ"));
	ТаблицаДокументовЗакрытияПериода.Колонки.Добавить("Проведен",  Новый ОписаниеТипов("Булево"));
	ТаблицаДокументовЗакрытияПериода.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекВеткаЗдание Из ДеревоДокументовЗакрытияПериода.ПолучитьЭлементы() Цикл
		
		СтрокаТаблицы           = ТаблицаДокументовЗакрытияПериода.Добавить();
		СтрокаТаблицы.Здание    = ТекВеткаЗдание.Объект;
		СтрокаТаблицы.Документ  = ТекВеткаЗдание.ДокументЗакрытия;
		СтрокаТаблицы.Проведен  = ТекВеткаЗдание.Доп_Проведен;
		
	КонецЦикла;
	
	Возврат ТаблицаДокументовЗакрытияПериода;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ИдентификаторСеанса", ИдентификаторСеанса) Тогда
		ЭтоПродолжениеЗадачи = Истина;
	КонецЕсли;
	
	ИнициализацияРеквизитов();
	
	Если НЕ ЭтоПродолжениеЗадачи Тогда
		ВосстановитьНастройки();
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельНавигации);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	ОбновитьПараметрыМесяцаНачисленияИДняРегистрацииДокументов();
	
	УправлениеФормой();
	
	ТаблицаДействующихУслугПоЗданиям = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ФормированиеДокументовЗавершено Тогда
		
		Отказ = Истина;
		
		Если ЗапущеноФормированиеДокументов ИЛИ ЗапущенаДоработкаОшибочных Тогда
			
			Оповещение = Новый ОписаниеОповещения("ОбработчикПередЗакрытиемВоВремяФормирования", ЭтотОбъект);
			
			ТекстВопроса = "Формирование документов не завершено! При закрытии ""Мастера начисление"" не все документы будут сформированы! Вы уверены, что хотите закрыть ""Мастер начислений""?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			Оповещение = Новый ОписаниеОповещения("ОбработчикПередЗакрытиемДоФормирования", ЭтотОбъект);
			
			ТекстВопроса = "Вы уверены, что хотите закрыть ""Мастер начислений""? Введенные данные не будут сохранены!";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	Иначе
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ОбработчикПередЗакрытиемПослеФормирования", ЭтотОбъект);
		
		ТекстВопроса = "Очистить временные данные? Эта процедура может занять некоторое время.";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата ответа на вопрос при попытке закрыть форму обработки до начала формирования документов.
Процедура ОбработчикПередЗакрытиемДоФормирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьФорму = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик результата ответа на вопрос при попытке закрыть форму обработки во время процесса формирования документов.
Процедура ОбработчикПередЗакрытиемВоВремяФормирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьФорму = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик результата ответа на вопрос при закрытии формы обработки после завершения процесса формирования документов.
Процедура ОбработчикПередЗакрытиемПослеФормирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Отмена Тогда
	
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			Состояние("Пожалуйста, подождите - происходит удаление временных данных...");
			ОчиститьВременныеДанныеРегистра(ИдентификаторСеанса);
			
		КонецЕсли;
		
		ЗакрытьФорму = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработка события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		
		УправлениеФормой();
		
		// Обновление настроек использования многопоточности.
		СтруктураНастроекМногопоточности = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьНастройкиМногопоточности();
		
		Объект.ИспользоватьМногопоточность = СтруктураНастроекМногопоточности.ИспользоватьМногопоточность;
		Объект.КоличествоПотоков           = СтруктураНастроекМногопоточности.КоличествоПотоков;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

/////////////////////////////////////////////////////////////////////////////////
// МЕСЯЦ СТРОКОЙ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "МесяцНачисленияСтрокой".
//
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("МесяцНачисленияСтрокой").
//
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	
	ОбновитьПараметрыМесяцаНачисленияИДняРегистрацииДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "МесяцНачисленияСтрокой".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("МесяцНачисленияСтрокой").
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Новый ОписаниеОповещения("ЗавершениеВыбораМесяцаНачисления", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора месяца начисления.
//
Процедура ЗавершениеВыбораМесяцаНачисления(Результат, ДопПараметры) Экспорт
	
	ОбновитьПараметрыМесяцаНачисленияИДняРегистрацииДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Регулирование" поля ввода "МесяцНачисленияСтрокой".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("МесяцНачисленияСтрокой").
//  Направление			- <Число>
//        				- Позволяет определить, какая из кнопок регулирования была нажата.
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление,
														Модифицированность);
	
	ОбновитьПараметрыМесяцаНачисленияИДняРегистрацииДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля ввода "МесяцНачисленияСтрокой".
//
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("МесяцНачисленияСтрокой").
//  Текст 				- <Строка>
//        				- Строка текста, введенная в поле ввода ("МесяцНачисленияСтрокой").
//  ТекстАвтоПодбора 	- <Строка>
//          			- После завершения обработки события содержит текст 
//                         для размещения в поле ввода("МесяцНачисленияСтрокой").
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ОбновитьПараметрыМесяцаНачисленияИДняРегистрацииДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода "МесяцНачисленияСтрокой".
// Параметры:
//  Элемент 			- <ПолеВвода>
//        				- Поле ввода, с которым связано данное событие ("МесяцНачисленияСтрокой").
//  Текст 				- <Строка>
//        				- Строка текста, введенная в поле ввода ("МесяцНачисленияСтрокой").
//  Значение		 	- < СписокЗначений>
//          			- Параметр может содержать значение для размещения 
//						  в поле ввода или список значений для последующего
//                        выбора одного из них и размещения в поле ввода.
//  СтандартнаяОбработка - <Булево. >
//         				 - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события.
//
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
	ОбновитьПараметрыМесяцаНачисленияИДняРегистрацииДокументов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "ВариантРегистрацииДокументов".
Процедура ВариантРегистрацииДокументовПриИзменении(Элемент)
	
	Если ВариантРегистрацииДокументов = 0 Тогда
		Объект.ДеньРегистрацииДокументов = 0;
		
	ИначеЕсли Объект.ДеньРегистрацииДокументов = 0 Тогда
		Объект.ДеньРегистрацииДокументов = День(КонецМесяца(Объект.МесяцНачисления));
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "ДеньРегистрацииДокументов".
Процедура ДеньРегистрацииДокументовПриИзменении(Элемент)
	
	Если Объект.ДеньРегистрацииДокументов = 0 Тогда
		Объект.ДеньРегистрацииДокументов = 1;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ДЕРЕВО УСЛУГ

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" флажка "Формировать начисления" дерева "Услуги".
Процедура ДеревоУслугФормироватьНачисленияПриИзменении(Элемент)
	
	Если ЭтоПродолжениеЗадачи Тогда
		
		ИдТекущейСтроки = Элементы.ДеревоУслуг.ТекущаяСтрока;
		ЭлементКоллекции = ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки);
		
		Если ЭлементКоллекции.УровеньИерархии = 2 Тогда
			ЭлементКоллекции.ФормироватьНачисления = ?(ЭлементКоллекции.ФормироватьНачисления = 1, 0, 1);
		Иначе
			РасставитьФлажкиУслуг();
		КонецЕсли;
		
	Иначе
		ЕстьСформированныеДокументы = Ложь;
		ОбработчикИзмененияФлажковДереваУслуг("ФормироватьНачисления");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" флажка "Формировать льготы" дерева "Услуги".
Процедура ДеревоУслугФормироватьЛьготыПриИзменении(Элемент)
	
	Если ЭтоПродолжениеЗадачи Тогда
		
		ИдТекущейСтроки = Элементы.ДеревоУслуг.ТекущаяСтрока;
		ЭлементКоллекции = ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки);
		
		Если ЭлементКоллекции.УровеньИерархии = 2 Тогда
			ЭлементКоллекции.ФормироватьЛьготы = ?(ЭлементКоллекции.ФормироватьЛьготы = 1, 0, 1);
		Иначе
			РасставитьФлажкиУслуг();
		КонецЕсли;
		
	Иначе
		ЕстьСформированныеДокументы = Ложь;
		ОбработчикИзмененияФлажковДереваУслуг("ФормироватьЛьготы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает значения флажков дерева "Услуги".
Процедура ОбработчикИзмененияФлажковДереваУслуг(НаименованиеФлажка)
	
	ИдТекущейСтроки = Элементы.ДеревоУслуг.ТекущаяСтрока;
	
	Если НЕ ИдТекущейСтроки = Неопределено Тогда
		
		ЭлементКоллекции = ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки);
		
		УстановкаФлажков(ЭлементКоллекции, НаименованиеФлажка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает/снимает флажки элементов дерева "Услуги".
Процедура УстановкаФлажков(ЭлементКоллекции, НаименованиеФлажка)
	
	Если ЭлементКоллекции[НаименованиеФлажка] = 2 Тогда
		ЭлементКоллекции[НаименованиеФлажка] = 0;
	КонецЕсли;
	
	УстановкаФлажковРекурсивная(ЭлементКоллекции, ЭлементКоллекции[НаименованиеФлажка], НаименованиеФлажка);
	
	Родитель = ЭлементКоллекции.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		Родитель[НаименованиеФлажка] = ?(УстановленноДляВсех(ЭлементКоллекции, НаименованиеФлажка), ЭлементКоллекции[НаименованиеФлажка], 2);
		ЭлементКоллекции = Родитель;
		Родитель = ЭлементКоллекции.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура рекурсивно устанавливает/снимает флажки подчиненных элементов узла дерева "Услуги".
Процедура УстановкаФлажковРекурсивная(ЭлементКоллекции, ЗначениеФлажка, НаименованиеФлажка)
	
	// Не взводить флажки расчета льгот по услугам добровольного страхования
	Если НаименованиеФлажка = "ФормироватьЛьготы" И ЭлементКоллекции.Услуга = "Начисления по добровольному страхованию" 
	    И ЗначениеФлажка > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодчинЭлементы = ЭлементКоллекции.ПолучитьЭлементы();
	
	Для Каждого ТекЭлемент Из ПодчинЭлементы Цикл
		ТекЭлемент[НаименованиеФлажка] = ЗначениеФлажка;
		УстановкаФлажковРекурсивная(ТекЭлемент, ТекЭлемент[НаименованиеФлажка], НаименованиеФлажка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Функция проверяет установлены ли все флажки у подчиненных элементов узла дерева "Услуги".
// Возвращает "Истина", если флажки установлены у всех подчиненных элементов, в противном случае возвращает "Ложь".
Функция УстановленноДляВсех(ЭлементКоллекции, НаименованиеФлажка)
	
	СоседниеЭлементы = ЭлементКоллекции.ПолучитьРодителя().ПолучитьЭлементы();
	Для Каждого ТекЭлемент Из СоседниеЭлементы Цикл
		Если ТекЭлемент[НаименованиеФлажка] <> ЭлементКоллекции[НаименованиеФлажка] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" дерева значений "Услуги".
Процедура ДеревоУслугПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" дерева значений "Услуги".
Процедура ДеревоУслугПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура расставляет флажки в дереве значений "Услуги".
Процедура РасставитьФлажкиУслуг()
	
	ВсеУслуги = ДеревоУслуг.ПолучитьЭлементы()[0];
	
	УслугиЛС          = ВсеУслуги.ПолучитьЭлементы()[0];
	УслугиПУ          = ВсеУслуги.ПолучитьЭлементы()[1];
	УслугиСтрахования = ВсеУслуги.ПолучитьЭлементы()[2];
	
	Для Каждого ЭлементКоллекции Из УслугиЛС.ПолучитьЭлементы() Цикл
		
		ИдТекущейСтроки = ЭлементКоллекции.ПолучитьИдентификатор();
		
		УстановкаФлажков(ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки), "ФормироватьНачисления");
		УстановкаФлажков(ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки), "ФормироватьЛьготы");
		Прервать;
		
	КонецЦикла;
	
	Для Каждого ЭлементКоллекции Из УслугиПУ.ПолучитьЭлементы() Цикл
		
		ИдТекущейСтроки = ЭлементКоллекции.ПолучитьИдентификатор();
		
		УстановкаФлажков(ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки), "ФормироватьНачисления");
		УстановкаФлажков(ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки), "ФормироватьЛьготы");
		Прервать;
		
	КонецЦикла;
	
	Для Каждого ЭлементКоллекции Из УслугиСтрахования.ПолучитьЭлементы() Цикл
		
		ИдТекущейСтроки = ЭлементКоллекции.ПолучитьИдентификатор();
		
		УстановкаФлажков(ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки), "ФормироватьНачисления");
		УстановкаФлажков(ЭтаФорма.ДеревоУслуг.НайтиПоИдентификатору(ИдТекущейСтроки), "ФормироватьЛьготы");
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ЭЛЕМЕНТЫ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Здания".
Процедура ЗданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данное здание уже добавлено в список зданий! Выберите другое здание.", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента "Объект" табличного поля "Здания".
Процедура ЗданияОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отказ = Ложь;
	
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЭтоГруппа") Тогда
		
		СписокДобавляемыхЗданий = ПолучитьЗданияИзГруппы(ВыбранноеЗначение, Элементы.Здания.ТекущиеДанные.НомерСтроки);
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЭтоГруппа") Тогда // Если ВыбранноеЗначение по прежнему является группой, то удалим данный элемент.
			Объект.Здания.Удалить(Элементы.Здания.ТекущиеДанные);
		КонецЕсли;
		
		Для Каждого ТекЗдание Из СписокДобавляемыхЗданий Цикл
			
			НоваяСтрокаЗдания = Объект.Здания.Добавить();
			НоваяСтрокаЗдания.Объект = ТекЗдание.Значение;
			
		КонецЦикла;
		
	Иначе
		
		Отказ = ПроверитьНаличиеЗданияВСписке(ВыбранноеЗначение, Элементы.Здания.ТекущиеДанные.НомерСтроки);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данное здание уже добавлено в список зданий! Выберите другое здание.");
		ВыбранноеЗначение = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "Объект" таблицы "ДеревоДокументовНачисленияУслуг".
Процедура ДеревоДокументовНачисленияОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "ДокументНачисления" таблицы "ДеревоДокументовНачисленияУслуг".
Процедура ДеревоДокументовНачисленияДокументНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ДеревоДокументовНачисленияУслуг".
Процедура ДеревоДокументовНачисленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "ДеревоДокументовНачисленияУслуг".
Процедура ДеревоДокументовНачисленияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "Объект" таблицы "ДеревоДокументовНачисленияЛьгот".
Процедура ДеревоДокументовНачисленияЛьготОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "ДокументНачисления" таблицы "ДеревоДокументовНачисленияЛьгот".
Процедура ДеревоДокументовНачисленияЛьготДокументЛьготНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ДеревоДокументовНачисленияЛьгот".
Процедура ДеревоДокументовНачисленияЛьготПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "ДеревоДокументовНачисленияЛьгот".
Процедура ДеревоДокументовНачисленияЛьготПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "Объект" таблицы "ДеревоДокументовНачисленияПени".
Процедура ДеревоДокументовНачисленияПениОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "ДокументПени" таблицы "ДеревоДокументовНачисленияПени".
Процедура ДеревоДокументовНачисленияПениДокументПениНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ДеревоДокументовНачисленияПени".
Процедура ДеревоДокументовНачисленияПениПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "ДеревоДокументовНачисленияПени".
Процедура ДеревоДокументовНачисленияПениПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "Объект" таблицы "ДеревоДокументовЗакрытияПериода".
Процедура ДеревоДокументовЗакрытияПериодаОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" колонки "ДокументЗакрытия" таблицы "ДеревоДокументовЗакрытияПериода".
Процедура ДеревоДокументовЗакрытияПериодаДокументЗакрытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ДеревоДокументовЗакрытияПериода".
Процедура ДеревоДокументовЗакрытияПериодаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "ДеревоДокументовЗакрытияПериода".
Процедура ДеревоДокументовЗакрытияПериодаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - открывает настройки многопоточности.
//
Процедура ГиперссылкаНаСтраницуНастройкуМногопоточностиНажатие(Элемент)
	
	КВП_РаботаСДиалогамиКлиент.ПерейтиНаСтраницуНастроекПроизводительности();
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаДалее".
Процедура КомандаДалее(Команда)
	
	Отказ = ДанныеЗаполненыКорректно();
	
	Если Не Отказ Тогда
		ПоказатьСледующийЭтап();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаНазад".
Процедура КомандаНазад(Команда)
	
	ПоказатьПредыдущийЭтап();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Заполнить" командной панели табличного поля "Здания".
Процедура ЗаполнитьЗдания(Команда)
	
	Если НЕ Объект.Здания.Количество() = 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗдания", ЭтотОбъект);
		ТекстВопроса = "Перед заполнением табличное поле будет очищено. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьТабличнуюЧастьЗдания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Заполнить с отбором" командной панели табличного поля "Здания".
Процедура ЗаполнитьЗданияСОтбором(Команда)
	
	Если НЕ Объект.Здания.Количество() = 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗданияСОтбором", ЭтотОбъект);
		ТекстВопроса = "Перед заполнением табличное поле будет очищено. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьЗданияСОтборомПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ЗаполнитьЗданияСОтбором".
Процедура ЗаполнитьЗданияСОтборомПродолжение()
	
	Объект.Здания.Очистить();
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляЗаполненияСОтбором();
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьЗданияСОтборомОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ЗаполнитьЗданияСОтборомПродолжение()".
Процедура ЗаполнитьЗданияСОтборомОкончаниеВыбораПолучателейУслуг(СписокДляВозврата, ДополнительныеПараметры) Экспорт
	
	СписокДобавляемыхЗданий = СписокДляВозврата;
	
	Если ТипЗнч(СписокДобавляемыхЗданий) = Тип("СписокЗначений") Тогда
		Для Каждого ТекЗдание Из СписокДобавляемыхЗданий Цикл
			СтрокаЗдания = Объект.Здания.Добавить();
			СтрокаЗдания.Объект = ТекЗдание.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СформироватьДокументы".
Процедура КомандаСформироватьДокументы(Команда)
	
	Если ЕстьСформированныеДокументы Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЕстьСформированныеДокументы", ЭтотОбъект);
		ТекстВопроса = "По выбранным объектам в указанном месяце начисления уже имеются созданные документы выбранных типов.
		| Данные документы будут перезаполнены и перепроведены. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СформироватьДокументыПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "СформироватьДокументы".
Процедура СформироватьДокументыПродолжение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформироватьДокументы", ЭтотОбъект);
	ТекстВопроса = "Формирование документов может продолжаться длительное время - от 1 минуты 
					|до нескольких часов в зависимости от объема данных. Начать формирование документов?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Процедура-завершение процедуры-обработчика команды "СформироватьДокументы".
Процедура СформироватьДокументыЗавершение()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	УИДЗамераПроизводительности = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "РаботаМастераНачисленийЖкх");
	// СтандартныеПодсистемы.ОценкаПроизводительности)

	// Установим видимость группы, отображающей прогресс формирования документов.
	Элементы.ГруппаПрогрессФормированияДокументов.Видимость = Истина;
	
	// Сохраним указанные пользователем настройки в хранилище.
	СохранитьНастройки();
	
	ВремяНачалаФормирования = ТекущаяДата();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("" + ВремяНачалаФормирования + " - Запущено формирование документов.");
	
	ФормированиеДокументовЗавершено = Ложь;
	
	Отказ = Ложь;
	
	// Заполним реквизит "ИдентификаторСеанса" значением уникального идентификатора формы.
	Если НЕ ЗначениеЗаполнено(ИдентификаторСеанса) Тогда
		ИдентификаторСеанса = ЭтаФорма.УникальныйИдентификатор;
	КонецЕсли;
	
	// Создадим в регистре сведений "Задачи сеансов мастера начислений" список формируемых документов.
	Отказ = СоздатьСписокФормируемыхДокументов();
	
	// Если найдены уже сформированные ранее документы, то нужно предупредить пользователя о том,
	// что эти документы будут перезаполнены и перепроведены и продолжать работу мастера
	// только после согласия пользователя на изменение уже существующих документов.
	
	Если Отказ Тогда
		
		ЗапущеноФормированиеДокументов = Ложь;
		ЗапущенаДоработкаОшибочных     = Ложь;
		
	Иначе
		
		// Сохраним в регистре сведений "Сеансы мастера начислений" идентификатор текущей задачи и месяц начисления.
		ОбработатьСтатусТекущейЗадачи();
		
		ЗаблокироватьДоступностьКнопокНаФорме();
		
		// Заполним значение текущего приоритета, если оно не заполнено.
		Если ТекущийПриоритет = 0 Тогда
			ТекущийПриоритет = ПолучитьТекущийПриоритет();
		КонецЕсли;
		
		СтруктураДанных = ПолучитьСтруктуруФормированияДокументов();
		
		ТекстПоКоличествуДокументов = "Начало формирования документов. Всего документов " + Строка(СтруктураДанных.ОбщееКоличествоДокументов) + ".";
		Элементы.ТекстПрогрессаФормированияДокументов.Заголовок = ТекстПоКоличествуДокументов;
	
		ПодключитьОбработчикОжидания("ОбработчикПроверитьФормированиеДокументов", 3);
		
		Если ЗначениеЗаполнено(СтруктураДанных.КоличествоОшибочныхДокументовТекущегоНачисления)
		 И ЗначениеЗаполнено(СтруктураДанных.КоличествоГотовыхДокументовТекущегоНачисления)
		 И СтруктураДанных.КоличествоГотовыхДокументовТекущегоНачисления = СтруктураДанных.ОбщееКоличествоДокументовТекущегоНачисления Тогда
			// Все документы текущего приоритета уже обработаны, но присутствуют документы, которые не удалось
			// записать/провести из-за взаимных блокировок. Поэтому необходимо начать с дообработки ошибочных документов.
			// (Подразумевается, что данная ветка будет выполняться в случае продолжения незавершенной задачи мастера).
			ЗапущеноФормированиеДокументов = Ложь;
			ЗапущенаДоработкаОшибочных     = Истина;
			СформироватьДокументы(ТекущийПриоритет, Истина);
		Иначе
			// Дообрабатывать документы не нужно - запускаем формирование документов со следующим приоритетом.
			ЗапущеноФормированиеДокументов = Истина;
			ЗапущенаДоработкаОшибочных     = Ложь;
			СформироватьДокументы(ТекущийПриоритет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ, ВЫЗЫВАЕМЫЕ ИЗ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного перед заполнением табличной части зданий (команда: "ЗаполнитьЗдания").
Процедура ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗдания(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличнуюЧастьЗдания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного перед заполнением табличной части зданий (команда: "ЗаполнитьЗдания").
Процедура ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗданияСОтбором(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьЗданияСОтборомПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, при наличии уже сформированных документов в текущем месяце начисления.
Процедура ОбработатьРезультатВопросаЕстьСформированныеДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьДокументыПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного перед началом формирования документов (команда: "СформироватьДокументы").
Процедура ОбработатьРезультатВопросаСформироватьДокументы(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СформироватьДокументыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик ожидания - проверяет прогресс формирования документов и запускает следующий этап
// за текущим этапом формирования документов (команда: "КомандаСформироватьДокументы").
Процедура ОбработчикПроверитьФормированиеДокументов()
	
	// Заполним значение текущего приоритета, если оно не заполнено:
	Если ТекущийПриоритет = 0 Тогда
		ТекущийПриоритет = ПолучитьТекущийПриоритет();
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруФормированияДокументов();
	
	ТекстПоКоличествуДокументов = "Сформировано " + Строка(СтруктураДанных.ОбщееКоличествоГотовыхДокументов) + " из " + Строка(СтруктураДанных.ОбщееКоличествоДокументов) + " документов.";
	
	Если ЗначениеЗаполнено(СтруктураДанных.СледующийПриоритет) Тогда
		
		// Документы сформированы не до конца.
		Если СтруктураДанных.ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС")
		 ИЛИ СтруктураДанных.ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ")
		 ИЛИ СтруктураДанных.ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования") Тогда
			Элементы.ТекстПрогрессаФормированияДокументов.Заголовок = ТекстПоКоличествуДокументов + Символы.ПС + "Формируются документы начисления услуг...";
		ИначеЕсли СтруктураДанных.ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот") Тогда
			Элементы.ТекстПрогрессаФормированияДокументов.Заголовок = ТекстПоКоличествуДокументов + Символы.ПС + "Формируются документы расчета льгот...";
		ИначеЕсли СтруктураДанных.ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени") Тогда
			Элементы.ТекстПрогрессаФормированияДокументов.Заголовок = ТекстПоКоличествуДокументов + Символы.ПС + "Формируются документы начисления пени...";
		ИначеЕсли СтруктураДанных.ТекущийВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода") Тогда
			Элементы.ТекстПрогрессаФормированияДокументов.Заголовок = ТекстПоКоличествуДокументов + Символы.ПС + "Формируются документы закрытия периода...";
		КонецЕсли;
	
		Если НЕ ТекущийПриоритет = СтруктураДанных.СледующийПриоритет Тогда
			
			// Документы по текущему приоритету полностью сформированы (с учетом дообработки ошибочных)
			// запускаем формирование документов со следующим приоритетом.
			ТекущийПриоритет = СтруктураДанных.СледующийПриоритет;
			ЗапущеноФормированиеДокументов = Истина;
			ЗапущенаДоработкаОшибочных     = Ложь;
			СформироватьДокументы(ТекущийПриоритет);
			
		Иначе
			
			// Основная обработка документов закончилась.
			// Проверим не нужно ли дообработать документы с ошибками при записи/проведении.
			Если ЗначениеЗаполнено(СтруктураДанных.КоличествоОшибочныхДокументовТекущегоНачисления)
			 И ЗначениеЗаполнено(СтруктураДанных.КоличествоГотовыхДокументовТекущегоНачисления)
			 И СтруктураДанных.КоличествоГотовыхДокументовТекущегоНачисления = СтруктураДанных.ОбщееКоличествоДокументовТекущегоНачисления
			 И НЕ ЗапущенаДоработкаОшибочных Тогда
				ЗапущеноФормированиеДокументов = Ложь;
				ЗапущенаДоработкаОшибочных     = Истина;
				СформироватьДокументы(ТекущийПриоритет, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Документы полностью сформированы.
		
		// Отключаем обработчик ожидания, т.к. все фоновые задания выполнены.
		ОтключитьОбработчикОжидания("ОбработчикПроверитьФормированиеДокументов");
		
		ОбработатьСтатусТекущейЗадачи(Истина);
		
		ФормированиеДокументовЗавершено = Истина;
		
		ЗапущеноФормированиеДокументов = Ложь;
		ЗапущенаДоработкаОшибочных     = Ложь;
		
		ОбработатьДанныеФормы(СтруктураДанных);
		
		// СтандартныеПодсистемы.ОценкаПроизводительности(
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераПроизводительности);
		// СтандартныеПодсистемы.ОценкаПроизводительности)
		
	КонецЕсли;
	
	ПрогрессВыполнения = СтруктураДанных.Сч;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РЕКВИЗИТОВ

#Область ЗаполнениеРеквизитов

&НаСервере
// Производит начальное заполнение параметров отчета.
Процедура ИнициализацияРеквизитов()
	
	Если ЭтоПродолжениеЗадачи Тогда
	
		ЗагрузитьНастройкиЗадачи();
	
		// Заполнение настроек использования многопоточности.
		СтруктураНастроекМногопоточности = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьНастройкиМногопоточности();
		Объект.ИспользоватьМногопоточность = СтруктураНастроекМногопоточности.ИспользоватьМногопоточность;
		Объект.КоличествоПотоков           = СтруктураНастроекМногопоточности.КоличествоПотоков;
	
	Иначе
		
		Объект.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		
	КонецЕсли;
	
	// Установим значения по умолчанию для обязательных реквизитов.
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
		Объект.МесяцНачисления = КонецМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	КонецЕсли;
	
	// Установим вариант регистрации документов.
	Если Объект.ДеньРегистрацииДокументов > 0 Тогда
		ВариантРегистрацииДокументов = 1;
	КонецЕсли;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
КонецПроцедуры // ИнициализацияРеквизитов()

&НаСервере
// Процедура инициализирует значения реквизитов при первом запуске.
Процедура ПервыйЗапуск()
	
	Объект.Ответственный   = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	Объект.НачислятьУслуги = Истина;
	
КонецПроцедуры // ПервыйЗапуск()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ НАСТРОЕК

#Область СохранениеИВосстановлениеНастроек

&НаСервере
// Процедура заполняет значения реквизитов из настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УПЖКХ_ЗадачиСеансовМастераНачислений", "НастройкиПараметров");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		врТаблица = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("Организация",                   Объект.Организация);
		СтруктураПараметров.Свойство("НачислятьУслуги",               Объект.НачислятьУслуги);
		СтруктураПараметров.Свойство("НачислятьЛьготы",               Объект.НачислятьЛьготы);
		СтруктураПараметров.Свойство("НачислятьПени",                 Объект.НачислятьПени);
		СтруктураПараметров.Свойство("ЗакрытьПериодПоНачислениямЖКХ", Объект.ЗакрытьПериодПоНачислениямЖКХ);
		
		СтруктураПараметров.Свойство("Здания", врТаблица);
		Если Не врТаблица = Неопределено Тогда
			Объект.Здания.Загрузить(врТаблица);
		КонецЕсли;
		
	Иначе
		ПервыйЗапуск();
	КонецЕсли;
	
	// Заполнение настроек использования многопоточности.
	СтруктураНастроекМногопоточности = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьНастройкиМногопоточности();
	
	Объект.ИспользоватьМногопоточность = СтруктураНастроекМногопоточности.ИспользоватьМногопоточность;
	Объект.КоличествоПотоков           = СтруктураНастроекМногопоточности.КоличествоПотоков;
	
КонецПроцедуры // ВосстановитьНастройки()

&НаСервере
// Процедура сохраняет настройки мастера начислений.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Организация",                   Объект.Организация);
	СтруктураПараметров.Вставить("НачислятьУслуги",               Объект.НачислятьУслуги);
	СтруктураПараметров.Вставить("НачислятьЛьготы",               Объект.НачислятьЛьготы);
	СтруктураПараметров.Вставить("НачислятьПени",                 Объект.НачислятьПени);
	СтруктураПараметров.Вставить("ЗакрытьПериодПоНачислениямЖКХ", Объект.ЗакрытьПериодПоНачислениямЖКХ);
	СтруктураПараметров.Вставить("Здания",                        Объект.Здания.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("УПЖКХ_ЗадачиСеансовМастераНачислений", "НастройкиПараметров", СтруктураПараметров);
	
	// Сохраним "последние" настройки списка услуг формируемых документов отдельно для начисления услуг и льгот.
	Если Объект.НачислятьУслуги Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиУслугМастераНачислений", "ПоследняяНастройкаУслугНачисленияУслуг", Объект.Услуги.Выгрузить(Новый Структура("ФормироватьНачисления", Истина)));
	КонецЕсли;
	Если Объект.НачислятьЛьготы Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиУслугМастераНачислений", "ПоследняяНастройкаУслугНачисленияЛьгот", Объект.Услуги.Выгрузить(Новый Структура("ФормироватьЛьготы", Истина)));
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

&НаСервере
// Процедура загружает настройки мастера начислений по данным регистра сведений.
Процедура ЗагрузитьНастройкиЗадачи()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_СеансыМастераНачислений.Организация,
	|	УПЖКХ_СеансыМастераНачислений.МесяцНачисления,
	|	УПЖКХ_СеансыМастераНачислений.ДеньРегистрацииДокументов,
	|	УПЖКХ_СеансыМастераНачислений.Ответственный,
	|	УПЖКХ_СеансыМастераНачислений.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам
	|ИЗ
	|	РегистрСведений.УПЖКХ_СеансыМастераНачислений КАК УПЖКХ_СеансыМастераНачислений
	|ГДЕ
	|	УПЖКХ_СеансыМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса КАК ЕстьНачисленияУслуг
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И (УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС)
	|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ)
	|			ИЛИ УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса КАК ЕстьНачисленияПени
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса КАК ЕстьНачисленияПени
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса КАК ЕстьЗакрытиеПериода
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса";
	Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
	
	ПакетРезультат = Запрос.ВыполнитьПакет();
	
	// Заполним поля "Организация" и "Месяц начисления".
	Выборка = ПакетРезультат[0].Выбрать();
	Если Выборка.Следующий() Тогда
	
		Объект.Организация   = Выборка.Организация;
		Объект.Ответственный = Выборка.Ответственный;
		
		Объект.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам = Выборка.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам;
		
		Объект.МесяцНачисления           = Выборка.МесяцНачисления;
		Объект.ДеньРегистрацииДокументов = Выборка.ДеньРегистрацииДокументов;
	
	КонецЕсли;
	
	// Определим была ли установлена настройка "Начислять услуги".
	Выборка = ПакетРезультат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.НачислятьУслуги = Истина;
	КонецЕсли;
	
	// Определим была ли установлена настройка "Начислять льготы".
	Выборка = ПакетРезультат[2].Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.НачислятьЛьготы = Истина;
	КонецЕсли;
	
	// Определим была ли установлена настройка "Начислять пени".
	Выборка = ПакетРезультат[3].Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.НачислятьПени = Истина;
	КонецЕсли;
	
	// Определим была ли установлена настройка "Закрыть период по начислениям ЖКХ".
	Выборка = ПакетРезультат[4].Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.ЗакрытьПериодПоНачислениямЖКХ = Истина;
	КонецЕсли;
	
	// Определим список объектов начисления.
	Выборка = ПакетРезультат[5].Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЗдания = Объект.Здания.Добавить();
		СтрокаЗдания.Объект = Выборка.Объект;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура добавляет/изменяет запись о текущей задаче в регистре сведений "Сеансы мастера начислений".
Процедура ОбработатьСтатусТекущейЗадачи(ЗадачаЗавершена = Ложь)
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_СеансыМастераНачислений.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(ИдентификаторСеанса);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ТекущаяЗапись               = НаборЗаписей.Добавить();
		ТекущаяЗапись.ДатаЗадачи    = ТекущаяДата();
		ТекущаяЗапись.Ответственный = Объект.Ответственный;
	
		ТекущаяЗапись.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам = Объект.ФормироватьНачисленияИРассчитыватьЛьготыТолькоПоНазначеннымУслугам;
	
	Иначе
		ТекущаяЗапись = НаборЗаписей[0];
	КонецЕсли;
	
	ТекущаяЗапись.Организация               = Объект.Организация;
	ТекущаяЗапись.МесяцНачисления           = Объект.МесяцНачисления;
	ТекущаяЗапись.ДеньРегистрацииДокументов = ?(ВариантРегистрацииДокументов = 0, 0, Объект.ДеньРегистрацииДокументов);
	ТекущаяЗапись.ИдентификаторСеанса       = ИдентификаторСеанса;
	ТекущаяЗапись.ЗадачаЗавершена           = ЗадачаЗавершена;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ УСЛУГ

#Область НастройкиУслуг

&НаКлиенте
// Обработчик команды "Сохранить настройку услуг".
Процедура СохранитьНастройкуУслуг(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВводНаименованияНастройкиУслуг", ЭтотОбъект);
	ТекстПодсказки = "Введите наименование настройки";
	
	ПоказатьВводСтроки(Оповещение, , ТекстПодсказки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата ввода наименования настройки услуг при сохранении.
Процедура ВводНаименованияНастройкиУслуг(СтрокаРезультат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаРезультат) Тогда
		СохранитьНастройкуУслугНаСервере(СтрокаРезультат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура продолжение процедуры "СохранитьНастройкуУслуг".
Процедура СохранитьНастройкуУслугНаСервере(НаименованиеНастройки)
	
	ЗаполнитьТабличнуюЧастьУслуги();
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиУслугМастераНачислений", НаименованиеНастройки, Объект.Услуги.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Выбрать настройку услуг".
Процедура ВыбратьНастройкуУслуг(Команда)
	
	ВыбратьНастройкуУслугПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение выбора настройки услуг текущего пользователя.
Процедура ВыбратьНастройкуУслугПродолжение(ЭтоУдалениеНастройки = Ложь)
	
	СписокНастроек = ПолучитьСписокНастроекУслугПользователя();
	
	Если СписокНастроек.Количество() = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют настройки услуг текущего пользователя!");
		
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ВыборНаименованияНастройкиУслуг", ЭтотОбъект, ЭтоУдалениеНастройки);
		ТекстПодсказки = "Выберите наименование настройки";
		
		СписокНастроек.ПоказатьВыборЭлемента(Оповещение, ТекстПодсказки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает список настроек услуг текущего пользователя, сохраненных в хранилище общих настроек.
Функция ПолучитьСписокНастроекУслугПользователя()
	
	СписокНастроекУслугПользователя = Новый СписокЗначений;
	
	ВыборкаНастроек = Неопределено;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		ВыборкаНастроек = ХранилищеОбщихНастроек.Выбрать(Новый Структура("КлючОбъекта", "НастройкиУслугМастераНачислений"));
	КонецЕсли;
	
	Если НЕ ВыборкаНастроек = Неопределено Тогда
		Пока ВыборкаНастроек.Следующий() Цикл
			Если НЕ (ВыборкаНастроек.КлючНастроек = "ПоследняяНастройкаУслугНачисленияУслуг"
				     ИЛИ ВыборкаНастроек.КлючНастроек = "ПоследняяНастройкаУслугНачисленияЛьгот") Тогда
				СписокНастроекУслугПользователя.Добавить(ВыборкаНастроек.КлючНастроек);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокНастроекУслугПользователя;
	
КонецФункции

&НаКлиенте
// Обработчик выбора наименования настройки услуг.
Процедура ВыборНаименованияНастройкиУслуг(РезультатВыбора, ЭтоУдалениеНастройки = Ложь) Экспорт
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		Если ЭтоУдалениеНастройки Тогда
			УдалитьНастройкуСпискаУслуг(РезультатВыбора.Значение);
		Иначе
			ЗагрузитьНастройкуСпискаУслуг(РезультатВыбора.Значение);
			РасставитьФлажкиУслуг();
			// Какая-то проблема при развертывании дерева услуг, поэтому сначала устанавливаем
			// значение "РаскрыватьВерхнийУровень", а потом уже требуемое значение "РаскрыватьВсеУровни".
			Элементы.ДеревоУслуг.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			Элементы.ДеревоУслуг.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура загружает настройку списка услуг из хранилища общих настроек.
Процедура ЗагрузитьНастройкуСпискаУслуг(НаименованиеНастройки)
	
	ТаблицаУслуг = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиУслугМастераНачислений", НаименованиеНастройки);
	Объект.Услуги.Загрузить(ТаблицаУслуг);
	
	ЗаполнитьДеревоУслуг(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Удалить настройку услуг".
Процедура УдалитьНастройкуУслуг(Команда)
	
	ВыбратьНастройкуУслугПродолжение(Истина);
	
КонецПроцедуры

&НаСервере
// Процедура удаляет настройку списка услуг из хранилища общих настроек.
Процедура УдалитьНастройкуСпискаУслуг(НаименованиеНастройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекУдалить("НастройкиУслугМастераНачислений", НаименованиеНастройки, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Проверяет заполненность требуемых реквизитов для перехода к следующему этапу.
&НаКлиенте
Функция ДанныеЗаполненыКорректно()
	
	ОчиститьСообщения();
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	Отказ = Ложь;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Если ВариантРегистрацииДокументов = 0 Тогда
			Объект.ДеньРегистрацииДокументов = 0;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.МесяцНачисления) Тогда
			НСтрока = НСтр("ru = 'Не заполнен месяц начисления!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			НСтрока = НСтр("ru = 'Не указана организация!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Если Объект.Здания.Количество() = 0 Тогда
			НСтрока = НСтр("ru = 'Не указаны объекты начисления!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Для Каждого СтрокаЗдания Из Объект.Здания Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗдания.Объект) Тогда
				ТекстОшибки = "В строке № " + СтрокаЗдания.НомерСтроки + " не заполнен объект начисления!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.Здания[" + Формат(СтрокаЗдания.НомерСтроки-1, "ЧН=0; ЧГ=0") + "].Объект");
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		КореньДерева = ДеревоУслуг.ПолучитьЭлементы();
		Если Объект.НачислятьУслуги И КореньДерева[0].ФормироватьНачисления = 0 Тогда
			НСтрока = НСтр("ru = 'Не указаны услуги для начисления услуг!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Если Объект.НачислятьЛьготы И КореньДерева[0].ФормироватьЛьготы = 0 Тогда
			НСтрока = НСтр("ru = 'Не указаны услуги для начисления льгот!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		ЗаполнитьТаблицуПриоритетовУслугНаСервере();
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
// Функция возвращает пустую таблицу значений с требуемыми колонками для хранения настроек списка услуг.
Функция ПолучитьПустуюТаблицуНастроекСпискаУслуг()
	
	ТаблицаНастроекСпискаУслуг = Новый ТаблицаЗначений;
	ТаблицаНастроекСпискаУслуг.Колонки.Добавить("Услуга",                Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаНастроекСпискаУслуг.Колонки.Добавить("ФормироватьНачисления", Новый ОписаниеТипов("Булево"));
	ТаблицаНастроекСпискаУслуг.Колонки.Добавить("ФормироватьЛьготы",     Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаНастроекСпискаУслуг;
	
КонецФункции

#КонецОбласти
// Конец ЧастоЗадаваемыеВопросы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама
