
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события формы "ПриСозданииНаСервере".
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьСписокНезавершенныхЗадач();
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	
	УправлениеФормой(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события формы "ПриОткрытии".
Процедура ПриОткрытии(Отказ)
	
	Если СписокЗадач.Количество() = 0 Тогда
		
		Отказ = Истина;
		Форма = ПолучитьФорму("Обработка.УПЖКХ_МастерНачислений.Форма.Форма");
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы "СписокЗадач".
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НЕ ДанныеСтроки = Неопределено Тогда
		
		ИнформацияПоЗадаче = ПолучитьИнформациюПоКоличествуДокументов(ДанныеСтроки.МесяцНачисления, ДанныеСтроки.ИдентификаторСеанса);
		
		Элементы.КоличествоПоПУВсего.Заголовок                = ИнформацияПоЗадаче.ПоПУВсего;
		Элементы.КоличествоПоПУНезавершенные.Заголовок        = ИнформацияПоЗадаче.ПоПУНезаверешенные;
		Элементы.КоличествоНаЛСВсего.Заголовок                = ИнформацияПоЗадаче.НаЛСВсего;
		Элементы.КоличествоНаЛСНезавершенные.Заголовок        = ИнформацияПоЗадаче.НаЛСНезаверешенные;
		Элементы.КоличествоСтрахованиеВсего.Заголовок         = ИнформацияПоЗадаче.СтрахованиеВсего;
		Элементы.КоличествоСтрахованиеНезавершенные.Заголовок = ИнформацияПоЗадаче.СтрахованиеНезаверешенные;
		Элементы.КоличествоПениВсего.Заголовок                = ИнформацияПоЗадаче.ПениВсего;
		Элементы.КоличествоПениНезавершенные.Заголовок        = ИнформацияПоЗадаче.ПениНезаверешенные;
		Элементы.КоличествоЗакрытиеВсего.Заголовок            = ИнформацияПоЗадаче.ЗакрытиеВсего;
		Элементы.КоличествоЗакрытиеНезавершенные.Заголовок    = ИнформацияПоЗадаче.ЗакрытиеНезаверешенные;
		Элементы.КоличествоЛьготыВсего.Заголовок              = ИнформацияПоЗадаче.ЛьготыВсего;
		Элементы.КоличествоЛьготыНезавершенные.Заголовок      = ИнформацияПоЗадаче.ЛьготыНезавершенные;
	
	Иначе
		Элементы.КоличествоПоПУВсего.Заголовок                = "";
		Элементы.КоличествоПоПУНезавершенные.Заголовок        = "";
		Элементы.КоличествоНаЛСВсего.Заголовок                = "";
		Элементы.КоличествоНаЛСНезавершенные.Заголовок        = "";
		Элементы.КоличествоСтрахованиеВсего.Заголовок         = "";
		Элементы.КоличествоСтрахованиеНезавершенные.Заголовок = "";
		Элементы.КоличествоПениВсего.Заголовок                = "";
		Элементы.КоличествоПениНезавершенные.Заголовок        = "";
		Элементы.КоличествоЗакрытиеВсего.Заголовок            = "";
		Элементы.КоличествоЗакрытиеНезавершенные.Заголовок    = "";
		Элементы.КоличествоЛьготыВсего.Заголовок              = "";
		Элементы.КоличествоЛьготыНезавершенные.Заголовок      = "";
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "СписокЗадач".
Процедура СписокЗадачПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "СписокЗадач".
Процедура СписокЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Выбор" таблицы "СписокЗадач".
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПродолжитьЗадачуПродолжение();
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура обработчик команды "Удалить задачи".
Процедура УдалитьЗадачи(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикУдалитьЗадачи", ЭтотОбъект);
	
	ТекстВопроса = "Отмеченные задачи будут удалены! Вы уверены, что хотите удалить незавершенные задачи?";
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата ответа на вопрос при попытке удалить помеченные незавершенные задачи.
Процедура ОбработчикУдалитьЗадачи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		УдалитьЗадачиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "Отметить все".
Процедура ОтметитьВсе(Команда)
	
	Для Каждого Задача Из СписокЗадач Цикл
		Задача.ПометкаНаУдаление = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "Снять отметки".
Процедура СнятьОтметки(Команда)
	
	Для Каждого Задача Из СписокЗадач Цикл
		Задача.ПометкаНаУдаление = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчки команды "Начать задачу".
Процедура НачатьЗадачу(Команда)
	
	// Если есть незавершенные задачи, выводим диалог с вопросом, иначе начинаем новую задачу.
	Если СписокЗадач.Количество() > 0 Тогда
	
		Оповещение = Новый ОписаниеОповещения("ОбработчикНачатьЗадачу", ЭтотОбъект);
	
		ТекстВопроса = "Обнаружены незавершенные задачи ""Мастера начислений""! Вы уверены, что хотите начать новую задачу?";
	
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе	
		ОбработчикНачатьЗадачу(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата ответа на вопрос при попытке продолжить текущую незавершенную задачу.
Процедура ОбработчикНачатьЗадачу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЭтаФорма.Закрыть();
		Форма = ПолучитьФорму("Обработка.УПЖКХ_МастерНачислений.Форма.Форма");
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчки команды "Продолжить задачу".
Процедура ПродолжитьЗадачу(Команда)
	
	ПродолжитьЗадачуПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Процедура продолжает выполнение команды "Продолжить задачу".
Процедура ПродолжитьЗадачуПродолжение()
	
	Оповещение = Новый ОписаниеОповещения("ОбработчикПродолжитьЗадачу", ЭтотОбъект);
	
	ТекстВопроса = "Текущая выделенная задача будет продолжена! Вы уверены, что хотите продолжить выбранную задачу?";
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата ответа на вопрос при попытке продолжить текущую незавершенную задачу.
Процедура ОбработчикПродолжитьЗадачу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЭтаФорма.Закрыть();
		СтруктураПараметров = Новый Структура("ИдентификаторСеанса", Элементы.СписокЗадач.ТекущиеДанные.ИдентификаторСеанса);
		Форма = ПолучитьФорму("Обработка.УПЖКХ_МастерНачислений.Форма.Форма", СтруктураПараметров);
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаСтрахование.Видимость = Форма.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	
КонецПроцедуры

&НаСервере
// Функция получает список незавершенных задач из регистра "Сеансы мастера начислений".
Функция ПолучитьСписокНезавершенныхЗадач()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_СеансыМастераНачислений.МесяцНачисления КАК МесяцНачисления,
	|	УПЖКХ_СеансыМастераНачислений.ДатаЗадачи КАК ДатаЗадачи,
	|	УПЖКХ_СеансыМастераНачислений.ИдентификаторСеанса КАК ИдентификаторСеанса,
	|	УПЖКХ_СеансыМастераНачислений.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.УПЖКХ_СеансыМастераНачислений КАК УПЖКХ_СеансыМастераНачислений
	|ГДЕ
	|	НЕ УПЖКХ_СеансыМастераНачислений.ЗадачаЗавершена";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
// Функция обновляет список незавершенных задач из регистра "Сеансы мастера начислений".
Процедура ОбновитьСписокНезавершенныхЗадач()
	
	СписокНезавершенныхЗадач = ПолучитьСписокНезавершенныхЗадач();
	
	СписокНезавершенныхЗадач.Колонки.Добавить("МесяцНачисленияСтрокой", Новый ОписаниеТипов("Строка"));
	Для Каждого Задача Из СписокНезавершенныхЗадач Цикл
		Задача.МесяцНачисленияСтрокой = Формат(Задача.МесяцНачисления, "ДФ='ММММ гггг'");
	КонецЦикла;
	
	СписокЗадач.Загрузить(СписокНезавершенныхЗадач);
	
	СписокЗадачПуст = СписокЗадач.Количество() = 0;
	Элементы.ПродолжитьЗадачу.Доступность = НЕ СписокЗадачПуст;
	Элементы.УдалитьЗадачи.Доступность    = НЕ СписокЗадачПуст;
	
КонецПроцедуры

&НаСервере
// Функция возвращает структуру, содержащую информацию по общему количеству документов в задаче
// и количеству незавершенных документов начисления услуг, начисления пени и закрытия периода.
Функция ПолучитьИнформациюПоКоличествуДокументов(МесяцНачисления, ИдентификаторСеанса)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ПоПУВсего
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ПоПУНезаверешенные
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПоПУ)
	|	И НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК НаЛСВсего
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК НаЛСНезаверешенные
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеНаЛС)
	|	И НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК СтрахованиеВсего
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК СтрахованиеНезаверешенные
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеДобровольногоСтрахования)
	|	И НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ПениВсего
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ПениНезаверешенные
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеПени)
	|	И НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЗакрытиеВсего
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЗакрытиеНезаверешенные
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.ЗакрытиеПериода)
	|	И НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЛьготыВсего
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЛьготыНезавершенные
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗадачиСеансовМастераНачислений КАК УПЖКХ_ЗадачиСеансовМастераНачислений
	|ГДЕ
	|	УПЖКХ_ЗадачиСеансовМастераНачислений.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.МесяцНачисления = &МесяцНачисления
	|	И УПЖКХ_ЗадачиСеансовМастераНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийМастераНачислений.НачислениеЛьгот)
	|	И НЕ УПЖКХ_ЗадачиСеансовМастераНачислений.ЗаписьОбработана";
	
	Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
	Запрос.УстановитьПараметр("МесяцНачисления",     МесяцНачисления);
	
	ПакетРезультат = Запрос.ВыполнитьПакет();
	
	ПоПУВсего                 = 0;
	ПоПУНезаверешенные        = 0;
	НаЛСВсего                 = 0;
	НаЛСНезаверешенные        = 0;
	СтрахованиеВсего          = 0;
	СтрахованиеНезаверешенные = 0;
	ПениВсего                 = 0;
	ПениНезаверешенные        = 0;
	ЗакрытиеВсего             = 0;
	ЗакрытиеНезаверешенные    = 0;
	ЛьготыВсего               = 0;
	ЛьготыНезавершенные       = 0;
	
	Выборка = ПакетРезультат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ПоПУВсего = Выборка.ПоПУВсего;
	КонецЕсли;
	
	Выборка = ПакетРезультат[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ПоПУНезаверешенные = Выборка.ПоПУНезаверешенные;
	КонецЕсли;
	
	Выборка = ПакетРезультат[2].Выбрать();
	Если Выборка.Следующий() Тогда
		НаЛСВсего = Выборка.НаЛСВсего;
	КонецЕсли;
	
	Выборка = ПакетРезультат[3].Выбрать();
	Если Выборка.Следующий() Тогда
		НаЛСНезаверешенные = Выборка.НаЛСНезаверешенные;
	КонецЕсли;
	
	Выборка = ПакетРезультат[4].Выбрать();
	Если Выборка.Следующий() Тогда
		СтрахованиеВсего = Выборка.СтрахованиеВсего;
	КонецЕсли;
	
	Выборка = ПакетРезультат[5].Выбрать();
	Если Выборка.Следующий() Тогда
		СтрахованиеНезаверешенные = Выборка.СтрахованиеНезаверешенные;
	КонецЕсли;
	
	Выборка = ПакетРезультат[6].Выбрать();
	Если Выборка.Следующий() Тогда
		ПениВсего = Выборка.ПениВсего;
	КонецЕсли;
	
	Выборка = ПакетРезультат[7].Выбрать();
	Если Выборка.Следующий() Тогда
		ПениНезаверешенные = Выборка.ПениНезаверешенные;
	КонецЕсли;
	
	Выборка = ПакетРезультат[8].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗакрытиеВсего = Выборка.ЗакрытиеВсего;
	КонецЕсли;
	
	Выборка = ПакетРезультат[9].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗакрытиеНезаверешенные = Выборка.ЗакрытиеНезаверешенные;
	КонецЕсли;
	
	Выборка = ПакетРезультат[10].Выбрать();
	Если Выборка.Следующий() Тогда
		ЛьготыВсего = Выборка.ЛьготыВсего;
	КонецЕсли;
	
	Выборка = ПакетРезультат[11].Выбрать();
	Если Выборка.Следующий() Тогда
		ЛьготыНезавершенные = Выборка.ЛьготыНезавершенные;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоПУВсего",                 ПоПУВсего);
	СтруктураПараметров.Вставить("ПоПУНезаверешенные",        ПоПУНезаверешенные);
	СтруктураПараметров.Вставить("НаЛСВсего",                 НаЛСВсего);
	СтруктураПараметров.Вставить("НаЛСНезаверешенные",        НаЛСНезаверешенные);
	СтруктураПараметров.Вставить("СтрахованиеВсего",          СтрахованиеВсего);
	СтруктураПараметров.Вставить("СтрахованиеНезаверешенные", СтрахованиеНезаверешенные);
	СтруктураПараметров.Вставить("ПениВсего",                 ПениВсего);
	СтруктураПараметров.Вставить("ПениНезаверешенные",        ПениНезаверешенные);
	СтруктураПараметров.Вставить("ЗакрытиеВсего",             ЗакрытиеВсего);
	СтруктураПараметров.Вставить("ЗакрытиеНезаверешенные",    ЗакрытиеНезаверешенные);
	СтруктураПараметров.Вставить("ЛьготыВсего",               ЛьготыВсего);
	СтруктураПараметров.Вставить("ЛьготыНезавершенные",       ЛьготыНезавершенные);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
// Процедура удаляет помеченные задачи из списка незавершенных задач.
Процедура УдалитьЗадачиНаСервере()
	
	ТаблицаСпискаЗадач = СписокЗадач.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСпискаЗадач.ИдентификаторСеанса,
	|	ТаблицаСпискаЗадач.ПометкаНаУдаление
	|ПОМЕСТИТЬ ТаблицаСпискаЗадач
	|ИЗ
	|	&ТаблицаСпискаЗадач КАК ТаблицаСпискаЗадач
	|;
	|ВЫБРАТЬ
	|	ИдентификаторСеанса
	|ИЗ
	|	ТаблицаСпискаЗадач
	|ГДЕ
	|	ПометкаНаУдаление";
	Запрос.УстановитьПараметр("ТаблицаСпискаЗадач", ТаблицаСпискаЗадач);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_СеансыМастераНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(Выборка.ИдентификаторСеанса);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ЗадачиСеансовМастераНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторСеанса.Установить(Выборка.ИдентификаторСеанса);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ОбновитьСписокНезавершенныхЗадач();
	
КонецПроцедуры

#КонецОбласти