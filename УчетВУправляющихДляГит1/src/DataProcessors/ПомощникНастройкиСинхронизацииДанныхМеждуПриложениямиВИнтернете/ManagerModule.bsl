#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Для внутреннего использования
//
Процедура НастроитьОбменШаг1(Параметры, АдресВременногоХранилища) Экспорт
	
	ИмяПланаОбмена = Параметры.ИмяПланаОбмена;
	КодКорреспондента = Параметры.КодКорреспондента;
	НаименованиеКорреспондента = Параметры.НаименованиеКорреспондента;
	ОбластьДанныхКорреспондента = Параметры.ОбластьДанныхКорреспондента;
	КонечнаяТочкаКорреспондента = Параметры.КонечнаяТочкаКорреспондента;
	НастройкаОтборовНаУзле = Параметры.НастройкаОтборовНаУзле;
	Префикс = Параметры.Префикс;
	ПрефиксКорреспондента = Параметры.ПрефиксКорреспондента;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЭтогоПриложения = ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена);
	НаименованиеЭтогоПриложения = ОбменДаннымиВМоделиСервиса.СформироватьНаименованиеПредопределенногоУзла();
	
	НачатьТранзакцию();
	Попытка
		
		Корреспондент = Неопределено;
		
		// Создаем настройку обмена в этой базе
		ОбменДаннымиВМоделиСервиса.СоздатьНастройкуОбмена(
			ИмяПланаОбмена,
			КодКорреспондента,
			НаименованиеКорреспондента,
			КонечнаяТочкаКорреспондента,
			НастройкаОтборовНаУзле.НастройкаОтборовНаУзле,
			Корреспондент,
			,
			,
			Префикс);
		
		// Регистрируем справочники к выгрузке в этой базе
		ОбменДаннымиСервер.ЗарегистрироватьТолькоСправочникиДляНачальнойВыгрузки(Корреспондент);
		
		// {Обработчик: ПриОтправкеДанныхОтправителя} Начало
		ВерсияБСП243 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыСервер.ВерсияБиблиотеки(), "2.4.3.1") >= 0;
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		Если Не ВерсияБСП243
			Или МодульОбменДаннымиСервер.ЕстьАлгоритмМенеджераПланаОбмена("ПриОтправкеДанныхОтправителя",ИмяПланаОбмена) Тогда
			ПланыОбмена[ИмяПланаОбмена].ПриОтправкеДанныхОтправителя(НастройкаОтборовНаУзле.НастройкаОтборовНаУзле, Ложь);
		КонецЕсли;
		// {Обработчик: ПриОтправкеДанныхОтправителя} Окончание
		
		// Отправляем сообщение корреспонденту
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияОбменаДаннымиУправлениеИнтерфейс.СообщениеНастроитьОбменШаг1());
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		
		Сообщение.Body.ExchangePlan = ИмяПланаОбмена;
		Сообщение.Body.CorrespondentCode = КодЭтогоПриложения;
		Сообщение.Body.CorrespondentName = НаименованиеЭтогоПриложения;
		Сообщение.Body.FilterSettings = СериализаторXDTO.ЗаписатьXDTO(НастройкаОтборовНаУзле.НастройкаОтборовНаУзлеБазыКорреспондента);
		Сообщение.Body.Code = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корреспондент, "Код");
		Сообщение.Body.EndPoint = ОбменСообщениямиВнутренний.КодЭтогоУзла();
		Сообщение.AdditionalInfo = СериализаторXDTO.ЗаписатьXDTO(Новый Структура("Префикс", ПрефиксКорреспондента));
		
		Сессия = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	
	ВыходныеПараметры = Новый Структура("Корреспондент, Сессия", Корреспондент, Сессия);
	ПоместитьВоВременноеХранилище(ВыходныеПараметры, АдресВременногоХранилища);
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура НастроитьОбменШаг1_3_0_1_1(Параметры, АдресВременногоХранилища) Экспорт
		
	НастройкиПодключения = Неопределено;
	Параметры.Свойство("НастройкиПодключения", НастройкиПодключения);
	
	ПараметрыОбработчикаСессии = Неопределено;
	ИнициализироватьПараметрыОбработчикаДлительнойОперации(ПараметрыОбработчикаСессии, Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		// Создаем настройку обмена в этой базе.
		ОбменДаннымиВМоделиСервиса.СоздатьНастройкуОбмена_3_0_1_1(НастройкиПодключения);
		
		// Отправляем сообщение корреспонденту.
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияОбменаДаннымиУправлениеИнтерфейс.СообщениеНастроитьОбменШаг1());
			
		Сообщение.Body.CorrespondentZone = НастройкиПодключения.ОбластьДанныхКорреспондента;
		
		Сообщение.Body.ExchangePlan      = НастройкиПодключения.ИмяПланаОбмена;
		Сообщение.Body.CorrespondentCode = НастройкиПодключения.ИдентификаторИнформационнойБазыИсточника;
		Сообщение.Body.CorrespondentName = НастройкиПодключения.Наименование;
		
		Сообщение.Body.Code     = НастройкиПодключения.ИдентификаторИнформационнойБазыПриемника;
		Сообщение.Body.EndPoint = ОбменСообщениямиВнутренний.КодЭтогоУзла();
		
		Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(НастройкиПодключения.ИмяПланаОбмена) Тогда
			ВерсииФормата = ОбщегоНазначения.ВыгрузитьКолонку(
				ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(НастройкиПодключения.ИмяПланаОбмена, "ВерсииФорматаОбмена"), "Ключ", Истина);
				
			ОбъектыФормата = ОбменДаннымиXDTOСервер.ПоддерживаемыеОбъектыФормата(
				НастройкиПодключения.ИмяПланаОбмена, "ОтправкаПолучение", НастройкиПодключения.Корреспондент);
			
			НастройкиXDTOКорреспондента = Новый Структура;
			НастройкиXDTOКорреспондента.Вставить("ПоддерживаемыеВерсии", ВерсииФормата);
			НастройкиXDTOКорреспондента.Вставить("ПоддерживаемыеОбъекты",
				Новый ХранилищеЗначения(ОбъектыФормата, Новый СжатиеДанных(9)));
				
			Сообщение.Body.XDTOSettings = СериализаторXDTO.ЗаписатьXDTO(НастройкиXDTOКорреспондента);
		КонецЕсли;
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("Интерфейс",              "3.0.1.1");
		ДополнительныеСвойства.Вставить("Префикс",                НастройкиПодключения.ПрефиксКорреспондента);
		ДополнительныеСвойства.Вставить("ПрефиксКорреспондента",  НастройкиПодключения.Префикс);
		ДополнительныеСвойства.Вставить("ИдентификаторНастройки", НастройкиПодключения.ИдентификаторНастройки);
		
		Сообщение.AdditionalInfo = СериализаторXDTO.ЗаписатьXDTO(ДополнительныеСвойства);
		
		ПараметрыОбработчикаСессии.ИдентификаторОперации = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ПараметрыОбработчикаСессии.Отказ = Истина;
		ПараметрыОбработчикаСессии.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ПараметрыОбработчикаСессии.СообщениеОбОшибке);
	КонецПопытки;
		
	Если Не ПараметрыОбработчикаСессии.Отказ Тогда
		СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
		
		ПараметрыОбработчикаСессии.ДлительнаяОперация = Истина;
		ПараметрыОбработчикаСессии.ДополнительныеПараметры.Вставить(
			"Корреспондент", НастройкиПодключения.Корреспондент);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Корреспондент", НастройкиПодключения.Корреспондент);
	Результат.Вставить("ПараметрыОбработчикаСессии", ПараметрыОбработчикаСессии);
	
	ПоместитьВоВременноеХранилище(Результат, АдресВременногоХранилища);
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура НастроитьОбменШаг2(Параметры, АдресВременногоХранилища) Экспорт
	
	Корреспондент = Параметры.Корреспондент;
	ОбластьДанныхКорреспондента = Параметры.ОбластьДанныхКорреспондента;
	ЗначенияПоУмолчаниюНаУзле = Параметры.ЗначенияПоУмолчаниюНаУзле;
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = Параметры.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Корреспондент);
	КодЭтогоПриложения = ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена);
	
	НачатьТранзакцию();
	Попытка
		
		// Сохраняем настройки, заданные пользователем
		ОбменДаннымиВМоделиСервиса.ОбновитьНастройкуОбмена(Корреспондент, ЗначенияПоУмолчаниюНаУзле);
		
		// Регистрируем все данные к выгрузке, кроме справочников
		ОбменДаннымиСервер.ЗарегистрироватьВсеДанныеКромеСправочниковДляНачальнойВыгрузки(Корреспондент);
		
		// Отправляем сообщение корреспонденту
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияОбменаДаннымиУправлениеИнтерфейс.СообщениеНастроитьОбменШаг2());
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		
		Сообщение.Body.ExchangePlan = ИмяПланаОбмена;
		Сообщение.Body.CorrespondentCode = КодЭтогоПриложения;
		Сообщение.Body.AdditionalSettings = СериализаторXDTO.ЗаписатьXDTO(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
		Сессия = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	
	ВыходныеПараметры = Новый Структура("Сессия", Сессия);
	ПоместитьВоВременноеХранилище(ВыходныеПараметры, АдресВременногоХранилища);
	
КонецПроцедуры

#Область СписокПриложений

// Для внутреннего использования.
//
Процедура ПриНачалеПолученияСпискаПриложений(Настройки, ПараметрыОбработчика, ПродолжитьОжидание = Истина) Экспорт
	
	ИнициализироватьПараметрыОбработчикаДлительнойОперации(ПараметрыОбработчика, Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		// Отправляем сообщение в МС.
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс.СообщениеПолучитьНастройкиСинхронизацииДанных());
			
		ПараметрыОбработчика.ИдентификаторОперации = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииМониторСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
			
		ПараметрыОбработчика.Отказ = Истина;
		ПараметрыОбработчика.СообщениеОбОшибке = СообщениеОбОшибке;
		ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
		
		ПродолжитьОжидание = Ложь;
	КонецПопытки;
	
	Если Не ПараметрыОбработчика.Отказ Тогда
		СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
		
		Для Каждого ЭлементНастройки Из Настройки Цикл
			ПараметрыОбработчика.ДополнительныеПараметры.Вставить(ЭлементНастройки.Ключ, ЭлементНастройки.Значение);
		КонецЦикла;
		
		ПродолжитьОжидание = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура ПриОжиданииПолученияСпискаПриложений(ПараметрыОбработчика, ПродолжитьОжидание = Истина) Экспорт
	
	Если ПараметрыОбработчика.ДополнительныеПараметры.Свойство("ОжиданиеСессииПолучениеПараметровКорреспондента") Тогда
		
		ПродолжитьОжидание = Ложь;
		
		ОбластиДляОпределенияКодовУзлов = ПараметрыОбработчика.ДополнительныеПараметры.ОбластиДляОпределенияКодовУзлов.Получить();
		
		Для Каждого Область Из ОбластиДляОпределенияКодовУзлов Цикл
			
			Для Каждого СтрокаКодыУзлов Из Область.КодыУзлов Цикл
				
				Если СтрокаКодыУзлов.ПродолжитьОжидание Тогда
					ПриОжиданииСессииОбменаСообщениямиСистемы(СтрокаКодыУзлов.ПараметрыОбработчика, СтрокаКодыУзлов.ПродолжитьОжидание);
				КонецЕсли;
				
				Если Не СтрокаКодыУзлов.ПродолжитьОжидание
					И Не ЗначениеЗаполнено(СтрокаКодыУзлов.КодПредопределенногоУзла)
					И Не СтрокаКодыУзлов.ПараметрыОбработчика.Отказ Тогда
					
					ПараметрыКорреспондента = РегистрыСведений.СессииОбменаСообщениямиСистемы.ПолучитьДанныеСессии(
						СтрокаКодыУзлов.ПараметрыОбработчика.ИдентификаторОперации).Получить();
						
					Если ПараметрыКорреспондента.Свойство("ПараметрыИнформационнойБазы") Тогда
						Если ПараметрыКорреспондента.ПараметрыИнформационнойБазы.УзелСуществует Тогда
							СтрокаКодыУзлов.КодПредопределенногоУзла = ПараметрыКорреспондента.ПараметрыИнформационнойБазы.КодЭтогоУзла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				ПродолжитьОжидание = ПродолжитьОжидание Или СтрокаКодыУзлов.ПродолжитьОжидание;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыОбработчика.ДополнительныеПараметры.ОбластиДляОпределенияКодовУзлов =
			Новый ХранилищеЗначения(ОбластиДляОпределенияКодовУзлов, Новый СжатиеДанных(9));
		
	Иначе
		ПриОжиданииСессииОбменаСообщениямиСистемы(ПараметрыОбработчика, ПродолжитьОжидание);
		
		Если Не ПродолжитьОжидание
			И Не ПараметрыОбработчика.Отказ Тогда
			
			НастройкиСинхронизацииИзМенеджераСервиса = Неопределено;
			
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				НастройкиСинхронизацииИзМенеджераСервиса = РегистрыСведений.СессииОбменаСообщениямиСистемы.ПолучитьДанныеСессии(
					ПараметрыОбработчика.ИдентификаторОперации).Получить();
			Исключение
				ПараметрыОбработчика.Отказ = Истина;
				ПараметрыОбработчика.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
				
				ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииМониторСинхронизацииДанных(),
					УровеньЖурналаРегистрации.Ошибка, , , ПараметрыОбработчика.СообщениеОбОшибке);
					
				Возврат;
			КонецПопытки;
			
			УдалитьЛишниеСтрокиНастроекСинхронизации(НастройкиСинхронизацииИзМенеджераСервиса, ПараметрыОбработчика.ДополнительныеПараметры);
			
			ЕстьКодПредопределенногоУзла = НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Найти("КодПредопределенногоУзла") <> Неопределено;
			Если Не ЕстьКодПредопределенногоУзла Тогда
				НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Добавить("КодПредопределенногоУзла", Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			СтрокиНастройкиСинхронизацииXDTO = НастройкиСинхронизацииИзМенеджераСервиса.НайтиСтроки(
				Новый Структура("ЭтоПланОбменаXDTO, СинхронизацияНастроена", Истина, Истина));
				
			ОбластиДляОпределенияКодовУзлов = Новый ТаблицаЗначений;
			ОбластиДляОпределенияКодовУзлов.Колонки.Добавить("ОбластьДанных", Новый ОписаниеТипов("Число"));
			ОбластиДляОпределенияКодовУзлов.Колонки.Добавить("ПланОбмена",    Новый ОписаниеТипов("Строка"));
			ОбластиДляОпределенияКодовУзлов.Колонки.Добавить("КодыУзлов");
				
			Для Каждого СтрокаНастройкиСинхронизацииXDTO Из СтрокиНастройкиСинхронизацииXDTO Цикл
				
				Если ЗначениеЗаполнено(СтрокаНастройкиСинхронизацииXDTO.КодПредопределенногоУзла) Тогда
					Продолжить;
				КонецЕсли;
				
				КодыУзлов = Новый ТаблицаЗначений;
				КодыУзлов.Колонки.Добавить("КодЭтогоУзла",             Новый ОписаниеТипов("Строка"));
				КодыУзлов.Колонки.Добавить("КодПредопределенногоУзла", Новый ОписаниеТипов("Строка"));
				КодыУзлов.Колонки.Добавить("ПараметрыОбработчика");
				КодыУзлов.Колонки.Добавить("ПродолжитьОжидание",       Новый ОписаниеТипов("Булево"));
				
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Т.Ссылка КАК УзелОбмена
				|ИЗ
				|	#ТаблицаПланаОбмена КАК Т
				|ГДЕ
				|	НЕ Т.ЭтотУзел");
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"#ТаблицаПланаОбмена", "ПланОбмена." + СтрокаНастройкиСинхронизацииXDTO.ПланОбмена);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					КодЭтогоУзла = ОбменДаннымиСервер.ИдентификаторЭтогоУзлаДляОбмена(Выборка.УзелОбмена);
					
					ОбластьДанныхКорреспондента = РегистрыСведений.НастройкиОбменаДаннымиXDTO.ЗначениеНастройкиКорреспондента(Выборка.УзелОбмена,
						"ОбластьДанныхКорреспондента");
					
					Если СтрокаНастройкиСинхронизацииXDTO.ОбластьДанных = ОбластьДанныхКорреспондента Тогда
						СтрокаКодыУзлов = КодыУзлов.Добавить();
						СтрокаКодыУзлов.КодЭтогоУзла = КодЭтогоУзла;
						СтрокаКодыУзлов.КодПредопределенногоУзла = ОбменДаннымиСервер.ИдентификаторУзлаКорреспондентаДляОбмена(Выборка.УзелОбмена);
						СтрокаКодыУзлов.ПродолжитьОжидание = Ложь; 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Выборка.Сбросить();
				
				Пока Выборка.Следующий() Цикл
					КодЭтогоУзла = ОбменДаннымиСервер.ИдентификаторЭтогоУзлаДляОбмена(Выборка.УзелОбмена);
					
					Если Не КодыУзлов.Найти(КодЭтогоУзла, "КодЭтогоУзла") = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаКодыУзлов = КодыУзлов.Добавить();
					СтрокаКодыУзлов.КодЭтогоУзла = КодЭтогоУзла;
					СтрокаКодыУзлов.ПродолжитьОжидание = Истина;
					
				КонецЦикла;
				
				Область = ОбластиДляОпределенияКодовУзлов.Добавить();
				ЗаполнитьЗначенияСвойств(Область, СтрокаНастройкиСинхронизацииXDTO, "ОбластьДанных, ПланОбмена");
				Область.КодыУзлов = КодыУзлов;
				
			КонецЦикла;
				
			ПараметрыОбработчика.ДополнительныеПараметры.Вставить("НастройкиСинхронизацииИзМенеджераСервиса",
				Новый ХранилищеЗначения(НастройкиСинхронизацииИзМенеджераСервиса, Новый СжатиеДанных(9)));
			ПараметрыОбработчика.ДополнительныеПараметры.Вставить("ОбластиДляОпределенияКодовУзлов",
					Новый ХранилищеЗначения(ОбластиДляОпределенияКодовУзлов, Новый СжатиеДанных(9)));
				
			Если ОбластиДляОпределенияКодовУзлов.Количество() > 0 Тогда
				
				ПриНачалеПолученияКодовУзловОбластейДанных(ПараметрыОбработчика);
				
				Если Не ПараметрыОбработчика.Отказ Тогда
					ПараметрыОбработчика.ДополнительныеПараметры.Вставить("ОжиданиеСессииПолучениеПараметровКорреспондента");
					ПродолжитьОжидание = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура ПриЗавершенииПолученияСпискаПриложений(ПараметрыОбработчика, СтатусЗавершения) Экспорт
	
	ИнициализироватьСтатусЗавершенияДлительнойОперации(СтатусЗавершения);
	
	Если ПараметрыОбработчика.Отказ Тогда
		ЗаполнитьЗначенияСвойств(СтатусЗавершения, ПараметрыОбработчика, "Отказ, СообщениеОбОшибке");
	Иначе
		
		Попытка
			СтатусЗавершения.Результат = ТаблицаПриложенийСинхронизацииДанных(ПараметрыОбработчика.ДополнительныеПараметры);
		Исключение
			СтатусЗавершения.Отказ = Истина;
			СтатусЗавершения.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииМониторСинхронизацииДанных(),
				УровеньЖурналаРегистрации.Ошибка, , , СтатусЗавершения.СообщениеОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ПараметрыОбработчика = Неопределено;
	
КонецПроцедуры

Процедура ПриНачалеПолученияКодовУзловОбластейДанных(ПараметрыОбработчика)
	
	ОбластиДляОпределенияКодовУзлов = ПараметрыОбработчика.ДополнительныеПараметры.ОбластиДляОпределенияКодовУзлов.Получить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Область Из ОбластиДляОпределенияКодовУзлов Цикл
		
		Для Каждого СтрокаКодыУзлов Из Область.КодыУзлов Цикл
			
			Если Не СтрокаКодыУзлов.ПродолжитьОжидание Тогда
				Продолжить;
			КонецЕсли;
			
			ИнициализироватьПараметрыОбработчикаДлительнойОперации(СтрокаКодыУзлов.ПараметрыОбработчика, Неопределено);
		
			НачатьТранзакцию();
			Попытка
				Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
					СообщенияОбменаДаннымиУправлениеИнтерфейс.СообщениеПолучитьПараметрыУчетаКорреспондента());
					
				Сообщение.Body.ExchangePlan      = Область.ПланОбмена;
				Сообщение.Body.CorrespondentCode = СтрокаКодыУзлов.КодЭтогоУзла;
				
				Сообщение.Body.CorrespondentZone = Область.ОбластьДанных;
				
				ДополнительныеСвойства = Новый Структура;
				ДополнительныеСвойства.Вставить("Интерфейс", "3.0.1.1");
				
				Сообщение.AdditionalInfo = СериализаторXDTO.ЗаписатьXDTO(ДополнительныеСвойства);
			
				СтрокаКодыУзлов.ПараметрыОбработчика.ИдентификаторОперации = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
					
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииМониторСинхронизацииДанных(),
					УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
					
				ПараметрыОбработчика.Отказ = Истина;
				ПараметрыОбработчика.СообщениеОбОшибке = СообщениеОбОшибке;
				ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
				
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
		Если ПараметрыОбработчика.Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПараметрыОбработчика.Отказ Тогда
		СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	КонецЕсли;
	
	ПараметрыОбработчика.ДополнительныеПараметры.ОбластиДляОпределенияКодовУзлов =
		Новый ХранилищеЗначения(ОбластиДляОпределенияКодовУзлов, Новый СжатиеДанных(9));
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеОбщихДанныхУзловКорреспондента

// Для внутреннего использования.
//
Процедура ПриНачалеПолученияОбщихДанныхУзловКорреспондента(НастройкиПодключения, ПараметрыОбработчика, ПродолжитьОжидание = Истина) Экспорт
	
	ИнициализироватьПараметрыОбработчикаДлительнойОперации(ПараметрыОбработчика, Неопределено);
	ПараметрыОбработчика.ДополнительныеПараметры.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	ИмяПланаОбмена              = НастройкиПодключения.ИмяПланаОбмена;
	ОбластьДанныхКорреспондента = НастройкиПодключения.ОбластьДанныхКорреспондента;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		// Отправляем сообщение корреспонденту.
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияОбменаДаннымиУправлениеИнтерфейс.СообщениеПолучитьОбщиеДанныеУзловКорреспондента());
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		
		Сообщение.Body.ExchangePlan = ИмяПланаОбмена;
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("Интерфейс", "3.0.1.1");
		
		Сообщение.AdditionalInfo = СериализаторXDTO.ЗаписатьXDTO(ДополнительныеСвойства);
		
		ПараметрыОбработчика.ИдентификаторОперации = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
			
		ПараметрыОбработчика.Отказ = Истина;
		ПараметрыОбработчика.СообщениеОбОшибке = СообщениеОбОшибке;
		ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
		
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура ПриОжиданииПолученияОбщихДанныхУзловКорреспондента(ПараметрыОбработчика, ПродолжитьОжидание = Истина) Экспорт
	
	ПриОжиданииСессииОбменаСообщениямиСистемы(ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура ПриЗавершенииПолученияОбщихДанныхУзловКорреспондента(ПараметрыОбработчика, СтатусЗавершения) Экспорт
	
	ИнициализироватьСтатусЗавершенияДлительнойОперации(СтатусЗавершения);
	
	НастройкиПодключения = ПараметрыОбработчика.ДополнительныеПараметры.НастройкиПодключения;
	
	Если ПараметрыОбработчика.Отказ Тогда
		ЗаполнитьЗначенияСвойств(СтатусЗавершения, ПараметрыОбработчика, "Отказ, СообщениеОбОшибке");
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("ПараметрыКорреспондентаПолучены", Истина);
		Результат.Вставить("ПараметрыКорреспондента");
		Результат.Вставить("СообщениеОбОшибке", "");
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			// Параметры корреспондента.
			ДанныеКорреспондента = РегистрыСведений.СессииОбменаСообщениямиСистемы.ПолучитьДанныеСессии(
				ПараметрыОбработчика.ИдентификаторОперации).Получить();
				
			Если Не ДанныеКорреспондента.Свойство("ПараметрыИнформационнойБазы", Результат.ПараметрыКорреспондента) Тогда
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не поддерживается версия 3.0.1.1 интерфейса ""ОбменДанными"".
					|Для настройки подключения необходимо обновить программу ""%1"", или начать настройку из нее.'"),
					НастройкиПодключения.НаименованиеКорреспондента);
				Результат.ПараметрыКорреспондентаПолучены = Ложь;
			КонецЕсли;
			
			СтатусЗавершения.Результат = Результат;
			
		Исключение
			СтатусЗавершения.Отказ = Истина;
			СтатусЗавершения.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
				УровеньЖурналаРегистрации.Ошибка, , , СтатусЗавершения.СообщениеОбОшибке);
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыОбработчика = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеНастроекПодключения

Процедура ПриНачалеСохраненияНастроекПодключения(НастройкиПодключения, ПараметрыОбработчика, ПродолжитьОжидание = Истина) Экспорт
	
	КлючФоновогоЗадания = КлючФоновогоЗадания(НастройкиПодключения.ИмяПланаОбмена,
		НСтр("ru = 'Настройка подключения к корреспонденту'"));

	Если ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройка подключения к корреспонденту для ""%1"" уже выполняется.'"), НастройкиПодключения.ИмяПланаОбмена);
	КонецЕсли;
		
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Настройка подключения к корреспонденту: %1.'"), НастройкиПодключения.ИмяПланаОбмена);
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.НастроитьОбменШаг1_3_0_1_1",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ПриНачалеДлительнойОперации(ФоновоеЗадание, ПараметрыОбработчика, ПродолжитьОжидание);
	
	Если Не ПродолжитьОжидание
		И Не ПараметрыОбработчика.Отказ Тогда
		ПараметрыОбработчика.ДополнительныеПараметры.Вставить("ФоновоеЗаданиеВыполнено");
		ПродолжитьОжидание = Истина;
	КонецЕсли;
	
	ПараметрыОбработчика.ДополнительныеПараметры.Вставить("НастройкиПодключения", НастройкиПодключения);
	
КонецПроцедуры

Процедура ПриОжиданииСохраненияНастроекПодключения(ПараметрыОбработчика, ПродолжитьОжидание = Истина) Экспорт
	
	Если ПараметрыОбработчика.ДополнительныеПараметры.Свойство("ОжиданиеСессииОбменаСообщениямиСистемы1") Тогда
		
		ПриОжиданииСессииОбменаСообщениямиСистемы(
			ПараметрыОбработчика.ДополнительныеПараметры.ПараметрыОбработчикаСессии, ПродолжитьОжидание);
			
		Если Не ПродолжитьОжидание
			И Не ПараметрыОбработчика.ДополнительныеПараметры.ПараметрыОбработчикаСессии.Отказ Тогда
			ПараметрыОбработчика.ДополнительныеПараметры.Вставить("ОжиданиеСессииОбменаСообщениямиСистемы2");
			ПараметрыОбработчика.ДополнительныеПараметры.Удалить("ОжиданиеСессииОбменаСообщениямиСистемы1");
			
			ПриНачалеСохраненияНастройкиОбменаВМенеджереСервиса(ПараметрыОбработчика.ДополнительныеПараметры.НастройкиПодключения,
				ПараметрыОбработчика.ДополнительныеПараметры.ПараметрыОбработчикаСессии, ПродолжитьОжидание);
		КонецЕсли;
			
	ИначеЕсли ПараметрыОбработчика.ДополнительныеПараметры.Свойство("ОжиданиеСессииОбменаСообщениямиСистемы2") Тогда
			
		ПриОжиданииСессииОбменаСообщениямиСистемы(
			ПараметрыОбработчика.ДополнительныеПараметры.ПараметрыОбработчикаСессии, ПродолжитьОжидание);
			
	Иначе
		
		ЗаданиеВыполнено = Ложь;
		
		Если ПараметрыОбработчика.ДополнительныеПараметры.Свойство("ФоновоеЗаданиеВыполнено") Тогда
			ЗаданиеВыполнено = Истина;
		Иначе
			ПриОжиданииДлительнойОперации(ПараметрыОбработчика, ПродолжитьОжидание);
			
			ЗаданиеВыполнено = Не ПродолжитьОжидание И Не ПараметрыОбработчика.Отказ;
		КонецЕсли;
		
		Если ЗаданиеВыполнено Тогда
			
			Результат = ПолучитьИзВременногоХранилища(ПараметрыОбработчика.АдресРезультата);
			
			ПараметрыОбработчикаСессии = Результат.ПараметрыОбработчикаСессии;
			ПараметрыОбработчика.ДополнительныеПараметры.Вставить("Корреспондент", Результат.Корреспондент);
			
			Если ПараметрыОбработчикаСессии.Отказ Тогда
				ПродолжитьОжидание = Ложь;
				ПараметрыОбработчика.Отказ = Истина;
				ПараметрыОбработчика.СообщениеОбОшибке = ПараметрыОбработчикаСессии.СообщениеОбОшибке;
			Иначе
				ПродолжитьОжидание = Истина;
				ПараметрыОбработчика.ДополнительныеПараметры.Вставить("ОжиданиеСессииОбменаСообщениямиСистемы1");
				ПараметрыОбработчика.ДополнительныеПараметры.Вставить("ПараметрыОбработчикаСессии", ПараметрыОбработчикаСессии);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗавершенииСохраненияНастроекПодключения(ПараметрыОбработчика, СтатусЗавершения) Экспорт
	
	ИнициализироватьСтатусЗавершенияДлительнойОперации(СтатусЗавершения);
	
	Если ПараметрыОбработчика.Отказ Тогда
		ЗаполнитьЗначенияСвойств(СтатусЗавершения, ПараметрыОбработчика, "Отказ, СообщениеОбОшибке");
	Иначе
		ПараметрыОбработчикаСессии = ПараметрыОбработчика.ДополнительныеПараметры.ПараметрыОбработчикаСессии;
		
		Результат = Новый Структура;
		Результат.Вставить("НастройкиПодключенияСохранены", Истина);
		Результат.Вставить("УзелОбмена",                    Неопределено);
		Результат.Вставить("СообщениеОбОшибке",             "");
		
		Если ПараметрыОбработчикаСессии.Отказ Тогда
			// Удаление узла обмена в этой базе.
			Если ЗначениеЗаполнено(ПараметрыОбработчика.ДополнительныеПараметры.Корреспондент) Тогда
				ОбменДаннымиСервер.УдалитьНастройкуСинхронизации(ПараметрыОбработчика.ДополнительныеПараметры.Корреспондент);
			КонецЕсли;
			
			Результат.НастройкиПодключенияСохранены = Ложь;
			Результат.СообщениеОбОшибке             = ПараметрыОбработчикаСессии.СообщениеОбОшибке;
		Иначе
			Результат.Вставить("УзелОбмена", ПараметрыОбработчика.ДополнительныеПараметры.Корреспондент);
		КонецЕсли;
		
		СтатусЗавершения.Результат = Результат;
		
	КонецЕсли;
	
	ПараметрыОбработчика = Неопределено;
	
КонецПроцедуры

Процедура ПриНачалеСохраненияНастройкиОбменаВМенеджереСервиса(НастройкиПодключения, ПараметрыОбработчика, ПродолжитьОжидание)
	
	ИнициализироватьПараметрыОбработчикаДлительнойОперации(ПараметрыОбработчика, Неопределено);
	
	ИмяПланаОбмена              = НастройкиПодключения.ИмяПланаОбмена;
	ОбластьДанныхКорреспондента = НастройкиПодключения.ОбластьДанныхКорреспондента;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		// Отправляем сообщение менеджеру сервиса - включить синхронизацию.
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс.СообщениеВключитьСинхронизацию());
			
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		Сообщение.Body.ExchangePlan = ИмяПланаОбмена;
		
		ПараметрыОбработчика.ИдентификаторОперации = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(Информация));
			
		ПараметрыОбработчика.Отказ = Истина;
		ПараметрыОбработчика.СообщениеОбОшибке = КраткоеПредставлениеОшибки(Информация);
		ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
		
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	ПродолжитьОжидание = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеНастройкиСинхронизацииДанных

// Для внутреннего использования.
//
Процедура ПриНачалеУдаленияНастройкиСинхронизации(НастройкиУдаления, ПараметрыОбработчика, ПродолжитьОжидание) Экспорт
	
	ИнициализироватьПараметрыОбработчикаДлительнойОперации(ПараметрыОбработчика, Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		// Отправляем сообщение Менеджеру сервиса.
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс.СообщениеОтключитьСинхронизацию());
			
		Сообщение.Body.CorrespondentZone = НастройкиУдаления.ОбластьДанныхКорреспондента;
		Сообщение.Body.ExchangePlan      = НастройкиУдаления.ИмяПланаОбмена;
		
		ПараметрыОбработчика.ИдентификаторОперации = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отключение синхронизации данных ""%1"" с приложением ""%2"".'"),
			НастройкиУдаления.ИмяПланаОбмена, XMLСтрока(НастройкиУдаления.ОбластьДанныхКорреспондента));
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
		
		ПараметрыОбработчика.Отказ = Истина;
		ПараметрыОбработчика.СообщениеОбОшибке = СообщениеОбОшибке;
		ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
		
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	ПродолжитьОжидание = Истина;
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура ПриОжиданииУдаленияНастройкиСинхронизации(ПараметрыОбработчика, ПродолжитьОжидание) Экспорт
	
	ПриОжиданииСессииОбменаСообщениямиСистемы(ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура ПриЗавершенииУдаленияНастройкиСинхронизации(ПараметрыОбработчика, СтатусЗавершения) Экспорт
	
	ИнициализироватьСтатусЗавершенияДлительнойОперации(СтатусЗавершения);
	
	Если ПараметрыОбработчика.Отказ Тогда
		ЗаполнитьЗначенияСвойств(СтатусЗавершения, ПараметрыОбработчика, "Отказ, СообщениеОбОшибке");
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("НастройкаУдалена",                 Истина);
		Результат.Вставить("НастройкаУдаленаВКорреспонденте",  Истина);
		Результат.Вставить("СообщениеОбОшибке",                "");
		Результат.Вставить("СообщениеОбОшибкеВКорреспонденте", "");
		
		СтатусЗавершения.Результат = Результат;
		
	КонецЕсли;
	
	ПараметрыОбработчика = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СессииОбменаСообщениями

Процедура ПриОжиданииСессииОбменаСообщениямиСистемы(ПараметрыОбработчика, ПродолжитьОжидание) Экспорт
	
	СтатусСессии = "";
	Попытка
		СтатусСессии = СтатусСессии(ПараметрыОбработчика.ИдентификаторОперации);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииМониторСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
			
		ПараметрыОбработчика.Отказ = Истина;
		ПараметрыОбработчика.СообщениеОбОшибке = СообщениеОбОшибке;
		ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
		
		ПродолжитьОжидание  = Ложь;
		Возврат;
	КонецПопытки;
	
	Если СтатусСессии = "Успешно" Тогда
		
		ПродолжитьОжидание = Ложь;
		
	ИначеЕсли СтатусСессии = "Ошибка" Тогда
		
		ПараметрыОбработчика.Отказ = Истина;
		ПараметрыОбработчика.ИдентификаторОперации = Неопределено;
		ПродолжитьОжидание  = Ложь;
		
	Иначе
		
		ПродолжитьОжидание = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтатусСессии(Знач Сессия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.СессииОбменаСообщениямиСистемы.СтатусСессии(Сессия);
	
КонецФункции

#КонецОбласти

#Область РаботаСДлительнымиОперациями

// Для внутреннего использования.
//
Процедура ПриНачалеДлительнойОперации(ФоновоеЗадание, ПараметрыОбработчика, ПродолжитьОжидание = Истина)
	
	ИнициализироватьПараметрыОбработчикаДлительнойОперации(ПараметрыОбработчика, ФоновоеЗадание);
	
	Если ФоновоеЗадание.Статус = "Выполняется" Тогда
		ПараметрыОбработчика.АдресРезультата       = ФоновоеЗадание.АдресРезультата;
		ПараметрыОбработчика.ИдентификаторОперации = ФоновоеЗадание.ИдентификаторЗадания;
		ПараметрыОбработчика.ДлительнаяОперация    = Истина;
		
		ПродолжитьОжидание = Истина;
		Возврат;
	ИначеЕсли ФоновоеЗадание.Статус = "Выполнено" Тогда
		ПараметрыОбработчика.АдресРезультата    = ФоновоеЗадание.АдресРезультата;
		ПараметрыОбработчика.ДлительнаяОперация = Ложь;
		
		ПродолжитьОжидание = Ложь;
		Возврат;
	Иначе
		ПараметрыОбработчика.СообщениеОбОшибке = ФоновоеЗадание.КраткоеПредставлениеОшибки;
		Если ЗначениеЗаполнено(ФоновоеЗадание.ПодробноеПредставлениеОшибки) Тогда
			ПараметрыОбработчика.СообщениеОбОшибке = ФоновоеЗадание.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		
		ПараметрыОбработчика.Отказ = Истина;
		ПараметрыОбработчика.ДлительнаяОперация = Ложь;
		
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования.
//
Процедура ПриОжиданииДлительнойОперации(ПараметрыОбработчика, ПродолжитьОжидание = Истина)
	
	Если ПараметрыОбработчика.Отказ
		Или Не ПараметрыОбработчика.ДлительнаяОперация Тогда
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗаданиеВыполнено = Ложь;
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ПараметрыОбработчика.ИдентификаторОперации);
	Исключение
		ПараметрыОбработчика.Отказ             = Истина;
		ПараметрыОбработчика.СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииСозданиеОбменаДанными(),
			УровеньЖурналаРегистрации.Ошибка, , , ПараметрыОбработчика.СообщениеОбОшибке);
	КонецПопытки;
		
	Если ПараметрыОбработчика.Отказ Тогда
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецЕсли;
	
	ПродолжитьОжидание = Не ЗаданиеВыполнено;
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыОбработчикаДлительнойОперации(ПараметрыОбработчика, ФоновоеЗадание)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ФоновоеЗадание",          ФоновоеЗадание);
	ПараметрыОбработчика.Вставить("Отказ",                   Ложь);
	ПараметрыОбработчика.Вставить("СообщениеОбОшибке",       "");
	ПараметрыОбработчика.Вставить("ДлительнаяОперация",      Ложь);
	ПараметрыОбработчика.Вставить("ИдентификаторОперации",   Неопределено);
	ПараметрыОбработчика.Вставить("АдресРезультата",         Неопределено);
	ПараметрыОбработчика.Вставить("ДополнительныеПараметры", Новый Структура);
	
КонецПроцедуры

Функция КлючФоновогоЗадания(ИмяПланаОбмена, Действие)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ПланОбмена:%1 Действие:%2'"), ИмяПланаОбмена, Действие);
	
КонецФункции

Функция ЕстьАктивныеФоновыеЗадания(КлючФоновогоЗадания)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ",      КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат (АктивныеФоновыеЗадания.Количество() > 0);
	
КонецФункции

Процедура ИнициализироватьСтатусЗавершенияДлительнойОперации(СтатусЗавершения)
	
	СтатусЗавершения = Новый Структура;
	СтатусЗавершения.Вставить("Отказ",             Ложь);
	СтатусЗавершения.Вставить("СообщениеОбОшибке", "");
	СтатусЗавершения.Вставить("Результат",         Неопределено);

КонецПроцедуры

#КонецОбласти

Функция ТаблицаПриложенийСинхронизацииДанных(Параметры)
	
	НастройкиСинхронизацииИзМенеджераСервиса = Параметры.НастройкиСинхронизацииИзМенеджераСервиса.Получить();
	ОбластиДляОпределенияКодовУзлов          = Параметры.ОбластиДляОпределенияКодовУзлов.Получить();
	
	ТаблицаПриложений = Новый ТаблицаЗначений;
	ТаблицаПриложений.Колонки.Добавить("НаименованиеПриложения", Новый ОписаниеТипов("Строка"));
	ТаблицаПриложений.Колонки.Добавить("Префикс",                Новый ОписаниеТипов("Строка"));
	ТаблицаПриложений.Колонки.Добавить("ПрефиксКорреспондента",  Новый ОписаниеТипов("Строка"));
	ТаблицаПриложений.Колонки.Добавить("ВерсияКорреспондента",   Новый ОписаниеТипов("Строка"));
	ТаблицаПриложений.Колонки.Добавить("РольКорреспондента",     Новый ОписаниеТипов("Строка"));
	ТаблицаПриложений.Колонки.Добавить("ИмяПланаОбмена",         Новый ОписаниеТипов("Строка"));
	ТаблицаПриложений.Колонки.Добавить("ФорматОбмена",           Новый ОписаниеТипов("Строка"));
	ТаблицаПриложений.Колонки.Добавить("ОбластьДанных",          Новый ОписаниеТипов("Число"));
	
	ТаблицаПриложений.Колонки.Добавить("КонечнаяТочкаКорреспондента", Новый ОписаниеТипов("ПланОбменаСсылка.ОбменСообщениями"));
	
	ТаблицаПриложений.Колонки.Добавить("НастройкаСинхронизацииВМенеджереСервиса", Новый ОписаниеТипов("Булево"));
	ТаблицаПриложений.Колонки.Добавить("СинхронизацияОтключенаВМенеджереСервиса", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПриложений.Колонки.Добавить("Корреспондент");
	
	Если НастройкиСинхронизацииИзМенеджераСервиса.Количество() = 0 Тогда
		Возврат ТаблицаПриложений;
	КонецЕсли;
	
	ЕстьПрефикс                  = НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Найти("Префикс") <> Неопределено;
	ЕстьВерсияКорреспондента     = НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Найти("ВерсияКорреспондента") <> Неопределено;
	
	УзлыОбменаБСП = ОбменДаннымиСервер.УзлыОбменаБСП().ВыгрузитьКолонку("УзелИнформационнойБазы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого НастройкаИзМенеджераСервиса Из НастройкиСинхронизацииИзМенеджераСервиса Цикл
		
		СтрокаПриложение = ТаблицаПриложений.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПриложение, НастройкаИзМенеджераСервиса,
			"НаименованиеПриложения,
			|Префикс,
			|ПрефиксКорреспондента,
			|ВерсияКорреспондента,
			|РольКорреспондента,
			|ФорматОбмена,
			|ОбластьДанных,
			|НастройкаСинхронизацииВМенеджереСервиса");
		
		СтрокаПриложение.ИмяПланаОбмена = НастройкаИзМенеджераСервиса.ПланОбмена;
		
		СтрокаПриложение.КонечнаяТочкаКорреспондента = ПланыОбмена["ОбменСообщениями"].НайтиПоКоду(
			НастройкаИзМенеджераСервиса.КонечнаяТочкаКорреспондента);
		
		Если СтрокаПриложение.КонечнаяТочкаКорреспондента.Пустая() Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена конечная точка корреспондента с идентификатором ""%1"".'"),
				НастройкаИзМенеджераСервиса.КонечнаяТочкаКорреспондента);
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(НастройкаИзМенеджераСервиса.КодПредопределенногоУзла)
			И НастройкаИзМенеджераСервиса.ЭтоПланОбменаXDTO
			И НастройкаИзМенеджераСервиса.СинхронизацияНастроена Тогда
			
			Отбор = Новый Структура("ОбластьДанных, ПланОбмена");
			ЗаполнитьЗначенияСвойств(Отбор, НастройкаИзМенеджераСервиса);
			
			Области = ОбластиДляОпределенияКодовУзлов.НайтиСтроки(Отбор);
			Если Области.Количество() > 0 Тогда
				Область = Области[0];
				
				Для Каждого СтрокаКодыУзлов Из Область.КодыУзлов Цикл
					Если Не ЗначениеЗаполнено(СтрокаКодыУзлов.КодПредопределенногоУзла) Тогда
						Продолжить;
					КонецЕсли;
					
					НастройкаИзМенеджераСервиса.КодПредопределенногоУзла = СтрокаКодыУзлов.КодПредопределенногоУзла;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(НастройкаИзМенеджераСервиса.КодПредопределенногоУзла) Тогда
			СтрокаПриложение.Корреспондент = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(СтрокаПриложение.ИмяПланаОбмена,
				НастройкаИзМенеджераСервиса.КодПредопределенногоУзла);
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(СтрокаПриложение.Корреспондент) Тогда
			КодУзлаМС = ОбменДаннымиВМоделиСервиса.КодУзлаПланаОбменаВСервисе(СтрокаПриложение.ОбластьДанных);	
			СтрокаПриложение.Корреспондент = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(СтрокаПриложение.ИмяПланаОбмена, КодУзлаМС);
		Иначе
			
			ОбластьДанныхКорреспондента = РегистрыСведений.НастройкиОбменаДаннымиXDTO.ЗначениеНастройкиКорреспондента(СтрокаПриложение.Корреспондент,
				"ОбластьДанныхКорреспондента");
			
			Если ОбластьДанныхКорреспондента = Неопределено Тогда
				РегистрыСведений.НастройкиОбменаДаннымиXDTO.ОбновитьНастройкиКорреспондента(СтрокаПриложение.Корреспондент,
					"ОбластьДанныхКорреспондента", НастройкаИзМенеджераСервиса.ОбластьДанных);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПриложение.Корреспондент)
			И Не НастройкаИзМенеджераСервиса.СинхронизацияНастроена Тогда
			СтрокаПриложение.СинхронизацияОтключенаВМенеджереСервиса = Истина;
		КонецЕсли;
		
		Если Параметры.Режим = "НеНастроенныеОбмены"
			И ЗначениеЗаполнено(СтрокаПриложение.Корреспондент) Тогда
			ТаблицаПриложений.Удалить(СтрокаПриложение);
		ИначеЕсли Параметры.Режим = "НастроенныеОбмены"
			И Не ЗначениеЗаполнено(СтрокаПриложение.Корреспондент) Тогда
			ТаблицаПриложений.Удалить(СтрокаПриложение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПриложений;
	
КонецФункции

Процедура УдалитьЛишниеСтрокиНастроекСинхронизации(НастройкиСинхронизацииИзМенеджераСервиса, ДополнительныеПараметры)
	
	НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Добавить("ЭтоПланОбменаXDTO", Новый ОписаниеТипов("Булево"));
	НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Добавить("УдалитьНастройку",  Новый ОписаниеТипов("Булево"));
	
	НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Добавить("ИмяПланаОбменаДляПереходаНаНовыйОбмен",
		Новый ОписаниеТипов("Строка"));
	
	Если НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Найти("РольКорреспондента") = Неопределено Тогда	
		НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Добавить("РольКорреспондента", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	ЕстьВерсияКорреспондента = НастройкиСинхронизацииИзМенеджераСервиса.Колонки.Найти("ВерсияКорреспондента") <> Неопределено;
	
	Для Каждого НастройкаИзМенеджераСервиса Из НастройкиСинхронизацииИзМенеджераСервиса Цикл
		
		Если Метаданные.ПланыОбмена.Найти(НастройкаИзМенеджераСервиса.ПланОбмена) = Неопределено Тогда
			НастройкаИзМенеджераСервиса.УдалитьНастройку = Истина;
			Продолжить;
		КонецЕсли;
		
		НастройкиПланаОбмена = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(НастройкаИзМенеджераСервиса.ПланОбмена,
			"ИмяПланаОбменаДляПереходаНаНовыйОбмен, ЭтоПланОбменаXDTO");
		ЗаполнитьЗначенияСвойств(НастройкаИзМенеджераСервиса, НастройкиПланаОбмена);
		
		Если Не ЗначениеЗаполнено(НастройкаИзМенеджераСервиса.СинхронизацияНастроена) Тогда
			НастройкаИзМенеджераСервиса.СинхронизацияНастроена = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеПараметры.Режим = "НеНастроенныеОбмены" Тогда
		
		НастроенныеОбмены = НастройкиСинхронизацииИзМенеджераСервиса.Скопировать(Новый Структура("СинхронизацияНастроена", Истина));
		
		Для Каждого НастройкаИзМенеджераСервиса Из НастройкиСинхронизацииИзМенеджераСервиса Цикл
			
			Если НастройкаИзМенеджераСервиса.УдалитьНастройку Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не НастройкаИзМенеджераСервиса.СинхронизацияНастроена
				И НастроенныеОбмены.НайтиСтроки(Новый Структура("ОбластьДанных", НастройкаИзМенеджераСервиса.ОбластьДанных)).Количество() > 0 Тогда
				НастройкаИзМенеджераСервиса.УдалитьНастройку = Истина;
				Продолжить;
			КонецЕсли;
			
			ВариантыНастроек = ОбменДаннымиСервер.ВариантыНастроекОбменаДляКорреспондента(
				НастройкаИзМенеджераСервиса.ПланОбмена,
				?(ЕстьВерсияКорреспондента, НастройкаИзМенеджераСервиса.ВерсияКорреспондента, ""),
				НастройкаИзМенеджераСервиса.РольКорреспондента);
				
			Если ВариантыНастроек.Найти(ДополнительныеПараметры.ИдентификаторНастройки) = Неопределено Тогда
				НастройкаИзМенеджераСервиса.УдалитьНастройку = Истина;
				Продолжить;
			КонецЕсли;
			
			// Исключение возможности создания новой синхронизации данных на устаревшем плане обмена.
			НастройкаИзМенеджераСервиса.УдалитьНастройку = Не НастройкаИзМенеджераСервиса.СинхронизацияНастроена
				И ЗначениеЗаполнено(НастройкаИзМенеджераСервиса.ИмяПланаОбменаДляПереходаНаНовыйОбмен);
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого НастройкаИзМенеджераСервиса Из НастройкиСинхронизацииИзМенеджераСервиса.НайтиСтроки(Новый Структура("УдалитьНастройку", Ложь)) Цикл
		
		Если ДополнительныеПараметры.Режим = "НеНастроенныеОбмены" Тогда
			Если НастройкаИзМенеджераСервиса.ПланОбмена <> ДополнительныеПараметры.ИмяПланаОбмена Тогда
				НастройкаИзМенеджераСервиса.УдалитьНастройку = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Режим = "НеНастроенныеОбмены"
			И НастройкаИзМенеджераСервиса.СинхронизацияНастроена Тогда
			НастройкаИзМенеджераСервиса.УдалитьНастройку = Истина;
		ИначеЕсли ДополнительныеПараметры.Режим = "НастроенныеОбмены"
			И Не НастройкаИзМенеджераСервиса.СинхронизацияНастроена Тогда
			НастройкаИзМенеджераСервиса.УдалитьНастройку = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкиСинхронизацииИзМенеджераСервиса.Найти(Истина, "УдалитьНастройку") <> Неопределено Тогда
		НастройкиСинхронизацииИзМенеджераСервиса = НастройкиСинхронизацииИзМенеджераСервиса.Скопировать(
			Новый Структура("УдалитьНастройку", Ложь));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли