&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьНастройкиРежимаОграниченнойФункциональности();
	
	ЗаполнитьПеременныеДляПроверкиТелефонаИЭлектроннойПочты(ЭтаФорма);
	
	Реквизит = Параметры.Реквизит;
	ЗаполнитьСписокВыбораРегионовРФ();
	
	ДатаЗапускаМастера = ТекущаяДатаСеанса();
	
	ОпределитьОрганизацию();
	
	ДоступнаЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно();
	
	Элементы.МестоХраненияЭлектроннойПодписи.Видимость = ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	РежимРаботыСКлючами = ?(ДоступнаЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
	ФНС  = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ФСГС = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Элементы.ТелефонМобильный.Маска = "+9 999 999-99-99";
		ТелефонМобильный = "+7        -  -  ";
	#Иначе
		Элементы.ТелефонМобильный.Маска = "+7 999 999-99-99";
		ТелефонМобильный = "";
	#КонецЕсли
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.Закрыть.Заголовок = "Закрыть" Тогда
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Прервать работу помощника?'");
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		
		Если (Источник = Организация ИЛИ Параметр = Организация) Тогда
			
			Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Реквизиты Тогда
			
				ОбновитьРеквизитыОрганизацииИСотрудника();
				ДанныеОрганизацииЗаполненыКопированием 	= Ложь;
				ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
				
			ИначеЕсли Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Направления Тогда
				
				СведенияПоСчету = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
					Организация
					,,
					"БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка,");
					
				ЗаполнитьЗначенияСвойств(ДанныеОрганизации, СведенияПоСчету);
				ЗаполнитьЗначенияСвойств(ДанныеОрганизацииИОтветственныхЛиц, СведенияПоСчету);
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" Тогда	
		
		Если (Параметр = ВладелецЭЦП ИЛИ Параметр = Руководитель ИЛИ Параметр = ГлБухгалтер ИЛИ Параметр = СотрудникВыбор
			ИЛИ Источник = ВладелецЭЦП ИЛИ Источник = Руководитель ИЛИ Источник = ГлБухгалтер ИЛИ Источник = СотрудникВыбор)
			И Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ВладельцыЭЦП Тогда 
			
			ОбновитьРеквизитыОрганизацииИСотрудника();
			ИзменитьОформлениеВладельцаЭЦП();
			ДанныеОрганизацииЗаполненыКопированием 	= Ложь;
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПроверитьЧтоМастерФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыт" И Источник = Организация Тогда
		
		Параметр.ФормаМастераФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыта = Истина;
		
	ИначеЕсли ИмяСобытия = "Завершение редактирования направлений" Тогда
		
		Элементы.ПолучателиФНС.Обновить();
		СкрытьКнопкуУдаленияНаправления(ФНС);
		
	ИначеЕсли ИмяСобытия = "ОплатаСервиса_Изменение" Тогда
		
		УстановитьОформлениеТарифов();
		
		Если ЗначениеЗаполнено(Тариф) Тогда
			КоманднаяПанельМастерДалее(Неопределено);
		Иначе
			КоманднаяПанельМастерНазад(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ПроверкаТелефонаИЭлектроннойПочтыДляПаролей

&НаКлиенте
Процедура ТелефонДляПаролейПриИзменении(Элемент)
	
	ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Текст);
	ТелефонДляПаролей = Представление;
	
	ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Представление);
	Если Не ЗначениеЗаполнено(Представление) Тогда
		ТелефонДляПаролей = Текст;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей", 1.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонПриИзменении(Элемент)
	
	КодПодтвержденияТелефонИзменениеТекстаРедактирования(Элемент, КодПодтверждения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		КодПодтверждения = СокрЛП(Текст);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляПаролейПриИзменении(Элемент)
	
	ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(Элемент, ЭлектроннаяПочтаДляПаролей, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Представление = СокрЛП(Текст);
	ЭлектроннаяПочтаДляПаролей = Представление;
	
	ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Представление);
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей", 1.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияЭлектроннаяПочтаПриИзменении(Элемент)
	
	КодПодтвержденияЭлектроннаяПочтаИзменениеТекстаРедактирования(Элемент, КодПодтверждения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияЭлектроннаяПочтаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		КодПодтверждения = СокрЛП(Текст);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Имя = "АдресЮридический" Тогда
		Адрес = АдрЮР;
	Иначе
		Адрес = АдрФакт;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуКонтактнойИнформацииЗавершение", 
		ЭтотОбъект, 
		Элемент);
		
	ДополнительныеПараметры = КонтекстЭДОКлиент.ПараметрыПроцедурыРедактироватьАдрес();
	ДополнительныеПараметры.Вставить("Адрес",             Адрес);
	ДополнительныеПараметры.Вставить("АдресИмя",          Элемент.Имя);
	ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	ДополнительныеПараметры.Вставить("Оповещение",        ОписаниеОповещения);
	
	КонтекстЭДОКлиент.РедактироватьАдрес(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ДанныеОрганизацииЗаполненыКопированием = Ложь;
	ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
	ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
	
	ОбработатьИзменениеОрганизации(,Ложь);
	ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Истина;
	
	ИнициализацияЗначений(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьРеквизитыФормы();
	УстановитьЗаголовокФормы();
	ИзменитьОформлениеВладельцаЭЦП();
КонецПроцедуры

&НаКлиенте
Процедура АдресОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	
	СотрудникВыбор = "";
	ОчиститьДанныеСотрудника(Истина);
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	СотрудникВыбор = Неопределено;
    СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СотрудникНачалоВыбораЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(Организация, Неопределено, ОписаниеОповещения);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СотрудникВыбор = Результат;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(СотрудникВыбор) Тогда
		СтОбработка = Ложь;
		ПараметрФормы = Новый Структура("Ключ", СотрудникВыбор);
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрФормы);
	Иначе
		СтОбработка = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	КонецЕсли;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СотрудникВыбор);
	
	СтандартнаяОбработка = СтОбработка;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецОператорПриИзменении(Элемент)
	
	ОбновитьДанныеСпецОператора();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СотрудникНачалоВыбораЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(Организация, Неопределено, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРеквизитОрганизации(Элемент)
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "Декорация", "");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуОрганизацииНаРеквизите(Организация, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФИОВладельцаЭЦП(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ВладелецЭЦП);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите(ВладелецЭЦП,"ФИО");		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВладелецЭЦПСНИЛСНажатие(Элемент)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ВладелецЭЦП);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуВладельцаЭЦПНаРеквизите(ВладелецЭЦП,"СНИЛС");		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРуководительНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
			
	Если ЗначениеЗаполнено(Руководитель) Тогда  
		ПоказатьЗначение(, Руководитель);
	Иначе	
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя(Организация);		
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя",1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГлБухгалтерНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
			
	Если ЗначениеЗаполнено(ГлБухгалтер) Тогда  
		ПоказатьЗначение(, ГлБухгалтер);
	Иначе	
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера(Организация);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера",1);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРосстатПриИзменении(Элемент)
	
	Если СдаватьВРосстат И НЕ СдаватьВФНС Тогда 
		СдаватьВФНС = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", Организация);
	
	ПутьКОсновнойФормеСправочникаОрганизации = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПутьКОсновнойФормеСправочникаОрганизации();
	
	ОткрытьФорму(
		ПутьКОсновнойФормеСправочникаОрганизации, 
		СтруктураПараметров,
		,
		Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФНСПриИзменении(Элемент)
	
	Если НЕ СдаватьВФНС Тогда 
		СдаватьВРосстат = Ложь;
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ПризнакОбособленногоПодразделенияПриИзменении(Элемент)
	
	Если ПризнакОбособленногоПодразделения Тогда
		ДополнительныйКодФСС = ДанныеОрганизации.РеквизитДопКодФСС;
	Иначе
		ДополнительныйКодФСС = "";
	КонецЕсли;
	
	ИзменитьОформлениеРеквизитовОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПТипПриИзменении(Элемент)
	
	ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	
	ОчиститьДанныеСотрудника(Истина);
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаЕстьCSP12ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтИнфотекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаПерейтиНаСайтКриптоПроОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтКриптоПро();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНетCSP3ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтИнфотекс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНетCSP5ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиНаСайтКриптоПро();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаУкажитеКриптопровайдерВручнуюОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// позволяем пользователю вручную выбрать криптопровайдера
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьКриптопровайдерВручнуюЗавершение", ЭтотОбъект);
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаВыбораКриптопровайдера",,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьЭДОПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаСервисЭДООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СсылкаОписаниеСервисаЭДО) Тогда
		ПерейтиПоНавигационнойСсылке(СсылкаОписаниеСервисаЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыСКлючамиПриИзменении(Элемент)
	
	ТелефонДляПаролей = Неопределено;
	ЭлектроннаяПочтаДляПаролей = Неопределено;
	ЗаполнитьПеременныеДляПроверкиТелефонаИЭлектроннойПочты(ЭтаФорма);
	Таймер = 0;
	УправлениеФормой(ЭтаФорма);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстыПолей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПВидДокументаПриИзменении(Элемент)
	
	УстановитьВидимостьКодаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеПоПодключениюКПФРОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Заявление" Тогда
		
		ТабДокЗаявленияПФР = СформироватьЗаявлениеПФР();
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ТабДок", ТабДокЗаявленияПФР);
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ЗаявлениеНаПодключениеКПФР", ДополнительныеПараметры);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Сайт" Тогда
		
		ПараметрыПодключенияКПФР = ПараметрыПодключенияКПФР(КодРегиона);
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(ПараметрыПодключенияКПФР.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНажатие(Элемент)
	
	Если ЗначениеЗаполнено(СсылкаПерейдитеНаПлатныйТариф) Тогда
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(СсылкаПерейдитеНаПлатныйТариф);
	Иначе
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://v8.1c.ru/edi/edi_app/1c-otchetnost/rates/index.htm");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтоДелатьДляПолнойФункциональностиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.1c.ru/rus/partners/onecrep.jsp");
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПаспортНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьФайлыСПредпросмотром(ВидыДокументов().Паспорт, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаСНИЛСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьФайлыСПредпросмотром(ВидыДокументов().СНИЛС, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПодтверждениеПолномочийВладельцаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьФайлыСПредпросмотром(ВидыДокументов().ПодтверждениеПолномочийВладельцаЭП, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаСвидетельствоОПостановкеНаУчетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьФайлыСПредпросмотром(ВидыДокументов().СвидетельствоОПостановкеНаУчет, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаЗаявлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДобавитьФайлыСПредпросмотром(ВидыДокументов().Заявление, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоАвтоматическомeРегистрационномуНомеруОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиКакУзнатьРегНомерВебКлиент");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы


#Область ФНС

&НаКлиенте
Процедура ПолучателиФНСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактироватьВыбранноеНаправлениеФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФНСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РедактироватьВыбранноеНаправлениеФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФНСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФНС, 
		"ПолучателиФНС", 
		"УдалитьНаправлениеФНС");

КонецПроцедуры

#КонецОбласти

#Область ФСГС

&НаКлиенте
Процедура ПолучателиФСГСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РедактироватьВыбранноеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФСГСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РедактироватьВыбранноеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиФСГСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФСГС, 
		"ПолучателиФСГС", 
		"УдалитьНаправлениеФСГС");
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	
	ПолучателиФНС.Очистить();
	
	НовоеНаправление(ДанныеОрганизации.КодНО, ДанныеОрганизации.КППЮЛ);
	
	ВсеНаправленияФНС = ДобавитьВсеНаправленияФНС(Организация);
	
	Для каждого НаправлениеФНС Из ВсеНаправленияФНС Цикл
		НовоеНаправление(НаправлениеФНС.Код, НаправлениеФНС.КПП);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическийАдресПоЮридическому(Команда)
	
	АдресФактический = АдресЮридический;
	АдрФакт = АдрЮР;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЮридическийАдресПоФактическому(Команда)
	
	АдресЮридический = АдресФактический;
	АдрЮР = АдрФакт;
	
	КодРегиона 		= КодРегионаПоЮрАдресу();
	КодРегионаФСРАР = КодРегиона;
	
	ВосстановитьНаправленияПоУмолчанию(ФСГС);

КонецПроцедуры

#Область ПроверкаТелефонаИЭлектроннойПочтыДляПаролей

&НаКлиенте
Процедура ПроверитьНомер(Команда)

	ОтправитьКодПодтвержденияТелефонДляПаролей();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдрес(Команда)
	
	ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПовторноТелефон(Команда)
	
	ОтправитьКодПодтвержденияТелефонДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПовторноЭлектроннаяПочта(Команда)
	
	ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроверкуТелефонаНажатие(Элемент)
	
	ПроверкаТелефонДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), Ложь, Ложь, "", Ложь, Ложь);
	ТелефонДляПаролей = Неопределено;
	Таймер = 0;
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстыПолей", 0.1, Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроверкуЭлектроннойПочтыНажатие(Элемент)
	
	ПроверкаЭлектроннаяПочтаДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), Ложь, Ложь, "", Ложь, Ложь);
	ЭлектроннаяПочтаДляПаролей = Неопределено;
	Таймер = 0;
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстыПолей", 0.1, Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КоманднаяПанельМастерНазад(Команда)
	ПоказатьПредыдущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее(Команда)
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ОчиститьСообщения();
	МастерДалее = Истина;
	
	Если ТекущаяСтраница = Элементы.Старт Тогда
		
		Если ЭтоРежимБесплатнойНулевойОтчетности Тогда
			Если НЕ ЗначениеЗаполнено(Тариф) Тогда
				МастерДалее = Ложь;
				ТекстСообщения = НСтр("ru = 'Для продолжения подключения к 1С-Отчетности выберите тариф'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"УказательНаВыборТарифа");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("КоманднаяПанельМастерДалееСтартЗавершение", ЭтотОбъект);
			Если РежимРаботыСКлючами = 2 И МастерДалее Тогда
				ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
			Иначе
				ВыполнитьОбработкуОповещения(ОписаниеОповещения);
			КонецЕсли;
		
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.МестоХраненияЭлектроннойПодписи Тогда
		
		МастерДалее = Истина;
		Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
			Если РежимРаботыСКлючами = 0 Тогда  // Не выбрали ничего
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите место хранения ключа электронной подписи'"), ,"РежимРаботыСКлючами");
				МастерДалее = Ложь;
			ИначеЕсли РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
				Если НЕ ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Укажите номер мобильного телефона'"),, "ТелефонДляПаролей");
					МастерДалее = Ложь;
				Иначе
					Если Не ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено Тогда
						Если ПроверкаТелефонДляПаролей.ВыполняетсяПроверка Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru='Введите код из SMS'"),, "КодПодтверждения");
							МастерДалее = Ложь;
						Иначе
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru='Выполните проверку номера телефона'"),, "ТелефонДляПаролей");
							МастерДалее = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено Тогда
					Если Не ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено Тогда
						Если ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru='Введите код из письма'"),, "КодПодтверждения");
							МастерДалее = Ложь;
						Иначе
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru='Выполните проверку адреса электронной почты'"),, "ЭлектроннаяПочтаДляПаролей");
							МастерДалее = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Спецоператор <> ПредопределенноеЗначение("Перечисление.СпецоператорыСвязи.КалугаАстрал") Тогда
					Спецоператор = ПредопределенноеЗначение("Перечисление.СпецоператорыСвязи.КалугаАстрал");
					ОбновитьДанныеСпецОператора();
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
		ОписаниеОповещения = Новый ОписаниеОповещения("КоманднаяПанельМастерДалееМестоХраненияЭлектроннойПодписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		Если РежимРаботыСКлючами = 2 И МастерДалее Тогда
			ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ИспользуемыйКриптопровайдер Тогда
		
		Если ВыборКриптопровайдера = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите криптопровайдер'"), ,"ВыборКриптопровайдера");
			МастерДалее = Ложь;
			Возврат;
		Иначе
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УдалитьВыборCSPИзВременныхНастроек();
		КонецЕсли;
		
		Если ВыборКриптопровайдера = 1 Тогда
			ТипКриптопровайдера = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_VipNet;
		Иначе
			ТипКриптопровайдера = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыКриптоПровайдеров_CryptoPro;
		КонецЕсли;
		
		Криптопровайдер = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(ТипКриптопровайдера);
		
		ЗаполнитьКонстанты(Криптопровайдер);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СоглашениеОПрисоединенииКРегламентуУЦ Тогда
		
		// проверка удостоверяющего центра
		Если Спецоператор = Неопределено ИЛИ Спецоператор= КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_СпецоператорыСвязи_ПустаяСсылка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Удостоверяющий центр""'"), ,"Спецоператор");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка принятия лицензионного соглашения
		Если НЕ СогласиеСЛицензионнымСоглашением Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для продолжения работы необходимо принять соглашение'"), ,"СогласиеСЛицензионнымСоглашением");
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если МастерДалее Тогда
			Если ЗначениеЗаполнено(Организация) Тогда
				ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Ложь;
			КонецЕсли;
			ИзменитьОформлениеВладельцаЭЦП();
			УстановитьДоступностьМобильногоТелефона();
			ВключитьВсеНаправленияСдачиОтчетности();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный)) И РежимРаботыСКлючами = 1 Тогда
			ТелефонМобильный = ТелефонДляПаролей;
			ПолучатьСМС = Истина;
			Элементы.ТелефонМобильный.Доступность = Истина;
		КонецЕсли;
		
		Если МастерДалее Тогда
			
			Если ПустаяСтрока(НомерОсновнойПоставки1с) И НЕ ПустаяСтрока(НомерОсновнойПоставки1сВМоделиСервиса) Тогда
				НомерОсновнойПоставки1с = НомерОсновнойПоставки1сВМоделиСервиса;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(НомерОсновнойПоставки1с) И НомерОсновнойПоставки1с = НомерОсновнойПоставки1сВМоделиСервиса Тогда
				Элементы.ОткрытьПодсказкуПоРегистрационномуНомеру.Видимость = Ложь;
				Элементы.ОткрытьПодсказкуПоАвтоматическомeРегистрационномуНомеру.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДанныхДляЗаявления Тогда 
		
		// проверка регистрационного номер
		Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Регистрационный номер программы""'"), ,"НомерОсновнойПоставки1с");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(НомерОсновнойПоставки1с, НСтр("ru = 'Регистрационный номер программы'"), "НомерОсновнойПоставки1с") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка организации
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ЗадаватьВопросПроСуществованиеУчетнойЗаписи Тогда 
				ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Ложь;
				// Если организацию выбрали только на этом шаге или на этом шаге ее перевыбрали, тогда необходимо проверить наличие учетной записи абонента.
				ПроверитьДляОрганизацииТребуетсяУчетнаяЗапись(МастерДалее);
			Иначе
				ГруппаДанныхДляЗаявления(МастерДалее);
			КонецЕсли;
		Иначе 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Организация, по которой будет сдаваться отчетность""'"), ,"Организация");
			МастерДалее = Ложь;
			ГруппаДанныхДляЗаявления(МастерДалее);
		КонецЕсли;
		
		Элементы.ПризнакОбособленногоПодразделения.Видимость = ЭтоЮридическоеЛицо;
		
		Если МастерДалее И Элементы.Документы.Видимость Тогда
			Элементы.ГруппаПодтверждениеПолномочийВладельцаЭП.Видимость = ЭтоЮридическоеЛицо;
			// Убираем видимость документа, подтверждающего полномочия
			Если НЕ ЭтоЮридическоеЛицо Тогда
				Элементы.НадписьСтрока4.Заголовок = НСтр("ru = '3.'");
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Документы Тогда 
		
		Для Каждого ВидДокумента Из ВидыДокументов() Цикл
			Если ВидДокумента.Ключ = "Заявление" Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьФайлы = Ложь;
			Для Каждого ЭлементСписка Из ФайлыДокументов Цикл
				Если ЭлементСписка.Значение.Документ = ВидДокумента.Значение Тогда
					ЕстьФайлы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЕстьФайлы Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Добавьте файлы для документа ""%1""'"), ВидДокумента.Значение),,
					"Ссылка" + ВидДокумента.Ключ);
				МастерДалее = Ложь;			
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ МастерДалее Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Реквизиты Тогда 

		// краткое наименование
		Если ПустаяСтрока(КраткоеНаименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните краткое наименование'"), ,"ДекорацияКраткоеНаименование");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(КраткоеНаименование, НСтр("ru = 'Краткое наименование'"), "ДекорацияКраткоеНаименование") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// полное наименование
		Если ПустаяСтрока(ПолноеНаименование) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните полное наименование'"), ,"ДекорацияПолноеНаименование");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ПолноеНаименование, НСтр("ru = 'Полное наименование'"), "ДекорацияПолноеНаименование") Тогда
			МастерДалее = Ложь;
		КонецЕсли;	
                  	
		Если ЭтоЮридическоеЛицо Тогда
			
			// ИНН
			Если ПустаяСтрока(ИНН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,10) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 10 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// КПП
			Если ПустаяСтрока(КПП) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните КПП'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьКПП(КПП)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'КПП должен состоять из 9 цифр'"), ,"ДекорацияКПП");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// ОГРН
			Если ПустаяСтрока(ОГРН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРН'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,13)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРН должен состоять из 13 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
			
		Иначе
			
			// ИНН
			Если ПустаяСтрока(ИНН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ИНН'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,12) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ИНН должен состоять из 12 цифр'"), ,"ДекорацияИНН");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// ОГРН
			Если ПустаяСтрока(ОГРН) Тогда 
			    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните ОГРНИП'"), ,"ОГРН");
				МастерДалее = Ложь;
			ИначеЕсли ЗначениеЗаполнено(ОГРН) И НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,15, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОГРНИП должен состоять из 15 цифр'"), ,"ОГРН");
				МастерДалее = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// регистрационный номер в ПФР
		РегНомерПФР = СокрЛП(РегНомерПФР);
		РегНомерПФРПустой = ПустаяСтрока(СтрЗаменить(РегНомерПФР,"-",""));
		
		Если СдаватьВПФР Тогда
			Если РегНомерПФРПустой Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ПФР'"), ,"ДекорацияРегНомерПФР");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьРегистрационныйНомерПФР(РегНомерПФР, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ПФР должен состоять из 12 цифр (ХХХ-ХХХ-ХХХХХХ)'"), ,"ДекорацияРегНомерПФР");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
				
		Если СдаватьВФСС Тогда
			// регистрационный номер в ФСС
			Если ПустаяСтрока(РегНомерФСС) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните регистрационный номер в ФСС'"), ,"ДекорацияРегНомерФСС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(РегНомерФСС, 10, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Регистрационный номер в ФСС должен состоять из 10 цифр'"), ,"ДекорацияРегНомерФСС");
				МастерДалее = Ложь;
			КонецЕсли;
		
			// дополнительный код ФСС
			Если ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо И СдаватьВФСС Тогда
				Если ПустаяСтрока(ДополнительныйКодФСС) Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните дополнительный код ФСС'"), ,"ДополнительныйКодФСС");
					МастерДалее = Ложь;
				ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ДополнительныйКодФСС, 10, Истина) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дополнительный код ФСС должен состоять из 10 цифр'"), ,"ДополнительныйКодФСС");
					МастерДалее = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КонтекстЭДОКлиент.ПроверитьАдресОрганизацииЗаявления(АдрЮР, "АдресЮридический", НСтр("ru = 'Юридический адрес'"), НСтр("ru = 'юридического адреса'"), МастерДалее);
		КонтекстЭДОКлиент.ПроверитьАдресОрганизацииЗаявления(АдрФакт, "АдресФактический", НСтр("ru = 'Фактический адрес'"), НСтр("ru = 'фактического адреса'"), МастерДалее);

		// телефон организации
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Телефон организации""'"), ,"ТелефонОсновной");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ТелефонОсновной, НСтр("ru = 'Телефон организации'"), "ТелефонОсновной") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// электронная почта (теперь обязательна)
		Если НЕ КонтекстЭДОКлиент.ЭлектроннаяПочтаВведенаКорректно(
				ЭлектроннаяПочта,
				ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное")) Тогда
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ЭлектроннаяПочта, НСтр("ru = 'Электронная почта организации'"), "ЭлектроннаяПочта") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда
			
			Если НЕ ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Регион""'"), ,"КодРегионаФСРАР");
				МастерДалее = Ложь;
			КонецЕсли;
			
			Если МастерДалее = Истина Тогда
				
				РегионЮрАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион;
				
				Если КодРегионаФСРАР <> РегионЮрАдреса И ЗначениеЗаполнено(РегионЮрАдреса) Тогда
					НаименованиеРегионаЮрАдреса = НаименованиеСубъектаРФ(Число(РегионЮрАдреса));
					КодРегионаСНаименованием = Формат(Число(РегионЮрАдреса), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;") + ?(ЗначениеЗаполнено(НаименованиеРегионаЮрАдреса), " - ", "") + НаименованиеРегионаЮрАдреса;
					ОписаниеОповещения = Новый ОписаниеОповещения("ВопросРегионЗаявкиРосалькогольрегулированияЗавершение", ЭтотОбъект);
					ТекстВопроса = "Регион заявки для Росалкогольрегулирования отличается от указанного в юридическом адресе (""" + КодРегионаСНаименованием + """). Продолжить?";
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
					Возврат;
				КонецЕсли;
				
				Если МастерДалее И ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
					
					ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(КодРегионаФСРАР);
					
					СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
					Если ИнформацияОРегионе <> Неопределено Тогда
						СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, КодРегионаФСРАР);
					КонецЕсли;
					
					Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект);
						ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете." + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС
							+ "Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") в текущей версии не поддерживается. Продолжить?";
						ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ МастерДалее Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ВладельцыЭцп Тогда
		
		// фамилия
		Если ПустаяСтрока(ВладелецЭЦПФамилия) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните фамилию'"), ,"ВладелецЭЦПФамилия");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПФамилия, НСтр("ru = 'Фамилия'"), "ВладелецЭЦПФамилия") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// имя
		Если ПустаяСтрока(ВладелецЭЦПИмя) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните имя'"), ,"ВладелецЭЦПИмя");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПИмя, НСтр("ru = 'Имя'"), "ВладелецЭЦПИмя") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// отчетство
		Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПОтчество, НСтр("ru = 'Отчество'"), "ВладелецЭЦПОтчество") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// СНИЛС
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПСНИЛС, "-","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните СНИЛС'"), ,"ВладелецЭЦПСНИЛС");
			МастерДалее = Ложь;
		Иначе	
			Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'"), ,"ВладелецЭЦПСНИЛС");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Дата рождения
		Если Не ЗначениеЗаполнено(ВладелецЭЦПДатаРождения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Дата рождения""'"), ,"ВладелецЭЦПДатаРождения");
			МастерДалее = Ложь;
		ИначеЕсли Год(ВладелецЭЦПДатаРождения) = Год(ТекущаяДата())
			ИЛИ ВладелецЭЦПДатаРождения > ТекущаяДата()
			ИЛИ Год(ВладелецЭЦПДатаРождения) < 1900 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указано некорректное значение в поле ""Дата рождения""'"), ,"ВладелецЭЦПДатаРождения");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// Пол
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦППол) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Пол""'"), ,"ВладелецЭЦППол");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// должность
		Если ЭтоЮридическоеЛицо Тогда
			Если ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Должность""'"), ,"ВладелецЭЦПДолжность");
				МастерДалее = Ложь;
			ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПДолжность, НСтр("ru = 'Должность'"), "ВладелецЭЦПДолжность") Тогда
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Подразделение
		Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦППодразделение, НСтр("ru = 'Подразделение'"), "ВладелецЭЦППодразделение") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// Гражданство
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Гражданство""'"), ,"ВладелецЭЦПГражданство");
			МастерДалее = Ложь;
		ИначеЕсли НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.КодАльфа2Заполнен(ВладелецЭЦПГражданство)
			И ВладелецЭЦПГражданство <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните код альфа-2 у страны, указанной в качестве гражданства сотрудника-владельца ЭП'"), ,"ВладелецЭЦПГражданство");
			МастерДалее = Ложь;
		КонецЕсли;
		
		ДокументУдЛичность = Новый Структура();
		ДокументУдЛичность.Вставить("ВладелецЭЦПВидДокумента",        ВладелецЭЦПВидДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПСерияДокумента",      ВладелецЭЦПСерияДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПНомерДокумента",      ВладелецЭЦПНомерДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПДатаВыдачиДокумента", ВладелецЭЦПДатаВыдачиДокумента);
		ДокументУдЛичность.Вставить("ВладелецЭЦПКемВыданДокумент",    ВладелецЭЦПКемВыданДокумент);

		// документ, удостоверяющий личность
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Документ, удостоверяющий личность""'"), ,"ВладелецЭЦПВидДокумента");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПВидДокумента, НСтр("ru = 'Документ, удостоверяющий личность'"), "ВладелецЭЦПВидДокумента") Тогда
			МастерДалее = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(КонтекстЭДОКлиент.ПолучитьКодВидаДокументаФизическогоЛица(ВладелецЭЦПВидДокумента)) Тогда
			ТекстОшибки = НСтр("ru = 'Заполните код ИФНС в виде документа ""%1""'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ВладелецЭЦПВидДокумента));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"ВладелецЭЦПВидДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// серия
		Если ПустаяСтрока(ВладелецЭЦПСерияДокумента) И НЕ КонтекстЭДОКлиент.ПроверитьСериюДокумента(ВладелецЭЦПВидДокумента,ВладелецЭЦПСерияДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Серия""'"), ,"ВладелецЭЦПСерияДокумента");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПСерияДокумента, НСтр("ru = 'Серия'"), "ВладелецЭЦПСерияДокумента") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// номер
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Номер""'"), ,"ВладелецЭЦПНомерДокумента");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПНомерДокумента, НСтр("ru = 'Номер'"), "ВладелецЭЦПНомерДокумента") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// кем выдан
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Кем выдан""'"), ,"ВладелецЭЦПКемВыданДокумент");
			МастерДалее = Ложь;
		ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(ВладелецЭЦПКемВыданДокумент, НСтр("ru = 'Кем выдан'"), "ВладелецЭЦПКемВыданДокумент") Тогда
			МастерДалее = Ложь;
		КонецЕсли;
		
		// дата выдачи
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Дата выдачи""'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		ИначеЕсли ВладелецЭЦПДатаВыдачиДокумента > ДатаЗапускаМастера ИЛИ Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указана дата выдачи'"), ,"ВладелецЭЦПДатаВыдачиДокумента");
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
			// Код подразделения. Только для паспорта РФ.
			КодПодразделенияБезТире = СтрЗаменить(ВладелецЭЦПКодПодразделения, "-","");
			Если ПустаяСтрока(КодПодразделенияБезТире) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код подразделения""'"), ,"ВладелецЭЦПКодПодразделения");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(ВладелецЭЦПКодПодразделения) <> 7
				ИЛИ НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан код подразделения. Не соответствует маске ХХХ-ХХХ, где X – любая цифра'"), ,"ВладелецЭЦПКодПодразделения");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Место рождения
		Если ПустаяСтрока(ВладелецЭЦПМестоРождения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Место рождения""'"), ,"ВладелецЭЦПМестоРождения");
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если МастерДалее Тогда
			Если СдаватьВПФР Тогда
				ВывестиНадписьПоДокументамДляПодключенияКПФР();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Направления Тогда
		
		// коды ФНС
		Если СдаватьВФНС И ПолучателиФНС.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды ФНС'"), ,"ПолучателиФНС");
			МастерДалее = Ложь;
		ИначеЕсли СдаватьВФНС Тогда
			Для каждого Получатель Из ПолучателиФНС Цикл
				Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КПП, НСтр("ru = 'КПП'"), "ПолучателиФНС") Тогда
					МастерДалее = Ложь;
					Прервать;
				КонецЕсли;
				Если КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КодПолучателя, НСтр("ru = 'Код ФНС'"), "ПолучателиФНС") Тогда
					МастерДалее = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
		// код отделения ПФР
		Если СдаватьВПФР Тогда
			Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код отделения ПФР""'"), ,"КодПФР");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодПФР))<> 7 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код отделения ПФР должен состоять из 6 цифр'"), ,"КодПФР");
				МастерДалее = Ложь;
			ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(КодПФР, НСтр("ru = 'Код отделения ПФР'"), "КодПФР") Тогда
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// код органа Росстата
		Если СдаватьВРосстат Тогда
			
			Если ПолучателиФСГС.Количество() = 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды органа Росстата'"), ,"ПолучателиФСГС");
				МастерДалее = Ложь;
				
			ИначеЕсли ПолучателиФСГС.Количество() > 0 Тогда
				
				Для каждого Получатель Из ПолучателиФСГС Цикл
					
					Если ПустаяСтрока(СтрЗаменить(Получатель.КодПолучателя,"-","")) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код органа Росстата""'"), ,"ПолучателиФСГС");
						МастерДалее = Ложь;
					ИначеЕсли СтрДлина(СокрЛП(Получатель.КодПолучателя)) < 5 Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код органа Росстата должен состоять как минимум из 4 цифр'"), ,"ПолучателиФСГС");
						МастерДалее = Ложь;
					ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КодПолучателя, НСтр("ru = 'Код органа Росстата'"), "ПолучателиФСГС") Тогда
						МастерДалее = Ложь;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если МастерДалее Тогда
			ЗаполнитьПараметрыЭДО();
			Если НЕ ОтображатьПодключениеЭДО Тогда
				СформироватьТаблицуДляПодтвержденияДанных();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПодключениеЭДО Тогда 
		
		// подключение ЭДО
		Если ПодключитьЭДО Тогда
			
			// оператор ЭДО
			Если НЕ ЗначениеЗаполнено(ОператорЭДО) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Оператор ЭДО""'"), ,"ОператорЭДО");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// код ФНС
			Если ПустаяСтрока(КодНалоговогоОрганаЭДО) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код ФНС""'"), ,"КодНалоговогоОрганаЭДО");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодНалоговогоОрганаЭДО))<> 4 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код ФНС должен состоять из 4 цифр'"), ,"КодНалоговогоОрганаЭДО");
				МастерДалее = Ложь;
			КонецЕсли;
		
		КонецЕсли;
		
		Если МастерДалее Тогда
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;

	ИначеЕсли ТекущаяСтраница = Элементы.Подтверждение Тогда 
		
		Если ЭтоРежимОграниченнойФункциональности И Не ФайлЗаявленияДобавлен(ЭтаФорма) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Добавьте файлы для документа ""%1""'"), ВидыДокументов().Заявление),,
				"СсылкаЗаявление");
					
			МастерДалее = Ложь;
			Возврат;
		КонецЕсли;
		
		// создание документа заявления
		СоздатьНовыйДокументЗаявление(2);
		
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
				
		Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
						
	ИначеЕсли ТекущаяСтраница = Элементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда 
		
		// создание заявления и его отправка
		СформироватьИОтправитьЗаявление();
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления Тогда
		
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда
			
			Первичное = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное");
			
			ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
			ДополнительныеПараметры.Вставить("ЗначениеКопирования", ДокументЗаявление.Ссылка);
			ДополнительныеПараметры.Вставить("ВидЗаявления", 		Первичное);

			ПрограммноеЗакрытие = Истина;
			
			// Закрываем это заявление и на основе него готовим еще одно (после закрытия) в процедуре 
			// ОткрытьФормуЗаявления_Завершение
			Закрыть(ДополнительныеПараметры);
			
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСоглашениеНапечать(Команда)
	Элементы.ПолеHTMLЛицензии.Документ.execCommand("Print");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПоПодключению(Команда)
	КонтекстЭДОКлиент.ОткрытьИнструкциюПоПодключениюК1СОтчетности();
КонецПроцедуры

&НаКлиенте
Процедура СкачатьViPNet(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкачатьViPNetПослеУстановки", ЭтотОбъект);
	ОбщегоНазначенияЭДКОКлиент.УстановитьViPNetCSP(Оповещение, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьCryptoPro(Команда)
	
	Оповещение = Новый ОписаниеОповещения("СкачатьCryptoProПослеУстановки", ЭтотОбъект);
	ОбщегоНазначенияЭДКОКлиент.УстановитьCryptoProCSP(Оповещение, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоУстановкеVipNet(Команда)
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/bmk/elreps/vipnet");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоУстановкеCryptoProCSP(Команда)
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.cryptopro.ru/sites/default/files/private/csp/36R2/6497/doc.zip");	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоУдостоверяющемуЦентру(Команда)
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиЧтоТакоеУдостоверяющийЦентр");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтУдостоверяющегоЦентра(Команда)
	КонтекстЭДОКлиент.ОткрытьСтраницуУЦНажатие(Спецоператор);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоРегистрационномуНомеру(Команда)
	ПриложениеЗапущеноВРежимеВебКлиента = Ложь;
	
	Если РазделениеВключено Тогда
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиКакУзнатьРегНомерВебКлиент");
	Иначе 
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиКакУзнатьРегНомер");
	КонецЕсли; 	
		
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЗаявление(Команда)
	
	СоздатьНовыйДокументЗаявление(3);
	
	ПараметрСпецоператора = КонтекстЭДОКлиент.ПолучитьПараметрСпецоператораКлиент(
		Спецоператор,
		Новый Структура("ЗаявлениеПолучатель"),
		СтруктураДанныхСпецоператорыСвязи.Макет);
		
	ЗаявлениеПолучатель = ПараметрСпецоператора.ЗаявлениеПолучатель;
		
	ТабДок = КонтекстЭДОКлиент.ПодготовитьМакет(
			ДокументЗаявление,
			ЗаявлениеПолучатель,
			"ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьЗаявка",
			"ПечатьЗаявка");
			
	ЗаголовокТабДок = "Заявление на подключение";
	
	КонтекстЭДОКлиент.НапечататьДокумент(ТабДок, ЗаголовокТабДок);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодсказкуПоЭЦП(Команда)
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиПоЭЦП");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоСозданиюКлючаЭЦП(Команда)
	
	КонтекстЭДОКлиент.ОткрытьИнструкциюИнструкциюПоСозданиюКлючаЭЦП(ТипКриптопровайдера);
	
КонецПроцедуры

#Область ПолучателиФНС

&НаКлиенте
Процедура УдалитьНаправлениеФНС(Команда)
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФНС, 
		"ПолучателиФНС", 
		"УдалитьНаправлениеФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияФНС(Команда)
	
	ВосстановитьНаправления(ФНС);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьНаправлениеФНС(Команда)
	
	ОткрытьФормуНаправления("Добавить", "ПолучателиФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНаправлениеФНС(Команда)
	
	РедактироватьВыбранноеНаправлениеФНС();
	
КонецПроцедуры

#КонецОбласти

#Область ПолучателиФСГС

&НаКлиенте
Процедура ДобавитьНаправлениеФСГС(Команда)
	
	ДобавитьНовоеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНаправлениеФСГС(Команда)
	
	РедактироватьВыбранноеНаправлениеФСГС();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНаправлениеФСГС(Команда)
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		ПолучателиФСГС, 
		"ПолучателиФСГС", 
		"УдалитьНаправлениеФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияФСГС(Команда)
	
	ВосстановитьНаправления(ФСГС);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыбратьТариф(Команда)
	
	Попытка
	
		МодульТарификацияБПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ТарификацияБПКлиент");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗаголовокСсылкиВозвратаКВладельцу", НСтр("ru='Вернуться к подключению 1С-Отчетности'"));
		МодульТарификацияБПКлиент.ОткрытьФормуВыбораТарифа(ЭтотОбъект, ПараметрыФормы);
		
	Исключение
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеВыбораТарифа", 
		ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СсылкаПерейдитеНаПлатныйТариф", СсылкаПерейдитеНаПлатныйТариф);
			
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ВыборТарифаБизнесСтарт",ДополнительныеПараметры,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОформлениеТарифов()
	
	ОпределитьТариф();
	
	Если ЗначениеЗаполнено(Тариф) Тогда
		Элементы.Цены.Видимость 		= Ложь;
		Элементы.ВыборТарифа.Видимость 	= Ложь;
	Иначе
		Элементы.Цены.Видимость 		= НЕ ЭтоРежимБесплатнойНулевойОтчетности;
		Элементы.ВыборТарифа.Видимость 	= ЭтоРежимБесплатнойНулевойОтчетности;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТариф()
	
	Если НЕ ЭтоРежимБесплатнойНулевойОтчетности Тогда
		Возврат;
	КонецЕсли;
	
	Тариф = "";
	
	Попытка
		МодульТарификацияБПВызовСервераПовтИсп = ОбщегоНазначения.ОбщийМодуль("ТарификацияБПВызовСервераПовтИсп");
		Если МодульТарификацияБПВызовСервераПовтИсп = Неопределено Тогда
			Возврат;
		Иначе
			ТарифВключаетЭДО = МодульТарификацияБПВызовСервераПовтИсп.РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами();
		КонецЕсли;
		
		МодульТарификацияБП = ОбщегоНазначения.ОбщийМодуль("ТарификацияБП");
		Если МодульТарификацияБП = Неопределено Тогда
			Возврат;
		Иначе
			ВыставленСчет = МодульТарификацияБП.ЕстьВыставленныйСчетНаОплатуСервиса();
		КонецЕсли;
		
		Если ТарифВключаетЭДО ИЛИ ВыставленСчет Тогда
			Тариф = МодульТарификацияБП.ИдентификаторАктуальногоТарифа();
		КонецЕсли;
		
	Исключение
		// Никакой обработки не требуется.
		// Попадание в исключение означает, что такого модуля БП3 в данном потребителе не существует.
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТарифа(РезультатВыбораТарифа, ВходящийКонтекст) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбораТарифа) Тогда
		Тариф = РезультатВыбораТарифа;
		КоманднаяПанельМастерДалее(Неопределено);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПроверитьДляОрганизацииТребуетсяУчетнаяЗапись(МастерДалее) Экспорт
	Если НЕ ЗначениеЗаполнено(КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Организация)) Тогда
		
		ГруппаДанныхДляЗаявления(МастерДалее);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("МастерДалее", МастерДалее);
		 
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПроСуществованиеУчетнойЗаписиЗавершение", 
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ТекстВопроса = "Для организации " +""""+ Организация +""""+ " уже существуют учетные записи документооборота.
			|
			|Продолжить заполнение заявления на создание новой учетной записи?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПроСуществованиеУчетнойЗаписиЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		МастерДалее = ДополнительныеПараметры.МастерДалее;
		ГруппаДанныхДляЗаявления(МастерДалее);
		
	Иначе
		
		Изменение = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
		
		ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
		ДополнительныеПараметры.Вставить("Организация", 	Организация);
		ДополнительныеПараметры.Вставить("ВидЗаявления", 	Изменение);
		
		ПрограммноеЗакрытие = Истина;
		
		// Закрываем первичное заявление и открываем вторичное в процедуре 
		// ОткрытьФормуЗаявления_Завершение
		Закрыть(ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиРежимаОграниченнойФункциональности()

	ЭтоРежимОграниченнойФункциональности = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭтоРежимОграниченнойФункциональности();
	ЭтоРежимБесплатнойНулевойОтчетности  = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭтоРежимБесплатнойНулевойОтчетности();
	
	Элементы.Документы.Видимость = ЭтоРежимОграниченнойФункциональности;
	Элементы.ГруппаСканКопияЗаявления.Видимость = ЭтоРежимОграниченнойФункциональности;
	Элементы.ОткрытьПодсказкуПоАвтоматическомeРегистрационномуНомеру.Видимость = Ложь;

	НачатьОпределениеКодаАбонента();
	
	// Установим оформление по умолчанию для ссылок выбора скан-копий документов
	Для Каждого ВидДокумента Из ВидыДокументов() Цикл
		Элементы["Ссылка" + ВидДокумента.Ключ].ЦветТекста = КрасныйЦветНезаполненнойСсылки();
		ЭтаФорма["Ссылка" + ВидДокумента.Ключ] = ПредставлениеФайловПоУмолчанию();
	КонецЦикла;
	
	Если ЭтоРежимБесплатнойНулевойОтчетности Тогда
		
		СсылкаПерейдитеНаПлатныйТариф = ЭлектронныйДокументооборотСКонтролирующимиОрганами.СсылкаПерейдитеНаПлатныйТариф();
		
	КонецЕсли;
	
	УстановитьОформлениеТарифов();
	
КонецПроцедуры

&НаКлиенте
Функция КодРегионаПоЮрАдресу()

	Возврат РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдрЮр).Регион; 

КонецФункции

&НаСервере
Функция СформироватьЗаявлениеПФР()

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	ТабДокумент = Новый ТабличныйДокумент;
	Бланк = КонтекстЭДОСервер.ПолучитьМакетОбработки("ЗаявлениеНаПодключениеКПФР");
	
	// Шапка.
	Шапка = Бланк.ПолучитьОбласть("Шапка");
	Шапка.Параметры["ДатаНачала"] = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
	ТабДокумент.Вывести(Шапка);
	
	// Сведения по организации.
	Если ЭтоЮридическоеЛицо Тогда
		
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ЮрЛицо");
		ОбластьОрганизации.Параметры["ПолноеНаименование"] = ПолноеНаименование;
		ОбластьОрганизации.Параметры["КПП"] = КПП;
		
		ОбластьОрганизации.Параметры["ЮрАдрес"] 	= АдресЮридический;
		ОбластьОрганизации.Параметры["ФактАдрес"] 	= АдресФактический;
		
	Иначе
		
		// Вывод пустой области
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ЮрЛицо");
		ТабДокумент.Вывести(ОбластьОрганизации);
		
		// Вывод заполненной области
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ФизЛицо");
		ОбластьОрганизации.Параметры["ФИО"] = ВладелецЭЦПФамилия + " " + ВладелецЭЦПИмя + " " + ВладелецЭЦПОтчество;
		
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
			
			ОбластьОрганизации.Параметры["Серия"] = ВладелецЭЦПСерияДокумента;
			ОбластьОрганизации.Параметры["НомерПаспорта"] = ВладелецЭЦПНомерДокумента;
			
			Выдан = НСтр("ru = '%1, код подразделения %2, выдан %3'");
			Выдан = СтрШаблон(Выдан,
				ВладелецЭЦПКемВыданДокумент,
				ВладелецЭЦПКодПодразделения,
				Формат(ВладелецЭЦПДатаВыдачиДокумента, "ДФ=dd.MM.yyyy"));
			
			ОбластьОрганизации.Параметры["Выдан"] = Выдан;
			
		КонецЕсли;
		
		ОбластьОрганизации.Параметры["АдресРегистрации"] 	= АдресЮридический;
		ОбластьОрганизации.Параметры["АдресПроживания"] 	= АдресФактический;
		
	КонецЕсли;
	
	ОбластьОрганизации.Параметры["ИНН"] 			= ИНН;
	ОбластьОрганизации.Параметры["Почта"] 			= ЭлектроннаяПочта;
	ОбластьОрганизации.Параметры["Телефон"] 		= ТелефонОсновной;
	ОбластьОрганизации.Параметры["РегНомерПФР"] 	= РегНомерПФР;
	ОбластьОрганизации.Параметры["КорСчет"] 		= ДанныеОрганизации.БанкСчетКоррСчетБанка;
	ОбластьОрганизации.Параметры["РасчетныйСчет"] 	= ДанныеОрганизации.БанкСчетНомер;
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.БанкСчетБИКБанка) Тогда
		ОбластьОрганизации.Параметры["Банк"] = ДанныеОрганизации.БанкСчетНаимБанка + " БИК " + ДанныеОрганизации.БанкСчетБИКБанка;
	Иначе
		ОбластьОрганизации.Параметры["Банк"] = ДанныеОрганизации.БанкСчетНаимБанка;
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьОрганизации);
	
	Если ЭтоЮридическоеЛицо Тогда
		// Вывод пустой области
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ФизЛицо");
		ТабДокумент.Вывести(ОбластьОрганизации);
	КонецЕсли;
	
	// Сведения о СКЗИ
	СКЗИ = Бланк.ПолучитьОбласть("СКЗИ");
	
	СКЗИ.Параметры["Оператор"] = "ЗАО ""Калуга Астрал""";
	
	Если РежимРаботыСКлючами = 1 Тогда
		// Это ЭП в облаке
		ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление;
	Иначе
		Если ВыборКриптопровайдера = 1 Тогда
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet().Представление;
		Иначе
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление;
		КонецЕсли;
	КонецЕсли;
	СКЗИ.Параметры["СКЗИ"] = ПредставлениеКриптопровайдера;
	
	ТабДокумент.Вывести(СКЗИ);
	
	// Подвал
	Подвал = Бланк.ПолучитьОбласть("Подвал");
	Если ЗначениеЗаполнено(Руководитель) Тогда
		ФИОРуководителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
		ФамилияИнициалыРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОРуководителя);
		Подвал.Параметры["Руководитель"] = ФамилияИнициалыРуководителя;
	КонецЕсли;
	ТабДокумент.Вывести(Подвал);
	
	ТабДокумент.АвтоМасштаб = Истина;
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура ВывестиНадписьПоДокументамДляПодключенияКПФР()
	
	КодРегиона 				 = КодРегионаПоЮрАдресу();
	ПараметрыПодключенияКПФР = ПараметрыПодключенияКПФР(КодРегиона);
	Элементы.ПояснениеПоПодключениюКПФР.Видимость = ПараметрыПодключенияКПФР.ВРегионеЕстьСвойБланк;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыПодключенияКПФР(Знач КодРегиона)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВРегионеЕстьСвойБланк", 	Ложь);
	ДополнительныеПараметры.Вставить("НазваниеРегиона", 		"");
	ДополнительныеПараметры.Вставить("Ссылка", 					"http://www.pfrf.ru/strahovatelyam/for_employers/edo/");
	
	КонтекстЭДОСервер 	= ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетСоглашенийПФР 	= КонтекстЭДОСервер.ПолучитьМакет("СоглашенияПФР");
	
	КолонкаРегионов 		= МакетСоглашенийПФР.Область(2, 1, МакетСоглашенийПФР.ВысотаТаблицы, 1);
	ОбластьСКодомРегиона 	= МакетСоглашенийПФР.НайтиТекст(КодРегиона, ,КолонкаРегионов, ,Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		
		// Название региона
		ДополнительныеПараметры.Вставить(
			"НазваниеРегиона",
			МакетСоглашенийПФР.Область(ОбластьСКодомРегиона.Верх, 2, ОбластьСКодомРегиона.Верх, 2).Текст);
			
		// Ссылка
		Ссылка = МакетСоглашенийПФР.Область(ОбластьСКодомРегиона.Верх, 4, ОбластьСКодомРегиона.Верх, 4).Текст;
		
		Если ЗначениеЗаполнено(СокрЛП(Ссылка)) Тогда
			ДополнительныеПараметры.Вставить("ВРегионеЕстьСвойБланк", 	Истина);
			ДополнительныеПараметры.Вставить("Ссылка", 					Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;

КонецФункции

&НаСервере
Процедура НачатьОпределениеКодаАбонента()

	Если НЕ ЭтоРежимОграниченнойФункциональности Тогда
		Возврат;
	КонецЕсли;
	
	АдресЗаданияПоПолучениюКодаРегистрации = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(АдресЗаданияПоПолучениюКодаРегистрации);
	
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.КодРегистрацииПродуктаВМоделиСервиса", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	СогласиеСЛицензионнымСоглашением 	 	  	= Ложь;
	ПрограммноеЗакрытие 				 	  	= Ложь;
	СохранитьИВыгрузить 				 	  	= 1;
	
	ЗаполнитьДанныеСлужбыПоддержки();
	ИнициализацияЗначений(Организация);
	
	// инициализация, выполняемая в случае, когда реквизиты мастера заполняются на основе уже существующего заявления
	ЗаявлениеСозданоКопированием = ЗначениеЗаполнено(Реквизит);
	Если ЗаявлениеСозданоКопированием Тогда
		ДействияДляСкопированногоЗаявления();
	Иначе
		ДействияДляНовогоПустогоЗаявления();
	КонецЕсли;
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура;
	СтруктураДанныхСпецоператорыСвязи.Вставить("Организация", Организация);
	КонтекстЭДОКлиент.ЗаполнитьДанныеСпецоператораСвязи(СтруктураДанныхСпецоператорыСвязи);

	ЗаполнитьСписокУЦ();
	ОбновитьДанныеСпецОператора();
	
	УправлениеКнопкамиНавигации();
	
	Элементы.ПолучателиФНС.Видимость  	= Ложь;
	Элементы.ГруппаПФР.Видимость 		= Ложь;
	Элементы.ПолучателиФСГС.Видимость 	= Ложь;

	УправлениеФормой(ЭтаФорма);
	
	Если ЭтоРежимОграниченнойФункциональности Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЧтоКодАбонентаПолучен", 1, Ложь);
	КонецЕсли;
	
	ДлительнаяОтправкаКлиент.ЗакрытьФормуОжиданияЗагрузкиМодуля();
	
КонецПроцедуры

#Область ДобавлениеУдалениеРедактированиеКодовОрганов

#Область ДобавлениеИРедактированиеФНС

&НаКлиенте
Процедура РедактироватьВыбранноеНаправлениеФНС()
	
	ТекущаяСтрока = Элементы.ПолучателиФНС.ТекущаяСтрока;
	
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(ПолучателиФНС,ТекущаяСтрока,"редактирования") Тогда

		ОткрытьФормуНаправления("Редактировать", "ПолучателиФНС");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаправления(Действие, ИмяТаблицыФормы)
	
	ДанныеОрганизации.Вставить("ОбъектДополнительныйКодФСС", ДополнительныйКодФСС);
	АдресПолучателей = АдресПолучателей(ИмяТаблицыФормы);
	
	КонтекстЭДОКлиент.ОткрытьФормуНаправления(
		ЭтотОбъект, 
		Действие, 
		ИмяТаблицыФормы, 
		ДанныеОрганизации, 
		Истина,
		АдресПолучателей);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуНаправленияЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент.ОткрытьФормуНаправленияЗавершение(
		ЭтотОбъект, 
		ПолучателиФНС,
		Результат, 
		ВходящийКонтекст);
		
	СкрытьКнопкуУдаленияНаправления(ФНС);
		
КонецПроцедуры

&НаСервере
Функция АдресПолучателей(ИмяТаблицыФормы) Экспорт

	ТаблицаПолучателей = ЭтотОбъект[ИмяТаблицыФормы].Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПолучателей, Новый УникальныйИдентификатор);

КонецФункции

#КонецОбласти

#Область ВосстановлениеФНСиФСГС

&НаКлиенте
Процедура ВосстановитьНаправления(КонтролирующийОрган)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить(
		"КонтролирующийОрган", 
		КонтролирующийОрган);
	 
	ПодтвердитьВосстановлениеНаправления(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьВосстановлениеНаправления(ДополнительныеПараметры)
	
	ОписаниеОповещения 	= Новый ОписаниеОповещения(
		"ВосстановитьНаправленияЗавершение", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ТекстВопроса = НСтр("ru = 'Восстановить значения кодов по умолчанию?'");
	
	ПоказатьВопрос(
		ОписаниеОповещения, 
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет
		,
		,
		КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		КонтролирующийОрган = ДополнительныеПараметры.КонтролирующийОрган;
		
		Если КонтролирующийОрган = ФНС Тогда
		
			ПолучателиФНС.Очистить();
			ВосстановитьНаправленияПоУмолчанию(ФНС);
			
		ИначеЕсли КонтролирующийОрган = ФСГС Тогда
			
			ПолучателиФСГС.Очистить();
			ВосстановитьНаправленияПоУмолчанию(ФСГС);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияПоУмолчаниюФНС(КонтролирующийОрган = Неопределено)
	
	Если КонтролирующийОрган = ФНС ИЛИ КонтролирующийОрган = Неопределено Тогда
		
		ПолучателиФНС.Очистить();
		
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчаниюФНС(
			ПолучателиФНС, 
			ДанныеОрганизации);
			
		СкрытьКнопкуУдаленияНаправления(ФНС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияПоУмолчаниюФСГС(КонтролирующийОрган = Неопределено)
	
	Если КонтролирующийОрган = ФСГС ИЛИ КонтролирующийОрган = Неопределено Тогда
		
		ПолучателиФСГС.Очистить();
		
		КодРегиона = КодРегионаПоЮрАдресу();
		
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчаниюФСГС(
			ПолучателиФСГС, 
			ДанныеОрганизации,
			Спецоператор,
			КодРегиона);
			
		СкрытьКнопкуУдаленияНаправления(ФСГС);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияПоУмолчанию(КонтролирующийОрган = Неопределено)
	
	ВосстановитьНаправленияПоУмолчаниюФНС(КонтролирующийОрган);
	ВосстановитьНаправленияПоУмолчаниюФСГС(КонтролирующийОрган);
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеФСГС

&НаКлиенте
Процедура РедактироватьВыбранноеНаправлениеФСГС()

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.ПолучателиФСГС.ТекущаяСтрока;
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(ПолучателиФСГС, ТекущаяСтрока,"редактирования") Тогда

		ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеКодРосстатаЗавершение", ЭтотОбъект);
	
		КонтекстЭДОКлиент.КодРосстата(
			Элементы.ПолучателиФСГС.ТекущиеДанные.КодПолучателя, 
			Спецоператор, 
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактированиеКодРосстатаЗавершение(ВыбранныйОрганТОГС, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйОрганТОГС <> Неопределено Тогда
		
		НовыеЗначенияПолучателя = Новый Структура("ТипПолучателя, КодПолучателя, КПП");
		НовыеЗначенияПолучателя.Вставить("ТипПолучателя",	ФСГС);
		НовыеЗначенияПолучателя.Вставить("КодПолучателя", 	ВыбранныйОрганТОГС.КодТОГС);
		
		ПредыдущиеЗначенияПолучателя = Новый Структура("ТипПолучателя, КодПолучателя, КПП");
		ПредыдущиеЗначенияПолучателя.Вставить("ТипПолучателя",	ФСГС);
		ПредыдущиеЗначенияПолучателя.Вставить("КодПолучателя", 	Элементы.ПолучателиФСГС.ТекущиеДанные.КодПолучателя);
		
		Если КонтекстЭДОКлиент.НаправлениеУникально(ПолучателиФСГС, "Редактировать", НовыеЗначенияПолучателя, ПредыдущиеЗначенияПолучателя) Тогда
			
			ИдентификаторСтроки 		= Элементы.ПолучателиФСГС.ТекущаяСтрока;
			ТекущаяСтрока 				= ПолучателиФСГС.НайтиПоИдентификатору(ИдентификаторСтроки);
			ТекущаяСтрока.КодПолучателя = ВыбранныйОрганТОГС.КодТОГС;
			
			Элементы.ПолучателиФСГС.Обновить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеФСГС

&НаКлиенте
Процедура ДобавитьНовоеНаправлениеФСГС()

	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеКодРосстатаЗавершение", ЭтотОбъект);
	
	КонтекстЭДОКлиент.КодРосстата(
		Неопределено, 
		Спецоператор, 
		ОписаниеОповещения);

КонецПроцедуры 

&НаКлиенте
Процедура ДобавлениеКодРосстатаЗавершение(ВыбранныйОрганТОГС, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйОрганТОГС <> Неопределено Тогда
		
		НовыеЗначенияПолучателя = Новый Структура("ТипПолучателя, КодПолучателя, КПП");
		НовыеЗначенияПолучателя.Вставить("ТипПолучателя",	ФСГС);
		НовыеЗначенияПолучателя.Вставить("КодПолучателя", 	ВыбранныйОрганТОГС.КодТОГС);
		
		Если КонтекстЭДОКлиент.НаправлениеУникально(ПолучателиФСГС, "Добавить", НовыеЗначенияПолучателя) Тогда
		
			НоваяСтрока = ПолучателиФСГС.Добавить();
			НоваяСтрока.ТипПолучателя = ФСГС;
			НоваяСтрока.КодПолучателя = ВыбранныйОрганТОГС.КодТОГС;
			
			Элементы.ПолучателиФСГС.Обновить();
			СкрытьКнопкуУдаленияНаправления(ФСГС);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеФНСиФСГС

&НаКлиенте
Процедура УдалитьНаправлениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяТаблицыФормы = ДополнительныеПараметры.ИмяТаблицыФормы;
	
	КонтекстЭДОКлиент.УдалитьНаправлениеЗавершение(
		ЭтотОбъект, 
		ЭтотОбъект[ИмяТаблицыФормы],
		РезультатВопроса, 
		ДополнительныеПараметры);
	
КонецПроцедуры
	
#КонецОбласти 

&НаКлиенте
Процедура СкрытьКнопкуУдаленияНаправления(КонтролирующийОрган)
	
	Если КонтролирующийОрган = ФНС Тогда 
		Элементы.УдалитьНаправлениеФНС.Доступность 	= ПолучателиФНС.Количество() <> 0;
	ИначеЕсли КонтролирующийОрган = ФСГС Тогда
		Элементы.УдалитьНаправлениеФСГС.Доступность = ПолучателиФСГС.Количество() <> 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКодаПодразделения(Форма)
	
	ВидимостьКодаПодразделения = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(Форма.ВладелецЭЦПВидДокумента);
	
	Форма.Элементы.ВладелецЭЦПКодПодразделения.Видимость = ВидимостьКодаПодразделения;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура Подключаемый_ПроверитьЧтоКодАбонентаПолучен()

	Если НЕ ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюКодаРегистрации) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЧтоКодАбонентаПолучен");
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюКодаРегистрации);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьЧтоКодАбонентаПолучен");
		НомерОсновнойПоставки1сВМоделиСервиса = Данные.Результат;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьОрганизацию()
	
	// Получаем организацию для случая одной организации в базе 
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	Если ИспользуетсяОднаОрганизация Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
		
	Иначе
		
		// Получаем организацию из параметров
		Организация = Параметры.Организация;
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Реквизит) Тогда 
			Организация = Реквизит.Организация;
		КонецЕсли;
		
		// Получаем организацию из основной организации
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "ДекорацияОтступ9");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтаФорма, "Организация");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдресКонвертацияРезультата(РезультатЗакрытия);
	ОбновитьАдрес(НовыйАдрес, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдрес(НовыйАдрес, Элемент)
	
	СпроситьПроАвтозаполнениеАдреса = Ложь;
	
	Если НовыйАдрес.Модифицированность Тогда
		
		НовыйАдресЗаполнен = ЗначениеЗаполнено(НовыйАдрес.АдресПредставление);
		АдресаРаньшеСовпадали = АдрЮР = АдрФакт;
			
		Если Элемент.Имя = "АдресЮридический" Тогда
			
			АдресИзменился     = АдрЮР <> НовыйАдрес.Адрес;
			ДругойАдресПустой  = НЕ ЗначениеЗаполнено(АдресФактический);
			
			СпроситьПроАвтозаполнениеАдреса = НовыйАдресЗаполнен
				И АдресИзменился И (АдресаРаньшеСовпадали ИЛИ ДругойАдресПустой);
			
			АдрЮР            = НовыйАдрес.Адрес;
			АдресЮридический = НовыйАдрес.АдресПредставление;
		Иначе
			
			АдресИзменился    = АдрФакт <> НовыйАдрес.Адрес;
			ДругойАдресПустой = НЕ ЗначениеЗаполнено(АдресЮридический);
			
			АдрФакт          = НовыйАдрес.Адрес;
			АдресФактический = НовыйАдрес.АдресПредставление;
		КонецЕсли;
		
		СпроситьПроАвтозаполнениеАдреса = НовыйАдресЗаполнен
			И АдресИзменился И (АдресаРаньшеСовпадали ИЛИ ДругойАдресПустой);
		
	КонецЕсли;
	
	КодРегиона 		= КодРегионаПоЮрАдресу();
	КодРегионаФСРАР = КодРегиона;
	
	ВосстановитьНаправленияПоУмолчанию(ФСГС);
	
	Если СпроситьПроАвтозаполнениеАдреса Тогда
		ПредложитьАвтозаполнениеАдреса(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьАвтозаполнениеАдреса(Элемент)
	
	Если Элемент.Имя = "АдресЮридический" Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить фактический адрес по юридическому?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Заполнить юридический адрес по фактическому?'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("РедактируемыйАдрес", Элемент.Имя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбновитьАдресПослеВопросаОКопированииАдреса", 
		ЭтотОбъект, 
		ДополнительныеПараметры); 
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресПослеВопросаОКопированииАдреса(ОтветПользователя, ВходящийКонтекст) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		Если ВходящийКонтекст.РедактируемыйАдрес = "АдресЮридический" Тогда
			ЗаполнитьФактическийАдресПоЮридическому(Неопределено);
		Иначе
			ЗаполнитьЮридическийАдресПоФактическому(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееСтартЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьСледующуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалееМестоХраненияЭлектроннойПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МастерДалее = ДополнительныеПараметры.МастерДалее;
	
	Если РежимРаботыСКлючами = 1 И Не ЗначениеЗаполнено(Спецоператор) Тогда
		Спецоператор = ПредопределенноеЗначение("Перечисление.СпецоператорыСвязи.КалугаАстрал");
		ОбновитьДанныеСпецОператора();
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДанныхДляЗаявления(МастерДалее)
	
	// проверка заполненности сведений о руководителе
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") 
		И НЕ ЗначениеЗаполнено(Руководитель) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните сведения о руководителе'"), ,"ДекорацияРуководитель");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о бухгалтере
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер")
		И НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните сведения о бухгалтере'"), ,"ДекорацияГлБухгалтер");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о сотруднике
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите сотрудника'"), ,"СотрудникВыбор");
		МастерДалее = Ложь;
	КонецЕсли;	
	
	// проверка сочетания выбранных контролирующих органов
	Если НЕ (СдаватьВФНС ИЛИ СдаватьВПФР ИЛИ СдаватьВФСС ИЛИ СдаватьВРосстат ИЛИ ПодатьЗаявкуНаСертификатДляФСРАР ИЛИ ПодатьЗаявкуНаПодключениеРПН ИЛИ ПодатьЗаявкуНаПодключениеФТС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите хотя бы один контролирующий орган, в который будет сдаваться отчетность'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	ИначеЕсли НЕ СдаватьВФНС И НЕ СдаватьВПФР Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Среди контролирующих органов, в которые будет сдаваться отчетность, должены быть ФНС или ПФР'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка мобильного телефона
	Если ПолучатьСМС Тогда
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
		Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните мобильный телефон'"), ,"ТелефонМобильный");
			МастерДалее = Ложь;
		ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Мобильный телефон должен иметь формат 
			|+7 XXX XXX-XX-XX'"), ,"ТелефонМобильный");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МастерДалее Тогда
		
		ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
		УстановитьВидимостьКодовКонтролирующихОрганов();
		
		ОбновитьЭлементыСтраницыОтчетностьВФСРАР();
		ИзменитьОформлениеРеквизитовОрганизации();
		Элементы.НадписьОГРН.Заголовок = ?(ЭтоЮридическоеЛицо,"ОГРН:","ОГРНИП:");
		
		Если НЕ ДанныеВладельцаЭЦПЗаполненыКопированием Тогда
			ЗаполнитьДанныеСотрудника();
		КонецЕсли;
		
		ИзменитьОформлениеРеквизитовВладельцаЭЦП();
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросРегионЗаявкиРосалькогольрегулированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
		
		ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(КодРегионаФСРАР);
		
		СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
		Если ИнформацияОРегионе <> Неопределено Тогда
			СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, КодРегионаФСРАР);
		КонецЕсли;
		
		Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект);
			
			ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, 
				|содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете.
				| 
				|Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") 
				|в текущей версии не поддерживается. Продолжить?";
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Иначе
			ПоказатьСледующуюСтраницу();
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросФСРАРСдачаВручнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОРегионеФСРАРНаСервере(Знач КодРегиона)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ИнформацияОРегионеФСРАР(КодРегиона);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокУЦ()
	
	Спецоператоры = КонтекстЭДОКлиент.ПолучитьСпецоператорыСвязи(
		СтруктураДанныхСпецоператорыСвязи.СпецоператорыСвязи,
		СтруктураДанныхСпецоператорыСвязи.Макет);
	
	Элементы.Спецоператор.СписокВыбора.ЗагрузитьЗначения(Спецоператоры);
		
	Если Элементы.Спецоператор.СписокВыбора.Количество() = 1 Тогда
		
		Спецоператор = Элементы.Спецоператор.СписокВыбора.Получить(0).Значение;
		ОбновитьДанныеСпецОператора();
		Элементы.СпецОператор.ТолькоПросмотр = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СпецОператор) И НЕ СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи = Неопределено Тогда
		
		СпецОператор = СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи;
		ОбновитьДанныеСпецОператора();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКопирования()
	
	Спецоператор = Реквизит.СпецоператорСвязи;
	СпецоператорСвязи = Спецоператор;
	
	Если Реквизит.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.VipNet Тогда
		ВыборКриптопровайдера = 1;
	Иначе
		ВыборКриптопровайдера = 2;
	КонецЕсли;
	
	Организация										= Реквизит.Организация;
	КраткоеНаименование								= Реквизит.КраткоеНаименование;
	ПолноеНаименование								= Реквизит.ПолноеНаименование;
	ИНН												= Реквизит.ИНН;
	КПП												= Реквизит.КПП;
	РегНомерПФР										= Реквизит.РегНомерПФР;
	РегНомерФСС										= Реквизит.РегНомерФСС;
	ПризнакОбособленногоПодразделения				= Реквизит.ПризнакОбособленногоПодразделения;
	АдрЮР											= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Реквизит.АдресЮридический);
	АдрФакт											= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(Реквизит.АдресФактический);
	АдресЮридический								= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Реквизит.АдресЮридический, Истина);
	АдресФактический								= РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Реквизит.АдресФактический, Истина);
	Элементы.АдресФактический.КнопкаВыбора			= Истина;
	Элементы.АдресЮридический.КнопкаВыбора			= Истина;
	ТелефонОсновной									= Реквизит.ТелефонОсновной;
	ТелефонДополнительный							= Реквизит.ТелефонДополнительный;
	ТелефонМобильный								= Реквизит.ТелефонМобильный;
	ЭлектроннаяПочта								= Реквизит.ЭлектроннаяПочта;
	ЭтоЮридическоеЛицо								= Реквизит.ТипОрганизации;
	ВладелецЭЦП										= Реквизит.ВладелецЭЦП;
	ВладелецЭЦПФамилия								= Реквизит.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя									= Реквизит.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество								= Реквизит.ВладелецЭЦПОтчество;
	ВладелецЭЦПДолжность							= Реквизит.ВладелецЭЦПДолжность;
	ВладелецЭЦППодразделение						= Реквизит.ВладелецЭЦППодразделение;
	ВладелецЭЦПВидДокумента							= Реквизит.ВладелецЭЦПВидДокумента;
	ВладелецЭЦПСерияДокумента						= Реквизит.ВладелецЭЦПСерияДокумента;
	ВладелецЭЦПНомерДокумента						= Реквизит.ВладелецЭЦПНомерДокумента;
	ВладелецЭЦПДатаВыдачиДокумента					= Реквизит.ВладелецЭЦПДатаВыдачиДокумента;
	ВладелецЭЦПКемВыданДокумент						= Реквизит.ВладелецЭЦПКемВыданДокумент;
	ВладелецЭЦПДатаРождения							= Реквизит.ВладелецЭЦПДатаРождения;
	ВладелецЭЦПМестоРождения						= Реквизит.ВладелецЭЦПМестоРождения;
	ВладелецЭЦПКодПодразделения						= Реквизит.ВладелецЭЦПКодПодразделения;
	ВладелецЭЦППол									= Реквизит.ВладелецЭЦППол;
	ВладелецЭЦПГражданство							= Реквизит.ВладелецЭЦПГражданство;
	ДополнительныйКодФСС							= Реквизит.ДополнительныйКодФСС;
	НомерОсновнойПоставки1с							= Реквизит.НомерОсновнойПоставки1с;
	ПодатьЗаявкуНаСертификатДляФСРАР				= Реквизит.ПодатьЗаявкуНаСертификатДляФСРАР;
	ПодатьЗаявкуНаПодключениеРПН					= Реквизит.ПодатьЗаявкуНаПодключениеРПН;
	ПодатьЗаявкуНаПодключениеФТС					= Реквизит.ПодатьЗаявкуНаПодключениеФТС;
	КодРегионаФСРАР									= Реквизит.КодРегионаФСРАР;
	ВладелецЭЦПСНИЛС								= Реквизит.ВладелецЭЦПСНИЛС;
	ОГРН											= Реквизит.ОГРН;
	РежимРаботыСКлючами                             = ?(Реквизит.ЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	
	ПолучателиФНС.Очистить();
	Для Каждого СтрокаНаправления из Реквизит.Получатели цикл 
		
		Если СтрокаНаправления.ТипПолучателя = ФНС Тогда
			СдаватьВФНС = Истина;
			
			НоваяСтрокаНаправления = ПолучателиФНС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			НоваяСтрокаНаправления.КПП				= СтрокаНаправления.КПП;
			
		ИначеЕсли СтрокаНаправления.ТипПолучателя	=  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			СдаватьВПФР = Истина;
			КодПФР = СтрокаНаправления.КодПолучателя;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			СдаватьВФСС = Истина;	
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ФСГС Тогда	
			СдаватьВРосстат = Истина;
			
			НоваяСтрокаНаправления = ПолучателиФСГС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			
		КонецЕсли;
	КонецЦикла;
	
	ВладелецЭЦПТип = Реквизит.ВладелецЭЦПТип;
	
	//подключение ЭДО
	ПодключитьЭДО 			= Реквизит.ПодключитьЭДО;
	ОператорЭДО 			= Реквизит.ОператорЭДО;
	КодНалоговогоОрганаЭДО 	= Реквизит.КодНалоговогоОрганаЭДО;
	
	//заполнение дополнительных реквизитов формы, которых нет в документе
	СогласиеСЛицензионнымСоглашением = Истина;
	
	Если НЕ ПустаяСтрока(ТелефонМобильный) Тогда
		ПолучатьСМС = Истина;
	КонецЕсли;
	
	ВидыДокументовИПредставления = Новый Соответствие;
	Для Каждого ВидДокумента Из ВидыДокументов() Цикл
		ВидыДокументовИПредставления.Вставить(ВидДокумента.Значение, ВидДокумента.Ключ);
	КонецЦикла;
	
	ФайлыПоДокументам = Новый Соответствие;
	Для Каждого ЭлектронныйДокумент Из Реквизит.ЭлектронныеДокументы Цикл
		Если ВидыДокументовИПредставления.Получить(ЭлектронныйДокумент.Документ) <> Неопределено Тогда
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлектронныйДокумент.Файл, УникальныйИдентификатор, Истина);
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Размер", ДанныеФайла.Размер);
			ОписаниеФайла.Вставить("Адрес", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ОписаниеФайла.Вставить("ИсходноеИмя", ДанныеФайла.ИмяФайла);
			ОписаниеФайла.Вставить("Документ", ЭлектронныйДокумент.Документ);
			ФайлыДокументов.Добавить(ОписаниеФайла);
			Если ФайлыПоДокументам.Получить(ЭлектронныйДокумент.Документ) = Неопределено Тогда
				ФайлыПоДокументам.Вставить(ЭлектронныйДокумент.Документ, Новый Массив);
			КонецЕсли;
			ФайлыПоДокументам[ЭлектронныйДокумент.Документ].Добавить(ОписаниеФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ФайлыДокумента Из ФайлыПоДокументам Цикл
		ИзменитьПредставлениеСсылокДляДобавленияФайлов(
			ЭтаФорма, ФайлыДокумента.Значение, ФайлыДокумента.Ключ, "Ссылка" + ВидыДокументовИПредставления[ФайлыДокумента.Ключ]);
	КонецЦикла;
		
	Элементы.ГруппаВладелецЭЦПДолжность.Видимость = ЭтоЮридическоеЛицо;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеров(ВыполняемоеОповещение)
	
	Контекст 	= Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
	Оповещение 	= Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	CryptoProCSPУстановлен	= Ложь;
	ViPNetCSPУстановлен 	= Ложь;
	
	Если Результат.Выполнено Тогда
		ЭтоLinux = ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент();
		ПоддерживаемыеКриптопровайдеры = КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры(, ЭтоLinux);
		ИндексКриптопровайдеров = Неопределено;
		
		Для каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(
				Криптопровайдер.Имя,
				Криптопровайдер.Тип,
				ПоддерживаемыеКриптопровайдеры,
				ИндексКриптопровайдеров);
			Если СвойстваКриптопровайдера <> Неопределено Тогда
				Если СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
					ViPNetCSPУстановлен 	= Истина;
					ВыборКриптопровайдера 	= 1;
				ИначеЕсли СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
					CryptoProCSPУстановлен 	= Истина;
					ВыборКриптопровайдера 	= 2;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если CryptoProCSPУстановлен И ViPNetCSPУстановлен Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленоДваКриптопровайдера;
	ИначеЕсли CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленХотяБыОдинКриптопровайдер;
	ИначеЕсли НЕ CryptoProCSPУстановлен И НЕ ViPNetCSPУстановлен Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаНеУстановленНиОдинКриптопровайдер;
	КонецЕсли;
	
	УстановитьНаименованияКриптопровайдеров();
	
	ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредыдущуюСтраницу()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Если ИндексТекущейСтраницы > 0 Тогда
		
		Индекс = ИндексТекущейСтраницы;
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Индекс);
			Если Страница.Видимость Тогда		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КриптопровайдерВыбранВручную = Ложь;
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеКнопкамиНавигации()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	ВсегоСтраниц 			= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество();
	
	КнопкаДалее	  = Элементы.Далее;
	КнопкаНазад   = Элементы.Назад;
	КнопкаЗакрыть = Элементы.Закрыть;
	
	КнопкаДалее.Видимость 	= Истина;
	КнопкаНазад.Видимость 	= Истина;
	КнопкаЗакрыть.Видимость = Истина;
	
	Если ИндексТекущейСтраницы = 0 Тогда
		
		//Первая закладка
		Если ЭтоРежимБесплатнойНулевойОтчетности И НЕ ЗначениеЗаполнено(Тариф) Тогда
			Элементы.ВыбратьТариф.КнопкаПоУмолчанию = Истина;
			УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Далее  >'"), Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Отмена'"), 	Ложь,	Ложь);
		Иначе
			Элементы.ВыбратьТариф.КнопкаПоУмолчанию = Ложь;
			УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Далее  >'"), Истина,	Истина);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Отмена'"), 	Истина,	Ложь);
		КонецЕсли;
		
	ИначеЕсли ИндексТекущейСтраницы = 2 Тогда
		
		КнопкаНазад.Заголовок 	= НСтр("ru = '<  Назад'");
		КнопкаНазад.Видимость 	= Истина;
		
		// Если мы находимся на 2 шаге и ни один криптопровайдер не установлен
		// или установлено сразу два криптопровайдера, то не позволяем перейти на следующий шаг
		Если НЕ УстановленХотяБыОдинCSP(ЭтотОбъект) И МастерОткрытНаШагеУстановкиCSP() ИЛИ УстановленыОбаCSP(ЭтотОбъект) И НЕ КриптопровайдерВыбранВручную Тогда
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаЗакрыть.Заголовок = "Закрыть";
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		Иначе 
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= НСтр("ru = 'Далее  >'");
			КнопкаДалее.Видимость 	= Истина;
			КнопкаДалее.КнопкаПоУмолчанию = Истина;
			КнопкаЗакрыть.Заголовок = НСтр("ru = 'Отмена'");
			
		КонецЕсли;
	
	ИначеЕсли ТекущаяСтраница = Элементы.Подтверждение Тогда
		
		КнопкаНазад.Заголовок = НСтр("ru = '<  Назад'");
		КнопкаНазад.Видимость = Истина;
		
		Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
			КнопкаДалее.Заголовок = НСтр("ru = 'Отправить'");
		Иначе
			КнопкаДалее.Заголовок = НСтр("ru = 'Далее  >'");
		КонецЕсли;
		КнопкаДалее.Видимость = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда
		
		КнопкаНазад.Заголовок = НСтр("ru = '<  Назад'");
		КнопкаНазад.Видимость = Истина;
		
		КнопкаДалее.Заголовок = НСтр("ru = 'Создать ключ электронной подписи'");
		КнопкаДалее.Видимость = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления Тогда	
		
		//последняя закладка
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
			ПрограммноеЗакрытие 	= Истина;
			КнопкаНазад.Видимость 	= Ложь;
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда   	
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= НСтр("ru = 'Отправить заявление еще раз'");
			КнопкаДалее.Видимость 	= Истина;
			КнопкаНазад.Видимость 	= Ложь
		ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 	
			КнопкаДалее.Видимость 	= Ложь;
			КнопкаДалее.Заголовок 	= НСтр("ru = 'Подготовить новое заявление'");
			КнопкаДалее.Видимость 	= Истина;
			КнопкаНазад.Видимость 	= Ложь
		КонецЕсли;
		
	Иначе
		
		//Все остальные закладки
		КнопкаДалее.Видимость 	= Ложь;		
		КнопкаДалее.Заголовок 	= НСтр("ru = 'Далее  >'");
		КнопкаДалее.Видимость 	= Истина;
		
		КнопкаНазад.Заголовок 	= НСтр("ru = '<  Назад'");
		КнопкаНазад.Видимость 	= Истина;		
		КнопкаЗакрыть.Заголовок = НСтр("ru = 'Отмена'");
		
	КонецЕсли;
	
	ЭтотОбъект.Команды.КоманднаяПанельМастерНазад.Подсказка = КнопкаНазад.Заголовок;
	ЭтотОбъект.Команды.КоманднаяПанельМастерДалее.Подсказка = КнопкаДалее.Заголовок;
	ЭтотОбъект.Команды.ЗакрытьМастер.Подсказка 				= КнопкаЗакрыть.Заголовок;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопки(Кнопка, Заголовок, Видимость, КнопкаПоУмолчанию)
	
	 Кнопка.Заголовок 			= Заголовок; 
	 Кнопка.Видимость 			= Видимость;
	 Кнопка.КнопкаПоУмолчанию 	= КнопкаПоУмолчанию;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановленХотяБыОдинCSP(Форма)
	
	Возврат Форма.CryptoProCSPУстановлен ИЛИ Форма.ViPNetCSPУстановлен;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановленыОбаCSP(Форма)
	
	Возврат Форма.CryptoProCSPУстановлен И Форма.ViPNetCSPУстановлен;
	
КонецФункции

&НаСервере
Процедура ПоказатьСледующуюСтраницу()
	
	// Процедура должна выполняться на сервере, 
	// так изменение заголовокм кнопок приводит к серверным вызовам.
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	Пока Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) < Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество() - 1 Цикл
		
		Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) + 1);
		
		Если Страница.Видимость Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
			Прервать;
		Иначе
			ТекущаяСтраница = Страница;
	КонецЕсли;
	
	КонецЦикла;	
	
	УправлениеКнопкамиНавигации();
	ВстатьНаНезаполненноеПоле();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьКонстанты(Криптопровайдер)
	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Установить(Криптопровайдер.Тип);
	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.Установить(Криптопровайдер.Имя);
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокументЗаявление(СохранитьИВыгрузить)
	
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	НовыйДокументЗаявление.УстановитьНовыйНомер();
	НовыйДокументЗаявление.Дата									= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.ТипЗаявления							= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
	НовыйДокументЗаявление.ВладелецЭЦПТип						= ВладелецЭЦПТип;
	НовыйДокументЗаявление.ВладелецЭЦП							= ВладелецЭЦП;
	НовыйДокументЗаявление.ИдентификаторДокументооборота		= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус								= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	НовыйДокументЗаявление.СпецоператорСвязи					= Спецоператор;
	НовыйДокументЗаявление.ТипКриптопровайдера					= ТипКриптопровайдера;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПолноеНаименование					= ПолноеНаименование;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.ДополнительныйКодФСС					= ДополнительныйКодФСС;
	
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса                = РежимРаботыСКлючами = 1;
	НовыйДокументЗаявление.ИдентификаторПроверкиТелефонаДляПаролей         = ПроверкаТелефонДляПаролей.ИдентификаторПроверки;
	НовыйДокументЗаявление.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей = ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки;
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из ПолучателиФНС Цикл
			
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СдаватьВПФР Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВФСС Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВРосстат Тогда
		
		Для Каждого СтрокаНаправлений Из ПолучателиФСГС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС");
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
		КонецЦикла;

	КонецЕсли;
	
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР = ПодатьЗаявкуНаСертификатДляФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 					= КодРегионаФСРАР;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН		= ПодатьЗаявкуНаПодключениеРПН;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС		= ПодатьЗаявкуНаПодключениеФТС;
	Если РежимРаботыСКлючами = 1 Тогда // Облачная ЭП
		НовыйДокументЗаявление.АдресЮридический = АдрЮР;
		НовыйДокументЗаявление.АдресФактический = АдрФакт;
	Иначе
		НовыйДокументЗаявление.АдресЮридический 				= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрЮР);
		НовыйДокументЗаявление.АдресФактический 				= РегламентированнаяОтчетностьВызовСервера.ЗаменитьТекстРегионаНаКодРегиона(АдрФакт);
	КонецЕсли;
	НовыйДокументЗаявление.РегНомерПФР						= ?(СдаватьВПФР, РегНомерПФР, "");;
	НовыйДокументЗаявление.РегНомерФСС						= ?(СдаватьВФСС, РегНомерФСС, "");
	НовыйДокументЗаявление.ТелефонОсновной					= ТелефонОсновной;
	НовыйДокументЗаявление.ТелефонДополнительный			= ТелефонДополнительный;
	НовыйДокументЗаявление.ТелефонМобильный					= ?(ПолучатьСМС, ТелефонМобильный, "");
	НовыйДокументЗаявление.ЭлектроннаяПочта					= ЭлектроннаяПочта;
	НовыйДокументЗаявление.ВладелецЭЦПФамилия				= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя					= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество				= СокрЛП(ВладелецЭЦПОтчество);
	
	Если ЭтоЮридическоеЛицо Тогда
		НовыйДокументЗаявление.ВладелецЭЦПДолжность = ВладелецЭЦПДолжность;
	КонецЕсли;
	
	НовыйДокументЗаявление.ВладелецЭЦППодразделение			= ВладелецЭЦППодразделение;
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента			= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента		= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента		= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента	= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент		= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПДатаРождения			= ВладелецЭЦПДатаРождения;
	НовыйДокументЗаявление.ВладелецЭЦПМестоРождения			= ВладелецЭЦПМестоРождения;
	НовыйДокументЗаявление.ВладелецЭЦПКодПодразделения		= ВладелецЭЦПКодПодразделения;
	НовыйДокументЗаявление.ВладелецЭЦППол					= ВладелецЭЦППол;
	НовыйДокументЗаявление.ВладелецЭЦПГражданство			= ВладелецЭЦПГражданство;
	НовыйДокументЗаявление.Ответственный					= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи		= '00010101';
	НовыйДокументЗаявление.ОГРН								= ОГРН;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС					= ВладелецЭЦПСНИЛС;
	НовыйДокументЗаявление.ТелефонМобильныйДляАвторизации	= ТелефонДляПаролей;
	
	Если ПодключитьЭДО Тогда
		НовыйДокументЗаявление.ПодключитьЭДО 			= Истина;
		НовыйДокументЗаявление.ОператорЭДО 				= ОператорЭДО;
		НовыйДокументЗаявление.КодНалоговогоОрганаЭДО 	= КодНалоговогоОрганаЭДО;
	КонецЕсли; 
	
	Если СохранитьИВыгрузить = 1 или СохранитьИВыгрузить = 2 Тогда
		НовыйДокументЗаявление.Записать();
		
		НовыйДокументЗаявление.ЭлектронныеДокументы.Очистить();
		
		НомераФайлов = Новый Соответствие;
		
		Для Каждого ЭлементСписка Из ФайлыДокументов Цикл
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", НовыйДокументЗаявление.Ссылка);
			
			Файл = Новый Файл(ЭлементСписка.Значение.ИсходноеИмя);
			
			Документ = ЭлементСписка.Значение.Документ;
			ИмяБезРасширения = ИмяПрисоединенногоФайла(Документ, НомераФайлов);
			
			ПараметрыФайла.Вставить("ИмяБезРасширения", 			ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", 			СтрЗаменить(Файл.Расширение, ".", ""));
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	ТекущаяУниверсальнаяДата());
			ПараметрыФайла.Вставить("Автор", 						Пользователи.ТекущийПользователь());
			
			ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ЭлементСписка.Значение.Адрес);
			
			НоваяСтрока = НовыйДокументЗаявление.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.Документ = ЭлементСписка.Значение.Документ;
			НоваяСтрока.Файл = ПрисоединенныйФайл;
			НоваяСтрока.Размер = ЭлементСписка.Значение.Размер;
			
		КонецЦикла;
		Если ЗначениеЗаполнено(НовыйДокументЗаявление.ЭлектронныеДокументы) Тогда
			НовыйДокументЗаявление.Записать();
		КонецЕсли;
	КонецЕсли;	
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяПрисоединенногоФайла(Документ, НомераФайлов)

	Если НомераФайлов.Получить(Документ) = Неопределено Тогда
		НомераФайлов.Вставить(Документ, 1);
	Иначе
		НомераФайлов[Документ] = НомераФайлов[Документ] + 1;
	КонецЕсли;
	
	Если НомераФайлов[Документ] = 1 Тогда
		ИмяФайла = Документ;
	Иначе
		ИмяФайла = СтрШаблон("%1 - %2", Документ, Формат(НомераФайлов[Документ], "ЧВН=; ЧГ="));
	КонецЕсли;
	
	Возврат ИмяФайла;

КонецФункции 

&НаКлиенте
Процедура ОбработатьИзменениеОрганизации(ДанныеОрганизацииИОтветственныхЛиц = Неопределено,ПрограммноеЗаполнение = Истина)
	
	ИнициализацияЗначений(Организация);
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	ОчиститьДанныеСотрудника(НЕ ПрограммноеЗаполнение);
	
	ПолучателиФНС.Очистить();
	ОчиститьРеквизитыФормы();
	ОчиститьДанныеСотрудникаСервер();
	
	Если ЗначениеЗаполнено(Организация) Тогда
				
		СтруктураРеквизитов = Новый Структура();
		СтруктураРеквизитов.Вставить("Организация", Организация);
		СтруктураРеквизитов.Вставить("ПриОткрытии",	НЕ ДанныеОрганизацииИОтветственныхЛиц = Неопределено);
		Если ДанныеОрганизацииИОтветственныхЛиц <> Неопределено Тогда
			СтруктураРеквизитов.Вставить("АдресЮридический",);
			СтруктураРеквизитов.Вставить("АдресФактический",);
		КонецЕсли;
		
		КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
		ДанныеОрганизацииИОтветственныхЛиц 	= КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
		ДанныеОрганизации 	= ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
		
		ЗаполнитьДанныеПоОрганизации(ДанныеОрганизацииИОтветственныхЛиц);
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	ВключитьВсеНаправленияСдачиОтчетности();
	
	ИзменитьОформлениеРеквизитовОрганизации();
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДобавитьОрганизациюВЗаголовок(
		ЭтотОбъект.Заголовок, 
		ИспользуетсяОднаОрганизация, 
		КраткоеНаименование,
		// Разный заголовок!
		НСтр("ru = 'Подключение к 1С-Отчетности'"));

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудника(Очистить = Ложь)
	
	Если ЗначениеЗаполнено(Реквизит) И НЕ Очистить Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецЭЦППодразделение       = "";
	ВладелецЭЦПДолжность           = "";
	ВладелецЭЦПФамилия             = "";
	ВладелецЭЦПИмя                 = "";
	ВладелецЭЦПОтчество            = "";
	ВладелецЭЦПСНИЛС               = "";
	ВладелецЭЦПВидДокумента        = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	ВладелецЭЦПСерияДокумента      = "";
	ВладелецЭЦПНомерДокумента      = "";
	ВладелецЭЦПДатаВыдачиДокумента = "";
	ВладелецЭЦПКемВыданДокумент    = "";
	ВладелецЭЦПДатаРождения        = Неопределено;
	ВладелецЭЦПМестоРождения       = Неопределено;
	ВладелецЭЦПКодПодразделения    = Неопределено;
	ВладелецЭЦППол                 = Неопределено;
	ВладелецЭЦПГражданство         = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда
		СотрудникВыбор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудникаСервер()
	ГлБухгалтер  = Неопределено; 	
	Руководитель = Неопределено; 
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьДанныеСотрудника()
	
	ВидСотрудникаНеВыбран 		= ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка");
	ДругойСотрудникНеЗаполнен 	= ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И НЕ ЗначениеЗаполнено(СотрудникВыбор);
	ОрганизацияНеВыбрана 		= НЕ ЗначениеЗаполнено(Организация);
	
	Если ВидСотрудникаНеВыбран 
		ИЛИ ДругойСотрудникНеЗаполнен
		ИЛИ ОрганизацияНеВыбрана Тогда
		Возврат;
	КонецЕсли;
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		ВладелецЭЦП = Руководитель;
	КонецЕсли;	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		ВладелецЭЦП = ГлБухгалтер;
	КонецЕсли;
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И ЗначениеЗаполнено(СотрудникВыбор)  Тогда
		ВладелецЭЦП = СотрудникВыбор;
	КонецЕсли;

	// Обновляем данные о сотрудниках
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("ПриОткрытии",	Ложь);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Если ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации = ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	КонецЕсли;	

	ТипЗаполнения = КонтекстЭДОКлиент.ПолучитьТипИсполнителя(ВладелецЭЦПТип);
	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип,
		ДанныеОрганизации,
		ВладелецЭЦП);
		
	ВладелецЭЦПИмя                 = ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия             = ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество            = ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПВидДокумента        = ПолучитьВидДокументаПоНаименованию(Строка(ДанныеСотрудника.ВидДокумента));
	ВладелецЭЦПСерияДокумента      = ДанныеСотрудника.Серия;
	ВладелецЭЦПНомерДокумента      = ДанныеСотрудника.Номер;
	ВладелецЭЦПДатаВыдачиДокумента = ДанныеСотрудника.ДатаВыдачи;
	ВладелецЭЦПКемВыданДокумент    = ДанныеСотрудника.КемВыдан;
	ВладелецЭЦПДолжность           = ДанныеСотрудника.Должность;
	ВладелецЭЦПСНИЛС			   = ДанныеСотрудника.СНИЛС;
	ВладелецЭЦПДатаРождения        = ДанныеСотрудника.ДатаРождения;
	ВладелецЭЦПМестоРождения       = ДанныеСотрудника.МестоРождения;
	ВладелецЭЦПКодПодразделения    = ДанныеСотрудника.КодПодразделения;
	ВладелецЭЦППол                 = ДанныеСотрудника.Пол;
	ВладелецЭЦПГражданство         = ДанныеСотрудника.Гражданство;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеОрганизацииИОтветственныхЛиц)

	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	// Определяем руководителя и гл бухгалтера
	ОпределитьОтветственныеЛицаОрганизации();
	
	ЭтоЮридическоеЛицо		 = ДанныеОрганизации.ТипОрганизации;
	ПолноеНаименование		 = ДанныеОрганизации.НаимЮЛПол;
	КраткоеНаименование		 = ДанныеОрганизации.КраткоеНаименование;
	ИНН						 = ДанныеОрганизации.ИННЮЛ;
	КПП						 = ДанныеОрганизации.КППЮЛ;
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	РегНомерФСС				 = ДанныеОрганизации.РегистрационныйНомерФСС;
	ТелефонОсновной			 = ДанныеОрганизации.ТелОрганизации;
	ТелефонДополнительный	 = ДанныеОрганизации.ТелРук;
	АдрЮР					 = ДанныеОрганизацииИОтветственныхЛиц.АдресЮридический;
	АдрФакт				 	 = ДанныеОрганизацииИОтветственныхЛиц.АдресФактический;
	АдресЮридический		 = ДанныеОрганизацииИОтветственныхЛиц.ЮрАдрес;
	АдресФактический		 = ДанныеОрганизацииИОтветственныхЛиц.ФактАдрес;
	
	Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
		Если РазделениеВключено Тогда
			НомерОсновнойПоставки1с = НомерОсновнойПоставки1сВМоделиСервиса;
		Иначе
			НомерОсновнойПоставки1с = ДанныеОрганизации.НомерОсновнойПоставки1с;
		КонецЕсли;
	КонецЕсли;
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	Элементы.АдресЮридический.КнопкаВыбора = Истина;
	Элементы.АдресФактический.КнопкаВыбора = Истина;
	
	ЭлектроннаяПочта = ДанныеОрганизации.ЭлектроннаяПочта;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения = ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	Элементы.ВладелецЭЦПДолжность.АвтоОтметкаНезаполненного = ЭтоЮридическоеЛицо;
	Элементы.ГруппаВладелецЭЦПДолжность.Видимость = ЭтоЮридическоеЛицо;
	
	ДополнительныйКодФСС = ДанныеОрганизации.РеквизитДопКодФСС;
	
	КодРегиона 		= КодРегионаПоЮрАдресу();
	КодРегионаФСРАР = КодРегиона;
	
	// Заполняем значения кодов контролирующих органов по умолчанию
	ВосстановитьНаправленияПоУмолчанию();
	КодПФР = КодПФР(ДанныеОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеВладельцаЭЦП()
	
	ЗаполнитьСписокВыбораСотрудника();
	
	ОформитьРуководителя();
	ОформитьБухгалтера();
	ОформитьДругогоСотрудника();
		
КонецПроцедуры

&НаСервере
Процедура ОформитьРуководителя()

	ПоказыватьТриТипаСотрудников = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);
	
	ВыбранДиректор = ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.Руководитель;
	
	ОформитьЭлементФормы("ДекорацияРуководитель", Руководитель, Истина);
	
	Если ПоказыватьТриТипаСотрудников Тогда
		Элементы.ДекорацияРуководитель.ЦветТекста  = ЦветГиперссылки(ВыбранДиректор, Руководитель);
	Иначе
		
		СерыйЦвет 	= Новый Цвет(192,192,192);
		ЧерныйЦвет 	= Новый Цвет(51,51,51);
		Элементы.ДекорацияРуководитель.ЦветТекста  = ?(ВыбранДиректор, ЧерныйЦвет, СерыйЦвет); 
		
		Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
			Элементы.ДекорацияРуководитель.Заголовок = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияРуководитель.Гиперссылка = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);
	Элементы.ДекорацияРуководитель.Доступность = ВыбранДиректор;

КонецПроцедуры

&НаСервере
Процедура ОформитьБухгалтера()
	
	ПоказыватьТриТипаСотрудников = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);

	Элементы.ДекорацияГлБухгалтер.Видимость = ПоказыватьТриТипаСотрудников;
	
	Если ПоказыватьТриТипаСотрудников Тогда
		
		ОформитьЭлементФормы("ДекорацияГлБухгалтер",  ГлБухгалтер,  Истина);

		ВыбранБухгалтер = ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер;
		
		Элементы.ДекорацияГлБухгалтер.Гиперссылка = Истина;
		Элементы.ДекорацияГлБухгалтер.Доступность = ВыбранБухгалтер;
		Элементы.ДекорацияГлБухгалтер.ЦветТекста  = ЦветГиперссылки(ВыбранБухгалтер, ГлБухгалтер);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОформитьДругогоСотрудника()

	ВыбранИсполнитель = ВладелецЭЦПТип = Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник;
	
	Элементы.СотрудникВыбор.Доступность 				= ВыбранИсполнитель;
	Элементы.СотрудникВыбор.АвтоОтметкаНезаполненного 	= ВыбранИсполнитель;
	Элементы.СотрудникВыбор.ОтметкаНезаполненного 		= НЕ ЗначениеЗаполнено(СотрудникВыбор);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСотрудника()
	
	ПоказыватьТриТипаСотрудников = ЭтоЮридическоеЛицо ИЛИ НЕ ЗначениеЗаполнено(Организация);
	
	СписокВыбора = Элементы.ВладелецЭЦПТип.СписокВыбора;
	СписокВыбора.Очистить();
	
	НаименованиеРуководителя = ?(
		ПоказыватьТриТипаСотрудников, 
		НСтр("ru = 'Руководитель'"), 
		НСтр("ru = 'Предприниматель'"));
	
	СписокВыбора.Добавить(
		Перечисления.ТипыВладельцевЭЦП.Руководитель, 
		НаименованиеРуководителя);
		
	Если ПоказыватьТриТипаСотрудников Тогда
		СписокВыбора.Добавить(
			Перечисления.ТипыВладельцевЭЦП.ГлавныйБухгалтер, 
			НСтр("ru = 'Главный бухгалтер'"));
	КонецЕсли;
		
	СписокВыбора.Добавить(
		Перечисления.ТипыВладельцевЭЦП.ДругойСотрудник, 
		НСтр("ru = 'Другой сотрудник:'"));
	
КонецПроцедуры

&НаСервере
Функция ЦветГиперссылки(ЗначениеВыбрано, Значение)
	
	СинийЦвет 	= Новый Цвет(28,85,174);
	КрасныйЦвет = КрасныйЦветНезаполненнойСсылки();
	СерыйЦвет 	= Новый Цвет(192,192,192);
	ЧерныйЦвет 	= Новый Цвет();
	
	Цвет = ЧерныйЦвет;
	Если ЭтоЮридическоеЛицо Тогда
	 	Цвет = ?(ЗначениеВыбрано,?(не ЗначениеЗаполнено(Значение),КрасныйЦвет,СинийЦвет),СерыйЦвет);
	КонецЕсли;
		
	Возврат Цвет;
	
КонецФункции
 
&НаКлиенте
Процедура ОчиститьРеквизитыФормы() 

	АдресФактический                       = "";
	АдресЮридический                       = "";
	СотрудникВыбор                         = Неопределено;
	ИНН                                    = "";
	КПП                                    = "";
	ОГРН                                   = "";
	КраткоеНаименование                    = "";
	ПолноеНаименование                     = "";
	ТелефонДополнительный                  = "";
	ТелефонОсновной                        = "";
	ЭлектроннаяПочта                       = "";
	РегНомерПФР                            = "";
	РегНомерФСС                            = "";
	ПризнакОбособленногоПодразделения      = Ложь;
	Элементы.АдресЮридический.КнопкаВыбора = Ложь;
	Элементы.АдресФактический.КнопкаВыбора = Ложь;
	СотрудникВыбор                         = "";
	ОчиститьДанныеСотрудника();
	ПолучателиФНС.Очистить();
	ОчиститьДанныеСотрудникаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер()
	
	Закрыть();
	
КонецПроцедуры

// - заполняется текст лицензии 
// - определяется, будет ли сдаваться отчетность в Росалкогольрегулирование 
// и в зависимости от этого настраивается видимость соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДанныеСпецОператора()
	
	ПолеHTMLЛицензии = КонтекстЭДОКлиент.ЗаменитьЭлементыВСоглашении(СтруктураДанныхСпецоператорыСвязи, Спецоператор);
	
	ОбновитьДоступностьПодачиВФСРАР();
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР();	
	
	ОбновитьДоступностьПодачиВРПН();
	
	ОбновитьДоступностьПодачиВФТС();
	
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра 		    = Элементы.ОткрытьСайтУдостоверяющегоЦентра;
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра.Видимость  = ЗначениеЗаполнено(СпецОператор);
	ЭлементСсылкаНаСайтУдостоверяющегоЦентра.Заголовок  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сайт %1'"),Строка(Спецоператор));
	
	ОператорПоддерживаетСМСУведомление 			= (ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ПризнакПоддержкиСМС") = "Истина");
	
	Элементы.ГруппаДанныхПоСМСОповещению.Видимость 	= ОператорПоддерживаетСМСУведомление;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьЭлементыСтраницыОтчетностьВФСРАР()
	
	//Если организация не сдает отчетность в Росалкогольрегулирование, тогда часть элементов делаем невидимыми
	Элементы.КодРегионаФСРАР.Видимость = ПодатьЗаявкуНаСертификатДляФСРАР;
	
	Элементы.КодРегионаФСРАР.ТолькоПросмотр 		   = НЕ ПодатьЗаявкуНаСертификатДляФСРАР;
	Элементы.КодРегионаФСРАР.АвтоВыборНезаполненного   = ПодатьЗаявкуНаСертификатДляФСРАР;
	Элементы.КодРегионаФСРАР.АвтоОтметкаНезаполненного = ПодатьЗаявкуНаСертификатДляФСРАР;
	
КонецПроцедуры

// Определяется, будет ли сдаваться отчетность в Росалкогольрегулирование 
// и в зависимости от этого настраивается доступность соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДоступностьПодачиВФСРАР()
	
	ПризнакПоддержкиФСРАР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ФСРАРПризнак");
	ПризнакПоддержкиФСРАР = (ПризнакПоддержкиФСРАР = Истина ИЛИ ПризнакПоддержкиФСРАР = "Истина");
	
	Если НЕ ПризнакПоддержкиФСРАР Тогда
		ПодатьЗаявкуНаСертификатДляФСРАР = Ложь;
	КонецЕсли;
	Элементы.ПодатьЗаявкуНаСертификатДляФСРАР.ТолькоПросмотр = НЕ ПризнакПоддержкиФСРАР;
	Элементы.ПодатьЗаявкуНаСертификатДляФСРАР.Подсказка = ?(ПризнакПоддержкиФСРАР, НСтр("ru = 'Федеральная служба по регулированию алкогольного рынка'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная служба по регулированию алкогольного рынка (не поддерживается %1)'"), Строка(Спецоператор)));
	
КонецПроцедуры

// Определяется, будет ли сдаваться отчетность в Росприроднадзор 
// и в зависимости от этого настраивается доступность соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДоступностьПодачиВРПН()
	
	ПризнакПоддержкиРПН = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "РПНПризнак");
	ПризнакПоддержкиРПН = (ПризнакПоддержкиРПН = Истина ИЛИ ПризнакПоддержкиРПН = "Истина");
	
	Если НЕ ПризнакПоддержкиРПН Тогда
		ПодатьЗаявкуНаПодключениеРПН = Ложь;
	КонецЕсли;
	Элементы.ПодатьЗаявкуНаПодключениеРПН.ТолькоПросмотр = НЕ ПризнакПоддержкиРПН;
	Элементы.ПодатьЗаявкуНаПодключениеРПН.Подсказка = ?(ПризнакПоддержкиРПН, НСтр("ru = 'Федеральная служба по надзору в сфере природопользования'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная служба по надзору в сфере природопользования (не поддерживается %1)'"), Строка(Спецоператор)));
	
КонецПроцедуры

// Определяется, будет ли сдаваться отчетность в ФТС 
// и в зависимости от этого настраивается доступность соотвествующих элементов
&НаКлиенте
Процедура ОбновитьДоступностьПодачиВФТС()
	
	ПризнакПоддержкиФТС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Спецоператор, "ФТСПризнак");
	ПризнакПоддержкиФТС = (ПризнакПоддержкиФТС = Истина ИЛИ ПризнакПоддержкиФТС = "Истина");
	
	Если НЕ ПризнакПоддержкиФТС Тогда
		ПодатьЗаявкуНаПодключениеФТС = Ложь;
	КонецЕсли;
	Элементы.ПодатьЗаявкуНаПодключениеФТС.ТолькоПросмотр = НЕ ПризнакПоддержкиФТС;
	Элементы.ПодатьЗаявкуНаПодключениеФТС.Подсказка = ?(ПризнакПоддержкиФТС, НСтр("ru = 'Федеральная таможенная служба'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная таможенная служба (не поддерживается %1)'"), Строка(Спецоператор)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеСубъектаРФ(КодРегиона)
	
	Результат = "";
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетКодыРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	НомерКолонкиКодРегиона = МакетКодыРегионов.Область("КодРегиона").Лево;
	НомерКолонкиНаименованиеРегиона = МакетКодыРегионов.Область("НаименованиеРегиона").Лево;
	ОбластьПоискаКодаРегиона = МакетКодыРегионов.Область(1, НомерКолонкиКодРегиона, МакетКодыРегионов.ВысотаТаблицы, НомерКолонкиКодРегиона);
	
	ОбластьСКодомРегиона = МакетКодыРегионов.НайтиТекст(Формат(Число(КодРегиона), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;"), , ОбластьПоискаКодаРегиона, , Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		Результат = МакетКодыРегионов.Область(ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона, ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона).Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораРегионовРФ()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	Для НомСтр = 1 По МакетРегионов.ВысотаТаблицы Цикл
		
		ТекущийКодРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 1, НомСтр, 1).Текст);
		НазваниеРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 2, НомСтр, 2).Текст);
		
		Если ЗначениеЗаполнено(ТекущийКодРегиона) Тогда
			Элементы.КодРегионаФСРАР.СписокВыбора.Добавить(ТекущийКодРегиона, ТекущийКодРегиона + " - " + НазваниеРегиона);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеСлужбыПоддержки()

	// Контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-700-86-68";
	АдресЭлектроннойПочтыСлужбыПоддержки = "1c@astralnalog.ru";

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтКриптоПро()
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.cryptopro.ru/");
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСайтИнфотекс()
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://infotecs.ru/");
КонецПроцедуры 

&НаСервере
Функция МастерОткрытНаШагеУстановкиCSP()
		
	Возврат  (Элементы.ГруппаНеУстановленНиОдинКриптопровайдер = Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница); 	
	
КонецФункции

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключения()
	
	//Если это продолжение подключения, тогда открываем на втором шаге 
	Если ДокументооборотСКОВызовСервера.ПолучитьВыбранныйCSPИзВременныхНастроек() = Организация Тогда
		
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УдалитьВыборCSPИзВременныхНастроек();
		
		РежимРаботыСКлючами = 2;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеЗаполненияСпискаКриптопровайдеров", ЭтотОбъект);
		ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеЗаполненияСпискаКриптопровайдеров(Результат, ДополнительныеПараметры) Экспорт

	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ИспользуемыйКриптопровайдер;
	Если УстановленыОбаCSP(ЭтотОбъект) Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленоДваКриптопровайдера; 	
	ИначеЕсли УстановленХотяБыОдинCSP(ЭтотОбъект) Тогда
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаУстановленХотяБыОдинКриптопровайдер; 	
	Иначе 	
		Элементы.ГруппаУстановленныеCSP.ТекущаяСтраница = Элементы.ГруппаНеУстановленНиОдинКриптопровайдер; 	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияОбновитьДанныеРуководителя()
	
	Результат = Неопределено;
	Если не ЗначениеЗаполнено(Руководитель) Тогда
		 Результат =   ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Руководитель = Результат;
		ЗаполнитьДанныеСотрудника();
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
	КонецЕсли;
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеГлБухгалтера()
	
	Результат = Неопределено;
	Если НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		Результат = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		ГлБухгалтер = Результат;
		ЗаполнитьДанныеСотрудника();
		ОтключитьОбработчикОжидания("ОбновитьДанныеГлБухгалтера");
	КонецЕсли;
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовОрганизации()
	
	ОформитьЭлементФормы("ДекорацияКраткоеНаименование", КраткоеНаименование, 	Истина);
	ОформитьЭлементФормы("ДекорацияПолноеНаименование",  ПолноеНаименование,  	Истина);
	ОформитьЭлементФормы("ДекорацияИНН", 				 ИНН, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияКПП", 				 КПП, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияОГРН", 				 ОГРН, 				 	Истина);
	ОформитьЭлементФормы("ДекорацияРегНомерПФР", 		 РегНомерПФР, 		 	СдаватьВПФР);
	ОформитьЭлементФормы("ДекорацияРегНомерФСС", 		 РегНомерФСС, 		 	СдаватьВФСС);
	
	Если НЕ ЭтоЮридическоеЛицо Тогда 		
		Элементы.ДекорацияКПП.Видимость = Ложь;
		Элементы.НадписьКПП.Видимость 	= Ложь;
		КПП = "";
	КонецЕсли;	
	
	// Доп код ФСС
	Если НЕ (ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо) Тогда
		// Доп код ФСС не виден
		Элементы.ГруппаДополнительныйКодФСС.Видимость 	= Ложь;
		ДополнительныйКодФСС = "";
	Иначе
		// Доп код ФСС виден
		Элементы.ГруппаДополнительныйКодФСС.Видимость 	= Истина;
		
		// Определяем способ отображения доп кода ФСС - гиперссылка или поле
		Если РеквизитыНеХранящиесяВБазе.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда
			Элементы.ГруппаСпособовВводаДополнительногоКодаФСС.ТекущаяСтраница = Элементы.СтраницаДекорацияДополнительныйКодФСС;
			ОформитьЭлементФормы("ДекорацияДополнительныйКодФСС", ДополнительныйКодФСС,	СдаватьВФСС);
		Иначе
			Элементы.ГруппаСпособовВводаДополнительногоКодаФСС.ТекущаяСтраница = Элементы.СтраницаДополнительныйКодФСС;
		КонецЕсли;
	КонецЕсли;
	
	// Сдача в ФСС и ПФР за себя и сотрудников.
	ЭтоИП = НЕ ЭтоЮридическоеЛицо;
	Если ЭтоИП Тогда
		
		ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация);

		Если ИПИспользуетТрудНаемныхРаботников Тогда
			Элементы.НадписьРегистрационныйНомерВФСС.Заголовок = НСтр("ru = 'Рег. номер в ФСС (за сотрудников):'");
			Элементы.НадписьРегистрационныйНомерВПФР.Заголовок = НСтр("ru = 'Рег. номер в ПФР (за сотрудников):'");
		Иначе
			Элементы.НадписьРегистрационныйНомерВФСС.Заголовок = НСтр("ru = 'Рег. номер в ФСС (за себя):'");
			Элементы.НадписьРегистрационныйНомерВПФР.Заголовок = НСтр("ru = 'Рег. номер в ПФР (за себя):'");
		КонецЕсли;
		
	Иначе
		
		Элементы.НадписьРегистрационныйНомерВФСС.Заголовок = НСтр("ru = 'Регистрационный номер в ФСС:'");
		Элементы.НадписьРегистрационныйНомерВПФР.Заголовок = НСтр("ru = 'Регистрационный номер в ПФР:'");
		
	КонецЕсли;
	
	// Видимость элементов в зависимости от подключенных направлений.
	Элементы.НадписьРегистрационныйНомерВФСС.Видимость 	= СдаватьВФСС;
	Элементы.ДекорацияРегНомерФСС.Видимость 			= СдаватьВФСС;
	
	Элементы.НадписьРегистрационныйНомерВПФР.Видимость 	= СдаватьВПФР;
	Элементы.ДекорацияРегНомерПФР.Видимость 			= СдаватьВПФР;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеРеквизитовВладельцаЭЦП()
	
	СНИЛСДоступенДляРедактирования = 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.СНИЛСДоступенДляРедактирования(ВладелецЭЦП);
	ИзменитьОформлениеРеквизитовВладельцаЭЦПСервер();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРеквизитовВладельцаЭЦПСервер()
	
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПФамилия",  ВладелецЭЦПФамилия,  Истина);
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПИмя", 	 ВладелецЭЦПИмя, 	  Истина);
	ОформитьЭлементФормы("ДекорацияВладелецЭЦПОтчество", ВладелецЭЦПОтчество, Ложь);
	
	Если СНИЛСДоступенДляРедактирования Тогда
		Элементы.ГруппаСпособовВводаВладелецЭЦПСНИЛС.ТекущаяСтраница = Элементы.СтраницаДекорацияВладелецЭЦПСНИЛС;
		ОформитьЭлементФормы("ДекорацияВладелецЭЦПСНИЛС", ВладелецЭЦПСНИЛС, Истина);
	Иначе
		Элементы.ГруппаСпособовВводаВладелецЭЦПСНИЛС.ТекущаяСтраница = Элементы.СтраницаВладелецЭЦПСНИЛС;
	КонецЕсли;
	
	УстановитьВидимостьКодаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементФормы(ИмяЭлемента, Знач Значение, ОбязательныйДляЗаполнения)
	
	СинийЦвет 				= Новый Цвет(28,85,174); 
	КрасныйЦвет 			= Новый Цвет(178,34,34);    
	СерыйЦвет 				= Новый Цвет(192,192,192);
	ЦветТекстаФормы			= Новый Цвет(65,48,3);
	
	Элемент 				= Элементы[ИмяЭлемента];
	
	ПроверяемоеЗначение 	= Строка(Значение);
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение,"-","");
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение,",","");
	ПроверяемоеЗначение 	= СтрЗаменить(ПроверяемоеЗначение," ","");
	
	ЗначениеЗаполнено 		= ЗначениеЗаполнено(ПроверяемоеЗначение);	
	Элемент.Гиперссылка 	= не ЗначениеЗаполнено;	
	
	Если ЗначениеЗаполнено тогда 		
		Элемент.ЦветТекста 	= ЦветТекстаФормы;
		Элемент.Заголовок  	= Строка(Значение);
	Иначе	
		Элемент.ЦветТекста 	= ?(ОбязательныйДляЗаполнения,КрасныйЦвет,СинийЦвет);
		Элемент.Заголовок  	= "Заполнить";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизации(ДанныеОрганизацииПредыдущие, ДанныеОрганизацииИОтветственныхЛицПредыдущие)

	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	ЭтоЮридическоеЛицо	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация);
	
	Если ДанныеОрганизацииПредыдущие = Неопределено ИЛИ ДанныеОрганизацииИОтветственныхЛицПредыдущие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ТипОрганизации",
		ЭтоЮридическоеЛицо,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"НаимЮЛПол",
		ПолноеНаименование,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"КраткоеНаименование",
		КраткоеНаименование,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ИННЮЛ",
		ИНН,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	Если ЭтоЮридическоеЛицо Тогда
		ПопытатьсяОбновитьРеквизит(
			ДанныеОрганизацииПредыдущие,
			"КППЮЛ",
			КПП,
			ДанныеОрганизации,
			ДанныеОрганизацииЗаполненыКопированием);
	Иначе
		КПП = "";	
	КонецЕсли;	
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ОГРН",
		ОГРН,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"РегНомПФР",
		РегНомерПФР,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"РегистрационныйНомерФСС",
		РегНомерФСС,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
	
	Если РеквизитыНеХранящиесяВБазе.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда 
		
		ПопытатьсяОбновитьРеквизит(
			ДанныеОрганизацииПредыдущие,
			"РеквизитДопКодФСС",
			ДополнительныйКодФСС,
			ДанныеОрганизации,
			ДанныеОрганизацииЗаполненыКопированием);
		
	КонецЕсли;
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ТелОрганизации",
		ТелефонОсновной,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ТелРук",
		ТелефонДополнительный,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресЮридический",
		АдрЮР,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресФактический",
		АдрФакт,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"ЮрАдрес",
		АдресЮридический,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"ФактАдрес",
		АдресФактический,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ЭлектроннаяПочта",
		ЭлектроннаяПочта,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
	
	Если ДанныеОрганизацииИОтветственныхЛицПредыдущие.Свойство("АдресЮридический")
		И ДанныеОрганизацииИОтветственныхЛиц.Свойство("АдресЮридический") Тогда
		
		КодРегионаФСРАРПредыдущиее 	= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеОрганизацииИОтветственныхЛицПредыдущие.АдресЮридический).Регион;
		КодРегионаФСРАРНовое 		= РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(ДанныеОрганизацииИОтветственныхЛиц.АдресЮридический).Регион;
		
		ПопытатьсяОбновитьРеквизит(
			КодРегионаФСРАРПредыдущиее,
			,
			КодРегионаФСРАР,
			КодРегионаФСРАРНовое,
			ДанныеОрганизацииЗаполненыКопированием);
		
	КонецЕсли;
	
	Если АдресЮридический = ",,,,,,,,," Тогда
		АдресЮридический = "";
	КонецЕсли;
	
	Если АдресФактический = ",,,,,,,,," Тогда
		АдресФактический = "";
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если ДанныеОрганизацииПредыдущие.Свойство("ПризнакОбособленногоПодразделения") Тогда
			
			ПопытатьсяОбновитьРеквизит(
				ДанныеОрганизацииПредыдущие, 
				"ПризнакОбособленногоПодразделения", 	
				ПризнакОбособленногоПодразделения,
				ДанныеОрганизации, 
				ДанныеОрганизацииЗаполненыКопированием);
				
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьОформлениеРеквизитовОрганизации();
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР();
	Элементы.НадписьОГРН.Заголовок = ?(ЭтоЮридическоеЛицо,"ОГРН:","ОГРНИП:");
	
	// Заполняем значения кодов контролирующих органов по умолчанию
	ВосстановитьНаправленияПоУмолчанию();
	
	НовыйКодПФР = КодПФР();
	Если НовыйКодПФР <> КодПФР Тогда
		КодПФР = НовыйКодПФР;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПопытатьсяОбновитьРеквизит(
		СтарыеДанные,
		ИмяРеквизита,
		ТекущееЗначение,
		НовыеДанные,
		ДанныеЗаполненыКопированием = Ложь)
		
	ЗначениеОбновлено = Ложь;
	
	СтароеЗначение = Неопределено;
	НовоеЗначение = Неопределено;
	
	// проверяем старые данные
	Если ТипЗнч(СтарыеДанные) = Тип("Структура") Тогда
		НайденоПолеВСтарыхДанных = СтарыеДанные.Свойство(ИмяРеквизита, СтароеЗначение);
	Иначе
		НайденоПолеВСтарыхДанных = Истина;
		СтароеЗначение = СтарыеДанные;
	КонецЕсли;
	
	// проверяем новые данные
	Если ТипЗнч(НовыеДанные) = Тип("Структура") Тогда
		НайденоПолеВНовыхДанных = НовыеДанные.Свойство(ИмяРеквизита, НовоеЗначение);
	Иначе
		НайденоПолеВНовыхДанных = Истина;
		НовоеЗначение = НовыеДанные;
	КонецЕсли;
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных Тогда
		Если СтароеЗначение <> НовоеЗначение ИЛИ ТекущееЗначение <> НовоеЗначение И ДанныеЗаполненыКопированием Тогда
			ТекущееЗначение = НовоеЗначение;
			ЗначениеОбновлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеОбновлено;

КонецФункции

&НаСервере
Процедура ПопытатьсяОбновитьРеквизитДляВидаДокумента(СтарыеДанные, ИмяРеквизита, ТекущееЗначение, НовыеДанные)
	
	СтароеЗначение = Неопределено;
	НовоеЗначение = Неопределено;
	
	НайденоПолеВСтарыхДанных 	= СтарыеДанные.Свойство(ИмяРеквизита, СтароеЗначение);
	НайденоПолеВНовыхДанных 	= НовыеДанные.Свойство(ИмяРеквизита, НовоеЗначение);
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных Тогда
		НовоеЗначениеВидаДокумента = ПолучитьВидДокументаПоНаименованию(НовоеЗначение);
		Если ПолучитьВидДокументаПоНаименованию(СтароеЗначение) <> НовоеЗначениеВидаДокумента 
			ИЛИ ТекущееЗначение <> НовоеЗначениеВидаДокумента Тогда
			ТекущееЗначение = НовоеЗначениеВидаДокумента;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьВидДокументаПоНаименованию(Знач Наименование)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьВидДокументаПоНаименованию(Наименование);

КонецФункции

&НаКлиенте
Процедура СформироватьТаблицуДляПодтвержденияДанных()

	ТаблицаДанныхЗаявленияНаПодключение.Очистить();
	
	Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		Если РежимРаботыСКлючами = 1 Тогда // В облаке
			ДобавитьВТаблицу("Место хранения ключа электронной подписи"  , "В защищенном хранилище", Ложь);
			ДобавитьВТаблицу("Телефон для получения временных паролей", ТелефонДляПаролей, Ложь);
			Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) Тогда
				ДобавитьВТаблицу("Электронная почта для получения временных паролей", ЭлектроннаяПочтаДляПаролей, Ложь);
			КонецЕсли;
		Иначе
			ДобавитьВТаблицу("Место хранения ключа электронной подписи", "На компьютере", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Криптопровайдер = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(ТипКриптопровайдера);
	
	ДобавитьВТаблицу("Удостоверяющий центр", 			Спецоператор);
	
	Если РежимРаботыСКлючами = 2 Тогда
		ДобавитьВТаблицу("Используемый криптопровайдер", 	Криптопровайдер.Представление);
	КонецЕсли;
	ДобавитьВТаблицу("Регистрационный номер программы",НомерОсновнойПоставки1с);
	
	// Сведения об организации
	ДобавитьВТаблицу("Сведения об организации", , Истина); // заголовок 
	
	ДобавитьВТаблицу("Краткое наименование", 			КраткоеНаименование);
	ДобавитьВТаблицу("Полное наименование", 			ПолноеНаименование);
	ДобавитьВТаблицу("ИНН", 							ИНН);
	ДобавитьВТаблицу("КПП", 							КПП);
	
	Если ЭтоЮридическоеЛицо Тогда
		ДобавитьВТаблицу("ОГРН", 						ОГРН);
	Иначе 
		ДобавитьВТаблицу("ОГРНИП", 					ОГРН);
	КОнецЕсли;		
	
	ДобавитьВТаблицу("Регистрационный номер в ПФР", 	РегНомерПФР);
	ДобавитьВТаблицу("Регистрационный номер в ФСС", 	РегНомерФСС);
	ДобавитьВТаблицу("Организация является обособленным подразделением", 	ПризнакОбособленногоПодразделения);
	ДобавитьВТаблицу("Юридический адрес", 				АдресЮридический);
	ДобавитьВТаблицу("Фактический адрес", 				АдресФактический);
	ДобавитьВТаблицу("Телефон основной", 				ТелефонОсновной);
	ДобавитьВТаблицу("Телефон дополнительный", 		ТелефонДополнительный);
	Если ОператорПоддерживаетСМСУведомление Тогда
		ДобавитьВТаблицу("Телефон мобильный", 		?(ПолучатьСМС, ТелефонМобильный, ""));
	КонецЕсли;
	
	ДобавитьВТаблицу("Электронная почта", 				ЭлектроннаяПочта);
	Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда 
		ДобавитьВТаблицу("Регион", 					КодРегионаФСРАР);
	КонецЕсли;	
	
	// Сведения о сотруднике - владельце электронной подписи
	ДобавитьВТаблицу("Сведения владельце электронной подписи", , Истина); // заголовок
	
	ДобавитьВТаблицу("Фамилия", 		ВладелецЭЦПФамилия);
	ДобавитьВТаблицу("Имя", 			ВладелецЭЦПИмя);
	ДобавитьВТаблицу("Отчество",		ВладелецЭЦПОтчество);
	ДобавитьВТаблицу("СНИЛС",			ВладелецЭЦПСНИЛС);
	ДобавитьВТаблицу("Дата рождения", 	Формат(ВладелецЭЦПДатаРождения, "ДЛФ=D"));
	ДобавитьВТаблицу("Пол", 			ВладелецЭЦППол);
	
	Если ЭтоЮридическоеЛицо Тогда
		ДобавитьВТаблицу("Должность", ВладелецЭЦПДолжность);
	КонецЕсли;
	
	ДобавитьВТаблицу("Подразделение", 	ВладелецЭЦППодразделение);
	ДобавитьВТаблицу("Гражданство", 	ВладелецЭЦПГражданство);	
	ДобавитьВТаблицу("Документ, удостоверяющий личность", ВладелецЭЦПВидДокумента);
	ДобавитьВТаблицу("Серия, номер", 	Строка(ВладелецЭЦПСерияДокумента)+ "," + Строка(ВладелецЭЦПНомерДокумента));
	ДобавитьВТаблицу("Кем выдан", 		ВладелецЭЦПКемВыданДокумент);
	ДобавитьВТаблицу("Дата выдачи", 	Формат(ВладелецЭЦПДатаВыдачиДокумента, "ДЛФ=D"));
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
		ДобавитьВТаблицу("Код подразделения", ВладелецЭЦПКодПодразделения);
	КонецЕсли;
	
	ДобавитьВТаблицу("Место рождения", ВладелецЭЦПМестоРождения);

	// Сведения о контролирующих органах
	ДобавитьВТаблицу("Сведения о контролирующих органах", , Истина);
	
	// Отображение данных для ФНС
	ДобавитьВТаблицу("Отчетность сдается в ФНС", СдаватьВФНС); // заголовок
	Для каждого СтрокаФНС Из ПолучателиФНС Цикл
		Если ЗначениеЗаполнено(Строка(СтрокаФНС.КПП)) Тогда
			ДобавитьВТаблицу("Код ФНС, КПП", Строка(СтрокаФНС.КодПолучателя) + "," + Строка(СтрокаФНС.КПП));
		Иначе
			ДобавитьВТаблицу("Код ФНС", Строка(СтрокаФНС.КодПолучателя));
		КонецЕсли;
	КонецЦикла; 		
	
	// Отображение данных для ПФР
	ДобавитьВТаблицу("Отчетность сдается в ПФР", СдаватьВПФР);
	ОтображаемыйКодПФР = "";
	ОтображаемыйКодПФР = ?(СдаватьВПФР,КодПФР,"");
	ДобавитьВТаблицу("Код ПФР", ОтображаемыйКодПФР);
	
	// Отображение данных для ФСС
	ДобавитьВТаблицу("Отчетность сдается в ФСС", СдаватьВФСС);
	
	Если ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо Тогда
		ОтображаемыйДополнительныйКодФСС = "";
		ОтображаемыйДополнительныйКодФСС = ?(СдаватьВФСС,ДополнительныйКодФСС,"");	
		ДобавитьВТаблицу("Дополнительный код ФСС", ОтображаемыйДополнительныйКодФСС);
	КонецЕсли;
	
	// Отображение данных для Росстат
	ДобавитьВТаблицу("Отчетность сдается в Росстат", СдаватьВРосстат);
	Если СдаватьВРосстат Тогда 
		
		Для каждого СтрокаФСГС Из ПолучателиФСГС Цикл
			ДобавитьВТаблицу("Код Росстата", Строка(СтрокаФСГС.КодПолучателя));
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьВТаблицу("Отчетность сдается в Росалкогольрегулирование", ПодатьЗаявкуНаСертификатДляФСРАР);
	ДобавитьВТаблицу("Отчетность сдается в Росприроднадзор", ПодатьЗаявкуНаПодключениеРПН);
	ДобавитьВТаблицу("Отчетность сдается в ФТС", ПодатьЗаявкуНаПодключениеФТС);
	
	// Отображение данных по подключению ЭДО
	Если ОтображатьПодключениеЭДО Тогда
		ДобавитьВТаблицу("Подключение к сервису 1С-ЭДО", , Истина); // заголовок 
		ДобавитьВТаблицу("Подключиться к сервису", ПодключитьЭДО);
		Если ПодключитьЭДО Тогда
			ДобавитьВТаблицу("Оператор ЭДО", ОператорЭДО);
			ДобавитьВТаблицу("Код ФНС", КодНалоговогоОрганаЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТаблицу(НазваниеРеквизита,  ЗначениеРеквизита = "", ВыделятьЖирным = Ложь )
	
	НоваяСтрока 						= ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	НоваяСтрока.ВыделятьСтрокуЖирным 	= ВыделятьЖирным;
	НоваяСтрока.НазваниеРеквизита 		= НазваниеРеквизита;
	НоваяСтрока.ЗначениеРеквизита		= ЗначениеРеквизита;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление()
	
	Если РежимРаботыСКлючами = 1 И Не ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите и подтвердите телефон для получения временных паролей'"),, "ТелефонДляПаролей");
		УправлениеФормой(ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДлительнаяОтправкаКлиент.ПараметрыДлительнойОтправкиЗаявления();
	ДополнительныеПараметры.Вставить("Организация", 	Организация);
	ДополнительныеПараметры.Вставить("СоздаватьКлюч", 	РежимРаботыСКлючами <> 1);
	
	Если РежимРаботыСКлючами <> 1 Тогда
		// Для ЭП в облаке бублик не выводим.
		Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительнойОтправкиЗаявления(ДополнительныеПараметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СформироватьИОтправитьЗаявление", 0.1, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_СформироватьИОтправитьЗаявление()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьИОтправитьЗаявлениеЗавершение", ЭтотОбъект);
	
	Контекст = КонтекстЭДОКлиент.ПараметрыПроцедурыСформироватьИОтправитьЗаявление();
	Контекст.ДокументЗаявление 						= ДокументЗаявление;
	Контекст.ВызовИзМастераПодключенияК1СОтчетности = Истина;
	Контекст.ВыполняемоеОповещение 					= ОписаниеОповещения;
	
	КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.Прочитать();
	
	ДлительнаяОтправкаКлиент.ЗакрытьФормуДлительнойОтправкиБезДальнейшихДействий();
	
	Если Результат.Свойство("ТекстОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если ТекстОшибокОтправки <> ПолученныйТекстОшибокОтправки Тогда
		ТекстОшибокОтправки = ПолученныйТекстОшибокОтправки;
	КонецЕсли;
	
	УведомитьПартнераОЗаявлении();
		
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	Оповестить("Завершение отправки заявления", Результат, ДокументЗаявление.Ссылка);
	
	ОткрытьФормуНаСтраницеРезультатаОтправки();
	
	ПоказатьСледующуюСтраницу();
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаСтраницеРезультатаОтправки()
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления;
	Если  ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда 
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаНеОтправлено;
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
		
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаОтправленоИПринято;
		ПрограммноеЗакрытие = Истина;
		
		Элементы.РежимОграниченнойФункциональности.Видимость = ЭтоРежимОграниченнойФункциональности;
		Элементы.РежимПолнойФункциональности.Видимость 		 = НЕ ЭтоРежимОграниченнойФункциональности;
		
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаОтправленоИОтклонено;
		ПрограммноеЗакрытие = Истина;
	Иначе 	
		Элементы.ГруппаРезультатовОтправки.ТекущаяСтраница = Элементы.ГруппаНеОтправлено;
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	// Формируем текст заголовока 
	Элементы.ПодсказкаПоРезультатам8.Заголовок = НСтр("ru='Что делать?
			|1. Попробуйте отправить заявление еще раз.
			|2. Проверьте, что отключен контроль учетных записей (UAC) в Windows.'");
	Если ВыборКриптопровайдера = 1 Тогда
		 Элементы.ПодсказкаПоРезультатам8.Заголовок = Элементы.ПодсказкаПоРезультатам8.Заголовок + Символы.ПС + 
		 	НСтр("ru='3. Проверьте, что VipNet зарегистрирован.'");
	КонецЕсли;
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьПартнераОЗаявлении()
	
	ЗаявлениеОтправлено = ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
	Если НЕ ЗаявлениеОтправлено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоРежимОграниченнойФункциональности Тогда
		Возврат;
	КонецЕсли;

	ОтослатьПисьмоПартнеруНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтослатьПисьмоПартнеруНаСервере()
	
	Если НЕ ЭтоРежимОграниченнойФункциональности Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ДокументЗаявление.Ссылка);
	ПараметрыЗадания.Добавить(Тариф);
	
	ФоновыеЗадания.Выполнить(
		"ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтослатьПисьмоПартнеру", 
		ПараметрыЗадания, 
		1);
	
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьВидимостьКодовКонтролирующихОрганов()
	
	Элементы.ПолучателиФНС.Видимость	= СдаватьВФНС;
    Элементы.ГруппаПФР.Видимость		= СдаватьВПФР;
	Элементы.ПолучателиФСГС.Видимость	= СдаватьВРосстат;
	
КонецПроцедуры

&НаКлиенте 
Функция КодПФР(РеквизитыОрганизации = Неопределено)
	
	Если РеквизитыОрганизации = Неопределено Тогда 
		РеквизитыОрганизации = ДанныеОрганизации;
	КонецЕсли;
	
	ПолученыйКодПФР = "";
	
	Если ПустаяСтрока(РеквизитыОрганизации.КодОрганаПФР) ИЛИ СтрДлина(РеквизитыОрганизации.КодОрганаПФР) < 7 Тогда
		ПолученыйКодПФР = Лев(РеквизитыОрганизации.КодОрганаПФР,7); 
	Иначе
		ПолученыйКодПФР = РеквизитыОрганизации.КодОрганаПФР;
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьВыборCSPВоВременныеНастройки(Значение, РегистрационныеДанныеViPNetCSP = Неопределено) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		Значение,,
	);	
	
	Если ЗначениеЗаполнено(РегистрационныеДанныеViPNetCSP) Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"МастерФормированияЗаявкиНаПодключение",
			"РегистрационныеДанныеViPNetCSP",
			РегистрационныеДанныеViPNetCSP,,
			);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ИспользуемыйКриптопровайдер.Видимость = Форма.РежимРаботыСКлючами <> 1;
		
	Элементы.ГруппаПодсказокПоУЦ.Видимость = Форма.РежимРаботыСКлючами <> 1;
	Элементы.ГруппаСсылокУЦ.Видимость = Форма.РежимРаботыСКлючами <> 1;
		
	Элементы.ГруппаПроверкаТелефона.Доступность = Форма.РежимРаботыСКлючами = 1;
	Элементы.ГруппаПроверкаЭлектроннойПочты.Доступность = 
		Форма.РежимРаботыСКлючами = 1 И Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
	
	// Телефон для паролей
	Элементы.КартинкаТелефонПроверен.Видимость = Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
	Элементы.ПроверитьНомер.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка;
	Элементы.ТелефонДляПаролей.ТолькоПросмотр = ЗначениеЗаполнено(Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Элементы.ГруппаКодПодтвержденияТелефон.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
		
	Элементы.ОтправитьКодПовторноТелефон.Видимость = Не Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
	Элементы.НадписьОбратногоОтсчетаТелефон.Видимость = Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
	
	
	// Электронная почта для паролей
	Элементы.КартинкаЭлектроннаяПочтаПроверена.Видимость = Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено;
	Элементы.ПроверитьАдрес.Видимость = 
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка;
	Элементы.ЭлектроннаяПочтаДляПаролей.ТолькоПросмотр = ЗначениеЗаполнено(Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки);
	Элементы.ГруппаКодПодтвержденияЭлектроннаяПочта.Видимость = 
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено;
		
	Элементы.ОтправитьКодПовторноЭлектроннаяПочта.Видимость = Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен;
	Элементы.НадписьОбратногоОтсчетаЭлектроннаяПочта.Видимость = Форма.ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен;
	
	
	//Подключение ЭДО
	Элементы.ПодключениеЭДО.Видимость 	= Форма.ОтображатьПодключениеЭДО;
	
	Если Форма.ОтображатьПодключениеЭДО Тогда
		Элементы.ГруппаПараметрыСервиса.Доступность = Форма.ПодключитьЭДО;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьМобильногоТелефона()
	
	// доступность
	Элементы.ТелефонМобильный.Доступность = ПолучатьСМС;
	// отметка незаполненность
	Элементы.ТелефонМобильный.АвтоОтметкаНезаполненного = ПолучатьСМС;
	
	Если НЕ ПолучатьСМС Тогда
		#Если ВебКлиент Тогда
			ТелефонМобильный = "+7        -  -  ";
		#Иначе
			ТелефонМобильный = "";
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсеНаправленияСдачиОтчетности()
	
	Если НЕ ЗаявлениеСозданоКопированием Тогда
		
		СдаватьВФНС = Истина;
		СдаватьВПФР = Истина;
		СдаватьВФСС = НЕ ЭтоРежимОграниченнойФункциональности ИЛИ ЭтоРежимОграниченнойФункциональности И ЭтоЮридическоеЛицо;
		СдаватьВРосстат = Истина;
		ПодатьЗаявкуНаСертификатДляФСРАР = Истина;
		ПодатьЗаявкуНаПодключениеРПН = Истина;
		ПодатьЗаявкуНаПодключениеФТС = Истина;
		
	КонецЕсли;
	
	Если НЕ ЭтоРежимОграниченнойФункциональности Тогда
		Элементы.СдаватьВФСС.ОтображениеПодсказки = ОтображениеПодсказки.Нет; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьСМСПриИзменении(Элемент)
	УстановитьДоступностьМобильногоТелефона();
КонецПроцедуры

&НаКлиенте
Процедура УказатьКриптопровайдерВручнуюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыборКриптопровайдера = Результат;
	
	Если ЗначениеЗаполнено(ВыборКриптопровайдера) Тогда
		
		УстановитьНаименованияКриптопровайдеров();
		КриптопровайдерВыбранВручную = Истина;
		
	Иначе
		
		ВыборКриптопровайдера = 0;
		КриптопровайдерВыбранВручную = Ложь;
		
	КонецЕсли;
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияЗначений(Организация)
	
	Если Организация <> Неопределено Тогда
		
		Реквизиты = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.РеквизитыНеХранящиесяВБазе(Организация);
		Для каждого РеквизитНеХранящиесяВБазе Из Реквизиты Цикл
			РеквизитыНеХранящиесяВБазе.Добавить(РеквизитНеХранящиесяВБазе);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьОтветственныеЛицаОрганизации()
	
	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименованияКриптопровайдеров()

	Если ВыборКриптопровайдера = 1 ИЛИ ВыборКриптопровайдера = 2 Тогда
		
		Если ВыборКриптопровайдера Тогда
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet().Представление;
		Иначе
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление;
		КонецЕсли;
		
		ПредставлениеВыбранногоКриптопровайдера = ПредставлениеКриптопровайдера;
		
		Элементы.СтраницыРекомендацияПоУдалениюКриптопровайдера.ТекущаяСтраница =
			Элементы["СтраницаРекомендацияПоУдалениюКриптопровайдера" + Строка(ВыборКриптопровайдера)];
			
		Элементы.СтраницыПодсказкаУстановленныйКриптопровайдер.ТекущаяСтраница =
			Элементы["СтраницаПодсказкаУстановленныйКриптопровайдер" + Строка(ВыборКриптопровайдера)];
			
		Элементы.СтраницыКриптопровайдерДляСозданияКлюча.ТекущаяСтраница =
			Элементы["СтраницаКриптопровайдерДляСозданияКлюча" + Строка(ВыборКриптопровайдера)];
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЭДО()
	
	Если ОбщегоНазначения.РазделениеВключено() ИЛИ РежимРаботыСКлючами = 1 Тогда 
		// Облачная ЭП
		ОтображатьПодключениеЭДО 	= Ложь;
		ПодключитьЭДО 				= Ложь;
		ОператорЭДО 				= "";
		КодНалоговогоОрганаЭДО 		= "";
	Иначе
		// Локальная ЭП
		Если ЗначениеЗаполнено(Элементы.ОператорЭДО.СписокВыбора) Тогда
			// на этой странице уже были
			// повторного заполнения параметров не требуется
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("ЕстьПодключениеЭДО, МассивОператоровЭДО, СсылкаОписаниеСервиса");
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗаполнитьПараметрыСервисаЭлектронныхДокументовДляФормыПодключенияК1СООтчетности(Организация, СтруктураПараметров);
		
		//заполнение вспомогательных элементов: списка выбора операторов ЭДО, ссылки на описание сервиса
		Если ЗначениеЗаполнено(СтруктураПараметров.МассивОператоровЭДО) Тогда
			Элементы.ОператорЭДО.СписокВыбора.ЗагрузитьЗначения(СтруктураПараметров.МассивОператоровЭДО);
			Если СтруктураПараметров.МассивОператоровЭДО.Количество() = 1 Тогда
				ОператорЭДО = СтруктураПараметров.МассивОператоровЭДО[0]; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.СсылкаОписаниеСервиса) Тогда
				СсылкаОписаниеСервисаЭДО = СтруктураПараметров.СсылкаОписаниеСервиса;	
			КонецЕсли;
			
			Если СтруктураПараметров.ЕстьПодключениеЭДО = Ложь Тогда
				// Организация не подключена к ЭДО
				ОтображатьПодключениеЭДО 	= Истина;
				ПодключитьЭДО 				= Истина;
				
				Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаЭДО) Тогда
					КодНалоговогоОрганаЭДО = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
				КонецЕсли;
				
			Иначе
				
				ОтображатьПодключениеЭДО 	= Ложь;
				ПодключитьЭДО 				= Ложь;
				ОператорЭДО 				= "";
				КодНалоговогоОрганаЭДО 		= "";
				
			КонецЕсли;
			
		Иначе
			// сервис не работает
			ОтображатьПодключениеЭДО 	= Ложь;
			ПодключитьЭДО 				= Ложь;
			ОператорЭДО 				= "";
			КодНалоговогоОрганаЭДО 		= "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьViPNetПослеУстановки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		СохранитьВыборCSPВоВременныеНастройки(Организация, Результат.РегистрационныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкачатьCryptoProПослеУстановки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		СохранитьВыборCSPВоВременныеНастройки(Организация, Результат.РегистрационныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровЗавершение", ЭтотОбъект, ВходящийКонтекст);
		КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение);
	Иначе
		ЗаполнитьСписокКриптопровайдеровЗавершение(Новый Структура("Выполнено", Ложь), ВходящийКонтекст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключенияПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Не Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыУстановкаViPNetCSPРезультатУстановки", ЭтотОбъект);
		ОткрытьФорму("Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.УстановкаViPNetCSPРезультатУстановки",, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыУстановкаViPNetCSPРезультатУстановки(Результат, ВходящийКонтекст) Экспорт

	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСохраненныеРегистрационныеДанныеViPNetCSP() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"МастерФормированияЗаявкиНаПодключение",
		"РегистрационныеДанныеViPNetCSP",
		,,
		
	);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизацииИСотрудника()
	
	ДанныеОрганизацииПредыдущие = ДанныеОрганизации;
	ДанныеОрганизацииИОтветственныхЛицПредыдущие  = ДанныеОрганизацииИОтветственныхЛиц;
	ДанныеСотрудникаПредыдущие 	= ДанныеСотрудника;

	//получаем новые данные по организации
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	ДополнительныеПараметры.Вставить("ПриОткрытии", Ложь);
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(ДополнительныеПараметры);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(ДополнительныеПараметры);
	
	Если ТипЗнч(ДанныеОрганизацииИОтветственныхЛиц) = Тип("Структура") 
		И ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации 	= ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ОбновитьРеквизитыОрганизации(ДанныеОрганизацииПредыдущие, ДанныеОрганизацииИОтветственныхЛицПредыдущие);
	ОбновитьРеквизитыСотрудника(ДанныеСотрудникаПредыдущие);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыСотрудника(ДанныеСотрудникаПредыдущие)
	
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип, 
		ДанныеОрганизации, 
		ВладелецЭЦП);
	
	// Если документ заполнен копированием, то заполняем структуру ДанныеСотрудникаПредыдущие из скопированных данных
	Если ДанныеСотрудникаПредыдущие = Неопределено И ДанныеВладельцаЭЦПЗаполненыКопированием Тогда
		
		ДанныеСотрудникаПредыдущие = Новый Структура;
		
		// ФИО
		ФИО = Новый Структура;
		ФИО.Вставить("Имя", 		ВладелецЭЦПИмя); 
		ФИО.Вставить("Фамилия", 	ВладелецЭЦПФамилия); 
		ФИО.Вставить("Отчество", 	ВладелецЭЦПОтчество);
		
		ДанныеСотрудникаПредыдущие.Вставить("ФИО", ФИО);
		
		// Паспортные данные
		ДанныеСотрудникаПредыдущие.Вставить("ВидДокумента", 	ВладелецЭЦПВидДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("Серия", 			ВладелецЭЦПСерияДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("Номер", 			ВладелецЭЦПНомерДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("ДатаВыдачи", 		ВладелецЭЦПДатаВыдачиДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("КемВыдан", 		ВладелецЭЦПКемВыданДокумент);
		ДанныеСотрудникаПредыдущие.Вставить("Должность", 		ВладелецЭЦПДолжность);
		ДанныеСотрудникаПредыдущие.Вставить("Подразделение",	ВладелецЭЦППодразделение);
		ДанныеСотрудникаПредыдущие.Вставить("СНИЛС", 			ВладелецЭЦПСНИЛС);
		ДанныеСотрудникаПредыдущие.Вставить("ДатаРождения", 	ВладелецЭЦПДатаРождения);
		ДанныеСотрудникаПредыдущие.Вставить("МестоРождения", 	ВладелецЭЦПМестоРождения);
		ДанныеСотрудникаПредыдущие.Вставить("КодПодразделения", ВладелецЭЦПКодПодразделения);
		ДанныеСотрудникаПредыдущие.Вставить("Пол", 				ВладелецЭЦППол);
		ДанныеСотрудникаПредыдущие.Вставить("Гражданство", 		ВладелецЭЦПГражданство);
		
	КонецЕсли;
	
	Если ДанныеСотрудникаПредыдущие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФИО
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Имя", 		ВладелецЭЦПИмя, 				ДанныеСотрудника.ФИО);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Фамилия", 	ВладелецЭЦПФамилия, 			ДанныеСотрудника.ФИО);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Отчество", 	ВладелецЭЦПОтчество, 			ДанныеСотрудника.ФИО);
	
	// Паспортные данные
	ПопытатьсяОбновитьРеквизитДляВидаДокумента(ДанныеСотрудникаПредыдущие, "ВидДокумента",					ВладелецЭЦПВидДокумента, ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Серия",			ВладелецЭЦПСерияДокумента, 		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Номер", 		ВладелецЭЦПНомерДокумента, 		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "ДатаВыдачи", 	ВладелецЭЦПДатаВыдачиДокумента, ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "КемВыдан", 		ВладелецЭЦПКемВыданДокумент, 	ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Должность", 	ВладелецЭЦПДолжность, 			ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Подразделение", ВладелецЭЦППодразделение,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "СНИЛС", 		ВладелецЭЦПСНИЛС, 				ДанныеСотрудника);
	
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "ДатаРождения", 	   	ВладелецЭЦПДатаРождения,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "МестоРождения",    	ВладелецЭЦПМестоРождения,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "КодПодразделения", 	ВладелецЭЦПКодПодразделения,	ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Пол", 				ВладелецЭЦППол,					ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Гражданство", 		ВладелецЭЦПГражданство,			ДанныеСотрудника);
	
	ИзменитьОформлениеРеквизитовВладельцаЭЦП();
	
КонецПроцедуры

&НаСервере
Процедура ВстатьНаНезаполненноеПоле()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.МестоХраненияЭлектроннойПодписи Тогда
		
		ЭтотОбъект.ТекущийЭлемент = Элементы.РежимРаботыСКлючамиВМоделиСервиса;
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СоглашениеОПрисоединенииКРегламентуУЦ Тогда
		
		Если НЕ ЗначениеЗаполнено(СпецОператор) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СпецОператор;
			Возврат;
		КонецЕсли;
		
		Если НЕ СогласиеСЛицензионнымСоглашением Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СогласиеСЛицензионнымСоглашением;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДанныхДляЗаявления Тогда 
		
		// Регистрационный номер
		Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.НомерОсновнойПоставки1с;
			Возврат;
		КонецЕсли;
		
		// Организация
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.Организация;
			Возврат;
		КонецЕсли;
		
		// Направление сдачи отчетности
		Если НЕ СдаватьВФНС
			И НЕ СдаватьВПФР
			И НЕ СдаватьВФСС
			И НЕ СдаватьВРосстат
			И НЕ ПодатьЗаявкуНаСертификатДляФСРАР
			И НЕ ПодатьЗаявкуНаПодключениеРПН
			И НЕ ПодатьЗаявкуНаПодключениеФТС Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.СдаватьВФНС;
			Возврат;
		КонецЕсли;
		
		Если ПолучатьСМС Тогда
			Если НЕ ЗначениеЗаполнено(ТелефонМобильный) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.ТелефонМобильный;
				Возврат;
			КонецЕсли;
		Иначе
			ЭтотОбъект.ТекущийЭлемент = Элементы.ПолучатьСМС;
			Возврат;
		КонецЕсли;
			
	ИначеЕсли ТекущаяСтраница = Элементы.Реквизиты Тогда 

		Если СдаватьВФСС Тогда
		
			// дополнительный код ФСС
			Если ПризнакОбособленногоПодразделения И ЭтоЮридическоеЛицо И СдаватьВФСС Тогда
				
				Если РеквизитыНеХранящиесяВБазе.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС")) = Неопределено Тогда
					ЭтотОбъект.ТекущийЭлемент = Элементы.ДополнительныйКодФСС;
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// юридический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрЮР,",","")) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.АдресЮридический;
			Возврат;
		КонецЕсли;
		
		// фактический адрес
		Если ПустаяСтрока(СтрЗаменить(АдрФакт,",","")) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.АдресФактический;
			Возврат;
		КонецЕсли;
		
		// телефон организации
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТелефонОсновной;
			Возврат;
		КонецЕсли;
		
		// телефон дополнительный
		Если НЕ ЗначениеЗаполнено(ТелефонДополнительный) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ТелефонДополнительный;
			Возврат;
		КонецЕсли;
		
		// электронная почта (теперь обязательна)
		Если НЕ ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ЭлектроннаяПочта;
			Возврат;
		КонецЕсли;
		
		Если ПодатьЗаявкуНаСертификатДляФСРАР Тогда
			
			Если НЕ ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.КодРегионаФСРАР;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоЮридическоеЛицо И НЕ ПризнакОбособленногоПодразделения Тогда
			
			ЭтотОбъект.ТекущийЭлемент = Элементы.ПризнакОбособленногоПодразделения;
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ВладельцыЭцп Тогда
		
		// Последовательность проверок соответствует последовательности элементов на форме.
		
		// Дата рождения
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаРождения) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПДатаРождения;
			Возврат;
		КонецЕсли;
		
		// Пол
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦППол) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦППол;
			Возврат;
		КонецЕсли;
		
		// должность
		Если ЭтоЮридическоеЛицо И ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПДолжность;
			Возврат;
		КонецЕсли;
		
		// Подразделение
		Если ПустаяСтрока(ВладелецЭЦППодразделение) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦППодразделение;
			Возврат;
		КонецЕсли;
		
		// Гражданство
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПГражданство;
			Возврат;
		КонецЕсли;
		
		// документ, удостоверяющий личность
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПВидДокумента;
			Возврат;
		КонецЕсли;
		
		// серия
		Если ПустаяСтрока(ВладелецЭЦПСерияДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПСерияДокумента;
			Возврат;
		КонецЕсли;
		
		// номер
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПНомерДокумента;
			Возврат;
		КонецЕсли;
		
		// кем выдан
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПКемВыданДокумент;
			Возврат;
		КонецЕсли;
		
		// дата выдачи
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПДатаВыдачиДокумента;
			Возврат;
		КонецЕсли;
		
		// Код подразделения
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПКодПодразделения,"-","")) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПКодПодразделения;
			Возврат;
		КонецЕсли;
		
		// Место рождения
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПМестоРождения) Тогда
			ЭтотОбъект.ТекущийЭлемент = Элементы.ВладелецЭЦПМестоРождения;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Направления Тогда
		
		// Коды ФНС. 
		// Проверки нет, так как таблицу не удается сделать текущим элементов (она не выделяется).
		
		// код отделения ПФР
		Если СдаватьВПФР Тогда
			Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.КодПФР;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Коды Росстата. 
		// Проверки нет, так как таблицу не удается сделать текущим элементов (она не выделяется).
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПодключениеЭДО Тогда 
		
		// подключение ЭДО
		Если ПодключитьЭДО Тогда
			
			// оператор ЭДО
			Если НЕ ЗначениеЗаполнено(ОператорЭДО) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.ОператорЭДО;
				Возврат;
			КонецЕсли;
			
			// код ФНС
			Если ПустаяСтрока(КодНалоговогоОрганаЭДО) Тогда
				ЭтотОбъект.ТекущийЭлемент = Элементы.КодНалоговогоОрганаЭДО;
				Возврат;
			КонецЕсли;
			
		Иначе
			ЭтотОбъект.ТекущийЭлемент = Элементы.ПодключитьЭДО;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияДляСкопированногоЗаявления()
		
	ДанныеОрганизацииЗаполненыКопированием 	= Истина;
	ДанныеВладельцаЭЦПЗаполненыКопированием = Истина;
	
	Организация = КонтекстЭДОКлиент.ПолучитьРеквизит(Реквизит, "Организация");
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация", 	?(ЗначениеЗаполнено(Организация),Организация,Неопределено));
	СтруктураРеквизитов.Вставить("ПриОткрытии",		Истина);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Если ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации = ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	КонецЕсли;
	
	// Заполняем заявление на основе скопированного документа
	ЗаполнитьДанныеКопирования();
	
	УстановитьЗаголовокФормы();
	
	// Заполняем данные организации
	ИзменитьОформлениеРеквизитовОрганизации();
	
	// Определяем руководителя и гл бухгалтера
	ОпределитьОтветственныеЛицаОрганизации();

	Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		
		Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") И Руководитель <> ВладелецЭЦП 
			ИЛИ ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") И ГлБухгалтер <> ВладелецЭЦП Тогда
			
			// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это был Руководитель или ГлБухгалтер, а
			// теперь Руководитель или ГлБухгалтер сменились в организации, то все данные по владельцу ЭЦП 
			// данные заполняются текущими сведениями, а не скопированными
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
		ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
			
			// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это Сотрудник, то все данные по владельцу ЭЦП 
			// данные заполняются скопированными сведениями
			СотрудникВыбор = ВладелецЭЦП;
		КонецЕсли;
	Иначе
		// Если реквизит предыдущего заявления Владелец ЭЦП пустой, то сохраняем только позицию переключателя:
		// руководитель, гл. бухгалтер или сотрудник, все остальные данные заполняются текущими сведениями,
		// а не скопированными
		ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	КонецЕсли;
	
	ИзменитьОформлениеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияДляНовогоПустогоЗаявления()
	
	// переключатель ставим по умолчанию в состоянии Руководитель
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	ДанныеОрганизацииИОтветственныхЛиц = Новый Структура();
	ОбработатьИзменениеОрганизации(ДанныеОрганизацииИОтветственныхЛиц);
	
	// Если на втором шаге пользователем был установлен криптопровайдер и компьютер был перезагружен, то 
	// при повторном открытии базы сразу откроется мастер подключения к 1С-Отчетности на втором шаге.
	ОткрытьМастерНаВторомШагеЕслиЭтоПродолжениеПодключения();

КонецПроцедуры

#Область ПроверкаТелефонаИЭлектроннойПочтыДляПаролей

&НаКлиенте
Процедура ОтправитьКодПодтвержденияТелефонДляПаролей()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ОчиститьСообщения();
	КодПодтверждения = Неопределено;
	
	Результат = ПроверитьНомерНаСервере(ТелефонДляПаролей, ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Если Результат.Выполнено Тогда
		Таймер = Результат.ЗадержкаПередПовторнойОтправкой;
		ПроверкаТелефонДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		ЗапуститьОбратныйОтсчет();
		ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Истина;
		ПроверкаТелефонДляПаролей.КодОтправлен = Истина;
		
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтвержденияТелефон", 0.1, Истина);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "ТелефонДляПаролей");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей");
	ОчиститьСообщения();
	КодПодтверждения = Неопределено;

	Результат = ПроверитьАдресНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки);
	Если Результат.Выполнено Тогда
		Таймер = Результат.ЗадержкаПередПовторнойОтправкой;
		ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		ЗапуститьОбратныйОтсчет();
		ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка = Истина;
		ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен = Истина;
		
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтвержденияЭлектроннаяПочта", 0.1, Истина);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "ЭлектроннаяПочтаДляПаролей");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНомерНаСервере(Телефон, Идентификатор)
	
	Возврат МенеджерСервисаКриптографии.ПолучитьКодПроверкиТелефона(Телефон, Идентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьАдресНаСервере(ЭлектроннаяПочта, Идентификатор)
	
	Возврат МенеджерСервисаКриптографии.ПолучитьКодПроверкиЭлектроннойПочты(ЭлектроннаяПочта, Идентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбратныйОтсчет()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПеременныеДляПроверкиТелефонаИЭлектроннойПочты(Форма)
	
	Форма.ПроверкаТелефонДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), Ложь, Ложь, "", Ложь, Ложь);
	Форма.ПроверкаЭлектроннаяПочтаДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), Ложь, Ложь, "", Ложь, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСвойстваДляПроверок()
	
	Возврат "ЗначениеВведено,ВыполняетсяПроверка,ИдентификаторПроверки,ПодтверждениеВыполнено,КодОтправлен";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьТелефонПоКодуНаСервере(Идентификатор, КодПодтверждения) 
	
	Возврат МенеджерСервисаКриптографии.ПроверитьТелефонПоКоду(Идентификатор, КодПодтверждения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЭлектроннуюПочтуПоКодуНаСервере(Идентификатор, КодПодтверждения) 
	
	Возврат МенеджерСервисаКриптографии.ПроверитьЭлектроннуюПочтуПоКоду(Идентификатор, КодПодтверждения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей()
	
	Элементы.ПроверитьАдрес.Видимость = ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено;
	Если ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено Тогда
		Элементы.ЭлектроннаяПочтаДляПаролей.ОбновитьТекстРедактирования();
		ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьАдрес");
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьАдрес", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОбратногоОтсчета()
	
	Таймер = Таймер - 1;
	Если Таймер >= 0 Тогда
		НадписьОбратногоОтсчета = СтрШаблон(НСтр("ru = 'Запросить код повторно можно будет через %1 сек.'"), Таймер);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);		
	Иначе
		НадписьОбратногоОтсчета = "";
		ПроверкаТелефонДляПаролей.КодОтправлен = Ложь;
		ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен = Ложь;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияТелефон()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияТелефон;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияЭлектроннаяПочта()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияЭлектроннаяПочта;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения()
	
	ОчиститьСообщения();
	
	КодПодтверждения = СокрЛП(КодПодтверждения);
	Если СтрДлина(КодПодтверждения) = 6 Тогда
		Если ПроверкаТелефонДляПаролей.ВыполняетсяПроверка Тогда
			Результат = ПроверитьТелефонПоКодуНаСервере(
				ПроверкаТелефонДляПаролей.ИдентификаторПроверки, КодПодтверждения);
			Если Результат.Выполнено Тогда
				ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Ложь;
				ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено = Истина;				
			КонецЕсли;
		Иначе
			Результат = ПроверитьЭлектроннуюПочтуПоКодуНаСервере(
				ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки, КодПодтверждения);
			Если Результат.Выполнено Тогда
				ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка = Ложь;
				ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено = Истина;				
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Выполнено Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
			УправлениеФормой(ЭтаФорма);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "КодПодтверждения");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТелефонДляПаролей()
	
	Элементы.ПроверитьНомер.Видимость = ПроверкаТелефонДляПаролей.ЗначениеВведено;
	Если ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
		Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
		ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер");
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТекстыПолей()
	
	Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
	Элементы.ЭлектроннаяПочтаДляПаролей.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьКнопкуПроверитьНомер()
	
	ТекущийЭлемент = Элементы.ПроверитьНомер;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьКнопкуПроверитьАдрес()
	
	ТекущийЭлемент = Элементы.ПроверитьАдрес;	
	
КонецПроцедуры


#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеФайловПоУмолчанию()
	
	Возврат НСтр("ru = 'Выберите файл'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КрасныйЦветНезаполненнойСсылки()
	
	Возврат Новый Цвет(178, 34, 34);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФайлыСПредпросмотром(Документ, ИмяРеквизита)

	Файлы = Новый Массив;
	Для Каждого ЭлементСписка Из ФайлыДокументов Цикл
		Если ЭлементСписка.Значение.Документ = Документ Тогда
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Адрес", ЭлементСписка.Значение.Адрес);
			ПараметрыФайла.Вставить("ИсходноеИмя", ЭлементСписка.Значение.ИсходноеИмя);
			Файлы.Добавить(ПараметрыФайла);
		КонецЕсли;
	КонецЦикла;
		
	ДопустимыеТипыФайлов = "jpeg;jpg;png;pdf"; 
	МаксимальныйРазмерФайла = 10 * 1024 * 1024;
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ИмяРеквизита", ИмяРеквизита);
	ПараметрыФункции.Вставить("Документ", Документ);
	ПараметрыФункции.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	ПараметрыФункции.Вставить("ДопустимыеТипыФайлов", ДопустимыеТипыФайлов);
	ПараметрыФункции.Вставить("ВозвращатьРазмер", Истина);
	ПараметрыФункции.Вставить("РежимТолькоПросмотр", Ложь);
	ПараметрыФункции.Вставить("Файлы", Файлы);
	ПараметрыФункции.Вставить("ИспользоватьСтраницы", Ложь);
	
	Требования = Новый Структура;
	Требования.Вставить("Формат", СтрСоединить(СтрРазделить(ВРег(ДопустимыеТипыФайлов), ";"), ", "));
	Требования.Вставить("Разрешение", "150-400 dpi");
	Требования.Вставить("Цветность", "Цветное изображение, глубина цвета 16-24 бит");
	Требования.Вставить("Размер", СтрШаблон("Не более %1", ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(МаксимальныйРазмерФайла)));
	
	ПараметрыФункции.Вставить("Требования", Новый Структура("Требования,КлючТребований", Требования, "Заявление на подключение к 1С-Отчетности"));
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьФайлыСПредпросмотромПослеВыполнения", ЭтотОбъект, ПараметрыФункции);
	
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлыСПредпросмотром(
		Оповещение, 
		УникальныйИдентификатор, 
		СтрШаблон(НСтр("ru = 'Выберите файлы документа <%1> '"), Документ), 
		ПараметрыФункции);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыСПредпросмотромПослеВыполнения(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ЭлементыДляУдаления = Новый Массив;
		Для Каждого ЭлементСписка Из ФайлыДокументов Цикл
			Если ЭлементСписка.Значение.Документ = ВходящийКонтекст.Документ Тогда
				ЭлементыДляУдаления.Добавить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
			ФайлыДокументов.Удалить(ЭлементДляУдаления);
		КонецЦикла;
		
		Для Каждого Файл Из Результат.Файлы Цикл
			ФайлыДокументов.Добавить(Файл);
		КонецЦикла;
		
		ИзменитьПредставлениеСсылокДляДобавленияФайлов(
			ЭтаФорма, Результат.Файлы, ВходящийКонтекст.Документ, ВходящийКонтекст.ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПредставлениеСсылокДляДобавленияФайлов(Форма, Файлы, Документ, ИмяРеквизита)
	
	Элементы = Форма.Элементы;
	Размер = 0;
	Для Каждого Файл Из Файлы Цикл
		Файл.Вставить("Документ", Документ);	
		Размер = Размер + Файл.Размер;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Файлы) Тогда
		Форма[ИмяРеквизита] = 
			СтрШаблон("%1 (%2)", Документ, ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(Размер, 1));
		Элементы[ИмяРеквизита].ЦветТекста = Новый Цвет;
	Иначе                                                     
		Форма[ИмяРеквизита] = ПредставлениеФайловПоУмолчанию();
		Элементы[ИмяРеквизита].ЦветТекста = КрасныйЦветНезаполненнойСсылки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДокументов()
	
	Виды = Новый Структура;
	Виды.Вставить("Паспорт", "Паспорт");
	Виды.Вставить("ПодтверждениеПолномочийВладельцаЭП", "Документ, подтверждающий полномочия владельца ЭП");
	Виды.Вставить("СвидетельствоОПостановкеНаУчет", "Свидетельство о постановке на учет");
	Виды.Вставить("СНИЛС", "СНИЛС");
	Виды.Вставить("Заявление", "Заявление на подключение");

	Возврат Виды;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФайлЗаявленияДобавлен(Форма)
	
	ВидДокумента = ВидыДокументов().Заявление;
	Для Каждого ЭлементСписка Из Форма.ФайлыДокументов Цикл
		Если ЭлементСписка.Значение.Документ = ВидДокумента Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОНеобходимостиИспользоватьКнопки(Элемент)
	
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Старт И ЭтоРежимБесплатнойНулевойОтчетности Тогда
		ТекстСообщения = НСтр("ru = 'Для продолжения подключения выберите тариф по кнопке ""Выбрать тариф""'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Для перехода к другим страницам воспользуйтесь кнопками ""Далее >"" и ""< Назад"" в нижней части Помощника'");
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВсеНаправленияФНС(Организация) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РегистрацияВИФНС.КПП КАК КПП,
	                      |	РегистрацияВИФНС.Код КАК Код
	                      |ИЗ
	                      |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацияВИФНС
	                      |ГДЕ
	                      |	(РегистрацияВИФНС.Владелец = &Организация
	                      |			ИЛИ РегистрацияВИФНС.Владелец = &ГоловнаяОрганизация)
	                      |	И РегистрацияВИФНС.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Организация", 		 Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация));
	
	Регистрации = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Регистрации);
	
КонецФункции

&НаКлиенте
Процедура НовоеНаправление(КодПолучателя, КПП = "")
	
	ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС");
	
	Отбор = Новый Структура();
	Отбор.Вставить("ТипПолучателя", ТипПолучателя);
	Отбор.Вставить("КодПолучателя", КодПолучателя);
	Отбор.Вставить("КПП", 			КПП);
	
	Если ПолучателиФНС.НайтиСтроки(Отбор).Количество() <> 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрокаНаправления = ПолучателиФНС.Добавить();
	НоваяСтрокаНаправления.ТипПолучателя 	= ТипПолучателя;
	НоваяСтрокаНаправления.КодПолучателя 	= КодПолучателя;
	НоваяСтрокаНаправления.КПП 				= КПП;
	
КонецПроцедуры

#КонецОбласти