&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем СсылкаНаДокумент;

&НаКлиенте
Перем МенеджерКриптографии;

&НаКлиенте
Перем СертификатКриптографии;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Из параметров
	ИдентификаторАбонента 			= Параметры.ИдентификаторАбонента;
	НовыйСтатусДокумента  			= Параметры.НовыйСтатусДокумента;
	ОтпечатокСертификатаИзОтвета	= Параметры.ОтпечатокСертификатаИзОтвета;

	НапоминитьПозжеПроЗаявление(ДокументЗаявление);
	
	// Из документа
	ПодключитьЭДО 					= ДокументЗаявление.ПодключитьЭДО;
	Организация 					= ДокументЗаявление.Организация;
	ЭтоЭлектронноеПодписание		= ДокументЗаявление.ПодписатьЭП;
	Статус							= ДокументЗаявление.Статус;
	ПредыдущийСтатус				= ДокументЗаявление;
	СпецоператорСвязи				= ДокументЗаявление.СпецоператорСвязи;
	ИдентификаторДокументооборота	= ДокументЗаявление.ИдентификаторДокументооборота;
	СертификатДляПодписания 		= ДокументЗаявление.Ссылка.РеквизитыСертификата.Получить();
	ЭтоПервичноеЗаявление			= ДокументЗаявление.ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное");
	ТребуетсяПолучениеРасписки		= ЭтоЭлектронноеПодписание И НовыйСтатусДокумента = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено;
	КрасныйЦвет 					= Новый Цвет(226, 40, 40);
	
	// Подготовительные действия
	ПоказатьОсновнуюСтраницу = Истина;
	Если НовыйСтатусДокумента = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено И ТребуетсяПолучениеРасписки Тогда
		
		Результат = ПодготовитьФайлРасписки(Параметры);
		Если Результат.Выполнено Тогда
			Сертификат = ДокументЗаявление.Ссылка.Сертификат.Получить();
			ИзменитьОформлениеНачальнойСтраницы(Истина);
		Иначе
			
			ПрограммноеЗакрытие = Истина;
			
			ИзменитьОформлениеСтраницыСОшибкойПриНедоступномСервере(Результат);
			ПоказатьСтраницуСОшибкой(ТекстОшибки);
			
		КонецЕсли;
		
	ИначеЕсли НовыйСтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда
		
		ПрограммноеЗакрытие = Истина;
		ОтметитьЗаявлениеКакНастроенное();
		ИзменитьОформлениеНачальнойСтраницы(Ложь);
		
	Иначе
		ЗаявлениеОдобрено = НовыйСтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
		
		Если НЕ ПрограммноеЗакрытие = Истина Тогда
			ПрограммноеЗакрытие = Истина;
		КонецЕсли;
		
		ИзменитьОформлениеНачальнойСтраницы(ЗаявлениеОдобрено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПодключитьЭДО 
		И НовыйСтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено")
		И Элементы.СтраницыЗаявления.ТекущаяСтраница = Элементы.УспешноеЗавершение Тогда
		
		// Попытка отмены завершения подключения к 1С-ЭДО
		// Это сообщение выводим только на последней странице.
		ТекстПредупреждения = НСтр("ru = 'Завершить настройку без подключения к сервису 1С-ЭДО?'");

	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Прервать настройку 1С-Отчетности?'");
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СсылкаРаспискаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Отсканируйте" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СканироватьФайл_Завершение", 
			ЭтотОбъект);
		
		РаботаСФайламиКлиент.ДобавитьФайл(
			ОписаниеОповещения,
			ДокументЗаявление.Ссылка,
			ЭтотОбъект,
			3,
			Истина);
		
	Иначе
		
		МаксимальныйРазмерФайла = 10 * 1024 * 1024 * 1024;
		ДопустимыеТипыФайлов = "png;jpg;jpeg;pdf";
					
		ПараметрыДобавления = Новый Структура;
		ПараметрыДобавления.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
		ПараметрыДобавления.Вставить("ВозвращатьРазмер", Истина);
		ПараметрыДобавления.Вставить("ДопустимыеТипыФайлов", ДопустимыеТипыФайлов);
				
		Оповещение = Новый ОписаниеОповещения("СканРаспискаПослеДобавленияФайлов", ЭтотОбъект);
		ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(Оповещение, УникальныйИдентификатор, "Выберите файл <Сведения о сертификате>", ПараметрыДобавления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСсылкаРаспискаНажатие(Элемент)
	
	ФайлСканРасписка = Неопределено;
	ИзменитьОформлениеДокумента(0, 0, "");
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечатайтеСертификатОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтекстЭДОКлиент.НапечататьДокумент(Расписка, НСтр("ru = 'Расписка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокСообщитеОбОтправкеРекомендацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "закрытого ключа" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДокументЗаявление", ДокументЗаявление.Ссылка);
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонтейнерЗакрытогоКлюча", ДополнительныеПараметры);
		
	Иначе
		Если ДокументЗаявление.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
			ОбщегоНазначенияКлиент.ПерейтиПоСсылке("https://its.1c.ru/bmk/elreps/key_trans_cryptopro");
		Иначе
			ОбщегоНазначенияКлиент.ПерейтиПоСсылке("https://its.1c.ru/bmk/elreps/key_trans_vipnet");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПомощь2Нажатие(Элемент)
	ОткрытьФормуПомощи();
КонецПроцедуры

&НаКлиенте
Процедура ЧтоДелать2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПомощи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомьтесьССертифкатомЭлектронноеПодписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтекстЭДОКлиент.НапечататьДокумент(Расписка, НСтр("ru = 'Расписка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокДругиеПриложенияРекомендацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПерейтиПоСсылке("https://its.1c.ru/bmk/elreps/additional_account");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторитьОтправкуСЭлПодписью(Команда)
	ПолучитьРаспискуВБумажномВиде = Ложь;
	НастроитьАвтоматически(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаБольшеНеНапоминать(Команда)
	
	ПрограммноеЗакрытие = Истина;
	НапоминитьПозжеПроЗаявление(ДокументЗаявление.Ссылка, Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандаБольшеНеНапоминать_Завершение", 
		ЭтотОбъект);
		
	Текст = НСтр("ru = 'Вы сможете завершить настройку 1С-Отчетности по данному заявлению позже, нажав в форме заявления кнопку ""Обновить"" сверху.
                  |Все заявления доступны по ссылке ""Список заявлений"" в разделе ""Настройки"" формы ""1С-Отчетность""'");
	ПоказатьПредупреждение(ОписаниеОповещения, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБольшеНеНапоминать_Завершение(ВходящийКонтекст) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьНовоеЗаявление(Команда)
	
	ОтметитьЗаявлениеКакНастроенное();
	СоздатьНовоеЗаявление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьБумажнуюИлиЭлектроннуюРасписку(Команда)
	
	Если ТребуетсяПолучениеРасписки И ПолучитьРаспискуВБумажномВиде Тогда
		
		Если Не ЗначениеЗаполнено(ФайлСканРасписка) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите скан-копию подписанного бланка сертификата'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "УказательСканРасписка");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Подождите.Заголовок = НСтр("ru = 'Выполняется отправка расписки...'");
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ДлительноеДействие,
		НСтр("ru = 'Подождите, пожалуйста...'"));
	
	// Чтобы бублик крутился
	ПодключитьОбработчикОжидания("Подключаемый_ОтправитьБумажнуюИлиЭлектроннуюРасписку", 0.1, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОтправитьРасписку(ОповещениеОЗавершении)
	
	Результат = ОтправитьРаспискуНаСервере();
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматически(Команда)
	
	Если ТребуетсяПолучениеРасписки Тогда
		ОтправитьБумажнуюИлиЭлектроннуюРасписку(Неопределено);
	Иначе
		НастроитьАвтоматическиБезРасписки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьАвтоматическиБезРасписки()
	
	Элементы.Подождите.Заголовок = НСтр("ru = 'Выполняется настройка 1С-Отчетности...'");
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ДлительноеДействие,
		НСтр("ru = 'Подождите, пожалуйста...'"));
	
	// Чтобы бублик крутился
	ПодключитьОбработчикОжидания("Подключаемый_НастроитьАвтоматически", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодключениеКЭДО(Команда)
	
	ПрограммноеЗакрытие = Истина;
	
	Если ЗначениеЗаполнено(ПараметрыПодключениеЭДО) Тогда
		
		// по данному заявлению сформирована учетная запись, 
		// у заявления ПодключитьЭДО = Истина
		
		//выполним отмену закрытия без возвращаемого значения и инициируем закрытие с параметрами подключения ЭДО
		РезультатЗакрытия = Новый Структура("ПодключитьЭДО, Организация, ПараметрыПодключениеЭДО");
		РезультатЗакрытия.Вставить("ПодключитьЭДО", 				 Истина);
		РезультатЗакрытия.Вставить("Организация", 					 ПараметрыПодключениеЭДО.Организация);
		РезультатЗакрытия.Вставить("ПараметрыЗапускаПодключениеЭДО", ПараметрыПодключениеЭДО);
		
		Закрыть(РезультатЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменитьОформлениеДокумента(Размер, Количество, ИмяФайлаРасписки)
	
	ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(ЭтотОбъект, "Расписка", Размер, Количество, ИмяФайлаРасписки);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастроитьАвтоматически()
	
	ВыполнитьЗавершениеПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьБумажнуюИлиЭлектроннуюРасписку()
	
	Если ТребуетсяПолучениеРасписки И НЕ ПолучитьРаспискуВБумажномВиде Тогда
		
		ПодписатьРасписку(); // асинхронно
		
	Иначе
		
		ПрисоединитьФайлРаспискиКДокументу(ФайлСканРасписка.Адрес, Неопределено);
		Оповещение = Новый ОписаниеОповещения("ОтправитьРаспискуПослеВыполнения", ЭтотОбъект);
		ОтправитьРасписку(Оповещение); // асинхронно
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыДляЗапускаМетодаБЭД(ЗаявлениеСсылка)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьПараметрыДляЗапускаМетодаБЭД(ЗаявлениеСсылка); 
	
КонецФункции

&НаКлиенте
Процедура ПодписатьРасписку()
	
	Если ЭтоПервичноеЗаявление Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьРасписку_ПослеПолученияМенеджераИСертификатКриптографии", 
			ЭтотОбъект);
			
		КонтекстЭДОКлиент.ПолучитьМенеджерИСертификатКриптографии(
			СертификатДляПодписания, 
			ОписаниеОповещения);
		
	Иначе	
		ПодписатьРасписку_Начало();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ПослеПолученияМенеджераИСертификатКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено = Истина Тогда
		
		СертификатКриптографии 	= Результат.СертификатКриптографии;
		МенеджерКриптографии 	= Результат.МенеджерКриптографии;
		
		ПодписатьРасписку_Начало();
		
	ИначеЕсли Результат.Выполнено = Ложь Тогда
		
		ТекстОшибкиПодписания = НСтр("ru = 'Не удалось установить расширение для работы с криптографией'");
		ПодписатьРасписку_СообщитьОбОшибкеПодписания(ТекстОшибкиПодписания);
		
	Иначе
		
		ТекстОшибкиПодписания = НСтр("ru = 'Пользователь отказался от установки расширения для работы с криптографией'");
		ПодписатьРасписку_СообщитьОбОшибкеПодписания(ТекстОшибкиПодписания);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПодписатьРасписку_Начало() Экспорт
	
	Если ЭтоПервичноеЗаявление Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьРасписку_ПослеВводаПароля", 
			ЭтотОбъект);

		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СертификатДляПодписания", СертификатДляПодписания);
		ДополнительныеПараметры.Вставить("Расписка", Расписка);
			
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ВводПароляЗакрытогоКлюча", 
			ДополнительныеПараметры,
			,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьРасписку_ПослеПодписания", ЭтотОбъект);
		
		КриптографияЭДКОКлиент.ПодписатьPKCS7(
			Оповещение, 
			Сертификат,
			АдресСертификата, 
			Ложь, 
			ПоместитьВоВременноеХранилище(, УникальныйИдентификатор),
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ПослеВводаПароля(Пароль, ВходящийКонтекст) Экспорт
	
	Если Пароль = Неопределено Тогда
		
		ТекстОшибкиПодписания = НСтр("ru = 'Пользователь отказался от ввода пароля'");
		ПодписатьРасписку_СообщитьОбОшибкеПодписания(ТекстОшибкиПодписания);
		
	Иначе
		
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьРасписку_ПослеПодписания", 
			ЭтотОбъект, 
			,
			"ПодписатьРасписку_ОбработчикОшибкиПодписания",
			ЭтотОбъект);
				
		ДвДанные = ПолучитьИзВременногоХранилища(АдресСертификата);
		
		МенеджерКриптографии.НачатьПодписывание(
			ОписаниеОповещения, 
			ДвДанные, 
			СертификатКриптографии);
			
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ОбработчикОшибкиПодписания(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекстОшибкиПодписания = КраткоеПредставлениеОшибки(ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке));
	ПодписатьРасписку_СообщитьОбОшибкеПодписания(ТекстОшибкиПодписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_ПослеПодписания(Результат, ВходящийКонтекст) Экспорт
	
	// Из-за того, что подписание выполняется методом компоненты или платформы, то результат возвращается разный
	Выполнено = НЕ ЭтоПервичноеЗаявление И Результат.Выполнено ИЛИ ЭтоПервичноеЗаявление;
	
	Если Выполнено Тогда
		
		Если ЭтоПервичноеЗаявление Тогда
			ФайлПодписи = ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор);
		Иначе
			ФайлПодписи = Результат.ФайлПодписи;
		КонецЕсли;
		
		ПрисоединитьФайлРаспискиКДокументу(АдресСертификата, ФайлПодписи);
		Оповещение = Новый ОписаниеОповещения("ОтправитьРаспискуПослеВыполнения", ЭтотОбъект);
		ОтправитьРасписку(Оповещение);
		
	ИначеЕсли НЕ ЭтоПервичноеЗаявление Тогда 
		ПодписатьРасписку_СообщитьОбОшибкеПодписания(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьРасписку_СообщитьОбОшибкеПодписания(ТекстОшибки = "") Экспорт

	СканированиеДоступно = РаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
	ИзменитьОформлениеДокумента(0, 0, "");
	
	ПолучитьРаспискуВБумажномВиде 					 = Истина;
	Элементы.ПричинаОшибкиОтправкиРасписки.Заголовок = ТекстОшибки;
	Элементы.ПовторитьОтправку.КнопкаПоУмолчанию 	 = Истина;
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ОшибкаОтправкиРасписки, 
		НСтр("ru = 'Отправка расписки'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРаспискуПослеВыполнения(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ВыполнитьЗавершениеПодключения();
	Иначе
		ПоказатьСтраницуСОшибкой(Результат.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПользователейВУчетнуюЗапись(СсылкаУчетнаяЗапись)
	
	НаборЗаписей = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(СсылкаУчетнаяЗапись.Ссылка);
	ФлагОтметки = Ложь;
	
	Для Каждого СтрокаТаблицы Из ДокументЗаявление.ПользователиУчетнойЗаписи Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.УчетнаяЗапись = СсылкаУчетнаяЗапись.Ссылка;
		НоваяСтрока.Пользователь  = СтрокаТаблицы.Пользователь;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		РегламентированнаяОтчетностьКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки(), Ложь,
		"Не удалось обновить список пользователей по учетной записи налогоплательщика """ + СокрЛП(СсылкаУчетнаяЗапись.Ссылка) + """.");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗавершениеПодключения()
	
	// Чтобы отрисовался заголовок
	Заголовок = НСтр("ru = 'Подождите, пожалуйста...'");
	Элементы.Подождите.Заголовок = НСтр("ru = 'Выполняется настройка 1С-Отчетности...'");
	
	ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьЗавершениеПодключения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗавершениеПодключения()
	
	ПараметрыОбработатьОбновление = ПараметрыАвтонастройкиУчетнойЗаписи();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьЗавершениеПодключения_ПослеОбработкиОбновления", 
		ЭтотОбъект);
		
	КонтекстЭДОКлиент.ОбработатьОбновление(ПараметрыОбработатьОбновление, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗавершениеПодключения_ПослеОбработкиОбновления(Результат, ВходящийКонтекст) Экспорт
	
	ОбновлениеВыполненоУспешно 	= Результат.РезультатОбновления;
	ОбновлениеНеВыполнилось 	= НЕ ОбновлениеВыполненоУспешно ИЛИ ИдентификаторАбонента = "";
	
	ОбновитьРеквизитыЗаявления(ОбновлениеНеВыполнилось);
	
	Если ОбновлениеНеВыполнилось Тогда
		
		Если Результат.Свойство("ПараметрыФункции") 
			И ТипЗнч(Результат.ПараметрыФункции) = Тип("Структура") 
			И Результат.ПараметрыФункции.Свойство("ТекстОшибокДляМастераПодключенияК1СОтчетности")
			И ЗначениеЗаполнено(Результат.ПараметрыФункции.ТекстОшибокДляМастераПодключенияК1СОтчетности) Тогда
			ТекстОшибки = Результат.ПараметрыФункции.ТекстОшибокДляМастераПодключенияК1СОтчетности;
		КонецЕсли;
		
		Если Результат.Свойство("ОшибкаУстановкиЛичногоСертификата") 
			И ЗначениеЗаполнено(Результат.ОшибкаУстановкиЛичногоСертификата) Тогда
			ТекстОшибки = Результат.ОшибкаУстановкиЛичногоСертификата;
		КонецЕсли;
		
		ПоказатьСтраницуСОшибкой(ТекстОшибки);
		
	Иначе
		
		Если ПодключитьЭДО Тогда
			// Прерываем только при необходимости подключения ЭДО
			ПрограммноеЗакрытие = Ложь;
		Иначе
			ПрограммноеЗакрытие = Истина;
		КонецЕсли;
		
		ОтметитьЗаявлениеКакНастроенное();
		ПараметрыПодключениеЭДО = ПолучитьПараметрыДляЗапускаМетодаБЭД(ДокументЗаявление.Ссылка);
		ИзменитьОформлениеСтраницыУспешногоЗавершения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеСтраницыУспешногоЗавершения()
	
	// Заголовок
	Элементы.НадписьОбУспешнойОтправке.Заголовок = СтрЗаменить(Элементы.НадписьОбУспешнойОтправке.Заголовок, "%1", Организация);
	
	// Видимость рекомндаций
	ЛокальныйКлюч 				= НЕ ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса;
	ОтображатьБлокРезервныйКлюч = ЛокальныйКлюч;
	ОтображатьПодключитьЭДО	 	= ПодключитьЭДО И ЛокальныйКлюч И ЗначениеЗаполнено(ПараметрыПодключениеЭДО);
	
	// 1С-ЭДО
	Элементы.ЗавершитьПодключениеКЭДО.КнопкаПоУмолчанию = ОтображатьПодключитьЭДО;
	Элементы.ЗавершитьПодключениеКЭДО.Видимость 		= ОтображатьПодключитьЭДО;
	Элементы.ЗавершениеНастройки1СЭДО.Видимость 		= ОтображатьПодключитьЭДО; // Надпись
	Элементы.Закрыть1.Видимость 						= НЕ ОтображатьПодключитьЭДО;
	Элементы.Закрыть1.КнопкаПоУмолчанию 				= НЕ ОтображатьПодключитьЭДО;
	
	// Резервный ключ
	Элементы.РекомендацияРезервныйКлюч.Видимость = ЛокальныйКлюч;
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.УспешноеЗавершение,
		НСтр("ru = 'Настройка 1С-Отчетности завершена'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыЗаявления(ЕстьОшибкаОбновления)
	
	Если ЕстьОшибкаОбновления Тогда
		
		СтатусКомментарий 	= "Заявление одобрено, но не удалось создать учетную запись.";
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
		НастройкаЗавершена 	= Ложь;
		
		ЗаписатьРеквизитыЗаявления(
			СтатусКомментарий, 
			Статус, 
			НастройкаЗавершена);
		
	Иначе
		
		СтатусКомментарий 	= "Создана учетная запись.";
		Статус 				= ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено");
		НастройкаЗавершена 	= Истина;
		
		ЗаписатьРеквизитыЗаявления(
			СтатусКомментарий, 
			Статус, 
			НастройкаЗавершена, 
			КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		
		КонтекстЭДОКлиент.УстановитьУчетнуюЗаписьОрганизации(
			Организация, 
			КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		
		ОповеститьОбИзменении(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		Оповестить("ОбновитьУчетнуюЗапись", КонтекстЭДОКлиент.НоваяУчетнаяЗапись,);
		
		ДобавитьПользователейВУчетнуюЗапись(КонтекстЭДОКлиент.НоваяУчетнаяЗапись);
		
		Оповестить("ЗаполнитьСводнуюИнформациюПоЗаявлениюАбонентаСпецоператораСвязи", ДокументЗаявление.Ссылка);

	КонецЕсли;
	
	ЭтотОбъект.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРеквизитыЗаявления(СтатусКомментарий, Статус, НастройкаЗавершена, УчетнаяЗапись = Неопределено)
	
	ЗаписатьРеквизитыЗаявленияНаСервере(СтатусКомментарий, Статус, НастройкаЗавершена, УчетнаяЗапись);
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьРеквизитыЗаявленияНаСервере(СтатусКомментарий, Статус, НастройкаЗавершена, УчетнаяЗапись)
	
	РеквизитыДокументаДляЗаписи = Новый Структура;
	РеквизитыДокументаДляЗаписи.Вставить("ДатаПолученияОтвета", ТекущаяДатаСеанса());
	РеквизитыДокументаДляЗаписи.Вставить("Статус",				Статус);
	РеквизитыДокументаДляЗаписи.Вставить("СтатусКомментарий",	СтатусКомментарий);
	РеквизитыДокументаДляЗаписи.Вставить("НастройкаЗавершена", 	НастройкаЗавершена);
	
	Если УчетнаяЗапись <> Неопределено Тогда
		РеквизитыДокументаДляЗаписи.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	КонецЕсли;
	
	ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(ДокументЗаявление.Ссылка, РеквизитыДокументаДляЗаписи);

КонецПроцедуры

&НаКлиенте
Функция ПараметрыАвтонастройкиУчетнойЗаписи() Экспорт
	
	ПараметрыОбработатьОбновление = КонтекстЭДОКлиент.ПараметрыОбработатьОбновление();
	ПараметрыОбработатьОбновление.ЭтоЭлектроннаяПодписьВМоделиСервиса 	 = ДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса;
	ПараметрыОбработатьОбновление.ТелефонМобильныйДляАвторизации 		 = ДокументЗаявление.ТелефонМобильныйДляАвторизации;
	ПараметрыОбработатьОбновление.ИдентификаторАбонента 				 = ИдентификаторАбонента;
	ПараметрыОбработатьОбновление.СпецОператорСвязи 					 = СпецоператорСвязи;
	ПараметрыОбработатьОбновление.ПутьКонтейнерЗакрытогоКлюча 			 = ДокументЗаявление.ПутьКонтейнерЗакрытогоКлюча;
	ПараметрыОбработатьОбновление.Организация 							 = Организация;
	ПараметрыОбработатьОбновление.ЭтоВторичноеЗаявление 				 = Ложь;
	ПараметрыОбработатьОбновление.ОтпечатокСертификатаИзОтвета 			 = ОтпечатокСертификатаИзОтвета;
	ПараметрыОбработатьОбновление.ВызовИзМастераПодключенияК1СОтчетности = Истина;
	
	ИдентификаторДокументооборота = ?(ЗначениеЗаполнено(ДокументЗаявление.ИдентификаторКлючевогоКонтейнера), 
		ДокументЗаявление.ИдентификаторКлючевогоКонтейнера, 
		ДокументЗаявление.ИдентификаторДокументооборота);
	
	ПараметрыОбработатьОбновление.ИдентификаторДокументооборота = ИдентификаторДокументооборота;
	
	Возврат ПараметрыОбработатьОбновление;
	
КонецФункции

&НаСервере
Процедура ПоказатьСтраницуСОшибкой(ТекстОшибки)
	
	ПрограммноеЗакрытие = Истина;
	
	СерверОбновленияНедоступен = СтрНайти(ВРЕГ(ТекстОшибки), НСтр("ru = 'СЕРВЕР'"));
	
	Если СерверОбновленияНедоступен Тогда
		Элементы.ОписаниеОшибки.Заголовок = НСтр("ru = 'Не удалось подключиться к серверу удостоверяющего центра'");
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		Элементы.ОписаниеОшибки.Заголовок = ТекстОшибки;
	Иначе
		Элементы.ОписаниеОшибки.Заголовок = НСтр("ru = 'Не удалось установить сертификаты и выполнить автоматическую настройку'");
	КонецЕсли;
	
	Элементы.Закрыть.КнопкаПоУмолчанию  = Истина;
	
	АктивизироватьСтраницу(
		ЭтотОбъект, 
		Элементы.ОшибкаНастройки, 
		НСтр("ru = 'Настройка 1С-Отчетности'"));
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеНачальнойСтраницы(ЗаявлениеОдобрено)
	
	Если ЗаявлениеОдобрено Тогда
		СостояниеЗаявления = Элементы.ЗаголовокЗаявлениеОдобрено;
	Иначе
		СостояниеЗаявления = Элементы.ЗаголовокПричинаОтклонения;
		// Обход ошибки платформы 10187361
		СостояниеЗаявления.Шрифт = Новый Шрифт(,,,Ложь);
	КонецЕсли;
	
	// Текст заголовка
	КонтекстЭДОСервер  =  ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.УстановитьПредставлениеЗаявленияВВидеФорматированнойСтроки(
		ДокументЗаявление.Ссылка, 
		СостояниеЗаявления, 
		Истина);
		
	Если ЗаявлениеОдобрено Тогда
			
		СостояниеЗаявления.Заголовок 						= Новый ФорматированнаяСтрока(СостояниеЗаявления.Заголовок, Новый Шрифт(,11));
		Элементы.НастроитьАвтоматически.КнопкаПоУмолчанию 	= Истина;
		Элементы.ПояснениеКЭлектронномуПодписанию.Видимость = ТребуетсяПолучениеРасписки;
		Элементы.ПояснениеКБумажномуПодписанию.Видимость    = НЕ ТребуетсяПолучениеРасписки;
		
		Если ТребуетсяПолучениеРасписки Тогда
			Элементы.НастроитьАвтоматически.Заголовок = НСтр("ru = 'Отправить расписку'");
		КонецЕсли;
		
		АктивизироватьСтраницу(
			ЭтотОбъект, 
			Элементы.ЗаявлениеОдобрено,
			НСтр("ru = 'Заявление одобрено'"));

	Иначе
		
		СостояниеЗаявления.Заголовок 		 				 = Новый ФорматированнаяСтрока(СостояниеЗаявления.Заголовок, Новый Шрифт(,11));
		Элементы.ПричинаОтклонения.Заголовок 				 = ДокументЗаявление.СтатусКомментарий;
		Элементы.ПодготовитьНовоеЗаявление.КнопкаПоУмолчанию = Истина;
		
		АктивизироватьСтраницу(
			ЭтотОбъект, 
			Элементы.ЗаявлениеОтклонено,
			НСтр("ru = 'Заявление отклонено'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеЗаявление()

	// Если статус заявления - "Отклонено", тогда создаем новое заявление
	ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
	ДополнительныеПараметры.Вставить("ЗначениеКопирования", ДокументЗаявление.Ссылка);
	ДополнительныеПараметры.Вставить("ВидЗаявления", 		ДокументЗаявление.ТипЗаявления);
		
	Если Открыта() Тогда 
		Закрыть(ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(РезультатПолученияКонтекста, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = РезультатПолученияКонтекста.КонтекстЭДО;
	
	Если ДокументЗаявление <> Неопределено Тогда
		// Обновление состояния и панели отправки
		Оповестить("ЗаполнитьСводнуюИнформациюПоЗаявлениюАбонентаСпецоператораСвязи",ДокументЗаявление.Ссылка);
	КонецЕсли;
	
	ПриДобавленииКлючаВРеестр();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриДобавленииКлючаВРеестр()
	
	УдалосьПогаситьВыводОшибок = КонтекстЭДОКлиент.ЗапретитьВыводОшибокКриптоПро(ДокументЗаявление, НовыйСтатусДокумента);
	Элементы.ПредупреждениеКриптоПро.Видимость = ДокументЗаявление.ВключитьЛицензиюКриптоПро И НЕ УдалосьПогаситьВыводОшибок;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПомощи()
	
	ФИО = СокрЛП(ДокументЗаявление.ВладелецЭЦПИмя + " " + ДокументЗаявление.ВладелецЭЦПОтчество);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Фио", ФИО);
	ДополнительныеПараметры.Вставить("НомерТелефона", ДокументЗаявление.ТелефонМобильныйДляАвторизации);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_Помощь", ДополнительныеПараметры);
	
КонецПроцедуры

#Область Расписка

&НаСервереБезКонтекста
Функция ПолучитьФайлАвтонастройки(СпецоператорСвязи, ИдентификаторАбонента, ДатаПоследнегоОбновления = Неопределено)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьФайлАвтонастройки(СпецоператорСвязи, ИдентификаторАбонента, ДатаПоследнегоОбновления);
	
КонецФункции

&НаСервере
Функция ПодготовитьФайлРасписки(Параметры)

	Если НЕ ЗначениеЗаполнено(ИдентификаторАбонента) Тогда
		ИдентификаторАбонента = Сред(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "УчетнаяЗапись.ИдентификаторАбонента"), 4);
	КонецЕсли;
	Результат = ПолучитьФайлАвтонастройки(Параметры.Ключ.СпецоператорСвязи, ИдентификаторАбонента);
	
	Если Результат.Выполнено Тогда
		
		СертификатыИзФайлаНастройки = ПолучитьСертификатыИзФайлаНастройки(Результат.Настройки);
		Для Каждого СертификатИзФайлаНастройки Из СертификатыИзФайлаНастройки Цикл
			Если Врег(СертификатИзФайлаНастройки.Хранилище) = "MY" Тогда
				НовыйСертификат = СертификатИзФайлаНастройки.Сертификат;
			КонецЕсли;
		КонецЦикла;
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КонтекстЭДОСервер.ПечатьСертификатаНаСервере(Расписка, НовыйСертификат);
		
		АдресСертификата = ПоместитьВоВременноеХранилище(НовыйСертификат, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеСтраницыСОшибкойПриНедоступномСервере(Результат)
	
	КонтекстЭДОСервер  =  ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.УстановитьПредставлениеЗаявленияВВидеФорматированнойСтроки(
		ДокументЗаявление.Ссылка, 
		Элементы.ВступлениеКОшибке, 
		Истина);
		
	Элементы.ВступлениеКОшибке.Заголовок = Новый ФорматированнаяСтрока(
		Элементы.ВступлениеКОшибке.Заголовок,
		НСтр("ru = ', но не удалось завершить настройку по причине:'"));
	
	Если Результат.Свойство("ОписаниеОшибки") Тогда
		ТекстОшибки = Результат.ОписаниеОшибки;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось подключиться к серверу удостоверяющего центра'");
	КонецЕсли;
	
	ПоказатьСтраницуСОшибкой(ТекстОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСертификатыИзФайлаНастройки(АдресФайла)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьСертификатыИзФайлаНастройки(АдресФайла);
	
КонецФункции

&НаСервере
Процедура ПрисоединитьФайлРаспискиКДокументу(АдресФайлаРасписки, АдресФайлаПодписи)
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("Автор", Неопределено);
	ПараметрыФайла.Вставить("ВладелецФайлов", ДокументЗаявление.Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", "Расписка");
	ПараметрыФайла.Вставить("РасширениеБезТочки", "cer");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаРасписки);
	
	Если ЗначениеЗаполнено(АдресФайлаПодписи) Тогда
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись", ПолучитьИзВременногоХранилища(АдресФайлаПодписи));
		СвойстваПодписи.Вставить("Сертификат", ПолучитьИзВременногоХранилища(АдресСертификата));
		СвойстваПодписи.Вставить("ПодписьВерна", Истина);
		СвойстваПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
		СвойстваПодписи.Вставить("КомуВыданСертификат", "");
		
		РаботаСФайлами.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, СвойстваПодписи, УникальныйИдентификатор);
	КонецЕсли;
	
	СтрокаТаблицы = Неопределено;
	Для Каждого ЭлектронныйДокумент Из ДокументЗаявление.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокумент.Документ = "Расписка" Тогда
			СтрокаТаблицы = ЭлектронныйДокумент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ДокументЗаявление.ЭлектронныеДокументы.Добавить();
	КонецЕсли;
	
	СтрокаТаблицы.Документ = "Расписка";
	СтрокаТаблицы.Файл = ПрисоединенныйФайл;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьРаспискуНаСервере()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ОтправитьРаспискуНаСервере(ДокументЗаявление, ИдентификаторАбонента);
	
КонецФункции

&НаКлиенте
Процедура СканРаспискаПослеДобавленияФайлов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И ЗначениеЗаполнено(Результат.ОписанияФайлов) Тогда
		
		ФайлСканРасписка = Новый Структура;
		ФайлСканРасписка.Вставить("Адрес", Результат.ОписанияФайлов[0].Адрес);
		Файл = Новый Файл(Результат.ОписанияФайлов[0].Имя);
		ФайлСканРасписка.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ФайлСканРасписка.Вставить("Расширение", 	  СтрЗаменить(Файл.Расширение, ".", ""));
		
		Размер = Результат.ОписанияФайлов[0].Размер;
		
		ИзменитьОформлениеДокумента(Размер, 1, Файл.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОтметитьЗаявлениеКакНастроенное()
	
	Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено")
		И НЕ ДокументЗаявление.НастройкаЗавершена Тогда
		
		ОбработкаЗаявленийАбонентаВызовСервера.ОбновитьРеквизитыЗаявления(
			ДокументЗаявление.Ссылка, 
			Новый Структура("НастройкаЗавершена", Истина));
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АктивизироватьСтраницу(Форма, ТекущаяСтраница, ЗаголовокСтраницы)
	
	Элементы = Форма.Элементы;
	
	Форма.Заголовок = ЗаголовокСтраницы;
	
	МногостраничныйЭлемент = Элементы.СтраницыЗаявления;
	
	Для каждого Страница Из МногостраничныйЭлемент.ПодчиненныеЭлементы Цикл
		Если Страница = ТекущаяСтраница Тогда
			Страница.Видимость = Истина;
			МногостраничныйЭлемент.ТекущаяСтраница 	= ТекущаяСтраница;
		Иначе
			Страница.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НапоминитьПозжеПроЗаявление(ЗаявлениеАбонента, БольшеНеНапоминать = Ложь)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.НапоминитьПозжеПроЗаявление(ЗаявлениеАбонента, БольшеНеНапоминать);

КонецПроцедуры

&НаКлиенте
Процедура СканироватьФайл_Завершение(Результат, ВидДокумента) Экспорт
	
	Если Результат <> Неопределено И Результат.ФайлДобавлен Тогда
		ДобавитьОтсканированныеФайлы(Результат.ФайлСсылка, ВидДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтсканированныеФайлы(ПрисоединенныйФайл, ВидДокумента)
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор, Истина);
	
	НовоеИмя = НСтр("ru = 'Расписка'") + "." + ДанныеФайла.Расширение;
	
	ФайлСканРасписка = Новый Структура;
	ФайлСканРасписка.Вставить("Адрес", 			  ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ФайлСканРасписка.Вставить("ИмяБезРасширения", НовоеИмя);
	ФайлСканРасписка.Вставить("Расширение", 	  ДанныеФайла.Расширение);
	
	ИзменитьОформлениеДокумента(ДанныеФайла.Размер, 1, НовоеИмя);

КонецПроцедуры

#КонецОбласти


