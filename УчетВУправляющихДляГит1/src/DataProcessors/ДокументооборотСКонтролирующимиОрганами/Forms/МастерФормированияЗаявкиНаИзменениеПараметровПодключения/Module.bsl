&НаКлиенте
Перем КонтекстЭДОКлиент;

&НаКлиенте
Перем РеквизитыНеХранящиесяВБазе;

&НаКлиенте
Перем ПрисоединенныйФайлЗаявления;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("АктивироватьФлагиМастера") Тогда
		ВходящиеФлагиМастера = Параметры.АктивироватьФлагиМастера.ФлагиВМастер;
	КонецЕсли;
	
	Реквизит      = Параметры.Реквизит;
	Организация   = ОпределитьОрганизацию(Параметры);
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Параметры.Свойство("ЭтоОткрытиеЗаявления", ЭтоОткрытиеЗаявления);
	
	ПриОткрытииЗапрошеноПродлениеСертификата 	= Параметры.ПриОткрытииЗапрошеноПродлениеСертификата;
	ПриОткрытииЗапрошеноПродлениеЛицензии 		= Параметры.ПриОткрытииЗапрошеноПродлениеЛицензии;
	
	ПриСозданииНаСервереИнициализация();
	
	ЗаполнитьСлужебныеДанныеНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
	ЗаполнитьСписокВыбораОрганизаций();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.УчетнаяЗаписьОбмена <> ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиДокументооборота.ПустаяСсылка)
		|	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)";
	
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(Организации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ТелефонМобильный.ОбновитьТекстРедактирования();
	Элементы.ЭлектроннаяПочтаДляПаролей.ОбновитьТекстРедактирования();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Элементы.Закрыть.Заголовок = "Закрыть" Тогда
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Прервать работу помощника?'");
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВключатьЛицензиюКриптоПроВСертификатПриИзменении(Элемент)
	
	Если ВключатьЛицензиюКриптоПроВСертификат И ПредупреждатьПроНаличиеЛицензииКриптоПро Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВключатьЛицензиюКриптоПроВСертификатПриИзменении_Завершение", 
			ЭтотОбъект);
			
		ТекстВопроса = НСтр("ru = 'На компьютере уже имеется общая лицензия КриптоПро CSP.
                             |Вы уверены, что хотите включить лицензию в сертификат (потребуется доп. оплата) ?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаТелефонаИЭлектроннойПочты

&НаКлиенте
Процедура ПолучатьУведомленияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПолучатьУведомленияРасширеннаяПодсказкаОбработкаНавигационнойСсылкиПослеВводаТелефона", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, ТелефонМобильный, "Телефон для SMS-уведомлений", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьУведомленияРасширеннаяПодсказкаОбработкаНавигационнойСсылкиПослеВводаТелефона(Результат, ВходящийКонтекст) Экспорт
	
	Телефон = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(Результат);
	Если СтрДлина(Телефон) = 11 Тогда
		ТелефонМобильный = СтрШаблон("+7 %1 %2-%3-%4", Сред(Телефон, 2, 3), Сред(Телефон, 5, 3), Сред(Телефон, 8, 2), Сред(Телефон, 10, 2));
		
		ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
		ТелефонМобильныйИсходныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильныйИсходный);
		
		ТелефонМобильныйИзменился = ТелефонМобильныйБезРазделителей <> ТелефонМобильныйИсходныйБезРазделителей;
		
		ОбновитьТекстПодсказкиДляФлажкаПолучатьУведомления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонДляПаролейПриИзменении(Элемент)
	
	ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Представление = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Текст);
	ТелефонДляПаролей = Представление;
	
	ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Представление) И Представление <> ПроверкаТелефонДляПаролей.ИсходноеЗначение;
	ТелефонМобильный = ТелефонДляПаролей;
	Если Не ЗначениеЗаполнено(Представление) Тогда
		ТелефонДляПаролей = Текст;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей", 1.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонПриИзменении(Элемент)
	
	КодПодтвержденияТелефонИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		КодПодтверждения = СокрЛП(Текст);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляПаролейПриИзменении(Элемент)
	
	ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Представление = СокрЛП(Текст);
	ЭлектроннаяПочтаДляПаролей = Представление;
	
	ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено = 
		ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Представление)
		И Представление <> ПроверкаТелефонДляПаролей.ИсходноеЗначение;
		
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей", 1.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияЭлектроннаяПочтаПриИзменении(Элемент)
	
	КодПодтвержденияЭлектроннаяПочтаИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияЭлектроннаяПочтаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		КодПодтверждения = СокрЛП(Текст);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИзменитьРеквизитыПодключенияК1СОтчетностиПриИзменении(Элемент)
	
	// Определяем, нужно ли перездавать сертификат 
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРосстатПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВРосстатПриИзмененииЗавершение", ЭтотОбъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВРосстат", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"), СдаватьВРосстатИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВПФРПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВПФРПриИзмененииЗавершение", ЭтотОбъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВПФР", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР"), СдаватьВПФРИсходный, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФНСПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВФНСПриИзмененииЗавершение", ЭтотОБъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВФНС", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"), СдаватьВФНСИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФССПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВФССПриИзмененииЗавершение", ЭтотОБъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВФСС", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС"), СдаватьВФССИсходный, ОписаниеОповещения);
		
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодыФНСНажатие(Элемент)
	
	ОткрытьФормуРедактированияНаправленийСдачиОтчетности(ПолучателиФНС, ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВладелецЭЦПНажатие(Элемент)
	
	ОткрытьФормуВыбораВладельцаЭЦП();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЭтоОткрытиеЗаявления = Ложь;
	Реквизит = Неопределено;
	
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	
	ЗаполнитьСлужебныеДанныеНаСервере();
	
	ОпределитьРеквизитыНеХранящиесяВБазе();
	
	ЗаполнитьРеквизитыОрганизации(ДанныеЗаполнения);
	
	ОбновитьТекстПодсказкиДляФлажкаПолучатьУведомления();
	
	УправлениеФормой(ЭтаФорма);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстПолей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТекстПолей()
	
	Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
	Элементы.ЭлектроннаяПочтаДляПаролей.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодРосстатНажатие(Элемент)
	
	ОткрытьФормуРедактированияНаправленийСдачиОтчетности(ПолучателиФСГС, ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКодПФРНажатие(Элемент)
	
	ОткрытьФормуРедактированияРеквизита("КодПФР", "Код управления ПФР", КодПФР, "999-999");

КонецПроцедуры

&НаКлиенте
Процедура ПродлитьЛицензиюНа1СОтчетностьПриИзменении(Элемент)
	
	// Оформляем текст под галкой
	ОформитьПодсказкуДляГалкиПродлитьЛицензиюНа1СОтчетность();
	
	ВозможноБезбумажноеПродление = БезбумажноеПродлениеВозможно(ЭтотОбъект);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьСертификатПриИзменении(Элемент)
	
	Если ПродлитьСертификатИсходный И НЕ ПродлитьСертификат Тогда
		// Пользователь решил отказаться от переиздания сертификата
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ТекстВопроса = НСтр("ru = 'Отправка отчетов станет недоступной после окончания срока действия сертификата.
			|Все равно отказаться от продления сертификата?'");
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветПользователяНаПредложениеПереиздатьСертификат", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки[0].Значение);
	Иначе
		ПродлитьСертификатПриИзмененииЗавершение();
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереиздатьСертификатПриИзменении(Элемент)
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания(Истина);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМобильныйТелефонПриИзменении(Элемент)
	
	ОформитьПодсказкуДляГалкиИзменитьМобильныйТелефон();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФСРАРПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВФСРАРПриИзмененииЗавершение", ЭтотОбъект);
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВФСРАР", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР"), СдаватьВФСРАРИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьКодПФРИзОрганизацииНажатие(Элемент)
	
	КодПФР = КодПФР(ДанныеОрганизации);
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьКодРосстатаИзОрганизацииНажатие(Элемент)
	
	ПолучателиФСГС.Очистить();
	
	НоваяСтрокаНаправления = ПолучателиФСГС.Добавить();
	НоваяСтрокаНаправления.ТипПолучателя 	= ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС");
	НоваяСтрокаНаправления.КодПолучателя 	= КодРосстатаИзОрганизации(ДанныеОрганизации);
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВладельцаСертификатаПриИзменении(Элемент)

	// Если пользователь сначала изменил владельца ЭЦП, а потом решил отказаться от этого, то возвращаем все значения по владельцу в исходное состояние
	Если ИзменитьВладельцаСертификата Тогда
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
			ВладелецЭЦПИзменился = Истина;
		КонецЕсли;
	Иначе
		ВладелецЭЦПИзменился = Ложь;
		ОпределитьВладельцаЭЦП();	
	КонецЕсли;
	
	// После изменения владельца ЭЦП выполняем сравнение старых и новый значений
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	// Оформляем текст под галкой
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	
	// Определяем, нужно ли перездавать сертификат 
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставКонтролирующихОргановПриИзменении(Элемент)
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРПНПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВРПНПриИзмененииЗавершение", ЭтотОбъект);
	
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВРПН", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"), СдаватьВРПНИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФТСПриИзменении(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СдаватьВФТСПриИзмененииЗавершение", ЭтотОбъект);
	
	НаправлениеСдачиОтчетностиПодключено(
		"СдаватьВФТС", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС"), СдаватьВФТСИсходный, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СканПаспортНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьСкан();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСкан(ОповещениеОЗакрытии = Неопределено)
	
	МаксимальныйРазмерФайла = 10485760; // 10 МБ
	ДопустимыеТипыФайлов = "png;jpg;jpeg;pdf";
				
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	ПараметрыДобавления.Вставить("ВозвращатьРазмер", Истина);
	ПараметрыДобавления.Вставить("ДопустимыеТипыФайлов", ДопустимыеТипыФайлов);
			
	Оповещение = Новый ОписаниеОповещения("СканПаспортаПослеДобавленияФайлов", ЭтотОбъект, ОповещениеОЗакрытии);
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(Оповещение, УникальныйИдентификатор, "Выберите файл <Паспорта>", ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура СканПаспортаПослеДобавленияФайлов(Результат, ОповещениеОЗакрытии) Экспорт
	
	Если Результат.Выполнено И ЗначениеЗаполнено(Результат.ОписанияФайлов) Тогда
		
		ФайлСканПаспорт = Новый Структура;
		ФайлСканПаспорт.Вставить("Адрес", Результат.ОписанияФайлов[0].Адрес);
		Файл = Новый Файл(Результат.ОписанияФайлов[0].Имя);
		ФайлСканПаспорт.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ФайлСканПаспорт.Вставить("Расширение", СтрЗаменить(Файл.Расширение, ".", ""));

		СканПаспорт = Файл.Имя;
		
		Если ОповещениеОЗакрытии <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, Истина);
		КонецЕсли;
		
	Иначе
		
		СканПаспорт = НСтр("ru = 'Выберите файл'");
		ФайлСканПаспорт = Неопределено;
		
		Если ОповещениеОЗакрытии <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОЗакрытии, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранноеМестоХраненияКлючаПриИзменении(Элемент)
	
	ОпределитьИзменениеВМестеХраненияКлючей(ЭтотОбъект);
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	УстановитьЗаголовокКлючБудетСозданнойПрограммой();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗадатьНадписьНомерТелефонаПриПереходеВОблако(Форма)
	
	Если Форма.ЭтоПереходВОблако Тогда
		
		Подстрока1 = НСтр("ru = 'Номер телефона: '");
		Если НЕ ЗначениеЗаполнено(Форма.ИдентификаторПроверкиТелефонаДляПаролей) ИЛИ НЕ ЗначениеЗаполнено(Форма.ТелефонДляПаролей) Тогда
			Подстрока2 = Новый ФорматированнаяСтрока(НСтр("ru = 'не указан'"),,Новый Цвет(225, 40, 40),,"номер телефона");
		Иначе
			Подстрока2 = Новый ФорматированнаяСтрока(Форма.ТелефонДляПаролей,,,,"номер телефона");
		КонецЕсли;
		
		Форма.Элементы.НомерТелефонаПриПереходеВОблако.Видимость = Истина;
		Форма.НомерТелефонаПриПереходеВОблако = Новый ФорматированнаяСтрока(Подстрока1, Подстрока2);
		
	Иначе
		
		Форма.Элементы.НомерТелефонаПриПереходеВОблако.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеФлагаДобавитьЛицензиюКриптоПро(Форма)
	
	ЭтоКриптоПро = Форма.CryptoProCSPУстановлен
		И Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		
	ЭтоЛокальнаяУчетка = Форма.ЭтоПереходВКоробку ИЛИ НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса;
	
	ЛицензиюНельзяВычислить =
		СтрНайти(Форма.ИмяФормы, "ВнешняяОбработка") > 0 
		ИЛИ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
		
	ЛицензияЕсть = НЕ Форма.ЛицензияКриптоПроВключенаВСертификат И НЕ ЛицензиюНельзяВычислить И НЕ Форма.СрокЛицензииКриптоПроКонечный; 
	
	Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат = ЭтоКриптоПро И ЭтоЛокальнаяУчетка И НЕ ЛицензияЕсть;
		
	Форма.Элементы.ВключатьЛицензиюКриптоПроВСертификат.Видимость = Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат;
	
	Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Ложь;
	
	Если Форма.ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат Тогда
		
		Если Форма.ЛицензияКриптоПроВключенаВСертификат Тогда
  
			Если ЛицензиюНельзяВычислить
				ИЛИ Форма.СрокЛицензииКриптоПроКонечный Тогда
				
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Истина;
			Иначе
				Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
				Форма.ПредупреждатьПроНаличиеЛицензииКриптоПро = Истина;
			КонецЕсли;
			
		Иначе
			Форма.ВключатьЛицензиюКриптоПроВСертификат = Ложь;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьИзменениеВМестеХраненияКлючей(Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.ЭтоПереходВКоробку = Ложь;
	Форма.ЭтоПереходВОблако  = Ложь;
	
	Если Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		
		Если Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака Тогда
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro")
				ИЛИ Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
				
				Форма.ЭтоПереходВКоробку = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Если Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса") Тогда
				Форма.ЭтоПереходВОблако  = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Форма.ЭтоПереходВКоробку = Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака;
		
	КонецЕсли;
	
	// Убираем видимость одной из закладок для ЭП в облаке или перехода в облако.
	ЭтоЛокальнаяУчетнаяЗапись = НЕ Форма.ЭтоПереходВОблако И НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса;
	Элементы.ИнструкцияПоСозданиюКлючаЭЦП.Видимость = Форма.ЭтоПереходВКоробку ИЛИ ЭтоЛокальнаяУчетнаяЗапись;
		
	ЗадатьНадписьНомерТелефонаПриПереходеВОблако(Форма);
	ИзменитьОформлениеФлагаДобавитьЛицензиюКриптоПро(Форма);
	
	СравнитьКриптопровайдера(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриПереходеВОблакоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НомерТелефонаПриПереходеВОблакоОбработкаНавигационнойСсылкиЗавершение", 
		ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТелефонМобильный", ТелефонДляПаролей);
	ДополнительныеПараметры.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочтаДляПаролей);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПервичнаяНастройкаПолученияВременныхПаролей",
		ДополнительныеПараметры,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
	
&НаКлиенте
Процедура НомерТелефонаПриПереходеВОблакоОбработкаНавигационнойСсылкиЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТелефонДляПаролей = Результат.ТелефонМобильный;
		ЭлектроннаяПочтаДляПаролей = Результат.ЭлектроннаяПочта;
		
		ИдентификаторПроверкиТелефонаДляПаролей = Результат.ИдентификаторПроверкиТелефонаДляПаролей;
		ИдентификаторПроверкиЭлектроннойПочтыДляПаролей = Результат.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей;
		
		ЗадатьНадписьНомерТелефонаПриПереходеВОблако(ЭтотОбъект);
	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьУведомленияПриИзменении(Элемент)
	ОбновитьТекстПодсказкиДляФлажкаПолучатьУведомления();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТаблицаДанныхЗаявленияНаПодключениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Элемент.ТекущиеДанные.РеквизитРедактируется Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРеквизит 		= Элемент.ТекущиеДанные.ИзмененныйРеквизит;
	НаименованиеРеквизита 	= Строка(ТекущийРеквизит);
	
	// Если это реквизит, который отсутствует у организации, то он должен редактироваться напрямую в таблице.
	Если Элемент.ТекущиеДанные.ЭтоРеквизитНеХранящийсяВБазе Тогда
		
		Маска = Неопределено;
		Если ТекущийРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС") Тогда
			Маска = "999-999-999 99";
		ИначеЕсли ТекущийРеквизит = ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения") Тогда
			Маска = "999-999";
		КонецЕсли; 
		
		ИмяРеквизита = ИмяПеречисленияПараметрыПодключенияК1СОтчетности(ТекущийРеквизит);
		ЗадатьНовоеЗначениеРеквизиту(ИмяРеквизита, НаименованиеРеквизита, ЭтаФорма[ИмяРеквизита], Маска);
		
	ИначеЕсли Элемент.ТекущиеДанные.СодержитОшибку Тогда // Это реквизит Владельца ЭП
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВладелецРеквизита) Тогда
			ПоказатьЗначение(, Элемент.ТекущиеДанные.ВладелецРеквизита);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось определить сотрудника-владельца сертификата.
                                   |Укажите сотрудника-владельца сертификата на первом шаге помощника'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НапечататьЗаявление(Команда)
	
	СоздатьНовыйДокументЗаявление(3);
	
	ЗаявлениеПолучатель = КонтекстЭДОКлиент.ПолучитьПараметрСпецоператораКлиент(Спецоператор, Новый Структура("ЗаявлениеПолучатель"),
		СтруктураДанныхСпецоператорыСвязи.Макет).ЗаявлениеПолучатель;
	
	ПараметрыПечати = Новый Структура();
	ПараметрыПечати.Вставить("ЗаявлениеПолучатель", 				ЗаявлениеПолучатель);
	ПараметрыПечати.Вставить("ПереиздатьСертификат", 				ИзменилисьРеквизитыТребующиеПереизданияСертификата());
	ПараметрыПечати.Вставить("ИзменитьСоставКонтролирующихОрганов", ИзменитьСоставКонтролирующихОрганов);
	ПараметрыПечати.Вставить("ПродлитьЛицензиюНа1СОтчетность", 		ПродлитьЛицензиюНа1СОтчетность);
	
	МакетДляПечати = КонтекстЭДОКлиент.ПодготовитьМакет(ДокументЗаявление, ПараметрыПечати, "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьЗаявкиНаИзменениеРеквизитов", 
		"ПечатьЗаявкаНаИзменениеРеквизитов");
		
	КонтекстЭДОКлиент.НапечататьДокумент(МакетДляПечати, "Заявление на изменение реквизитов подключения к 1С-Отчетности");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьМастер(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаявлениеИОтправить(Команда = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ФайлСканПаспорт) И ИзменилисьПаспортныеДанныеВладельцаЭП() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьЗаявлениеИОтправить_ПослеПредупреждения", 
			ЭтотОбъект);
			
		Текст = НСтр("ru = 'В связи с изменением паспортных данных владельца сертификата перед
                      |подписанием заявления необходимо приложить скан-копию нового паспорта'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(НСтр("ru = 'Выбрать скан-копию паспорта'"));
		Кнопки.Добавить(НСтр("ru = 'Отправить без подписания'"));
		
		ПоказатьВопрос(ОписаниеОповещения, Текст, Кнопки);
		
	Иначе
		
		СвойстваТекущегоСертификата = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
		
		Если ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
			
			СвойстваТекущегоСертификата = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
			КоманднаяПанельМастерДалее(Неопределено, Истина);
			
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПодписатьЗаявлениеИОтправить_ПослеПоискаСертификатаПоОтпечатку", 
				ЭтотОбъект);
				
			Отпечаток = СвойстваТекущегоСертификата.Отпечаток;
			
			КриптографияЭДКОКлиент.НайтиСертификатПоОтпечатку(ОписаниеОповещения, Отпечаток, "MY",, Ложь);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаявлениеИОтправить_ПослеПредупреждения(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = НСтр("ru = 'Выбрать скан-копию паспорта'") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьЗаявлениеИОтправить_ПослеВыбораСкана", 
			ЭтотОбъект);
		
		ВыбратьСкан(ОписаниеОповещения);
		
	ИначеЕсли Ответ = НСтр("ru = 'Отправить без подписания'") Тогда
		 КоманднаяПанельМастерДалее();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаявлениеИОтправить_ПослеВыбораСкана(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Истина Тогда
		ПодписатьЗаявлениеИОтправить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаявлениеИОтправить_ПослеПоискаСертификатаПоОтпечатку(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.СертификатНайден Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьЗаявлениеИОтправить_ПослеПолученияBase64", 
			ЭтотОбъект, 
			Результат.СвойстваСертификата);
			
		КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(ОписаниеОповещения, Результат.СвойстваСертификата, Ложь);
		
	Иначе
		
		Если НЕ Результат.Свойство("ОписаниеОшибки") 
			ИЛИ Результат.Свойство("ОписаниеОшибки") И НЕ ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'На компьютере не удалось найти сертификат, которым выполняется подписание'"));		
		КонецЕсли;
		
		СообщитьОНевозможностиБезбумажногоПродления(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаявлениеИОтправить_ПослеПолученияBase64(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ДвДанныеСертификата = Base64Значение(Результат.СтрокаBase64);
		
		СвойстваТекущегоСертификата = Новый Структура(ВходящийКонтекст);
		СвойстваТекущегоСертификата.Вставить("Сертификат", ДвДанныеСертификата);
		
		КоманднаяПанельМастерДалее(Неопределено, Истина);
		
	Иначе
		СообщитьОНевозможностиБезбумажногоПродления(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиБезбумажногоПродления(Результат)
	
	Оповещение = Новый ОписаниеОповещения("СообщитьОНевозможностиБезбумажногоПродления_Завершение", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Продление с использованием электронной подписи невозможно по причине:
                         |%1
                         |
                         |Отправить заявление без подписания?'");
	
	ТекстВопроса = СтрШаблон(ТекстВопроса, Результат.ОписаниеОшибки);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНевозможностиБезбумажногоПродления_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КоманднаяПанельМастерДалее(Неопределено, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее_ВыборДействия_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат Тогда
		
		// Телефон мобильный
		Если ОператорПоддерживаетСМСУведомление Тогда
			ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
			ТелефонМобильныйИзменился = ТелефонМобильныйБезРазделителей <> ТелефонМобильныйИсходный;
		КонецЕсли;

		ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
		СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
		
		ЗаполнитьПараметрыЭДО();
		Если НЕ ОтображатьПодключениеЭДО Тогда
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;
		
		ПоказатьСледующуюСтраницу();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерДалее(Команда = Неопределено, БезбумажноеПродление = Ложь)
	
	Если НЕ ДокументЗаявление.ПодписатьЭП Тогда
		ДокументЗаявление.ПодписатьЭП = БезбумажноеПродление;
	КонецЕсли;

	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ОчиститьСообщения();
	МастерДалее = Истина;
	
	Если ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ВыборДействия Тогда
		
		// проверка организации
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Организация""'"), ,"Организация");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка органов
		Если ИзменитьСоставКонтролирующихОрганов Тогда
			ПроверитьКонтролирующиеОрганы(МастерДалее);
		КонецЕсли;
		
		// Владелец ЭЦП
		ПроверитьВладельцаЭП(МастерДалее);
		
		// если ни один флажек не отмечен - сообщаем об этом пользователю
		Если НЕ ПереиздатьСертификат 
			И НЕ ИзменитьВладельцаСертификата 
			И НЕ ПродлитьЛицензиюНа1СОтчетность 
			И НЕ ИзменитьСоставКонтролирующихОрганов
			И НЕ ИзменитьРеквизитыПодключенияК1СОтчетности 
			И НЕ ПродлитьСертификат 
			И НЕ ИзменитьМобильныйТелефон Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Вы не выбрали никакого действия'"), ,"");
			МастерДалее = Ложь;
		КонецЕсли;
		
		// проверка мобильного телефона
		Если ИзменитьМобильныйТелефон Тогда
			ПроверитьКорректностьМобильногоИПочты(МастерДалее);
		КонецЕсли;

		ПроверитьOIDЛицензииКриптоПро(МастерДалее);
		
		Если МастерДалее Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"КоманднаяПанельМастерДалее_ВыборДействия_Завершение", 
				ЭтотОбъект);
			
			ПроверитьКриптопровайдерИМестоХраненияКлючей(ОписаниеОповещения);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ПодключениеЭДО Тогда
		
		// подключение ЭДО
		Если ПодключитьЭДО Тогда
			
			// оператор ЭДО
			Если НЕ ЗначениеЗаполнено(ОператорЭДО) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Оператор ЭДО""'"), ,"ОператорЭДО");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// код ФНС
			Если ПустаяСтрока(КодНалоговогоОрганаЭДО) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код ФНС""'"), ,"КодНалоговогоОрганаЭДО");
				МастерДалее = Ложь;
			ИначеЕсли СтрДлина(СокрЛП(КодНалоговогоОрганаЭДО))<> 4 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код ФНС должен состоять из 4 цифр'"), ,"КодНалоговогоОрганаЭДО");
				МастерДалее = Ложь;
			КонецЕсли;
			
			// юр.адрес
			Если ПустаяСтрока(СтрЗаменить(АдресЮридическийЗначение,",","")) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните юридический адрес'"), ,"АдресЮридический");
				МастерДалее = Ложь;
			Иначе	
				КонтекстЭДОКлиент.ПроверитьАдресОрганизацииЗаявления(АдресЮридическийЗначение, "АдресЮридический", НСтр("ru = 'Юридический адрес'"), НСтр("ru = 'юридического адреса'"), МастерДалее);
			КонецЕсли;
			
		КонецЕсли;
		
		Если МастерДалее Тогда
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ЗаполнениеЗаявления Тогда
		
		ПроверитьЗаполнениеЗаявления(МастерДалее);
		Возврат;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда
		
		Если МастерДалее Тогда
			// создание заявления и его отправка
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ПолучениеРезультатаОтправкиЗаявления Тогда
		
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда
			
			ПараметрыОткрытияФормы = Новый Структура();
			ПараметрыОткрытияФормы.Вставить("ИзменитьРеквизитыПодключенияК1СОтчетности", ИзменитьРеквизитыПодключенияК1СОтчетности);
			
			Изменение = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
			
			ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
			ДополнительныеПараметры.Вставить("Организация", 			 Организация);
			ДополнительныеПараметры.Вставить("ЗначениеКопирования", 	 ДокументЗаявление.Ссылка);
			ДополнительныеПараметры.Вставить("ВидЗаявления", 			 Изменение);
			ДополнительныеПараметры.Вставить("ПараметрыОткрытияМастера", ПараметрыОткрытияФормы);
			
			ПрограммноеЗакрытие = Истина;
			
			// Закрываем это заявление и на основе него готовим еще одно (после закрытия) в процедуре 
			// ОткрытьФормуЗаявления_Завершение
			Закрыть(ДополнительныеПараметры);
			
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
			
			СформироватьИОтправитьЗаявление();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	Иначе
		ЭтаФорма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМастерНазад(Команда)
	ПоказатьПредыдущуюСтраницу();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнструкциюПоСозданиюКлючаЭЦП(Команда)
	
	КонтекстЭДОКлиент.ОткрытьИнструкциюИнструкциюПоСозданиюКлючаЭЦП(ВыбранноеМестоХраненияКлюча);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДиректора(Команда)
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	УстановитьНовогоВладельцаЭЦП();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлБухгалтера(Команда)
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	УстановитьНовогоВладельцаЭЦП();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда)
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	УстановитьНовогоВладельцаЭЦП();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#Область ПроверкаТелефонаИЭлектроннойПочты

&НаКлиенте
Процедура ПроверитьНомер(Команда)

	ОтправитьКодПодтвержденияТелефонДляПаролей();

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдрес(Команда)
	
	ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПовторноТелефон(Команда)
	
	ОтправитьКодПодтвержденияТелефонДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПовторноЭлектроннаяПочта(Команда)
	
	ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВключатьЛицензиюКриптоПроВСертификатПриИзменении_Завершение(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ВключатьЛицензиюКриптоПроВСертификат = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция БезбумажноеПродлениеВозможно(Форма)
	
	Возврат 
		(Форма.ПереиздатьСертификат ИЛИ Форма.ПродлитьЛицензиюНа1СОтчетность)
		И НЕ Форма.ЭтоПереходВКоробку И НЕ Форма.ЭтоПереходВОблако И НЕ Форма.ТипКриптопровайдераИзменился
		И Форма.ВладелецЭЦП = Форма.ВладелецЭЦПИсходный
		И ЗначениеЗаполнено(Форма.ВладелецЭЦП);
	
КонецФункции
	
&НаКлиенте
Процедура ПроверитьКриптопровайдерИМестоХраненияКлючей(ВыполняемоеОповещение)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьКриптопровайдерИМестоХраненияКлючей_ПослеУстановкиКомпоненты", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Если КомпонентаУстановлена ИЛИ ЭтоПереходВОблако ИЛИ ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ЭтоПереходВКоробку Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	Иначе
		ПроверитьНаличиеКриптопровайдера(ОписаниеОповещения, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКриптопровайдерИМестоХраненияКлючей_ПослеУстановкиКомпоненты(Результат, ВходящийКонтекст) Экспорт
	
	ВыбранCryptoPro = ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
	ВыбранVipNet    = ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
	
	НеУстановленНиОдинКриптопровайдер    = ВыбранCryptoPro И НЕ CryptoProCSPУстановлен ИЛИ ВыбранVipNet И НЕ ViPNetCSPУстановлен;
	УстановленыОбаКриптопровайдера       = (ВыбранCryptoPro ИЛИ ВыбранVipNet) И CryptoProCSPУстановлен И ViPNetCSPУстановлен И НЕ ИгнорироватьКонфликт;
	ВыбранНеустановленныйКриптопровайдер = ВыбранCryptoPro И НЕ CryptoProCSPУстановлен ИЛИ ВыбранVipNet И НЕ ViPNetCSPУстановлен;
	
	МастерДалее = Истина;
	
	Если НеУстановленНиОдинКриптопровайдер Тогда
		
		// Ни одного криптопровайдера
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ЭтоОткрытиеИзВторичногоМастера", Истина);
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.УстановкаКриптопровайдера", ДополнительныеПараметры,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		МастерДалее = Ложь;
		
	ИначеЕсли УстановленыОбаКриптопровайдера Тогда
		
		// Два криптопровайдера
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеПоказаПредупрежденияОКонфликте", 
			ЭтотОбъект);
			
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("КриптопровайдерПриКонфликте", ВыбранноеМестоХраненияКлюча);
		ДополнительныеПараметры.Вставить("ЭтоЗаявлениеНаИзменение", 	Истина);
			
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонфликтКриптопровайдеров",
			ДополнительныеПараметры,
			,
			,
			,
			,
			ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		МастерДалее = Ложь;
	
	ИначеЕсли ВыбранНеустановленныйКриптопровайдер Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный криптопровайдер не установлен на рабочий компьютер'"), ,"ВыбранноеМестоХраненияКлюча");
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		Если ЕстьВыборМестаХраненияКлючей И НЕ ЗначениеЗаполнено(ВыбранноеМестоХраненияКлюча) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите место хранения ключа'"), ,"ВыбранноеМестоХраненияКлюча");
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если ЭтоПереходВОблако И НЕ ЗначениеЗаполнено(ИдентификаторПроверкиТелефонаДляПаролей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите и подтвердите номер телефона, на который будут приходить SMS с паролем для отправки отчетности.'"),,"НомерТелефонаПриПереходеВОблако");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, МастерДалее); 

КонецПроцедуры

&НаКлиенте
Процедура ПослеПоказаПредупрежденияОКонфликте(Результат, ВходящийКонтекст) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ИгнорироватьКонфликт")
		И Результат.ИгнорироватьКонфликт Тогда
		
		ИгнорироватьКонфликт = Истина;
		УстановитьЗаголовокКлючБудетСозданнойПрограммой();
		
		КоманднаяПанельМастерДалее(Неопределено);
		
	КонецЕсли;

КонецПроцедуры
	
&НаКлиенте
Процедура ПроверитьВладельцаЭП(МастерДалее)
	
	// проверка заполненности сведений о руководителе
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель")
		И НЕ ЗначениеЗаполнено(Руководитель) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите руководителя'"), ,"ДекорацияРуководитель");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о бухгалтере
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер")
		И НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите бухгалтера'"), ,"ДекорацияГлБухгалтер");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// проверка заполненности сведений о сотруднике
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И НЕ ЗначениеЗаполнено(СотрудникВыбор) Тогда 
		
		ТекстПредупреждения = НСтр("ru = 'Переиздание сертификата требует обязательного указания сотрудника-владельца сертификата. 
                                    |Установите флажок ""Изменение сотрудника-владельца сертификата"" и выберите владельца сертификата'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения,,"ИзменитьВладельцаСертификата");
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	// проверка заполненности Владельца ЭЦП
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И ВладелецЭЦП = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите сотрудника-владельца сертификата'"), ,"СотрудникВыбор");
		МастерДалее = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьМобильногоИПочты(МастерДалее)
	
	Если ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		
		ПолучатьУведомленияИзменен = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйЗаполнен(ТелефонМобильныйИсходный)
			И Не ПолучатьУведомления;
		ТелефонДляПаролейЗаполнен  = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйЗаполнен(ТелефонДляПаролей);
		ТелефонДляПаролейИзменен   = ПроверкаТелефонДляПаролей.ИсходноеЗначение <> ТелефонДляПаролей И ПроверкаТелефонДляПаролей.ЗначениеВведено;
		ЭлектроннаяПочтаДляПаролейИзменена = 
			ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение <> ЭлектроннаяПочтаДляПаролей 
			И (ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено ИЛИ Не ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей));
		
		Если Не ТелефонДляПаролейИзменен И Не ЭлектроннаяПочтаДляПаролейИзменена И НЕ ПолучатьУведомленияИзменен И НЕ ТелефонМобильныйИзменился
				ИЛИ НЕ ТелефонДляПаролейЗаполнен Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите новый номер телефона или новую электронную почту, либо снимите флажок'"),, "ИзменитьМобильныйТелефон");
			МастерДалее = Ложь;
		ИначеЕсли ТелефонДляПаролейИзменен И Не ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Подтвердите номер мобильного телефона'"),, "ТелефонДляПаролей");
			МастерДалее = Ложь;
		ИначеЕсли ЭлектроннаяПочтаДляПаролейИзменена И Не ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено И ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Подтвердите адрес электронной почты'"),, "ЭлектроннаяПочтаДляПаролей");
			МастерДалее = Ложь;
		КонецЕсли;
	Иначе
		Если ПолучатьУведомления Тогда
			ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
			Если ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите новый номер мобильного телефона'"),, "ТелефонМобильный");
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ТелефонМобильныйБезРазделителей, 11, Истина) Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Мобильный телефон должен иметь формат 
					|+7 XXX XXX-XX-XX'"), ,"ТелефонМобильный");
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтролирующиеОрганы(МастерДалее)
	
	// коды ФНС
	Если СдаватьВФНС И ПолучателиФНС.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды ФНС'"), ,"СдаватьВФНС");
		МастерДалее = Ложь;
	КонецЕсли;
	
	// код отделения ПФР
	Если СдаватьВПФР Тогда
		КодПФРВОрганизации = КодПФР(ДанныеОрганизации);
		Если ПустаяСтрока(СтрЗаменить(КодПФР,"-","")) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код отделения ПФР""'"), ,"СдаватьВПФР");
			МастерДалее = Ложь;
		ИначеЕсли СтрДлина(СокрЛП(КодПФР))<> 7 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код отделения ПФР должен состоять из 6 цифр'"), ,"СдаватьВПФР");
			МастерДалее = Ложь;
		ИначеЕсли СокрЛП(КодПФР) <> КодПФРВОрганизации Тогда
			ТекстСообщения = НСтр("ru = 'Код отделения ПФР не совпадает с кодом, указанным в организации (%1)'");
			Если ПустаяСтрока(СтрЗаменить(КодПФРВОрганизации, "-", "")) Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%1)", "");
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "(%1)", "(" + КодПФРВОрганизации + ")");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"СдаватьВПФР");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// код органа Росстата
	Если СдаватьВРосстат Тогда
		
		Если ПолучателиФСГС.Количество() = 0 Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните коды органа Росстата'"), ,"СдаватьВРосстат");
			МастерДалее = Ложь;
			
		ИначеЕсли ПолучателиФСГС.Количество() > 0 Тогда
			
			Для каждого Получатель Из ПолучателиФСГС Цикл
				
				Если ПустаяСтрока(СтрЗаменить(Получатель.КодПолучателя,"-","")) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код органа Росстата""'"), ,"СдаватьВРосстат");
					МастерДалее = Ложь;
				ИначеЕсли СтрДлина(СокрЛП(Получатель.КодПолучателя)) < 5 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Код органа Росстата должен состоять как минимум из 4 цифр'"), ,"СдаватьВРосстат");
					МастерДалее = Ложь;
				ИначеЕсли КонтекстЭДОКлиент.НайденыЗапрещенныеСимволы(Получатель.КодПолучателя, НСтр("ru = 'Код органа Росстата'"), "СдаватьВРосстат") Тогда
					МастерДалее = Ложь;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (СдаватьВФНС ИЛИ СдаватьВПФР ИЛИ СдаватьВФСС ИЛИ СдаватьВРосстат ИЛИ СдаватьВФСРАР ИЛИ СдаватьВРПН ИЛИ СдаватьВФТС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите хотя бы один контролирующий орган, в который будет сдаваться отчетность'")
			, ,"ИзменитьСоставКонтролирующихОрганов");
		МастерДалее = Ложь;
	ИначеЕсли НЕ СдаватьВФНС И НЕ СдаватьВПФР Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Среди контролирующих органов, в которые будет сдаваться отчетность, должены быть ФНС или ПФР'")
			, ,"ИзменитьСоставКонтролирующихОрганов");
		МастерДалее = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьКриптопровайдераИМодельХраненияКлючей(Форма)
	
	ОпределитьВозможностьВыбораМестаХраненияКлючей(Форма);
	
	УстановленТолькоОдинКриптопровайдер = Форма.КомпонентаУстановлена 
		И (Форма.ViPNetCSPУстановлен ИЛИ Форма.CryptoProCSPУстановлен)
		И НЕ (Форма.ViPNetCSPУстановлен И Форма.CryptoProCSPУстановлен);
		
	// Определяем значение по-умолчанию
	Если УстановленТолькоОдинКриптопровайдер 
		И (НЕ Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса ИЛИ НЕ Форма.ЭтоУчетнаяЗаписьВМоделиСервиса) Тогда
		
		// Нет выбора 
		Если Форма.ViPNetCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
		ИначеЕсли Форма.CryptoProCSPУстановлен Тогда
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		КонецЕсли;
		
	Иначе
		
		// Есть выбор
		Если Форма.ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса");
		Иначе
			// Случай, когда нет компоненты или два криптопровайдера.
			Форма.ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	ОпределитьИзменениеВМестеХраненияКлючей(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереИнициализация()
	
	ЗаполнитьПеременныеДляПроверкиТелефонаИЭлектроннойПочты(ЭтаФорма);
	
	ДоступнаЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно();
	
	ТекущаяДатаСервер = ТекущаяДатаСеанса();
	
	// Цвета
	ЧерныйЦвет 			= Новый Цвет(65, 48, 3);
	СерыйЦвет 			= Новый Цвет(87, 87, 87);
	СинийЦвет 			= Новый Цвет(28, 85, 174);
	КрасныйЦвет 		= Новый Цвет(178,34, 34);
	ЦветТекстаФормы 	= Новый Цвет(65, 48, 3);
	СинийЦветПодсказки 	= Новый Цвет(70, 130,180);

	// Данные службы поддержки - контактные данные ЗАО "Калуга Астрал"
	ТелефонСлужбыПоддержки = "8-800-700-86-68";
	АдресЭлектроннойПочтыСлужбыПоддержки = "1c@astralnalog.ru";

	КоличествоДнейЗаКотороеНужноПредупреждатьОбИстеченииСрока = 30;
	
	ПрограммноеЗакрытие	= Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьОрганизацию(Параметры)
	
	// Получаем значение параметров
	Организация = Параметры.Организация;
	Реквизит    = Параметры.Реквизит;
	
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	Если ИспользуетсяОднаОрганизация Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Реквизит) Тогда 
			Организация = Реквизит.Организация;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОсновнаяОрганизация();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаКлиенте
Процедура ПроставитьПризнакОшибкиИДоступностиДляРедактированияКонтролируемыхРеквизитов()
	
	// НомерОсновнойПоставки1с
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если НомерОсновнойПоставки1сИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		СодержитОшибку 			= ПустаяСтрока(НомерОсновнойПоставки1с);
		РеквизитРедактируется 	= Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
		
	// телефон организации
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ТелефонОсновнойИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		СодержитОшибку = СтрДлина(СокрЛП(ТелефонОсновной)) = 0;
		РеквизитРедактируется 	= Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ТелефонДополнительный
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ЭлектроннаяПочта
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьРеквизитыПодключенияК1СОтчетности И ЭлектроннаяПочтаИзменилась Тогда
		СодержитОшибку = НЕ КонтекстЭДОКлиент.ЭлектроннаяПочтаВведенаКорректно(
				ЭлектроннаяПочта,
				ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение"),
				Ложь);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ВладелецЭЦП
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = НЕ ЗначениеЗаполнено(ВладелецЭЦП);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// Должность. 
	// Позволяем редактировать должность из таблицы только если она не хранится в базе.
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ВладелецЭЦПДолжностьИзменилась И ИзменитьРеквизитыПодключенияК1СОтчетности 
		ИЛИ ПереиздатьСертификат 
		ИЛИ ИзменитьВладельцаСертификата Тогда
		
		Если ЭтоЮридическоеЛицо И ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			СодержитОшибку = Истина;
		КонецЕсли;
		РеквизитРедактируется = Истина;
		
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ВладелецЭЦПСНИЛС
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ВладелецЭЦПСНИЛСИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности 
		ИЛИ ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПСНИЛС, "-","")) Тогда
			СодержитОшибку = Истина;
		Иначе	
			Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС) Тогда
				СодержитОшибку = Истина;
			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
				СодержитОшибку = Истина;
			КонецЕсли;
		КонецЕсли;
		
		РеквизитРедактируется 	= Истина;
		
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// Дата рождения
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаРождения);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// Пол
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = НЕ ЗначениеЗаполнено(ВладелецЭЦППол);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// Гражданство
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат  Тогда
		СодержитОшибку = НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство)
			ИЛИ (НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.КодАльфа2Заполнен(ВладелецЭЦПГражданство)
			И ВладелецЭЦПГражданство <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия"));
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ВладелецЭЦПВидДокумента
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = ПустаяСтрока(ВладелецЭЦПВидДокумента);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ВладелецЭЦПСерияДокумента
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = ПустаяСтрока(ВладелецЭЦПСерияДокумента) ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦПВидДокумента);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ВладелецЭЦПНомерДокумента
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПНомерДокумента");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = ПустаяСтрока(ВладелецЭЦПНомерДокумента);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ВладелецЭЦПКемВыданДокумент
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = ПустаяСтрока(ВладелецЭЦПКемВыданДокумент);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);
	
	// ВладелецЭЦПДатаВыдачиДокумента
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
			СодержитОшибку = Истина;
		ИначеЕсли ВладелецЭЦПДатаВыдачиДокумента > ТекущаяДатаСервер ИЛИ Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			СодержитОшибку = Истина;
		КонецЕсли;
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);

	// Код подразделения. Только для паспорта РФ.
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
			КодПодразделенияБезТире = СтрЗаменить(ВладелецЭЦПКодПодразделения, "-","");
			Если ПустаяСтрока(КодПодразделенияБезТире) Тогда
				СодержитОшибку = Истина;
			ИначеЕсли СтрДлина(ВладелецЭЦПКодПодразделения) <> 7
				ИЛИ НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
				СодержитОшибку = Истина;
			КонецЕсли;
		КонецЕсли;
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);

	// ВладелецЭЦПМестоРождения
	ИзмененныйРеквизит		= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения");
	СодержитОшибку 			= Ложь;
	РеквизитРедактируется 	= Ложь;
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		СодержитОшибку = ПустаяСтрока(ВладелецЭЦПМестоРождения);
		РеквизитРедактируется = Истина;
	КонецЕсли;
	ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку, РеквизитРедактируется);	

КонецПроцедуры

&НаКлиенте
Функция ЭтоРеквизитНеХранящийсяВБазе(ПроверяемыйРеквизит)

	Возврат РеквизитыНеХранящиесяВБазе.Найти(ПроверяемыйРеквизит) <> Неопределено;

КонецФункции

&НаКлиенте
Процедура ОтметитьНеХранящиесяРеквизиты()
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаявленияНаПодключение Цикл
		
		Если ЭтоРеквизитНеХранящийсяВБазе(СтрокаТаблицы.ИзмененныйРеквизит) Тогда
			СтрокаТаблицы.ЭтоРеквизитНеХранящийсяВБазе = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПризнакОшибкиИДоступностиДляРедактирования(ИзмененныйРеквизит, СодержитОшибку = Ложь, РеквизитРедактируется = Ложь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИзмененныйРеквизит", ИзмененныйРеквизит);
	
	СтрокиТаблицы = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтрокаТаблицы.СодержитОшибку 		= СодержитОшибку;
		СтрокаТаблицы.РеквизитРедактируется = РеквизитРедактируется;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеЗаявления(МастерДалее)
	
	// проверка регистрационного номер
	Если НомерОсновнойПоставки1сИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если ПустаяСтрока(НомерОсновнойПоставки1с)  Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С");
			ТекстОшибки 		= НСтр("ru = 'Заполните регистрационный номер программы'");
			ВывестиОшибку(ТекстОшибки);
			
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// полное наименование
	Если ПолноеНаименованиеИзменилось И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если ПустаяСтрока(ПолноеНаименование) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование");
			ТекстОшибки 		= НСтр("ru = 'Заполните полное наименование организации'");
			ВывестиОшибку(ТекстОшибки);
			
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		
		// ИНН
		Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(ИНН) Тогда 
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН");
				ТекстОшибки 		= НСтр("ru = 'Заполните ИНН'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,10) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН");
				ТекстОшибки 		= НСтр("ru = 'ИНН должен состоять из 10 цифр'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// КПП
		Если КППИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(КПП) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП");
				ТекстОшибки 		= НСтр("ru = 'Заполните КПП'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
			ИначеЕсли НЕ (КонтекстЭДОКлиент.ПроверитьКПП(КПП)) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП");
				ТекстОшибки 		= НСтр("ru = 'КПП должен состоять из 9 цифр'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// ОГРН
		Если ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности И НЕ ЭтоНотариусАдвокатИлиГКФХ Тогда
			Если ПустаяСтрока(ОГРН) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН");
				ТекстОшибки 		= НСтр("ru = 'Заполните ОГРН'");
				ВывестиОшибку(ТекстОшибки);

				МастерДалее = Ложь;
			ИначеЕсли НЕ ПустаяСтрока(ОГРН) И НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,13)) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН");
				ТекстОшибки 		= НСтр("ru = 'ОГРН должен состоять из 13 цифр'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// ИНН
		Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
			Если ПустаяСтрока(ИНН) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН");
				ТекстОшибки 		= НСтр("ru = 'Заполните ИНН'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
			ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ИНН,12) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН");
				ТекстОшибки 		= НСтр("ru = 'ИНН должен состоять из 12 цифр'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// ОГРН
		Если ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности И НЕ ЭтоНотариусАдвокатИлиГКФХ Тогда
			Если ПустаяСтрока(ОГРН) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН");
				ТекстОшибки 		= НСтр("ru = 'Заполните ОГРН'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
				
			ИначеЕсли НЕ ПустаяСтрока(ОГРН) И НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,15, Истина)) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН");
				ТекстОшибки 		= НСтр("ru = 'ОГРНИП должен состоять из 15 цифр'");
				ВывестиОшибку(ТекстОшибки);
				
				МастерДалее = Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// регистрационный номер в ПФР
	Если СдаватьВПФР И ИзменитьСоставКонтролирующихОрганов Тогда
		Если ПустаяСтрока(СтрЗаменить(РегНомерПФР,"-","")) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР");
			ТекстОшибки 		= НСтр("ru = 'Заполните регистрационный номер в ПФР'");
			ВывестиОшибку(ТекстОшибки);
			
			МастерДалее = Ложь;
		ИначеЕсли НЕ КонтекстЭДОКлиент.ПроверитьРегистрационныйНомерПФР(РегНомерПФР, Истина) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР");
			ТекстОшибки 		= НСтр("ru = 'Регистрационный номер в ПФР должен состоять из 12 цифр (ХХХ-ХХХ-ХХХХХХ)'");
			ВывестиОшибку(ТекстОшибки);
			
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// юридический адрес
	Если ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ ПереиздатьСертификат Тогда
		// Проверяем при переиздании сертификата, так как в сертификат идут части адреса
		КонтекстЭДОКлиент.ПроверитьАдресОрганизацииЗаявления(АдресЮридическийЗначение, "АдресЮридический", НСтр("ru = 'Юридический адрес'"), НСтр("ru = 'юридического адреса'"), МастерДалее);
	КонецЕсли;
	
	// телефон организации
	Если ТелефонОсновнойИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		Если СтрДлина(СокрЛП(ТелефонОсновной)) = 0 Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной");
			ТекстОшибки 		= НСтр("ru = 'Заполните телефон организации'");
			ВывестиОшибку(ТекстОшибки);
				
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// электронная почта (теперь обязательна)
	Если ИзменитьРеквизитыПодключенияК1СОтчетности И ЭлектроннаяПочтаИзменилась Тогда
		Если НЕ КонтекстЭДОКлиент.ЭлектроннаяПочтаВведенаКорректно(
				ЭлектроннаяПочта,
				ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение")) Тогда
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СдаватьВФСРАР И ИзменитьСоставКонтролирующихОрганов Тогда
		
		Если НЕ ЗначениеЗаполнено(КодРегионаФСРАР) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР");
			ТекстОшибки 		= НСтр("ru = 'Заполните регион в адресе организации'");
			ВывестиОшибку(ТекстОшибки);
			
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если МастерДалее = Истина Тогда
			
			РегионЮрАдреса = СведенияОбАдресе(АдресЮридическийЗначение).КодРегиона;
			
			Если КодРегионаФСРАР <> РегионЮрАдреса И ЗначениеЗаполнено(РегионЮрАдреса) Тогда
				
				НаименованиеРегионаЮрАдреса = НаименованиеСубъектаРФ(Число(РегионЮрАдреса));
				
				КодРегионаСНаименованием = Формат(Число(РегионЮрАдреса), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;") + 
					?(ЗначениеЗаполнено(НаименованиеРегионаЮрАдреса), " - ", "") + НаименованиеРегионаЮрАдреса;
					
				ДополнительныеПараметры = Новый Структура("МастерДалее", МастерДалее);
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ЗавершениеПодтвержденияОтличающегосяКодаФСРАР", 
					ЭтотОбъект, 
					ДополнительныеПараметры);
					
				ТекстВопроса = "Регион заявки для Росалкогольрегулирования отличается от указанного в юридическом адресе (""" + 
					КодРегионаСНаименованием + 
					"""). Продолжить?";
				
				ПоказатьВопрос(
					ОписаниеОповещения, 
					ТекстВопроса, 
					РежимДиалогаВопрос.ДаНет, 
					0, 
					КодВозвратаДиалога.Да);
				
			Иначе
				ПроверитьДанныеВладельцаЭП(МастерДалее);
			КонецЕсли;
		Иначе
			ПроверитьДанныеВладельцаЭП(МастерДалее);
		КонецЕсли;
	Иначе
		ПроверитьДанныеВладельцаЭП(МастерДалее);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияОбАдресе(Адрес) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	
	Возврат РаботаСАдресами.СведенияОбАдресе(Адрес, ДополнительныеПараметры);
	
КонецФункции 

&НаСервере
Процедура ПроверитьOIDЛицензииКриптоПро(МастерДалее)
	
	Если ВключатьЛицензиюКриптоПроВСертификат Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		OIDЛицензииКриптоПро = КонтекстЭДОСервер.ПолучитьOIDЛицензииКриптоПро();
		
		Если OIDЛицензииКриптоПро = "" Тогда
			
			МастерДалее = Ложь;
			ТекстОшибки = НСтр("ru = 'Возможность выдачи лицензий на КриптоПро CSP временно недоступна. 
                                |Повторите попытку позже или отправьте заявление на сертификат без включения лицензии на КриптоПро CSP в его состав.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПодтвержденияОтличающегосяКодаФСРАР(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МастерДалее = РезультатВопроса = КодВозвратаДиалога.Да;
	ПроверитьДанныеВладельцаЭП(МастерДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПодтвержденияВыбораРегионаФСРАР(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МастерДалее = ДополнительныеПараметры.МастерДалее;
	Ответ = РезультатВопроса;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		МастерДалее = Ложь;
		ПроверитьДанныеВладельцаЭП(МастерДалее);
	Иначе
		ПроверитьДанныеВладельцаЭП(МастерДалее);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанныеВладельцаЭП(МастерДалее)
	
	// фамилия
	Если ПустаяСтрока(ВладелецЭЦПФамилия) И (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) Тогда
		
		ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП");
		ТекстОшибки 		= НСтр("ru = 'Заполните фамилию сотрудника-владельца ЭП'");
		ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);

		МастерДалее = Ложь;
		
	КонецЕсли;
	
	// имя
	Если ПустаяСтрока(ВладелецЭЦПИмя) И (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) Тогда
		
		ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП");
		ТекстОшибки 		= НСтр("ru = 'Заполните имя сотрудника-владельца ЭП'");
		ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
		
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	// СНИЛС
	Если ВладелецЭЦПСНИЛСИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности 
		ИЛИ ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		
		Если ПустаяСтрока(СтрЗаменить(ВладелецЭЦПСНИЛС, "-","")) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС");
			ТекстОшибки 		= НСтр("ru = 'Заполните СНИЛС сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
			
		Иначе	
			Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС");
				ТекстОшибки 		= НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'");
				ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
				
				МастерДалее = Ложь;
			
			ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС");
				ТекстОшибки 		= НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'");
				ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
				
				МастерДалее = Ложь;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Дата рождения
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаРождения) Тогда
		
		ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения");
		ТекстОшибки 		= НСтр("ru = 'Заполните дату рождения сотрудника-владельца ЭП'");
		ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
		
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	// Пол
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И НЕ ЗначениеЗаполнено(ВладелецЭЦППол) Тогда
		
		ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол");
		ТекстОшибки 		= НСтр("ru = 'Заполните пол сотрудника-владельца ЭП'");
		ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
		
		МастерДалее = Ложь;
		
	КонецЕсли;	
	
	// должность
	Если ВладелецЭЦПДолжностьИзменилась И ИзменитьРеквизитыПодключенияК1СОтчетности 
		ИЛИ ПереиздатьСертификат ИЛИ ИзменитьВладельцаСертификата Тогда
		Если ЭтоЮридическоеЛицо И ПустаяСтрока(ВладелецЭЦПДолжность) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность");
			ТекстОшибки 		= НСтр("ru = 'Заполните должность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	// Гражданство
	Если (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) И НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство) Тогда
		
		ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство");
		ТекстОшибки 		= НСтр("ru = 'Заполните гражданство сотрудника-владельца ЭП'");
		ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
		
		МастерДалее = Ложь;
		
	ИначеЕсли (ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат) 
		И НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.КодАльфа2Заполнен(ВладелецЭЦПГражданство)
		И ВладелецЭЦПГражданство <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия") Тогда
		
		ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство");
		ТекстОшибки 		= НСтр("ru = 'Заполните код альфа-2 у страны, указанной в качестве гражданства сотрудника-владельца ЭП'");
		ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
		
		МастерДалее = Ложь;
	КонецЕсли;
	
	ЭтоПаспортРФ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента);
	
	// документ, удостоверяющий личность
	Если ИзменитьВладельцаСертификата ИЛИ ПереиздатьСертификат Тогда
		
		// Вид документа.
		Если ПустаяСтрока(ВладелецЭЦПВидДокумента) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента");
			ТекстОшибки 		= НСтр("ru = 'Заполните документ, удостоверяющий личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(КонтекстЭДОКлиент.ПолучитьКодВидаДокументаФизическогоЛица(ВладелецЭЦПВидДокумента)) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента");
			ТекстОшибки 		= НСтр("ru = 'Заполните код вида документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		КонецЕсли;		
		
		// серия
		Если ПустаяСтрока(ВладелецЭЦПСерияДокумента) И НЕ КонтекстЭДОКлиент.ПроверитьСериюДокумента(ВладелецЭЦПВидДокумента, ВладелецЭЦПСерияДокумента) И ЭтоПаспортРФ Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента");
			ТекстОшибки 		= НСтр("ru = 'Заполните серию документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		КонецЕсли;
		
		// номер
		Если ПустаяСтрока(ВладелецЭЦПНомерДокумента) И ЭтоПаспортРФ Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПНомерДокумента");
			ТекстОшибки 		= НСтр("ru = 'Заполните номер документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		КонецЕсли;
		
		Если НЕ ЭтоПаспортРФ И ПустаяСтрока(ВладелецЭЦПСерияДокумента) И  ПустаяСтрока(ВладелецЭЦПНомерДокумента) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента");
			ТекстОшибки 		= НСтр("ru = 'Заполните серию либо номер документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;

		КонецЕсли;
		
		// дата выдачи
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента");
			ТекстОшибки 		= НСтр("ru = 'Заполните дату выдачи документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		ИначеЕсли ВладелецЭЦПДатаВыдачиДокумента > ТекущаяДатаСервер ИЛИ Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента");
			ТекстОшибки 		= НСтр("ru = 'Некорректно указана дата выдачи документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		КонецЕсли;
		
		// кем выдан
		Если ПустаяСтрока(ВладелецЭЦПКемВыданДокумент) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент");
			ТекстОшибки 		= НСтр("ru = 'Заполните поле ""Кем выдан"" документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		КонецЕсли;
		
		// дата выдачи
		Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДатаВыдачиДокумента) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента");
			ТекстОшибки 		= НСтр("ru = 'Заполните дату выдачи документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		ИначеЕсли Год(ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда	
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента");
			ТекстОшибки 		= НСтр("ru = 'Некорректно указана дата выдачи документа, удостоверяющего личность сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		КонецЕсли;
		
		// Код подразделения. Только для паспорта РФ.
		Если ЭтоПаспортРФ Тогда
			КодПодразделенияБезТире = СтрЗаменить(ВладелецЭЦПКодПодразделения, "-","");
			Если ПустаяСтрока(КодПодразделенияБезТире) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения");
				ТекстОшибки 		= НСтр("ru = 'Заполните код подразделения, выдавшего документ, удостоверяющего личность сотрудника-владельца ЭП'");
				ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
				
				МастерДалее = Ложь;
				
			ИначеЕсли СтрДлина(ВладелецЭЦПКодПодразделения) <> 7
				ИЛИ НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
				
				ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения");
				ТекстОшибки 		= НСтр("ru = 'Некорректно указан код подразделения, выдавшего документ, удостоверяющего личность сотрудника-владельца ЭП. 
					|Не соответствует маске ХХХ-ХХХ, где X – любая цифра'");
				ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
				
				МастерДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Место рождения
		Если ПустаяСтрока(ВладелецЭЦПМестоРождения) Тогда
			
			ИзмененныйРеквизит 	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения");
			ТекстОшибки 		= НСтр("ru = 'Заполните место рождения сотрудника-владельца ЭП'");
			ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит);
			
			МастерДалее = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем, что пользователь отправляет не пустое заявление
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЭтотПараметрИзменился", Истина);
	ПараметрыОтбора.Вставить("ВыделятьСтрокуЖелтым", Истина);
	
	Если ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не изменено ни одной настройки подключения к 1С-Отчетности'"); 
		Поле 		= "ТаблицаДанныхЗаявленияНаПодключение[0].ЗначениеРеквизита";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле);
		
		МастерДалее = Ложь;
		
	КонецЕсли;
	
	Если МастерДалее Тогда
		
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеГлБухгалтера");
		ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
		
		// создание документа заявления
		СоздатьНовыйДокументЗаявление(2);
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
		
		// Если переиздания сертификата не требуется, то пропускаем страницу ИнструкцияПоСозданиюКлючаЭЦП
		Если 
			НЕ ПереиздатьСертификат 
			ИЛИ ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ ЭтоПереходВКоробку
			ИЛИ ЭтоПереходВОблако Тогда
			
			СформироватьИОтправитьЗаявление();
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МастерДалее Тогда
		ПоказатьСледующуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибку(ТекстОшибки, ИзмененныйРеквизит = Неопределено)

	Если ИзмененныйРеквизит = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	Иначе
	
		Отбор = Новый Структура();
		Отбор.Вставить("ИзмененныйРеквизит", 	ИзмененныйРеквизит);
		Отбор.Вставить("ВыделятьСтрокуЖелтым", 	Ложь);
		
		Строки = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			
			ИндексСтроки = ТаблицаДанныхЗаявленияНаПодключение.Индекс(Строки[0]);
			ИндексСтроки = Формат(ИндексСтроки, "ЧГ=0");
			
			Поле = "ТаблицаДанныхЗаявленияНаПодключение[%1].ЗначениеРеквизита";
			Поле = СтрЗаменить(Поле, "%1", ИндексСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , Поле);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		
		Если Источник = Организация ИЛИ Параметр = Организация Тогда
			
			ОбновитьРеквизитыОрганизации(Истина);
			
			СравнитьТекущиеРеквизитыПодключенияСИсходными();
			СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
			ОформитьЭлементыФормыНаПервомШаге(ДанныеОрганизации);
			
			//Если изменились реквизиты, то взводим галку ИзменитьРеквизитыПодключенияК1СОтчетности
			ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
			Если ИзменилисьРеквизитыПодключенияК1СОтчетности Тогда
				ИзменитьРеквизитыПодключенияК1СОтчетности = Истина;
			КонеЦесли;
			
			УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
			
			// Обновляем данные на второй закладке только если мы находимся на этой закладке
			Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
				СформироватьТаблицуДляПодтвержденияДанных();
			КонецЕсли;
			
			ЭтаФорма.Активизировать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица"
		ИЛИ ИмяСобытия = "Запись_ВладельцаИлиБухгалтера" Тогда
		
		Если ИмяСобытия = "Запись_ВладельцаИлиБухгалтера" Тогда
			Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
			ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
		КонецЕсли;
		
		Если Параметр = Руководитель ИЛИ Источник = Руководитель Тогда
			ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
			УстановитьНовогоВладельцаЭЦП();
		ИначеЕсли (Параметр = ГлБухгалтер ИЛИ Источник = ГлБухгалтер) И ЭтоЮридическоеЛицо Тогда
			ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
			УстановитьНовогоВладельцаЭЦП();
		ИначеЕсли (Параметр = СотрудникВыбор ИЛИ Источник = СотрудникВыбор) И ЭтоЮридическоеЛицо Тогда
			ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
			УстановитьНовогоВладельцаЭЦП();
		КонецЕсли;
		
		// Обновляем данные на второй закладке только если мы находимся на этой закладке
		Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
			СформироватьТаблицуДляПодтвержденияДанных();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПроверитьЧтоМастерФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыт" И Источник = Организация Тогда
		Параметр.ФормаМастераФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыта = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	СрокЛицензииКриптоПроКонечный = КонтекстЭДОКлиент.СрокЛицензииКриптоПроКонечный();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриОткрытииПослеПроверкиКриптопровайдеров", 
		ЭтотОбъект);
		
	ПредлагатьУстановкуРасширения = НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	ПроверитьНаличиеКриптопровайдера(ОписаниеОповещения, ПредлагатьУстановкуРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеКриптопровайдера(ВыполняемоеОповещение, ПредлагатьУстановкуРасширения) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьНаличиеКриптопровайдераЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ПроверитьНаличиеКриптопровайдера(ОписаниеОповещения, ПредлагатьУстановкуРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеКриптопровайдераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КомпонентаУстановлена 	= Результат.Выполнено;
	
	CryptoProCSPУстановлен 	= Результат.CryptoProCSPУстановлен;
	ViPNetCSPУстановлен 	= Результат.ViPNetCSPУстановлен;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ВыполняемоеОповещение);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКлючБудетСозданнойПрограммой()
	
	Если ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса") Тогда 
		Элементы.КлючБудетСозданПрограммой.Видимость = Ложь;
	Иначе
		
		УстановленныйТипКриптопровайдера = ?(CryptoProCSPУстановлен И НЕ ИгнорироватьКонфликт
			ИЛИ ИгнорироватьКонфликт И ВыбранноеМестоХраненияКлюча = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro"),
			ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro"),
			ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet"));
		Представление = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(УстановленныйТипКриптопровайдера).Представление;
		
		Элементы.КлючБудетСозданПрограммой.Видимость = Истина;
		Элементы.КлючБудетСозданПрограммой.Заголовок = СтрШаблон(
			НСтр("ru = 'Ключ электронной подписи будет создан с помощью программы %1'"), 
			Представление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииПослеПроверкиКриптопровайдеров(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьЗаголовокКлючБудетСозданнойПрограммой();
	
	ОпределитьРеквизитыНеХранящиесяВБазе();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ДополнительныеПараметры = Новый Структура("УчетнаяЗапись", УчетнаяЗапись);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПриОткрытииЕстьДанныеДляФормированияЗаявленияЗавершение", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ТекстОшибокДляМастераПодключенияК1СОтчетности = "";
		
		КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(
			ОписаниеОповещения,
			УчетнаяЗапись,
			ТекстОшибокДляМастераПодключенияК1СОтчетности);
			
	Иначе
		ПриОткрытииИнициализация();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстПолей", 0.1, Истина);
	
	ИзменитьОформлениеФлагаДобавитьЛицензиюКриптоПро(ЭтотОбъект);
	
	ДлительнаяОтправкаКлиент.ЗакрытьФормуОжиданияЗагрузкиМодуля();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЕстьДанныеДляФормированияЗаявленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьДанные = Результат.ЕстьДанные;
	ТекстОшибок = Результат.ТекстОшибок;
	УчетнаяЗапись = ДополнительныеПараметры.УчетнаяЗапись;
	
	Если ЕстьДанные Тогда
		ПриОткрытииИнициализация();
	Иначе
		ПоддерживаетсяВторичноеЗаявление = Ложь;
		ОформитьЭлементыФормыНаПервомШаге(ДанныеОрганизации);
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытиеПредупрежденияОНевозможностиПолучитьНастройкиУчетнойЗаписи", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытиеПредупрежденияОНевозможностиПолучитьНастройкиУчетнойЗаписи()
	
	УправлениеКнопкамиНавигации();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
	ПараметрыФормы.Вставить("ТекстОшибки", ТекстОшибок);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПредупреждениеОНевозможностиПолучитьНастройкиУчетнойЗаписи", ПараметрыФормы,,,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииИнициализация()

	Если ЗначениеЗаполнено(Организация) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииИнициализацияЗавершение", ЭтотОбъект);
		
		// Заполняем параметры организации
		ДанныеЗаполнения = Новый Структура();
		ЗаполнитьРеквизитыОрганизации(ДанныеЗаполнения,,ОписаниеОповещения);
		
	Иначе
		ПоддерживаетсяВторичноеЗаявление = Ложь;
		ОформитьЭлементыФормыНаПервомШаге(ДанныеОрганизации);
		УправлениеКнопкамиНавигации();
		ЭтаФорма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииИнициализацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеКнопкамиНавигации();
	
	ОбновитьТекстПодсказкиДляФлажкаПолучатьУведомления();
	
	ЭтаФорма.Активизировать();
	
	ВозможноБезбумажноеПродление = БезбумажноеПродлениеВозможно(ЭтотОбъект);
	
	Если ПриОткрытииЗапрошеноПродлениеСертификата Тогда
		ПродлитьСертификат = Истина;
	КонецЕсли;
	Если ПриОткрытииЗапрошеноПродлениеЛицензии Тогда
		ПродлитьЛицензиюНа1СОтчетность = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры
	
&НаКлиенте
Процедура СдаватьВРосстатПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВРосстат = Результат;
	
	// Если установлена галка СдаватьВРосстат, то автоматически ставим галку СдаватьВФНС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		Если СдаватьВРосстат И НЕ СдаватьВФНС Тогда 
			СдаватьВФНС = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВПФРПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВПФР = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);

КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФНСПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВФНС = Результат;
	
	// Снимаем галку росстата, если снята галка ФНС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		Если НЕ СдаватьВФНС Тогда 
			СдаватьВРосстат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);

КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФССПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВФСС = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПользователяНаПредложениеПереиздатьСертификат(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		// Продолжить
		ПродлитьСертификатПриИзмененииЗавершение();
	Иначе
		// Не продолжать
		ПродлитьСертификат = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьСертификатПриИзмененииЗавершение()
	
	// Оформляем текст под галкой
	ОформитьПодсказкуДляГалкиПродлитьСертификат();
	
	// Определяем, нужно ли перездавать сертификат 
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФСРАРПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВФСРАР = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТребуетсяЛиПродлениеСертификата(ВходящийКонтекст)
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		Попытка 
			ОтпечатокСертификата = КонтекстЭДОКлиент.ПолучитьОтпечаток(УчетнаяЗапись, "Руководитель", Неопределено);
		Исключение
			ОтпечатокСертификата = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьТребуетсяЛиПродлениеСертификатаПослеПолученияСвойствСертификата", ЭтотОбъект, ВходящийКонтекст);
	
	Если ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		
		СвойстваСертификата = КонтекстЭДОКлиент.ПолучитьСвойстваСертификатаПоОтпечаткуНаСервере(ОтпечатокСертификата, "MY");
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", 			СвойстваСертификата <> Неопределено);
		Результат.Вставить("СвойстваСертификата", 	СвойстваСертификата);
		Результат.Вставить("СертификатНайден", 		Истина);
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		
	Иначе
		КриптографияЭДКОКлиент.НайтиСертификатПоОтпечатку(ОписаниеОповещения, ОтпечатокСертификата, "MY");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТребуетсяЛиПродлениеСертификатаПослеПолученияСвойствСертификата(Результат, ВходящийКонтекст) ЭКспорт
	
	Если Результат.Выполнено Тогда
		
		Если Результат.СертификатНайден Тогда
		
			СвойстваСертификата = Результат.СвойстваСертификата;
			
			СертификатДействителенПо = СвойстваСертификата.ДействителенПо;
			СекундВОдномДне = 24 * 60 * 60;
			// Прибавляем один день, так как в день окончания сертификат еще действует.
			СертификатДействителенПо = СертификатДействителенПо + СекундВОдномДне;
			
			КоличествоДнейДоОкончанияСертификата = (НачалоДня(СертификатДействителенПо) - НачалоДня(ТекущаяДатаСервер))/СекундВОдномДне;
			
			ПродлитьСертификатИсходный = (КоличествоДнейДоОкончанияСертификата <= КоличествоДнейЗаКотороеНужноПредупреждатьОбИстеченииСрока);
		КонецЕсли;
		
	КонецЕсли;
	
	СертификатДоступен = ЗначениеЗаполнено(СертификатДействителенПо);
	
	// Нужно ли продление лицензии
	ПроверитьТребуетсяЛиПродлениеЛицензии();
	
	СделатьРеквизитыРавнымиИсходным();
	
	ОпределитьВладельцаЭЦП();
	
	ОпределитьКриптопровайдераИМодельХраненияКлючей(ЭтотОбъект);
	
	// Если это заявление создается копированием предыдущего, то копируем реквизиты из предыдущего заявления
	Если ЗначениеЗаполнено(Реквизит) Тогда
		ЗаполнитьРеквизитыИзПредыдущегоЗаявления();
		ЗаполнитьДанныеСотрудника(Ложь);
		УстановитьНовогоВладельцаЭЦП();
		СравнитьТекущиеРеквизитыПодключенияСИсходными();
		УстановитьГалкуИзменитьРеквизитыПодключенияК1СОтчетности();
		УстановитьФлажкиВыбранныхДействийИзПредыдущегоЗаявления();
		СохранитьИдентификаторИсходногоЗаявления();
		ВосстановитьСканПаспорта();
	Иначе
		УстановитьГалкуИзменитьВладельцаСертификата();
		СравнитьТекущиеРеквизитыПодключенияСИсходными();
		СравнитьНаправленияИКодыСдачиОтчетностиСИсходными();
		УстановитьГалкуИзменитьСоставКонтролирующихОрганов();
		УстановитьГалкуИзменитьРеквизитыПодключенияК1СОтчетности();
		УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	КонецЕсли;
	
	ПереопределитьГалкиНаОснованииВнешнихДанных();
	
	УстановитьВидимостьМобильногоТелефона();
	ОформитьЭлементыФормыНаПервомШаге(ДанныеОрганизации);
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура();
	СтруктураДанныхСпецоператорыСвязи.Вставить("СпецоператорыСвязи",                   ДанныеЗаполнения.СпецоператорыСвязи);
	СтруктураДанныхСпецоператорыСвязи.Вставить("Макет",                                ДанныеЗаполнения.МакетПараметрыСпецоператоровСвязи);
	СтруктураДанныхСпецоператорыСвязи.Вставить("ТекстМакетаСоглашение",                ДанныеЗаполнения.ТекстМакетаСоглашение);
	СтруктураДанныхСпецоператорыСвязи.Вставить("ЗначениеЗаполненияСпецоператораСвязи", ДанныеЗаполнения.ЗначениеЗаполненияСпецоператораСвязи);

	ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИдентификаторИсходногоЗаявления()
	
	Если ЭтоОткрытиеЗаявления Тогда
		ЗначениеВРеквизитФормы(Реквизит.ПолучитьОбъект(), "ДокументЗаявление");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТребуетсяЛиПродлениеЛицензии()
	
	СекундВОдномДне = 24 * 60 * 60;
	КоличествоДнейДоОкончанияЛицензии = (НачалоДня(ЛицензияДатаОкончания) - НачалоДня(ТекущаяДатаСервер))/СекундВОдномДне;
	ПродлитьЛицензиюНа1СОтчетностьИсходный = КоличествоДнейДоОкончанияЛицензии <= КоличествоДнейЗаКотороеНужноПредупреждатьОбИстеченииСрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТекущиеРеквизитыПодключенияСИсходными()
	
	// Изменились ли реквизиты подключения к 1С-Отчетности ?
	//
	НомерОсновнойПоставки1сИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(НомерОсновнойПоставки1с) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(НомерОсновнойПоставки1сИсходный);
	
	// Краткое наименование
	КраткоеНаименованиеИзменилось = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КраткоеНаименование) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КраткоеНаименованиеИсходное);
	
	// Полное наименование
	ПолноеНаименованиеИзменилось = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ПолноеНаименование) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ПолноеНаименованиеИсходное); 
	
	// КПП
	КППИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КПП) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КППИсходный);
	
	// ОГРН
	ОГРНИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ОГРН) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ОГРНИсходный); 
	
	// Регистрационный номер в ПФР
	РегНомерПФРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерПФР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(РегНомерПФРИсходный)
		И (ИзменитьСоставКонтролирующихОрганов И СдаватьВПФР ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВПФРИсходный); 
	
	// Регион
	КодРегионаФСРАРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРегионаФСРАР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодРегионаФСРАРИсходный) 
		И (ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАР ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАРИсходный);
	
	// Электронная почта
	ЭлектроннаяПочтаИзменилась = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ЭлектроннаяПочта) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ЭлектроннаяПочтаИсходная)
		ИЛИ НЕ ЗначениеЗаполнено(ЭлектроннаяПочта)
		ИЛИ НЕ ЗначениеЗаполнено(ЭлектроннаяПочтаИсходная);
	
	// Телефон основной
	ТелефонОсновнойИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонОсновной) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонОсновнойИсходный);
	
	// Телефон дополнительный
	ТелефонДополнительныйИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонДополнительный) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ТелефонДополнительныйИсходный);
	
	// Сведения о сотруднике - владельце электронной подписи
	
	// Подразделение
	ВладелецЭЦППодразделениеИзменилось = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделение) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделениеИсходное) 
		И ИзменитьВладельцаСертификата И ЗначениеЗаполнено(ВладелецЭЦП);

	// Должность
	Если ЭтоЮридическоеЛицо Тогда
		ВладелецЭЦПДолжностьИзменилась = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжность) 
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжностьИсходная) 
			И ИзменитьВладельцаСертификата И ЗначениеЗаполнено(ВладелецЭЦП);
	КонецЕсли;
	
	// СНИЛС. Проверяем только для руководителя и бухгалтера.
	ИсходныйВладелецЭтоРуководительИлиБухгалтер = НЕ ИзменитьВладельцаСертификата 
		И (ВладелецЭЦПТипИсходный = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель")  
			ИЛИ ВладелецЭЦПТипИсходный = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер")); 
			
	НовыйВладелецЭтоРуководительИлиБухгалтер = ИзменитьВладельцаСертификата
		И (ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") 
		ИЛИ ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер"));
	
	ВладелецЭЦПСНИЛСИзменился = 
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПСНИЛС) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПСНИЛСИсходный) 
		И ИзменитьВладельцаСертификата И ЗначениеЗаполнено(ВладелецЭЦП)
		И (ИсходныйВладелецЭтоРуководительИлиБухгалтер ИЛИ НовыйВладелецЭтоРуководительИлиБухгалтер); // это бухгалтер или директор
		
	ВладелецЭЦПИзменилисьПаспортныеДанные = ИзменилисьПаспортныеДанныеВладельцаЭП();
	
	СформироватьПодсказкуДляФлажкаИзменитьРеквизитыПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодсказкуДляФлажкаИзменитьРеквизитыПодключения()
	
	ИзмененныеРеквизиты = "";
	
	// НомерОсновнойПоставки1С
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С"), 
		НомерОсновнойПоставки1сИзменился,
		ИзмененныеРеквизиты);
	
	// Краткое наименование
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"), 
		КраткоеНаименованиеИзменилось,
		ИзмененныеРеквизиты);
	
	// Полное наименование
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование"), 
		ПолноеНаименованиеИзменилось,
		ИзмененныеРеквизиты);
	
	// КПП
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП"), 
		КППИзменился,
		ИзмененныеРеквизиты);
	
	// ОГРН
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"), 
		ОГРНИзменился,
		ИзмененныеРеквизиты);
	
	// Регистрационный номер в ПФР
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР"), 
		РегНомерПФРИзменился,
		ИзмененныеРеквизиты);
	
	// Регион
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР"), 
		КодРегионаФСРАРИзменился,
		ИзмененныеРеквизиты);
	
	// Электронная почта
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта"), 
		ЭлектроннаяПочтаИзменилась,
		ИзмененныеРеквизиты);
	
	// Телефон основной
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной"), 
		ТелефонОсновнойИзменился,
		ИзмененныеРеквизиты);
	
	// Телефон основной
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный"), 
		ТелефонДополнительныйИзменился,
		ИзмененныеРеквизиты);
	
	Если НЕ ПустаяСтрока(ИзмененныеРеквизиты) Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + НСтр("ru = ' организации'");
	КонецЕсли;
	
	// Сведения о сотруднике - владельце электронной подписи
	
	// Подразделение
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение"), 
		ВладелецЭЦППодразделениеИзменилось,
		ИзмененныеРеквизиты);

	// Должность
	Если ЭтоЮридическоеЛицо Тогда
		ДобавитьТекст(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность"), 
			ВладелецЭЦПДолжностьИзменилась,
			ИзмененныеРеквизиты);
	КонецЕсли;
	
	// СНИЛС
	ДобавитьТекст(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС"), 
		ВладелецЭЦПСНИЛСИзменился,
		ИзмененныеРеквизиты);
	
	Если ВладелецЭЦППодразделениеИзменилось ИЛИ ВладелецЭЦПДолжностьИзменилась ИЛИ ВладелецЭЦПСНИЛСИзменился Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + НСтр("ru = ' сотрудника-владельца ЭП'");
	КонецЕсли;
	
	ЗаменитьЗапятуюНаИВСтроке(ИзмененныеРеквизиты);
		
КонецПроцедуры

&НаКлиенте
Процедура СравнитьНаправленияИКодыСдачиОтчетностиСИсходными()
	
	// ФНС
	СдаватьВФНСИзменился = СдаватьВФНС <> СдаватьВФНСИсходный;
	КодыФНСИзменились = КодыИзменились(ПолучателиФНС, ПолучателиФНСИсходные);
	
	// ПФР
	СдаватьВПФРИзменился = СдаватьВПФР <> СдаватьВПФРИсходный;
	КодПФРИзменился = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодПФР) 
		<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(КодПФРИсходный);
	
	// ФСС
	СдаватьВФССИзменился = СдаватьВФСС <> СдаватьВФССИсходный;
	
	// Росстат
	СдаватьВРосстатИзменился = СдаватьВРосстат <> СдаватьВРосстатИсходный;
	КодыРосстатаИзменились = КодыИзменились(ПолучателиФСГС, ПолучателиФСГСИсходные);
	
	// ФСРАР
	СдаватьВФСРАРИзменился = СдаватьВФСРАР <> СдаватьВФСРАРИсходный;
	
	// РПН
	СдаватьВРПНИзменился = СдаватьВРПН <> СдаватьВРПНИсходный;
	
	// ФТС
	СдаватьВФТСИзменился = СдаватьВФТС <> СдаватьВФТСИсходный;
	
КонецПроцедуры

&НаКлиенте
Функция КодыИзменились(ТаблицаНаправлений, ТаблицаНаправленийИсходная)
	
	КодыИзменились = Ложь;
	
	Если ТаблицаНаправлений.Количество() <> ТаблицаНаправленийИсходная.Количество() Тогда
		КодыИзменились = Истина;
	Иначе
		// Сравнение двух таблиц
		Для каждого СтрокаПолучателей Из ТаблицаНаправлений Цикл
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("КодПолучателя", ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаПолучателей.КодПолучателя));
			ПараметрыОтбора.Вставить("КПП", ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаПолучателей.КПП));
			МассивНайденныхСтрок = ТаблицаНаправленийИсходная.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() = 0 Тогда 
				КодыИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КодыИзменились;
	
КонецФункции

&НаКлиенте
Функция ИзменилисьРеквизитыТребующиеПереизданияСертификата()

	Возврат КраткоеНаименованиеИзменилось И ИзменитьРеквизитыПодключенияК1СОтчетности
			ИЛИ ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности
			// Код региона ФСРАР важен только если подключено направление ФСРАР
			ИЛИ КодРегионаФСРАРИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности И 
				(ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАР ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАРИсходный)
			ИЛИ ЭлектроннаяПочтаИзменилась И ИзменитьРеквизитыПодключенияК1СОтчетности
			ИЛИ ВладелецЭЦПИзменился И ИзменитьВладельцаСертификата
			ИЛИ ВладелецЭЦПСНИЛСИзменился И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности)
			ИЛИ ВладелецЭЦППодразделениеИзменилось И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности)
			ИЛИ ЭтоЮридическоеЛицо И ВладелецЭЦПДолжностьИзменилась И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности)
			ИЛИ ПродлитьСертификат
			ИЛИ ТипКриптопровайдераИзменился ИЛИ ЭтоПереходВКоробку ИЛИ ЭтоПереходВОблако;

КонецФункции

&НаСервере
Процедура УстановитьФлажкиВыбранныхДействийИзПредыдущегоЗаявления()
	
	ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	
	СписокИзмененныхРеквизитов = Реквизит.ИзменившиесяРеквизитыВторичногоЗаявления;
	
 	ИзменитьРеквизитыПодключенияК1СОтчетности = КонтекстЭДОСервер.БылиИзменененыРеквизитыПодключенияК1СОтчетности(
		Реквизит.ИзменившиесяРеквизитыВторичногоЗаявления);
		
	ПродлитьСертификат = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеАбонентскогоСертификата);
		
	ИзменитьВладельцаСертификата = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП);
		
	ПродлитьЛицензиюНа1СОтчетность = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии);
		
	ИзменитьМобильныйТелефон = КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный);
		
	ПереиздатьСертификат = ?(КонтекстЭДОСервер.ЭтотПараметрИзменился(СписокИзмененныхРеквизитов, 
		Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата), 2, 0);
		
	ОпределитьПричинуПереизданияСертификата();
		
	// Состав контролирующих органов
	ИзменитьСоставКонтролирующихОрганов = КонтекстЭДОСервер.БылИзмененСоставКонтролирующихОрганов(СписокИзмененныхРеквизитов);
	
КОнецПроцедуры

&НаКлиенте
Процедура УстановитьГалкуИзменитьРеквизитыПодключенияК1СОтчетности()
	
	ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
		
	Если ИзменилисьРеквизитыПодключенияК1СОтчетности Тогда
		ИзменитьРеквизитыПодключенияК1СОтчетности = ИзменилисьРеквизитыПодключенияК1СОтчетности;
	КонецЕсли;
	
КОнецПроцедуры

&НаСервере
Процедура ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности()
	
	ИзменилисьРеквизитыПодключенияК1СОтчетности = ИзменилисьРеквизитыОрганизации() ИЛИ ИзменилисьРеквизитыВладельцаЭЦП() ИЛИ ИзменилисьПрочиеРеквизиты();
	
КонецПроцедуры

&НаСервере
Функция ИзменилисьПрочиеРеквизиты()
	
	Возврат  НомерОсновнойПоставки1сИзменился ИЛИ ТелефонМобильныйИзменился;
	
КонецФункции

&НаСервере
Функция ИзменилисьРеквизитыОрганизации()
	
	Возврат КраткоеНаименованиеИзменилось ИЛИ ПолноеНаименованиеИзменилось ИЛИ КППИзменился ИЛИ ОГРНИзменился
		ИЛИ РегНомерПФРИзменился ИЛИ КодРегионаФСРАРИзменился	ИЛИ ЭлектроннаяПочтаИзменилась
		ИЛИ ТелефонОсновнойИзменился ИЛИ ТелефонДополнительныйИзменился;
	
КонецФункции
	
&НаСервере
Функция ИзменилисьРеквизитыВладельцаЭЦП()
	
	Возврат ВладелецЭЦППодразделениеИзменилось 
	ИЛИ ЭтоЮридическоеЛицо И ВладелецЭЦПДолжностьИзменилась 
	ИЛИ ВладелецЭЦПСНИЛСИзменился;
	
КонецФункции	

&НаКлиенте
Процедура УстановитьГалкуИзменитьВладельцаСертификата()
	
	Если ВладелецЭЦПИсходный = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка") ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		// Если в базе не найден владелец - значит говорим, что он не изменился
		ВладелецЭЦПИзменился = Ложь;
	Иначе
		
		ИзменилисьФИО = ИзменилисьФИОВладельцаЭЦП();
		
		ПодразделениеОтличается = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделение) 
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦППодразделениеИсходное);
			
		ДолжностьОтличается = ЭтоЮридическоеЛицо И (ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжность) 
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПДолжностьИсходная));
			
		ВладелецЭЦПИзменилисьПаспортныеДанные = ИзменилисьПаспортныеДанныеВладельцаЭП();
		
		// Для ИП владелец ЭП м.б. только руководитель
		ЭтоИПиНеРуководитель = НЕ ЭтоЮридическоеЛицо И ВладелецЭЦПТипИсходный <> ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
			
		// Проверяем, изменились ли данные владельца ЭЦП только если нашли владельца ЭП в базе
		Если ПодразделениеОтличается 
			ИЛИ ДолжностьОтличается 
			ИЛИ ВладелецЭЦПИзменилисьПаспортныеДанные 
			ИЛИ ЭтоИПиНеРуководитель 
			ИЛИ ИзменилисьФИО Тогда
			
			ВладелецЭЦПИзменился = Истина;
			ИзменитьВладельцаСертификата = ВладелецЭЦПИзменился;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИзменилисьФИОВладельцаЭЦП()
	
	Возврат (ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилия)
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПФамилияИсходный) 
		ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмя)
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПИмяИсходный) 
		ИЛИ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчество) 
			<> ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(ВладелецЭЦПОтчествоИсходный)) 
		ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦП);

КонецФункции

&НаКлиенте
Процедура ПроверитьИзменилсяЛиСоставКонтролирующихОрганов()
	
	ИзменилсяСоставКонтролирующихОрганов = 
		СдаватьВФНС И КодыФНСИзменились 
		ИЛИ СдаватьВПФР И КодПФРИзменился 
		ИЛИ СдаватьВРосстат И КодыРосстатаИзменились;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГалкуИзменитьСоставКонтролирующихОрганов()
	
	ПроверитьИзменилсяЛиСоставКонтролирующихОрганов();

	Если ИзменилсяСоставКонтролирующихОрганов Тогда
		ИзменитьСоставКонтролирующихОрганов = ИзменилсяСоставКонтролирующихОрганов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВРПНПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВРПН = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

&НаКлиенте
Процедура СдаватьВФТСПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СдаватьВФТС = Результат;
	
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	
КонецПроцедуры

#Область РаботаСВладельцемЭЦП

&НаКлиенте
Процедура ЗаполнитьДанныеСотрудника(ПеричитатьДанныеОСотруднике = Истина)
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		Если ЭтоЮридическоеЛицо Тогда
			Возврат;
		Иначе
			ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
		КонецЕсли;
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		ВладелецЭЦП = Руководитель;
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		ВладелецЭЦП = ГлБухгалтер;
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
		ВладелецЭЦП = СотрудникВыбор;
	КонецЕсли;
	
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		Возврат;
	КонецЕсли;

	// Обновляем данные о сотрудниках
	Если ПеричитатьДанныеОСотруднике Тогда
		КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
		ДанныеЗаполнения = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
		Если ДанныеЗаполнения.Свойство("СтруктураДанныхОрганизации") Тогда
			ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
		КонецЕсли;
	КонецЕсли;
	
 	ДанныеОрганизации.Вставить("Организация", Организация);
 
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип, 
		ДанныеОрганизации, 
		ВладелецЭЦП);
	
	ВладелецЭЦПИмя					= ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия				= ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество				= ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПВидДокумента			= ДанныеСотрудника.ВидДокумента;
	ВладелецЭЦПСерияДокумента		= ДанныеСотрудника.Серия;
	ВладелецЭЦПНомерДокумента		= ДанныеСотрудника.Номер;
	ВладелецЭЦПДатаВыдачиДокумента	= ДанныеСотрудника.ДатаВыдачи;
	ВладелецЭЦПКемВыданДокумент		= ДанныеСотрудника.КемВыдан;
	
	Если ЭтоЮридическоеЛицо Тогда
		ВладелецЭЦПДолжность = ДанныеСотрудника.Должность;
	КонецЕсли;
	
	ВладелецЭЦППодразделение		= ДанныеСотрудника.Подразделение;
	ВладелецЭЦПСНИЛС				= ДанныеСотрудника.СНИЛС;
	ВладелецЭЦПДатаРождения         = ДанныеСотрудника.ДатаРождения;
	ВладелецЭЦПМестоРождения        = ДанныеСотрудника.МестоРождения;
	ВладелецЭЦППол                  = ДанныеСотрудника.Пол;
	ВладелецЭЦПГражданство          = ДанныеСотрудника.Гражданство;
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
		ВладелецЭЦПКодПодразделения = ДанныеСотрудника.КодПодразделения;
	Иначе
		ВладелецЭЦПКодПодразделения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияОбновитьДанныеРуководителя()
	
	ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя");
	Руководитель 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	ВладелецЭЦПТип 	= ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	УстановитьНовогоВладельцаЭЦП();
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияОбновитьДанныеГлБухгалтера()
	
	ОтключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеГлБухгалтера");
	ГлБухгалтер 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	ВладелецЭЦПТип 	= ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	УстановитьНовогоВладельцаЭЦП();
	
	// Обновляем данные на второй закладке только если мы находимся на этой закладке
	Если Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
		СформироватьТаблицуДляПодтвержденияДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовогоВладельцаЭЦП()

	// Заменяем владельца ЭЦП на нового 
	ОчиститьДанныеСотрудника(Истина);
	
	ЗаполнитьДанныеСотрудника(Истина);
	УстановитьГалкуИзменитьВладельцаСертификата();
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	
	// После изменения владельца ЭЦП выполняем сравнение старых и новый значений
	СравнитьТекущиеРеквизитыПодключенияСИсходными();
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	
	// Если Владелец ЭЦП изменился, устанавливаем галку "Переиздать сертификат"
	УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРуководителя()
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя(Организация);
	ПодключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеРуководителя",1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГлБухгалтера()
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера(Организация);
	ПодключитьОбработчикОжидания("ОбработкаОжиданияОбновитьДанныеГлБухгалтера",1);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВладельцаЭЦП()
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		Если ЭтоЮридическоеЛицо Тогда
			ОткрытьФормуРуководителя();
		Иначе
			Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
				ПоказатьЗначение(, ВладелецЭЦП);
			Иначе
				ОткрытьФормуРуководителя();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		ОткрытьФормуГлБухгалтера();
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораВладельцаЭЦПЗавершение", ЭтотОбъект);
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(
			Организация, 
			СотрудникВыбор, 
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВладельцаЭЦПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		СотрудникВыбор = Результат;
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
		УстановитьНовогоВладельцаЭЦП();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

&НаКлиенте
Процедура ОчиститьРеквизитыФормы() 

	АдресЮридическийПредставление                   = "";
	СотрудникВыбор                                  = Неопределено;
	ИНН                                             = "";
	КПП                                             = "";
	КППИзменился                                    = Ложь;
	ОГРН                                            = "";
	ОГРНИзменился                                   = Ложь;
	КраткоеНаименование                             = "";
	КраткоеНаименованиеИзменилось                   = Ложь;
	ПолноеНаименование                              = "";
	ПолноеНаименованиеИзменилось                    = Ложь;
	ТелефонДополнительныйИзменился                  = Ложь;
	ТелефонОсновной                                 = "";
	ТелефонОсновнойИзменился                        = Ложь;
	ЭлектроннаяПочта                                = "";
	ЭлектроннаяПочтаИзменилась                      = Ложь;
	РегНомерПФР                                     = "";
	РегНомерПФРИзменился                            = Ложь;
	ПризнакОбособленногоПодразделения               = Ложь;
	СотрудникВыбор                                  = "";
	СотрудникВыборИсходный                          = "";
	ОчиститьДанныеСотрудника();
	ГлБухгалтер                                     = Неопределено;
	Руководитель                                    = Неопределено;
	// сбрасываем все галки на первом шаге
	СброситьВсеФлажки(ЭтотОбъект);
	СброситьНаправленияСдачиОтчетности(ЭтотОбъект);
	ОтпечатокСертификата                            = "";
	СертификатДоступен                              = "";
	ПричиныПереизданияСертификата                   = "";

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьНаправленияСдачиОтчетности(Форма) 
	
	Форма.СдаватьВФНС 			= Ложь; 
	Форма.СдаватьВПФР 			= Ложь;
	Форма.КодПФР			 	= "";
	Форма.СдаватьВФСС 			= Ложь;
	Форма.СдаватьВРосстат 		= Ложь;
	Форма.СдаватьВФСРАР 		= Ложь;
	Форма.СдаватьВФТС 			= Ложь;
	Форма.КодРегионаФСРАР 		= "";
	
	Форма.ПолучателиФНС.Очистить();
	Форма.ПолучателиФСГС.Очистить();
	
	Форма.СдаватьВФНСИзменился 		= Ложь; 
	Форма.СдаватьВПФРИзменился 		= Ложь;
	Форма.КодПФРИзменился 			= Ложь;
	Форма.СдаватьВФССИзменился 		= Ложь;
	Форма.СдаватьВРосстатИзменился 	= Ложь;
	Форма.КодыРосстатаИзменились 	= Ложь;
	Форма.СдаватьВФСРАРИзменился 	= Ложь;
	Форма.КодРегионаФСРАРИзменился 	= Ложь;
	Форма.СдаватьВРПНИзменился 		= Ложь;
	Форма.СдаватьВФТСИзменился 		= Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьВсеФлажки(Форма)
	
	Форма.ПродлитьСертификат 						= Ложь;
	Форма.ИзменитьВладельцаСертификата 				= Ложь;
	Форма.ПродлитьЛицензиюНа1СОтчетность 			= Ложь;
	Форма.ИзменитьСоставКонтролирующихОрганов 		= Ложь;
	Форма.ИзменитьРеквизитыПодключенияК1СОтчетности = Ложь;
	Форма.ИзменитьМобильныйТелефон 					= Ложь;
	Форма.ПереиздатьСертификат 						= 0;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОчиститьИсходныеЗначения() 
	
	КППИсходный 				= "";
	ОГРНИсходный 				= "";
	КраткоеНаименованиеИсходное = "";
	ПолноеНаименованиеИсходное 	= "";
	ЭлектроннаяПочтаИсходная 	= "";
	ЭтоНотариусАдвокатИлиГКФХ 	= "";
	РегНомерПФРИсходный 		= "";
	
	СдаватьВФНСИсходный 		= Ложь; 
	СдаватьВПФРИсходный 		= Ложь;
	КодПФРИсходный 				= "";
	СдаватьВФССИсходный 		= Ложь;
	СдаватьВРосстатИсходный 	= Ложь;
	СдаватьВФСРАРИсходный 		= Ложь;
	КодРегионаФСРАРИсходный		= "";
	СдаватьВРПНИсходный 		= Ложь;
	СдаватьВФТСИсходный 		= Ложь;
	ПолучателиФНС.Очистить();
	
	СотрудникВыборИсходный 				= "";
	ВладелецЭЦППодразделениеИсходное 	= "";
	ВладелецЭЦПДолжностьИсходная 		= "";
	ВладелецЭЦПФамилияИсходный 			= "";
	ВладелецЭЦПИмяИсходный 				= "";
	ВладелецЭЦПОтчествоИсходный 		= "";
	ВладелецЭЦПСНИЛСИсходный			= "";

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудника(Очистить = Ложь)
	
	Если ЗначениеЗаполнено(Реквизит) И НЕ Очистить Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецЭЦП                        = Неопределено;
	ВладелецЭЦППодразделение           = "";
	ВладелецЭЦППодразделениеИзменилось = Ложь;
	ВладелецЭЦПДолжность               = "";
	ВладелецЭЦПДолжностьИзменилась     = Ложь;
	ВладелецЭЦПФамилия                 = "";
	ВладелецЭЦПИмя                     = "";
	ВладелецЭЦПОтчество                = "";
	ВладелецЭЦПСНИЛС                   = "";
	ВладелецЭЦПСНИЛСИзменился          = Ложь;
	ВладелецЭЦПВидДокумента            = Неопределено;
	ВладелецЭЦПСерияДокумента          = "";
	ВладелецЭЦПНомерДокумента          = "";
	ВладелецЭЦПДатаВыдачиДокумента     = "";
	ВладелецЭЦПКемВыданДокумент        = "";
	ВладелецЭЦПДатаРождения            = Неопределено;
	ВладелецЭЦПМестоРождения           = "";
	ВладелецЭЦПКодПодразделения        = "";
	ВладелецЭЦППол                     = Неопределено;
	ВладелецЭЦПГражданство             = Неопределено;
	
	СканПаспорт                        = НСтр("ru = 'Выберите файл'");
	ФайлСканПаспорт                    = Неопределено;
	Элементы.ГруппаСканПаспорта.Видимость = Ложь;
		
КонецПроцедуры

#КонецОбласти

#Область НаправленияСдачиОтчетности

&НаКлиенте
Процедура СделатьРеквизитыРавнымиИсходным()

	СделатьНаправленияСдачиОтчетностиРавнымиИсходным(ЭтотОбъект);
	
	// Если мобильный телефон не хранится в базе, то приравниваем его исходному
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный")) Тогда

		ТелефонМобильный = ТелефонМобильныйИсходный;
	КонецЕсли;
	
	// Если основной телефон не хранится в базе, то приравниваем его исходному
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной")) Тогда

		ТелефонОсновной = ТелефонОсновнойИсходный;
	КонецЕсли;
	
	// Если дополнительный телефон не хранится в базе, то приравниваем его исходному
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный")) Тогда

		ТелефонДополнительный = ТелефонДополнительныйИсходный;
	КонецЕсли;
	
	// Если электронная не хранится в базе, то приравниваем ее исходному значению
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта")) Тогда

		ЭлектроннаяПочта = ЭлектроннаяПочтаИсходная;
	КонецЕсли;
	
	// Если СНИЛС не хранится в базе, то приравниваем его к исходному
	Если ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС")) Тогда

		ВладелецЭЦПСНИЛС = ВладелецЭЦПСНИЛСИсходный;
	КонецЕсли;
	
	ПродлитьСертификат = ПродлитьСертификатИсходный;
	
	ПродлитьЛицензиюНа1СОтчетность = ПродлитьЛицензиюНа1СОтчетностьИсходный;
	
	// Регистрационный номер программы 
	НомерОсновнойПоставки1с = НомерОсновнойПоставки1сИсходный;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СделатьНаправленияСдачиОтчетностиРавнымиИсходным(Форма)
	
	Форма.СдаватьВФНС 	= Ложь;
	Форма.СдаватьВПФР 	= Ложь;
	Форма.СдаватьВФСС 	= Ложь;
	Форма.СдаватьВФСРАР = Ложь;
	Форма.СдаватьВРПН 	= Ложь;
	Форма.СдаватьВФТС 	= Ложь;
	Форма.СдаватьВРосстат = Ложь;
	
	Форма.ПолучателиФНС.Очистить();
	Форма.ПолучателиФСГС.Очистить();
	
	// ФНС
	Форма.СдаватьВФНС 		= Форма.СдаватьВФНСИсходный;
	СкопироватьИзОднойТаблицыВДругую(Форма.ПолучателиФНСИсходные, Форма.ПолучателиФНС);
	Форма.КодыФНСПрописью 	= Форма.КодыФНСПрописьюИсходные;
	
	// ПФР
	Форма.СдаватьВПФР	= Форма.СдаватьВПФРИсходный;
	Форма.КодПФР 		= КодПФР(Форма.ДанныеОрганизации);
	
	// ФСС
	Форма.СдаватьВФСС = Форма.СдаватьВФССИсходный;
	
	// Росстат
	Форма.СдаватьВРосстат 		= Форма.СдаватьВРосстатИсходный;
	СкопироватьИзОднойТаблицыВДругую(Форма.ПолучателиФСГСИсходные, Форма.ПолучателиФСГС);
	Форма.КодыРосстатПрописью 	= Форма.КодыРосстатПрописьюИсходные;

	// ФСРАР
	Форма.СдаватьВФСРАР = Форма.СдаватьВФСРАРИсходный;
	
	// РПН
	Форма.СдаватьВРПН = Форма.СдаватьВРПНИсходный;
	
	// ФТС
	Форма.СдаватьВФТС = Форма.СдаватьВФТСИсходный;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьНаправленияИзИсходногоЗаявления()

	Для Каждого СтрокаНаправления из Реквизит.Получатели цикл 
		
		Если СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			СдаватьВФНС = Истина;
			НоваяСтрокаНаправления = ПолучателиФНС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			НоваяСтрокаНаправления.КПП				= СтрокаНаправления.КПП;
		ИначеЕсли СтрокаНаправления.ТипПолучателя	= ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			СдаватьВПФР = Истина;
			КодПФР = СтрокаНаправления.КодПолучателя;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			СдаватьВФСС = Истина;	
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда	
			
			СдаватьВРосстат = Истина;
			
			НоваяСтрокаНаправления = ПолучателиФСГС.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя	= СтрокаНаправления.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя	= СтрокаНаправления.КодПолучателя;
			
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
			ПодатьЗаявкуНаПодключениеРПН = Истина;
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
			ПодатьЗаявкуНаСертификатДляФСРАР = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СкопироватьИзОднойТаблицыВДругую(ТаблицаИсточник, ТаблицаПриемник)
	ТаблицаПриемник.Очистить();
	Для Каждого СтрокаНаправлений Из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений); 
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодыФНСПрописью(Знач Получатели)
	
	Результат = "";
	КоличествоКодовФНС = Получатели.Количество();
	Если КоличествоКодовФНС = 1 Тогда
		Результат = Получатели[0].КодПолучателя + ?(Получатели[0].КПП = "","" ,"-") + Получатели[0].КПП;
	ИначеЕсли КоличествоКодовФНС > 1 Тогда
		Результат = НСтр("ru = 'Коды ФНС (%1)'");
		Результат = СтрЗаменить(Результат, "%1", Строка(КоличествоКодовФНС));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодыРосстатПрописью(Знач Получатели)
	
	Результат = "";
	КоличествоКодовФСГС = Получатели.Количество();
	Если КоличествоКодовФСГС = 1 Тогда
		Результат = Получатели[0].КодПолучателя;
	ИначеЕсли КоличествоКодовФСГС > 1 Тогда
		Результат = НСтр("ru = 'Коды Росстата (%1)'");
		Результат = СтрЗаменить(Результат, "%1", Строка(КоличествоКодовФСГС));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция КодПФР(ДанныеОрганизации)
	
	ПолученыйКодПФР = "";
	
	Если ПустаяСтрока(ДанныеОрганизации.КодОрганаПФР) ИЛИ СтрДлина(ДанныеОрганизации.КодОрганаПФР) < 7 Тогда
		ПолученыйКодПФР = Лев(ДанныеОрганизации.КодОрганаПФР,7); 
	Иначе
		ПолученыйКодПФР = ДанныеОрганизации.КодОрганаПФР;
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодРосстатаИзОрганизации(ДанныеОрганизации)
	
	Возврат ДанныеОрганизации.КодОрганаФСГС;
	
КонецФункции

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура ПоказатьСледующуюСтраницу()
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Пока Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) < Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество() - 1 Цикл		
		Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) + 1);		
		Если Страница.Видимость Тогда
			Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
			Прервать;
		Иначе
			ТекущаяСтраница = Страница;
		КонецЕсли;		
	КонецЦикла;	
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеКнопкамиНавигации()
	
	  
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ВсегоСтраниц 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Количество();
	
	КнопкаДалее	  = Элементы.Далее;
	КнопкаНазад   = Элементы.Назад;
	КнопкаЗакрыть = Элементы.Закрыть;
	
	КнопкаДалее.Видимость 	= Истина;
	КнопкаНазад.Видимость 	= Истина;
	КнопкаЗакрыть.Видимость = Истина;
	
	КнопкаПодписатьЗаявлениеИОтправить = Элементы.ПодписатьЗаявлениеИОтправить;
	КнопкаПодписатьЗаявлениеИОтправить.Видимость = Ложь;
	
	Если ТекущаяСтраница = Элементы.ВыборДействия Тогда
		// Шаг 1
		
		УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Ложь,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Далее  >'"), Истина,	Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Отмена'"), 	Истина,	Ложь);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПодключениеЭДО Тогда
		// Шаг 2 (если НЕ ЭП в облаке)
		
		УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Истина,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	"Далее >", Истина, Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Отмена'"), 	Истина,	Ложь);
		

	ИначеЕсли ТекущаяСтраница = Элементы.ЗаполнениеЗаявления Тогда
		// Шаг 3
		
		УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Истина,	Ложь);
		
		КнопкаПодписатьЗаявлениеИОтправить.Видимость = ВозможноБезбумажноеПродление;
		КнопкаПодписатьЗаявлениеИОтправить.КнопкаПоУмолчанию = ВозможноБезбумажноеПродление;
			
		Если ВозможноБезбумажноеПродление Тогда
			УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Отправить без подписания'"), Истина,	Ложь);
		Иначе
			УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Отправить заявление'"), Истина,	Истина);
		КонецЕсли;

		УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Отмена'"), 	Истина,	Ложь);

	ИначеЕсли ТекущаяСтраница = Элементы.ИнструкцияПоСозданиюКлючаЭЦП Тогда
		// Шаг 4
		
		УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Истина,	Ложь);
		УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Создать ключ электронной подписи'"), Истина,	Истина);
		УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Отмена'"), 	Истина,	Ложь);
		
	ИначеЕсли ТекущаяСтраница = Элементы.ПолучениеРезультатаОтправкиЗаявления Тогда
		// Шаг 5
		
		//последняя закладка
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
			
			УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Далее >'"),	Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Закрыть'"), 	Истина,	Истина);
			ПрограммноеЗакрытие 	= Истина;
			
		ИначеЕсли ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
			
			УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Отправить заявление еще раз'"),	Истина,	Истина);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Закрыть'"), 	Истина,	Ложь);
			
		ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 	
			
			УстановитьСвойстваКнопки(КнопкаНазад, 	НСтр("ru = '<  Назад'"), Ложь,	Ложь);
			УстановитьСвойстваКнопки(КнопкаДалее, 	НСтр("ru = 'Подготовить новое заявление'"),	Истина,	Истина);
			УстановитьСвойстваКнопки(КнопкаЗакрыть, НСтр("ru = 'Закрыть'"), 	Истина,	Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтотОбъект.Команды.КоманднаяПанельМастерНазад.Подсказка = КнопкаНазад.Заголовок;
	ЭтотОбъект.Команды.КоманднаяПанельМастерДалее.Подсказка = КнопкаДалее.Заголовок;
	ЭтотОбъект.Команды.ЗакрытьМастер.Подсказка 				= КнопкаЗакрыть.Заголовок;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваКнопки(Кнопка, Заголовок, Видимость, КнопкаПоУмолчанию)
	
	Кнопка.Заголовок 			= Заголовок; 
	Кнопка.Видимость 			= Видимость;
	Кнопка.КнопкаПоУмолчанию 	= КнопкаПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредыдущуюСтраницу()
	
	ТекущаяСтраница 		= Элементы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы 	= Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница);
	
	Если ИндексТекущейСтраницы > 0 Тогда
		
		Индекс = ИндексТекущейСтраницы;
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Страница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.Получить(Индекс);
			Если Страница.Видимость Тогда		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Страница;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеКнопкамиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаСтраницеРезультатаОтправки()
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.ОсновнаяПанель.ПодчиненныеЭлементы.ПолучениеРезультатаОтправкиЗаявления;
    ПанельРезультатов = Элементы.ГруппаРезультатовОтправки;
	// Заявление подготовилось
	Если  ДокументЗаявление.Статус =  ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаНеОтправлено;
	// Заявление отправилось
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаОтправленоИПринято;
		ПрограммноеЗакрытие = Истина;
	// Заявление отклонил сервер из-за ошибок
	ИначеЕсли ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено") Тогда 
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаОтправленоИОтклонено;
		ПрограммноеЗакрытие = Истина;
	Иначе // заявление подготовилось, но не отправилось
		ПанельРезультатов.ТекущаяСтраница = ПанельРезультатов.ПодчиненныеЭлементы.ГруппаНеОтправлено;
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	// Формируем текст заголовока
	Если Не ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		Элементы.ПодсказкаПоРезультатам8.Заголовок = НСтр("ru='Что делать?
				|1. Попробуйте отправить заявление еще раз.
				|2. Проверьте, что отключен контроль учетных записей (UAC) в Windows.'");
		Если ВыборКриптопровайдера = 1 Тогда
			 Элементы.ПодсказкаПоРезультатам8.Заголовок = Элементы.ПодсказкаПоРезультатам8.Заголовок + Символы.ПС + 
			 	НСтр("ru='3. Проверьте, что VipNet зарегистрирован.'");
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Активизировать();
	
КонецПроцедуры

#КонецОбласти

#Область Таблица

&НаКлиенте
Процедура ДобавитьЖелтыеСтроки()
	
	КоличествоСтрок = ТаблицаДанныхЗаявленияНаПодключение.Количество();
	КоличествоИзмененныхСтрок = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Новый Структура("ЭтотПараметрИзменился", Истина)).Количество();
	
	СтрокаТаблицыПодтверждения = ДобавитьВТаблицу("Изменяемые настройки подключения",,,,Истина); // заголовок
	ПорядковыйНомерСтроки = 0;
	СтрокаТаблицыПодтверждения.ПорядковыйНомерСтроки = 0;
	
	Для сч = 0 По КоличествоСтрок - 1 Цикл
		СтрокаТаблицаДанных = ТаблицаДанныхЗаявленияНаПодключение[сч];
		Если СтрокаТаблицаДанных.ЭтотПараметрИзменился Тогда
			
			ДобавитьВТаблицу(
				СтрокаТаблицаДанных.ИзмененныйРеквизит, 
				СтрокаТаблицаДанных.ЗначениеРеквизита, 
				СтрокаТаблицаДанных.ЭтотПараметрИзменился, 
				Истина,
				,
				СтрокаТаблицаДанных.ВладелецРеквизита,
				СтрокаТаблицаДанных.НазваниеРеквизита);
			
		КонецЕсли;
		СтрокаТаблицаДанных.ПорядковыйНомерСтроки = СтрокаТаблицаДанных.ПорядковыйНомерСтроки + КоличествоИзмененныхСтрок + 1;
	КонецЦикла;
	
	СтрокаТаблицыПодтверждения 	= ДобавитьВТаблицу(""); // заголовок
	ПорядковыйНомерСтроки 		= ПорядковыйНомерСтроки - 1;
	СтрокаТаблицыПодтверждения.ПорядковыйНомерСтроки = КоличествоИзмененныхСтрок + 1; 
	
	ТаблицаДанныхЗаявленияНаПодключение.Сортировать("ПорядковыйНомерСтроки");

КонецПроцедуры

&НаКлиенте
Функция ДобавитьВТаблицу(
		ИзмененныйРеквизит,  
		ЗначениеРеквизита = "", 
		ЭтотПараметрИзменился = Ложь,
		ВыделятьСтрокуЖелтым = Ложь,
		ВыделятьСтрокуЖирным = Ложь,
		ВладелецРеквизита = Неопределено,
		НазваниеРеквизита = "")
		
	ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
		
	НоваяСтрока = ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	Если ТипЗнч(ИзмененныйРеквизит) = Тип("Строка") Тогда
		НоваяСтрока.НазваниеРеквизита = ИзмененныйРеквизит;
	Иначе
		НоваяСтрока.ИзмененныйРеквизит	= ИзмененныйРеквизит;
		
		Если НазваниеРеквизита = "" Тогда
			НоваяСтрока.НазваниеРеквизита = Строка(ИзмененныйРеквизит);
		Иначе
			НоваяСтрока.НазваниеРеквизита = НазваниеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.ЗначениеРеквизита		= ЗначениеРеквизита;
	НоваяСтрока.ЭтотПараметрИзменился 	= ЭтотПараметрИзменился;
	НоваяСтрока.ВыделятьСтрокуЖелтым 	= ВыделятьСтрокуЖелтым;
	НоваяСтрока.ПорядковыйНомерСтроки	= ПорядковыйНомерСтроки;
	НоваяСтрока.ВыделятьСтрокуЖирным 	= ВыделятьСтрокуЖирным;
	
	Если ВладелецРеквизита <> Неопределено Тогда
		НоваяСтрока.ВладелецРеквизита = ВладелецРеквизита;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ЗадатьНовоеЗначениеРеквизиту(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита = Неопределено)
	
	ОткрытьФормуРедактированияРеквизита(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита);

КонецПроцедуры

&НаСервере
Функция ОписаниеТиповРеквизитаФормы(НаименованиеРеквизита)
	
	ВсеРеквизитыФормы = ПолучитьРеквизиты();
	Для каждого РеквизитФормы Из ВсеРеквизитыФормы Цикл
		Если НРег(РеквизитФормы.Имя) = НРег(НаименованиеРеквизита) Тогда
			Возврат РеквизитФормы.ТипЗначения;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизита(ИмяРеквизита, НаименованиеРеквизита, ИзменяемыйРеквизит, МаскаРеквизита = Неопределено)
	
	ОписаниеТипаРеквизита = ОписаниеТиповРеквизитаФормы(ИмяРеквизита);
	
	ДополнительныеПараметры = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуРедактированияРеквизитаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ИмяРеквизита",          ИмяРеквизита);
	ПараметрыОткрытияФормы.Вставить("НаименованиеРеквизита", НаименованиеРеквизита + ":");
	ПараметрыОткрытияФормы.Вставить("ЗначениеРеквизита",     ИзменяемыйРеквизит);
	ПараметрыОткрытияФормы.Вставить("МаскаРеквизита",        МаскаРеквизита);
	ПараметрыОткрытияФормы.Вставить("ОписаниеТипаРеквизита", ОписаниеТипаРеквизита);
	
	ОткрытьФорму(
		КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаРедактированияРеквизита", 
		ПараметрыОткрытияФормы,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияРеквизитаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	
	Если Результат <> Неопределено Тогда
		
		ЭтаФорма[ИмяРеквизита] = Результат;
		
		ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);
		СравнитьТекущиеРеквизитыПодключенияСИсходными();
		СформироватьТаблицуДляПодтвержденияДанных();
		ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНаправленийСдачиОтчетности(Получатели, ТипПолучателя)
	
	СписокЗначенийПолучатели = Новый СписокЗначений;
	Для каждого СтрокаПолучателя Из Получатели Цикл
		СписокЗначенийПолучатели.Добавить(СтрокаПолучателя.КодПолучателя, СтрокаПолучателя.КПП);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", 	Организация);
	ДополнительныеПараметры.Вставить("Получатели", 		СписокЗначенийПолучатели);
	ДополнительныеПараметры.Вставить("ТипПолучателя", 	ТипПолучателя);
	ДополнительныеПараметры.Вставить("Спецоператор", 	Спецоператор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуРедактированияНаправленийСдачиОтчетностиЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаНаправленийСдачиОтчетности", 
		ДополнительныеПараметры,
		,
		,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНаправленийСдачиОтчетностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТипПолучателя = ДополнительныеПараметры.ТипПолучателя;
	
	Если Результат <> Неопределено Тогда
		
		Если ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
			ПолучателиФНС.Очистить();
		Иначе
			ПолучателиФСГС.Очистить();
		КонецЕсли;
		
		Для каждого СтрокаНаправления Из Результат Цикл
			
			Если ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
				НоваяСтрока = ПолучателиФНС.Добавить();
			Иначе
				НоваяСтрока = ПолучателиФСГС.Добавить();
			КонецЕсли;
			
			НоваяСтрока.ТипПолучателя 	= ТипПолучателя;
			НоваяСтрока.КодПолучателя 	= СтрокаНаправления.Значение;
			НоваяСтрока.КПП 			= СтрокаНаправления.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеЭлементовУправления

&НаСервере
Процедура ОформитьПодсказкуДляГалкиПродлитьСертификат()
	
	Надпись = Элементы.ПодсказкаПоПродлениюСертификата;
	
	// Определяем цвет
	Надпись.ЦветТекста = СинийЦветПодсказки;
	
	// Определяем заголовок
	ТекстЗаголовка = "";
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ТекстЗаголовка = "";
	ИначеЕсли НЕ СертификатДоступен Тогда
		ТекстЗаголовка = НСтр("ru = 'Сертификат недоступен'");
	ИначеЕсли ПродлитьСертификатИсходный Тогда
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КоличествоОставшегосяВремени = КонтекстЭДОСервер.ТекстЧерезСколькоЛетМесяцевНедельДней(ТекущаяДатаСервер, СертификатДействителенПо, "", "");
		Надпись.ЦветТекста = КрасныйЦвет;
		
		Если КоличествоОставшегосяВремени = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru = 'Срок действия сертификата истек %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(СертификатДействителенПо,"ДЛФ=DD"));
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Срок действия сертификата истекает через %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", КоличествоОставшегосяВремени);
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Сертификат действует до %1'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(СертификатДействителенПо,"ДЛФ=DD"));
	КонецЕсли;
	Надпись.Заголовок = ТекстЗаголовка;
		 
КонецПроцедуры

&НаСервере
Процедура ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата()

	// Определяем заголовок
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		Элементы.ГруппаСтраницВладельца.ТекущаяСтраница = Элементы.ГруппаСтраницВладельца.ПодчиненныеЭлементы.СтраницаВладелецНеИзменен;
	Иначе 
		Элементы.ГруппаСтраницВладельца.Доступность = ИзменитьВладельцаСертификата;
		Элементы.ГруппаСтраницВладельца.ТекущаяСтраница = Элементы.ГруппаСтраницВладельца.ПодчиненныеЭлементы.СтраницаВладелецИзменен;
	КонецЕсли;
		
	ОформитьГиперссылку("ДекорацияВладелецЭЦП", ВладелецЭЦП, Истина, Истина);
	Элементы.ВыбратьДиректора.Пометка 		= Ложь;
	Элементы.ВыбратьГлБухгалтера.Пометка 	= Ложь;
	Элементы.ВыбратьСотрудника.Пометка 		= Ложь;
	
	Элементы.ГруппаВыбораВидаВладельцаЭЦП.Видимость = ЭтоЮридическоеЛицо;
	
	Если ЭтоЮридическоеЛицо Тогда
		Элементы.ЗаголовокВладельцаЭЦП.Заголовок = "";
		Элементы.ИзменитьВладельцаСертификата.Заголовок = "Изменение сотрудника-владельца сертификата или сведений о нем:";
	Иначе
		Элементы.ЗаголовокВладельцаЭЦП.Заголовок = НСтр("ru = ' Индивидуальный предприниматель:'");
		Элементы.ИзменитьВладельцаСертификата.Заголовок = "Изменение сведений о сотруднике-владельце сертификата:";
	КОнецЕсли;
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьДиректора.Заголовок;
		Элементы.ВыбратьДиректора.Пометка = Истина;
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьГлБухгалтера.Заголовок;
		Элементы.ВыбратьГлБухгалтера.Пометка = Истина;
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьСотрудника.Заголовок;
		Элементы.ВыбратьСотрудника.Пометка = Истина;
	КонецЕсли;
		 
КонецПроцедуры

&НаСервере
Процедура ОформитьПодсказкуДляГалкиПродлитьЛицензиюНа1СОтчетность()
	
	Надпись = Элементы.ПодсказкаПоПродлениюЛицензии;
	
	// Определяем цвет
	Надпись.ЦветТекста = СинийЦветПодсказки;
	
	// Определяем заголовок
	ТекстЗаголовка = "";
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ТекстЗаголовка = "";
	ИначеЕсли ПродлитьЛицензиюНа1СОтчетностьИсходный Тогда
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КоличествоОставшегосяВремени = КонтекстЭДОСервер.ТекстЧерезСколькоЛетМесяцевНедельДней(ТекущаяДатаСервер, ЛицензияДатаОкончания, "", "");
		Надпись.ЦветТекста = КрасныйЦвет;
		
		Если КоличествоОставшегосяВремени = Неопределено Тогда
			ТекстЗаголовка = НСтр("ru = 'Срок действия лицензии истек %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(ЛицензияДатаОкончания,"ДЛФ=DD"));
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Срок действия лицензии истекает через %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", КоличествоОставшегосяВремени);
		КонецЕсли;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Лицензия действует до %1'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Формат(ЛицензияДатаОкончания,"ДЛФ=DD"));
	КонецЕсли;
	Надпись.Заголовок = ТекстЗаголовка;
		 
КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации)
	
	Элементы.ГруппаИзменитьСоставНалоговыхОрганов.Доступность = ИзменитьСоставКонтролирующихОрганов;
	
	СделатьНедоступнымиНеподдерживаемыеНаправления();
	
	Элементы.ДекорацияКодыФНС.Видимость 	= Истина;
	Элементы.ДекорацияКодПФР.Видимость 		= Истина;
	Элементы.ДекорацияКодРосстат.Видимость 	= Истина;
	
	Элементы.ВзятьКодПФРИзОрганизации.Видимость 		= Истина;
	Элементы.ВзятьКодРосстатаИзОрганизации.Видимость 	= Истина;
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		Элементы.ДекорацияКодыФНС.Видимость 	= Ложь;
		Элементы.ДекорацияКодПФР.Видимость 		= Ложь;
		Элементы.ДекорацияКодРосстат.Видимость 	= Ложь;
		
		Элементы.ВзятьКодПФРИзОрганизации.Видимость 		= Ложь;
		Элементы.ВзятьКодРосстатаИзОрганизации.Видимость 	= Ложь;
		
	Иначе
		// ФНС
		КодыФНСПрописью = ПолучитьКодыФНСПрописью(ПолучателиФНС);
		ОформитьГиперссылку("ДекорацияКодыФНС", КодыФНСПрописью, СдаватьВФНС, СдаватьВФНС И ИзменитьСоставКонтролирующихОрганов);
		
		// ПФР
		ОформитьГиперссылку("ДекорацияКодПФР", КодПФР, СдаватьВПФР, СдаватьВПФР И ИзменитьСоставКонтролирующихОрганов);
		// Гиперссылка для изменения кода ПФР на значение из организации
		КодПФРВОрганизации = КодПФР(ДанныеОрганизации);
		Если КодПФРВОрганизации <> КодПФР И НЕ ПустаяСтрока(СтрЗаменить(КодПФРВОрганизации,"-","")) Тогда
			Элементы.ВзятьКодПФРИзОрганизации.Видимость = Истина;
			ТекстЗаголовка = НСтр("ru = 'Изменить на %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Строка(КодПФРВОрганизации));
		Иначе
			Элементы.ВзятьКодПФРИзОрганизации.Видимость = Ложь;
		КонецЕсли;
		ОформитьГиперссылку("ВзятьКодПФРИзОрганизации", ТекстЗаголовка, Ложь, СдаватьВПФР И ИзменитьСоставКонтролирующихОрганов);
		
		// Росстат
		КодыРосстатПрописью = ПолучитьКодыРосстатПрописью(ПолучателиФСГС);
		ОформитьГиперссылку("ДекорацияКодРосстат", КодыРосстатПрописью, СдаватьВРосстат, СдаватьВРосстат И ИзменитьСоставКонтролирующихОрганов);
		
		// Гиперссылка для изменения кода Росстата на значение из организации
		КодРосстатаВОрганизации = КодРосстатаИзОрганизации(ДанныеОрганизации);
		Если ПолучателиФСГС.Количество() = 1
			И КодРосстатаВОрганизации <> ПолучателиФСГС[0].КодПолучателя
			И НЕ ПустаяСтрока(СтрЗаменить(КодРосстатаВОрганизации,"-","")) Тогда
			
			Элементы.ВзятьКодРосстатаИзОрганизации.Видимость = Истина;
			ТекстЗаголовка = НСтр("ru = 'Изменить на %1'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%1", Строка(КодРосстатаВОрганизации));
			
		Иначе
			Элементы.ВзятьКодРосстатаИзОрганизации.Видимость = Ложь;
		КонецЕсли;
		
		ОформитьГиперссылку("ВзятьКодРосстатаИзОрганизации", ТекстЗаголовка, Ложь, СдаватьВРосстат И ИзменитьСоставКонтролирующихОрганов);
		
	КонецЕсли;
		 
КонецПроцедуры

&НаСервере
Процедура СделатьНедоступнымиНеподдерживаемыеНаправления()
	
	Элементы.СдаватьВФСРАР.ТолькоПросмотр = НЕ ОператорПоддерживаетФСРАР;
	Элементы.СдаватьВФСРАР.Подсказка = ?(ОператорПоддерживаетФСРАР, НСтр("ru = 'Федеральная служба по регулированию алкогольного рынка'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная служба по регулированию алкогольного рынка (не поддерживается %1)'"), Строка(Спецоператор)));
	Элементы.СдаватьВРПН.ТолькоПросмотр = НЕ ОператорПоддерживаетРПН;
	Элементы.СдаватьВРПН.Подсказка = ?(ОператорПоддерживаетРПН, НСтр("ru = 'Федеральная служба по надзору в сфере природопользования'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная служба по надзору в сфере природопользования (не поддерживается %1)'"), Строка(Спецоператор)));
	Элементы.СдаватьВФТС.ТолькоПросмотр = НЕ ОператорПоддерживаетФТС;
	Элементы.СдаватьВФТС.Подсказка = ?(ОператорПоддерживаетФТС, НСтр("ru = 'Федеральная таможенная служба'"),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Федеральная таможенная служба (не поддерживается %1)'"), Строка(Спецоператор)));
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности()
	
	ПроверитьИзменилисьЛиРеквизитыПодключенияК1СОтчетности();
	Надпись = Элементы.ПодсказкаИзменитьРеквизитыПодключенияК1СОтчетности;
	
	// Определяем цвет
	Надпись.ЦветТекста = СинийЦветПодсказки;
	
	// Определяем заголовок
	ТекстЗаголовка = "";
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ТекстЗаголовка = "";
	ИначеЕсли ИзменилисьРеквизитыПодключенияК1СОтчетности И НЕ ПустаяСтрока(ИзмененныеРеквизиты) Тогда
		ТекстЗаголовка = ИзмененныеРеквизиты;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'реквизиты не менялись'");
	КонецЕсли;
	Надпись.Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаСервере
Процедура ОформитьПодсказкуДляГалкиИзменитьМобильныйТелефон()
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		Элементы.ГруппаЗакладокМобильногоТелефона.ТекущаяСтраница = Элементы.ГруппаМобильныйТелефонНеДоступен;
	Иначе
		Элементы.ГруппаЗакладокМобильногоТелефона.ТекущаяСтраница = Элементы.ГруппаМобильныйТелефонДоступен;
        Элементы.ГруппаМобильныйТелефонДоступен.Доступность = ИзменитьМобильныйТелефон;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьГиперссылку(ИмяЭлемента, Знач Значение, ОбязательныйДляЗаполнения, Доступно)
	
	Элемент = Элементы[ИмяЭлемента];
	
	ПроверяемоеЗначение	= Строка(Значение);
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение,"-","");
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение,",","");
	ПроверяемоеЗначение	= СтрЗаменить(ПроверяемоеЗначение," ","");
	
	ЗначениеЗаполнено 	= ЗначениеЗаполнено(ПроверяемоеЗначение);
	Элемент.Доступность = Доступно;
	
	// Заголовок
	Если ЗначениеЗаполнено Тогда
		Элемент.Заголовок = Строка(Значение);
	Иначе
		Элемент.Заголовок = "Заполнить";
	КонецЕсли;
	
	// Цвет
	Если НЕ Доступно Тогда
		Элемент.ЦветТекста 	= СерыйЦвет;
	ИначеЕсли ЗначениеЗаполнено Тогда
		Элемент.ЦветТекста 	= СинийЦвет;
	Иначе
		Элемент.ЦветТекста 	= ?(ОбязательныйДляЗаполнения, КрасныйЦвет, СинийЦвет);
	КонецЕсли;
	
	Элемент.Гиперссылка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЭлементыФормыНаПервомШаге(ДанныеОрганизации)
	
	Элементы.ГруппаВыбораДействия.Доступность = ПоддерживаетсяВторичноеЗаявление;
	
	ОформитьПодсказкуДляГалкиПродлитьСертификат();
	ОформитьПодсказкуДляГалкиИзменитьВладельцаСертификата();
	ОформитьПодсказкуДляГалкиПродлитьЛицензиюНа1СОтчетность();
	ОформитьЭлементыДляГалкиИзменитьСоставНалоговыхОргановШаг1(ДанныеОрганизации);
	ОформитьПодсказкуДляГалкиИзменитьРеквизитыПодключенияК1СОтчетности();
	ОформитьПодсказкуДляГалкиИзменитьМобильныйТелефон();
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		ИзменитьВладельцаСертификата = Ложь;
	КонецЕсли;
	
	ОпределитьВозможностьВыбораМестаХраненияКлючей(ЭтотОбъект);
	
	ВозможноБезбумажноеПродление = БезбумажноеПродлениеВозможно(ЭтотОбъект);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьМобильногоТелефона()
	
	Элементы.ИзменитьМобильныйТелефон.Видимость = ОператорПоддерживаетСМСУведомление;
	Элементы.ГруппаЗакладокМобильногоТелефона.Видимость = ОператорПоддерживаетСМСУведомление;
	
	Если НЕ ОператорПоддерживаетСМСУведомление Тогда
		ТелефонМобильныйИзменился = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

&НаКлиенте
Процедура ОпределитьИсходныеПараметрыПодключенияК1СОтчетности(УчетнаяЗапись, ВходящийКонтекст)
	
	ОчиститьИсходныеЗначения();
	
	// Инициализация на сервере 
	ПрочитатьРегистрДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись);
	
	// Нужно ли продление сертификата
	ПроверитьТребуетсяЛиПродлениеСертификата(ВходящийКонтекст); // асинхронная
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРегистрДополнительныеРеквизитыУчетнойЗаписи(УчетнаяЗапись)

	// Обновляем информацию по учетной записи
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТипКриптопровайдера КАК ТипКриптопровайдера,
		|	ДополнительныеРеквизитыУчетнойЗаписи.НомерОсновнойПоставки1с КАК НомерОсновнойПоставки1с,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КраткоеНаименование КАК КраткоеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ПолноеНаименование КАК ПолноеНаименование,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ИНН КАК ИНН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КПП КАК КПП,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ОГРН КАК ОГРН,
		|	ДополнительныеРеквизитыУчетнойЗаписи.РегНомерПФР КАК РегНомерПФР,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПФамилия КАК ВладелецЭЦПФамилия,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПИмя КАК ВладелецЭЦПИмя,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПОтчество КАК ВладелецЭЦПОтчество,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦППодразделение КАК ВладелецЭЦППодразделение,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПСНИЛС КАК ВладелецЭЦПСНИЛС,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ВладелецЭЦПДолжность КАК ВладелецЭЦПДолжность,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонМобильный КАК ТелефонМобильный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонОсновной КАК ТелефонОсновной,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ТелефонДополнительный КАК ТелефонДополнительный,
		|	ДополнительныеРеквизитыУчетнойЗаписи.КодРегионаФСРАР КАК КодРегионаФСРАР,
		|	ДополнительныеРеквизитыУчетнойЗаписи.ЛицензияКриптоПроВключенаВСертификат КАК ЛицензияКриптоПроВключенаВСертификат
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписи КАК ДополнительныеРеквизитыУчетнойЗаписи
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписи.УчетнаяЗапись = &УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	ДополнительныеРеквизитыУчетнойЗаписи = Запрос.Выполнить().Выгрузить();
	
	Если ДополнительныеРеквизитыУчетнойЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипКриптопровайдераИсходный 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТипКриптопровайдера;
	НомерОсновнойПоставки1сИсходный 	= ДополнительныеРеквизитыУчетнойЗаписи[0].НомерОсновнойПоставки1с;
	КраткоеНаименованиеИсходное 		= ДополнительныеРеквизитыУчетнойЗаписи[0].КраткоеНаименование;
	ПолноеНаименованиеИсходное 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ПолноеНаименование;
	КППИсходный 						= ДополнительныеРеквизитыУчетнойЗаписи[0].КПП;
	ОГРНИсходный 						= ДополнительныеРеквизитыУчетнойЗаписи[0].ОГРН;
	РегНомерПФРИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].РегНомерПФР;
	ЭлектроннаяПочтаИсходная 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ЭлектроннаяПочта;
	ВладелецЭЦПФамилияИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПФамилия;
	ВладелецЭЦПИмяИсходный 				= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПИмя;
	ВладелецЭЦПОтчествоИсходный			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПОтчество;
	ВладелецЭЦППодразделениеИсходное 	= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦППодразделение;
	ВладелецЭЦПСНИЛСИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПСНИЛС;
	ВладелецЭЦПДолжностьИсходная 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ВладелецЭЦПДолжность;
	ТелефонМобильныйИсходный			= ПреобразоватьНомерТелефонаКМаскеСервер(ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонМобильный);
	ТелефонОсновнойИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонОсновной;
	ТелефонДополнительныйИсходный 		= ДополнительныеРеквизитыУчетнойЗаписи[0].ТелефонДополнительный;
	КодРегионаФСРАРИсходный 			= ДополнительныеРеквизитыУчетнойЗаписи[0].КодРегионаФСРАР;
	ЛицензияНаименование 				= УчетнаяЗапись.ЛицензияНаименование;
	ЛицензияДатаНачала 					= УчетнаяЗапись.ЛицензияДатаНачала;
	ЛицензияДатаОкончания 				= УчетнаяЗапись.ЛицензияДатаОкончания + 24*60*60; // В последний день лицензия еще действует.
	ПолучатьУведомления 				= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйЗаполнен(ТелефонМобильныйИсходный);
	ЛицензияКриптоПроВключенаВСертификат= ДополнительныеРеквизитыУчетнойЗаписи[0].ЛицензияКриптоПроВключенаВСертификат;
	
	Если ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		ТелефонМобильный = ТелефонМобильныйИсходный;
	КонецЕсли;

	ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия = УчетнаяЗапись.ЛицензияТребуетсяНапоминаниеОбОкончанииСрокаДействия;
	
	// Обновляем информацию о направлениях сдачи отчетности
	ПолучателиФНСИсходные.Очистить();
	ПолучателиФСГСИсходные.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.ТипПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя,
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КПП
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись";

	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНаправлений Из Результат Цикл
		Если СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			СдаватьВПФРИсходный = Истина;
			КодПФРИсходный 		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СтрокаВФорматеДляСравнения(СтрокаНаправлений.КодПолучателя);
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			СдаватьВФССИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			СдаватьВФНСИсходный = Истина;
			
			НоваяСтрока = ПолучателиФНСИсходные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
			
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			
			СдаватьВРосстатИсходный = Истина;
			
			НоваяСтрока = ПолучателиФСГСИсходные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНаправлений);
			
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			СдаватьВФСРАРИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			СдаватьВРПНИсходный = Истина;
		ИначеЕсли СтрокаНаправлений.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			СдаватьВФТСИсходный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КодыФНСПрописьюИсходные 	= ПолучитьКодыФНСПрописью(ПолучателиФНСИсходные);
	КодыРосстатПрописьюИсходные = ПолучитьКодыРосстатПрописью(ПолучателиФСГСИсходные);
	
КонецПроцедуры

#КонецОбласти

#Область Основные

&НаКлиенте
Процедура ПереопределитьГалкиНаОснованииВнешнихДанных()
	
	Если ТипЗнч(ВходящиеФлагиМастера) = Тип("Структура") Тогда 
		
		НеобходмоПереиздать = 0;
		Если ВходящиеФлагиМастера.ПродлитьСертификат Тогда 
			НеобходмоПереиздать = НеобходмоПереиздать + 1;
		КонецЕсли;
		Если ВходящиеФлагиМастера.ИзменитьРеквизитыПодключенияК1СОтчетности Тогда 
			НеобходмоПереиздать = НеобходмоПереиздать + 1;
		КонецЕсли;
		
		Если ПереиздатьСертификат = 0 Тогда 
			ПереиздатьСертификат = НеобходмоПереиздать;
			ПереиздатьСертификатПриИзменении(Элементы.ПереиздатьСертификат);
		КонецЕсли;
		
		Если ВходящиеФлагиМастера.ИзменитьРеквизитыПодключенияК1СОтчетности И НЕ ИзменитьРеквизитыПодключенияК1СОтчетности Тогда 
			ИзменитьРеквизитыПодключенияК1СОтчетности = Истина;
			ИзменитьРеквизитыПодключенияК1СОтчетностиПриИзменении(Элементы.ИзменитьРеквизитыПодключенияК1СОтчетности);
		КонецЕсли;
		
		Если ВходящиеФлагиМастера.ПродлитьСертификат И НЕ ПродлитьСертификат Тогда 
			ПродлитьСертификат = Истина;
			ПродлитьСертификатПриИзменении(Элементы.ПродлитьСертификат);
		КонецЕсли;
		
		Если ВходящиеФлагиМастера.ПродлитьЛицензиюНа1СОтчетность И НЕ ПродлитьЛицензиюНа1СОтчетность Тогда 
			ПродлитьЛицензиюНа1СОтчетность = Истина;
			ПродлитьЛицензиюНа1СОтчетностьПриИзменении(Элементы.ПродлитьЛицензиюНа1СОтчетность);
		КонецЕсли;
		
		Если ВходящиеФлагиМастера.Свойство("ПодключаемоеНаправление") Тогда 
			УстановитьФлажокПодключаемогоНаправление(ВходящиеФлагиМастера.ПодключаемоеНаправление);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажокПодключаемогоНаправление(ПодключаемоеНаправление)
	
	ИзменитьСоставКонтролирующихОрганов = Истина;
	ИзменитьСоставКонтролирующихОргановПриИзменении(Неопределено);
	
	Если ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") Тогда
		
		СдаватьВФНС = Истина;
		СдаватьВФНСПриИзменении(Неопределено);
		
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчаниюФНС(ПолучателиФНС, ДанныеОрганизации);
			
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			
		СдаватьВПФР = Истина;
		СдаватьВПФРПриИзменении(Неопределено);
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС") Тогда
			
		СдаватьВРосстат = Истина;
		СдаватьВРосстатПриИзменении(Неопределено);
		
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчаниюФНС(ПолучателиФНС, ДанныеОрганизации);
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчаниюФСГС(ПолучателиФСГС, ДанныеОрганизации);
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
		
		СдаватьВФСС = Истина;
		СдаватьВФССПриИзменении(Неопределено);
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР") Тогда
		
		СдаватьВФСРАР = Истина;
		СдаватьВФСРАРПриИзменении(Неопределено);
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН") Тогда
		
		СдаватьВРПН = Истина;
		СдаватьВРПНПриИзменении(Неопределено);
		
	ИначеЕсли ПодключаемоеНаправление = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФТС") Тогда
		
		СдаватьВФТС = Истина;
		СдаватьВФТСПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизации(ДанныеЗаполнения = Неопределено, ПрограммноеЗаполнение = Истина, ВыполняемоеОповещение = Неопределено)
	
	// Очистка
	ОчиститьСообщения();
	ОчиститьДанныеСотрудника(НЕ ПрограммноеЗаполнение);
	ОчиститьРеквизитыФормы();
	
	// Проверка поддержки отправки вторичного заявления
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	ОператорПоддерживаетСМСУведомление 	= Ложь;
	ОператорПоддерживаетФСРАР 			= Ложь;
	ОператорПоддерживаетРПН 			= Ложь;
	ОператорПоддерживаетФТС 			= Ложь;
	Спецоператор = СпецоператорИзУчетнойЗаписи(УчетнаяЗапись, ОператорПоддерживаетСМСУведомление, ОператорПоддерживаетФСРАР, ОператорПоддерживаетРПН, ОператорПоддерживаетФТС);

	// Проверка поддержки вторичных заявлений
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПрограммноеЗаполнение", 	ПрограммноеЗаполнение);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись", 			УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 	ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения", 		ДанныеЗаполнения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоддерживаетсяОтправкаВторичныхЗаявлений(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизацииЗавершение(ПоддерживаетсяВторичноеЗаявление, ДополнительныеПараметры) Экспорт
	
	ПрограммноеЗаполнение 	= ДополнительныеПараметры.ПрограммноеЗаполнение;
	УчетнаяЗапись 			= ДополнительныеПараметры.УчетнаяЗапись;
	ВыполняемоеОповещение 	= ДополнительныеПараметры.ВыполняемоеОповещение;
	ДанныеЗаполнения 		= ДополнительныеПараметры.ДанныеЗаполнения;
	
	Если НЕ ПоддерживаетсяВторичноеЗаявление Тогда
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыОрганизации(ПрограммноеЗаполнение);
	
	// Определяем исходные параметры подключенния к 1С-Отчетности
	ОпределитьИсходныеПараметрыПодключенияК1СОтчетности(УчетнаяЗапись, ДополнительныеПараметры); // асинхронная
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизации(ПрограммноеЗаполнение)
	
	// Заполняем текущие реквизиты организации
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Организация, ПриОткрытии", Организация, НЕ ДанныеЗаполнения = Неопределено);
	Если ДанныеЗаполнения <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("АдресЮридический",);
		СтруктураРеквизитов.Вставить("АдресФактический",);
	КонецЕсли;
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеЗаполнения = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
	ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения, ПрограммноеЗаполнение);
	
	УстановитьЗаголовокФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДобавитьОрганизациюВЗаголовок(
		ЭтотОбъект.Заголовок, 
		ИспользуетсяОднаОрганизация, 
		КраткоеНаименование,
		// Разный заголовок!
		НСтр("ru = 'Изменение настроек подключения к 1С-Отчетности'"));

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВладельцаЭЦП()
	
	// пытаемся определить тип владельца ЭП исходя из ФИО
	СтруктураФИОРуководителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
	ДанныеРуководителя       = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель"),
		ДанныеОрганизации, 
		Руководитель);
	СНИЛСРуководителя = ДанныеРуководителя.СНИЛС; 
	
	СтруктураФИОГлБухгалтер  = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(ГлБухгалтер);
	ДанныеБухгалтера         = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер"),
		ДанныеОрганизации, 
		Руководитель);
	СНИЛСБухгалтера = ДанныеБухгалтера.СНИЛС; 
	
	// Сравниваем с ФИО руководителя
	Если СтруктураФИОРуководителя.Имя = ВладелецЭЦПИмяИсходный И СтруктураФИОРуководителя.Отчество = ВладелецЭЦПОтчествоИсходный
		И СтруктураФИОРуководителя.Фамилия = ВладелецЭЦПФамилияИсходный
		ИЛИ СНИЛСРуководителя = ВладелецЭЦПСНИЛСИсходный Тогда
		ВладелецЭЦПТипИсходный = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	// Сравниваем с ФИО бухгалтера
	ИначеЕсли СтруктураФИОГлБухгалтер.Имя = ВладелецЭЦПИмяИсходный И СтруктураФИОГлБухгалтер.Отчество = ВладелецЭЦПОтчествоИсходный
		И СтруктураФИОГлБухгалтер.Фамилия = ВладелецЭЦПФамилияИсходный
		ИЛИ СНИЛСБухгалтера = ВладелецЭЦПСНИЛСИсходный Тогда
		ВладелецЭЦПТипИсходный = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	Иначе
		// Если владелец ЭЦП не руководитель и не бухгалтер, то мы можем найти его только по ФИО 
		ВладелецЭЦПИсходный = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ФизЛицоПоФИО(
			ВладелецЭЦПФамилияИсходный, ВладелецЭЦПИмяИсходный, ВладелецЭЦПОтчествоИсходный, ВладелецЭЦПСНИЛСИсходный, Организация);

		СотрудникВыборИсходный  = ВладелецЭЦПИсходный;
		СотрудникВыбор 			= СотрудникВыборИсходный;
		
		ВладелецЭЦПТипИсходный = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	КонецЕсли; 
	
	Если ЭтоЮридическоеЛицо Тогда
		ВладелецЭЦПТип = ВладелецЭЦПТипИсходный;
	Иначе
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	ЗаполнитьДанныеСотрудника(Ложь);
	
	Если НЕ ВладелецЭЦПИзменился Тогда
		Если ВладелецЭЦПТипИсходный = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
			ВладелецЭЦПИсходный = Руководитель;
		ИначеЕсли ВладелецЭЦПТипИсходный = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
			ВладелецЭЦПИсходный = ГлБухгалтер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения, ПрограммноеЗаполнение = Истина)

	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	
	ЭтоЮридическоеЛицо		 = ДанныеОрганизации.ТипОрганизации;
	ПолноеНаименование		 = ДанныеОрганизации.НаимЮЛПол;
	КраткоеНаименование		 = ДанныеОрганизации.КраткоеНаименование;
	ИНН						 = ДанныеОрганизации.ИННЮЛ;
	КПП						 = ДанныеОрганизации.КППЮЛ;
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	
	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если НЕ ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной")) Тогда
		ТелефонОсновной = ДанныеОрганизации.ТелОрганизации;
	КонецЕсли;

	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если НЕ ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный")) Тогда
		ТелефонДополнительный	 = ДанныеОрганизации.ТелРук;
	КонецЕсли;
	АдресЮридическийЗначение	  = ДанныеЗаполнения.АдресЮридическийЗначение;
	АдресЮридическийПредставление = ДанныеЗаполнения.АдресЮридическийПредставление;
	
	// Если реквизита нет в базе, то не обновляем его, потому в этом случае данные, введенные пользователем вручную, затрутся
	Если НЕ ЭтоРеквизитНеХранящийсяВБазе(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта")) Тогда
		ЭлектроннаяПочта = ДанныеОрганизации.ЭлектроннаяПочта;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения	= ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	
	КодРегионаФСРАР = СведенияОбАдресе(АдресЮридическийЗначение).КодРегиона;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокументЗаявление(СохранитьИВыгрузить)
	
    ТекстСообщения = "";
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО(ТекстСообщения);
	
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	Если НЕ ЭтоОткрытиеЗаявления Тогда
		НовыйДокументЗаявление.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ЭтоПереходВОблако Тогда
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = Истина;
	ИначеЕсли ЭтоПереходВКоробку Тогда
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = Ложь;
	Иначе
		НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = ЭтоУчетнаяЗаписьВМоделиСервиса;
	КонецЕсли;
	
	НовыйДокументЗаявление.Дата									= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.ТипЗаявления							= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение;
	НовыйДокументЗаявление.ИдентификаторДокументооборота		= нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	НовыйДокументЗаявление.Статус								= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	НовыйДокументЗаявление.СпецоператорСвязи					= Спецоператор;
	
	Если ВыбранноеМестоХраненияКлюча = Перечисления.МодельРаботыСКлючами.ВМоделиСервиса Тогда
		НовыйДокументЗаявление.ТипКриптопровайдера = Перечисления.ТипыКриптоПровайдеров.CryptoPro;
	Иначе
		НовыйДокументЗаявление.ТипКриптопровайдера = ВыбранноеМестоХраненияКлюча;
	КонецЕсли;
		
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПолноеНаименование					= ПолноеНаименование;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.ОГРН									= ОГРН;
	НовыйДокументЗаявление.ЭтоНотариусАдвокатИлиГКФХ			= ЭтоНотариусАдвокатИлиГКФХ;
	НовыйДокументЗаявление.АдресЮридический 					= АдресЮридическийЗначение;
	НовыйДокументЗаявление.РегНомерПФР							= РегНомерПФР;
	НовыйДокументЗаявление.ТелефонОсновной						= ТелефонОсновной;
	НовыйДокументЗаявление.ТелефонДополнительный				= ТелефонДополнительный;
	НовыйДокументЗаявление.ВключитьЛицензиюКриптоПро 			= ВключатьЛицензиюКриптоПроВСертификат И ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат;
		
	ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
	Если Не ПолучатьУведомления ИЛИ ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
		НовыйДокументЗаявление.ТелефонМобильный = "";
	Иначе
		НовыйДокументЗаявление.ТелефонМобильный = ТелефонМобильный;
	КонецЕсли;
	
	НовыйДокументЗаявление.ВладелецЭЦПТип						= ВладелецЭЦПТип;
	НовыйДокументЗаявление.ВладелецЭЦП							= ВладелецЭЦП;
	НовыйДокументЗаявление.ЭлектроннаяПочта						= ЭлектроннаяПочта;
	НовыйДокументЗаявление.ВладелецЭЦПФамилия					= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя						= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество					= СокрЛП(ВладелецЭЦПОтчество);
	
	Если ЭтоЮридическоеЛицо Тогда
		НовыйДокументЗаявление.ВладелецЭЦПДолжность = ВладелецЭЦПДолжность;
	КонецЕсли;
	
	НовыйДокументЗаявление.ВладелецЭЦППодразделение				= ВладелецЭЦППодразделение;
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента				= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента			= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента			= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента		= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент			= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПДатаРождения				= ВладелецЭЦПДатаРождения;
	НовыйДокументЗаявление.ВладелецЭЦПМестоРождения				= ВладелецЭЦПМестоРождения;
	НовыйДокументЗаявление.ВладелецЭЦПКодПодразделения			= ВладелецЭЦПКодПодразделения;
	НовыйДокументЗаявление.ВладелецЭЦППол						= ВладелецЭЦППол;
	НовыйДокументЗаявление.ВладелецЭЦПГражданство				= ВладелецЭЦПГражданство;
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС						= ВладелецЭЦПСНИЛС;
	
	НовыйДокументЗаявление.Ответственный						= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи			= '00010101';
	
	// Контролирующие органы
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР 	= СдаватьВФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 						= КодРегионаФСРАР;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН 		= СдаватьВРПН;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС 		= СдаватьВФТС;
	
	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из ПолучателиФНС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	Если СдаватьВПФР Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВФСС Тогда 
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВРосстат Тогда
		Для Каждого СтрокаНаправлений Из ПолучателиФСГС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
		КонецЦикла;
	КонецЕсли;
	
	// Записываем перечень изменившихся реквизитов
	НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Очистить();
	Для каждого СтрокаТаблицыПодтверждения Из ТаблицаДанныхЗаявленияНаПодключение Цикл
		
		// Записываем в документ только изменившиеся реквизиты
		Если СтрокаТаблицыПодтверждения.ЭтотПараметрИзменился И СтрокаТаблицыПодтверждения.ВыделятьСтрокуЖелтым Тогда
			
			НоваяСтрока = НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Добавить();
			НоваяСтрока.ИзмененныйРеквизит = СтрокаТаблицыПодтверждения.ИзмененныйРеквизит;
			
		КонецЕсли;
		
	КонецЦикла;  
	
	НовыйДокументЗаявление.УчетнаяЗапись = УчетнаяЗапись;
	
	Если ПодключитьЭДО Тогда
		НовыйДокументЗаявление.ПодключитьЭДО 			= Истина;
		НовыйДокументЗаявление.ОператорЭДО 				= ОператорЭДО;
		НовыйДокументЗаявление.КодНалоговогоОрганаЭДО 	= КодНалоговогоОрганаЭДО;
	КонецЕсли;
	
	Если ЭтоПереходВОблако Тогда
		НовыйДокументЗаявление.ИдентификаторПроверкиТелефонаДляПаролей         = ИдентификаторПроверкиТелефонаДляПаролей;
		НовыйДокументЗаявление.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей = ИдентификаторПроверкиЭлектроннойПочтыДляПаролей;
	Иначе
		НовыйДокументЗаявление.ИдентификаторПроверкиТелефонаДляПаролей         = ПроверкаТелефонДляПаролей.ИдентификаторПроверки;
		НовыйДокументЗаявление.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей = ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки;
	КонецЕсли;
	
	Если НЕ (НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Найти(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный, "ИзмененныйРеквизит") <> Неопределено
		И НовыйДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Количество() = 1
		И Не ТелефонИзменен И ЭлектроннаяПочтаИзменена) ИЛИ НЕ ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		// Сохранение документа
		Если СохранитьИВыгрузить = 1 или СохранитьИВыгрузить = 2 Тогда
			Если НовыйДокументЗаявление.ЭтоНовый() Тогда
				СсылкаНаЗаявление = Документы.ЗаявлениеАбонентаСпецоператораСвязи.ПолучитьСсылку(Новый УникальныйИдентификатор);
			Иначе
				СсылкаНаЗаявление = НовыйДокументЗаявление.Ссылка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлСканПаспорт) Тогда
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", Неопределено);
				ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаЗаявление);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ФайлСканПаспорт.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", ФайлСканПаспорт.Расширение);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
				
				ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ФайлСканПаспорт.Адрес);
				НоваяСтрока = НовыйДокументЗаявление.ЭлектронныеДокументы.Добавить();
				НоваяСтрока.Документ = "Паспорт";
				НоваяСтрока.Файл = ПрисоединенныйФайл;
			КонецЕсли;
			Если НовыйДокументЗаявление.ЭтоНовый() Тогда
				НовыйДокументЗаявление.УстановитьСсылкуНового(СсылкаНаЗаявление);
			КонецЕсли;
			НовыйДокументЗаявление.Сертификат = Новый ХранилищеЗначения(СвойстваТекущегоСертификата);
			НовыйДокументЗаявление.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление()
	
	Если ДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.НайтиСтроки(Новый Структура("ИзмененныйРеквизит", ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"))).Количество() = 1
		И ДокументЗаявление.ИзменившиесяРеквизитыВторичногоЗаявления.Количество() = 1
		И Не ТелефонИзменен И ЭлектроннаяПочтаИзменена И ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		СформироватьИОтправитьЗаявление_Завершение(Новый Структура("ТолькоИзменениеТелефона"), Новый Структура);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДлительнаяОтправкаКлиент.ПараметрыДлительнойОтправкиЗаявления();
	ДополнительныеПараметры.Вставить("Организация", 	Организация);
	ДополнительныеПараметры.Вставить("СоздаватьКлюч", 	ПереиздатьСертификат <> 0 И НЕ ЭтоУчетнаяЗаписьВМоделиСервиса);
	
	Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительнойОтправкиЗаявления(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СформироватьИОтправитьЗаявление", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьИОтправитьЗаявление()
	
	Если ЭтоУчетнаяЗаписьВМоделиСервиса И ДокументЗаявление.ПодписатьЭП Тогда
		АлгоритмКонтейнераКлючей = КонтекстЭДОКлиент.ЗаявлениеОпределитьАлгоритмДляСозданияКонтейнераКлючей(ДокументЗаявление);
		НачатьОпределениеТекстаЗаявления(АлгоритмКонтейнераКлючей);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
	Иначе
		ОтправитьЗаявлениеИзКонтейнера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьТекстЗаявления() Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюТекстаЗаявления) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюТекстаЗаявления);
		Если ЗначениеЗаполнено(Результат) Тогда
			
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления");
			
			Если Результат.Выполнено Тогда
				
				ТекстОтправляемогоЗаявления 	  = Результат.ТекстОтправляемогоЗаявления;
				АдресТекстаОтправляемогоЗаявления = ПоместитьВоВременноеХранилище(ТекстОтправляемогоЗаявления, Новый УникальныйИдентификатор);
				
				ПрисоединенныйФайлЗаявления = ПрисоединитьФайлЗаявления(АдресТекстаОтправляемогоЗаявления);
				ОтправитьЗаявлениеИзКонтейнера(АдресТекстаОтправляемогоЗаявления);
				
			Иначе
				// Вывод ошибки
				СформироватьИОтправитьЗаявление_Завершение(Результат, Неопределено);
			КонецЕсли;
			
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
		КонецЕсли;
		
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрисоединитьФайлЗаявления(АдресТекстаОтправляемогоЗаявления)
	
	ЭтотОбъект.Прочитать();
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ПрисоединенныйФайлЗаявления = КонтекстЭДОСервер.ПрисоединитьФайлЗаявления(НовыйДокументЗаявление, АдресТекстаОтправляемогоЗаявления, "Заявление_на_изменение");
	НовыйДокументЗаявление.Записать();
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
	Возврат ПрисоединенныйФайлЗаявления;
	
КонецФункции

&НаСервере
Процедура НачатьОпределениеТекстаЗаявления(Алгоритм)

	АдресЗаданияПоПолучениюТекстаЗаявления = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(АдресЗаданияПоПолучениюТекстаЗаявления);
	ДополнительныеПараметры.Добавить(ДокументЗаявление.Ссылка);
	ДополнительныеПараметры.Добавить(Алгоритм);
	
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.НачатьОпределениеТекстаЗаявления", ДополнительныеПараметры);

КонецПроцедуры


&НаКлиенте
Процедура ОтправитьЗаявлениеИзКонтейнера(АдресТекстаОтправляемогоЗаявления = Неопределено)
	
	ИдентификаторАбонента = КонтекстЭДОКлиент.ИдентификаторАбонентаПоОрганизации(Организация);
	
	ФормироватьЗакрытыйКлючИЗапросНаСертификат = ПереиздатьСертификат <> 0;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьИОтправитьЗаявление_Завершение", ЭтотОбъект);
	
	Контекст = КонтекстЭДОКлиент.ПараметрыПроцедурыСформироватьИОтправитьЗаявление();
	Контекст.ДокументЗаявление 							= ДокументЗаявление;
	Контекст.ИдентификаторАбонента 						= ИдентификаторАбонента;
	Контекст.ВызовИзМастераПодключенияК1СОтчетности 	= Истина;
	Контекст.ВыполняемоеОповещение 						= ОписаниеОповещения;
	Контекст.ФормироватьЗакрытыйКлючИЗапросНаСертификат = ФормироватьЗакрытыйКлючИЗапросНаСертификат;
	Контекст.АдресТекстаОтправленногоЗаявления 			= АдресТекстаОтправляемогоЗаявления;
	Контекст.ПрисоединенныйФайлЗаявления 				= ПрисоединенныйФайлЗаявления;
	Если ВключатьЛицензиюКриптоПроВСертификат И ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат Тогда
		Контекст.OIDЛицензииКриптоПро = OIDЛицензииКриптоПро;
	КонецЕсли;
	
	КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(Контекст);
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.Прочитать();
	
	ДлительнаяОтправкаКлиент.ЗакрытьФормуДлительнойОтправкиБезДальнейшихДействий();
	
	Если Не Результат.Свойство("ТолькоИзменениеТелефона") Тогда
		Если Результат.Свойство("ТекстОшибки") Тогда
			ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
		ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
			ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
		КонецЕсли;
		
		// Анализируем 
		Если ТекстОшибокОтправки <> ПолученныйТекстОшибокОтправки Тогда
			ТекстОшибокОтправки = ПолученныйТекстОшибокОтправки;
		КонецЕсли;	
			
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
		Оповестить("Завершение отправки заявления", Результат, ДокументЗаявление.Ссылка);
		ЭтаФорма.Активизировать();
		
		// Меняем код ТОГС на тот, который был указан в заявлении
		Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено")
			И ИзменитьСоставКонтролирующихОрганов
			И ПолучателиФСГС.Количество() = 1
			И СокрЛП(ПолучателиФСГС[0].КодПолучателя) <> ДанныеОрганизации.КодОрганаФСГС Тогда
			
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЗадатьКодОрганаФСГСВОрганизации(
				Организация, 
				СокрЛП(ПолучателиФСГС[0].КодПолучателя));
			
		КонецЕсли;
	Иначе
		ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
	КонецЕсли;	
		
	// Подтверждение смены номера телефона
	Если ЭтоУчетнаяЗаписьВМоделиСервиса 
		И (ТелефонИзменен ИЛИ ЭлектроннаяПочтаИзменена)
		И Не ПереиздатьСертификат Тогда
		Оповещение = Новый ОписаниеОповещения("СформироватьИОтправитьЗаявлениеПослеВводаКодаПодтвреждения", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Сертификат", Сертификат);
		ПараметрыФормы.Вставить("Телефон", ?(ТелефонИзменен, ПроверкаТелефонДляПаролей.ИдентификаторПроверки, Неопределено));
		ПараметрыФормы.Вставить("ЭлектроннаяПочта", ?(ЭлектроннаяПочтаИзменена, ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки, Неопределено));
		
		ОткрытьФорму(
			"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ВводВременногоПароля",
			ПараметрыФормы,
			ЭтаФорма,,,,
			Оповещение);
	Иначе
		СформироватьИОтправитьЗаявлениеПослеВводаКодаПодтвреждения(КодВозвратаДиалога.ОК, Результат);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявлениеПослеВводаКодаПодтвреждения(Результат, ВходящийКонтекст) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если ТипЗнч(ВходящийКонтекст) = Тип("Структура")
			И ВходящийКонтекст.Свойство("СостояниеОтправки")
			И ВходящийКонтекст.СостояниеОтправки = "Заявление отправлено в автоматическую обработку" Тогда
			Элементы.ГруппаПодсказок1.Видимость = Ложь;
			Элементы.ПодсказкаПоРезультатам.Заголовок = НСтр("ru = 'Ваше заявление успешно отправлено в автоматическую обработку'");
		КонецЕсли;
		ОткрытьФормуНаСтраницеРезультатаОтправки();
		
		ПоказатьСледующуюСтраницу();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Изменение номера телефона не было подтверждено'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВТаблицуКриптопровайдерИМодельХраненияКлючей()
	
	// Переход в коробку
	Если ЭтоПереходВКоробку Тогда
		
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку"), 
			НСтр("ru = 'Да'"), 
			Истина);
				
	КонецЕсли;
	
	// Переход в облако
	Если ЭтоПереходВОблако Тогда
		
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереходВОблако"), 
			НСтр("ru = 'Да'"), 
			Истина);
				
	КонецЕсли;
		
	// Криптопровайдер изменился
	Если ЭтоПереходВКоробку ИЛИ ЭтоПереходВОблако ИЛИ ТипКриптопровайдераИзменился Тогда
		
		Если ЭтоПереходВОблако Тогда
			ПредставлениеКриптопровайдера = НСтр("ru = 'Криптопровайдер защищенного хранилища'");
		Иначе
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(
				ВыбранноеМестоХраненияКлюча).Представление;
		КонецЕсли;
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера"), 
			ПредставлениеКриптопровайдера, 
			Истина);
			
	КонецЕсли;
	
КонецПроцедуры
		
&НаКлиенте
Процедура СформироватьТаблицуДляПодтвержденияДанных()
	
	ПорядковыйНомерСтроки = 0;
	
	ТаблицаДанныхЗаявленияНаПодключение.Очистить();
	
	// Общие сведения
	ДобавитьВТаблицу("Общие сведения",,,,Истина); // заголовок 
	
	Если ПереиздатьСертификат = 0 Тогда
		// Ложь
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата"), 
			Ложь, 
			Ложь);
	Иначе
		// Истина
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата"), 
			Истина, 
			Истина);
	КонецЕсли;
		
	ДобавитьВТаблицуКриптопровайдерИМодельХраненияКлючей();
		
	// Регистрационный номер программы
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда 
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С"),
			НомерОсновнойПоставки1с, 
			НомерОсновнойПоставки1сИзменился);
	Иначе
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С"), 
			НомерОсновнойПоставки1сИсходный, 
			Ложь);
	КонецЕсли;
	
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПродлениеАбонентскогоСертификата"), 
		ПродлитьСертификат, 
		ПродлитьСертификат);
	
	Если ПродлитьЛицензиюНа1СОтчетность Тогда
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии"),
			"Да (может потребоваться дополнительная оплата)", 
			ПродлитьЛицензиюНа1СОтчетность);
	Иначе
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии"), 
			"Нет", 
			ПродлитьЛицензиюНа1СОтчетность);
	КонецЕсли;
	
	// Сведения об организации
	ДобавитьВТаблицу("Сведения об организации",,,,Истина); // заголовок
	
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"), 
			КраткоеНаименование, 
			КраткоеНаименованиеИзменилось,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование"), 
			ПолноеНаименование, 
			ПолноеНаименованиеИзменилось,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН"), 
			ИНН, 
			Ложь,
			,
			,
			Организация); // ИНН запрещено менять
			
		Если ЭтоЮридическоеЛицо Тогда
			ДобавитьВТаблицу(
				ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП"), 
				КПП, 
				КППИзменился,
				,
				,
				Организация);
		КонецЕсли;
			
	Иначе
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование"), 
			КраткоеНаименованиеИсходное, 
			Ложь,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование"), 
			ПолноеНаименованиеИсходное, 
			Ложь,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ИНН"), 
			ИНН, 
			Ложь,
			,
			,
			Организация);
			
		Если ЭтоЮридическоеЛицо Тогда
			ДобавитьВТаблицу(
				ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КПП"), 
				КППИсходный, 
				Ложь,
				,
				,
				Организация);
		КонецЕсли;
			
	КонецЕсли;
	
	Если ИзменитьРеквизитыПодключенияК1СОтчетности Тогда
		
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"), 
			ОГРН, 
			ОГРНИзменился,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР"), 
			РегНомерПФР, 
			РегНомерПФРИзменился,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР"), 
			КодРегионаФСРАР, 
			КодРегионаФСРАРИзменился,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной"), 
			ТелефонОсновной, 
			ТелефонОсновнойИзменился,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный"), 
			ТелефонДополнительный, 
			ТелефонДополнительныйИзменился,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта"), 
			ЭлектроннаяПочта, 
			ЭлектроннаяПочтаИзменилась,
			,
			,
			Организация); 
	Иначе
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН"), 
			ОГРНИсходный, 
			Ложь,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.РегНомерПФР"), 
			РегНомерПФРИсходный, 
			Ложь,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР"), 
			КодРегионаФСРАРИсходный, 
			Ложь,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной"), 
			ТелефонОсновнойИсходный, 
			Ложь,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный"), 
			ТелефонДополнительныйИсходный, 
			Ложь,
			,
			,
			Организация);
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта"), 
			ЭлектроннаяПочтаИсходная, 
			Ложь,
			,
			,
			Организация);
			
	КонецЕсли;
	
	// Сведения о сотруднике - владельце электронной подписи
	ДобавитьВТаблицу("Сведения о владельце электронной подписи",,,,Истина); // заголовок
	
	Если ВладелецЭЦПИзменился Тогда
		ВладелецРеквизита = ВладелецЭЦП;
	Иначе
		ВладелецРеквизита = ВладелецЭЦПИсходный;
	КонецЕсли;
	
	Если ИзменитьВладельцаСертификата Тогда
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП"), 
			ВладелецЭЦП, 
			ВладелецЭЦПИзменился,
			,
			,
			ВладелецРеквизита);
	Иначе
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП"), 
			ВладелецЭЦПИсходный, 
			Ложь,
			,
			,
			ВладелецРеквизита);
	КонецЕсли;
	
	Если (ИзменитьРеквизитыПодключенияК1СОтчетности ИЛИ ИзменитьВладельцаСертификата) Тогда
		
		Если ЭтоЮридическоеЛицо Тогда
			ДобавитьВТаблицу(
				ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность"), 
				ВладелецЭЦПДолжность, 
				ВладелецЭЦПДолжностьИзменилась,
				,
				,
				ВладелецРеквизита);
		КонецЕсли;
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС"), 
			ВладелецЭЦПСНИЛС, 
			ВладелецЭЦПСНИЛСИзменился,
			,
			,
			ВладелецРеквизита);
			
	Иначе
		
		Если ЭтоЮридическоеЛицо Тогда
			ДобавитьВТаблицу(
				ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность"), 
				ВладелецЭЦПДолжностьИсходная, 
				Ложь,
				,
				,
				ВладелецРеквизита);
		КонецЕсли;
			
		ДобавитьВТаблицу(
			ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС"), 
			ВладелецЭЦПСНИЛСИсходный, 
			Ложь,
			,
			,
			ВладелецРеквизита);
			
	КонецЕсли;
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения"), 
		Формат(ВладелецЭЦПДатаРождения, "ДЛФ=D"), 
		Ложь,
		,
		,
		ВладелецРеквизита);
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол"), 
		ВладелецЭЦППол, 
		Ложь,
		,
		,
		ВладелецРеквизита);
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство"), 
		ВладелецЭЦПГражданство, 
		Ложь,
		,
		,
		ВладелецРеквизита);
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента"), 
		ВладелецЭЦПВидДокумента, 
		Ложь,
		,
		,
		ВладелецРеквизита);

	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента"), 
		Строка(ВладелецЭЦПСерияДокумента), 
		Ложь,
		,
		,
		ВладелецРеквизита);
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПНомерДокумента"),
		Строка(ВладелецЭЦПНомерДокумента), 
		Ложь,
		,
		,
		ВладелецРеквизита);
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент"), 
		ВладелецЭЦПКемВыданДокумент, 
		Ложь,
		,
		,
		ВладелецРеквизита);
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента"), 
		Формат(ВладелецЭЦПДатаВыдачиДокумента, "ДЛФ=D"), 
		Ложь,
		,
		,
		ВладелецРеквизита);
		
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
			
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения"), 
			ВладелецЭЦПКодПодразделения, 
			Ложь,
			,
			,
			ВладелецРеквизита);
			
	КонецЕсли;
		
	ДобавитьВТаблицу(
		ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения"), 
		ВладелецЭЦПМестоРождения, 
		Ложь,
		,
		,
		ВладелецРеквизита);
	
	Если ОператорПоддерживаетСМСУведомление Тогда
		
		ПолучатьУведомленияИзменен = 
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйЗаполнен(ТелефонМобильныйИсходный)
			И Не ПолучатьУведомления;
			
		Если ИзменитьМобильныйТелефон Тогда
			ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
			
			Если НЕ ПолучатьУведомления И ПолучатьУведомленияИзменен Тогда
				ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"), 
					НСтр("ru = 'Отключены'"), ТелефонМобильныйИзменился,,,,НСтр("ru = 'SMS-уведомления о статусе отправки'"));
			ИначеЕсли ПустаяСтрока(ТелефонМобильныйБезРазделителей) Тогда
				ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"), 
					НСтр("ru = 'Не указан (SMS-уведомления будут отключены)'"), ТелефонМобильныйИзменился);
			Иначе
				ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"), 
					ТелефонМобильный, ТелефонМобильныйИзменился);
			КонецЕсли;
		Иначе
			ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный"), 
				ТелефонМобильныйИсходный, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Сведения о контролирующих органах
	ДобавитьВТаблицу("Сведения о контролирующих органах",,,,Истина); // заголовок
	
	// ФНС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС")
			, СдаватьВФНС, СдаватьВФНСИзменился);
		Если СдаватьВФНС Тогда
			ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодыФНС"), 
				КодыФНСПрописью, КодыФНСИзменились);
		Иначе
			ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодыФНС"), "", Ложь);
		КонецЕсли;
	Иначе
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС"), 
			СдаватьВФНСИсходный, Ложь);
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодыФНС"), 
			КодыФНСПрописьюИсходные, Ложь);
	КонецЕсли;
	
	// ПФР
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР"), 
			СдаватьВПФР, СдаватьВПФРИзменился);
		Если СдаватьВПФР Тогда
			ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодПФР"), 
				КодПФР, КодПФРИзменился);
		Иначе
			ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодПФР"), "", Ложь);
		КонецЕсли;
	Иначе
	    ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР"), 
			СдаватьВПФРИсходный, Ложь);
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодПФР"), 
			КодПФРИсходный, Ложь);
	КонецЕсли;
		
	// ФСС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
 		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС"), 
			СдаватьВФСС, СдаватьВФССИзменился);
	Иначе
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС"),
			СдаватьВФССИсходный, Ложь);
	КонецЕсли;
	
	// Росстат
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат"), 
			СдаватьВРосстат, СдаватьВРосстатИзменился);
			
		Если СдаватьВРосстат Тогда
			ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРосстата"), 
				КодыРосстатПрописью, КодыРосстатаИзменились);
		Иначе
			ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРосстата"), "", Ложь);
		КонецЕсли;
	Иначе
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат"), 
			СдаватьВРосстатИсходный, Ложь);
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРосстата"), 
			КодыРосстатПрописьюИсходные, Ложь);
	КонецЕсли;
	
	// Росалкогольрегулирование
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР"), 
			СдаватьВФСРАР, СдаватьВФСРАРИзменился);
	Иначе
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР"), 
			СдаватьВФСРАРИсходный, Ложь);
	КонецЕсли;
	
	// Росприроднадзор
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН"), 
			СдаватьВРПН, СдаватьВРПНИзменился);
	Иначе
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН"), 
			СдаватьВРПНИсходный, Ложь);
	КонецЕсли;
	
	// ФТС
	Если ИзменитьСоставКонтролирующихОрганов Тогда
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС"), 
			СдаватьВФТС, СдаватьВФТСИзменился);
	Иначе
		ДобавитьВТаблицу(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС"), 
			СдаватьВФТСИсходный, Ложь);
	КонецЕсли;
	
	// Отображение данных по подключению ЭДО
	Если ОтображатьПодключениеЭДО Тогда
		ДобавитьВТаблицу("Подключение к сервису 1С-ЭДО",,,,Истина); // заголовок 
		ДобавитьВТаблицу("Подключиться к сервису", ПодключитьЭДО);
		Если ПодключитьЭДО Тогда
			ДобавитьВТаблицу("Оператор ЭДО", 		ОператорЭДО);
			ДобавитьВТаблицу("Код ФНС", 			КодНалоговогоОрганаЭДО);
			ДобавитьВТаблицу("Юридический адрес", 	АдресЮридическийПредставление);	
		КонецЕсли;
	КонецЕсли;
	
	// Выделяем желтым измененные строки
	ДобавитьЖелтыеСтроки();
	
	ОтметитьНеХранящиесяРеквизиты();
	
	ПроставитьПризнакОшибкиИДоступностиДляРедактированияКонтролируемыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИзПредыдущегоЗаявления()
	
	ПолучателиФНС.Очистить();
	СброситьНаправленияСдачиОтчетности(ЭтотОбъект);
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	ТелефонОсновной					= Реквизит.ТелефонОсновной;
	ТелефонДополнительный			= Реквизит.ТелефонДополнительный;
	ТелефонМобильный				= Реквизит.ТелефонМобильный;
	ЭлектроннаяПочта				= Реквизит.ЭлектроннаяПочта;

	ВладелецЭЦПФамилия				= Реквизит.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя					= Реквизит.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество				= Реквизит.ВладелецЭЦПОтчество;
	ВладелецЭЦПДолжность			= Реквизит.ВладелецЭЦПДолжность;
	ВладелецЭЦППодразделение		= Реквизит.ВладелецЭЦППодразделение;
	ВладелецЭЦПВидДокумента			= Реквизит.ВладелецЭЦПВидДокумента;
	ВладелецЭЦПСерияДокумента		= Реквизит.ВладелецЭЦПСерияДокумента;
	ВладелецЭЦПНомерДокумента		= Реквизит.ВладелецЭЦПНомерДокумента;
	ВладелецЭЦПДатаВыдачиДокумента	= Реквизит.ВладелецЭЦПДатаВыдачиДокумента;
	ВладелецЭЦПКемВыданДокумент		= Реквизит.ВладелецЭЦПКемВыданДокумент;
	НомерОсновнойПоставки1с			= Реквизит.НомерОсновнойПоставки1с;
	СдаватьВФСРАР					= Реквизит.ПодатьЗаявкуНаСертификатДляФСРАР;
	КодРегионаФСРАР					= Реквизит.КодРегионаФСРАР;
	СдаватьВРПН						= Реквизит.ПодатьЗаявкуНаПодключениеРПН;
	СдаватьВФТС						= Реквизит.ПодатьЗаявкуНаПодключениеФТС;
	ВладелецЭЦПСНИЛС				= Реквизит.ВладелецЭЦПСНИЛС;
	ОГРН							= Реквизит.ОГРН;
	
	// Реквизит ВключитьЛицензиюКриптоПро не берем из документа, 
	// так как он расчитывается по особому алгоритму.
	
	Если ЭтоОткрытиеЗаявления Тогда 
		СкопироватьНаправленияИзИсходногоЗаявления();
	Иначе
		СделатьНаправленияСдачиОтчетностиРавнымиИсходным(ЭтотОбъект);
	КонецЕсли;
	
	ВладелецЭЦПТип = Реквизит.ВладелецЭЦПТип;
	
	//заполнение дополнительных реквизитов формы, которых нет в документе
	СогласиеСЛицензионнымСоглашением = Истина;
	
	Если НЕ ПустаяСтрока(ТелефонМобильный) Тогда
		ПолучатьСМС = Истина;
	КонецЕсли;
	
	// Сбрасываем все установленнные флажки
	СброситьВсеФлажки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСканПаспорта()
	
	Для Каждого ЭлектронныйДокумент Из Реквизит.ЭлектронныеДокументы Цикл
		
		Если ЭлектронныйДокумент.Документ <> "Паспорт" Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлектронныйДокумент.Файл, УникальныйИдентификатор, Истина);
		
		Файл = Новый Файл(ДанныеФайла.ИмяФайла);
		
		ФайлСканПаспорт = Новый Структура;
		ФайлСканПаспорт.Вставить("Адрес", ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ФайлСканПаспорт.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ФайлСканПаспорт.Вставить("Расширение", ДанныеФайла.Расширение);
		
		СканПаспорт = Файл.Имя;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Гиперссылки

&НаКлиенте
Процедура ОткрытьПодсказкуПоЭЦП(Команда)
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаПодсказкиПоЭЦП");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПартнеров1С(Команда)
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.1c.ru/rus/partners/onecrep.jsp");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПоПодключению(Команда)
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/bmk/elreps/settings");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеДанныеНаСервере()
	
	ТелефонДляПаролей = "";
	ЭлектроннаяПочтаДляПаролей = "";
	
	ЭтоУчетнаяЗаписьВМоделиСервиса = Ложь;
	Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		Сертификат = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.ПолучитьСертификатПоОрганизации(Организация);
		Если ЗначениеЗаполнено(Сертификат) И Сертификат.Свойство("Идентификатор") Тогда
			НастройкиПолученияВременныхПаролей = ПолучитьСпособыДоставкиПаролей(Сертификат.Идентификатор);
			
			ПроверкаТелефонДляПаролей.ИсходноеЗначение = НастройкиПолученияВременныхПаролей.Телефон;
			ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение = НастройкиПолученияВременныхПаролей.ЭлектроннаяПочта;
			ТелефонДляПаролей = НастройкиПолученияВременныхПаролей.Телефон;
			ЭлектроннаяПочтаДляПаролей = НастройкиПолученияВременныхПаролей.ЭлектроннаяПочта;
			
			ЭтоУчетнаяЗаписьВМоделиСервиса = ЗначениеЗаполнено(НастройкиПолученияВременныхПаролей.Телефон);
		КонецЕсли;
	КонецЕсли;
	
	ЭтаУчетнаяЗаписьБылаСделанаДляОблака = УчетнаяЗапись.ЭлектроннаяПодписьВМоделиСервиса;
	
	Элементы.ИнструкцияПоСозданиюКлючаЭЦП.Видимость = Не ЭтоУчетнаяЗаписьВМоделиСервиса;
	
	ПояснениеПодтвержденияИзмененияТелефонаИПочты = НСтр("ru = 'Изменения необходимо будет подтвердить, введя код отправленный на %1.
                                                          |Если этот телефон больше не доступен, то воспользуйтесь <a href = ""#Инструкция"">инструкцией</a>.'");
												   
	ПояснениеПодтвержденияИзмененияТелефонаИПочты = СтрШаблон(ПояснениеПодтвержденияИзмененияТелефонаИПочты, ПроверкаТелефонДляПаролей.ИсходноеЗначение);
	
	Элементы.ПояснениеПодтвержденияИзмененияТелефонаИПочты.Заголовок = 
		СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ПояснениеПодтвержденияИзмененияТелефонаИПочты);
		
	Если ЭтоУчетнаяЗаписьВМоделиСервиса Тогда
		Элементы.ИзменитьМобильныйТелефон.Заголовок = НСтр("ru = 'Изменение настроек уведомлений о статусе отправки
                                                            |отчетов и входящих сообщениях, получения временных паролей:'");
	Иначе
		Элементы.ИзменитьМобильныйТелефон.Заголовок = НСтр("ru = 'Изменение настроек уведомлений о статусе отправки
                                                            |отчетов и входящих сообщениях:'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособыДоставкиПаролей(Идентификатор)
	
	Попытка
		Возврат СервисКриптографии.ПолучитьНастройкиПолученияВременныхПаролей(Идентификатор);
	Исключение
		Возврат Новый Структура("Телефон, ЭлектроннаяПочта", "", "");
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	ВидОбменаСКонтролирующимиОрганами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидОбменаСКонтролирующимиОрганами");
	Если ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
		И ЗначениеЗаполнено(Организация.УчетнаяЗаписьОбмена) Тогда
		
		УчетнаяЗапись = Организация.УчетнаяЗаписьОбмена;
		ЕстьОшибкиСменыМоделиХраненияКлючей = УчетнаяЗапись.ЕстьОшибкиСменыМоделиХраненияКлючей;
		 
	Иначе
		УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
	Возврат УчетнаяЗапись;
	
КонецФункции

&НаСервере
Функция СпецоператорИзУчетнойЗаписи(УчетнаяЗапись, ОператорПоддерживаетСМСУведомление = Неопределено, ОператорПоддерживаетФСРАР = Неопределено, ОператорПоддерживаетРПН = Неопределено, ОператорПоддерживаетФТС = Неопределено)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ОператорПоддерживаетСМСУведомление = (ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ПризнакПоддержкиСМС") = "Истина");
	
	ОператорПоддерживаетФСРАРЗначение = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ФСРАРПризнак");
	ОператорПоддерживаетФСРАР = (ОператорПоддерживаетФСРАРЗначение = Истина ИЛИ ОператорПоддерживаетФСРАРЗначение = "Истина");
	
	ОператорПоддерживаетРПНЗначение = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "РПНПризнак");
	ОператорПоддерживаетРПН = (ОператорПоддерживаетРПНЗначение = Истина ИЛИ ОператорПоддерживаетРПНЗначение = "Истина");
	
	ОператорПоддерживаетФТСЗначение = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(УчетнаяЗапись.СпецоператорСвязи, "ФТСПризнак");
	ОператорПоддерживаетФТС = (ОператорПоддерживаетФТСЗначение = Истина ИЛИ ОператорПоддерживаетФТСЗначение = "Истина");
	
	Возврат УчетнаяЗапись.СпецоператорСвязи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьЗапятуюНаИВСтроке(Текст)

	// В списке реквизитов заменяем последнюю запятую на букву "и"
	Если СтрЧислоВхождений(Текст, "%1") = 1 Тогда
		
		Текст = СтрЗаменить(Текст, "%1", " и ");
		
	ИначеЕсли СтрЧислоВхождений(Текст, "%1") > 1 Тогда
		
		МассивПодстрок 				= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "%1");
		ПоследнийЭлементМассива 	= МассивПодстрок[МассивПодстрок.Количество() - 1];
		Текст 						= СтрЗаменить(Текст, "%1" + ПоследнийЭлементМассива, " и " + ПоследнийЭлементМассива);
		
	КонецЕсли;
	
	Текст = СтрЗаменить(Текст, "%1", ", ");

КонецПроцедуры

&НаСервере
Функция НаименованиеСубъектаРФ(КодРегиона)
	
	Результат = "";
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетКодыРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	НомерКолонкиКодРегиона = МакетКодыРегионов.Область("КодРегиона").Лево;
	НомерКолонкиНаименованиеРегиона = МакетКодыРегионов.Область("НаименованиеРегиона").Лево;
	ОбластьПоискаКодаРегиона = МакетКодыРегионов.Область(1, НомерКолонкиКодРегиона, МакетКодыРегионов.ВысотаТаблицы, НомерКолонкиКодРегиона);
	
	ОбластьСКодомРегиона = МакетКодыРегионов.НайтиТекст(Формат(Число(КодРегиона), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;"), , ОбластьПоискаКодаРегиона, , Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		Результат = МакетКодыРегионов.Область(ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона, ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона).Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьНомерТелефонаКМаскеСервер(НомерТелефона)
	
	// Маска +7 (999) 999-99-99
	// Номер телефона 89851234567
	КодВСкобках =  Сред(НомерТелефона, 2,3);
	ПервыйБлокЧисел = Сред(НомерТелефона, 5,3);
	ВторойБлокЧисел = Сред(НомерТелефона, 8,2);
	ТретийБлокЧисел = Сред(НомерТелефона, 10,2);

	Результат = "";
	Если НЕ ПустаяСтрока(СтрЗаменить(НомерТелефона, "-", "")) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					  "+7 (%1) %2-%3-%4",
					  КодВСкобках,
					  ПервыйБлокЧисел,
					  ВторойБлокЧисел,
					  ТретийБлокЧисел)
	КонецЕсли;
				  
	Возврат Результат;  

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СравнитьКриптопровайдера(Форма)

	ИзменилсяКриптопровайдерЛокальнойУчетки = НЕ Форма.ЭтаУчетнаяЗаписьБылаСделанаДляОблака 
		И Форма.ТипКриптопровайдераИсходный <> Форма.ВыбранноеМестоХраненияКлюча; 
	
	Форма.ТипКриптопровайдераИзменился = Форма.ЭтоПереходВКоробку 
		ИЛИ Форма.ЭтоПереходВОблако 
		ИЛИ ИзменилсяКриптопровайдерЛокальнойУчетки;
	
КонецПроцедуры

&НаСервере
Функция ИмяПеречисленияПараметрыПодключенияК1СОтчетности(ЭлементПеречисления)
	
	ИмяПеречисления = ЭлементПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления.ПараметрыПодключенияК1СОтчетности.Индекс(ЭлементПеречисления);
	Возврат Метаданные.Перечисления.ПараметрыПодключенияК1СОтчетности.ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

КонецФункции
	
&НаКлиенте
Процедура ПоддерживаетсяОтправкаВторичныхЗаявлений(ВыполняемоеОповещение)
	
	ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоддерживаетсяОтправкаВторичныхЗаявленийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(
		ОписаниеОповещения,
		УчетнаяЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддерживаетсяОтправкаВторичныхЗаявленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	ПоддерживаетсяВторичноеЗаявление = Истина;
	ЕстьДанныеДляФормированияВторичногоЗаявления = Результат.ЕстьДанные;
	УжеНастроенаУчетнаяЗаписьДокументооборота = ЗначениеЗаполнено(УчетнаяЗаписьОрганизации(Организация));
	СпецоператорПоддерживаетВторичныеЗаявления = КонтекстЭДОКлиент.ПоддерживаетсяВторичноеЗаявление(Организация);
	
	// Проверяем возможность создания вторичного заявления
	Если НЕ УжеНастроенаУчетнаяЗаписьДокументооборота ИЛИ НЕ СпецоператорПоддерживаетВторичныеЗаявления ИЛИ НЕ ЕстьДанныеДляФормированияВторичногоЗаявления Тогда
		
		ПоддерживаетсяВторичноеЗаявление = Ложь;
		ОформитьЭлементыФормыНаПервомШаге(ДанныеОрганизации);
		
		Если НЕ УжеНастроенаУчетнаяЗаписьДокументооборота Тогда
			
			// Случай, когда организация не подключена к 1С-Отчетности
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПоказатьФормуПредложениеОформитьЗаявлениеНаПодключение(Организация);
			
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

		ИначеЕсли НЕ СпецоператорПоддерживаетВторичныеЗаявления Тогда
			
			// Случай, когда оператор электронного документооборота не поддерживает отправку вторичных заявлений
			ПоказатьПредупреждение(, НСтр("ru = 'Оператор электронного документооборота не поддерживает отправку вторичных заявлений.
									|Для изменения настроек подключения к 1С-Отчетности свяжитесь со службой поддержки оператора электронного документооборота'"));
									
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
		
		ИначеЕсли НЕ ЕстьДанныеДляФормированияВторичногоЗаявления Тогда
			
			// Случай, когда невозможно получить новый рег файл 
			ТекстОшибокДляМастераПодключенияК1СОтчетности = "";
			
			ДополнительныеПараметры = Новый Структура("ТекстОшибокДляМастераПодключенияК1СОтчетности, УчетнаяЗапись, ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление", ТекстОшибокДляМастераПодключенияК1СОтчетности, УчетнаяЗапись, ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПоддерживаетсяОтправкаВторичныхЗаявленийПовторныйЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			КонтекстЭДОКлиент.ЕстьДанныеДляФормированияВторичногоЗаявления(
				ОписаниеОповещения,
				УчетнаяЗапись,
				ТекстОшибокДляМастераПодключенияК1СОтчетности);

		Иначе
			
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

		КонецЕсли;
	Иначе
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддерживаетсяОтправкаВторичныхЗаявленийПовторныйЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьДанные = Результат.ЕстьДанные;
	ТекстОшибокДляМастераПодключенияК1СОтчетности = Результат.ТекстОшибок;
	УчетнаяЗапись = ДополнительныеПараметры.УчетнаяЗапись;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоддерживаетсяВторичноеЗаявление = ДополнительныеПараметры.ПоддерживаетсяВторичноеЗаявление;
	
	Если НЕ ЕстьДанные Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ПараметрыФормы.Вставить("ТекстОшибки", ТекстОшибокДляМастераПодключенияК1СОтчетности);
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ПредупреждениеОНевозможностиПолучитьНастройкиУчетнойЗаписи", ПараметрыФормы);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ПоддерживаетсяВторичноеЗаявление);

КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСдачиОтчетностиПодключено(ИмяФлагаНаправленияСдачиОтчетности, НаправлениеСдачиОтчетности, ИзначальноНаправлениеБылоПодключено, ВыполняемоеОповещение)

	НаправлениеПодключено = ЭтаФорма[ИмяФлагаНаправленияСдачиОтчетности];
	
	Результат = НаправлениеПодключено;
	
	Если ИзначальноНаправлениеБылоПодключено И НЕ НаправлениеПодключено Тогда
		
		ЭтаФорма[ИмяФлагаНаправленияСдачиОтчетности] = Истина;
		
		ТекстВопрос = НСтр("ru = 'Отправка отчетности в %1 станет недоступной после отключения данного направления.
		|Вы уверены, что хотите отключить направление сдачи отчетности %1 ?'");
		ТекстВопрос = СтрЗаменить(ТекстВопрос, "%1", НаправлениеСдачиОтчетности);
		ОписаниеОповещения = Новый ОписаниеОповещения("НаправлениеСдачиОтчетностиПодключеноЗавершение", ЭтотОбъект, ВыполняемоеОповещение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопрос, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеСдачиОтчетностиПодключеноЗавершение(Ответ, ВыполняемоеОповещение) Экспорт
	
	Результат = (Ответ <> КодВозвратаДиалога.Да);
	
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоЭПВОблакеИНеПереходВКоробку = Форма.ЭтоУчетнаяЗаписьВМоделиСервиса И НЕ Форма.ЭтоПереходВКоробку;
	
	// Изменение номера телефона
	Элементы.ТелефонМобильный.Видимость = Не ЭтоЭПВОблакеИНеПереходВКоробку;
	Элементы.ТелефонДляПаролей.Видимость = ЭтоЭПВОблакеИНеПереходВКоробку;
	
	// Телефон для паролей
	Элементы.КартинкаТелефонПроверен.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено И ЭтоЭПВОблакеИНеПереходВКоробку;
	Элементы.ПроверитьНомер.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка
		И ЭтоЭПВОблакеИНеПереходВКоробку;
	Элементы.ТелефонДляПаролей.ТолькоПросмотр = ЗначениеЗаполнено(Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Элементы.ГруппаКодПодтвержденияТелефон.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено
		И ЭтоЭПВОблакеИНеПереходВКоробку;
		
	Элементы.ОтправитьКодПовторноТелефон.Видимость = 
		Не Форма.ПроверкаТелефонДляПаролей.КодОтправлен И ЭтоЭПВОблакеИНеПереходВКоробку;
	Элементы.НадписьОбратногоОтсчетаТелефон.Видимость = 
		Форма.ПроверкаТелефонДляПаролей.КодОтправлен И ЭтоЭПВОблакеИНеПереходВКоробку;
	
	// Электронная почта для паролей
	Элементы.КартинкаЭлектроннаяПочтаПроверена.Видимость =
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено И ЭтоЭПВОблакеИНеПереходВКоробку;
	Элементы.ПроверитьАдрес.Видимость = 
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка
		И ЭтоЭПВОблакеИНеПереходВКоробку;
	Элементы.ЭлектроннаяПочтаДляПаролей.ТолькоПросмотр = ЗначениеЗаполнено(Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки);
	Элементы.ГруппаКодПодтвержденияЭлектроннаяПочта.Видимость = 
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 
		И ЭтоЭПВОблакеИНеПереходВКоробку;
		
	Элементы.ОтправитьКодПовторноЭлектроннаяПочта.Видимость = 
		Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен И ЭтоЭПВОблакеИНеПереходВКоробку;
	Элементы.НадписьОбратногоОтсчетаЭлектроннаяПочта.Видимость = 
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен И ЭтоЭПВОблакеИНеПереходВКоробку;

	Форма.ТелефонИзменен = Форма.ПроверкаТелефонДляПаролей.ИсходноеЗначение <> Форма.ТелефонДляПаролей И Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено;
	Форма.ЭлектроннаяПочтаИзменена = 
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение <> Форма.ЭлектроннаяПочтаДляПаролей 
		И (Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено ИЛИ Не ЗначениеЗаполнено(Форма.ЭлектроннаяПочтаДляПаролей));
	
		
	Элементы.ПояснениеПодтвержденияИзмененияТелефонаИПочты.Видимость = 
		ЭтоЭПВОблакеИНеПереходВКоробку;

	Элементы.ГруппаЭлектроннаяПочта.Видимость = ЭтоЭПВОблакеИНеПереходВКоробку;

	//Подключение ЭДО
	Элементы.ПодключениеЭДО.Видимость = Форма.ОтображатьПодключениеЭДО;
	Если Форма.ОтображатьПодключениеЭДО Тогда
		Элементы.ГруппаПараметрыСервиса.Доступность	= Форма.ПодключитьЭДО;
	КонецЕсли;
	
	Элементы.ГруппаСканПаспорта.Видимость = БезбумажноеПродлениеВозможно(Форма);
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьГалкуПереиздатьСертификатИОпределитьПричиныПереиздания(ЭтоПопыткаРучногоИзменения = Ложь)
	
	ИзменилисьРеквизитыСертификата = ИзменилисьРеквизитыТребующиеПереизданияСертификата();
	
	Если ИзменилисьРеквизитыСертификата Тогда
		
		// Оставляем без изменения, так как нельзя снимать
		ПереиздатьСертификат = 2;
		
	Иначе
		
		НеобходимоСброситьФлаг = ЭтоПопыткаРучногоИзменения И ПереиздатьСертификат = 2 
			ИЛИ НЕ ЭтоПопыткаРучногоИзменения И СертификатДоступен;
		
		Если НеобходимоСброситьФлаг Тогда
			ПереиздатьСертификат = 0;
		Иначе
			ПереиздатьСертификат = 1;
		КонецЕсли;
				
	КонецЕсли;
	
	ОпределитьПричинуПереизданияСертификата();
	
	ВозможноБезбумажноеПродление = БезбумажноеПродлениеВозможно(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВозможностьВыбораМестаХраненияКлючей(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПоддерживаетсяВторичноеЗаявление Тогда
		Элементы.ВыборМестаХраненияКлючей.Видимость = Истина;
		Элементы.НетВыбораМестаХранения.Видимость   = Истина;
		Элементы.ЕстьВыборМестаХранения.Видимость   = Истина;
	Иначе
		Элементы.ВыборМестаХраненияКлючей.Видимость = Ложь;
		Элементы.НетВыбораМестаХранения.Видимость   = Ложь;
		Элементы.ЕстьВыборМестаХранения.Видимость   = Ложь;
		Возврат;
	КонецЕсли;
	
	УстановленТолькоОдинКриптопровайдер = Форма.КомпонентаУстановлена 
		И (Форма.ViPNetCSPУстановлен ИЛИ Форма.CryptoProCSPУстановлен)
		И НЕ (Форма.ViPNetCSPУстановлен И Форма.CryptoProCSPУстановлен);
		
	Если УстановленТолькоОдинКриптопровайдер И НЕ Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		// Нет выбора 
		
		Форма.ЕстьВыборМестаХраненияКлючей = Ложь;
		Элементы.ВыборМестаХраненияКлючей.ТекущаяСтраница = Элементы.НетВыбораМестаХранения;
		Элементы.НетВыбораМестаХранения.Видимость = Истина;
		Элементы.ЕстьВыборМестаХранения.Видимость = Ложь;
		
		Если Форма.ViPNetCSPУстановлен Тогда
			Форма.КриптопровайдерПредставление = Новый ФорматированнаяСтрока(НСтр("ru = 'Программа защиты информации: ViPNet CSP'"));
		Иначе
			Форма.КриптопровайдерПредставление = Новый ФорматированнаяСтрока(НСтр("ru = 'Программа защиты информации: CryptoPro CSP'"));
		КонецЕсли;
		
	Иначе
		
		// Есть выбор
		Форма.ЕстьВыборМестаХраненияКлючей = Истина;
		Элементы.ВыборМестаХраненияКлючей.ТекущаяСтраница = Элементы.ЕстьВыборМестаХранения;
		Элементы.НетВыбораМестаХранения.Видимость = Ложь;
		Элементы.ЕстьВыборМестаХранения.Видимость = Истина;
		
		Элементы.ВыбранноеМестоХраненияКлюча.СписокВыбора.Очистить();
		
		Если Форма.ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
		
			Элементы.ВыбранноеМестоХраненияКлюча.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.МодельРаботыСКлючами.ВМоделиСервиса"),
				НСтр("ru = 'В защищенном хранилище сервиса'"));
			
		КонецЕсли;
		
		ПоказыватьОбаКриптопровайдера = НЕ Форма.КомпонентаУстановлена
			ИЛИ Форма.КомпонентаУстановлена И НЕ Форма.ViPNetCSPУстановлен И НЕ Форма.CryptoProCSPУстановлен; // не установлено ни одно криптопровайдера
				
		Если Форма.ViPNetCSPУстановлен ИЛИ ПоказыватьОбаКриптопровайдера Тогда
			Элементы.ВыбранноеМестоХраненияКлюча.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet"),
				НСтр("ru = 'На рабочем компьютере (ViPNet CSP)'"));
		КонецЕсли;
			
		Если Форма.CryptoProCSPУстановлен ИЛИ ПоказыватьОбаКриптопровайдера Тогда
			Элементы.ВыбранноеМестоХраненияКлюча.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro"),
				НСтр("ru = 'На рабочем компьютере (CryptoPro CSP)'"));
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПричинуПереизданияСертификата()
	
	ТаблицаПричинПереизданияСертификата.Очистить();
	ПричиныПереизданияСертификата = "";
	
	Если ПереиздатьСертификат = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПричиныПереизданияСертификата.ЦветТекста = СинийЦветПодсказки;

	// Краткое наименование
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование");
	НоваяСтрока.Изменился	= КраткоеНаименованиеИзменилось И ИзменитьРеквизитыПодключенияК1СОтчетности;
	НоваяСтрока.Группа		= "Организация";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменилось'");
	
	// ОГРН
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ОГРН");
	НоваяСтрока.Изменился	= ОГРНИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности;
	НоваяСтрока.Группа		= "Организация";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменился'");
	
	// Регион
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР");
	НоваяСтрока.Изменился	= КодРегионаФСРАРИзменился И ИзменитьРеквизитыПодключенияК1СОтчетности И 
								(ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАР 
								ИЛИ НЕ ИзменитьСоставКонтролирующихОрганов И СдаватьВФСРАРИсходный);
	НоваяСтрока.Группа		= "Организация";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменился'");
	
	// Электронная почта
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта");
	НоваяСтрока.Изменился	= ЭлектроннаяПочтаИзменилась И ИзменитьРеквизитыПодключенияК1СОтчетности;
	НоваяСтрока.Группа		= "Организация";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменилась'");
	
	// Владелец подписи
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП");
	НоваяСтрока.Изменился	= ВладелецЭЦПИзменился И ИзменитьВладельцаСертификата;
	НоваяСтрока.Группа		= "Владелец";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменился'");
	
	// Подразделение
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение");
	НоваяСтрока.Изменился	= ВладелецЭЦППодразделениеИзменилось И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности);
	НоваяСтрока.Группа		= "Владелец";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменилось'");
	
	// Должность
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность");
	НоваяСтрока.Изменился	= ВладелецЭЦПДолжностьИзменилась И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности);
	НоваяСтрока.Группа		= "Владелец";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменилась'");
	
	// СНИЛС
	НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
	НоваяСтрока.Реквизит	= ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС");
	НоваяСтрока.Изменился	= ВладелецЭЦПСНИЛСИзменился И (ИзменитьВладельцаСертификата ИЛИ ИзменитьРеквизитыПодключенияК1СОтчетности);
	НоваяСтрока.Группа		= "Владелец";
	НоваяСтрока.Префикс		= НСтр("ru = 'изменилась'");
	
	// Продление сертификата
	Если ПродлитьСертификат Тогда
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= НСтр("ru = 'инициировано продление сертификата'");
		НоваяСтрока.Изменился	= ПродлитьСертификат;
		НоваяСтрока.Группа		= "Прочее";
	КонецЕсли;
	
	Если ПереиздатьСертификат = 1 Тогда
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= НСтр("ru = 'принудительное переиздание сертификата'");
		НоваяСтрока.Изменился	= Истина;
		НоваяСтрока.Группа		= "Прочее";
	КонецЕсли;
	
	Если ЭтоПереходВКоробку Тогда
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= НРег(Строка(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку")));
		НоваяСтрока.Изменился	= ЭтоПереходВКоробку;
		НоваяСтрока.Группа		= "Прочее";
	КонецЕсли;
	
	Если ЭтоПереходВОблако Тогда
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= НРег(Строка(ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереходВОблако")));
		НоваяСтрока.Изменился	= ЭтоПереходВОблако;
		НоваяСтрока.Группа		= "Прочее";
	КонецЕсли;
	
	Если ТипКриптопровайдераИзменился Тогда
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= НСтр("ru = 'изменился криптопровайдер'");
		НоваяСтрока.Изменился	= ТипКриптопровайдераИзменился;
		НоваяСтрока.Группа		= "Прочее";
	КонецЕсли;
	
	Если ИзменитьСоставКонтролирующихОрганов И СдаватьВФССИзменился И СдаватьВФСС Тогда
		НоваяСтрока 			= ТаблицаПричинПереизданияСертификата.Добавить();
		НоваяСтрока.Реквизит	= НСтр("ru = 'подключается направление ФСС'");
		НоваяСтрока.Изменился	= ИзменитьСоставКонтролирующихОрганов И СдаватьВФССИзменился И СдаватьВФСС;
		НоваяСтрока.Группа		= "Организация";
		НоваяСтрока.Группа		= "Прочее";
	КонецЕсли;
	
	// Анализируем причины продления сертификата
	Отбор = Новый Структура;
	Отбор.Вставить("Изменился", Истина);
	Отбор.Вставить("Группа", 	"Прочее");
	
	СформироватьТекстПричиныПереизданияСертификата(Отбор, , Ложь);

	// Анализируем реквизиты организации
	Отбор = Новый Структура;
	Отбор.Вставить("Изменился", Истина);
	Отбор.Вставить("Группа", 	"Организация");
	
	СформироватьТекстПричиныПереизданияСертификата(Отбор, НСтр("ru = 'организации'"));
	
	// Анализируем реквизиты владельца
	
	// Для предотвращение ошибки вида, когда выводится
	// "Изменился владелец ЭП сотрудника-владельца ЭП"
	// Должно выводиться просто: "Изменился владелец ЭП".
	Отбор = Новый Структура;
	Отбор.Вставить("Изменился", Истина);
	Отбор.Вставить("Группа", 	"Владелец");
	ОтобранныеСтроки = ТаблицаПричинПереизданияСертификата.НайтиСтроки(Отбор);
	
	ИзменилсяТолькоВладелец = ВладелецЭЦПИзменился 
		И ИзменитьВладельцаСертификата
		И ОтобранныеСтроки.Количество() = 1;
	
	Если ИзменилсяТолькоВладелец Тогда
		Постфикс = "";
	Иначе
		Постфикс = НСтр("ru = 'сотрудника-владельца ЭП'");
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Изменился", Истина);
	Отбор.Вставить("Группа", 	"Владелец");
	
	СформироватьТекстПричиныПереизданияСертификата(Отбор, Постфикс);
	
	ЗаменитьЗапятуюНаИВСтроке(ПричиныПереизданияСертификата);
	
	// Формируем итоговую фразу
	ПричиныПереизданияСертификата = НСтр("ru = 'Причины переиздания сертификата: '") + ПричиныПереизданияСертификата;
	Элементы.ПричиныПереизданияСертификата.Заголовок = ПричиныПереизданияСертификата;
		
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстПричиныПереизданияСертификата(Отбор, Постфикс = "", ТребуетсяПрефикс = Истина)
	
	ОтобранныеСтроки = ТаблицаПричинПереизданияСертификата.НайтиСтроки(Отбор);
	
	Если ОтобранныеСтроки.Количество() > 0 Тогда
		
		// %1% по завершению формирования фразы будет заменен на запятую или "и"
		Если ПричиныПереизданияСертификата <> "" Тогда
			ПричиныПереизданияСертификата = ПричиныПереизданияСертификата + "%1";
		КонецЕсли;
		
		// Собираем изменившиеся реквизиты в одну строку
		Текст = "";
		Для каждого Строка Из ОтобранныеСтроки Цикл
			ДобавитьТекст(
				Строка.Реквизит, 
				Строка.Изменился,
				Текст);
		КонецЦикла;
		
		// Добавляем префикс перед изменившимися реквизитами. Например, с префиксом "изменился" фраза будет выглядеть так:
		// "изменился ИНН, КПП и ОГРН".
		// При этом, префикс нужен только перед первым реквизитом, перед остальными (КПП и ОГРН) префикс не требуется.
		// Префикс не нужен, например, если изменившийся реквизит выглядит как "продление сертификата"
		Если ОтобранныеСтроки[0].Префикс = "" Тогда
			ПричиныПереизданияСертификата = ПричиныПереизданияСертификата + Текст;
		Иначе
			ПричиныПереизданияСертификата = ПричиныПереизданияСертификата + ОтобранныеСтроки[0].Префикс + " " + Текст;
		КонецЕсли;
		
		// Добавляем постфикс.
		// Например, если постфикс "организации", то фраза будет выглядеть как
		// "изменился ИНН, КПП и ОГРН организации"
		ПричиныПереизданияСертификата = ПричиныПереизданияСертификата 
			+ ?(Постфикс = "", "", " " + Постфикс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьТекст(ИзменившийсяРеквизит, РеквизитИзменился, Текст)
	
	НазваниеРеквизита = Строка(ИзменившийсяРеквизит);
	
	// Делаем так, чтобы все слова начинались с маленькой буквы
	// Если вторая буква большая, то считаем что слова все состоит из больших букв (например ИНН) и не переводим это слово в нижний регистр
	Если Сред(НазваниеРеквизита, 2, 1) <> Врег(Сред(НазваниеРеквизита, 2, 1)) Тогда
		НазваниеРеквизита = НРег(Лев(НазваниеРеквизита, 1)) + Сред(НазваниеРеквизита, 2);
	КонецЕсли;
	
	Если РеквизитИзменился Тогда
		Если Текст = "" Тогда
			Текст = НазваниеРеквизита;
		Иначе
			Текст = Текст + "%1" + НазваниеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменилисьПаспортныеДанныеВладельцаЭП()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ФайлыСведенийСпецоператоры.Данные КАК Данные,
	                      |	ФайлыСведенийСпецоператоры.ДатаФайла КАК ДатаФайла
	                      |ИЗ
	                      |	РегистрСведений.ФайлыСведенийСпецоператоры КАК ФайлыСведенийСпецоператоры
	                      |ГДЕ
	                      |	ФайлыСведенийСпецоператоры.УчетнаяЗапись = &УчетнаяЗапись
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ФайлыСведенийСпецоператоры.ДатаФайла УБЫВ");
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Данные = Выборка.Данные;
		Если ЗначениеЗаполнено(Данные) Тогда
			Попытка
			
				ВременныйФайл = ПолучитьИмяВременногоФайла();
				Данные.Получить().Записать(ВременныйФайл);
				
				ДокументDOM = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗагрузитьФайлXML(ВременныйФайл);
				
				Удостоверения = ДокументDOM.ПолучитьЭлементыПоИмени("УдЛичн");
				Если Удостоверения.Количество() = 0 Тогда
					Возврат Истина;
				КонецЕсли;
				
				Удостоверение = Удостоверения[0].Атрибуты;
				
				КодВидДокВФайле     = Удостоверение.ПолучитьИменованныйЭлемент("КодВидДок").ТекстовоеСодержимое;
				СерНомДокВФайле     = Удостоверение.ПолучитьИменованныйЭлемент("СерНомДок").ТекстовоеСодержимое;
				ДатаДокВФайле       = Удостоверение.ПолучитьИменованныйЭлемент("ДатаДок").ТекстовоеСодержимое;
				ВыдДокВФайле        = Удостоверение.ПолучитьИменованныйЭлемент("ВыдДок").ТекстовоеСодержимое;
				КодВыдДокВФайле     = Удостоверение.ПолучитьИменованныйЭлемент("КодВыдДок").ТекстовоеСодержимое;
				
				КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
				КодВидДок = КонтекстЭДОСервер.ПолучитьКодВидаДокументаФизическогоЛица(ВладелецЭЦПВидДокумента);
				
				СерНомДок = СокрЛП(ВладелецЭЦПСерияДокумента + " "+ ВладелецЭЦПНомерДокумента);
				
				Возврат 
					КодВидДокВФайле <> КодВидДок
					ИЛИ СерНомДокВФайле <> СерНомДок 
					ИЛИ ДатаДокВФайле <> Формат(ВладелецЭЦПДатаВыдачиДокумента, "ДФ=dd.MM.yyyy")
					ИЛИ ВыдДокВФайле <> ВладелецЭЦПКемВыданДокумент
					ИЛИ КодВыдДокВФайле <> ВладелецЭЦПКодПодразделения;
				
			Исключение
				Возврат Истина;
			КонецПопытки;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область Прочие

&НаКлиенте
Процедура ОпределитьРеквизитыНеХранящиесяВБазе()
	
	РеквизитыНеХранящиесяВБазе = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.РеквизитыНеХранящиесяВБазе(Организация);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаСервисЭДООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СсылкаОписаниеСервисаЭДО) Тогда
		ПерейтиПоНавигационнойСсылке(СсылкаОписаниеСервисаЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Адрес = АдресЮридическийЗначение;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуКонтактнойИнформацииЗавершение", 
		ЭтотОбъект, 
		Элемент);
		
	ДополнительныеПараметры = КонтекстЭДОКлиент.ПараметрыПроцедурыРедактироватьАдрес();
	ДополнительныеПараметры.Вставить("Адрес",             Адрес);
	ДополнительныеПараметры.Вставить("АдресИмя",          Элемент.Имя);
	ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	ДополнительныеПараметры.Вставить("Оповещение",        ОписаниеОповещения);
	
	КонтекстЭДОКлиент.РедактироватьАдрес(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдресКонвертацияРезультата(РезультатЗакрытия);
	ОбновитьАдрес(НовыйАдрес, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдрес(НовыйАдрес, Элемент)
	
	Если НовыйАдрес.Модифицированность Тогда
		АдресЮридическийЗначение  		= НовыйАдрес.Адрес;
		АдресЮридическийПредставление   = НовыйАдрес.АдресПредставление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьЭДОПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыЭДО()
	
	Если ОбщегоНазначения.РазделениеВключено() ИЛИ ЭтоУчетнаяЗаписьВМоделиСервиса Тогда 
		// Облачная ЭП
		ОтображатьПодключениеЭДО 	= Ложь;
		ПодключитьЭДО 				= Ложь;
		ОператорЭДО 				= "";
		КодНалоговогоОрганаЭДО 		= "";
	Иначе
		// Локальная ЭП
		Если ЗначениеЗаполнено(Элементы.ОператорЭДО.СписокВыбора) Тогда
			// на этой странице уже были
			// повторного заполнения параметров не требуется
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("ЕстьПодключениеЭДО, МассивОператоровЭДО, СсылкаОписаниеСервиса");
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗаполнитьПараметрыСервисаЭлектронныхДокументовДляФормыПодключенияК1СООтчетности(Организация, СтруктураПараметров);
		
		//заполнение вспомогательных элементов: списка выбора операторов ЭДО, ссылки на описание сервиса
		Если ЗначениеЗаполнено(СтруктураПараметров.МассивОператоровЭДО) Тогда
			Элементы.ОператорЭДО.СписокВыбора.ЗагрузитьЗначения(СтруктураПараметров.МассивОператоровЭДО);
			Если СтруктураПараметров.МассивОператоровЭДО.Количество() = 1 Тогда
				ОператорЭДО = СтруктураПараметров.МассивОператоровЭДО[0]; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураПараметров.СсылкаОписаниеСервиса) Тогда
				СсылкаОписаниеСервисаЭДО = СтруктураПараметров.СсылкаОписаниеСервиса;	
			КонецЕсли;
			
			Если СтруктураПараметров.ЕстьПодключениеЭДО = Ложь Тогда
				// Организация не подключена к ЭДО
				ОтображатьПодключениеЭДО 	= Истина;
				ПодключитьЭДО 				= Истина;
				
				Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаЭДО) Тогда
					КодНалоговогоОрганаЭДО = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
				КонецЕсли;
				
			Иначе
				
				ОтображатьПодключениеЭДО 	= Ложь;
				ПодключитьЭДО 				= Ложь;
				ОператорЭДО 				= "";
				КодНалоговогоОрганаЭДО 		= "";
				
			КонецЕсли;
			
		Иначе
			// сервис не работает
			ОтображатьПодключениеЭДО 	= Ложь;
			ПодключитьЭДО 				= Ложь;
			ОператорЭДО 				= "";
			КодНалоговогоОрганаЭДО 		= "";
		КонецЕсли;
				
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаТелефонаИЭлектроннойПочты

&НаКлиенте
Процедура ЗапуститьОбратныйОтсчет()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОбратногоОтсчета()
	
	Таймер = Таймер - 1;
	Если Таймер >= 0 Тогда
		НадписьОбратногоОтсчета = СтрШаблон(НСтр("ru = 'Запросить код повторно можно будет через %1 сек.'"), Таймер);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета", 1, Истина);		
	Иначе
		НадписьОбратногоОтсчета = "";
		ПроверкаТелефонДляПаролей.КодОтправлен = Ложь;
		ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен = Ложь;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТелефонДляПаролей()
	
	Элементы.ПроверитьНомер.Видимость = ПроверкаТелефонДляПаролей.ЗначениеВведено;
	Если ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
		Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
		ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер");
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер", 0.1, Истина);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьКнопкуПроверитьНомер()
	
	ТекущийЭлемент = Элементы.ПроверитьНомер;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеПодтвержденияИзмененияТелефонаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "#Инструкция" Тогда
		
		ПараметрыФормы = Новый Структура("Сертификат,НовыйТелефон", Сертификат, ТелефонДляПаролей);
		ОткрытьФорму("ОбщаяФорма.ИзменениеНомераТелефона", ПараметрыФормы, Неопределено);
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФормуСЗадержкой", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФормуСЗадержкой()
	
	Если Открыта() Тогда
		ПрограммноеЗакрытие = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПодтвержденияТелефонДляПаролей()
	
	ОчиститьСообщения();
	КодПодтверждения = Неопределено;
	
	Результат = ПроверитьНомерНаСервере(ТелефонДляПаролей, ПроверкаТелефонДляПаролей.ИдентификаторПроверки);
	Если Результат.Выполнено Тогда
		Таймер = Результат.ЗадержкаПередПовторнойОтправкой;
		ПроверкаТелефонДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		ЗапуститьОбратныйОтсчет();
		ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Истина;
		ПроверкаТелефонДляПаролей.КодОтправлен = Истина;
		
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтвержденияТелефон", 0.1, Истина);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "ТелефонДляПаролей");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияТелефон()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияТелефон;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНомерНаСервере(Телефон, Идентификатор)
	
	Возврат МенеджерСервисаКриптографии.ПолучитьКодПроверкиТелефона(Телефон, Идентификатор);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения()
	
	ОчиститьСообщения();
	
	КодПодтверждения = СокрЛП(КодПодтверждения);
	Если СтрДлина(КодПодтверждения) = 6 Тогда
		Если ПроверкаТелефонДляПаролей.ВыполняетсяПроверка Тогда
			Результат = ПроверитьТелефонПоКодуНаСервере(
				ПроверкаТелефонДляПаролей.ИдентификаторПроверки, КодПодтверждения);
			Если Результат.Выполнено Тогда
				ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Ложь;
				ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено = Истина;				
			КонецЕсли;
		Иначе
			Результат = ПроверитьЭлектроннуюПочтуПоКодуНаСервере(
				ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки, КодПодтверждения);
			Если Результат.Выполнено Тогда
				ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка = Ложь;
				ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено = Истина;				
			КонецЕсли;
		КонецЕсли;
		
		Если Результат.Выполнено Тогда
			ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчета");
			УправлениеФормой(ЭтаФорма);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "КодПодтверждения");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПроверитьТелефонПоКодуНаСервере(Идентификатор, КодПодтверждения) 
	
	Возврат МенеджерСервисаКриптографии.ПроверитьТелефонПоКоду(Идентификатор, КодПодтверждения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЭлектроннуюПочтуПоКодуНаСервере(Идентификатор, КодПодтверждения) 
	
	Возврат МенеджерСервисаКриптографии.ПроверитьЭлектроннуюПочтуПоКоду(Идентификатор, КодПодтверждения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей()
	
	Элементы.ПроверитьАдрес.Видимость = ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено;
	ЗначениеОчищено = 
		ПроверкаЭлектроннаяПочтаДляПаролей.ИсходноеЗначение <> ЭлектроннаяПочтаДляПаролей 
		И Не ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей);
	Если ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено ИЛИ ЗначениеОчищено Тогда
		Элементы.ЭлектроннаяПочтаДляПаролей.ОбновитьТекстРедактирования();
		ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьАдрес");
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьАдрес", 0.1, Истина);
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьКнопкуПроверитьАдрес()
	
	ТекущийЭлемент = Элементы.ПроверитьАдрес;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей()
	
	ОчиститьСообщения();
	КодПодтверждения = Неопределено;
	
	Результат = ПроверитьАдресНаСервере(ЭлектроннаяПочтаДляПаролей, ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки);
	Если Результат.Выполнено Тогда
		Таймер = Результат.ЗадержкаПередПовторнойОтправкой;
		ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		ЗапуститьОбратныйОтсчет();
		ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка = Истина;
		ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен = Истина;
		
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтвержденияЭлектроннаяПочта", 0.1, Истина);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "ЭлектроннаяПочтаДляПаролей");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьАдресНаСервере(ЭлектроннаяПочта, Идентификатор)
	
	Возврат МенеджерСервисаКриптографии.ПолучитьКодПроверкиЭлектроннойПочты(ЭлектроннаяПочта, Идентификатор);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияЭлектроннаяПочта()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияЭлектроннаяПочта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстПодсказкиДляФлажкаПолучатьУведомления()
	
	ТелефонМобильныйБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонМобильный);
	ТелефонДляПаролейБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(ТелефонДляПаролей);
	
	ТелефоныРавны = Лев(ТелефонМобильныйБезРазделителей, 4) = Лев(ТелефонДляПаролейБезРазделителей, 4) 
		И  Прав(ТелефонМобильныйБезРазделителей, 2) = Прав(ТелефонДляПаролейБезРазделителей, 2);
		
	ТекстПодсказки = "";
	ЧастиСтроки = Новый Массив;
	Если ЗначениеЗаполнено(ТелефонМобильныйБезРазделителей) И Не ТелефоныРавны Тогда
		ТекстПодсказки = СтрШаблон(
			НСтр("ru = 'Вы указали отдельный номер для SMS-уведомлений - <a href = ""#ВводТелефонаДляОповещений"">%1</a>.'"), 
			ТелефонМобильный);
	Иначе
		ТекстПодсказки = НСтр("ru = 'Номера телефонов для SMS-уведомлений и для паролей совпадают.
                               |Если вы хотите получать SMS-уведомления на другой номер, 
                               |укажите его, перейдя по <a href = ""#ВводТелефонаДляОповещений"">ссылке</a>.'");
	КонецЕсли;
	Элементы.ПолучатьУведомления.РасширеннаяПодсказка.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПодсказки);
	
	Если ЭтоУчетнаяЗаписьВМоделиСервиса И ПолучатьУведомления Тогда
		Элементы.ПолучатьУведомления.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ПолучатьУведомления.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПеременныеДляПроверкиТелефонаИЭлектроннойПочты(Форма)
	
	Форма.ПроверкаТелефонДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), Ложь, Ложь, "", Ложь, Ложь, "");
	Форма.ПроверкаЭлектроннаяПочтаДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), Ложь, Ложь, "", Ложь, Ложь, "");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСвойстваДляПроверок()
	
	Возврат "ЗначениеВведено,ВыполняетсяПроверка,ИдентификаторПроверки,ПодтверждениеВыполнено,КодОтправлен,ИсходноеЗначение";
	
КонецФункции

#КонецОбласти

#КонецОбласти