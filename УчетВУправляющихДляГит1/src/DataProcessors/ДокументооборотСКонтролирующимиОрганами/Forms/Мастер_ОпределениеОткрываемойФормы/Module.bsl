&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоВеб = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	Если НЕ ЭтоВеб Тогда
		Элементы.ДекорацияДлительнаяОперация.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;
	
	// Копируем только нужные свойства
	СписокПараметров = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
	ЗаполнитьЗначенияСвойств(СписокПараметров, Параметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СписокПараметров);
	
	ОбновитьМодульСейчас = НЕ ВнешнийМодульЗагруженИДокументооборотИспользуется();
	
	Инициализация();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Чтобы форма успела открыться и в момент загрузки модуля на ней прописывалось состояние его загрузки.
	ПодключитьОбработчикОжидания("Подключаемый_ПриОткрытии", 0.3, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Закрыть форму ожидания загрузки модуля" И ПараметрыЗакрытияОпределены Тогда
		// Оповещение может быть вызвано из другого места при обновлении модуля, а не при завершении открытия мастера.
		
		ПодключитьОбработчикОжидания("Подключаемый_Закрыть", 0.1, Истина);
		
	Иначе
		// Для мастера не меняем надпись в бублике в момент загрузки модуля
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриОткрытии()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьОпределениеФормыМастера", ЭтотОбъект);
	// Скачиваем и устанавливаем новый внешний модуль обработки
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения, ОбновитьМодульСейчас, Истина);

КонецПроцедуры

&НаКлиенте
Процедура НачатьОпределениеФормыМастера(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	ПутьКОбъекту 	  = КонтекстЭДОКлиент.ПутьКОбъекту;
	
	ПараметрыЗакрытияБублика.Параметры.Вставить("ИгнорироватьКонфликт", 		ИгнорироватьКонфликт);
	ПараметрыЗакрытияБублика.Параметры.Вставить("КриптопровайдерПриКонфликте", 	КриптопровайдерПриКонфликте);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыЗакрытияБублика.Параметры.Вставить("Организация", Организация);
	КонецЕсли;
	
	// Запрещаем копировать заявление на переход, но можно все остальные
	Если ЗначениеЗаполнено(ЗначениеКопирования) И НЕ ЭтоЗаявлениеНаПереход Тогда
		ПараметрыЗакрытияБублика.Параметры.Вставить("Реквизит", ЗначениеКопирования);
	КонецЕсли;
	
	Если РучнойВвод Тогда
		
		// Ручное
		ПараметрыЗакрытияБублика.ИмяФормы = ПутьКОбъекту + ".Форма.Документ_ЗаявлениеАбонентаСпецоператораСвязи_ФормаДокумента";
		ПерейтиКОткрытиюФормы();
		
	ИначеЕсли ОткрытьВторичноеЗаявление() Тогда
		
		// Вторичное
		ОткрытьЗаявлениеНаИзменение();
	
	ИначеЕсли ОткрытьПервичноеВСтаромФормате() Тогда
		
		// Первичное старый мастер
		ПараметрыЗакрытияБублика.ИмяФормы = ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаПодключение";
		ПерейтиКОткрытиюФормы();
		
	ИначеЕсли ЭтоУпрощенноеЗаявление И НужноПредложитьСоздатьВторичноеВместоПервичного() Тогда
		
		// Вторичный или первичный упрощенный
		СпроситьПроСуществующееПодключение();
		
	ИначеЕсли ЕстьНезавершенноеЗаявление() Тогда
		
		// Предлагаем продолжить работу с заявлением
		СпроситьПроНеотправленноеЗаявление();
	
	Иначе
		
		// Первичный упрощенный
		НачатьОткрытьЗаявлениеНаПодключениеУпрощенное();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроНеотправленноеЗаявление() Экспорт
	
	НезавершенноеЗаявление = НезавершенноеЗаявление();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("НезавершенноеЗаявление", НезавершенноеЗаявление);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СпроситьПроНеотправленноеЗаявление_ПослеОтветаНаВопрос", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	РеквизитыЗаявления = ОбработкаЗаявленийАбонентаВызовСервера.ПолучитьСтруктуруРеквизитовЗаявления(НезавершенноеЗаявление);
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		СсылкаНаЗаявление = НСтр("ru = 'заявление'");
	Иначе
		СсылкаНаЗаявление = Новый ФорматированнаяСтрока(НСтр("ru = 'заявление'"),,,,ПолучитьНавигационнуюСсылку(НезавершенноеЗаявление));
	КонецЕсли;
		
	ТекстВопроса = Новый ФорматированнаяСтрока(
		НСтр("ru = 'По организации '"),
		"""" + Строка(Организация) + """",
		НСтр("ru = ' есть неотправленное '"),
		СсылкаНаЗаявление,
		НСтр("ru = ' на подключение к 1С-Отчетности'"),
		НСтр("ru = ' от '"),
		Формат(РеквизитыЗаявления.Дата, "ДЛФ=D"),
		НСтр("ru = '.'"),
		Символы.ПС,
		НСтр("ru = 'Продолжить работу с этим заявлением или создать новое?'"));
		
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(1, НСтр("ru = 'Продолжить работу'"));
	Кнопки.Добавить(2, НСтр("ru = 'Создать новое'"));
	Кнопки.Добавить(3, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, ,Кнопки[0].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроНеотправленноеЗаявление_ПослеОтветаНаВопрос(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = 1 Тогда
		ПараметрыЗакрытияБублика.Параметры.Вставить("Реквизит", ВходящийКонтекст.НезавершенноеЗаявление);
		ПараметрыЗакрытияБублика.Параметры.Вставить("ЭтоОткрытиеЗаявления", Истина);
		НачатьОткрытьЗаявлениеНаПодключениеУпрощенное();
	ИначеЕсли Ответ = 2 Тогда
		НачатьОткрытьЗаявлениеНаПодключениеУпрощенное();
	ИначеЕсли Ответ = 3 Тогда
		// Просто закрываем бублик, но ничего не делаем
		ПерейтиКОткрытиюФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОткрытиюФормы()
	
	ПараметрыЗакрытияОпределены = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_Закрыть", 0.1, Истина);
		
КонецПроцедуры	

&НаСервере
Функция Инициализация()
	
	КонтекстЭДОСервер 				 = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	УчетнаяЗаписьОрганизации		 = КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
	ПоддерживаетсяВторичноеЗаявление = ЗначениеЗаполнено(Организация) И КонтекстЭДОСервер.ПоддерживаетсяВторичноеЗаявление(Организация);
	ЭтоЗаявлениеНаПереход			 = ЭтоЗаявлениеНаПереход(КонтекстЭДОСервер);
	ЭтоНовый 						 = Объект.Ссылка.Пустая();
	
	ПервичноеЗаявление = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное");
	ВторичноеЗаявление = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
	
	ПараметрыЗакрытияБублика = Новый Структура();
	ПараметрыЗакрытияБублика.Вставить("ИмяФормы",  "");
	ПараметрыЗакрытияБублика.Вставить("Параметры", Новый Структура());
	ПараметрыЗакрытияБублика.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	
	Если ПараметрыОткрытияМастера <> Неопределено Тогда
		ПараметрыЗакрытияБублика.Параметры = ПараметрыОткрытияМастера;
	КонецЕсли;

	Если НЕ ЭтоНовый Тогда
		
		ЗначениеКопирования = Объект.Ссылка;
		
		Если Объект.ЭтоУпрощенноеЗаявление Тогда
		
			// Это открытие ранее созданного
			Если ЗначениеЗаполнено(ЗначениеКопирования)
				И ЗначениеКопирования.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка() 
				И ЗначениеКопирования.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено Тогда
				
				ЗаявлениеОтправлено = Истина;
				
			КонецЕсли;
			
			// Упрощенный мастер
			ПараметрыЗакрытияБублика.Параметры.Вставить("ЭтоОткрытиеЗаявления", Истина);
			ПараметрыЗакрытияБублика.Параметры.Вставить("Реквизит", ЗначениеКопирования);
					
			ВидЗаявления = ПервичноеЗаявление;
			
		ИначеЕсли ЗначениеКопирования.ТипЗаявления = ВторичноеЗаявление
			И (ЗначениеКопирования.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка() 
				ИЛИ ЗначениеКопирования.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено) Тогда
				
			ПараметрыЗакрытияБублика.Параметры.Вставить("ЭтоОткрытиеЗаявления", Истина);
			ВидЗаявления = ВторичноеЗаявление;
			ПоддерживаетсяВторичноеЗаявление = ЗначениеЗаполнено(ЗначениеКопирования.Организация) И КонтекстЭДОСервер.ПоддерживаетсяВторичноеЗаявление(ЗначениеКопирования.Организация);
			
		КонецЕсли;
		
	ИначеЕсли ЭтоЗаявлениеНаПереход Тогда
			
		ВидЗаявления = ВторичноеЗаявление;
		
	КонецЕсли;
	
	// Вид заявления
	Если ЗначениеЗаполнено(ЗначениеКопирования) И НЕ ЗначениеЗаполнено(ВидЗаявления) Тогда
		ВидЗаявления = ЗначениеКопирования.ТипЗаявления;
	КонецЕсли;
	
	ДоступнаЭПВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно();
	НеПредлагатьУстановкуРасширения = ДоступнаЭПВМоделиСервиса И ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	
	// После завершения всех других операций
	ЭтоУпрощенноеЗаявление   = ЭтоУпрощенноеЗаявление();
	
КонецФункции

&НаСервере
Функция ЭтоЗаявлениеНаПереход(КонтекстЭДОСервер)
	
	Возврат ЗначениеЗаполнено(ЗначениеКопирования) 
		И КонтекстЭДОСервер.ЭтоЗаявлениеТолькоНаПереход(ЗначениеКопирования);
	
КонецФункции

&НаСервере
Функция ЭтоУпрощенноеЗаявление()
	
	ЭтоОткрытиеУпрощенного = Объект.ЭтоУпрощенноеЗаявление;
	
	ЭтоКопированиеУпрощенного =
		ЗначениеЗаполнено(ЗначениеКопирования)
		И ВидЗаявления = ПервичноеЗаявление;
		
	ЭтоСозданиеУпрощенного =
		НЕ ЗначениеЗаполнено(ЗначениеКопирования) 
		И ЭтоНовый 
		И (ВидЗаявления = ПервичноеЗаявление ИЛИ НЕ ЗначениеЗаполнено(ВидЗаявления))
		И НЕ РучнойВвод;
		
	Возврат ЭтоОткрытиеУпрощенного ИЛИ ЭтоКопированиеУпрощенного ИЛИ ЭтоСозданиеУпрощенного;
		
КонецФункции

&НаКлиенте
Функция ОткрытьПервичноеВСтаромФормате()
	
	Возврат НЕ ЭтоУпрощенноеЗаявление И НЕ ЭтоНовый И Объект.ТипЗаявления = ПервичноеЗаявление;
	
КонецФункции	

&НаКлиенте
Функция ОткрытьВторичноеЗаявление()
	
	ПервичноеЗаявление = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное");
	ВторичноеЗаявление = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
	
	ПринудительноОткрытьПервичноеЗаявление = ВидЗаявления = ПервичноеЗаявление;
	ПринудительноОткрытьВторичноеЗаявление = ВидЗаявления = ВторичноеЗаявление;
	
	ОткрытьВторичноеЗаявление = 
		ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(УчетнаяЗаписьОрганизации) 
		И ПоддерживаетсяВторичноеЗаявление
		И НЕ ПринудительноОткрытьПервичноеЗаявление
		ИЛИ ПринудительноОткрытьВторичноеЗаявление; 
		
	Возврат ОткрытьВторичноеЗаявление;
		
КонецФункции

&НаКлиенте
Процедура НачатьОткрытьЗаявлениеНаПодключениеУпрощенное()
	
	// Предварительно проверяем наличие криптопровайдера и ищем установленные сертификаты
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьОткрытьЗаявлениеНаПодключениеУпрощенное_ПослеПоискаКриптопровайдеров", 
		ЭтотОбъект);
		
	ЗаполнитьСписокКриптопровайдеров(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытьЗаявлениеНаПодключениеУпрощенное_ПослеПоискаКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт

	ОписаниеОшибки = "";
	
	Если Результат = Неопределено Тогда
		
		ViPNetCSPУстановлен    = Ложь;
		CryptoProCSPУстановлен = Ложь;

	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ОписаниеОшибки")
		И (НЕ Результат.Свойство("ViPNetCSPУстановлен") ИЛИ НЕ Результат.ViPNetCSPУстановлен)
		И (НЕ Результат.Свойство("CryptoProCSPУстановлен") ИЛИ НЕ Результат.CryptoProCSPУстановлен) Тогда
		
		ОписаниеОшибки = Результат.ОписаниеОшибки;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ViPNetCSPУстановлен")
		И Результат.Свойство("CryptoProCSPУстановлен") Тогда
		
		ViPNetCSPУстановлен    = Результат.ViPNetCSPУстановлен;
		CryptoProCSPУстановлен = Результат.CryptoProCSPУстановлен;
		
	КонецЕсли;
	
	ПоказатьОшибку = ЗначениеЗаполнено(ОписаниеОшибки) И НЕ ДоступнаЭПВМоделиСервиса;
	ПоказатьФормуКонфликтаКриптопровайдеров  = ViPNetCSPУстановлен И CryptoProCSPУстановлен И НЕ ДоступнаЭПВМоделиСервиса И НЕ ИгнорироватьКонфликт;
	ПоказатьФормуОтсутствияКриптопровайдеров = НЕ ViPNetCSPУстановлен И НЕ CryptoProCSPУстановлен И НЕ ДоступнаЭПВМоделиСервиса;
	
	Если ЗаявлениеОтправлено Тогда
		ДобавитьВПараметрыКриптопровайдеров();
		ОткрытьЗаявлениеНаПодключениеУпрощенное();
	ИначеЕсли ПоказатьОшибку Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НачатьОткрытьЗаявлениеНаПодключениеУпрощенное_ПослеПоказаОшибки", 
			ЭтотОбъект);
			
		ТекстПредупреждения = НСтр("ru = 'Не удалось создать заявление по причине:
                                    |%1
                                    |
                                    |Что делать?
                                    |1. Попробуйте устранить проблему и повторите создание заявления.
                                    |2. Обратитесь в службу поддержки.'");
		
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, ОписаниеОшибки);
			
		ПоказатьПредупреждение(
			ОписаниеОповещения,
			ТекстПредупреждения,
			,
			НСтр("ru = 'Ошибка создания заявление по 1С-Отчетности'"));
		
	ИначеЕсли ПоказатьФормуКонфликтаКриптопровайдеров Тогда
		
		// Конфликт криптопровайдеров
		ПараметрыЗакрытияБублика.ИмяФормы = ПутьКОбъекту + ".Форма.Мастер_КонфликтКриптопровайдеров";
		ПараметрыЗакрытияБублика.РежимОткрытияОкнаФормы = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ПараметрыЗакрытияБублика.Параметры.Вставить("ПутьКОбъекту", ПутьКОбъекту);

		ПерейтиКОткрытиюФормы();
		
	ИначеЕсли ПоказатьФормуОтсутствияКриптопровайдеров Тогда
		
		// Отсутствуют криптопровайдеры
		ПараметрыЗакрытияБублика.ИмяФормы = ПутьКОбъекту + ".Форма.Мастер_ОтсуствиеКриптопровайдеров";
		ПараметрыЗакрытияБублика.РежимОткрытияОкнаФормы = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ПерейтиКОткрытиюФормы();
		
	ИначеЕсли CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НачатьОткрытьЗаявлениеНаПодключениеУпрощенное_ПослеПоискаСертификатов", 
			ЭтотОбъект,
			ВходящийКонтекст);
			
		ДополнительныеПараметрыМетода = Новый Структура;
		ДополнительныеПараметрыМетода.Вставить("ПредлагатьУстановкуВнешнейКомпоненты", Истина);
		ДополнительныеПараметрыМетода.Вставить("ВыводитьСообщения", Ложь);
		
		Хранилище = Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "MY", Истина);
		КриптографияЭДКОКлиент.ПолучитьСертификаты(ОписаниеОповещения, Хранилище, ДополнительныеПараметрыМетода);
		
	Иначе
		
		ОткрытьЗаявлениеНаПодключениеУпрощенное();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытьЗаявлениеНаПодключениеУпрощенное_ПослеПоказаОшибки(ВходящийКонтекст) Экспорт
	
	// Закрываем без дальнейших действий
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОткрытьЗаявлениеНаПодключениеУпрощенное_ПослеПоискаСертификатов(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		ДобавитьВПараметрыКриптопровайдеров();
		
		ВсеСертификаты = СертификатыНужногоТипа(Результат.Сертификаты);
		ПараметрыЗакрытияБублика.Параметры.Вставить("ВсеСертификаты", ВсеСертификаты);
		
	КонецЕсли;
	
	ОткрытьЗаявлениеНаПодключениеУпрощенное();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПараметрыКриптопровайдеров()
	
	ПараметрыЗакрытияБублика.Параметры.Вставить("CryptoProCSPУстановлен", 	CryptoProCSPУстановлен);
	ПараметрыЗакрытияБублика.Параметры.Вставить("ViPNetCSPУстановлен", 		ViPNetCSPУстановлен);
	ПараметрыЗакрытияБублика.Параметры.Вставить("КомпонентаДляРаботыСКриптографиейПодключена", КомпонентаДляРаботыСКриптографиейПодключена);
	
КонецПроцедуры

&НаКлиенте
Функция СертификатыНужногоТипа(Сертификаты)
	
	ПолеИНН     = "INN";
	ПолеСНИЛС   = "SNILS";
	ПолеИмя     = "GN";
	ПолеФамилия = "SN";
	
	НайденныеСертификаты = Новый Массив;
	
	Для каждого НайденныйСертификат Из Сертификаты Цикл
		
		Субъект = НайденныйСертификат.ВладелецСтруктура;
		
		Если НЕ Субъект.Свойство(ПолеИНН)
			ИЛИ НЕ Субъект.Свойство(ПолеСНИЛС)
			ИЛИ НЕ Субъект.Свойство(ПолеИмя)
			ИЛИ НЕ Субъект.Свойство(ПолеФамилия) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Валидность
		Валиден = НайденныйСертификат.ДействителенС < ТекущаяДата() 
			И НайденныйСертификат.ДействителенПо > ТекущаяДата();
			
		НайденныйСертификат.Вставить("Валиден", Валиден);
		
		НайденныеСертификаты.Добавить(НайденныйСертификат);
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(НайденныеСертификаты);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьЗаявлениеНаПодключениеУпрощенное()
	
	ПараметрыЗакрытияБублика.ИмяФормы = ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаПодключениеУпрощенное";
	ПерейтиКОткрытиюФормы();

КонецПроцедуры

&НаСервере
Функция ЕстьНезавершенноеЗаявление()

	Возврат НезавершенноеЗаявление() <> Неопределено;

КонецФункции

&НаСервере
Функция НезавершенноеЗаявление()

	НезавершенноеЗаявление = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка,
		|	ЗаявлениеАбонентаСпецоператораСвязи.Статус КАК Статус
		|ИЗ
		|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
		|ГДЕ
		|	ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления = ЛОЖЬ
		|	И ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
		|	И ЗаявлениеАбонентаСпецоператораСвязи.ТипЗаявления = &ТипЗаявления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявлениеАбонентаСпецоператораСвязи.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ТипЗаявления", Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено Тогда
			НезавершенноеЗаявление = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НезавершенноеЗаявление;

КонецФункции

&НаКлиенте
Функция НужноПредложитьСоздатьВторичноеВместоПервичного()

	Возврат ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(УчетнаяЗаписьОрганизации); 

КонецФункции

&НаКлиенте
Процедура СпроситьПроСуществующееПодключение() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьЗаявлениеНаПодключениеИлиВопросОбУчетнойЗаписи_ПослеОтветаНаВопросОбУчетнойЗаписи", 
		ЭтотОбъект);
	
	ТекстВопроса = "Организация " +""""+ Организация +""""+ " уже подключена к 1С-Отчетности.
		|
		|Создать заявление на новое подключение или изменить существующее подключение?";
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(2, НСтр("ru = 'Изменить существующее'"));
	Кнопки.Добавить(1, НСтр("ru = 'Новое подключение'"));
	Кнопки.Добавить(3, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,Кнопки[0].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявлениеНаИзменение()
	
	ПараметрыЗакрытияБублика.ИмяФормы = ПутьКОбъекту + ".Форма.МастерФормированияЗаявкиНаИзменениеПараметровПодключения";
	ПерейтиКОткрытиюФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявлениеНаПодключениеИлиВопросОбУчетнойЗаписи_ПослеОтветаНаВопросОбУчетнойЗаписи(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = 1 Тогда
		НачатьОткрытьЗаявлениеНаПодключениеУпрощенное();
	ИначеЕсли Ответ = 2 Тогда
		ОткрытьЗаявлениеНаИзменение();
	ИначеЕсли Ответ = 3 Тогда
		// Просто закрываем бублик, но ничего не делаем
		ПерейтиКОткрытиюФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеров(ВыполняемоеОповещение)
	
	Контекст 	= Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
	Оповещение 	= Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
	
	ПредлагатьУстановкуРасширения = НЕ НеПредлагатьУстановкуРасширения;
	
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(
		Оповещение, 
		Ложь,
		,
		ПредлагатьУстановкуРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровЗавершение", ЭтотОбъект, ВходящийКонтекст);
		КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение);
		
		КомпонентаДляРаботыСКриптографиейПодключена = Истина;
		
	Иначе
		
		ТекстОшибкиПодключенияКомпоненты = Результат.ОписаниеОшибки;
		
		Если ТекстОшибкиПодключенияКомпоненты = КриптографияЭДКОСлужебныйКлиент.ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии() Тогда
			// Не установлен криптопровайдер, но компонента стоит
			КомпонентаДляРаботыСКриптографиейПодключена = Истина;
			
			РезультатПоиска = КонтекстЭДОКлиент.РезультатПоискаКриптопровайдеров(Результат, ВходящийКонтекст);
			ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, РезультатПоиска);
			
		Иначе
			// Компонента не установилась или другая ошибка
			ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		РезультатПоиска = КонтекстЭДОКлиент.РезультатПоискаКриптопровайдеров(Результат, ВходящийКонтекст);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, РезультатПоиска);
	Иначе
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Закрыть()
	
	Если ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"ОткрытьФормуЗаявления_ПослеОпределенияВидаФормы", 
			ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент, 
			Неопределено); 
		
	КонецЕсли;
	
	Закрыть(ПараметрыЗакрытияБублика);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешнийМодульЗагруженИДокументооборотИспользуется()
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПараметрыВнешнегоМодуляДокументооборота(
		Ложь).ИспользоватьВнешнийМодуль <> Истина Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено И КонтекстЭДОСервер.ХотяБыОднаОрганизацияИспользуетДокументооборот();
	
КонецФункции

#КонецОбласти
