&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем МенеджерКриптографии;

&НаКлиенте
Перем СертификатКриптографии;

&НаКлиенте
Перем ПрисоединенныйФайлЗаявления;

&НаКлиенте
Перем КонтекстДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Инициализация(Параметры);
	ИзменитьОформлениеФормыПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытии_ПослеПолученияКонтекста", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Организации" Тогда
		
		Если (Источник = Организация ИЛИ Параметр = Организация) Тогда
			
			НеобходимоОбновитьСертификат = Ложь;
			ОбновитьРеквизитыОрганизацииИСотрудника(НеобходимоОбновитьСертификат);
			ДанныеОрганизацииЗаполненыКопированием 	= Ложь;
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
			СведенияПоСчету = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				Организация
				,,
				"БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка,");
				
			ЗаполнитьЗначенияСвойств(ДанныеОрганизации, СведенияПоСчету);
			ЗаполнитьЗначенияСвойств(ДанныеОрганизацииИОтветственныхЛиц, СведенияПоСчету);
			
			Если НеобходимоОбновитьСертификат Тогда
				ОпределитьВозможностьБезбумажногоПодписания(); // Асинхронно
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПроверитьЧтоМастерФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыт" И Источник = Организация Тогда
		
		Параметр.ФормаМастераФормированияЗаявкиНаПодключениеИлиИзменениеПодключенияОткрыта = Истина;
		
	ИначеЕсли (ИмяСобытия = "Запись_ФизическиеЛица"
		ИЛИ ИмяСобытия = "Запись_ВладельцаИлиБухгалтера")
		И НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ФормаОткрыта("Мастер_ПаспортныеДанные") Тогда
		
		// Только отработка смены ответственного лица
		Если ИмяСобытия = "Запись_ВладельцаИлиБухгалтера" Тогда
			Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
			ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
		КонецЕсли;
		
		ЭтоРуководитель = (Параметр = Руководитель ИЛИ Источник = Руководитель) 
			И ЗначениеЗаполнено(Руководитель) 
			И ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
			
		ЭтоБухгалтер = (Параметр = ГлБухгалтер ИЛИ Источник = ГлБухгалтер) 
			И ЗначениеЗаполнено(Руководитель)
			И ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
			
		ЭтоСотрудник = (Параметр = ДругойСотрудник ИЛИ Источник = ДругойСотрудник) 
			И ЗначениеЗаполнено(Руководитель)
			И ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
			
		Если (ЭтоРуководитель ИЛИ ЭтоБухгалтер ИЛИ ЭтоСотрудник) И ЭтоЮридическоеЛицо 
			ИЛИ ЭтоРуководитель И НЕ ЭтоЮридическоеЛицо Тогда

			// Запись любого другого физ. лица нас не интересует.
			ОбновитьДанныеОрганизацииИзБазы();
			УстановитьНовогоВладельцаЭЦП();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОплатаСервиса_Изменение" Тогда
		
		ОпределитьТариф();
		ИзменитьОформлениеТарифа(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = НСтр("ru = 'Упрощенное заявление. Начать создание закрытого ключа'")
		ИЛИ ИмяСобытия = НСтр("ru = 'Упрощенное заявление. Начать отправку облачного заявления'") Тогда
		
		// Чтобы в вебе бублик прорисовался
		
		// Обход ошибки платформы. С одного оповещения приходит два вызова
		Если СчетчикВызовов = 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗаявление", 0.1, Истина);
		
		СчетчикВызовов = СчетчикВызовов + 1;
		
	ИначеЕсли ИмяСобытия = НСтр("ru = 'Отправить в бумажном виде'") И Источник = ДокументЗаявление.Ссылка Тогда
		
		ПереключитьНаБумажноеПодписание();
		
		// Повторяем отправку
		СохранитьИОтправить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_СпроситьПроСохранение", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗапретитьИзменение И НЕ ОбратнаяСвязьОтправлена И Оценка <> 0 Тогда
		Отказ = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОтправитьОбратнуюСвязь", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = НСтр("ru = 'Прервать работу помощника?'");
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
		ЭтотОбъект, 
		Отказ, 
		ЗавершениеРаботы,
		ТекстПредупреждения, 
		"ПрограммноеЗакрытие");
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимРаботыСКлючамиЛокальноExtendedTooltipОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Исправить конфликт" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗакрытияПредупрежденияОКонфликтеКриптопровайдеров",
			ЭтотОбъект);
			
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонфликтКриптопровайдеров",,,,,,ОписаниеОповещения);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Установить компоненту" Тогда
		
		УстановитьКомпонентуИОпределитьКриптопровайдер();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Установить криптопровайдер" Тогда
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ОтсуствиеКриптопровайдеров");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Недоступно1СЭДОРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Условия подключения" Тогда
		Если ЗначениеЗаполнено(СсылкаОписаниеСервисаЭДО) Тогда
			ПерейтиПоНавигационнойСсылке(СсылкаОписаниеСервисаЭДО);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтоДелатьПослеОтправкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьСтраницуУспешнойОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияКИзображениямНажатие(Элемент)
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ТребованияКИзображениям");
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПФамилияПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	Если РуководительФамилия = "" Тогда
		РуководительФамилия = ВладелецЭЦПФамилия;
	КонецЕсли;
		
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПИмяПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	Если РуководительИмя = "" Тогда
		РуководительИмя = ВладелецЭЦПИмя;
	КонецЕсли;
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПОтчествоПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	Если РуководительОтчество = "" Тогда
		РуководительОтчество = ВладелецЭЦПОтчество;
	КонецЕсли;
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПФамилияОчистка(Элемент, СтандартнаяОбработка)
	ФИОПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПИмяОчистка(Элемент, СтандартнаяОбработка)
	ФИОПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПОтчествоОчистка(Элемент, СтандартнаяОбработка)
	ФИОПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьЭДОПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);

	ИзменитьОформление1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ИзменитьОформлениеКПП();
КонецПроцедуры

&НаКлиенте
Процедура КраткоеНаименованиеПриИзменении(Элемент)
	
	ИнициализироватьЗаголовокФормы();
	УстановитьМодифицированность(ЭтотОбъект);
	ИзменитьОформлениеКраткогоНаименования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ИНН = СокрЛП(Текст);
	ИзменитьОформлениеИНН(Истина);
	
	Если НЕ Элементы.Заполнить.Видимость Тогда
		Элементы.Заполнить.Видимость = Истина;
		Элементы.Заполнить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Элементы.ГруппаСведенияОрганизации.Видимость      = Ложь;
	Элементы.ГруппаВладелецСканыИПодписание.Видимость = Ложь;
	Элементы.ГруппаПодписаниеИОтправка.Видимость      = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПДолжностьПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	ИзменитьОформлениеВладельцаЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПДолжностьОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьМодифицированность(ЭтотОбъект);
	ИзменитьОформлениеВладельцаЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерОсновнойПоставки1сПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
		
	ИзменитьОформлениеНомераОсновнойПоставки1с();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерОсновнойПоставки1сОчистка(Элемент, СтандартнаяОбработка)
	ИзменитьОформлениеНомераОсновнойПоставки1с();
КонецПроцедуры

&НаКлиенте
Процедура ОГРНОчистка(Элемент, СтандартнаяОбработка)
	ИзменитьОформлениеОГРН(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
		
	ИзменитьОформлениеОГРН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанныеНажатие(Элемент)
	
	// Все эти параметры должны быть в реквизитах формы Мастер_ПаспортныеДанные
	ПараметрыФормы = 
		"ВладелецЭЦПКемВыданДокумент,
		|ВладелецЭЦПВидДокумента,
		|ВладелецЭЦПГражданство,
		|ВладелецЭЦПДатаВыдачиДокумента,
		|ВладелецЭЦПДатаРождения,
		|ВладелецЭЦПКодПодразделения,
		|ВладелецЭЦПМестоРождения,
		|ВладелецЭЦПНомерДокумента,
		|ВладелецЭЦППол,
		|ВладелецЭЦПСерияДокумента,
		|ЗапретитьИзменение,
		|ВладелецЭЦПИмя,
		|ВладелецЭЦПОтчество,
		|ВладелецЭЦПФамилия,
		|ВладелецЭЦП,
		|ВладелецЭЦПТип,
		|Организация";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПаспортныеДанные_Завершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);

	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ПаспортныеДанные", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЮридическийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуКонтактнойИнформацииЗавершение", 
		ЭтотОбъект, 
		Элемент);
		
	ДополнительныеПараметры = КонтекстЭДОКлиент.ПараметрыПроцедурыРедактироватьАдрес();
	ДополнительныеПараметры.Вставить("Адрес",             АдресЮридическийЗначение);
	ДополнительныеПараметры.Вставить("АдресИмя",          Элемент.Имя);
	ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	ДополнительныеПараметры.Вставить("Оповещение",        ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ПринудительноФИАС", Истина);
	ДополнительныеПараметры.Вставить("ТолькоПросмотр",    ЗапретитьИзменение);
	
	КонтекстЭДОКлиент.РедактироватьАдрес(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеОНевозможностиЭлектронногоПодписанияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Установить криптопровайдер" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ПутьКОбъекту + ".Форма.Мастер_ОтсуствиеКриптопровайдеров",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Установить компоненту" Тогда
		
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПропуститьОчисткуФайлов", Истина);
	
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПояснениеОНевозможностиЭлектронногоПодписанияОбработкаНавигационнойСсылки_ПослеУстановкиКомпоненты", 
			ЭтотОбъект); 
			
		ОпределитьВозможностьБезбумажногоПодписания(ОписаниеОповещения,,ДополнительныеПараметры, Истина);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Исправить" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗакрытияПредупрежденияОКонфликтеКриптопровайдеров",
			ЭтотОбъект);
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_КонфликтКриптопровайдеров",,,,,,ОписаниеОповещения);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияОКонфликтеКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		КриптопровайдерПриКонфликте = Результат.КриптопровайдерПриКонфликте;
		ИгнорироватьКонфликт 		= Результат.ИгнорироватьКонфликт;
		
		ОпределитьВозможностьБезбумажногоПодписания();
		ПриИзмененииРежимаРаботыСКлючами();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеОНевозможностиЭлектронногоПодписанияОбработкаНавигационнойСсылки_ПослеУстановкиКомпоненты(Результат, ВходящийКонтекст) Экспорт

	ЭтоПустаяЗаглушка = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТехническаяИнформацияНажатие(Элемент)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДокументЗаявление", ДокументЗаявление.Ссылка);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ТехническаяИнформация", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПалецВверхНажатие(Элемент)
	
	Оценка = 1;
	Элементы.ПалецВверх.Картинка = БиблиотекаКартинок.ПалецВверхЗеленый;
	Элементы.ПалецВниз.Картинка  = БиблиотекаКартинок.ПалецВнизСерый;
	
	Элементы.СведенияОбратнойСвязиПодробнее.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПалецВнизНажатие(Элемент)
	
	Оценка = -1;
	Элементы.ПалецВверх.Картинка = БиблиотекаКартинок.ПалецВверхСерый;
	Элементы.ПалецВниз.Картинка  = БиблиотекаКартинок.ПалецВнизКрасный;
	
	Элементы.СведенияОбратнойСвязиПодробнее.Видимость = Истина;
	
	ПодключитьОбработчикОжидания("Подключаемый_АктивироватьТекстовыйОтвет", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьТекстовыйОтвет()
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ТекстовыйОтвет;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокСообщитеОбОтправкеРекомендацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://www.1c.ru/rus/partners/onecrep.jsp");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтнеситеДоверенностьВКаждуюИФНСРекомендацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	КонтекстЭДОКлиент.ОткрытьСписокДоверенностейИлиИнструкцию(
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка, 
		Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеПоПодключениюКПФРДокументыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтекстЭДОКлиент.ОткрытьЗаявлениеИлиСоглашениеСПФР(НавигационнаяСсылкаФорматированнойСтроки, СформироватьЗаявлениеПФР(), КодРегиона);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаКартеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(
		Элементы.АдресУПФР.Заголовок,
		"ЯндексКарты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеПоПодключениюКПФРДопДокументыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КонтекстЭДОКлиент.ОткрытьЗаявлениеИлиСоглашениеСПФР(НавигационнаяСсылкаФорматированнойСтроки, СформироватьЗаявлениеПФР(), КодРегиона);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннойПодписьюПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ЭтоЭлектронноеПодписание = Истина;
	ИзменитьОформлениеКнопкиОтправки(ЭтотОбъект);
	ИзменитьОформлениеДокументов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВБумажномВидеПриИзменении(Элемент)

	УстановитьМодифицированность(ЭтотОбъект);
	ПереключитьНаБумажноеПодписание();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокДляПодписанияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НапечататьЗаявление();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияСканаЗаявленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НапечататьЗаявление();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатДляПодписанияНажатие(Элемент)
	
	ЕстьВыбор = СертификатыОрганизации.Количество() > 1;
		
	Если ЕстьВыбор Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СертификатДляПодписанияНажатие_ПослеВыбораСертификата", 
			ЭтотОбъект);
			
		Отпечатки = Новый СписокЗначений;
		
		Для каждого СертификатОрганизации Из СертификатыОрганизации Цикл
			Отпечатки.Добавить(СертификатОрганизации.Значение.Отпечаток);
		КонецЦикла;
			
		КриптографияЭДКОКлиент.ВыбратьСертификат(
			ОписаниеОповещения, Ложь, СертификатДляПодписания.Отпечаток, "My", Ложь, Ложь, Отпечатки, Истина);
			
	Иначе
		
		КриптографияЭДКОКлиент.ПоказатьСертификат(СертификатДляПодписания, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатДляПодписанияНажатие_ПослеВыбораСертификата(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйСертификат = Результат.ВыбранноеЗначение;
	
	ПриИзмененииСертификатаДляПодписания(ВыбранныйСертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСертификатаДляПодписания(НовоеЗначение, ВыполняемоеОповещение = Неопределено)
	
	СертификатДляПодписания = НовоеЗначение;
	Если СертификатДляПодписания <> Неопределено Тогда
		СертификатДляРеквизитов = СертификатДляПодписания;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриИзмененииСертификатаДляПодписания_Завершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ЗаполнитьЗаявлениеДаннымиИзСертификата(ОписаниеОповещения); // асинхронно

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСертификатаДляПодписания_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	// Обновляем представление сертификата
	ИзменитьОформлениеСпособаПодписания(ЭтотОбъект);
	
	Если ВходящийКонтекст.ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(КонтекстЭДОКлиент.УчетнаяЗаписьОрганизации(Организация)) Тогда
		
		СпроситьПроСуществующееПодключение(Организация);
		
	ИначеЕсли ЗначениеЗаполнено(ПредыдущееЗначениеОрганизации) Тогда
		
		СпроситьПроСменуОрганизации(Организация);
		
	Иначе
		
		ОтработатьИзменениеОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПодключенияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СсылкаОписаниеСервисаЭДО) Тогда
		ПерейтиПоНавигационнойСсылке(СсылкаОписаниеСервисаЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВладелецЭЦПНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		ПоказатьЗначение(,ВладелецЭЦП);
	Иначе
		
		УстановитьМодифицированность(ЭтотОбъект);
		
		ВыбратьВладельцаЭЦП();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНажатие(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ВыбратьСотрудника(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроверкуТелефонаНажатие(Элемент)
	
	ПроверкаТелефонДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), "", ЗначениеЗаполнено(ТелефонДляПаролей), Ложь, "", Ложь, Ложь);
	ТаймерТелефон = 0;
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаТелефон");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстТелефонаДляПаролей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроверкуЭлектроннойПочтыНажатие(Элемент)
	
	ПроверкаЭлектроннаяПочтаДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), "", ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей), Ложь, "", Ложь, Ложь);
	ТаймерПочта = 0;
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаПочта");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстЭлектроннойПочтаДляПаролей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонДляПаролейПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ЭтоРучноеИзменениеТелефона = Истина;
	ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Элемент.ТекстРедактирования, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	УстановитьМодифицированность(ЭтотОбъект);
	ЭтоРучноеИзменениеТелефона = Истина;
	ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка, Интервал = 1.5, ОчищатьПодтверждение = Истина)
	
	Представление     = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Текст);
	ТелефонДляПаролей = Представление;
	
	ПроверкаТелефонДляПаролей.ЗначениеВведено = ЗначениеЗаполнено(Представление);
	
	Если ОчищатьПодтверждение Тогда
		// Подтверждение не очищается для скопированного заявления при открытии
		ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		ТелефонДляПаролей = Текст;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаТелефон");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей", Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляПаролейПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(Элемент, ЭлектроннаяПочтаДляПаролей, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляПаролейПриИзмененииТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	УстановитьМодифицированность(ЭтотОбъект);
	ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка, Интервал = 1.5, ОчищатьПодтверждение = Истина)
	
	Представление              = СокрЛП(Текст);
	ЭлектроннаяПочтаДляПаролей = Представление;
	
	ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено = ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Представление);
	
	Если ОчищатьПодтверждение Тогда
		// Подтверждение не очищается для скопированного заявления при открытии
		ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено = Ложь;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаПочта");
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей");
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей", Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонПриИзменении(Элемент)
	
	КодПодтвержденияТелефонИзменениеТекстаРедактирования(Элемент, КодПодтвержденияТелефон, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияТелефонИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		КодПодтвержденияТелефон = СокрЛП(Текст);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияЭлектроннаяПочтаПриИзменении(Элемент)
	
	КодПодтвержденияЭлектроннаяПочтаИзменениеТекстаРедактирования(Элемент, КодПодтвержденияПочта, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КодПодтвержденияЭлектроннаяПочтаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 Тогда
		КодПодтвержденияПочта = СокрЛП(Текст);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьКодПодтверждения", 0.5, Истина); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ВыполнитьДействиеСФайлом(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСканНажатие(Элемент)
	
	ВидДокумента = Сред(Элемент.Имя, 15);
	ОчиститьФайл(ЭтотОбъект, ВидДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяПомощьНажатие(Элемент)
	
	ФИО = СокрЛП(ВладелецЭЦПИмя + " " + ВладелецЭЦПОтчество);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Фио", ФИО);
	ДополнительныеПараметры.Вставить("НомерТелефона", ТелефонДляПаролей);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_Помощь", ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласиеСРегламентомОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "регламент" Тогда
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ПолеHTMLЛицензии", ПолеHTMLЛицензии);
		
		ОткрытьФорму(
			КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ПечатьHTML", 
			ДополнительныеПараметры);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "лицензия" Тогда
		
		КонтекстЭДОКлиент.ПечатьЛицензииОбИспользованииПО(ДокументЗаявление.Ссылка);
		
	КОнецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПСНИЛСПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ИзменитьОформлениеВладельцаЭП();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПропуститьОчисткуФайлов", Истина);
	
	ОпределитьВозможностьБезбумажногоПодписания(,,ДополнительныеПараметры); // Асинхронно
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПСНИЛСОчистка(Элемент, СтандартнаяОбработка)
	УстановитьМодифицированность(ЭтотОбъект);
	ВладелецЭЦПСНИЛСПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыСКлючамиПриИзменении(Элемент)
	
	УстановитьМодифицированность(ЭтотОбъект);
	ПриИзмененииРежимаРаботыСКлючами();
	ИзменитьОформлениеМестаХраненияКлючей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	
	ЗаголовокВыбораФайлов = НСтр("ru = 'Выберите скан-копии в заявление по 1С-Отчетности'");
	ДопПараметры          = ПараметрыПроцедурыВыбораФайлов();
	ОписаниеОповещения    = Новый ОписаниеОповещения(
		"ВыбратьВсеОбработкаНавигационнойСсылки_ПослеВыбораФайлов", 
		ЭтотОбъект);
		
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлы(ОписаниеОповещения, Новый УникальныйИдентификатор, ЗаголовокВыбораФайлов, ДопПараметры, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОбработкаНавигационнойСсылки_ПослеВыбораФайлов(Результат, ВходящийКонтекст) Экспорт 
 
	Если Результат.Выполнено И Результат.ОписанияФайлов.Количество() > 0 Тогда
		
		Сканы = Результат.ОписанияФайлов;
		Для каждого ФайлыДокумента Из ФайлыДокументов Цикл
			
			Скан = Новый Структура;
			Скан.Вставить("Размер", 	ФайлыДокумента.Значение.Размер);
			Скан.Вставить("Адрес", 		ФайлыДокумента.Значение.Адрес);
			Скан.Вставить("Имя", 		ФайлыДокумента.Значение.ИсходноеИмя);
			Скан.Вставить("Документ", 	ВидыДокументов(ЭтотОбъект)[ФайлыДокумента.Значение.Документ].Представление);
			
			Сканы.Добавить(Скан);
		
		КонецЦикла; 
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Сканы", Результат.ОписанияФайлов);
		ДополнительныеПараметры.Вставить("ВидыДокументов", ВидыДокументов(ЭтотОбъект));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыбратьВсеОбработкаНавигационнойСсылки_ПослеУказанияВидаДокументов", 
			ЭтотОбъект);
		
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ФормаГрупповогоДобавленияСкановВЗаявление", ДополнительныеПараметры,,,,,ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОбработкаНавигационнойСсылки_ПослеУказанияВидаДокументов(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		
		УстановитьМодифицированность(ЭтотОбъект);
		
		ФайлыДокументов.Очистить();
		Для каждого Скан Из Результат Цикл
			ФайлыДокументов.Добавить(Скан);
		КонецЦикла;
		
		ИзменитьОформлениеДокументов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНотариусАдвокатИлиГКФХПриИзменении(Элемент)
	ИзменитьОформлениеОГРН(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	Если ЗапретитьИзменение Тогда
		ИзменитьОформлениеОрганизации();
	Иначе
		ОтправитьОбратнуюСвязьСервер();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ИННКорректный = Истина;
	ПроверитьИНН(ЭтотОбъект, ИННКорректный, Истина);
	
	Если ИННКорректный Тогда
		Элементы.Заполнить.Видимость = Ложь;
		Элементы.ЗаголовокИНН.Заголовок = НСтр("ru = 'ИНН:'");
		ОтработатьИзменениеОрганизации(ИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОтправку_Завершение", ЭтотОбъект);
	КонтекстЭДОКлиент.ОбновитьСтатусЗаявленияАбонента_ИзПанелиОтправки(ОписаниеОповещения, ЭтаФорма, ДокументЗаявление.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПодключения(Команда)
	
	// Все эти параметры должны быть в реквизитах формы Мастер_1СЭДО
	ПараметрыФормы = 
		"ОператорыЭДО,
		|СсылкаОписаниеСервисаЭДО,
		|ОператорЭДО,
		|КодНалоговогоОрганаЭДО,
		|ЗапретитьИзменение,
		|ПодключитьЭДО";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьПараметрыПодключения_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_1СЭДО", ДополнительныеПараметры,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователей(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СписокПользователей", 	 СписокПользователей);
	ДополнительныеПараметры.Вставить("ЗапретитьИзменение",  	 ЗапретитьИзменение);
	ДополнительныеПараметры.Вставить("ПодсказкаКПользователям",  ПодсказкаКПользователям(КраткоеНаименование));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьПользователей_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_Пользователи", ДополнительныеПараметры,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНаправления(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормыНаправлений());
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УказатьНаправления_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_Направления", ДополнительныеПараметры,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыНаправлений()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ДополнительныеПараметры = КонтекстЭДОСервер.ПараметрыФормыНаправлений(ЭтотОбъект);
	
	ДополнительныеПараметры.Вставить("ЗаявлениеПФР", СформироватьЗаявлениеПФР());
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Функция СформироватьЗаявлениеПФР()

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	ТабДокумент = Новый ТабличныйДокумент;
	Бланк = КонтекстЭДОСервер.ПолучитьМакетОбработки("ЗаявлениеНаПодключениеКПФР");
	
	// Шапка.
	Шапка = Бланк.ПолучитьОбласть("Шапка");
	Шапка.Параметры["ДатаНачала"] = Формат(ТекущаяДатаСеанса(), "ДЛФ=DD");
	ТабДокумент.Вывести(Шапка);
	
	// Сведения по организации.
	Если ЭтоЮридическоеЛицо Тогда
		
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ЮрЛицо");
		ОбластьОрганизации.Параметры["ПолноеНаименование"] = КраткоеНаименование;
		ОбластьОрганизации.Параметры["КПП"] = КПП;
		
		ОбластьОрганизации.Параметры["ЮрАдрес"] 	= АдресЮридическийПредставление;
		ОбластьОрганизации.Параметры["ФактАдрес"] 	= АдресФактическийПредставление;
		
	Иначе
		
		// Вывод пустой области
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ЮрЛицо");
		ТабДокумент.Вывести(ОбластьОрганизации);
		
		// Вывод заполненной области
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ФизЛицо");
		ОбластьОрганизации.Параметры["ФИО"] = ВладелецЭЦПФамилия + " " + ВладелецЭЦПИмя + " " + ВладелецЭЦПОтчество;
		
		Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента) Тогда
			
			ОбластьОрганизации.Параметры["Серия"] = ВладелецЭЦПСерияДокумента;
			ОбластьОрганизации.Параметры["НомерПаспорта"] = ВладелецЭЦПНомерДокумента;
			
			Выдан = НСтр("ru = '%1, код подразделения %2, выдан %3'");
			Выдан = СтрШаблон(Выдан,
				ВладелецЭЦПКемВыданДокумент,
				ВладелецЭЦПКодПодразделения,
				Формат(ВладелецЭЦПДатаВыдачиДокумента, "ДФ=dd.MM.yyyy"));
			
			ОбластьОрганизации.Параметры["Выдан"] = Выдан;
			
		КонецЕсли;
		
		ОбластьОрганизации.Параметры["АдресРегистрации"] 	= АдресЮридическийПредставление;
		ОбластьОрганизации.Параметры["АдресПроживания"] 	= АдресФактическийПредставление;
		
	КонецЕсли;
	
	ОбластьОрганизации.Параметры["ИНН"] 			= ИНН;
	ОбластьОрганизации.Параметры["Почта"] 			= ЭлектроннаяПочтаДляПаролей;
	ОбластьОрганизации.Параметры["Телефон"] 		= ТелефонОсновной;
	ОбластьОрганизации.Параметры["РегНомерПФР"] 	= РегНомерПФР;
	ОбластьОрганизации.Параметры["КорСчет"] 		= ДанныеОрганизации.БанкСчетКоррСчетБанка;
	ОбластьОрганизации.Параметры["РасчетныйСчет"] 	= ДанныеОрганизации.БанкСчетНомер;
	
	Если ЗначениеЗаполнено(ДанныеОрганизации.БанкСчетБИКБанка) Тогда
		ОбластьОрганизации.Параметры["Банк"] = ДанныеОрганизации.БанкСчетНаимБанка + " БИК " + ДанныеОрганизации.БанкСчетБИКБанка;
	Иначе
		ОбластьОрганизации.Параметры["Банк"] = ДанныеОрганизации.БанкСчетНаимБанка;
	КонецЕсли;
		
	ТабДокумент.Вывести(ОбластьОрганизации);
	
	Если ЭтоЮридическоеЛицо Тогда
		// Вывод пустой области
		ОбластьОрганизации = Бланк.ПолучитьОбласть("ФизЛицо");
		ТабДокумент.Вывести(ОбластьОрганизации);
	КонецЕсли;
	
	// Сведения о СКЗИ
	СКЗИ = Бланк.ПолучитьОбласть("СКЗИ");
	
	СКЗИ.Параметры["Оператор"] = "ЗАО ""Калуга Астрал""";
	
	Если РежимРаботыСКлючами = 1 Тогда
		// Это ЭП в облаке
		ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление;
	Иначе
		Если ViPNetCSPУстановлен Тогда
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet().Представление;
		Иначе
			ПредставлениеКриптопровайдера = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Представление;
		КонецЕсли;
	КонецЕсли;
	СКЗИ.Параметры["СКЗИ"] = ПредставлениеКриптопровайдера;
	
	ТабДокумент.Вывести(СКЗИ);
	
	// Подвал
	Подвал = Бланк.ПолучитьОбласть("Подвал");
	Если ЗначениеЗаполнено(Руководитель) Тогда
		ФИОРуководителя = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ФИОФизЛица(Руководитель);
		ФамилияИнициалыРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОРуководителя);
		Подвал.Параметры["Руководитель"] = ФамилияИнициалыРуководителя;
	КонецЕсли;
	ТабДокумент.Вывести(Подвал);
	
	ТабДокумент.АвтоМасштаб = Истина;
	Возврат ТабДокумент;
	
КонецФункции

&НаКлиенте
Процедура УказатьНаправления_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыбранныеНаправления(Результат); // Сервер
	
КонецПроцедуры
	
&НаСервере
Процедура ОбработатьВыбранныеНаправления(Результат)
	
	// ФНС
	СдаватьВФНС 			= Результат.СдаватьВФНС;
	ТаблицаПолучателейФНС 	= ПолучитьИзВременногоХранилища(Результат.АдресПолучателейФНС);
	ЗначениеВРеквизитФормы(ТаблицаПолучателейФНС, "ПолучателиФНС");
		
	// ФСГС
	СдаватьВРосстат 		= Результат.СдаватьВРосстат;
	ТаблицаПолучателейФСГС 	= ПолучитьИзВременногоХранилища(Результат.АдресПолучателейФСГС);
	ЗначениеВРеквизитФормы(ТаблицаПолучателейФСГС, "ПолучателиФСГС");
	
	// ФПР
	СдаватьВПФР = Результат.СдаватьВПФР;
	РегНомерПФР = Результат.РегНомерПФР;
	КодПФР		= Результат.КодПФР;
	
	// ФСС
	СдаватьВФСС = Результат.СдаватьВФСС;
	
	// ФСРАР
	КодРегионаФСРАР 					= Результат.КодРегионаФСРАР;
	ПодатьЗаявкуНаСертификатДляФСРАР 	= Результат.ПодатьЗаявкуНаСертификатДляФСРАР;
	
	// Остальные органы
	ПодатьЗаявкуНаПодключениеРПН = Результат.ПодатьЗаявкуНаПодключениеРПН;
	ПодатьЗаявкуНаПодключениеФТС = Результат.ПодатьЗаявкуНаПодключениеФТС;
	
	ИзменитьОформлениеНаправлений();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныеНастройки(Команда = Неопределено)
	
	// Все эти параметры должны быть в реквизитах формы Мастер_РасширенныеНастройки
	ПараметрыФормы = 
		"АдресЮридическийЗначение,
		|АдресЮридическийПредставление,
		|АдресФактическийЗначение,
		|АдресФактическийПредставление,
		|ВладелецЭЦПДолжность,
		|ВладелецЭЦППодразделение,
		|ПолучатьСМС,
		|РежимРаботыСКлючами,
		|ТелефонМобильный,
		|ТелефонОсновной,
		|ОператорПоддерживаетСМСУведомление,
		|ЭтоЮридическоеЛицо,
		|ДоступнаЭлектроннаяПодписьВМоделиСервиса,
		|ТелефонДляПаролей,
		|CryptoProCSPУстановлен,
		|ViPNetCSPУстановлен,
		|Доступен1СКонтрагент,
		|ДанныеОрганизацииЗаполненыКопированием,
		|ЗапретитьИзменение,
		|КомпонентаДляРаботыСКриптографиейПодключена,
		|ЮрАдресВРасширенныхНастройках,
		|ВладелецЭЦПТип,
		|НомерОсновнойПоставки1с,
		|РазделениеВключено,
		|РегНомерВРасширенныхНастройках,
		|ИгнорироватьКонфликт,
		|КриптопровайдерПриКонфликте";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РасширенныеНастройки_Завершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_РасширенныеНастройки",
		ДополнительныеПараметры,
		,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТариф(Команда)
	
	Если ЗапретитьИзменение Тогда
		
		ПоказатьЗначение(, Тариф);
		
	Иначе
		
		УстановитьМодифицированность(ЭтотОбъект);
			
	
		Если ЭтоРежимБесплатнойНулевойОтчетности Тогда
			
			ВыбратьТарифНулевойОтчетности();

		Иначе
			
			// Здесь позже должен быть выбор из сервиса Калуги-Астрал
			ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("http://v8.1c.ru/edi/edi_app/1c-otchetnost/rates/index.htm");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТарифНулевойОтчетности()
	
	Попытка
	
		ВыбратьТарифНулевойОтчетностиВФормеВыбораТарифа();
		
	Исключение
		
		ВыбратьТарифНулевойОтчетностиНаСайтеНулевойОтчетности();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТарифНулевойОтчетностиВФормеВыбораТарифа()
	
	МодульТарификацияБПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ТарификацияБПКлиент");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокСсылкиВозвратаКВладельцу", НСтр("ru='Вернуться к подключению 1С-Отчетности'"));
	МодульТарификацияБПКлиент.ОткрытьФормуВыбораТарифа(ЭтотОбъект, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТарифНулевойОтчетностиНаСайтеНулевойОтчетности()
	
	Если ЗначениеЗаполнено(СсылкаПерейдитеНаПлатныйТариф) Тогда
			
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВыбораТарифа", 
			ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("СсылкаПерейдитеНаПлатныйТариф", СсылкаПерейдитеНаПлатныйТариф);
			
		ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.ВыборТарифаБизнесСтарт",ДополнительныеПараметры,,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДиректора(Команда)
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	УстановитьНовогоВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГлБухгалтера(Команда)
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер");
	УстановитьНовогоВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСотрудника(Команда)
	
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	ДругойСотрудник = Неопределено;
	ВладелецЭЦП    = Неопределено; 
	УстановитьНовогоВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНомер(Команда)

	ОтправитьКодПодтвержденияТелефонДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдрес(Команда)
	
	ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПовторноТелефон(Команда)
	
	ОтправитьКодПодтвержденияТелефонДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПовторноЭлектроннаяПочта(Команда)
	
	ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	СохранитьИОтправить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_СпроситьПроСохранение()
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СпроситьПроСохранение_Завершение", 
		ЭтотОбъект); 
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроСохранение_Завершение(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьЗаявление();
		ПрограммноеЗакрытие = Истина;
		ОповеститьОбИзменении(ДокументЗаявление.Ссылка);

	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность  = Ложь;
		ПрограммноеЗакрытие = Истина;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да ИЛИ Ответ = КодВозвратаДиалога.Нет Тогда
		Если ОткрытьЗаявлениеНаИзменение Тогда
			ОткрытьЗаявлениеНаИзменение();
		Иначе
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура УстановитьКомпонентуИОпределитьКриптопровайдер()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИсправитьНажатие_ПослеСозданияМенеджераКриптографии", 
			ЭтотОбъект);
			
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, Ложь,, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсправитьНажатие_ПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ИзменитьОформлениеМестаХраненияКлючей();
		Возврат;
	КонецЕсли;
	
	КомпонентаДляРаботыСКриптографиейПодключена = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИсправитьНажатие_ПослеПолученияКриптопровайдеров", 
		ЭтотОбъект);
		
	КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьНажатие_ПослеПолученияКриптопровайдеров(Результат, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст = Новый Структура();
	ВходящийКонтекст.Вставить("КриптопровайдерПриКонфликте", КриптопровайдерПриКонфликте);
	
	РезультатПоиска = КонтекстЭДОКлиент.РезультатПоискаКриптопровайдеров(Результат, ВходящийКонтекст);
	
	CryptoProCSPУстановлен	= РезультатПоиска.CryptoProCSPУстановлен;
	ViPNetCSPУстановлен 	= РезультатПоиска.ViPNetCSPУстановлен;

	ИзменитьОформлениеМестаХраненияКлючей();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеМестаХраненияКлючей()
	
	ЭтоКонфликтКриптопровайдеров        = CryptoProCSPУстановлен И ViPNetCSPУстановлен;
	УстановленХотяБыОдинКриптопровайдер = CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен;
	
	ВыбранЛокальныхРежим                = РежимРаботыСКлючами = 2;
	ЕстьОшибкаЛокальногоХраненияКлючей  = ЕстьОшибкаЛокальногоХраненияКлючей();
	
	ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат = 
		(CryptoProCSPУстановлен И НЕ ЭтоКонфликтКриптопровайдеров 
		ИЛИ ИгнорироватьКонфликт И КриптопровайдерПриКонфликте = Перечисления.ТипыКриптоПровайдеров.CryptoPro)
		И СрокЛицензииКриптоПроКонечный
		И НЕ РежимРаботыСКлючами = 1
		И НЕ ЕстьОшибкаЛокальногоХраненияКлючей;

	Элементы.ГруппаМестоХраненияКлюча.Видимость = 
		ДоступнаЭлектроннаяПодписьВМоделиСервиса 
		ИЛИ ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат
		ИЛИ ЕстьОшибкаЛокальногоХраненияКлючей;
		
	Элементы.РежимРаботыСКлючамиВМоделиСервиса.Видимость 	= ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	Элементы.Декорация12.Видимость 						 	= ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	Элементы.РежимРаботыСКлючамиЛокально.Видимость 		 	= ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	Элементы.ВключатьЛицензиюКриптоПроВСертификат.Видимость = ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат;
	Элементы.ОшибкаЛокальногоХранения.Видимость 			= ВыбранЛокальныхРежим И ЕстьОшибкаЛокальногоХраненияКлючей;
	
	Если ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат И НЕ ДоступнаЭлектроннаяПодписьВМоделиСервиса И НЕ ЕстьОшибкаЛокальногоХраненияКлючей Тогда
		// Этот такой вариант, когда доступен только флаг КриптоПро
		Элементы.ЗаголовокМестоХраненияКлюча.Заголовок = НСтр("ru = 'Лицензия КриптоПро:'");
		Элементы.ВключатьЛицензиюКриптоПроВСертификат.Заголовок = НСтр("ru = 'Включить в сертификат (платно)'");
	Иначе
		Элементы.ЗаголовокМестоХраненияКлюча.Заголовок = НСтр("ru = 'Хранение ключа:'");
		Элементы.ВключатьЛицензиюКриптоПроВСертификат.Заголовок = НСтр("ru = 'вместе с лицензией КриптоПро CSP (платно)'");
	КонецЕсли;
	
	Если ЕстьОшибкаЛокальногоХраненияКлючей И ВыбранЛокальныхРежим Тогда
		// Подсказки вопросиком не будет, но подсказка будет выведена в специальном поле справа
		Элементы.РежимРаботыСКлючамиЛокально.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Иначе
		Элементы.РежимРаботыСКлючамиЛокально.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	Если ЕстьОшибкаЛокальногоХраненияКлючей Тогда
		
		Текст = ТекстОшибкиЛокальногоХраненияКлючей();
		
		Если ЭтоКонфликтКриптопровайдеров Тогда
			Ссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Исправить'"),,,,"Исправить конфликт");
		ИначеЕсли НЕ КомпонентаДляРаботыСКриптографиейПодключена Тогда
			Ссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Установить'"),,,,"Установить компоненту");
		ИначеЕсли НЕ УстановленХотяБыОдинКриптопровайдер Тогда
			Ссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'Установить'"),,,,"Установить криптопровайдер");
		КонецЕсли;
		
		Если ДоступнаЭлектроннаяПодписьВМоделиСервиса Тогда
			// Добавляется отступ
			КрасныйТекст = Новый ФорматированнаяСтрока(" " + Текст,,КрасныйЦвет);
		Иначе
			КрасныйТекст = Новый ФорматированнаяСтрока(Текст,,КрасныйЦвет);
		КонецЕсли;
		
		ПодсказкаПоЛокальномуКлючу = Новый ФорматированнаяСтрока(КрасныйТекст, Ссылка);
		ОшибкаЛокальногоХранения   = ПодсказкаПоЛокальномуКлючу;
		
	Иначе
		
		// Криптопровайдер в выборе места хранения ключей
		ПодсказкаПоЛокальномуКлючу = НСтр("ru = 'Ключ электронной подписи будет храниться на этом компьютере при помощи %1'");
		Если CryptoProCSPУстановлен Тогда
			ПодсказкаПоЛокальномуКлючу = СтрШаблон(ПодсказкаПоЛокальномуКлючу, НСтр("ru = 'CryptoPro CSP'"));
		Иначе
			ПодсказкаПоЛокальномуКлючу = СтрШаблон(ПодсказкаПоЛокальномуКлючу, НСтр("ru = 'ViPNet CSP'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.РежимРаботыСКлючамиЛокально.РасширеннаяПодсказка.Заголовок = ПодсказкаПоЛокальномуКлючу;
	
	Если ЗапретитьИзменение Тогда
		Элементы.ГруппаМестоХраненияКлюча.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АктивизироватьСтраницу(Форма, ТекущаяСтраница)
	
	Элементы = Форма.Элементы;
	
	МногостраничныйЭлемент = Элементы.СтраницыЗаявления;
	
	Для каждого Страница Из МногостраничныйЭлемент.ПодчиненныеЭлементы Цикл
		Если Страница = ТекущаяСтраница Тогда
			Страница.Видимость = Истина;
			МногостраничныйЭлемент.ТекущаяСтраница 	= ТекущаяСтраница;
		Иначе
			Страница.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПриОтправкеЗаявленияНаПодключение()
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПриОтправкеЗаявленияНаПодключение(ДокументЗаявление.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьОбратнуюСвязь()
	 ОтправитьОбратнуюСвязьСервер();
	 Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПаспортныеДанные_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, ПараметрыФормы, "ПараметрыФормы");
	
	Если Результат.Модифицированность Тогда
		УстановитьМодифицированность(ЭтотОбъект);
	Конецесли;
	
	ИзменитьОформлениеПаспортныхДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИОтправить()
	
	СчетчикВызовов = 0;
	
	// Сохраняем в любом случае, даже если есть ошибки.
	СохранитьЗаявление(Истина);
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	
	Если ЕстьОшибкиВЗаполненииЗаявления() Тогда
		Возврат;
	Иначе
		СнятьМодифицированность(ЭтотОбъект);
	КонецЕсли;
	
	Если ЭтоЭлектронноеПодписание Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"Отправить_ПослеПолученияМенеджераИСертификатКриптографии", 
			ЭтотОбъект);
			
		КонтекстЭДОКлиент.ПолучитьМенеджерИСертификатКриптографии(СертификатДляПодписания, ОписаниеОповещения);
		
	Иначе
		
		НачатьОтправкуЗаявления();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить_ПослеПолученияМенеджераИСертификатКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено = Истина И НЕ Результат.МенеджерКриптографии = Неопределено Тогда
		
		СертификатКриптографии 	= Результат.СертификатКриптографии;
		МенеджерКриптографии 	= Результат.МенеджерКриптографии;
		
		СравнитьРеквизитыСертификатов(); // асинхронный
	Иначе
		// Выполнено = Ложь или Неопределено
		Отправить_СообщитьОНеготовностиМенеджераКриптографии(Результат.Выполнено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить_СообщитьОНеготовностиМенеджераКриптографии(РасширениеУстановлено)
	
	//   РасширениеУстановлено
	//       * Истина - Пользователь подтвердил установку, после установки расширение было успешно подключено.
	//       * Ложь   - Пользователь подтвердил установку, однако после установки расширение не удалось подключить.
	//       * Неопределено - Пользователь отказался от установки.

	Если РасширениеУстановлено = Неопределено Тогда
		ТекстВопроса = НСтр("ru = 'Вы отказались от установки расширения для работы с криптографией, которое требуется для подписания заявления электронной подписью.
                             |Вы можете отправить заявление без электронной подписи, но в таком случае потребуется оформление подключения в бумажном виде.
                             |
                             |Отправить заявление без электронной подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Не удалось установить расширение для работы с криптографией, которое требуется для подписания заявления электронной подписью.
                             |В этом случае подписание недоступно, возможно оформление подключения только в бумажном виде.
                             |
                             |Отправить заявление без электронной подписи?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Отправить_ПослеОтветаНаВопросОБумажномПодписании", 
		ЭтотОбъект);
		
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(НСтр("ru = 'Да'"));
	Кнопки.Добавить(НСтр("ru = 'Отмена'"));
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);

КонецПроцедуры
	
&НаКлиенте
Процедура Отправить_ПослеОтветаНаВопросОБумажномПодписании(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = НСтр("ru = 'Да'") Тогда
		
		ПереключитьНаБумажноеПодписание();
		
		// Повторяем отправку
		СохранитьИОтправить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьНаБумажноеПодписание()
	
	// Переключаем на "В бумажном виде"
	СпособПодписания = 2; 
	// Выполняем действия при смене способа подписания
	ЭтоЭлектронноеПодписание = Ложь;
	ИзменитьОформлениеКнопкиОтправки(ЭтотОбъект);
	ИзменитьОформлениеДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьРеквизитыСертификатов()
	
	ЗаполнитьТаблицуСравненияРеквизитов();
		
	Если ЭтоЭлектронноеПодписание И ЕстьРазличающиесяРеквизиты() Тогда
	
		АдресТаблицыСравненияРеквизитов = АдресТаблицыСравненияРеквизитов();
		
		ПараметрыФормы = 
			"ПредставлениеСертификата,
			|СертификатДляПодписания";
		
		ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект, ПараметрыФормы); 
		ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		ДополнительныеПараметры.Вставить("АдресТаблицыСравненияРеквизитов", АдресТаблицыСравненияРеквизитов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СравнитьРеквизитыСертификатов_ПослеПолученияОтвета", 
			ЭтотОбъект);
		
		ОткрытьФорму(
			КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_СравнениеРеквизитовСертификата", 
			ДополнительныеПараметры,
			,
			,
			,
			,
			ОписаниеОповещения);
		
	Иначе
		НачатьОтправкуЗаявления();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьРеквизитыСертификатов_ПослеПолученияОтвета(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = НСтр("ru = 'Взять из сертификата'") Тогда
		
		ЗаполнитьЗаявлениеДаннымиИзСертификатаПередОтправкой();
		СохранитьИОтправить();
		
	ИначеЕсли Результат = НСтр("ru = 'В бумажном виде'") Тогда
		
		ПереключитьНаБумажноеПодписание();
		СохранитьИОтправить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаявлениеДаннымиИзСертификатаПередОтправкой()
	
	Для каждого СтрокаТаблицы Из ТаблицаСравненияРеквизитов Цикл
		
		РеквизитФормы = СтрокаТаблицы.РеквизитФормы;
		
		Если СтрокаТаблицы.Различается Тогда
			
			// При изменении почты нужно выполнить повторную проверку для ЭП в облаке
			Если СтрокаТаблицы.Наименование = НСтр("ru = 'ОГРН'")
				ИЛИ СтрокаТаблицы.Наименование = НСтр("ru = 'ОГРНИП'") Тогда
				ОГРН = СтрокаТаблицы.СтороннийСертификат;
			ИначеЕсли СтрокаТаблицы.Наименование = НСтр("ru = 'Краткое наименование'") Тогда
				КраткоеНаименование = СтрокаТаблицы.СтороннийСертификат;
			ИначеЕсли СтрокаТаблицы.Наименование = НСтр("ru = 'ИНН'") Тогда
				ИНН = СтрокаТаблицы.СтороннийСертификат;
			Иначе
				// ИНН, СНИЛС и ФИО не проверяем, так как мы по ним искали сертификат.
				// Регион мы исправить не можем, отправляем пользователя самого исправлять заявление.
				// Если не совпадает страна, то подписание в электронном виде невозможно.
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыСравненияРеквизитов()
	
	ТаблицаЗначенийСравненияРеквизитов = РеквизитФормыВЗначение("ТаблицаСравненияРеквизитов");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначенийСравненияРеквизитов, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ЕстьРазличающиесяРеквизиты()
	
	Отбор = Новый Структура();
	Отбор.Вставить("Различается", Истина);
	 
	Возврат ТаблицаСравненияРеквизитов.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(
		Наименование, 
		КлючСтороннегоСертификата,
		НовыйСертификат,
		КлючНовогоСертификат,
		СимволовСлева = 0)
		
	СимволовСлева = ?(СимволовСлева = 0, 2000, СимволовСлева);
		
	НоваяСтрока = ТаблицаСравненияРеквизитов.Добавить();
	
	НоваяСтрока.Наименование 		= Наименование;
	НоваяСтрока.СтороннийСертификат = РеквизитСертификата(СертификатДляПодписания.ВладелецСтруктура, КлючСтороннегоСертификата);
	
	Если НовыйСертификат.НайтиПоЗначению(КлючНовогоСертификат) <> Неопределено Тогда
		НоваяСтрока.НовыйСертификат = НовыйСертификат.НайтиПоЗначению(КлючНовогоСертификат).Представление;
	КонецЕсли;
	
	НоваяСтрока.Различается = Врег(Лев(НоваяСтрока.НовыйСертификат, СимволовСлева)) <> Врег(Лев(НоваяСтрока.СтороннийСертификат, СимволовСлева));
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция РеквизитСертификата(Сертификат, Реквизит)
	
	Если Сертификат.Свойство(Реквизит) Тогда
		Значение = Сертификат[Реквизит];
	Иначе
		Значение = "";
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьТаблицуСравненияРеквизитов()
	
	//Перечень исключений:
	//- электронный адрес
	//- населенный пункт
	//- улица и др (адрес)
	//- неструктурированное имя
	//- CN (может быть согласно ГОСУСЛУГ)
	//- рнс и кп фсс (устаревшие)
	//- должность ? тут могут быть проблемы
	//- подразделение
	//- наименование организации
	//- огрнип

	//Обязательным являются: регион (код), снилс, огрн, инн, фамилия, имя отчество, страна

	ТаблицаСравненияРеквизитов.Очистить();
	
	НовыйСертификат  = КонтекстЭДОКлиент.ПараметрыНовогоСертификата(ДокументЗаявление);
	
	// Заголовок
	НоваяСтрока = ТаблицаСравненияРеквизитов.Добавить();
	НоваяСтрока.СтороннийСертификат = НСтр("ru = 'В сертификате'");
	НоваяСтрока.НовыйСертификат 	= НСтр("ru = 'В заявлении'");
	НоваяСтрока.ЭтоЗаголовок		= Истина;
	
	// Краткое наименование
	Если ЭтоЮридическоеЛицо Тогда
		ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'Краткое наименование'"), "O", НовыйСертификат, "2.5.4.10");
	КонецЕсли;
	
	// ИНН
	ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'ИНН'"), "INN", НовыйСертификат, "1.2.643.3.131.1.1");
	
	// ОГРН
	Если ЭтоЮридическоеЛицо Тогда
		ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'ОГРН'"), "OGRN", НовыйСертификат, "1.2.643.100.1");
	Иначе
		ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'ОГРНИП'"), "OGRNIP", НовыйСертификат, "1.2.643.100.5");
	КонецЕсли;
	
	// Страна 
	ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'Страна'"), "C", НовыйСертификат, "2.5.4.6");
	
	// Регион, область
	ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'Регион'"), "ST", НовыйСертификат, "2.5.4.8", 2);
	
	// Фамилия
	ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'Фамилия владелеца'"), "SN", НовыйСертификат, "2.5.4.4");
	
	// Имя Отчество
	ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'Имя Отчество'"), "GN", НовыйСертификат, "2.5.4.42");
	
	// СНИЛС
	ЗаполнитьТаблицуСравненияРеквизитов_ДобавитьСтроку(НСтр("ru = 'СНИЛС'"), "SNILS", НовыйСертификат, "1.2.643.100.3");

КонецФункции

&НаКлиенте
Процедура НачатьОтправкуЗаявления()
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБубликОтправки", 0.1, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ПоказатьБубликОтправки()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Заявление", ДокументЗаявление.Ссылка);
	
	ОткрытьФорму(КонтекстЭДОКлиент.ПутьКОбъекту + ".Форма.Мастер_ОтправкаЗаявления", ДополнительныеПараметры);
	
	// Создание закрытого ключа начнется из оповещения "Упрощенное заявление. Начать создание закрытого ключа",
	// а из него - ОтправитьЗаявление()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявление()
	
	Если РежимРаботыСКлючами = 1 И ЭтоЭлектронноеПодписание Тогда
		АлгоритмКонтейнераКлючей = КонтекстЭДОКлиент.ЗаявлениеОпределитьАлгоритмДляСозданияКонтейнераКлючей(ДокументЗаявление);
		НачатьОпределениеТекстаЗаявления(АлгоритмКонтейнераКлючей);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
	Иначе
		ОтправитьЗаявлениеИзКонтейнера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьТекстЗаявления() Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюТекстаЗаявления) Тогда
		Результат = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюТекстаЗаявления);
		Если ЗначениеЗаполнено(Результат) Тогда
			
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления");
			
			Если Результат.Выполнено Тогда
				
				ТекстОтправляемогоЗаявления 	  = Результат.ТекстОтправляемогоЗаявления;
				АдресТекстаОтправляемогоЗаявления = ПоместитьВоВременноеХранилище(ТекстОтправляемогоЗаявления, Новый УникальныйИдентификатор);
				
				ПрисоединенныйФайлЗаявления = ПрисоединитьФайлЗаявления(АдресТекстаОтправляемогоЗаявления);
				ОтправитьЗаявлениеИзКонтейнера(АдресТекстаОтправляемогоЗаявления);
				
			Иначе
				// Вывод ошибки
				СформироватьИОтправитьЗаявление_Завершение(Результат, Неопределено);
			КонецЕсли;
			
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
		КонецЕсли;
		
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьТекстЗаявления", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрисоединитьФайлЗаявления(АдресТекстаОтправляемогоЗаявления)
	
	ЭтотОбъект.Прочитать();
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ПрисоединенныйФайлЗаявления = КонтекстЭДОСервер.ПрисоединитьФайлЗаявления(НовыйДокументЗаявление, АдресТекстаОтправляемогоЗаявления, "Заявление_на_подключение");
	НовыйДокументЗаявление.Записать();
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
	Возврат ПрисоединенныйФайлЗаявления;
	
КонецФункции
	
&НаСервере
Процедура НачатьОпределениеТекстаЗаявления(Алгоритм)

	АдресЗаданияПоПолучениюТекстаЗаявления = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(АдресЗаданияПоПолучениюТекстаЗаявления);
	ДополнительныеПараметры.Добавить(ДокументЗаявление.Ссылка);
	ДополнительныеПараметры.Добавить(Алгоритм);
	
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.НачатьОпределениеТекстаЗаявления", ДополнительныеПараметры);

КонецПроцедуры
	
&НаКлиенте
Процедура ОтправитьЗаявлениеИзКонтейнера(АдресТекстаОтправляемогоЗаявления = Неопределено)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьИОтправитьЗаявление_Завершение", ЭтотОбъект);
	
	Контекст = КонтекстЭДОКлиент.ПараметрыПроцедурыСформироватьИОтправитьЗаявление();
	Контекст.ДокументЗаявление 						= ДокументЗаявление;
	Контекст.ВызовИзМастераПодключенияК1СОтчетности = Истина;
	Контекст.ВыполняемоеОповещение 					= ОписаниеОповещения;
	Контекст.МенеджерКриптографии 					= МенеджерКриптографии;
	Контекст.СтороннийСертификатДляПлатформы 		= СертификатКриптографии;
	Контекст.АдресТекстаОтправленногоЗаявления 		= АдресТекстаОтправляемогоЗаявления;
	Контекст.ЭтоНулевка 							= ЭтоРежимБесплатнойНулевойОтчетности ИЛИ ЭтоРежимОграниченнойФункциональности;
	Контекст.ПрисоединенныйФайлЗаявления 			= ПрисоединенныйФайлЗаявления;
	Контекст.ФормаВладелец							= ЭтотОбъект;
	Если ВключатьЛицензиюКриптоПроВСертификат 
		И ПоказыватьФлагВключатьЛицензиюКриптоПроВСертификат Тогда
		Контекст.OIDЛицензииКриптоПро = OIDЛицензииКриптоПро;
	КонецЕсли;
	
	Если ЭтоЭлектронноеПодписание Тогда
		
		Контекст.СтороннийСертификат = СертификатДляПодписания;
		// Представление сертификата
		Контекст.СтороннийСертификат.Вставить(
			"ПредставлениеСертификата", 
			ПредставлениеСертификата(СертификатДляПодписания));
			
	КонецЕсли;
	
	Если СдаватьВПФР Тогда
		НачатьОпределениеКонтактовПФР();
	КонецЕсли;
	
	КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИОтправитьЗаявление_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.Прочитать();
	
	Если Результат.Свойство("ТекстОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Если ТекстОшибокОтправки <> ПолученныйТекстОшибокОтправки Тогда
		ТекстОшибокОтправки = ПолученныйТекстОшибокОтправки;
	КонецЕсли;
	
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	Оповестить("Завершение отправки заявления", Результат, ДокументЗаявление.Ссылка);
	ЭтотОбъект.Прочитать();
	
	Если ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда
		Оповестить(НСтр("ru = 'Упрощенное заявление. Успешная отправки заявления'"), , ДокументЗаявление.Ссылка);
		УведомитьПартнераОЗаявлении();
		ЭтаФорма.Активизировать();
		ПоказатьСтраницуУспешнойОтправки();
		ПриОтправкеЗаявленияНаПодключение();
	ИначеЕсли СтрНайти(ПолученныйТекстОшибокОтправки, "Отказ от ввода пароля") <> 0 Тогда
		Оповестить(НСтр("ru = 'Упрощенное заявление. Отказ от ввода пароля'"), "", ДокументЗаявление.Ссылка);
	Иначе
		Оповестить(НСтр("ru = 'Упрощенное заявление. Ошибка отправки заявления'"), ТекстОшибокОтправки, ДокументЗаявление.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуУспешнойОтправки()
	
	ИзменитьОформлениеСтраницыУспешнойОтправки();
	АктивизироватьСтраницу(ЭтотОбъект, Элементы.УспешнаяОтправка);
	Элементы.Готово.КнопкаПоУмолчанию = Истина;
	
	ПрограммноеЗакрытие = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеСтраницыУспешнойОтправки()
	
	ВладелецЭПНеРуководитель = ВладелецЭЦПТип <> ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	
	ПоказыватьБлокФНС = СдаватьВФНС И ВладелецЭПНеРуководитель;
	ПоказыватьБлокПФР = СдаватьВПФР;
	
	// Видимость первого блока
	ЕстьТолькоПервыйБлок = НЕ ПоказыватьБлокФНС И НЕ ПоказыватьБлокПФР;
	Если ЕстьТолькоПервыйБлок Тогда
		// Картинки с шариком этапа возле первого шага не будет
		Элементы.ДекорацияСообщитеОбОтправкеЗаявления.Видимость = Ложь;
		Элементы.ДекорацияСообщитеОбОтправкеОтступ.Видимость = Ложь;
		
		Элементы.ГруппаНижнийРаздел.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
	// Для нулевки - свой заголовок и текст
	Если ЭтоРежимБесплатнойНулевойОтчетности ИЛИ ЭтоРежимОграниченнойФункциональности Тогда
		Элементы.ЗаголовокСообщитеОбОтправкеЗаявления.Заголовок = НСтр("ru = 'Дождитесь, пока с вами свяжется партнер для оформления документов'");
		Элементы.ЗаголовокСообщитеОбОтправкеРекомендация.Заголовок = 
			НСтр("ru = 'Обратите внимание, воспользоваться 1С-Отчетностью вы сможете только после одобрения заявления партнером и настройки программы. Подключение к 1С-Отчетности обычно занимает 1-2 дня.'");
	КонецЕсли;
	
	// Блок доверенность ФНС
	Элементы.ГруппаОтнеситеДоверенностьВКаждуюИФНС.Видимость = ПоказыватьБлокФНС;
	
	Если ПоказыватьБлокФНС Тогда
		Элементы.ЗаголовокОтнеситеДоверенностьВКаждуюИФНСРекомендация.Заголовок = 
			ДокументооборотСКОКлиентСервер.ИзменитьОформлениеРекомендацииДоверенностиДляФНС(ВладелецЭЦПТип, ЭтоЮридическоеЛицо, ПолучателиФНС);
	КонецЕсли;
	
	// Блок ПФР
	Элементы.ГруппаОтнеситеДокументыВПФР.Видимость = ПоказыватьБлокПФР;
	
	Если ПоказыватьБлокПФР Тогда
		
		КонтекстЭДОСервер        = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		КодРегиона               = КодРегионаПоАдресу(АдресЮридическийЗначение);
		ПараметрыПодключенияКПФР = КонтекстЭДОСервер.ПараметрыПодключенияКПФР(КодРегиона);
		
		Элементы.ПояснениеПоПодключениюКПФРДопДокументы.Видимость = ПараметрыПодключенияКПФР.ВРегионеЕстьСвойБланк;
		
		Если НЕ ПоказыватьБлокФНС Тогда
			// Если центральный блок пропадает, у ПФР меняется нумерация
			Элементы.ДекорацияОтнеситеДокументыВПФР.Картинка = БиблиотекаКартинок.Этап2БРО;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюКонтактовПФР) Тогда
			
			Данные = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюКонтактовПФР);
			
			Если ТипЗнч(Данные) = Тип("Структура") И Данные.Выполнено Тогда
				Элементы.ГруппаКонтактыПФР.Видимость = Истина;
				
				Элементы.НаименованиеУПФР.Заголовок = Данные.Наименование;
				Элементы.АдресУПФР.Заголовок 		= Данные.Адрес;
				Элементы.ТелефонУПФР.Заголовок 		= Данные.Телефон;
				
			Иначе
				Элементы.ГруппаКонтактыПФР.Видимость = Ложь;
			КонецЕсли;	
		Иначе
			Элементы.ГруппаКонтактыПФР.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапретитьИзменение Тогда
		Элементы.ИконкаИПоздравления.Видимость = Ложь;
		Элементы.ГруппаОбратнойСвязи.Видимость = Ложь;
		Элементы.Готово.Заголовок = НСтр("ru = 'ОК'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УведомитьПартнераОЗаявлении()
	
	ЗаявлениеОтправлено = ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено");
	Если НЕ ЗаявлениеОтправлено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоРежимОграниченнойФункциональности Тогда
		Возврат;
	КонецЕсли;

	ОтослатьПисьмоПартнеруНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтослатьПисьмоПартнеруНаСервере()
	
	Если НЕ ЭтоРежимОграниченнойФункциональности Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ДокументЗаявление.Ссылка);
	ПараметрыЗадания.Добавить(Тариф);
	
	ФоновыеЗадания.Выполнить(
		"ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтослатьПисьмоПартнеру", 
		ПараметрыЗадания, 
		1);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФИОРуководителяИз1СКонтрагент(Данные)
	
	РуководительФамилия  = Данные.Фамилия;
	РуководительИмя      = Данные.Имя;
	РуководительОтчество = Данные.Отчество;
	
	ВладелецЭЦПФамилия  = РуководительФамилия;
	ВладелецЭЦПИмя      = РуководительИмя;
	ВладелецЭЦПОтчество = РуководительОтчество;
	
	ФИОВладельцаИз1СКонтрагента = ВладелецЭЦПФамилия <> "" И ВладелецЭЦПИмя <> "";
	
	НачатьОпределениеВладельцаЭППоФИО();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИз1СКонтрагент()
	
	Доступен1СКонтрагент        = Ложь;
	ЗаполнятьПринудительно      = Ложь;
	ФИОВладельцаИз1СКонтрагента = Ложь;
	РуководительФамилия			= "";
	РуководительИмя				= "";
	РуководительОтчество		= "";
	ЭтоИП 						= НЕ ЭтоЮридическоеЛицо;
	ИПСдаетОтчетностьЗаСебя 	= ЭтоИП И НЕ ИПИспользуетТрудНаемныхРаботников;
	
	ЗаполнятьФИО					= ЗаполнятьПринудительно ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦП);
	ЗаполнятьКраткоеНаименование 	= НаименованиеПустое() ИЛИ ЗаполнятьПринудительно;
	ЗаполнятьКПП  				 	= ЭтоЮридическоеЛицо И (НЕ ЗначениеЗаполнено(КПП) ИЛИ ЗаполнятьПринудительно);
	ЗаполнятьОГРН 					= НЕ ЗначениеЗаполнено(ОГРН) ИЛИ ЗаполнятьПринудительно;
	ЗаполнятьАдрес 					= ЭтоЮридическоеЛицо И (АдресЮридическийПредставление = "" ИЛИ ЗаполнятьПринудительно);
	ЗаполнятьДолжность 				= ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") 
		И ЭтоЮридическоеЛицо И (НЕ ЗначениеЗаполнено(ВладелецЭЦПДолжность) ИЛИ ЗаполнятьПринудительно);
	ЗаполнятьКодФНС 				= НЕ ЗначениеЗаполнено(ДанныеОрганизации.КодНО) ИЛИ ЗаполнятьПринудительно;
	ЗаполнятьРегНомерПФР 			= НЕ ЗначениеЗаполнено(РегНомерПФР) И НЕ ИПСдаетОтчетностьЗаСебя ИЛИ ЗаполнятьПринудительно;
	ЗаполнятьКодПФР 				= НЕ ЗначениеЗаполнено(КодПФР) И НЕ ИПСдаетОтчетностьЗаСебя ИЛИ ЗаполнятьПринудительно;
	
	ВсеРеквизитыЗаполнены = 
		НЕ ЗаполнятьКПП
		И НЕ ЗаполнятьОГРН
		И НЕ ЗаполнятьАдрес
		И НЕ ЗаполнятьДолжность
		И НЕ ЗаполнятьКодФНС
		И НЕ ЗаполнятьРегНомерПФР
		И НЕ ЗаполнятьКодПФР;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами")
		ИЛИ ПризнакОбособленногоПодразделения
		ИЛИ ВсеРеквизитыЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
	Если ЭтоЮридическоеЛицо Тогда
		РеквизитыОрганизации1СКонтрагент = Модуль.РеквизитыЮридическогоЛицаПоИНН(ИНН);
	Иначе
		РеквизитыОрганизации1СКонтрагент = Модуль.РеквизитыПредпринимателяПоИНН(ИНН);
	КонецЕсли;
	
	// Ошибка будет при неподключенном 1С:Контрагенте или если такого ИНН нет в базе (тестовый ИНН)
	Если ЗначениеЗаполнено(РеквизитыОрганизации1СКонтрагент.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
			
	Если ЭтоЮридическоеЛицо 
		И ЗначениеЗаполнено(РеквизитыОрганизации1СКонтрагент.КПП)
		И ЗначениеЗаполнено(КПП)
		И КПП <> РеквизитыОрганизации1СКонтрагент.КПП
		И НЕ ЗаполнятьПринудительно Тогда
		
		// Для обособленных подразделений данные в 1С:Контрагенте не хранятся
		ПризнакОбособленногоПодразделения = Истина;
		Возврат;
		
	КонецЕсли;
	
	Доступен1СКонтрагент = Истина;
	
	// ФИО владельца
	Если ЗаполнятьФИО Тогда
		Если ЭтоЮридическоеЛицо Тогда
			Если РеквизитыОрганизации1СКонтрагент.Руководитель <> Неопределено Тогда
				ЗаполнитьФИОРуководителяИз1СКонтрагент(РеквизитыОрганизации1СКонтрагент.Руководитель);
			КонецЕсли;
		Иначе
			ЗаполнитьФИОРуководителяИз1СКонтрагент(РеквизитыОрганизации1СКонтрагент);
		КонецЕсли;
	КонецЕсли;
	
	// Краткое наименование
	Если ЗаполнятьКраткоеНаименование Тогда
		ПоказыватьКраткоеНаименование = Ложь;
		КраткоеНаименование = РеквизитыОрганизации1СКонтрагент.НаименованиеСокращенное;
	КонецЕсли;
	
	// КПП
	Если ЗаполнятьКПП Тогда
		КПП = РеквизитыОрганизации1СКонтрагент.КПП;
		ПоказыватьКПП = НЕ ЗначениеЗаполнено(СокрЛП(КПП));
	КонецЕсли;
	
	// ОГРН
	Если ЗаполнятьОГРН Тогда
		ОГРН = РеквизитыОрганизации1СКонтрагент.РегистрационныйНомер;
	КонецЕсли;
	
	// Юр адрес
	Если ЗаполнятьАдрес 
		И РеквизитыОрганизации1СКонтрагент.ЮридическийАдрес <> Неопределено Тогда
		
		// В ЕГРЮЛ не содержатся сведения об адресе ИП, так как это персональная информация.
		
		АдресЮридическийЗначение = РеквизитыОрганизации1СКонтрагент.ЮридическийАдрес.КонтактнаяИнформация;
		АдресЮридическийПредставление = РеквизитыОрганизации1СКонтрагент.ЮридическийАдрес.Представление;
		
		ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(АдресЮридическийЗначение);
		
		Если НЕ ЭтоАдресПоФИАСу Тогда
			ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			АдресЮридическийЗначение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(АдресЮридическийПредставление, ВидАдреса);
		КонецЕсли;
		
		ПриИзмененииЮридическогоАдреса();
		
	КонецЕсли;
	
	// Должность
	Если ЗаполнятьДолжность
		И РеквизитыОрганизации1СКонтрагент.Руководитель <> Неопределено 
		И ЗначениеЗаполнено(РеквизитыОрганизации1СКонтрагент.Руководитель.Должность) 
		Тогда
		
		ВладелецЭЦПДолжность = РеквизитыОрганизации1СКонтрагент.Руководитель.Должность;
		
	КонецЕсли;
	
	// Код ФНС
	Если ЗаполнятьКодФНС  
		И РеквизитыОрганизации1СКонтрагент.РегистрацияВНалоговомОргане <> Неопределено
		И ЗначениеЗаполнено(РеквизитыОрганизации1СКонтрагент.РегистрацияВНалоговомОргане.Код) Тогда
		
		ДанныеОрганизации.КодНО = РеквизитыОрганизации1СКонтрагент.РегистрацияВНалоговомОргане.Код;
		КодНалоговогоОрганаЭДО  = РеквизитыОрганизации1СКонтрагент.РегистрацияВНалоговомОргане.Код;
		
	КонецЕсли;
	
	// Рег номер ПФР
	Если ЗаполнятьРегНомерПФР  
		И РеквизитыОрганизации1СКонтрагент.РегистрацияВПенсионномФонде <> Неопределено
		И ЗначениеЗаполнено(РеквизитыОрганизации1СКонтрагент.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР) Тогда
		
		РегНомерПФР = РеквизитыОрганизации1СКонтрагент.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
		ДанныеОрганизации.РегНомПФР = РегНомерПФР;
		
	КонецЕсли;
	
	// Код ПФР
	Если ЗаполнятьКодПФР  
		И РеквизитыОрганизации1СКонтрагент.РегистрацияВПенсионномФонде <> Неопределено
		И ЗначениеЗаполнено(РеквизитыОрганизации1СКонтрагент.РегистрацияВПенсионномФонде.КодОрганаПФР) Тогда
		
		КодПФР = РеквизитыОрганизации1СКонтрагент.РегистрацияВПенсионномФонде.КодОрганаПФР;
		ДанныеОрганизации.КодОрганаПФР = КодПФР;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СтруктураАдреса(АдресЗначенияПолей) Экспорт
	
	СтруктураАдреса = НовыйСтруктураАдреса();
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресЗначенияПолей);
	
	СтруктураАдреса.Страна    = СведенияОбАдресе.Страна;
	СтруктураАдреса.КодСтраны = СведенияОбАдресе.КодСтраны;
	Если СтруктураАдреса.Свойство("Страна") 
		И СтрСравнить(СтруктураАдреса.Страна, Справочники.СтраныМира.Россия.Наименование) = 0 Тогда
		СтруктураАдреса.АдресРФ = Истина;
	Иначе
		СтруктураАдреса.АдресРФ = Ложь;
	КонецЕсли;
	
	СтруктураАдреса.Индекс                    = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Регион                    = СведенияОбАдресе.Регион;
	СтруктураАдреса.КодРегиона                = ?(СведенияОбАдресе.Свойство("КодРегиона"), СведенияОбАдресе.КодРегиона, "");
	СтруктураАдреса.РегионСокращение          = СведенияОбАдресе.РегионСокращение;
	СтруктураАдреса.Район                     = СведенияОбАдресе.Район;
	СтруктураАдреса.РайонСокращение           = СведенияОбАдресе.РайонСокращение;
	СтруктураАдреса.Город                     = СведенияОбАдресе.Город;
	СтруктураАдреса.ГородСокращение           = СведенияОбАдресе.ГородСокращение;
	СтруктураАдреса.НаселенныйПункт           = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПунктСокращение = СведенияОбАдресе.НаселенныйПунктСокращение;
	СтруктураАдреса.Улица                     = СведенияОбАдресе.Улица;
	СтруктураАдреса.УлицаСокращение           = СведенияОбАдресе.УлицаСокращение;
	СтруктураАдреса.Дом                       = СведенияОбАдресе.Здание.Номер;
	СтруктураАдреса.ТипДома                   = СведенияОбАдресе.Здание.ТипЗдания;
	
	Если СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
		СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпуса[0].Номер;
		СтруктураАдреса.ТипКорпуса = СведенияОбАдресе.Корпуса[0].ТипКорпуса;
	КонецЕсли;
	
	Если СведенияОбАдресе.Помещения.Количество() > 0 Тогда
		СтруктураАдреса.Квартира    = СведенияОбАдресе.Помещения[0].Номер;
		СтруктураАдреса.ТипКвартиры = СведенияОбАдресе.Помещения[0].ТипПомещения;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

&НаСервере
Функция НовыйСтруктураАдреса()
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресРФ",                   Истина);
	СтруктураАдреса.Вставить("КодСтраны",                 "");
	СтруктураАдреса.Вставить("Страна",                    "");
	СтруктураАдреса.Вставить("Индекс",                    "");
	СтруктураАдреса.Вставить("Регион",                    "");
	СтруктураАдреса.Вставить("РегионСокращение",          "");
	СтруктураАдреса.Вставить("КодРегиона",                "");
	СтруктураАдреса.Вставить("Район",                     "");
	СтруктураАдреса.Вставить("РайонСокращение",           "");
	СтруктураАдреса.Вставить("Город",                     "");
	СтруктураАдреса.Вставить("ГородСокращение",           "");
	СтруктураАдреса.Вставить("НаселенныйПункт",           "");
	СтруктураАдреса.Вставить("НаселенныйПунктСокращение", "");
	СтруктураАдреса.Вставить("Улица",                     "");
	СтруктураАдреса.Вставить("УлицаСокращение",           "");
	СтруктураАдреса.Вставить("Дом",                       "");
	СтруктураАдреса.Вставить("ТипДома",                   "");
	СтруктураАдреса.Вставить("Корпус",                    "");
	СтруктураАдреса.Вставить("ТипКорпуса",                "");
	СтруктураАдреса.Вставить("Квартира",                  "");
	СтруктураАдреса.Вставить("ТипКвартиры",               "");
	СтруктураАдреса.Вставить("Представление",             "");
	СтруктураАдреса.Вставить("ЗначенияПолей",             "");
	
	Возврат СтруктураАдреса;
	
КонецФункции
	
&НаСервере
Процедура СохранитьЗаявление(СохранятьЗаявление = Истина)
	
	ЭтотОбъект.Прочитать();
	НовыйДокументЗаявление = РеквизитФормыВЗначение("ДокументЗаявление");
	
	// Очистка заявления
	Для каждого РеквизитЗаявления Из НовыйДокументЗаявление.Метаданные().Реквизиты Цикл
		НовыйДокументЗаявление[РеквизитЗаявления.Имя] = Неопределено;
	КонецЦикла;
	
	Для каждого ТаблицаЗаявления Из НовыйДокументЗаявление.Метаданные().ТабличныеЧасти Цикл
		НовыйДокументЗаявление[ТаблицаЗаявления.Имя].Очистить();
	КонецЦикла;
	
	НовыйДокументЗаявление.ЭтоУпрощенноеЗаявление				= Истина;
	НовыйДокументЗаявление.Дата									= ТекущаяДатаСеанса();
	НовыйДокументЗаявление.Организация							= Организация;
	НовыйДокументЗаявление.ТипЗаявления							= Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
	НовыйДокументЗаявление.ИдентификаторДокументооборота		= ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор();
	НовыйДокументЗаявление.Статус								= Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
	НовыйДокументЗаявление.СпецоператорСвязи					= Спецоператор;
	НовыйДокументЗаявление.ТипКриптопровайдера					= ТипКриптопровайдера;
	НовыйДокументЗаявление.ТипОрганизации						= ЭтоЮридическоеЛицо;
	НовыйДокументЗаявление.ИНН									= ИНН;
	НовыйДокументЗаявление.КПП									= КПП;
	НовыйДокументЗаявление.ПризнакОбособленногоПодразделения	= ПризнакОбособленногоПодразделения;
	НовыйДокументЗаявление.КраткоеНаименование					= КраткоеНаименование;
	НовыйДокументЗаявление.НомерОсновнойПоставки1с				= НомерОсновнойПоставки1с;
	НовыйДокументЗаявление.Тариф								= Тариф;
	НовыйДокументЗаявление.ТелефонМобильныйДляАвторизации		= ТелефонДляПаролей;
	НовыйДокументЗаявление.ТелефонОсновной						= ?(ТелефонОсновной = "", ТелефонДляПаролей, ТелефонОсновной);
	НовыйДокументЗаявление.ЭлектроннаяПочта						= ЭлектроннаяПочтаДляПаролей;
	НовыйДокументЗаявление.Ответственный						= Пользователи.ТекущийПользователь();
	НовыйДокументЗаявление.ДатаСозданияУчетнойЗаписи			= '00010101';
	НовыйДокументЗаявление.ОГРН									= ОГРН;
	НовыйДокументЗаявление.ПодписатьЭП							= СпособПодписания = 1;
	НовыйДокументЗаявление.ЭтоУпрощенноеЗаявление				= Истина;
	НовыйДокументЗаявление.АдресЮридический 					= АдресЮридическийЗначение;
	НовыйДокументЗаявление.АдресФактический 					= АдресФактическийЗначение;
	НовыйДокументЗаявление.ЭтоНотариусАдвокатИлиГКФХ			= ЭтоНотариусАдвокатИлиГКФХ;
	
	Если Элементы.ВключатьЛицензиюКриптоПроВСертификат.Видимость Тогда
		НовыйДокументЗаявление.ВключитьЛицензиюКриптоПро		= ВключатьЛицензиюКриптоПроВСертификат;
	КонецЕсли;
	
	// СМС
	Если ТелефонМобильный = "" Тогда
		ТелефонДляСМС = ТелефонДляПаролей;
	Иначе
		ТелефонДляСМС = ТелефонМобильный;
	КонецЕсли;
	
	НовыйДокументЗаявление.ТелефонМобильный = ?(ПолучатьСМС, ТелефонДляСМС, "");
	
	// ЭП в облаке
	НовыйДокументЗаявление.ЭлектроннаяПодписьВМоделиСервиса = РежимРаботыСКлючами = 1;
	
	Если РежимРаботыСКлючами = 1 Тогда
		
		ТелефонПодтвержден = ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
			И НЕ ПроверкаТелефонДляПаролей.ВыполняетсяПроверка;
		
		Если ТелефонПодтвержден Тогда
			НовыйДокументЗаявление.ИдентификаторПроверкиТелефонаДляПаролей = ПроверкаТелефонДляПаролей.ИдентификаторПроверки;
		КонецЕсли;
		
		ПочтаПодтверждена = ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 
			И НЕ ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка;
		
		Если ПочтаПодтверждена Тогда
			НовыйДокументЗаявление.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей = ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки;
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьНовыйДокументЗаявление_ВладелецЭП(НовыйДокументЗаявление);
	
	// Сохраянем в любом случае, даже если выбрали бумажное подписание
	Если СертификатДляПодписания <> Неопределено Тогда
		
		// ДвДанные определяли для сертификата для реквизитов, 
		// но если есть сертификат для подписания, то они совпадают.
		СертификатДляПодписания.Вставить("Сертификат", ДвДанныеСертификата);
		НовыйДокументЗаявление.РеквизитыСертификата = Новый ХранилищеЗначения(СертификатДляПодписания);
		
	КонецЕсли;
	
	СоздатьНовыйДокументЗаявление_СохранитьНаправления(НовыйДокументЗаявление);
	
	Если ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюИдентификатораАдресовФИАС) Тогда
		
		ИдентификаторыАдресов = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюИдентификатораАдресовФИАС);
		Если ИдентификаторыАдресов <> Неопределено Тогда
			Если ИдентификаторыАдресов.АдресЮридическийЗначение = АдресЮридическийЗначение Тогда
				НовыйДокументЗаявление.АдресЮридическийИдентификаторПоФИАС = ИдентификаторыАдресов.АдресЮридическийИдентификаторПоФИАС;
			КонецЕсли;
			Если ИдентификаторыАдресов.АдресФактическийЗначение = АдресФактическийЗначение Тогда
				НовыйДокументЗаявление.АдресФактическийИдентификаторПоФИАС = ИдентификаторыАдресов.АдресФактическийИдентификаторПоФИАС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодключитьЭДО Тогда
		СоздатьНовыйДокументЗаявление_Сохранить1СЭДО(НовыйДокументЗаявление);
	КонецЕсли;
	
	СоздатьНовыйДокументЗаявление_СохранитьПользователей(НовыйДокументЗаявление);
	
	Если СохранятьЗаявление Тогда
		
		СоздатьНовыйДокументЗаявление_СохранитьДокументы(НовыйДокументЗаявление);
		СоздатьНовыйДокументЗаявление_СохранитьВыборКриптопровайдера();
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НовыйДокументЗаявление, "ДокументЗаявление");
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокументЗаявление_ВладелецЭП(НовыйДокументЗаявление)
	
	НовыйДокументЗаявление.ВладелецЭЦПТип					= ВладелецЭЦПТип;
	НовыйДокументЗаявление.ВладелецЭЦП						= ВладелецЭЦП;
	НовыйДокументЗаявление.ВладелецЭЦПФамилия				= СокрЛП(ВладелецЭЦПФамилия);
	НовыйДокументЗаявление.ВладелецЭЦПИмя					= СокрЛП(ВладелецЭЦПИмя);
	НовыйДокументЗаявление.ВладелецЭЦПОтчество				= СокрЛП(ВладелецЭЦПОтчество);
	НовыйДокументЗаявление.ВладелецЭЦПСНИЛС					= ВладелецЭЦПСНИЛС;
	НовыйДокументЗаявление.ВладелецЭЦПВидДокумента			= ВладелецЭЦПВидДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПНомерДокумента		= ВладелецЭЦПНомерДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПСерияДокумента		= ВладелецЭЦПСерияДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПДатаВыдачиДокумента	= ВладелецЭЦПДатаВыдачиДокумента;
	НовыйДокументЗаявление.ВладелецЭЦПКемВыданДокумент		= ВладелецЭЦПКемВыданДокумент;
	НовыйДокументЗаявление.ВладелецЭЦПДатаРождения			= ВладелецЭЦПДатаРождения;
	НовыйДокументЗаявление.ВладелецЭЦПМестоРождения			= ВладелецЭЦПМестоРождения;
	НовыйДокументЗаявление.ВладелецЭЦПКодПодразделения		= ВладелецЭЦПКодПодразделения;
	НовыйДокументЗаявление.ВладелецЭЦППол					= ВладелецЭЦППол;
	НовыйДокументЗаявление.ВладелецЭЦПГражданство			= ВладелецЭЦПГражданство;
	
	Если ЭтоЮридическоеЛицо Тогда
		НовыйДокументЗаявление.ВладелецЭЦПДолжность 	= ВладелецЭЦПДолжность;
		НовыйДокументЗаявление.ВладелецЭЦППодразделение = ВладелецЭЦППодразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыйДокументЗаявление_СохранитьПользователей(НовыйДокументЗаявление)
	
	НовыйДокументЗаявление.ПользователиУчетнойЗаписи.Очистить();
	
	Для каждого ПользовательИзСписка Из СписокПользователей Цикл
		
		Если ПользовательИзСписка.Пометка Тогда
			НоваяЗаписьОПользователе = НовыйДокументЗаявление.ПользователиУчетнойЗаписи.Добавить();
			НоваяЗаписьОПользователе.Пользователь = ПользовательИзСписка.Значение;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Процедура СоздатьНовыйДокументЗаявление_Сохранить1СЭДО(НовыйДокументЗаявление)
	
	НовыйДокументЗаявление.ПодключитьЭДО 			= Истина;
	НовыйДокументЗаявление.ОператорЭДО 				= ОператорЭДО;
	НовыйДокументЗаявление.КодНалоговогоОрганаЭДО 	= КодНалоговогоОрганаЭДО;
	
КонецПроцедуры
	
&НаСервере
Процедура СоздатьНовыйДокументЗаявление_СохранитьНаправления(НовыйДокументЗаявление)

	НовыйДокументЗаявление.Получатели.Очистить();
	
	Если СдаватьВФНС Тогда
		Для Каждого СтрокаНаправлений Из ПолучателиФНС Цикл
			
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя 	= СтрокаНаправлений.ТипПолучателя;
			НоваяСтрокаНаправления.КодПолучателя 	= СтрокаНаправлений.КодПолучателя;
			НоваяСтрокаНаправления.КПП 				= СтрокаНаправлений.КПП;
			
		КонецЦикла;
	КонецЕсли;
	
	Если СдаватьВПФР Тогда 
		
		НовыйДокументЗаявление.РегНомерПФР = РегНомерПФР;
		
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР");
		НоваяСтрокаНаправления.КодПолучателя = КодПФР;
		НоваяСтрокаНаправления.КПП = "";
	КонецЕсли;
	
	Если СдаватьВФСС Тогда 
		
		НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
		НоваяСтрокаНаправления.ТипПолучателя =  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС");
		НоваяСтрокаНаправления.КПП = "";
		
	КонецЕсли;	
		
	Если СдаватьВРосстат Тогда
		
		Для Каждого СтрокаНаправлений Из ПолучателиФСГС Цикл
			НоваяСтрокаНаправления = НовыйДокументЗаявление.Получатели.Добавить();
			НоваяСтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС");
			НоваяСтрокаНаправления.КодПолучателя = СтрокаНаправлений.КодПолучателя;
		КонецЦикла;

	КонецЕсли;
	
	НовыйДокументЗаявление.ПодатьЗаявкуНаСертификатДляФСРАР = ПодатьЗаявкуНаСертификатДляФСРАР;
	НовыйДокументЗаявление.КодРегионаФСРАР 					= КодРегионаФСРАР;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеРПН		= ПодатьЗаявкуНаПодключениеРПН;
	НовыйДокументЗаявление.ПодатьЗаявкуНаПодключениеФТС		= ПодатьЗаявкуНаПодключениеФТС;
	
КонецПроцедуры
	
&НаСервере
Процедура СоздатьНовыйДокументЗаявление_СохранитьДокументы(НовыйДокументЗаявление)
	
	НовыйДокументЗаявление.Записать();
	НовыйДокументЗаявление.ЭлектронныеДокументы.Очистить();
	УдалитьПрисоединенныеФайлы(НовыйДокументЗаявление);
	
	НомераФайлов = Новый Соответствие;
	
	Для Каждого ЭлементСписка Из ФайлыДокументов Цикл
		
		Документ = ЭлементСписка.Значение.Документ;
		
		// Не сохраняем документы, которые не видны.
		// Такая ситуация может возникнуть при смене способа подписания или при неудачной отправке заявления
		Если НЕ ВидыДокументов(ЭтотОбъект).Свойство(Документ) ИЛИ НЕ ВидыДокументов(ЭтотОбъект)[Документ].Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Автор", Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", НовыйДокументЗаявление.Ссылка);
		
		Файл = Новый Файл(ЭлементСписка.Значение.ИсходноеИмя);
		
		Представление 	 = ВидыДокументов(ЭтотОбъект)[Документ].Представление;
		
		ИмяБезРасширения = ИмяПрисоединенногоФайла(Документ, Представление, НомераФайлов);
		
		ПараметрыФайла.Вставить("ИмяБезРасширения", 			ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", 			СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	ТекущаяУниверсальнаяДата());
		ПараметрыФайла.Вставить("Автор", 						Пользователи.ТекущийПользователь());
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ЭлементСписка.Значение.Адрес);
		
		НоваяСтрока = НовыйДокументЗаявление.ЭлектронныеДокументы.Добавить();
		НоваяСтрока.Документ 	= ЭлементСписка.Значение.Документ;
		НоваяСтрока.Файл 		= ПрисоединенныйФайл;
		НоваяСтрока.Размер 		= ЭлементСписка.Значение.Размер;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НовыйДокументЗаявление.ЭлектронныеДокументы) Тогда
		НовыйДокументЗаявление.Записать();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьПрисоединенныеФайлы(НовыйДокументЗаявление)
	
	МассивУдаляемыхФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(НовыйДокументЗаявление.Ссылка, МассивУдаляемыхФайлов);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого ПрисоединенныйФайлСсылка Из МассивУдаляемыхФайлов Цикл
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Удалить()
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяПрисоединенногоФайла(Документ, Представление, НомераФайлов)

	Если НомераФайлов.Получить(Документ) = Неопределено Тогда
		НомераФайлов.Вставить(Документ, 1);
	Иначе
		НомераФайлов[Документ] = НомераФайлов[Документ] + 1;
	КонецЕсли;
	
	Если НомераФайлов[Документ] = 1 Тогда
		ИмяФайла = Представление;
	Иначе
		ИмяФайла = СтрШаблон("%1 - %2", Представление, Формат(НомераФайлов[Документ], "ЧВН=; ЧГ="));
	КонецЕсли;
	
	Возврат ИмяФайла;

КонецФункции

&НаКлиенте
Процедура НапечататьЗаявление()
	
	СохранитьЗаявление(Ложь);
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура;
	КонтекстЭДОКлиент.ЗаполнитьДанныеСпецоператораСвязи(СтруктураДанныхСпецоператорыСвязи);
	
	ПараметрСпецоператора = КонтекстЭДОКлиент.ПолучитьПараметрСпецоператораКлиент(
		Спецоператор,
		Новый Структура("ЗаявлениеПолучатель"),
		СтруктураДанныхСпецоператорыСвязи.Макет);
		
	ЗаявлениеПолучатель = ПараметрСпецоператора.ЗаявлениеПолучатель;
		
	ТабДок = КонтекстЭДОКлиент.ПодготовитьМакет(
			ДокументЗаявление,
			ЗаявлениеПолучатель,
			"ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьЗаявка",
			"ПечатьЗаявка");
			
	ЗаголовокТабДок = "Заявление на подключение";
	
	КонтекстЭДОКлиент.НапечататьДокумент(ТабДок, ЗаголовокТабДок);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСФайлом(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ВидДокумента      = Сред(Элемент.Имя, 7);
	СвойстваДокумента = ВидыДокументов(ЭтотОбъект)[ВидДокумента];
		
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "выберите" Тогда
		
		Если СвойстваДокумента.ОдинФайл Тогда
			ВыбратьОдинФайлДокумента(ВидДокумента);
		Иначе
			ДобавитьФайлыСПредпросмотром(ВидДокумента);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Файл" Тогда
		
		Если СвойстваДокумента.ОдинФайл Тогда
			ОткрытьФайлДанногоВида(ВидДокумента);
		Иначе
			ДобавитьФайлыСПредпросмотром(ВидДокумента);
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Отсканируйте" Тогда
		
		СканироватьФайл(ВидДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьФайл(ВидДокумента)
	
	Если СканированиеДоступно Тогда
		
		СохранитьЗаявление();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СканироватьФайл_Завершение", 
			ЭтотОбъект,
			ВидДокумента);
		
		РаботаСФайламиКлиент.ДобавитьФайл(
			ОписаниеОповещения,
			ДокументЗаявление.Ссылка,
			ЭтотОбъект,
			3,
			Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьФайл_Завершение(Результат, ВидДокумента) Экспорт
	
	Если Результат <> Неопределено И Результат.ФайлДобавлен Тогда
		ДобавитьОтсканированныеФайлы(Результат.ФайлСсылка, ВидДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтсканированныеФайлы(ПрисоединенныйФайл, ВидДокумента)
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор, Истина);
	
	НовоеИмя = ВидыДокументов(ЭтотОбъект)[ВидДокумента].Представление + "." + ДанныеФайла.Расширение;
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Адрес", 		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ОписаниеФайла.Вставить("ИсходноеИмя", 	НовоеИмя);
	ОписаниеФайла.Вставить("Имя", 			НовоеИмя);
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(ОписаниеФайла);
	
	ОписанияФайлов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ДополнитьОписанияРазмерамиФайлов(ОписанияФайлов);
	
	УдалитьТекущийВидДокументов(ЭтотОбъект, ВидДокумента);
	ДополнитьФайлыВидомДокумента(ОписанияФайлов, ВидДокумента, ЭтотОбъект);
	ИзменитьОформлениеДокумента(ЭтотОбъект, ВидДокумента);

КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьФайлДанногоВида(ВидДокумента)

	Файлы = Новый Массив;
	Для каждого ФайлДокумента Из ФайлыДокументов Цикл
	
		ФайлДокумента = ФайлДокумента.Значение;
		Если ФайлДокумента.Документ = ВидДокумента Тогда
			ОперацииСФайламиЭДКОКлиент.ОткрытьФайл(ФайлДокумента.Адрес, ФайлДокумента.ИсходноеИмя);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыСПредпросмотром(ВидДокумента)

	ПараметрыФункции = ПараметрыПроцедурыВыбораФайлов(ВидДокумента);
	
	Файлы = Новый Массив;
	Для каждого ФайлДокумента Из ФайлыДокументов Цикл
		
		ФайлДокумента = ФайлДокумента.Значение;
		Если ФайлДокумента.Документ = ВидДокумента Тогда
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Адрес", 		ФайлДокумента.Адрес);
			ПараметрыФайла.Вставить("ИсходноеИмя", 	ФайлДокумента.ИсходноеИмя);
			Файлы.Добавить(ПараметрыФайла);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФункции.Вставить("Файлы", Файлы);
	
	ПредставлениеРазмераФайла = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(МаксимальныйРазмерФайла);
	Размер = СтрШаблон("Не более %1", ПредставлениеРазмераФайла);
	
	Требования = Новый Структура;
	Требования.Вставить("Формат", 		СтрСоединить(СтрРазделить(ВРег(ДопустимыеТипыФайлов), ";"), ", "));
	Требования.Вставить("Разрешение", 	"150-400 dpi");
	Требования.Вставить("Цветность", 	"Цветное изображение, глубина цвета 16-24 бит");
	Требования.Вставить("Размер", 		Размер);
	
	ТребованияКФайлу = Новый Структура();
	ТребованияКФайлу.Вставить("Требования",     Требования);
	ТребованияКФайлу.Вставить("КлючТребований", "Заявление на подключение к 1С-Отчетности");
	
	ПараметрыФункции.Вставить("Требования", ТребованияКФайлу);
	
	Оповещение = Новый ОписаниеОповещения(
		"ДобавитьФайлыСПредпросмотромПослеВыполнения", 
		ЭтотОбъект, 
		ПараметрыФункции);
		
	Описание = ВидыДокументов(ЭтотОбъект)[ВидДокумента];
	
	ПараметрыФункции.Вставить("РежимТолькоПросмотр", ЗапретитьИзменение);
	ПараметрыФункции.Вставить("Документ", Описание.Представление);
	
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлыСПредпросмотром(
		Оповещение, 
		УникальныйИдентификатор, 
		СтрШаблон(НСтр("ru = 'Выберите файлы документа <%1> '"), Описание.Представление), 
		ПараметрыФункции);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ВыбратьОдинФайлДокумента(ВидДокумента)
	
	ДополнительныеПараметры = ПараметрыПроцедурыВыбораФайлов(ВидДокумента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьОдинФайлДокумента_ПослеПомещения", 
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	НачатьПомещениеФайла(ОписаниеОповещения,,, Истина, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОдинФайлДокумента_ПослеПомещения(Результат, Адрес, ВыбранноеИмяФайла, ВходящийКонтекст) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыДокумента = ОписаниеФайла(ВыбранноеИмяФайла, Адрес);
	ТекстОшибки = ОперацииСФайламиЭДКОСлужебныйКлиент.ТекстОшибкиДобавленияОдногоФайла(ФайлыДокумента, МаксимальныйРазмерФайла, ДопустимыеТипыФайлов);
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ВидДокумента = ВходящийКонтекст.ВидДокумента;
	
	УдалитьТекущийВидДокументов(ЭтотОбъект, ВидДокумента);
	ДополнитьФайлыВидомДокумента(ФайлыДокумента, ВидДокумента, ЭтотОбъект);
	ИзменитьОформлениеДокумента(ЭтотОбъект, ВидДокумента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПроцедурыВыбораФайлов(ВидДокумента = "")
	
	ДопустимыеТипыФайлов = "jpeg;jpg;png;pdf"; 
	МаксимальныйРазмерФайла = 10 * 1024 * 1024;
	
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ВидДокумента", 				ВидДокумента);
	ПараметрыФункции.Вставить("МаксимальныйРазмерФайла", 	МаксимальныйРазмерФайла);
	ПараметрыФункции.Вставить("ДопустимыеТипыФайлов",		ДопустимыеТипыФайлов);
	ПараметрыФункции.Вставить("ВозвращатьРазмер", 			Истина);
	ПараметрыФункции.Вставить("РежимТолькоПросмотр", 		Ложь);
	ПараметрыФункции.Вставить("ИспользоватьСтраницы", 		Ложь);
	
	Возврат ПараметрыФункции;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФайлыСПредпросмотромПослеВыполнения(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		
		УстановитьМодифицированность(ЭтотОбъект);
		
		ВидДокумента = ВходящийКонтекст.ВидДокумента; 
		
		УдалитьТекущийВидДокументов(ЭтотОбъект, ВидДокумента);
		ДополнитьФайлыВидомДокумента(Результат.Файлы, ВидДокумента, ЭтотОбъект);
		ИзменитьОформлениеДокумента(ЭтотОбъект, ВидДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьФайлыВидомДокумента(Файлы, Документ, Форма)
	
	Для Каждого Файл Из Файлы Цикл
		Файл.Вставить("Документ", Документ);
		Форма.ФайлыДокументов.Добавить(Файл);
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьТекущийВидДокументов(Форма, Документ)
	
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементСписка Из Форма.ФайлыДокументов Цикл
		Если ЭлементСписка.Значение.Документ = Документ Тогда
			ЭлементыДляУдаления.Добавить(ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
		Форма.ФайлыДокументов.Удалить(ЭлементДляУдаления);
	КонецЦикла;
			
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Функция ВидыДокументов(Форма)
	
	Возврат ДокументооборотСКОКлиентСервер.ВидыДокументовВЗаявлении(
		Форма.ЭтоЭлектронноеПодписание, 
		Форма.ЭтоРежимБесплатнойНулевойОтчетности ИЛИ Форма.ЭтоРежимОграниченнойФункциональности, 
		Форма.ВладелецЭЦПТип, 
		Форма.ЭтоЮридическоеЛицо, 
		Истина);

КонецФункции

&НаСервере
Процедура ИнициализироватьФайлы_Сервер()

	// Вызываем с сервера, чтобы не было заметного перестроения формы
	ИнициализироватьФайлы(ЭтотОбъект);
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьФайлы(Форма)
	
	Элементы = Форма.Элементы;
	
	// Очищаем файлы 
	Для каждого ТекущийВидДокумента Из ВидыДокументов(Форма) Цикл
		ВидДокумента = ТекущийВидДокумента.Ключ;
		УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	КонецЦикла;
	
	ИзменитьОформлениеДокументов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеДокументов(Форма, СкрытьДокументы = Ложь)
	
	Элементы = Форма.Элементы;

	Элементы.ГруппаСканов.Видимость = Ложь;
	Если СкрытьДокументы Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийВидДокумента Из ВидыДокументов(Форма) Цикл
		
		ВидДокумента = ТекущийВидДокумента.Ключ;
		Описание 	 = ТекущийВидДокумента.Значение;
		
		Элементы["Группа" + ВидДокумента].Видимость 	= Описание.Видимость;
		Элементы["Заголовок" + ВидДокумента].Заголовок 	= Описание.Представление + ":";
		
		ИзменитьОформлениеДокумента(Форма, ВидДокумента);
		ИзменитьОформлениеОтдельныхДокументов(Форма, ВидДокумента);
	
	КонецЦикла;
	
	Элементы.ГруппаСканов.Видимость = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеОтдельныхДокументов(Форма, ВидДокумента)
	
	Элементы = Форма.Элементы;
	
	Если ВидДокумента = "Паспорт" Тогда
		ПридвинутьПаспортВплотнуюКВладельцу(Форма);
	ИначеЕсли ВидДокумента = "Доверенность" Тогда
		Подсказка = ДокументооборотСКОКлиентСервер.ИзменитьОформлениеРекомендацииДоверенностиДляФНС(
			Форма.ВладелецЭЦПТип, 
			Форма.ЭтоЮридическоеЛицо, 
			Форма.ПолучателиФНС);
		Подсказка = СтрЗаменить(Подсказка, "?", "");
		Элементы.УказательДоверенность.Подсказка = Строка(Подсказка);
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ПридвинутьПаспортВплотнуюКВладельцу(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидимостьОтступов = 
		Форма.ЭтоРежимБесплатнойНулевойОтчетности
		ИЛИ Форма.ЭтоРежимОграниченнойФункциональности
		ИЛИ Форма.ЭтоЭлектронноеПодписание;

	// В этом случае есть только один паспорт, делаем его вплотную к реквизитам владельца ЭП
	Элементы.ГруппаЗаголовокДляДокументов.Видимость = ВидимостьОтступов;
	Элементы.ДекорацияПередСканами.Видимость  = ВидимостьОтступов;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеДокумента(Форма, ВидДокумента)
	
	Размер 		= 0;
	Количество  = 0;
	ИмяПервого  = "";
	
	Для каждого ФайлДокумента Из Форма.ФайлыДокументов Цикл
		
		ФайлДокумента = ФайлДокумента.Значение;
		Если ФайлДокумента.Документ = ВидДокумента Тогда
			Размер = Размер + ФайлДокумента.Размер;
			Количество = Количество + 1;
			ИмяПервого = ФайлДокумента.ИсходноеИмя;
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(Форма, ВидДокумента, Размер, Количество, ИмяПервого);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьИзменениеОрганизации(ИННОрганизации = "")
	
	УстановитьМодифицированность(ЭтотОбъект);
	
	ПредыдущееЗначениеОрганизации = Организация;
	
	ДанныеОрганизацииЗаполненыКопированием = Ложь;
	ОтключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияОбновитьДанныеРуководителя");
	ОтключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияОбновитьДанныеГлБухгалтера");
	
	// Очищает телефон и почту для паролей
	ОтменитьПроверкуТелефонаНажатие(Неопределено);
	ОтменитьПроверкуЭлектроннойПочтыНажатие(Неопределено);
	
	ОбработатьИзменениеОрганизации(ИННОрганизации);
	
	Элементы.ИНН.ОбновитьТекстРедактирования();
	
	ПриИзмененииТелефонаИлиПочтыДляПароля(Ложь);
	
	ОпределитьВозможностьБезбумажногоПодписания(); // Асинхронно
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявлениеНаИзменение()
	
	ОткрытьЗаявлениеНаИзменение = Истина;
	
	Изменение = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение");
	
	ДополнительныеПараметры = ДокументооборотСКОКлиентСервер.ПараметрыОткрытияМастера();
	ДополнительныеПараметры.Вставить("Организация", 	Организация);
	ДополнительныеПараметры.Вставить("ВидЗаявления", 	Изменение);
	
	ПрограммноеЗакрытие = Истина;
	
	// Закрываем первичное заявление и открываем вторичное в процедуре 
	// ОткрытьФормуЗаявления_Завершение
	Закрыть(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроСуществующееПодключение(Организация)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СпроситьПроСуществующееПодключение_Завершение", 
		ЭтотОбъект);
	
	ТекстВопроса = "Организация " +""""+ Организация +""""+ " уже подключена к 1С-Отчетности.
		|Продолжить заполнение заявления на новое подключение или изменить существующее подключение?";
	
	Если ЗначениеЗаполнено(ПредыдущееЗначениеОрганизации) Тогда
		
		ВопросПроПредыдущуюОрганизацию = НСтр("ru = 'Обратите внимание, сведения, указанные в заявлении по организации ""%1"", будут очищены'");
		ВопросПроПредыдущуюОрганизацию = СтрШаблон(ВопросПроПредыдущуюОрганизацию, Строка(ПредыдущееЗначениеОрганизации));
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + ВопросПроПредыдущуюОрганизацию;
		
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(2, НСтр("ru = 'Изменить существующее'"));
	Кнопки.Добавить(1, НСтр("ru = 'Новое подключение'"));
	Кнопки.Добавить(3, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,Кнопки[0].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроСуществующееПодключение_Завершение(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = 1 Тогда
		ОтработатьИзменениеОрганизации();
	ИначеЕсли Ответ = 2 Тогда
		ОткрытьЗаявлениеНаИзменение();
	ИначеЕсли Ответ = 3 Тогда
		Организация = ПредыдущееЗначениеОрганизации;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроСменуОрганизации(Организация)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СпроситьПроСменуОрганизации_Завершение", 
		ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Обратите внимание, сведения, указанные в заявлении по организации ""%1"", будут очищены'");
	ТекстВопроса = СтрШаблон(ТекстВопроса, Строка(ПредыдущееЗначениеОрганизации));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(1, НСтр("ru = 'Продолжить'"));
	Кнопки.Добавить(2, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,Кнопки[0].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпроситьПроСменуОрганизации_Завершение(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = 1 Тогда
		ОтработатьИзменениеОрганизации();
	Иначе
		Организация = ПредыдущееЗначениеОрганизации;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибкиВЗаполненииЗаявления()
	
	ОчиститьСообщения();
	
	МастерДалее = Истина;
	
	ПроверитьКПП(ЭтотОбъект, МастерДалее);
	ПроверитьКраткоеНаименование(ЭтотОбъект, МастерДалее);
	ПроверитьТариф(МастерДалее);
	ПроверитьНомерОсновнойПоставки1с(МастерДалее);
	
	Если Элементы.ГруппаЮрАдрес.Видимость Тогда
		ПроверитьЮрАдрес(МастерДалее);
	КонецЕсли;
	
	Если Элементы.ГруппаОГРН.Видимость Тогда
		ПроверитьОГРН(ЭтотОбъект, МастерДалее);
	КонецЕсли;
	
	ПроверитьНаправления(МастерДалее);
	ПроверитьПользователей(МастерДалее);
	ПроверитьХранениеКлючей(МастерДалее);
	Проверить1СЭДО(МастерДалее);
	
	// Владелец ЭП
	ПроверитьРеквизитыВладельцаЭП(МастерДалее);
	ПроверитьПаспортныеДанные(МастерДалее);
	ПроверитьТелефонВладельцаЭП(ЭтотОбъект, МастерДалее);
	ПроверитьЭлПочтуВладельцаЭП(ЭтотОбъект, МастерДалее);
	
	Если Элементы.ГруппаВладелецЭЦПДолжность.Видимость Тогда
		ПроверитьДолжностьВладельцаЭП(МастерДалее);
	КонецЕсли;
	
	ПроверитьСканыДокументов(МастерДалее);
	ПроверитьРасширенныеНастройки(МастерДалее);
	ПроверитьOIDЛицензииКриптоПро(МастерДалее);
	
	Возврат НЕ МастерДалее;
	
КонецФункции

&НаСервере
Процедура ПроверитьOIDЛицензииКриптоПро(МастерДалее)
	
	Если ВключатьЛицензиюКриптоПроВСертификат Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		OIDЛицензииКриптоПро = КонтекстЭДОСервер.ПолучитьOIDЛицензииКриптоПро();
		
		Если OIDЛицензииКриптоПро = "" Тогда
			
			МастерДалее = Ложь;
			ТекстОшибки = НСтр("ru = 'Возможность выдачи лицензий на КриптоПро CSP временно недоступна. 
                                |Повторите попытку позже или отправьте заявление на сертификат без включения лицензии на КриптоПро CSP в его состав.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Проверить1СЭДО(МастерДалее)
	
	Если ПодключитьЭДО Тогда
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		Если НЕ КонтекстЭДОСервер.ПроверитьПараметры1СЭДО(ЭтотОбъект, Истина) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Уточнить параметры подключения 1С-ЭДО'"), ,"ПодключитьЭДО");
			МастерДалее = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьПользователей(МастерДалее)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Если НЕ КонтекстЭДОСервер.ПользователиУказаныКорректно(ЭтотОбъект, Истина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите пользователей'"), ,"УказательПользователи");
		МастерДалее = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКраткоеНаименование(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Реквизит  = "ПроверкаКраткоеНаименование";
	РезультатПроверки.Поле 		= "КраткоеНаименование";
	
	Элементы    = Форма.Элементы;
	ТекстОшибки = "";
	
	Если Форма.ЭтоЮридическоеЛицо И Форма.ПоказыватьКраткоеНаименование Тогда

		Если НЕ ЗначениеЗаполнено(СокрЛП(Форма.КраткоеНаименование)) Тогда 
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните краткое наименование организации'");
			РезультатПроверки.Пустой	  = Истина;
			
		ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.КраткоеНаименование, 
			НСтр("ru = 'Краткое наименование организации'"), 
			"КраткоеНаименование",
			Истина,
			ТекстОшибки)Тогда
			
			РезультатПроверки.ТекстОшибки = ТекстОшибки;

		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьКПП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Реквизит  = "ПроверкаКПП";
	РезультатПроверки.Поле 		= "КПП";
	
	Элементы    = Форма.Элементы;
	ТекстОшибки = "";
	
	Если Форма.ЭтоЮридическоеЛицо И Форма.ПоказыватьКПП Тогда

		Если НЕ ЗначениеЗаполнено(СокрЛП(Форма.КПП)) Тогда 
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Укажите КПП организации'");
			РезультатПроверки.Пустой	  = Истина;
			
		ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.КПП, 
			НСтр("ru = 'КПП организации'"), 
			"КПП",
			Истина,
			ТекстОшибки)Тогда
			
			РезультатПроверки.ТекстОшибки = ТекстОшибки;

		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьКПП(Форма.КПП) Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'КПП организации должен состоять из 9 цифр'");
			РезультатПроверки.Пустой	  = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьЮрАдрес(МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Если ЭтоЮридическоеЛицо Тогда
		
		Возврат КонтекстЭДОСервер.ПроверитьАдресОрганизацииЗаявления(
			АдресЮридическийЗначение, 
			"УказательЮрАдреса", 
			НСтр("ru = 'Юридический адрес'"), 
			НСтр("ru = 'Юридического адреса'"), 
			МастерДалее,
			НЕ ВыводитьСообщения);
			
	Иначе
		// Для ИП адрес всегда будет в основной форме, поэтому всегда проверяем
		Возврат КонтекстЭДОСервер.ПроверитьАдресОрганизацииЗаявления(
			АдресЮридическийЗначение, 
			"УказательЮрАдреса", 
			НСтр("ru = 'Адрес регистрации'"), 
			НСтр("ru = 'адреса регистрации'"), 
			МастерДалее,
			НЕ ВыводитьСообщения);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьДолжностьВладельцаЭП(МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПроверитьДолжностьВУпрощенномЗаявлении(ЭтотОбъект, МастерДалее, ВыводитьСообщения);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьОГРН(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ОГРН";
	
	Элементы = Форма.Элементы;
	ОГРН     = Форма.ОГРН;
	
	Если Форма.ЭтоЮридическоеЛицо Тогда
		// ОГРН
		Если ПустаяСтрока(ОГРН) Тогда 
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните ОГРН'");
			РезультатПроверки.Пустой	  = Истина;
			
		ИначеЕсли НЕ (ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,13)) Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ОГРН должен состоять из 13 цифр'");

		КонецЕсли;
	Иначе
		// ОГРНИП
		Если ПустаяСтрока(ОГРН) И НЕ Форма.ЭтоНотариусАдвокатИлиГКФХ Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните ОГРНИП'");
			РезультатПроверки.Пустой	  = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ОГРН) И НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ОГРН,15, Истина) Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ОГРНИП должен состоять из 15 цифр'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьРасширенныеНастройки(МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	ДанныеКорректны = Истина;
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.РасширенныеНастройкиУказаныКорректно(ЭтотОбъект, ДанныеКорректны, Ложь);
	
	Если НЕ ДанныеКорректны Тогда
		
		Если ВыводитьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проверьте корректность заполнения расширенных настроек'"), ,"УказательРасширенныхНастроек");
		КонецЕсли;
		МастерДалее = Ложь;
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПроверитьПаспортныеДанные(МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	ДанныеУказаныКорректно = Истина;
	КонтекстЭДОСервер.ПаспортныеДанныеУказаныКорректно(ЭтотОбъект, ДанныеУказаныКорректно, Ложь);
	
	Если НЕ ДанныеУказаныКорректно Тогда
		
		МастерДалее = Ложь;
		
		Если ВыводитьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Проверьте корректность заполнения удостоверения личности'"), 
				,
				"УказательПаспортныхДанных");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСканыДокументов(МастерДалее, ТихийРежим = Ложь)
	
	Для Каждого ТекущийВидДокумента Из ВидыДокументов(ЭтотОбъект) Цикл
		
		Описание = ТекущийВидДокумента.Значение;
		
		// Для ИП подтверждения полномочий не существует
		Если НЕ Описание.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		КлючДокумента = ТекущийВидДокумента.Ключ;
		ПроверитьСканДокумента(МастерДалее, КлючДокумента, Описание, ТихийРежим);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСканДокумента(МастерДалее, КлючДокумента, Описание, ТихийРежим)
	
	ЕстьФайлы = Ложь;
	Для Каждого ЭлементСписка Из ФайлыДокументов Цикл
		Если ЭлементСписка.Значение.Документ = КлючДокумента Тогда
			ЕстьФайлы = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьФайлы Тогда
		
		Если НЕ ТихийРежим Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Добавьте сканы для документа ""%1""'"), Описание.Представление);
			Поле 		= "Указатель" + КлючДокумента;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,Поле);
		КонецЕсли;
			
		МастерДалее = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРеквизитыВладельцаЭП(МастерДалее)
	
	ПроверитьФИОВладельцаЭП(ЭтотОбъект, МастерДалее, Истина);
	ПроверитьВладелецЭЦПСНИЛС(ЭтотОбъект, МастерДалее, Истина);
	
КОнецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьФИОВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)

	Элементы    = Форма.Элементы;
	ТекстОшибки = "";
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "УказательВладелецЭП";
	
	
	// Фамилия
	Если ПустаяСтрока(Форма.ВладелецЭЦПФамилия) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните фамилию владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПФамилия, 
			НСтр("ru = 'Фамилия владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	// Имя
	Если ПустаяСтрока(Форма.ВладелецЭЦПИмя) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните имя владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПИмя, 
			НСтр("ru = 'Имя владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	// Отчетство
	Если ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ВладелецЭЦПОтчество, 
			НСтр("ru = 'Отчество владельца эл. подписи'"), 
			"УказательВладелецЭП",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьВладелецЭЦПСНИЛС(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	Элементы = Форма.Элементы;
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ВладелецЭЦПСНИЛС";
	
	// СНИЛС
	СНИЛСБезРазделителей = СНИЛСБезРазделителей(Форма.ВладелецЭЦПСНИЛС);
	
	Если ПустаяСтрока(СНИЛСБезРазделителей) Тогда
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните СНИЛС владельца эл. подписи'");
		РезультатПроверки.Пустой	  = Истина;
	Иначе
		
		Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Форма.ВладелецЭЦПСНИЛС) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске ХХХ-ХХХ-ХХХ ХХ, где X - любая цифра'");
		ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Форма.ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'");
		КонецЕсли;
	КонецЕсли;

	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СНИЛСБезРазделителей(СНИЛС)

	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛС, "-","");
	СНИЛСТолькоЦифры = СтрЗаменить(СНИЛСТолькоЦифры, " ","");
	
	Возврат СНИЛСТолькоЦифры;

КонецФункции 
	
&НаСервере
Функция ПроверитьНаправления(МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	УказаныКорректно = Истина;
	КонтекстЭДОСервер.НаправленияУказаныКорректно(ЭтотОбъект, УказаныКорректно, Ложь);
	
	Если УказаныКорректно Тогда
		Возврат Истина;
	Иначе
		
		МастерДалее = Ложь;
		
		Если ВыводитьСообщения Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Уточните направления сдачи отчетности'"), ,"УказательНаправлений");
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

&НаСервере
Процедура СоздатьНовыйДокументЗаявление_СохранитьВыборКриптопровайдера()
	
	Если РежимРаботыСКлючами = 1 Тогда
		// Для ЭП в облаке сохранение выбора криптопровайдера не нужно.
		Возврат;
	КонецЕсли;
	
	Криптопровайдер = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(ТипКриптопровайдера);
	
	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Установить(Криптопровайдер.Тип);
	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.Установить(Криптопровайдер.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТариф(МастерДалее)
	
	// Для не нулевки тариф не запрашиваем
	ПроверятьТариф = ЭтоРежимБесплатнойНулевойОтчетности;
	
	Если ПроверятьТариф И НЕ ЗначениеЗаполнено(Тариф)Тогда
		МастерДалее = Ложь;
		ТекстСообщения = НСтр("ru = 'Выберите тариф'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"УказательНаВыборТарифа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНомерОсновнойПоставки1с(МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "НомерОсновнойПоставки1с";
	
	ТекстОшибки = "";
	
	Если ПустаяСтрока(НомерОсновнойПоставки1с) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните регистрационный номер программы'");
		РезультатПроверки.Пустой	  = Истина;
			
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			НомерОсновнойПоставки1с, 
			НСтр("ru = 'Регистрационный номер программы'"), 
			"НомерОсновнойПоставки1с", 
			Истина, 
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьТелефонВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ТелефонДляПаролей";
	Элементы = Форма.Элементы;
	
	// Телефон
	ТелефонДляПаролейБезРазделителей = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ТелефонМобильныйБезРазделителей(Форма.ТелефонДляПаролей);
	
	Если ПустаяСтрока(ТелефонДляПаролейБезРазделителей) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Заполните номер мобильного телефона'");
		РезультатПроверки.Пустой	  = Истина;
			
	ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьЦифровойКодЗаданнойДлины(ТелефонДляПаролейБезРазделителей, 11, Истина) Тогда 
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Мобильный телефон должен иметь формат +7 XXX XXX-XX-XX'");
		
	КонецЕсли;
	
	Если РезультатПроверки.ТекстОшибки = "" Тогда
	
		ЭтоЭПВОблаке = Форма.РежимРаботыСКлючами = 1;
		Если ЭтоЭПВОблаке Тогда
			
			Если НЕ Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
				
				РезультатПроверки.ТекстОшибки = НСтр("ru='Заполните номер мобильного телефона'");
				РезультатПроверки.Пустой	  = Истина;
				
			Иначе
				Если Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено Тогда
					Если Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка Тогда
						
						РезультатПроверки.ТекстОшибки = НСтр("ru='Введите код из SMS'");
						РезультатПроверки.Пустой	  = Истина;
						РезультатПроверки.Поле        = "КодПодтверждения";
						
					Иначе
						РезультатПроверки.ТекстОшибки = НСтр("ru='Выполните проверку номера телефона'");
						РезультатПроверки.Пустой	  = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьСообщения Тогда
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьЭлПочтуВладельцаЭП(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	ТекстОшибки = "";
	Элементы 	= Форма.Элементы;
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле = "ЭлектроннаяПочтаДляПаролей";
	
	// электронная почта
	Форма.ЭлектроннаяПочтаДляПаролей = СокрЛП(Форма.ЭлектроннаяПочтаДляПаролей);
	
	Если ПустаяСтрока(Форма.ЭлектроннаяПочтаДляПаролей) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru='Заполните адрес электронной почты'");
		РезультатПроверки.Пустой	  = Истина;
		
	ИначеЕсли ДокументооборотСКОКлиентСервер.НайденыЗапрещенныеСимволы(
			Форма.ЭлектроннаяПочтаДляПаролей, 
			НСтр("ru = 'Электронная почта '"),
			"ЭлектроннаяПочтаДляПаролей",
			Истина,
			ТекстОшибки) Тогда
			
		РезультатПроверки.ТекстОшибки = ТекстОшибки;
		
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Форма.ЭлектроннаяПочтаДляПаролей) Тогда
			
		Если НЕ СтрНайти(Форма.ЭлектроннаяПочтаДляПаролей, "@") Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Некорректно указана электронная почта. Отсутствует символ @'");
		Иначе 
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Электронная почта содержит некорректные сочетания символов'");
		КонецЕсли;
			
	КонецЕсли;
	
	Если РезультатПроверки.ТекстОшибки = "" Тогда
		
		ЭтоЭПВОблаке = Форма.РежимРаботыСКлючами = 1;
		Если ЭтоЭПВОблаке Тогда
			
			Если НЕ Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено Тогда
				
				РезультатПроверки.ТекстОшибки = НСтр("ru='Заполните адрес электронной почты'");
				РезультатПроверки.Пустой	  = Истина;
				
			Иначе
				Если Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено Тогда
					Если Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка Тогда
						
						РезультатПроверки.ТекстОшибки = НСтр("ru='Введите код из письма'");
						РезультатПроверки.Пустой	  = Истина;
						РезультатПроверки.Поле 		  = "КодПодтверждения";
										
					Иначе
						
						РезультатПроверки.ТекстОшибки = НСтр("ru='Выполните проверку электронной почты'");
						РезультатПроверки.Пустой	  = Истина;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыводитьСообщения Тогда
		ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	КонецЕсли;
		
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСотрудника()
	
	ОчиститьДанныеСотрудника();
	
	ВидСотрудникаНеВыбран 		= ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка");
	ДругойСотрудникНеЗаполнен 	= ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И НЕ ЗначениеЗаполнено(ДругойСотрудник);
	
	Если ВидСотрудникаНеВыбран 
		ИЛИ ДругойСотрудникНеЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		ВладелецЭЦП = Руководитель;
	КонецЕсли;	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		ВладелецЭЦП = ГлБухгалтер;
	КонецЕсли;
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И ЗначениеЗаполнено(ДругойСотрудник)  Тогда
		ВладелецЭЦП = ДругойСотрудник;
	КонецЕсли;

	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип,
		ДанныеОрганизации,
		ВладелецЭЦП);
		
	ВладелецЭЦПИмя       = ДанныеСотрудника.ФИО.Имя;
	ВладелецЭЦПФамилия   = ДанныеСотрудника.ФИО.Фамилия;
	ВладелецЭЦПОтчество  = ДанныеСотрудника.ФИО.Отчество;
	ВладелецЭЦПДолжность = ДанныеСотрудника.Должность;
	ВладелецЭЦПСНИЛС     = ДанныеСотрудника.СНИЛС;

	ВладелецЭЦПВидДокумента = ДанныеСотрудника.ВидДокумента;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ВладелецЭЦПВидДокумента = КонтекстЭДОСервер.СкорректироватьВидУдостоверения(ВладелецЭЦПВидДокумента);
	
	Если ЗначениеЗаполнено(ВладелецЭЦПВидДокумента) Тогда
		ВладелецЭЦПСерияДокумента      = ДанныеСотрудника.Серия;
		ВладелецЭЦПНомерДокумента      = ДанныеСотрудника.Номер;
		ВладелецЭЦПДатаВыдачиДокумента = ДанныеСотрудника.ДатаВыдачи;
		ВладелецЭЦПКемВыданДокумент    = ДанныеСотрудника.КемВыдан;
		ВладелецЭЦПДатаРождения        = ДанныеСотрудника.ДатаРождения;
		ВладелецЭЦПМестоРождения       = ДанныеСотрудника.МестоРождения;
		ВладелецЭЦПКодПодразделения    = ДанныеСотрудника.КодПодразделения;
		ВладелецЭЦППол                 = ДанныеСотрудника.Пол;
		ВладелецЭЦПГражданство         = ДанныеСотрудника.Гражданство;
	КонецЕсли;
	
	// Гражданство заполняем только для Российского паспорта
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(ВладелецЭЦПВидДокумента)
		И НЕ ЗначениеЗаполнено(ВладелецЭЦПГражданство) Тогда
		ВладелецЭЦПГражданство = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	ПередставлениеТелефона = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ДанныеСотрудника.ТелефонРабочий); 
	Если ПередставлениеТелефона = "" Тогда
		ТелефонДляПаролей = ДанныеСотрудника.ТелефонРабочий;
	Иначе
		ТелефонДляПаролей = ПередставлениеТелефона;
	КонецЕсли;
	
	// Заполняем из 1С:Контрагента
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель")
		ИЛИ ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		
		Если ВладелецЭЦПФамилия = "" Тогда
			ВладелецЭЦПФамилия = РуководительФамилия;
		КонецЕсли;
		
		Если ВладелецЭЦПИмя = "" Тогда
			ВладелецЭЦПИмя = РуководительИмя;
		КонецЕсли;
		
		Если ВладелецЭЦПОтчество = "" Тогда
			ВладелецЭЦПОтчество = РуководительОтчество;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦПВидДокумента) Тогда
		ВладелецЭЦПВидДокумента = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(
			"Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВладельцаЭЦП()
	
	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		
		ОткрытьФормуРуководителя();
		
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		
		ОткрытьФормуГлБухгалтера();
		
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораВладельцаЭЦПЗавершение", 
			ЭтотОбъект);
			
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ПолучитьИсполнителя(
			Организация, 
			ДругойСотрудник, 
			ОписаниеОповещения);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВладельцаЭЦПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		ДругойСотрудник = Результат;
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
		УстановитьНовогоВладельцаЭЦП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРуководителя()
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуРуководителя(Организация);
	ПодключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияОбновитьДанныеРуководителя",1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуГлБухгалтера()
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентПереопределяемый.ОткрытьФормуГлБухгалтера(Организация);
	ПодключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияОбновитьДанныеГлБухгалтера",1);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОжиданияОбновитьДанныеРуководителя()
	
	Результат = Неопределено;
	Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
		 Результат = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		Руководитель = Результат;
		УстановитьНовогоВладельцаЭЦП();
		ОтключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияОбновитьДанныеРуководителя");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОжиданияОбновитьДанныеГлБухгалтера()
	
	Результат = Неопределено;
	Если НЕ ЗначениеЗаполнено(ГлБухгалтер) Тогда 
		Результат = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда 
		ГлБухгалтер = Результат;
		УстановитьНовогоВладельцаЭЦП();
		ОтключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияОбновитьДанныеГлБухгалтера");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовогоВладельцаЭЦП()
	
	УстановитьНовогоВладельцаЭЦПСервер();
	Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОчиститьТолькоФайлыВладельца", Истина);
	
	ОпределитьВозможностьБезбумажногоПодписания(,,ДополнительныеПараметры); // Асинхронно
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовогоВладельцаЭЦП_ОчисткаФайлов_Сервер()
	
	// Работа с файлами
	ОчиститьФайл(ЭтотОбъект, "Паспорт");
	ОчиститьФайл(ЭтотОбъект, "СНИЛС");
	ОчиститьФайл(ЭтотОбъект, "ПодтверждениеПолномочий");
	ОчиститьФайл(ЭтотОбъект, "Заявление");
	ИзменитьОформлениеДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовогоВладельцаЭЦПСервер()
	
	ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	
	ЗаполнитьДанныеСотрудника();
	
	ИзменитьОформлениеВладельцаЭП();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеВладельцаЭП()
	
	// Видимость надписи
	ПоказатьКакНадпись = ФИОВладельцаИз1СКонтрагента 
		И ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель")
		И НЕ ЗначениеЗаполнено(ВладелецЭЦП);
		
	Элементы.НадписьВладелецЭЦП.Видимость = ПоказатьКакНадпись;
	Если ПоказатьКакНадпись Тогда
		Элементы.НадписьВладелецЭЦП.Заголовок = ВладелецЭЦПФамилия + " " + ВладелецЭЦПИмя + " " + ВладелецЭЦПОтчество;
	КонецЕсли;
	
	// Видимость полей ввода ФИО
	ПоказатьКакПоляФИО = НЕ ПоказатьКакНадпись И НЕ ЗначениеЗаполнено(ВладелецЭЦП) 
		И НЕ ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	Элементы.ВладелецЭЦПФИО.Видимость = ПоказатьКакПоляФИО;
	
	// Видимость гиперссылка
	ПоказатьКакГиперссылку = НЕ ПоказатьКакПоляФИО И НЕ ПоказатьКакНадпись;
	Элементы.ДекорацияВладелецЭЦП.Видимость = ПоказатьКакГиперссылку;
	Если ПоказатьКакГиперссылку Тогда
		Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
			Элементы.ДекорацияВладелецЭЦП.Заголовок  = Строка(ВладелецЭЦП);
			Элементы.ДекорацияВладелецЭЦП.ЦветТекста = Новый Цвет;
		ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
			Элементы.ДекорацияВладелецЭЦП.Заголовок  = НСтр("ru = 'Выбрать'");
			Элементы.ДекорацияВладелецЭЦП.ЦветТекста = КрасныйЦвет;
		Иначе
			// Будут поля для ввода ФИО
		КонецЕсли;
	КонецЕсли;
	
	// Руководитель или Предприниматель
	Элементы.ГруппаВыбораВидаВладельцаЭЦП.Видимость = ЭтоЮридическоеЛицо;
	
	// Оформление выпадающих меню
	Элементы.ВыбратьДиректора.Пометка 		= Ложь;
	Элементы.ВыбратьГлБухгалтера.Пометка 	= Ложь;
	Элементы.ВыбратьСотрудника.Пометка 		= Ложь;

	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда
		
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьДиректора.Заголовок;
		Элементы.ВыбратьДиректора.Пометка = Истина;
		
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьГлБухгалтера.Заголовок;
		Элементы.ВыбратьГлБухгалтера.Пометка = Истина;
		
	ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
		
		Элементы.ВидВладельцаЭЦП.Заголовок = Элементы.ВыбратьСотрудника.Заголовок;
		Элементы.ВыбратьСотрудника.Пометка = Истина;
		
	КонецЕсли;
	
	// Для бухгалтера и руководителя очищать нельзя, потому что 
	// 1. при этом они не очистятся в соответствующих регистрах
	// 2. их нельзя будет выбрать в форме мастера
	Элементы.ОчиститьВладельца.Видимость = 
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник")
		И ЗначениеЗаполнено(ДругойСотрудник)
		И НЕ ЗапретитьИзменение;
		
	Если ЗапретитьИзменение Тогда
		Элементы.ГруппаВыбораВидаВладельцаЭЦП.Доступность 	= Ложь;
		Элементы.ВладелецЭЦПФамилия.ТолькоПросмотр 			= Истина;
		Элементы.ВладелецЭЦПИмя.ТолькоПросмотр 				= Истина;
		Элементы.ВладелецЭЦПОтчество.ТолькоПросмотр 		= Истина;
		Элементы.ВладелецЭЦПСНИЛС.ТолькоПросмотр 			= Истина;
	КонецЕсли;
	
	ИзменитьОформлениеВладельцаЭЦПДолжность(ЭтотОбъект);
	ИзменитьОформлениеПаспортныхДанных();
	
	// Проверка СНИЛС
	РезультатПроверки = ПроверитьВладелецЭЦПСНИЛС(ЭтотОбъект,,Ложь);
	Элементы.ПроверкаВладелецЭЦПСНИЛС.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
	
	// Проверка ФИО
	РезультатПроверки = ПроверитьФИОВладельцаЭП(ЭтотОбъект,,Ложь);
	Элементы.ПроверкаУказательВладелецЭП.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
	
	// Проверка должности
	РезультатПроверки = ПроверитьДолжностьВладельцаЭП(,Ложь);
	Элементы.ПроверкаВладелецЭЦПДолжность.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПодключения_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Модифицированность Тогда
		УстановитьМодифицированность(ЭтотОбъект);
	Конецесли;
	
	ОператорЭДО = Результат.ОператорЭДО;
	КодНалоговогоОрганаЭДО = Результат.КодНалоговогоОрганаЭДО;
	
	ИзменитьОформление1СЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформление1СЭДО()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	
	Если НЕ ПодключитьЭДО ИЛИ ЗапретитьИзменение И ПодключитьЭДО Тогда
		
		Элементы.ОткрытьПараметрыПодключения.Заголовок   = НСтр("ru = 'Настройки'");
		Элементы.ОткрытьПараметрыПодключения.ЦветТекста  = СерыйЦвет;
		Элементы.ОткрытьПараметрыПодключения.Доступность = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ОператорЭДО) И ЗначениеЗаполнено(КодНалоговогоОрганаЭДО) Тогда
	
		Элементы.ОткрытьПараметрыПодключения.Заголовок   = НСтр("ru = 'Настройки'");
		Элементы.ОткрытьПараметрыПодключения.ЦветТекста  = Новый Цвет();
		Элементы.ОткрытьПараметрыПодключения.Доступность = Истина;
		
	ИначеЕсли НЕ КонтекстЭДОСервер.ПроверитьПараметры1СЭДО(ЭтотОбъект, Истина) Тогда
		
		Элементы.ОткрытьПараметрыПодключения.Заголовок   = НСтр("ru = 'Уточнить настройки'");
		Элементы.ОткрытьПараметрыПодключения.ЦветТекста  = КрасныйЦвет;
		Элементы.ОткрытьПараметрыПодключения.Доступность = Истина;
		
	Иначе
		
		Элементы.ОткрытьПараметрыПодключения.Заголовок   = НСтр("ru = 'Уточнить настройки'");
		Элементы.ОткрытьПараметрыПодключения.ЦветТекста  = КрасныйЦвет;
		Элементы.ОткрытьПараметрыПодключения.Доступность = Истина;
		
	КонецЕсли;
	
	Отображать1СЭДО = ОтображатьПодключениеЭДО И РежимРаботыСКлючами = 2 ИЛИ ЗапретитьИзменение И ПодключитьЭДО;
	Недоступен1СЭДО = ОтображатьПодключениеЭДО И РежимРаботыСКлючами = 1 И ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	
	Элементы.Недоступно1СЭДО.Видимость 	= Недоступен1СЭДО;
	Элементы.ПодключитьЭДО.Видимость 	= Отображать1СЭДО;
	Элементы.ОткрытьПараметрыПодключения.Видимость = Отображать1СЭДО;
	
	Элементы.Заголовок1СЭДО.Видимость = Элементы.Недоступно1СЭДО.Видимость ИЛИ Элементы.ПодключитьЭДО.Видимость;
	
	Если ЗапретитьИзменение Тогда
		Элементы.ПодключитьЭДО.ТолькоПросмотр = Истина;
		Элементы.Недоступно1СЭДО.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыЭДО()
	
	СтруктураПараметров = Новый Структура("ЕстьПодключениеЭДО, МассивОператоровЭДО, СсылкаОписаниеСервиса");
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗаполнитьПараметрыСервисаЭлектронныхДокументовДляФормыПодключенияК1СООтчетности(Организация, СтруктураПараметров);
	
	//заполнение вспомогательных элементов: списка выбора операторов ЭДО, ссылки на описание сервиса
	Если ЗначениеЗаполнено(СтруктураПараметров.МассивОператоровЭДО) Тогда
		
		ОператорыЭДО.ЗагрузитьЗначения(СтруктураПараметров.МассивОператоровЭДО);
		
		Если СтруктураПараметров.МассивОператоровЭДО.Количество() = 1 Тогда
			ОператорЭДО = СтруктураПараметров.МассивОператоровЭДО[0]; 
		КонецЕсли;
		
		Если СтруктураПараметров.ЕстьПодключениеЭДО = Ложь Тогда
			// Организация не подключена к ЭДО
			ОтображатьПодключениеЭДО 	= Истина;
			ПодключитьЭДО 				= РежимРаботыСКлючами = 2;
			
			Если НЕ ЗначениеЗаполнено(КодНалоговогоОрганаЭДО) Тогда
				КодНалоговогоОрганаЭДО = СокрЛП(РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
			КонецЕсли;
		Иначе
			ОтображатьПодключениеЭДО 	= Ложь;
			ПодключитьЭДО 				= Ложь;
			ОператорЭДО 				= "";
			КодНалоговогоОрганаЭДО 		= "";
		КонецЕсли;
	Иначе
		// сервис не работает
		ОтображатьПодключениеЭДО 	= Ложь;
		ПодключитьЭДО 				= Ложь;
		ОператорЭДО 				= "";
		КодНалоговогоОрганаЭДО 		= "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СсылкаОписаниеСервиса) Тогда
		СсылкаОписаниеСервисаЭДО = СтруктураПараметров.СсылкаОписаниеСервиса;	
	КонецЕсли;
	
	ИзменитьОформление1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизацииИСотрудника(НеобходимоОбновитьСертификат)
	
	ДанныеОрганизацииПредыдущие = ДанныеОрганизации;
	ДанныеОрганизацииИОтветственныхЛицПредыдущие  = ДанныеОрганизацииИОтветственныхЛиц;
	ДанныеСотрудникаПредыдущие 	= ДанныеСотрудника;

	//получаем новые данные по организации
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	ДополнительныеПараметры.Вставить("ПриОткрытии", Ложь);
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(ДополнительныеПараметры);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(ДополнительныеПараметры);
	
	Если ТипЗнч(ДанныеОрганизацииИОтветственныхЛиц) = Тип("Структура") 
		И ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации 	= ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("Организация", Организация);
	
	ОбновитьРеквизитыОрганизации(ДанныеОрганизацииПредыдущие, ДанныеОрганизацииИОтветственныхЛицПредыдущие, НеобходимоОбновитьСертификат);
	ОбновитьРеквизитыСотрудника(ДанныеСотрудникаПредыдущие, НеобходимоОбновитьСертификат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыОрганизации(
		ДанныеОрганизацииПредыдущие, 
		ДанныеОрганизацииИОтветственныхЛицПредыдущие, 
		НеобходимоОбновитьСертификат)

	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	ЭтоЮридическоеЛицо	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоЮрЛицо(Организация);
	
	Если ДанныеОрганизацииПредыдущие = Неопределено ИЛИ ДанныеОрганизацииИОтветственныхЛицПредыдущие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"КраткоеНаименование",
		КраткоеНаименование,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ИзменилсяИНН = ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ИННЮЛ",
		ИНН,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	Если ЭтоЮридическоеЛицо Тогда
		ПопытатьсяОбновитьРеквизит(
			ДанныеОрганизацииПредыдущие,
			"КППЮЛ",
			КПП,
			ДанныеОрганизации,
			ДанныеОрганизацииЗаполненыКопированием);
	Иначе
		КПП = "";	
	КонецЕсли;	
	
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ОГРН",
		ОГРН,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"РегНомПФР",
		РегНомерПФР,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
				
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ТелОрганизации",
		ТелефонОсновной,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресЮридическийЗначение",
		АдресЮридическийЗначение,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресЮридическийПредставление",
		АдресЮридическийПредставление,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресФактическийЗначение",
		АдресФактическийЗначение,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииИОтветственныхЛицПредыдущие,
		"АдресФактическийПредставление",
		АдресФактическийПредставление,
		ДанныеОрганизацииИОтветственныхЛиц,
		ДанныеОрганизацииЗаполненыКопированием);
		
	Если ПопытатьсяОбновитьРеквизит(
		ДанныеОрганизацииПредыдущие,
		"ЭлектроннаяПочта",
		ЭлектроннаяПочта,
		ДанныеОрганизации,
		ДанныеОрганизацииЗаполненыКопированием) Тогда
		
		ЭлектроннаяПочтаДляПаролей  = ДанныеОрганизации.ЭлектроннаяПочта;
		ЭлектроннаяПочта 			= ДанныеОрганизации.ЭлектроннаяПочта;
				
		ПриИзмененииТелефонаИлиПочтыДляПароля(Ложь);
		
	КонецЕсли;
		
	Если ДанныеОрганизацииИОтветственныхЛицПредыдущие.Свойство("АдресЮридическийЗначение")
		И ДанныеОрганизацииИОтветственныхЛиц.Свойство("АдресЮридическийЗначение") Тогда
		
		КодРегионаФСРАРПредыдущиее 	= КодРегионаПоАдресу(ДанныеОрганизацииИОтветственныхЛицПредыдущие.АдресЮридическийЗначение);
		КодРегионаФСРАРНовое 		= КодРегионаПоАдресу(ДанныеОрганизацииИОтветственныхЛиц.АдресЮридическийЗначение);
		
		ПопытатьсяОбновитьРеквизит(
			КодРегионаФСРАРПредыдущиее,
			,
			КодРегионаФСРАР,
			КодРегионаФСРАРНовое,
			ДанныеОрганизацииЗаполненыКопированием);
		
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		Если ДанныеОрганизацииПредыдущие.Свойство("ПризнакОбособленногоПодразделения") Тогда
			
			ПопытатьсяОбновитьРеквизит(
				ДанныеОрганизацииПредыдущие, 
				"ПризнакОбособленногоПодразделения", 	
				ПризнакОбособленногоПодразделения,
				ДанныеОрганизации, 
				ДанныеОрганизацииЗаполненыКопированием);
				
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем значения кодов контролирующих органов по умолчанию
	ИнициализироватьНаправления();
	
	НовыйКодПФР = КодПФР();
	Если НовыйКодПФР <> КодПФР Тогда
		КодПФР = НовыйКодПФР;
	КонецЕсли;
	
	Если НЕ ИННОрганизацииЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьЗаголовокФормы();
	УстановитьМодифицированность(ЭтотОбъект);
	ИзменитьОформлениеЮрАдреса();
	
	Если ИзменилсяИНН Тогда
		НеобходимоОбновитьСертификат = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПопытатьсяОбновитьРеквизит(
		СтарыеДанные,
		ИмяРеквизита,
		ТекущееЗначение,
		НовыеДанные,
		ДанныеЗаполненыКопированием = Ложь)
		
	ЗначениеОбновлено = Ложь;
	
	СтароеЗначение = Неопределено;
	НовоеЗначение = Неопределено;
	
	// проверяем старые данные
	Если ТипЗнч(СтарыеДанные) = Тип("Структура") Тогда
		НайденоПолеВСтарыхДанных = СтарыеДанные.Свойство(ИмяРеквизита, СтароеЗначение);
	Иначе
		НайденоПолеВСтарыхДанных = Истина;
		СтароеЗначение = СтарыеДанные;
	КонецЕсли;
	
	// проверяем новые данные
	Если ТипЗнч(НовыеДанные) = Тип("Структура") Тогда
		НайденоПолеВНовыхДанных = НовыеДанные.Свойство(ИмяРеквизита, НовоеЗначение);
	Иначе
		НайденоПолеВНовыхДанных = Истина;
		НовоеЗначение = НовыеДанные;
	КонецЕсли;
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных И ЗначениеЗаполнено(НовоеЗначение) Тогда
		Если СтароеЗначение <> НовоеЗначение ИЛИ ТекущееЗначение <> НовоеЗначение И ДанныеЗаполненыКопированием Тогда
			ТекущееЗначение = НовоеЗначение;
			ЗначениеОбновлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеОбновлено;

КонецФункции

&НаСервере
Процедура ПопытатьсяОбновитьВидДокумента(СтарыеДанные, ИмяРеквизита, ТекущееЗначение, НовыеДанные)
	
	СтароеЗначение = Неопределено;
	НовоеЗначение  = Неопределено;
	
	НайденоПолеВСтарыхДанных 	= СтарыеДанные.Свойство(ИмяРеквизита, СтароеЗначение);
	НайденоПолеВНовыхДанных 	= НовыеДанные.Свойство(ИмяРеквизита, НовоеЗначение);
	
	// если поле присутствует и в старых данных и новых, тогда пытаемся обновить значение
	Если НайденоПолеВСтарыхДанных И НайденоПолеВНовыхДанных Тогда
		
		НовоеЗначениеВидаДокумента  = ПолучитьВидДокументаПоНаименованию(НовоеЗначение);
		СтароеЗначениеВидаДокумента = ПолучитьВидДокументаПоНаименованию(СтароеЗначение);
		
		Если СтароеЗначениеВидаДокумента <> НовоеЗначениеВидаДокумента 
			ИЛИ ТекущееЗначение <> НовоеЗначениеВидаДокумента Тогда
			ТекущееЗначение = НовоеЗначениеВидаДокумента;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьВидДокументаПоНаименованию(Знач Наименование)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьВидДокументаПоНаименованию(Наименование);

КонецФункции

&НаКлиенте
Процедура ОбновитьРеквизитыСотрудника(ДанныеСотрудникаПредыдущие, НеобходимоОбновитьСертификат)
	
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВладелецЭЦПТип, 
		ДанныеОрганизации, 
		ВладелецЭЦП);
	
	// Если документ заполнен копированием, то заполняем структуру ДанныеСотрудникаПредыдущие из скопированных данных
	Если ДанныеСотрудникаПредыдущие = Неопределено И ДанныеВладельцаЭЦПЗаполненыКопированием Тогда
		
		ДанныеСотрудникаПредыдущие = Новый Структура;
		
		// ФИО
		ФИО = Новый Структура;
		ФИО.Вставить("Имя", 		ВладелецЭЦПИмя); 
		ФИО.Вставить("Фамилия", 	ВладелецЭЦПФамилия); 
		ФИО.Вставить("Отчество", 	ВладелецЭЦПОтчество);
		
		ДанныеСотрудникаПредыдущие.Вставить("ФИО", ФИО);
		
		// Паспортные данные
		ДанныеСотрудникаПредыдущие.Вставить("ВидДокумента", 	ВладелецЭЦПВидДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("Серия", 			ВладелецЭЦПСерияДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("Номер", 			ВладелецЭЦПНомерДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("ДатаВыдачи", 		ВладелецЭЦПДатаВыдачиДокумента);
		ДанныеСотрудникаПредыдущие.Вставить("КемВыдан", 		ВладелецЭЦПКемВыданДокумент);
		ДанныеСотрудникаПредыдущие.Вставить("ДатаРождения", 	ВладелецЭЦПДатаРождения);
		ДанныеСотрудникаПредыдущие.Вставить("МестоРождения", 	ВладелецЭЦПМестоРождения);
		ДанныеСотрудникаПредыдущие.Вставить("КодПодразделения", ВладелецЭЦПКодПодразделения);
		ДанныеСотрудникаПредыдущие.Вставить("Пол", 				ВладелецЭЦППол);
		ДанныеСотрудникаПредыдущие.Вставить("Гражданство", 		ВладелецЭЦПГражданство);
		
		ДанныеСотрудникаПредыдущие.Вставить("СНИЛС", 			ВладелецЭЦПСНИЛС);
		ДанныеСотрудникаПредыдущие.Вставить("Должность", 		ВладелецЭЦПДолжность);
		ДанныеСотрудникаПредыдущие.Вставить("Подразделение",	ВладелецЭЦППодразделение);

	КонецЕсли;
	
	Если ДанныеСотрудникаПредыдущие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ФИО
	ИзменилосьИмя 		= ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Имя",      ВладелецЭЦПИмя,      ДанныеСотрудника.ФИО);
	ИзмениласьФамилия 	= ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Фамилия",  ВладелецЭЦПФамилия,  ДанныеСотрудника.ФИО);
	ИзменилосьОтчетство = ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие.ФИО, "Отчество", ВладелецЭЦПОтчество, ДанныеСотрудника.ФИО);
	
	// Паспортные данные
	ПопытатьсяОбновитьВидДокумента(ДанныеСотрудникаПредыдущие, "ВидДокумента", 	ВладелецЭЦПВидДокумента, 		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Серия", 			ВладелецЭЦПСерияДокумента, 		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Номер", 			ВладелецЭЦПНомерДокумента, 		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "ДатаВыдачи", 		ВладелецЭЦПДатаВыдачиДокумента, ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "КемВыдан", 			ВладелецЭЦПКемВыданДокумент, 	ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Должность", 		ВладелецЭЦПДолжность, 			ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Подразделение", 	ВладелецЭЦППодразделение, 		ДанныеСотрудника);
	
	ИзменилсяСНИЛС = ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "СНИЛС", ВладелецЭЦПСНИЛС, ДанныеСотрудника);
	
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "ДатаРождения", 	   	ВладелецЭЦПДатаРождения,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "МестоРождения",    	ВладелецЭЦПМестоРождения,		ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "КодПодразделения", 	ВладелецЭЦПКодПодразделения,	ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Пол", 				ВладелецЭЦППол,					ДанныеСотрудника);
	ПопытатьсяОбновитьРеквизит(ДанныеСотрудникаПредыдущие, "Гражданство", 		ВладелецЭЦПГражданство,			ДанныеСотрудника);
	
	ИзменитьОформлениеВладельцаЭП();
	
	Если ИзменилосьИмя ИЛИ ИзмениласьФамилия ИЛИ ИзменилосьОтчетство ИЛИ ИзменилсяСНИЛС Тогда
		НеобходимоОбновитьСертификат = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныеНастройки_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийРежимРаботыСКлючами 		= РежимРаботыСКлючами;
	ПредыдущийАдресЮридическийЗначение  = АдресЮридическийЗначение;
	ПредыдущийТелефонДляПаролей 		= ТелефонДляПаролей;
	ПредыдущийИгнорироватьКонфликт 		= ИгнорироватьКонфликт;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, ПараметрыФормы, "ПараметрыФормы");
	
	Если Результат.Модифицированность Тогда
		УстановитьМодифицированность(ЭтотОбъект);
	Конецесли;
	
	ИзменилсяРежимРаботыСКлючами = ПредыдущийРежимРаботыСКлючами <> РежимРаботыСКлючами;
	
	Если ИзменилсяРежимРаботыСКлючами Тогда
		ПриИзмененииРежимаРаботыСКлючами();
	КонецЕсли;
	
	// Если поменялся адрес, то мог поменяться регион и могли поменяться коды в направлениях
	ИзменитьОформлениеНаправлений();
	
	Если ПредыдущийАдресЮридическийЗначение <> АдресЮридическийЗначение Тогда
		ПриИзмененииЮридическогоАдреса();
	КонецЕсли;
	
	Если ТелефонДляПаролей <> "" И НЕ КонтекстЭДОКлиент.ТелефоныСовпадают(ПредыдущийТелефонДляПаролей, ТелефонДляПаролей) Тогда
		ПриИзмененииТелефонаИлиПочтыДляПароля();	
	КонецЕсли;
	
	ИзменитьОформлениеРасширенныхНастроек();
	
	Если ПредыдущийИгнорироватьКонфликт <> ИгнорироватьКонфликт Тогда
		ОпределитьВозможностьБезбумажногоПодписания(); // асинхронно
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьМодифицированность(Форма)
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СнятьМодифицированность(Форма)
	Форма.Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаРаботыСКлючами()
	
	ПриИзмененииТелефонаИлиПочтыДляПароля(Ложь);
	ИнициализироватьПараметрыЭДО();
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтотОбъект);
	ИзменитьОформлениеМестаХраненияКлючей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТелефонаИлиПочтыДляПароля(ПриОткрытии = Ложь)
	
	Интервал = 0.1;
	
	ТаймерТелефон = 0;
	
	Если ПроверкаТелефонДляПаролей.Значение = ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ТелефонДляПаролей)
		И ПроверкаТелефонДляПаролей.ЗначениеВведено И ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено Тогда
		// Не обнуляем результат проверок, поскольку телефон не изменился
	Иначе
		ЗаполнитьПеременныеДляПроверкиТелефона(ЭтотОбъект, ПриОткрытии);
	КонецЕсли;

	ПерерисоватьФорму = Ложь;
	
	Если ЗначениеЗаполнено(ТелефонДляПаролей) Тогда
		
		ЭтоРучноеИзменениеТелефона = Ложь;
		
		ТелефонДляПаролейИзменениеТекстаРедактирования(
			Элементы.ТелефонДляПаролей, 
			ТелефонДляПаролей, 
			Истина,
			Интервал,
			Ложь);
	Иначе
		// Для отработки, когда переключаю владельца ЭП, телефон пустой, но осталась зеленая галка
		ПерерисоватьФорму = Истина;
	КонецЕсли;
	
	ТаймерПочта = 0;
	Если ПроверкаЭлектроннаяПочтаДляПаролей.Значение = СокрЛП(ЭлектроннаяПочтаДляПаролей)
		И ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено 
		И ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено Тогда
		// Не обнуляем результат проверок, поскольку почта не изменилась
	Иначе
		ЗаполнитьПеременныеДляПроверкиЭлектроннойПочты(ЭтотОбъект, ПриОткрытии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) Тогда
		ЭлектроннаяПочтаДляПаролейИзменениеТекстаРедактирования(
			Элементы.ЭлектроннаяПочтаДляПаролей,
			ЭлектроннаяПочтаДляПаролей,
			Истина,
			Интервал,
			Ложь);
	Иначе
		// Для отработки, когда переключаю владельца ЭП, почта пустая, но осталась зеленая галка
		ПерерисоватьФорму = Истина;
	КонецЕсли;
	
	Если ПерерисоватьФорму Тогда
		ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПользователей_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПользователей = Результат;
	
	ИзменитьОформлениеПользователей();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПользователей()
	
	ПользователиУчетнойЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователи.ТекущийПользователь());
	ЗаполнитьСписокПользователей(ПользователиУчетнойЗаписи);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьПользователей1СОтчетности(СписокПользователей, Организация);
	
	ИзменитьОформлениеПользователей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПользователей(ПользователиУчетнойЗаписи)
	
	СписокПользователей.Очистить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Пользователи.Ссылка КАК Пользователь,
	                      |	ВЫБОР
	                      |		КОГДА Пользователи.Ссылка В (&Пользователи)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Пометка
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |ГДЕ
	                      |	НЕ Пользователи.ПометкаУдаления
	                      |	И НЕ Пользователи.Недействителен
	                      |	И (НЕ Пользователи.Служебный
	                      |				И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификаторПользователяИБ
	                      |			ИЛИ Пользователи.Ссылка = &ТекущийПользователь)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Пользователи.Наименование");
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("ПустойИдентификаторПользователяИБ", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.УстановитьПараметр("Пользователи", ПользователиУчетнойЗаписи);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Пользователь = ТекущийПользователь Тогда 
			Картинка = БиблиотекаКартинок.Пользователь;
		Иначе 
			Картинка = Неопределено;
		КонецЕсли;
		
		СписокПользователей.Добавить(
			Выборка.Пользователь, 
			Выборка.Пользователь.Наименование, 
			Выборка.Пометка,
			Картинка);
			
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Процедура ИзменитьОформлениеПользователей()
	
	Если СписокПользователей.Количество() <= 1 Тогда
		Элементы.ГруппаПользователи.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПредставлениеПользователей  = "";
	ТекущийПользователь 		= Пользователи.ТекущийПользователь();
	КоличествоВыбранных 		= 0;
	ОбщееКоличество	    		= СписокПользователей.Количество();
	ВыбранТекущий 				= Ложь;
	ДругойПользователь  		= "";
	
	Для Каждого ЭлементСписка Из СписокПользователей Цикл
		
		Если ЭлементСписка.Пометка Тогда 
			КоличествоВыбранных 		= КоличествоВыбранных + 1;
			ПредставлениеПользователей 	= ПредставлениеПользователей + ЭлементСписка.Представление + ", ";
			
			Если ЭлементСписка.Значение = ТекущийПользователь Тогда
				ВыбранТекущий = Истина;
			Иначе
				ДругойПользователь = ЭлементСписка.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПользователейМного = ОбщееКоличество > 1;
	Элементы.ВыбратьПользователей.ЦветТекста = Новый Цвет(); // синий
	
	Если КоличествоВыбранных = ОбщееКоличество Тогда
		Элементы.ВыбратьПользователей.Заголовок  = НСтр("ru = 'Все пользователи'");
	ИначеЕсли ВыбранТекущий Тогда
		
		Если КоличествоВыбранных = 1 Тогда
			// если выбран только 1 из многих, то писать Только Вы
			Элементы.ВыбратьПользователей.Заголовок  = НСтр("ru = 'Только Вы'");
		ИначеЕсли КоличествоВыбранных = 2 Тогда
			// если 2 - Вы и Иванов
			Элементы.ВыбратьПользователей.Заголовок  = НСтр("ru = 'Вы и '") + ДругойПользователь;
		ИначеЕсли КоличествоВыбранных > 2 Тогда
			// если 3 и больше - Вы и еще N
			Элементы.ВыбратьПользователей.Заголовок  = НСтр("ru = 'Вы и еще '") + Строка(КоличествоВыбранных - 1);
		КонецЕсли;
	
	ИначеЕсли КоличествоВыбранных = 0 Тогда
		// Никто не выбран
		Элементы.ВыбратьПользователей.Заголовок  = "Выбрать";
		Элементы.ВыбратьПользователей.ЦветТекста = КрасныйЦвет; // красный
	ИначеЕсли КоличествоВыбранных = 1 ИЛИ КоличествоВыбранных = 2 Тогда 
		// Иванов, 
		// Иванов, Петров
		ПредставлениеПользователей = Лев(ПредставлениеПользователей, СтрДлина(ПредставлениеПользователей)-2);
		Элементы.ВыбратьПользователей.Заголовок  = ПредставлениеПользователей;
	Иначе
		// если 3 и больше - Петров и еще N
		Элементы.ВыбратьПользователей.Заголовок  = ДругойПользователь + НСтр("ru = ' и еще '") + Строка(КоличествоВыбранных - 1);
	КонецЕсли;
	
	Элементы.УказательПользователи.Подсказка = ПодсказкаКПользователям(КраткоеНаименование);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодсказкаКПользователям(КраткоеНаименование)
	
	Надпись = НСтр("ru = 'Пользователи, которые смогут пользоваться 1С-Отчетностью по организации <организация>, отправлять отчетность, узнавать результат отправки, получать требования, письма и уведомления.'");
	Надпись = СтрЗаменить(Надпись, "<организация>", КраткоеНаименование);
	
	Возврат Надпись;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораТарифа(РезультатВыбораТарифа, ВходящийКонтекст) Экспорт
	
	Если НЕ ЗапретитьИзменение И ЗначениеЗаполнено(РезультатВыбораТарифа) Тогда
		
		Тариф = РезультатВыбораТарифа;
		ИзменитьОформлениеТарифа(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии_ПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент 	 = Результат.КонтекстЭДО;
	ПутьКОбъекту	  	 = КонтекстЭДОКлиент.ПутьКОбъекту;
	СканированиеДоступно = РаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
	
	Если РазделениеВключено Тогда
		ПроверитьЧтоКодАбонентаПолучен();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьТекстРедактированияДляИНН", 0.1, Истина);

	ИзменитьОформлениеНомераОсновнойПоставки1с(Истина);
	
	ПриИзмененииТелефонаИлиПочтыДляПароля(Истина);
	
	СрокЛицензииКриптоПроКонечный = КонтекстЭДОКлиент.СрокЛицензииКриптоПроКонечный();
	
	Если ЗапретитьИзменение Тогда
		Подключаемый_ОпределитьВозможностьБезбумажногоПодписания_ПриОткрытии();
	Иначе
		// Чтобы поиск сертификатов не тормозил открытие формы.
		// Выполняем отложенно, чтобы успели прорисоваться телефон и почта
		ПодключитьОбработчикОжидания("Подключаемый_ОпределитьВозможностьБезбумажногоПодписания_ПриОткрытии", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТекстРедактированияДляИНН()
	Элементы.ИНН.ОбновитьТекстРедактирования();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОпределитьВозможностьБезбумажногоПодписания_ПриОткрытии() Экспорт
	
	ДлительнаяОтправкаКлиент.ЗакрытьФормуОжиданияЗагрузкиМодуля();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПропуститьОчисткуФайлов", ЗаявлениеСозданоКопированием);
	
	ОпределитьВозможностьБезбумажногоПодписания(, Истина, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеров(ВыполняемоеОповещение, ПредлагатьУстановкуРасширения)
	
	Контекст 	= Новый Структура("ВыполняемоеОповещение", ВыполняемоеОповещение);
	Оповещение 	= Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
	КриптографияЭДКОКлиент.СоздатьМенеджерКриптографии(Оповещение, Ложь,, ПредлагатьУстановкуРасширения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровПослеСозданияМенеджераКриптографии(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		
		КомпонентаДляРаботыСКриптографиейПодключена = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровЗавершение", ЭтотОбъект, ВходящийКонтекст);
		КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение,,, Результат.МенеджерКриптографии);
		
	Иначе
		
		ТекстОшибкиПодключенияКомпоненты = Результат.ОписаниеОшибки;
		
		Если ТекстОшибкиПодключенияКомпоненты = КриптографияЭДКОСлужебныйКлиент.ОписаниеОшибкиНеУдалосьСоздатьМенеджерКриптографии() Тогда
			// Не установлен криптопровайдер, но компонента стоит
			КомпонентаДляРаботыСКриптографиейПодключена = Истина;
		КонецЕсли;
		
		ЗаполнитьСписокКриптопровайдеровЗавершение(Новый Структура("Выполнено", Ложь), ВходящийКонтекст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	ВходящийКонтекст.Вставить("КриптопровайдерПриКонфликте", КриптопровайдерПриКонфликте);
	
	РезультатПоиска = КонтекстЭДОКлиент.РезультатПоискаКриптопровайдеров(Результат, ВходящийКонтекст);
	
	CryptoProCSPУстановлен	= РезультатПоиска.CryptoProCSPУстановлен;
	ViPNetCSPУстановлен 	= РезультатПоиска.ViPNetCSPУстановлен;
	
	Если ViPNetCSPУстановлен Тогда
		ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
	ИначеЕсли CryptoProCSPУстановлен Тогда
		ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
	КонецЕсли;
	
	ВыполняемоеОповещение 	= ВходящийКонтекст.ВыполняемоеОповещение;
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЧтоКодАбонентаПолучен()

	Если НЕ ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюКодаРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюКодаРегистрации);
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		НомерОсновнойПоставки1с = Данные.Результат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеНомераОсновнойПоставки1с(ПриОткрытии = Ложь)
	
	КонтекстЭДОКлиент.ИзменитьПодсказкуРегНомера(ЭтотОбъект);
	
	РезультатПроверки = ПроверитьНомерОсновнойПоставки1с(, Ложь);
	Элементы.ПроверкаНомерОсновнойПоставки1с.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
	
	Если ПриОткрытии Тогда
		// Скрываем, если при открытии заполнен
		ПоказатьРегНомер = НЕ ЗначениеЗаполнено(НомерОсновнойПоставки1с) ИЛИ РезультатПроверки.ЕстьОшибка; 
		Элементы.ГруппаРегНомерПрограммы.Видимость = ПоказатьРегНомер;
		РегНомерВРасширенныхНастройках             = НЕ ПоказатьРегНомер;
	КонецЕсли;
	
	Если ЗапретитьИзменение Тогда
		Элементы.НомерОсновнойПоставки1с.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура Инициализация(Параметры)
	
	ПолучитьКриптопровайдераИзПараметров(Параметры);
	
	// Цвета
	ЧерныйЦвет 				= Новый Цвет(65, 48, 3);
	СерыйЦвет 				= Новый Цвет(87, 87, 87);
	СинийЦвет 				= Новый Цвет(28, 85, 174);
	ЦветТекстаФормы 		= Новый Цвет(65, 48, 3);
	СинийЦветПодсказки 		= Новый Цвет(70, 130,180);
	КрасныйЦвет 			= ЦветаСтиля.ЦветОшибкиПроверкиБРО;
	МаксимальныйРазмерФайла = 10 * 1024 * 1024;
	ДопустимыеТипыФайлов    = "png;jpeg;jpg;tiff;tif;pdf";
	
	Реквизит 					= Параметры.Реквизит;
	РазделениеВключено 			= ОбщегоНазначения.РазделениеВключено();
	ЭтоВебКлиент 				= ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	ИспользуетсяОднаОрганизация = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	ФНС  = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ФСГС = Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	
	// Для Нулевки и БизнесСтарта
	УстановитьНастройкиРежимаОграниченнойФункциональности();
	
	ИнициализироватьОрганизацию();
	ИнициализироватьПараметрыУЦ();
	ИнициализацияДляЭПВМоделиСервиса();
	
	НачатьОпределениеКодаАбонента();
	
	// инициализация, выполняемая в случае, когда реквизиты мастера заполняются на основе уже существующего заявления
	ЗаявлениеСозданоКопированием = ЗначениеЗаполнено(Реквизит);
	Если ЗаявлениеСозданоКопированием Тогда
		ДействияДляСкопированногоЗаявления();
	Иначе
		ДействияДляНовогоПустогоЗаявления();
	КонецЕсли;
	
	// Выполняется в проверке возможности электронного подписания
	ЗаполнитьПеременныеДляПроверкиТелефона(ЭтотОбъект, Истина);
	ЗаполнитьПеременныеДляПроверкиЭлектроннойПочты(ЭтотОбъект, Истина);
	ИнициализироватьФактическийАдрес();
	НачатьОпределениеИдентификаторАдресаФИАС();
	ИзменитьОформлениеМестаХраненияКлючей();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФактическийАдрес()
	
	Если (НЕ ЗначениеЗаполнено(АдресФактическийПредставление) ИЛИ НЕ ЗначениеЗаполнено(АдресФактическийЗначение))
		И (ЗначениеЗаполнено(АдресЮридическийПредставление) ИЛИ ЗначениеЗаполнено(АдресЮридическийЗначение)) Тогда
		
		АдресФактическийЗначение      = АдресЮридическийЗначение;
		АдресФактическийПредставление = АдресЮридическийПредставление;
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ПолучитьКриптопровайдераИзПараметров(Параметры)
	
	// Эти параметры будут пустые в случае облачного заявления.
	Если Параметры.Свойство("CryptoProCSPУстановлен") 
		И Параметры.Свойство("ViPNetCSPУстановлен")
		И Параметры.Свойство("КомпонентаДляРаботыСКриптографиейПодключена") Тогда
		
		CryptoProCSPУстановлен 	= Параметры.CryptoProCSPУстановлен;
		ViPNetCSPУстановлен  	= Параметры.ViPNetCSPУстановлен;
		КомпонентаДляРаботыСКриптографиейПодключена = Параметры.КомпонентаДляРаботыСКриптографиейПодключена;
		
		Если ViPNetCSPУстановлен Тогда
			ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
		ИначеЕсли CryptoProCSPУстановлен Тогда
			ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВсеСертификаты") Тогда
		ВсеСертификаты = Параметры.ВсеСертификаты;
	КонецЕсли;	
	
	Параметры.Свойство("ИгнорироватьКонфликт", 			ИгнорироватьКонфликт);
	Параметры.Свойство("КриптопровайдерПриКонфликте", 	КриптопровайдерПриКонфликте);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыУЦ()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Спецоператоры = КонтекстЭДОСервер.ПолучитьСписокСпецоператоровСвязи();
	Спецоператор  = Спецоператоры[0];
	
	СвойстваОператора = Новый Структура();
	СвойстваОператора.Вставить("НаименованиеУЦ");
	СвойстваОператора.Вставить("АдресРегламентУЦ");
	СвойстваОператора.Вставить("СетьДоверенныхУЦ");
	СвойстваОператора.Вставить("СуммаОтветственностиУЦ");
	СвойстваОператора.Вставить("НаименованиеПОРаспространяемогоУЦ");
	СвойстваОператора.Вставить("ФСРАРПризнак");
	СвойстваОператора.Вставить("РПНПризнак");
	СвойстваОператора.Вставить("ФТСПризнак");
	СвойстваОператора.Вставить("ПризнакПоддержкиСМС");
	
	ПараметрыСпецоператора = КонтекстЭДОСервер.ПолучитьПараметрыСпецоператора(Спецоператор, СвойстваОператора);
	
	ПолеHTMLЛицензии = ТекстСоглашения(ПараметрыСпецоператора);
	
	ПризнакПоддержкиФСРАР = 
		ПараметрыСпецоператора.ФСРАРПризнак = Истина 
		ИЛИ ПараметрыСпецоператора.ФСРАРПризнак = "Истина";
	
	ПризнакПоддержкиРПН = ПараметрыСпецоператора.РПНПризнак = Истина 
		ИЛИ ПараметрыСпецоператора.РПНПризнак = "Истина";
	
	ПризнакПоддержкиФТС = ПараметрыСпецоператора.ФТСПризнак = Истина 
		ИЛИ ПараметрыСпецоператора.ФТСПризнак = "Истина";
	
	ОператорПоддерживаетСМСУведомление = ПараметрыСпецоператора.ПризнакПоддержкиСМС = "Истина";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНаименованиеОператора(СтруктураДанныхСпецоператорыСвязи,Спецоператор)
	
	ЗначенияСпецОператора = Неопределено;
	Для Каждого СпецОператорСтрока Из СтруктураДанныхСпецоператорыСвязи.СпецоператорыСвязи Цикл
		Если СпецОператорСтрока.Ссылка = Спецоператор Тогда
			ЗначенияСпецОператора = СпецОператорСтрока;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияСпецОператора;
	
КонецФункции

&НаСервере
Функция ТекстСоглашения(ПараметрыСпецоператора) Экспорт 
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура;
	КонтекстЭДОСервер.ЗаполнитьДанныеСпецоператораСвязи(СтруктураДанныхСпецоператорыСвязи);
	
	СпецоператорСвязи = ПолучитьНаименованиеОператора(СтруктураДанныхСпецоператорыСвязи, СпецОператор);
	
	Если СпецоператорСвязи = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстДляЗамены = Строка(СтруктураДанныхСпецоператорыСвязи.ТекстМакетаСоглашение);
	
	ТекстДляЗамены = СтрЗаменить(ТекстДляЗамены,"#НаименованиеУЦ#",	ПараметрыСпецоператора.НаименованиеУЦ);
	ТекстДляЗамены = СтрЗаменить(ТекстДляЗамены,"#АдресРегламентУЦ#",ПараметрыСпецоператора.АдресРегламентУЦ);
	ТекстДляЗамены = СтрЗаменить(ТекстДляЗамены,"#СетьДоверенныхУЦ#",ПараметрыСпецоператора.СетьДоверенныхУЦ);
	ТекстДляЗамены = СтрЗаменить(ТекстДляЗамены,"#СуммаОтветственностиУЦ#",ПараметрыСпецоператора.СуммаОтветственностиУЦ);
	ТекстДляЗамены = СтрЗаменить(ТекстДляЗамены,"#НаименованиеПОРаспространяемогоУЦ#",ПараметрыСпецоператора.НаименованиеПОРаспространяемогоУЦ);
	
	Возврат ТекстДляЗамены;
	
КонецФункции

&НаСервере
Процедура ДействияДляНовогоПустогоЗаявления()
	
	ОбработатьИзменениеОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизации(ИННОрганизации = "")
	
	Если НЕ ОрганизацияЗаполнена() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОрганизацииИОтветственныхЛиц = Новый Структура();
	ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	ЗадаватьВопросПроСуществованиеУчетнойЗаписи = Истина;
	
	ОчиститьРеквизитыФормы(ИННОрганизации);
	
	ОбновитьДанныеОрганизацииИзБазы();
	
	ЗаполнитьЗаявлениеДаннымиИзБазы(ДанныеОрганизацииИОтветственныхЛиц, ИННОрганизации);
	
	Если НЕ ИННОрганизацииЗаполнен() Тогда
		ИзменитьОформлениеНастроекНотариуса();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеСотрудника();
	
	ИПИспользуетТрудНаемныхРаботников = РегламентированнаяОтчетность.ИПИспользуетТрудНаемныхРаботников(Организация);
	
	ЗаполнитьЗаявлениеДаннымиИз1СКонтрагент();

	ИнициализироватьНаправления();
	ИнициализироватьЗаголовокФормы();
	ИзменитьОформлениеОрганизации();
	ИзменитьОформлениеИНН();
	ИзменитьОформлениеКПП();
	ИзменитьОформлениеКраткогоНаименования(ЭтотОбъект);
	ИзменитьОформлениеВладельцаЭП();
	ИнициализироватьПользователей();
	ИнициализироватьПараметрыЭДО();
	ИнициализироватьМобильныйТелефон();
	ИзменитьОформлениеЮрАдреса();
	ИзменитьОформлениеОГРН(ЭтотОбъект);
	ИзменитьОформлениеНастроекНотариуса();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОрганизацииИзБазы()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("ПриОткрытии", Истина);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	
	КонтекстЭДОСервер.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОСервер.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	ДанныеОрганизации = ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеЮрАдреса(ПриОткрытии = Ложь)
	
	РезультатПроверки = ПроверитьЮрАдрес(,Ложь);
	
	ЮрАдресВРасширенныхНастройках = 
		НЕ РезультатПроверки.ЕстьОшибка
		И ЭтоЮридическоеЛицо 
		И (Доступен1СКонтрагент ИЛИ ДанныеОрганизацииЗаполненыКопированием И ЗначениеЗаполнено(АдресЮридическийЗначение) И ПриОткрытии);
	
	// Адрес
	Если ЮрАдресВРасширенныхНастройках Тогда
		
		Элементы.ГруппаЮрАдрес.Видимость = Ложь;
		
	Иначе
		
		Если ЭтоЮридическоеЛицо Тогда
			Элементы.ЗаголовокЮрАдрес.Заголовок = НСтр("ru = 'Юридический адрес:'");
		Иначе
			Элементы.ЗаголовокЮрАдрес.Заголовок = НСтр("ru = 'Адрес регистрации:'");
		КонецЕсли;
		
		АдресЮридический = СтрЗаменить(АдресЮридическийПредставление, ",", "");
		АдресЮридический = СтрЗаменить(АдресЮридический, НСтр("ru = 'Заполнить'"), "");
		
		Элементы.ГруппаЮрАдрес.Видимость = Истина;
		
		Если ЗначениеЗаполнено(АдресЮридический) Тогда
			Элементы.АдресЮридическийПредставление.ЦветТекста = Новый Цвет;
			Элементы.АдресЮридическийПредставление.Заголовок  = АдресЮридическийПредставление;
		Иначе
			Элементы.АдресЮридическийПредставление.Заголовок  = НСтр("ru = 'Заполнить'");
			Элементы.АдресЮридическийПредставление.ЦветТекста = КрасныйЦвет;
		КонецЕсли;
		
		Элементы.ПроверкаЮрАдреса.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеКраткогоНаименования(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПоказыватьКраткоеНаименование Тогда
		
		РезультатПроверки = ПроверитьКраткоеНаименование(Форма,, Ложь);
		Элементы.ПроверкаКраткоеНаименование.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
		
		Элементы.ГруппаКраткоеНаименование.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаКраткоеНаименование.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Форма.ЗапретитьИзменение Тогда
		Элементы.ГруппаКраткоеНаименование.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеКПП()
	
	Если ПоказыватьКПП Тогда
		
		РезультатПроверки = ПроверитьКПП(ЭтотОбъект,, Ложь);
		Элементы.ПроверкаКПП.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
		
		Элементы.ГруппаКПП.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаКПП.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЗапретитьИзменение Тогда
		Элементы.ГруппаКПП.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеТехническойИнформации(Форма)
	
	Форма.Элементы.ГруппаТехническаяИнформация.Видимость = Форма.ЗапретитьИзменение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеВладельцаЭЦПДолжность(Форма)
	
	Элементы = Форма.Элементы;
	
	// Адрес
	Если Форма.ЭтоЮридическоеЛицо 
		И Форма.Доступен1СКонтрагент 
		И Форма.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель")
		ИЛИ НЕ Форма.ЭтоЮридическоеЛицо Тогда
		
		Элементы.ГруппаВладелецЭЦПДолжность.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаВладелецЭЦПДолжность.Видимость = Истина;
		
	КонецЕсли;
	
	Если Форма.ЗапретитьИзменение Тогда
		Элементы.ВладелецЭЦПДолжность.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМобильныйТелефон()
	
	ПолучатьСМС = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзБазы(ДанныеОрганизацииИОтветственныхЛиц, ИННОрганизации = "")

	Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	// Определяем руководителя и гл бухгалтера
	ОпределитьОтветственныеЛицаОрганизации();
	
	ЭтоЮридическоеЛицо  = ДанныеОрганизации.ТипОрганизации;
	КраткоеНаименование = ДанныеОрганизации.КраткоеНаименование;
	
	ПоказыватьКраткоеНаименование = НаименованиеПустое();
	
	КПП = ДанныеОрганизации.КППЮЛ;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПоказыватьКПП = НЕ ЗначениеЗаполнено(СокрЛП(КПП)); 
	Иначе
		ПоказыватьКПП = Ложь;
	КонецЕсли;
	
	ОГРН					 = ДанныеОрганизации.ОГРН;
	РегНомерПФР				 = ДанныеОрганизации.РегНомПФР;
	ТелефонОсновной			 = ДанныеОрганизации.ТелОрганизации;
	ТелефонДополнительный	 = ДанныеОрганизации.ТелРук;
	
	// Если организации пустое, а на форме заполнено, то не будем очищать его
	Если ИННОрганизации = "" Тогда
		ИНН           = ДанныеОрганизации.ИННЮЛ;
		ПоказыватьИНН = НЕ ЗначениеЗаполнено(СокрЛП(ИНН));
	КонецЕсли;
	
	АдресЮридическийЗначение		 = ДанныеОрганизацииИОтветственныхЛиц.АдресЮридическийЗначение;
	АдресЮридическийПредставление	 = ДанныеОрганизацииИОтветственныхЛиц.АдресЮридическийПредставление;
	
	АдресФактическийЗначение		 = ДанныеОрганизацииИОтветственныхЛиц.АдресФактическийЗначение;
	АдресФактическийПредставление	 = ДанныеОрганизацииИОтветственныхЛиц.АдресФактическийПредставление;
	
	ИнициализироватьФактическийАдрес();
	
	ЭлектроннаяПочта 			= ДанныеОрганизации.ЭлектроннаяПочта;
	ЭлектроннаяПочтаДляПаролей  = ЭлектроннаяПочта;
	
	Если ЭтоЮридическоеЛицо Тогда
		ПризнакОбособленногоПодразделения = ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	
	КодРегиона = КодРегионаПоАдресу(АдресЮридическийЗначение);
	
КонецПроцедуры

&НаСервере
Функция НаименованиеПустое()
	
	ОрганизацияИмеетПустоеНаименование = КраткоеНаименование = "";
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПроверитьОрганизациюНаПустоеНаименование(
		Организация, 
		ОрганизацияИмеетПустоеНаименование);
		
	Возврат ОрганизацияИмеетПустоеНаименование ИЛИ КраткоеНаименование = "";
		
КонецФункции

&НаСервере 
Функция КодПФР(РеквизитыОрганизации = Неопределено)
	
	Если РеквизитыОрганизации = Неопределено Тогда 
		РеквизитыОрганизации = ДанныеОрганизации;
	КонецЕсли;
	
	ПолученыйКодПФР = "";
	
	Если ПустаяСтрока(РеквизитыОрганизации.КодОрганаПФР) ИЛИ СтрДлина(РеквизитыОрганизации.КодОрганаПФР) < 7 Тогда
		ПолученыйКодПФР = Лев(РеквизитыОрганизации.КодОрганаПФР,7); 
	Иначе
		ПолученыйКодПФР = РеквизитыОрганизации.КодОрганаПФР;
	КонецЕсли;
	
	Возврат ПолученыйКодПФР;
	
КонецФункции

&НаСервере
Функция КодРегионаПоАдресу(Адрес)

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.КодРегионаВМастереПоАдресу(Адрес)
	
КонецФункции

&НаСервере
Процедура ИнициализироватьНаправления()
	
	ОпределитьПодключаемыеНаправленияСдачиОтчетности();
	
	ВосстановитьНаправленияПоУмолчаниюФНС();
	ВосстановитьНаправленияПоУмолчаниюФСГС();
	
	КодРегионаФСРАР = КодРегиона;
	КодПФР = КодПФР(ДанныеОрганизации);
	
	ИзменитьОформлениеНаправлений();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПодключаемыеНаправленияСдачиОтчетности(ЭтоСкопированоеЗаявление = Ложь)
	
	Направления = Новый Массив;
	
	// Признаки ПризнакПоддержкиФСРАР, ПризнакПоддержкиРПН, ПризнакПоддержкиФТС 
	// определяются настройками спецоператора в процедуре ИнициализироватьПараметрыУЦ
	
	// ФНС
	НоваяСтрока 			= НоваяСтрокаТаблицыОрганов();
	НоваяСтрока.Орган 		= Перечисления.ТипыКонтролирующихОрганов.ФНС;
	Направления.Добавить(НоваяСтрока);
	
	// ПФР
	НоваяСтрока 			= НоваяСтрокаТаблицыОрганов();
	НоваяСтрока.Орган 		= Перечисления.ТипыКонтролирующихОрганов.ПФР;
	Направления.Добавить(НоваяСтрока);
	
	// Росстат
	НоваяСтрока 			= НоваяСтрокаТаблицыОрганов();
	НоваяСтрока.Орган 		= Перечисления.ТипыКонтролирующихОрганов.ФСГС;
	Направления.Добавить(НоваяСтрока);
	
	// ФСС
	НоваяСтрока 			= НоваяСтрокаТаблицыОрганов();
	НоваяСтрока.Орган 		= Перечисления.ТипыКонтролирующихОрганов.ФСС;
	Направления.Добавить(НоваяСтрока);
	
	// ФСРАР
	Если ПризнакПоддержкиФСРАР Тогда
		// Если оператор не поддерживает орган, то не даем переопределять это признак
		НоваяСтрока 		= НоваяСтрокаТаблицыОрганов();
		НоваяСтрока.Орган 	= Перечисления.ТипыКонтролирующихОрганов.ФСРАР;
		Направления.Добавить(НоваяСтрока);
	КонецЕсли;
	
	// РПН
	Если ПризнакПоддержкиРПН Тогда
		// Если оператор не поддерживает орган, то не даем переопределять это признак
		НоваяСтрока 		= НоваяСтрокаТаблицыОрганов();
		НоваяСтрока.Орган 	= Перечисления.ТипыКонтролирующихОрганов.РПН;
		Направления.Добавить(НоваяСтрока);
	КонецЕсли;

	// ФТС
	Если ПризнакПоддержкиФТС Тогда
		// Если оператор не поддерживает орган, то не даем переопределять это признак
		НоваяСтрока 		= НоваяСтрокаТаблицыОрганов();
		НоваяСтрока.Орган 	= Перечисления.ТипыКонтролирующихОрганов.ФТС;
		Направления.Добавить(НоваяСтрока);
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьПодключаемыеНаправленияСдачиОтчетности(Организация, Направления);
	
	// ФСРАР
	Если НЕ ПризнакПоддержкиФСРАР Тогда
		НоваяСтрока 			= НоваяСтрокаТаблицыОрганов();
		НоваяСтрока.Орган 		= Перечисления.ТипыКонтролирующихОрганов.ФСРАР;
		НоваяСтрока.Доступен 	= Ложь;
		НоваяСтрока.Подключить 	= Ложь;
		Направления.Добавить(НоваяСтрока);
	КонецЕсли;
	
	// РПН
	Если НЕ ПризнакПоддержкиРПН Тогда
		НоваяСтрока 			= НоваяСтрокаТаблицыОрганов();
		НоваяСтрока.Орган 		= Перечисления.ТипыКонтролирующихОрганов.РПН;
		НоваяСтрока.Доступен 	= Ложь;
		НоваяСтрока.Подключить 	= Ложь;
		Направления.Добавить(НоваяСтрока);
	КонецЕсли;

	// ФТС
	Если НЕ ПризнакПоддержкиФТС Тогда
		НоваяСтрока 			= НоваяСтрокаТаблицыОрганов();
		НоваяСтрока.Орган 		= Перечисления.ТипыКонтролирующихОрганов.ФТС;
		НоваяСтрока.Доступен 	= Ложь;
		НоваяСтрока.Подключить 	= Ложь;
		Направления.Добавить(НоваяСтрока);
	КонецЕсли;
	
	Для каждого Направление Из Направления Цикл
		
		Если Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			
			ПризнакПоддержкиФНС = Направление.Доступен;
			
			Если ЭтоСкопированоеЗаявление Тогда
				СдаватьВФНС = СдаватьВФНС И ПризнакПоддержкиФНС;
			Иначе
				СдаватьВФНС = Направление.Подключить И ПризнакПоддержкиФНС;
			КонецЕсли;
			
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			
			ПризнакПоддержкиПФР = Направление.Доступен;
			
			Если ЭтоСкопированоеЗаявление Тогда
				СдаватьВПФР = СдаватьВПФР И ПризнакПоддержкиПФР;
			Иначе
				СдаватьВПФР = Направление.Подключить И ПризнакПоддержкиПФР;
			КонецЕсли;
			
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСГС Тогда
			
			ПризнакПоддержкиРосстат = Направление.Доступен;
			
			Если ЭтоСкопированоеЗаявление Тогда
				СдаватьВРосстат = СдаватьВРосстат И ПризнакПоддержкиРосстат;
			Иначе
				СдаватьВРосстат = Направление.Подключить И ПризнакПоддержкиРосстат;
			КонецЕсли;
			
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			
			ПризнакПоддержкиФСС = Направление.Доступен;
			
			Если ЭтоСкопированоеЗаявление Тогда
				СдаватьВФСС = СдаватьВФСС И ПризнакПоддержкиФСС;
			Иначе
				СдаватьВФСС = Направление.Подключить И ПризнакПоддержкиФСС;
			КонецЕсли;
			
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			
			ПризнакПоддержкиФСРАР = Направление.Доступен;
			
			Если ЭтоСкопированоеЗаявление Тогда
				ПодатьЗаявкуНаСертификатДляФСРАР = ПодатьЗаявкуНаСертификатДляФСРАР И ПризнакПоддержкиФСРАР;
			Иначе
				ПодатьЗаявкуНаСертификатДляФСРАР = Направление.Подключить И ПризнакПоддержкиФСРАР;
			КонецЕсли;
			
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.РПН Тогда
			
			ПризнакПоддержкиРПН = Направление.Доступен;
			
			Если ЭтоСкопированоеЗаявление Тогда
				ПодатьЗаявкуНаПодключениеРПН = ПодатьЗаявкуНаПодключениеРПН И ПризнакПоддержкиРПН;
			Иначе
				ПодатьЗаявкуНаПодключениеРПН = Направление.Подключить И ПризнакПоддержкиРПН;
			КонецЕсли;
			
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФТС Тогда
			
			ПризнакПоддержкиФТС = Направление.Доступен;
			
			Если ЭтоСкопированоеЗаявление Тогда
				ПодатьЗаявкуНаПодключениеФТС = ПодатьЗаявкуНаПодключениеФТС И ПризнакПоддержкиФТС;
			Иначе
				ПодатьЗаявкуНаПодключениеФТС = Направление.Подключить И ПризнакПоддержкиФТС;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НоваяСтрокаТаблицыОрганов()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Орган", 		Перечисления.ТипыКонтролирующихОрганов.ПустаяСсылка());
	ДополнительныеПараметры.Вставить("Доступен", 	Истина);
	ДополнительныеПараметры.Вставить("Подключить", 	Истина);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Функция ДобавитьВсеНаправленияФНС()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	РегистрацияВИФНС.КПП КАК КПП,
	                      |	РегистрацияВИФНС.Код КАК Код
	                      |ИЗ
	                      |	Справочник.РегистрацииВНалоговомОргане КАК РегистрацияВИФНС
	                      |ГДЕ
	                      |	(РегистрацияВИФНС.Владелец = &Организация
	                      |			ИЛИ РегистрацияВИФНС.Владелец = &ГоловнаяОрганизация)
	                      |	И РегистрацияВИФНС.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Организация", 		 Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация));
	
	Регистрации = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Регистрации);
	
КонецФункции

&НаСервере
Процедура ВосстановитьНаправленияПоУмолчаниюФНС()
	
	ПолучателиФНС.Очистить();
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.НовоеНаправление(ПолучателиФНС, ФНС, ДанныеОрганизации.КодНО, КПП);
	
	ВсеНаправленияФНС = ДобавитьВсеНаправленияФНС();
	
	Для каждого НаправлениеФНС Из ВсеНаправленияФНС Цикл
		КонтекстЭДОСервер.НовоеНаправление(ПолучателиФНС, ФНС, НаправлениеФНС.Код, НаправлениеФНС.КПП);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНаправленияПоУмолчаниюФСГС() 
	
	ПолучателиФСГС.Очистить();
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	// Адрес могли поменять вручную, поэтому сначала берем регион и введенного адреса
	КодРегиона = КодРегионаПоАдресу(АдресЮридическийЗначение);
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		КодРегиона = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(АдресЮридическийПредставление).Регион;
	КонецЕсли;
	
	КодОрганаФСГС = КонтекстЭДОСервер.ТОГСПоРегиону(КодРегиона, Спецоператор);
	
	// Берем из организации
	Если НЕ ЗначениеЗаполнено(КодОрганаФСГС) И НЕ ПустаяСтрока(ДанныеОрганизации.КодОрганаФСГС) Тогда
		КодОрганаФСГС = ДанныеОрганизации.КодОрганаФСГС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодОрганаФСГС) Тогда
		ДобавитьНовоеНаправлениеФСГСПоКодуОрганаФСГС(КодОрганаФСГС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовоеНаправлениеФСГСПоКодуОрганаФСГС(КодОрганаФСГС)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	НаименованиеФСГС = КонтекстЭДОСервер.НаименованиеТОГСаПоКоду(КодОрганаФСГС, Спецоператор);
	
	КонтекстЭДОСервер.НовоеНаправление(
		ПолучателиФСГС,
		ФСГС,
		КодОрганаФСГС,
		,
		НаименованиеФСГС);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРеквизитыФормы(ИННОрганизации = "") 

	АдресЮридическийЗначение               = "";
	АдресЮридическийПредставление          = "";
	АдресФактическийЗначение               = "";
	АдресФактическийПредставление          = "";
	ДругойСотрудник                        = Неопределено;
	КПП                                    = "";
	ОГРН                                   = "";
	КраткоеНаименование                    = "";
	ТелефонОсновной                        = "";
	ЭлектроннаяПочта                       = "";
	ЭлектроннаяПочтаДляПаролей             = "";
	РегНомерПФР                            = "";
	ПризнакОбособленногоПодразделения      = Ложь;
	ДругойСотрудник                        = "";
	ЭтоНотариусАдвокатИлиГКФХ              = Ложь;
	
	// Не очищаем ИНН, если его задали в форме
	Если ИННОрганизации = "" Тогда
		ИНН = "";
	КонецЕсли;
	
	ОчиститьДанныеСотрудника();
	ПолучателиФНС.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеСотрудника()
	
	ВладелецЭЦППодразделение       = "";
	ВладелецЭЦПДолжность           = "";
	ВладелецЭЦПФамилия             = "";
	ВладелецЭЦПИмя                 = "";
	ВладелецЭЦПОтчество            = "";
	ВладелецЭЦПСНИЛС               = "";
	ВладелецЭЦПВидДокумента        = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	ВладелецЭЦПСерияДокумента      = "";
	ВладелецЭЦПНомерДокумента      = "";
	ВладелецЭЦПДатаВыдачиДокумента = "";
	ВладелецЭЦПКемВыданДокумент    = "";
	ВладелецЭЦПДатаРождения        = Неопределено;
	ВладелецЭЦПМестоРождения       = Неопределено;
	ВладелецЭЦПКодПодразделения    = Неопределено;
	ВладелецЭЦППол                 = Неопределено;
	ВладелецЭЦПГражданство         = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ДругойСотрудник) Тогда
		ДругойСотрудник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДействияДляСкопированногоЗаявления()
	
	ЗаявлениеСозданоКопированием 			= Истина;
	ДанныеОрганизацииЗаполненыКопированием 	= Истина;
	ДанныеВладельцаЭЦПЗаполненыКопированием = Истина;
	
	Организация = Реквизит.Организация;
	
	Если НЕ ОрганизацияЗаполнена() Тогда
		Возврат;
	КонецЕсли;
	
	ДействияДляСкопированногоЗаявления_ЗаполнитьДанныеОрганизации();

	// Заполняем заявление на основе скопированного документа
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления();
	
	Если НЕ ИННОрганизацииЗаполнен() Тогда
		ИзменитьОформлениеНастроекНотариуса();
		Возврат;
	КонецЕсли;
	
	ДействияДляСкопированногоЗаявления_ЗаполнитьСвойстваВладельцаЭЦП();
	
	Если НЕ ЗапретитьИзменение Тогда
		ЗаполнитьЗаявлениеДаннымиИз1СКонтрагент();
	КонецЕсли;
	
	ИнициализироватьЗаголовокФормы();
	
	// Не инициализируем, а только меняем оформление,
	// так как все значения уже были скопированы.
	ИзменитьОформлениеОрганизации();
	ИзменитьОформлениеИНН();
	ИзменитьОформлениеКПП();
	ИзменитьОформлениеКраткогоНаименования(ЭтотОбъект);
	ИзменитьОформлениеВладельцаЭП();
	ИзменитьОформлениеПользователей();
	ИзменитьОформление1СЭДО();
	ИзменитьОформлениеНаправлений();
	ИзменитьОформлениеЮрАдреса(Истина);
	ИзменитьОформлениеОГРН(ЭтотОбъект, Истина);
	ИзменитьОформлениеНастроекНотариуса();
	
КонецПроцедуры

&НаСервере
Процедура ДействияДляСкопированногоЗаявления_ЗаполнитьСвойстваВладельцаЭЦП()
	
	// Определяем руководителя и гл бухгалтера
	ОпределитьОтветственныеЛицаОрганизации();

	Если ЗначениеЗаполнено(ВладелецЭЦП) Тогда
		
		Если ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") И Руководитель <> ВладелецЭЦП 
			ИЛИ ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") И ГлБухгалтер <> ВладелецЭЦП Тогда
			
			// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это был Руководитель или ГлБухгалтер, а
			// теперь Руководитель или ГлБухгалтер сменились в организации, то все данные по владельцу ЭЦП 
			// данные заполняются текущими сведениями, а не скопированными
			ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
			
		ИначеЕсли ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
			
			// Если в предыдущем заявлении был сохранен владелец ЭЦП, и это Сотрудник, то все данные по владельцу ЭЦП 
			// данные заполняются скопированными сведениями
			ДругойСотрудник = ВладелецЭЦП;
		КонецЕсли;
	Иначе
		// Если реквизит предыдущего заявления Владелец ЭЦП пустой, то сохраняем только позицию переключателя:
		// руководитель, гл. бухгалтер или сотрудник, все остальные данные заполняются текущими сведениями,
		// а не скопированными
		ДанныеВладельцаЭЦПЗаполненыКопированием = Ложь;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ДействияДляСкопированногоЗаявления_ЗаполнитьДанныеОрганизации()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Организация", 	?(ЗначениеЗаполнено(Организация),Организация,Неопределено));
	СтруктураРеквизитов.Вставить("ПриОткрытии",		Истина);
	СтруктураРеквизитов.Вставить("АдресЮридический",);
	СтруктураРеквизитов.Вставить("АдресФактический",);
	
	КонтекстЭДОСервер.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеОрганизацииИОтветственныхЛиц = КонтекстЭДОСервер.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Если ДанныеОрганизацииИОтветственныхЛиц.Свойство("СтруктураДанныхОрганизации") Тогда
		ДанныеОрганизации = ДанныеОрганизацииИОтветственныхЛиц.СтруктураДанныхОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияЗаполнена()
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат Истина;
	Иначе
		
		Если ИспользуетсяОднаОрганизация И НЕ ЗначениеЗаполнено(Организация) Тогда
			ПрограммноеЗакрытие = Истина;
			Элементы.НадписьОбОтсутствииОрганизации.Заголовок = НСтр("ru = 'Перед началом подключения создайте организацию, которую требуется подключить к 1С-Отчетности'");
		КонецЕсли;
	
		ИзменитьОформлениеОрганизации();
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеИНН(ЭтоИзменениеИНН = Ложь)
	
	// Активность
	Если ПоказыватьИНН И ИНН = "" Тогда
		ЭтотОбъект.ТекущийЭлемент = Элементы.ИНН;
	КонецЕсли;
	
	// Видимость
	Элементы.ГруппаИНН.Видимость = ПоказыватьИНН;
	
	// Проверка корректности
	ИННКорректный = Истина;
	РезультатПроверки = ПроверитьИНН(ЭтотОбъект, ИННКорректный, Ложь);
	
	ПоказыватьПредпросмотрНаименования = ЭтоИзменениеИНН И ИННКорректный;
	ОткрытьПоляЗаявления = НЕ ЭтоИзменениеИНН И (ИННКорректный И ПоказыватьИНН ИЛИ НЕ ПоказыватьИНН);
	
	// Если ИНН введен некорректно, то скрываем все поля ниже ИНН
	Элементы.ГруппаСведенияОрганизации.Видимость      = ОткрытьПоляЗаявления;
	Элементы.ГруппаВладелецСканыИПодписание.Видимость = ОткрытьПоляЗаявления;
	Элементы.ГруппаПодписаниеИОтправка.Видимость      = ОткрытьПоляЗаявления;
	
	// Кнопка по умолчанию
	Если ОткрытьПоляЗаявления Тогда
		Элементы.Отправить.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Заполнить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если НЕ ПоказыватьИНН Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапретитьИзменение Тогда
		Элементы.ИНН.ТолькоПросмотр  = Истина;
		Элементы.Заполнить.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	// Заголовок поля ИНН
	Если ИспользуетсяОднаОрганизация И НЕ ЗначениеЗаполнено(ИНН) Тогда
		Элементы.ЗаголовокИНН.Заголовок = НСтр("ru = 'Укажите ИНН вашей организации:'");
	КонецЕсли;
	
	// Жирность. Заголовок ИНН жирный, если организация одна
	Если ИспользуетсяОднаОрганизация Тогда
		Элементы.ЗаголовокИНН.Шрифт = Новый Шрифт(Элементы.ЗаголовокИНН.Шрифт,,,Истина);
	Иначе
		Элементы.ЗаголовокИНН.Шрифт = Новый Шрифт(Элементы.ЗаголовокИНН.Шрифт,,,Ложь);
	КонецЕсли;
	
	// Красная ошибка или серое название организации
	Если РезультатПроверки.ЕстьОшибка Тогда
		
		Если РезультатПроверки.Пустой Тогда
			Элементы.ГруппаИННКомментарий.Видимость  = Ложь;
		Иначе
			Элементы.ИННКомментарий.Заголовок  = РезультатПроверки.ТекстОшибки;
			Элементы.ИННКомментарий.ЦветТекста = КрасныйЦвет;
			Элементы.ГруппаИННКомментарий.Видимость  = Истина;
		КонецЕсли;
		
	ИначеЕсли ПоказыватьПредпросмотрНаименования Тогда
		
		// Выводим наименование
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами")
			ИЛИ ПризнакОбособленногоПодразделения Тогда
			Возврат;
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		Если ЭтоЮридическоеЛицо Тогда
			РеквизитыОрганизации1СКонтрагент = Модуль.РеквизитыЮридическогоЛицаПоИНН(ИНН);
		Иначе
			РеквизитыОрганизации1СКонтрагент = Модуль.РеквизитыПредпринимателяПоИНН(ИНН);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации1СКонтрагент.ОписаниеОшибки) Тогда
			Элементы.ИННКомментарий.Заголовок = "";
			Возврат;
		КонецЕсли;
		
		Элементы.ИННКомментарий.Заголовок  = СокращенноеНаименование(РеквизитыОрганизации1СКонтрагент.НаименованиеСокращенное);
		Элементы.ИННКомментарий.ЦветТекста = СерыйЦвет;
		Элементы.ГруппаИННКомментарий.Видимость  = Истина;
		
	Иначе
		Элементы.ГруппаИННКомментарий.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьИНН(Форма, МастерДалее = Истина, ВыводитьСообщения = Истина)
	
	РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
	РезультатПроверки.Поле     = "ИНН";
	РезультатПроверки.Реквизит = "ИННКомментарий";
	
	ИНН = СокрЛП(Форма.ИНН);
	
	// ИНН
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Укажите ИНН организации для начала подключения к 1С-Отчетности'");
		РезультатПроверки.Пустой	  = Истина;
		
	Иначе
		
		Если Форма.ЭтоЮридическоеЛицо И СтрДлина(ИНН) <> 10 Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ИНН организации должен состоять из 10 цифр'");
			РезультатПроверки.Пустой	  = СтрДлина(ИНН) < 10;
			
		ИначеЕсли НЕ Форма.ЭтоЮридическоеЛицо И СтрДлина(ИНН) <> 12 Тогда
				
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'ИНН предпринимателя должен состоять из 12 цифр'");
			РезультатПроверки.Пустой	  = СтрДлина(ИНН) < 12;

		Иначе
			РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Форма.ЭтоЮридическоеЛицо, РезультатПроверки.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ИННОрганизацииЗаполнен()
	
	ПроверкаПройдена = Истина;
	ТекстОшибки = "";
	
	ИННКорректный = Истина;
	РезультатПроверки = ПроверитьИНН(ЭтотОбъект, ИННКорректный, Ложь);
	
	Если НЕ ИННКорректный Тогда
		ПроверкаПройдена = Ложь;
		ПоказыватьИНН    = Истина;
		ИзменитьОформлениеИНН(Истина);
		Элементы.ИНН.ОбновитьТекстРедактирования();
		ИзменитьОформлениеОрганизации();
	КонецЕсли;

	Возврат ПроверкаПройдена;
	
КонецФункции

&НаСервере
Процедура ИзменитьОформлениеОрганизации()
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Элементы.РамкаОрганизации.Видимость = НЕ ИспользуетсяОднаОрганизация;
		АктивизироватьСтраницу(ЭтотОбъект, Элементы.ОсновнаяСтраница);
	Иначе
		Элементы.РамкаОрганизации1.Видимость = НЕ ИспользуетсяОднаОрганизация;
		АктивизироватьСтраницу(ЭтотОбъект, Элементы.НеЗаполненаОрганизация);
	КонецЕсли;
	
	Если ЗапретитьИзменение Тогда
		// Убираем желтый фон у организации
		Элементы.РамкаОрганизации.ЦветФона  = Новый Цвет(254, 255, 255);
		Элементы.Организация.ТолькоПросмотр = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтветственныеЛицаОрганизации()
	
	Руководитель	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Организация); 
	ГлБухгалтер		= ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Организация); 
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЗаголовокФормы()

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДобавитьОрганизациюВЗаголовок(
		ЭтотОбъект.Заголовок, 
		ИспользуетсяОднаОрганизация, 
		КраткоеНаименование,
		// Разный заголовок!
		НСтр("ru = 'Подключение к 1С-Отчетности'"));
		
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления()
	
	Спецоператор 	  					 = Реквизит.СпецоператорСвязи;
	СпецоператорСвязи 					 = Спецоператор;
	Организация							 = Реквизит.Организация;
	КраткоеНаименование					 = Реквизит.КраткоеНаименование;
	ИНН									 = Реквизит.ИНН;
	КПП									 = Реквизит.КПП;
	ПризнакОбособленногоПодразделения	 = Реквизит.ПризнакОбособленногоПодразделения;
	ТелефонОсновной						 = Реквизит.ТелефонОсновной;
	ТелефонМобильный					 = Реквизит.ТелефонМобильный;
	ЭлектроннаяПочта					 = Реквизит.ЭлектроннаяПочта;
	ЭтоЮридическоеЛицо					 = Реквизит.ТипОрганизации;
	НомерОсновнойПоставки1с				 = Реквизит.НомерОсновнойПоставки1с;
	КодРегионаФСРАР						 = Реквизит.КодРегионаФСРАР;
	ОГРН								 = Реквизит.ОГРН;
	Тариф								 = Реквизит.Тариф;
	ПолучатьСМС 						 = ЗначениеЗаполнено(ТелефонМобильный);
	КодРегиона 							 = КодРегионаПоАдресу(АдресЮридическийЗначение);
	СертификатИзКопии					 = Реквизит.РеквизитыСертификата.Получить();
	ЭтоЭлектронноеПодписаниеИзКопии 	 = Реквизит.ПодписатьЭП;
	ЭтоНотариусАдвокатИлиГКФХ 			 = Реквизит.ЭтоНотариусАдвокатИлиГКФХ;
	ВключатьЛицензиюКриптоПроВСертификат = Реквизит.ВключитьЛицензиюКриптоПро;
	
	ПоказыватьИНН = НЕ ЗначениеЗаполнено(СокрЛП(ИНН));
	ПоказыватьКраткоеНаименование = НаименованиеПустое();
	
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_ЭПВОблаке(Реквизит);
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_ВладелецЭП(Реквизит);
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Адреса(Реквизит);
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Направления(Реквизит);
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Пользователи(Реквизит);
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_1СЭДО(Реквизит);
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Документы();
	
	Если Параметры.ЭтоОткрытиеЗаявления Тогда
		
		Если Реквизит.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.ПустаяСсылка()
			И Реквизит.Статус <> Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено Тогда
			
			ЗапретитьИзменение 		= Истина;
			СертификатДляПодписания = СертификатИзКопии;
			
		КонецЕсли;
		
		// Чтобы при записи документа не создавался документ с новым номером
		ЗначениеВРеквизитФормы(Реквизит.ПолучитьОбъект(), "ДокументЗаявление");
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_ЭПВОблаке(Реквизит)

	// ЭП в облаке
	РежимРаботыСКлючами					= ?(Реквизит.ЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	РежимРаботыСКлючамиИзКопии			= ?(Реквизит.ЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	Если Реквизит.ЭлектроннаяПодписьВМоделиСервиса Тогда
		ИдентификаторПроверкиТелефонаДляПаролейИзКопии = Реквизит.ИдентификаторПроверкиТелефонаДляПаролей;
		ИдентификаторПроверкиЭлектроннойПочтыДляПаролейИзКопии = Реквизит.ИдентификаторПроверкиЭлектроннойПочтыДляПаролей;
	КонецЕсли;
	ТелефонДляПаролей					= Реквизит.ТелефонМобильныйДляАвторизации;
	ТелефонДляПаролейИзКопии			= Реквизит.ТелефонМобильныйДляАвторизации;
	ЭлектроннаяПочтаДляПаролей			= ЭлектроннаяПочта;
	ЭлектроннаяПочтаДляПаролейИзКопии	= ЭлектроннаяПочта;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_ВладелецЭП(Реквизит)
	
	ВладелецЭЦП					= Реквизит.ВладелецЭЦП;
	ВладелецЭЦПФамилия			= Реквизит.ВладелецЭЦПФамилия;
	ВладелецЭЦПИмя				= Реквизит.ВладелецЭЦПИмя;
	ВладелецЭЦПОтчество			= Реквизит.ВладелецЭЦПОтчество;
	ВладелецЭЦПДолжность		= Реквизит.ВладелецЭЦПДолжность;
	ВладелецЭЦППодразделение	= Реквизит.ВладелецЭЦППодразделение;
	ВладелецЭЦПСНИЛС			= Реквизит.ВладелецЭЦПСНИЛС;
	ВладелецЭЦПТип				= Реквизит.ВладелецЭЦПТип;
	
	ВладелецЭЦПВидДокумента		= Реквизит.ВладелецЭЦПВидДокумента;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ВладелецЭЦПВидДокумента = КонтекстЭДОСервер.СкорректироватьВидУдостоверения(ВладелецЭЦПВидДокумента);
	
	Если ЗначениеЗаполнено(ВладелецЭЦПВидДокумента) Тогда
		ВладелецЭЦПСерияДокумента		= Реквизит.ВладелецЭЦПСерияДокумента;
		ВладелецЭЦПНомерДокумента		= Реквизит.ВладелецЭЦПНомерДокумента;
		ВладелецЭЦПДатаВыдачиДокумента	= Реквизит.ВладелецЭЦПДатаВыдачиДокумента;
		ВладелецЭЦПКемВыданДокумент		= Реквизит.ВладелецЭЦПКемВыданДокумент;
		ВладелецЭЦПДатаРождения			= Реквизит.ВладелецЭЦПДатаРождения;
		ВладелецЭЦПМестоРождения		= Реквизит.ВладелецЭЦПМестоРождения;
		ВладелецЭЦПКодПодразделения		= Реквизит.ВладелецЭЦПКодПодразделения;
		ВладелецЭЦППол					= Реквизит.ВладелецЭЦППол;
		ВладелецЭЦПГражданство			= Реквизит.ВладелецЭЦПГражданство;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Адреса(Реквизит)

	// Заполнение юр. адреса
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПреобразоватьАдресВФорматXML(
		Реквизит.АдресЮридический, 
		АдресЮридическийЗначение, 
		АдресЮридическийПредставление,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		
	// Заполнение факт. адреса
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПреобразоватьАдресВФорматXML(
		Реквизит.АдресФактический, 
		АдресФактическийЗначение, 
		АдресФактическийПредставление,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_1СЭДО(Реквизит)
	
	//подключение ЭДО
	Реквизит_ПодключитьЭДО  = Реквизит.ПодключитьЭДО;
	ОператорЭДО 			= Реквизит.ОператорЭДО;
	КодНалоговогоОрганаЭДО 	= Реквизит.КодНалоговогоОрганаЭДО;
	
	// Сначала инициализируем, а затем устанавливаем переключатель в нужное положение.
	ИнициализироватьПараметрыЭДО();
	ПодключитьЭДО = Реквизит_ПодключитьЭДО;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Пользователи(Реквизит)
	
	ПользователиУчетнойЗаписи = Новый Массив;
	Для каждого ПользовательУчетнойЗаписи Из Реквизит.ПользователиУчетнойЗаписи Цикл
		ПользователиУчетнойЗаписи.Добавить(ПользовательУчетнойЗаписи.Пользователь);
	КонецЦикла;
	
	Если ПользователиУчетнойЗаписи.Количество() = 0 Тогда
		ИнициализироватьПользователей();
	Иначе
		ЗаполнитьСписокПользователей(ПользователиУчетнойЗаписи);
	КонецЕсли;
		
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Направления(Реквизит)
	
	ПолучателиФНС.Очистить();
	Для Каждого СтрокаНаправления из Реквизит.Получатели цикл 
		
		Если СтрокаНаправления.ТипПолучателя = ФНС Тогда
			
			СдаватьВФНС = Истина;
			КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
			КонтекстЭДОСервер.НовоеНаправление(ПолучателиФНС, ФНС, СтрокаНаправления.КодПолучателя, СтрокаНаправления.КПП);
			
		ИначеЕсли СтрокаНаправления.ТипПолучателя	=  ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			
			СдаватьВПФР = Истина;
			КодПФР 		= СтрокаНаправления.КодПолучателя;
			РегНомерПФР = Реквизит.РегНомерПФР;
			
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС") Тогда
			
			СдаватьВФСС = Истина;
			
		ИначеЕсли СтрокаНаправления.ТипПолучателя = ФСГС Тогда
			
			СдаватьВРосстат = Истина;
			ДобавитьНовоеНаправлениеФСГСПоКодуОрганаФСГС(СтрокаНаправления.КодПолучателя);
			
		КонецЕсли;
	КонецЦикла;
	
	ПодатьЗаявкуНаСертификатДляФСРАР	= Реквизит.ПодатьЗаявкуНаСертификатДляФСРАР;
	ПодатьЗаявкуНаПодключениеРПН		= Реквизит.ПодатьЗаявкуНаПодключениеРПН;
	ПодатьЗаявкуНаПодключениеФТС		= Реквизит.ПодатьЗаявкуНаПодключениеФТС;
	
	ОпределитьПодключаемыеНаправленияСдачиОтчетности(Истина);
	
	// Если в документе не подключается направление, то таблица/реквизит оказываются пустыми
	// и поэтому оказывается сложным подключить это направление.
	ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_НеподключенныеНаправления(Реквизит);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_НеподключенныеНаправления(Реквизит)
	
	Если ПризнакПоддержкиФНС И НЕ СдаватьВФНС Тогда
		ВосстановитьНаправленияПоУмолчаниюФНС();
	КонецЕсли;
	
	Если ПризнакПоддержкиРосстат И НЕ СдаватьВРосстат Тогда
		ВосстановитьНаправленияПоУмолчаниюФСГС();
	КонецЕсли;
	
	Если ПризнакПоддержкиПФР И НЕ СдаватьВПФР Тогда
		РегНомерПФР = ДанныеОрганизации.РегНомПФР;
		КодПФР 		= КодПФР(ДанныеОрганизации);
	КонецЕсли;
	
	Если ПризнакПоддержкиФСРАР И НЕ ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		КодРегионаФСРАР = КодРегиона;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявлениеДаннымиИзСкопированногоЗаявления_Документы()
	
	ФайлыПоДокументам = Новый Соответствие;
	Для Каждого ЭлектронныйДокумент Из Реквизит.ЭлектронныеДокументы Цикл
		
		// Среди присоединенных документов могут еще быть файлы архивов, текст заявления, подписи
		ЭтоСкан = ВидыДокументов(ЭтотОбъект).Свойство(ЭлектронныйДокумент.Документ);
		Если НЕ ЭтоСкан Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлектронныйДокумент.Файл, УникальныйИдентификатор, Истина);
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Размер", 		ДанныеФайла.Размер);
		ОписаниеФайла.Вставить("Адрес", 		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ОписаниеФайла.Вставить("ИсходноеИмя", 	ДанныеФайла.ИмяФайла);
		ОписаниеФайла.Вставить("Документ", 		ЭлектронныйДокумент.Документ);
		ФайлыДокументов.Добавить(ОписаниеФайла);
		
		Если ФайлыПоДокументам.Получить(ЭлектронныйДокумент.Документ) = Неопределено Тогда
			ФайлыПоДокументам.Вставить(ЭлектронныйДокумент.Документ, Новый Массив);
		КонецЕсли;
		
		ФайлыПоДокументам[ЭлектронныйДокумент.Документ].Добавить(ОписаниеФайла);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеФайла(ПолноеИмя, Адрес)
	
	Файл = Новый Файл(ПолноеИмя);
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя", 			Файл.Имя);
	// Для совместимости ДополнитьОписанияРазмерамиФайлов и ДобавитьФайлыСПредпросмотром
	ОписаниеФайла.Вставить("ИсходноеИмя", 	Файл.Имя);
	ОписаниеФайла.Вставить("Адрес", 		Адрес);
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(ОписаниеФайла);
	
	ОписанияФайлов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ДополнитьОписанияРазмерамиФайлов(ОписанияФайлов);
	Возврат ОписанияФайлов;
	
КонецФункции

&НаСервере
Процедура ИнициализацияДляЭПВМоделиСервиса()
	
	ДоступнаЭлектроннаяПодписьВМоделиСервиса = ЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно();
	
	Если НЕ ЗаявлениеСозданоКопированием Тогда
		РежимРаботыСКлючами = ?(ДоступнаЭлектроннаяПодписьВМоделиСервиса, 1, 2);
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ИзменитьОформлениеФормыПриСозданииНаСервере()
	
	ИзменитьОформлениеТарифа(ЭтотОбъект);
	// Предварительно определяем список документов. 
	// Окончательно список будет перерисован после поиска сертификатов
	ИзменитьОформлениеДокументов(ЭтотОбъект, Истина);
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтотОбъект);
	ИзменитьОформлениеПанелиОтправки();
	ИзменитьОформлениеРасширенныхНастроек(Истина);
	ИзменитьОформлениеТехническойИнформации(ЭтотОбъект);
	
	ИзменитьОформлениеФормыПриСозданииНаСервереПриЗапретеИзменения();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеФормыПриСозданииНаСервереПриЗапретеИзменения()
	
	Если ЗапретитьИзменение Тогда
		
		// Чтобы при закрытии формы не возникало вопросов
		ПрограммноеЗакрытие = Истина;
		
		// Панель подписания завяления подтягиваем ближу к верху
		Элементы.ГруппаПодписаниеИОтправка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Авто;
		
		//Прячем кнопку отправки
		ИзменитьОформлениеСпособаПодписания(ЭтотОбъект);
		
		Элементы.ВыбратьВсе.Видимость = Ложь;
		
	КонецЕсли;
	
	ИзменитьОформлениеЧтоДелатьДальше();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеЧтоДелатьДальше()
	
	ЭтотОбъект.Прочитать();
	
	Элементы.ЧтоДелатьДальше.Видимость = ЗапретитьИзменение
		И НЕ ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеНаправлений()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	
	Если (НЕ СдаватьВФНС ИЛИ НЕ ПризнакПоддержкиФНС)
		И (НЕ СдаватьВПФР ИЛИ НЕ ПризнакПоддержкиПФР)
		И (НЕ СдаватьВРосстат ИЛИ НЕ ПризнакПоддержкиРосстат)
		И (НЕ СдаватьВФСС ИЛИ НЕ ПризнакПоддержкиФСС)
		И (НЕ ПодатьЗаявкуНаСертификатДляФСРАР ИЛИ НЕ ПризнакПоддержкиФСРАР)
		И (НЕ ПодатьЗаявкуНаПодключениеРПН ИЛИ НЕ ПризнакПоддержкиРПН)
		И (НЕ ПодатьЗаявкуНаПодключениеФТС ИЛИ НЕ ПризнакПоддержкиФТС) Тогда
		
		// Ни один орган не выбран или не доступен
		
		Элементы.УказатьНаправления.Заголовок  = НСтр("ru = 'Уточнить'");
		Элементы.УказатьНаправления.ЦветТекста = КрасныйЦвет;
		
	ИначеЕсли (СдаватьВФНС И ПризнакПоддержкиФНС ИЛИ НЕ ПризнакПоддержкиФНС)
		И (СдаватьВПФР И ПризнакПоддержкиПФР ИЛИ НЕ ПризнакПоддержкиПФР)
		И (СдаватьВРосстат И ПризнакПоддержкиРосстат ИЛИ НЕ ПризнакПоддержкиРосстат)
		И (СдаватьВФСС И ПризнакПоддержкиФСС ИЛИ НЕ ПризнакПоддержкиФСС)
		И (ПодатьЗаявкуНаСертификатДляФСРАР И ПризнакПоддержкиФСРАР ИЛИ НЕ ПризнакПоддержкиФСРАР)
		И (ПодатьЗаявкуНаПодключениеРПН И ПризнакПоддержкиРПН ИЛИ НЕ ПризнакПоддержкиРПН)
		И (ПодатьЗаявкуНаПодключениеФТС И ПризнакПоддержкиФТС ИЛИ НЕ ПризнакПоддержкиФТС) Тогда
		
		// Выбраны все органы
		Элементы.УказатьНаправления.Заголовок  = НСтр("ru = 'Все направления'");
		Элементы.УказатьНаправления.ЦветТекста = Новый Цвет();
		
	Иначе
		
		// Выбрана часть органов
		
		Органы = Новый Массив;
		
		// ФНС
		Если СдаватьВФНС И ПризнакПоддержкиФНС Тогда
			
			ПредставлениеОргана = НСтр("ru = 'ФНС'");
			КоличествоОрганов   = ПолучателиФНС.Количество();
			
			Если КоличествоОрганов > 1 Тогда
				ПредставлениеОргана = ПредставлениеОргана + "(" + Строка(КоличествоОрганов) + ")";
			КонецЕсли;
			
			Органы.Добавить(ПредставлениеОргана);
			
		КонецЕсли;
		
		// ПФР
		Если СдаватьВПФР И ПризнакПоддержкиПФР Тогда
			Органы.Добавить(НСтр("ru = 'ПФР'"));
		КонецЕсли;
		
		// Росстат
		Если СдаватьВРосстат И ПризнакПоддержкиРосстат Тогда
			
			ПредставлениеОргана = НСтр("ru = 'Росстат'");
			КоличествоОрганов   = ПолучателиФСГС.Количество();
			
			Если КоличествоОрганов > 1 Тогда
				ПредставлениеОргана = ПредставлениеОргана + "(" + Строка(КоличествоОрганов) + ")";
			КонецЕсли;
			
			Органы.Добавить(ПредставлениеОргана);
			
		КонецЕсли;
		
		// ФСС
		Если СдаватьВФСС И ПризнакПоддержкиФСС Тогда
			Органы.Добавить(НСтр("ru = 'ФСС'"));
		КонецЕсли;
		
		// ФСРАР
		Если ПодатьЗаявкуНаСертификатДляФСРАР И ПризнакПоддержкиФСРАР Тогда
			Органы.Добавить(НСтр("ru = 'ФСРАР'"));
		КонецЕсли;
		
		// РПН
		Если ПодатьЗаявкуНаПодключениеРПН И ПризнакПоддержкиРПН Тогда
			Органы.Добавить(НСтр("ru = 'РПН'"));
		КонецЕсли;
		
		// ФТС
		Если ПодатьЗаявкуНаПодключениеФТС И ПризнакПоддержкиФТС Тогда
			Органы.Добавить(НСтр("ru = 'ФТС'"));
		КонецЕсли;
		
		ПредставлениеОрганов 	= СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Органы, ", ");
		ПозицияПоследнейЗапятой = СтрНайти(ПредставлениеОрганов, ",", НаправлениеПоиска.СКонца);
		
		ЛеваяЧасть  = СокрЛП(Лев(ПредставлениеОрганов, ПозицияПоследнейЗапятой - 1));
		ПраваяЧасть = СокрЛП(Сред(ПредставлениеОрганов, ПозицияПоследнейЗапятой + 1));
		
		// Добавляем "и" перед последним словом
		Если ЛеваяЧасть = "" Тогда
			ПредставлениеОрганов = ПраваяЧасть;
		Иначе
			ПредставлениеОрганов = ЛеваяЧасть + " и " + ПраваяЧасть;
		КонецЕсли;
		
		Элементы.УказатьНаправления.Заголовок  = ПредставлениеОрганов;
		
	КонецЕсли;
	
	Если ПроверитьНаправления(, Ложь) Тогда 
		Элементы.УказатьНаправления.ЦветТекста = Новый Цвет();
	Иначе
		Элементы.УказатьНаправления.ЦветТекста = КрасныйЦвет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеПаспортныхДанных()
	
	// Красным цветом выделяем при ошибке
	ДанныеКорректны = Истина;
	ПроверитьПаспортныеДанные(ДанныеКорректны, Ложь);

	Подстроки = Новый Массив;
	Подстроки.Добавить(ВладелецЭЦПВидДокумента);
	Подстроки.Добавить(ВладелецЭЦПСерияДокумента);
	Подстроки.Добавить(ВладелецЭЦПНомерДокумента);
	
	Представление = СокрЛП(СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Подстроки, " "));
	Если Представление = "" Тогда
		Представление = НСтр("ru = 'Уточнить'");
	КонецЕсли;
	
	Если ДанныеКорректны Тогда
		Элементы.ПаспортныеДанные.ЦветТекста = Новый Цвет();
	Иначе
		Элементы.ПаспортныеДанные.ЦветТекста = КрасныйЦвет;
	КонецЕсли;
	
	Элементы.ПаспортныеДанные.Заголовок  = Представление;
	
КонецПроцедуры

&НаСервере
Процедура НачатьОпределениеКодаАбонента()

	Если НЕ РазделениеВключено ИЛИ ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	АдресЗаданияПоПолучениюКодаРегистрации = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(АдресЗаданияПоПолучениюКодаРегистрации);
	
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.КодРегистрацииПродуктаВМоделиСервиса", ДополнительныеПараметры);

КонецПроцедуры

&НаСервере
Процедура НачатьОпределениеКонтактовПФР()

	Если ЗапретитьИзменение Тогда
		Возврат;
	КОнецЕсли;
	
	АдресЗаданияПоПолучениюКонтактовПФР = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	КодРегиона = КодРегионаПоАдресу(АдресЮридическийЗначение);
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(АдресЗаданияПоПолучениюКонтактовПФР);
	ДополнительныеПараметры.Добавить(КодРегиона);
	ДополнительныеПараметры.Добавить(КодПФР);
	
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьКонтактыПФР", ДополнительныеПараметры);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеТарифа(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ЭтоРежимБесплатнойНулевойОтчетности Тогда
		
		Если ЗначениеЗаполнено(Форма.Тариф) Тогда
			Элементы.ВыбратьТариф.ЦветТекста = Новый Цвет();
			Элементы.ВыбратьТариф.Заголовок  = Форма.Тариф;
		Иначе
			Элементы.ВыбратьТариф.ЦветТекста = Форма.КрасныйЦвет;
			Элементы.ВыбратьТариф.Заголовок  = НСтр("ru = 'Выбрать'");
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаТариф.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОрганизацию()
	
	// Получаем организацию для случая одной организации в базе 
	Если ИспользуетсяОднаОрганизация Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
		Организация = Модуль.ОрганизацияПоУмолчанию();
		
	Иначе
		
		// Получаем организацию из параметров
		Организация = Параметры.Организация;
		
		Если НЕ ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Реквизит) Тогда 
			Организация = Реквизит.Организация;
		КонецЕсли;
		
	КонецЕсли;
		
	ПредыдущееЗначениеОрганизации = Организация;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеРасширенныхНастроек(ПриОткрытии = Ложь)
	
	ВыведенТолькоИНН = НЕ Элементы.ГруппаСведенияОрганизации.Видимость;
	
	Элементы.РасширенныеНастройки.Видимость 	= Ложь;
	Элементы.РасширенныеНастройкиДоп.Видимость  = Ложь;

	Если НЕ ПриОткрытии И НЕ ВыведенТолькоИНН Тогда
		
		Если ИспользуетсяОднаОрганизация Тогда
			АктивнаяНастройка = Элементы.РасширенныеНастройкиДоп;
		Иначе
			АктивнаяНастройка = Элементы.РасширенныеНастройки;
		КонецЕсли;
		
		АктивнаяНастройка.Видимость = Истина;
		
		// Проверка
		ЗаполненыКорректно = ПроверитьРасширенныеНастройки(, Ложь);
		
		Если ЗаполненыКорректно Тогда
			АктивнаяНастройка.ЦветТекста = Новый Цвет;
		Иначе
			АктивнаяНастройка.ЦветТекста = КрасныйЦвет;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область НулевкаИБизнесСтарт

&НаСервере
Процедура УстановитьНастройкиРежимаОграниченнойФункциональности()

	ЭтоРежимОграниченнойФункциональности = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭтоРежимОграниченнойФункциональности();
	ЭтоРежимБесплатнойНулевойОтчетности  = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭтоРежимБесплатнойНулевойОтчетности();
	
	// Для тестирования нулевки:
	// ЭтоРежимБесплатнойНулевойОтчетности = Истина;
	
	Если ЭтоРежимБесплатнойНулевойОтчетности Тогда
		
		СсылкаПерейдитеНаПлатныйТариф = ЭлектронныйДокументооборотСКонтролирующимиОрганами.СсылкаПерейдитеНаПлатныйТариф();
		
		// Для тестирования нулевки:
		// СсылкаПерейдитеНаПлатныйТариф = "https://1cnul.ru/tarif/";
		
		ОпределитьТариф();
		Если ЗначениеЗаполнено(Тариф) Тогда
			Элементы.ГруппаТариф.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ЗаголовокДляПодписания.Заголовок = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Подписание заявления:'"),
			Новый Шрифт(,, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭПВОблаке

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПеременныеДляПроверкиТелефона(Форма, ПриОткрытии = Ложь)
	
	Если ПриОткрытии И Форма.ИдентификаторПроверкиТелефонаДляПаролейИзКопии <> "" Тогда
		
		// Если заявление скопировано, повторно телефон не проверяем
		Форма.ПроверкаТелефонДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок());
		
		Форма.ПроверкаТелефонДляПаролей.Значение 				= ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(Форма.ТелефонДляПаролейИзКопии);
		Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено 		= Истина;
		Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 	= Ложь;
		Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 	= Истина;
		Форма.ПроверкаТелефонДляПаролей.КодОтправлен 			= Истина;
		Форма.ПроверкаТелефонДляПаролей.ИдентификаторПроверки 	= Форма.ИдентификаторПроверкиТелефонаДляПаролейИзКопии;

	Иначе
		Форма.ПроверкаТелефонДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), "", Ложь, Ложь, "", Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПеременныеДляПроверкиЭлектроннойПочты(Форма, ПриОткрытии = Ложь)
	
	Если ПриОткрытии И Форма.ИдентификаторПроверкиЭлектроннойПочтыДляПаролейИзКопии <> "" Тогда
		
		// Если заявление скопировано, повторно почту не проверяем
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок());
		
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.Значение 				= СокрЛП(Форма.ЭлектроннаяПочтаДляПаролейИзКопии);
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено 		= Истина;
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка 	= Ложь;
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено = Истина;
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен 			= Истина;
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки 	= Форма.ИдентификаторПроверкиЭлектроннойПочтыДляПаролейИзКопии;
		
	Иначе
		Форма.ПроверкаЭлектроннаяПочтаДляПаролей = Новый Структура(ПолучитьСвойстваДляПроверок(), "", Ложь, Ложь, "", Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСвойстваДляПроверок()
	
	Возврат "Значение,ЗначениеВведено,ВыполняетсяПроверка,ИдентификаторПроверки,ПодтверждениеВыполнено,КодОтправлен";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеТелефонаИПочтыДляПаролей(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоЭПВОблаке = Форма.РежимРаботыСКлючами = 1;
			
	// Телефон для паролей
	Элементы.ПроверитьНомер.Видимость = 
		ЭтоЭПВОблаке
		И Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка
		И НЕ Форма.ЗапретитьИзменение;
		
	Элементы.КартинкаТелефонПроверен.Видимость = 
		ЭтоЭПВОблаке
		И НЕ Элементы.ПроверитьНомер.Видимость 
		И Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
	
	Элементы.ГруппаКодПодтвержденияТелефон.Видимость =
		ЭтоЭПВОблаке
		И Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено;
		
	Элементы.ОтправитьКодПовторноТелефон.Видимость = Не Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
	Элементы.НадписьОбратногоОтсчетаТелефон.Видимость = Форма.ПроверкаТелефонДляПаролей.КодОтправлен;
	
	Элементы.ТелефонДляПаролей.ТолькоПросмотр = 
		ЭтоЭПВОблаке
		И Форма.ПроверкаТелефонДляПаролей.ЗначениеВведено
		И Не Форма.ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено
		И Форма.ПроверкаТелефонДляПаролей.ВыполняетсяПроверка
		ИЛИ Форма.ЗапретитьИзменение;
		
	// Текст ошибки проверки телефона
	РезультатПроверки = ПроверитьТелефонВладельцаЭП(Форма,,Ложь);
	ПоказатьОшибку    = НЕ РезультатПроверки.Пустой И РезультатПроверки.ТекстОшибки <> "";
	Элементы.ПроверкаТелефонаДляПаролей.Видимость = ПоказатьОшибку;
	
	Если ПоказатьОшибку Тогда
		Форма.ПроверкаТелефонаДляПаролей = РезультатПроверки.ТекстОшибки;
	КонецЕсли;
	
	// Электронная почта для паролей
	Элементы.ПроверитьАдрес.Видимость = ЭтоЭПВОблаке
		И Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка
		И НЕ Форма.ЗапретитьИзменение;
		
	Элементы.КартинкаЭлектроннаяПочтаПроверена.Видимость = 
		ЭтоЭПВОблаке
		И НЕ Элементы.ПроверитьАдрес.Видимость 
		И Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено;

	Элементы.ГруппаКодПодтвержденияЭлектроннаяПочта.Видимость =
		ЭтоЭПВОблаке
		И Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка 
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено;
		
	Элементы.ОтправитьКодПовторноЭлектроннаяПочта.Видимость = Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен;
	Элементы.НадписьОбратногоОтсчетаЭлектроннаяПочта.Видимость = Форма.ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен;
	
	Элементы.ЭлектроннаяПочтаДляПаролей.ТолькоПросмотр = ЭтоЭПВОблаке
		И Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено
		И Не Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено
		И Форма.ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка
		ИЛИ Форма.ЗапретитьИзменение;
		
	РезультатПроверки = ПроверитьЭлПочтуВладельцаЭП(Форма,,Ложь);
	ПоказатьОшибку    = НЕ РезультатПроверки.Пустой И РезультатПроверки.ТекстОшибки <> "";
	Элементы.ПроверкаЭлектроннойПочты.Видимость = ПоказатьОшибку;
	
	Если ПоказатьОшибку Тогда
		Форма.ПроверкаЭлектроннойПочты = РезультатПроверки.ТекстОшибки;
	КонецЕсли;
		
	// Для коробки телефон не показываем
	// Обход ошибки платформы:
	// Раньше управлялось видимостью, теперь отображением подсказки в связи с ошибкой платформы
	// БЗ 10194230 веб - не удалось получить свойство setVisible ссылки, значение которой неопределено или является NUL 
	Если Форма.РежимРаботыСКлючами = 1 Тогда 
		Элементы.ПодсказкаДляТелефонаДляПаролей.ОтображениеПодсказки      = ОтображениеПодсказки.Кнопка;
		Элементы.ПодсказкаЭлектроннаяПочтаДляПаролей.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ПодсказкаДляТелефонаДляПаролей.ОтображениеПодсказки      = ОтображениеПодсказки.Нет;
		Элементы.ПодсказкаЭлектроннаяПочтаДляПаролей.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПодтвержденияТелефонДляПаролей()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьТелефонДляПаролей");
	ОчиститьСообщения();
	
	КодПодтвержденияТелефон = Неопределено;
	
	Результат = ПроверитьНомерНаСервере(ТелефонДляПаролей);
	Если Результат.Выполнено Тогда
		ТаймерТелефон = Результат.ЗадержкаПередПовторнойОтправкой;
		ПроверкаТелефонДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаТелефон", 1, Истина);;
		ПроверкаТелефонДляПаролей.ВыполняетсяПроверка = Истина;
		ПроверкаТелефонДляПаролей.КодОтправлен = Истина;
		
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтвержденияТелефон", 0.1, Истина);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "ТелефонДляПаролей");
	КонецЕсли;
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьКодПодтвержденияЭлектроннаяПочтаДляПаролей()
	
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей");
	ОчиститьСообщения();
	КодПодтвержденияПочта = Неопределено;

	Результат = ПроверитьАдресНаСервере(ЭлектроннаяПочтаДляПаролей);
	Если Результат.Выполнено Тогда
		ТаймерПочта = Результат.ЗадержкаПередПовторнойОтправкой;
		ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки = Результат.Идентификатор;
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаПочта", 1, Истина);
		ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка = Истина;
		ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен = Истина;
		
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтвержденияЭлектроннаяПочта", 0.1, Истина);	
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "ЭлектроннаяПочтаДляПаролей");
	КонецЕсли;
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНомерНаСервере(Телефон, Идентификатор = "")
	
	Возврат МенеджерСервисаКриптографии.ПолучитьКодПроверкиТелефона(Телефон, Идентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьАдресНаСервере(ЭлектроннаяПочта, Идентификатор = "")
	
	Возврат МенеджерСервисаКриптографии.ПолучитьКодПроверкиЭлектроннойПочты(ЭлектроннаяПочта, Идентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьТелефонПоКодуНаСервере(Идентификатор, КодПодтвержденияТелефон) 
	
	Возврат МенеджерСервисаКриптографии.ПроверитьТелефонПоКоду(Идентификатор, КодПодтвержденияТелефон);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЭлектроннуюПочтуПоКодуНаСервере(Идентификатор, КодПодтвержденияПочта) 
	
	Возврат МенеджерСервисаКриптографии.ПроверитьЭлектроннуюПочтуПоКоду(Идентификатор, КодПодтвержденияПочта);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбновитьЭлектроннаяПочтаДляПаролей()
	
	Если ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено Тогда
		
		Элементы.ЭлектроннаяПочтаДляПаролей.ОбновитьТекстРедактирования();
		
		Если РежимРаботыСКлючами = 1 Тогда
			АктивироватьКнопкуПроверитьАдрес();
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьКнопкуПроверитьАдрес()
	// Обход ошибки платформы - не устанавливается текущий элемент
	ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьАдрес");
	ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьАдрес", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОбратногоОтсчетаТелефон()
	
	ТаймерТелефон = ТаймерТелефон - 1;
	
	Если ТаймерТелефон >= 0 Тогда
		НадписьОбратногоОтсчетаТелефон = СтрШаблон(НСтр("ru = 'Запросить код повторно можно через %1 сек.'"), ТаймерТелефон);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаТелефон", 1, Истина);		
	Иначе
		НадписьОбратногоОтсчетаТелефон = "";
		ПроверкаТелефонДляПаролей.КодОтправлен = Ложь;
		ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОбратногоОтсчетаПочта()
	
	ТаймерПочта = ТаймерПочта - 1;

	Если ТаймерПочта >= 0 Тогда
		НадписьОбратногоОтсчетаПочта = СтрШаблон(НСтр("ru = 'Запросить код повторно можно через %1 сек.'"), ТаймерПочта);
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаПочта", 1, Истина);		
	Иначе
		НадписьОбратногоОтсчетаПочта = "";
		ПроверкаЭлектроннаяПочтаДляПаролей.КодОтправлен = Ложь;
		ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияТелефон()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияТелефон;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьПолеКодПодтвержденияЭлектроннаяПочта()
	
	ТекущийЭлемент = Элементы.КодПодтвержденияЭлектроннаяПочта;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьКодПодтверждения()
	
	ОчиститьСообщения();
	
	КодПодтвержденияТелефон = СокрЛП(КодПодтвержденияТелефон);
	КодПодтвержденияПочта = СокрЛП(КодПодтвержденияПочта);
	
	Если СтрДлина(КодПодтвержденияТелефон) = 6 ИЛИ СтрДлина(КодПодтвержденияПочта) = 6 Тогда
		
		Если ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 
			И СтрДлина(КодПодтвержденияТелефон) = 6 Тогда
			
			Результат = ПроверитьТелефонПоКодуНаСервере(
			ПроверкаТелефонДляПаролей.ИдентификаторПроверки, КодПодтвержденияТелефон);
			
			Если Результат.Выполнено Тогда
				ПроверкаТелефонДляПаролей.Значение 					= ТелефонДляПаролей;
				ПроверкаТелефонДляПаролей.ВыполняетсяПроверка 		= Ложь;
				ПроверкаТелефонДляПаролей.ПодтверждениеВыполнено 	= Истина;
				ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаТелефон");
				ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
				
				// После ввода пароля переключаемся на электронную почту
				ПерейтиКПодтверждениюПочты();
				
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "КодПодтвержденияТелефон");
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка 
			И СтрДлина(КодПодтвержденияПочта) = 6 Тогда
			
			Результат = ПроверитьЭлектроннуюПочтуПоКодуНаСервере(
			ПроверкаЭлектроннаяПочтаДляПаролей.ИдентификаторПроверки, КодПодтвержденияПочта);
			
			Если Результат.Выполнено Тогда
				ПроверкаЭлектроннаяПочтаДляПаролей.Значение 				= ЭлектроннаяПочтаДляПаролей;
				ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка 		= Ложь;
				ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено 	= Истина;
				ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОбратногоОтсчетаПочта");
				ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки,, "КодПодтвержденияПочта");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПодтверждениюПочты()
	
	// После ввода пароля переключаемся на электронную почту
	Если НЕ ПроверкаЭлектроннаяПочтаДляПаролей.ЗначениеВведено Тогда
		// Активируем почту
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьЭлектроннаяПочтаДляПаролей", 0.1, Истина);
	ИначеЕсли ПроверкаЭлектроннаяПочтаДляПаролей.ВыполняетсяПроверка Тогда
		// Активируем поле ввода кода почты
		ПодключитьОбработчикОжидания("Подключаемый_АктивироватьПолеКодПодтвержденияЭлектроннаяПочта", 0.1, Истина);
	ИначеЕсли НЕ ПроверкаЭлектроннаяПочтаДляПаролей.ПодтверждениеВыполнено Тогда
		// Активируем кнопку проверки почты
		АктивироватьКнопкуПроверитьАдрес();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТелефонДляПаролей()
	
	Если ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
		Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
		
		Если РежимРаботыСКлючами = 1 Тогда
			// Обход ошибки платформы - не устанавливается текущий элемент
			ОтключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер");
			ПодключитьОбработчикОжидания("Подключаемый_АктивироватьКнопкуПроверитьНомер", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтотОбъект);
	ИзменитьОформлениеРасширенныхНастроек();
	ОбновитьМобильныйТелефонПоТелефонуДляПаролей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМобильныйТелефонПоТелефонуДляПаролей()
	
	// Отложенно, чтобы не шокировать пользователя внезапно возникшим вопросом
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьМобильныйТелефонПоТелефонуДляПаролей", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьМобильныйТелефонПоТелефонуДляПаролей()
	
	Если РежимРаботыСКлючами = 1 И ПроверкаТелефонДляПаролей.ЗначениеВведено Тогда
		
		Если ЭтоРучноеИзменениеТелефона И ПолучатьСМС 
			И НЕ КонтекстЭДОКлиент.ТелефоныСовпадают(ТелефонДляПаролей, ТелефонМобильный)
			И ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ТелефонМобильный)<>"" Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОбновитьМобильныйТелефонПоТелефонуДляПаролей_Завершение", 
				ЭтотОбъект);
				
			ТекстВопроса = НСтр("ru = 'Вы только что изменили номер мобильного телефона, на который высылаются пароли для отправки отчетности.
	                             |Изменить также номер мобильного телефона для SMS-уведомлений о статусе отправки отчетов и входящих сообщениях?'");
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		ИначеЕсли ЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ПолучитьПредставлениеТелефона(ТелефонМобильный) = "" Тогда
			
			ТелефонМобильный = ТелефонДляПаролей;
			ИзменитьОформлениеРасширенныхНастроек();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМобильныйТелефонПоТелефонуДляПаролей_Завершение(Ответ, ВходящийКонтекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТелефонМобильный = ТелефонДляПаролей;
		ИзменитьОформлениеРасширенныхНастроек();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТекстТелефонаДляПаролей()
	
	Элементы.ТелефонДляПаролей.ОбновитьТекстРедактирования();
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьТекстЭлектроннойПочтаДляПаролей()
	
	Элементы.ЭлектроннаяПочтаДляПаролей.ОбновитьТекстРедактирования();
	ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьКнопкуПроверитьНомер()
	
	ТекущийЭлемент = Элементы.ПроверитьНомер;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьКнопкуПроверитьАдрес()
	
	ТекущийЭлемент = Элементы.ПроверитьАдрес;	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АктивироватьЭлектроннаяПочтаДляПаролей()
	
	ТекущийЭлемент = Элементы.ЭлектроннаяПочтаДляПаролей;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОпределитьВозможностьБезбумажногоПодписания(
		ОписаниеЗавершения = Неопределено, 
		ПриОткрытии = Ложь, 
		ДопПараметры = Неопределено, 
		ПринудительноУстанавливатьКомпоненту = Ложь)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОписаниеЗавершения",  ОписаниеЗавершения);
	ДополнительныеПараметры.Вставить("ПриОткрытии", 		ПриОткрытии);
	ДополнительныеПараметры.Вставить("ДопПараметры", 		ДопПараметры);
	ДополнительныеПараметры.Вставить("ПринудительноУстанавливатьКомпоненту", ПринудительноУстанавливатьКомпоненту);
	
	КонтекстДлительнойОперации = ДополнительныеПараметры;
		
	ПодключитьОбработчикОжидания("Подключаемый_ОпределитьВозможностьБезбумажногоПодписания", 0.1, Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ОпределитьВозможностьБезбумажногоПодписания()
	
	ОписаниеЗавершения 			= КонтекстДлительнойОперации.ОписаниеЗавершения; 
	ПриОткрытии 				= КонтекстДлительнойОперации.ПриОткрытии;
	ДопПараметры 				= КонтекстДлительнойОперации.ДопПараметры;
	
	ПринудительноУстанавливатьКомпоненту = КонтекстДлительнойОперации.ПринудительноУстанавливатьКомпоненту;
	
	Если НЕ ЗапретитьИзменение Тогда
		ВозможноЭлектронноеПодписание = Ложь;
		СертификатДляПодписания 	  = Неопределено;
		СертификатДляРеквизитов 	  = Неопределено;
		СертификатыОрганизации.Очистить();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОписаниеЗавершения", 	ОписаниеЗавершения);
	ДополнительныеПараметры.Вставить("ПриОткрытии", 		ПриОткрытии);
	ДополнительныеПараметры.Вставить("ДопПараметры", 		ДопПараметры);
	
	ВыполняемоеОповещение = Новый ОписаниеОповещения(
		"ОпределитьВозможностьБезбумажногоПодписания_ПослеЗаполненияДаннымиИзСертификата", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
		
	Если НЕ ЗначениеЗаполнено(Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(ИНН)
		ИЛИ ЗапретитьИзменение
		ИЛИ CryptoProCSPУстановлен И ViPNetCSPУстановлен И НЕ ИгнорироватьКонфликт Тогда
		
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Возврат;
		
	КонецЕсли;
	
	ВывестиБубликДлительнойОперацииПоискаСертификатов(ЭтотОбъект);
	
	ПредлагатьУстановкуРасширения =
		ЭтоВебКлиент  
		И (НЕ ДоступнаЭлектроннаяПодписьВМоделиСервиса
		ИЛИ ПринудительноУстанавливатьКомпоненту
		ИЛИ РежимРаботыСКлючами = 2)
		ИЛИ НЕ ЭтоВебКлиент;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 			ВыполняемоеОповещение);
	ДополнительныеПараметры.Вставить("ПриОткрытии", 					ПриОткрытии);
	ДополнительныеПараметры.Вставить("ПредлагатьУстановкуРасширения", 	ПредлагатьУстановкуРасширения);
	
	Если (CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен) И НЕ ИгнорироватьКонфликт Тогда
		
		КомпонентаДляРаботыСКриптографиейПодключена = Истина;
		
		ОпределитьВозможностьБезбумажногоПодписания_ПослеОпределенияКриптопровайдера(Неопределено, ДополнительныеПараметры);
		
	Иначе
		
		ОповещениеПослеПоискаКриптопровайдеров = Новый ОписаниеОповещения(
			"ОпределитьВозможностьБезбумажногоПодписания_ПослеОпределенияКриптопровайдера", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
			
		ЗаполнитьСписокКриптопровайдеров(ОповещениеПослеПоискаКриптопровайдеров, ПредлагатьУстановкуРасширения);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОпределитьВозможностьБезбумажногоПодписания_ПослеОпределенияКриптопровайдера(Результат, ВходящийКонтекст) Экспорт
	
	Если НЕ CryptoProCSPУстановлен И НЕ ViPNetCSPУстановлен Тогда
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение);
		Возврат;
		
	КонецЕсли;
	
	ВывестиБубликДлительнойОперацииПоискаСертификатов(ЭтотОбъект);
	
	Если ВсеСертификаты = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОпределитьВозможностьБезбумажногоПодписания_ПослеПолученияСертификата", 
			ЭтотОбъект,
			ВходящийКонтекст);
			
		ДополнительныеПараметрыМетода = Новый Структура;
		ДополнительныеПараметрыМетода.Вставить("ПредлагатьУстановкуВнешнейКомпоненты", ВходящийКонтекст.ПредлагатьУстановкуРасширения);
		ДополнительныеПараметрыМетода.Вставить("ВыводитьСообщения", Ложь);
		
		Хранилище = Новый Структура("Хранилище, ЭтоЛокальноеХранилище", "MY", Истина);
		КриптографияЭДКОКлиент.ПолучитьСертификаты(ОписаниеОповещения, Хранилище, ДополнительныеПараметрыМетода);
		
	Иначе
		
		Результат = Новый Структура();
		Результат.Вставить("Выполнено",   Истина);
		Результат.Вставить("Сертификаты", ВсеСертификаты);
		
		ОпределитьВозможностьБезбумажногоПодписания_ПослеПолученияСертификата(
			Результат, 
			ВходящийКонтекст);
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОпределитьВозможностьБезбумажногоПодписания_ПослеПолученияСертификата(
		Результат, 
		ВходящийКонтекст) Экспорт
	
	Если НЕ Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение);
		Возврат;
	КонецЕсли;
	
	// Проверяем после поиска сертификата.
	// Инчае, если реквизиты для поиска сертификата не будут заполнены, не установится компонента.
	РезультатПроверкиСНИЛС 		 = ПроверитьВладелецЭЦПСНИЛС(ЭтотОбъект,,Ложь);
	РезультатПроверкиВладелецЭЦП = ПроверитьФИОВладельцаЭП(ЭтотОбъект,,Ложь);
	
	Если РезультатПроверкиВладелецЭЦП.ЕстьОшибка
		ИЛИ РезультатПроверкиСНИЛС.ЕстьОшибка Тогда
		
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ВыполняемоеОповещение);
		Возврат;
		
	КонецЕсли;
	
	ВсеСертификаты 		 = Результат.Сертификаты; 
	НайденныеСертификаты = СертификатыПоОрганизацииИВладельцу(ВсеСертификаты);
	
	// Сертификат для реквизитов нужно искать до поиска сертификата для подписания, потому что
	// при поиске сертификатов для подписания из всех сертификатов остается только несколько.
	СертификатДляРеквизитов 	 = ОпределитьСертификатДляРеквизитов(НайденныеСертификаты);
	СертификатыОрганизации		 = ОпределитьВсеСертификатыДляПодписания(НайденныеСертификаты);
	НовыйСертификатДляПодписания = ОпределитьСертификатДляПодписания(ВходящийКонтекст, СертификатыОрганизации);
	
	// асинхронно так как асинхронно получается рег. номер ФСС
	ПриИзмененииСертификатаДляПодписания(НовыйСертификатДляПодписания, ВходящийКонтекст.ВыполняемоеОповещение);
			
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВозможностьБезбумажногоПодписания_ПослеЗаполненияДаннымиИзСертификата(Результат, ВходящийКонтекст) Экспорт
	
	ДополнительныеПараметры = ВходящийКонтекст.ДопПараметры;
	
	// Выполняем за один вызов на сервере, чтобы форма не мигала
	ПослеЗаполненияДаннымиИзСертификатаНаСервере(ВходящийКонтекст.ПриОткрытии, ДополнительныеПараметры);
	
	// Обновляем электронную почту, прорисовываем кнопки подтверждения почты
	ПриИзмененииТелефонаИлиПочтыДляПароля(ВходящийКонтекст.ПриОткрытии);
	
	Если ВходящийКонтекст.ОписаниеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОписаниеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаполненияДаннымиИзСертификатаНаСервере(ПриОткрытии, ДополнительныеПараметры)
	
	Если ПриОткрытии И ЗаявлениеСозданоКопированием Тогда
		
		// Восстанавливаем положение переключателя из скопированного заявления
		// Но если такого сертификата нет на компьютере, то электронное подписание невозможно
		Если ЭтоЭлектронноеПодписаниеИзКопии И СертификатДляПодписания <> Неопределено Тогда
			ЭтоЭлектронноеПодписание 	= Истина;
			СпособПодписания 			= 1;
		Иначе
			ЭтоЭлектронноеПодписание = Ложь;
			ПереключитьНаБумажноеПодписание();
		КонецЕсли;
		
	Иначе
		
		Если ВозможноЭлектронноеПодписание Тогда
			СпособПодписания 			= 1;
			ЭтоЭлектронноеПодписание 	= Истина;
		Иначе
			СпособПодписания 			= 2;
			ЭтоЭлектронноеПодписание 	= Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьОформлениеДокументовПослеИзмененияСертификатов(ДополнительныеПараметры);
	ИзменитьОформлениеСпособаПодписания(ЭтотОбъект);
	ИзменитьРежимРаботыСКлючамиПослеИзмененияСертификатов(ПриОткрытии, ДополнительныеПараметры);
	ИзменитьОформлениеРасширенныхНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРежимРаботыСКлючамиПослеИзмененияСертификатов(ПриОткрытии, ДополнительныеПараметры)
	
	// Проверка возможности использования локального ключа
	
	// Выполняем это в проверке подписания, так как здесь проверяется наличие криптопровайдера.
	// Если у скопированного заявления стояло хранение ключей на компьютере, но сейчас оказывается, что криптопровайдер не 
	// установлен, переключаем на использование ключа в облаке.
	ЭтоХранениеКлючейЛокальноИзКопии = РежимРаботыСКлючамиИзКопии = 2;
	
	НеМожетИспользоватьсяХранениеКлючаНаКомпьютере = 
		НЕ ViPNetCSPУстановлен 
		И НЕ CryptoProCSPУстановлен
		И ПриОткрытии
		И ДоступнаЭлектроннаяПодписьВМоделиСервиса
		И ЭтоХранениеКлючейЛокальноИзКопии;
	
	Если НеМожетИспользоватьсяХранениеКлючаНаКомпьютере Тогда
		РежимРаботыСКлючами = 1;
		ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтотОбъект);
	КонецЕсли;
	
	// Проверка возможности использования облака
	ЭтоХранениеКлючейВОблакеИзКопии  = РежимРаботыСКлючамиИзКопии = 1;
	
	НеМожетИспользоватьсяХранениеКлючаВОблаке = 
		ЭтоХранениеКлючейВОблакеИзКопии
		И НЕ ДоступнаЭлектроннаяПодписьВМоделиСервиса;
	
	Если НеМожетИспользоватьсяХранениеКлючаВОблаке Тогда
		РежимРаботыСКлючами = 2;
		ИзменитьОформлениеТелефонаИПочтыДляПаролей(ЭтотОбъект);
	КонецЕсли;
	
	ИзменитьОформлениеМестаХраненияКлючей();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеДокументовПослеИзмененияСертификатов(ДополнительныеПараметры)
	
	// Очистка пропускается при открытии формы скопированного заявления
	ПропуститьОчисткуФайлов 		= ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ПропуститьОчисткуФайлов");
	// При изменении владельца или СНИЛС
	ОчиститьТолькоФайлыВладельца 	= ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ОчиститьТолькоФайлыВладельца");
	
	Если ПропуститьОчисткуФайлов Тогда
		СкрытьДокументы = НЕ ЗначениеЗаполнено(Организация);
		ИзменитьОформлениеДокументов(ЭтотОбъект, СкрытьДокументы);
	ИначеЕсли ОчиститьТолькоФайлыВладельца Тогда
		УстановитьНовогоВладельцаЭЦП_ОчисткаФайлов_Сервер();
	Иначе
		ИнициализироватьФайлы_Сервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СертификатыПоОрганизацииИВладельцу(Сертификаты)
	
	ПолеИНН     = "INN";
	ПолеСНИЛС   = "SNILS";
	ПолеИмя     = "GN";
	ПолеФамилия = "SN";
	
	НайденныеСертификаты = Новый Массив;
	
	Для каждого НайденныйСертификат Из Сертификаты Цикл
		
		Субъект = НайденныйСертификат.ВладелецСтруктура;
		
		Если НЕ Субъект.Свойство(ПолеИНН)
			ИЛИ НЕ Субъект.Свойство(ПолеСНИЛС)
			ИЛИ НЕ Субъект.Свойство(ПолеИмя)
			ИЛИ НЕ Субъект.Свойство(ПолеФамилия) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ИННСовпадает 	= СтрНайти(Субъект[ПолеИНН],ИНН) > 0;
		СНИЛССовпадает 	= Субъект[ПолеСНИЛС] = СНИЛСБезРазделителей(ВладелецЭЦПСНИЛС);
		
		Если ИННСовпадает 
			И СНИЛССовпадает 
			И ФИОВладельцевСовпадают(Субъект) Тогда
			
			// Валидность
			Валиден = НайденныйСертификат.ДействителенС < ТекущаяДата() 
				И НайденныйСертификат.ДействителенПо > ТекущаяДата();
				
			НайденныйСертификат.Вставить("Валиден", Валиден);
			
			НайденныеСертификаты.Добавить(НайденныйСертификат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеСертификаты;
	
КонецФункции
	
&НаКлиенте
Функция ФИОВладельцевСовпадают(Субъект)
	
	// Объединяем в одну строку, заменяем пробелы на подчерк, переводим в верхний регистр и сравниваем.
	ПолеИмя     = "GN";
	ПолеФамилия = "SN";
	
	ФИОИзСертификата = СтрЗаменить(СокрЛП(Субъект[ПолеФамилия] + " " + Субъект[ПолеИмя]), " ", "_");
	
	ФИОВладельца = Новый Массив;
	ФИОВладельца.Добавить(ВладелецЭЦПФамилия);
	ФИОВладельца.Добавить(ВладелецЭЦПИмя);
	ФИОВладельца.Добавить(ВладелецЭЦПОтчество);
	
	ФИОВладельца = СтрЗаменить(СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ФИОВладельца, " "), " ", "_");
	
	ФИОСовпадают = Врег(ФИОВладельца) = Врег(ФИОИзСертификата);
	
	Возврат ФИОСовпадают;
	
КонецФункции
		
&НаКлиенте
Функция ОпределитьВсеСертификатыДляПодписания(ВсеСертификатыОрганизации)
	
	// Ищем сертификаты для подписания.
	// Его дата начала должна быть строго меньше текущей даты, 
	// а дата окончания - больше текущй даты.
	ВалидныеСертификатыОрганизации = Новый СписокЗначений;
	
	Для каждого Сертификат Из ВсеСертификатыОрганизации Цикл
		
		Если Сертификат.ДействителенС < ТекущаяДата() 
			И Сертификат.ДействителенПо > ТекущаяДата()
			И Сертификат.Валиден Тогда
			
			ВалидныеСертификатыОрганизации.Добавить(Сертификат);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ВалидныеСертификатыОрганизации;
	
КонецФункции

&НаКлиенте
Функция ОпределитьСертификатДляПодписания(ВходящийКонтекст, СертификатыОрганизации)
	
	ПриОткрытии = ВходящийКонтекст.ПриОткрытии;
	
	// Ищем сертификат для подписания.
	// Его дата начала должна быть строго меньше текущей даты, 
	// а дата окончания - больше текущй даты.
	ИскомыйСертификат 				= Неопределено;
	МаксимальнаяДатаОкончания 		= Дата(1,1,1);
	ИспользоватьСертификатИзКопии 	= Ложь;
	
	Для каждого Сертификат Из СертификатыОрганизации Цикл
		Сертификат = Сертификат.Значение;
		
		Если Сертификат.ДействителенС < ТекущаяДата() 
			И Сертификат.ДействителенПо > ТекущаяДата()
			И Сертификат.Валиден Тогда
			
			ВозможноЭлектронноеПодписание = Истина;
			
			Если ПриОткрытии 
				И СертификатИзКопии <> Неопределено
				И Сертификат.Отпечаток = СертификатИзКопии.Отпечаток Тогда
				
				// Берем сертификат из скопированного заявления
				ИспользоватьСертификатИзКопии = Истина;
				Прервать;
				
			ИначеЕсли Сертификат.ДействителенПо > МаксимальнаяДатаОкончания Тогда
				
				МаксимальнаяДатаОкончания 	= Сертификат.ДействителенПо;
				ИскомыйСертификат 			= Сертификат;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьСертификатИзКопии Тогда
		ИскомыйСертификат = СертификатИзКопии;
	КонецЕсли;

	Возврат ИскомыйСертификат;
	
КонецФункции

&НаКлиенте
Функция ОпределитьСертификатДляРеквизитов(ВсеСертификатыОрганизации)
	
	// Ищем сертификат для реквизитов.
	// Его дата начала может больше текущей даты. Это не важно.
	ИскомыйСертификат = Неопределено;
	МаксимальнаяДатаОкончания = Дата(1,1,1);
	
	Для каждого Сертификат Из ВсеСертификатыОрганизации Цикл
		
		Если Сертификат.ДействителенПо > МаксимальнаяДатаОкончания Тогда
			
			МаксимальнаяДатаОкончания = Сертификат.ДействителенПо;
			ИскомыйСертификат = Сертификат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИскомыйСертификат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаявлениеДаннымиИзСертификата(ВыполняемоеОповещение)
	
	Если СертификатДляРеквизитов = Неопределено Тогда
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьСведенияИзСертификатаДляРеквизитов_ПослеЭкспортаСертификата", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	КриптографияЭДКОКлиент.ЭкспортироватьСертификатВBase64(ОписаниеОповещения, СертификатДляРеквизитов, Ложь);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнитьСведенияИзСертификатаДляРеквизитов_ПослеЭкспортаСертификата(Результат, ВходящийКонтекст) Экспорт
	
	ВыполняемоеОповещение   = ВходящийКонтекст.ВыполняемоеОповещение;
	ДополнительныеПараметры = Новый Структура();
	
	Если НЕ Результат.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		Возврат;
	КонецЕсли;
	
	ДвДанныеСертификата = Base64Значение(Результат.СтрокаBase64);
	
	Если НЕ СертификатДляРеквизитов.Свойство("ВладелецСтруктура") Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ВладелецСтруктура = СертификатДляРеквизитов.ВладелецСтруктура;
	
	ЗаполнятьПринудительно = Ложь;
	
	// Если какие-то реквизиты не совпадают сейчас с заявлением, 
	// мы об этом предупредим позже при отправке заявления
	
	// Краткое наименование
	Если НЕ ЗначениеЗаполнено(КраткоеНаименование) ИЛИ ПоказыватьКраткоеНаименование ИЛИ ЗаполнятьПринудительно Тогда
		
		ПолеКраткоеНаименование = "O";
		
		Если ВладелецСтруктура.Свойство(ПолеКраткоеНаименование) 
			И ЗначениеЗаполнено(ВладелецСтруктура[ПолеКраткоеНаименование]) Тогда
			
			КраткоеНаименование = ВладелецСтруктура[ПолеКраткоеНаименование];
			
		КонецЕсли;
	КонецЕсли;
		
		
	// ОРГН
	Если НЕ ЗначениеЗаполнено(ОГРН) ИЛИ ЗаполнятьПринудительно Тогда
		
		Если ЭтоЮридическоеЛицо Тогда
			ПолеОГРН = "OGRN";
		Иначе
			ПолеОГРН = "OGRNIP";
		КонецЕсли;
		
		Если ВладелецСтруктура.Свойство(ПолеОГРН) 
			И ЗначениеЗаполнено(ВладелецСтруктура[ПолеОГРН]) Тогда
			
			ОГРН = ВладелецСтруктура[ПолеОГРН];
			
		КонецЕсли;
	КонецЕсли;
	
	// Должность
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦПДолжность) ИЛИ ЗаполнятьПринудительно Тогда
		
		ПолеДолжность = "T";
		
		Если ВладелецСтруктура.Свойство(ПолеДолжность) 
			И ЗначениеЗаполнено(ВладелецСтруктура[ПолеДолжность]) Тогда
			
			ВладелецЭЦПДолжность = ВладелецСтруктура[ПолеДолжность];
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦППодразделение) ИЛИ ЗаполнятьПринудительно Тогда
		
		ПолеПодразделение = "OU";
		
		Если ВладелецСтруктура.Свойство(ПолеПодразделение) 
			И ЗначениеЗаполнено(ВладелецСтруктура[ПолеПодразделение]) Тогда
			
			ВладелецЭЦППодразделение = ВладелецСтруктура[ПолеПодразделение];
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Электронная почта
	Если НЕ ЗначениеЗаполнено(ЭлектроннаяПочтаДляПаролей) ИЛИ ЗаполнятьПринудительно Тогда
		
		ПолеЭлектроннаяПочта = "E";
		Если ВладелецСтруктура.Свойство(ПолеЭлектроннаяПочта) 
			И ЗначениеЗаполнено(ВладелецСтруктура[ПолеЭлектроннаяПочта]) Тогда

			ЭлектроннаяПочтаДляПаролей  = ВладелецСтруктура[ПолеЭлектроннаяПочта];
			ЭлектроннаяПочта 			= ЭлектроннаяПочтаДляПаролей;
			
			ДополнительныеПараметры.Вставить("ЭлектроннаяПочта", Истина);
			
		КонецЕсли;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиБубликДлительнойОперацииПоискаСертификатов(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.КомпонентаДляРаботыСКриптографиейПодключена Тогда
		Элементы.НадписьПоискаСертификата.Заголовок = НСтр("ru = 'Выполняется поиск сертификатов...'");
	Иначе
		Элементы.НадписьПоискаСертификата.Заголовок = НСтр("ru = 'Выполняется установка внешней компоненты криптографии...'");
	КонецЕсли;
	
	Элементы.ГруппаЭлектронноеПодписание.ТекущаяСтраница = Элементы.ГруппаПоискСертификатов;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеКнопкиОтправки(Форма)

	Элементы = Форма.Элементы;
	
	Если Форма.ЭтоЭлектронноеПодписание И Форма.СпособПодписания Тогда
		Элементы.Отправить.Заголовок = НСтр("ru = 'Подписать и отправить'");
	Иначе
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить заявление'");
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеСпособаПодписания(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ЗапретитьИзменение Тогда
		Элементы.ГруппаЭлектронноеПодписание.ТолькоПросмотр = Истина;
		Элементы.ГруппаОтправки.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.ВозможноЭлектронноеПодписание 
		ИЛИ Форма.ЗапретитьИзменение И Форма.СертификатДляПодписания <> Неопределено Тогда
		
		Форма.ПредставлениеСертификата				= ПредставлениеСертификата(Форма.СертификатДляПодписания);
		Элементы.СертификатДляПодписания.Заголовок 	= Форма.ПредставлениеСертификата;
		
		// Переключение закладки в самом конце, чтобы не было видно, как перерисовываются элементы
		Элементы.ГруппаЭлектронноеПодписание.ТекущаяСтраница = Элементы.ГруппаДоступноЭлектронноеПодписание;
		
	Иначе
		
		РезультатПроверкиВладелецЭЦП = ПроверитьФИОВладельцаЭП(Форма,,Ложь);
		РезультатПроверкиСНИЛС       = ПроверитьВладелецЭЦПСНИЛС(Форма,,Ложь);
		ЭтоКонфликтКриптопровайдеров = Форма.CryptoProCSPУстановлен И Форма.ViPNetCSPУстановлен И НЕ Форма.ИгнорироватьКонфликт;
		ОтсуствуетКриптопровайдер    = НЕ Форма.CryptoProCSPУстановлен И НЕ Форма.ViPNetCSPУстановлен И Форма.КомпонентаДляРаботыСКриптографиейПодключена;
		
		Если Форма.ЗапретитьИзменение Тогда
			
			Элементы.ПодсказкаОНевозможностиЭлектронногоПодписания.Видимость = Ложь;
		
		ИначеЕсли ОтсуствуетКриптопровайдер Тогда
			
			Элементы.ПодсказкаОНевозможностиЭлектронногоПодписания.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				ПодсказкаДляЭлектронногоПодписания(),
				НСтр("ru = 'Подписание электронной подписью доступно только при наличии программы защиты информации. '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'Установить'"),,,,"Установить криптопровайдер"));
				
		ИначеЕсли ЭтоКонфликтКриптопровайдеров Тогда
			
			Элементы.ПодсказкаОНевозможностиЭлектронногоПодписания.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				ПодсказкаДляЭлектронногоПодписания(),
				НСтр("ru = 'Подписание электронной подписью недоступно при конфликте криптопровайдеров. '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'Исправить'"),,,,"Исправить"));
				
		ИначеЕсли НЕ Форма.CryptoProCSPУстановлен И НЕ Форма.ViPNetCSPУстановлен И НЕ Форма.КомпонентаДляРаботыСКриптографиейПодключена Тогда
			
			Элементы.ПодсказкаОНевозможностиЭлектронногоПодписания.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				ПодсказкаДляЭлектронногоПодписания(),
				Форма.ТекстОшибкиПодключенияКомпоненты,
				НСтр("ru = ' Необходимо установить внешнюю компоненту криптографии. '"),
				Новый ФорматированнаяСтрока(НСтр("ru = 'Установить'"),,,,"Установить компоненту"));
				
		ИначеЕсли ЗначениеЗаполнено(Форма.Организация) И НЕ РезультатПроверкиВладелецЭЦП.ЕстьОшибка И НЕ РезультатПроверкиСНИЛС.ЕстьОшибка Тогда
			
			ПодстрокаНачало1 	 = НСтр("ru = 'Не удалось найти действующий сертификат'");
			ПодстрокаНачало2 	 = НСтр("ru = 'по организации '");
			ПодстрокаОрганизация = Новый ФорматированнаяСтрока(Строка(Форма.Организация),,,,ПолучитьНавигационнуюСсылку(Форма.Организация));
			ПодстрокаИНН 	 	 = " (ИНН " + Строка(СокрЛП(Форма.ИНН)) + ")";
			ПодстрокаСередина 	 = НСтр("ru = 'на физ. лицо '");
			
			Если ЗначениеЗаполнено(Форма.ВладелецЭЦП) Тогда
				ПодстрокаВладелец = Новый ФорматированнаяСтрока(Строка(Форма.ВладелецЭЦП),,,,ПолучитьНавигационнуюСсылку(Форма.ВладелецЭЦП));
			Иначе
				ПодстрокаВладелец = Форма.ВладелецЭЦПФамилия + " " + Форма.ВладелецЭЦПИмя + " " + Форма.ВладелецЭЦПОтчество;
			КонецЕсли;
			
			ПодстрокаСНИЛС = " (СНИЛС " + Строка(СокрЛП(Форма.ВладелецЭЦПСНИЛС)) + ")";
			
			Элементы.ПодсказкаОНевозможностиЭлектронногоПодписания.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				ПодсказкаДляЭлектронногоПодписания(),
				ПодстрокаНачало1,
				Символы.ПС,
				ПодстрокаНачало2,
				ПодстрокаОрганизация,
				ПодстрокаИНН,
				Символы.ПС,
				ПодстрокаСередина,
				ПодстрокаВладелец,
				ПодстрокаСНИЛС,
				СсылкаНаВсеСертификаты());
				
		ИначеЕсли ЗначениеЗаполнено(Форма.Организация) Тогда
				
			ПодстрокаНачало 	 = НСтр("ru = 'Не удалось найти действующий сертификат по организации '");
			ПодстрокаОрганизация = Новый ФорматированнаяСтрока(Строка(Форма.Организация),,,,ПолучитьНавигационнуюСсылку(Форма.Организация));

			Если РезультатПроверкиВладелецЭЦП.Пустой Тогда
				ПодстрокаКонец = Символы.ПС + НСтр("ru = 'поскольку не указан владелец эл. подписи или его ФИО'");
			ИначеЕсли РезультатПроверкиВладелецЭЦП.ЕстьОшибка Тогда
				ПодстрокаКонец = Символы.ПС + НСтр("ru = 'поскольку есть ошибки в указании ФИО владельца эл. подписи'");
			ИначеЕсли РезультатПроверкиСНИЛС.Пустой Тогда
				ПодстрокаКонец = Символы.ПС + НСтр("ru = 'поскольку не указан СНИЛС владельца эл. подписи'");
			ИначеЕсли РезультатПроверкиСНИЛС.ЕстьОшибка Тогда
				ПодстрокаКонец = Символы.ПС + НСтр("ru = 'поскольку есть ошибки в указании СНИЛС владельца эл. подписи'");
			КонецЕсли;
		
			Элементы.ПодсказкаОНевозможностиЭлектронногоПодписания.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				ПодсказкаДляЭлектронногоПодписания(),
				ПодстрокаНачало,
				ПодстрокаОрганизация,
				",",
				ПодстрокаКонец,
				СсылкаНаВсеСертификаты());
				
		Иначе
			
			ВывестиБубликДлительнойОперацииПоискаСертификатов(Форма);
			
		КонецЕсли;
		
		Элементы.Отправить.Заголовок = НСтр("ru = 'Отправить заявление'");
		
		// Переключение закладки в самом конце, чтобы не было видно, как перерисовываются элементы
		Элементы.ГруппаЭлектронноеПодписание.ТекущаяСтраница = Элементы.ГруппаНеДоступноЭлектронноеПодписание;
			
	КонецЕсли;
	
	Элементы.ПодсказкаОбЭлектронномПодписании.РасширеннаяПодсказка.Заголовок   = ПодсказкаДляЭлектронногоПодписания(Ложь);	
	
	ИзменитьОформлениеКнопкиОтправки(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПодсказкаДляЭлектронногоПодписания(ДобавлятьОтступы = Истина)
	
	Результат = Новый ФорматированнаяСтрока(НСтр("ru = 'Подписать заявление эл. подписью можно, если у организации для выбранного сотрудника 
                                                  |есть действующий сертификат и на компьютере установлен криптопровайдер. 
                                                  |При использовании эл. подписи некоторые документы можно будет не оформлять в бумажном виде.
                                                  |После отправки заявления, подписанного эл. подписью, будет создан новый закрытый ключ и сертификат.'"));
	
	Если ДобавлятьОтступы Тогда
		Результат = Новый ФорматированнаяСтрока(Результат, Символы.ПС, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаНаВсеСертификаты()
	
	ПодстрокаКоманда = Новый ФорматированнаяСтрока(НСтр("ru = 'Посмотреть установленные на компьютере сертификаты'"),,,,"e1cib/command/ОбщаяКоманда.ПоказатьВсеЛичныеСертификаты");
				
	Подсказка = Новый ФорматированнаяСтрока(
		Символы.ПС,
		Символы.ПС,
		ПодстрокаКоманда);
		
	Возврат Подсказка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификата(Сертификат)
	
	Если Сертификат = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СертификатДействителенС = Формат(Сертификат.ДействителенС, "ДЛФ=D");
	СертификатДействителенПо = Формат(Сертификат.ДействителенПо, "ДЛФ=D");
	
	Если Сертификат.ПоставщикСтруктура.Свойство("O") Тогда
		Издатель = Сертификат.ПоставщикСтруктура["O"];
	Иначе
		Издатель = "";
	КонецЕсли;
	
	Представление = НСтр("ru = '%1 (%2-%3), %4'");
	Представление = СтрШаблон(
		Представление,
		Сертификат.Наименование,
		СертификатДействителенС,
		СертификатДействителенПо,
		Издатель);
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ОпределитьТариф()
	
	Если НЕ ЭтоРежимБесплатнойНулевойОтчетности Тогда
		Возврат;
	КонецЕсли;
	
	Тариф = "";
	
	Попытка
		МодульТарификацияБПВызовСервераПовтИсп = ОбщегоНазначения.ОбщийМодуль("ТарификацияБПВызовСервераПовтИсп");
		Если МодульТарификацияБПВызовСервераПовтИсп = Неопределено Тогда
			Возврат;
		Иначе
			ТарифВключаетЭДО = МодульТарификацияБПВызовСервераПовтИсп.РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами();
		КонецЕсли;
		
		МодульТарификацияБП = ОбщегоНазначения.ОбщийМодуль("ТарификацияБП");
		Если МодульТарификацияБП = Неопределено Тогда
			Возврат;
		Иначе
			ВыставленСчет = МодульТарификацияБП.ЕстьВыставленныйСчетНаОплатуСервиса();
		КонецЕсли;
		
		Если ТарифВключаетЭДО ИЛИ ВыставленСчет Тогда
			Тариф = МодульТарификацияБП.ИдентификаторАктуальногоТарифа();
		КонецЕсли;
		
	Исключение
		// Никакой обработки не требуется.
		// Попадание в исключение означает, что такого модуля БП3 в данном потребителе не существует.
	КонецПопытки; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьФайл(Форма, ВидДокумента)
	
	УдалитьТекущийВидДокументов(Форма, ВидДокумента);
	ИзменитьОформлениеДокумента(Форма, ВидДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдресКонвертацияРезультата(РезультатЗакрытия, Истина);
	
	Если НовыйАдрес.Модифицированность Тогда
		
		УстановитьМодифицированность(ЭтотОбъект);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуКонтактнойИнформацииЗавершение_ПослеИзмененияЮрАдреса", 
			ЭтотОбъект);
			
		КонтекстЭДОКлиент.ОбновитьАдрес(НовыйАдрес, "АдресЮридический", ОписаниеОповещения, ЭтоЮридическоеЛицо);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение_ПослеИзмененияЮрАдреса(Результат, ВходящийКонтекст) Экспорт
	
	ПриИзмененииЮридическогоАдреса();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЮридическогоАдреса()
	
	КодРегиона 		= КодРегионаПоАдресу(АдресЮридическийЗначение);
	КодРегионаФСРАР = КодРегиона;
	ВосстановитьНаправленияПоУмолчаниюФСГС();
	НачатьОпределениеИдентификаторАдресаФИАС();
	
	ИзменитьОформлениеЮрАдреса();
	ИзменитьОформлениеНаправлений();
	ИнициализироватьФактическийАдрес();
	ИзменитьОформлениеРасширенныхНастроек();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеОГРН(Форма, ПриОткрытии = Ложь)
	
	Элементы = Форма.Элементы;
	
	РезультатПроверки = ПроверитьОГРН(Форма,,Ложь);
	
	СкрытьОГРН = 
		НЕ РезультатПроверки.ЕстьОшибка
		И (Форма.Доступен1СКонтрагент 
			ИЛИ Форма.ДанныеОрганизацииЗаполненыКопированием И ЗначениеЗаполнено(Форма.ОГРН) И ПриОткрытии)
		И НЕ Форма.ЭтоНотариусАдвокатИлиГКФХ;

	// ОГРН
	Если СкрытьОГРН Тогда
		Элементы.ГруппаОГРН.Видимость = Ложь;
	Иначе
		
		Элементы.ГруппаОГРН.Видимость   = Истина;
		Элементы.ПроверкаОГРН.Заголовок = ?(РезультатПроверки.Пустой, "", РезультатПроверки.ТекстОшибки);
		
		Если Форма.ЭтоЮридическоеЛицо Тогда
			Элементы.ЗаголовокОГРН.Заголовок = НСтр("ru = 'ОГРН'");
		Иначе
			Элементы.ЗаголовокОГРН.Заголовок = НСтр("ru = 'ОГРНИП'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ПриНаличии.Видимость = Форма.ЭтоНотариусАдвокатИлиГКФХ;
	Элементы.ОГРН.АвтоОтметкаНезаполненного = НЕ Форма.ЭтоНотариусАдвокатИлиГКФХ;
	Если Форма.ЭтоНотариусАдвокатИлиГКФХ Тогда
		Элементы.ОГРН.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Форма.ЗапретитьИзменение Тогда
		Элементы.ОГРН.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АрхивироватьФайлОбратнойСвязи(ОписаниеФайла)
	
	ОписаниеДляАрхива = Новый Структура;
	ОписаниеДляАрхива.Вставить("Адрес", ОписаниеФайла.Адрес);
	ОписаниеДляАрхива.Вставить("Имя",   "file");
	
	МассивИзОдного = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеДляАрхива);
	АдресУпакованногоФайлаДанных = ОперацииСФайламиЭДКОВызовСервера.УпаковатьФайлы(МассивИзОдного);
	
	ОписаниеФайла.Адрес = АдресУпакованногоФайлаДанных;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьОбратнуюСвязьСервер()
	
	ОбратнаяСвязьОтправлена = Истина;
	
	Если Оценка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = ФайлОбратнойСвязи();
	
	ФайлДанных = Новый Структура;
	ФайлДанных.Вставить("Адрес", Адрес);
	ФайлДанных.Вставить("Имя", 	 ИмяФайлаДокументаВСоставеПакета());
	
	ФайлОписания = ФайлОписанияПакетаОбратнойСвязи(ФайлДанных);
	
	АрхивироватьФайлОбратнойСвязи(ФайлДанных);
	
	Файлы = Новый Массив;
	Файлы.Добавить(ФайлОписания);
	Файлы.Добавить(ФайлДанных);
	
	АдресПакета = ОперацииСФайламиЭДКОВызовСервера.УпаковатьФайлы(Файлы);
	
	// Имя именно с подчеркиваниями, чтобы можно было искать в структуре
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПрисоединитьФайлЗаявления(ДокументЗаявление, АдресПакета, "Пакет_с_обратной_связью", "zip");
	
	Base64СтрокаОбратнойСвязи = Base64Строка(ПолучитьИзВременногоХранилища(АдресПакета));
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(ДокументЗаявление.СпецоператорСвязи);
	ДополнительныеПараметры.Добавить(Base64СтрокаОбратнойСвязи);
	
	// Не дожидаемся завершения
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтправитьОбратнуюСвязьСервер", ДополнительныеПараметры);

КонецПроцедуры

&НаСервере
Функция ФайлОписанияПакетаОбратнойСвязи(ФайлДанных)
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("пакет");
	ЗаписьXML.ЗаписатьАтрибут("версияФормата", "1С:1.1");
	ЗаписьXML.ЗаписатьАтрибут("версПрог", РегламентированнаяОтчетность.ВерсияПрограммы());
	ЗаписьXML.ЗаписатьАтрибут("типДокументооборота", "РегистрацияАбонента");
	ЗаписьXML.ЗаписатьАтрибут("типТранзакции", "ОбратнаяСвязь");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторДокументооборота", ДокументЗаявление.ИдентификаторДокументооборота);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("отправитель");	
	ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "абонент");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("получатель");	
	ЗаписьXML.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ЗаписьXML.ЗаписатьАтрибут("идентификаторСубъекта", "КалугаАстрал");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("документ");	
	ЗаписьXML.ЗаписатьАтрибут("идентификаторДокумента", ОбщегоНазначенияЭДКОКлиентСервер.НовыйИдентификатор());
	ЗаписьXML.ЗаписатьАтрибут("типДокумента", "ОбратнаяСвязь");
	ЗаписьXML.ЗаписатьАтрибут("типСодержимого", "xml");
	ЗаписьXML.ЗаписатьАтрибут("сжат", "true");
	ЗаписьXML.ЗаписатьАтрибут("зашифрован", "false");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("содержимое");	
	ЗаписьXML.ЗаписатьАтрибут("имяФайла", ФайлДанных.Имя);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();

	ОписаниеПакета = Новый Структура;
	ОписаниеПакета.Вставить("Имя", "packageDescription.xml");
	ОписаниеПакета.Вставить("Адрес", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), Новый УникальныйИдентификатор));
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	
	Возврат ОписаниеПакета;
	
КонецФункции

&НаСервере
Функция ИмяФайлаДокументаВСоставеПакета(РасширениеБезТочки = "bin")
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.СгенерироватьUUID() + "." + РасширениеБезТочки;
	
КонецФункции

&НаСервере 
Функция ФайлОбратнойСвязи()
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОбратнаяСвязь");
	ЗаписьXML.ЗаписатьАтрибут("Комментарий", ТекстовыйОтвет);
	ЗаписьXML.ЗаписатьАтрибут("ИДЗаявления", ДокументЗаявление.ИдентификаторДокументооборота);
	ЗаписьXML.ЗаписатьАтрибут("Оценка", 	 Строка(Оценка));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();

	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяФайла);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура НачатьОпределениеИдентификаторАдресаФИАС()

	Если НЕ ЗначениеЗаполнено(АдресЮридическийЗначение) ИЛИ ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	АдресЗаданияПоПолучениюИдентификатораАдресовФИАС = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("АдресЮридическийЗначение", 		АдресЮридическийЗначение);
	ДополнительныеПараметры.Вставить("АдресЮридическийПредставление", 	АдресЮридическийПредставление);
	ДополнительныеПараметры.Вставить("АдресФактическийЗначение", 		АдресФактическийЗначение);
	ДополнительныеПараметры.Вставить("АдресФактическийПредставление", 	АдресФактическийПредставление);
	
	ДополнительныеПараметры.Вставить("АдресХранилища",   АдресЗаданияПоПолучениюИдентификатораАдресовФИАС);
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПолучитьИдентификаторАдресаФИАСФоновоеЗадание(ДополнительныеПараметры); 

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	ОповеститьОбИзменении(ДокументЗаявление.Ссылка);
	ИзменитьОформлениеПанелиОтправки();
	ИзменитьОформлениеЧтоДелатьДальше();

КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеПанелиОтправки()
	
	Если ЗапретитьИзменение Тогда
		
		КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
		
		ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(
			ДокументЗаявление.Ссылка, 
			Организация);
			
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(
			ЭтотОбъект, 
			ПараметрыПрорисовкиПанелиОтправки);

		// Определяем доступность кнопки обновления в зависимости от состояния заявления
		Элементы.ОбновитьОтправку.Видимость = КонтекстЭДОСервер.КнопкаОбновленияВЗаявленииНаПодключениеДоступна(ДокументЗаявление.Ссылка);
		
		// Чтобы статус не переносился на две строчки
		Если (ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Одобрено") 
			ИЛИ ДокументЗаявление.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отклонено"))
			И НЕ ДокументЗаявление.НастройкаЗавершена Тогда
			
			Элементы.НаименованиеЭтапа.Ширина = 0;
			
		Иначе
			
			Элементы.НаименованиеЭтапа.Ширина = 18;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаПанельОтправки.Видимость = ЗапретитьИзменение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьЗаявление()
	
	ОтправитьЗаявление();
	
КонецПроцедуры

&НаСервере
Функция СокращенноеНаименование(Наименование)
	
	Результат = Наименование;
	
	Результат = СтрЗаменить(Результат, "Общество с ограниченной ответственностью", "ООО");
	Результат = СтрЗаменить(Результат,"Акционерное общество", "АО");
	Результат = СтрЗаменить(Результат,"Публичное акционерное общество", "ПАО");
	Результат = СтрЗаменить(Результат, "Закрытое акционерное общество", "ЗАО");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ФИОПриИзменении()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПропуститьОчисткуФайлов", Истина);
	
	ОпределитьВозможностьБезбумажногоПодписания(,,ДополнительныеПараметры); // Асинхронно
	
КонецПроцедуры

&НаСервере
Функция ЕстьОшибкаЛокальногоХраненияКлючей()
	
	ЭтоКонфликтКриптопровайдеров        = CryptoProCSPУстановлен И ViPNetCSPУстановлен;
	УстановленХотяБыОдинКриптопровайдер = CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен;
	
	Возврат 
		(ЭтоКонфликтКриптопровайдеров И НЕ ИгнорироватьКонфликт)
		ИЛИ НЕ УстановленХотяБыОдинКриптопровайдер
		ИЛИ НЕ КомпонентаДляРаботыСКриптографиейПодключена;	
	
КонецФункции

&НаСервере
Функция ТекстОшибкиЛокальногоХраненияКлючей()
	
	ЭтоКонфликтКриптопровайдеров        = CryptoProCSPУстановлен И ViPNetCSPУстановлен;
	УстановленХотяБыОдинКриптопровайдер = CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен;
	
	Текст = "";
	Если ЭтоКонфликтКриптопровайдеров Тогда
		
		Текст  = НСтр("ru = 'Хранение ключа локально недоступно при конфликте криптопровайдеров. '");
		
	ИначеЕсли НЕ КомпонентаДляРаботыСКриптографиейПодключена Тогда
		
		Текст  = НСтр("ru = 'Для хранения ключа локально необходимо установить внешнюю компоненту криптографии. '");
		
	ИначеЕсли НЕ УстановленХотяБыОдинКриптопровайдер Тогда
		
		Текст  = НСтр("ru = 'Для хранения ключа локально необходимо установить криптопровайдер. '");
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура НачатьОпределениеВладельцаЭППоФИО()
	
	Если НЕ ЗначениеЗаполнено(ВладелецЭЦПФамилия) ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦПИмя) ИЛИ НЕ ЗначениеЗаполнено(ВладелецЭЦПОтчество) Тогда
		Возврат;
	КонецЕсли;
	
	ФИО = Новый Массив;
	ФИО.Добавить(ВладелецЭЦПФамилия);
	ФИО.Добавить(ВладелецЭЦПИмя);
	ФИО.Добавить(ВладелецЭЦПОтчество);
	
	ФИО = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ФИО, " ", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование = &Наименование
		|	И ФизическиеЛица.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Наименование", ФИО);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВладелецЭЦП    = ВыборкаДетальныеЗаписи.Ссылка;
		Руководитель   = ВыборкаДетальныеЗаписи.Ссылка;
		ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
		УстановитьНовогоВладельцаЭЦПСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьХранениеКлючей(МастерДалее)
	
	ЭтоКонфликтКриптопровайдеров        = CryptoProCSPУстановлен И ViPNetCSPУстановлен;
	УстановленХотяБыОдинКриптопровайдер = CryptoProCSPУстановлен ИЛИ ViPNetCSPУстановлен;
	ВыбранЛокальныхРежим                = РежимРаботыСКлючами = 2;
	ЕстьОшибкаЛокальногоХраненияКлючей  = ЕстьОшибкаЛокальногоХраненияКлючей();

	Если ВыбранЛокальныхРежим Тогда
		
		Текст  = ТекстОшибкиЛокальногоХраненияКлючей();
		
		Если ЭтоКонфликтКриптопровайдеров
			ИЛИ НЕ КомпонентаДляРаботыСКриптографиейПодключена 
			ИЛИ НЕ УстановленХотяБыОдинКриптопровайдер Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ОшибкаЛокальногоХранения");
			МастерДалее = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОформлениеНастроекНотариуса()
	
	Элементы.ЭтоНотариусАдвокатИлиГКФХ.Видимость = Ложь;
	Элементы.ЭтоНотариусАдвокатИлиГКФХДоп.Видимость = Ложь;

	Если НЕ ЭтоЮридическоеЛицо Тогда
		Если ИспользуетсяОднаОрганизация Тогда
			АктивнаяНастройка = Элементы.ЭтоНотариусАдвокатИлиГКФХДоп;
		Иначе
			АктивнаяНастройка = Элементы.ЭтоНотариусАдвокатИлиГКФХ;
		КонецЕсли;
			
		АктивнаяНастройка.Видимость = Истина;
	КонецЕсли;
	
	Если ЗапретитьИзменение Тогда
		Элементы.ЭтоНотариусАдвокатИлиГКФХ.ТолькоПросмотр    = Истина;
		Элементы.ЭтоНотариусАдвокатИлиГКФХДоп.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
