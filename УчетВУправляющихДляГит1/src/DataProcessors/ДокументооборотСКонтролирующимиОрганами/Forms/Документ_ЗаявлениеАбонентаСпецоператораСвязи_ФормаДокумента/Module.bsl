&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

&НаКлиенте
Перем ДанныеОрганизации;

&НаКлиенте
Перем СтруктураДанныхСпецоператорыСвязи;

&НаСервере
Перем ОбработкаЭДО;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РучнойВвод 					= Параметры.РучнойВвод;
	ЗначениеКопированияДокумент = Параметры.ЗначениеКопирования;
	
	ЗаполнитьСписокВыбораРегионовРФ();
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	
	УправлениеЭлементамиФормы();
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ЭтоЗаявлениеТолькоНаПереход = КонтекстЭДОСервер.ЭтоЗаявлениеТолькоНаПереход(ЗначениеКопированияДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
		ПроверитьЗаполнениеДокумента(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаполнитьСводнуюИнформациюПоЗаявлениюАбонентаСпецоператораСвязи" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ОбновитьДанныеОбъекта();
			ЗаполнитьСводнуюИнформацию();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Завершение отправки" 
		И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("Ссылка")
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		ЗаполнитьСводнуюИнформацию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкачатьVipNetCSPНажатие(Элемент)
	КонтекстЭДОКлиент.ОткрытьСтраницуДляСкачивания(ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet"));
КонецПроцедуры

&НаКлиенте
Процедура СкачатьCryptoProCSPНажатие(Элемент)
	КонтекстЭДОКлиент.ОткрытьСтраницуДляСкачивания(ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro"));
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Имя = "АдресЮридический" Тогда
		Адрес = Объект.АдресЮридический;
	Иначе
		Адрес = Объект.АдресФактический;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ОткрытьФормуКонтактнойИнформацииЗавершение", 
		ЭтотОбъект, 
		Элемент); 
	
	ДополнительныеПараметры = КонтекстЭДОКлиент.ПараметрыПроцедурыРедактироватьАдрес();
	ДополнительныеПараметры.Вставить("Адрес",             Адрес);
	ДополнительныеПараметры.Вставить("АдресИмя",          Элемент.Имя);
	ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	ДополнительныеПараметры.Вставить("Оповещение",        Оповещение);

	КонтекстЭДОКлиент.РедактироватьАдрес(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СпецоператорИУЦОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.СпецоператорСвязи = ВыбранноеЗначение;
	ПолеHTMLЛицензии = КонтекстЭДОКлиент.ЗаменитьЭлементыВСоглашении(СтруктураДанныхСпецоператорыСвязи,Объект.СпецоператорСвязи);
КонецПроцедуры

&НаКлиенте
Процедура АдресЮридическийОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПризнакОбособленногоПодразделения = Ложь;
	ОчиститьДанныеСотрудника();
	Объект.Получатели.Очистить();
	ОчиститьРеквизитыФормы();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураРеквизитов = Новый Структура("Организация,ПриОткрытии",?(ЗначениеЗаполнено(Объект.Организация),Объект.Организация,Неопределено),Ложь);
		КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
		ДанныеЗаполнения = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
		ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
		
		ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения);
	КонецЕсли;
	
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР(ЭтотОбъект);
	ОбновитьЭлементыСтраницыОтчетностьВРПН(ЭтотОбъект);
	ОбновитьЭлементыСтраницыОтчетностьВФТС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьРеквизитыФормы();
	Объект.Организация = "";
КонецПроцедуры

&НаКлиенте
Процедура АдресФактическийОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОчистка(Элемент, СтандартнаяОбработка)
	Объект.ВладелецЭЦП = Неопределено;
	ОчиститьДанныеСотрудника();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпецоператорИУЦПриИзменении(Элемент)
	Модифицированность = Истина;
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР(ЭтотОбъект);
	ОбновитьЭлементыСтраницыОтчетностьВРПН(ЭтотОбъект);
	ОбновитьЭлементыСтраницыОтчетностьВФТС(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Декорация3Нажатие(Элемент)
	КонтекстЭДОКлиент.ОткрытьСтраницуУЦНажатие(СпецоператорИУЦ);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКриптопровайдераПриИзменении(Элемент)
	Модифицированность	= Истина;
	КартинкаВидимость	= Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКриптопровайдераПриИзмененииЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.ПолеВыбораКриптопровайдераПриИзменении(Элемент,ТаблицаЗначенийКС,КартинкаВидимость,ВыборКриптопровайдера,КриптопровайдерРекомендация,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СпецоператорИУЦОчистка(Элемент, СтандартнаяОбработка)
	ПолеHTMLЛицензии = "";
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ТолькоПросмотр Тогда
		РедактироватьВыбранноеНаправление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодатьЗаявкуНаСертификатДляФСРАРПриИзменении(Элемент)
	
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодатьЗаявкуНаПодключениеРПНПриИзменении(Элемент)
	
	ОбновитьЭлементыСтраницыОтчетностьВРПН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодатьЗаявкуНаПодключениеФТСПриИзменении(Элемент)
	
	ОбновитьЭлементыСтраницыОтчетностьВФТС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ЗаполнитьДанныеВладельцаЭЦП();
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПТипПриИзменении(Элемент)
	
	ОчиститьДанныеСотрудника();
	СменитьВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецЭЦПВидДокументаПриИзменении(Элемент)
	УстановитьВидимостьКодаПодразделения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействияФормыПечатьЗаявка(Команда)
	
	Если ПроверкаЗаполненияУЦ() Тогда Возврат КонецЕсли;
	
	КонтекстЭДОКлиент.ПечатьЗаявленияНаПодключение(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПечатьСоглашение(Команда)
	
	Если ПроверкаЗаполненияУЦ() Тогда Возврат КонецЕсли;
	
	КонтекстЭДОКлиент.ПечатьСоглашенияобОказанииУслуг(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПечатьЛицензия(Команда)
	
	КонтекстЭДОКлиент.ПечатьЛицензииОбИспользованииПО(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияФормыПечатьСертификат(Команда)
	
	КонтекстЭДОКлиент.ПечатьСертификатаПользователя(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормыПечатьПакет(Команда)
	
	КонтекстЭДОКлиент.ПечатьПакетаДокументов(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСоглашений(Команда)
	Элементы.ПолеHTMLЛицензии.Документ.execCommand("Print");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаправление(Команда)
	
	Если ПроверитьОрганизацию() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНаправления("Добавить", "Получатели");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНаправление(Команда)
	
	РедактироватьВыбранноеНаправление();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНаправление(Команда)
	
	КонтекстЭДОКлиент.УдалитьНаправление(
		ЭтотОбъект, 
		Объект.Получатели, 
		"Получатели",
		"Удалить");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявление(Команда)
	ТребуетсяПроверка = (Объект.ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное"));
	ПроверкаОтправкаЗаявления(ТребуетсяПроверка);
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправления(Команда)
	
	Если ПроверитьОрганизацию() Тогда
		Возврат;
	КонецЕсли;
	
	ПодтвердитьВосстановлениеНаправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	Если Объект.Статус=КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи_Подготовлено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСтатусПослеПроверкиЗавершение", ЭтотОбъект);
		ПроверитьЗаполнениеДокумента(ОписаниеОповещения);
	ИначеЕсли Объект.Статус=ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Отправлено") Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСтатусЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите проверить наличие ответа на заявление?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ПолучитьЗарегистрироватьОтвет();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКодаПодразделения(Форма)
	
	ВыбранПаспортРФ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(Форма.Объект.ВладелецЭЦПВидДокумента);
	
	ВидимостьКодаПодразделения = ВыбранПаспортРФ;
	
	Форма.Элементы.ВладелецЭЦПКодПодразделения.Видимость = ВидимостьКодаПодразделения;
	
КонецПроцедуры

#Область ДобавлениеУдалениеРедактированиеКодовОрганов

#Область ДобавлениеИРедактирование

&НаКлиенте
Процедура РедактироватьВыбранноеНаправление()
	
	ТекущаяСтрока = Элементы.Получатели.ТекущаяСтрока;
	
	Если КонтекстЭДОКлиент.ТекущаяСтрокаВыбрана(Объект.Получатели, ТекущаяСтрока,"редактирования") Тогда

		ОткрытьФормуНаправления("Редактировать", "Получатели");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНаправления(Действие, ИмяТаблицыФормы)
	
	ДанныеОрганизации.Вставить("ОбъектДополнительныйКодФСС", Объект.ДополнительныйКодФСС);
	АдресПолучателей = АдресПолучателей(ИмяТаблицыФормы);
	
	КонтекстЭДОКлиент.ОткрытьФормуНаправления(
		ЭтотОбъект, 
		Действие, 
		ИмяТаблицыФормы, 
		ДанныеОрганизации, 
		Ложь,
		АдресПолучателей);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуНаправленияЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	КонтекстЭДОКлиент.ОткрытьФормуНаправленияЗавершение(
		ЭтотОбъект,
		Объект.Получатели,
		Результат, 
		ВходящийКонтекст);
		
	СкрытьКнопкуУдаленияНаправления();
	
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Функция АдресПолучателей(ИмяТаблицыФормы) Экспорт

	ТаблицаПолучателей = Объект.Получатели.Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПолучателей, Новый УникальныйИдентификатор);

КонецФункции

#КонецОбласти

#Область Восстановление

&НаКлиенте
Процедура ПодтвердитьВосстановлениеНаправления()
	
	ОписаниеОповещения 	= Новый ОписаниеОповещения(
		"ВосстановитьНаправленияЗавершение", 
		ЭтотОбъект);
		
	ТекстВопроса = НСтр("ru = 'Восстановить значения кодов по умолчанию?'");
	
	ПоказатьВопрос(
		ОписаниеОповещения, 
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет
		,
		,
		КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Получатели.Очистить();
		
		КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчанию(
			Объект.Получатели, 
			ДанныеОрганизации);
			
		СкрытьКнопкуУдаленияНаправления();
		
		Модифицированность = Истина;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНаправленияПоУмолчанию(ПрограммноеДействие = Ложь)
	
	Если НЕ ПрограммноеДействие И ПроверитьОрганизацию() тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДОКлиент.ВосстановитьНаправленияПоУмолчанию(Объект.Получатели,ДанныеОрганизации);
	
	Элементы.Удалить.Доступность = Объект.Получатели.Количество() <> 0;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеНаправления

&НаКлиенте
Процедура УдалитьНаправлениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент.УдалитьНаправлениеЗавершение(
		ЭтотОбъект, 
		Объект.Получатели,
		РезультатВопроса, 
		ДополнительныеПараметры);
		
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СкрытьКнопкуУдаленияНаправления()
	
	Элементы.Удалить.Доступность = Объект.Получатели.Количество() <> 0;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьСписокУЦ()
	
	Спецоператоры = КонтекстЭДОКлиент.ПолучитьСпецоператорыСвязи(
		СтруктураДанныхСпецоператорыСвязи.СпецоператорыСвязи,
		СтруктураДанныхСпецоператорыСвязи.Макет);
		
	Элементы.СпецоператорИУЦ.СписокВыбора.ЗагрузитьЗначения(Спецоператоры);
	
	Если НЕ ПустаяСтрока(Объект.СпецоператорСвязи) Тогда
		
		СпецоператорИУЦ = Объект.СпецоператорСвязи;
		
	ИначеЕсли Элементы.СпецоператорИУЦ.СписокВыбора.Количество() = 1 Тогда
		
		СпецоператорИУЦ = Элементы.СпецоператорИУЦ.СписокВыбора.Получить(0).Значение;
		Объект.СпецоператорСвязи = СпецоператорИУЦ;
		Элементы.СпецоператорИУЦ.ТолькоПросмотр = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СпецоператорСвязи) 
		И НЕ СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи = Неопределено Тогда
		
		СпецоператорИУЦ = СтруктураДанныхСпецоператорыСвязи.ЗначениеЗаполненияСпецоператораСвязи;
		Объект.СпецоператорСвязи = СпецоператорИУЦ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокКриптопровайдеровЗавершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено Тогда
		ЭтоLinux = ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент();
		ПоддерживаемыеКриптопровайдеры = КриптографияЭДКОКлиентСервер.ПоддерживаемыеКриптопровайдеры(, ЭтоLinux);
		ИндексКриптопровайдеров = Неопределено;
		
		Для каждого Криптопровайдер Из Результат.Криптопровайдеры Цикл
			СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(
				Криптопровайдер.Имя,
				Криптопровайдер.Тип,
				ПоддерживаемыеКриптопровайдеры,
				ИндексКриптопровайдеров);
			Если СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
				ТаблицаЗначенийКС.Получить(0).УстановленОС = Истина;
			ИначеЕсли СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
				ТаблицаЗначенийКС.Получить(1).УстановленОС = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТипИмяКриптопровайдера = КонтекстЭДОКлиент.ПолучитьИмяТипКриптопровайдера();
	Имя = ТипИмяКриптопровайдера.Имя;
	Тип = ТипИмяКриптопровайдера.Тип;
	
	Если Тип <> Неопределено И Имя <> Неопределено Тогда
		СвойстваКриптопровайдера = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдера(Имя, Тип);
		Если СвойстваКриптопровайдера <> Неопределено Тогда
			Если СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet") Тогда
				ТаблицаЗначенийКС.Получить(0).Выбран1с = Истина;
			ИначеЕсли СвойстваКриптопровайдера.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro") Тогда
				ТаблицаЗначенийКС.Получить(1).Выбран1с = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоУстановленных = 0;
	
	Для каждого Строка из ТаблицаЗначенийКС Цикл
		
		ПредставлениеТипаКриптопровайдераViPNet = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(
			ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet")).Представление;
		Инфотекс = (ВРег(Строка.Криптопровайдер) = ВРег(ПредставлениеТипаКриптопровайдераViPNet));
		
		Если Строка.УстановленОС Тогда
			Строка.Статус = "(установлен на компьютере)";
			КоличествоУстановленных = КоличествоУстановленных + 1;
		ИначеЕсли Инфотекс Тогда 	
			Строка.Статус = "(требуется установка)";
		Иначе
			Строка.Статус = "(требуется приобретение и установка)";
		КонецЕсли;
		
		Строка.ОтображаемыйТекст = Строка.Криптопровайдер + " " + Строка.Статус;
		Если Инфотекс Тогда
			Элементы.ВыборКриптопровайдера.СписокВыбора[0].Представление = Строка.ОтображаемыйТекст;
		Иначе 
			Элементы.ВыборКриптопровайдера.СписокВыбора[1].Представление = Строка.ОтображаемыйТекст;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если КоличествоУстановленных = 1 тогда
			
			Для каждого Строка из ТаблицаЗначенийКС Цикл
				Если Строка.УстановленОС Тогда
					Если ВРег(Строка.Криптопровайдер) = ВРег("ViPNet CSP") Тогда
						ВыборКриптопровайдера = 1;
					Иначе
						ВыборКриптопровайдера = 2;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если СокрЛП(Объект.ТипКриптопровайдера) <> "Vip net" Тогда
			ВыборКриптопровайдера = 2;
		Иначе
			ВыборКриптопровайдера = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	КартинкаВидимость = Ложь;
	
	КонтекстЭДОКлиент.ВыработатьРекомендацииПоКриптопровайдеру(ТаблицаЗначенийКС,КриптопровайдерРекомендация,ВыборКриптопровайдера,КартинкаВидимость);
	
	Элементы.ПолеКартинкиВнимание48.Видимость = КартинкаВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСводнуюИнформацию()
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Объект.Ссылка, Объект.Организация);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(ЭтаФорма, ПараметрыПрорисовкиПанелиОтправки);

	// Определяем доступность кнопки обновления в зависимости от состояния заявления
	Элементы.ОбновитьОтправку.Видимость = КонтекстЭДОКлиент.КнопкаОбновленияВЗаявленииНаПодключениеДоступна(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	СтруктураРеквизитов = Новый Структура("Организация,ПриОткрытии",?(ЗначениеЗаполнено(Объект.Организация),Объект.Организация,Неопределено),Истина);
	
	ОрганизацияЗаполнена = ЗначениеЗаполнено(Объект.Организация);
	Если ОрганизацияЗаполнена Тогда
		СтруктураРеквизитов.Вставить("АдресЮридический",Объект.АдресЮридический);
		СтруктураРеквизитов.Вставить("АдресФактический",Объект.АдресФактический);
	КонецЕсли;
	
	КонтекстЭДОКлиент.ЗаполнитьДанныеОрганизации(СтруктураРеквизитов);
	ДанныеЗаполнения = КонтекстЭДОКлиент.ДополнитьДанныеОрганизацииДаннымиПоОтветственнымЛицам(СтруктураРеквизитов);
	
	Если ОрганизацияЗаполнена Тогда
		
		ЮрАдрес		= ДанныеЗаполнения.ЮрАдрес;
		ФактАдрес	= ДанныеЗаполнения.ФактАдрес;
		
		ДанныеОрганизации = ДанныеЗаполнения.СтруктураДанныхОрганизации;
		
		Если ЭтоНовый Тогда
			ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения);
			Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
		КонецЕсли;
		
		Если ТолькоПросмотр Тогда
			Элементы.Сотрудник.ТолькоПросмотр 	= ТолькоПросмотр;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДанныхСпецоператорыСвязи = Новый Структура();
	СтруктураДанныхСпецоператорыСвязи.Вставить("СпецоператорыСвязи",                   ДанныеЗаполнения.СпецоператорыСвязи);
	СтруктураДанныхСпецоператорыСвязи.Вставить("Макет",                                ДанныеЗаполнения.МакетПараметрыСпецоператоровСвязи);
	СтруктураДанныхСпецоператорыСвязи.Вставить("ТекстМакетаСоглашение",                ДанныеЗаполнения.ТекстМакетаСоглашение);
	СтруктураДанныхСпецоператорыСвязи.Вставить("ЗначениеЗаполненияСпецоператораСвязи", ДанныеЗаполнения.ЗначениеЗаполненияСпецоператораСвязи);
	
	ЗаполнитьСписокУЦ();
	
	ТекстМакетаСоглашение = Строка(ДанныеЗаполнения.ТекстМакетаСоглашение);
	
	Если СпецоператорИУЦ <> Неопределено Тогда
		ПолеHTMLЛицензии = КонтекстЭДОКлиент.ЗаменитьЭлементыВСоглашении(СтруктураДанныхСпецоператорыСвязи,СпецоператорИУЦ);
	КонецЕсли;

	ЗаполнитьСводнуюИнформацию();
	
	Если НЕ Объект.ЭлектроннаяПодписьВМоделиСервиса Тогда
		
		ПредставлениеТипаКриптопровайдераViPNet = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(
			ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet")).Представление;
		ПредставлениеТипаКриптопровайдераCryptoPro = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(
			ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro")).Представление;
		
		НоваяСтрока = ТаблицаЗначенийКС.Добавить();
		НоваяСтрока.Криптопровайдер 	= ПредставлениеТипаКриптопровайдераViPNet;
		НоваяСтрока.УстановленОС 		= Ложь;
		НоваяСтрока.Выбран1с 			= Ложь;
		
		НоваяСтрока = ТаблицаЗначенийКС.Добавить();
		НоваяСтрока.Криптопровайдер 	= ПредставлениеТипаКриптопровайдераCryptoPro;
		НоваяСтрока.УстановленОС 		= Ложь;
		НоваяСтрока.Выбран1с 			= Ложь;
		
		Оповещение 	= Новый ОписаниеОповещения("ЗаполнитьСписокКриптопровайдеровЗавершение", ЭтотОбъект);
		
		КриптографияЭДКОКлиент.ПолучитьКриптопровайдеры(Оповещение);
		
	КонецЕсли;
	
	Если Объект.ТипЗаявления = ПредопределенноеЗначение("Перечисление.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение") Тогда
		СформироватьТаблицуИзмененныхДанных();
	Иначе
		Элементы.Сотрудник.Видимость = Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	КонецЕсли;
	
	ДлительнаяОтправкаКлиент.ЗакрытьФормуОжиданияЗагрузкиМодуля();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Элементы.УкажитеКриптопровайдер.Видимость 					= Не Объект.ЭлектроннаяПодписьВМоделиСервиса;
	Элементы.ПутьКонтейнерЗакрытогоКлюча.Видимость 				= Не Объект.ЭлектроннаяПодписьВМоделиСервиса;
	
	Если Объект.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Изменение Тогда
		ЭтаФорма.Заголовок = "Заявление на изменение подключения к 1С-Отчетности";
		Элементы.ДополнительнаяИнформация.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Объект.ТипЗаявления					 = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное;
		Объект.Дата							 = ТекущаяДатаСеанса();
		Объект.Статус						 = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено;
		Объект.ИдентификаторДокументооборота = нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")),"-",""));
		ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено Тогда
		ТолькоПросмотр = Ложь;
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ТолькоПросмотр И Объект.ПодключитьЭДО Тогда
		Элементы.ПодключениеЭДО.Видимость = Истина;
		
		СтруктураПараметров = Новый Структура("СсылкаОписаниеСервиса");
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗаполнитьПараметрыСервисаЭлектронныхДокументовДляФормыПодключенияК1СООтчетности(Объект.Организация, СтруктураПараметров);
		
		Если ЗначениеЗаполнено(СтруктураПараметров.СсылкаОписаниеСервиса) Тогда
			СсылкаОписаниеСервисаЭДО = СтруктураПараметров.СсылкаОписаниеСервиса;	
		КонецЕсли;
	Иначе
		Элементы.ПодключениеЭДО.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Организация.ТолькоПросмотр				 = ТолькоПросмотр;
	Элементы.СпецоператорИУЦ.ТолькоПросмотр			 = ТолькоПросмотр;
	Элементы.Получатели.КоманднаяПанель.Доступность	 = НЕ ТолькоПросмотр;
	
	ОрганизацияЗаполнена = ЗначениеЗаполнено(Объект.Организация);
	
	Если НЕ ТолькоПросмотр Тогда
		Элементы.АдресЮридический.ЦветФона = Новый Цвет(255,255,255);
		Элементы.АдресФактический.ЦветФона = Новый Цвет(255,255,255);
		Если ОрганизацияЗаполнена Тогда
			Элементы.АдресЮридический.КнопкаВыбора = Истина;
			Элементы.АдресФактический.КнопкаВыбора = Истина;
		КонецЕсли;
	иначе
		Элементы.АдресЮридический.КнопкаВыбора = Ложь;
		Элементы.АдресФактический.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Элементы.ВыборКриптопровайдера.ТолькоПросмотр = ТолькоПросмотр;	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено Тогда
		Элементы.ОтправитьЗаявление.Доступность	= Истина;
	КонецЕсли;
	
	// Открываем документ с различным внешним видом в зависимости от типа заявления
	Если Объект.ТипЗаявления = Перечисления.ТипыЗаявленияАбонентаСпецоператораСвязи.Первичное Тогда
		Элементы.ИнтерфейсыЗаявления.ТекущаяСтраница = Элементы.ПервичноеЗаявление;
	Иначе
		Элементы.ИнтерфейсыЗаявления.ТекущаяСтраница = Элементы.ВторичноеЗаявление;
	КонецЕсли;
	
	ОбновитьЭлементыСтраницыОтчетностьВФСРАР(ЭтотОбъект);
	ОбновитьЭлементыСтраницыОтчетностьВРПН(ЭтотОбъект);
	ОбновитьЭлементыСтраницыОтчетностьВФТС(ЭтотОбъект);
	
	УстановитьВидимостьКодаПодразделения(ЭтотОбъект);
	
	ПереходВКоробку = ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку);
	ПереходВОблако 	= ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако);
	Если ПереходВКоробку ИЛИ ПереходВОблако Тогда
		Элементы.ОтправитьЗаявление.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеКонстант(Тип,Имя)
	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Установить(Тип);
	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.Установить(Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеДокумента(ВыполняемоеОповещение)

	ИтогПроверки = Истина;
	
	ИтогПроверки = НЕ ПроверкаЗаполненияУЦ();
	
	Если ПроверитьОрганизацию() тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Ложь);
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ПолноеНаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите полное наименование организации.'"), ,"Объект.ПолноеНаименование");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КраткоеНаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите краткое наименование организации.'"), ,"Объект.КраткоеНаименование");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	СтрЦифры = "0123456789";
	Если ПустаяСтрока(Объект.НомерОсновнойПоставки1с) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан регистрационный номер.'"), ,"Объект.НомерОсновнойПоставки1с");
		ИтогПроверки = Ложь;
	КонецЕсли;

	Если ПустаяСтрока(Объект.ИНН)Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите ИНН организации.'"), ,"Объект.ИНН");
		ИтогПроверки = Ложь;
	ИначеЕсли КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(Объект.ИНН,10) Тогда
		
		Если НЕ (КонтекстЭДОКлиент.ПроверитьКПП(Объект.КПП)) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите КПП организации.'"), ,"Объект.КПП");
			ИтогПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(Объект.ОГРН, 13)) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите ОГРН организации.'"), ,"ОГРН");
			ИтогПроверки = Ложь;
		КонецЕсли;
		
		Объект.ТипОрганизации = Истина;
	ИначеЕсли КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(Объект.ИНН,12) Тогда
		
		Если (КонтекстЭДОКлиент.ПроверитьКПП(Объект.КПП)) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указан ИНН физического лица и КПП юридического лица.'"), ,"Объект.КПП");
			ИтогПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ (КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(Объект.ОГРН, 15, Истина)) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно заполнен ОГРН организации.'"), ,"ОГРН");
				ИтогПроверки = Ложь;
		КонецЕсли;
		
		Объект.ТипОрганизации = Ложь;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно заполнен ИНН организации.'"), ,"Объект.ИНН");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ КонтекстЭДОКлиент.ПроверитьРегистрационныйНомерПФР(Объект.РегНомерПФР, Истина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно заполнен регистрационный номер в ПФР.'"), ,"Объект.РегНомерПФР");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(Объект.РегНомерФСС, 10, Истина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно заполнен регистрационный номер в ФСС.'"), ,"Объект.РегНомерФСС");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(Объект.ДополнительныйКодФСС, 10, Истина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно заполнен дополнительный регистрационный номер в ФСС.'"), ,"Объект.ДополнительныйКодФСС");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Объект.ЭлектроннаяПочта) Тогда
		Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.ЭлектроннаяПочта) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно заполнен адрес электронной почты,
		|реквизит необязательный для заполнения.'"), ,"Объект.ЭлектроннаяПочта");
		ИтогПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ТелефонОсновной) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите основной телефон организации.'"), ,"Объект.ТелефонОсновной");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.АдресЮридический) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан юридический адрес.'"), ,"ЮрАдрес");
		ИтогПроверки = Ложь;
	Иначе
		ИтогПроверкиАдресЮр = Истина;
		ПреобразоватьАдресКодРегиона(Объект.АдресЮридический,0,ИтогПроверкиАдресЮр);
		Если ИтогПроверкиАдресЮр тогда
			СтрокаОшибкаАдреса = КонтекстЭДОКлиент.ПроверитьАдрес(Объект.АдресЮридический);
			Если Не ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректно заполнен юридический адрес: %1'"),СтрокаОшибкаАдреса), ,"ЮрАдрес");
				ИтогПроверки = Ложь;
			КонецЕсли;
		Иначе
			ИтогПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.АдресФактический) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан фактический адрес.'"), ,"ФактАдрес");
		ИтогПроверки = Ложь;
	Иначе
		ИтогПроверкиАдресФакт = Истина;
		ПреобразоватьАдресКодРегиона(Объект.АдресФактический,1,ИтогПроверкиАдресФакт);
		Если ИтогПроверкиАдресФакт тогда
			СтрокаОшибкаАдреса = КонтекстЭДОКлиент.ПроверитьАдрес(Объект.АдресФактический);
			Если Не ПустаяСтрока(СтрокаОшибкаАдреса) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Некорректно заполнен фактический адрес: %1'"),СтрокаОшибкаАдреса), ,"ФактАдрес");
				ИтогПроверки = Ложь;
			КонецЕсли;
		Иначе
			ИтогПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ПустаяСтрока(Объект.ВладелецЭЦПФамилия) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите фамилию сотрудника.'"), ,"Объект.ВладелецЭЦПФамилия");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ВладелецЭЦПИмя) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите имя сотрудника.'"), ,"Объект.ВладелецЭЦПИмя");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Объект.ВладелецЭЦПСНИЛС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не соответствует маске 999-999-999 99'"), ,"Объект.ВладелецЭЦПСНИЛС");
		ИтогПроверки = Ложь;
	ИначеЕсли НЕ ДокументооборотСКОКлиентСервер.ПроверитьСНИЛС(Объект.ВладелецЭЦПСНИЛС, Ложь, Истина) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан СНИЛС сотрудника. Не сошлось контрольное число (СНИЛС не существует)'"), ,"Объект.ВладелецЭЦПСНИЛС");
		ИтогПроверки = Ложь;
	ИначеЕсли Объект.ВладелецЭЦПСНИЛС = "000-000-000 00" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Предупреждение. Указан ""нулевой"" СНИЛС 000-000-000 00. Обычно это допустимо только для иностранных граждан.'"));
	КонецЕсли;
	
	// Пол
	Если НЕ ЗначениеЗаполнено(Объект.ВладелецЭЦППол) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Пол""'"), ,"Объект.ВладелецЭЦППол");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если Объект.ТипОрганизации Тогда
		
		Если ПустаяСтрока(Объект.ВладелецЭЦПДолжность) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите должность сотрудника.'"), ,"Объект.ВладелецЭЦПДолжность");
			ИтогПроверки = Ложь;
		ИначеЕсли СтрДлина(Объект.ВладелецЭЦПДолжность) > 64 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Длина значения в поле Должность не должна превышать 64 символа.'"), ,"Объект.ВладелецЭЦПВидДокумента");
			ИтогПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрДлина(Объект.ВладелецЭЦППодразделение) > 64 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Длина значения в поле Подразделение не должна превышать 64 символа.'"), ,"Объект.ВладелецЭЦППодразделение");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	// Гражданство
	Если НЕ ЗначениеЗаполнено(Объект.ВладелецЭЦПГражданство) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Гражданство""'"), ,"Объект.ВладелецЭЦПГражданство");
		ИтогПроверки = Ложь;
	ИначеЕсли НЕ ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.КодАльфа2Заполнен(Объект.ВладелецЭЦПГражданство)
		И Объект.ВладелецЭЦПГражданство <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия")  Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните код альфа-2 у страны, указанной в качестве гражданства сотрудника-владельца ЭП'"), ,"Объект.ВладелецЭЦПГражданство");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ВладелецЭЦПВидДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите вид документа, удостоверяющего личность сотрудника.'"), ,"Объект.ВладелецЭЦПВидДокумента");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ВладелецЭЦПСерияДокумента) И НЕ КонтекстЭДОКлиент.ПроверитьСериюДокумента(Объект.ВладелецЭЦПВидДокумента,Объект.ВладелецЭЦПСерияДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите серию документа удостоверяющего личность сотрудника.'"), ,"Объект.ВладелецЭЦПСерияДокумента");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ВладелецЭЦПНомерДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите номер документа удостоверяющего личность сотрудника.'"), ,"Объект.ВладелецЭЦПНомерДокумента");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ВладелецЭЦПКемВыданДокумент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите кем выдан документ удостоверяющий личность сотрудника.'"), ,"Объект.ВладелецЭЦПКемВыданДокумент");
		ИтогПроверки = Ложь;
	ИначеЕсли СтрДлина(Объект.ВладелецЭЦПКемВыданДокумент) > 200 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Наименование органа """+Объект.ВладелецЭЦПКемВыданДокумент+""","+Символы.ПС+"выдавшего документ удостоверяющий личность сотрудника, не должно быть больше 200 символов.'"), ,"Объект.ВладелецЭЦПКемВыданДокумент");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВладелецЭЦПДатаВыдачиДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите дату выдачи документа удостоверяющего личность сотрудника.'"), ,"Объект.ВладелецЭЦПДатаВыдачиДокумента");
		ИтогПроверки = Ложь;
	ИначеЕсли Объект.ВладелецЭЦПДатаВыдачиДокумента > КонтекстЭДОКлиент.ТекущаяДатаНаСервере() ИЛИ Год(Объект.ВладелецЭЦПДатаВыдачиДокумента) < 1900 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указана недопустимая дата выдачи документа удостоверяющего личность.'"), ,"Объект.ВладелецЭЦПДатаВыдачиДокумента");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(Объект.ВладелецЭЦПВидДокумента) Тогда
		// Код подразделения. Только для паспорта РФ.
		КодПодразделенияБезТире = СтрЗаменить(Объект.ВладелецЭЦПКодПодразделения, "-","");
		Если ПустаяСтрока(КодПодразделенияБезТире) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Код подразделения""'"), ,"Объект.ВладелецЭЦПКодПодразделения");
			ИтогПроверки = Ложь;
		ИначеЕсли СтрДлина(Объект.ВладелецЭЦПКодПодразделения) <> 7
			ИЛИ НЕ КонтекстЭДОКлиент.ПроверитьЦифровойКодЗаданнойДлины(КодПодразделенияБезТире, 6, Истина) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Некорректно указан код подразделения. Не соответствует маске ХХХ-ХХХ, где X – любая цифра'"), ,"Объект.ВладелецЭЦПКодПодразделения");
			ИтогПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Дата рождения
	Если Не ЗначениеЗаполнено(Объект.ВладелецЭЦПДатаРождения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Дата рождения""'"), ,"Объект.ВладелецЭЦПДатаРождения");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	// Место рождения
	Если ПустаяСтрока(Объект.ВладелецЭЦПМестоРождения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заполните поле ""Место рождения""'"), ,"Объект.ВладелецЭЦПМестоРождения");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Если Объект.Получатели.Количество() < 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите хотя бы одно направление сдачи, ФНС или ПФР.'"), ,"Объект.Получатели");
		ИтогПроверки = Ложь;
	ИначеЕсли Объект.Получатели.Количество()=1 
				И Объект.Получатели[0].ТипПолучателя <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС") 
				И Объект.Получатели[0].ТипПолучателя <> ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Среди направлений сдачи должен быть ФНС или ПФР.'"), ,"Объект.Получатели");
			ИтогПроверки = Ложь;
	КонецЕсли;
	
	ОтборФСГС = Новый Структура("ТипПолучателя",ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	ОтборФНС = Новый Структура("ТипПолучателя",ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	Если Объект.Получатели.НайтиСтроки(ОтборФСГС).Количество() > 0
		И Объект.Получатели.НайтиСтроки(ОтборФНС).Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для подключения направления Росстат должно быть подключено направление ФНС, необходимо добавить направление ФНС.'"), ,"Объект.Получатели");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("ТипПолучателя",ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ПФР"));
	
	Если ПустаяСтрока(Объект.РегНомерПФР)
		И Объект.Получатели.НайтиСтроки(Отбор).Количество() >0 тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указано направление ПФР, но в сведениях об организации не заполнен регистрационный номер в ПФР.'"), ,"Объект.РегНомерПФР");
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("ТипПолучателя",ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС"));
	
	Если Объект.Получатели.НайтиСтроки(Отбор).Количество() > 0 Тогда
		
		ТекстОшибки = "";
		
		Если НЕ Объект.ПризнакОбособленногоПодразделения И ПустаяСтрока(Объект.РегНомерФСС) Тогда
			ТекстОшибки = "регистрационный номер в ФСС.";
			ОбъектНомерФСС ="Объект.РегНомерФСС";
		ИначеЕсли Объект.ПризнакОбособленногоПодразделения И ПустаяСтрока(Объект.ДополнительныйКодФСС) Тогда
			ТекстОшибки = "дополнительный регистрационный номер в ФСС.";
			ОбъектНомерФСС ="Объект.ДополнительныйКодФСС";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ТекстОшибки = "Указано направление ФСС, но в сведениях об организации не заполнен "+ТекстОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = '"+ТекстОшибки+"'"),,ОбъектНомерФСС);
			ИтогПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ЭлектроннаяПодписьВМоделиСервиса Тогда
		Если Не ЗначениеЗаполнено(Объект.ИдентификаторПроверкиТелефонаДляПаролей) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проверка телефона для получения паролей не выполнена. Воспользуйтесь мастером подключения для отправки заявления.'"));
			ИтогПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если ВыборКриптопровайдера = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран криптопровайдер.'"), ,"ВыборКриптопровайдера");
			ИтогПроверки = Ложь;
		Иначе
			
			Если ВыборКриптопровайдера = 1 Тогда
				Объект.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet");
			Иначе
				Объект.ТипКриптопровайдера = ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro");
			КонецЕсли;
			
			Криптопровайдер = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(Объект.ТипКриптопровайдера);
			
			УстановитьЗначениеКонстант(Криптопровайдер.Тип,Криптопровайдер.Имя);
			
		КонецЕсли;
	КонецЕсли;
	
	//Страница Росалкогольрегулирование
	Если Объект.ПодатьЗаявкуНаСертификатДляФСРАР Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.КодРегионаФСРАР) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'На закладке ""Прочие контролирующие органы"" не указан код региона Росалкогольрегулирования'"), ,"Объект.КодРегионаФСРАР");
			ИтогПроверки = Ложь;
		КонецЕсли;
		
		Если ИтогПроверки = Истина Тогда
			
			КодРегионаЮрАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Объект.АдресЮридический).Регион;
			
			Если Объект.КодРегионаФСРАР <> КодРегионаЮрАдреса И ЗначениеЗаполнено(КодРегионаЮрАдреса) Тогда
				НаименованиеРегионаЮрАдреса = НаименованиеСубъектаРФ(Число(КодРегионаЮрАдреса));
				КодРегионаСНаименованием = Формат(Число(КодРегионаЮрАдреса), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;") + ?(ЗначениеЗаполнено(НаименованиеРегионаЮрАдреса), " - ", "") + НаименованиеРегионаЮрАдреса;
				ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ИтогПроверки", ВыполняемоеОповещение, ИтогПроверки);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросРосалкогольрегулированияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ТекстВопроса = "Регион заявки для Росалкогольрегулирования отличается от указанного в юридическом адресе (""" + КодРегионаСНаименованием + """). Продолжить?";
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
				Возврат;
			КонецЕсли;
			
			Если ИтогПроверки И ЗначениеЗаполнено(Объект.КодРегионаФСРАР) Тогда
				
				ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(Объект.КодРегионаФСРАР);
				
				СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
				Если ИнформацияОРегионе <> Неопределено Тогда
					СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, Объект.КодРегионаФСРАР);
				КонецЕсли;
				
				Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
					ДополнительныеПараметры = Новый Структура("ВыполняемоеОповещение, ИтогПроверки", ВыполняемоеОповещение, ИтогПроверки);
					ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете." + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС
						+ "Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") в текущей версии не поддерживается. Продолжить?";
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуПослеПроверки(ВыполняемоеОповещение, ИтогПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросРосалкогольрегулированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИтогПроверки = ДополнительныеПараметры.ИтогПроверки;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ИтогПроверки = Ложь;
		ВыполнитьОбработкуПослеПроверки(ВыполняемоеОповещение, ИтогПроверки);
	ИначеЕсли ЗначениеЗаполнено(Объект.КодРегионаФСРАР) Тогда
		
		ИнформацияОРегионе = ИнформацияОРегионеФСРАРНаСервере(Объект.КодРегионаФСРАР);
		
		СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную");
		Если ИнформацияОРегионе <> Неопределено Тогда
			СхемаСдачиОтчетности = КонтекстЭДОКлиент.СхемаСдачиОтчетностиФСРАР(Ложь, ИнформацияОРегионе.ТипПортала, Объект.КодРегионаФСРАР);
		КонецЕсли;
		
		Если СхемаСдачиОтчетности = ПредопределенноеЗначение("Перечисление.СхемыСдачиОтчетностиФСРАР.СдачаВручную") Тогда
			ДопПараметры = Новый Структура("ВыполняемоеОповещение, ИтогПроверки", ВыполняемоеОповещение, ИтогПроверки);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросФСРАРСдачаВручнуюЗавершение", ЭтотОбъект, ДопПараметры);
			ТекстВопроса = "Для выбранного региона поддерживается функция формирования пакета, содержащего подписанную отчетность, для последующей загрузки на соответствующий портал в интернете." + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС
				+ "Обратите внимание, функция отправки отчетности непосредственно из программы (кнопка ""Отправить"") в текущей версии не поддерживается. Продолжить?";
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
		Иначе
			ВыполнитьОбработкуПослеПроверки(ВыполняемоеОповещение, ИтогПроверки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросФСРАРСдачаВручнуюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИтогПроверки = ДополнительныеПараметры.ИтогПроверки;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ИтогПроверки = Ложь;
	КонецЕсли;
	
	ВыполнитьОбработкуПослеПроверки(ВыполняемоеОповещение, ИтогПроверки);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуПослеПроверки(ВыполняемоеОповещение, ИтогПроверки)
	
	Объект.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();//Пользователи.ТекущийПользователь();
	ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ИтогПроверки);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОРегионеФСРАРНаСервере(Знач КодРегиона)
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ИнформацияОРегионеФСРАР(КодРегиона);
	
КонецФункции

&НаКлиенте
Функция ПроверкаЗаполненияУЦ()
	Если НЕ ЗначениеЗаполнено(Объект.СпецоператорСвязи) ИЛИ СпецоператорИУЦ = Неопределено тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран Удостоверяющий центр.'"), ,"СпецоператорИУЦ");
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	НовыйАдрес = КонтекстЭДОКлиент.РедактироватьАдресКонвертацияРезультата(РезультатЗакрытия);
	ОбновитьАдрес(НовыйАдрес, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдрес(НовыйАдрес, Элемент)
	
	Если НовыйАдрес.Модифицированность Тогда
		Модифицированность = Истина;
		Если Элемент.Имя = "АдресЮридический" Тогда
			Объект.АдресЮридический = НовыйАдрес.Адрес;
			юрАдрес					= НовыйАдрес.АдресПредставление;
		Иначе
			Объект.АдресФактический = НовыйАдрес.Адрес;
			ФактАдрес				= НовыйАдрес.АдресПредставление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеАдресаИзСписка(СписокПолейАдреса)
	
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Индекс","");
	СтруктураПолей.Вставить("Регион","");
	СтруктураПолей.Вставить("Район","");
	СтруктураПолей.Вставить("Город","");
	СтруктураПолей.Вставить("НаселенныйПункт","");
	СтруктураПолей.Вставить("Улица","");
	СтруктураПолей.Вставить("Дом","");
	СтруктураПолей.Вставить("Корпус","");
	СтруктураПолей.Вставить("Квартира","");
	СтруктураПолей.Вставить("ТипДома","");
	СтруктураПолей.Вставить("ТипКорпуса","");
	СтруктураПолей.Вставить("ТипКвартиры","");
	
	Для каждого ЭлементСписка Из СписокПолейАдреса Цикл
		
		Если СтруктураПолей.Свойство(ЭлементСписка.Представление) Тогда
			СтруктураПолей[ЭлементСписка.Представление] = ЭлементСписка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеАдреса = СтруктураПолей.Индекс + ","
	+ СтруктураПолей.Регион + ","
	+ СтруктураПолей.Район + ","
	+ СтруктураПолей.Город + ","
	+ СтруктураПолей.НаселенныйПункт + ","
	+ СтруктураПолей.Улица + ","
	+ ?(ПустаяСтрока(СтруктураПолей.ТипДома), "", СтруктураПолей.ТипДома + " № ") + СтруктураПолей.Дом + ","
	+ ?(ПустаяСтрока(СтруктураПолей.ТипКорпуса), "", СтруктураПолей.ТипКорпуса + " ") + СтруктураПолей.Корпус + ","
	+ ?(ПустаяСтрока(СтруктураПолей.ТипКвартиры), "", СтруктураПолей.ТипКвартиры + " ") + СтруктураПолей.Квартира;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаКлиенте
Функция ПреобразоватьПредставлениеАдреса(ПредставлениеАдреса)
	
	ЧастьАдреса = СокрЛП(ПредставлениеАдреса);
	
	Если Лев(ПредставлениеАдреса, 3) = "643" ИЛИ Лев(ПредставлениеАдреса, 3) = "999" Тогда
		ЧастьАдреса = СокрЛ(Сред(ЧастьАдреса, 5));
	КонецЕсли;
	
	СтруктураПолей = Новый Структура;
	
	СтруктураПолей.Вставить("Индекс","");
	СтруктураПолей.Вставить("Регион","");
	СтруктураПолей.Вставить("Район","");
	СтруктураПолей.Вставить("Город","");
	СтруктураПолей.Вставить("НаселенныйПункт","");
	СтруктураПолей.Вставить("Улица","");
	СтруктураПолей.Вставить("Дом","");
	СтруктураПолей.Вставить("Корпус","");
	СтруктураПолей.Вставить("Квартира","");
	СтруктураПолей.Вставить("ТипДома","");
	СтруктураПолей.Вставить("ТипКорпуса","");
	СтруктураПолей.Вставить("ТипКвартиры","");
	
	Для каждого ЭлементСтруктуры Из СтруктураПолей Цикл
		
		ПозицияРазд = СтрНайти(ЧастьАдреса, ",");
		Если ПозицияРазд = 0 Тогда
			ЗначениеПоля = ЧастьАдреса;
			ЧастьАдреса = "";
		Иначе
			ЗначениеПоля = Лев(ЧастьАдреса, ПозицияРазд - 1);
			ЧастьАдреса = Сред(ЧастьАдреса, ПозицияРазд + 1);
		КонецЕсли;
		
		СтруктураПолей[ЭлементСтруктуры.Ключ] = СокрЛП(ЗначениеПоля);
		
	КонецЦикла;
	
	СтрПолеАдреса = СтруктураПолей.Дом;
	Для ПозСим = 1 По СтрДлина(СтрПолеАдреса) Цикл
		Если СтрНайти("0123456789", Сред(СтрПолеАдреса, ПозСим, 1)) > 0 Тогда
			СтруктураПолей.Дом = Сред(СтрПолеАдреса, ПозСим);
			СтруктураПолей.ТипДома = СокрЛП(СтрЗаменить(Лев(СтрПолеАдреса, ПозСим - 1), "№", ""));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтрПолеАдреса = СтруктураПолей.Корпус;
	Для ПозСим = 1 По СтрДлина(СтрПолеАдреса) Цикл
		Если СтрНайти("0123456789", Сред(СтрПолеАдреса, ПозСим, 1)) > 0 Тогда
			СтруктураПолей.Корпус = Сред(СтрПолеАдреса, ПозСим);
			СтруктураПолей.ТипКорпуса = СокрЛП(Лев(СтрПолеАдреса, ПозСим - 1));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтрПолеАдреса = СтруктураПолей.Квартира;
	Для ПозСим = 1 По СтрДлина(СтрПолеАдреса) Цикл
		Если СтрНайти("0123456789", Сред(СтрПолеАдреса, ПозСим, 1)) > 0 Тогда
			СтруктураПолей.Квартира = Сред(СтрПолеАдреса, ПозСим);
			СтруктураПолей.ТипКвартиры = СокрЛП(Лев(СтрПолеАдреса, ПозСим - 1));
			Прервать
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияПолей = Новый СписокЗначений;
	
	Для каждого ЭлементСтруктуры Из СтруктураПолей Цикл
		ЗначенияПолей.Добавить(ЭлементСтруктуры.Значение, ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
	Возврат ЗначенияПолей;
КонецФункции

&НаКлиенте
Процедура ОтправитьЗаявлениеНаСервер()
	
	РежимДиалога = Новый СписокЗначений;
	РежимДиалога.Добавить(КодВозвратаДиалога.Да, "Продолжить");
	РежимДиалога.Добавить(КодВозвратаДиалога.Нет, "Отмена");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЗаявлениеНаСерверЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Нажимая <Продолжить>, вы подтверждаете, что принимаете ""Соглашение о присоединении к регламенту удостоверяющего центра"". Продолжить ?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога, 0, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявлениеНаСерверЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Попытка
		Записать();
		ЗаполнитьСводнуюИнформацию();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать заявление по причине: %1'"),
				ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	ФормироватьЗакрытыйКлючИЗапросНаСертификат = Истина;
	Если Объект.ТипЗаявления = КонтекстЭДОКлиент.СтруктураСсылочныхДанных.Перечисления_ТипыЗаявленияАбонентаСпецоператораСвязи_Изменение Тогда
		// Если в табличной части ИзменившиесяРеквизитыВторичногоЗаявления указано, что необходимо переиздание сертификата, то переиздаем сертификат  
		СтруктураПоиска = Новый Структура("ИзмененныйРеквизит", ПредопределенноеЗначение("Перечисление.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата"));
		ФормироватьЗакрытыйКлючИЗапросНаСертификат = Объект.ИзменившиесяРеквизитыВторичногоЗаявления.НайтиСтроки(СтруктураПоиска).Количество() > 0;
	КонецЕсли;
	
	ДополнительныеПараметры = ДлительнаяОтправкаКлиент.ПараметрыДлительнойОтправкиЗаявления();
	ДополнительныеПараметры.Вставить("Организация", 	Объект.Организация);
	ДополнительныеПараметры.Вставить("СоздаватьКлюч", 	ФормироватьЗакрытыйКлючИЗапросНаСертификат);
	
	Если НЕ ДлительнаяОтправкаКлиент.ПоказатьФормуДлительнойОтправкиЗаявления(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_СформироватьИОтправитьЗаявление", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьИОтправитьЗаявление()
	
	ИдентификаторАбонента = "";
	УчетнаяЗаписьОбмена = КонтекстЭДОКлиент.НастройкиУчетнойЗаписиОрганизации(Объект.Организация);
	Если УчетнаяЗаписьОбмена <> Неопределено Тогда
		ИдентификаторАбонента = Строка(УчетнаяЗаписьОбмена.ИдентификаторАбонента);
		ИдентификаторСпецоператора = Строка(УчетнаяЗаписьОбмена.ИдентификаторСпецоператора);
		ДлинаИдентификатораСпецоператора = СтрДлина(ИдентификаторСпецоператора);
		ПрефиксИдентификатораАбонента = Лев(ИдентификаторАбонента, ДлинаИдентификатораСпецоператора);
		
		Если ЗначениеЗаполнено(ИдентификаторСпецоператора) И нрег(ПрефиксИдентификатораАбонента) = нрег(ИдентификаторСпецоператора) Тогда
			ИдентификаторАбонента = Сред(ИдентификаторАбонента, ДлинаИдентификатораСпецоператора + 1);
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЗаявлениеНаСерверПослеФормированияЗавершение", ЭтотОбъект);
	
	Контекст = КонтекстЭДОКлиент.ПараметрыПроцедурыСформироватьИОтправитьЗаявление();
	Контекст.ДокументЗаявление 		= Объект;
	Контекст.ИдентификаторАбонента 	= ИдентификаторАбонента;
	Контекст.ВыполняемоеОповещение 	= ОписаниеОповещения;
	Контекст.ФормироватьЗакрытыйКлючИЗапросНаСертификат = ФормироватьЗакрытыйКлючИЗапросНаСертификат;
	Контекст.ЭтоРучноеЗаявление		= Истина;
	
	КонтекстЭДОКлиент.СформироватьИОтправитьЗаявление(Контекст);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗаявлениеНаСерверПослеФормированияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОтправкаКлиент.ЗакрытьФормуДлительнойОтправкиБезДальнейшихДействий();
	
	Если Результат.Свойство("ТекстОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ТекстОшибки;
	ИначеЕсли Результат.Свойство("ОписаниеОшибки") Тогда
		ПолученныйТекстОшибокОтправки = Результат.ОписаниеОшибки;
	Иначе
		ПолученныйТекстОшибокОтправки = "";
	КонецЕсли;
	
	Если ПолученныйТекстОшибокОтправки <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПолученныйТекстОшибокОтправки);
	КонецЕсли;
	
	ЭтотОбъект.Прочитать();
	
	ЗаполнитьСводнуюИнформацию();
	ОповеститьОбИзменении(Объект.Ссылка);
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено") Тогда
		Элементы.ОтправитьЗаявление.Доступность	 = Ложь;
		
		Для каждого Элемент из ЭтаФорма.Элементы Цикл
			Попытка
				Элемент.ТолькоПросмотр = Истина;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Элементы.ПолеHTMLЛицензии.ТолькоПросмотр										 = Ложь;
		Элементы.Получатели.КоманднаяПанель.Доступность									 = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписатьИЗакрыть.Доступность	 = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаЗаписать.Доступность			 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОтправкаЗаявления(ТребуетсяПроверка)
	
	// Общая проверка
	Если ТребуетсяПроверка Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаОтправкаЗаявленияЗавершение", ЭтотОбъект);
		ПроверитьЗаполнениеДокумента(ОписаниеОповещения);
	Иначе
		ОтправитьЗаявлениеНаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаОтправкаЗаявленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ОтправитьЗаявлениеНаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗарегистрироватьОтвет()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьЗарегистрироватьОтветЗавершение", ЭтотОбъект);
	КонтекстЭДОКлиент.ОбновитьСтатусЗаявленияАбонента_ИзПанелиОтправки(ОписаниеОповещения, ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗарегистрироватьОтветЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповеститьОбИзменении(Объект.Ссылка);
	ЗаполнитьСводнуюИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьАдресКодРегиона(Адрес,ТипАдреса,ИтогПроверки)
	
	СтрокаАдреса = "";
	
	АдресСписок = ПреобразоватьПредставлениеАдреса(Адрес);
	ЗначРегионаСтрока = АдресСписок[1].Значение;
	
	Если СтрДлина(СокрЛП(ЗначРегионаСтрока)) = 2 Тогда
		СтрокаАдреса = Адрес;
	Иначе
		КодРегиона = РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(ЗначРегионаСтрока);
		
		Если ПустаяСтрока(КодРегиона) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, неверно указан регион.'"),?(ТипАдреса = 0," Юридический адрес"," Фактический адрес")), ,?(ТипАдреса = 0,"ЮрАдрес","ФактАдрес"));
			ИтогПроверки = Ложь;
		Иначе
			АдресСписок[1].Значение = КодРегиона;
			СтрокаАдреса = "643,"+ПолучитьПредставлениеАдресаИзСписка(АдресСписок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаАдреса) тогда
		Если ТипАдреса = 0 тогда
			Объект.АдресЮридический = СтрокаАдреса;
		Иначе
			Объект.АдресФактический = СтрокаАдреса;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Модифицированность = Ложь;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанныеСотрудника()
	
	Объект.ВладелецЭЦП 						= Неопределено;
	Объект.ВладелецЭЦППодразделение 		= "";
	Объект.ВладелецЭЦПДолжность 			= "";
	Объект.ВладелецЭЦПФамилия	 			= "";
	Объект.ВладелецЭЦПИмя	 				= "";
	Объект.ВладелецЭЦПОтчество 				= "";
	Объект.ВладелецЭЦПВидДокумента 			= ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	Объект.ВладелецЭЦПСерияДокумента 		= "";
	Объект.ВладелецЭЦПНомерДокумента 		= "";
	Объект.ВладелецЭЦПДатаВыдачиДокумента   = "";
	Объект.ВладелецЭЦПКемВыданДокумент 		= "";
	Объект.ВладелецЭЦПСНИЛС					= "";
	Объект.ВладелецЭЦПДатаРождения          = Неопределено;
	Объект.ВладелецЭЦПМестоРождения         = Неопределено;
	Объект.ВладелецЭЦПКодПодразделения      = Неопределено;
	Объект.ВладелецЭЦППол                   = Неопределено;
	Объект.ВладелецЭЦПГражданство           = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыФормы() 
	
	Объект.ВладелецЭЦПТип					   = Неопределено;
	Объект.АдресФактический                    = "";
	Объект.АдресЮридический                    = "";
	ЮрАдрес                                    = "";
	ФактАдрес                                  = "";
	Объект.ИНН                                 = "";
	Объект.КПП                                 = "";
	Объект.КраткоеНаименование                 = "";
	Объект.ПолноеНаименование                  = "";
	Объект.ТелефонДополнительный               = "";
	Объект.ТелефонОсновной                     = "";
	Объект.ЭлектроннаяПочта                    = "";
	Объект.РегНомерПФР                         = "";
	Объект.РегНомерФСС                         = "";
	Объект.ПризнакОбособленногоПодразделения   = Ложь;
	Объект.КодРегионаФСРАР				   	   = Неопределено;
	ОчиститьДанныеСотрудника();
	Объект.Получатели.Очистить();
	Модифицированность                         = Истина;
	Элементы.АдресЮридический.КнопкаВыбора     = Ложь;
	Элементы.АдресФактический.КнопкаВыбора     = Ложь;
	Элементы.Сотрудник.Видимость          	   = Ложь;
	Объект.ОГРН 							   = "";
	Объект.ВладелецЭЦПСНИЛС 				   = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВладельцаЭЦП()
	
	ВидВладельцаЭЦП = Объект.ВладелецЭЦПТип;
	
	ДанныеСотрудника = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьДанныеСотрудника(
		ВидВладельцаЭЦП, 
		ДанныеОрганизации, 
		Объект.ВладелецЭЦП);
	
	Объект.ВладелецЭЦПИмя                 = ДанныеСотрудника.ФИО.Имя;
	Объект.ВладелецЭЦПФамилия             = ДанныеСотрудника.ФИО.Фамилия;
	Объект.ВладелецЭЦПОтчество            = ДанныеСотрудника.ФИО.Отчество;
	Объект.ВладелецЭЦПВидДокумента        = ДанныеСотрудника.ВидДокумента;
	Объект.ВладелецЭЦПСерияДокумента      = ДанныеСотрудника.Серия;
	Объект.ВладелецЭЦПНомерДокумента      = ДанныеСотрудника.Номер;
	Объект.ВладелецЭЦПДатаВыдачиДокумента = ДанныеСотрудника.ДатаВыдачи;
	Объект.ВладелецЭЦПКемВыданДокумент    = ДанныеСотрудника.КемВыдан;
	Объект.ВладелецЭЦПДолжность           = ДанныеСотрудника.Должность;
	Объект.ВладелецЭЦППодразделение       = ДанныеСотрудника.Подразделение;
	Объект.ВладелецЭЦПСНИЛС               = ДанныеСотрудника.СНИЛС;
	Объект.ВладелецЭЦПДатаРождения        = ДанныеСотрудника.ДатаРождения;
	Объект.ВладелецЭЦПМестоРождения       = ДанныеСотрудника.МестоРождения;
	Объект.ВладелецЭЦППол                 = ДанныеСотрудника.Пол;
	Объект.ВладелецЭЦПГражданство         = ДанныеСотрудника.Гражданство;
	Объект.ВладелецЭЦПКодПодразделения    = ДанныеСотрудника.КодПодразделения;
	
	УстановитьВидимостьКодаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоОрганизации(ДанныеЗаполнения)
	
	ЮрАдрес 	= ДанныеЗаполнения.ЮрАдрес;
	ФактАдрес 	= ДанныеЗаполнения.ФактАдрес;
	
	СменитьВладельцаЭЦП();
	
	Элементы.Сотрудник.Видимость = Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	
	ТипОрганизации               = ДанныеОрганизации.ТипОрганизации;
	Объект.ТипОрганизации        = ТипОрганизации;
	Объект.ПолноеНаименование    = ДанныеОрганизации.НаимЮЛПол;
	Объект.КраткоеНаименование   = ДанныеОрганизации.КраткоеНаименование;
	Объект.ИНН                   = ДанныеОрганизации.ИННЮЛ;
	Объект.КПП                   = ДанныеОрганизации.КППЮЛ;
	Объект.РегНомерПФР           = ДанныеОрганизации.РегНомПФР;
	Объект.РегНомерФСС           = ДанныеОрганизации.РегистрационныйНомерФСС;
	Объект.АдресЮридический	     = ДанныеЗаполнения.АдресЮридический;
	Объект.АдресФактический      = ДанныеЗаполнения.АдресФактический;
	Объект.ТелефонОсновной       = ДанныеОрганизации.ТелОрганизации;
	Объект.ТелефонДополнительный = ДанныеОрганизации.ТелРук;
	Объект.ОГРН					 = ДанныеОрганизации.ОГРН;
	
	Если ПустаяСтрока(Объект.НомерОсновнойПоставки1с) Тогда
		Объект.НомерОсновнойПоставки1с = ДанныеОрганизации.НомерОсновнойПоставки1с;
	КонецЕсли;
		
	Если ЮрАдрес = ",,,,,,,,," Тогда
		ЮрАдрес = "";
	КонецЕсли;
	
	Если ФактАдрес = ",,,,,,,,," Тогда
		ФактАдрес = "";
	КонецЕсли;
	
	Элементы.АдресЮридический.КнопкаВыбора = Истина;
	Элементы.АдресФактический.КнопкаВыбора = Истина;
	
	Если ТипОрганизации Тогда
		Объект.ПризнакОбособленногоПодразделения	= ДанныеОрганизации.ПризнакОбособленногоПодразделения;
	КонецЕсли;
	
	Элементы.ВладелецЭЦПДолжность.АвтоОтметкаНезаполненного = ТипОрганизации;
	
	Элементы.ВладелецЭЦПДолжность.Видимость = ТипОрганизации;
	Элементы.Декорация19.Видимость = ТипОрганизации;
	
	Элементы.КПП.АвтоОтметкаНезаполненного 					= ТипОрганизации;
	Элементы.КПП.ОтметкаНезаполненного 						= ПустаяСтрока(Объект.КПП) И ТипОрганизации;
	Элементы.ОГРН.АвтоОтметкаНезаполненного 				= ТипОрганизации;
	Элементы.ОГРН.ОтметкаНезаполненного 					= ПустаяСтрока(Объект.ОГРН) И ТипОрганизации;
	

	Объект.ЭлектроннаяПочта 	=  ДанныеОрганизации.ЭлектроннаяПочта;
	Объект.ДополнительныйКодФСС = ДанныеОрганизации.РеквизитДопКодФСС;
	
	КонтекстЭДОКлиент.ПоказатьДопКодФСС(
		ДанныеОрганизации.РеквизитДопКодФСС,
		Элементы.ДополнительныйКодФСС,
		Объект.ПризнакОбособленногоПодразделения,
		Объект.РегНомерФСС);

	ВосстановитьНаправленияПоУмолчанию(Истина);
	
	Объект.КодРегионаФСРАР = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(Объект.АдресЮридический).Регион;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьОрганизацию()
	Булево = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сначала укажите организацию!'"), ,"Объект.Организация");
		Булево = Истина;
	КонецЕсли;
	Возврат Булево;
КонецФункции

&НаКлиенте
Процедура СменитьВладельцаЭЦП()
	
	Если Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель") Тогда 
		Объект.ВладелецЭЦП = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.Руководитель(Объект.Организация);
	ИначеЕсли Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ГлавныйБухгалтер") Тогда
		Объект.ВладелецЭЦП = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ГлБухгалтер(Объект.Организация);
	ИначеЕсли Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник") Тогда
		// Ничего не делаем
	ИначеЕсли Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ПустаяСсылка") Тогда
		Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.Руководитель");
	КонецЕсли;
	
	Элементы.Сотрудник.Видимость = Объект.ВладелецЭЦПТип = ПредопределенноеЗначение("Перечисление.ТипыВладельцевЭЦП.ДругойСотрудник");
	
	ЗаполнитьДанныеВладельцаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусПослеПроверкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОтправитьЗаявлениеНаРегистрациюЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите отправить заявление на регистрацию?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПолучитьЗарегистрироватьОтвет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОтправитьЗаявлениеНаРегистрациюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПроверкаОтправкаЗаявления(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборКриптопровайдераПриИзмененииЗавершение(СтруктураВозврата, ДополнительныеПараметры) Экспорт
	
	КриптопровайдерРекомендация = СтруктураВозврата.КриптопровайдерРекомендация;
	Элементы.ПолеКартинкиВнимание48.Видимость = СтруктураВозврата.КартинкаВидимость;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыСтраницыОтчетностьВФСРАР(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	ПризнакПоддержкиФСРАР = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Объект.СпецоператорСвязи, "ФСРАРПризнак");
	ПризнакПоддержкиФСРАР = (ПризнакПоддержкиФСРАР = Истина ИЛИ ПризнакПоддержкиФСРАР = "Истина");
	
	ДоступностьПодачиЗаявкиНаСертификатДляФСРАР = 
		ЗначениеЗаполнено(Объект.Организация) 
		И ПризнакПоддержкиФСРАР 
		И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено"));
	
	ДоступностьЭлементов = 
		ДоступностьПодачиЗаявкиНаСертификатДляФСРАР 
		И Объект.ПодатьЗаявкуНаСертификатДляФСРАР;
	
	Элементы.ПодатьЗаявкуНаСертификатДляФСРАР.Доступность = ДоступностьПодачиЗаявкиНаСертификатДляФСРАР;
	
	Элементы.КодРегионаФСРАР.ТолькоПросмотр 			= НЕ ДоступностьЭлементов;
	Элементы.КодРегионаФСРАР.АвтоВыборНезаполненного 	= ДоступностьЭлементов;
	Элементы.КодРегионаФСРАР.АвтоОтметкаНезаполненного 	= ДоступностьЭлементов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыСтраницыОтчетностьВРПН(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	ПризнакПоддержкиРПН = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Объект.СпецоператорСвязи, "РПНПризнак");
	ПризнакПоддержкиРПН = (ПризнакПоддержкиРПН = Истина ИЛИ ПризнакПоддержкиРПН = "Истина");
	
	ДоступностьПодачиЗаявкиНаСертификатДляРПН = 
		ЗначениеЗаполнено(Объект.Организация) 
		И ПризнакПоддержкиРПН 
		И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено"));
	
	Элементы.ПодатьЗаявкуНаПодключениеРПН.Доступность = ДоступностьПодачиЗаявкиНаСертификатДляРПН;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыСтраницыОтчетностьВФТС(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	ПризнакПоддержкиФТС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(Объект.СпецоператорСвязи, "ФТСПризнак");
	ПризнакПоддержкиФТС = (ПризнакПоддержкиФТС = Истина ИЛИ ПризнакПоддержкиФТС = "Истина");
	
	ДоступностьПодачиЗаявкиНаСертификатДляФТС = 
		ЗначениеЗаполнено(Объект.Организация) 
		И ПризнакПоддержкиФТС 
		И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленияАбонентаСпецоператораСвязи.Подготовлено"));
	
	Элементы.ПодатьЗаявкуНаПодключениеФТС.Доступность = ДоступностьПодачиЗаявкиНаСертификатДляФТС;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеСубъектаРФ(КодРегиона)
	
	Результат = "";
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетКодыРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	НомерКолонкиКодРегиона = МакетКодыРегионов.Область("КодРегиона").Лево;
	НомерКолонкиНаименованиеРегиона = МакетКодыРегионов.Область("НаименованиеРегиона").Лево;
	ОбластьПоискаКодаРегиона = МакетКодыРегионов.Область(1, НомерКолонкиКодРегиона, МакетКодыРегионов.ВысотаТаблицы, НомерКолонкиКодРегиона);
	
	ОбластьСКодомРегиона = МакетКодыРегионов.НайтиТекст(Формат(Число(КодРегиона), "ЧН=0; ЧГ=; ЧЦ=2; ЧВН=;"), , ОбластьПоискаКодаРегиона, , Истина);
	
	Если ОбластьСКодомРегиона <> Неопределено Тогда
		Результат = МакетКодыРегионов.Область(ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона, ОбластьСКодомРегиона.Верх, НомерКолонкиНаименованиеРегиона).Текст;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораРегионовРФ()
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	МакетРегионов = КонтекстЭДОСервер.ПолучитьМакет("ФСРАРПорталыРегионов");
	
	Для НомСтр = 1 По МакетРегионов.ВысотаТаблицы Цикл
		
		КодРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 1, НомСтр, 1).Текст);
		НазваниеРегиона = СокрЛП(МакетРегионов.Область(НомСтр, 2, НомСтр, 2).Текст);
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			Элементы.КодРегионаФСРАР.СписокВыбора.Добавить(КодРегиона, КодРегиона + " - " + НазваниеРегиона);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта()
	Объект.Статус 				= Объект.Ссылка.Статус;
	Объект.СтатусКомментарий 	= Объект.Ссылка.СтатусКомментарий;
	Объект.УчетнаяЗапись 		= Объект.Ссылка.УчетнаяЗапись;
	Объект.ДатаПолученияОтвета 	= Объект.Ссылка.ДатаПолученияОтвета;
КонецПроцедуры	

&НаСервере
Процедура ДобавитьЖелтыеСтроки()
	
	ПорядковыйНомерСтроки = 0;
	
	КоличествоСтрок = ТаблицаДанныхЗаявленияНаПодключение.Количество();
	КоличествоИзмененныхСтрок = ТаблицаДанныхЗаявленияНаПодключение.НайтиСтроки(Новый Структура("ЭтотПараметрИзменился", Истина)).Количество();
	
	ДобавитьВТаблицу("Изменяемые настройки подключения",,,,,0); // заголовок
	
	Для сч = 0 По КоличествоСтрок - 1 Цикл
		СтрокаТаблицаДанных = ТаблицаДанныхЗаявленияНаПодключение[сч];
		Если СтрокаТаблицаДанных.ЭтотПараметрИзменился Тогда
			ДобавитьВТаблицу(СтрокаТаблицаДанных.НазваниеРеквизита, СтрокаТаблицаДанных.ЗначениеРеквизита, СтрокаТаблицаДанных.ЭтотПараметрИзменился, Ложь, Истина);
		КонецЕсли;
		СтрокаТаблицаДанных.РазрешеноРедактирование = (НЕ СтрокаТаблицаДанных.ВыделятьСтрокуЖирным И НЕ СтрокаТаблицаДанных.НазваниеРеквизита = "");
		СтрокаТаблицаДанных.ПорядковыйНомерСтроки = СтрокаТаблицаДанных.ПорядковыйНомерСтроки + КоличествоИзмененныхСтрок + 1;
	КонецЦикла;
	
	ДобавитьВТаблицу("",,,,,КоличествоИзмененныхСтрок + 1); // заголовок
	
	ТаблицаДанныхЗаявленияНаПодключение.Сортировать("ПорядковыйНомерСтроки");

КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицу(
		ИзмененныйРеквизит,  
		ЗначениеРеквизита = "",
		ЭтотПараметрИзменился = Неопределено,
		ВыделятьЖирным = Ложь, 
		ВыделятьСтрокуЖелтым = Ложь,
		НомерСтроки = Неопределено,
		ДобавлятьТолькоЕслиЗаполнено = Ложь)
		
	Если ДобавлятьТолькоЕслиЗаполнено 
		И НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаДанныхЗаявленияНаПодключение.Добавить();
	
	Если ТипЗнч(ИзмененныйРеквизит) = Тип("Строка") Тогда
		НоваяСтрока.НазваниеРеквизита = ИзмененныйРеквизит;
	Иначе
		НоваяСтрока.ИзмененныйРеквизит		= ИзмененныйРеквизит;
		НоваяСтрока.НазваниеРеквизита 		= Строка(ИзмененныйРеквизит);
	КонецЕсли;
	
	НоваяСтрока.ЗначениеРеквизита		= ЗначениеРеквизита;
	НоваяСтрока.ВыделятьСтрокуЖирным 	= ВыделятьЖирным;
	НоваяСтрока.ВыделятьСтрокуЖелтым 	= ВыделятьСтрокуЖелтым;
	
	Если ЭтотПараметрИзменился = Неопределено Тогда
		Если ЭтотПараметрИзменился(ИзмененныйРеквизит) Тогда
			НоваяСтрока.ЭтотПараметрИзменился 	= Истина;
		КонецЕсли;
	Иначе
		НоваяСтрока.ЭтотПараметрИзменился = ЭтотПараметрИзменился;
	КонецЕсли;
	
	НоваяСтрока.РазрешеноРедактирование = Ложь;
	
	Если НомерСтроки = Неопределено Тогда 
		ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
		НоваяСтрока.ПорядковыйНомерСтроки	= ПорядковыйНомерСтроки;
	Иначе
		НоваяСтрока.ПорядковыйНомерСтроки	= НомерСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКодыФНСПрописью(Знач ТаблицаКодовФНС)

	Результат = "";
	КоличествоКодовФНС = ТаблицаКодовФНС.Количество();
	Если КоличествоКодовФНС = 1 Тогда
		Результат = ТаблицаКодовФНС[0].КодПолучателя + ?(ТаблицаКодовФНС[0].КПП = "","" ,"-") + ТаблицаКодовФНС[0].КПП;
	ИначеЕсли КоличествоКодовФНС > 1 Тогда
		Результат = НСтр("ru = 'Коды ФНС (%1)'");
		Результат = СтрЗаменить(Результат, "%1", Строка(КоличествоКодовФНС));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКодыРосстатПрописью(Знач Получатели)
	
	Результат = "";
	КоличествоКодовФСГС = Получатели.Количество();
	Если КоличествоКодовФСГС = 1 Тогда
		Результат = Получатели[0].КодПолучателя;
	ИначеЕсли КоличествоКодовФСГС > 1 Тогда
		Результат = НСтр("ru = 'Коды Росстата (%1)'");
		Результат = СтрЗаменить(Результат, "%1", Строка(КоличествоКодовФСГС));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура СформироватьТаблицуИзмененныхДанных()
	
	ПорядковыйНомерСтроки = 0;
	
	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	ЭтоЗаявлениеТолькоНаПереход =  КонтекстЭДОСервер.ЭтоЗаявлениеТолькоНаПереход(Объект.Ссылка);
	
	ТаблицаДанныхЗаявленияНаПодключение.Очистить();
	
	// Общие сведения
	ДобавитьВТаблицу("Общие сведения", , , Истина); // заголовок 
	
	КриптопровайдерИзменился = ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера);
	ПереходВКоробку 		 = ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку);
	ПереходВОблако 			 = ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако);
	
	Если КриптопровайдерИзменился И НЕ ПереходВОблако Тогда
		
		Криптопровайдер = КриптографияЭДКОКлиентСервер.СвойстваКриптопровайдераПоУмолчанию(Объект.ТипКриптопровайдера);
		
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ИзменениеКриптопровайдера, Криптопровайдер.Представление, КриптопровайдерИзменился);
		
	КонецЕсли;
	
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С, Объект.НомерОсновнойПоставки1с);
	
	ПереизданиеСертификата = ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереизданиеСертификата, ПереизданиеСертификата);
	
	ПродлитьАбонентскийСертификат = ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеАбонентскогоСертификата);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеАбонентскогоСертификата, ПродлитьАбонентскийСертификат, ПродлитьАбонентскийСертификат);
	
	ПродлитьЛицензию = ЭтотПараметрИзменился(Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ПродлениеЛицензии, ПродлитьЛицензию, ПродлитьЛицензию);
	
	Если ПереходВКоробку Тогда
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВКоробку, ПереходВКоробку, ПереходВКоробку);
	КонецЕсли;
	
	Если ПереходВОблако Тогда
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ПереходВОблако, ПереходВОблако, ПереходВОблако);
	КонецЕсли;
	
	// Сведения об организации
	ДобавитьВТаблицу("Сведения об организации", , , Истина); // заголовок 
	
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КраткоеНаименование, Объект.КраткоеНаименование,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ПолноеНаименование, Объект.ПолноеНаименование,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ИНН, Объект.ИНН, Ложь,,,,ЭтоЗаявлениеТолькоНаПереход); // ИНН запрещено менять
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КПП, Объект.КПП,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ОГРН, Объект.ОГРН,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.РегНомерПФР, Объект.РегНомерПФР,,,,,ЭтоЗаявлениеТолькоНаПереход);
	
	ЭтоАдресПоФИАСу = УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Объект.АдресЮридический);
	Если ЭтоАдресПоФИАСу Тогда
		ПредставлениеАдреса = КонтекстЭДОСервер.ПредставлениеАдресаИзДанныхОрганизации(Объект.АдресЮридический);
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.АдресЮридический,ПредставлениеАдреса,,,,,ЭтоЗаявлениеТолькоНаПереход);
	Иначе
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.АдресЮридический, 
			РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Объект.АдресЮридический, Истина),,,,,ЭтоЗаявлениеТолькоНаПереход);
	КонецЕсли;
		
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КодРегионаФСРАР, Объект.КодРегионаФСРАР,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной, Объект.ТелефонОсновной,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный, Объект.ТелефонДополнительный,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта, Объект.ЭлектроннаяПочта,,,,,ЭтоЗаявлениеТолькоНаПереход); 
	
	// Сведения о сотруднике - владельце электронной подписи
	ДобавитьВТаблицу("Сведения о сотруднике - владельце электронной подписи", , , Истина); // заголовок
	
	ФИОВладельцаЭЦП = Объект.ВладелецЭЦПФамилия + " " + Объект.ВладелецЭЦПИмя + " " + Объект.ВладелецЭЦПОтчество;
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦП, ФИОВладельцаЭЦП,,,,,ЭтоЗаявлениеТолькоНаПереход);
	
	Если Объект.ТипОрганизации Тогда
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность, Объект.ВладелецЭЦПДолжность,,,,,ЭтоЗаявлениеТолькоНаПереход);
	КонецЕсли;
		
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение, Объект.ВладелецЭЦППодразделение,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС, Объект.ВладелецЭЦПСНИЛС,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения, Формат(Объект.ВладелецЭЦПДатаРождения, "ДЛФ=D"),,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол, Объект.ВладелецЭЦППол,,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство, Объект.ВладелецЭЦПГражданство, Ложь,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПВидДокумента, Объект.ВладелецЭЦПВидДокумента, Ложь,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСерияДокумента, Строка(Объект.ВладелецЭЦПСерияДокумента), Ложь,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПНомерДокумента, Строка(Объект.ВладелецЭЦПНомерДокумента), Ложь,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент, Объект.ВладелецЭЦПКемВыданДокумент, Ложь,,,,ЭтоЗаявлениеТолькоНаПереход);
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаВыдачиДокумента, Объект.ВладелецЭЦПДатаВыдачиДокумента, Ложь,,,,ЭтоЗаявлениеТолькоНаПереход);
	
	Если ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ЭтоПаспортРФ(Объект.ВладелецЭЦПВидДокумента) Тогда
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения, Объект.ВладелецЭЦПКодПодразделения,,,,,ЭтоЗаявлениеТолькоНаПереход);
	КонецЕсли;
		
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения, Объект.ВладелецЭЦПМестоРождения,,,,,ЭтоЗаявлениеТолькоНаПереход);
		
	ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКемВыданДокумент, Объект.ВладелецЭЦПКемВыданДокумент, Ложь,,,,ЭтоЗаявлениеТолькоНаПереход);
	
	ОператорПоддерживаетСМСУведомление = (ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(СпецоператорИУЦ, "ПризнакПоддержкиСМС") = "Истина");
	Если ОператорПоддерживаетСМСУведомление Тогда
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонМобильный, Объект.ТелефонМобильный,,,,,ЭтоЗаявлениеТолькоНаПереход);
	КонецЕсли;
	
	// Сведения о контролирующих органах
	Если НЕ ЭтоЗаявлениеТолькоНаПереход Тогда
		ДобавитьВТаблицу("Сведения о контролирующих органах", , , Истина); // заголовок
		
		// ФНС
		СтрокиСФНС = Объект.Получатели.НайтиСтроки(Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФНС));
		СдаватьВФНС = СтрокиСФНС.Количество() > 0;
		
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФНС, СдаватьВФНС);
		Если СдаватьВФНС Тогда
			КодыФНСПрописью = ПолучитьКодыФНСПрописью(СтрокиСФНС);
			ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС, КодыФНСПрописью);
		Иначе
			ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КодыФНС, "", Ложь);
		КонецЕсли;
		
		// ПФР
		СтрокиСПФР = Объект.Получатели.НайтиСтроки(Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ПФР));
		СдаватьВПФР = СтрокиСПФР.Количество() > 0;
		
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВПФР, СдаватьВПФР);
		Если СдаватьВПФР Тогда
			ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР, СтрокиСПФР[0].КодПолучателя);
		Иначе
			ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КодПФР, "", Ложь);
		КонецЕсли;
			
		// ФСС
		СтрокиСФСС = Объект.Получатели.НайтиСтроки(Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСС));
		СдаватьВФСС = СтрокиСФСС.Количество() > 0;
		
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСС, СдаватьВФСС);
		
		// Росстат
		СтрокиСРосстат = Объект.Получатели.НайтиСтроки(Новый Структура("ТипПолучателя", Перечисления.ТипыКонтролирующихОрганов.ФСГС));
		СдаватьВРосстат = СтрокиСРосстат.Количество() > 0;
		
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРосстат, СдаватьВРосстат);
		Если СдаватьВРосстат Тогда
			КодыРосстатПрописью = ПолучитьКодыРосстатПрописью(СтрокиСРосстат);
			ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата, КодыРосстатПрописью);
		Иначе
			ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.КодРосстата, "");
		КонецЕсли;
		
		// Росалкогольрегулирование
		СдаватьВФСРАР = Объект.ПодатьЗаявкуНаСертификатДляФСРАР;
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФСРАР, СдаватьВФСРАР);
		
		// Росприроднадзор
		СдаватьВРПН = Объект.ПодатьЗаявкуНаПодключениеРПН;
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВРПН, СдаватьВРПН);
		
		// ФТС
		СдаватьВФТС = Объект.ПодатьЗаявкуНаПодключениеФТС;
		ДобавитьВТаблицу(Перечисления.ПараметрыПодключенияК1СОтчетности.СдаватьВФТС, СдаватьВФТС);
		
		Если Объект.ПодключитьЭДО Тогда
			// Отображение данных по подключению ЭДО
			ДобавитьВТаблицу("Подключение к сервису 1С-ЭДО", , , Истина); // заголовок
			ДобавитьВТаблицу("Подключиться к сервису", Истина);
			Если Объект.ПодключитьЭДО Тогда
				ДобавитьВТаблицу("Оператор ЭДО", Объект.ОператорЭДО);
				ДобавитьВТаблицу("Код ФНС", Объект.КодНалоговогоОрганаЭДО);
				ДобавитьВТаблицу("Юридический адрес", ЮрАдрес);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выделяем желтым измененные строки
	ДобавитьЖелтыеСтроки();
	
КонецПроцедуры

&НаСервере
Функция ЭтотПараметрИзменился(ИзмененныйРеквизит)
	
	СтруктураПоиска = Новый Структура("ИзмененныйРеквизит", ИзмененныйРеквизит);
	Возврат Объект.ИзменившиесяРеквизитыВторичногоЗаявления.НайтиСтроки(СтруктураПоиска).Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ПодсказкаСервисЭДООбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(СсылкаОписаниеСервисаЭДО) Тогда
		ПерейтиПоНавигационнойСсылке(СсылкаОписаниеСервисаЭДО);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти