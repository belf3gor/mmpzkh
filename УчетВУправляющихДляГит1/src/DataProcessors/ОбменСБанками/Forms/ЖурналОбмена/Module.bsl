
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МодельСервиса = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
	ОтборЖурналаРегистрации = Новый Структура;
	ЗначенияОтбора = ПолучитьЗначенияОтбораЖурналаРегистрации("Событие").Событие;
	
	Подсистема = НСтр("ru = 'Обмен с банками'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЖурналСтрока = НСтр("ru = 'Журнал'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ИмяСобытия = НСтр("ru = 'Электронное взаимодействие.%1.%2'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИмяСобытия = СтрШаблон(ИмяСобытия, Подсистема, ЖурналСтрока);
	ОтборПоСобытию = Новый СписокЗначений;
	ОтборПоСобытию.Добавить(ИмяСобытия, ИмяСобытия);
	ОтборЖурналаРегистрации.Вставить("Событие", ОтборПоСобытию);
	
	ОтборЖурналаРегистрации.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
	ОтборЖурналаРегистрации.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
	ОтборЖурналаРегистрации.Вставить("Данные", Параметры.НастройкаОбмена);
	
	ПредставлениеОтбора = ПредставлениеПериода(ОтборЖурналаРегистрации.ДатаНачала, ОтборЖурналаРегистрации.ДатаОкончания);
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Информация", "Информация");
	ОтборЖурналаРегистрации.Вставить("Уровень", ОтборПоУровню);
	
	РезультатВыполнения = ПрочитатьЖурнал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьТекущийСписок", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьТекущийСписок(Команда)
	
	РезультатВыполнения = ПрочитатьЖурнал();
	ОбновитьТекущийСписок()
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтбораНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалДатДляПросмотраЗавершение", ЭтотОбъект);
	УстановитьИнтервалДатДляПросмотра(ИнтервалДат, ОтборЖурналаРегистрации, Оповещение)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЖурналДляПередачиВТехподдержку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЖурналПродолжение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Запрашивает у пользователя ограничение периода 
// и включает его в отбор журнала регистрации.
//
// Параметры:
//  ИнтервалДат - СтандартныйПериод, интервал дат отбора.
//  ОтборЖурналаРегистрации - Структура, отбор журнала регистрации.
//
&НаКлиенте
Процедура УстановитьИнтервалДатДляПросмотра(ИнтервалДат, ОтборЖурналаРегистрации, ОбработчикОповещения = Неопределено)
	
	// Получение текущего периода
	ДатаНачала    = Неопределено;
	ДатаОкончания = Неопределено;
	ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачала);
	ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончания);
	ДатаНачала    = ?(ТипЗнч(ДатаНачала)    = Тип("Дата"), ДатаНачала, '00010101000000');
	ДатаОкончания = ?(ТипЗнч(ДатаОкончания) = Тип("Дата"), ДатаОкончания, '00010101000000');
	
	Если ИнтервалДат.ДатаНачала <> ДатаНачала Тогда
		ИнтервалДат.ДатаНачала = ДатаНачала;
	КонецЕсли;
	
	Если ИнтервалДат.ДатаОкончания <> ДатаОкончания Тогда
		ИнтервалДат.ДатаОкончания = ДатаОкончания;
	КонецЕсли;
	
	// Редактирование текущего периода.
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ИнтервалДат;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтборЖурналаРегистрации", ОтборЖурналаРегистрации);
	ДополнительныеПараметры.Вставить("ИнтервалДат", ИнтервалДат);
	ДополнительныеПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИнтервалаДат", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийСписокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "НеИспользовать");
		Элементы.Страницы.ТекущаяСтраница = Элементы.ЖурналРегистрации;
		ПозиционированиеВКонецСписка();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "НеИспользовать");
		Элементы.Страницы.ТекущаяСтраница = Элементы.ЖурналРегистрации;
		ПозиционированиеВКонецСписка();
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИнтервалаДат(Результат, ДополнительныеПараметры) Экспорт
	
	ОтборЖурналаРегистрации = ДополнительныеПараметры.ОтборЖурналаРегистрации;
	ИнтервалУстановлен = Ложь;
	
	Если Результат <> Неопределено Тогда
		
		// Обновление текущего периода.
		ИнтервалДат = Результат;
		Если ИнтервалДат.ДатаНачала = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаНачала");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаНачала", ИнтервалДат.ДатаНачала);
		КонецЕсли;
		
		Если ИнтервалДат.ДатаОкончания = '00010101000000' Тогда
			ОтборЖурналаРегистрации.Удалить("ДатаОкончания");
		Иначе
			ОтборЖурналаРегистрации.Вставить("ДатаОкончания", ИнтервалДат.ДатаОкончания);
		КонецЕсли;
		ИнтервалУстановлен = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОбработчикОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикОповещения, ИнтервалУстановлен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийСписок()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ИндикаторДлительныхОпераций;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы.ПолеИндикаторДлительныхОпераций, "ФормированиеОтчета");
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбновитьТекущийСписокЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
	ДатаОкончанияИнтервала = Неопределено;
	ДатаНачалаИнтервала = Неопределено;
	Если Не ОтборЖурналаРегистрации.Свойство("ДатаНачала", ДатаНачалаИнтервала)
		Или ДатаНачалаИнтервала = Неопределено Тогда
		ДатаНачалаИнтервала    = '00010101000000';
	КонецЕсли;
	
	Если Не ОтборЖурналаРегистрации.Свойство("ДатаОкончания", ДатаОкончанияИнтервала)
		Или ДатаОкончанияИнтервала = Неопределено Тогда
		ДатаОкончанияИнтервала = '00010101000000';
	КонецЕсли;
	
	Если Не (ДатаНачалаИнтервала = '00010101000000' И ДатаОкончанияИнтервала = '00010101000000') Тогда
		ПредставлениеОтбора = ПредставлениеПериода(ДатаНачалаИнтервала, ДатаОкончанияИнтервала);
	Иначе
		ПредставлениеОтбора = НСтр("ru ='Не установлен'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалДатДляПросмотраЗавершение(ИнтервалУстановлен, ДополнительныеПараметры) Экспорт
	
	Если ИнтервалУстановлен Тогда
		РезультатВыполнения = ПрочитатьЖурнал();
		ОбновитьТекущийСписок();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьЖурнал()
	
	Если РезультатВыполнения <> Неопределено
		И РезультатВыполнения.ИдентификаторЗадания <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(РезультатВыполнения.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0; // запускать сразу
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Чтение журнала обмена с банком'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("ОбменСБанкамиСлужебный.ПрочитатьСобытияЖурналаРегистрации",
		ОтборЖурналаРегистрации, ПараметрыВыполнения);
	
	Если РезультатВыполнения.Статус = "Ошибка" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ЖурналРегистрации;
		ВызватьИсключение РезультатВыполнения.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат = ПолучитьИзВременногоХранилища(РезультатВыполнения.АдресРезультата);
	СобытияЖурнала      = Результат.СобытияЖурнала;

	ЗначениеВДанныеФормы(СобытияЖурнала, Журнал);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозиционированиеВКонецСписка()
	Если Журнал.Количество() > 0 Тогда
		Элементы.Журнал.ТекущаяСтрока = Журнал[Журнал.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьЖурналПродолжение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если Подключено Тогда
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогСохранения = Новый ДиалогВыбораФайла(Режим);
		ДиалогСохранения.МножественныйВыбор = Ложь;
		ДиалогСохранения.Фильтр = НСтр("ru = 'Данные журнала обмена'") + "(*.txt)|*.txt";
		ДиалогСохранения.ПолноеИмяФайла = "Log";
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЖурналЗавершение", ЭтотОбъект);
		ДиалогСохранения.Показать(ОписаниеОповещения);
	Иначе
		ПолучитьФайл(ВыгрузкаЖурналаРегистрации(), "Log.txt", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЖурналЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЖурнала = ВыгрузкаЖурналаРегистрации();
	
	ПолноеИмяФайла = Результат[0];
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ДанныеЖурнала));
	
	Обработчик = Новый ОписаниеОповещения();
	НачатьПолучениеФайлов(Обработчик, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузкаЖурналаРегистрации()
	
	ТаблицаЖурнала = РеквизитФормыВЗначение("Журнал");
	ПотокДанных = Новый ПотокВПамяти();
	ЗаписьДанных = Новый ЗаписьДанных(ПотокДанных);
	Для каждого ЭлементКоллекции Из ТаблицаЖурнала Цикл
		ЗаписьДанных.ЗаписатьСтроку(Строка(ЭлементКоллекции.Дата));
		ЗаписьДанных.ЗаписатьСтроку(ЭлементКоллекции.Комментарий);
		ЗаписьДанных.ЗаписатьСтроку("");
		ЗаписьДанных.ЗаписатьСтроку("=====================================================================================");
		ЗаписьДанных.ЗаписатьСтроку("");
	КонецЦикла;
	
	ДвоичныеДанныеФайла = ПотокДанных.ЗакрытьИПолучитьДвоичныеДанные();
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
КонецФункции


#КонецОбласти
