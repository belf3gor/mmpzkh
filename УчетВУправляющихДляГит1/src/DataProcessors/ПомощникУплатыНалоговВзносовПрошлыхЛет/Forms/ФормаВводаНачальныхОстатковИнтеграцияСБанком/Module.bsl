
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ОткрытаИзСпискаЗадач") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	Объект.Организация = Параметры.Организация;
	
	Объект.Период = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ДатаВводаЗадолженности(Объект.Организация);
	
	ПредставлениеПериода = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоГода(Объект.Период), КонецГода(Объект.Период));
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ввод остатков по налогам и взносам за %1'"), ПредставлениеПериода);
	
	// Проверка заполненности реквизитов организации, необходимых для уплаты.
	ТекстДействия = НСтр("ru = 'уплатить налог УСН и взносы'");
	СообщениеТребуютсяРеквизиты = 
		ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, ТекстДействия);
	РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация).РеквизитыЗаполнены;
	
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	
	ПоказыватьКомандыОплаты = ПомощникиПоУплатеНалоговИВзносов.ПоказыватьКомандыОплаты();
	
	ЗаполнитьЗадолженность();
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	ПолучитьСведенияОСверке();
	
	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Модифицированность ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,
		,
		КодВозвратаДиалога.Да);
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ОбработкаОповещенияИзменениеВыписки();
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация")
			И Параметр.Организация = Объект.Организация Тогда
			
			НайтиИОтобразитьСвязанныеПлатежи();
			УправлениеКомандамиОплаты(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Объект.Организация).РеквизитыЗаполнены;
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "УдалитьДокументУплаты" Тогда
		
		УдалитьДокументУплаты(Параметр);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РезультатПроверкиРеквизитовОрганизации = ПроверитьРеквизитыОрганизации(Объект.Организация);
	Если НЕ РезультатПроверкиРеквизитовОрганизации.РеквизитыЗаполнены Тогда
		ТекстОписанияОбъектаПроверки = НСтр("ru = 'уплаты задолженности по налогу УСН и взносам'");
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Объект.Организация,
			РезультатПроверкиРеквизитовОрганизации.НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ,
			ТекстОписанияОбъектаПроверки)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НалогУСНДолгПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогУСНПеняПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогУСНШтрафПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносПФРДолгПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносПФРПеняПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносПФРШтрафПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносФФОМСДолгПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносФФОМСПеняПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносФФОМСШтрафПриИзменении(Элемент)
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыОрганизации());
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		Платежи, "Платеж", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаСверкуНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"))
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиПоКвитанции(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"))
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		СохранитьНачальныеОстаткиПоНалогамВзносамВФоне();
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиБаннера(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиПроЗадолженность(ПредставлениеПериода, ДоступнаОплата)
	
	Если ДоступнаОплата Тогда
		ШаблонПодсказки = НСтр("ru = 'Укажите остатки расчетов по налогам и взносам за %1
			|Если у вас есть задолженность, подготовьте документы для оплаты'");
	Иначе
		ШаблонПодсказки = НСтр("ru = 'Укажите остатки расчетов по налогам и взносам за %1'");
	КонецЕсли;
	
	ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки, ПредставлениеПериода);
	НаклонныйШрифт = Новый Шрифт(, , , Истина);
	
	Возврат Новый ФорматированнаяСтрока(ТекстПодсказки, НаклонныйШрифт);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Форма.ПоказыватьКомандыОплаты Тогда
		Элементы.ГруппаОплатаЗадолженности.Видимость = Истина;
		Элементы.ГруппаВводОстатков.Видимость = Ложь;
		УправлениеКомандамиОплаты(Форма);
	Иначе
		Элементы.ГруппаОплатаЗадолженности.Видимость = Ложь;
		Элементы.ГруппаВводОстатков.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.Используется1СОтчетность Тогда
		Элементы.ГруппаСверка.Видимость = Истина;
		Элементы.ВыполнитьСверку.Видимость            = Не Форма.СверкаВыполнена;
		Элементы.ЗапросНаСверкуНаименование.Видимость = Форма.СверкаВыполнена;
	Иначе
		Элементы.ГруппаСверка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДекорацияИнформацияОстатки.Заголовок =
		ТекстПодсказкиПроЗадолженность(Форма.ПредставлениеПериода, Форма.ПоказыватьКомандыОплаты);
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость =
		(ЗначениеЗаполнено(Объект.Организация) И НЕ Форма.РеквизитыОрганизацииЗаполнены);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеКомандамиОплаты(Форма)
	
	Элементы = Форма.Элементы;
	
	ДоступностьКоманд = НЕ ЗадолженностьОплаченаПолностью(Форма);
	
	// Доступность.
	Элементы.ОплатитьСБанковскогоСчета.Доступность    = ДоступностьКоманд;
	Элементы.ОплатитьНаличнымиПоКвитанции.Доступность = ДоступностьКоманд;
	
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьСБанковскогоСчета,    ДоступностьКоманд);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьНаличнымиПоКвитанции, ДоступностьКоманд);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗадолженностьОплаченаПолностью(Форма)
	
	ЗадолженностьКУплате = НалогКУплате(Форма).Всего + ВзносыКУплате(Форма).Всего;
	
	Возврат ЗадолженностьКУплате = 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ЭтоКнопкаПоУмолчанию);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(ЭтоКнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОсновнойБанковскийСчет");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗадолженность()
	
	СтруктураЗадолженности =
		Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ЗадолженностьПоНалогамВзносам(Объект.Организация, Объект.Период);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураЗадолженности, СвойстваОбъектаПоказателиДолга());
	
КонецПроцедуры

#КонецОбласти

#Область ОтображениеДокументовУплаты

&НаСервере
Процедура ОбработкаОповещенияИзменениеВыписки()
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НайтиИОтобразитьСвязанныеПлатежи()
	
	Платежи.Очистить();
	
	ЗаполнитьТаблицыПлатежей();
	
	ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПлатежей()
	
	ТаблицаПлатежей = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ДокументыУплаты(Объект.Организация, Объект.Период);
	
	Если ТаблицаПлатежей <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			ЗаполнитьЗначенияСвойств(Платежи.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму()
	
	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
		ДокументыОплаты(ЭтотОбъект));
	
	ПлатежиДляОтображения = ПомощникиПоУплатеНалоговИВзносов.ПлатежиДляОтображения(
		ЭтотОбъект.Платежи, СостоянияИнтеграцииДокументов);
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиДляОтображения, "Платеж");
	
	ИнтеграцияСБанкамиФормы.ПолучитьДанныеИПоказатьБаннерСостоянияОтправки(ЭтотОбъект, СостоянияИнтеграцииДокументов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХэшДанныхБаннера(Знач ДокументыОплаты)
	
	Возврат ИнтеграцияСБанкамиФормы.ХэшДанныхБаннера(ДокументыОплаты);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбновлениеБаннераСостоянияОтправки()
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки() Экспорт
	
	Документы = Новый Массив;
	Для Каждого Платеж Из Платежи Цикл
		Документы.Добавить(Платеж.Ссылка);
	КонецЦикла;
	Если ХэшДанныхБаннера(Документы) <> ХешДанныхБаннера Тогда
		НайтиИОтобразитьСвязанныеПлатежи();
	КонецЕсли;
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыОплаты(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого Платеж Из Форма.Платежи Цикл
		ДокументыОплаты.Добавить(Платеж.Ссылка);
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

#КонецОбласти

#Область СозданиеИУдалениеДокументовОплаты

&НаСервере
Функция ОплатитьНаСервере(СпособОплаты)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Модифицированность = Ложь;
		СохранитьНачальныеОстаткиПоНалогамВзносамВФоне();
	КонецЕсли;
	
	Возврат СоздатьПлатежныеДокументыНаСервере(СпособОплаты, СчетОрганизации);
	
КонецФункции

&НаСервере
Функция СоздатьПлатежныеДокументыНаСервере(СпособОплаты, СчетОрганизации)
	
	СозданныеДокументы = Новый Массив;
	
	СуммыКУплате = НалогКУплате(ЭтотОбъект);
	Если СуммыКУплате.Всего > 0 Тогда
		
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(
			Объект.Организация, КонецКвартала(Объект.Период), Перечисления.ВидыНалогов.УСН_Доходы);
		
		ТаблицаПлатежей = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ТаблицаПлатежейДляФормированияПлатежныхПоручений(
			Объект.Организация, Объект.Период, СуммыКУплате);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Правило",         ПорядокУплаты.Правило);
		СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
		СтруктураПараметров.Вставить("Организация",     Объект.Организация);
		СтруктураПараметров.Вставить("НалоговыйПериод", НачалоГода(Объект.Период));
		СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(ТаблицаПлатежей));
		СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
		СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СозданныеДокументы,
			Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров));
		
	КонецЕсли;
	
	СуммыКУплате = ВзносыКУплате(ЭтотОбъект);
	Если СуммыКУплате.Всего > 0 Тогда
		
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(
			Объект.Организация, КонецКвартала(Объект.Период), Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		
		ТаблицаПлатежей = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ТаблицаПлатежейДляФормированияПлатежныхПоручений(
			Объект.Организация, Объект.Период, СуммыКУплате);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Правило",         ПорядокУплаты.Правило);
		СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
		СтруктураПараметров.Вставить("Организация",     Объект.Организация);
		СтруктураПараметров.Вставить("НалоговыйПериод", НачалоГода(Объект.Период));
		СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(ТаблицаПлатежей));
		СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
		СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СозданныеДокументы,
			Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров));
		
	КонецЕсли;
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеКомандамиОплаты(ЭтотОбъект);
	
	Если ЗадолженностьОплаченаПолностью(ЭтотОбъект) Тогда
		УстановитьЗадачеСтатусОплачено(Объект.Организация);
	КонецЕсли;
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗадачеСтатусОплачено(Организация)
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Организация", Организация);
	ПараметрыЗадачи.Вставить("ПериодСобытия", Дата(1, 1, 1));
	ПараметрыЗадачи.Вставить("Правило", Перечисления.ЗадачиНачалаРаботы.ОплатитьЗадолженностьПоНалогамВзносам);
	ПараметрыЗадачи.Вставить("РегистрацияВНалоговомОргане",Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	ВыполнениеЗадачБухгалтера.ПроверитьАктуальностьСтатуса(ПараметрыЗадачи, "Оплачено");
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманд

&НаКлиенте
Процедура Оплатить(СпособОплаты)
	
	ДокументыОплаты = ОплатитьНаСервере(СпособОплаты);
	Если ДокументыОплаты <> Неопределено И ДокументыОплаты.Количество() > 0 Тогда
		ТипСозданныхДокументов = ТипЗнч(ДокументыОплаты[0]);
		ОповеститьОбИзменении(ТипСозданныхДокументов);
		ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
		Оповестить("ИзменилосьСостояниеДокументаИнтеграцииСБанком", Неопределено, ДокументыОплаты);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НалогКУплате(Форма)
	
	Результат = Новый Структура("ДолгУСН, ПеняУСН, ШтрафУСН, Всего");
	
	ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.УСН_Доходы");
	Результат.ДолгУСН = СуммаКУплате(Форма.НалогУСНДолг, Форма.Платежи,
		ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
	
	Результат.ПеняУСН = СуммаКУплате(Форма.НалогУСНПеня, Форма.Платежи,
		ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.ПениСам"));
	
	Результат.ШтрафУСН = СуммаКУплате(Форма.НалогУСНШтраф, Форма.Платежи,
		ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Штраф"));
	
	Результат.Всего = Результат.ДолгУСН + Результат.ПеняУСН + Результат.ШтрафУСН;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВзносыКУплате(Форма)
	
	Результат = Новый Структура("ДолгПФР, ПеняПФР, ШтрафПФР, ДолгФФОМС, ПеняФФОМС, ШтрафФФОМС, Всего");
	
	// ПФР.
	ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть");
	Результат.ДолгПФР = СуммаКУплате(Форма.ВзносПФРДолг,
		Форма.Платежи, ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
	
	Результат.ПеняПФР = СуммаКУплате(Форма.ВзносПФРПеня,
		Форма.Платежи, ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.ПениСам"));
	
	Результат.ШтрафПФР = СуммаКУплате(Форма.ВзносПФРШтраф,
		Форма.Платежи, ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Штраф"));
	
	// ФФОМС.
	ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС");
	Результат.ДолгФФОМС = СуммаКУплате(Форма.ВзносФФОМСДолг,
		Форма.Платежи, ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
	
	Результат.ПеняФФОМС = СуммаКУплате(Форма.ВзносФФОМСПеня,
		Форма.Платежи, ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.ПениСам"));
	
	Результат.ШтрафФФОМС = СуммаКУплате(Форма.ВзносФФОМСШтраф,
		Форма.Платежи, ВидНалога, ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Штраф"));
	
	// Всего.
	Результат.Всего = Результат.ДолгПФР + Результат.ПеняПФР + Результат.ШтрафПФР
		+ Результат.ДолгФФОМС + Результат.ПеняФФОМС + Результат.ШтрафФФОМС;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаКУплате(Сумма, КоллекцияПлатежей, ВидНалога, ВидПлатежа)
	
	Возврат Макс(0, Сумма - УплаченоПоВидуНалога(КоллекцияПлатежей, ВидНалога, ВидПлатежа));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УплаченоПоВидуНалога(КоллекцияПлатежей, ВидНалога, ВидПлатежа)
	
	Отбор = Новый Структура("ВидНалога, ВидНалоговогоОбязательства", ВидНалога, ВидПлатежа);
	НайденныеПлатежи = КоллекцияПлатежей.НайтиСтроки(Отбор);
	
	Результат = 0;
	Для Каждого Платеж Из НайденныеПлатежи Цикл
		Результат = Результат + Платеж.Сумма;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Сверка

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	ПараметрыДляСверки = ПараметрыДляСверки();
	СведенияОСверке    = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияОСверке,
		"СверкаВыполнена, ОписаниеДействияСверка, ЗапросНаСверкуНаименование");
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСверки()
	
	ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(Объект.Организация,
		КонецКвартала(Объект.Период), Перечисления.ВидыНалогов.УСН_Доходы);
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Объект.Организация;
	ПараметрыДляСверки.Правило = ПорядокУплаты.Правило;
	ПараметрыДляСверки.ПериодСобытия = Объект.Период;
	ПараметрыДляСверки.Срок = ПорядокУплаты.Срок;
	ПараметрыДляСверки.Периодичность = Перечисления.Периодичность.Год;
	ПараметрыДляСверки.ИдентификаторЗадачи = ПорядокУплаты.Правило.Владелец.Код;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыДляСверки.ВидыНалогов,
		Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПоддерживаемыеВидыНалогов());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыДляСверки.ВидыНалоговыхОбязательств,
		Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПоддерживаемыеВидыНалоговыхОбязательств());
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервереБезКонтекста
Функция ПроверитьРеквизитыОрганизации(Организация)
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация, ПроверяемыеРеквизитыОрганизации(), НезаполненныеРеквизиты);
		
	Возврат Новый Структура("РеквизитыЗаполнены, НезаполненныеРеквизиты", РеквизитыОрганизацииЗаполнены, НезаполненныеРеквизиты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	СтрокаРеквизиты = "ИНН,ФамилияИП,ИмяИП,Адрес,КодПоОКТМО";
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, " ", "");
	Возврат СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
КонецФункции

#КонецОбласти

#Область СохранениеНачальныхОстатков

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		// Если нажали кнопку "Отмена", то ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьНачальныеОстаткиПоНалогамВзносамВФоне();
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНачальныеОстаткиПоНалогамВзносамВФоне()
	
	ПараметрыЗадания = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыИзмененияОстатковРасчетовПоНалогамВзносамИП();
	ПараметрыЗадания.Организация       = Объект.Организация;
	ПараметрыЗадания.ТаблицаОстатков   = ТаблицаНачальныхОстатков();
	ПараметрыЗадания.Комментарий = 
		НСтр("ru = '#Создан автоматически обработкой ""Помощник уплаты задолженности прошлых лет по налогам и взносам""'");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне    = Истина;
	
	ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ОтразитьЗадолженностьПоНалогамВзносам",
		ПараметрыЗадания, ПараметрыВыполненияВФоне);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаНачальныхОстатков()
	
	МенеджерОбработки = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет;
	СтруктураЗадолженности = МенеджерОбработки.НовыйПоказателиЗадолженности();
	
	ЗаполнитьЗначенияСвойств(СтруктураЗадолженности, ЭтотОбъект, СвойстваОбъектаПоказателиДолга());
	
	Возврат МенеджерОбработки.ТаблицаЗадолженностиДляВводаНачальныхОстатков(СтруктураЗадолженности);
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция СвойстваОбъектаПоказателиДолга()
	
	Возврат "НалогУСНДолг, НалогУСНПеня, НалогУСНШтраф, "
		+ "ВзносПФРДолг, ВзносПФРПеня, ВзносПФРШтраф, "
		+ "ВзносФФОМСДолг, ВзносФФОМСПеня, ВзносФФОМСШтраф";
	
КонецФункции

#КонецОбласти
