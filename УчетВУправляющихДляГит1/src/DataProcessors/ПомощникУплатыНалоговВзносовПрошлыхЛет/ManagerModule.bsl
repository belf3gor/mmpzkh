#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сумму задолженности организации по налогам и взносам за прошлый период.
//
// Параметры:
//   ПараметрыВыполнения - Структура с ключами:
//      Организация         - СправочникСсылка.Организации
//      ИдентификаторЗадачи - Строка
//      ПериодСобытия       - Дата
//
// Возвращаемое значение:
//   Число - неоплаченный остаток по налогу/взносу
//
Функция ЗадолженностьПоНалогамВзносамЗаПрошлыйПериод(ПараметрыВыполнения) Экспорт
	
	Сумма = 0;
	
	Организация = ПараметрыВыполнения.Организация;
	КодЗадачи   = ПараметрыВыполнения.ИдентификаторЗадачи;
	Период      = ПараметрыВыполнения.ПериодСобытия;
	
	ВидыНалогов = ВидыНалоговПоКодуЗадачи(Организация, КодЗадачи);
	НачальныеОстатки = НачальныеОстаткиПоНалогам(Организация, Период);
	СтруктураПоиска  = Новый Структура("ВидНалога");
	
	Для Каждого ВидНалога Из ВидыНалогов Цикл
		СтруктураПоиска.Вставить("ВидНалога", ВидНалога);
		НайденныеСтроки = НачальныеОстатки.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Сумма = Сумма + НайденнаяСтрока.Задолженность;
		КонецЦикла;
	КонецЦикла;
	
	ВидыПлатежей = ПоддерживаемыеВидыНалоговыхОбязательств();
	ВидыПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	
	ТаблицаПлатежей = ДокументыУплаты(Организация, Период, ВидыНалогов, ВидыПлатежей);
		
	СтруктураПоиска   = Новый Структура("Оплачено", Истина);
	ОплаченныеПлатежи = ТаблицаПлатежей.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекущаяСтрока Из ОплаченныеПлатежи Цикл
		Сумма = Сумма - ТекущаяСтрока.Сумма;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицу для вызова обработки формирования платежных поручений
//
Функция ТаблицаПлатежейДляФормированияПлатежныхПоручений(Организация, Период, СуммыКУплате) Экспорт
	
	ТаблицаПлатежей = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
	
	ДобавитьПлатежиВТаблицуПоВидуНалога(ТаблицаПлатежей, СуммыКУплате, "УСН", ПланыСчетов.Хозрасчетный.ЕНприУСН);
	
	ДобавитьПлатежиВТаблицуПоВидуНалога(ТаблицаПлатежей, СуммыКУплате, "ПФР", ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	
	ДобавитьПлатежиВТаблицуПоВидуНалога(ТаблицаПлатежей, СуммыКУплате, "ФФОМС", ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	
	Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ЗаполнитьВидыНалогов(
		ТаблицаПлатежей, Организация, Период);
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

// Возвращает список документов на уплату задолженности по налогам и взносам.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ДокументыУплаты(Организация, Период, ВидыНалогов = Неопределено, ВидыНалоговыхОбязательств = Неопределено) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.КодыЗадач.Добавить("УСН");
	ПараметрыУплатыНалогов.КодыЗадач.Добавить("СтраховыеВзносы_Предприниматель");
	ПараметрыУплатыНалогов.КодыЗадач.Добавить("СтраховыеВзносыСДоходов_Предприниматель");
	
	Если Не ЗначениеЗаполнено(ВидыНалогов) Тогда
		ВидыНалогов = ПоддерживаемыеВидыНалогов();
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыУплатыНалогов.ВидыНалогов, ВидыНалогов);
	
	Если Не ЗначениеЗаполнено(ВидыНалоговыхОбязательств) Тогда
		ВидыНалоговыхОбязательств = ПоддерживаемыеВидыНалоговыхОбязательств();
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств, ВидыНалоговыхОбязательств);
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода = КонецГода(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

// Возвращает начальные остатки задолженности по налогу УСН и взносам организации, введенные пользователем.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Структура - см. НовыйПоказателиЗадолженности()
//
Функция ЗадолженностьПоНалогамВзносам(Организация, Период) Экспорт
	
	Результат = НовыйПоказателиЗадолженности();
	
	ТаблицаОстатков = Обработки.ВводНачальныхОстатков.НоваяТаблицаВводаОстатков("НалогиИВзносы");
	
	Обработки.ВводНачальныхОстатков.ОбновитьОстатки(ТаблицаОстатков, "НалогиИВзносы",
		Новый Структура("Организация, ДатаВводаОстатков", Организация, Период));
	
	Отбор = Новый Структура("СчетУчета, ВидНалога");
	
	ПараметрыОтбораОстатков = ПараметрыОтбораОстатков();
	ВидыПлатежей = ВидыПлатежей();
	
	СтруктураПоказателей = Новый Структура;
	СтруктураПоказателей.Вставить("НалогУСН",   ПараметрыОтбораОстатков.УСН);
	СтруктураПоказателей.Вставить("ВзносПФР",   ПараметрыОтбораОстатков.ПФР);
	СтруктураПоказателей.Вставить("ВзносФФОМС", ПараметрыОтбораОстатков.ФФОМС);
	
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		
		Отбор.СчетУчета = Показатель.Значение.СчетУчета;
		Отбор.ВидНалога = Показатель.Значение.ВидНалога;
		
		НайденныеСтроки = ТаблицаОстатков.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ВидДолга = ВидыПлатежей.Получить(НайденнаяСтрока.ВидПлатежаВБюджет);
			Если ВидДолга <> Неопределено Тогда
				Результат[Показатель.Ключ + ВидДолга] = Результат[Показатель.Ключ + ВидДолга] + НайденнаяСтрока.Задолженность;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу для ввода начальных остатков по налогу УСН и страховым взносам.
// 
// Параметры:
//   СтруктураЗадолженности - Структура - см. НовыйПоказателиЗадолженности()
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с показателями задолженности в разрезе счетов учета и видов налоговых обязательств.
//
Функция ТаблицаЗадолженностиДляВводаНачальныхОстатков(СтруктураЗадолженности) Экспорт
	
	ТаблицаОстатков = ПомощникиПоУплатеНалоговИВзносов.НоваяТаблицаИзмененияРасчетовПоНалогамВзносамИП();
	
	СчетаУчета = СчетаУчета();
	ВидыПлатежей = ВидыПлатежей();
	
	СтруктураПоказателей = Новый Структура;
	СтруктураПоказателей.Вставить("НалогУСН",   СчетаУчета.УСН);
	СтруктураПоказателей.Вставить("ВзносПФР",   СчетаУчета.ПФР);
	СтруктураПоказателей.Вставить("ВзносФФОМС", СчетаУчета.ФФОМС);
	
	Для Каждого Показатель Из СтруктураПоказателей Цикл
		
		Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
			
			ИмяПоказателяДолга = Показатель.Ключ + ВидПлатежа.Значение;
			Если НЕ СтруктураЗадолженности.Свойство(ИмяПоказателяДолга) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОстатков = ТаблицаОстатков.Добавить();
			СтрокаОстатков.СчетУчета = Показатель.Значение;
			СтрокаОстатков.ВидПлатежаВБюджет = ВидПлатежа.Ключ;
			СтрокаОстатков.Задолженность = СтруктураЗадолженности[ИмяПоказателяДолга];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаОстатков;
	
КонецФункции

// Сохраняет задолженность по налогам и взносам в документах "Ввод начальных остатков".
//
// Параметры:
//  Параметры - Структура - структура параметров выполнения операции. 
//                          см. НовыеПараметрыИзмененияОстатковРасчетовПоНалогамВзносамИП()
//  АдресРезультата - Строка - не используется.
//
Процедура ОтразитьЗадолженностьПоНалогамВзносам(Параметры, АдресРезультата) Экспорт
	
	Если Параметры.Свойство("ДатаВводаОстатков") Тогда
		ДатаВводаОстатков = Параметры.ДатаВводаОстатков;
	Иначе
		ДатаВводаОстатков = ДатаВводаЗадолженности(Параметры.Организация);
	КонецЕсли;
	
	МенеджерОбработки = Обработки.ВводНачальныхОстатков;
	
	НачальныеОстатки  = МенеджерОбработки.НоваяТаблицаВводаОстатков("НалогиИВзносы");
	ТаблицаДокументов = МенеджерОбработки.НоваяТаблицаВводаОстатков("СуществующиеДокументы");
	ФинансовыйРезультат = МенеджерОбработки.НоваяТаблицаВводаОстатков("ФинансовыйРезультат");
	
	МенеджерОбработки.ОбновитьОстатки(НачальныеОстатки, "НалогиИВзносы",
		Новый Структура("Организация, ДатаВводаОстатков",
					Параметры.Организация, ДатаВводаОстатков),
		ТаблицаДокументов);
	
	ТаблицаДанных = ПодготовитьТаблицуНачальныхОстатковКЗаписи(НачальныеОстатки, Параметры.ТаблицаОстатков);
	
	МенеджерОбработки.СинхронизироватьСостояниеДокументов(ТаблицаДанных, ТаблицаДокументов);
	
	СтруктураПараметровДокументов = Новый Структура("Организация, Дата, РазделУчета", 
		Параметры.Организация, ДатаВводаОстатков, Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам);
	
	МенеджерОбработки.ЗаписатьНаСервереДокументы(СтруктураПараметровДокументов, ТаблицаДанных, "РасчетыПоНалогамИСборам");
	
КонецПроцедуры

// Возвращает массив видов налогов.
//
// Возвращаемое значение:
//   - Массив значений Перечисления.ВидыНалогов - список видов налогов.
//
Функция ПоддерживаемыеВидыНалогов() Экспорт
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.УСН_Доходы);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	
	Возврат ВидыНалогов;
	
КонецФункции

Функция ПоддерживаемыеВидыНалоговыхОбязательств() Экспорт
	
	ВидыНалоговыхОбязательств = Новый Массив;
	ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам);
	ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	
	Возврат ВидыНалоговыхОбязательств;
	
КонецФункции

// Показатели задолженности, используемые в помощнике.
//
// Возвращаемое значение:
//   Структура
//
Функция НовыйПоказателиЗадолженности() Экспорт
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("НалогУСНДолг",  0);
	Показатели.Вставить("НалогУСНПеня",  0);
	Показатели.Вставить("НалогУСНШтраф", 0);
	
	Показатели.Вставить("ВзносПФРДолг",  0);
	Показатели.Вставить("ВзносПФРПеня",  0);
	Показатели.Вставить("ВзносПФРШтраф", 0);
	
	Показатели.Вставить("ВзносФФОМСДолг",  0);
	Показатели.Вставить("ВзносФФОМСПеня",  0);
	Показатели.Вставить("ВзносФФОМСШтраф", 0);
	
	Возврат Показатели;
	
КонецФункции

Функция НачальныеОстаткиПоНалогам(Организация, Период) Экспорт

	ТаблицаОстатков = Обработки.ВводНачальныхОстатков.НоваяТаблицаВводаОстатков("НалогиИВзносы");
	
	Обработки.ВводНачальныхОстатков.ОбновитьОстатки(ТаблицаОстатков, "НалогиИВзносы",
		Новый Структура("Организация, ДатаВводаОстатков", Организация, Период));
	
	ТаблицаОстатков.Колонки.ВидНалога.Имя = "Налог";
	ТаблицаОстатков.Колонки.Добавить("ВидНалога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	
	ВидыНалогов = Общегоназначения.ЗначениеРеквизитаОбъектов(ТаблицаОстатков.ВыгрузитьКолонку("Налог"), "ВидНалога", Истина);
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		СтрокаОстатков.ВидНалога = ВидыНалогов[СтрокаОстатков.Налог];
	КонецЦикла;
	
	Возврат ТаблицаОстатков;
	
КонецФункции

Функция ПройденОпросПоНалогу(Организация, КодЗадачи) Экспорт
	
	ПройденОпросПоНалогу = ОбщегоНазначенияБП.ПрочитатьДанныеИзХранилища(Организация,
		КлючОпросаПоНалогам() + КодЗадачи);
	
	Возврат ПройденОпросПоНалогу = Истина;

КонецФункции

Процедура ЗаписатьТестПоНалогуПройден(Организация, КодЗадачи) Экспорт

	ОбщегоНазначенияБП.ЗаписатьДанныеВХранилище(Организация, Истина, КлючОпросаПоНалогам() + КодЗадачи);
	
КонецПроцедуры

Функция ВидыНалоговПоКодуЗадачи(Организация, КодЗадачи) Экспорт
	
	Результат = Новый Массив;
	Если КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН() Тогда
		// По коду задачи нельзя определить используется УСН Доходы или Доходы минус расходы,
		// поэтому проверяем учетную политику.
		Результат.Добавить(РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(КодЗадачи, Организация));
	ИначеЕсли КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП() Тогда
		Результат.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		Результат.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаОстатков() Экспорт

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Налог",             Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Результат.Колонки.Добавить("ВидНалога",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Результат.Колонки.Добавить("СчетУчета",         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("ВидПлатежаВБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Результат.Колонки.Добавить("Задолженность",     Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	Результат.Колонки.Добавить("Переплата",         Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	
	Возврат Результат

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДатаВводаЗадолженности(Знач Организация) Экспорт
	
	Возврат Обработки.ВводНачальныхОстатков.ПолучитьДатуНачалаУчета(Организация);
	
КонецФункции

Процедура ДобавитьПлатежиВТаблицуПоВидуНалога(ТаблицаПлатежей, СуммыКУплате, ВидНалога, СчетУчета)
	
	ВидыПлатежей = ВидыПлатежей();
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		
		ИДСуммы = ВидПлатежа.Значение + ВидНалога;
		Если СуммыКУплате.Свойство(ИДСуммы) И СуммыКУплате[ИДСуммы] <> 0 Тогда
			НоваяСтрока = ТаблицаПлатежей.Добавить();
			НоваяСтрока.СчетУчета = СчетУчета;
			НоваяСтрока.Субконто1 = ВидПлатежа.Ключ;
			НоваяСтрока.Сумма     = СуммыКУплате[ИДСуммы];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыПлатежей()
	
	ВидыПлатежей = Новый Соответствие;
	ВидыПлатежей.Вставить(Перечисления.ВидыПлатежейВГосБюджет.Налог, "Долг");
	ВидыПлатежей.Вставить(Перечисления.ВидыПлатежейВГосБюджет.ПениСам, "Пеня");
	ВидыПлатежей.Вставить(Перечисления.ВидыПлатежейВГосБюджет.Штраф, "Штраф");
	
	Возврат ВидыПлатежей;
	
КонецФункции

Функция СчетаУчета()
	
	СчетаУчета = Новый Структура;
	СчетаУчета.Вставить("УСН",   ПланыСчетов.Хозрасчетный.ЕНприУСН);
	СчетаУчета.Вставить("ПФР",   ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаУчета.Вставить("ФФОМС", ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	
	Возврат СчетаУчета;
	
КонецФункции

Функция ПараметрыОтбораОстатков()
	
	ПараметрыУчета = Новый Структура;
	СчетаУчета = СчетаУчета();
	
	// Налог УСН
	ПараметрНалогУСН = Новый Структура("СчетУчета, ВидНалога");
	ПараметрНалогУСН.СчетУчета = СчетаУчета.УСН;
	ПараметрНалогУСН.ВидНалога = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.УСН_Доходы);
	
	ПараметрыУчета.Вставить("УСН", ПараметрНалогУСН);
	
	// Взносы в ПФР
	ПараметрВзносПФР = Новый Структура("СчетУчета, ВидНалога");
	ПараметрВзносПФР.СчетУчета = СчетаУчета.ПФР;
	ПараметрВзносПФР.ВидНалога =
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	
	ПараметрыУчета.Вставить("ПФР", ПараметрВзносПФР);
	
	// Взносы ФФОМС
	ПараметрВзносФФОМС = Новый Структура("СчетУчета, ВидНалога");
	ПараметрВзносФФОМС.СчетУчета = СчетаУчета.ФФОМС;
	ПараметрВзносФФОМС.ВидНалога =
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	
	ПараметрыУчета.Вставить("ФФОМС", ПараметрВзносФФОМС);
	
	Возврат ПараметрыУчета;
	
КонецФункции

Функция ПодготовитьТаблицуНачальныхОстатковКЗаписи(НачальныеОстатки, ТаблицаИсточник)
	
	ТаблицаИсточникСвернутая = ТаблицаИсточник.Скопировать();
	ТаблицаИсточникСвернутая.Свернуть("СчетУчета, ВидПлатежаВБюджет, Налог", "Задолженность, Переплата");
	ТаблицаИсточникСвернутая.Колонки.Налог.Имя = "ВидНалога";
	
	// Таблица НачальныеОстатки может содержать начальные остатки по всем налогам и взносам.
	// Обработаем только те, что нас интересуют. Данные по остальным налогам оставим без изменений.
	Для Каждого СтрокаИсточник Из ТаблицаИсточникСвернутая Цикл
		
		Отбор = Новый Структура("СчетУчета, ВидПлатежаВБюджет, ВидНалога");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		
		НайденныеСтроки = НачальныеОстатки.НайтиСтроки(Отбор);
		
		ВводОстатков = Документы.ВводНачальныхОстатков.ПустаяСсылка();
		
		// Очистим сохраненную ранее задолженность.
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если НайденнаяСтрока.Задолженность <> 0 Тогда
				ВводОстатков = НайденнаяСтрока.Ссылка;
				НайденнаяСтрока.Задолженность = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим сумму задолженности.
		СтрокаТаблицы = НачальныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаИсточник, , "Переплата");
		
		// Если задолженность была сохранена ранее, то не будем создавать новый документ ввода остатков, а изменим существующий.
		СтрокаТаблицы.Ссылка = ВводОстатков;
		
	КонецЦикла;
	
	// Формируем итоговую таблицу данных по таблице начальных остатков для создания/заполнения документов ввода остатков.
	// В ней оставим только те строки, в которых заполнена задолженность или переплата.
	ТаблицаДанных = НачальныеОстатки.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицы ИЗ НачальныеОстатки Цикл
		Если СтрокаТаблицы.Задолженность <> 0
			ИЛИ СтрокаТаблицы.Переплата <> 0 Тогда
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Задолженность.Имя = "СуммаКт";
	ТаблицаДанных.Колонки.Переплата.Имя     = "Сумма";
	
	ТаблицаДанных.Колонки.Добавить("ОтражениеВУСН");
	ТаблицаДанных.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.НеПринимаются, "ОтражениеВУСН");
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция КлючОпросаПоНалогам()

	Возврат "ПройденОпросПоНалогуПрошлыхПериодов_";

КонецФункции

#КонецОбласти

#КонецЕсли
