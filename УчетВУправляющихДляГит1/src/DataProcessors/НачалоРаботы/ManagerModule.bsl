#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция СистемаНалогообложенияПоУмолчанию() Экспорт
	
	Возврат "УпрощеннаяДоходы";
	
КонецФункции

Функция СистемыНалогообложенияДопускающиеСовмещение() Экспорт
	
	СистемыНалогообложенияДопускающиеСовмещение = Новый Массив;
	
	СистемыНалогообложенияДопускающиеСовмещение.Добавить("УпрощеннаяДоходы");
	СистемыНалогообложенияДопускающиеСовмещение.Добавить("УпрощеннаяДоходыМинусРасходы");
	СистемыНалогообложенияДопускающиеСовмещение.Добавить("Общая");
	
	Возврат СистемыНалогообложенияДопускающиеСовмещение;
	
КонецФункции

Функция СистемыНалогообложенияДопускающиеТрудНаемныхРаботников() Экспорт
	
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников = Новый Массив;
	
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("УпрощеннаяДоходы");
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("УпрощеннаяДоходыМинусРасходы");
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("Патентная");
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("ЕНВД");
	СистемыНалогообложенияДопускающиеТрудНаемныхРаботников.Добавить("Общая");
	
	Возврат СистемыНалогообложенияДопускающиеТрудНаемныхРаботников;
	
КонецФункции

Функция ВидОрганизации(ИНН) Экспорт
	
	Возврат ?(СтрДлина(СокрЛП(ИНН)) = 10, "ЮридическоеЛицо", "ИндивидуальныйПредприниматель");
	
КонецФункции

Процедура ПодключитьИнтернетПоддержку(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ДанныеАутентификации = Новый Структура("Логин, Пароль", ПараметрыЗадания.ЛогинИПП, ПараметрыЗадания.ПарольИПП);
	ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(ДанныеАутентификации);
	
	Результат = "ПодключениеУспешно";
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("https://api.orgregister.1c.ru/orgregister/");
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ ЗначениеЗаполнено(РезультатПолученияТикета.КодОшибки) Тогда
			// Проверить подключение к 1С-Контрагент
			
			НайденныеРеквизиты = РаботаСКонтрагентами.РеквизитыЮридическихЛицПоНаименованию("ТестовыйКонтрагент");
			Если ЗначениеЗаполнено(НайденныеРеквизиты.ОписаниеОшибки) Тогда
				Если ВРЕГ(НайденныеРеквизиты.ОписаниеОшибки) = ВРЕГ("НеУказаныПараметрыАутентификации")
					ИЛИ ВРЕГ(НайденныеРеквизиты.ОписаниеОшибки) = ВРЕГ("НеУказанПароль") Тогда
					Результат = "ОшибкаАвторизации";
				ИначеЕсли ВРЕГ(НайденныеРеквизиты.ОписаниеОшибки) = ВРЕГ("Сервис1СКонтрагентНеПодключен") Тогда
					Результат = "Сервис1СКонтрагентНеПодключен";
				Иначе
					Результат = "Неопределено";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("НеверныйЛогинИлиПароль") Тогда
				Результат = "ОшибкаАвторизации";
			ИначеЕсли ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("ОшибкаПодключения") Тогда
				Результат = "ОшибкаПодключения";
			ИначеЕсли ВРЕГ(РезультатПолученияТикета.КодОшибки) = ВРЕГ("ОшибкаСервиса") Тогда
				Результат = "ОшибкаСервиса";
			Иначе
				Результат = "Неопределено";
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Результат = "Неопределено";
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
	Если Результат <> "ПодключениеУспешно"
		И Результат <> "Сервис1СКонтрагентНеПодключен" Тогда
		// Отключаем интернет-поддержку
		ИнтернетПоддержкаПользователей.СохранитьДанныеАутентификации(Неопределено);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ПолучитьДанныеОрганизации() Экспорт

	Результат = Новый Структура("Организация, ИНН, НаименованиеСокращенное");
	Результат.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Если Не Результат.Организация.Пустая() Тогда
		
		ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.Организация, "ИНН, НаименованиеСокращенное");
		Результат.ИНН						 = ДанныеОрганизации.ИНН;
		Результат.НаименованиеСокращенное	 = ДанныеОрганизации.НаименованиеСокращенное;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РегистрацияОрганизации(ДанныеОрганизации, Регистрации) Экспорт
	
	Для Каждого Регистрация Из Регистрации Цикл
		Данные = Регистрация.СведенияОРегистрации.ДанныеРегистрации;
		Если ДанныеОрганизации.ИНН = Данные.ИНН Тогда
			Возврат Регистрация;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Область СозданиеОрганизации

Функция СоздатьОрганизациюПоИНН(ПараметрыСозданияОрганизации, Налогообложение) Экспорт
	
	ВидОрганизации = ВидОрганизации(ПараметрыСозданияОрганизации.ИНН);
	
	// Заполним сведения об организации из веб-сервиса
	Реквизиты = Неопределено;
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		Реквизиты = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ПараметрыСозданияОрганизации.ИНН);
	Иначе
		Реквизиты = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ПараметрыСозданияОрганизации.ИНН);
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоДаннымРегистрации(Реквизиты, ПараметрыСозданияОрганизации);
	Реквизиты.ОписаниеОшибки = "";
	
	Параметры = Новый Структура();
	Параметры.Вставить("ВидОрганизации", ВидОрганизации);
	Параметры.Вставить("ИспользуетсяТрудНаемныхРаботников", Налогообложение.ИспользуетсяТрудНаемныхРаботников);
	Параметры.Вставить("ИНН", ПараметрыСозданияОрганизации.ИНН);
	Параметры.Вставить("Реквизиты", Реквизиты);
	Параметры.Вставить("СистемаНалогообложения", Налогообложение.СистемаНалогообложения);
	Параметры.Вставить("ПлательщикЕНВД", Налогообложение.ПлательщикЕНВД);
	Параметры.Вставить("ПрименяетсяУСНПатент", Налогообложение.ПрименяетсяУСНПатент);
	Параметры.Вставить("ПлательщикТорговогоСбора", Налогообложение.ПлательщикТорговогоСбора);
	Параметры.Вставить("ВидБизнеса", ПараметрыСозданияОрганизации.ВидБизнеса);
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	
	Справочники.Организации.СоздатьОрганизацию(Параметры, АдресВременногоХранилища);
	
	Возврат ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецФункции

Функция ЗаполнитьРеквизитыПоДаннымРегистрации(Реквизиты, ПараметрыСозданияОрганизации)
	
	Реквизиты.ИНН = ПараметрыСозданияОрганизации.ИНН;
	
	Если ПараметрыСозданияОрганизации.Свойство("КПП")
		И ЗначениеЗаполнено(ПараметрыСозданияОрганизации.КПП)
		И Реквизиты.Свойство("КПП") Тогда
		Реквизиты.КПП = ПараметрыСозданияОрганизации.КПП;
	КонецЕсли;
	
	ВидОрганизации = ВидОрганизации(ПараметрыСозданияОрганизации.ИНН);
	
	НаименованиеОрганизации = Неопределено;
	ПараметрыСозданияОрганизации.Свойство("Наименование", НаименованиеОрганизации);
	
	Реквизиты.Вставить("ЮридическоеФизическоеЛицо", 
		?(ВидОрганизации = "ИндивидуальныйПредприниматель", 
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, 
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо));
	
	ЗаполненЮридическийАдрес = Реквизиты.Свойство("ЮридическийАдрес") И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес);
	
	Если Не ЗаполненЮридическийАдрес
		И (ЗначениеЗаполнено(ПараметрыСозданияОрганизации.ЗначениеАдресаJSON)
			Или ЗначениеЗаполнено(ПараметрыСозданияОрганизации.Адрес)) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыСозданияОрганизации.ЗначениеАдресаJSON) Тогда
			ЗначениеАдресаJSON = ПараметрыСозданияОрганизации.ЗначениеАдресаJSON;
			ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
				ЗначениеАдресаJSON, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Иначе
			ЗначениеАдресаJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
				ПараметрыСозданияОрганизации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			ПредставлениеАдреса = ПараметрыСозданияОрганизации.Адрес;
		КонецЕсли;
		
		АдресВведенВСвободнойФорме= УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(ЗначениеАдресаJSON);
		Если Не АдресВведенВСвободнойФорме Тогда
			ЮридическийАдрес = Новый Структура;
			ЮридическийАдрес.Вставить("КонтактнаяИнформация", ЗначениеАдресаJSON);
			ЮридическийАдрес.Вставить("Представление", ПредставлениеАдреса);
			ЮридическийАдрес.Вставить("Комментарий");
			
			Реквизиты.Вставить("ЮридическийАдрес", ЮридическийАдрес);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОрганизации = "ИндивидуальныйПредприниматель" Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.Фамилия) Тогда
			// Определим ФИО из наименования ИП
			ФИО = ОрганизацииФормыКлиентСервер.ФамилияИмяОтчествоПоНаименованиюИП(НаименованиеОрганизации);
			Если ФИО = Неопределено Тогда
				// Определим ФИО предпринимателя по руководителю
				Если ПараметрыСозданияОрганизации.Свойство("ФамилияДиректора")
					И ЗначениеЗаполнено(ПараметрыСозданияОрганизации.ФамилияДиректора) Тогда
					
					Фамилия  = ПараметрыСозданияОрганизации.ФамилияДиректора;
					Имя      = "";
					Отчество = "";
					
					ПараметрыСозданияОрганизации.Свойство("ИмяДиректора", Имя);
					ПараметрыСозданияОрганизации.Свойство("ОтчествоДиректора", Отчество);
					
					ФИО = Новый Структура();
					ФИО.Вставить("Фамилия",  ?(ЗначениеЗаполнено(Фамилия), Фамилия, ""));
					ФИО.Вставить("Имя",      ?(ЗначениеЗаполнено(Имя), Имя, ""));
					ФИО.Вставить("Отчество", ?(ЗначениеЗаполнено(Отчество), Отчество, ""));
				КонецЕсли;
			КонецЕсли;
			Если ФИО <> Неопределено Тогда
				Реквизиты.Вставить("Фамилия",  ФИО.Фамилия);
				Реквизиты.Вставить("Имя",      ФИО.Имя);
				Реквизиты.Вставить("Отчество", ФИО.Отчество);
			КонецЕсли;
		КонецЕсли;
		// Устанавливаем наименование для организации-ИП в наименование из регистрации.
		// При создании организации, если заполнено ФИО, они будут заменены на канонические.
		УстановитьЗначениеРеквизита(Реквизиты, ПараметрыСозданияОрганизации, "НаименованиеСокращенное", "Наименование");
		УстановитьЗначениеРеквизита(Реквизиты, ПараметрыСозданияОрганизации, "НаименованиеПолное", "Наименование");
		УстановитьЗначениеРеквизита(Реквизиты, ПараметрыСозданияОрганизации, "Наименование", "Наименование");
	Иначе
		УстановитьЗначениеРеквизита(Реквизиты, ПараметрыСозданияОрганизации, "КПП", "КПП");
		
		Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
			Если Реквизиты.Свойство("НаименованиеСокращенное")
				И НЕ ЗначениеЗаполнено(Реквизиты.НаименованиеСокращенное) Тогда
				Реквизиты.Вставить("НаименованиеСокращенное", НаименованиеОрганизации);
			КонецЕсли;
			
			Если Реквизиты.Свойство("НаименованиеПолное")
				И НЕ ЗначениеЗаполнено(Реквизиты.НаименованиеПолное) Тогда
				Реквизиты.Вставить("НаименованиеПолное", 
						ОрганизацииФормыКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(НаименованиеОрганизации));
			КонецЕсли;
			
			Если Реквизиты.Свойство("Наименование")
				И НЕ ЗначениеЗаполнено(Реквизиты.Наименование) Тогда
				Реквизиты.Вставить("Наименование", 
						ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(НаименованиеОрганизации));
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем руководителя
		Если Реквизиты.Руководитель = Неопределено Тогда
			
			Фамилия  = "";
			Имя      = "";
			Отчество = "";
			ПараметрыСозданияОрганизации.Свойство("ФамилияДиректора", Фамилия);
			ПараметрыСозданияОрганизации.Свойство("ИмяДиректора", Имя);
			ПараметрыСозданияОрганизации.Свойство("ОтчествоДиректора", Отчество);
			
			Если ЗначениеЗаполнено(Фамилия)
				И ЗначениеЗаполнено(Имя) Тогда
				Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2 %3'"),
								Фамилия, Имя, Отчество);
				
				Реквизиты.Руководитель = Новый Структура;
				Реквизиты.Руководитель.Вставить("Должность", "");
				Реквизиты.Руководитель.Вставить("Фамилия", Фамилия);
				Реквизиты.Руководитель.Вставить("Имя", Имя);
				Реквизиты.Руководитель.Вставить("Отчество", Отчество);
				Реквизиты.Руководитель.Вставить("Представление", Представление);
				Реквизиты.Руководитель.Вставить("ИНН", "");
				Реквизиты.Руководитель.Вставить("ДатаЗаписи", Дата('00010101'));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.РегистрацияВНалоговомОргане = Неопределено
			И ЗначениеЗаполнено(Реквизиты.КПП) Тогда
			Результат = Новый Структура;
			Результат.Вставить("Код", Лев(Реквизиты.КПП, 4));
			Результат.Вставить("Наименование", "");
			Результат.Вставить("ОКТМО", "");
			Результат.Вставить("ОКАТО", "");
			Результат.Вставить("ДатаРегистрации", Дата('00010101'));
			Реквизиты.РегистрацияВНалоговомОргане = Результат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначениеРеквизита(Реквизиты, ДанныеРегистрации, ИмяРеквизита, ИмяРеквизитаРегистрации)
	
	ЗначениеРеквизита = Неопределено;
	ЗначениеРегистрации = Неопределено;
	Если Реквизиты.Свойство(ИмяРеквизита, ЗначениеРеквизита)
		И НЕ ЗначениеЗаполнено(ЗначениеРеквизита)
		И ДанныеРегистрации.Свойство(ИмяРеквизитаРегистрации, ЗначениеРегистрации)
		И ЗначениеЗаполнено(ЗначениеРегистрации) Тогда
		
		Реквизиты.Вставить(ИмяРеквизита, ЗначениеРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает подходящие настройки интерфейса в зависимости от системы налогообложения: 
// простой или полный интерфейс, возможен ли учет без закрывающих документов.
// Если система налогообложения не указана - то она определяется по данным информационной базы.
//
// Параметры:
//  СистемаНалогообложения	 - Строка - Идентификатор системы налогообложения.
// 
// Возвращаемое значение:
//   - Структура - Настройки интерфейса.
//
Функция ПодходящиеНастройкиИнтерфейса(СистемаНалогообложения = "") Экспорт
	
	СистемаНалогообложенияДляИнтерфейса = ?(ЗначениеЗаполнено(СистемаНалогообложения),
		СистемаНалогообложения, НаиболееСложнаяСистемаНалогообложенияИзПрименяемых());
	
	СистемыНалогообложенияПростойИнтерфейс = Новый Массив;
	СистемыНалогообложенияПростойИнтерфейс.Добавить("УпрощеннаяДоходы");
	СистемыНалогообложенияПростойИнтерфейс.Добавить("УпрощеннаяДоходыМинусРасходы");
	СистемыНалогообложенияПростойИнтерфейс.Добавить("Патентная");
	СистемыНалогообложенияПростойИнтерфейс.Добавить("ЕНВД");
	СистемыНалогообложенияПростойИнтерфейс.Добавить("НалогНаПрофессиональныйДоход");
	ПростойИнтерфейс = НЕ Обработки.ФункциональностьПрограммы.ТребуетсяПолныйИнтерфейс()
		И СистемыНалогообложенияПростойИнтерфейс.Найти(СистемаНалогообложенияДляИнтерфейса) <> Неопределено;
	
	СистемыНалогообложенияБезЗакрывающихДокументов = Новый Массив;
	СистемыНалогообложенияБезЗакрывающихДокументов.Добавить("УпрощеннаяДоходы");
	СистемыНалогообложенияБезЗакрывающихДокументов.Добавить("Патентная");
	СистемыНалогообложенияБезЗакрывающихДокументов.Добавить("ЕНВД");
	СистемыНалогообложенияБезЗакрывающихДокументов.Добавить("НалогНаПрофессиональныйДоход");
	БезЗакрывающихДокументов = ПростойИнтерфейс
		И СистемыНалогообложенияБезЗакрывающихДокументов.Найти(СистемаНалогообложенияДляИнтерфейса) <> Неопределено;
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантИнтерфейса", ?(ПростойИнтерфейс, "ИнтерфейсТаксиПростой", "ИнтерфейсТакси"));
	Результат.Вставить("БезЗакрывающихДокументов", БезЗакрывающихДокументов);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыСозданияОрганизации() Экспорт
	
	ПараметрыСозданияОрганизации = Новый Структура;
	ПараметрыСозданияОрганизации.Вставить("ИНН", ""); // Обязательный
	ПараметрыСозданияОрганизации.Вставить("КПП", ""); // Необязательный
	ПараметрыСозданияОрганизации.Вставить("Наименование", ""); // Необязательный
	ПараметрыСозданияОрганизации.Вставить("Адрес", ""); // Необязательный
	ПараметрыСозданияОрганизации.Вставить("ЗначениеАдресаJSON", ""); // Необязательный
	
	ПараметрыСозданияОрганизации.Вставить("ВидБизнеса", Перечисления.ВидыБизнеса.ПустаяСсылка()); // Необязательный
	
	ПараметрыСозданияОрганизации.Вставить("ФамилияДиректора", ""); // Необязательный
	ПараметрыСозданияОрганизации.Вставить("ИмяДиректора", ""); // Необязательный
	ПараметрыСозданияОрганизации.Вставить("ОтчествоДиректора", ""); // Необязательный
	Возврат ПараметрыСозданияОрганизации;
	
КонецФункции

Функция НовыйНалогообложениеОрганизации() Экспорт
	
	НалогообложениеОрганизации = Новый Структура;
	НалогообложениеОрганизации.Вставить("СистемаНалогообложения", ""); // Обязательный
	// Может принимать значения:
	//  - УпрощеннаяДоходы
	//  - УпрощеннаяДоходыМинусРасходы
	//  - Патентная
	//  - ЕНВД
	//  - Общая
	//  - НалогНаПрофессиональныйДоход
	НалогообложениеОрганизации.Вставить("ПлательщикЕНВД", Ложь);
	НалогообложениеОрганизации.Вставить("ПрименяетсяУСНПатент", Ложь);
	НалогообложениеОрганизации.Вставить("ПлательщикТорговогоСбора", Ложь);
	НалогообложениеОрганизации.Вставить("ИспользуетсяТрудНаемныхРаботников", Ложь); // Не обязательный
	
	Возврат НалогообложениеОрганизации;
	
КонецФункции

Функция НаиболееСложнаяСистемаНалогообложенияИзПрименяемых()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходы), ЛОЖЬ) КАК ПрименяетсяУСНДоходы,
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы), ЛОЖЬ) КАК ПрименяетсяУСНДоходыМинусРасходы,
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиСистемыНалогообложения.ПрименяетсяУСНПатент), ЛОЖЬ) КАК ПрименяетсяУСНПатент,
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиСистемыНалогообложения.ПлательщикНДФЛ), ЛОЖЬ) КАК ПлательщикНДФЛ,
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль), ЛОЖЬ) КАК ПлательщикНалогаНаПрибыль,
	|	ЕСТЬNULL(МАКСИМУМ(НастройкиСистемыНалогообложения.ПлательщикЕНВД), ЛОЖЬ) КАК ПлательщикЕНВД
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если Выборка.ПлательщикНалогаНаПрибыль ИЛИ Выборка.ПлательщикНДФЛ Тогда
		Возврат "Общая";
	ИначеЕсли Выборка.ПрименяетсяУСНДоходы Тогда
		Возврат "УпрощеннаяДоходы";
	ИначеЕсли Выборка.ПрименяетсяУСНДоходыМинусРасходы Тогда
		Возврат "УпрощеннаяДоходыМинусРасходы";
	ИначеЕсли Выборка.ПрименяетсяУСНПатент Тогда
		Возврат "Патентная";
	ИначеЕсли Выборка.ПлательщикЕНВД Тогда
		Возврат "ЕНВД";
	Иначе
		Возврат "НалогНаПрофессиональныйДоход";
	КонецЕсли;
	
КонецФункции

Функция ИспользуетсяПолнаяФункциональность() Экспорт
	
	ВариантФункциональности = Обработки.ФункциональностьПрограммы.ВариантФункциональности();
	Возврат (ВариантФункциональности = ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность());
	
КонецФункции

Функция УстановитьПодходящийИнтерфейс(ВидОрганизации, СистемаНалогообложения, ИспользуетсяТрудНаемныхРаботников, РазрешенУчетРегулярнойДеятельности = Истина) Экспорт
	
	НастройкиИнтерфейса = ПодходящиеНастройкиИнтерфейса(СистемаНалогообложения);
	
	ВариантИнтерфейса = ?(РазрешенУчетРегулярнойДеятельности,
		НастройкиИнтерфейса.ВариантИнтерфейса,
		"ИнтерфейсТаксиПростой");
	ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса(ВариантИнтерфейса);
	
	БезЗакрывающихДокументов = ?(ВидОрганизации = "ИндивидуальныйПредприниматель" И НЕ ИспользуетсяТрудНаемныхРаботников,
		НастройкиИнтерфейса.БезЗакрывающихДокументов,
		Ложь);
	
	Если НастройкиИнтерфейса.ВариантИнтерфейса = "ИнтерфейсТаксиПростой"
		И НЕ БезЗакрывающихДокументов Тогда
		Константы.ИспользоватьДокументыПоступления.Установить(Истина);
		Константы.ИспользоватьДокументыРеализации.Установить(Истина);
	КонецЕсли;
	
	Возврат ВариантИнтерфейса;
	
КонецФункции

#КонецОбласти

#Область РежимРаботыПользователя

// Функция возвращает режим работы пользователя.
//
// Возвращаемое значение - Строка - см. НовыйРежимРаботыПользователя()
//
Функция РежимРаботыВыборПользователя() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяНастройкиНачалаРаботыПрогрессПользователя(),
		ИмяНастройкиРежимРаботы(),
		"");
	
КонецФункции

// Процедура сохраняет режим работы пользователя.
// 
// Параметры:
//    РежимРаботы - Строка - см. НовыйРежимРаботыПользователя()
//
Процедура СохранитьРежимРаботыПользователя(Знач РежимРаботы) Экспорт
	
	РежимРаботыПользователя = НовыйРежимРаботыПользователя();
	Если Не РежимРаботыПользователя.Свойство(РежимРаботы) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный режим работы: %1'"), РежимРаботы);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяНастройкиНачалаРаботыПрогрессПользователя(),
		ИмяНастройкиРежимРаботы(),
		РежимРаботы);

КонецПроцедуры

Функция НовыйРежимРаботыПользователя() Экспорт
	
	РежимРаботы = Новый Структура;
	РежимРаботы.Вставить("БыстрыйСтарт", "БыстрыйСтарт");
	РежимРаботы.Вставить("Регистрация", "Регистрация");
	РежимРаботы.Вставить("ВнесениеИзменений", "ВнесениеИзменений");
	Возврат РежимРаботы;
	
КонецФункции

Функция ИмяНастройкиНачалаРаботыПрогрессПользователя()

	Возврат "НачалоРаботыПрогрессПользователя";

КонецФункции

Функция ИмяНастройкиРежимРаботы()

	Возврат "РежимРаботы";

КонецФункции

#КонецОбласти

#КонецЕсли