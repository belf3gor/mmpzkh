
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	Если Объект.ВариантВыгрузки = 1 ИЛИ Объект.ВариантВыгрузки = 3
	  ИЛИ Объект.ВариантВыгрузки = 4 ИЛИ Объект.ВариантВыгрузки = 5 Тогда
		Элементы.НомерДополнения.Видимость        = Истина;
	Иначе
		Элементы.НомерДополнения.Видимость        = Ложь;
	КонецЕсли;
	
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		Элементы.СпособВыгрузкиДанныхКапРемонт.СписокВыбора.ЗагрузитьЗначения(СписокВыбораСпособаВыгрузкиДанныхСУслугамиКапРемонта.ВыгрузитьЗначения());
		Элементы.НадписьУслугиКапРемонта.Видимость = Истина;
		Элементы.НадписьСписокУслугКапРемонт.Видимость = Истина;
		Элементы.НадписьВедениеКапремонта.ЦветТекста = ЦветаСтиля.УПЖКХ_ТекстСообщенияИнформации;
		ОбновитьСписокУслугКапРемонт();
	Иначе
		Элементы.СпособВыгрузкиДанныхКапРемонт.СписокВыбора.ЗагрузитьЗначения(СписокВыбораСпособаВыгрузкиДанныхОсновной.ВыгрузитьЗначения());
		Элементы.НадписьУслугиКапРемонта.Видимость = Ложь;
		Элементы.НадписьСписокУслугКапРемонт.Видимость = Ложь;
		Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены Тогда
			Элементы.НадписьВедениеКапремонта.ЦветТекста = ЦветаСтиля.УПЖКХ_ТекстСообщенияОПроблемах;
		Иначе
			Элементы.НадписьВедениеКапремонта.ЦветТекста = Новый Цвет(0, 0, 0);
		КонецЕсли;
		Объект.СпособВыгрузкиДанныхКапРемонт = "по всем услугам";
	КонецЕсли;
	
	Элементы.Услуги.Видимость = (Объект.СпособВыгрузкиДанныхКапРемонт = "по указанным услугам");
	
КонецПроцедуры

&НаСервере
// Устанавливает доступность элементов формы.
//
Процедура УстановитьДоступность()
	
	Элементы.ГруппаНастройкиПараметровФормированияЗаголовкаФайлаВыгрузки.Видимость = Ложь;
	Элементы.НомерУслугиБанка.Видимость                   = Ложь;
	Элементы.НомерДополнения.Видимость                    = Ложь;
	Элементы.СимволРазделителя.Видимость                  = Ложь;
	Элементы.СимволРазделителяКорпусаЗдания.Видимость     = Ложь;
	Элементы.ГруппаУслуги.Видимость                       = Ложь;
	Элементы.ГруппаУслугиДляВывода.Видимость              = Ложь;
	Элементы.Константа.Видимость                          = Ложь;
	Элементы.Префикс.Видимость                            = Ложь;
	Элементы.ПараметрВыводаЗадолженности.Видимость        = Ложь;
	Элементы.НомерСчетчика.Видимость                      = Ложь;
	Элементы.НеВыгружатьДанныеПоПУ.Видимость              = Ложь;
	Элементы.НомерЭкраннойФормы.Видимость                 = Ложь;
	Элементы.СписокОбъектов.Доступность                   = Ложь;
	Элементы.ГруппаДанныеОрганизации.Видимость            = Ложь;
	Элементы.НадписьПоясненияНастроекИмениФайла.Видимость = Ложь;
	
	Элементы.КодОСБ.Видимость           = Ложь;
	Элементы.НеВыгружатьГород.Видимость = Ложь;
	Элементы.НомерДоговора.Видимость    = Ложь;
	Элементы.Примечание.Видимость       = Ложь;
	Элементы.РассчетныйСчет.Видимость   = Ложь;
	
	Элементы.Дата.Видимость = Ложь;
	
	Элементы.УчитыватьПереплаты.Видимость = Ложь;
	
	Если НЕ Объект.ВыгрузитьПоВсем = 1 Тогда 
		Элементы.СписокОбъектов.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 2 Тогда
		Элементы.Дополнение.Видимость = Объект.ВыводитьДополнение;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 1 ИЛИ Объект.ВариантВыгрузки = 2
		ИЛИ Объект.ВариантВыгрузки = 3 ИЛИ Объект.ВариантВыгрузки = 4
		ИЛИ Объект.ВариантВыгрузки = 5 ИЛИ Объект.ВариантВыгрузки = 8 Тогда
		Элементы.НомерУслугиБанка.Видимость = Истина;
		Элементы.НомерДополнения.Видимость  = Истина;
		Элементы.ГруппаНастройкиПараметровФормированияЗаголовкаФайлаВыгрузки.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 3 ИЛИ Объект.ВариантВыгрузки = 8 Тогда
		Элементы.ГруппаУслуги.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 10 Тогда
		Элементы.ГруппаУслугиДляВывода.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 1 Тогда
		Элементы.ПараметрВыводаЗадолженности.Видимость = Истина;
		Элементы.Примечание.Видимость = Истина;
		Элементы.НеВыгружатьГород.Видимость = Истина;
	ИначеЕсли Объект.ВариантВыгрузки = 6 Тогда
		Элементы.Константа.Видимость = Истина;
		Элементы.Префикс.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 7 ИЛИ Объект.ВариантВыгрузки = 13 Тогда
		Элементы.СимволРазделителя.Видимость = Истина;
	КонецЕсли;
	
	Если НЕ (Объект.ВариантВыгрузки = 5 ИЛИ Объект.ВариантВыгрузки = 6 ИЛИ Объект.ВариантВыгрузки = 9 ИЛИ Объект.ВариантВыгрузки = 11 ИЛИ Объект.ВариантВыгрузки = 12) Тогда
		Элементы.СимволРазделителяКорпусаЗдания.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 6 ИЛИ Объект.ВариантВыгрузки = 7 ИЛИ Объект.ВариантВыгрузки = 10 ИЛИ Объект.ВариантВыгрузки = 12 ИЛИ Объект.ВариантВыгрузки = 13 Тогда
		Элементы.ГруппаПериод.Видимость = Ложь;
		Элементы.Дата.Видимость = Истина;
	Иначе
		Элементы.ГруппаПериод.Видимость = Истина;
		Элементы.Дата.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 9 Тогда
		Элементы.НомерСчетчика.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 8 Тогда
		
		Элементы.НомерЭкраннойФормы.Видимость    = Истина;
		Элементы.НомерСчетчика.Видимость         = Истина;
		Элементы.НеВыгружатьДанныеПоПУ.Видимость = Истина;
		Элементы.УчитыватьПереплаты.Видимость    = Истина;
		
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 11 Тогда
		Элементы.РассчетныйСчет.Видимость = Истина;
		Элементы.КодОСБ.Видимость         = Истина;
		Элементы.НомерДоговора.Видимость  = Истина;
		Элементы.НадписьПоясненияНастроекИмениФайла.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 11 ИЛИ Объект.ВариантВыгрузки = 12 Тогда
		Элементы.ГруппаДополнительныеНастройки.Видимость = Истина;
	Иначе
		Элементы.ГруппаДополнительныеНастройки.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 13 Тогда
		Элементы.ГруппаДанныеОрганизации.Видимость = Истина;
		Элементы.НадписьПоясненияНастроекИмениФайла.Видимость = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Предназначена для редактирования свойств элементов формы.
//
Процедура РедактироватьСвойстваЭлементовФормы()
	
	Если Объект.ВариантВыгрузки = 8 Тогда
		Элементы.УслугаХолВода.АвтоОтметкаНезаполненного       = Ложь;
		Элементы.УслугаГорВода.АвтоОтметкаНезаполненного       = Ложь;
		Элементы.УслугаЭлектричество.АвтоОтметкаНезаполненного = Ложь;
		
		Элементы.УслугаХолВода.ОтметкаНезаполненного       = Ложь;
		Элементы.УслугаГорВода.ОтметкаНезаполненного       = Ложь;
		Элементы.УслугаЭлектричество.ОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 3 Тогда
		Элементы.УслугаХолВода.АвтоОтметкаНезаполненного       = Истина;
		Элементы.УслугаГорВода.АвтоОтметкаНезаполненного       = Истина;
		Элементы.УслугаЭлектричество.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры // РедактироватьСвойстваЭлементовФормы()

&НаСервере
// Процедура восстанавливает значение реквизита ОбязательныйНомерДополнения.
//
Процедура ВосстановитьОбязательныйНомерДополнения()
	
	СтрокаТЗОбязательныхНомеровДополнения = 
		ТЗОбязательныхНомеровДополнения.НайтиСтроки(Новый Структура("ВариантВыгрузки", Объект.ВариантВыгрузки));
	Если СтрокаТЗОбязательныхНомеровДополнения.Количество() = 0 Тогда 
		Если Объект.ВариантВыгрузки = 3 Или Объект.ВариантВыгрузки = 4 Тогда 
			
			Если Объект.ВариантВыгрузки = 3 Тогда 
				ВременныйНомерДополнения = "419";
			ИначеЕсли Объект.ВариантВыгрузки = 4 Тогда
				ВременныйНомерДополнения = "100082";
			КонецЕсли;
			
			СтрокаТЗОбязательныхНомеровДополнения = ТЗОбязательныхНомеровДополнения.Добавить();
			СтрокаТЗОбязательныхНомеровДополнения.ВариантВыгрузки = Объект.ВариантВыгрузки;
			СтрокаТЗОбязательныхНомеровДополнения.НомерДополнения = ВременныйНомерДополнения;
		КонецЕсли;
	Иначе
		ВременныйНомерДополнения = СтрокаТЗОбязательныхНомеровДополнения[0].НомерДополнения;
	КонецЕсли;
	
	Объект.НомерДополнения = ВременныйНомерДополнения;
	
КонецПроцедуры // ВосстановитьОбязательныйНомерДополнения()

&НаСервере
// Сохраняет данные в хранилище.
Процедура ЗаполнитьДанныеВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                 Объект.Организация);
	СтруктураПараметров.Вставить("НомерУслугиБанка",            Объект.НомерУслугиБанка);
	СтруктураПараметров.Вставить("ИмяФайлаВыгрузки",            Объект.ИмяФайлаВыгрузки);
	СтруктураПараметров.Вставить("ВыгрузитьПоВсем",             Объект.ВыгрузитьПоВсем);
	СтруктураПараметров.Вставить("ВариантВыгрузки",             Объект.ВариантВыгрузки);
	СтруктураПараметров.Вставить("УслугаХолВода",               Объект.УслугаХолВода);
	СтруктураПараметров.Вставить("УслугаГорВода",               Объект.УслугаГорВода);
	СтруктураПараметров.Вставить("УслугаЭлектричество",         Объект.УслугаЭлектричество);
	СтруктураПараметров.Вставить("УслугаДляВывода",             Объект.УслугаДляВывода);
	СтруктураПараметров.Вставить("Константа",                   Объект.Константа);
	СтруктураПараметров.Вставить("Префикс",                     Объект.Префикс);
	СтруктураПараметров.Вставить("Примечание",                  Объект.Примечание);
	СтруктураПараметров.Вставить("СимволРазделителя",           Объект.СимволРазделителя);
	СтруктураПараметров.Вставить("НомерСчетчика",               Объект.НомерСчетчика);
	СтруктураПараметров.Вставить("НомерЭкраннойФормы",          Объект.НомерЭкраннойФормы);
	СтруктураПараметров.Вставить("НомерЛС",                     Объект.НомерЛС);
	СтруктураПараметров.Вставить("ПараметрВыводаЗадолженности", Объект.ПараметрВыводаЗадолженности);
	СтруктураПараметров.Вставить("Кодировка",                   Объект.Кодировка);
	СтруктураПараметров.Вставить("КодОСБ",                      Объект.КодОСБ);
	СтруктураПараметров.Вставить("НомерДоговора",               Объект.НомерДоговора);
	СтруктураПараметров.Вставить("СоответствиеОбязательныхНомеровДополнения", ТЗОбязательныхНомеровДополнения.Выгрузить());
	СтруктураПараметров.Вставить("СпособВыгрузкиДанныхКапРемонт",             Объект.СпособВыгрузкиДанныхКапРемонт);
	СтруктураПараметров.Вставить("УчитыватьПереплаты",          Объект.УчитыватьПереплаты);
	СтруктураПараметров.Вставить("ВыводитьКонечнуюДату",        Объект.ВыводитьКонечнуюДату);
	СтруктураПараметров.Вставить("Разделитель",                 Объект.Разделитель);
	СтруктураПараметров.Вставить("ПорядковыйНомерБЗ",              ПорядковыйНомерБЗ);
	СтруктураПараметров.Вставить("ПостоянныйСимволОрганизации",    ПостоянныйСимволОрганизации);
	СтруктураПараметров.Вставить("СимволРазделителяКорпусаЗдания", Объект.СимволРазделителяКорпусаЗдания);
	СтруктураПараметров.Вставить("СписокОбъектов",                 Объект.СписокОбъектов.Выгрузить());
	СтруктураПараметров.Вставить("ОтборУслуг",                     Объект.Услуги.Выгрузить());
	СтруктураПараметров.Вставить("ВыводитьДополнение",             Объект.ВыводитьДополнение);
	СтруктураПараметров.Вставить("Дополнение",                     Объект.Дополнение);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузки_КВП_ВыгрузкаВСистемуГород",,
																	СтруктураПараметров);
КонецПроцедуры // ЗаполнитьДанныеВХранилище()

&НаСервере
// Производит начальное заполнение параметров обработки.
//
// Параметры:
//  Нет.
//
Процедура ИнициализацияРеквизитов()
	
	Если НЕ Объект.НеЗаполнятьНастройкиПриОткрытии Тогда 
		
		СтруктураПараметров =
			УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_КВП_ВыгрузкаВСистемуГород");
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			врТаблицаЗначений          = Новый ТаблицаЗначений;
			врТаблицаСпискаОбъектов    = Новый ТаблицаЗначений;
			врТаблицаСпискаОтбораУслуг = Новый ТаблицаЗначений;
			
			СтруктураПараметров.Свойство("Организация",                 Объект.Организация);
			СтруктураПараметров.Свойство("НомерУслугиБанка",            Объект.НомерУслугиБанка);
			СтруктураПараметров.Свойство("ИмяФайлаВыгрузки",            Объект.ИмяФайлаВыгрузки);
			СтруктураПараметров.Свойство("ВыгрузитьПоВсем",             Объект.ВыгрузитьПоВсем);
			СтруктураПараметров.Свойство("ВариантВыгрузки",             Объект.ВариантВыгрузки);
			СтруктураПараметров.Свойство("УслугаХолВода",               Объект.УслугаХолВода);
			СтруктураПараметров.Свойство("УслугаГорВода",               Объект.УслугаГорВода);
			СтруктураПараметров.Свойство("УслугаЭлектричество",         Объект.УслугаЭлектричество);
			СтруктураПараметров.Свойство("УслугаДляВывода",             Объект.УслугаДляВывода);
			СтруктураПараметров.Свойство("Константа",                   Объект.Константа);
			СтруктураПараметров.Свойство("Префикс",                     Объект.Префикс);
			СтруктураПараметров.Свойство("Примечание",                  Объект.Примечание);
			СтруктураПараметров.Свойство("СимволРазделителя",           Объект.СимволРазделителя);
			СтруктураПараметров.Свойство("НомерСчетчика",               Объект.НомерСчетчика);
			СтруктураПараметров.Свойство("НомерЭкраннойФормы",          Объект.НомерЭкраннойФормы);
			СтруктураПараметров.Свойство("НомерЛС",                     Объект.НомерЛС);
			СтруктураПараметров.Свойство("ПараметрВыводаЗадолженности", Объект.ПараметрВыводаЗадолженности);
			СтруктураПараметров.Свойство("Кодировка",                   Объект.Кодировка);
			СтруктураПараметров.Свойство("КодОСБ",                      Объект.КодОСБ);
			СтруктураПараметров.Свойство("НомерДоговора",               Объект.НомерДоговора);
			СтруктураПараметров.Свойство("СоответствиеОбязательныхНомеровДополнения", врТаблицаЗначений);
			СтруктураПараметров.Свойство("СпособВыгрузкиДанныхКапРемонт",             Объект.СпособВыгрузкиДанныхКапРемонт);
			СтруктураПараметров.Свойство("УчитыватьПереплаты",          Объект.УчитыватьПереплаты);
			СтруктураПараметров.Свойство("ПорядковыйНомерБЗ",           ПорядковыйНомерБЗ);
			СтруктураПараметров.Свойство("ПостоянныйСимволОрганизации", ПостоянныйСимволОрганизации);
			СтруктураПараметров.Свойство("СимволРазделителяКорпусаЗдания", Объект.СимволРазделителяКорпусаЗдания);
			СтруктураПараметров.Свойство("СписокОбъектов",                 врТаблицаСпискаОбъектов);
			СтруктураПараметров.Свойство("ОтборУслуг",                     врТаблицаСпискаОтбораУслуг);
			СтруктураПараметров.Свойство("ВыводитьДополнение",             Объект.ВыводитьДополнение);
			СтруктураПараметров.Свойство("Дополнение",                     Объект.Дополнение);
			
			Если НЕ врТаблицаЗначений = Неопределено Тогда
				ТЗОбязательныхНомеровДополнения.Загрузить(врТаблицаЗначений);
			КонецЕсли;
			
			Если НЕ врТаблицаСпискаОтбораУслуг = Неопределено Тогда
				Объект.Услуги.Загрузить(врТаблицаСпискаОтбораУслуг);
			КонецЕсли;
			
			Если НЕ врТаблицаСпискаОбъектов = Неопределено Тогда
				Объект.СписокОбъектов.Загрузить(врТаблицаСпискаОбъектов);
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство("ВыводитьКонечнуюДату") Тогда
				СтруктураПараметров.Свойство("ВыводитьКонечнуюДату", Объект.ВыводитьКонечнуюДату);
			Иначе
				Объект.ВыводитьКонечнуюДату = ИСТИНА;
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство("Разделитель") Тогда
				СтруктураПараметров.Свойство("Разделитель", Объект.Разделитель);
			Иначе
				Объект.Разделитель = "|";
			КонецЕсли;
			
			Если Объект.Разделитель = "вертикальная" Тогда
				Объект.Разделитель = "|";
			КонецЕсли;
			
		Иначе
			Объект.ВариантВыгрузки = 1;
			Объект.НомерЛС = "КодЛС";
			Объект.НомерСчетчика = "Код";
			Объект.Разделитель = "|";
		КонецЕсли;
		
		Если Объект.Организация.Пустая() Тогда
			Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
		КонецЕсли;
		
	КонецЕсли;
	
	ТекРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.ДатаНач = НачалоМесяца(ТекРабочаяДата);
	Объект.ДатаКон = КонецМесяца(ТекРабочаяДата);
	Объект.Дата    = ТекРабочаяДата;
	
	Если Объект.Кодировка = 0 Тогда
		Объект.Кодировка = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПараметрВыводаЗадолженности) Тогда
		Объект.ПараметрВыводаЗадолженности = 2;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СпособВыгрузкиДанныхКапРемонт) Тогда
		Объект.СпособВыгрузкиДанныхКапРемонт = "по всем услугам";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает описание варианта выгрузки данных.
//
// Параметры:
//  Нет.
//
Функция ПолучитьОписаниеВариантаВыгрузки()
	
	ОписаниеВарианта = "Формат файла: txt" + Символы.ПС + Символы.ПС
					 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
					 + "Наименование файла: ""OutFile""" + Символы.ПС + Символы.ПС;
	
	Если Объект.ВариантВыгрузки = 1 Тогда
		
		// Если город в адресе не указан то берется в качестве города НАСЕЛЕННЫЙ ПУНКТ.
		
		ОписаниеВарианта = ОписаниеВарианта
						 + "Структура файла:" + Символы.ПС
						 + "#FILESUM <сумма остатков на начало периода>" + Символы.ПС
						 + "#TYPE 7" + Символы.ПС
						 + "#SERVICE <Номер услуги банка>" + Символы.ПС
						 + "#NOTE <Примечание>" + Символы.ПС
						 + "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма на начало периода>;<Код услуги>;"
						 + "<Дата начала периода>;<Дата окончания периода>;<Номер дополнения>:<Сумма начисления>:<Общая площадь>:<Количество жильцов>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Город>,<Улица>,<Дом><Символ разделителя корпуса здания><Корпус>,<Квартира>" + Символы.ПС + Символы.ПС
						 + "Формат дат начала и окончания периода: <День>/<Месяц>/<Год>";
		
	ИначеЕсли Объект.ВариантВыгрузки = 2 Тогда
		
		// Если город в адресе не указан то берется в качестве города РЕГИОН.
		
		ОписаниеВарианта = ОписаниеВарианта
						 + "Структура файла:" + Символы.ПС
						 + "#FILESUM <общая сумма реестра>" + Символы.ПС
						 + "#TYPE 7" + Символы.ПС
						 + "#SERVICE <Номер услуги банка>" + Символы.ПС
						 + "#NOTE <Примечание>" + Символы.ПС
						 + "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма>;<Дополнение>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Город>,<Улица>,<Дом><Символ разделителя корпуса здания><Корпус>,<Квартира>" + Символы.ПС + Символы.ПС;
						 
	ИначеЕсли Объект.ВариантВыгрузки = 3 Тогда
		
		// Показания счетчиков холодной воды, горячей воды и электричества по лицевым счетам.
		
		ОписаниеВарианта = ОписаниеВарианта
						 + "Структура файла:" + Символы.ПС
						 + "#FILESUM <общая сумма задолженности" + Символы.ПС
						 + "#TYPE 7" + Символы.ПС
						 + "#SERVICE <Номер услуги банка>" + Символы.ПС
						 + "#NOTE <Примечание>" + Символы.ПС
						 + "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма Задолженности>>;;;;<Обязательный номер дополнения>;"
						 + "<Дата расчета>;<Показания счетчиков>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Город>,<Улица>,<Дом><Символ разделителя корпуса здания><Корпус>,<Квартира>" + Символы.ПС
						 + "Формат показания счетчиков: <Показания счетчика хол.воды>,<Показания счетчика гор. воды>,"
						 + "<Показания счетчика электроэнергии>." + Символы.ПС + Символы.ПС;
						
	ИначеЕсли Объект.ВариантВыгрузки = 4 Тогда
		
		ОписаниеВарианта = ОписаниеВарианта
						 + "Структура файла:" + Символы.ПС
						 + "#FILESUM <общая сумма задолженности>" + Символы.ПС
						 + "#TYPE 7" + Символы.ПС
						 + "#SERVICE <Номер услуги банка>" + Символы.ПС
						 + "#NOTE <Примечание>" + Символы.ПС
						 + "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма задолженности>;;;;"
						 + "<Номер дополнения>;<ШтрихКод>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: ""<Регион>,<Город>,<Улица>,<Дом><Символ разделителя корпуса здания><Корпус>,<Квартира>""." + Символы.ПС;
						
	ИначеЕсли Объект.ВариантВыгрузки = 5 Тогда
		
		ОписаниеВарианта = "Формат файла: txt" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: ""OutFile""" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "#FILESUM <сумма остатков на начало периода>" + Символы.ПС
						 + "#TYPE 7" + Символы.ПС
						 + "#SERVICE <Номер услуги банка>" + Символы.ПС
						 + "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма на начало периода>;;<Дата начала периода>;"
						 + "<Дата окончания периода>;<Номер дополнения>:<Сумма начисления>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Город>,<Улица>,<Дом>,<Квартира>" + Символы.ПС
						 + "Формат дат начала и окончания периода: <День>/<Месяц>/<Год>";
						
	ИначеЕсли Объект.ВариантВыгрузки = 6 Тогда
		
		ОписаниеВарианта = ОписаниеВарианта
						 + "Структура файла:" + Символы.ПС
						 + "<smpay_load_hdr><format_id>smpay_load_data</format_id><format_version>1</format_version><file_id>"
						 + "12345</file_id></smpay_load_hdr> <стартовая запись, обеспечивающая автоматическую обработку файла>"
						 + Символы.ПС + "<Константа><Префикс><Лицевой счет> <Адрес> <Сумма Долга>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Улица> <Дом> <Корпус> <Квартира>" + Символы.ПС
						 + "Сумма долга отображается в копейках";
						 
	ИначеЕсли Объект.ВариантВыгрузки = 7 Тогда
		
		ОписаниеВарианта = "Формат файла: VEK" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: DBddmmyy (ddmmyy - дата формирования файла)" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "<Лицевой счет>|<Адрес>|<Сумма долга>|<Дата>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Улица> <Дом> <Символ разделителя корпуса здания> <Корпус> <Квартира>" + Символы.ПС
						 + "Если у офиса не задан номер помещения, то вместо номера офиса в адрес"
						 + " выводится наименование контрагента лицевого счета." + Символы.ПС + Символы.ПС
						 + "Формат суммы долга:" + Символы.ПС
						 + "Сумма долга выводится с учетом выбранного на форме разделителя суммы:"
						 + " ""."" (точка) или "","" (запятая)." + Символы.ПС
						 + "Если по лицевому счету имеется переплата или нет задолженности,"
						 + " то в файл запишется сумма долга, равная нулю." + Символы.ПС;
						 
	ИначеЕсли Объект.ВариантВыгрузки = 8 Тогда
		
		ОписаниеВарианта = "Формат файла: txt" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: ""OutFile""" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "#FILESUM <общая сумма задолженности за указанный период>" + Символы.ПС
						 + "#TYPE 7" + Символы.ПС
						 + "#SERVICE <Номер услуги банка>" + Символы.ПС
						 + "#NOTE <Примечание>" + Символы.ПС
						 + "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма задолженности л/с за указанный период >;;;;"
						 + "<Номер экранной формы>:<Штрих код>:::<Счетчик 1>:" 
						 + "<Тип счетчика 1>:<Показания счетчика 1>:::::::::::::::::::<Счетчик 8>:<Тип счетчика 8>:" 
						 + "<Показания счетчика 8>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Город><Улица>,<Дом><Символ разделителя корпуса здания><Корпус>,<Квартира>" + Символы.ПС;
		
	ИначеЕсли Объект.ВариантВыгрузки = 9 Тогда
		
		ОписаниеВарианта = "Формат файла: DBF" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: ""OutFile""" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "Колонки:" + Символы.ПС 
						 + "  1) <LS> - Лицевой счет"  + Символы.ПС
						 + "  2) <FIO> - ФИО ответственного собственника, нанимателя лицевого счета"  + Символы.ПС
						 + "  3) <ADRES> - Адрес"  + Символы.ПС
						 + "  4) <KOPLATE> - Сумма к оплате"  + Символы.ПС
						 + "  5) <ID1>...<ID5> - Счетчик"  + Символы.ПС
						 + "  6) <NAME1>...<NAME5> - Наименование счетчика"  + Символы.ПС
						 + "  7) <S1>...<S5> - Последние показания счетчиков (Дневные показания счетчиков)"  + Символы.ПС 
						 + "Формат адреса: <Улица><Дом><Корпус><Квартира>" + Символы.ПС
						 + "При формировании используются только первые 5 индивидуальных приборов учета, отсортированные по коду в"
						 + " порядке возрастания. Индивидуальными приборами учета считаются счетчики,"
						 + " установленные на лицевой счет или помещение.";
						 
	ИначеЕсли Объект.ВариантВыгрузки = 10 Тогда
		
		ОписаниеВарианта = "Формат файла: DBF" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: ""OutFile""" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "Колонки:" + Символы.ПС 
						 + "  1) <A_NLS> - Лицевой счет"  + Символы.ПС
						 + "  2) <A_FIO> - ФИО ответственного собственника, нанимателя лицевого счета"  + Символы.ПС
						 + "  3) <A_ADRES> - Адрес"  + Символы.ПС
						 + "  4) <A_DATE> - Дата задолженности"  + Символы.ПС
						 + "  5) <A_SUMM> - Сумма задолженности в копейках"  + Символы.ПС
						 + "  6) <A_SUMM2> - Сумма доп. задолженности (пени) в копейках"  + Символы.ПС
						 + "  7) <A_SCH1> - Начальное показание счетчика"  + Символы.ПС
						 + "  8) <A_SCH2> - Конечное показание счетчика"  + Символы.ПС
						 + "  9) <A_NOTE> - Резервное поле"  + Символы.ПС
						 + "  10) <B_DTRANS> - Служебное поле"  + Символы.ПС
						 + "  11) <B_NTRANS> - Служебное поле"  + Символы.ПС
						 + "  12) <B_STRANS> - Служебное поле"  + Символы.ПС
						 + "Формат адреса: <Город>,<Улица>,<Дом><Символ разделителя корпуса здания><Корпус>,<Квартира>" + Символы.ПС + "";
		
	ИначеЕсли Объект.ВариантВыгрузки = 11 Тогда
		
		ОписаниеВарианта = "Формат файла: txt" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: ИИИИИИИИИ(ИИ)_РРРРРРРРРРРРРРРРРРРР_XXX (ИИИИИИИИИ(ИИ) - ИНН организации; РРРРРРРРРРРРРРРРРРРР - расчетный счет;" + Символы.ПС
						 + "XXX - кодировка (DOS или WIN))" + Символы.ПС
						 + "Файл упаковывается в архив. Наименование архива: ON (O - код ОСБ; N - номер договора)" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "<Лицевой счет>|<ФИО плательщика>|<Сумма начисления>|<Дата>" + Символы.ПС
						 + "где ""|"" - символ разделителя полей выгрузки (данный символ может принимать различные значения)" + Символы.ПС + Символы.ПС
						 + "Формат даты: <День>.<Месяц>.<Год>";
						
	ИначеЕсли Объект.ВариантВыгрузки = 12 Тогда
		
		ОписаниеВарианта = "Формат файла: txt" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: ""OutFile""" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "<Лицевой счет>|<Владелец ЛС>|<Сумма долга>|<Дата>" + Символы.ПС
						 + "где ""|"" - символ разделителя полей выгрузки (данный символ может принимать различные значения)" + Символы.ПС + Символы.ПС
						 + "Формат даты: <День>.<Месяц>.<Год>";
						 
	ИначеЕсли Объект.ВариантВыгрузки = 13 Тогда
		
		ОписаниеВарианта = "Формат файла: txt" + Символы.ПС + Символы.ПС
						 + "Кодировка: Windows, DOS" + Символы.ПС + Символы.ПС
						 + "Наименование файла: ИИИИИИИИИ(ИИ)_РРРРРРРРРРРРРРРРРРРР_XXX_yDD (ИИИИИИИИИ(ИИ) - ИНН организации; РРРРРРРРРРРРРРРРРРРР - номер основного расчетного счета организации;" + Символы.ПС
						 + "XXX - порядковый номер файла; y - постоянный символ; DD - день от даты актуальности)" + Символы.ПС + Символы.ПС
						 + "Структура файла:" + Символы.ПС
						 + "<Лицевой счет>|<Владелец ЛС>|<Адрес>|<Дата>|<Сумма долга>" + Символы.ПС + Символы.ПС
						 + "Формат адреса: <Населенный пункт><Улица><Дом><Символ разделителя корпуса здания><Корпус><Квартира>" + Символы.ПС
						 + "Формат даты: <ММГГ>" + Символы.ПС;
						
	КонецЕсли;
	
	Возврат ОписаниеВарианта;
	
КонецФункции

&НаКлиенте
// Проверяет заполнение реквизитов.
//
Процедура ПроверитьЗаполнениеРеквизитов(Знач Оповещение)
	
	Отказ = Ложь;
	
	// Проверяем организацию.
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана организация");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем периоды.
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНач)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаКон) Тогда
		Отказ = Истина;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Период выгрузки не заполнен");
	КонецЕсли;
	
	Если Объект.ДатаНач > Объект.ДатаКон Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Начало периода не может быть больше окончания периода выгрузки");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем вариант выгрузки.
	Если НЕ ЗначениеЗаполнено(Объект.ВариантВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан формат файла выгрузки");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем заполнения номера услуги банка.
	Если Объект.НомерУслугиБанка = "" И НЕ Объект.ВариантВыгрузки = 6 
		И НЕ Объект.ВариантВыгрузки = 7 И НЕ Объект.ВариантВыгрузки = 9
		И НЕ Объект.ВариантВыгрузки = 10 И НЕ Объект.ВариантВыгрузки = 11
		И НЕ Объект.ВариантВыгрузки = 12 И НЕ Объект.ВариантВыгрузки = 13 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан номер услуги банка");
		Отказ = Истина;
	КонецЕсли;
	
	Если (Объект.ВариантВыгрузки = 7 ИЛИ Объект.ВариантВыгрузки = 12 ИЛИ Объект.ВариантВыгрузки = 13) И НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата выгрузки не указана");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем заполнение имя файла выгрузки.
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог для выгрузки");
		Отказ = Истина;
	КонецЕсли;
	
	Файл = Новый Файл(Объект.ИмяФайлаВыгрузки);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗавершениеПроверкиСуществованияФайла", ЭтотОбъект, Новый Структура("Оповещение, Файл, Отказ", Оповещение, Файл, Отказ)));
	
КонецПроцедуры

// Обрабатывает результат проверки существования файла.
&НаКлиенте
Процедура ЗавершениеПроверкиСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	Отказ = ДополнительныеПараметры.Отказ;
	Файл = ДополнительныеПараметры.Файл;
	
	Если НЕ Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Каталог указан не верно");
		Отказ = Истина;
	КонецЕсли;
	
	Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ЗавершениеПроверкиСоответствияКаталогу", ЭтотОбъект, Новый Структура("Оповещение, Отказ", Оповещение, Отказ)));
	
КонецПроцедуры

// Обрабатывает результат проверки соответствия файлового объекта каталогу.
&НаКлиенте
Процедура ЗавершениеПроверкиСоответствияКаталогу(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	Отказ = ДополнительныеПараметры.Отказ;
	
	Если НЕ ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Каталог указан не верно");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем константу.
	Если Объект.ВариантВыгрузки = 6
		И НЕ ЗначениеЗаполнено(Объект.Константа) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана константа");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем заполнение списка лицевых счетов.
	Если Объект.ВыгрузитьПоВсем <> 1 И Объект.СписокОбъектов.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбраны лицевые счета для выгрузки");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем услуги.
	Если Объект.ВариантВыгрузки = 3
		И (НЕ ЗначениеЗаполнено(Объект.УслугаХолВода)
		Или НЕ ЗначениеЗаполнено(Объект.УслугаГорВода)
		Или НЕ ЗначениеЗаполнено(Объект.УслугаЭлектричество)) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбраны услуги, по которым будут выгружаться показания ИПУ");
		Отказ = Истина;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 10 И (Не ЗначениеЗаполнено(Объект.УслугаДляВывода)) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана услуга, по которой будут выгружаться показания ИПУ");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем номер счетчика.
	Если (Объект.ВариантВыгрузки = 8 Или Объект.ВариантВыгрузки = 9)
		И НЕ ЗначениеЗаполнено(Объект.НомерСчетчика) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен формат вывода счетчика");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем номер экранной формы.
	Если Объект.ВариантВыгрузки = 8 
		И НЕ ЗначениеЗаполнено(Объект.НомерЭкраннойФормы) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен номер экранной формы");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем номер лицевого счета.
	Если НЕ ЗначениеЗаполнено(Объект.НомерЛС) Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен формат вывода лицевого счета");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем разделитель суммы.
	Если (Объект.ВариантВыгрузки = 7 ИЛИ Объект.ВариантВыгрузки = 13) И НЕ ЗначениеЗаполнено(Объект.СимволРазделителя) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен символ разделителя суммы");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем разделитель корпуса здания.
	Если НЕ (Объект.ВариантВыгрузки = 5 ИЛИ Объект.ВариантВыгрузки = 6 ИЛИ Объект.ВариантВыгрузки = 9 ИЛИ Объект.ВариантВыгрузки = 11 ИЛИ Объект.ВариантВыгрузки = 12) И НЕ ЗначениеЗаполнено(Объект.СимволРазделителяКорпусаЗдания) Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен символ разделителя корпуса здания");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем порядковый номер БЗ.
	Если Объект.ВариантВыгрузки = 13 И НЕ ЗначениеЗаполнено(ПорядковыйНомерБЗ) Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен порядковый номер файла");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем постоянный символ организации.
	Если Объект.ВариантВыгрузки = 13 И НЕ ЗначениеЗаполнено(ПостоянныйСимволОрганизации) Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен постоянный символ");
		Отказ = Истина;
	КонецЕсли;
	
	// Проверяем реквизиты оргинизации.
	Если Объект.ВариантВыгрузки = 11 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.РассчетныйСчет) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен рассчетный счет");
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КодОСБ) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен код ОСБ");
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.НомерДоговора) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен номер договора");
			Отказ = Истина;
		КонецЕсли;
		
		ОргСведения = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.ДатаКон, "ИННЮЛ");
		ИННОрганизации = ОргСведения.ИННЮЛ;
		
		Если ИННОрганизации = "" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен ИНН организации");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Не Отказ);
	Возврат;
	
КонецПроцедуры

&НаСервере
// Выгружает сведения в файл.
//
Функция ВыгрузитьСведенияВФайл(ИмяФайла)
	
	СписокЛС = ПолучитьСписокЛС(Объект.ВыгрузитьПоВсем);
	
	МассивСписковЛС = ПодготовитьНаОсновеТаблицыЛицевыхСчетовМассивСписковПо500ЛС(СписокЛС);
	
	ТаблицаСведений = ПолучитьТаблицуСведений(МассивСписковЛС);
	
	Если Объект.ВариантВыгрузки = 11 Тогда
		ИмяФайла = Объект.ИмяФайлаВыгрузки + "\" + СокрЛП(Объект.Организация.ИНН) + "_" + СокрЛП(Объект.РассчетныйСчет) + "_" + ?(Объект.Кодировка = 1, "WIN", "DOS") + ".txt";
	ИначеЕсли Объект.ВариантВыгрузки = 13 Тогда
		Если Объект.СпособВыгрузкиДанныхКапРемонт = "по услугам кап. ремонта" Тогда
			Возврат ВыгрузитьДанныеПоУслугамКапРемонтаВФайлыВариант13(ТаблицаСведений);
		Иначе
			ИмяФайла = Объект.ИмяФайлаВыгрузки + "\" + СокрЛП(Объект.Организация.ИНН) + "_" + СокрЛП(Объект.Организация.ОсновнойБанковскийСчет.НомерСчета) + "_" + ПорядковыйНомерБЗ + "_" + ПостоянныйСимволОрганизации + Формат(Объект.Дата, "ДФ=дд") + ".txt";
		КонецЕсли;
	ИначеЕсли Объект.ВариантВыгрузки = 7 Тогда
		ИмяФайла = Объект.ИмяФайлаВыгрузки;
	ИначеЕсли Объект.ВариантВыгрузки = 9 ИЛИ Объект.ВариантВыгрузки = 10 Тогда
		ИмяФайла = Объект.ИмяФайлаВыгрузки + "\OutFile.dbf";
	Иначе
		ИмяФайла = Объект.ИмяФайлаВыгрузки + "\OutFile.txt";
	КонецЕсли;
	
	Возврат СФормироватьФайл(ТаблицаСведений);
	
КонецФункции

&НаСервере
// Получает список лицевых счетов из табличной части "Объекты".
//
Функция ПолучитьСписокЛС(ВыгрузитьПоВсемЛС)
	
	Если ВыгрузитьПоВсемЛС = 0 Тогда
		
		МенеджерВТОбъекты = Новый МенеджерВременныхТаблиц;
		
		ЗапросЛС = Новый Запрос;
		ЗапросЛС.МенеджерВременныхТаблиц = МенеджерВТОбъекты;
		
		ЗапросЛС.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ СписокОбъектов
		|ИЗ
		|	&СписокОбъектов КАК СписокОбъектов
		|;
		|///////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	СписокОбъектов
		|ГДЕ
		|	СписокОбъектов.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
		|	И СписокОбъектов.Объект.ЭтоГруппа = ЛОЖЬ
		|";
		
		ЗапросЛС.УстановитьПараметр("СписокОбъектов", Объект.СписокОбъектов.Выгрузить());
		СписокЛС = ЗапросЛС.Выполнить().Выгрузить();
		
		ЗапросГруппЛС = Новый Запрос;
		ЗапросГруппЛС.МенеджерВременныхТаблиц = МенеджерВТОбъекты;
		ЗапросГруппЛС.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	СписокОбъектов
		|ГДЕ
		|	СписокОбъектов.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
		|	И СписокОбъектов.Объект.ЭтоГруппа = ИСТИНА
		|";
		
		СписокГрупп = ЗапросГруппЛС.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		СписокЛСГрупп = Новый СписокЗначений;
		Если СписокГрупп.Количество() > 0 Тогда
			СписокЛСГрупп = КВП_ПолучитьСписокЛицевыхСчетовПоГруппам(СписокГрупп, Объект.ДатаНач, КонецДня(Объект.ДатаКон));
		КонецЕсли;
		
		Для Каждого ТекущийЛС Из СписокЛСГрупп Цикл
			НоваяСтрокаЛС = СписокЛС.Добавить();
			НоваяСтрокаЛС.Объект = ТекущийЛС.Значение;
		КонецЦикла;
		
		ЗапросЗдания = Новый Запрос;
		ЗапросЗдания.МенеджерВременныхТаблиц = МенеджерВТОбъекты;
		ЗапросЗдания.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	СписокОбъектов
		|ГДЕ
		|	СписокОбъектов.Объект ССЫЛКА Справочник.КВП_Здания
		|";
		
		СписокЗданий = ЗапросЗдания.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		СписокЛСЗданий  =Новый СписокЗначений;
		Если СписокЗданий.Количество() > 0 Тогда
			СписокЛСЗданий = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЗданий, Объект.ДатаНач, КонецДня(Объект.ДатаКон));
		КонецЕсли;
		
		Для Каждого ТекущийЛС Из СписокЛСЗданий Цикл
			НоваяСтрокаЛС = СписокЛС.Добавить();
			НоваяСтрокаЛС.Объект = ТекущийЛС.Значение;
		КонецЦикла;
		
		СписокЛС.Свернуть("Объект");
		
	Иначе
		
		ЗапросЛС = Новый Запрос;
		
		ЗапросЛС.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК Объект
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа";
		
		СписокЛС = ЗапросЛС.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат СписокЛС;
	
КонецФункции //ПолучитьСписокЛС()

&НаСервереБезКонтекста
// Возвращает массив списков лицевых счетов по 500 штук в каждом списке.
//
Функция ПодготовитьНаОсновеТаблицыЛицевыхСчетовМассивСписковПо500ЛС(СписокЛСДоОбработки)
	
	МассивСписковЛС = Новый Массив;
	
	Сч       = 1;
	СписокЛС = Новый Массив;
	
	Для Каждого СтрокаСписка ИЗ СписокЛСДоОбработки Цикл
		
		СписокЛС.Добавить(СтрокаСписка.Объект);
		
		Если Сч = 500 Тогда
			МассивСписковЛС.Добавить(СписокЛС);
			
			Сч       = 1;
			СписокЛС = Новый Массив;
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокЛС.Количество() > 0 Тогда
		МассивСписковЛС.Добавить(СписокЛС);
	КонецЕсли;
	
	Возврат МассивСписковЛС;
	
КонецФункции // ПодготовитьНаОсновеТаблицыЛицевыхСчетовМассивСписковПо500ЛС()

&НаСервере
// Получает таблицу сведений о задолженностях и начислениях по лицевым счетам.
//
Функция ПолучитьТаблицуСведений(МассивСписковЛС)
	
	ПервыйПроход = Истина;
	
	Запрос = Новый Запрос;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Если Объект.СпособВыгрузкиДанныхКапРемонт = "по всем услугам" Тогда
		УсловиеОтбораУслуг = "";
	ИначеЕсли Объект.СпособВыгрузкиДанныхКапРемонт = "по указанным услугам" Тогда
		ТаблицаУслугОтбора = Объект.Услуги.Выгрузить(, "Услуга");
		ТаблицаУслугОтбора.Свернуть("Услуга");
		
		СписокУслугОтбора = ТаблицаУслугОтбора.ВыгрузитьКолонку("Услуга");
		Если СписокУслугОтбора.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("СписокУслуг", СписокУслугОтбора);
			УсловиеОтбораУслуг = "И Услуга В (&СписокУслуг)";
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("СписокУслуг", мСтруктураНастроекКапРемонта.СписокУслуг);
		УсловиеОтбораУслуг = "И " + ?(Объект.СпособВыгрузкиДанныхКапРемонт = "по услугам, отличным от кап. ремонта", "НЕ ", "") + "Услуга В (&СписокУслуг)";
	КонецЕсли;
	
	Для Каждого ТекСписокЛС ИЗ МассивСписковЛС Цикл
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СписокЛС", ТекСписокЛС);
		
		Если Объект.ВариантВыгрузки = 1 ИЛИ Объект.ВариантВыгрузки = 2 Тогда
			
			Если Объект.ВариантВыгрузки = 1 И Объект.ПараметрВыводаЗадолженности = 2 Тогда
				Запрос.УстановитьПараметр("ДатаСальдо", Новый Граница(КонецДня(Объект.ДатаКон), ВидГраницы.Включая));
			Иначе
				Запрос.УстановитьПараметр("ДатаСальдо", Новый Граница(НачалоДня(Объект.ДатаНач) - 1, ВидГраницы.Включая));
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Организация",       Объект.Организация);
			Запрос.УстановитьПараметр("ДатаНач",           Новый Граница(НачалоДня(Объект.ДатаНач), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("ДатаКон",           Новый Граница(КонецДня(Объект.ДатаКон), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("ДатаКонца",         КонецДня(Объект.ДатаКон));
			Запрос.УстановитьПараметр("НачДатаНачисления", СтрЗаменить(Формат(Объект.ДатаНач, "ДЛФ=Д"), ".", "/"));
			Запрос.УстановитьПараметр("КонДатаНачисления", СтрЗаменить(Формат(Объект.ДатаКон, "ДЛФ=Д"), ".", "/"));
			Запрос.УстановитьПараметр("СокращатьФИО",      Объект.ВыводитьИнициалыФИО);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаНачислений.КодУслуги КАК КодУслуги,
			|	СУММА(ЕСТЬNULL(ТаблицаНачислений.НачСальдо, 0)) КАК НачСальдо,
			|	СУММА(ЕСТЬNULL(ТаблицаНачислений.СуммаНачисления, 0)) КАК СуммаНачисления,
			|	СУММА(ЕСТЬNULL(ТаблицаНачислений.СуммаОплаты, 0)) КАК СуммаОплаты,
			|	&НачДатаНачисления КАК НачДатаНачисления,
			|	&КонДатаНачисления КАК КонДатаНачисления,
			|	ТаблицаНачислений.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаНачислений.ЛицевойСчет.Код КАК КодЛС,
			|	ТаблицаНачислений.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	ТаблицаНачислений.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
			|	ТаблицаНачислений.ЛицевойСчет.Адрес.Код КАК Квартира,
			|	ТаблицаНачислений.ЛицевойСчет.Адрес.Суффикс КАК Суффикс
			|ПОМЕСТИТЬ втНачислений
			|ИЗ
			|	(ВЫБРАТЬ
			|		КВП_Сальдо.Услуга.Код КАК КодУслуги,
			|		КВП_Сальдо.СуммаНачисленияОстаток КАК НачСальдо,
			|		0 КАК СуммаНачисления,
			|		0 КАК СуммаОплаты,
			|		КВП_Сальдо.ЛицевойСчет КАК ЛицевойСчет
			|	ИЗ
			|		РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&ДатаСальдо,
			|																	Организация = &Организация
			|																	И ЛицевойСчет В (&СписокЛС)" + УсловиеОтбораУслуг + ") КАК КВП_Сальдо
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		УПЖКХ_НачисленияОбороты.Услуга.Код,
			|		0,
			|		ВЫБОР
			|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
			|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ,
			|		ВЫБОР
			|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
			|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ,
			|		УПЖКХ_НачисленияОбороты.ЛицевойСчет
			|	ИЗ
			|		РегистрНакопления.УПЖКХ_Начисления.Обороты(
			|				&ДатаНач,
			|				&ДатаКон,
			|				,
			|				Организация = &Организация
			|					И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)
			|																И ЛицевойСчет В (&СписокЛС)" + УсловиеОтбораУслуг + ") КАК УПЖКХ_НачисленияОбороты) КАК ТаблицаНачислений
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаНачислений.КодУслуги,
			|	ТаблицаНачислений.ЛицевойСчет,
			|	ТаблицаНачислений.ЛицевойСчет.Идентификатор,
			|	ТаблицаНачислений.ЛицевойСчет.Код,
			|	ТаблицаНачислений.ЛицевойСчет.Наименование,
			|	ТаблицаНачислений.ЛицевойСчет.Адрес.Код,
			|	ТаблицаНачислений.ЛицевойСчет.Адрес.Суффикс";
			Запрос.Выполнить();
			
			ЗапросПоЗданиям = Новый Запрос;
			ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросПоЗданиям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втНачислений.ЛицевойСчет.Адрес.Владелец КАК Объект
			|ИЗ
			|	втНачислений КАК втНачислений
			|
			|СГРУППИРОВАТЬ ПО
			|	втНачислений.ЛицевойСчет.Адрес.Владелец";
			
			МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	втНачислений.КодУслуги,
			|	втНачислений.НачСальдо,
			|	втНачислений.СуммаНачисления,
			|	втНачислений.СуммаОплаты,
			|	втНачислений.НачДатаНачисления,
			|	втНачислений.КонДатаНачисления,
			|	втНачислений.ЛицевойСчет,
			|	втНачислений.КодЛС,
			|	втНачислений.НаименованиеЛС,
			|	втНачислений.ИдентификаторЛС,
			|	втНачислений.Квартира,
			|	втНачислений.Суффикс,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """")
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
			|	КОНЕЦ КАК Город,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") = """"
			|			ТОГДА ""0""
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Дом, """")
			|	КОНЕЦ КАК Дом,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус
			|ПОМЕСТИТЬ втАдреса
			|ИЗ
			|	втНачислений КАК втНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО втНачислений.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втНачислений
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втАдреса.ЛицевойСчет
			|				ИЗ
			|					втАдреса КАК втАдреса)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втОтветственныеСобственникиСФИО
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втАдреса.КодУслуги КАК КодУслуги,
			|	втАдреса.НачСальдо,
			|	втАдреса.СуммаНачисления,
			|	втАдреса.СуммаОплаты,
			|	втАдреса.НачДатаНачисления,
			|	втАдреса.КонДатаНачисления,
			|	втАдреса.ЛицевойСчет КАК ЛицевойСчет,
			|	втАдреса.КодЛС,
			|	втАдреса.НаименованиеЛС,
			|	втАдреса.ИдентификаторЛС,
			|	втАдреса.Квартира,
			|	втАдреса.Суффикс,
			|	втАдреса.Город,
			|	втАдреса.Улица,
			|	втАдреса.Дом,
			|	втАдреса.Корпус,
			|	ЕСТЬNULL(втОтветственныеСобственникиСФИО.НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента,
			|	ЕСТЬNULL(втОтветственныеСобственникиСФИО.ВладелецЛС, """") КАК ВладелецЛС
			|ПОМЕСТИТЬ втБезПлощадейИЖильцов
			|ИЗ
			|	втАдреса КАК втАдреса
			|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныеСобственникиСФИО КАК втОтветственныеСобственникиСФИО
			|		ПО втАдреса.ЛицевойСчет = втОтветственныеСобственникиСФИО.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втАдреса
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
			|ПОМЕСТИТЬ втЛС
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втБезПлощадейИЖильцов.ЛицевойСчет
			|				ИЗ
			|					втБезПлощадейИЖильцов КАК втБезПлощадейИЖильцов)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
			|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных
			|ПОМЕСТИТЬ втУчетКоличестваЖильцов
			|ИЗ
			|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЛС.ЛицевойСчет
			|				ИЗ
			|					втЛС КАК втЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КолвоЗарегитрированных
			|ПОМЕСТИТЬ втКоличестваИзРегистра
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|					(ВЫБРАТЬ
			|						втБезПлощадейИЖильцов.ЛицевойСчет
			|					ИЗ
			|						втБезПлощадейИЖильцов КАК втБезПлощадейИЖильцов)
			|				И ДатаИзменения <= &ДатаКонца) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
			|ГДЕ
			|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
			|
			|СГРУППИРОВАТЬ ПО
			|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втЛС.Помещение,
			|	втЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
			|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
			|		ИНАЧЕ ЕСТЬNULL(втКоличестваИзРегистра.КолвоЗарегитрированных, 0)
			|	КОНЕЦ КАК КолвоЖильцов
			|ПОМЕСТИТЬ втЗарегистрированные
			|ИЗ
			|	втЛС КАК втЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличестваИзРегистра КАК втКоличестваИзРегистра
			|		ПО втЛС.ЛицевойСчет = втКоличестваИзРегистра.ЛицевойСчет
			|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
			|		ПО втЛС.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втЛС
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втУчетКоличестваЖильцов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втКоличестваИзРегистра
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втЗарегистрированные.Помещение,
			|	втЗарегистрированные.ЛицевойСчет,
			|	втЗарегистрированные.КолвоЖильцов,
			|	ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
			|			ТОГДА ВЫБОР
			|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
			|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
			|					ИНАЧЕ 0
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДоляЛС
			|ПОМЕСТИТЬ втДоли
			|ИЗ
			|	втЗарегистрированные КАК втЗарегистрированные
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
			|				&ДатаКон,
			|				ЛицевойСчет В
			|					(ВЫБРАТЬ
			|						втБезПлощадейИЖильцов.ЛицевойСчет
			|					ИЗ
			|						втБезПлощадейИЖильцов КАК втБезПлощадейИЖильцов)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
			|		ПО втЗарегистрированные.ЛицевойСчет = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втЗарегистрированные
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втДоли.Помещение,
			|	втДоли.ЛицевойСчет,
			|	втДоли.КолвоЖильцов,
			|	втДоли.ДоляЛС * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК ОбщаяПлощадь
			|ПОМЕСТИТЬ втПлощади
			|ИЗ
			|	втДоли КАК втДоли
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
			|				&ДатаКон,
			|				Объект В
			|						(ВЫБРАТЬ
			|							втДоли.Помещение
			|						ИЗ
			|							втДоли КАК втДоли)
			|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
			|		ПО втДоли.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ втДоли
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втБезПлощадейИЖильцов.КодУслуги КАК КодУслуги,
			|	втБезПлощадейИЖильцов.НачСальдо,
			|	втБезПлощадейИЖильцов.СуммаНачисления,
			|	втБезПлощадейИЖильцов.СуммаОплаты,
			|	втБезПлощадейИЖильцов.НачДатаНачисления,
			|	втБезПлощадейИЖильцов.КонДатаНачисления,
			|	втБезПлощадейИЖильцов.ЛицевойСчет КАК ЛицевойСчет,
			|	втБезПлощадейИЖильцов.КодЛС,
			|	втБезПлощадейИЖильцов.НаименованиеЛС,
			|	втБезПлощадейИЖильцов.ИдентификаторЛС,
			|	втБезПлощадейИЖильцов.Квартира,
			|	втБезПлощадейИЖильцов.Суффикс,
			|	втБезПлощадейИЖильцов.Город,
			|	втБезПлощадейИЖильцов.Улица,
			|	втБезПлощадейИЖильцов.Дом,
			|	втБезПлощадейИЖильцов.Корпус,
			|	втБезПлощадейИЖильцов.ВладелецЛС,
			|	втБезПлощадейИЖильцов.НужныИнициалыКонтрагента,
			|	ЕСТЬNULL(втПлощади.КолвоЖильцов, 0) КАК КолвоЖильцов,
			|	ЕСТЬNULL(втПлощади.ОбщаяПлощадь, 0) КАК Площадь
			|ИЗ
			|	втБезПлощадейИЖильцов КАК втБезПлощадейИЖильцов
			|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
			|		ПО втБезПлощадейИЖильцов.ЛицевойСчет = втПлощади.ЛицевойСчет
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЛицевойСчет,
			|	КодУслуги";
			
			Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
			
		ИначеЕсли Объект.ВариантВыгрузки = 3 Тогда
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
			|			ТОГДА втКонтактнаяИнформация.Город
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") = """"
			|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Регион, """")
			|	КОНЕЦ КАК Город,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес.Код КАК Квартира,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес.Суффикс КАК Суффикс,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК Задолженность,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Код КАК КодЛС,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
			|ПОМЕСТИТЬ втЗадолженностиЛС
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|			&ДатаКон,
			|			Организация = &Организация
			|				И ЛицевойСчет В (&СписокЛС)" + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
			|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание + КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание + КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание КАК ПоказаниеСчетчика
			|ПОМЕСТИТЬ врТаблСч
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
			|			&ДатаКон,
			|			Объект В
			|				(ВЫБРАТЬ
			|					втЗадолженностиЛС.ЛицевойСчет
			|				ИЗ
			|					втЗадолженностиЛС КАК втЗадолженностиЛС)
			|				И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаКон, ) КАК КВП_ПоказанияСчетчиковСрезПоследних
			|		ПО КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врТаблСч.Объект,
			|	СУММА(ВЫБОР
			|			КОГДА врТаблСч.ВидУслуги = &УслугаХолВода
			|				ТОГДА врТаблСч.ПоказаниеСчетчика
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ПоказанияХВ,
			|	СУММА(ВЫБОР
			|			КОГДА врТаблСч.ВидУслуги = &УслугаГорВода
			|				ТОГДА врТаблСч.ПоказаниеСчетчика
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ПоказанияГВ,
			|	СУММА(ВЫБОР
			|			КОГДА врТаблСч.ВидУслуги = &УслугаЭлектричество
			|				ТОГДА врТаблСч.ПоказаниеСчетчика
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ПоказанияЭлектричества
			|ПОМЕСТИТЬ врТаблицаСчетчиков
			|ИЗ
			|	врТаблСч КАК врТаблСч
			|
			|СГРУППИРОВАТЬ ПО
			|	врТаблСч.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЗадолженностиЛС.ЛицевойСчет
			|				ИЗ
			|					втЗадолженностиЛС КАК втЗадолженностиЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втОтветственныеСобственникиСФИО
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втЗадолженностиЛС.ЛицевойСчет КАК ЛицевойСчет,
			|	втЗадолженностиЛС.Город,
			|	втЗадолженностиЛС.Улица,
			|	втЗадолженностиЛС.Дом,
			|	втЗадолженностиЛС.Корпус,
			|	втЗадолженностиЛС.Квартира,
			|	втЗадолженностиЛС.Суффикс,
			|	втЗадолженностиЛС.Задолженность,
			|	втЗадолженностиЛС.КодЛС,
			|	втЗадолженностиЛС.НаименованиеЛС КАК НаименованиеЛС,
			|	втЗадолженностиЛС.ИдентификаторЛС,
			|	ЕСТЬNULL(врТаблицаСчетчиков.ПоказанияХВ, 0) КАК ПоказаниеХВС,
			|	ЕСТЬNULL(врТаблицаСчетчиков.ПоказанияГВ, 0) КАК ПоказаниеГВС,
			|	ЕСТЬNULL(врТаблицаСчетчиков.ПоказанияЭлектричества, 0) КАК ПоказаниеЭлво,
			|	ЕСТЬNULL(втОтветственныеСобственникиСФИО.ВладелецЛС, """") КАК ВладелецЛС,
			|	ЕСТЬNULL(втОтветственныеСобственникиСФИО.НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента
			|ИЗ
			|	втЗадолженностиЛС КАК втЗадолженностиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаСчетчиков КАК врТаблицаСчетчиков
			|		ПО втЗадолженностиЛС.ЛицевойСчет = врТаблицаСчетчиков.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныеСобственникиСФИО КАК втОтветственныеСобственникиСФИО
			|		ПО втЗадолженностиЛС.ЛицевойСчет = втОтветственныеСобственникиСФИО.ЛицевойСчет
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеЛС";
			
			Запрос.УстановитьПараметр("ДатаКон",             Новый Граница(КонецДня(Объект.ДатаКон), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Дата",                КонецДня(Объект.ДатаКон));
			Запрос.УстановитьПараметр("Организация",         Объект.Организация);
			Запрос.УстановитьПараметр("УслугаХолВода",       Объект.УслугаХолВода);
			Запрос.УстановитьПараметр("УслугаГорВода",       Объект.УслугаГорВода);
			
			Запрос.УстановитьПараметр("УслугаЭлектричество", Объект.УслугаЭлектричество);
			Запрос.УстановитьПараметр("СокращатьФИО",        Объект.ВыводитьИнициалыФИО);
			
		ИначеЕсли Объект.ВариантВыгрузки = 4 Тогда
			
			Запрос.УстановитьПараметр("Дата",         Новый Граница(КонецДня(Объект.ДатаКон), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Организация",  Объект.Организация);
			Запрос.УстановитьПараметр("СокращатьФИО", Объект.ВыводитьИнициалыФИО);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес.Код КАК Квартира,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес.Суффикс КАК Суффикс,
			|	ВЫБОР
			|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
			|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Задолженность,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Код КАК КодЛС,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
			|ПОМЕСТИТЬ втЗадолженности
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И ЛицевойСчет В (&СписокЛС)" + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки";
			Запрос.Выполнить();
			
			ЗапросПоЗданиям = Новый Запрос;
			ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросПоЗданиям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втЗадолженности.ЛицевойСчет.Адрес.Владелец КАК Объект
			|ИЗ
			|	втЗадолженности КАК втЗадолженности
			|
			|СГРУППИРОВАТЬ ПО
			|	втЗадолженности.ЛицевойСчет.Адрес.Владелец";
			
			МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	втЗадолженности.ЛицевойСчет,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Регион, """") КАК Регион,
			|	ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """")
			|	КОНЕЦ КАК Город,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
			|	втЗадолженности.Квартира,
			|	втЗадолженности.Суффикс,
			|	втЗадолженности.Задолженность,
			|	втЗадолженности.КодЛС,
			|	втЗадолженности.НаименованиеЛС,
			|	втЗадолженности.ИдентификаторЛС
			|ПОМЕСТИТЬ втАдреса
			|ИЗ
			|	втЗадолженности КАК втЗадолженности
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО втЗадолженности.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&Дата,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЗадолженности.ЛицевойСчет
			|				ИЗ
			|					втЗадолженности КАК втЗадолженности)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втВладельцыЛС
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втАдреса.ЛицевойСчет,
			|	втАдреса.Регион,
			|	втАдреса.Город,
			|	втАдреса.Улица,
			|	втАдреса.Дом,
			|	втАдреса.Корпус,
			|	втАдреса.Квартира,
			|	втАдреса.Суффикс,
			|	втАдреса.Задолженность,
			|	втАдреса.КодЛС,
			|	втАдреса.НаименованиеЛС КАК НаименованиеЛС,
			|	втАдреса.ИдентификаторЛС,
			|	ЕСТЬNULL(втВладельцыЛС.ВладелецЛС, """") КАК ВладелецЛС,
			|	ЕСТЬNULL(втВладельцыЛС.НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента
			|ИЗ
			|	втАдреса КАК втАдреса
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВладельцыЛС КАК втВладельцыЛС
			|		ПО втАдреса.ЛицевойСчет = втВладельцыЛС.ЛицевойСчет
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеЛС";
			
		ИначеЕсли Объект.ВариантВыгрузки = 5 Или Объект.ВариантВыгрузки = 11 Тогда
			
			Запрос.УстановитьПараметр("Организация",       Объект.Организация);
			Запрос.УстановитьПараметр("ДатаНач",           Новый Граница(НачалоДня(Объект.ДатаНач), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("ДатаКон",           Новый Граница(КонецДня(Объект.ДатаКон), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("НачДатаНачисления", СтрЗаменить(Формат(Объект.ДатаНач, "ДЛФ=Д"), ".", "/"));
			Запрос.УстановитьПараметр("КонДатаНачисления", СтрЗаменить(Формат(Объект.ДатаКон, "ДЛФ=Д"), ".", "/"));
			Запрос.УстановитьПараметр("СокращатьФИО",      Объект.ВыводитьИнициалыФИО);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаНачисления.ЛицевойСчет,
			|	СУММА(ТаблицаНачисления.НачСальдо) КАК НачСальдо,
			|	СУММА(ТаблицаНачисления.СуммаНачисления) КАК СуммаНачисления
			|ПОМЕСТИТЬ втНачисленияССальдо
			|ИЗ
			|	(ВЫБРАТЬ
			|		КВП_Сальдо.СуммаНачисленияОстаток КАК НачСальдо,
			|		0 КАК СуммаНачисления,
			|		КВП_Сальдо.ЛицевойСчет КАК ЛицевойСчет
			|	ИЗ
			|		РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&ДатаНач, Организация = &Организация И ЛицевойСчет В (&СписокЛС)" + УсловиеОтбораУслуг + ") КАК КВП_Сальдо
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		0,
			|		УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот,
			|		УПЖКХ_НачисленияОбороты.ЛицевойСчет
			|	ИЗ
			|		РегистрНакопления.УПЖКХ_Начисления.Обороты(
			|				&ДатаНач,
			|				&ДатаКон,
			|				,
			|				Организация = &Организация
			|					И ЛицевойСчет В (&СписокЛС)" + УсловиеОтбораУслуг + "
			|					И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
			|					И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)) КАК УПЖКХ_НачисленияОбороты) КАК ТаблицаНачисления
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаНачисления.ЛицевойСчет";
			
			Запрос.Выполнить();
			
			ЗапросПоЗданиям = Новый Запрос;
			ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросПоЗданиям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втНачисленияССальдо.ЛицевойСчет.Адрес.Владелец КАК Объект
			|ИЗ
			|	втНачисленияССальдо КАК втНачисленияССальдо
			|
			|СГРУППИРОВАТЬ ПО
			|	втНачисленияССальдо.ЛицевойСчет.Адрес.Владелец";
			
			МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	втНачисленияССальдо.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """")
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Регион, """")
			|	КОНЕЦ КАК Город,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") = """"
			|			ТОГДА ""0""
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Дом, """")
			|	КОНЕЦ КАК Дом,
			|	втНачисленияССальдо.ЛицевойСчет.Адрес.Код КАК Квартира,
			|	втНачисленияССальдо.ЛицевойСчет.Адрес.Суффикс КАК Суффикс,
			|	втНачисленияССальдо.НачСальдо,
			|	втНачисленияССальдо.СуммаНачисления,
			|	&НачДатаНачисления,
			|	&КонДатаНачисления,
			|	втНачисленияССальдо.ЛицевойСчет.Код КАК КодЛС,
			|	втНачисленияССальдо.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	втНачисленияССальдо.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
			|ПОМЕСТИТЬ втАдреса
			|ИЗ
			|	втНачисленияССальдо КАК втНачисленияССальдо
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО втНачисленияССальдо.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втАдреса.ЛицевойСчет
			|				ИЗ
			|					втАдреса КАК втАдреса)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втВладельцыЛС
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втАдреса.ЛицевойСчет,
			|	втАдреса.Город,
			|	втАдреса.Улица,
			|	втАдреса.Дом,
			|	втАдреса.Квартира,
			|	втАдреса.Суффикс,
			|	втАдреса.НачСальдо,
			|	втАдреса.СуммаНачисления,
			|	втАдреса.НачДатаНачисления,
			|	втАдреса.КонДатаНачисления,
			|	втАдреса.КодЛС,
			|	втАдреса.НаименованиеЛС,
			|	втАдреса.ИдентификаторЛС,
			|	ЕСТЬNULL(втВладельцыЛС.ВладелецЛС, """") КАК ВладелецЛС,
			|	ЕСТЬNULL(втВладельцыЛС.НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента
			|ИЗ
			|	втАдреса КАК втАдреса
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВладельцыЛС КАК втВладельцыЛС
			|		ПО втАдреса.ЛицевойСчет = втВладельцыЛС.ЛицевойСчет";
			
		ИначеЕсли Объект.ВариантВыгрузки = 6 ИЛИ Объект.ВариантВыгрузки = 7 Тогда
			
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			Запрос.УстановитьПараметр("ДатаКон",     Новый Граница(КонецДня(Объект.ДатаКон), ВидГраницы.Включая));
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
			|ПОМЕСТИТЬ вт_ЛицевыеСчета
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
			
			Запрос.Выполнить();
			
			ЗапросПоЗданиям = Новый Запрос;
			ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросПоЗданиям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	вт_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Объект
			|ИЗ
			|	вт_ЛицевыеСчета КАК вт_ЛицевыеСчета
			|
			|СГРУППИРОВАТЬ ПО
			|	вт_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец";
			
			МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	вт_ЛицевыеСчета.ЛицевойСчет,
			|	вт_ЛицевыеСчета.ЛицевойСчет.Код КАК КодЛС,
			|	вт_ЛицевыеСчета.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	вт_ЛицевыеСчета.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
			|	вт_ЛицевыеСчета.ЛицевойСчет.Адрес.Код КАК Номер,
			|	вт_ЛицевыеСчета.ЛицевойСчет.Адрес.Суффикс КАК Суффикс,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
			|	вт_ЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения.НаименованиеКраткое КАК ВидПомещения,
			|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент КАК Контрагент,
			|	ЛОЖЬ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
			|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Долг
			|ИЗ
			|	вт_ЛицевыеСчета КАК вт_ЛицевыеСчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|				&ДатаКон,
			|				Организация = &Организация " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
			|		ПО вт_ЛицевыеСчета.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО вт_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
			|		ПО вт_ЛицевыеСчета.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
			|ГДЕ
			|	&Условие
			|
			|УПОРЯДОЧИТЬ ПО
			|	Улица,
			|	Дом,
			|	Корпус,
			|	Номер,
			|	Суффикс";
			
			ЗаменитьСтроку = ?(Объект.ВариантВыгрузки = 6, "КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ЗаменитьСтроку);
			
		ИначеЕсли Объект.ВариантВыгрузки = 8 ИЛИ Объект.ВариантВыгрузки = 9 Тогда
			
			Запрос.УстановитьПараметр("ДатаНач",      Новый Граница(НачалоДня(Объект.ДатаНач), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("ДатаКон",      Новый Граница(КонецДня(Объект.ДатаКон), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Дата",         КонецДня(Объект.ДатаКон));
			Запрос.УстановитьПараметр("Организация",  Объект.Организация);
			Запрос.УстановитьПараметр("СокращатьФИО", Объект.ВыводитьИнициалыФИО);
			
			ОтборУчитыватьПереплаты = ?(Не Объект.УчитыватьПереплаты И (Объект.ВариантВыгрузки = 8), "ГДЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток >= 0",
										?((Объект.ВариантВыгрузки = 9), "ГДЕ НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток = 0", ""));
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
			|ПОМЕСТИТЬ втДействующиеЛС
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес.Код КАК Квартира,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес.Суффикс КАК Суффикс,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК Задолженность,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Код КАК КодЛС,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
			|ПОМЕСТИТЬ втЗадолженности
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|			&ДатаКон,
			|			Организация = &Организация
			|				И ЛицевойСчет В
			|					(ВЫБРАТЬ
			|						втДействующиеЛС.ЛицевойСчет
			|					ИЗ
			|						втДействующиеЛС КАК втДействующиеЛС) " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки " + ОтборУчитыватьПереплаты;
			
			Запрос.Выполнить();
			
			ЗапросПоЗданиям = Новый Запрос;
			ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросПоЗданиям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втЗадолженности.ЛицевойСчет.Адрес.Владелец КАК Объект
			|ИЗ
			|	втЗадолженности КАК втЗадолженности
			|
			|СГРУППИРОВАТЬ ПО
			|	втЗадолженности.ЛицевойСчет.Адрес.Владелец";
			
			МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	втЗадолженности.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """")
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Регион, """")
			|	КОНЕЦ КАК Город,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
			|	втЗадолженности.Квартира,
			|	втЗадолженности.Суффикс,
			|	втЗадолженности.Задолженность,
			|	втЗадолженности.КодЛС,
			|	втЗадолженности.НаименованиеЛС,
			|	втЗадолженности.ИдентификаторЛС
			|ПОМЕСТИТЬ втАдреса
			|ИЗ
			|	втЗадолженности КАК втЗадолженности
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО втЗадолженности.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЗадолженности.ЛицевойСчет
			|				ИЗ
			|					втЗадолженности КАК втЗадолженности)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втВладельцыЛС
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втАдреса.ЛицевойСчет,
			|	втАдреса.Город,
			|	втАдреса.Улица,
			|	втАдреса.Дом,
			|	втАдреса.Корпус,
			|	втАдреса.Квартира,
			|	втАдреса.Суффикс,
			|	втАдреса.Задолженность,
			|	втАдреса.КодЛС,
			|	втАдреса.НаименованиеЛС КАК НаименованиеЛС,
			|	втАдреса.ИдентификаторЛС,
			|	ЕСТЬNULL(втВладельцыЛС.ВладелецЛС, """") КАК ВладелецЛС,
			|	ЕСТЬNULL(втВладельцыЛС.НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента
			|ПОМЕСТИТЬ втАдресаСВладельцамиЛС
			|ИЗ
			|	втАдреса КАК втАдреса
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВладельцыЛС КАК втВладельцыЛС
			|		ПО втАдреса.ЛицевойСчет = втВладельцыЛС.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
			|	ВЫБОР
			|		КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
			|			ТОГДА 1
			|		КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
			|			ТОГДА 2
			|		КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
			|			ТОГДА 3
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Тарифность,
			|	ВЫБОР
			|		КОГДА КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьДневноеПоказание,
			|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание, 0) КАК ДневноеПоказаниеСчетчика,
			|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание, 0) КАК НочноеПоказаниеСчетчика,
			|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание, 0) КАК ПиковоеПоказаниеСчетчика
			|ПОМЕСТИТЬ ПоказанияСчетчиков
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
			|			&ДатаКон,
			|			(Объект В
			|					(ВЫБРАТЬ
			|						втЗадолженности.ЛицевойСчет
			|					ИЗ
			|						втЗадолженности КАК втЗадолженности)
			|				ИЛИ Объект В
			|					(ВЫБРАТЬ
			|						втЗадолженности.ЛицевойСчет.Адрес
			|					ИЗ
			|						втЗадолженности КАК втЗадолженности))
			|				И ДатаИзменения <= &Дата
			|				И &УсловиеПоУслугам) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаКон, ) КАК КВП_ПоказанияСчетчиковСрезПоследних
			|		ПО КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
			|ГДЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втАдресаСВладельцамиЛС.ЛицевойСчет КАК ЛицевойСчет,
			|	втАдресаСВладельцамиЛС.Город КАК Город,
			|	втАдресаСВладельцамиЛС.Улица КАК Улица,
			|	втАдресаСВладельцамиЛС.Дом КАК Дом,
			|	втАдресаСВладельцамиЛС.Корпус КАК Корпус,
			|	втАдресаСВладельцамиЛС.Квартира КАК Квартира,
			|	втАдресаСВладельцамиЛС.Суффикс КАК Суффикс,
			|	втАдресаСВладельцамиЛС.Задолженность КАК Задолженность,
			|	втАдресаСВладельцамиЛС.КодЛС КАК КодЛС,
			|	втАдресаСВладельцамиЛС.НаименованиеЛС КАК НаименованиеЛС,
			|	втАдресаСВладельцамиЛС.ИдентификаторЛС КАК ИдентификаторЛС,
			|	втАдресаСВладельцамиЛС.ВладелецЛС КАК ВладелецЛС,
			|	втАдресаСВладельцамиЛС.НужныИнициалыКонтрагента КАК НужныИнициалыКонтрагента,
			|	ЕСТЬNULL(ПоказанияСчетчиков.Счетчик, ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)) КАК Счетчик,
			|	ЕСТЬNULL(ПоказанияСчетчиков.Тарифность, 0) КАК Тарифность,
			|	ЕСТЬNULL(ПоказанияСчетчиков.ЕстьДневноеПоказание, ЛОЖЬ) КАК ЕстьДневноеПоказание,
			|	ЕСТЬNULL(ПоказанияСчетчиков.ДневноеПоказаниеСчетчика, 0) КАК ДневноеПоказаниеСчетчика,
			|	ЕСТЬNULL(ПоказанияСчетчиков.НочноеПоказаниеСчетчика, 0) КАК НочноеПоказаниеСчетчика,
			|	ЕСТЬNULL(ПоказанияСчетчиков.ПиковоеПоказаниеСчетчика, 0) КАК ПиковоеПоказаниеСчетчика,
			|	ЕСТЬNULL(ПоказанияСчетчиков.Счетчик.ВидУслуги, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК ВидУслуги
			|ИЗ
			|	втАдресаСВладельцамиЛС КАК втАдресаСВладельцамиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказанияСчетчиков КАК ПоказанияСчетчиков
			|		ПО (втАдресаСВладельцамиЛС.ЛицевойСчет = ПоказанияСчетчиков.Объект
			|				ИЛИ втАдресаСВладельцамиЛС.ЛицевойСчет.Адрес = ПоказанияСчетчиков.Объект)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеЛС,
			|	ПоказанияСчетчиков.Счетчик.Код
			|ИТОГИ
			|	МАКСИМУМ(Город),
			|	МАКСИМУМ(Улица),
			|	МАКСИМУМ(Дом),
			|	МАКСИМУМ(Корпус),
			|	МАКСИМУМ(Квартира),
			|	МАКСИМУМ(Суффикс),
			|	МАКСИМУМ(Задолженность),
			|	МАКСИМУМ(КодЛС),
			|	МАКСИМУМ(НаименованиеЛС),
			|	МАКСИМУМ(ИдентификаторЛС),
			|	МАКСИМУМ(ВладелецЛС),
			|	МАКСИМУМ(НужныИнициалыКонтрагента)
			|ПО
			|	ЛицевойСчет";
			
			Если Объект.ВариантВыгрузки = 8 Тогда
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "Счетчик.ВидУслуги.ВидУслуги В (&ВидыУслуг)");
				
				СписокУслуг = Новый СписокЗначений;
				СписокУслуг.Добавить(Объект.УслугаХолВода);
				СписокУслуг.Добавить(Объект.УслугаГорВода);
				СписокУслуг.Добавить(Объект.УслугаЭлектричество);
				
				Запрос.УстановитьПараметр("ВидыУслуг", СписокУслуг);
				
			ИначеЕсли Объект.ВариантВыгрузки = 9 Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "ИСТИНА");
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантВыгрузки = 10 Тогда
			
			Запрос.УстановитьПараметр("ДатаКон",      Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Дата",         КонецДня(Объект.Дата));
			Запрос.УстановитьПараметр("Организация",  Объект.Организация);
			Запрос.УстановитьПараметр("ВидУслуги",    Объект.УслугаДляВывода);
			Запрос.УстановитьПараметр("СокращатьФИО", Объект.ВыводитьИнициалыФИО);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Код КАК КодЛС,
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК Квартира,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс КАК Суффикс
			|ПОМЕСТИТЬ ТаблицаЛС
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
			
			Запрос.Выполнить();
			
			ЗапросПоЗданиям = Новый Запрос;
			ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросПоЗданиям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаЛС.ЛицевойСчет.Адрес.Владелец КАК Объект
			|ИЗ
			|	ТаблицаЛС КАК ТаблицаЛС
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаЛС.ЛицевойСчет.Адрес.Владелец";
			
			МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаЛС.ЛицевойСчет,
			|	ТаблицаЛС.КодЛС,
			|	ТаблицаЛС.НаименованиеЛС,
			|	ТаблицаЛС.ИдентификаторЛС,
			|	ТаблицаЛС.Квартира,
			|	ТаблицаЛС.Суффикс,
			|	ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """")
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Регион, """")
			|	КОНЕЦ КАК Город,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус
			|ПОМЕСТИТЬ ТаблицаЛСсАдресами
			|ИЗ
			|	ТаблицаЛС КАК ТаблицаЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО ТаблицаЛС.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					ТаблицаЛС.ЛицевойСчет
			|				ИЗ
			|					ТаблицаЛС КАК ТаблицаЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втВладельцыЛС
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаЛСсАдресами.ЛицевойСчет,
			|	ТаблицаЛСсАдресами.КодЛС,
			|	ТаблицаЛСсАдресами.НаименованиеЛС,
			|	ТаблицаЛСсАдресами.ИдентификаторЛС,
			|	ТаблицаЛСсАдресами.Квартира,
			|	ТаблицаЛСсАдресами.Суффикс,
			|	ТаблицаЛСсАдресами.Город,
			|	ТаблицаЛСсАдресами.Улица,
			|	ТаблицаЛСсАдресами.Дом,
			|	ТаблицаЛСсАдресами.Корпус,
			|	ЕСТЬNULL(втВладельцыЛС.ВладелецЛС, """") КАК ВладелецЛС,
			|	ЕСТЬNULL(втВладельцыЛС.НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента
			|ПОМЕСТИТЬ ТаблицаЛСсАдресомИФИО
			|ИЗ
			|	ТаблицаЛСсАдресами КАК ТаблицаЛСсАдресами
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВладельцыЛС КАК втВладельцыЛС
			|		ПО ТаблицаЛСсАдресами.ЛицевойСчет = втВладельцыЛС.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаЛСсАдресомИФИО.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаЛСсАдресомИФИО.КодЛС,
			|	ТаблицаЛСсАдресомИФИО.НаименованиеЛС,
			|	ТаблицаЛСсАдресомИФИО.ИдентификаторЛС,
			|	ТаблицаЛСсАдресомИФИО.Город,
			|	ТаблицаЛСсАдресомИФИО.Улица,
			|	ТаблицаЛСсАдресомИФИО.Дом,
			|	ТаблицаЛСсАдресомИФИО.Корпус,
			|	ТаблицаЛСсАдресомИФИО.Квартира,
			|	ТаблицаЛСсАдресомИФИО.Суффикс,
			|	ТаблицаЛСсАдресомИФИО.ВладелецЛС,
			|	ТаблицаЛСсАдресомИФИО.НужныИнициалыКонтрагента,
			|	СУММА(ЕСТЬNULL(ВЫБОР
			|				КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
			|					ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
			|				ИНАЧЕ 0
			|			КОНЕЦ, 0)) КАК Пени,
			|	СУММА(ЕСТЬNULL(ВЫБОР
			|				КОГДА НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
			|					ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
			|				ИНАЧЕ 0
			|			КОНЕЦ, 0)) КАК Задолженность
			|ПОМЕСТИТЬ ТаблицаЛСБезСчетчиков
			|ИЗ
			|	ТаблицаЛСсАдресомИФИО КАК ТаблицаЛСсАдресомИФИО
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|				&ДатаКон,
			|				Организация = &Организация
			|					И ЛицевойСчет В
			|						(ВЫБРАТЬ
			|							ТаблицаЛС.ЛицевойСчет
			|						ИЗ
			|							ТаблицаЛС КАК ТаблицаЛС) " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
			|		ПО ТаблицаЛСсАдресомИФИО.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаЛСсАдресомИФИО.НаименованиеЛС,
			|	ТаблицаЛСсАдресомИФИО.Город,
			|	ТаблицаЛСсАдресомИФИО.Улица,
			|	ТаблицаЛСсАдресомИФИО.Корпус,
			|	ТаблицаЛСсАдресомИФИО.КодЛС,
			|	ТаблицаЛСсАдресомИФИО.Суффикс,
			|	ТаблицаЛСсАдресомИФИО.Дом,
			|	ТаблицаЛСсАдресомИФИО.ИдентификаторЛС,
			|	ТаблицаЛСсАдресомИФИО.ВладелецЛС,
			|	ТаблицаЛСсАдресомИФИО.НужныИнициалыКонтрагента,
			|	ТаблицаЛСсАдресомИФИО.ЛицевойСчет,
			|	ТаблицаЛСсАдресомИФИО.Квартира
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаЛСБезСчетчиков.ЛицевойСчет,
			|	ТаблицаЛСБезСчетчиков.КодЛС,
			|	ТаблицаЛСБезСчетчиков.НаименованиеЛС,
			|	ТаблицаЛСБезСчетчиков.ИдентификаторЛС,
			|	ТаблицаЛСБезСчетчиков.Город,
			|	ТаблицаЛСБезСчетчиков.Улица,
			|	ТаблицаЛСБезСчетчиков.Дом,
			|	ТаблицаЛСБезСчетчиков.Корпус,
			|	ТаблицаЛСБезСчетчиков.Квартира,
			|	ТаблицаЛСБезСчетчиков.Суффикс,
			|	ТаблицаЛСБезСчетчиков.ВладелецЛС,
			|	ТаблицаЛСБезСчетчиков.НужныИнициалыКонтрагента,
			|	ТаблицаЛСБезСчетчиков.Пени,
			|	ТаблицаЛСБезСчетчиков.Задолженность,
			|	ВложенныйЗапрос.Счетчик КАК Счетчик,
			|	ВложенныйЗапрос.ВидУслуги КАК ВидУслуги
			|ПОМЕСТИТЬ ТаблицаЛСЗакрепленныеСчетчики
			|ИЗ
			|	ТаблицаЛСБезСчетчиков КАК ТаблицаЛСБезСчетчиков
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
			|			КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
			|			КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект
			|		ИЗ
			|			РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
			|					&ДатаКон,
			|					(Объект В
			|							(ВЫБРАТЬ
			|								ТаблицаЛСБезСчетчиков.ЛицевойСчет
			|							ИЗ
			|								ТаблицаЛСБезСчетчиков КАК ТаблицаЛСБезСчетчиков)
			|						ИЛИ Объект В
			|							(ВЫБРАТЬ
			|								ТаблицаЛСБезСчетчиков.ЛицевойСчет.Адрес
			|							ИЗ
			|								ТаблицаЛСБезСчетчиков КАК ТаблицаЛСБезСчетчиков))
			|						И Счетчик.ВидУслуги = &ВидУслуги
			|						И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|		ГДЕ
			|			КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует) КАК ВложенныйЗапрос
			|		ПО (ТаблицаЛСБезСчетчиков.ЛицевойСчет = ВложенныйЗапрос.Объект
			|				ИЛИ ТаблицаЛСБезСчетчиков.ЛицевойСчет.Адрес = ВложенныйЗапрос.Объект)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаЛСЗакрепленныеСчетчики.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаЛСЗакрепленныеСчетчики.КодЛС,
			|	ТаблицаЛСЗакрепленныеСчетчики.НаименованиеЛС,
			|	ТаблицаЛСЗакрепленныеСчетчики.ИдентификаторЛС,
			|	ТаблицаЛСЗакрепленныеСчетчики.Город,
			|	ТаблицаЛСЗакрепленныеСчетчики.Улица,
			|	ТаблицаЛСЗакрепленныеСчетчики.Дом,
			|	ТаблицаЛСЗакрепленныеСчетчики.Корпус,
			|	ТаблицаЛСЗакрепленныеСчетчики.Квартира,
			|	ТаблицаЛСЗакрепленныеСчетчики.Суффикс,
			|	ТаблицаЛСЗакрепленныеСчетчики.ВладелецЛС,
			|	ТаблицаЛСЗакрепленныеСчетчики.НужныИнициалыКонтрагента,
			|	ТаблицаЛСЗакрепленныеСчетчики.Задолженность,
			|	ТаблицаЛСЗакрепленныеСчетчики.Пени,
			|	ТаблицаЛСЗакрепленныеСчетчики.Счетчик,
			|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание КАК ПоказаниеСчетчика,
			|	ТаблицаЛСЗакрепленныеСчетчики.ВидУслуги
			|ИЗ
			|	ТаблицаЛСЗакрепленныеСчетчики КАК ТаблицаЛСЗакрепленныеСчетчики
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
			|				&ДатаКон,
			|				Счетчик В
			|					(ВЫБРАТЬ
			|						ТаблицаЛСЗакрепленныеСчетчики.Счетчик
			|					ИЗ
			|						ТаблицаЛСЗакрепленныеСчетчики КАК ТаблицаЛСЗакрепленныеСчетчики)) КАК КВП_ПоказанияСчетчиковСрезПоследних
			|		ПО ТаблицаЛСЗакрепленныеСчетчики.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЛицевойСчет,
			|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.Код";
			
		ИначеЕсли Объект.ВариантВыгрузки = 12 Тогда
			
			Запрос.УстановитьПараметр("Организация",  Объект.Организация);
			Запрос.УстановитьПараметр("Дата",         Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("ДатаДолга",    Формат(Объект.Дата, "ДЛФ=Д"));
			Запрос.УстановитьПараметр("СокращатьФИО", Объект.ВыводитьИнициалыФИО);
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
			|ПОМЕСТИТЬ втДействующиеЛС
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, ЛицевойСчет В (&СписокЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
			|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаДолга
			|ПОМЕСТИТЬ втСальдо
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И ЛицевойСчет В
			|					(ВЫБРАТЬ
			|						втДействующиеЛС.ЛицевойСчет
			|					ИЗ
			|						втДействующиеЛС КАК втДействующиеЛС) " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
			|
			|СГРУППИРОВАТЬ ПО
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&Дата,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втСальдо.ЛицевойСчет
			|				ИЗ
			|					втСальдо КАК втСальдо)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втВладельцыЛС
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втСальдо.ЛицевойСчет,
			|	ЕСТЬNULL(втВладельцыЛС.ВладелецЛС, """") КАК ВладелецЛС,
			|	ЕСТЬNULL(НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента,
			|	&ДатаДолга,
			|	втСальдо.ЛицевойСчет.Код КАК КодЛС,
			|	втСальдо.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	втСальдо.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
			|	втСальдо.СуммаДолга
			|ИЗ
			|	втСальдо КАК втСальдо
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВладельцыЛС КАК втВладельцыЛС
			|		ПО втСальдо.ЛицевойСчет = втВладельцыЛС.ЛицевойСчет";
			
		ИначеЕсли Объект.ВариантВыгрузки = 13 Тогда
			
			Запрос.УстановитьПараметр("Дата",         Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
			Запрос.УстановитьПараметр("Организация",  Объект.Организация);
			Запрос.УстановитьПараметр("СокращатьФИО", Объект.ВыводитьИнициалыФИО);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Код КАК КодЛС,
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК Квартира,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс КАК Суффикс
			|ПОМЕСТИТЬ втДействующиеЛС
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, ЛицевойСчет В (&СписокЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК Задолженность,
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
			|ПОМЕСТИТЬ втСуммыЗадолженности
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|			&Дата,
			|			Организация = &Организация
			|				И ЛицевойСчет В
			|					(ВЫБРАТЬ
			|						втДействующиеЛС.ЛицевойСчет
			|					ИЗ
			|						втДействующиеЛС КАК втДействующиеЛС) " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втДействующиеЛС.ЛицевойСчет,
			|	втДействующиеЛС.Здание,
			|	втДействующиеЛС.Квартира,
			|	втДействующиеЛС.Суффикс,
			|	ЕСТЬNULL(втСуммыЗадолженности.Задолженность, 0) КАК Задолженность,
			|	втДействующиеЛС.КодЛС,
			|	втДействующиеЛС.НаименованиеЛС,
			|	втДействующиеЛС.ИдентификаторЛС
			|ПОМЕСТИТЬ втЗадолженности
			|ИЗ
			|	втДействующиеЛС КАК втДействующиеЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыЗадолженности КАК втСуммыЗадолженности
			|		ПО втДействующиеЛС.ЛицевойСчет = втСуммыЗадолженности.ЛицевойСчет";
			Запрос.Выполнить();
			
			ЗапросПоЗданиям = Новый Запрос;
			ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			ЗапросПоЗданиям.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втЗадолженности.Здание КАК Объект
			|ИЗ
			|	втЗадолженности КАК втЗадолженности
			|
			|СГРУППИРОВАТЬ ПО
			|	втЗадолженности.Здание";
			
			МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
			
			// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
			УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	втЗадолженности.ЛицевойСчет,
			|	втЗадолженности.Здание,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Регион, """") КАК Регион,
			|	ВЫБОР
			|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
			|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
			|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """")
			|	КОНЕЦ КАК Город,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
			|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
			|	втЗадолженности.Квартира,
			|	втЗадолженности.Суффикс,
			|	втЗадолженности.Задолженность,
			|	втЗадолженности.КодЛС,
			|	втЗадолженности.НаименованиеЛС,
			|	втЗадолженности.ИдентификаторЛС
			|ПОМЕСТИТЬ втАдреса
			|ИЗ
			|	втЗадолженности КАК втЗадолженности
			|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
			|		ПО втЗадолженности.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
			|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ПредставлениеОтветственногоВладельца
			|ПОМЕСТИТЬ втОтветсвенныеСобственникиЛС
			|ИЗ
			|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
			|			&Дата,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЗадолженности.ЛицевойСчет
			|				ИЗ
			|					втЗадолженности КАК втЗадолженности)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ПОМЕСТИТЬ втФИОФизЛиц
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	втОтветсвенныеСобственникиЛС.ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &СокращатьФИО И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
			|				И втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК НужныИнициалыКонтрагента,
			|	ВЫБОР
			|		КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|				И &СокращатьФИО
			|			ТОГДА ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Фамилия, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Имя, """"), 1, 1) + ""."" + ПОДСТРОКА(ЕСТЬNULL(втФИОФизЛиц.Отчество, """"), 1, 1) + "".""
			|		ИНАЧЕ втОтветсвенныеСобственникиЛС.ПредставлениеОтветственногоВладельца
			|	КОНЕЦ КАК ВладелецЛС
			|ПОМЕСТИТЬ втВладельцыЛС
			|ИЗ
			|	втОтветсвенныеСобственникиЛС КАК втОтветсвенныеСобственникиЛС
			|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
			|		ПО (ВЫБОР
			|				КОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
			|					ТОГДА втОтветсвенныеСобственникиЛС.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втАдреса.ЛицевойСчет,
			|	втАдреса.Здание,
			|	втАдреса.Регион,
			|	втАдреса.Город,
			|	втАдреса.Улица,
			|	втАдреса.Дом,
			|	втАдреса.Корпус,
			|	втАдреса.Квартира,
			|	втАдреса.Суффикс,
			|	втАдреса.Задолженность,
			|	втАдреса.КодЛС,
			|	втАдреса.НаименованиеЛС КАК НаименованиеЛС,
			|	втАдреса.ИдентификаторЛС,
			|	ЕСТЬNULL(втВладельцыЛС.ВладелецЛС, """") КАК ВладелецЛС,
			|	ЕСТЬNULL(НужныИнициалыКонтрагента, ЛОЖЬ) КАК НужныИнициалыКонтрагента
			|ИЗ
			|	втАдреса КАК втАдреса
			|		ЛЕВОЕ СОЕДИНЕНИЕ втВладельцыЛС КАК втВладельцыЛС
			|		ПО втАдреса.ЛицевойСчет = втВладельцыЛС.ЛицевойСчет
			|
			|УПОРЯДОЧИТЬ ПО
			|	НаименованиеЛС";
			
		КонецЕсли;
		
		Если ПервыйПроход Тогда
			Если Объект.ВариантВыгрузки = 8 ИЛИ Объект.ВариантВыгрузки = 9 Тогда
				ТаблицаСведений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Иначе
				ТаблицаСведений = Запрос.Выполнить().Выгрузить();
			КонецЕсли;
			ПервыйПроход = Ложь;
		Иначе
			Если Объект.ВариантВыгрузки = 8 ИЛИ Объект.ВариантВыгрузки = 9 Тогда
				РезультатВыгрузки = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				Для Каждого СтрокаВыгрузки ИЗ РезультатВыгрузки.Строки Цикл
					НоваяСтрока = ТаблицаСведений.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				КонецЦикла;
			Иначе
				РезультатВыгрузки = Запрос.Выполнить().Выгрузить();
				
				Для Каждого СтрокаВыгрузки ИЗ РезультатВыгрузки Цикл
					НоваяСтрока = ТаблицаСведений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции //ПолучитьТаблицуСведений()

&НаСервере
// Выгружает сведения по услугам капитального ремонта в файлы для Варианта 13.
//
Функция ВыгрузитьДанныеПоУслугамКапРемонтаВФайлыВариант13(ТаблицаСведений)
	
	СоответствиеДвоичныхДанных = Новый Соответствие;
	
	СтруктураАдреса     = Новый Структура;
	ПредставлениеАдреса = Новый Структура;
	
	ТаблицаЗданийИзСведений = ТаблицаСведений.Скопировать(, "Здание");
	ТаблицаЗданийИзСведений.Свернуть("Здание");
	СписокЗданий = ТаблицаЗданийИзСведений.ВыгрузитьКолонку("Здание");
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПериодПросмотра", КонецДня(Объект.Дата));
	СтруктураНастроек.Вставить("Организация",     Объект.Организация);
	СтруктураНастроек.Вставить("СписокЗданий",    СписокЗданий);
	
	ТаблицаРС = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(СтруктураНастроек, Истина);
	
	ТаблицаРСПоЗданиям = ТаблицаРС.Скопировать(, "Здание, РасчетныйСчет");
	ТаблицаРСПоЗданиям.Свернуть("РасчетныйСчет");
	
	Для Каждого ТекРС ИЗ ТаблицаРСПоЗданиям Цикл
		
		Если НЕ ПустаяСтрока(ТекРС.РасчетныйСчет) Тогда
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			Текст = Новый ТекстовыйДокумент;
			
			СтруктураОтбораРС = Новый Структура;
			СтруктураОтбораРС.Вставить("РасчетныйСчет", ТекРС.РасчетныйСчет);
			
			НайденныеЗданияПоТекущемуРС = ТаблицаРС.НайтиСтроки(СтруктураОтбораРС);
			
			Для Каждого ТекСтрокаЗдания ИЗ НайденныеЗданияПоТекущемуРС Цикл
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Здание", ТекСтрокаЗдания.Здание);
				
				СведенияПоЗданию = ТаблицаСведений.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого ТекСтрока Из СведенияПоЗданию Цикл
					
					СтрокаНомерЛС = ПолучитьНомерЛицевогоСчета(ТекСтрока);
					
					Если ТекСтрока.НужныИнициалыКонтрагента = ИСТИНА Тогда
						ЗаполнитьИнициалыФИОДляКонтрагентов(ТекСтрока.ВладелецЛС);
					КонецЕсли;
					
					Если Объект.НомерЛС = "НаименованиеЛС" Тогда
						СтрокаНомерЛС = ПодготовитьНомерЛСДляВывода(СтрокаНомерЛС);
					КонецЕсли;
					
					СтруктураАдреса.Вставить("Город",    ТекСтрока.Город);
					СтруктураАдреса.Вставить("Улица",    ТекСтрока.Улица);
					СтруктураАдреса.Вставить("Дом",      ТекСтрока.Дом + ?(ЗначениеЗаполнено(ТекСтрока.Корпус),
					Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус, ""));
					СтруктураАдреса.Вставить("Корпус",   "");
					СтруктураАдреса.Вставить("Квартира", Строка(ТекСтрока.Квартира) + Строка(ТекСтрока.Суффикс));
					
					ПредставлениеАдреса.Вставить("Адрес",                  "Город,Улица,Дом,Квартира");
					ПредставлениеАдреса.Вставить("ИспользоватьСокращение", Ложь);
					ПредставлениеАдреса.Вставить("Корпус",                 Объект.СимволРазделителяКорпусаЗдания);
					Адрес = ПолучитьПредставлениеАдреса(ТекСтрока.ЛицевойСчет.Адрес.Владелец, Объект.Дата, СтруктураАдреса, ПредставлениеАдреса);
					
					Текст.ДобавитьСтроку("" + СокрЛП(СтрокаНомерЛС) + ";"
											+ СокрЛП(ТекСтрока.ВладелецЛС) + ";"
											+ Адрес + ";"
											+ Формат(Объект.Дата, "ДФ=ММгг") + ";"
											+ Формат(ТекСтрока.Задолженность,"ЧДЦ=2; ЧРД=""" + Объект.СимволРазделителя + """; ЧН=; ЧГ=0"));
					
				КонецЦикла;
			КонецЦикла;
			
			Текст.Записать(ИмяВременногоФайла, ?(Объект.Кодировка = 1, КодировкаТекста.ANSI, КодировкаТекста.OEM));
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
			
			ИмяФайла = Объект.ИмяФайлаВыгрузки + "\" + СокрЛП(Объект.Организация.ИНН) + "_" + СокрЛП(ТекРС.РасчетныйСчет) + "_" + ПорядковыйНомерБЗ + "_" + ПостоянныйСимволОрганизации + Формат(Объект.Дата, "ДФ=дд") + ".txt";
			
			СоответствиеДвоичныхДанных.Вставить(ИмяФайла, ДвоичныеДанные);
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(СоответствиеДвоичныхДанных, Новый УникальныйИдентификатор);
	
	Возврат АдресФайлаВХранилище;
	
КонецФункции

&НаСервере
// Функция формирует строку выгрузки.
//
// Параметры:
//  Строка - проверяемое строчное значение.
//
Функция ПолучитьСтроку(Идентификатор, Улица, Дом, Корпус, Номер, Суффикс, Долг)
	
	Квартира = Строка(Номер) + Строка(Суффикс);
	
	Если ЗначениеЗаполнено(Дом) Тогда
		Дом = " д."+ Строка(Дом)
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Корпус) Тогда
		Корпус = " к."+ Корпус
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Квартира) Тогда
		Квартира = " кв "+ Квартира
	КонецЕсли;
	
	КолПр = 8 - СтрДлина(Объект.Константа);
	
	ДобПр = "";
	
	Пока НЕ КолПр <= 0 Цикл
		ДобПр = ДобПр + "0";
		КолПр = КолПр - 1;
	КонецЦикла;

	ТекКонстанта = ДобПр + Объект.Константа;

	КолПр = 4 - СтрДлина(Объект.Префикс);
	
	ДобПр = "";
	
	Пока НЕ КолПр <= 0 Цикл
		ДобПр = ДобПр + "0";
		КолПр = КолПр - 1;
	КонецЦикла;

	ТекПрефикс = ДобПр + Объект.Префикс;

	ДобПр = "";
	
	ИД = ТекПрефикс + Идентификатор;
	
	Если СтрДлина(ИД) > 20 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Идентификатор" + ИД + "содержит более 20 символов")
	Иначе
		КолПр = 20 - СтрДлина(ИД);
		
		Пока НЕ КолПр <= 0 Цикл
			ДобПр = " " + ДобПр;
			КолПр = КолПр - 1;
		КонецЦикла;

		ИД = ИД + ДобПр;
	КонецЕсли;

	Адрес = "" + Улица + Дом + Корпус + Квартира;
	
	ДобПр = "";
	
	КолПр = 40 - СтрДлина(Адрес);
	
	Пока НЕ КолПр <= 0 Цикл
		ДобПр = " " + ДобПр;
		КолПр = КолПр - 1;
	КонецЦикла;

	Адрес = Адрес + ДобПр;
	
	Строка = ТекКонстанта + ИД + Адрес + ПолучитьСумму(Долг);
	
	Возврат Строка;

КонецФункции

&НаСервере
// Функция получает сумму.
//
Функция ПолучитьСумму(Сумма)
	
	Сумма   = Формат(Сумма, "ЧС=-2");
	Символ  = Сред(Сумма, 1, 1);
	СуммаБП = "";
	ДобНул  = "";
	Поз     = 1;
	
	Пока НЕ Символ = "" Цикл
		Символ = Сред(Сумма, Поз, 1);
		Если НЕ Символ = " " Тогда
			СуммаБП = СуммаБП + Символ;
		КонецЕсли;
		Поз = Поз + 1;
	КонецЦикла;
	
	Длина = СтрДлина(СуммаБП);
	КолНул = 12-Длина;
	
	Пока НЕ КолНул = 0 Цикл
		ДобНул = ДобНул + "0";
		КолНул = КолНул - 1;
	КонецЦикла;
	
	СуммаБП = ДобНул + СуммаБП;
	
	Возврат СуммаБП;
	
КонецФункции // ПолучитьСумму()

&НаСервере
// Функция формирует штрихкод по сформированным данным.
Функция ПолучитьШтрихКод(ОбъектЛС, СуммаОплаты, ДатаШтрихкода = Неопределено)
	
	ДатаШтрихкода = ?(ЗначениеЗаполнено(ДатаШтрихкода),
						ДатаШтрихкода, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	СтруктураПараметры = Новый Структура();
	СтруктураПараметры.Вставить("Дата",        ДатаШтрихкода);
	СтруктураПараметры.Вставить("ЛицевойСчет", ОбъектЛС);
	СтруктураПараметры.Вставить("Сумма",       СуммаОплаты);
	
	СтруктураПараметры.Вставить("СпособФормированияШтрихкода", ?(мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет
																И Объект.СпособВыгрузкиДанныхКапРемонт = "по услугам кап. ремонта",
															   0,
															   1));
	ОргСведения = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, ДатаШтрихкода, "ИННЮЛ,БанкСчетНомер");
	
	СтруктураПараметры.Вставить("ИННОрганизации",           УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.ИННЮЛ,         12));
	СтруктураПараметры.Вставить("РасчетныйСчетОрганизации", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.БанкСчетНомер, 20));
	
	мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Объект.Организация);
	мНастройкиФормированияПДЖКХ.ВидШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный");
	
	ТекстКода = УПЖКХ_ПечатьКвитанцийСервер.СформироватьШтрихкод(СтруктураПараметры,
																 мНастройкиФормированияПДЖКХ);
	
	Возврат ТекстКода;
	
КонецФункции // ПолучитьШтрихКод()

&НаСервере
// Функция возвращает номер лицевого счета.
//
// Параметры:
//  ДанныеПоЛицевомуСчету - <Структура>
//                        - Структура для выбора данных.
//
Функция ПолучитьНомерЛицевогоСчета(ДанныеПоЛицевомуСчету)
	
	Если ЗначениеЗаполнено(Объект.НомерЛС) Тогда
		Возврат ДанныеПоЛицевомуСчету[Объект.НомерЛС];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьНомерЛицевогоСчета()

&НаСервере
// Функция проверяет строку.
//
// Параметры:
//  Строка - проверяемое строчное значение.
//
Функция ПроверкаСтроки(Строка, Поле)
	
	Для и1 = 1 По СтрДлина(Строка) Цикл
		ТекКодСимвола = КодСимвола(Строка, и1);
		Если ТекКодСимвола < 47 Или ТекКодСимвола > 58 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Ошибка! " + Поле + " может содержать только числа!");
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Функция возвращает строку заданной длины.
Функция СформироватьСтроку(ИсходнаяСтрока, ДлинаСтроки)
	
	СтрокаДляОбработки = Строка(ИсходнаяСтрока);
	Если СтрДлина(СтрокаДляОбработки) > ДлинаСтроки Тогда
		Результат = Сред(СтрокаДляОбработки, 0, ДлинаСтроки);
	ИначеЕсли СтрДлина(СтрокаДляОбработки) < ДлинаСтроки Тогда
		ПустаяСтрока = 
			СтрЗаменить(СтрЗаменить(СтрЗаменить(Формат(
				1, "ЧЦ=" + Строка(ДлинаСтроки - СтрДлина(СтрокаДляОбработки)) + "; ЧВН=;"), Символы.НПП, ""), "1", "0"), "0", " ");
		Результат = ПустаяСтрока + СтрокаДляОбработки;
	ИначеЕсли СтрДлина(СтрокаДляОбработки) = ДлинаСтроки Тогда
		Результат = СтрокаДляОбработки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СформироватьСтроку()

&НаСервере
// Убирает из наименования города сокращение.
//
Функция УбратьСокращениеГорода(Город)
	
	Найден = Истина;
	
	МассивСокращений = Новый Массив;
	МассивСокращений.Добавить("г");
	МассивСокращений.Добавить("г.");
	
	Для Каждого Элемент Из МассивСокращений Цикл
		
		Если Прав(СокрЛП(Город), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Город), СтрДлина(СокрЛП(Город)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Город), СтрДлина(СокрЛП(Город)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Город), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Город), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Город), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Город;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Получает инициалы ФИО контрагента из его полного наименования.
//
Процедура ЗаполнитьИнициалыФИОДляКонтрагентов(ВладелецЛС)
	
	МассивФИО = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьМассивФИО(ВладелецЛС);
	
	ВладелецЛС = Лев(МассивФИО[0], 1) + "." + Лев(МассивФИО[1], 1) + "." + Лев(МассивФИО[2], 1) + ".";
	
КонецПроцедуры

&НаСервере
// Убирает из наименования лицевого счета не цифровые символы.
// 
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет)
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

// Формирует строковое представление адреса согласно указанной настройке.
//
// Параметры:
//  Объект       – объект, для которого ищется адрес.
//  ВидАдреса    – вид адреса для получения адреса (если не указан
//                 параметр СтруктураАдреса).
//  Дата         – дата для получения адреса (если не указан параметр
//                 СтруктураАдреса) и получения параметров учетной политики
//                 (если не указан параметр ПарамУчетнойПолитики).
//  Организация  – организация для получения  параметров учетной политики
//                 (если не указан параметр ПарамУчетнойПолитики).
//  ПарамУчетнойПолитики – текущие настройки учетной политики.
//  СтруктураАдреса – Структура - адрес объекта.
//  ПредставлениеАдреса – Структура - описание представления адреса; доступные значения:
//                 "Адрес" - Строка - переопределяет порядок формирования адреса,
//                 заданный в учетной политике;
//                 "Корпус" - Строка - разделитель номера дома и корпуса;
//                 "ИспользоватьСокращение" - Булево - использовать ли сокращение
//                 элементов адреса (выделение непосредственно наименования).
//
// Возвращаемое значение:
//  Строка – представление адреса объекта согласно настройкам.
//
Функция ПолучитьПредставлениеАдреса(Объект, Дата, СтруктураАдреса, ПредставлениеАдреса)
	
	ВидАдреса = Перечисления.КВП_ВидыАдресов.Здание;
	
	ТекПредставление = "";
	
	Список = ПредставлениеАдреса.Адрес;
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			ИмяПараметра = СокрЛП(ИмяПараметра);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			СтрокаКонкатенации = ", ";
			
			Если ИмяПараметра = "Регион" ИЛИ ИмяПараметра = "Город" Тогда
				СтруктураАдреса.Вставить(ИмяПараметра, ?(ПредставлениеАдреса.ИспользоватьСокращение = Истина,
											НормализацияПолейАдреса(СтруктураАдреса[ИмяПараметра]), СтруктураАдреса[ИмяПараметра]));
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураАдреса.Корпус) Тогда
				СтруктураАдреса.Вставить("НомерДома", СтруктураАдреса.Дом + ПредставлениеАдреса.Корпус + СтруктураАдреса.Корпус);
			КонецЕсли;
			Если СтруктураАдреса.Свойство(ИмяПараметра) Тогда
				Дополнение = СокрЛП(СтруктураАдреса[ИмяПараметра]);
				Если Дополнение <> "" Тогда
					ТекПредставление = ТекПредставление + СтрокаКонкатенации + Дополнение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	ТекПредставление = СтрЗаменить(ТекПредставление, ", ", ",");
	
	Возврат ТекПредставление;
	
КонецФункции // ПолучитьПредставлениеАдреса()

&НаСервере
// Формирует файл сведений о задолженностях и начислениях по лицевым счетам формата ТХТ.
//
Функция СФормироватьФайл(ТаблицаСведений)
	
	ТаблицаСведений = ?(Объект.ВариантВыгрузки = 8 Или Объект.ВариантВыгрузки = 9,
						ТаблицаСведений.Строки, ТаблицаСведений);
	
	СуммаФайла = 0;
	Если Объект.ВариантВыгрузки = 1 Или Объект.ВариантВыгрузки = 5 Тогда
		СуммаФайла = ТаблицаСведений.Итог("НачСальдо");
	ИначеЕсли Объект.ВариантВыгрузки = 2 Тогда
		СуммаФайла = ТаблицаСведений.Итог("НачСальдо") + ТаблицаСведений.Итог("СуммаНачисления") 
				   - ТаблицаСведений.Итог("СуммаОплаты");
		ТаблицаСведений.Свернуть(
			"ВладелецЛС, НужныИнициалыКонтрагента, Город, Дом, Корпус, КодЛС, НаименованиеЛС, ИдентификаторЛС, Квартира, Суффикс, ЛицевойСчет, Улица",
			"НачСальдо, СуммаНачисления, СуммаОплаты");
	ИначеЕсли Объект.ВариантВыгрузки = 3 Или Объект.ВариантВыгрузки = 4 Или Объект.ВариантВыгрузки = 8 Тогда
		СуммаФайла = ТаблицаСведений.Итог("Задолженность");
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 9 ИЛИ Объект.ВариантВыгрузки = 10 Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("DBF");
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
		НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
		ИмяВременногоФайла = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 9 Тогда
		
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = ?(Объект.Кодировка = 1, КодировкаXBase.ANSI, КодировкаXBase.OEM);
		ФайлДБФ.Поля.Добавить("LS",      "S", 10);
		ФайлДБФ.Поля.Добавить("FIO",     "S", 40);
		ФайлДБФ.Поля.Добавить("ADRES",   "S", 40);
		ФайлДБФ.Поля.Добавить("KOPLATE", "N", 8, 2);
		ФайлДБФ.Поля.Добавить("ID1",     "S", 9);
		ФайлДБФ.Поля.Добавить("NAME1",   "S", 30);
		ФайлДБФ.Поля.Добавить("S1",      "N", 8, 2);
		ФайлДБФ.Поля.Добавить("ID2",     "S", 9);
		ФайлДБФ.Поля.Добавить("NAME2",   "S", 30);
		ФайлДБФ.Поля.Добавить("S2",      "N", 8, 2);
		ФайлДБФ.Поля.Добавить("ID3",     "S", 9);
		ФайлДБФ.Поля.Добавить("NAME3",   "S", 30);
		ФайлДБФ.Поля.Добавить("S3",      "N", 8, 2);
		ФайлДБФ.Поля.Добавить("ID4",     "S", 9);
		ФайлДБФ.Поля.Добавить("NAME4",   "S", 30);
		ФайлДБФ.Поля.Добавить("S4",      "N", 8, 2);
		ФайлДБФ.Поля.Добавить("ID5",     "S", 9);
		ФайлДБФ.Поля.Добавить("NAME5",   "S", 30);
		ФайлДБФ.Поля.Добавить("S5",      "N", 8, 2);
		
		ФайлДБФ.СоздатьФайл(ИмяВременногоФайла);
		ФайлДБФ.АвтоСохранение = Истина;
		
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 10 Тогда
		
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = ?(Объект.Кодировка = 1, КодировкаXBase.ANSI, КодировкаXBase.OEM);
		ФайлДБФ.Поля.Добавить("A_NLS",    "S", 25);
		ФайлДБФ.Поля.Добавить("A_FIO",    "S", 80);
		ФайлДБФ.Поля.Добавить("A_ADRES",  "S", 80);
		ФайлДБФ.Поля.Добавить("A_DATE",   "D");
		ФайлДБФ.Поля.Добавить("A_SUMM",   "N", 13, 0);
		ФайлДБФ.Поля.Добавить("A_SUMM2",  "N", 13, 0);
		ФайлДБФ.Поля.Добавить("A_SCH1",   "S", 10);
		ФайлДБФ.Поля.Добавить("A_SCH2",   "S", 10);
		ФайлДБФ.Поля.Добавить("A_NOTE",   "S", 200);
		ФайлДБФ.Поля.Добавить("B_DTRANS", "S", 20);
		ФайлДБФ.Поля.Добавить("B_NTRANS", "N", 4, 0);
		ФайлДБФ.Поля.Добавить("B_STRANS", "N", 13, 0);
		
		ФайлДБФ.СоздатьФайл(ИмяВременногоФайла);
		ФайлДБФ.АвтоСохранение = Истина;
		
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	
	Если Объект.ВариантВыгрузки = 6 Тогда
		Текст.ДобавитьСтроку(
		"<smpay_load_hdr><format_id>smpay_load_data</format_id><format_version>1</format_version><file_id>"
		+ Формат(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(),"ДФ = dd.MM.yyHH:mm:ss")
		+ "</file_id></smpay_load_hdr>");
	ИначеЕсли НЕ Объект.ВариантВыгрузки = 7 И НЕ Объект.ВариантВыгрузки = 11 И НЕ Объект.ВариантВыгрузки = 12 И НЕ Объект.ВариантВыгрузки = 13 Тогда
		Текст.ДобавитьСтроку("#FILESUM " + Формат(СуммаФайла, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0"));
		Текст.ДобавитьСтроку("#TYPE 7");
		Текст.ДобавитьСтроку("#SERVICE " + Объект.НомерУслугиБанка);
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 3 Или Объект.ВариантВыгрузки = 4 Тогда
		Текст.ДобавитьСтроку("#NOTE");
	ИначеЕсли Объект.ВариантВыгрузки = 1 Тогда
		Текст.ДобавитьСтроку("#NOTE " + СокрЛП(Объект.Примечание));
	ИначеЕсли Объект.ВариантВыгрузки = 2 Или Объект.ВариантВыгрузки = 8 И Не Объект.ВариантВыгрузки = 11 Тогда
		Текст.ДобавитьСтроку("#NOTE " + Формат(Объект.ДатаНач, "ДФ=dd.MM.yyyy") + " - "
							 +  Формат(Объект.ДатаКон, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = 7 Тогда
		
		МаксимальнаяДлинаАдресаПомещения = 0;
		
		ТаблицаСведений.Колонки.Добавить("АдресПомещения", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(300));
		ТаблицаСведений.Колонки.Добавить("СуммаДолга",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(18));
		
		Для каждого ТекСтрока Из ТаблицаСведений Цикл
			
			СуммаДолга = СтрЗаменить(Формат(ТекСтрока.Долг, "ЧДЦ=2; ЧРД=""" + Объект.СимволРазделителя + """"), Символы.НПП, "");
			СуммаДолга = ?(ЗначениеЗаполнено(СуммаДолга), СуммаДолга, "0" + Объект.СимволРазделителя + "00");
			
			ТекСтрока.СуммаДолга = СуммаДолга;
			
			ПредставлениеПомещения = ТекСтрока.ВидПомещения + ТекСтрока.Номер 
								   + ?(ЗначениеЗаполнено(ТекСтрока.Суффикс), ТекСтрока.Суффикс, "");
			ПредставлениеПомещения = ?(ЗначениеЗаполнено(ТекСтрока.Номер), ПредставлениеПомещения, ТекСтрока.Контрагент);
			
			АдресПомещения = ("ул." + НормализацияПолейАдреса(ТекСтрока.Улица) + " д." + ТекСтрока.Дом
									+ ?(ЗначениеЗаполнено(ТекСтрока.Корпус), Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус, "")
									+ " " + ПредставлениеПомещения);
			ТекСтрока.АдресПомещения = АдресПомещения;
			
			Если МаксимальнаяДлинаАдресаПомещения < СтрДлина(АдресПомещения) Тогда
				МаксимальнаяДлинаАдресаПомещения = СтрДлина(АдресПомещения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураАдреса     = Новый Структура();
	ПредставлениеАдреса = Новый Структура;
	
	Для Каждого ТекСтрока Из ТаблицаСведений Цикл
		
		СтрокаНомерЛС = ПолучитьНомерЛицевогоСчета(ТекСтрока);
		
		Если ТекСтрока.НужныИнициалыКонтрагента = ИСТИНА Тогда
			ЗаполнитьИнициалыФИОДляКонтрагентов(ТекСтрока.ВладелецЛС);
		КонецЕсли;
		
		Если Объект.ВариантВыгрузки = 1 Тогда
			
			Если НЕ ПустаяСтрока(ТекСтрока.Корпус) Тогда
				ТекДом = ТекСтрока.Дом + Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус;
			Иначе
				ТекДом = ТекСтрока.Дом;
			КонецЕсли;
			
			Текст.ДобавитьСтроку("" + СокрЛП(ТекСтрока.ВладелецЛС) + ";" + ?(Объект.НеВыгружатьГород, "", ?(ПустаяСтрока(СокрЛП(ТекСтрока.Город)), "", СокрЛП(ТекСтрока.Город) + ",")) + СокрЛП(ТекСтрока.Улица) + "," + ТекДом
								 + "," + Формат(ТекСтрока.Квартира, "ЧГ=0") + СокрЛП(ТекСтрока.Суффикс) + ";" + СокрЛП(СтрокаНомерЛС) + ";" 
								 + Формат(ТекСтрока.НачСальдо, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0") + ";" + СокрЛП(ТекСтрока.КодУслуги) 
								 + ";" + ТекСтрока.НачДатаНачисления + ";" + ТекСтрока.КонДатаНачисления + ";" 
								 + Объект.НомерДополнения + ":" + Формат(ТекСтрока.СуммаНачисления, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0") 
								 + ":" + Формат(ТекСтрока.Площадь, "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0") + ":" + Формат(ТекСтрока.КолвоЖильцов, "ЧН=; ЧГ=0"));
			
		ИначеЕсли Объект.ВариантВыгрузки = 2 Тогда
			
			Город = СтрЗаменить(ТекСтрока.Город, " г", "");
			Если НЕ ПустаяСтрока(ТекСтрока.Корпус) Тогда
				ТекДом = ТекСтрока.Дом + Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус;
			Иначе
				ТекДом = ТекСтрока.Дом;
			КонецЕсли;
			
			Текст.ДобавитьСтроку("" + СокрЛП(ТекСтрока.ВладелецЛС) + ";" + ?(ПустаяСтрока(СокрЛП(Город)), "", СокрЛП(Город) + ",") + СокрЛП(ТекСтрока.Улица) + "," + ТекДом 
								 + "," + ТекСтрока.Квартира + ТекСтрока.Суффикс + ";" + СокрЛП(СтрокаНомерЛС) + ";" 
								 + Формат(ТекСтрока.НачСальдо + ТекСтрока.СуммаНачисления - ТекСтрока.СуммаОплаты, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0")
								 + ?(Объект.ВыводитьДополнение, ";" + Формат(Объект.Дополнение, "ЧРГ=' '; ЧГ=0"), ""));
			
		ИначеЕсли Объект.ВариантВыгрузки = 3 Тогда
			
			ТекГород = НормализацияПолейАдреса(ТекСтрока.Город);
			ТекУлица = НормализацияПолейАдреса(ТекСтрока.Улица);
			
			Если НЕ ПустаяСтрока(ТекСтрока.Корпус) Тогда
				ТекДом = ТекСтрока.Дом + Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус;
			Иначе
				ТекДом = ТекСтрока.Дом;
			КонецЕсли;
			
			Текст.ДобавитьСтроку("" + СокрЛП(ТекСтрока.ВладелецЛС) + ";" + ?(ПустаяСтрока(ТекГород), "", ТекГород + ",") + ТекУлица + "," + ТекДом
									+ "," + ТекСтрока.Квартира + ТекСтрока.Суффикс + ";"
									+ СокрЛП(СтрокаНомерЛС) + ";" + Формат(ТекСтрока.Задолженность,"ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0")
									+ ";;;;" + Объект.НомерДополнения + ":" + Формат(Объект.ДатаКон, "ДЛФ=Д") + ":"
									+ Формат(ТекСтрока.ПоказаниеХВС,"ЧГ=0")+ ":"
									+ Формат(ТекСтрока.ПоказаниеГВС,"ЧГ=0") + ":" + Формат(ТекСтрока.ПоказаниеЭлво,"ЧГ=0"));
			
		ИначеЕсли Объект.ВариантВыгрузки = 4 Тогда
			
			СтруктураАдреса.Вставить("Регион",   ТекСтрока.Регион);
			СтруктураАдреса.Вставить("Город",    ТекСтрока.Город);
			СтруктураАдреса.Вставить("Улица",    ТекСтрока.Улица);
			СтруктураАдреса.Вставить("Дом",      ТекСтрока.Дом + ?(ЗначениеЗаполнено(ТекСтрока.Корпус),
																	Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус, ""));
			СтруктураАдреса.Вставить("Корпус",   "");
			СтруктураАдреса.Вставить("Квартира", Строка(ТекСтрока.Квартира) + Строка(ТекСтрока.Суффикс));
			
			ПредставлениеАдреса.Вставить("Адрес",                  "Регион,Город,Улица,Дом,Корпус,Квартира");
			ПредставлениеАдреса.Вставить("ИспользоватьСокращение", Ложь);
			ПредставлениеАдреса.Вставить("Корпус",                 Объект.СимволРазделителяКорпусаЗдания);
			Адрес = ПолучитьПредставлениеАдреса(ТекСтрока.ЛицевойСчет.Адрес.Владелец, Объект.ДатаКон, СтруктураАдреса, ПредставлениеАдреса);
			
			ТекстКода = ПолучитьШтрихКод(ТекСтрока.ЛицевойСчет, ТекСтрока.Задолженность, Объект.ДатаКон);
			
			Текст.ДобавитьСтроку("" + СокрЛП(ТекСтрока.ВладелецЛС) + ";"
									+ Адрес + ";"
									+ СокрЛП(СтрокаНомерЛС) + ";" 
									+ Формат(ТекСтрока.Задолженность,"ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0") 
									+ ";;;;" + Объект.НомерДополнения + ":" 
									+ ТекстКода);
			
		ИначеЕсли Объект.ВариантВыгрузки = 5 Тогда
			
			Текст.ДобавитьСтроку("" + СокрЛП(ТекСтрока.ВладелецЛС) + ";" + ?(ПустаяСтрока(СокрЛП(ТекСтрока.Город)), "", СокрЛП(ТекСтрока.Город) + ",") 
								 + СокрЛП(ТекСтрока.Улица) + "," + ТекСтрока.Дом + "," 
								 + ТекСтрока.Квартира + ТекСтрока.Суффикс + ";" + СокрЛП(СтрокаНомерЛС) + ";" 
								 + Формат(ТекСтрока.НачСальдо, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0") + ";" 
								 + ";" + ТекСтрока.НачДатаНачисления + ";" + ТекСтрока.КонДатаНачисления + ";" 
								 + Объект.НомерДополнения + ":" + Формат(ТекСтрока.СуммаНачисления, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0"));
			
		ИначеЕсли Объект.ВариантВыгрузки = 6 Тогда
			
			Если ПроверкаСтроки(Объект.Константа, "Константа")
			 ИЛИ ПроверкаСтроки(Объект.Префикс, "Префикс") Тогда
				Возврат -1;
			КонецЕсли;
			
			Текст.ДобавитьСтроку(ПолучитьСтроку(СокрЛП(СтрокаНомерЛС), 
												ТекСтрока.Улица, 
												ТекСтрока.Дом, 
												ТекСтрока.Корпус, 
												ТекСтрока.Номер, 
												ТекСтрока.Суффикс, 
												ТекСтрока.Долг));
												
		ИначеЕсли Объект.ВариантВыгрузки = 7 Тогда
			
			Текст.ДобавитьСтроку(СформироватьСтроку(СокрЛП(СтрокаНомерЛС), 20)
								 + "|" + СформироватьСтроку(ТекСтрока.АдресПомещения, МаксимальнаяДлинаАдресаПомещения)
								 + "|" + СформироватьСтроку(ТекСтрока.СуммаДолга, 18)
								 + "|" + Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
				
		ИначеЕсли Объект.ВариантВыгрузки = 8 Тогда
			
			Если ЗначениеЗаполнено(ТекСтрока.Задолженность) Тогда
				
				СтрокаПоказаний = "";
				Если НЕ Объект.НеВыгружатьДанныеПоПУ Тогда
					
					КоличествоЗаписейПоПУ = 1;
					Для Каждого Счетчик Из ТекСтрока.Строки Цикл 
						
						Если КоличествоЗаписейПоПУ > 8 Тогда
							Прервать;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(Счетчик.ВидУслуги) Тогда
							Продолжить;
						КонецЕсли;
						
						ЕстьДневноеПоказание = ?(Счетчик.Тарифность > 0, Истина, Ложь);
						ЕстьНочноеПоказание  = ?(Счетчик.Тарифность > 1, Истина, Ложь);
						ЕстьПиковоеПоказание = ?(Счетчик.Тарифность = 3, Истина, Ложь);
						
						Если Объект.УслугаХолВода = Счетчик.ВидУслуги.ВидУслуги Тогда
							СтрокаУслуга = "ХВС";
						ИначеЕсли Объект.УслугаГорВода = Счетчик.ВидУслуги.ВидУслуги Тогда
							СтрокаУслуга = "ГВС";
						ИначеЕсли Объект.УслугаЭлектричество = Счетчик.ВидУслуги.ВидУслуги Тогда
							СтрокаУслуга = "Э/ЭН";
						КонецЕсли;
						
						Если ЕстьДневноеПоказание Тогда
							СтрокаПоказаний = СтрокаПоказаний + Счетчик.Счетчик[Объект.НомерСчетчика] + ":" + СтрокаУслуга + ?(ЕстьНочноеПоказание ИЛИ ЕстьПиковоеПоказание, "(дн)", "")
											+ ":" + СтрЗаменить(Окр(Счетчик.ДневноеПоказаниеСчетчика, 0, 1), Символы.НПП, "") + ":";
						
							КоличествоЗаписейПоПУ = КоличествоЗаписейПоПУ + 1;
						КонецЕсли;
						
						Если ЕстьНочноеПоказание Тогда
							СтрокаПоказаний = СтрокаПоказаний + Счетчик.Счетчик[Объект.НомерСчетчика] + ":" + СтрокаУслуга + "(нч)" 
											+ ":" + СтрЗаменить(Окр(Счетчик.НочноеПоказаниеСчетчика, 0, 1), Символы.НПП, "") + ":";
						
							КоличествоЗаписейПоПУ = КоличествоЗаписейПоПУ + 1;
						КонецЕсли;
						
						Если ЕстьПиковоеПоказание Тогда
							СтрокаПоказаний = СтрокаПоказаний + Счетчик.Счетчик[Объект.НомерСчетчика] + ":" + СтрокаУслуга + "(пк)" 
											+ ":" + СтрЗаменить(Окр(Счетчик.ПиковоеПоказаниеСчетчика, 0, 1), Символы.НПП, "") + ":";
						
							КоличествоЗаписейПоПУ = КоличествоЗаписейПоПУ + 1;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ СтрДлина(СтрокаПоказаний) = 0 Тогда
						СтрокаПоказаний = Лев(СтрокаПоказаний, СтрДлина(СтрокаПоказаний) - 1);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.Задолженность) Тогда 
					ТекстКода = ПолучитьШтрихКод(ТекСтрока.ЛицевойСчет, ?(ТекСтрока.Задолженность < 0, 0, ТекСтрока.Задолженность), Объект.ДатаКон);
				Иначе
					ТекстКода = "";
				КонецЕсли;
				
				ТекДом      = Строка(ТекСтрока.Дом) + ?(ЗначениеЗаполнено(ТекСтрока.Корпус), Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус, "");
				ТекКвартира = Строка(ТекСтрока.Квартира) + ?(ЗначениеЗаполнено(ТекСтрока.Суффикс), ТекСтрока.Суффикс, "");
				
				ЧислоВхожденийСимвола = СтрЧислоВхождений(СтрокаПоказаний, ":");
				Если ЧислоВхожденийСимвола < 22 Тогда
					Для Счет = 0 По 22 - ЧислоВхожденийСимвола Цикл 
						СтрокаПоказаний = СтрокаПоказаний + ":";
					КонецЦикла;
				КонецЕсли;
				
				Текст.ДобавитьСтроку("" + СокрЛП(ТекСтрока.ВладелецЛС) + ";" + ?(ПустаяСтрока(СокрЛП(УбратьСокращениеГорода(ТекСтрока.Город))), "", СокрЛП(УбратьСокращениеГорода(ТекСтрока.Город)) + ",") + СокрЛП(ТекСтрока.Улица)
									 + "," + ТекДом + "," + ТекКвартира + ";" + СокрЛП(СтрокаНомерЛС) + ";" 
									 + Формат(ТекСтрока.Задолженность, "ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0") + ";;;;" 
									 + Объект.НомерЭкраннойФормы + ":" + ТекстКода + ":::" + СтрокаПоказаний);
					
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантВыгрузки = 9 Тогда
			
			ФайлДБФ.Добавить();
			ФайлДБФ.LS      = СокрЛП(СтрокаНомерЛС);
			ФайлДБФ.FIO     = СокрЛП(ТекСтрока.ВладелецЛС);
			ФайлДБФ.ADRES   = СокрЛП(ТекСтрока.Улица) + " д." + ТекСтрока.Дом 
							+ ?(ЗначениеЗаполнено(ТекСтрока.Корпус), " к." + ТекСтрока.Корпус, "") 
							+ " кв." + Строка(ТекСтрока.Квартира) + ТекСтрока.Суффикс;
			ФайлДБФ.KOPLATE = ТекСтрока.Задолженность;
			
			Счет = 1;
			Для Каждого ПоказанияСчетчиков Из ТекСтрока.Строки Цикл
				
				Если Не ПоказанияСчетчиков.ЕстьДневноеПоказание Тогда
					Продолжить;
				КонецЕсли;
				
				ФайлДБФ["ID"   + Строка(Счет)] = Прав(ПоказанияСчетчиков.Счетчик[Объект.НомерСчетчика], 9);
				ФайлДБФ["NAME" + Строка(Счет)] = ПоказанияСчетчиков.Счетчик;
				ФайлДБФ["S"    + Строка(Счет)] = ПоказанияСчетчиков.ДневноеПоказаниеСчетчика;
				
				Если Счет = 5 Тогда
					Прервать;
				КонецЕсли;
				
				Счет = Счет + 1;
				
			КонецЦикла;
						
		ИначеЕсли Объект.ВариантВыгрузки = 10 Тогда
			
			ФайлДБФ.Добавить();
			ФайлДБФ.A_NLS   = СокрЛП(СтрокаНомерЛС);
			ФайлДБФ.A_FIO   = СокрЛП(ТекСтрока.ВладелецЛС);
			ФайлДБФ.A_ADRES = ?(ЗначениеЗаполнено(ТекСтрока.Город), ТекСтрока.Город + ", ", "") + ТекСтрока.Улица + ", д." + ТекСтрока.Дом 
							+ ?(ЗначениеЗаполнено(ТекСтрока.Корпус), Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус, "")
							+ ?(ЗначениеЗаполнено(ТекСтрока.Квартира), ", кв."   + ТекСтрока.Квартира, "")
							+ ?(ЗначениеЗаполнено(ТекСтрока.Суффикс), ТекСтрока.Суффикс, "");
			
			ФайлДБФ.A_SUMM  = ТекСтрока.Задолженность * 100;
			ФайлДБФ.A_SUMM2 = ТекСтрока.Пени * 100;
			ФайлДБФ.A_DATE  = КонецМесяца(Объект.Дата);
			ФайлДБФ.A_SCH2  = ТекСтрока.ПоказаниеСчетчика;
			
		ИначеЕсли Объект.ВариантВыгрузки = 11 Тогда
			
			Если ПустаяСтрока(СокрЛП(СтрокаНомерЛС)) Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаНачисления = СокрЛП(ТекСтрока.СуммаНачисления);
			СуммаНачисления = СтрЗаменить(СтрЗаменить(СуммаНачисления, Символы.НПП, ""), " ", "");
			
			КонДатаНачисления = СокрЛП(ТекСтрока.КонДатаНачисления);
			КонДатаНачисления = СтрЗаменить(КонДатаНачисления, "/", ".");
			
			Если Объект.Разделитель = "ТАБ" Тогда
				текРазделитель = Символ(9);
			Иначе
				текРазделитель = СокрЛП(Объект.Разделитель);
			КонецЕсли;
			
			Если Объект.ВыводитьКонечнуюДату Тогда
				Текст.ДобавитьСтроку(СокрЛП(СтрокаНомерЛС)
								   + текРазделитель + ТекСтрока.ВладелецЛС
								   + текРазделитель + СуммаНачисления
								   + текРазделитель + КонДатаНачисления);
			Иначе
				Текст.ДобавитьСтроку(СокрЛП(СтрокаНомерЛС)
								   + текРазделитель + ТекСтрока.ВладелецЛС
								   + текРазделитель + СуммаНачисления);
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантВыгрузки = 12 Тогда
			
			ДатаДолга = СокрЛП(ТекСтрока.ДатаДолга);
			ДатаДолга = СтрЗаменить(ДатаДолга, "/", ".");
			
			Если Объект.Разделитель = "ТАБ" Тогда
				текРазделитель = Символ(9);
			Иначе
				текРазделитель = СокрЛП(Объект.Разделитель);
			КонецЕсли;
			
			Если Объект.ВыводитьКонечнуюДату Тогда
				Текст.ДобавитьСтроку(СокрЛП(СтрокаНомерЛС)
							   + текРазделитель + ТекСтрока.ВладелецЛС
							   + текРазделитель + ТекСтрока.СуммаДолга
							   + текРазделитель + ДатаДолга
							   + текРазделитель);
			Иначе
				Текст.ДобавитьСтроку(СокрЛП(СтрокаНомерЛС)
							   + текРазделитель + ТекСтрока.ВладелецЛС
							   + текРазделитель + ТекСтрока.СуммаДолга
							   + текРазделитель);
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантВыгрузки = 13 Тогда
			
			Если Объект.НомерЛС = "НаименованиеЛС" Тогда
				СтрокаНомерЛС = ПодготовитьНомерЛСДляВывода(СтрокаНомерЛС);
			КонецЕсли;
			
			СтруктураАдреса.Вставить("Город",    ТекСтрока.Город);
			СтруктураАдреса.Вставить("Улица",    ТекСтрока.Улица);
			СтруктураАдреса.Вставить("Дом",      ТекСтрока.Дом + ?(ЗначениеЗаполнено(ТекСтрока.Корпус),
																	Объект.СимволРазделителяКорпусаЗдания + ТекСтрока.Корпус, ""));
			СтруктураАдреса.Вставить("Корпус",   "");
			СтруктураАдреса.Вставить("Квартира", Строка(ТекСтрока.Квартира) + Строка(ТекСтрока.Суффикс));
			
			ПредставлениеАдреса.Вставить("Адрес",                  "Город,Улица,Дом,Квартира");
			ПредставлениеАдреса.Вставить("ИспользоватьСокращение", Ложь);
			ПредставлениеАдреса.Вставить("Корпус",                 Объект.СимволРазделителяКорпусаЗдания);
			Адрес = ПолучитьПредставлениеАдреса(ТекСтрока.ЛицевойСчет.Адрес.Владелец, Объект.Дата, СтруктураАдреса, ПредставлениеАдреса);
			
			Текст.ДобавитьСтроку("" + СокрЛП(СтрокаНомерЛС) + ";"
									+ СокрЛП(ТекСтрока.ВладелецЛС) + ";"
									+ Адрес + ";"
									+ Формат(Объект.Дата, "ДФ=ММгг") + ";"
									+ Формат(ТекСтрока.Задолженность,"ЧДЦ=2; ЧРД=""" + Объект.СимволРазделителя + """; ЧН=; ЧГ=0"));
			
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ВариантВыгрузки = 9 ИЛИ Объект.ВариантВыгрузки = 10 Тогда
		ФайлДБФ.ЗакрытьФайл();
	Иначе
		Текст.Записать(ИмяВременногоФайла, ?(Объект.Кодировка = 1, КодировкаТекста.ANSI, КодировкаТекста.OEM));
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	Возврат АдресФайлаВХранилище;
	
КонецФункции //СФормироватьФайл()

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОбработкиПоКапремонту()
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	
КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

&НаСервере
// Обновляет строку с представлением услуг капитального ремонта.
//
Процедура ОбновитьСписокУслугКапРемонт()
	
	СтрокаСоСпискомУслуг = "";
	
	Если ТипЗнч(мСтруктураНастроекКапРемонта.СписокУслуг) = Тип("СписокЗначений") Тогда
		Для Каждого ТекУслуга ИЗ мСтруктураНастроекКапРемонта.СписокУслуг Цикл
			СтрокаСоСпискомУслуг = СтрокаСоСпискомУслуг + ?(ПустаяСтрока(СтрокаСоСпискомУслуг), "", Символы.ПС) + Символы.Таб + ТекУслуга;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.НадписьСписокУслугКапРемонт.Высота    = мСтруктураНастроекКапРемонта.СписокУслуг.Количество();
	Элементы.НадписьСписокУслугКапРемонт.Заголовок = СтрокаСоСпискомУслуг;
	
КонецПроцедуры // ОбновитьСписокУслугКапРемонт()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()

&НаСервере
// Предназначена для оформления элементов формы, расположенных на странице "Кап.ремонт".
//
Процедура ОбновитьСтатусВеденияУчетаПоКапремонту()
	
	СтруктураОформления = Справочники.УПЖКХ_НастройкиУчетаКапремонта.СформироватьСтруктуруОформленияПолейФормы(мСтруктураНастроекКапРемонта);
	Элементы.НадписьВедениеКапремонта.Заголовок  = СтруктураОформления.СтатусВеденияУчета;
	Элементы.КнопкаЭлементСправочника.Заголовок = СтруктураОформления.НадписьКнопки;
	Элементы.НадписьВедениеКапремонта.ЦветТекста = СтруктураОформления.ЦветаСтатуса;
	
КонецПроцедуры // ОбновитьСтатусВеденияУчетаПоКапремонту()

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.НеЗаполнятьНастройкиПриОткрытии = Ложь;
	
	СписокВыбораСпособаВыгрузкиДанныхОсновной.Добавить("по всем услугам", "по всем услугам");
	СписокВыбораСпособаВыгрузкиДанныхОсновной.Добавить("по указанным услугам", "по указанным услугам");
	
	СписокВыбораСпособаВыгрузкиДанныхСУслугамиКапРемонта.Добавить("по всем услугам", "по всем услугам");
	СписокВыбораСпособаВыгрузкиДанныхСУслугамиКапРемонта.Добавить("по услугам, отличным от кап. ремонта", "по услугам, отличным от кап. ремонта");
	СписокВыбораСпособаВыгрузкиДанныхСУслугамиКапРемонта.Добавить("по услугам кап. ремонта", "по услугам кап. ремонта");
	СписокВыбораСпособаВыгрузкиДанныхСУслугамиКапРемонта.Добавить("по указанным услугам", "по указанным услугам");
	
	ИнициализацияРеквизитов();
	
	ВосстановитьОбязательныйНомерДополнения();
	
	ЗаполнитьРеквизитыОбработкиПоКапремонту();
	
	ОбновитьСтатусВеденияУчетаПоКапремонту();
	
	УстановитьДоступность();
	
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		Если Объект.СпособВыгрузкиДанныхКапРемонт = "по основным услугам" Тогда
			Объект.СпособВыгрузкиДанныхКапРемонт = "по услугам, отличным от кап. ремонта";
		ИначеЕсли Объект.СпособВыгрузкиДанныхКапРемонт = "по услугам капитального ремонта" Тогда
			Объект.СпособВыгрузкиДанныхКапРемонт = "по услугам кап. ремонта";
		КонецЕсли;
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РедактироватьСвойстваЭлементовФормы();
	
КонецПроцедуры

// Обработчик события "ОбработкаВыбора" формы.
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КВП_Здания")) Тогда
		Если Объект.СписокОбъектов.НайтиСтроки(Новый Структура("Объект", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрокаТЧ = Объект.СписокОбъектов.Добавить();
			НоваяСтрокаТЧ.Объект = ВыбранноеЗначение;
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Объект уже добавлен в табличную часть.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Объект.Организация Тогда
		ЗаполнитьРеквизитыОбработкиПоКапремонту();
		ОбновитьСтатусВеденияУчетаПоКапремонту();
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВХранилище();
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Выводить дополнение".
//
Процедура ВыводитьДополнениеПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ВыводитьДополнениеПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыОбработкиПоКапремонту();
	ОбновитьСтатусВеденияУчетаПоКапремонту();
	УстановитьДоступность();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" элемента ВариантВыгрузки.
//
Процедура ВариантВыгрузкиПриИзменении(Элемент)
	
	ВосстановитьОбязательныйНомерДополнения();
	
	УстановитьДоступность();
	
	РедактироватьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" кнопки "КнопкаЭлементСправочника".
//
Процедура КнопкаЭлементСправочникаНажатие(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Объект.Организация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Объект.Организация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			Оповещение = Новый ОписаниеОповещения("КнопкаЭлементСправочникаНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КнопкаЭлементСправочникаНажатие()

&НаКлиенте
// Процедура - обработчик результата опроса команды "НадписьЭлементСправочника".
//
Процедура КнопкаЭлементСправочникаНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаЭлементСправочникаНажатиеЗавершение()

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "Выгрузить по всем объектам".
//
Процедура ВыгрузитьПоВсемПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" элемента ИмяФайлаВыгрузки.
//
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораКаталога.Заголовок               = "Выберите каталог";
	ДиалогВыбораКаталога.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораКаталога.ИндексФильтра           = 0;
	ДиалогВыбораКаталога.Каталог                 = Объект.ИмяФайлаВыгрузки;
	
	ДиалогВыбораКаталога.Показать(Новый ОписаниеОповещения("ИмяФайлаВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Обрабатывает результат выбора каталога.
&НаКлиенте
Процедура ИмяФайлаВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныеФайлы = Неопределено Тогда
		Объект.ИмяФайлаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" элемента ИмяФайлаВыгрузки.
//
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаВыгрузкиОткрытиеЗавершение", ЭтотОбъект), Объект.ИмяФайлаВыгрузки);
	
КонецПроцедуры

// Обрабатывает завершение процедуры открытия файла с использованием ассоциированного с ним приложения.
&НаКлиенте
Процедура ИмяФайлаВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия надписи "НадписьПоказатьОписание".
//
Процедура НадписьПоказатьОписаниеНажатие(Элемент)
	
	ОписаниеВарианта = ПолучитьОписаниеВариантаВыгрузки();
	
	ПоказатьПредупреждение( , ОписаниеВарианта, , "Описание: вариант " + Объект.ВариантВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" элемента ОбязательныйНомерДополнения.
//
Процедура НомерДополненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Для Каждого СтрокаТЗОбязательныхНомеровДополнения Из ТЗОбязательныхНомеровДополнения Цикл 
		Если СтрокаТЗОбязательныхНомеровДополнения.ВариантВыгрузки = Объект.ВариантВыгрузки Тогда 
			ТЗОбязательныхНомеровДополнения.Удалить(СтрокаТЗОбязательныхНомеровДополнения);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВосстановитьОбязательныйНомерДополнения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" элемента ОбязательныйНомерДополнения.
//
Процедура НомерДополненияПриИзменении(Элемент)
	
	СтрокаТЗОбязательныхНомеровДополнения = 
		ТЗОбязательныхНомеровДополнения.НайтиСтроки(Новый Структура("ВариантВыгрузки", Объект.ВариантВыгрузки));
	Если СтрокаТЗОбязательныхНомеровДополнения.Количество() = 0 Тогда 
		СтрокаТЗОбязательныхНомеровДополнения = ТЗОбязательныхНомеровДополнения.Добавить();
		СтрокаТЗОбязательныхНомеровДополнения.ВариантВыгрузки = Объект.ВариантВыгрузки;
		СтрокаТЗОбязательныхНомеровДополнения.НомерДополнения = Объект.НомерДополнения;
	Иначе
		СтрокаТЗОбязательныхНомеровДополнения[0].НомерДополнения = Объект.НомерДополнения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "РасчетныйСчет".
//
Процедура РассчетныйСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора",
				 ,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатВыбораРС", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике команды "РассчетныйСчетНачалоВыбора()".
Процедура ОбработатьРезультатВыбораРС(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		Объект.РассчетныйСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(РезультатВыбора, "НомерСчета");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораЗаполнить()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Выгружать данные".
//
Процедура СпособВыгрузкиДанныхКапРемонтПриИзменении(Элемент)
	
	Элементы.Услуги.Видимость = (Объект.СпособВыгрузкиДанныхКапРемонт = "по указанным услугам");
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

#Область ОбработчикиСобытийКомандныхПанелей

&НаКлиенте
// Обработчик нажатия кнопки "Выгрузить сведения" командной панели.
//
Процедура ВыгрузитьСведения(Команда)
	
	ОчиститьСообщения();
	
	ПроверитьЗаполнениеРеквизитов(Новый ОписаниеОповещения("ВыгрузитьСведенияЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Обрабатывает результат проверки заполнения реквизитов.
&НаКлиенте
Процедура ВыгрузитьСведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = "";
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Начало выгрузки данных.");
	
	АдресФайлаВХранилище = ВыгрузитьСведенияВФайл(ИмяФайла);
	Если АдресФайлаВХранилище <> -1 Тогда 
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		Если Не Объект.ВариантВыгрузки = 11 Тогда
			Если Объект.ВариантВыгрузки = 7 Тогда 
				ДанныеФайла.Записать(ИмяФайла + "\DB"
				+ Формат(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), "ДФ=ddMMyy") + ".VEK");
			ИначеЕсли Объект.ВариантВыгрузки = 13 И Объект.СпособВыгрузкиДанныхКапРемонт = "по услугам кап. ремонта" Тогда
				Для Каждого СтрокаСоответствия ИЗ ДанныеФайла Цикл
					ФайлЗаписи = СтрокаСоответствия.Значение;
					ФайлЗаписи.Записать(СтрокаСоответствия.Ключ);
				КонецЦикла;
			Иначе
				ДанныеФайла.Записать(ИмяФайла);
			КонецЕсли;
		Иначе
			ИмяФайлаАрхива = Объект.ИмяФайлаВыгрузки + "\" + Объект.КодОСБ + Объект.НомерДоговора + ".zip";
			ДанныеФайла.Записать(ИмяФайла);
			ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайлаАрхива);
			ЗаписьZIP.Добавить(ИмяФайла);
			ЗаписьZIP.Записать();
			НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлыЗавершение", ЭтотОбъект), ИмяФайла);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьСведенияЗавершениеФрагмент();
	
КонецПроцедуры

// Обрабатывает результат удаления файла.
&НаКлиенте
Процедура УдалитьФайлыЗавершение(ДополнительныеПараметры) Экспорт
	
	ВыгрузитьСведенияЗавершениеФрагмент();
	
КонецПроцедуры

// Обрабатывает завершение выгрузки сведений.
&НаКлиенте
Процедура ВыгрузитьСведенияЗавершениеФрагмент()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "ЗаполнитьПоОтбору" командной панели таблицы распределения.
//
Процедура КоманднаяПанельСписокОбъектовЗаполнитьИспользоватьОтбор(Команда)
	
	Если Не Объект.СписокОбъектов.Количество() = 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТаблицу", ЭтаФорма),
					   "Список объектов будет очищен." + Символы.ПС + "Продолжить?",
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораОбъектов();
	
КонецПроцедуры // КоманднаяПанельСписокОбъектовЗаполнитьИспользоватьОтбор()

&НаКлиенте
// Обработать результат вопроса, вызванного в процедуре "КоманднаяПанельСписокОбъектовЗаполнитьИспользоватьОтбор()".
Процедура ОбработатьРезультатВопросаОчиститьТаблицу(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СписокОбъектов.Очистить();
	
	ОткрытьФормуВыбораОбъектов();
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТаблицу()

&НаКлиенте
// Процедура открывает форму выбора объектов.
Процедура ОткрытьФормуВыбораОбъектов()
	
	// Вызываем обработку заполнения.
	СтруктураПараметровОтбора = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	СтруктураПараметровОтбора.Вставить("НачПериодЛС",      Объект.ДатаНач);
	СтруктураПараметровОтбора.Вставить("КонПериодЛС",      Объект.ДатаКон);
	СтруктураПараметровОтбора.Вставить("НазначениеУслуги", Истина);
	СтруктураПараметровОтбора.Вставить("ТипОбъекта",       "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта",   "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("Организация",      Объект.Организация);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма",
				 СтруктураПараметровОтбора,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборОбъектов", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуВыбораОбъектов()

&НаКлиенте
// Обработчик выбора объектов, вызванного в процедуре-обработчике
// команды "КоманднаяПанельСписокОбъектовЗаполнитьИспользоватьОтбор()".
Процедура ОбработатьВыборОбъектов(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	Иначе
		// Отбираем строки отбора.
		Если Не РезультатВыбора.Количество() = 0 Тогда
			Для Каждого ТекСтрока Из РезультатВыбора Цикл
				НоваяСтрока = Объект.СписокОбъектов.Добавить();
				НоваяСтрока.Объект = ТекСтрока.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОбъектов()

&НаКлиенте
// Обработчик нажатия кнопки "Подбор" -> "Лицевые счета".
//
Процедура КоманднаяПанельОбъектыПодборЛицевыхСчетов(Команда)
	
	ФормаЛС = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", , ЭтотОбъект);
	ФормаЛС.ЗакрыватьПриВыборе = Ложь;
	ФормаЛС.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "Подбор" -> "Здания".
//
Процедура КоманднаяПанельОбъектыПодборЗданий(Команда)
	
	ФормаЗдание = ПолучитьФорму("Справочник.КВП_Здания.ФормаВыбора", , ЭтотОбъект);
	ФормаЗдание.ЗакрыватьПриВыборе = Ложь;
	ФормаЗдание.Открыть();
	
КонецПроцедуры

#КонецОбласти
