
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МожноСоздаватьДокументыУплаты = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение)
		И ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);
	
	Организация = Параметры.Организация;
	Период      = КонецГода(Параметры.Период);
	Правило     = Параметры.Правило;
	
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		ЗаполнитьПравило();
	КонецЕсли;
	
	// Проверка заполнения реквизитов организации, необходимых для уплаты.
	ТекстДействия = НСтр("ru = 'уплатить задолженность по УСН'");
	СообщениеТребуютсяРеквизиты =
		ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация, ТекстДействия);
	РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Организация, Период).РеквизитыЗаполнены;
	
	ПоказыватьКомандыОплаты = ПомощникиПоУплатеНалоговИВзносов.ПоказыватьКомандыОплаты();
	
	ЗаполнитьЗадолженность();
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УстановитьВидимостьКнопокОплаты();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ОбработкаЗаписиПлатежногоДокумента();
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		Налог = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация")
			И Параметр.Организация = Организация
			И Параметр.Свойство("Налог", Налог) И ЗначениеЗаполнено(Налог)
			И ЭтоУплатаНалогаУСН(Налог) Тогда
			
			ОбработкаЗаписиПлатежногоДокумента();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Организация = Источник Тогда
		
		РеквизитыОрганизацииЗаполнены = ПроверитьРеквизитыОрганизации(Организация, Период).РеквизитыЗаполнены;
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "УдалитьДокументУплаты" Тогда
		
		УдалитьДокументУплаты(Параметр);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РезультатПроверкиРеквизитовОрганизации = ПроверитьРеквизитыОрганизации(Организация, Период);
	Если НЕ РезультатПроверкиРеквизитовОрганизации.РеквизитыЗаполнены Тогда
		ТекстОписанияОбъектаПроверки = НСтр("ru = 'уплаты задолженности по налогу УСН'");
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Организация,
			РезультатПроверкиРеквизитовОрганизации.НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ,
			ТекстОписанияОбъектаПроверки)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачисленоНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	ИндексПериода = Число(СтрЗаменить(ИмяЭлемента, "Начислено", ""));
	СтрокаПериода = РасчетыПоНалогу.Получить(ИндексПериода);
	
	ОткрытьРасшифровкуНачисленияНалога(СтрокаПериода.НалоговыйПериод);
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченоНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	
	ИндексПериода = Число(СтрЗаменить(ИмяЭлемента, "Уплачено", ""));
	СтрокаПериода = РасчетыПоНалогу.Получить(ИндексПериода);
	
	ОткрытьРасшифровкуУплатыНалога(СтрокаПериода.НалоговыйПериод);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизиты(Организация, Период));
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		Платежи, "Платеж", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"))
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиПоКвитанции(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"))
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиБаннера(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// Заголовок
	ЧастиЗаголовка = Новый Массив;
	Если Форма.НалогУСНДолг > 0 Тогда
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Задолженность по налогу УСН'"));
	ИначеЕсли Форма.НалогУСНПереплата > 0 Тогда
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Переплата по налогу УСН'"));
	Иначе
		ЧастиЗаголовка.Добавить(НСтр("ru = 'Расчеты по налогу УСН'"));
	КонецЕсли;
	
	ЧастиЗаголовка.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'до %1 года'"),
		Формат(Год(форма.Период) + 1, "ЧГ=0")));
	
	Форма.Заголовок = СтрСоединить(ЧастиЗаголовка, " ");
	
	ЕстьЗадолженность = Форма.НалогУСНДолг > 0;
	
	Элементы.ДекорацияЗаголовокОстатки.Видимость = ЕстьЗадолженность;
	Элементы.ГруппаОплатаЗадолженности.Видимость = ЕстьЗадолженность;
	
	Если Форма.ПоказыватьКомандыОплаты И ЕстьЗадолженность Тогда
		Элементы.ГруппаКомандыОплаты.Видимость = Истина;
		УправлениеКомандамиОплаты(Форма);
	Иначе
		Элементы.ГруппаКомандыОплаты.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость =
		(ЗначениеЗаполнено(Форма.Организация) И НЕ Форма.РеквизитыОрганизацииЗаполнены);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеКомандамиОплаты(Форма)
	
	Элементы = Форма.Элементы;
	
	ДоступностьКоманд = Форма.МожноСоздаватьДокументыУплаты И Не ЗадолженностьОплаченаПолностью(Форма);
	
	// Доступность
	Элементы.ОплатитьСБанковскогоСчета.Доступность    = ДоступностьКоманд;
	Элементы.ОплатитьНаличнымиПоКвитанции.Доступность = ДоступностьКоманд;
	
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьСБанковскогоСчета,    ДоступностьКоманд);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьНаличнымиПоКвитанции, ДоступностьКоманд);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокОплаты()
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Организация);
	
	НадоВыбратьСпособОплаты = Не ЗначениеЗаполнено(СпособОплаты);
	
	Элементы.ОплатитьСБанковскогоСчета.Видимость = НадоВыбратьСпособОплаты
		Или (СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод);
	
	Элементы.ОплатитьНаличнымиПоКвитанции.Видимость = НадоВыбратьСпособОплаты
		Или (СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗадолженностьОплаченаПолностью(Форма)
	
	ЗадолженностьКУплате = НалогКУплате(Форма).Всего;
	
	Возврат ЗадолженностьКУплате <= 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, ЭтоКнопкаПоУмолчанию)
	
	Элемент.Шрифт = Новый Шрифт(Элемент.Шрифт, , , ЭтоКнопкаПоУмолчанию);
	
	Если ЭтоКнопкаПоУмолчанию Тогда
		Элемент.ЦветФона = ЦветСтиля("ВыборСтандартногоПериодаФонКнопки");
	Иначе
		Элемент.ЦветФона = Новый Цвет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветСтиля(ИмяЦветаСтиля)
	
#Если Клиент Тогда
	Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦветаСтиля);
#Иначе
	Возврат ЦветаСтиля[ИмяЦветаСтиля];
#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеЗадолженности

&НаСервере
Процедура ЗаполнитьЗадолженность()
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	
	// Расчеты получим за все периоды, включая год формы.
	ТаблицаРасчетов = УчетУСН.РасчетыПоНалогуЗаПредыдущиеПериоды(Организация, КонецГода(Период) + 1);
	
	РасчетыПоНалогу.Загрузить(ТаблицаРасчетов);
	
	РазместитьТаблицуЗадолженностиНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьТаблицуЗадолженностиНаФорме()
	
	КоличествоПредопределенныхСтрок = КоличествоПредопределенныхСтрокПериодов();
	
	Для Каждого СтрокаРасчетов Из РасчетыПоНалогу Цикл
		
		ИндексПериода = РасчетыПоНалогу.Индекс(СтрокаРасчетов);
		
		// Добавим элементы новой строки для периода задолженности, если еще не отрисованы.
		Если ИндексПериода > (КоличествоПредопределенныхСтрок - 1) Тогда
			ДобавитьЭлементыСтрокиЗадолженности(ИндексПериода);
		КонецЕсли;
		
		ГруппаПериода = Элементы.ГруппаПериодыЗадолженности.ПодчиненныеЭлементы.Найти("ГруппаПериод" + ИндексПериода);
		ГруппаПериода.Видимость = Истина;
		
		// Представление периода
		Если Год(СтрокаРасчетов.НалоговыйПериод) = Год(ГраницаОтчетностиПрошлыхПериодов) Тогда
			НазваниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За периоды до %1 года'"), Формат(Год(СтрокаРасчетов.НалоговыйПериод) + 1, "ЧГ=0"));
		Иначе
			НазваниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За %1 год'"), Формат(Год(СтрокаРасчетов.НалоговыйПериод), "ЧГ=0"));
		КонецЕсли;
		Элементы["ПредставлениеПериода" + ИндексПериода].Заголовок = НазваниеПериода;
		
		// Начислено
		ДекорацияНачислено = Элементы["Начислено" + ИндексПериода];
		ДекорацияНачислено.Заголовок
			= ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасчетов.Начислено, , "0,00");
		ДекорацияНачислено.Гиперссылка = Истина;
		
		// Уплачено
		ДекорацияУплачено = Элементы["Уплачено" + ИндексПериода];
		ДекорацияУплачено.Заголовок
			= ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасчетов.Уплачено, , "0,00");
		ДекорацияУплачено.Гиперссылка = Истина;
		
		// Переплата
		ДекорацияПереплата = Элементы["Переплата" + ИндексПериода];
		ДекорацияПереплата.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасчетов.Переплата);
		ДекорацияПереплата.Гиперссылка = Ложь;
		
		// Задолженность
		ФорматНулевойЗадолженности = ?(СтрокаРасчетов.Переплата = 0, "0,00", "");
		
		ДекорацияЗадолженность = Элементы["Задолженность" + ИндексПериода];
		ДекорацияЗадолженность.Заголовок
			= ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасчетов.Задолженность, , ФорматНулевойЗадолженности);
		ДекорацияЗадолженность.Гиперссылка = Ложь;
		ДекорацияЗадолженность.ЦветТекста  = ?(СтрокаРасчетов.Задолженность > 0, ЦветаСтиля.ЦветОтрицательногоЧисла, Новый Цвет());
		
	КонецЦикла;
	
	Для ИндексГруппы = РасчетыПоНалогу.Количество() По Элементы.ГруппаПериодыЗадолженности.ПодчиненныеЭлементы.Количество() - 1 Цикл
		Элементы["ГруппаПериод" + ИндексГруппы].Видимость = Ложь;
	КонецЦикла;
	
	// Итоги
	
	ИтоговыйОстатокРасчетов = РасчетыПоНалогу.Итог("Переплата") - РасчетыПоНалогу.Итог("Задолженность");
	
	НалогУСНДолг      = ?(ИтоговыйОстатокРасчетов < 0, -ИтоговыйОстатокРасчетов, 0);
	НалогУСНПереплата = ?(ИтоговыйОстатокРасчетов > 0, ИтоговыйОстатокРасчетов, 0);
	
	Элементы.ПереплатаИтог.Заголовок     = ОбщегоНазначенияБПВызовСервера.ФорматСумм(НалогУСНПереплата);
	Элементы.ЗадолженностьИтог.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(НалогУСНДолг);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлементыСтрокиЗадолженности(ИндексПериода)
	
	ГруппаЭталон = Элементы.ГруппаПериод0;
	
	НоваяГруппа = Элементы.Добавить("ГруппаПериод" + ИндексПериода, Тип("ГруппаФормы"), Элементы.ГруппаПериодыЗадолженности);
	
	ЗаполнитьЗначенияСвойств(НоваяГруппа, ГруппаЭталон, , "Имя, ПодчиненныеЭлементы, ПутьКДаннымЗаголовка");
	
	Для Каждого ИсходныйЭлемент Из ГруппаЭталон.ПодчиненныеЭлементы Цикл
		
		ИмяНовогоЭлемента = СтрЗаменить(ИсходныйЭлемент.Имя, "0", Строка(ИндексПериода));
		НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, ТипЗнч(ИсходныйЭлемент), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныйЭлемент, , "Имя");
		
		ДействиеЭлемента = ИсходныйЭлемент.ПолучитьДействие("Нажатие");
		Если ЗначениеЗаполнено(ДействиеЭлемента) Тогда
			НовыйЭлемент.УстановитьДействие("Нажатие", ДействиеЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция КоличествоПредопределенныхСтрокПериодов()
	
	КоличествоСтрок = 0;
	
	Пока Истина Цикл
		Если Элементы.Найти("ГруппаПериод" + КоличествоСтрок) <> Неопределено Тогда
			КоличествоСтрок = КоличествоСтрок + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоСтрок;
	
КонецФункции

#КонецОбласти

#Область ОтображениеДокументовУплаты

&НаСервере
Процедура ОбработкаЗаписиПлатежногоДокумента()
	
	ЗаполнитьЗадолженность();
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НайтиИОтобразитьСвязанныеПлатежи()
	
	Если НалогУСНДолг <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Платежи.Очистить();
	
	ЗаполнитьТаблицыПлатежей();
	
	ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПлатежей()
	
	ТаблицаПлатежей = Обработки.ПомощникРасчетаНалогаУСН.ДокументыУплатыНалогаПрошлыхЛет(Организация, Период);
	
	Если ТаблицаПлатежей <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
			ЗаполнитьЗначенияСвойств(Платежи.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму()
	
	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
		ДокументыОплаты(ЭтотОбъект));
	
	ПлатежиДляОтображения = ПомощникиПоУплатеНалоговИВзносов.ПлатежиДляОтображения(
		ЭтотОбъект.Платежи, СостоянияИнтеграцииДокументов);
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиДляОтображения, "Платеж");
	
	ИнтеграцияСБанкамиФормы.ПолучитьДанныеИПоказатьБаннерСостоянияОтправки(ЭтотОбъект, СостоянияИнтеграцииДокументов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХэшДанныхБаннера(Знач ДокументыОплаты)
	
	Возврат ИнтеграцияСБанкамиФормы.ХэшДанныхБаннера(ДокументыОплаты);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбновлениеБаннераСостоянияОтправки()
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки() Экспорт
	
	Документы = Новый Массив;
	Для Каждого Платеж Из Платежи Цикл
		Документы.Добавить(Платеж.Ссылка);
	КонецЦикла;
	Если ХэшДанныхБаннера(Документы) <> ХешДанныхБаннера Тогда
		НайтиИОтобразитьСвязанныеПлатежи();
	КонецЕсли;
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыОплаты(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого Платеж Из Форма.Платежи Цикл
		ДокументыОплаты.Добавить(Платеж.Ссылка);
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

#КонецОбласти

#Область УдалениеДокументовОплаты

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	ЗаполнитьЗадолженность();
	
	НайтиИОтобразитьСвязанныеПлатежи();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманд

&НаКлиенте
Процедура Оплатить(СпособОплаты)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СуммаПлатежа = СуммаКУплате(НалогУСНДолг, Платежи);
	
	ОписаниеДействияПлатеж = ОписаниеДействияДляДокументаУплатыЗадолженности(Организация, СуммаПлатежа,
		СпособОплаты, Период);
	
	Если ОписаниеДействияПлатеж <> Неопределено Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияПлатеж);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НалогКУплате(Форма)
	
	Результат = Новый Структура("Всего");
	
	Результат.Всего = СуммаКУплате(Форма.НалогУСНДолг, Форма.Платежи);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаКУплате(Сумма, КоллекцияПлатежей)
	
	Возврат Макс(Сумма - СуммаПодготовленныхПлатежей(КоллекцияПлатежей), 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаПодготовленныхПлатежей(КоллекцияПлатежей)
	
	Сумма = 0;
	
	Для Каждого Платеж Из КоллекцияПлатежей Цикл
		Если Не Платеж.Оплачено Тогда
			Сумма = Сумма + Платеж.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеДействияДляДокументаУплатыЗадолженности(Организация, Сумма, СпособУплатыНалога, ПериодСобытия)
	
	Возврат Обработки.ПомощникРасчетаНалогаУСН.ОписаниеДействияУплатаНалога(Организация, Сумма,
		СпособУплатыНалога, ПериодСобытия, Истина);
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервереБезКонтекста
Функция ПроверитьРеквизитыОрганизации(Организация, Период)
	
	НезаполненныеРеквизиты = Неопределено;
	
	РеквизитыОрганизацииЗаполнены = Обработки.ПомощникРасчетаНалогаУСН.РеквизитыДляОтчетностиЗаполнены(
		Организация, Период, НезаполненныеРеквизиты);
		
	Возврат Новый Структура("РеквизитыЗаполнены, НезаполненныеРеквизиты", РеквизитыОрганизацииЗаполнены, НезаполненныеРеквизиты);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверяемыеРеквизиты(Организация, Период)
	
	Возврат Обработки.ПомощникРасчетаНалогаУСН.ПроверяемыеРеквизиты(Организация, Период);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПравило()
	
	Порядок = Обработки.ПомощникРасчетаНалогаУСН.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Период);
	
	ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Уплата");
	
	Если ПорядокУплаты <> Неопределено Тогда
		Правило = ПорядокУплаты.Правило;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасшифровкуНачисленияНалога(ПериодРасчета)
	
	НачалоПериода = НачалоГода(ПериодРасчета);
	КонецПериода  = КонецГода(ПериодРасчета);
	
	ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВидОтчета",                  "НачисленияУСН");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",  ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ВидРасшифровки",             2);
	
	ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасшифровкуУплатыНалога(ПериодРасчета)
	
	НачалоПериода = НачалоГода(ПериодРасчета);
	КонецПериода  = КонецГода(ПериодРасчета);
	
	ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВидОтчета",                  "ПлатежиУСН");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",  ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ВидРасшифровки",             2);
	
	ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУплатаНалогаУСН(Налог)
	
	ВидыНалоговУСН = ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН();
	
	Возврат ВидыНалоговУСН.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога")) <> Неопределено;
	
КонецФункции

#КонецОбласти
