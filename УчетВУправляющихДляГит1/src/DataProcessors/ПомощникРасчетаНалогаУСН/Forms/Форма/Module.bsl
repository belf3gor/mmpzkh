
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
	МожноСоздаватьДекларацию      = ПравоДоступа("Изменение", Метаданные.Документы.РегламентированныйОтчет);
	МожноАктуализироватьДанные    = ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	МожноСоздаватьДокументыУплаты = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение)
		И ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);
	
	Параметры.Свойство("Организация", Объект.Организация);
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
		Объект.Период = Параметры.КонецПериода;
	Иначе
		ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
		Если Не УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, КонецКвартала(ТекущаяДатаПользователя)) Тогда
			Объект.Период = КонецГода(ТекущаяДатаПользователя);
		Иначе
			Объект.Период = НачалоКвартала(ТекущаяДатаПользователя) - 1; // Конец прошлого квартала.
		КонецЕсли;
	КонецЕсли;
	
	КонтекстныйВызов  = Параметры.КонтекстныйВызов;
	ДействиеКалендаря = Параметры.ДействиеКалендаряБухгалтера;
	
	УстановитьЗаголовок(ЭтотОбъект);
	
	ОрганизацияПредставление = Объект.Организация;
	ИспользоватьНесколькоОрганизацийБухгалтерскийУчет = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	ИнтерфейсИнтеграцииСБанками = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	ПоказыватьКомандыОплаты = ПомощникиПоУплатеНалоговИВзносов.ПоказыватьКомандыОплаты();
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		Элементы.Доходы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.Доходы.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	ЗаполнитьНачальныеПоказатели();
	
	ТребуетсяПроверятьАктуальность = Не ЭтоПериодПрошлыхЛет И ПустаяСтрока(СообщениеОбОшибке);
	ВозможнаБыстраяАктуализация    = Истина;
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		ПредупрежденияПриЗагрузке = НайтиПредупрежденияПриЗагрузкеВыписки(
			Объект.Организация, НачалоНалоговогоПериода, КонецКвартала(Объект.Период));
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредупрежденияПриЗагрузке);
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	Если НЕ ЗавершениеРаботы Тогда
		ЗакрытиеМесяцаВызовСервера.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияАктуализации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВыполняетсяФоновоеЗадание(ЭтотОбъект) Тогда // на время актуализации не принимаем никаких оповещений
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ДанныеУчетаАктуальны = Ложь;
		ЗаполнитьНачальныеПоказатели();
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИмяСобытия = "Запись_РегистрацияСуммыУбыткаУСН" И Параметр.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Параметр.Организация = Объект.Организация И Параметр.Год = Год(Объект.Период) Тогда
		
		Если ДанныеУчетаАктуальны Тогда
			ЗаполнитьАктуальныеПоказателиИПояснения();
		Иначе
			ЗаполнитьНачальныеПоказатели();
			ТребуетсяПроверятьАктуальность = Ложь;
			УправлениеФормойНаСервере();
		КонецЕсли;
		
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		// Записан документ ПлатежноеПоручение или РасходныйКассовыйОрдер с видом операции "Уплата налога"
		
		Налог = Неопределено;
		
		Если ДанныеУчетаАктуальны И ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Налог", Налог) И ЗначениеЗаполнено(Налог) И ЭтоУплатаНалогаУСН(Налог) Тогда
			
			ЗаполнитьАктуальныеПоказателиИПояснения();
			ЗапуститьОбновлениеБаннераСостоянияОтправки();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов"
		Или ИмяСобытия = "Изменение пометки удаления объекта"
		Или ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		// Записан регламентированный отчет
		
		Если (ДанныеУчетаАктуальны Или ЭтоПериодПрошлыхЛет)
			И ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Ссылка") И ЭтоРегламентированныйОтчетУСН(Параметр.Ссылка, ИмяРеглОтчета) Тогда
			
			ЗаполнитьАктуальныеПоказателиИПояснения();
			
		КонецЕсли;
		
	ИначеЕсли ИнтерфейсИнтеграцииСБанками
		И (ИмяСобытия = "ОбновитьПоказателиРасчетаУСН" Или ИмяСобытия = "ИзменениеЗаписиКУДиР" Или ИмяСобытия = "ИзменениеУчетнойПолитики")
		И НЕ ОповещениеПолученоИзОсновнойФормыПомощника(Источник) Тогда

		ДанныеУчетаАктуальны = Ложь;
		ЗаполнитьНачальныеПоказатели();
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИнтерфейсИнтеграцииСБанками
		И (ИмяСобытия = "АктуализацияЗавершенаУспешно" Или ИмяСобытия = "АктуализацияОтменена") Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьНеобходимостьОбновленияДанныхПриИнтеграцииСБанком", 3, Ложь);
		
	ИначеЕсли (ИмяСобытия = "ОбновитьПоказателиРасчетаУСН" Или ИмяСобытия = "ИзменениеЗаписиКУДиР")
		И НЕ ОповещениеПолученоИзОсновнойФормыПомощника(Источник) Тогда
		
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ЗаполнитьАктуальныеПоказателиИПояснения();
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	ИначеЕсли ИмяСобытия = "ИзмененоПредупреждениеПриЗагрузкеВыписки" И ИнтерфейсИнтеграцииСБанками Тогда
		
		ПредупрежденияПриЗагрузке = НайтиПредупрежденияПриЗагрузкеВыписки(
			Объект.Организация, НачалоНалоговогоПериода, КонецКвартала(Объект.Период));
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредупрежденияПриЗагрузке);
		УправлениеФормойНаСервере();
		
	ИначеЕсли ИмяСобытия = "НалогиПрошлыхПериодов_ИзмененыОстатки" И Объект.Организация = Источник Тогда
		
		Если ДанныеУчетаАктуальны Тогда
			ЗаполнитьАктуальныеПоказателиИПояснения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПредставление = Объект.Организация;
	ЗаполнитьНачальныеПоказатели();
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УчетнаяПолитикаОрганизации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КлючЗаписиУчетнойПолитики = ДанныеУчетнойПолитики("НастройкиСистемыНалогообложения", Объект.Организация, Объект.Период);
		
		Если КлючЗаписиУчетнойПолитики <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", КлючЗаписиУчетнойПолитики);
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи",
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаСписка",
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		ИмяОткрываемойФормы = "РасшифровкаДоходовИнтеграцияСБанком";
		
	Иначе
		ИмяОткрываемойФормы = "РасшифровкаДоходов";
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма." + ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаРасходов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратыПокупателямНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не ИнтерфейсИнтеграцииСБанками Тогда
		ВызватьИсключение НСтр("ru = 'Функциональная опция ""Интеграция с банком"" отключена'");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	
	ОткрытьФорму(
		"Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаВозвратовПокупателямИнтеграцияСБанком",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УплаченныеСтраховыеВзносыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", Объект.Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоНалоговогоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецКвартала(Объект.Период));
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВидОтчета",                 "СтраховыеВзносы");
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ВидРасшифровки",            2);
	
	ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраховыеВзносыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыполняетсяФоновоеЗадание(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода", КонецПериода);
	ПараметрыФормы.Вставить("ДанныеУчетаАктуальны", ДанныеУчетаАктуальны);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаУменьшенияНалогаИнтеграцияСБанком", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренесенныеУбыткиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(РегистрацияСуммыУбыткаУСН) Тогда
		ПоказатьЗначение(, РегистрацияСуммыУбыткаУСН);
	Иначе
		
		ЗначенияЗаполненияДокумента = Новый Структура;
		ЗначенияЗаполненияДокумента.Вставить("Организация", Объект.Организация);
		ЗначенияЗаполненияДокумента.Вставить("Дата",        КонецГода(Объект.Период));
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполненияДокумента);
		
		ОткрытьФорму("Документ.РегистрацияСуммыУбыткаУСН.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалогаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КлючЗаписи = ДанныеУчетнойПолитики("НастройкиУчетаУСН", Объект.Организация, Объект.Период);
	
	Если КлючЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Ключ",              КлючЗаписи);
	ПараметрыОткрытия.Вставить("ПараметрыОткрытия", Новый Структура("АктивныйЭлемент", "СтавкаНалогаУСН"));
	
	ОткрытьФорму("РегистрСведений.НастройкиУчетаУСН.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект, "");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеУчетнойПолитики(ИмяРегистра, Организация, Период)
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики(ИмяРегистра, Организация, Период);
	
КонецФункции

&НаКлиенте
Процедура АвансовыеПлатежиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(ДобавитьМесяц(Объект.Период, -3));
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыФормы.Вставить("КонецПериода",  КонецПериода);
		ПараметрыФормы.Вставить("Организация",   Объект.Организация);
		ПараметрыФормы.Вставить("Заголовок",     Элементы.АвансовыеПлатежи.Заголовок);
		
		ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаАвансовИнтеграцияСБанком", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		
		ПользовательскиеНастройки  = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", Объект.Организация);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
		
		ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("ВидОтчета",                  "НачисленияПлатежиУСН");
		ПараметрыФормы.Вставить("ПользовательскиеНастройки",  ПользовательскиеНастройки);
		ПараметрыФормы.Вставить("ВидРасшифровки",             2);
		
		ОткрытьФорму("Отчет.РасшифровкаПлатежейВБюджет.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",        Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",  "ДляОтчетности");
	ПараметрыФормы.Вставить("Контекст",    Новый Структура);
	ПараметрыФормы.Контекст.Вставить("Период",        Объект.Период);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", ИмяРеглОтчета);
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстРасчетыПрошлыхЛетОбработкаНавигационнойСсылки(Элемент, СтрокаСсылки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрокаСсылки = "ОплатитьЗадолженность" Тогда
		
		ОткрытьРасшифровкуРасчетовПрошлыхЛет();
		
	ИначеЕсли СтрокаСсылки = "ВвестиНачальныеОстатки" Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Правило",     Правило);
		
		ОткрытьФорму("Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоНалогуЗаПрошлыеПериоды", ПараметрыФормы, ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "РасшифровкаУменьшенияНалога" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",   Объект.Организация);
		ПараметрыФормы.Вставить("НачалоПериода", НачалоНалоговогоПериода);
		ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
		
		ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаУменьшенияНалога", ПараметрыФормы);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РасшифровкаПереплаты" Тогда
		
		ОткрытьРасшифровкуРасчетовПрошлыхЛет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДекларацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Декларация);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежУСНОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиУСН, "ПлатежУСН", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиЗагрузкиВыпискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ИнтерфейсИнтеграцииСБанками Тогда
		ВызватьИсключение НСтр("ru = 'Функциональная опция ""Интеграция с банком"" отключена'");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДоходы" Тогда
		ИмяОткрываемойФормы = "РасшифровкаДоходовИнтеграцияСБанком";
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьВозвраты" Тогда
		ИмяОткрываемойФормы = "РасшифровкаВозвратовПокупателямИнтеграцияСБанком";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверная навигационная ссылка'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	ПараметрыФормы.Вставить("ПоказатьПредупреждения", Истина);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма." + ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПоказатели(Команда)
	
	ЗаполнитьНачальныеПоказатели();
	ПередНачаломДлительнойОперации();
	
	// Обновление открытых форм расшифровок
	Оповестить("ОбновитьПоказателиРасчетаУСН", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьАнализУчетаУСН(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация",      Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода",    НачалоНалоговогоПериода);
	ПараметрыФормы.Вставить("КонецПериода",     КонецКвартала(Объект.Период));
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	
	ОткрытьФорму("Отчет.АнализСостоянияНалоговогоУчетаПоУСН.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанныеУчета(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДекларацию(Команда)
	
	Если Не ПроверитьЗаполнениеПередСозданиемДекларации() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ОписаниеДействияДекларация = ОписаниеДействияДекларация(Объект.Организация, Объект.Период, ТекстОшибки);
	
	Если ОписаниеДействияДекларация <> Неопределено Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияДекларация);
	ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьДекларацияУжеСдана(Команда)
	
	ПараметрыКоманды = ПараметрыВыполненияЗадачиПодготовкиДекларации(Объект.Организация, Объект.Период);
	
	Если ЗначениеЗаполнено(ПараметрыКоманды) Тогда
		
		ВыполнениеЗадачБухгалтераКлиент.ОтметитьЗадачуКакВыполненную(ПараметрыКоманды, ЭтотОбъект);
		
		Оповестить("ПомощникРасчетаНалогаУСН_ИзмененаЗадача");
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКУДиР(Команда)
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Организация",      Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода",    НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода",     КонецПериода);
	ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	
	ОткрытьФорму("Отчет.КнигаУчетаДоходовИРасходов.Форма.ФормаОтчета", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогБанк(Команда)
	
	СоздатьДокументУплатыНалога(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогКасса(Команда)
	
	СоздатьДокументУплатыНалога(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтаФорма,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиБаннера(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьНеобходимостьОбновленияДанныхПриИнтеграцииСБанком() Экспорт
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеУчетаАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьНеобходимостьОбновленияДанныхПриИнтеграцииСБанком");
	
	ОбновитьПоказатели(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьЗависимуюФорму(ИмяЗависимойФормы, Удалить = Ложь) Экспорт
	
	ЗависимаяФорма = ЗависимыеФормыРасшифровок.НайтиПоЗначению(ИмяЗависимойФормы);
	Если Удалить Тогда
		// При закрытии формы удалим информацию, что эту форму нужно оповещать.
		Если ЗависимаяФорма <> Неопределено Тогда
			ЗависимыеФормыРасшифровок.Удалить(ЗависимаяФорма);
		КонецЕсли;
	Иначе
		// В эти формы в дальнейшем нужно будет передать оповещение, что результат актуализации они могут узнать
		// из данной формы помощника.
		Если ЗависимаяФорма = Неопределено Тогда
			ЗависимыеФормыРасшифровок.Добавить(ИмяЗависимойФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
	
	ТребуетсяПроверятьАктуальность = Не ЭтоПериодПрошлыхЛет И ПустаяСтрока(СообщениеОбОшибке);
	ДанныеУчетаАктуальны = ДеятельностьОтсутствует;
	ВозможнаБыстраяАктуализация = МожноАктуализироватьДанные;
	
	УправлениеФормойНаСервере();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	Элементы.ОрганизацияРасширеннаяПодсказка.Заголовок = ПодсказкаПоНалогу;
	Элементы.ОрганизацияПредставлениеРасширеннаяПодсказка.Заголовок = ПодсказкаПоНалогу;
	
	ОрганизацияЗаполнена = ЗначениеЗаполнено(Объект.Организация);
	РасчетНалогаВозможен = ПустаяСтрока(СообщениеОбОшибке);
	
	ЕстьДанныеДляРасчета = РасчетНалогаВозможен И Не ЭтоПериодПрошлыхЛет И Не НалоговыйПериодПропущен;
	
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость  = ОрганизацияЗаполнена;
	Элементы.АктуализироватьДанныеУчета.Видимость = ТребуетсяПроверятьАктуальность
		И Элементы.АктуализироватьДанныеУчета.Видимость // на время анализа не скрываем кнопку
		Или Не ДанныеУчетаАктуальны               // нужно рассчитывать
			И НЕ ВозможнаБыстраяАктуализация      // это сложный расчет
			И ЕстьДанныеДляРасчета;    // допустимо рассчитывать
	Элементы.АктуализироватьДанныеУчета.Доступность = ОрганизацияЗаполнена;
	
	Элементы.ГруппаШапка.Видимость             = ОрганизацияЗаполнена И ЕстьДанныеДляРасчета;
	Элементы.ГруппаПодвал.Видимость            = ОрганизацияЗаполнена И ЕстьДанныеДляРасчета;
	Элементы.ГруппаРасчетСуммыНалога.Видимость = ОрганизацияЗаполнена И ЕстьДанныеДляРасчета;
	Элементы.ГруппаОтчетностьПрошлыхЛет.Видимость = ОрганизацияЗаполнена И ЭтоПериодПрошлыхЛет;
	
	Элементы.ГруппаУплатаНалога.Видимость = ЕстьДанныеДляРасчета И Не ДеятельностьОтсутствует;
	Элементы.ГруппаКомандыУплатыНалога.Видимость = ПоказыватьКомандыОплаты;
	
	Элементы.ГруппаСверка.Видимость = ОрганизацияЗаполнена И ЕстьДанныеДляРасчета И Используется1СОтчетность;
	Элементы.ГруппаИТС.Видимость    = ОрганизацияЗаполнена И ЕстьДанныеДляРасчета И Не ИнтерфейсИнтеграцииСБанками;
	
	Элементы.СообщениеОбОшибке.Видимость = Не РасчетНалогаВозможен;
	
	Элементы.ПредставлениеПериода.Видимость     = НЕ КонтекстныйВызов;
	Элементы.Организация.Видимость              = НЕ КонтекстныйВызов И ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	Элементы.ОрганизацияПредставление.Видимость = КонтекстныйВызов ИЛИ НЕ ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	
	Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = РасчетНалогаВозможен И НалоговыйПериодРасширен;
	
	Если НЕ ОрганизацияЗаполнена ИЛИ НалоговыйПериодПропущен Тогда
		
		Элементы.ОрганизацияРасширеннаяПодсказка.Заголовок = "";
		СтатусФоновогоЗадания = "";
		Возврат;
		
	КонецЕсли;
	
	Элементы.ОшибкаНесоответствиеСуммДекларация.Видимость  = Не ПустаяСтрока(ОшибкаНесоответствиеСуммДекларация);
	Элементы.ОшибкаНесоответствиеСуммОплата.Видимость      = Не ПустаяСтрока(ОшибкаНесоответствиеСуммОплата);
	
	НужноПодготовитьДекларацию = НужноПодготовитьДекларацию(ЭтотОбъект);
	ВыполняетсяФоновоеЗадание = ВыполняетсяФоновоеЗадание(ЭтотОбъект);
	
	Элементы.ОбновитьПоказатели.Видимость = НЕ ИнтерфейсИнтеграцииСБанками;
	
	Элементы.Расходы.Видимость                   = НЕ ОбъектНалогообложенияДоходы;
	Элементы.ВозвратыПокупателям.Видимость       = ОбъектНалогообложенияДоходы И ИнтерфейсИнтеграцииСБанками;
	Элементы.ПеренесенныеУбытки.Видимость        = НЕ ОбъектНалогообложенияДоходы И НужноПодготовитьДекларацию;
	Элементы.УплаченныеСтраховыеВзносы.Видимость = ОбъектНалогообложенияДоходы И Не ИнтерфейсИнтеграцииСБанками;
	
	Элементы.ГруппаПредупреждениеОбОшибкахЗагрузки.Видимость = ИнтерфейсИнтеграцииСБанками И ОрганизацияЗаполнена
		И НЕ НалоговыйПериодПропущен И ЕстьОшибкиЗагрузкиВыписки;
	
	Если ОбъектНалогообложенияДоходы И ИнтерфейсИнтеграцииСБанками Тогда
		Элементы.СтраховыеВзносы.Видимость = Истина;
		Элементы.СтраховыеВзносы.Доступность = Не ВыполняетсяФоновоеЗадание;
	Иначе
		Элементы.СтраховыеВзносы.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.АвансовыеПлатежи.Видимость = НомерКвартала <> 1;
	Элементы.АвансовыеПлатежи.Заголовок = ?(НомерКвартала = 2, НСтр("ru = 'Авансовый платеж за '"),
		НСтр("ru = 'Авансовые платежи за '")) + ПредставлениеПериодаАванса;
		
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость = ВыполняетсяФоновоеЗадание;
	Элементы.АктуализироватьДанныеУчета.Доступность = Не ВыполняетсяФоновоеЗадание;
	
	Элементы.ГруппаПояснениеРасчета.Видимость = ДанныеУчетаАктуальны;
	Элементы.АнализУчетаПоУСН.Видимость       = Не ДеятельностьОтсутствует;
	
	Элементы.НалогКУплатеОтсутствует.Видимость = ДеятельностьОтсутствует;
	
	Элементы.ГруппаРасчетыПрошлыхЛет.Видимость = Задолженность > 0 ИЛИ ТребуетсяВводНачальныхОстатков;
	
	НастроитьПодвал();
	
	УстановитьКнопкуПоУмолчанию(ЭтотОбъект);
	
	Если НЕ МожноАктуализироватьДанные Тогда
		Элементы.АктуализироватьДанныеУчета.Доступность = Ложь;
	КонецЕсли;
	
	Если СверкаВыполнена Тогда
		Элементы.ВыполнитьСверкуСсылка.Заголовок = ЗапросНаСверкуНаименование;
		Элементы.ВыполнитьСверкуСсылка.Видимость = Истина;
		Элементы.ВыполнитьСверку.Видимость       = Ложь;
	Иначе
		Элементы.ВыполнитьСверкуСсылка.Видимость = Ложь;
		Элементы.ВыполнитьСверку.Видимость       = Истина;
	КонецЕсли;
	
	ДоступнаСверка = ЗначениеЗаполнено(Срок)
		И ЗначениеЗаполнено(Правило);
	Элементы.ВыполнитьСверку.Доступность = ДоступнаСверка;
	Элементы.ПодробнееНаИТС.Видимость = ЗначениеЗаполнено(Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПодвал()
	
	ПодвалВиден = ЭтоПериодПрошлыхЛет Или ДанныеУчетаАктуальны;
	
	Элементы.ГруппаПодвал.Видимость = ПодвалВиден;
	
	Если ПодвалВиден Тогда
		
		НужноПодготовитьДекларацию = НужноПодготовитьДекларацию(ЭтотОбъект);
		
		Элементы.СообщениеТребуютсяРеквизиты.Видимость = НЕ РеквизитыОрганизацииЗаполнены
			И ((НужноПодготовитьДекларацию И НЕ ЕстьДекларация) // Нужна декларация, или
				ИЛИ НЕ ДеятельностьОтсутствует);                // ненулевой налог к уплате.
		
		Элементы.ДекларацияПояснение.Видимость     = НужноПодготовитьДекларацию И Не ЭтоПериодПрошлыхЛет;
		Элементы.ДекларацияПредставление.Видимость = НужноПодготовитьДекларацию И ЕстьДекларация;
		
		Элементы.СформироватьДекларацию.Видимость  = НужноПодготовитьДекларацию И НЕ ЕстьДекларация;
		Элементы.СформироватьДекларацию.Доступность = МожноСоздаватьДекларацию;
		
		Элементы.ДекларацияУжеСдана.Видимость = ЭтоПериодПрошлыхЛет И Не ЕстьДекларация;
		
		Элементы.ГиперссылкаКУДиР.Видимость = НужноПодготовитьДекларацию И Не ЭтоПериодПрошлыхЛет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкиРасширенныйНалоговыйПериод()
	
	Если НалоговыйПериодПропущен ИЛИ НалоговыйПериодРасширен Тогда
		
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = ПодсказкаПереносНалоговогоПериода;
		
	Иначе
		
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыполняетсяФоновоеЗадание(Форма)
	
	Возврат Форма.ТребуетсяПроверятьАктуальность
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации)
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияПроверкиАктуализации);
		
КонецФункции

&НаКлиенте
Функция ОповещениеПолученоИзОсновнойФормыПомощника(ИсточникОповещения)
	
	// Обход "паразитной обратной связи" между двумя открытыми одновременно формами помощника.
	// Если расчет налога выполняется "на лету", оповещение о завершении актуализации в одной форме
	// порождает проверку актуальности и выполнение актуализации в другой форме,
	// что приводит к генерации нового оповещения - процесс зацикливается.
	
	Если ТипЗнч(ИсточникОповещения) <> Тип("УправляемаяФорма") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИсточникОповещения.ИмяФормы = ЭтотОбъект.ИмяФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКнопкуПоУмолчанию(Форма)
	
	Элементы = Форма.Элементы;
	
	КнопкаПоУмолчаниюАктуализировать = 
		Не Форма.ДанныеУчетаАктуальны 
		И Не Форма.ЭтоПериодПрошлыхЛет;
	
	КнопкаПоУмолчаниюДекларация =
		НЕ КнопкаПоУмолчаниюАктуализировать
		И Форма.РеквизитыОрганизацииЗаполнены
		И НужноПодготовитьДекларацию(Форма)
		И НЕ Форма.ЕстьДекларация;
	
	КнопкаПоУмолчаниюУплата =
		НЕ КнопкаПоУмолчаниюАктуализировать
		И НЕ КнопкаПоУмолчаниюДекларация
		И Форма.РеквизитыОрганизацииЗаполнены
		И НЕ Форма.ДеятельностьОтсутствует
		И НЕ Форма.НалогОплаченПолностью;
	
	Элементы.АктуализироватьДанныеУчета.КнопкаПоУмолчанию = КнопкаПоУмолчаниюАктуализировать;
	Элементы.СформироватьДекларацию.КнопкаПоУмолчанию     = КнопкаПоУмолчаниюДекларация;
	
	Элементы.УплатитьНалогБанк.КнопкаПоУмолчанию          = КнопкаПоУмолчаниюУплата;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.УплатитьНалогБанк,  КнопкаПоУмолчаниюУплата);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.УплатитьНалогКасса, КнопкаПоУмолчаниюУплата);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, КнопкаПоУмолчанию)
	
	ЖирныйШрифт = КнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ЖирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(КнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НужноПодготовитьДекларацию(Форма)
	
	// Декларацию нужно готовить только в помощнике за год,
	// при этом не должно быть ошибок, препятствующих подготовке декларации.
	// Например, ошибкой может быть то, что организация не является плательщиком УСН.
	Возврат (Форма.НомерКвартала = 4) И ПустаяСтрока(Форма.СообщениеОбОшибке);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачальныеПоказатели()
	
	ДатаРегистрацииОрганизации = Справочники.Организации.ДатаРегистрацииОрганизации(Объект.Организация);
	
	МинимальныйПериод = НачалоКвартала(ДатаРегистрацииОрганизации);
	Если Объект.Период < МинимальныйПериод Тогда
		// Если при начальном заполнении по рабочей дате, восстановлении из настроек или при смене организации
		// период оказался в запрещенном интервале, нужно сдвинуть его вперед до ближайшего доступного.
		Объект.Период = МинимальныйПериод;
	КонецЕсли;
	
	Показатели = Обработки.ПомощникРасчетаНалогаУСН.НачальныеПоказатели(Объект.Организация, Объект.Период);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Показатели);
	
	УстановитьПодсказкиРасширенныйНалоговыйПериод();
	
	ЗаполнитьПравилоИСрокЗадачи();
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ПроверитьВедениеДеятельности();
	
	ЗаполнитьОплатуНалогаИОтобразитьНаФорме();
	
	УстановитьВидимостьКнопокОплаты();
	
	УстановитьПараметрыПрошлыхЛет();
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыПрошлыхЛет()
	
	ГраницаОтчетности = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Объект.Организация);
	Если ЗначениеЗаполнено(ГраницаОтчетности)
		И Не НалоговыйПериодПропущен Тогда
		ЭтоПериодПрошлыхЛет = Объект.Период <= ГраницаОтчетности;
	Иначе
		ЭтоПериодПрошлыхЛет = Ложь;
	КонецЕсли;
	
	Если ЭтоПериодПрошлыхЛет Тогда
		
		НачалоВеденияУчета = ГраницаОтчетности + 1;
		Если НачалоВеденияУчета = НачалоГода(НачалоВеденияУчета) Тогда
			ОписаниеПериодаНачалаУчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 года'"), Формат(Год(НачалоВеденияУчета), "ЧЦ=4; ЧГ="));
		Иначе
			ОписаниеПериодаНачалаУчета = Формат(НачалоВеденияУчета, "ДЛФ=D");
		КонецЕсли;
		
		Элементы.ОписаниеПериодаПрошлыхЛет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заполнить декларацию по данным программы невозможно, так как учет ведется, начиная с %1.
			|Вы можете сформировать декларацию и заполнить ее самостоятельно.'"),
			ОписаниеПериодаНачалаУчета);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьАктуальныеПоказателиИПояснения()
	
	Результат = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказателиРасчетаСПояснениями(
		Объект.Организация, Объект.Период);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.Показатели, , "ПодсказкаПоНалогу"); // Подсказка берется не из актуальных показателей.
	
	ОтобразитьРасчетыЗаПредыдущиеПериоды();
	
	ЗагрузитьПоясненияКРасчету(Результат.Пояснения);
	
	ЗаполнитьОплатуНалогаИОтобразитьНаФорме();
	
	ТребуетсяПроверятьАктуальность = Ложь;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеДействияДекларация(Знач Организация, Знач Период, ТекстОшибки = "")
	
	ОписаниеДействияДекларация = Обработки.ПомощникРасчетаНалогаУСН.ОписаниеДействияДекларация(
		Организация, Период, ТекстОшибки);
	
	Возврат ОписаниеДействияДекларация;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПоясненияКРасчету(Пояснения)
	
	Для НомерЭтапа = 1 По Пояснения.Количество() Цикл
		
		Этап = Пояснения[НомерЭтапа-1];
		
		Элементы["ГруппаЭтап" + НомерЭтапа].Видимость = Истина;
		
		Элементы["Этап" + НомерЭтапа + "НомерЭтапа"].Заголовок = Строка(Этап.НомерЭтапа) + ".";
		Элементы["Этап" + НомерЭтапа].Заголовок              = Этап.Пояснение;
		Элементы["Этап" + НомерЭтапа + "Значение"].Заголовок = Этап.Значение;
		
	КонецЦикла;
	
	Для НомерЭтапа = Пояснения.Количество() + 1 По 6 Цикл
		
		Элементы["ГруппаЭтап" + НомерЭтапа].Видимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПравилоИСрокЗадачи()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Объект.Период) Тогда 
		Срок = '00010101';
		СверкаВыполнена = Ложь;
		Возврат
	КонецЕсли;
	
	ВидНалога = Обработки.ПомощникРасчетаНалогаУСН.ВидНалога(Объект.Организация, Объект.Период);
	
	// Определяем по статусу задачи срок и правило, необходимые для перехода на статью ИТС и для сверки.
	
	ПорядокОтчетаУплаты = Обработки.ПомощникРасчетаНалогаУСН.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Объект.Организация, Объект.Период);
	
	ПорядокУплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПорядокОтчетаУплаты, "Уплата");
	
	Если ЗначениеЗаполнено(ПорядокУплаты) Тогда
		Срок    = ПорядокУплаты.Срок;
		Правило = ПорядокУплаты.Правило;
	Иначе
		Срок    = '00010101';
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
		СверкаВыполнена = Ложь;
	КонецЕсли;
	
	ПодсказкаПоНалогу = Обработки.ПомощникРасчетаНалогаУСН.ПодсказкаПоНалогу(НомерКвартала, Срок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	Если НомерКвартала = 4 И ЕстьДекларация Тогда
		// Если декларация уже подготовлена, реквизиты заведомо заполнены и проверять их не требуется.
		РеквизитыОрганизацииЗаполнены = Истина;
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	
	РеквизитыОрганизацииЗаполнены = Обработки.ПомощникРасчетаНалогаУСН.РеквизитыДляОтчетностиЗаполнены(
		Объект.Организация,
		Объект.Период,
		НезаполненныеРеквизиты);
		
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВедениеДеятельности()
	
	ДеятельностьОтсутствует = (Доходы = 0 И АвансовыеПлатежи = 0)
		И НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	Если ДеятельностьОтсутствует Тогда
		ДанныеУчетаАктуальны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасшифровкуРасчетовПрошлыхЛет()
	
	ДатаПрошлогоГода = НачалоГода(Объект.Период) - 1;
	
	ОписаниеДействия = ОписаниеДействияРасшифровкаРасчетовПрошлыхЛет(Объект.Организация, ДатаПрошлогоГода, Правило);
	
	ОткрытьФорму(ОписаниеДействия.ИмяФормы, ОписаниеДействия.ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеДействияРасшифровкаРасчетовПрошлыхЛет(Организация, Период, Правило)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Период",      Период);
	ПараметрыФормы.Вставить("Правило",     Правило);
	
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыДляРасшифровкиРасчетовПрошлыхЛет(Организация, Период));
	
	Возврат ОписаниеДействия;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыДляРасшифровкиРасчетовПрошлыхЛет(Организация, Период)
	
	// Для оплаты долга и расшифровки переплаты по налогу за период до начала работы в программе
	// используем помощник уплаты налога прошлых лет.
	// Исключение - ситуация, когда переплата по налогу прошлых лет образована не отраженными в программе платежами,
	// а указана в начальных остатках (сальдо счета 68.12 дебетовое).
	// Ситуация достаточно редкая, ее помощник оплаты налога прошлых лет отображать не умеет.
	
	// В остальных случаях показываем стандартную расшифровку расчетов по налогу за прошлые периоды.
	// Дебетовый начальный остаток по налогу (входящая переплата) будет отражен в сумме налога за прошлые периоды со знаком "минус".
	
	Если ТребуетсяПоказатьОплатуНалогаЗаПрошлыеПериоды(Организация, Период) Тогда
		Возврат "Обработка.ПомощникУплатыНалоговВзносовПрошлыхЛет.Форма.ФормаОплатыЗаПрошлыеПериоды";
	Иначе
		Возврат "Обработка.ПомощникРасчетаНалогаУСН.Форма.УплатаНалогаПрошлыхЛет";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяПоказатьОплатуНалогаЗаПрошлыеПериоды(Организация, НалоговыйПериод)
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	
	Возврат ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов)
		И Год(ГраницаОтчетностиПрошлыхПериодов) = Год(НалоговыйПериод)
		И УчетУСН.ОстатокРасчетовПоНалогуУСН(Организация, КонецГода(НалоговыйПериод)) <= 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегламентированныйОтчетУСН(Знач Ссылка, ИмяРегламентированногоОтчета)
	
	Если Не ЗначениеЗаполнено(Ссылка) Или ТипЗнч(Ссылка) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсточникОтчета");
	
	Возврат ИсточникОтчета = ИмяРегламентированногоОтчета;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПередСозданиемДекларации()
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		
		ОписаниеОбъектаПроверки = НСтр("ru = 'отчета'");
		
		СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(
			АдресХранилищаНезаполненныхРеквизитов,
			Объект.Организация,
			ОписаниеОбъектаПроверки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПередУплатойНалога()
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		
		ОписаниеОбъектаПроверки = НСтр("ru = 'оплаты налога'");
		
		СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(
			АдресХранилищаНезаполненныхРеквизитов,
			Объект.Организация,
			ОписаниеОбъектаПроверки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СообщитьОбОшибкеЗаполненияРеквизитовОрганизации(АдресХранилищаНезаполненныхРеквизитов, Организация, ОписаниеОбъектаПроверки)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
	
	ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
		Организация,
		НезаполненныеРеквизиты,
		"СообщениеТребуютсяРеквизиты",
		Истина,
		ОписаниеОбъектаПроверки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУплатаНалогаУСН(Налог)
	
	ВидыНалоговУСН = ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН();
	
	Возврат ВидыНалоговУСН.Найти(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога")) <> Неопределено;
	
КонецФункции

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда
		
		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
		Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Формат(Мин(Прогресс.Процент, 99), "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			ПроцентВыполнения = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			ПроцентВыполнения = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется расчет налога...'") + ПроцентВыполнения;
		
	ИначеЕсли ТребуетсяПроверятьАктуальность Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
	ТребуетсяПроверятьАктуальность = Ложь;
	
КонецФункции

#Область УплатаНалога

&НаСервере
Процедура ЗаполнитьОплатуНалогаИОтобразитьНаФорме()
	
	Платежи = Обработки.ПомощникРасчетаНалогаУСН.ДокументыУплатыНалогов(Объект.Организация, Объект.Период, Правило);
	ПлатежиУСН.Загрузить(Платежи);
	
	ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму();
	
	ПроверитьПолнотуУплатыНалогов();
	
	УстановитьДоступностьКнопокОплаты(ЭтотОбъект);
	
	УстановитьВидимостьПодсказокПоОплате(ЭтотОбъект);
	
	Обработки.ПомощникРасчетаНалогаУСН.УстановитьСтатусЗадачи(
		Объект.Организация,
		Правило,
		Объект.Период,
		ДанныеУчетаАктуальны,
		НалогКУплате,
		ПлатежиУСН);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму()
	
	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
		ДокументыОплаты(ЭтотОбъект));
	
	ПлатежиДляОтображения = ПомощникиПоУплатеНалоговИВзносов.ПлатежиДляОтображения(
		ЭтотОбъект.ПлатежиУСН, СостоянияИнтеграцииДокументов);
	ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиДляОтображения, "ПлатежУСН");
	
	ИнтеграцияСБанкамиФормы.ПолучитьДанныеИПоказатьБаннерСостоянияОтправки(ЭтотОбъект, СостоянияИнтеграцииДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПолнотуУплатыНалогов()
	
	РезультатПроверки = ПомощникиПоУплатеНалоговИВзносов.ПроверитьПолнотуУплаты(НалогКУплате, ПлатежиУСН);
	
	НалогОплаченПолностью = РезультатПроверки.НалогОплаченПолностью;
	
	Элементы.ОшибкаНесоответствиеСуммОплата.Видимость = РезультатПроверки.НалогУплаченНеВерно;
	ОшибкаНесоответствиеСуммОплата = РезультатПроверки.СообщениеОбОшибкеУплатыНалога;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРасчетыЗаПредыдущиеПериоды()
	
	СообщениеЗадолженностьЗаПредыдущийПериод = Обработки.ПомощникРасчетаНалогаУСН.ТекстСообщенияРасчетыПрошлыхЛет(
		Задолженность, ГраницаОтчетностиПрошлыхПериодов, ТребуетсяВводНачальныхОстатков);
	
	Элементы.ТекстРасчетыПрошлыхЛет.Заголовок = СообщениеЗадолженностьЗаПредыдущийПериод;
	
	// Оформление баннера расчетов.
	
	Если Задолженность > 0 Тогда
		
		Элементы.ФонРасчетыПрошлыхЛет.ЦветФона = ЦветаСтиля.ЦветФонаПредупреждения;
		
	ИначеЕсли ТребуетсяВводНачальныхОстатков Тогда
		
		Элементы.ФонРасчетыПрошлыхЛет.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
		
	Иначе
		
		// Баннер будет скрыт в УправлениеФормой().
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеДействияДляНовогоДокументаУплатыНалога(Организация, Сумма, СпособУплатыНалога, ПериодСобытия)
	
	Возврат Обработки.ПомощникРасчетаНалогаУСН.ОписаниеДействияУплатаНалога(Организация, Сумма,
		СпособУплатыНалога, ПериодСобытия, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыВыполненияЗадачиПодготовкиДекларации(Организация, Период)
	
	Порядок = Обработки.ПомощникРасчетаНалогаУСН.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, Период);
	
	Если Не ЗначениеЗаполнено(Порядок)
		Или Не Порядок.Свойство("Отчет")
		Или Не ЗначениеЗаполнено(Порядок.Отчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Организация", Организация);
	ПараметрыЗадачи.Вставить("Правило", Порядок.Отчет.Правило);
	ПараметрыЗадачи.Вставить("ПериодСобытия", Порядок.Отчет.ПериодСобытия);
	ПараметрыЗадачи.Вставить("РегистрацияВНалоговомОргане", Порядок.Отчет.РегистрацияВНалоговомОргане);
	
	Возврат ПараметрыЗадачи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СуммаНалогаВПлатежныхДокументах(ПлатежиУСН)
	
	Возврат ПлатежиУСН.Итог("Сумма");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовок(Форма)
	
	Если НЕ Форма.КонтекстныйВызов Тогда
		// Помощник открыт из командного меню - отображается заголовок по умолчанию.
		Форма.Заголовок = НСтр("ru = 'Отчетность по УСН'");
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ЧастиЗаголовка = Новый Массив;
	
	ЗаголовокИзПараметров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.Параметры, "Заголовок");
	
	Если ЗначениеЗаполнено(ЗаголовокИзПараметров) Тогда
		ЧастиЗаголовка.Добавить(ЗаголовокИзПараметров);
	Иначе
		Если КонецГода(Объект.Период) = КонецКвартала(Объект.Период) Тогда
			ШаблонЗаголовка = НСтр("ru = 'УСН, уплата за %1'");
		Иначе
			ШаблонЗаголовка = НСтр("ru = 'УСН, авансовый платеж за %1'");
		КонецЕсли;
		
		ПредставлениеПериода = НРег(ПредставлениеПериода(НачалоГода(Объект.Период), КонецКвартала(Объект.Период), "ФП=Истина"));
		
		ЧастиЗаголовка.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеПериода));
	КонецЕсли;
	
	ЧастиЗаголовка.Добавить(БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Объект.Организация));
	
	Форма.Заголовок = СтрСоединить(ЧастиЗаголовка, " ");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопокОплаты()
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	НадоВыбратьСпособОплаты = НЕ ЗначениеЗаполнено(СпособОплаты);
	
	Элементы.УплатитьНалогБанк.Видимость = Не ДеятельностьОтсутствует
		И (НадоВыбратьСпособОплаты ИЛИ СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод);
	
	Элементы.УплатитьНалогКасса.Видимость = Не ДеятельностьОтсутствует
		И (НадоВыбратьСпособОплаты ИЛИ СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоступностьКнопокОплаты(Форма)
	
	Элементы = Форма.Элементы;
	
	ДоступностьДокументовУплаты = Форма.МожноСоздаватьДокументыУплаты
		И СуммаНалогаВПлатежныхДокументах(Форма.ПлатежиУСН) < Форма.НалогКУплате;
	
	Элементы.УплатитьНалогБанк.Доступность  = ДоступностьДокументовУплаты;
	Элементы.УплатитьНалогКасса.Доступность = ДоступностьДокументовУплаты;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьВидимостьПодсказокПоОплате(Форма)
	
	ЕстьДокументыОплатыПоБанку = ЕстьДокументыОплатыПоДиректБанку(Форма);
	Форма.Элементы.КакОплатитьСБанковскогоСчетаДиректБанк.Видимость = 
		Форма.ИнтерфейсИнтеграцииСБанками И ЕстьДокументыОплатыПоБанку;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДокументыОплатыПоДиректБанку(Форма)
	
	ПлатежныеПоручения = Новый Массив;
	
	Для Каждого СтрокаОплаты Из Форма.ПлатежиУСН Цикл
		Если ТипЗнч(СтрокаОплаты.Ссылка) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ПлатежныеПоручения.Добавить(СтрокаОплаты.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ПлатежныеПоручения", ПлатежныеПоручения);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлатежноеПоручение.СчетОрганизации.Банк КАК Банк
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Ссылка В(&ПлатежныеПоручения)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Банк) Тогда
			НастройкаОбмена = ОбменСБанками.НастройкаОбмена(Форма.Объект.Организация, Выборка.Банк);
			Возврат ЗначениеЗаполнено(НастройкаОбмена);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ХэшДанныхБаннера(Знач ДокументыОплаты)
	
	Возврат ИнтеграцияСБанкамиФормы.ХэшДанныхБаннера(ДокументыОплаты);
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументУплатыНалога(СпособУплатыНалога)
	
	Если НЕ ПроверитьЗаполнениеПередУплатойНалога() Тогда
		Возврат;
	КонецЕсли;
	
	СуммаПлатежа = НалогКУплате - СуммаНалогаВПлатежныхДокументах(ПлатежиУСН);
	
	ОписаниеДействияПлатеж = ОписаниеДействияДляНовогоДокументаУплатыНалога(Объект.Организация, СуммаПлатежа,
		СпособУплатыНалога, Объект.Период);
	
	Если ОписаниеДействияПлатеж <> Неопределено Тогда
		
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияПлатеж);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		УправлениеФормойНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	ЗаполнитьАктуальныеПоказателиИПояснения();
	
КонецПроцедуры

#КонецОбласти

#Область ВыборПериода

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)
	
	ЗаполнитьНачальныеПоказатели();
	
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоГода(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыВыбора.Вставить("КонецПериода",  КонецПериода);
	ПараметрыВыбора.Вставить("НарастающимИтогом", Истина);
	ПараметрыВыбора.Вставить("МинимальныйПериод", НачалоКвартала(ДатаРегистрацииОрганизации));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал",
		ПараметрыВыбора, Элементы.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальностиДанных

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	Если Не ТребуетсяПроверятьАктуальность Или ДеятельностьОтсутствует Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		ВозможнаБыстраяАктуализация = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		ПараметрДляЗависимыхФорм = ЗависимыеФормыРасшифровок.ВыгрузитьЗначения();
		Оповестить("ОбновитьПоказателиРасчетаУСН", ПараметрДляЗависимыхФорм, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = КонецКвартала(Объект.Период);
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ЗаполнитьАктуальныеПоказателиИПояснения();
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	ИначеЕсли ВозможнаБыстраяАктуализация
	   И Не ЗаданиеЗапущеноВДругойФорме
	   И ЗначениеЗаполнено(Объект.Организация)
	   И ЗначениеЗаполнено(Объект.Период)
	   И ПустаяСтрока(СообщениеОбОшибке) Тогда
	   
		ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
		Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			АктуализироватьДанные();
		Иначе
			
			ДанныеУчетаАктуальны = Ложь;
			ВозможнаБыстраяАктуализация = Истина;
			
			Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
				// Задание запущено в другой форме
				ЗаданиеЗапущеноВДругойФорме = Истина;
				ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
					ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
			Иначе
				ЗаданиеЗапущеноВДругойФорме = Ложь;
			КонецЕсли;
			
			ОбновитьСтатусФоновогоЗадания();
			
		КонецЕсли;
		
	Иначе
		
		ТребуетсяПроверятьАктуальность = Ложь;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		УправлениеФормойНаСервере();
		
	КонецЕсли;
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		ПараметрДляЗависимыхФорм = ЗависимыеФормыРасшифровок.ВыгрузитьЗначения();
		Оповестить("ОбновитьПоказателиРасчетаУСН", ПараметрДляЗависимыхФорм, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(Объект.Период);
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = ВозможнаБыстраяАктуализация;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		УправлениеФормойНаСервере();
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		
		ПроверитьАктуальностьДанных();
		Если ИнтерфейсИнтеграцииСБанками Тогда
			ПараметрДляЗависимыхФорм = ЗависимыеФормыРасшифровок.ВыгрузитьЗначения();
			Оповестить("ОбновитьПоказателиРасчетаУСН", ПараметрДляЗависимыхФорм, ЭтотОбъект);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
	 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	Иначе
		ПроведенАнализВариантаАктуализации = ВозможнаБыстраяАктуализация
			И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
		ВозможнаБыстраяАктуализация = РезультатАктуализации.АктуализацияДляРасчетаНалога;
	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ЗаполнитьАктуальныеПоказателиИПояснения();
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	Иначе
		
		Если Не ПроведенАнализВариантаАктуализации Тогда
			// При запуске актуализации мы уже знали, полная она или частичная.
			ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект,
				РезультатАктуализации,
				НСтр("ru='Расчет налога не выполнен. Обнаружены ошибки.'"));
		КонецЕсли;
		
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Объект.Организация));
		ТребуетсяПроверятьАктуальность = Ложь;
		
		УправлениеФормойНаСервере();
		
	КонецЕсли;
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		ПараметрДляЗависимыхФорм = ЗависимыеФормыРасшифровок.ВыгрузитьЗначения();
		Оповестить("ОбновитьПоказателиРасчетаУСН", ПараметрДляЗависимыхФорм, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеБаннераСостоянияОтправки()
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки() Экспорт
	
	Если ХэшДанныхБаннера(ДокументыОплаты(ЭтотОбъект)) <> ХешДанныхБаннера Тогда
		ЗаполнитьОплатуНалогаИОтобразитьНаФорме();
	КонецЕсли;
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыОплаты(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	Для Каждого Платеж Из Форма.ПлатежиУСН Цикл
		ДокументыОплаты.Добавить(Платеж.Ссылка);
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

#КонецОбласти

#Область Сверка

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Правило)
		ИЛИ Не ЗначениеЗаполнено(Срок) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляСверки       = ПараметрыДляСверки();
	СтруктураСведенийОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСведенийОСверке,
		"СверкаВыполнена, ОписаниеДействияСверка, ЗапросНаСверкуНаименование");
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСверки()
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Объект.Организация;
	ПараметрыДляСверки.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане;
	ПараметрыДляСверки.Правило = Правило;
	ПараметрыДляСверки.ИдентификаторЗадачи = Правило.Владелец.Код;
	ПараметрыДляСверки.ПериодСобытия =  Объект.Период;
	ПараметрыДляСверки.Срок          = Срок;
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПроверкаПредупрежденийПриЗагрузке

&НаСервереБезКонтекста
Функция НайтиПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода)
	
	Возврат Обработки.ПомощникРасчетаНалогаУСН.ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

#КонецОбласти
