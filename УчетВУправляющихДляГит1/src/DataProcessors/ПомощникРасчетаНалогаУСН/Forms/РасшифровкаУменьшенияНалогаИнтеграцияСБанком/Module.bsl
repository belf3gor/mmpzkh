&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Организация, НачалоПериода, КонецПериода, ДанныеУчетаАктуальны");
	
	СтатусыОпераций = Обработки.ПомощникРасчетаНалогаУСН.СтатусыОперацийИнтеграцияСБанком();
	
	Список.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", НачалоПериода);
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", КонецПериода);
	Список.Параметры.УстановитьЗначениеПараметра("ВидыНалогов", ВидыНалоговУменьшающиеНалог());
	Список.Параметры.УстановитьЗначениеПараметра("БанковскиеСчетаВРежимеИнтеграции",
		Справочники.НастройкиИнтеграцииСБанками.БанковскиеСчетаОрганизацииВРежимеИнтеграции(Организация));
	Список.Параметры.УстановитьЗначениеПараметра("СтатусОперацииПоСчетуВРежимеИнтеграции",
		СтатусыОпераций.ОперацияПоОсновномуБанковскомуСчету);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусОперацииПоДругомуСчетуИлиНаличными",
		СтатусыОпераций.ОперацияПоДругомуСчетуИлиНаличными);
	
	УстановитьТекстЗаголовка();
	
	Если ДанныеУчетаАктуальны Тогда
		ОбновитьИтоги();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ДанныеУчетаАктуальны Тогда
		ПередНачаломДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьПоказателиРасчетаУСН" И Источник <> ЭтотОбъект Тогда
		
		Если ВладелецФормы <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Параметр)
				И Параметр.Найти(ИмяФормы) <> Неопределено Тогда
				
				ИдентификаторЗаданияАктуализации = ВладелецФормы.ИдентификаторЗаданияАктуализации;
				ИдентификаторЗаданияПроверкиАктуализации = ВладелецФормы.ИдентификаторЗаданияПроверкиАктуализации;
				ЗаданиеЗапущеноВДругойФорме = ВладелецФормы.ЗаданиеЗапущеноВДругойФорме;
				ДанныеУчетаАктуальны = ВладелецФормы.ДанныеУчетаАктуальны;
				ПланируетсяФоновоеЗадание = Не ДанныеУчетаАктуальны
					И Не ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации)
					И Не ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации);
				
				ОбновитьСтатусФоновогоЗадания();
				
				Если ДанныеУчетаАктуальны Тогда
					ОбновитьСписок();
				КонецЕсли;
				
			Иначе
				
				ВладелецФормы.ЗарегистрироватьЗависимуюФорму(ИмяФормы);
				
			КонецЕсли;
			
		ИначеЕсли Не ВводДоступен() Тогда
			
			ДанныеУчетаАктуальны = Ложь;
			ПередНачаломДлительнойОперации();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И ВладелецФормы <> Неопределено Тогда
		ВладелецФормы.ЗарегистрироватьЗависимуюФорму(ИмяФормы, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ДанныеСтроки <> Неопределено Тогда
		ОткрытьОперацию(Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	ДоступностьКомандыУдалитьОперацию = (ДанныеСтроки <> Неопределено
		И ДанныеСтроки.СтатусДохода = СтатусыОпераций.ОперацияПоДругомуСчетуИлиНаличными);
	
	Элементы.УдалитьОперацию.Доступность = ДоступностьКомандыУдалитьОперацию;
	Элементы.СписокКонтекстноеМенюУдалитьОперацию.Доступность = ДоступностьКомандыУдалитьОперацию;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьОплатуЧерезБанк(Команда)
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.СоздатьОплатуЧерезБанк(
		Организация,
		КонецПериода,
		ВидыНалоговУменьшающиеНалог(),
		ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"),
		ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка"));
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуНаличными(Команда)
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.СоздатьОплатуНаличными(
		Организация,
		КонецПериода,
		ВидыНалоговУменьшающиеНалог(),
		ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОперацию(Команда)
	
	ДанныеСтроки = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ДанныеСтроки <> Неопределено Тогда
		ОткрытьОперацию(ДанныеСтроки.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОперацию(Команда)
	
	ДанныеСтроки = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить документ оплаты №%1 от %2?'"),
			ДанныеСтроки.Номер,
			Формат(ДанныеСтроки.Дата, "ДЛФ=D"));
		
		ДополнительныеПараметры = Новый Структура("Ссылка", ДанныеСтроки.Ссылка);
		Оповещение = Новый ОписаниеОповещения("УдалитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОперациюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьДокумент(ДополнительныеПараметры.Ссылка);
		Оповестить("ОбновитьПоказателиРасчетаУСН", , ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ВыполняетсяФоновоеЗадание = Форма.ПланируетсяФоновоеЗадание
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации)
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияПроверкиАктуализации);
		
	Элементы.Список.Видимость = Не ВыполняетсяФоновоеЗадание;
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость = ВыполняетсяФоновоеЗадание;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОперацию(Операция)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Операция);
	ПараметрыФормы.Вставить("НалоговыйПериод", КонецПериода);
	
	ОткрытьФорму(ИмяФормыДокумента(Операция), ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокумент(Ссылка)
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	ДокументОбъект.УстановитьПометкуУдаления(Истина);
	
	Элементы.Список.Обновить();
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	ИтогиДинамическогоСписка = ОбщегоНазначенияБП.ИтогиДинамическогоСписка(Список, "Сумма,УменьшаетНалог");
	ИтогиСумма = ИтогиДинамическогоСписка.Сумма;
	ИтогиУменьшаетНалог = ИтогиДинамическогоСписка.УменьшаетНалог;
	
КонецПроцедуры

&НаСервере
Функция УстановитьТекстЗаголовка()
	
	Заголовок = СтрШаблон(
		НСтр("ru = 'Страховые взносы за %1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, Истина));
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяФормыДокумента(Ссылка)
	
	Возврат СтрШаблон("Документ.%1.ФормаОбъекта", Ссылка.Метаданные().Имя);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыНалоговУменьшающиеНалог()
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть"));
	ВидыНалогов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС"));
	
	Возврат Новый ФиксированныйМассив(ВидыНалогов);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписок()
	
	Элементы.Список.Обновить();
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	ПланируетсяФоновоеЗадание = Истина;
	АктуализацияДляРасчетаНалога = Истина;
	
	СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
	
	УправлениеФормой(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда

		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
		Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Формат(Мин(Прогресс.Процент, 99), "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			ПроцентВыполнения = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			ПроцентВыполнения = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется расчет налога...'") + ПроцентВыполнения;
		
	ИначеЕсли ПланируетсяФоновоеЗадание Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
	ПланируетсяФоновоеЗадание = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецФункции

#Область ПроверкаАктуальностиДанных

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		АктуализацияДляРасчетаНалога = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Организация;
	ПараметрыПроверки.Период                       = КонецКвартала(КонецПериода);
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ИдентификаторЗаданияПроверкиАктуализации = Новый УникальныйИдентификатор;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если ДанныеУчетаАктуальны Тогда
		ПланируетсяФоновоеЗадание = Ложь;
		ОбновитьСписок();
	ИначеЕсли Не ЗаданиеЗапущеноВДругойФорме Тогда
		
		ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Организация, УникальныйИдентификатор);
		Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			АктуализироватьДанные();
		Иначе
			
			ДанныеУчетаАктуальны = Ложь;
			АктуализацияДляРасчетаНалога = Истина;
			
			Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
				// Задание запущено в другой форме
				ЗаданиеЗапущеноВДругойФорме = Истина;
				ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
					ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
			Иначе
				ЗаданиеЗапущеноВДругойФорме = Ложь;
			КонецЕсли;
			
			ОбновитьСтатусФоновогоЗадания();
			
		КонецЕсли;
		
	Иначе
		ПланируетсяФоновоеЗадание = Ложь;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура АктуализироватьДанные()
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(КонецПериода);
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = АктуализацияДляРасчетаНалога;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		ПроверитьАктуальностьДанных();
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
	 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	Иначе
		ПроведенАнализВариантаАктуализации = АктуализацияДляРасчетаНалога
			И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
		АктуализацияДляРасчетаНалога = РезультатАктуализации.АктуализацияДляРасчетаНалога;
	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	
	Если ДанныеУчетаАктуальны Тогда
		
		ПланируетсяФоновоеЗадание = Ложь;
		ОбновитьСписок();
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Организация));
		
	Иначе
		
		Если Не ПроведенАнализВариантаАктуализации Тогда
			// При запуске актуализации мы уже знали, полная она или частичная.
			ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		КонецЕсли;
		
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Организация));
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
