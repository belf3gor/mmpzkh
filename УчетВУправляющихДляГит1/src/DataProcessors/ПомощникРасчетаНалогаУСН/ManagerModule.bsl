#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("ПолноеИмяПравила",
		Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ТипПолногоИмениПравила());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. Обработки.ПомощникУплатыНалога.НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусЗадачи(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета неактуальны (не закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//
//  Возвращаемое значение:
//   Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//
Функция НачальныеПоказатели(Организация, Период) Экспорт
	
	Показатели = НовыйПоказатели(Организация, Период);
	
	Если НЕ ЗначениеЗаполнено(Показатели.СообщениеОбОшибке)
		И Показатели.КонецПериода >= Показатели.НачалоНалоговогоПериода
		И НЕ Показатели.НалоговыйПериодПропущен Тогда
		
		ЗаполнитьНачальныеПоказатели(Показатели);
		ОпределитьПорядокДействий(Показатели);
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

#Область ПубликацияДанных

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	
	ОписаниеВозвращаемыхДанных.Наименование   = НСтр("ru = 'Помощник расчета налога УСН'");
	ОписаниеВозвращаемыхДанных.Описание       = НСтр("ru = 'Помощник расчета налога УСН'");
	ОписаниеВозвращаемыхДанных.МодульМенеджер = Обработки.ПомощникРасчетаНалогаУСН;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ПубликуемыеДанныеПомощника(Параметры, КодВозврата, Ошибка, СообщениеОбОшибке);
	ИдентификаторДанных = СтрШаблон("%1.%2", ПубликуемыйИдентификатор(), "json");
	Если ДанныеОтчета <> Неопределено Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(ДанныеОтчета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор помощника.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "tax_usn_calculator";
	
КонецФункции

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные помощника.
//  Период -Дата - дата в квартале, за который требуются публикуемые данные.
//
// Возвращаемое значение:
//  Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация, Период) Экспорт
	
	Настройки = Новый Структура;
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	Настройки.Вставить("organization", РеквизитыОрганизации);
	Настройки.Вставить("date", Период);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает сумму налога к уплате.
//
// Параметры:
//   ПараметрыРасчета - Структура - параметры для расчета суммы налога к уплате,
//                      состав см. ПлатежиВБюджетПереопределяемый.НовыеПараметрыРасчетаНалогаКУплате().
//
// Возвращаемое значение:
//   Число - сумма налога к уплате за вычетом совершенных платежей.
//
Функция СуммаНалогаКУплате(ПараметрыРасчета) Экспорт
	
	Организация         = ПараметрыРасчета.Организация;
	НалоговыйПериод     = ПараметрыРасчета.НалоговыйПериод;
	ОплатаЗадолженности = ПараметрыРасчета.ОплатаЗадолженности;
	
	Если ОплатаЗадолженности Тогда
		Возврат СуммаЗадолженностиПоНалогуКУплате(Организация, НалоговыйПериод);
	Иначе
		Возврат СуммаНалогаЗаПериодКУплате(Организация, НалоговыйПериод);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета неактуальны (не закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//
//  Возвращаемое значение:
//   Результат - Структура, с полями:
//    * Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//    * Пояснения - ТаблицаЗначений - Поля описаны в функции НовыйПоясненияРасчета()
//
Функция АктуальныеПоказателиРасчетаСПояснениями(Организация, Период) Экспорт
	
	Показатели = АктуальныеПоказатели(Организация, Период);
	
	Результат = Новый Структура;
	Результат.Вставить("Показатели", Показатели);
	Результат.Вставить("Пояснения",  НовыйПоясненияРасчета());
	
	ЗаполнитьПоясненияКРасчету(Результат.Пояснения, Результат.Показатели);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с показателями для расчета налога УСН.
// Используется когда данные учета актуальны (закрыт квартал)
//
//  Параметры:
//   Организация  - СправочникСсылка.Организации - Организация, для которого нужны показатели.
//   Период       - Дата - Квартал, для которого нужны показатели.
//
//  Возвращаемое значение:
//   Показатели - Структура - Поля описаны в функции НовыйПоказатели()
//
Функция АктуальныеПоказатели(Организация, Период) Экспорт
	
	Показатели = НовыйПоказатели(Организация, Период);
	
	ЗаполнитьАктуальныеПоказатели(Показатели);
	ОпределитьПорядокДействий(Показатели);
	
	Возврат Показатели;
	
КонецФункции

Функция ПодсказкаПоНалогу(НомерКвартала, СрокУплаты) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СрокУплаты) Тогда
		Возврат "";
	КонецЕсли;
	
	СодержимоеСтроки = Новый Массив;
	
	Если НомерКвартала <> 4 Тогда
		
		СодержимоеСтроки.Добавить(НСтр("ru = 'Авансовый платеж требуется уплатить '"));
		
	Иначе
		
		СодержимоеСтроки.Добавить(НСтр("ru = 'Подать декларацию и уплатить налог требуется '"));
		
	КонецЕсли;
	
	СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = 'не позднее %1'"), Формат(СрокУплаты, "ДЛФ=DD")));
	
	Если НомерКвартала > 1 Тогда
		
		СодержимоеСтроки.Добавить(Символы.ПС + СтрШаблон(НСтр("ru = 'Налог уплачивается за вычетом авансовых платежей за %1.'"),
			ПредставлениеПериодаДляПояснения(НомерКвартала-1)));
		
	КонецЕсли;
	
	Если НомерКвартала <> 4 Тогда
		
		СодержимоеСтроки.Добавить(Символы.ПС + НСтр("ru = 'Декларация по УСН подается только по итогам года.'"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Функция РасходыУменьшающиеНалог(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КнигаРаздел4.Период КАК Период,
	|	СУММА(КнигаРаздел4.ПФР) КАК ПФР,
	|	СУММА(КнигаРаздел4.ФСС) КАК ФСС,
	|	СУММА(КнигаРаздел4.ФОМС) КАК ФОМС,
	|	СУММА(КнигаРаздел4.ФСС_НС) КАК ФСС_НС,
	|	СУММА(КнигаРаздел4.Больничные) КАК Больничные,
	|	СУММА(КнигаРаздел4.ДобровольноеСтрахование) КАК ДобровольноеСтрахование,
	|	ВЫБОР
	|		КОГДА КнигаРаздел4.ДокументРасхода <> НЕОПРЕДЕЛЕНО
	|			ТОГДА КнигаРаздел4.ДокументРасхода
	|		ИНАЧЕ КнигаРаздел4.Регистратор
	|	КОНЕЦ КАК ДокументРасхода,
	|	КнигаРаздел4.РеквизитыПервичногоДокумента КАК РеквизитыПервичногоДокумента
	|ПОМЕСТИТЬ ВТ_КнигаРаздел4
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходовРаздел4 КАК КнигаРаздел4
	|ГДЕ
	|	КнигаРаздел4.Организация = &Организация
	|	И КнигаРаздел4.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаРаздел4.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	КнигаРаздел4.Период,
	|	КнигаРаздел4.РеквизитыПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА КнигаРаздел4.ДокументРасхода <> НЕОПРЕДЕЛЕНО
	|			ТОГДА КнигаРаздел4.ДокументРасхода
	|		ИНАЧЕ КнигаРаздел4.Регистратор
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК Период,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК НомерДокумента,
	|	ТИПЗНАЧЕНИЯ(ВТ_КнигаРаздел4.ДокументРасхода) КАК ВидДокумента,
	|	ВТ_КнигаРаздел4.ДокументРасхода КАК ДокументРасхода,
	|	ВТ_КнигаРаздел4.ПФР КАК ПФР,
	|	ВТ_КнигаРаздел4.ФСС КАК ФСС,
	|	ВТ_КнигаРаздел4.ФОМС КАК ФОМС,
	|	ВТ_КнигаРаздел4.ФСС_НС КАК ФСС_НС,
	|	ВТ_КнигаРаздел4.Больничные КАК Больничные,
	|	ВТ_КнигаРаздел4.ДобровольноеСтрахование КАК ДобровольноеСтрахование,
	|	ВТ_КнигаРаздел4.РеквизитыПервичногоДокумента КАК РеквизитыПервичногоДокумента
	|ИЗ
	|	ВТ_КнигаРаздел4 КАК ВТ_КнигаРаздел4
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО (ДанныеПервичныхДокументов.Организация = &Организация)
	|			И ВТ_КнигаРаздел4.ДокументРасхода = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ВидДокумента,
	|	ДокументРасхода"
	;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УстановитьСтатусЗадачи(Организация, Правило, Период, НалогНачислен, СуммаНалога, Платежи) Экспорт
	
	ПериодСобытияЗадачи = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(
		УчетУСН.ПериодичностьНалоговогоПлатежа(Период),
		Период);
	
	ПараметрыЗадачи = Новый Структура("Организация, ПериодСобытия, Правило, РегистрацияВНалоговомОргане",
		Организация, ПериодСобытияЗадачи, Правило, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	ВыполнениеЗадачБухгалтера.ПроверитьАктуальностьСтатуса(
		ПараметрыЗадачи,
		СтатусЗадачиПоОплате(НалогНачислен, СуммаНалога, Платежи));
	
КонецПроцедуры

// Возвращает описание действия для подготовки декларации из помощника
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация помощника
//   Период - Дата - период помощника
//   ТекстОшибки - Строка - описание ошибки, препятствующей подготовке декларации
//
// Возвращаемое значение:
//   Структура
//     * ИмяФормы - имя формы декларации
//     * ПараметрыФормы - параметры для открытия формы декларации
//   Неопределено - если декларация за указанный период не требуется
//
Функция ОписаниеДействияДекларация(Организация, Период, ТекстОшибки = "") Экспорт
	
	ОписаниеДействия = Неопределено;
	
	НачалоНалоговогоПериода = НачалоНалоговогоПериода(
		Организация, Период, Справочники.Организации.ДатаРегистрацииОрганизации(Организация));
	
	Если Не ОрганизацияПлательщикУСН(Организация, Период, НачалоНалоговогоПериода) Тогда
		ТекстОшибки = НСтр("ru = 'Организация не применяет УСН.'");
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре);
	
	Если КонецКвартала(Период) <> НалоговыйПериод.Конец Тогда
		Возврат ОписаниеДействия;
	КонецЕсли;
	
	Порядок = ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Период);
	
	ПорядокПредоставленияОтчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Порядок, "Отчет", Неопределено);
	
	Если ПорядокПредоставленияОтчета <> Неопределено Тогда
		
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
		
		ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
			ПорядокПредоставленияОтчета.Правило,
			ПорядокПредоставленияОтчета.ПериодСобытия,
			Организация,
			РегистрацияВНалоговомОргане);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Порядок предоставления отчета не определен'");
		
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияУплатаНалога(Организация, Сумма, СпособУплаты, ПериодСобытия, ОплатаЗадолженности) Экспорт
	
	ВидНалога = ВидНалога(Организация, ПериодСобытия);
	
	Возврат ВыполнениеЗадачБухгалтера.ОписаниеДействияПлатежУСН(Организация, Сумма,
		СпособУплаты, ВидНалога, ПериодСобытия, ОплатаЗадолженности);
	
КонецФункции

// Возвращает порядок предоставления отчета и оплаты УСН за период.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация помощника
//   Период - Дата - период помощника
//
// Возвращаемое значение:
//   Структура, Неопределено -  См. РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод
//
Функция ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(Организация, Период) Экспорт
	
	ВидНалога = ВидНалога(Организация, Период);
	
	Возврат РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(Период));
	
КонецФункции

Функция ДокументыУплатыНалогов(Организация, Период, Правило = Неопределено) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	Если ЗначениеЗаполнено(Правило) Тогда
		ПараметрыУплатыНалогов.Правило = Правило;
	Иначе
		ПараметрыУплатыНалогов.КодыЗадач.Добавить("УСН");
	КонецЕсли;
	
	ВидНалога = ВидНалога(Организация, Период);
	
	ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалога);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецКвартала(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

Функция СтатусыОперацийИнтеграцияСБанком() Экспорт
	
	СтатусыОпераций = Новый Структура;
	СтатусыОпераций.Вставить("ОперацияПоОсновномуБанковскомуСчету", 0);
	СтатусыОпераций.Вставить("ОперацияПоДругомуСчетуИлиНаличными", 1);
	
	Возврат СтатусыОпераций;
	
КонецФункции

Функция РеквизитыДляОтчетностиЗаполнены(Знач Организация, Период, НезаполненныеРеквизиты) Экспорт
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизиты(Организация, Период);
	
	Возврат ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация,
		ПроверяемыеРеквизиты,
		НезаполненныеРеквизиты);
	
КонецФункции

Функция ПроверяемыеРеквизиты(Организация, Период) Экспорт
	
	ПроверяемыеРеквизиты = ПроверяемыеРеквизитыДляУплатыНалога(Организация);
	
	РеквизитыДляДекларации = ПроверяемыеРеквизитыДляДекларации(Организация, Период);
	Если ЗначениеЗаполнено(РеквизитыДляДекларации) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, РеквизитыДляДекларации, Истина);
	КонецЕсли;
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

Функция ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(Период) Экспорт
	
	Если НомерКвартала(Период) = 4 Тогда
		Возврат НСтр("ru = 'заполнения декларации по УСН'");
	Иначе
		Возврат НСтр("ru = 'уплаты авансового платежа УСН'");
	КонецЕсли;
	
КонецФункции

Функция ВидНалога(Организация, Период) Экспорт
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период) Тогда
		ВидНалога = Перечисления.ВидыНалогов.УСН_Доходы;
	Иначе
		ВидНалога = Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы;
	КонецЕсли;
	
	Возврат ВидНалога;
	
КонецФункции

Функция ИмяРеглОтчета() Экспорт
	Возврат "РегламентированныйОтчетУСН";
КонецФункции

Функция ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибкиЗагрузкиВыписки", Ложь);
	Результат.Вставить("ТекстОшибкиЗагрузкиВыписки", "");
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	ПараметрыОтбораПредупреждений.НачалоПериода = НачалоПериода;
	ПараметрыОтбораПредупреждений.КонецПериода = КонецПериода;
	ПараметрыОтбораПредупреждений.ТипДокументов = "ПоступлениеНаРасчетныйСчет";
	
	ЕстьПредупрежденияПриЗагрузкеДоходов =
		РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
	ПараметрыОтбораПредупреждений.ТипДокументов = "СписаниеСРасчетногоСчета";
	
	ЕстьПредупрежденияПриЗагрузкеВозвратов =
		РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
	Результат.ЕстьОшибкиЗагрузкиВыписки = ЕстьПредупрежденияПриЗагрузкеДоходов Или ЕстьПредупрежденияПриЗагрузкеВозвратов;
	Результат.ТекстОшибкиЗагрузкиВыписки =
		ТекстПредупрежденияПриЗагрузкеВыписки(ЕстьПредупрежденияПриЗагрузкеДоходов, ЕстьПредупрежденияПриЗагрузкеВозвратов);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстСообщенияРасчетыПрошлыхЛет(Задолженность, ГраницаОтчетностиПрошлыхПериодов, ТребуетсяВводОстатков) Экспорт
	
	ЧастиСообщения = Новый Массив;
	
	Если Задолженность > 0 Тогда
		
		ЧастиСообщения = Новый Массив;
		
		ЧастиСообщения.Добавить(НСтр("ru = 'Не оплачена задолженность'"));
		ЧастиСообщения.Добавить(" ");
		
		ЧастиСообщения.Добавить(
			Новый ФорматированнаяСтрока(ОбщегоНазначенияБПВызовСервера.ФорматСумм(Задолженность), , , , "ОплатитьЗадолженность"));
		
		ЧастиСообщения.Добавить(" ");
		ЧастиСообщения.Добавить(НСтр("ru = 'по налогу за прошлые годы'"));
		
	ИначеЕсли ТребуетсяВводОстатков Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не введены остатки по налогу на начало %1 года.'"), Формат(Год(ГраницаОтчетностиПрошлыхПериодов) + 1, "ЧГ=0"));
		ЧастиСообщения.Добавить(ТекстСообщения);
		
		ЧастиСообщения.Добавить(" ");
		ЧастиСообщения.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Ввести остатки'"), , , , "ВвестиНачальныеОстатки"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСообщения);
	
КонецФункции

#Область УплатаНалогаПрошлыхЛет

// Возвращает список документов на уплату задолженности по налогам.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ДокументыУплатыНалогаПрошлыхЛет(Организация, Период) Экспорт
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.КодыЗадач.Добавить("УСН");
	
	ВидыНалогов = ПлатежиВБюджетКлиентСерверПереопределяемый.ВидыНалоговУСН();
	Для Каждого ВидНалогаУСН Из ВидыНалогов Цикл
		ПараметрыУплатыНалогов.ВидыНалогов.Добавить(ВидНалогаУСН);
	КонецЦикла;
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	ПараметрыУплатыНалогов.ОтборОплатаЗадолженности = Истина;
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода = КонецГода(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Статусы

Функция СтатусЗадачи(ПараметрыЗадачи)
	
	ПравилоУплаты = ПараметрыЗадачи.Правило;
	Период        = НачалоДня(КонецКвартала(ПараметрыЗадачи.ПериодСобытия));
	Организация   = ПараметрыЗадачи.Организация;
	
	Показатели = АктуальныеПоказатели(ПараметрыЗадачи.Организация, Период);
	
	Платежи = Обработки.ПомощникРасчетаНалогаУСН.ДокументыУплатыНалогов(
		ПараметрыЗадачи.Организация, Период, ПравилоУплаты);
	
	Возврат СтатусЗадачиПоОплате(Показатели.НалогНачислен, Показатели.НалогКУплате, Платежи);
	
КонецФункции

Функция СтатусЗадачиПоОплате(НалогНачислен, НалогКУплате, Платежи)
	
	Статус = "";
	
	Если Не НалогНачислен Тогда
		Возврат Статус;
	КонецЕсли;
	
	СуммаОплаты = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(Платежи);
	
	Если СуммаОплаты >= НалогКУплате Тогда
		Статус = "Оплачено";
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоясненияКРасчету(Пояснения, Показатели)
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		ЗаполнитьПоясненияКРасчетуОбъектДоходы(Пояснения, Показатели);
	Иначе
		ЗаполнитьПоясненияКРасчетуОбъектДоходыМинусРасходы(Пояснения, Показатели);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияКРасчетуОбъектДоходы(ТаблицаЭтапы, Показатели)
	
	ЕстьНаемныеРаботники = Показатели.ПроцентУменьшенияНалога = 50;
	
	ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'");
	
	ЭтоИнтерфейсИнтеграцииСБанком = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	НомерКвартала                 = Показатели.НомерКвартала;
	ПредставлениеПериодаПояснение = Показатели.ПредставлениеПериодаПояснение;
	ПредставлениеПериодаАванса    = Показатели.ПредставлениеПериодаАванса;
	СтавкаНалога                  = Строка(Показатели.СтавкаНалога) + "%";
	Доходы                        = Формат(Показатели.Доходы,                  ФорматЧиселВПояснении);
	ВозвратыПокупателям           = Формат(Показатели.ВозвратыПокупателям,     ФорматЧиселВПояснении);
	НалогВсего                    = Формат(Показатели.НалогВсего,              ФорматЧиселВПояснении);
	УменьшениеНалогаФакт          = Формат(Показатели.УменьшениеНалогаФакт,    ФорматЧиселВПояснении);
	РасходыУменьшающиеНалог       = Формат(Показатели.РасходыУменьшающиеНалог, ФорматЧиселВПояснении);
	НалогИсчисленныйВсего         = Формат(Показатели.НалогИсчисленныйВсего,   ФорматЧиселВПояснении);
	АвансовыеПлатежи              = Формат(Показатели.АвансовыеПлатежи,        ФорматЧиселВПояснении);
	Переплата                     = Формат(Показатели.Переплата,               ФорматЧиселВПояснении);
	НалогКУплате                  = Формат(Показатели.НалогКУплате,            ФорматЧиселВПояснении);
	
	НомерЭтапа = 0;
	
	// Этап №1
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
		ШаблонОсновногоТекста = НСтр("ru = 'Налог за %1 = (Доходы - Возвраты покупателям) * Ставка налога'");
	Иначе
		ШаблонОсновногоТекста = НСтр("ru = 'Налог за %1 = Доходы * Ставка налога'");
	КонецЕсли;
	ОсновнойТекст = СтрШаблон(ШаблонОсновногоТекста, Показатели.ПредставлениеПериода);
	
	Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
		ДополнительныйТекст = СтрШаблон("(%1 - %2) * %3", Доходы, ВозвратыПокупателям, СтавкаНалога);
	Иначе
		ДополнительныйТекст = СтрШаблон("%1 * %2", Доходы, СтавкаНалога);
	КонецЕсли;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалогВсего;
	
	// Этап №2
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	ОсновнойТекст = НСтр("ru = 'Налоговый вычет'");
	
	Если ЭтоИнтерфейсИнтеграцииСБанком Тогда
		ДополнительныйТекст = Неопределено;
	Иначе
		ДополнительныйТекст
			= Новый ФорматированнаяСтрока(НСтр("ru = 'расходы, уменьшающие сумму налога'"),,,, "РасшифровкаУменьшенияНалога");
	КонецЕсли;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение = ?(ЕстьНаемныеРаботники, РасходыУменьшающиеНалог, УменьшениеНалогаФакт);
	
	Если ЕстьНаемныеРаботники Тогда
	
		// Этап №3 (Необязательный)
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ПоловинаНалогаСумма = Окр(Показатели.НалогВсего / 2, 2);
		ПоловинаНалога      = Формат(ПоловинаНалогаСумма, ФорматЧиселВПояснении);
		
		ЗнакСравнения = " = ";
		ЗнакСравнения = ?(Показатели.РасходыУменьшающиеНалог < ПоловинаНалогаСумма, " < ", " > ");
		
		ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Сумма к вычету (Налоговый вычет, но не более 50%% от налога за %1)'"), ПредставлениеПериодаПояснение);
		ДополнительныйТекст = РасходыУменьшающиеНалог + ЗнакСравнения + ПоловинаНалога;
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
		Этап.Значение  = УменьшениеНалогаФакт;
		
	КонецЕсли;
	
	// Этап №4
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налог исчисленный = Налог за %1 - Налоговый вычет'"), ПредставлениеПериодаПояснение);
	ДополнительныйТекст = НалогВсего + " - " + УменьшениеНалогаФакт;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалогИсчисленныйВсего;
	
	ПоказыватьПереплату = Показатели.Переплата > 0;
	
	Если ПоказыватьПереплату Тогда
		
		// Этап №5 - необязательный
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = НСтр("ru = 'Переплата за прошлые годы'");
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст);
		Этап.Значение = Новый ФорматированнаяСтрока(Переплата, , , , НавигационнаяСсылкаПереплаты(Показатели));
		
	КонецЕсли;
	
	// Этап №6 - окончательный расчет налога к уплате
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	СодержимоеСтроки = Новый Массив;
	СодержимоеСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Налог к уплате'"), Новый Шрифт(,,Истина)));
	
	ДополнительныйТекст = "";
	
	ТребуетсяРасшифровкаСуммы = (НомерКвартала > 1) Или ПоказыватьПереплату;
	
	Если ТребуетсяРасшифровкаСуммы Тогда
		
		ЗнакВычитания = " - ";
		
		СодержимоеСтроки.Добавить(" = ");
		СодержимоеСтроки.Добавить(НСтр("ru = 'Налог исчисленный'"));
		
		ДополнительныйТекст = НалогИсчисленныйВсего;
		
		Если НомерКвартала > 1 Тогда
			ТекстАванс = ?(НомерКвартала = 2, НСтр("ru = 'Авансовый платеж'"), НСтр("ru = 'Авансовые платежи'"));
			
			СодержимоеСтроки.Добавить(ЗнакВычитания);
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = '%1 за %2'"), ТекстАванс, ПредставлениеПериодаАванса));
			
			ДополнительныйТекст = ДополнительныйТекст + ЗнакВычитания + АвансовыеПлатежи;
		КонецЕсли;
		
		Если ПоказыватьПереплату Тогда
			СодержимоеСтроки.Добавить(ЗнакВычитания);
			СодержимоеСтроки.Добавить(НСтр("ru = 'Переплата'"));
			
			ДополнительныйТекст = ДополнительныйТекст + ЗнакВычитания + Переплата;
		КонецЕсли;
		
	КонецЕсли;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(Новый ФорматированнаяСтрока(СодержимоеСтроки), ДополнительныйТекст);
	Этап.Значение = Новый ФорматированнаяСтрока(НалогКУплате, Новый Шрифт(,,Истина));
	
КонецПроцедуры

Процедура ЗаполнитьПоясненияКРасчетуОбъектДоходыМинусРасходы(ТаблицаЭтапы, Показатели)
	
	ФорматЧиселВПояснении = НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'");
	
	НомерКвартала                 = Показатели.НомерКвартала;
	ПредставлениеПериодаПояснение = Показатели.ПредставлениеПериодаПояснение;
	ПредставлениеПериодаАванса    = Показатели.ПредставлениеПериодаАванса;
	СтавкаНалога                  = "" + Показатели.СтавкаНалога + "%";
	Доходы                        = Формат(Показатели.Доходы,                ФорматЧиселВПояснении);
	Расходы                       = Формат(Показатели.Расходы,               ФорматЧиселВПояснении);
	ПеренесенныеУбытки            = Формат(Показатели.ПеренесенныеУбытки,    ФорматЧиселВПояснении);
	НалоговаяБаза                 = Формат(Показатели.НалоговаяБаза,         ФорматЧиселВПояснении);
	НалогВсего                    = Формат(Показатели.НалогВсего,            ФорматЧиселВПояснении);
	МинимальныйНалог              = Формат(Показатели.МинимальныйНалог,      ФорматЧиселВПояснении);
	НалогИсчисленныйВсего         = Формат(Показатели.НалогИсчисленныйВсего, ФорматЧиселВПояснении);
	АвансовыеПлатежи              = Формат(Показатели.АвансовыеПлатежи,      ФорматЧиселВПояснении);
	Переплата                     = Формат(Показатели.Переплата,             ФорматЧиселВПояснении);
	НалогКУплате                  = Формат(Показатели.НалогКУплате,          ФорматЧиселВПояснении);
	
	НомерЭтапа = 0;
	
	// Этап № 1
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	Если НомерКвартала = 4 Тогда
		ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налоговая база = Доходы - Расходы - Убытки прошлых лет'"));
		ДополнительныйТекст = Доходы + " - " + Расходы + " - " + ПеренесенныеУбытки;
	Иначе
		ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налоговая база = Доходы - Расходы'"));
		ДополнительныйТекст = Доходы + " - " + Расходы;
	КонецЕсли;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалоговаяБаза;
	
	// Этап № 2
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	ОсновнойТекст       = СтрШаблон(НСтр("ru = 'Налог за %1 = Налоговая база * Ставка налога'"), ПредставлениеПериодаПояснение);;
	ДополнительныйТекст = НалоговаяБаза + " * " + СтавкаНалога;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
	Этап.Значение  = НалогВсего;
	
	Если НомерКвартала = 4 Тогда
		
		// Этап № 3 (Необязательный)
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст       = НСтр("ru = 'Минимальный налог = Доходы * 1%'");
		ДополнительныйТекст = Доходы + " * 1%";
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
		Этап.Значение  = МинимальныйНалог;
		
		// Этап № 4 (Необязательный)
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ЗнакСравнения = " = ";
		ЗнакСравнения = ?(Показатели.НалогИсчисленныйВсего < Показатели.МинимальныйНалог, " < ", " > ");
		
		ОсновнойТекст       = НСтр("ru = 'Налог исчисленный (наибольшее значение из Налога за год и Минимального налога)'");
		ДополнительныйТекст = НалогИсчисленныйВсего + ЗнакСравнения + МинимальныйНалог;
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст);
		Этап.Значение  = Формат(Макс(Показатели.НалогИсчисленныйВсего, Показатели.МинимальныйНалог), ФорматЧиселВПояснении);
		
	КонецЕсли;
	
	ПоказыватьПереплату = Показатели.Переплата > 0;
	Если ПоказыватьПереплату Тогда
		
		// Этап №5 - необязательный
		Этап = ТаблицаЭтапы.Добавить();
		НомерЭтапа = НомерЭтапа + 1;
		
		ОсновнойТекст = НСтр("ru = 'Переплата за прошлые годы'");
		
		Этап.НомерЭтапа = НомерЭтапа;
		Этап.Пояснение = ПояснениеЭтапа(ОсновнойТекст);
		Этап.Значение = Новый ФорматированнаяСтрока(Переплата, , , , НавигационнаяСсылкаПереплаты(Показатели));
		
	КонецЕсли;
	
	// Этап №6 - окончательный расчет налога к уплате
	Этап = ТаблицаЭтапы.Добавить();
	НомерЭтапа = НомерЭтапа + 1;
	
	СодержимоеСтроки = Новый Массив;
	СодержимоеСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Налог к уплате'"), Новый Шрифт(,,Истина)));
	
	ДополнительныйТекст = "";
	
	ТребуетсяРасшифровкаСуммы = (НомерКвартала > 1) Или ПоказыватьПереплату;
	
	Если ТребуетсяРасшифровкаСуммы Тогда
		
		ЗнакВычитания = " - ";
		
		НалогЗаПериод = НалогИсчисленныйВсего;
		
		Если НомерКвартала = 4 Тогда
			ТекстНалогЗаПериод = НСтр("ru = 'Налог исчисленный'");
			Если Показатели.НалогИсчисленныйВсего < Показатели.МинимальныйНалог Тогда
				НалогЗаПериод = МинимальныйНалог;
			КонецЕсли;
		Иначе
			ТекстНалогЗаПериод = СтрШаблон(НСтр("ru = 'Налог за %1'"), ПредставлениеПериодаПояснение);
		КонецЕсли;
		
		СодержимоеСтроки.Добавить(" = ");
		СодержимоеСтроки.Добавить(ТекстНалогЗаПериод);
		
		ДополнительныйТекст = НалогЗаПериод;
		
		Если НомерКвартала > 1 Тогда
			ТекстАванс = ?(НомерКвартала = 2, НСтр("ru = 'Авансовый платеж'"), НСтр("ru = 'Авансовые платежи'"));
			
			СодержимоеСтроки.Добавить(ЗнакВычитания);
			СодержимоеСтроки.Добавить(СтрШаблон(НСтр("ru = '%1 за %2'"), ТекстАванс, ПредставлениеПериодаАванса));
			
			ДополнительныйТекст = ДополнительныйТекст + ЗнакВычитания + АвансовыеПлатежи;
		КонецЕсли;
		
		Если ПоказыватьПереплату Тогда
			СодержимоеСтроки.Добавить(ЗнакВычитания);
			СодержимоеСтроки.Добавить(НСтр("ru = 'Переплата'"));
			
			ДополнительныйТекст = ДополнительныйТекст + ЗнакВычитания + Переплата;
		КонецЕсли;
		
	КонецЕсли;
	
	Этап.НомерЭтапа = НомерЭтапа;
	Этап.Пояснение = ПояснениеЭтапа(Новый ФорматированнаяСтрока(СодержимоеСтроки), ДополнительныйТекст);
	Этап.Значение  = Новый ФорматированнаяСтрока(НалогКУплате, Новый Шрифт(,,Истина));
	
КонецПроцедуры

Функция НавигационнаяСсылкаПереплаты(Показатели)
	
	Если Показатели.Переплата > 0 И Не Показатели.ТребуетсяВводНачальныхОстатков Тогда
		Возврат "РасшифровкаПереплаты";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьАктуальныеПоказатели(Показатели)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Показатели.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", Показатели.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Показатели.КонецПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетНалогаУСН.ПериодРасчета КАК ПериодРасчета,
	|	РасчетНалогаУСН.Организация КАК Организация,
	|	РасчетНалогаУСН.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	РасчетНалогаУСН.Доходы КАК Доходы,
	|	РасчетНалогаУСН.Расходы КАК Расходы,
	|	РасчетНалогаУСН.ПеренесенныеУбытки КАК ПеренесенныеУбытки,
	|	РасчетНалогаУСН.НалоговаяБаза КАК НалоговаяБаза,
	|	РасчетНалогаУСН.НалогВсего КАК НалогВсего,
	|	РасчетНалогаУСН.РасходыУменьшающиеНалог КАК РасходыУменьшающиеНалог,
	|	РасчетНалогаУСН.ПроцентУменьшенияНалога КАК ПроцентУменьшенияНалога,
	|	РасчетНалогаУСН.УменьшениеНалогаФакт КАК УменьшениеНалогаФакт,
	|	РасчетНалогаУСН.НалогИсчисленныйВсего КАК НалогИсчисленныйВсего,
	|	РасчетНалогаУСН.МинимальныйНалог КАК МинимальныйНалог,
	|	РасчетНалогаУСН.АвансовыеПлатежи КАК АвансовыеПлатежиИсчисленные,
	|	РасчетНалогаУСН.ВозвратыПокупателям КАК ВозвратыПокупателям,
	|	ВЫБОР
	|		КОГДА РасчетНалогаУСН.НалогКУплате < 0
	|			ТОГДА 0
	|		ИНАЧЕ РасчетНалогаУСН.НалогКУплате
	|	КОНЕЦ КАК НалогКУплате
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ РасчетНалогаУСН.ДеятельностьНаТорговомСборе
	|	И РасчетНалогаУСН.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетНалогаУСН.ПериодРасчета УБЫВ";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Показатели, Выборка);
		
		Показатели.НалогНачислен = Истина;
		
		Если Показатели.НомерКвартала = 4 И Не Показатели.ОбъектНалогообложенияДоходы Тогда
			Показатели.Расходы             = Показатели.Расходы - Показатели.УбытокОтУплатыМинимальногоНалога;
			Показатели.ПеренесенныеУбытки  = Показатели.ПеренесенныеУбытки + Показатели.УбытокОтУплатыМинимальногоНалога;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Показатели.ОбъектНалогообложенияДоходы И Показатели.НомерКвартала = 4 Тогда
		
		Убытки = УчетУСН.ПеренесенныеУбыткиПрошлыхЛет(Показатели.Организация, Показатели.НачалоПериода, Показатели.КонецПериода);
		
		Показатели.РегистрацияСуммыУбыткаУСН = Убытки.Ссылка;
		
	КонецЕсли;
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		
		Показатели.УплаченныеСтраховыеВзносы = УплаченныеСтраховыеВзносы(
			Показатели.Организация,
			Показатели.НачалоНалоговогоПериода,
			Показатели.КонецПериода);
		
	КонецЕсли;
	
	Показатели.ГраницаОтчетностиПрошлыхПериодов
		= ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Показатели.Организация);
	
	Показатели.ТребуетсяВводНачальныхОстатков = ТребуетсяВводНачальныхОстатков(Показатели);
	
	// При расчете суммы к оплате учитываем фактически уплаченные авансовые платежи, а не начисленные.
	КонецПредыдущегоКвартала = КонецКвартала(ДобавитьМесяц(Показатели.КонецПериода, -3));
	Показатели.АвансовыеПлатежи = НалогУплаченныйЗаПериод(
		Показатели.Организация, Показатели.НачалоПериода, КонецПредыдущегоКвартала);
	
	ОстатокРасчетовЗаПредыдущиеПериоды
		= УчетУСН.ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Показатели.Организация, Показатели.НачалоПериода);
	Если ОстатокРасчетовЗаПредыдущиеПериоды > 0 Тогда
		Показатели.Переплата = ОстатокРасчетовЗаПредыдущиеПериоды;
	Иначе
		Показатели.Задолженность = - ОстатокРасчетовЗаПредыдущиеПериоды;
	КонецЕсли;
	
	// В сумме к уплате учитывается переплата на начало года и уплаченные авансовые платежи
	Если НЕ Показатели.ОбъектНалогообложенияДоходы И Показатели.НомерКвартала = 4 Тогда
		НалогИсчисленныйВсего = Макс(Показатели.НалогИсчисленныйВсего, Показатели.МинимальныйНалог);
	Иначе
		НалогИсчисленныйВсего = Показатели.НалогИсчисленныйВсего;
	КонецЕсли;
	Показатели.НалогКУплате = Макс(0, НалогИсчисленныйВсего - Показатели.Переплата - Показатели.АвансовыеПлатежи);
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// Выделяем возвраты покупателям
		Показатели.Доходы = Показатели.Доходы + Показатели.ВозвратыПокупателям;
	Иначе
		// Не выделяем
		Показатели.ВозвратыПокупателям = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПорядокДействий(Показатели)
	
	ОписаниеДействияДекларация = ОписаниеДействияДекларация(Показатели.Организация, Показатели.КонецПериода);
	
	Показатели.ЕстьДекларация = ЗначениеЗаполнено(ОписаниеДействияДекларация)
		И ОписаниеДействияДекларация.Свойство("ИмяФормы")
		И ОписаниеДействияДекларация.Свойство("ПараметрыФормы")
		И ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ", Показатели.Декларация);
	
	Если Показатели.ЕстьДекларация Тогда
		
		Если Показатели.НомерКвартала = 4 И Не Показатели.ОбъектНалогообложенияДоходы Тогда
			НалогЗаГод = Макс(Показатели.НалогИсчисленныйВсего, Показатели.МинимальныйНалог);
		Иначе
			НалогЗаГод = Показатели.НалогИсчисленныйВсего;
		КонецЕсли;
		
		НалогНачисленный = Макс(НалогЗаГод - Показатели.АвансовыеПлатежиИсчисленные, 0);
		
		Показатели.ОшибкаНесоответствиеСуммДекларация =
			ОшибкаСуммаНалогаОтличаетсяОтДекларации(НалогНачисленный, Показатели.Декларация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатели.Декларация) Тогда
		
		СвойстваДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Показатели.Декларация,
			"НаименованиеОтчета, ПредставлениеПериода");
		
		Показатели.ДекларацияПредставление = СтрШаблон(НСтр("ru = '%1 за %2 %3'"),
			СвойстваДекларации.НаименованиеОтчета,
			СвойстваДекларации.ПредставлениеПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНачальныеПоказатели(Показатели)
	
	Организация             = Показатели.Организация;
	НомерКвартала           = Показатели.НомерКвартала;
	НачалоПериода           = Показатели.НачалоПериода;
	НачалоНалоговогоПериода = Показатели.НачалоНалоговогоПериода;
	КонецПериода            = Показатели.КонецПериода;
	
	Если Показатели.ОбъектНалогообложенияДоходы Тогда
		
		Показатели.УплаченныеСтраховыеВзносы = УплаченныеСтраховыеВзносы(Организация, НачалоНалоговогоПериода, КонецПериода);
		
	ИначеЕсли НомерКвартала = 4 Тогда // Подготовка декларации
		
		Убытки = УчетУСН.ПеренесенныеУбыткиПрошлыхЛет(Организация, НачалоПериода, КонецПериода);
		
		Показатели.УбытокОтУплатыМинимальногоНалога = Убытки.УбытокОтУплатыМинимальногоНалога;
		Показатели.РегистрацияСуммыУбыткаУСН        = Убытки.Ссылка;
		Показатели.ПеренесенныеУбытки               = Убытки.ПеренесенныеУбытки + Убытки.УбытокОтУплатыМинимальногоНалога;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК Доходы,
	|	КнигаУчетаДоходовИРасходовОбороты.Графа7Оборот КАК Расходы
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// Если ФО включена, нужно выделить возвраты покупателям.
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
			"ВЫБРАТЬ
			|	-ЕСТЬNULL(СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот), 0) КАК ВозвратыПокупателям
			|ИЗ
			|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
			|ГДЕ
			|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот < 0";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецПериода, ВидГраницы.Включая));
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДоходыРасходы = Результат[0].Выбрать();
	Если ВыборкаДоходыРасходы.Следующий() Тогда
		Показатели.Доходы  = ВыборкаДоходыРасходы.Доходы;
		Показатели.Расходы = ВыборкаДоходыРасходы.Расходы;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		// Выделяем возвраты покупателям
		ВыборкаВозвратыПокупателям = Результат[1].Выбрать();
		Если ВыборкаВозвратыПокупателям.Следующий() Тогда
			Показатели.ВозвратыПокупателям = ВыборкаВозвратыПокупателям.ВозвратыПокупателям;
			Показатели.Доходы = Показатели.Доходы + ВыборкаВозвратыПокупателям.ВозвратыПокупателям;
		КонецЕсли;
	КонецЕсли;
	
	Показатели.ГраницаОтчетностиПрошлыхПериодов
		= ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	
	//Предыдущие авансовые платежи
	Если НомерКвартала > 1 Тогда
		КонецПредыдущегоКвартала = КонецКвартала(ДобавитьМесяц(КонецПериода, -3));
		Показатели.АвансовыеПлатежи = НалогУплаченныйЗаПериод(Организация, НачалоНалоговогоПериода, КонецПредыдущегоКвартала);
	Иначе
		Показатели.АвансовыеПлатежи = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция УплаченныеСтраховыеВзносы(Организация, НачалоПериода, КонецПериода)
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", УчетРасходовУменьшающихОтдельныеНалоги.СчетаСтраховыхВзносовУменьшающихНалог());
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("НачалоПериода",         НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",          КонецПериода);
	Запрос.УстановитьПараметр("ВидыПлатежей",          Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	
	УсловияОтбора = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбора.Забалансовый = Ложь;
	
	Запрос.УстановитьПараметр("СчетаУчетаДС", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбора));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт В (&СчетаСтраховыхВзносов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет),
	|			СчетКт В (&СчетаУчетаДС),
	|			,
	|			Организация = &Организация
	|				И СубконтоДт1 В (&ВидыПлатежей)) КАК ХозрасчетныйОборотыДтКт";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сумма, 0);
	
КонецФункции

Функция НалогУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода)
	
	Возврат УчетУСН.НалогУплаченныйЗаПериод(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

Функция СуммаНалогаЗаПериодКУплате(Организация, НалоговыйПериод)
	
	Период = НачалоДня(КонецКвартала(НалоговыйПериод));
	
	Показатели = АктуальныеПоказатели(Организация, Период);
	Платежи    = ДокументыУплатыНалогов(Организация, Период);
	
	Оплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(Платежи);
	
	СуммаКУплате = Макс(Показатели.НалогКУплате - Оплачено, 0);
	
	Возврат СуммаКУплате;
	
КонецФункции

Функция СуммаЗадолженностиПоНалогуКУплате(Организация, ГраницаПериодаЗадолженности)
	
	СледующийПериод = КонецГода(ГраницаПериодаЗадолженности) + 1;
	
	ОстатокРасчетов = УчетУСН.ОстатокРасчетовПоНалогуЗаПредыдущиеПериоды(Организация, СледующийПериод);
	
	Если ОстатокРасчетов < 0 Тогда
		Возврат -ОстатокРасчетов;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПояснениеЭтапа(ОсновнойТекст, ДополнительныйТекст = Неопределено)
	
	СодержимоеСтроки = Новый Массив;
	
	СодержимоеСтроки.Добавить(ОсновнойТекст);
	
	Если Не ПустаяСтрока(ДополнительныйТекст) Тогда
		СодержимоеСтроки.Добавить(Символы.ПС);
		СодержимоеСтроки.Добавить("(");
		СодержимоеСтроки.Добавить(ДополнительныйТекст);
		СодержимоеСтроки.Добавить(")");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СодержимоеСтроки);
	
КонецФункции

Функция ОшибкаОрганизацияНеПлательщикУСН(Организация, Период, НачалоНалоговогоПериода)
	
	ПлательщикУСН = ОрганизацияПлательщикУСН(Организация, Период, НачалоНалоговогоПериода);
	
	Если ЗначениеЗаполнено(Организация) И Не ПлательщикУСН Тогда
		СтрокаСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Организация не применяет УСН.'"),
			" ",
			НСтр("ru = 'Измените настройки'"),
			" ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'системы налогообложения'"), , , , "УчетнаяПолитикаОрганизации"), ".");
	Иначе
		СтрокаСообщения = "";
	КонецЕсли;
	
	Возврат СтрокаСообщения;
	
КонецФункции

Функция ОрганизацияПлательщикУСН(Организация, Период, НачалоНалоговогоПериода)
	
	Перем ДатаИзменения;
	
	ПлательщикУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, Период, ДатаИзменения);
	Если Не ПлательщикУСН И ДатаИзменения > НачалоНалоговогоПериода Тогда
		ПлательщикУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, НачалоДня(ДатаИзменения) - 1);
	КонецЕсли;
	
	Возврат ПлательщикУСН;
	
КонецФункции

Функция ПрименяетсяУСНДоходы(Организация, Период, НачалоНалоговогоПериода)
	
	Перем ДатаИзменения;
	
	ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период, ДатаИзменения);
	Если Не ПрименяетсяУСНДоходы И ДатаИзменения > НачалоНалоговогоПериода Тогда
		ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, НачалоДня(ДатаИзменения) - 1);
	КонецЕсли;
	
	Возврат ПрименяетсяУСНДоходы;
	
КонецФункции

Функция НачалоНалоговогоПериода(Организация, Период, ДатаРегистрации)
	
	НалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		Период, Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре, , ДатаРегистрации);
	
	Возврат НалоговыйПериод.Начало;
	
КонецФункции

Функция НалоговыйПериодРасширен(Организация, ПериодПомощника, ДатаРегистрации)
	
	Возврат УчетУСН.НалоговыйПериодРасширен(Организация, ПериодПомощника, ДатаРегистрации);
	
КонецФункции

Функция НалоговыйПериодПропущен(Организация, ПериодПомощника, ДатаРегистрации)
	
	Возврат УчетУСН.НалоговыйПериодПропущен(Организация, ПериодПомощника, ДатаРегистрации);
	
КонецФункции

Функция ПодсказкаПереносНалоговогоПериода(Организация, ПериодПомощника, ДатаРегистрации)
	
	НалоговыйПериодРасширен = НалоговыйПериодРасширен(Организация, ПериодПомощника, ДатаРегистрации);
	НалоговыйПериодПропущен = НалоговыйПериодПропущен(Организация, ПериодПомощника, ДатаРегистрации);
	
	Если НЕ НалоговыйПериодРасширен И НЕ НалоговыйПериодПропущен Тогда
		Возврат "";
	КонецЕсли;
	
	ГодПомощника = Год(ПериодПомощника);
	
	Если НалоговыйПериодПропущен Тогда
		
		ШаблонПодсказки = НСтр("ru = 'Отчетность по УСН за %1 год сдавать не нужно. Период с даты регистрации %2 по %3 включается в отчетность и налоговые платежи за %4 год.'");
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодсказки,
			Формат(ГодПомощника, "ЧГ=0"),
			Формат(ДатаРегистрации, "ДФ=dd.MM.yyyy"),
			Формат(КонецГода(ДатаРегистрации), "ДФ=dd.MM.yyyy"),
			Формат(ГодПомощника + 1, "ЧГ=0"));
		
	ИначеЕсли НалоговыйПериодРасширен Тогда
		
		ЭтоКонецГода = КонецКвартала(ПериодПомощника) = КонецГода(ПериодПомощника);
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Период с даты регистрации %1 по %2 включается в %3 за %4'"),
				Формат(ДатаРегистрации, "ДФ=dd.MM.yyyy"),
				Формат(КонецГода(ДатаРегистрации), "ДФ=dd.MM.yyyy"),
				?(ЭтоКонецГода, НСтр("ru = 'отчетность и расчет налога'"), НСтр("ru = 'расчет налога'")),
				ПредставлениеПериода(НачалоГода(ПериодПомощника), КонецКвартала(ПериодПомощника), "ФП = Истина"));
		
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяВводНачальныхОстатков(Показатели)
	
	Возврат Год(Показатели.ДатаРегистрацииОрганизации) < Год(Показатели.КонецПериода)           // Зарегистрированы ранее текущего года,
		И Не Показатели.НалоговыйПериодРасширен                                                 // но не в декабре прошлого года.
		И ЗначениеЗаполнено(Показатели.ГраницаОтчетностиПрошлыхПериодов)                        // Вели деятельность до начала учета в программе.
		И Год(Показатели.ГраницаОтчетностиПрошлыхПериодов) = (Год(Показатели.КонецПериода) - 1) // Помощник за первый год учета в программе.
		И Не УчетУСН.НачальныеОстаткиПоНалогуВведены(Показатели.Организация);                   // Начальные остатки еще не вводились.
	
КонецФункции

Функция СообщениеТребуютсяРеквизиты(Организация, НомерКвартала)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НомерКвартала = 4 Тогда
		ТекстДействия = НСтр("ru = 'подготовить отчет и оплатить налог'");
	Иначе
		ТекстДействия = НСтр("ru = 'оплатить авансовый платеж'");
	КонецЕсли;
	
	Возврат ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация, ТекстДействия);
	
КонецФункции

Функция ПроверяемыеРеквизитыДляУплатыНалога(Организация)
	
	ЭтоЮрлицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("ИНН");
	
	Если ЭтоЮрлицо Тогда
		Реквизиты.Добавить("КПП");
		Реквизиты.Добавить("НаименованиеСокращенное");
		Реквизиты.Добавить("НаименованиеПолное");
	Иначе
		Реквизиты.Добавить("ФамилияИП");
		Реквизиты.Добавить("ИмяИП");
		Реквизиты.Добавить("Адрес");
	КонецЕсли;
	
	Реквизиты.Добавить("КодПоОКТМО");
	Реквизиты.Добавить("КодНалоговогоОргана");
	Реквизиты.Добавить("НаименованиеНалоговогоОргана");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ПроверяемыеРеквизитыДляДекларации(Организация, Период)
	
	Если НомерКвартала(Период) <> 4 Тогда
		// Декларация не требуется, проверять нечего.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегламентированнаяОтчетностьБП.РеквизитыОбязательныеДляОтчета(ИмяРеглОтчета(), Организация, Период);
	
КонецФункции

Функция ПредставлениеПериодаДляПояснения(НомерКвартала)
	
	ПредставлениеПериодаДляПояснения = "";
	
	Если НомерКвартала = 1 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '1 квартал'");
	ИначеЕсли НомерКвартала = 2 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '1 полугодие'");
	ИначеЕсли НомерКвартала = 3 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = '9 месяцев'");
	ИначеЕсли НомерКвартала = 4 Тогда
		ПредставлениеПериодаДляПояснения = НСтр("ru = 'год'");
	КонецЕсли;
	
	Возврат ПредставлениеПериодаДляПояснения;
	
КонецФункции

Функция НомерКвартала(Период)
	
	Возврат Месяц(КонецКвартала(Период))/3;
	
КонецФункции

Функция ОшибкаСуммаНалогаОтличаетсяОтДекларации(СуммаНалога, Декларация)
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Декларация) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ДанныеДекларации = Отчеты.РегламентированныйОтчетУСН.ДанныеРеглОтчета(Декларация);
	
	Если ТипЗнч(ДанныеДекларации) = Тип("ТаблицаЗначений") И ДанныеДекларации.Колонки.Найти("Сумма") <> Неопределено Тогда
		
		СуммаВДекларации = ДанныеДекларации.Итог("Сумма");
		
		Если СуммаВДекларации <> СуммаНалога Тогда
			Шаблон = НСтр("ru = 'Сумма в декларации (%1) отличается от рассчитанной'");
			ТекстОшибки = СтрШаблон(Шаблон, Формат(СуммаВДекларации, НСтр("ru = 'ЧДЦ=2; ЧН=0,00; ЧГ=3,0'")));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ТекстПредупрежденияПриЗагрузкеВыписки(ЕстьПредупрежденияПриЗагрузкеДоходов, ЕстьПредупрежденияПриЗагрузкеВозвратов)
	
	Если ЕстьПредупрежденияПриЗагрузкеДоходов И ЕстьПредупрежденияПриЗагрузкеВозвратов Тогда
		ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьДоходы"">доходов</a> и <a href = ""ОткрытьВозвраты"">возвратов покупателям</a> из банка'");
	ИначеЕсли ЕстьПредупрежденияПриЗагрузкеДоходов Тогда
		ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьДоходы"">доходов</a> из банка'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьВозвраты"">возвратов покупателям</a> из банка'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПредупреждения);
	
КонецФункции

#Область Конструкторы

Функция НовыйПоказатели(Организация, Период)
	
	Показатели = Новый Структура;
	
	// Начальные параметры
	Показатели.Вставить("Организация",   Организация);
	Показатели.Вставить("НачалоПериода", НачалоГода(Период));
	Показатели.Вставить("КонецПериода",  КонецКвартала(Период));
	Показатели.Вставить("НомерКвартала", НомерКвартала(Период));
	
	// Сведения о налоговом периоде
	Показатели.Вставить("ДатаРегистрацииОрганизации", Справочники.Организации.ДатаРегистрацииОрганизации(Организация));
	Показатели.Вставить("НачалоНалоговогоПериода",
		НачалоНалоговогоПериода(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	Показатели.Вставить("НалоговыйПериодРасширен",
		НалоговыйПериодРасширен(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	Показатели.Вставить("НалоговыйПериодПропущен",
		НалоговыйПериодПропущен(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	Показатели.Вставить("ПодсказкаПереносНалоговогоПериода",
		ПодсказкаПереносНалоговогоПериода(Организация, Период, Показатели.ДатаРегистрацииОрганизации));
	
	// Ошибки
	Показатели.Вставить("СообщениеОбОшибке",
		ОшибкаОрганизацияНеПлательщикУСН(Организация, Показатели.КонецПериода, Показатели.НачалоНалоговогоПериода));
	
	Показатели.Вставить("ОшибкаНесоответствиеСуммДекларация",  "");
	
	Показатели.Вставить("СообщениеТребуютсяРеквизиты", СообщениеТребуютсяРеквизиты(Организация, Показатели.НомерКвартала));
	
	// Учетная политика
	Показатели.Вставить("СтавкаНалога",                УчетнаяПолитика.СтавкаНалогаУСН(Организация, Период));
	Показатели.Вставить("СтавкаНалогаПредставление",   "" + Формат(Показатели.СтавкаНалога, "ЧН=0; БЛ=") + "%"
		+ ?(УчетнаяПолитика.НалоговыеКаникулыУСН(Организация, Период), " " + НСтр("ru = '(налоговые каникулы)'"), ""));
	Показатели.Вставить("ОбъектНалогообложенияДоходы",
		ПрименяетсяУСНДоходы(Организация, Показатели.КонецПериода, Показатели.НачалоНалоговогоПериода));
	
	// Начало учета
	Показатели.Вставить("ГраницаОтчетностиПрошлыхПериодов", '00010101');
	Показатели.Вставить("ТребуетсяВводНачальныхОстатков",   Ложь);
	
	// Представление периода
	Показатели.Вставить("ПредставлениеПериодаПояснение", ПредставлениеПериодаДляПояснения(Показатели.НомерКвартала));
	Показатели.Вставить("ПредставлениеПериодаАванса",    ПредставлениеПериодаДляПояснения(Показатели.НомерКвартала - 1));
	Показатели.Вставить("ПредставлениеПериода",
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Показатели.НачалоПериода, Показатели.КонецПериода, Истина));
	Показатели.Вставить("ПодсказкаПоНалогу",             "");
	
	// Действия помощника
	Показатели.Вставить("ЕстьДекларация",              Ложь);
	Показатели.Вставить("Декларация",                  Документы.РегламентированныйОтчет.ПустаяСсылка());
	Показатели.Вставить("ДекларацияПредставление",     "");
	Показатели.Вставить("ИмяРеглОтчета",               ИмяРеглОтчета());
	Показатели.Вставить("РегистрацияСуммыУбыткаУСН",   Документы.РегистрацияСуммыУбыткаУСН.ПустаяСсылка());
	
	// Установка статуса задачи
	Показатели.Вставить("НалогНачислен", Ложь);
	
	// Суммы
	Показатели.Вставить("Доходы",                           0);
	Показатели.Вставить("Расходы",                          0);
	Показатели.Вставить("НалоговаяБаза",                    0);
	Показатели.Вставить("НалогВсего",                       0);
	Показатели.Вставить("НалогКУплате",                     0);
	Показатели.Вставить("РасходыУменьшающиеНалог",          0);
	Показатели.Вставить("ПроцентУменьшенияНалога",          0);
	Показатели.Вставить("УменьшениеНалогаФакт",             0);
	Показатели.Вставить("НалогИсчисленныйВсего",            0);
	Показатели.Вставить("МинимальныйНалог",                 0);
	Показатели.Вставить("ПеренесенныеУбытки",               0);
	Показатели.Вставить("АвансовыеПлатежи",                 0);
	Показатели.Вставить("АвансовыеПлатежиИсчисленные",      0);
	Показатели.Вставить("УплаченныеСтраховыеВзносы",        0);
	Показатели.Вставить("УбытокОтУплатыМинимальногоНалога", 0);
	Показатели.Вставить("ВозвратыПокупателям",              0);
	Показатели.Вставить("Переплата",                        0);
	Показатели.Вставить("Задолженность",                    0);
	
	Возврат Показатели;
	
КонецФункции

Функция НовыйПоясненияРасчета()
	
	Пояснения = Новый ТаблицаЗначений;
	
	Пояснения.Колонки.Добавить("НомерЭтапа");
	Пояснения.Колонки.Добавить("Пояснение");
	Пояснения.Колонки.Добавить("Значение");
	
	Возврат Пояснения;
	
КонецФункции

#КонецОбласти

#Область ПубликацияДанных

Функция ПубликуемыеДанныеПомощника(Настройки, КодВозврата, Ошибка, СообщениеОбОшибке)
	
	Перем Организация, Период;
	
	Словарь = АсинхронноеПолучениеДанныхСловарь;
	
	НастройкиСтруктура = ПрочитатьНастройки(Настройки, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыИзНастроек = ПрочитатьПараметрыПомощникаИзНастроек(НастройкиСтруктура, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Период = КонецКвартала(ПараметрыИзНастроек.Период);
	
	Если ЗначениеЗаполнено(ПараметрыИзНастроек.Организация) Тогда
		Организация = ПараметрыИзНастроек.Организация;
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось определить организацию по переданным настройкам.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Предварительная актуализация данных.
	
	Если НЕ ИнтеграцияСБанками.ОбеспечитьАктуальностьПубликуемыхДанных(Организация, Период, СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаВнутренняяОшибка();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ПубликуемыеПоказатели = Новый Структура;
	
	// Показатели помощника
	
	ДанныеПомощника = АктуальныеПоказателиРасчетаСПояснениями(Организация, Период);
	
	Показатели   = ДанныеПомощника.Показатели;
	ЭтапыРасчета = ДанныеПомощника.Пояснения;
	
	ДополнитьПоказателиНалоговымиПлатежами(Организация, Период, Показатели);
	
	Для Каждого ПравилоПубликации Из ПравилаПубликацииПоказателей(Показатели.НомерКвартала) Цикл // По одиночным показателям шапки
		ОпубликоватьЗначениеПоПравилу(Показатели, ПравилоПубликации, ПубликуемыеПоказатели);
	КонецЦикла;
	
	// Расчет налога по шагам с пояснениями
	
	ПубликуемыеЭтапыРасчета = Новый Массив;
	
	Для Каждого ЭтапРасчета Из ЭтапыРасчета Цикл
		ПубликуемыйЭтап = Новый Структура;
		
		Для Каждого ПравилоПубликации Из ПравилаПубликацииЭтапаРасчета() Цикл
			ОпубликоватьЗначениеПоПравилу(ЭтапРасчета, ПравилоПубликации, ПубликуемыйЭтап);
		КонецЦикла;
		
		ПубликуемыеЭтапыРасчета.Добавить(ПубликуемыйЭтап);
	КонецЦикла;
	
	ПубликуемыеПоказатели.Вставить("calculation", ПубликуемыеЭтапыРасчета);
	
	// Сведения о расчетах за предыдущие периоды и ссылка на оплату задолженности
	
	ПубликуемыеРасчетыПрошлыхЛет = ПубликуемыеРасчетыЗаПрошлыеПериоды(Организация, Период, Показатели);
	ПубликуемыеПоказатели.Вставить("previous_tax", ПубликуемыеРасчетыПрошлыхЛет);
	
	// Ссылки
	
	ПубликуемыеСсылки = ПубликуемыеГиперссылки(Организация, Период);
	ПубликуемыеПоказатели.Вставить("links", ПубликуемыеСсылки);
	
	// Предупреждения
	МассивПредупреждений = Новый Массив;
	
	// Предупреждение об ошибках загрузки выписки.
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() И Не Показатели.НалоговыйПериодПропущен Тогда
		ПредупрежденияПриЗагрузкеВыписки =
			ПредупрежденияПриЗагрузкеВыписки(Организация, Показатели.НачалоНалоговогоПериода, Показатели.КонецПериода);
		
		Если ПредупрежденияПриЗагрузкеВыписки.ЕстьОшибкиЗагрузкиВыписки Тогда
			МассивПредупреждений.Добавить(Строка(ПредупрежденияПриЗагрузкеВыписки.ТекстОшибкиЗагрузкиВыписки));
		КонецЕсли;
	КонецЕсли;
	
	// Предупреждение, если не заполнены важные реквизиты организации.
	НезаполненныеРеквизиты = Неопределено;
	Если Не РеквизитыДляОтчетностиЗаполнены(Организация, Период, НезаполненныеРеквизиты) Тогда
		ТекстОшибки = ПроверкаРеквизитовОрганизации.ТекстОшибкиЗаполненияРеквизитов(
			Организация,
			НезаполненныеРеквизиты,
			ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(Период),
			Истина);
		МассивПредупреждений.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если МассивПредупреждений.Количество() > 0 Тогда
		// Возвращаем результат с предупреждением.
		КодВозврата = Словарь.КодВозвратаВыполненоСПредупреждениями();
		СообщениеОбОшибке = СтрСоединить(МассивПредупреждений, Символы.ПС);
	КонецЕсли;
	
	// Преобразование полученных показателей в формат json.
	
	РезультирующееСообщение = ИнтеграцияСБанками.СериализоватьВСтрокуJSON(ПубликуемыеПоказатели);
	
	Возврат РезультирующееСообщение;
	
КонецФункции

Функция ПубликуемыеГиперссылки(Организация, Период)
	
	ПубликуемыеСсылки = Новый Массив;
	
	// Ссылка для перехода в 1С
	ОписаниеСсылкиПереход = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки("goto1C",
		НСтр("ru = 'Проверить расчет в 1С'"),
		НавигационнаяСсылкаДляПубликации(Организация, Период));
	
	ПубликуемыеСсылки.Добавить(ОписаниеСсылкиПереход);
	
	Если НомерКвартала(Период) = 4 Тогда // КУДиР и декларация нужны только при расчете налога за год.
		// КУДиР
		ОписаниеСсылкиКУДиР = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис("income_expenses_book",
			НСтр("ru = 'Книга учета доходов и расходов'"),
			АдресПубликацииКУДиР(),
			Отчеты.КнигаУчетаДоходовИРасходов.ВходящиеНастройкиПубликуемыхДанных(Организация, Период));
			
		ПубликуемыеСсылки.Добавить(ОписаниеСсылкиКУДиР);
		
		// Декларация УСН
		ОписаниеСсылкиДекларация = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис("tax_return",
			НСтр("ru = 'Сформировать декларацию'"),
			Справочники.НастройкиИнтеграцииСБанками.АдресСервисаВыполненияКомандыИнтеграции(),
			Справочники.НастройкиИнтеграцииСБанками.ВходящиеНастройкиСозданияДекларации(Организация, ИмяРеглОтчета(), Период));
		
		ПубликуемыеСсылки.Добавить(ОписаниеСсылкиДекларация);
	КонецЕсли;
	
	ВидНалога = ВидНалога(Организация, Период); // Для заполнения параметров сервиса оплаты и поиска задачи бухгалтера.
	
	// Ссылка для оплаты налога
	ПараметрыСервисаОплаты = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ВходящиеНастройкиПубликуемыхДанных(
		Организация,
		Период,
		ВидНалога,
		Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	ОписаниеСсылкиУплата = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
		АсинхронноеПолучениеДанныхБППлатежиВБюджет.ПубликуемыйИдентификатор(),
		НСтр("ru = 'Оплатить налог'"),
		АсинхронноеПолучениеДанныхБППлатежиВБюджет.АдресСервиса(),
		ПараметрыСервисаОплаты);
	
	ПубликуемыеСсылки.Добавить(ОписаниеСсылкиУплата);
	
	// Ссылка для выполнения задачи бухгалтера
	ПравилоУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(Организация, ВидНалога, Период);
	
	Если ПравилоУплаты <> Неопределено Тогда
		ПравилоУплаты.Организация = Организация; // Из функции возвращается пустой
		
		ХешЗадачи = РегистрыСведений.ЗадачиБухгалтера.СохраненнаяХешСуммаЗадачи(ПравилоУплаты);
		ОписаниеСсылкиВыполнениеЗадачи =
			ВнешнийПрограммныйИнтерфейс.ОписаниеПубликуемойСсылкиВыполнениеЗадачи(ХешЗадачи, Истина);
		
		Если ОписаниеСсылкиВыполнениеЗадачи <> Неопределено Тогда
			ОписаниеСсылкиЗадача = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
				ОписаниеСсылкиВыполнениеЗадачи.Идентификатор,
				ОписаниеСсылкиВыполнениеЗадачи.Представление,
				ОписаниеСсылкиВыполнениеЗадачи.АдресСервиса,
				ОписаниеСсылкиВыполнениеЗадачи.Параметры);
			
			ПубликуемыеСсылки.Добавить(ОписаниеСсылкиЗадача);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПубликуемыеСсылки;
	
КонецФункции

Функция ПубликуемыеРасчетыЗаПрошлыеПериоды(Организация, Период, Показатели)
	
	// Опубликуем сообщение о задолженности или переплате.
	// В случае задолженности передадим ссылку для ее уплаты.
	
	ПубликуемыеРасчетыПрошлыхЛет = Новый Структура;
	
	Словарь = СловарьРасчетыЗаПрошлыеПериоды();
	
	ТекстРасчетыПрошлыхЛет = ТекстСообщенияРасчетыПрошлыхЛет(Показатели.Задолженность,
		Показатели.ГраницаОтчетностиПрошлыхПериодов,
		Показатели.ТребуетсяВводНачальныхОстатков);
	
	ПубликуемыеРасчетыПрошлыхЛет.Вставить(Словарь.ОтображатьРасчеты,     ЗначениеЗаполнено(ТекстРасчетыПрошлыхЛет));
	ПубликуемыеРасчетыПрошлыхЛет.Вставить(Словарь.ТекстСообщенияРасчеты, ТекстРасчетыПрошлыхЛет);
	
	// Ссылка для оплаты задолженности
	
	Если Показатели.Задолженность > 0 Тогда
		
		// Задолженность рассчитывается, публикуется и оплачивается
		// за весь период с начала учета по конец прошлого года.
		ПериодЗадолженности = НачалоГода(Период) - 1;
		
		ПараметрыСервисаОплаты = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ВходящиеНастройкиПубликуемыхДанных(
			Организация,
			ПериодЗадолженности,
			ВидНалога(Организация, ПериодЗадолженности),
			Перечисления.ВидыПлатежейВГосБюджет.Налог,
			Истина);
		
		ОписаниеСсылкиУплатаДолга = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
			АсинхронноеПолучениеДанныхБППлатежиВБюджет.ПубликуемыйИдентификатор(),
			НСтр("ru = 'Оплатить задолженность'"),
			АсинхронноеПолучениеДанныхБППлатежиВБюджет.АдресСервиса(),
			ПараметрыСервисаОплаты);
		
		ПубликуемыеРасчетыПрошлыхЛет.Вставить(Словарь.СсылкаОплатитьЗадолженность, ОписаниеСсылкиУплатаДолга);
		
	КонецЕсли;
	
	Возврат ПубликуемыеРасчетыПрошлыхЛет;
	
КонецФункции

Функция АдресПубликацииКУДиР()
	
	ЧастиАдреса = Новый Массив;
	
	ЧастиАдреса.Добавить(ИнтеграцияСБанками.АдресСервисаПубликацияОтчетов());
	ЧастиАдреса.Добавить(Отчеты.КнигаУчетаДоходовИРасходов.ПубликуемыйИдентификатор());
	
	Возврат СтрСоединить(ЧастиАдреса, "/");
	
КонецФункции

Функция НавигационнаяСсылкаДляПубликации(Организация, Период)
	
	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	
	ПараметрыПубликации.ИмяФормы      = "Обработка.ПомощникРасчетаНалогаУСН.Форма";
	ПараметрыПубликации.Организация   = Организация;
	ПараметрыПубликации.НачалоПериода = НачалоГода(Период);
	ПараметрыПубликации.КонецПериода  = КонецКвартала(Период);
	
	Возврат РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации);
	
КонецФункции

Функция ПрочитатьНастройки(Настройки, СообщениеОбОшибке)
	
	Перем ДанныеОрганизации;
	
	Если Настройки = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Настройки не заданы.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Настройки);
	Если ПустаяСтрока(НастройкиСтрокой) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтруктурой = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрокой, "date");
	Если ТипЗнч(НастройкиСтруктурой) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не НастройкиСтруктурой.Свойство("date") Тогда
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательное поле date.'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Организация может отсутствовать во входящих настройках.
	// В этом случае ошибку не возвращаем - для формирования будет использована основная организацийя.
	Если НастройкиСтруктурой.Свойство("organization", ДанныеОрганизации) Тогда
		Если Не ДанныеОрганизации.Свойство("inn") Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле inn.'");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ДанныеОрганизации.Свойство("kpp") И ДанныеОрганизации.Свойство("inn")
			И СтрДлина(ДанныеОрганизации.inn) = 10 Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization для юридического лица отсутствует обязательное поле kpp.'");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Переданы корректные настройки, ошибок нет.
	Возврат НастройкиСтруктурой;
	
КонецФункции

Функция ПрочитатьПараметрыПомощникаИзНастроек(НастройкиСтруктурой, СообщениеОбОшибке)
	
	Перем ОрганизацияИНН, ОрганизацияКПП, Организация, Период;
	
	Результат = Новый Структура("Организация, Период");
	
	Если НастройкиСтруктурой.Свойство("organization") Тогда
		НастройкиСтруктурой.organization.Свойство("inn", ОрганизацияИНН);
		НастройкиСтруктурой.organization.Свойство("kpp", ОрганизацияКПП);
		
		Организация = Справочники.Организации.НайтиОрганизацию(ОрганизацияИНН, ОрганизацияКПП, Ложь);
		Если Не ЗначениеЗаполнено(Организация) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не удалось найти организацию по переданным настройкам.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Период = НастройкиСтруктурой.date;
	
	Если ТипЗнч(Период) <> Тип("Дата") ИЛИ НЕ ЗначениеЗаполнено(Период) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Неверный формат данных в поле date! Ожидается непустая дата.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Организация = Организация;
	Результат.Период      = Период;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПоказателиНалоговымиПлатежами(Организация, Период, Показатели)
	
	Платежи  = ДокументыУплатыНалогов(Организация, Период);
	Оплачено = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(Платежи);
	
	ОсталосьОплатить = Макс(Показатели.НалогКУплате - Оплачено, 0);
	
	Показатели.Вставить("Оплачено", Оплачено);
	Показатели.Вставить("ОсталосьОплатить", ОсталосьОплатить);
	
КонецПроцедуры

Процедура ОпубликоватьЗначениеПоПравилу(ИсходныеДанные, ПравилоПубликации, ПубликуемыеДанные)
	
	ПубликуемоеЗначение = ИсходныеДанные[ПравилоПубликации.Идентификатор1С];
	ПубликуемыеДанные.Вставить(ПравилоПубликации.ПубликуемыйИдентификатор, ПубликуемоеЗначение);
	
КонецПроцедуры

Функция ПравилаПубликацииПоказателей(НомерКвартала)
	
	ПубликоватьАвансовыеПлатежи = НомерКвартала <> 1;
	
	Правила = НовыеПравилаПубликации();
	
	ДобавитьПравилоПубликации(Правила, "Доходы",                     "income");
	ДобавитьПравилоПубликации(Правила, "ВозвратыПокупателям",        "refund");
	ДобавитьПравилоПубликации(Правила, "УплаченныеСтраховыеВзносы",  "insurance_payments");
	ДобавитьПравилоПубликации(Правила, "СтавкаНалога",               "tax_rate");
	ДобавитьПравилоПубликации(Правила, "СтавкаНалогаПредставление",  "tax_rate_presentation");
	
	Если ПубликоватьАвансовыеПлатежи Тогда
		ДобавитьПравилоПубликации(Правила, "АвансовыеПлатежи",           "advance_payments");
		ДобавитьПравилоПубликации(Правила, "ПредставлениеПериодаАванса", "advance_payments_period_presentation");
	КонецЕсли;
	
	ДобавитьПравилоПубликации(Правила, "РасходыУменьшающиеНалог",    "tax_reduction");
	ДобавитьПравилоПубликации(Правила, "Переплата",                  "tax_initial_overpayment");
	ДобавитьПравилоПубликации(Правила, "НалогКУплате",               "tax_to_pay");
	
	// Дополняемые поля показателей о расчетах по налогу - см. ДополнитьПоказателиНалоговымиПлатежами()
	ДобавитьПравилоПубликации(Правила, "Оплачено",                   "tax_paid");
	ДобавитьПравилоПубликации(Правила, "ОсталосьОплатить",           "tax_left_to_pay");
	
	Возврат Правила;
	
КонецФункции

Функция ПравилаПубликацииЭтапаРасчета()
	
	Правила = НовыеПравилаПубликации();
	
	ДобавитьПравилоПубликации(Правила, "НомерЭтапа", "step");
	ДобавитьПравилоПубликации(Правила, "Пояснение",  "description");
	ДобавитьПравилоПубликации(Правила, "Значение",   "value");
	
	Возврат Правила;
	
КонецФункции

Функция СловарьРасчетыЗаПрошлыеПериоды()
	
	Словарь = Новый Структура;
	
	Словарь.Вставить("ОтображатьРасчеты", "show_previous_tax");
	Словарь.Вставить("ТекстСообщенияРасчеты", "previous_tax_message");
	Словарь.Вставить("СсылкаОплатитьЗадолженность", "link");
	
	Возврат Словарь;
	
КонецФункции

Функция НовыеПравилаПубликации()
	
	Правила = Новый ТаблицаЗначений;
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	Правила.Колонки.Добавить("Идентификатор1С",          ОписаниеТипаСтрока);
	Правила.Колонки.Добавить("ПубликуемыйИдентификатор", ОписаниеТипаСтрока);
	
	Возврат Правила;
	
КонецФункции

Процедура ДобавитьПравилоПубликации(Правила, Идентификатор1С, ПубликуемыйИдентификатор)
	
	НовоеПравило = Правила.Добавить();
	
	НовоеПравило.Идентификатор1С          = Идентификатор1С;
	НовоеПравило.ПубликуемыйИдентификатор = ПубликуемыйИдентификатор;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли