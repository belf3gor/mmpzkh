#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ОбновитьДанныеПоОрганизации();
	
	Если Не Параметры.КонтекстныйВызов Тогда
		ВыполнениеИзКомандногоМеню = Истина;
	КонецЕсли;
	
	РазрешенЭлектронныйДокументооброт = РазрешенЭлектронныйДокументооборот();
	ИнтерфейсИнтеграцииСБанками = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	СпособСдачиОтчетности = "Интернет";
	ИспользоватьНесколькоОрганизацийБухгалтерскийУчет = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	Элементы.НадписьТребуютсяРеквизиты.Заголовок = ТекстНеЗаполненыРеквизитыДляОтчетности();
	
	ОтчетыЗаполнены    = Ложь;
	ОтчетыСформированы = Ложь;
	
	НастроитьОтображениеТеста();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапуститьОбновлениеСпискаОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_Организации" И Источник = Объект.Организация)
		ИЛИ (ИмяСобытия = "ИзменениеУчетнойПолитики" И Параметр = Объект.Организация) Тогда
		
		ОбновитьДанныеПоОрганизации();
		
		ЗапуститьОбновлениеСпискаОтчетов();
		
	ИначеЕсли ИмяСобытия = "ОтчетыПрошлыхПериодов_ПроверкаЗавершена"
		И Источник = Объект.Организация Тогда
		
		ЗагрузитьРезультатТеста();
		ЗапуститьОбновлениеСпискаОтчетов();
		
	ИначеЕсли ИмяСобытия = "ОплатаСервиса_Изменение" Тогда
		
		РазрешенЭлектронныйДокументооброт = РазрешенЭлектронныйДокументооборот();
		ОтобразитьДействияСдачаОтчетности(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Запись_РегламентированныйОтчет"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Ссылка") Тогда
		
		Отбор = Новый Структура("РегламентированныйОтчет", Параметр.Ссылка);
		Если ТаблицаОтчеты.НайтиСтроки(Отбор).Количество() > 0 Тогда
			ЗапуститьОбновлениеСпискаОтчетов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ОткрытьОтчет") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		АдресОтчета = АдресОтчета(НавигационнаяСсылкаФорматированнойСтроки);
		
		ОткрытьОтчет(АдресОтчета);
		
	ИначеЕсли СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "ПоказатьОшибкиОтчета") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьОшибкиФормированияОтчета(НавигационнаяСсылкаФорматированнойСтроки);
		
	ИначеЕсли СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "РеквизитыОрганизацииДляОтчетности") Тогда
		
		СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элементы.НадписьТребуютсяРеквизиты,
			НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыДляОтчетности());
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСдачиОтчетностиПриИзменении(Элемент)
	
	ОтобразитьДействияСдачаОтчетности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйВизитКонтактыГосорганов_ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ФНС_Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	Объект.Организация = ПолеОрганизация;
	
	ОбновитьДанныеПоОрганизации();
	
	ЗапуститьОбновлениеСпискаОтчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТарифаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокСсылкиВозвратаКВладельцу", НСтр("ru='Вернуться к подготовке отчетности прошлых периодов'"));
	ТарификацияБПКлиент.ОткрытьФормуВыбораТарифа(ЭтотОбъект, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПроверьтеПрошлыеПериодыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТеста = ПараметрыТестаПрошлыхПериодов();
	
	ОткрытьФорму("Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПрошлыхПериодов",
		ПараметрыТеста,
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключить1СОтчетность(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Процедура ОписьВложения(Команда)
	
	АдресДанныхОписи = ПодготовитьДанныеОписиВложения("ФНС");
	
	ДополнительныеПараметрыПечати = Новый Структура("АдресДанныхОписи", АдресДанныхОписи);
	
	ПараметрыПечати = Новый Структура("ЗаголовокФормы, ДополнительныеПараметры",
		"Опись вложения",
		ДополнительныеПараметрыПечати);
	
	ПараметрыКомандыПечати = Новый Массив;
	ПараметрыКомандыПечати.Добавить(Объект.Организация);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ПечатьОписиВложения",
		"ОписьВложения",
		ПараметрыКомандыПечати,
		ЭтотОбъект,
		ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Конверт(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектыПечати", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФНС_Контрагент));
	ПараметрыФормы.Вставить("СведенияОПолучателеКонверта", ФНС_СведенияОПолучателеКонверта);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаПечатиКонвертов", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДанныеПоОрганизации()
	
	НадписьОрганизация = Объект.Организация;
	ПолеОрганизация    = Объект.Организация;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Объект.Организация);
	
	ДатаСведений = ?(ГраницаОтчетностиПрошлыхПериодов = Неопределено, ТекущаяДатаСеанса(), ГраницаОтчетностиПрошлыхПериодов);
	Сведения = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.СведенияОбОрганизации(Объект.Организация, ДатаСведений);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Сведения);
	
	ЗагрузитьРезультатТеста();
	
	НастроитьКонтактныеДанныеГосорганов();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатТеста()  
	
	ПериодыДобавленныеПроверкой.Очистить();
	
	РезультатТеста = Обработки.МониторНалоговИОтчетности.РезультатПроверкиОтчетностиПрошлыхПериодов(Объект.Организация);
	
	ПроверкаПрошлыхПериодовВыполнена = РезультатТеста.ПроверкаВыполнена;
	
	Если ПроверкаПрошлыхПериодовВыполнена
		И ЗначениеЗаполнено(РезультатТеста.ДобавленныеПериоды) Тогда
		
		Для Каждого СтрокаПериода Из РезультатТеста.ДобавленныеПериоды Цикл
		
			НоваяСтрока = ПериодыДобавленныеПроверкой.Добавить();
			
			НоваяСтрока.Периодичность = ?(ЗначениеЗаполнено(СтрокаПериода.Периодичность),
				СтрокаПериода.Периодичность,
				Перечисления.Периодичность.Год);
			
			НоваяСтрока.НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				НоваяСтрока.Периодичность, СтрокаПериода.Период);
			НоваяСтрока.КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
				НоваяСтрока.Периодичность, СтрокаПериода.Период);
			
			НоваяСтрока.Требуется = СтрокаПериода.Требуется;
			
			НоваяСтрока.ПредставлениеПериода = ПредставлениеПериода(
				НоваяСтрока.НачалоПериода,
				КонецДня(НоваяСтрока.КонецПериода),
				"ФП = Истина");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеТеста()
	
	ОписаниеРезультатов = Обработки.МониторНалоговИОтчетности.ОписаниеРезультатовПроверкиПрошлыхПериодов(
		ПроверкаПрошлыхПериодовВыполнена, ПериодыДобавленныеПроверкой);
	
	Элементы.НадписьПроверьтеПрошлыеПериоды.Заголовок = ОписаниеРезультатов;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеСпискаОтчетов()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписокОтчетов", 0.1, Истина);
	
КонецПРоцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСписокОтчетов()
	
	ТаблицаОтчеты.Очистить();
	
	ОтчетыЗаполнены    = Ложь;
	ОтчетыСформированы = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
	ДлительнаяОперация = ПолучитьДанныеОбОтчетах();
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ЗавершитьОбновлениеСпискаОтчетов", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОбОтчетах()
	
	ПараметрыЗаполненияОтчетов = ПараметрыЗаполненияОтчетов();
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение списка отчетов для отчетности прошлых периодов'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ЗаполнитьОтчеты",
		ПараметрыЗаполненияОтчетов,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбновлениеСпискаОтчетов(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ОбработатьРезультатОбновленияСпискаОтчетов(ДлительнаяОперация.АдресРезультата);
		
		ЗапуститьФормированиеОтчетов();
		
	Иначе
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при заполнении списка отчетов:'");
		ПоказатьОшибкуПодготовкиОтчетов(ДлительнаяОперация, ЗаголовокОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатОбновленияСпискаОтчетов(АдресРезультата)
	
	ЗадачиПоОтчетам = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Для Каждого ЗадачаОтчет Из ЗадачиПоОтчетам Цикл
		НоваяСтрока = ТаблицаОтчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаОтчет);
	КонецЦикла;
	
	ОтчетыЗаполнены = Истина;
	
	ТребуемыеОтчеты = ТаблицаОтчеты.НайтиСтроки(Новый Структура("ПрошлыйПериодПоТесту", Истина));
	ОтчетностьНеТребуется = ТребуемыеОтчеты.Количество() = 0;
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	НастроитьОтображениеТеста();
	
	ОтобразитьОтчеты();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗаполненияОтчетов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация", Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуПодготовкиОтчетов(ДлительнаяОперация, ЗаголовокОшибки)
	
	Предупреждение = Новый Структура;
	
	Текст = ЗаголовокОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкиФормированияОтчета(НавигационнаяСсылкаОтчета)
	
	АдресОтчета = АдресОтчета(НавигационнаяСсылкаОтчета);
	
	Отбор = Новый Структура("ГосорганНомерГруппы, ОтчетНомерГруппы", АдресОтчета.НомерГосоргана, АдресОтчета.НомерОтчета);
	ЗадачаОтчет = ТаблицаОтчеты.НайтиСтроки(Отбор)[0];
	
	Текст = НСтр("ru = 'При формировании отчета обнаружены ошибки:'")
		+ ?(ЗначениеЗаполнено(ЗадачаОтчет.ОшибкиФормирования), СтрСоединить(ЗадачаОтчет.ОшибкиФормирования, Символы.ПС), "");
	
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчетов()
	
	ОтчетыСформированы = Ложь;
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		// Рано формировать, будут ошибки.
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = СформироватьОтчетыНаСервере();
	
	Если ДлительнаяОперация = Неопределено Тогда
		
		// Отчеты не нужно формировать.
		ЗавершитьФормированиеОтчетов();
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при формировании отчетов:'");
		ПоказатьОшибкуПодготовкиОтчетов(ДлительнаяОперация, ЗаголовокОшибки);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПродолжитьФормированиеОтчетов", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетыНаСервере()
	
	ПараметрыФормированияОтчетов = ПараметрыФормированияОтчетов();
	
	Если НЕ ПараметрыФормированияОтчетов.ФормироватьОтчеты Тогда
		// Нет отчетов для формирования на сервере, незачем запускать задание.
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование комплекта отчетности прошлых периодов'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПодготовкаОтчетностиПрошлыхПериодов.СформироватьОтчеты",
		ПараметрыФормированияОтчетов,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьФормированиеОтчетов(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ОбработатьРезультатФормированияОтчетовНаСервере(ДлительнаяОперация.АдресРезультата);
		
	Иначе
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при формировании отчетов:'");
		ПоказатьОшибкуПодготовкиОтчетов(ДлительнаяОперация, ЗаголовокОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатФормированияОтчетовНаСервере(АдресРезультата)
	
	СформированныеОтчеты = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Для Каждого СформированныйОтчет Из СформированныеОтчеты Цикл
		
		Отбор = Новый Структура("ГосорганНомерГруппы, ОтчетНомерГруппы");
		ЗаполнитьЗначенияСвойств(Отбор, СформированныйОтчет);
		
		СтрокиТаблицы = ТаблицаОтчеты.НайтиСтроки(Отбор);
		
		ЗадачаОтчет = СтрокиТаблицы[0];
		
		ЗадачаОтчет.РегламентированныйОтчет = СформированныйОтчет.РегламентированныйОтчет;
		ЗадачаОтчет.Статус = СформированныйОтчет.Статус;
		ЗадачаОтчет.СостояниеСдачиОтчета = СформированныйОтчет.СостояниеСдачиОтчета;
		ЗадачаОтчет.НулеваяДекларация = СформированныйОтчет.НулеваяДекларация;
		ЗадачаОтчет.СуммаПоДекларации = СформированныйОтчет.СуммаПоДекларации;
		
		Если ЗначениеЗаполнено(СформированныйОтчет.ОшибкиФормирования) Тогда
			ЗадачаОтчет.ОшибкиФормирования = Новый ФиксированныйМассив(СформированныйОтчет.ОшибкиФормирования);
		Иначе
			ЗадачаОтчет.ОшибкиФормирования = Неопределено;
		КонецЕсли;
		
		РазместитьОтчетНаФорме(ЗадачаОтчет);
		
	КонецЦикла;
	
	ЗавершитьФормированиеОтчетов();
	
КонецПРоцедуры

&НаСервере
Функция ЗавершитьФормированиеОтчетов()
	
	ОтчетыСформированы = Истина;
	
	ОтобразитьОтчеты();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияОтчетов()
	
	ОтборОтчетов = Новый Структура;
	ОтборОтчетов.Вставить("ПрошлыйПериодПоТесту", Истина); // Формируем только отчетность прошлых периодов.
	ОтборОтчетов.Вставить("ФормироватьНаКлиенте", Ложь); // Старые формы отчетов не поддерживают формирование на сервере.
	
	ТекущиеОтчеты = ТаблицаОтчеты.Выгрузить(ОтборОтчетов);
	
	ТребуемыеОтчеты = ТекущиеОтчеты.СкопироватьКолонки();
	
	Для Каждого ЗадачаОтчет Из ТекущиеОтчеты Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗадачаОтчет.РегламентированныйОтчет) Тогда
			НоваяСтрока = ТребуемыеОтчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаОтчет);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФормированияОтчетов = Новый Структура;
	
	ПараметрыФормированияОтчетов.Вставить("ФормироватьОтчеты", ТребуемыеОтчеты.Количество() > 0);
	ПараметрыФормированияОтчетов.Вставить("ТребуемыеОтчеты",   ТребуемыеОтчеты);
	ПараметрыФормированияОтчетов.Вставить("Организация",       Объект.Организация);
	
	Возврат ПараметрыФормированияОтчетов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = форма.Объект;
	
	// Доступность функционала
	Элементы.НадписьТребуютсяРеквизиты.Видимость = Форма.ОтчетыЗаполнены И НЕ Форма.РеквизитыОрганизацииЗаполнены;
	
	Элементы.ПолеОрганизация.Видимость = Форма.ВыполнениеИзКомандногоМеню И Форма.ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	Элементы.НадписьОрганизация.Видимость = НЕ Форма.ВыполнениеИзКомандногоМеню ИЛИ НЕ Форма.ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	
	Элементы.ФормированиеОтчетов.Видимость = Форма.ОтчетыЗаполнены;
	Элементы.БлокиОтчетов.Видимость = Форма.РеквизитыОрганизацииЗаполнены;
	Элементы.ОжиданиеОтчетов.Видимость = Не Форма.ОтчетыЗаполнены;
	
	// Сдача отчетов
	Элементы.СдачаОтчетности.Видимость = Форма.ОтчетыЗаполнены И Форма.ОтчетыСформированы
		И Форма.РеквизитыОрганизацииЗаполнены И НЕ Форма.ОтчетностьНеТребуется;
	
	ОтобразитьДействияСдачаОтчетности(Форма);
	
КонецПРоцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьДействияСдачаОтчетности(Форма)
	
	Элементы = форма.Элементы;
	
	Элементы.СдачаОтчетности.Видимость = Не Форма.ИнтерфейсИнтеграцииСБанками;
	Если Не Элементы.СдачаОтчетности.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницыДействияСОтчетами.ТекущаяСтраница = Элементы[Форма.СпособСдачиОтчетности];
	
	Если Форма.СпособСдачиОтчетности = "Интернет" Тогда
		
		Элементы.Открыть1СОтчетность.КнопкаПоУмолчанию    = Форма.РазрешенЭлектронныйДокументооброт И Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.Подключить1СОтчетность.КнопкаПоУмолчанию = Форма.РазрешенЭлектронныйДокументооброт И НЕ Форма.ЭлектронныйДокументооборотДоступен;
		
		Элементы.ЗаголовокПодключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.ОписаниеПодключить1СОтчетность.Видимость  = Форма.РазрешенЭлектронныйДокументооброт И НЕ Форма.ЭлектронныйДокументооборотДоступен;
		
		Элементы.Подключить1СОтчетность.Видимость = Форма.РазрешенЭлектронныйДокументооброт И НЕ Форма.ЭлектронныйДокументооборотДоступен;
		Элементы.Открыть1СОтчетность.Видимость    = Форма.РазрешенЭлектронныйДокументооброт И Форма.ЭлектронныйДокументооборотДоступен;
		
		Элементы.Описание1СОтчетностьНеПредусмотренаТарифом.Видимость = НЕ Форма.РазрешенЭлектронныйДокументооброт;
		Элементы.ВыборТарифа.Видимость                                = НЕ Форма.РазрешенЭлектронныйДокументооброт;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКонтактныеДанныеГосорганов()
	
	Если ПустаяСтрока(ФНС_Адрес) И ПустаяСтрока(ФНС_Телефоны) Тогда
		
		// Скроем незаполненные реквизиты ФНС.
		
		Элементы.ПочтаРоссииКонтактыГосорганов_ФНС_Наименование.Видимость = Ложь;
		Элементы.ПочтаРоссииКонтактыГосорганов_ФНС_Адрес.Видимость        = Ложь;
		Элементы.Конверт.Видимость = Ложь;
		
		Элементы.ОписаниеОтправкиПочтаРоссии.Заголовок
			= НСтр("ru = 'Распечатайте все отчеты в 1 экземпляре, подпишите каждый лист и отправьте в налоговую инспекцию ценным письмом с описью вложения.'");
		
		Элементы.ЛичныйВизитКонтактыГосорганов_ФНС.Видимость = Ложь;
		
		Элементы.ОписаниеОтправкиЛичныйВизит.Заголовок
			= НСтр("ru = 'Распечатайте все отчеты в 2 экземплярах, подпишите каждый лист и отнесите в налоговую инспекцию.'");
		
	Иначе
		
		Элементы.ПочтаРоссииКонтактыГосорганов_ФНС_Наименование.Видимость = Истина;
		Элементы.ПочтаРоссииКонтактыГосорганов_ФНС_Адрес.Видимость        = Истина;
		Элементы.Конверт.Видимость = Истина;
		
		Элементы.ОписаниеОтправкиПочтаРоссии.Заголовок
			= НСтр("ru = 'Распечатайте все отчеты в 1 экземпляре, подпишите каждый лист и отправьте ценным письмом с описью вложения по адресу:'");
		
		Элементы.ЛичныйВизитКонтактыГосорганов_ФНС.Видимость = Истина;
		
		Элементы.ОписаниеОтправкиЛичныйВизит.Заголовок
			= НСтр("ru = 'Распечатайте все отчеты в 2 экземплярах, подпишите каждый лист и отнесите в налоговую инспекцию:'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеОписиВложения(ГосорганСтрока)
	
	ГосударственныйОрган = Перечисления.ТипыКонтролирующихОрганов[ГосорганСтрока];
	
	ОтправляемыеОтчеты = ТаблицаОтчеты.НайтиСтроки(Новый Структура("ГосударственныйОрган", ГосударственныйОрган));
	
	ВложенныеПредметы = Обработки.ПечатьОписиВложения.НоваяТаблицаВложенийОписи();
	
	Для Каждого ОтправляемыйОтчет Из ОтправляемыеОтчеты Цикл
		
		Если НЕ ЗначениеЗаполнено(ОтправляемыйОтчет.РегламентированныйОтчет) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВложенныеПредметы = ВложенныеПредметы.Добавить();
		СтрокаВложенныеПредметы.НаименованиеПредмета = ОтправляемыйОтчет.Наименование;
		СтрокаВложенныеПредметы.Количество = 1;
		СтрокаВложенныеПредметы.ОбъявленнаяЦенность = 1;
		
	КонецЦикла;
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Объект.Организация);
	
	ДанныеОписи = Новый Структура;
	ДанныеОписи.Вставить("Отправитель",       СведенияОбОрганизации.НаименованиеДляПечатныхФорм);
	ДанныеОписи.Вставить("ВложенныеПредметы", ВложенныеПредметы);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОписи, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(АдресОтчета)
	
	Отбор = Новый Структура("ГосорганНомерГруппы, ОтчетНомерГруппы", АдресОтчета.НомерГосоргана, АдресОтчета.НомерОтчета);
	
	ЗадачаОтчет = ТаблицаОтчеты.НайтиСтроки(Отбор)[0];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("мВыбраннаяФорма", ЗадачаОтчет.ВыбраннаяФорма);
	ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", ЗадачаОтчет.КонецПериода);
	ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", ЗадачаОтчет.НачалоПериода);
	ПараметрыФормы.Вставить("мСкопированаФорма", Неопределено);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	Если ЗначениеЗаполнено(ЗадачаОтчет.РегламентированныйОтчет) Тогда
		ПараметрыФормы.Вставить("мСохраненныйДок", ЗадачаОтчет.РегламентированныйОтчет);
	КонецЕсли;
	
	ОткрытьФорму("Отчет." + ЗадачаОтчет.ИсточникОтчета + ".Форма." + ЗадачаОтчет.ВыбраннаяФорма,
		ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрешенЭлектронныйДокументооборот()
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ТарификацияБПВызовСервераПовтИсп.РазрешенЭлектронныйДокументообротСКонтролирующимиОрганами()
		Или Обработки.ОплатаСервиса.ЕстьВыставленныйСчетНаОплатуСервиса();
	
КонецФункции

#Область ОтображениеЭлементов

&НаСервере
Процедура ОтобразитьОтчеты()
	
	КорневаяГруппа = Элементы.БлокиОтчетов;
	
	СкрытьПодчиненныеГруппы(КорневаяГруппа);
	
	Госорганы = ЗадействованныеГосорганы();
	
	НомераГосорганов = НомераГосорганов(Госорганы); // Постоянные
	НумераторОтчетов = НумераторОтчетов(Госорганы); // Инкрементируемый
	
	РазместитьГосорганыНаФорме(НомераГосорганов);
	
	Для Каждого ЗадачаОтчет Из ТаблицаОтчеты Цикл
		
		Если Не ЗадачаОтчет.ПрошлыйПериодПоТесту Тогда
			Продолжить;
		КонецЕсли;
		
		НомерГосоргана = НомераГосорганов[ЗадачаОтчет.ГосударственныйОрган];
		
		// Инкрементируем счетчик отчетов, представляемых в данный госорган.
		НомерОтчета    = НумераторОтчетов[ЗадачаОтчет.ГосударственныйОрган] + 1;
		НумераторОтчетов[ЗадачаОтчет.ГосударственныйОрган] = НомерОтчета;
		
		// Запишем координаты группы отчета в таблицу
		ЗадачаОтчет.ГосорганНомерГруппы = НомерГосоргана;
		ЗадачаОтчет.ОтчетНомерГруппы    = НомерОтчета;
		
		РазместитьОтчетНаФорме(ЗадачаОтчет);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьОтчетНаФорме(ЗадачаОтчет)
	
	СуффиксЭлементовОтчета = СуффиксОтчет(ЗадачаОтчет.ГосорганНомерГруппы, ЗадачаОтчет.ОтчетНомерГруппы);
	
	ГруппаОтчет = ГруппаДляРазмещенияОтчета(ЗадачаОтчет.ГосорганНомерГруппы, ЗадачаОтчет.ОтчетНомерГруппы);
	
	// Заполним свойства элементов из задачи
	
	// Иконка отчета
	ЭлементКартинка = ГруппаОтчет.ПодчиненныеЭлементы[ИмяОтчет() + "Картинка" + СуффиксЭлементовОтчета];
	ЭлементКартинка.Картинка = ИконкаОтчета(ЗадачаОтчет);
	
	// Наименование отчета
	ЭлементНаименование = ГруппаОтчет.ПодчиненныеЭлементы[ИмяОтчет() + "Наименование" + СуффиксЭлементовОтчета];
	ЭлементНаименование.Заголовок = СтрокаНаименованиеОтчета(ЗадачаОтчет);
	
	Если ЗначениеЗаполнено(ЗадачаОтчет.РегламентированныйОтчет)
		И НЕ ПустаяСтрока(ЗадачаОтчет.РасширенныйПериодПодсказка) Тогда
		ЭлементНаименование.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		ЭлементНаименование.Подсказка = ЗадачаОтчет.РасширенныйПериодПодсказка;
	Иначе
		ЭлементНаименование.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	// Статус отчета
	ЭлементСтатус = ГруппаОтчет.ПодчиненныеЭлементы[ИмяОтчет() + "Статус" + СуффиксЭлементовОтчета];
	ЭлементСтатус.Заголовок = СтрокаСтатусОтчета(ЗадачаОтчет);
	
	ГруппаОтчет.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ГруппаДляРазмещенияОтчета(НомерГосоргана, НомерОтчета)
	
	ГруппаОтчетЭталон = Элементы.Отчет_1_1;
	
	ГруппаГосорган = Элементы[ИмяГосорган() + СуффиксГосорган(НомерГосоргана)];
	
	СуффиксЭлементовОтчета = СуффиксОтчет(НомерГосоргана, НомерОтчета);
	
	ИмяГруппыОтчет = ИмяОтчет() + СуффиксЭлементовОтчета;
	ГруппаОтчет    = ГруппаГосорган.ПодчиненныеЭлементы.Найти(ИмяГруппыОтчет);
	
	Если ГруппаОтчет = Неопределено Тогда
		
		ГруппаОтчет = Элементы.Добавить(ИмяГруппыОтчет, ТипЗнч(ГруппаОтчетЭталон), ГруппаГосорган);
		ЗаполнитьЗначенияСвойств(ГруппаОтчет, ГруппаОтчетЭталон, , "ПутьКДаннымЗаголовка");
		
		// Подчиненные элементы
		Для Каждого ЭлементЭталон Из ГруппаОтчетЭталон.ПодчиненныеЭлементы Цикл
			
			ИмяБезАдреса = ИмяЭлементаБезАдреса(ЭлементЭталон.Имя);
			
			ИмяНовогоЭлемента = ИмяЭлементаСАдресом(ИмяБезАдреса, НомерГосоргана, НомерОтчета);
			
			НовыйЭлемент = Элементы.Добавить(ИмяНовогоЭлемента, ТипЗнч(ЭлементЭталон), ГруппаОтчет);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементЭталон);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ГруппаОтчет;
	
КонецФункции

&НаСервере
Процедура РазместитьГосорганыНаФорме(НомераГосорганов)
	
	КорневаяГруппа           = Элементы.БлокиОтчетов;
	ГруппаГосорганЭталон     = Элементы.ГосударственныйОрган_1;
	ДекорацияЗаголовокЭталон = Элементы.ГосударственныйОрганЗаголовок_1;
	
	Для Каждого ЭлементСоответствия Из НомераГосорганов Цикл
		
		Госорган       = ЭлементСоответствия.Ключ;
		НомерГосоргана = ЭлементСоответствия.Значение;
		
		ГруппаГосорган = Элементы.Найти(ИмяГосорган() + СуффиксГосорган(НомерГосоргана));
		
		Если ГруппаГосорган = Неопределено Тогда
			
			ГруппаГосорган = Элементы.Добавить(ИмяГосорган() + СуффиксГосорган(НомерГосоргана), ТипЗнч(ГруппаГосорганЭталон), КорневаяГруппа);
			ЗаполнитьЗначенияСвойств(ГруппаГосорган, ГруппаГосорганЭталон, , "ПутьКДаннымЗаголовка");
			
		КонецЕсли;
		
		ИмяЭлементаЗаголовокГосоргана = ИмяГосорган() + "Заголовок" + СуффиксГосорган(НомерГосоргана);
		ЭлементЗаголовокГосоргана = ГруппаГосорган.ПодчиненныеЭлементы.Найти(ИмяЭлементаЗаголовокГосоргана);
		
		Если ЭлементЗаголовокГосоргана = Неопределено Тогда
			ЭлементЗаголовокГосоргана = Элементы.Добавить(ИмяЭлементаЗаголовокГосоргана, ТипЗнч(ДекорацияЗаголовокЭталон), ГруппаГосорган);
			ЗаполнитьЗначенияСвойств(ЭлементЗаголовокГосоргана, ДекорацияЗаголовокЭталон);
		КонецЕсли;
		
		ЭлементЗаголовокГосоргана.Заголовок = ПомощникиПоУплатеНалоговИВзносов.ОписаниеГосорганаПолучателяОтчетности(Госорган);
		
		ГруппаГосорган.Видимость = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьПодчиненныеГруппы(ГруппаРодитель)
	
	Для Каждого ПодчиненныйЭлемент Из ГруппаРодитель.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			
			ПодчиненныйЭлемент.Видимость = Ложь;
			СкрытьПодчиненныеГруппы(ПодчиненныйЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомераГосорганов(Госорганы)
	
	Номера = Новый Соответствие;
	
	Для ИндексЭлемента = 0 По Госорганы.ВГраница() Цикл
		Номера.Вставить(Госорганы[ИндексЭлемента], ИндексЭлемента + 1);
	КонецЦикла;
	
	Возврат Номера;
	
КонецФункции

&НаСервереБезКонтекста
Функция НумераторОтчетов(Госорганы)
	
	Нумератор = Новый Соответствие;
	
	Для Каждого Госорган Из Госорганы Цикл
		Нумератор.Вставить(Госорган, 0);
	КонецЦикла;
	
	Возврат Нумератор;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяЭлементаБезАдреса(ИмяЭлемента)
	
	ЧастиИмени = СтрРазделить(ИмяЭлемента, "_");
	
	Возврат ЧастиИмени[0];
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяЭлементаСАдресом(ИмяБезАдреса, НомерГосоргана, НомерОтчета)
	
	Возврат ИмяБезАдреса + СуффиксОтчет(НомерГосоргана, НомерОтчета);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция АдресОтчета(ИмяЭлемента)
	
	ЧастиИмени = СтрРазделить(ИмяЭлемента, "_");
	
	Возврат Новый Структура("НомерГосоргана, НомерОтчета", Число(ЧастиИмени[1]), Число(ЧастиИмени[2]));
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяГосорган()
	
	Возврат "ГосударственныйОрган";
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяОтчет()
	
	Возврат "Отчет";
	
КонецФункции

&НаСервереБезКонтекста
Функция СуффиксГосорган(НомерГосоргана)
	
	Возврат "_" + НомерГосоргана;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуффиксОтчет(НомерГосоргана, НомерОтчета)
	
	Возврат "_" + НомерГосоргана + "_" + НомерОтчета;
	
КонецФункции

&НаСервере
Функция ИконкаОтчета(ЗадачаОтчет)
	
	Если НЕ РеквизитыОрганизацииЗаполнены
		ИЛИ ЗначениеЗаполнено(ЗадачаОтчет.ОшибкиФормирования) Тогда
		
		Возврат БиблиотекаКартинок.ВниманиеКрасный;
		
	ИначеЕсли ЗначениеЗаполнено(ЗадачаОтчет.РегламентированныйОтчет) Тогда
		
		Возврат БиблиотекаКартинок.РегламентированныйОтчет;
		
	Иначе
		
		Возврат БиблиотекаКартинок.ДлительнаяОперация16;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗадействованныеГосорганы()
	
	ОтборТекущихОтчетов = Новый Структура("ПрошлыйПериодПоТесту", Истина);
	
	Госорганы = ТаблицаОтчеты.Выгрузить(ОтборТекущихОтчетов, "ГосударственныйОрган");
	Госорганы.Свернуть("ГосударственныйОрган");
	
	Госорганы.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого СтрокаТаблицы Из Госорганы Цикл
		СтрокаТаблицы.Порядок = Перечисления.ТипыКонтролирующихОрганов.Индекс(СтрокаТаблицы.ГосударственныйОрган);
	КонецЦикла;
	
	Госорганы.Сортировать("Порядок");
	
	Возврат Госорганы.ВыгрузитьКолонку("ГосударственныйОрган");
	
КонецФункции

&НаСервере
Функция СтрокаНаименованиеОтчета(ЗадачаОтчет)
	
	ТекстНавигационнойСсылки = "";
	
	ТекстНавигационнойСсылки = "ОткрытьОтчет"
		+ СуффиксОтчет(ЗадачаОтчет.ГосорганНомерГруппы, ЗадачаОтчет.ОтчетНомерГруппы);
	
	ЧастиНаименования = Новый Массив;
	ЧастиНаименования.Добавить(ЗадачаОтчет.Наименование);
	Если ЗначениеЗаполнено(ЗадачаОтчет.Статус) Тогда
		ЧастиНаименования.Добавить(" ");
		ЧастиНаименования.Добавить("(");
		ЧастиНаименования.Добавить(ЗадачаОтчет.Статус);
		ЧастиНаименования.Добавить(")");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(СтрСоединить(ЧастиНаименования), , , , ТекстНавигационнойСсылки);
	
КонецФункции

&НаСервере
Функция ТекстНеЗаполненыРеквизитыДляОтчетности() Экспорт
	
	ТекстДействия = НСтр("ru = 'подготовки отчетности'");
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация) Тогда
		ТекстОписанияСведений = НСтр("ru = 'сведения об организации'");
	Иначе
		ТекстОписанияСведений = НСтр("ru = 'сведения о себе'");
	КонецЕсли;
	
	ГиперссылкаСведенияОСебе = Новый ФорматированнаяСтрока(ТекстОписанияСведений,,,,"РеквизитыОрганизацииДляОтчетности");
	
	ЭлементыСообщенияОбОшибке = Новый Массив;
	ЭлементыСообщенияОбОшибке.Добавить(СтрШаблон(НСтр("ru = 'Для завершения %1 укажите'"), ТекстДействия));
	ЭлементыСообщенияОбОшибке.Добавить(" ");
	ЭлементыСообщенияОбОшибке.Добавить(ГиперссылкаСведенияОСебе);
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыСообщенияОбОшибке);
	
КонецФункции

&НаСервере
Функция СтрокаСтатусОтчета(ЗадачаОтчет)
	
	ТекстНавигационнойСсылки = "";
	
	Статус       = "";
	ШрифтСтатуса = Новый Шрифт( , , , Истина);
	ЦветТекста   = ЦветаСтиля.ЦветШрифтаСеройПодсказки;
	
	Если ЗначениеЗаполнено(ЗадачаОтчет.ОшибкиФормирования) Тогда
		
		ТекстНавигационнойСсылки = "ПоказатьОшибкиОтчета" + СуффиксОтчет(ЗадачаОтчет.ГосорганНомерГруппы, ЗадачаОтчет.ОтчетНомерГруппы);
		
		Статус       = НСтр("ru = 'ошибки при формировании'");
		ШрифтСтатуса = Неопределено;
		ЦветТекста   = ЦветаСтиля.ЦветШрифтаОшибки;
		
	ИначеЕсли НЕ РеквизитыОрганизацииЗаполнены Тогда
		
		Статус = НСтр("ru = 'укажите сведения о себе'");
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ЗадачаОтчет.РегламентированныйОтчет) Тогда
		
		Статус = НСтр("ru = 'формируется...'");
		
	ИначеЕсли ЗадачаОтчет.НулеваяДекларация Тогда
		
		Статус = НСтр("ru = 'Нулевая (нет доходов)'");
		
	ИначеЕсли ЗадачаОтчет.СуммаПоДекларации > 0 Тогда
		
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Налог %1 руб.'"), Формат(ЗадачаОтчет.СуммаПоДекларации, "ЧЦ=15; ЧДЦ=0"));
		
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Статус, ШрифтСтатуса, ЦветТекста, ,ТекстНавигационнойСсылки);
	
КонецФункции

#КонецОбласти

#Область ТестПрошлыхПериодов

&НаСервере
Функция ПараметрыТестаПрошлыхПериодов()
	
	Результат = Новый Структура;
	
	Правило = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ПравилоДляПомощникаПодготовкиОтчетности(Объект.Организация);
	ОтчетныйПериод = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ОтчетныйПериодДляЗапускаТеста(Правило, Объект.Организация);
	
	Результат.Вставить("Организация", Объект.Организация);
	Результат.Вставить("НачальныйВопрос", "ГруппаТест2");
	Результат.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	Результат.Вставить("Правило", Правило);
	
	ДобавленныеОтчетныеПериоды =
		РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ДобавленныеПериоды(Объект.Организация);
	
	Результат.Вставить("АдресВходныхДанных", ПоместитьВоВременноеХранилище(ДобавленныеОтчетныеПериоды, УникальныйИдентификатор));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены = РеквизитыДляОтчетностиЗаполнены(Объект.Организация, НезаполненныеРеквизиты);
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверяемыеРеквизитыДляОтчетности()
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	ОтборТекущихОтчетов = Новый Структура("ПрошлыйПериодПоТесту", Истина);
	
	ТребуемыеОтчеты = ТаблицаОтчеты.Выгрузить(ОтборТекущихОтчетов, "ИсточникОтчета, ПериодСобытия");
	
	Для Каждого ТребуемыйОтчет Из ТребуемыеОтчеты Цикл
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПроверяемыеРеквизиты,
			РегламентированнаяОтчетностьБП.РеквизитыОбязательныеДляОтчета(ТребуемыйОтчет.ИсточникОтчета,
				Объект.Организация, ТребуемыйОтчет.ПериодСобытия),
			Истина);
		
	КонецЦикла;
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

&НаСервере
Функция РеквизитыДляОтчетностиЗаполнены(Организация, НезаполненныеРеквизиты)
	
	Возврат ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
				Организация, ПроверяемыеРеквизитыДляОтчетности(), НезаполненныеРеквизиты);
	
КонецФункции

#КонецОбласти

#КонецОбласти
