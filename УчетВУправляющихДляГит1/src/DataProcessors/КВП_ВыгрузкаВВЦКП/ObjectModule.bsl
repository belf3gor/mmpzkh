
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииМодуля

// Производит начальное заполнение параметров отчета.
//
// Параметры:
//  Нет
//
Процедура ИнициализацияРеквизитов() Экспорт
	
	Если НЕ НеЗаполнятьНастройкиПриОткрытии Тогда
		
		СтруктураПараметров = 
			УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_КВП_ВыгрузкаСведенийОЛьготниках");
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			тмЖилищныеУслуги      = Неопределено;
			тмКоммунальныеУслуги  = Неопределено;
			тмУслугиПрямойДоговор = Неопределено;
			
			СтруктураПараметров.Свойство("Организация",            Организация);
			СтруктураПараметров.Свойство("ПериодВыгрузки",         ПериодВыгрузки);
			СтруктураПараметров.Свойство("ФорматВыгрузки",         ФорматВыгрузки);
			СтруктураПараметров.Свойство("ТипВыгрузки",            ТипВыгрузки);
			СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки",    ИмяКаталогаВыгрузки);
			СтруктураПараметров.Свойство("ЛицевойСчетОрганизации", ЛицевойСчетОрганизации);
			СтруктураПараметров.Свойство("ЛицевойСчетКонтрагента", ЛицевойСчетКонтрагента);
			СтруктураПараметров.Свойство("КодОрганизации",         КодОрганизации);
			СтруктураПараметров.Свойство("ЖилищныеУслуги",         тмЖилищныеУслуги);
			СтруктураПараметров.Свойство("КоммунальныеУслуги",     тмКоммунальныеУслуги);
			
			Если НЕ тмЖилищныеУслуги = Неопределено Тогда
				ЖилищныеУслуги.Загрузить(тмЖилищныеУслуги);
			КонецЕсли;
			Если НЕ тмКоммунальныеУслуги = Неопределено Тогда
				КоммунальныеУслуги.Загрузить(тмКоммунальныеУслуги);
			КонецЕсли;
			Если НЕ тмУслугиПрямойДоговор = Неопределено Тогда
				УслугиПрямойДоговор.Загрузить(тмУслугиПрямойДоговор);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Организация.Пустая() Тогда
			Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
		КонецЕсли;
		
		ПериодВыгрузки = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияРеквизитов()

// Проверяет существование указанного каталога в поле ИмяКаталогаВыгрузки.
Функция ПроверкаСуществованияКаталога() Экспорт
	
	КаталогНаДиске = Новый Файл(ИмяКаталогаВыгрузки);
	Если НЕ КаталогНаДиске.Существует() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Каталог не найден!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции  //ПроверкаСуществованияКаталога()

// Получает таблицу сведений о жилых помещениях и начисленной плате за ЖКУ.
Функция ПолучитьТаблицуСведенийОНачисленнойПлате() Экспорт
	
	// В соответсивии с инструкцией по формированию файла выгрузки в суммах начисления по услугам НЕ должны
	// учитываться сведения о начальном сальдо (авансы и долги) и пени.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ врСписокЛС
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&НачДата, ДатаИзменения <= &НачДата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.Действие = ИСТИНА
	|	И КВП_НазначенныеЛьготы.ДатаИзменения > &НачДата
	|	И КВП_НазначенныеЛьготы.ДатаИзменения < &КонДата
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА КВП_НачисленияПоЖилищнымУслугам.Услуга.ВидУслуги В (&СпЖилищныхУслуг)
	|				ТОГДА КВП_НачисленияПоЖилищнымУслугам.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленияПоЖилищнымУслугам,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_НачисленияПоЖилищнымУслугам.Услуга.ВидУслуги В (&СпКоммунальныхУслуг)
	|				ТОГДА КВП_НачисленияПоЖилищнымУслугам.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленияПоКоммунальнымУслугам,
	|	КВП_НачисленияПоЖилищнымУслугам.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаНачислений
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Организация = &Организация
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))) КАК КВП_НачисленияПоЖилищнымУслугам
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленияПоЖилищнымУслугам.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ПлощадиПомещения.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА ПлощадиПомещения.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА ПлощадиПомещения.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА ПлощадиПомещения.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь,
	|	ПлощадиПомещения.Объект КАК Объект
	|ПОМЕСТИТЬ врТаблицаПлощадей
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&КонДата,
	|			ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ИЛИ ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)) КАК ПлощадиПомещения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлощадиПомещения.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоПроживающих,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(, ДатаИзменения <= &КонДата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокЛС.ЛицевойСчет.Адрес.Владелец.Наименование + "", "" + СписокЛС.ЛицевойСчет.Адрес.Наименование КАК Адрес,
	|	КВП_СостояниеПомещения.КатегорияКвартиры КАК КатегорияПомещения,
	|	КВП_СостояниеПомещения.Состояние КАК СостояниеПомещения,
	|	Проживающие.КоличествоПроживающих КАК КоличествоПроживающих,
	|	Площадь.ЖилаяПлощадь КАК ЖилаяПлощадь,
	|	Площадь.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(НачисленияПоЖилУслугам.НачисленияПоЖилищнымУслугам, 0) КАК НачисленияПоЖилищнымУслугам,
	|	ЕСТЬNULL(НачисленияПоЖилУслугам.НачисленияПоКоммунальнымУслугам, 0) КАК НачисленияПоКоммунальнымУслугам,
	|	ПРЕДСТАВЛЕНИЕ(СписокЛС.ЛицевойСчет) КАК ЛицевойСчетПредставление,
	|	СписокЛС.ЛицевойСчет КАК ЛицевойСчетДляСортировки
	|ИЗ
	|	врСписокЛС КАК СписокЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|		ПО СписокЛС.ЛицевойСчет.Адрес = КВП_СостояниеПомещения.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПлощадей КАК Площадь
	|		ПО СписокЛС.ЛицевойСчет.Адрес = Площадь.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПроживающих КАК Проживающие
	|		ПО СписокЛС.ЛицевойСчет = Проживающие.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаНачислений КАК НачисленияПоЖилУслугам
	|		ПО СписокЛС.ЛицевойСчет.Ссылка = НачисленияПоЖилУслугам.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчетДляСортировки";
	
	Запрос.УстановитьПараметр("НачДата",             НачалоМесяца(ПериодВыгрузки));
	Запрос.УстановитьПараметр("КонДата",             КонецМесяца(ПериодВыгрузки));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СпЖилищныхУслуг",     ЖилищныеУслуги.ВыгрузитьКолонку("Услуга"));
	Запрос.УстановитьПараметр("СпКоммунальныхУслуг", КоммунальныеУслуги.ВыгрузитьКолонку("Услуга"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  //ПолучитьТаблицуСведенийОНачисленнойПлате()

// Получает таблицу сведений о жилых помещениях и о льготниках, проживающих в жилых помещениях.
Функция ПолучитьТаблицуСведенийОЛьготниках() Экспорт
	
	// В соответсивии с инструкцией по формированию файла выгрузки в суммах начисления по услугам НЕ должны
	// учитываться сведения о начальном сальдо (авансы и долги) и пени.
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачДата",                  НачалоМесяца(ПериодВыгрузки));
	Запрос.УстановитьПараметр("КонДата",                  КонецМесяца(ПериодВыгрузки));
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("СпЖилищныхУслуг",          ЖилищныеУслуги.ВыгрузитьКолонку("Услуга"));
	Запрос.УстановитьПараметр("СпКоммунальныхУслуг",      КоммунальныеУслуги.ВыгрузитьКолонку("Услуга"));
	Запрос.УстановитьПараметр("СпУслугПоПрямомуДоговору", УслугиПрямойДоговор.ВыгрузитьКолонку("Услуга"));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента КАК СерияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаИзменения КАК ДатаОткрытияЛьготы
	|ПОМЕСТИТЬ врТаблицаЛьготников
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&НачДата, ДатаИзменения <= &НачДата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.СерияДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.НомерДокумента,
	|	КВП_НазначенныеЛьготыСрезПоследних.ДатаИзменения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец,
	|	КВП_НазначенныеЛьготы.Проживающий,
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготы.СерияДокумента,
	|	КВП_НазначенныеЛьготы.НомерДокумента,
	|	КВП_НазначенныеЛьготы.ДатаИзменения
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.Действие = ИСТИНА
	|	И КВП_НазначенныеЛьготы.ДатаИзменения > &НачДата
	|	И КВП_НазначенныеЛьготы.ДатаИзменения < &КонДата
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец,
	|	КВП_НазначенныеЛьготы.Проживающий,
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготы.СерияДокумента,
	|	КВП_НазначенныеЛьготы.НомерДокумента,
	|	КВП_НазначенныеЛьготы.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА КВП_НачисленияПоЖилищнымУслугам.Услуга.ВидУслуги В (&СпЖилищныхУслуг)
	|				ТОГДА КВП_НачисленияПоЖилищнымУслугам.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленияПоЖилищнымУслугам,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_НачисленияПоЖилищнымУслугам.Услуга.ВидУслуги В (&СпКоммунальныхУслуг)
	|				ТОГДА КВП_НачисленияПоЖилищнымУслугам.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленияПоКоммунальнымУслугам,
	|	КВП_НачисленияПоЖилищнымУслугам.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаНачислений
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			,
	|			Организация = &Организация
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))) КАК КВП_НачисленияПоЖилищнымУслугам
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленияПоЖилищнымУслугам.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ПлощадиПомещения.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА ПлощадиПомещения.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА ПлощадиПомещения.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА ПлощадиПомещения.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь,
	|	ПлощадиПомещения.Объект КАК Объект
	|ПОМЕСТИТЬ врТаблицаПлощадей
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&КонДата,
	|			ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ИЛИ ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)) КАК ПлощадиПомещения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлощадиПомещения.Объект";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врТаблицаЛьготников.ЛицевойСчет.Адрес.Владелец КАК Объект
	|ИЗ
	|	врТаблицаЛьготников КАК врТаблицаЛьготников
	|
	|СГРУППИРОВАТЬ ПО
	|	врТаблицаЛьготников.ЛицевойСчет.Адрес.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОЛьготнике.ЛицевойСчет.Адрес.Владелец.Наименование + "", "" + СведенияОЛьготнике.ЛицевойСчет.Адрес.Наименование КАК Адрес,
	|	КВП_СостояниеПомещения.КатегорияКвартиры КАК КатегорияПомещения,
	|	КВП_СостояниеПомещения.Состояние КАК СостояниеПомещения,
	|	Проживающие.КоличествоПроживающих,
	|	Площадь.ЖилаяПлощадь КАК ЖилаяПлощадь,
	|	Площадь.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(ТаблицаНачислений.НачисленияПоЖилищнымУслугам, 0) КАК НачисленияПоЖилищнымУслугам,
	|	ЕСТЬNULL(ТаблицаНачислений.НачисленияПоКоммунальнымУслугам, 0) КАК НачисленияПоКоммунальнымУслугам,
	|	ВЫБОР
	|		КОГДА втКонтактнаяИнформация.Район = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Район
	|	КОНЕЦ КАК Район,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус,
	|	СведенияОЛьготнике.ЛицевойСчет.Адрес.Код КАК Квартира,
	|	СведенияОЛьготнике.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	СведенияОЛьготнике.СерияДокумента КАК СерияУдостоверения,
	|	СведенияОЛьготнике.НомерДокумента КАК НомерУдостоверения,
	|	СведенияОЛьготнике.ДатаОткрытияЛьготы,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК ФамилияЛьготника,
	|	ФИОФизЛицСрезПоследних.Имя КАК ИмяЛьготника,
	|	ФИОФизЛицСрезПоследних.Отчество КАК ОтчествоЛьготника,
	|	СведенияОЛьготнике.Проживающий КАК Льготник,
	|	ЕСТЬNULL(-КВП_НачисленияЛьгот.СуммаНачисленияОборот, 0) КАК СуммаЛьготы,
	|	СведенияОЛьготнике.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачисленияПоПрямомуДоговору.Услуга.ВидУслуги КАК УслугаПоПрямомуДоговору,
	|	ЕСТЬNULL(-КВП_НачисленияЛьготПоЛС.СуммаНачисленияОборот, 0) КАК СуммаЛьготыПоЛС
	|ИЗ
	|	врТаблицаЛьготников КАК СведенияОЛьготнике
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|		ПО СведенияОЛьготнике.ЛицевойСчет.Адрес = КВП_СостояниеПомещения.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаПлощадей КАК Площадь
	|		ПО СведенияОЛьготнике.ЛицевойСчет.Адрес = Площадь.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоПроживающих,
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(, ДатаИзменения <= &КонДата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ГДЕ
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет) КАК Проживающие
	|		ПО СведенияОЛьготнике.ЛицевойСчет = Проживающие.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаНачислений КАК ТаблицаНачислений
	|		ПО СведенияОЛьготнике.ЛицевойСчет.Ссылка = ТаблицаНачислений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО СведенияОЛьготнике.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&КонДата, ) КАК ФИОФизЛицСрезПоследних
	|		ПО СведенияОЛьготнике.Проживающий.ФизЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(&НачДата, &КонДата, , Организация = &Организация) КАК КВП_НачисленияЛьгот
	|		ПО СведенияОЛьготнике.ЛицевойСчет = КВП_НачисленияЛьгот.ЛицевойСчет
	|			И СведенияОЛьготнике.ЛьготнаяКатегория = КВП_НачисленияЛьгот.ЛьготнаяКатегория
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				,
	|				Организация = &Организация
	|					И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И Услуга.ВидУслуги В (&СпУслугПоПрямомуДоговору)) КАК КВП_НачисленияПоПрямомуДоговору
	|		ПО СведенияОЛьготнике.ЛицевойСчет = КВП_НачисленияПоПрямомуДоговору.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|				&НачДата,
	|				&КонДата,
	|				,
	|				Организация = &Организация
	|					И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК КВП_НачисленияЛьготПоЛС
	|		ПО СведенияОЛьготнике.ЛицевойСчет = КВП_НачисленияЛьготПоЛС.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет
	|ИТОГИ
	|	СУММА(СуммаЛьготы)
	|ПО
	|	ЛицевойСчет,
	|	ЛьготнаяКатегория,
	|	Льготник";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции  //ПолучитьТаблицуСведенийОЛьготниках()

// Формирует файл выгрузки.
Процедура СформироватьФайлВыгрузки(ТаблицаСведений) Экспорт
	
	Если НЕ ПроверкаСуществованияКаталога() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЖилищныеУслуги.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Меню ""Настройка"": не указан список жилищных услуг.");
	КонецЕсли;
	
	Если КоммунальныеУслуги.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Меню ""Настройка"": не указан список коммунальных услуг.");
	КонецЕсли;
	
	ГодНачисления = Формат(Год(ПериодВыгрузки), "ЧГ=0");
	МесяцНачисления = Строка(Месяц(ПериодВыгрузки));
	Если СтрДлина(МесяцНачисления) = 1 Тогда
		МесяцНачисления = "0" + МесяцНачисления;
	КонецЕсли;
	ПериодНачисления = ГодНачисления + МесяцНачисления;
	
	СоотвКатегорийПомещения = Новый Соответствие;
	СоотвКатегорийПомещения.Вставить(Перечисления.КВП_КатегорииКвартир.Отдельная, 1);
	СоотвКатегорийПомещения.Вставить(Перечисления.КВП_КатегорииКвартир.ГостиничногоТипа, 1);
	СоотвКатегорийПомещения.Вставить(Перечисления.КВП_КатегорииКвартир.Коммунальная, 2);
	СоотвКатегорийПомещения.Вставить(Перечисления.КВП_КатегорииКвартир.Общежитие, 3);
	СоотвКатегорийПомещения.Вставить(Перечисления.КВП_КатегорииКвартир.ОбщежитиеКоридорногоТипа, 3);
	
	СоотвСостоянийПомещения = Новый Соответствие;
	СоотвСостоянийПомещения.Вставить(Перечисления.КВП_СостоянияПомещения.Наем, 1);
	СоотвСостоянийПомещения.Вставить(Перечисления.КВП_СостоянияПомещения.ВБезвозмСобственности, 2);
	СоотвСостоянийПомещения.Вставить(Перечисления.КВП_СостоянияПомещения.ВСобственности, 2);
	СоотвСостоянийПомещения.Вставить(Перечисления.КВП_СостоянияПомещения.Заселена, 2);
	СоотвСостоянийПомещения.Вставить(Перечисления.КВП_СостоянияПомещения.Аренда, 3);
	СоотвСостоянийПомещения.Вставить(Перечисления.КВП_СостоянияПомещения.Субаренда, 3);
	СоотвСостоянийПомещения.Вставить(Перечисления.КВП_СостоянияПомещения.НаемКоммерческий, 3);
	
	СоотвУслугПоПрямомуДог = Новый Соответствие;
	Для Каждого ТекУслуга Из УслугиПрямойДоговор Цикл
		СоотвУслугПоПрямомуДог.Вставить(ТекУслуга.Услуга, 1);
	КонецЦикла;
	
	Если ТипВыгрузки = "СведенияОЛьготниках" Тогда
		
		СформироватьФайлСведенияОЛьготниках(ФорматВыгрузки, ТаблицаСведений, ПериодНачисления, 
											СоотвСостоянийПомещения, СоотвКатегорийПомещения);
		
	ИначеЕсли ТипВыгрузки = "СведенияОНачисленнойПлате" Тогда
		
		СформироватьФайлСведенияОНачисленнойПлате(ФорматВыгрузки, ТаблицаСведений, ПериодНачисления, 
												  СоотвСостоянийПомещения, СоотвКатегорийПомещения);
		
	ИначеЕсли ТипВыгрузки = "НачисленияЗаЖКУ" Тогда
		
		СформироватьФайлНачисленияЗаЖКУ(ФорматВыгрузки, ТаблицаСведений, ПериодНачисления, СоотвКатегорийПомещения);
		
	КонецЕсли;
	
КонецПроцедуры  //СформироватьФайлВыгрузки()

// Процедура формирует файлы содержащие сведения о льготниках.
Процедура СформироватьФайлСведенияОЛьготниках(ФорматВыгрузки, ТаблицаСведений, ПериодНачисления, 
											   СоотвСостоянийПомещения, СоотвКатегорийПомещения)
	
	Если ФорматВыгрузки = "DBF" Тогда
		
		//Шапка
		ФайлДБФ = Новый XBase; 
		ФайлДБФ.Поля.Добавить("PERIOD", "S", 6);
		ФайлДБФ.Поля.Добавить("MC_ACC", "S", 10);
		ФайлДБФ.Поля.Добавить("MC_CODE", "S", 10);
		ФайлДБФ.Поля.Добавить("LS_TYPE", "N", 1);
		ФайлДБФ.Поля.Добавить("SQ_PAY", "N", 8);
		ФайлДБФ.Поля.Добавить("N_ALL", "N", 1);
		ФайлДБФ.Поля.Добавить("DISTR_NAME", "S", 50);
		ФайлДБФ.Поля.Добавить("STR_NAME", "S", 100);
		ФайлДБФ.Поля.Добавить("BUILDING", "S", 10);
		ФайлДБФ.Поля.Добавить("BLOCK_NUM", "S", 5);
		ФайлДБФ.Поля.Добавить("FLAT", "S", 10);
		ФайлДБФ.Поля.Добавить("LIV_SUM", "N", 8);
		ФайлДБФ.Поля.Добавить("COM_SUM", "N", 8);
		ФайлДБФ.Поля.Добавить("HOT", "N", 1);
		ФайлДБФ.Поля.Добавить("HEAT", "N", 1);
		ФайлДБФ.Поля.Добавить("EL", "N", 1);
		ФайлДБФ.Поля.Добавить("GAZ", "N", 1);
		ФайлДБФ.Поля.Добавить("AQ", "N", 1);
		ФайлДБФ.Поля.Добавить("PIN", "N", 1);
		ФайлДБФ.Поля.Добавить("KAT", "S", 20);
		ФайлДБФ.Поля.Добавить("FAM", "S", 35);
		ФайлДБФ.Поля.Добавить("IM", "S", 35);
		ФайлДБФ.Поля.Добавить("OTC", "S", 35);
		ФайлДБФ.Поля.Добавить("DOC_SER", "S", 35);
		ФайлДБФ.Поля.Добавить("DOC_NUM", "S", 35);
		ФайлДБФ.Поля.Добавить("BEGIN_DATE", "S", 8);
		ФайлДБФ.Поля.Добавить("MC_LGT", "N", 8);
		ФайлДБФ.Поля.Добавить("OWN_TYPE", "N", 1);
		
		ИмяФайлаКраткое = Лев("F_" + СокрЛП(КодОрганизации), 8);
		ИмяФайла        = "F_" + СокрЛП(КодОрганизации);
		ФайлДБФ.СоздатьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайлаКраткое + ".dbf");
		ФайлДБФ.АвтоСохранение = Истина;
		
		//Данные
		Для Каждого СтрокаЛС Из ТаблицаСведений.Строки Цикл
			Для Каждого СтрокаКатегория Из СтрокаЛС.Строки Цикл
				Для Каждого СтрокаЛьготник Из СтрокаКатегория.Строки Цикл
					
					ТекСтрока = СтрокаЛьготник.Строки[0];
					
					ФайлДБФ.Добавить();
					ФайлДБФ.PERIOD     = ПериодНачисления;
					ФайлДБФ.MC_ACC     = ЛицевойСчетОрганизации;
					ФайлДБФ.MC_CODE    = КодОрганизации;
					КатегорияПомещения = СоотвКатегорийПомещения.Получить(ТекСтрока.КатегорияПомещения);
					ФайлДБФ.LS_TYPE    = ТекСтрока.КатегорияПомещения;
					Если КатегорияПомещения = 2 ИЛИ КатегорияПомещения = 3 Тогда
						ФайлДБФ.SQ_PAY = ТекСтрока.ЖилаяПлощадь;
					Иначе
						ФайлДБФ.SQ_PAY = ТекСтрока.ОбщаяПлощадь;
					КонецЕсли;
					ФайлДБФ.N_ALL      = ТекСтрока.КоличествоПроживающих;
					ФайлДБФ.DISTR_NAME = Врег(ТекСтрока.Район);
					ФайлДБФ.STR_NAME   = Врег(ТекСтрока.Улица);
					ФайлДБФ.BUILDING   = ТекСтрока.Дом;
					ФайлДБФ.BLOCK_NUM  = ТекСтрока.Корпус;
					ФайлДБФ.FLAT       = ТекСтрока.Квартира;
					
					ФайлДБФ.LIV_SUM = Окр(ТекСтрока.НачисленияПоЖилищнымУслугам, 2);
					ФайлДБФ.COM_SUM = Окр(ТекСтрока.НачисленияПоКоммунальнымУслугам, 2);
					
					ФайлДБФ.HOT  = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[0].Услуга, 
					"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
					ФайлДБФ.HEAT = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[1].Услуга, 
					"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
					ФайлДБФ.EL   = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[2].Услуга, 
					"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
					ФайлДБФ.GAZ  = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[3].Услуга, 
					"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
					ФайлДБФ.AQ   = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[4].Услуга, 
					"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
					
					ФайлДБФ.KAT     = ТекСтрока.ЛьготнаяКатегория;
					ФайлДБФ.FAM     = ТекСтрока.ФамилияЛьготника;
					ФайлДБФ.IM      = ТекСтрока.ИмяЛьготника;
					ФайлДБФ.OTC     = ТекСтрока.ОтчествоЛьготника;
					ФайлДБФ.DOC_SER = ТекСтрока.СерияУдостоверения;
					ФайлДБФ.DOC_NUM = ТекСтрока.НомерУдостоверения;
					
					ФайлДБФ.BEGIN_DATE = Формат(ТекСтрока.ДатаОткрытияЛьготы, "ДФ=" "ддММгггг");
					
					СуммаЛьготыПоЛС = ТекСтрока.СуммаЛьготыПоЛС;
					ФайлДБФ.MC_LGT = ?(СуммаЛьготыПоЛС = 0, 
					                   0, 
					                   Окр(ТекСтрока.СуммаЛьготы
					                   /СтрокаКатегория.Строки.Количество()
					                   *100
					                   /СуммаЛьготыПоЛС, 2));
					
					ФайлДБФ.OWN_TYPE   = СоотвСостоянийПомещения.Получить(ТекСтрока.СостояниеПомещения);
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекСтрока.Льготник.Наименование + ", " + ТекСтрока.Адрес);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
		ПереместитьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайлаКраткое + ".dbf", ИмяКаталогаВыгрузки + "\" + ИмяФайла + ".dbf");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
		
	ИначеЕсли ФорматВыгрузки = "XLS" Тогда
		
		Попытка 
			ОкноExcel = Новый COMОбъект("Excel.Application"); 
		Исключение 
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось инициализировать Excel");
			Возврат; 
		КонецПопытки;
		
		Попытка 
			
			РабочаяКнига = ОкноExcel.Workbooks.Add();
			Лист = ОкноExcel.ActiveSheet;
			Лист.Columns(2).ColumnWidth = 15;
			Лист.Columns(3).ColumnWidth = 15;
			Лист.Columns(7).ColumnWidth = 20;
			Лист.Columns(8).ColumnWidth = 20;
			Лист.Columns(20).ColumnWidth = 20;
			Лист.Columns(21).ColumnWidth = 20;
			Лист.Columns(22).ColumnWidth = 20;
			Лист.Columns(23).ColumnWidth = 20;
			Лист.Columns(24).ColumnWidth = 15;
			Лист.Columns(25).ColumnWidth = 15;
			Лист.Columns(26).ColumnWidth = 15;
			
			//Шапка
			Лист.Cells(1, 1).Value = "PERIOD";
			Лист.Cells(1, 2).Value = "MC_ACC";
			Лист.Cells(1, 3).Value = "MC_CODE";
			Лист.Cells(1, 4).Value = "LS_TYPE";
			Лист.Cells(1, 5).Value = "SQ_PAY";
			Лист.Cells(1, 6).Value = "N_ALL";
			Лист.Cells(1, 7).Value = "DISTR_NAME";
			Лист.Cells(1, 8).Value = "STR_NAME";
			Лист.Cells(1, 9).Value = "BUILDING";
			Лист.Cells(1, 10).Value = "BLOCK_NUM";
			Лист.Cells(1, 11).Value = "FLAT";
			Лист.Cells(1, 12).Value = "LIV_SUM";
			Лист.Cells(1, 13).Value = "COM_SUM";
			Лист.Cells(1, 14).Value = "HOT";
			Лист.Cells(1, 15).Value = "HEAT";
			Лист.Cells(1, 16).Value = "EL";
			Лист.Cells(1, 17).Value = "GAZ";
			Лист.Cells(1, 18).Value = "AQ";
			Лист.Cells(1, 19).Value = "PIN";
			Лист.Cells(1, 20).Value = "KAT";
			Лист.Cells(1, 21).Value = "FAM";
			Лист.Cells(1, 22).Value = "IM";
			Лист.Cells(1, 23).Value = "OTC";
			Лист.Cells(1, 24).Value = "DOC_SER";
			Лист.Cells(1, 25).Value = "DOC_NUM";
			Лист.Cells(1, 26).Value = "BEGIN_DATE";
			Лист.Cells(1, 27).Value = "MC_LGT";
			Лист.Cells(1, 28).Value = "OWN_TYPE";
			
			НомерСтроки = 1;
			
			//Данные
			Для Каждого СтрокаЛС Из ТаблицаСведений.Строки Цикл
				Для Каждого СтрокаКатегория Из СтрокаЛС.Строки Цикл
					Для Каждого СтрокаЛьготник Из СтрокаКатегория.Строки Цикл
						
						ТекСтрока = СтрокаЛьготник.Строки[0];
						
						НомерСтроки = НомерСтроки +1;
						
						Лист.Cells(НомерСтроки, 1).Value = ПериодНачисления;
						Лист.Cells(НомерСтроки, 2).Value = ЛицевойСчетОрганизации;
						Лист.Cells(НомерСтроки, 3).Value = КодОрганизации;
						КатегорияПомещения = СоотвКатегорийПомещения.Получить(ТекСтрока.КатегорияПомещения);
						Лист.Cells(НомерСтроки, 4).Value = КатегорияПомещения;
						Если КатегорияПомещения = 2 ИЛИ КатегорияПомещения = 3 Тогда
							Лист.Cells(НомерСтроки, 5).Value = ТекСтрока.ЖилаяПлощадь;
						Иначе
							Лист.Cells(НомерСтроки, 5).Value = ТекСтрока.ОбщаяПлощадь;
						КонецЕсли;
						Лист.Cells(НомерСтроки, 6).Value = ТекСтрока.КоличествоПроживающих;
						Лист.Cells(НомерСтроки, 7).Value = Врег(ТекСтрока.Район);
						Лист.Cells(НомерСтроки, 8).Value = Врег(ТекСтрока.Улица);
						Лист.Cells(НомерСтроки, 9).Value = ТекСтрока.Дом;
						Лист.Cells(НомерСтроки, 10).Value = ТекСтрока.Корпус;
						Лист.Cells(НомерСтроки, 11).Value = ТекСтрока.Квартира;
						
						Лист.Cells(НомерСтроки, 12).Value = Окр(ТекСтрока.НачисленияПоЖилищнымУслугам, 2);
						Лист.Cells(НомерСтроки, 13).Value = Окр(ТекСтрока.НачисленияПоКоммунальнымУслугам, 2);
						
						Лист.Cells(НомерСтроки, 14).Value = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[0].Услуга, 
						"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
						Лист.Cells(НомерСтроки, 15).Value = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[1].Услуга,
						"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
						Лист.Cells(НомерСтроки, 16).Value = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[2].Услуга,
						"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
						Лист.Cells(НомерСтроки, 17).Value = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[3].Услуга,
						"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
						Лист.Cells(НомерСтроки, 18).Value = ?(СтрокаЛьготник.Строки.Найти(УслугиПрямойДоговор[4].Услуга, 
						"УслугаПоПрямомуДоговору") = Неопределено, 0, 1);
						
						Лист.Cells(НомерСтроки, 20).Value = Строка(ТекСтрока.ЛьготнаяКатегория);
						Лист.Cells(НомерСтроки, 21).Value = ТекСтрока.ФамилияЛьготника;
						Лист.Cells(НомерСтроки, 22).Value = ТекСтрока.ИмяЛьготника;
						Лист.Cells(НомерСтроки, 23).Value = ТекСтрока.ОтчествоЛьготника;
						Лист.Cells(НомерСтроки, 24).Value = ТекСтрока.СерияУдостоверения;
						Лист.Cells(НомерСтроки, 25).Value = ТекСтрока.НомерУдостоверения;
						
						Лист.Cells(НомерСтроки, 26).Value = Формат(ТекСтрока.ДатаОткрытияЛьготы, "ДФ=" "ддММгггг");
						
						СуммаЛьготыПоЛС = ТекСтрока.СуммаЛьготыПоЛС;
						Лист.Cells(НомерСтроки, 27).Value = ?(СуммаЛьготыПоЛС = 0, 
						                                      0, 
						                                      Окр(ТекСтрока.СуммаЛьготы
						                                      /СтрокаКатегория.Строки.Количество()
						                                      *100
						                                      /СуммаЛьготыПоЛС, 2));
						
						Лист.Cells(НомерСтроки, 28).Value = СоотвСостоянийПомещения.Получить(ТекСтрока.СостояниеПомещения);
						
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекСтрока.Льготник.Наименование + ", " + ТекСтрока.Адрес);
						
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			РабочаяКнига.SaveAs(ИмяКаталогаВыгрузки + "\F_" + СокрЛП(КодОрганизации) + ".xls", 56);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
			
		Исключение 
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ОкноExcel.Quit();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует файлы содержащие сведения о начисленной плате.
Процедура СформироватьФайлСведенияОНачисленнойПлате(ФорматВыгрузки, ТаблицаСведений, ПериодНачисления, 
													СоотвСостоянийПомещения, СоотвКатегорийПомещения)
	
	Если ФорматВыгрузки = "DBF" Тогда
		
		//Шапка
		ФайлДБФ = Новый XBase; 
		ФайлДБФ.Поля.Добавить("PERIOD",   "S", 6);
		ФайлДБФ.Поля.Добавить("MC_CODE",  "S", 10);
		ФайлДБФ.Поля.Добавить("MC_ACC",   "S", 10);
		ФайлДБФ.Поля.Добавить("VCKP_ACC", "S", 10);
		ФайлДБФ.Поля.Добавить("ADDRESS",  "S", 150);
		ФайлДБФ.Поля.Добавить("LS_TYPE",  "N", 1);
		ФайлДБФ.Поля.Добавить("SQ_PAY",   "N", 8, 2);
		ФайлДБФ.Поля.Добавить("N_ALL",    "N", 1);
		ФайлДБФ.Поля.Добавить("OWN_TYPE", "N", 1);
		ФайлДБФ.Поля.Добавить("LIV_SUM",  "N", 8, 2);
		ФайлДБФ.Поля.Добавить("COM_SUM",  "N", 8, 2);
		
		ИмяФайлаКраткое = Лев("N_" + СокрЛП(КодОрганизации), 8);
		ИмяФайла        = "N_" + СокрЛП(КодОрганизации);
		ФайлДБФ.СоздатьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайлаКраткое + ".dbf");
		ФайлДБФ.АвтоСохранение = Истина;
		
		//Данные
		Для Каждого ТекСтрока Из ТаблицаСведений Цикл
			
			ФайлДБФ.Добавить();
			ФайлДБФ.PERIOD     = ПериодНачисления;
			ФайлДБФ.MC_CODE    = КодОрганизации;
			ФайлДБФ.MC_ACC     = ЛицевойСчетОрганизации;
			ФайлДБФ.VCKP_ACC   = ЛицевойСчетКонтрагента;
			ФайлДБФ.ADDRESS    = ТекСтрока.Адрес;
			КатегорияПомещения = СоотвКатегорийПомещения.Получить(ТекСтрока.КатегорияПомещения);
			ФайлДБФ.LS_TYPE    = КатегорияПомещения;
			Если КатегорияПомещения = 2 ИЛИ КатегорияПомещения = 3 Тогда
				ФайлДБФ.SQ_PAY = ТекСтрока.ЖилаяПлощадь;
			Иначе
				ФайлДБФ.SQ_PAY = ТекСтрока.ОбщаяПлощадь;
			КонецЕсли;
			ФайлДБФ.N_ALL      = ТекСтрока.КоличествоПроживающих;
			ФайлДБФ.OWN_TYPE   = СоотвСостоянийПомещения.Получить(ТекСтрока.СостояниеПомещения);
			ФайлДБФ.LIV_SUM = Окр(ТекСтрока.НачисленияПоЖилищнымУслугам, 2);
			ФайлДБФ.COM_SUM = Окр(ТекСтрока.НачисленияПоКоммунальнымУслугам, 2);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекСтрока.Адрес);
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
		ПереместитьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайлаКраткое + ".dbf", ИмяКаталогаВыгрузки + "\" + ИмяФайла + ".dbf");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
		
	ИначеЕсли ФорматВыгрузки = "XLS" Тогда
		
		//XLS
		Попытка 
			ОкноExcel = Новый COMОбъект("Excel.Application"); 
		Исключение 
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось инициализировать Excel");
			Возврат; 
		КонецПопытки;
		
		Попытка 
			
			РабочаяКнига = ОкноExcel.Workbooks.Add();
			Лист = ОкноExcel.ActiveSheet;
			Лист.Columns(2).ColumnWidth = 15;
			Лист.Columns(3).ColumnWidth = 15;
			Лист.Columns(4).ColumnWidth = 15;
			Лист.Columns(5).ColumnWidth = 80;
			
			//Шапка
			Лист.Cells(1, 1).Value = "PERIOD";
			Лист.Cells(1, 2).Value = "MC_CODE";
			Лист.Cells(1, 3).Value = "MC_ACC";
			Лист.Cells(1, 4).Value = "VCKP_ACC";
			Лист.Cells(1, 5).Value = "ADDRESS ";
			Лист.Cells(1, 6).Value = "LS_TYPE";
			Лист.Cells(1, 7).Value = "SQ_PAY";
			Лист.Cells(1, 8).Value = "N_ALL ";
			Лист.Cells(1, 9).Value = "OWN_TYPE";
			Лист.Cells(1, 10).Value = "LIV_SUM";
			Лист.Cells(1, 11).Value = "COM_SUM";
			
			НомерСтроки = 1;
			
			//Данные
			Для Каждого ТекСтрока Из ТаблицаСведений Цикл
				
				НомерСтроки = НомерСтроки +1;
				
				Лист.Cells(НомерСтроки, 1).Value = ПериодНачисления;
				Лист.Cells(НомерСтроки, 2).Value = КодОрганизации;
				Лист.Cells(НомерСтроки, 3).Value = ЛицевойСчетОрганизации;
				Лист.Cells(НомерСтроки, 4).Value = ЛицевойСчетКонтрагента;
				Лист.Cells(НомерСтроки, 5).Value = ТекСтрока.Адрес;
				КатегорияПомещения = СоотвКатегорийПомещения.Получить(ТекСтрока.КатегорияПомещения);
				Лист.Cells(НомерСтроки, 6).Value = КатегорияПомещения;
				Если КатегорияПомещения = 2 ИЛИ КатегорияПомещения = 3 Тогда
					Лист.Cells(НомерСтроки, 7).Value = ТекСтрока.ЖилаяПлощадь;
				Иначе
					Лист.Cells(НомерСтроки, 7).Value = ТекСтрока.ОбщаяПлощадь;
				КонецЕсли;
				Лист.Cells(НомерСтроки, 8).Value = ТекСтрока.КоличествоПроживающих;
				Лист.Cells(НомерСтроки, 9).Value = СоотвСостоянийПомещения.Получить(ТекСтрока.СостояниеПомещения);
				Лист.Cells(НомерСтроки, 10).Value = Окр(ТекСтрока.НачисленияПоЖилищнымУслугам, 2);
				Лист.Cells(НомерСтроки, 11).Value = Окр(ТекСтрока.НачисленияПоКоммунальнымУслугам, 2);
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекСтрока.Адрес);
				
			КонецЦикла;
			
			РабочаяКнига.SaveAs(ИмяКаталогаВыгрузки + "\N_" + СокрЛП(КодОрганизации) + ".xls", 56);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
			
		Исключение 
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		ОкноExcel.Quit();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует файлы содержащие сведения о начислениях ЖКУ.
Процедура СформироватьФайлНачисленияЗаЖКУ(ФорматВыгрузки, ТаблицаСведений, ПериодНачисления, СоотвКатегорийПомещения)
	
	Если ФорматВыгрузки = "DBF" Тогда
		
		//Шапка
		ФайлДБФ = Новый XBase; 
		ФайлДБФ.Поля.Добавить("PERIOD",   "S", 6);
		ФайлДБФ.Поля.Добавить("LS_TSZH",  "S", 25);
		ФайлДБФ.Поля.Добавить("LS_VCKP",  "S", 25);
		ФайлДБФ.Поля.Добавить("ADDRESS",  "S", 150);
		ФайлДБФ.Поля.Добавить("N_ALL",    "N", 1);
		ФайлДБФ.Поля.Добавить("LIV_SUM",  "N", 8, 2);
		ФайлДБФ.Поля.Добавить("COM_SUM",  "N", 8, 2);
		ФайлДБФ.Поля.Добавить("ALL_SUM",  "N", 8, 2);
		ФайлДБФ.Поля.Добавить("SQ_PAY",   "N", 8, 2);
		ФайлДБФ.Поля.Добавить("LS_TYPE",  "S", 20);
		ФайлДБФ.Поля.Добавить("OWN_TYPE", "S", 20);
		
		ИмяФайлаКраткое = Лев("U_" + СокрЛП(КодОрганизации), 8);
		ИмяФайла        = "U_" + СокрЛП(КодОрганизации);
		ФайлДБФ.СоздатьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайлаКраткое + ".dbf");
		ФайлДБФ.АвтоСохранение = Истина;
		
		//Данные
		Для Каждого ТекСтрока Из ТаблицаСведений Цикл
			
			ФайлДБФ.Добавить();
			ФайлДБФ.PERIOD     = ПериодНачисления;
			ФайлДБФ.LS_TSZH    = ТекСтрока.ЛицевойСчетПредставление;
			ФайлДБФ.LS_VCKP    = ТекСтрока.ЛицевойСчетПредставление;
			ФайлДБФ.ADDRESS    = ТекСтрока.Адрес;
			ФайлДБФ.N_ALL      = ТекСтрока.КоличествоПроживающих;
			ФайлДБФ.LIV_SUM    = Окр(ТекСтрока.НачисленияПоЖилищнымУслугам, 2);
			ФайлДБФ.COM_SUM    = Окр(ТекСтрока.НачисленияПоКоммунальнымУслугам, 2);
			ФайлДБФ.ALL_SUM    = Окр(ТекСтрока.НачисленияПоЖилищнымУслугам, 2)
			                   + Окр(ТекСтрока.НачисленияПоКоммунальнымУслугам, 2);
			КатегорияПомещения = СоотвКатегорийПомещения.Получить(ТекСтрока.КатегорияПомещения);
			Если КатегорияПомещения = 2 ИЛИ КатегорияПомещения = 3 Тогда
				ФайлДБФ.SQ_PAY = ТекСтрока.ЖилаяПлощадь;
			Иначе
				ФайлДБФ.SQ_PAY = ТекСтрока.ОбщаяПлощадь;
			КонецЕсли;
			ФайлДБФ.LS_TYPE    = ТекСтрока.КатегорияПомещения;
			ФайлДБФ.OWN_TYPE   = ТекСтрока.СостояниеПомещения;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекСтрока.Адрес);
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
		ПереместитьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайлаКраткое + ".dbf", ИмяКаталогаВыгрузки + "\" + ИмяФайла + ".dbf");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
		
	ИначеЕсли ФорматВыгрузки = "XLS" Тогда
		
		Макет = ПолучитьМакет("ВЦКП");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьДетали = Макет.ПолучитьОбласть("Детали");
		
		ТабДок = Новый ТабличныйДокумент;
		
		ОбластьЗаголовок.Параметры.Заполнить(ЭтотОбъект);
		
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
		
		ПериодДляФайла = Формат(ПериодВыгрузки, "ДФ=гггг-ММ");
		ТипЧисло = Тип("Число");
		
		// Может пригодиться для обработки
		// ПерваяСтрокаОбластиТаблицы = ТабДок.ВысотаТаблицы+1;
		Для каждого СтрокаТаблицы Из ТаблицаСведений Цикл
			
			ОбластьДетали.Параметры.Заполнить(СтрокаТаблицы);
			ОбластьДетали.Параметры.Период = ПериодДляФайла;
			
			НачисленияПоЖилищнымУслугам = СтрокаТаблицы.НачисленияПоЖилищнымУслугам;
			НачисленияПоКоммунальнымУслугам = СтрокаТаблицы.НачисленияПоКоммунальнымУслугам;
			
			ОбластьДетали.Параметры.НачисленоВсего = НачисленияПоЖилищнымУслугам + НачисленияПоКоммунальнымУслугам;
			ТабДок.Вывести(ОбластьДетали);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаТаблицы.Адрес);
			
		КонецЦикла;
		// Может пригодиться для обработки
		// ПоследняяСтрокаОбластиТаблицы = ТабДок.ВысотаТаблицы;
		
		ТабДок.Вывести(ОбластьПодвал);
		
		ИмяФайлаВыгрузки = ИмяКаталогаВыгрузки + "\U_" + СокрЛП(КодОрганизации) + ".xls";
		ТипФайлаСохранения = ТипФайлаТабличногоДокумента.XLS97;
		// На релизе 8.1.11 в формат Office 97 сохраняет некорректно, в таком случае использовать следующую строку
		// ТипФайлаСохранения = ТипФайлаТабличногоДокумента.XLS95;
		
		ТабДок.Записать(ИмяФайлаВыгрузки, ТипФайлаСохранения);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли