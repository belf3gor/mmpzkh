
////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураЗначенийПолейФорматаВыгрузки  = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПодговитьСтруктуруЗначенийПолей();
	СтруктураЗначенийПолейНастроекВыгрузки = Справочники.УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных.ПодговитьСтруктуруЗначенийПолей();
	
	Объект.Период = ТекущаяДата();
	
	СтруктураПараметров = ХранилищеОбщихНастроек.Загрузить("УПЖКХ_УниверсальнаяВыгрузкаДанных");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("Организация") Тогда
			СтруктураПараметров.Свойство("Организация", Объект.Организация);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ФорматВыгрузки") Тогда
			СтруктураПараметров.Свойство("ФорматВыгрузки", Объект.ФорматВыгрузки);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ИмяФайлаРеестра") Тогда
			СтруктураПараметров.Свойство("ИмяФайлаРеестра", Объект.ИмяФайлаРеестра);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НастройкиВыгрузки") Тогда
			СтруктураПараметров.Свойство("НастройкиВыгрузки", Объект.НастройкиВыгрузки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ПериодСтрока = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.Период);
	
	СформироватьИмяФайла();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриЗакрытии" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьПараметрыНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленыНастройкиЗагрузкиВыгрузки"
	   И Источник = ЭтаФорма
	   И Параметр.Свойство("Ключ") Тогда
		Объект.ФорматВыгрузки = Параметр.Ключ;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_КОМАНД_ФОРМЫ

&НаКлиенте
// Процедура-обработчик команды "Выгрузить" формы.
Процедура Выгрузить(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		
		ФайлВыгрузки         = Новый Файл(Объект.ИмяФайлаРеестра);
		КаталогФайлаВыгрузки = Новый Файл(ФайлВыгрузки.Путь);
		
		КаталогФайлаВыгрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ВыгрузитьПродолжение", ЭтаФорма));
		
	КонецЕсли;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
//Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОБРАБОТЧИКИ_СОБЫТИЙ_ЭЛЕМЕНТОВ_ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" реквизита "ПериодСтрока".
//
Процедура ПериодСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииАвтоПодборТекста(ЭтаФорма, "Объект.Период", "ПериодСтрока", Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" реквизита "ПериодСтрока".
//
Процедура ПериодСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииОкончаниеВводаТекста(ЭтаФорма, "Объект.Период", "ПериодСтрока", Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "ПериодСтрока".
//
Процедура ПериодСтрокаПриИзменении(Элемент)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрока", Элемент);
	
	СформироватьИмяФайла();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Регулирование" реквизита "ПериодСтрока".
//
Процедура ПериодСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрока", Элемент, Направление, СтандартнаяОбработка);
	
	СформироватьИмяФайла();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Очистка" реквизита "ПериодСтрока".
//
Процедура ПериодСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" реквизита "ПериодСтрока".
//
Процедура ПериодСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииНачалоВыбора(ЭтаФорма, "Объект.Период", "ПериодСтрока", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля "ИмяФайлаРеестра".
//
Процедура ИмяФайлаРеестраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Период = Дата(1, 1, 1) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите период.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ФорматВыгрузки.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Укажите настройку выгрузки.");
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок               = "Выберите каталог";
	ДиалогВыбораФайла.МножественныйВыбор      = Ложь;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла          = Строка(Объект.ФорматВыгрузки) + " " + Формат(Объект.Период, "ДФ=ММ") + Формат(Объект.Период, "ДФ=гггг");
	
	ФорматФайла = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматВыгрузки, "ФорматФайла");
	
	Если ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[0].Значение Тогда // "TXT"
		
		ДиалогВыбораФайла.Фильтр = "Формат выгрузки(*.txt)|*.txt";
		
	ИначеЕсли ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[1].Значение Тогда // "XLS"
		
		ДиалогВыбораФайла.Фильтр = "Формат выгрузки(*.xls)|*.xls";
		
	ИначеЕсли ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[4].Значение Тогда // "DBF"
		
		ДиалогВыбораФайла.Фильтр = "Формат выгрузки(*.dbf)|*.dbf";
		
	КонецЕсли;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаРеестраНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "Открытие" поля "ИмяФайлаРеестра".
//
Процедура ИмяФайлаРеестраОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИмяФайлаРеестра      = ПолучитьИмяФайлаРеестра();
	
	Если НЕ ПустаяСтрока(ИмяФайлаРеестра) Тогда
		
		ФайлРеестра         = Новый Файл(ИмяФайлаРеестра);
		ПараметрыОповещения = Новый Структура("ИмяФайлаРеестра", ИмяФайлаРеестра);
		
		ФайлРеестра.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ИмяФайлаРеестраОткрытиеЗавершение", ЭтаФорма, ПараметрыОповещения));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	СформироватьИмяФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения   = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки", ЭтаФорма);
	СтруктураПараметров  = Новый Структура("Ключ, ТипОбъектаОткрытияФормы", Объект.ФорматВыгрузки, ТипЗнч(Объект));
	
	ОткрытьФорму("Справочник.КВП_НастройкиЗагрузкиВыгрузки.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик создания нового элемента справочника "Настройки загрузки / выгрузки".
//
Процедура ФорматВыгрузкиСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения   = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки", ЭтаФорма);
	ЗначенияЗаполнения   = Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.УниверсальнаяВыгрузкаДанных"));
	
	СтруктураПараметров  = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",                    Неопределено);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения",      ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("ТипОбъектаОткрытияФормы", ТипЗнч(Объект));
	
	ОткрытьФорму("Справочник.КВП_НастройкиЗагрузкиВыгрузки.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Показать" объекта "ДиалогВыбораФайла".
Процедура ИмяФайлаРеестраНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайлаРеестра = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачатьПроверкуСуществования".
Процедура ИмяФайлаРеестраОткрытиеЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ИмяФайлаРеестра = ДополнительныеПараметры.ИмяФайлаРеестра;
	
	Если Существует Тогда
		
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаРеестраОткрытиеЗавершениеЗавершение", ЭтаФорма), ИмяФайлаРеестра);
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Файл реестра не существует.");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "НачатьЗапускПриложения".
Процедура ИмяФайлаРеестраОткрытиеЗавершениеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ФорматВыгрузки".
//
Процедура ФорматВыгрузкиПриИзменении(Элемент)
	
	СформироватьИмяФайла();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВСПОМОГАТЕЛЬНЫЕ_ПРОЦЕДУРЫ_И_ФУНКЦИИ

&НаСервере
// Процедура сохраняет параметры выгрузки.
Процедура СохранитьПараметрыНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",       Объект.Организация);
	СтруктураПараметров.Вставить("ФорматВыгрузки",    Объект.ФорматВыгрузки);
	СтруктураПараметров.Вставить("ИмяФайлаРеестра",   Объект.ИмяФайлаРеестра);
	СтруктураПараметров.Вставить("НастройкиВыгрузки", Объект.НастройкиВыгрузки);
	
	ХранилищеОбщихНастроек.Сохранить("УПЖКХ_УниверсальнаяВыгрузкаДанных", , СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
// Процедура формирует имя файла рестра.
Процедура СформироватьИмяФайла()
	
	ПапкаСохранения = "";
	ФорматФайла     = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматВыгрузки, "ФорматФайла");
	
	Если НЕ ПустаяСтрока(Объект.ИмяФайлаРеестра) Тогда
		
		Файл              = Новый Файл(Объект.ИмяФайлаРеестра);
		Папка             = Новый Файл(Файл.Путь);
		ПараметрыОписания = Новый Структура("Папка, ФорматФайла", Файл.Путь, ФорматФайла);
		
		Папка.НачатьПроверкуСуществования(Новый ОписаниеОповещения("СформироватьИмяФайлаЗавершение", ЭтаФорма, ПараметрыОписания));
		Возврат;
		
	КонецЕсли;
	
	СформироватьИмяФайлаФрагмент(ПапкаСохранения, ФорматФайла);
	
КонецПроцедуры

&НаСервере
// Функция проверяет наличие параметра "Счетчик и показание".
Функция ЕстьПараметрСчетчикИПоказание()
	
	ВыгружатьПоказания = Ложь;
	
	Если НЕ Объект.ФорматВыгрузки.Пустая() Тогда
		
		Отбор           = Новый Структура("Параметр", Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание);
		НайденныеСтроки = Объект.ФорматВыгрузки.НастройкиСоответствияПолей.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Если Объект.ФорматВыгрузки.ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[4].Значение Тогда // "DBF"
				
				ВыгружатьПоказания = Истина;
				
			Иначе
				
				Для Каждого ТекущийПараметр Из НайденныеСтроки Цикл
					Если ТекущийПараметр.НомерКолонки <> 0 Тогда
						ВыгружатьПоказания = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыгружатьПоказания;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу лицевых счетов.
//
// Параметры:
//  Запрос - результат запроса менеджера временных таблиц.
//
Функция ПолучитьТаблицуЛицевыхСчетов(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	КодПомещения";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу долгов лицевых счетов на конец периода.
//
// Параметры:
//  Запрос	 - результат запроса менеджера временных таблиц.
// 
// Возвращаемое значение:
//   Таблица значений.
//
Функция ПолучитьТаблицуДолговПоЛицевымСчетам(Запрос, ПараметрыВыгрузки)
	
	НайденнаяСтрокаПараметраСуммаДолга = ПараметрыВыгрузки.ТаблицаПараметров.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга, "Параметр");
	Если НЕ (НайденнаяСтрокаПараметраСуммаДолга <> Неопределено ИЛИ ПараметрыВыгрузки.ТипОтбораПоСуммеДолга <> 0
			 ИЛИ (ПараметрыВыгрузки.ЭтоTXT И ПараметрыВыгрузки.ВыводитьЗаголовок)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НайденнаяСтрокаПараметраСуммаДолга = Неопределено Тогда
		ТипПериодаДолга = ПараметрыВыгрузки.СтруктураЗначенийПолейФорматаВыгрузки.СпТипПериодаДолга[1].Значение// 1; // поиск долга на конец периода.
	Иначе
		ТипПериодаДолга = НайденнаяСтрокаПараметраСуммаДолга.ТипПериодаДолга; // поиск долга на выбранный период в настройках выгрузки.
	КонецЕсли;
	
	ТипОтбораПоСуммеДолга = ПараметрыВыгрузки.ТипОтбораПоСуммеДолга;
	МинимальнаяСуммаДолга = ПараметрыВыгрузки.МинимальнаяСуммаДолга;
	ВыбранныеУслуги       = ПараметрыВыгрузки.ВыбранныеУслуги;
	ВыборУслуг            = ПараметрыВыгрузки.ВыборУслуг;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаДолга
	|ПОМЕСТИТЬ втОстаткиПоЛицевымСчетам
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ПериодПоТипу,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						врТаблицаЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)
	|				И &УсловиеПоУслугам) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втОстаткиПоЛицевымСчетам.СуммаДолга, 0) КАК СуммаДолга
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоЛицевымСчетам КАК втОстаткиПоЛицевымСчетам
	|		ПО врТаблицаЛицевыеСчета.ЛицевойСчет = втОстаткиПоЛицевымСчетам.ЛицевойСчет
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ТипОтбораПоСуммеДолга = 1
	|				ТОГДА ЕСТЬNULL(втОстаткиПоЛицевымСчетам.СуммаДолга, 0) >= &МинимальнаяСуммаДолга
	|			КОГДА &ТипОтбораПоСуммеДолга = 2
	|				ТОГДА ЕСТЬNULL(втОстаткиПоЛицевымСчетам.СуммаДолга, 0) > 0
	|			КОГДА &ТипОтбораПоСуммеДолга = 3
	|				ТОГДА ЕСТЬNULL(втОстаткиПоЛицевымСчетам.СуммаДолга, 0) < 0
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстаткиПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	втОстатки.СуммаДолга КАК СуммаДолга
	|ИЗ
	|	втОстатки КАК втОстатки";
	
	// Значения параметра "ТипОтбораПоСуммеДолга":
	// 0 - нет отбора по сумме долга.
	// 1 - выгружаются лицевые счета с суммой долга, больший или равный Минимальной сумме долга.
	// 2 - выгружаются лицевые счета только с "положительным" долгом.
	// 3 - выгружаются лицевые счета только с "отрицательным" долгом (переплатами).
	
	Запрос.УстановитьПараметр("ТипОтбораПоСуммеДолга", ТипОтбораПоСуммеДолга);
	Запрос.УстановитьПараметр("МинимальнаяСуммаДолга", МинимальнаяСуммаДолга);
	
	Если ТипПериодаДолга = ПараметрыВыгрузки.СтруктураЗначенийПолейФорматаВыгрузки.СпТипПериодаДолга[0].Значение Тогда // 0
		Период = Запрос.Параметры.НачалоПериода;
	Иначе
		Период = Запрос.Параметры.КонецПериода + 1;
	КонецЕсли;
	Запрос.УстановитьПараметр("ПериодПоТипу", Период);
	
	Если ВыборУслуг = 0 Тогда // Все услуги.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "ИСТИНА");
	Иначе
		Запрос.УстановитьПараметр("СписокУслуг", ВыбранныеУслуги);
		Если ВыборУслуг = 1 Тогда // По выбранным услугам.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "Услуга В (&СписокУслуг)");
		ИначеЕсли ВыборУслуг = 2 Тогда // Все услуги, кроме выбранных.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "НЕ Услуга В (&СписокУслуг)");
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДолгов = Запрос.Выполнить().Выгрузить();
	
	// Скорректируем временную таблицу лицевых счетов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ врТаблицаЛицевыеСчетаСОтборомПоСуммеДолга
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ТипОтбораПоСуммеДолга <> 0
	|			ТОГДА врТаблицаЛицевыеСчета.ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втОстатки.ЛицевойСчет
	|				ИЗ
	|					втОстатки КАК втОстатки)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ врТаблицаЛицевыеСчета
	|ИЗ
	|	врТаблицаЛицевыеСчетаСОтборомПоСуммеДолга КАК врТаблицаЛицевыеСчетаСОтборомПоСуммеДолга";
	Запрос.Выполнить();
	
	Возврат ТаблицаДолгов;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу площадей лицевых счетов.
//
// Параметры:
//  Запрос						 - результат запроса менеджера временных таблиц.
//  УчитыватьДолюЛицевогоСчета	 - Булево - параметр определяет: учитывать долю лицевого счета или нет.
// 
// Возвращаемое значение:
//   Таблица значений.
//
Функция ПолучитьТаблицуПлощадей(Запрос, ПараметрыВыгрузки)
	
	НайденнаяСтрокаПараметраПлощадь = ПараметрыВыгрузки.ТаблицаПараметров.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Площадь, "Параметр");
	Если НайденнаяСтрокаПараметраПлощадь = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидПлощади", НайденнаяСтрокаПараметраПлощадь.ВидПлощади);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&КонецПериода,
	|			Объект В
	|					(ВЫБРАТЬ
	|						врТаблицаЛицевыеСчета.Помещение
	|					ИЗ
	|						врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)
	|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЛицевыеСчета.ЛицевойСчет,
	|	врТаблицаЛицевыеСчета.Помещение,
	|	ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) КАК ПлощадьПомещения
	|ПОМЕСТИТЬ втПлощадиПомещенийПоЛицевымСчетам
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО врТаблицаЛицевыеСчета.Помещение = втПлощадиПомещений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощадиПомещений";
	
	Если НайденнаяСтрокаПараметраПлощадь.УчитыватьДолюЛицевогоСчета Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект КАК Помещение,
		|	ВЫБОР
		|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|	КОНЕЦ КАК РазмерДоли
		|ПОМЕСТИТЬ втРазмерыДолейЛицевыхСчетов
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&КонецПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					врТаблицаЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПлощадиПомещенийПоЛицевымСчетам.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА втРазмерыДолейЛицевыхСчетов.РазмерДоли ЕСТЬ NULL 
		|			ТОГДА втПлощадиПомещенийПоЛицевымСчетам.ПлощадьПомещения
		|		ИНАЧЕ втПлощадиПомещенийПоЛицевымСчетам.ПлощадьПомещения * ЕСТЬNULL(втРазмерыДолейЛицевыхСчетов.РазмерДоли, 0)
		|	КОНЕЦ КАК Площадь
		|ИЗ
		|	втПлощадиПомещенийПоЛицевымСчетам КАК втПлощадиПомещенийПоЛицевымСчетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРазмерыДолейЛицевыхСчетов КАК втРазмерыДолейЛицевыхСчетов
		|		ПО втПлощадиПомещенийПоЛицевымСчетам.ЛицевойСчет = втРазмерыДолейЛицевыхСчетов.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втРазмерыДолейЛицевыхСчетов";
	Иначе
		Запрос.Текст = Запрос.Текст +
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПлощадиПомещенийПоЛицевымСчетам.ЛицевойСчет,
		|	втПлощадиПомещенийПоЛицевымСчетам.ПлощадьПомещения КАК Площадь
		|ИЗ
		|	втПлощадиПомещенийПоЛицевымСчетам КАК втПлощадиПомещенийПоЛицевымСчетам";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу контактных данных лицевых счетов.
//
// Параметры:
//  Запрос	 - результат запроса менеджера временных таблиц.
// 
// Возвращаемое значение:
//   Таблица значений.
//
Функция ПолучитьТаблицуКонтактныхДанных(Запрос, ПараметрыВыгрузки)
	
	НайденнаяСтрокаПараметраНомерТелефона = ПараметрыВыгрузки.ТаблицаПараметров.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.НомерТелефона, "Параметр");
	
	Если НайденнаяСтрокаПараметраНомерТелефона = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыгружатьТолькоСНомерамиТелефонов = ПараметрыВыгрузки.ВыгружатьТолькоСНомерамиТелефонов;
	
	Запрос.УстановитьПараметр("ВыгружатьТолькоСНомерамиТелефонов", ВыгружатьТолькоСНомерамиТелефонов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТелефоновЖильцов.Жилец КАК Жилец,
	|	ТаблицаТелефоновЖильцов.СписокТелефонов КАК СписокТелефонов
	|ПОМЕСТИТЬ втТелефоныЖильцов
	|ИЗ
	|	&ТаблицаТелефоновЖильцов КАК ТаблицаТелефоновЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Ссылка КАК ОтветственныйВладелец,
	|	КонтактнаяИнформация.Представление КАК НомерТелефонаКонтрагента
	|ПОМЕСТИТЬ врТаблицаКонтактнаяИнформацияКонтрагента
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				врТаблицаЛицевыеСчета.ОтветственныйВладелец
	|			ИЗ
	|				врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)
	|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|	И ВЫБОР
	|			КОГДА &ВыгружатьТолькоСНомерамиТелефонов
	|				ТОГДА КонтактнаяИнформация.Представление <> """"
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаЛицевыеСчета.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	врТаблицаЛицевыеСчета.ОтветственныйВладелецПредставление КАК ОтветственныйВладелецПредставление,
	|	ВЫБОР
	|		КОГДА врТаблицаЛицевыеСчета.НомерТелефонаЛС <> """"
	|			ТОГДА врТаблицаЛицевыеСчета.НомерТелефонаЛС
	|		КОГДА врТаблицаЛицевыеСчета.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
	|			ТОГДА ЕСТЬNULL(втТелефоныЖильцов.СписокТелефонов, """")
	|		КОГДА врТаблицаЛицевыеСчета.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЕСТЬNULL(врТаблицаКонтактнаяИнформацияКонтрагента.НомерТелефонаКонтрагента, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерТелефона
	|ПОМЕСТИТЬ врТаблицаНомераТелефонов
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКонтактнаяИнформацияКонтрагента КАК врТаблицаКонтактнаяИнформацияКонтрагента
	|		ПО врТаблицаЛицевыеСчета.ОтветственныйВладелец = врТаблицаКонтактнаяИнформацияКонтрагента.ОтветственныйВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТелефоныЖильцов КАК втТелефоныЖильцов
	|		ПО врТаблицаЛицевыеСчета.ОтветственныйВладелец = втТелефоныЖильцов.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаНомераТелефонов.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаНомераТелефонов.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	врТаблицаНомераТелефонов.ОтветственныйВладелецПредставление КАК ОтветственныйВладелецПредставление,
	|	врТаблицаНомераТелефонов.НомерТелефона КАК НомерТелефона
	|ПОМЕСТИТЬ ТаблицаКонтактныеДанные
	|ИЗ
	|	врТаблицаНомераТелефонов КАК врТаблицаНомераТелефонов
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВыгружатьТолькоСНомерамиТелефонов
	|				ТОГДА врТаблицаНомераТелефонов.НомерТелефона <> """"
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаНомераТелефонов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаКонтактнаяИнформацияКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКонтактныеДанные.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаКонтактныеДанные.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	ТаблицаКонтактныеДанные.ОтветственныйВладелецПредставление КАК ОтветственныйВладелецПредставление,
	|	ТаблицаКонтактныеДанные.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	ТаблицаКонтактныеДанные КАК ТаблицаКонтактныеДанные";
	
	ТаблицаКонтактныеДанные = Запрос.Выполнить().Выгрузить();
	
	Если ВыгружатьТолькоСНомерамиТелефонов Тогда // обновляем таблицу лицевых счетов.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ врТаблицаЛицевыеСчетаСОтбором
		|ИЗ
		|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтактныеДанные КАК ТаблицаКонтактныеДанные
		|		ПО врТаблицаЛицевыеСчета.ЛицевойСчет = ТаблицаКонтактныеДанные.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ врТаблицаЛицевыеСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ врТаблицаЛицевыеСчета
		|ИЗ
		|	врТаблицаЛицевыеСчетаСОтбором КАК врТаблицаЛицевыеСчетаСОтбором";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Возврат ТаблицаКонтактныеДанные;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу начислений по лицевым счетам.
//
// Параметры:
//  Запрос	 - результат запроса менеджера временных таблиц.
// 
// Возвращаемое значение:
//   Таблица значений.
//
Функция ПолучитьТаблицуНачислений(Запрос, ПараметрыВыгрузки)
	
	НайденнаяСтрокаСуммаНачислений = ПараметрыВыгрузки.ТаблицаПараметров.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений, "Параметр");
	
	Если НЕ (НайденнаяСтрокаСуммаНачислений <> Неопределено
	 ИЛИ (ПараметрыВыгрузки.ЭтоTXT И ПараметрыВыгрузки.ВыводитьЗаголовок))Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборУслуг      = ПараметрыВыгрузки.ВыборУслуг;
	ВыбранныеУслуги = ПараметрыВыгрузки.ВыбранныеУслуги;
	
	Если НайденнаяСтрокаСуммаНачислений = Неопределено Тогда
		УчитыватьЛьготыДляСуммыНачислений = Истина;
	Иначе
		УчитыватьЛьготыДляСуммыНачислений = НайденнаяСтрокаСуммаНачислений.УчитыватьЛьготы;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисления
	|ПОМЕСТИТЬ Начисление
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						врТаблицаЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)
	|				И НЕ РазделУчета В (&ИсключаемыеРазделыУчета)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И &УсловиеПоУслугам) КАК УПЖКХ_НачисленияОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.СуммаНачисленияОборот
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						врТаблицаЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)) КАК УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты
	|ГДЕ
	|	НЕ УПЖКХ_НачисленияПоДобровольномуСтрахованиюОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисление.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(Начисление.СуммаНачисления) КАК СуммаНачисления
	|ИЗ
	|	Начисление КАК Начисление
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисление.ЛицевойСчет";
	
	ИсключаемыеРазделыУчета = Новый СписокЗначений;
	ИсключаемыеРазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование);
	Если НЕ УчитыватьЛьготыДляСуммыНачислений Тогда
		ИсключаемыеРазделыУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Льготы);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИсключаемыеРазделыУчета", ИсключаемыеРазделыУчета);
	
	Если ВыборУслуг = 0 Тогда // Все услуги.
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "ИСТИНА");
		
	Иначе
		
		Запрос.УстановитьПараметр("СписокУслуг", ВыбранныеУслуги);
		
		Если ВыборУслуг = 1 Тогда
			
			// По выбранным услугам.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "Услуга В (&СписокУслуг)");
			
		ИначеЕсли ВыборУслуг = 2 Тогда
			
			// Все услуги, кроме выбранных.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "НЕ Услуга В (&СписокУслуг)");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
// Функция формирует файл и заполняет его данными.
//
// Параметры:
//  ПараметрыВыгрузки	 - Структура	 - настройки выгрузки.
//  ТаблицаДанных		 - ТаблицаЗначений	 - таблица данных.
// 
// Возвращаемое значение:
//  ТекстовыйДокумент, ТабличныйДокумент, XBase.
//
Функция ПолучитьФайлРеестра(ПараметрыВыгрузки, ТаблицаДанных)
	
	ФайлРеестра = Неопределено;
	
	ФорматФайла                             = ПараметрыВыгрузки.ФорматФайла;
	ВыгружатьПоказанияСчетчиков             = ПараметрыВыгрузки.ВыгружатьПоказанияСчетчиков;
	Кодировка                               = ПараметрыВыгрузки.Кодировка;
	КолонкиДанных                           = ТаблицаДанных.Колонки;
	МаксимальноеКоличествоПоказаний         = ПараметрыВыгрузки.МаксимальноеКоличествоПоказаний;
	
	Если ПараметрыВыгрузки.ЭтоTXT ИЛИ ПараметрыВыгрузки.ЭтоCSV Тогда
		
		ФайлРеестра = Новый ТекстовыйДокумент;
		ФайлРеестра.УстановитьТипФайла(?(Кодировка = "DOS", КодировкаТекста.OEM, КодировкаТекста.ANSI));
		
		Если ПараметрыВыгрузки.ЭтоTXT И ПараметрыВыгрузки.ВыводитьЗаголовок Тогда
			
			ТекстЗаголовка = СтрЗаменить(ПараметрыВыгрузки.ТекстЗаголовка, "[КоличествоЗаписей]", Формат(ТаблицаДанных.Количество(), "ЧГ="));
			ФайлРеестра.ДобавитьСтроку(ТекстЗаголовка);
			
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
			
			СтрокаВывода = "";
			
			Для Каждого ТекущаяКолонка Из КолонкиДанных Цикл
				
				Значение = ТекущаяСтрока[ТекущаяКолонка.Имя];
				
				Если ВыгружатьПоказанияСчетчиков И ТекущаяКолонка.Имя = "ТаблицаСчетчикиИПоказания" Тогда
					
					ТекущаяСтрокаПоказаний = Значение[0];
					
					Для Сч = 1 По ТекущаяСтрокаПоказаний.КоличествоПолейСПоказаниямиПоЛС Цикл
						
						ТекущаяКолонкаПоказаний = Значение.Колонки[Сч - 1];
						
						Если НЕ ТекущаяКолонкаПоказаний.Имя = "КоличествоПолейСПоказаниямиПоЛС" Тогда
							
							ЗначениеТаблицыПоказаний = ТекущаяСтрокаПоказаний[ТекущаяКолонкаПоказаний.Имя];
							СтрокаВывода             = СтрокаВывода + ЗначениеТаблицыПоказаний;
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					СтрокаВывода = СтрокаВывода + Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(СтрокаВывода) Тогда
				
				ФайлРеестра.ДобавитьСтроку(СтрокаВывода);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыВыгрузки.ЭтоXLS Тогда
		
		ФайлРеестра = Новый ТабличныйДокумент;
		
		Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
			
			ТаблицаСчетчикиИПоказания = Неопределено;
			
			НомерСтроки = ТаблицаДанных.Индекс(ТекущаяСтрока) + 1;
			
			Для Каждого ТекущаяКолонка Из КолонкиДанных Цикл
				
				Значение = ТекущаяСтрока[ТекущаяКолонка.Имя];
				
				НомерКолонки = КолонкиДанных.Индекс(ТекущаяКолонка);
				
				Если ВыгружатьПоказанияСчетчиков И ТекущаяКолонка.Имя = "ТаблицаСчетчикиИПоказания" Тогда
					
					ТаблицаСчетчикиИПоказания = Значение;
					КолонкиТаблицыПоказаний   = ТаблицаСчетчикиИПоказания.Колонки;
					ТекущаяСтрокаПоказаний    = Значение[0];
					
					Для Каждого ТекущаяКолонкаПоказаний Из ТаблицаСчетчикиИПоказания.Колонки Цикл
						
						Если НЕ ТекущаяКолонкаПоказаний.Имя = "КоличествоПолейСПоказаниямиПоЛС" Тогда
							
							НомерКолонкиПоказаний = КолонкиТаблицыПоказаний.Индекс(ТекущаяКолонкаПоказаний) + 1;
							
							ЗначениеТаблицыПоказаний = ТекущаяСтрокаПоказаний[ТекущаяКолонкаПоказаний.Имя];
							ОбластьЯчейка            = ФайлРеестра.Область(НомерСтроки, НомерКолонки + НомерКолонкиПоказаний, НомерСтроки, НомерКолонки + НомерКолонкиПоказаний);
							ОбластьЯчейка.Текст      = ЗначениеТаблицыПоказаний;
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					Если ВыгружатьПоказанияСчетчиков И НЕ ТаблицаСчетчикиИПоказания = Неопределено Тогда
						НомерКолонки = НомерКолонки + ТаблицаСчетчикиИПоказания.Колонки.Количество() - 1;
					Иначе
						НомерКолонки = НомерКолонки + 1;
					КонецЕсли;
					
					ОбластьЯчейка       = ФайлРеестра.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
					ОбластьЯчейка.Текст = Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыВыгрузки.ЭтоDBF Тогда
		
		ИмяФайлаРеестра = ПолучитьИмяВременногоФайла("DBF");
		
		Файл     = Новый Файл(ИмяФайлаРеестра);
		ВремФайл = Файл.Путь + Прав(Файл.Имя, 8 + 4);
		
		ФайлDBF = Новый XBase(ВремФайл);
		ФайлDBF.АвтоСохранение = Истина;
		ФайлDBF.Кодировка      = ?(Кодировка = "DOS", КодировкаXBase.OEM, КодировкаXBase.ANSI);
		
		Если ВыгружатьПоказанияСчетчиков Тогда
			КолонкиТаблицыПоказаний = ТаблицаДанных[0].ТаблицаСчетчикиИПоказания.Колонки;
		КонецЕсли;
		
		Для Каждого ТекущаяКолонка Из КолонкиДанных Цикл
			
			Если ВыгружатьПоказанияСчетчиков И ТекущаяКолонка.Имя = "ТаблицаСчетчикиИПоказания" Тогда
				
				Для Каждого ТекущаяКолонкаПоказаний Из КолонкиТаблицыПоказаний Цикл
					
					Если НЕ ТекущаяКолонкаПоказаний.Имя = "КоличествоПолейСПоказаниямиПоЛС" Тогда
						
						ФайлDBF.Поля.Добавить(ЗаголовокКолонкиDBF(ТекущаяКолонкаПоказаний.Заголовок), "S", 50);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ФайлDBF.Поля.Добавить(ЗаголовокКолонкиDBF(ТекущаяКолонка.Заголовок), "S", 50);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ФайлDBF.СоздатьФайл(ВремФайл);
		
		Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
			
			ФайлDBF.Добавить();
			
			Для Каждого ТекущаяКолонка Из КолонкиДанных Цикл
				
				Значение = ТекущаяСтрока[ТекущаяКолонка.Имя];
				
				Если ВыгружатьПоказанияСчетчиков И ТекущаяКолонка.Имя = "ТаблицаСчетчикиИПоказания" Тогда
					
					ТекущаяСтрокаПоказаний = Значение[0];
					
					Для Каждого ТекущаяКолонкаПоказаний Из КолонкиТаблицыПоказаний Цикл
						
						Если НЕ ТекущаяКолонкаПоказаний.Имя = "КоличествоПолейСПоказаниямиПоЛС" Тогда
							
							ФайлDBF[ТекущаяКолонкаПоказаний.Заголовок] = ТекущаяСтрокаПоказаний[ТекущаяКолонкаПоказаний.Имя];
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					ФайлDBF[ТекущаяКолонка.Заголовок] = Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ФайлDBF.Записать();
			
		КонецЦикла;
		
		ЗакрытьФайлDBF(ФайлDBF);
		
		ФайлРеестра = Новый Файл(ВремФайл);
		
	КонецЕсли;
	
	Возврат ФайлРеестра;
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу показаний счетчиков.
//
// Параметры:
//  Запрос	 - результат запроса менеджера временных таблиц.
// 
// Возвращаемое значение:
//   Таблица значений.
//
Функция ПолучитьТаблицуПоказаний(Запрос, ПараметрыВыгрузки)
	
	Если НЕ ПараметрыВыгрузки.ВыгружатьПоказанияСчетчиков Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипВыгрузкиДанныхПоПоказаниямСчетчиков = ПараметрыВыгрузки.ТипВыгрузкиДанныхПоПоказаниямСчетчиков;
	ВыборУслуг                             = ПараметрыВыгрузки.ВыборУслуг;
	ВыбранныеУслуги                        = ПараметрыВыгрузки.ВыбранныеУслуги;
	ИдентификацияПУ                        = ПараметрыВыгрузки.ИдентификацияПУ;
	
	Запрос.УстановитьПараметр("ИдентификацияПУ", ПараметрыВыгрузки.ИдентификацияПУ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	ВЫБОР
	|		КОГДА &ИдентификацияПУ = ""наименование""
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик)
	|		КОГДА &ИдентификацияПУ = ""код""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Код
	|		КОГДА &ИдентификацияПУ = ""идентификатор""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Идентификатор
	|		КОГДА &ИдентификацияПУ = ""наименование""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Наименование
	|		КОГДА &ИдентификацияПУ = ""заводской номер""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ЗаводскойНомер
	|	КОНЕЦ КАК СчетчикПредставление,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Тарифность КАК Тарифность
	|ПОМЕСТИТЬ ЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&КонецПериода,
	|			Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|				И Объект В
	|					(ВЫБРАТЬ
	|						врТаблицаЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)
	|				И ДатаИзменения < &КонецПериода
	|				И &УсловиеПоУслугам) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	ВЫБОР
	|		КОГДА &ИдентификацияПУ = ""наименование""
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик)
	|		КОГДА &ИдентификацияПУ = ""код""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Код
	|		КОГДА &ИдентификацияПУ = ""идентификатор""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Идентификатор
	|		КОГДА &ИдентификацияПУ = ""наименование""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Наименование
	|		КОГДА &ИдентификацияПУ = ""заводской номер""
	|			ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ЗаводскойНомер
	|	КОНЕЦ,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Тарифность
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&КонецПериода,
	|			Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				И Объект В
	|					(ВЫБРАТЬ
	|						врТаблицаЛицевыеСчета.Помещение
	|					ИЗ
	|						врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета)
	|				И ДатаИзменения < &КонецПериода
	|				И &УсловиеПоУслугам) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик КАК Счетчик,
	|	ПРЕДСТАВЛЕНИЕ(КВП_ПоказанияСчетчиковСрезПоследних.Счетчик) КАК СчетчикПредставление,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание КАК ДневноеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание КАК НочноеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание КАК ПиковоеПоказание
	|ПОМЕСТИТЬ ПоказанияСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|			&КонецПериода,
	|			Счетчик В
	|					(ВЫБРАТЬ
	|						ЗакрепленныеСчетчики.Счетчик
	|					ИЗ
	|						ЗакрепленныеСчетчики КАК ЗакрепленныеСчетчики)
	|				И &УсловиеПоУслугам) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакрепленныеСчетчики.Объект КАК Объект,
	|	ЗакрепленныеСчетчики.СчетчикПредставление КАК СчетчикПредставление,
	|	ЕСТЬNULL(ПоказанияСчетчиков.ДневноеПоказание, 0) КАК ДневноеПоказание,
	|	ЕСТЬNULL(ПоказанияСчетчиков.НочноеПоказание, 0) КАК НочноеПоказание,
	|	ЕСТЬNULL(ПоказанияСчетчиков.ПиковоеПоказание, 0) КАК ПиковоеПоказание,
	|	ЗакрепленныеСчетчики.Тарифность КАК Тарифность
	|ПОМЕСТИТЬ втОбъектыСПоказаниямиПУ
	|ИЗ
	|	ЗакрепленныеСчетчики КАК ЗакрепленныеСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказанияСчетчиков КАК ПоказанияСчетчиков
	|		ПО ЗакрепленныеСчетчики.Счетчик = ПоказанияСчетчиков.Счетчик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТаблицаЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.СчетчикПредставление, """") КАК СчетчикПредставление,
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.ДневноеПоказание, 0) КАК ДневноеПоказание,
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.НочноеПоказание, 0) КАК НочноеПоказание,
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.ПиковоеПоказание, 0) КАК ПиковоеПоказание,
	|	ВЫБОР
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|			ТОГДА 1
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|			ТОГДА 2
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
	|			ТОГДА 3
	|	КОНЕЦ КАК Тарифность
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбъектыСПоказаниямиПУ КАК втОбъектыСПоказаниямиПУ
	|		ПО врТаблицаЛицевыеСчета.ЛицевойСчет = втОбъектыСПоказаниямиПУ.Объект
	|ГДЕ
	|	втОбъектыСПоказаниямиПУ.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	врТаблицаЛицевыеСчета.ЛицевойСчет,
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.СчетчикПредставление, """"),
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.ДневноеПоказание, 0),
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.НочноеПоказание, 0),
	|	ЕСТЬNULL(втОбъектыСПоказаниямиПУ.ПиковоеПоказание, 0),
	|	ВЫБОР
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|			ТОГДА 1
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|			ТОГДА 2
	|		КОГДА втОбъектыСПоказаниямиПУ.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
	|			ТОГДА 3
	|	КОНЕЦ
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбъектыСПоказаниямиПУ КАК втОбъектыСПоказаниямиПУ
	|		ПО врТаблицаЛицевыеСчета.Помещение = втОбъектыСПоказаниямиПУ.Объект
	|ГДЕ
	|	втОбъектыСПоказаниямиПУ.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	СчетчикПредставление";
	
	Если ВыборУслуг = 0 Тогда // Все услуги.
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "ИСТИНА");
		
	Иначе
		
		Запрос.УстановитьПараметр("СписокУслуг", ВыбранныеУслуги);
		
		Если ВыборУслуг = 1 Тогда // По выбранным услугам.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "Счетчик.ВидУслуги В (&СписокУслуг)");
		ИначеЕсли ВыборУслуг = 2 Тогда // Все услуги, кроме выбранных.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоУслугам", "НЕ Счетчик.ВидУслуги В (&СписокУслуг)");
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПоказаний = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЛицевыхСчетовСПоказаниями = Неопределено;
	
	Если ТаблицаПоказаний.Количество() > 0 Тогда
		
		ТаблицаЛС = ТаблицаПоказаний.Скопировать(, "ЛицевойСчет");
		ТаблицаЛС.Свернуть("ЛицевойСчет");
		
		ТаблицаЛицевыхСчетовСПоказаниями = Новый ТаблицаЗначений;
		ТаблицаЛицевыхСчетовСПоказаниями.Колонки.Добавить("ЛицевойСчет",         Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ТаблицаЛицевыхСчетовСПоказаниями.Колонки.Добавить("Показания",           Новый ОписаниеТипов("ТаблицаЗначений"));
		ТаблицаЛицевыхСчетовСПоказаниями.Колонки.Добавить("КоличествоПоказаний", Новый ОписаниеТипов("Число"));
		
		Показания = Новый ТаблицаЗначений;
		
		Показания.Колонки.Добавить("Счетчик",   Новый ОписаниеТипов("Строка"));
		Показания.Колонки.Добавить("Показание", Новый ОписаниеТипов("Число"));
		
		СтруктураЗаполнения = Новый Структура("Счетчик, Показание");
		
		Для Каждого ТекущийЛС Из ТаблицаЛС Цикл
			
			ТаблицаПоказанийТекущегоЛС = ТаблицаПоказаний.Скопировать(Новый Структура("ЛицевойСчет", ТекущийЛС.ЛицевойСчет));
			
			НоваяСтрока = ТаблицаЛицевыхСчетовСПоказаниями.Добавить();
			НоваяСтрока.ЛицевойСчет = ТекущийЛС.ЛицевойСчет;
			
			Если Показания.Количество() > 0 Тогда
				Показания.Очистить();
			КонецЕсли;
			
			Для Каждого ТекущаяСтрока Из ТаблицаПоказанийТекущегоЛС Цикл
				
				Тарифность = ТекущаяСтрока.Тарифность;
				
				Если Тарифность = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипВыгрузкиДанныхПоПоказаниямСчетчиков = 0 // Только по счетчикам с показаниями
				   И (ТекущаяСтрока.ДневноеПоказание = 0 И ТекущаяСтрока.НочноеПоказание = 0 И ТекущаяСтрока.ПиковоеПоказание = 0) Тогда
					Продолжить;
				КонецЕсли;
				
				СчетчикПредставление = ТекущаяСтрока.СчетчикПредставление;
				
				// Дневное показание.
				СтруктураЗаполнения.Счетчик   = "" + СчетчикПредставление + ?(Тарифность = 1, "", " ДЕНЬ");
				СтруктураЗаполнения.Показание = ТекущаяСтрока.ДневноеПоказание;
				ЗаполнитьЗначенияСвойств(Показания.Добавить(), СтруктураЗаполнения);
				
				Если Тарифность <> 1 Тогда
					
					// Ночное показание.
					СтруктураЗаполнения.Счетчик   = "" + СчетчикПредставление + " НОЧЬ";
					СтруктураЗаполнения.Показание = ТекущаяСтрока.НочноеПоказание;
					ЗаполнитьЗначенияСвойств(Показания.Добавить(), СтруктураЗаполнения);
					
					// Пиковое показание.
					Если Тарифность = 3 Тогда
						СтруктураЗаполнения.Счетчик   = "" + СчетчикПредставление + " ПИК";
						СтруктураЗаполнения.Показание = ТекущаяСтрока.ПиковоеПоказание;
						ЗаполнитьЗначенияСвойств(Показания.Добавить(), СтруктураЗаполнения);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока.Показания           = Показания.Скопировать();
			НоваяСтрока.КоличествоПоказаний = Показания.Количество();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЛицевыхСчетовСПоказаниями;
	
КонецФункции

&НаКлиенте
// Заменяет параметры в наименовании файла реестра.
Функция ПолучитьИмяФайлаРеестра()
	
	ИмяФайлаРеестра = "";
	
	Если Найти(Объект.ИмяФайлаРеестра, "[ИНН]") > 0
	 ИЛИ Найти(Объект.ИмяФайлаРеестра, "[Расчетный счет]") > 0 Тогда
		
		СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Объект.Организация, Объект.Период, "ИННЮЛ, БанкСчетНомер");
		ИмяФайлаРеестра       = СтрЗаменить(Объект.ИмяФайлаРеестра, "[ИНН]",            СведенияОбОрганизации.ИННЮЛ);
		ИмяФайлаРеестра       = СтрЗаменить(ИмяФайлаРеестра,        "[Расчетный счет]", СведенияОбОрганизации.БанкСчетНомер);
		
	Иначе
		
		ИмяФайлаРеестра = Объект.ИмяФайлаРеестра
		
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаРеестра);
	
	Если ПустаяСтрока(Файл.Расширение) Тогда
		
		ФорматФайла = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматВыгрузки, "ФорматФайла");
		
		Если ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[0].Значение Тогда // "TXT"
			
			ИмяФайлаРеестра = ИмяФайлаРеестра + ".txt";
			
		ИначеЕсли ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[2].Значение Тогда // "CSV"
			
			ИмяФайлаРеестра = ИмяФайлаРеестра + ".csv";
			
		ИначеЕсли ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[1].Значение Тогда // "XLS"
			
			ИмяФайлаРеестра = ИмяФайлаРеестра + ".xlsx";
			
		ИначеЕсли ФорматФайла = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла[4].Значение Тогда // "DBF"
			
			ИмяФайлаРеестра = ИмяФайлаРеестра + ".dbf";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайлаРеестра;
	
КонецФункции

&НаКлиенте
// Обработчик события "НачатьПроверкуСуществования" в процедуре "Выгрузить".
Процедура ВыгрузитьПродолжение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Путь файла реестра не существует.");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		АдресХранилищаРеестра = СформироватьФайлРеестра();
		
		Если НЕ ПустаяСтрока(АдресХранилищаРеестра) Тогда
			
			ИмяФайлаРеестра = ПолучитьИмяФайлаРеестра();
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗаписиФайлаНаКлиент", ЭтаФорма, ИмяФайлаРеестра);
			
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаРеестра, АдресХранилищаРеестра));
			
			НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ИмяФайлаРеестра, Ложь);
			
		Иначе
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Файл реестра не создан.");
			
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Произошли ошибки в механизме Универсальной выгрузки данных. Обратитесь за помощью к разработчикам: otr@rarus.ru
		|Техническая информация для разработчиков:
		|"
		+ ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
// Процедура-обработчик описания оповещения.
Процедура ВыполнитьПослеЗаписиФайлаНаКлиент(ПолученныеФайлы, ИмяФайлаРеестра) Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка данных в файл """ + ИмяФайлаРеестра + """ завершена.");
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата закрытия формы "НастройкиЗагрузкиВыгрузки".
Процедура ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СформироватьИмяФайла();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачатьПроверкуСуществования" в процедуре "СформироватьИмяФайла".
Процедура СформироватьИмяФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ПапкаСохранения = ДополнительныеПараметры.Папка;
	ФорматФайла     = ДополнительныеПараметры.ФорматФайла;
	
	Если Существует Тогда
		Папка             = Новый Файл(ПапкаСохранения);
		ПараметрыОписания = Новый Структура("Папка, ФорматФайла", Папка, ФорматФайла);
		Папка.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("СформироватьИмяФайлаЗавершениеЗавершение", ЭтаФорма, ПараметрыОписания));
		Возврат;
	КонецЕсли;
	
	СформироватьИмяФайлаФрагмент(ПапкаСохранения, ФорматФайла);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачатьПроверкуЭтоКаталог" в процедуре "СформироватьИмяФайлаЗавершение".
Процедура СформироватьИмяФайлаЗавершениеЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Папка       = ДополнительныеПараметры.Папка;
	ФорматФайла = ДополнительныеПараметры.ФорматФайла;
	
	Если ЭтоКаталог Тогда
		ПапкаСохранения = Папка.ПолноеИмя;
	КонецЕсли;
	
	СформироватьИмяФайлаФрагмент(ПапкаСохранения, ФорматФайла);

КонецПроцедуры

&НаКлиенте
// Формирует имя файла реестра.
Процедура СформироватьИмяФайлаФрагмент(ПапкаСохранения, ФорматФайла)
	
	СокращенияВИмениФайлаНайдены = Ложь;
	
	Если Найти(Объект.ИмяФайлаРеестра, "[ИНН]") > 0 ИЛИ Найти(Объект.ИмяФайлаРеестра, "[Расчетный счет]") > 0 Тогда
		СокращенияВИмениФайлаНайдены = Истина;
	КонецЕсли;
	
	Если НЕ СокращенияВИмениФайлаНайдены Тогда
		
		Если НЕ СтрЗаканчиваетсяНа(ПапкаСохранения, "\") Тогда
			ПапкаСохранения = ПапкаСохранения + "\";
		КонецЕсли;
		
		Объект.ИмяФайлаРеестра = ПапкаСохранения
								+ Строка(Объект.ФорматВыгрузки)
								+ " " + Формат(Объект.Период, "ДФ=ММ")
								+ Формат(Объект.Период, "ДФ=гггг")
								+ "." + ФорматФайла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Заполняет данными файл реестра.
//
// Возвращаемое значение:
//   Строка - адрес хранилища значений.
//
Функция СформироватьФайлРеестра()
	
	ВозвращаемыйАдресХранилища = "";
	
	ПараметрыВыгрузки = ПолучитьПараметрыВыгрузки();
	
	Если НЕ ПараметрыВыгрузки = Неопределено Тогда
		
		ТаблицаДанных = ПолучитьТаблицуДанных(ПараметрыВыгрузки);
		
		Если НЕ ТаблицаДанных.Количество() = 0 Тогда
			
			ФайлРеестра = ПолучитьФайлРеестра(ПараметрыВыгрузки, ТаблицаДанных);
			
			Если НЕ ФайлРеестра = Неопределено Тогда
				
				ВозвращаемыйАдресХранилища = ЗаписатьФайлРеестра(ФайлРеестра, ПараметрыВыгрузки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемыйАдресХранилища;
	
КонецФункции

&НаСервере
// Создает и заполняет файл реестра.
//
// Возвращаемое значение:
//   Структура - структура данных для формирования и заполнения файла реестра.
//
Функция ПолучитьПараметрыВыгрузки()
	
	ПараметрыВыгрузки = Справочники.УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных.ПолучитьНастройки(Объект.НастройкиВыгрузки, Объект.Организация, Объект.Период);
	
	ФорматВыгрузки                   = Объект.ФорматВыгрузки;
	ФорматФайла                      = ФорматВыгрузки.ФорматФайла;
	ТаблицаПараметров                = ФорматВыгрузки.НастройкиСоответствияПолей.Выгрузить();
	СпФорматовФайла                  = СтруктураЗначенийПолейФорматаВыгрузки.СпФорматовФайла;
	
	ПараметрыВыгрузки.Вставить("ЭтоTXT",                                 ФорматФайла = СпФорматовФайла[0].Значение); // "TXT"
	ПараметрыВыгрузки.Вставить("ЭтоXLS",                                 ФорматФайла = СпФорматовФайла[1].Значение); // "XLS"
	ПараметрыВыгрузки.Вставить("ЭтоCSV",                                 ФорматФайла = СпФорматовФайла[2].Значение); // "CSV"
	ПараметрыВыгрузки.Вставить("ЭтоDBF",                                 ФорматФайла = СпФорматовФайла[4].Значение); // "DBF"
	ПараметрыВыгрузки.Вставить("ВыгружатьПоказанияСчетчиков",            ЕстьПараметрСчетчикИПоказание());
	ПараметрыВыгрузки.Вставить("СтруктураЗначенийПолейФорматаВыгрузки",  СтруктураЗначенийПолейФорматаВыгрузки);
	ПараметрыВыгрузки.Вставить("НачалоПериода",                          НачалоМесяца(ПараметрыВыгрузки.Период));
	ПараметрыВыгрузки.Вставить("КонецПериода",                           КонецМесяца(ПараметрыВыгрузки.Период));
	ПараметрыВыгрузки.Вставить("ФорматФайла",                            ФорматФайла);
	ПараметрыВыгрузки.Вставить("ВыводитьЗаголовок",                      ПолучитьНастройкуВыгрузкиВыводитьЗаголовок(ФорматВыгрузки, ПараметрыВыгрузки));
	
	Если ПараметрыВыгрузки.ЭтоTXT ИЛИ ПараметрыВыгрузки.ЭтоCSV Тогда
		
		ПараметрыВыгрузки.Вставить("ИспользоватьРезделителиКолонок", Истина);
		ПараметрыВыгрузки.Вставить("РазделительКолонок", ПолучитьРазделительКолонок(ПараметрыВыгрузки, ФорматВыгрузки.РазделительКолонок));
		
	Иначе
		
		ПараметрыВыгрузки.Вставить("ИспользоватьРезделителиКолонок", Ложь);
		ПараметрыВыгрузки.Вставить("РазделительКолонок",             "");
		
		Если НЕ ПараметрыВыгрузки.ЭтоDBF Тогда
			// Не используем строки с нулевым номером колонки.
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(Новый Структура("НомерКолонки", 0));
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				ТаблицаПараметров.Удалить(ТекущаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перезаполним номера строк, по которым будем идентифицировать соответствие параметров выгрузки и колонок для значений параметров.
	КоличествоПараметров = ТаблицаПараметров.Количество();
	Для Сч = 1 По КоличествоПараметров Цикл
		ТаблицаПараметров[Сч - 1].НомерСтроки = Сч;
	КонецЦикла;
	
	ПараметрыВыгрузки.Вставить("ТаблицаПараметров", ТаблицаПараметров);
	
	Запрос = ПодготовитьОсновныеДанныеПоЛицевымСчетамВЗапросе(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ТаблицаДолги",            ПолучитьТаблицуДолговПоЛицевымСчетам(Запрос, ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("ТаблицаКонтактныеДанные", ПолучитьТаблицуКонтактныхДанных(Запрос, ПараметрыВыгрузки));
	
	ТаблицаЛицевыеСчета = ПолучитьТаблицуЛицевыхСчетов(Запрос);
	
	Если ТаблицаЛицевыеСчета.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Нет данных для выгрузки.");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ТаблицаЛицевыеСчета",     ТаблицаЛицевыеСчета);
	ПараметрыВыгрузки.Вставить("ТаблицаПлощадей",         ПолучитьТаблицуПлощадей(Запрос, ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("ТаблицаНачислений",       ПолучитьТаблицуНачислений(Запрос, ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("ТекстЗаголовка",          ПолучитьНастройкуВыгрузкиТекстЗаголовка(ПараметрыВыгрузки, ФорматВыгрузки));
	ПараметрыВыгрузки.Вставить("Кодировка",               ФорматВыгрузки.Кодировка);
	
	Если ПараметрыВыгрузки.ВыгружатьПоказанияСчетчиков Тогда
		НайденнаяСтрокаСчетчикИПоказание = ТаблицаПараметров.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание, "Параметр");
		ПараметрыВыгрузки.Вставить("ИдентификацияПУ",                         НайденнаяСтрокаСчетчикИПоказание.ИдентификацияПУ);
		ПараметрыВыгрузки.Вставить("РазделительПарыПУПоказание",              НайденнаяСтрокаСчетчикИПоказание.РазделительПарыПУПоказание);
	Иначе
		ПараметрыВыгрузки.Вставить("ИдентификацияПУ");
		ПараметрыВыгрузки.Вставить("РазделительПарыПУПоказание", "");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ТаблицаПоказаний",                ПолучитьТаблицуПоказаний(Запрос, ПараметрыВыгрузки));
	ПараметрыВыгрузки.Вставить("МаксимальноеКоличествоПоказаний", ПолучитьМаксимальноеКоличествоПоказаний(ПараметрыВыгрузки.ТаблицаПоказаний));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервереБезКонтекста
// Получает максимальное количество счетчиков с показаниями.
//
// Параметры:
//  ТаблицаПоказаний - показания счетчиков по лицевым счетам.
//  ВыгружатьПоказанияСчетчиков - параметр определяющий выгрузку показаний.
//
Функция ПолучитьМаксимальноеКоличествоПоказаний(ТаблицаПоказаний)
	
	МаксимальноеКоличествоПоказаний = 0;
	
	Если НЕ ТаблицаПоказаний = Неопределено И НЕ ТаблицаПоказаний.Количество() = 0 Тогда
		
		ТаблицаЛицевыеСчета = ТаблицаПоказаний.Скопировать(,"ЛицевойСчет");
		ТаблицаЛицевыеСчета.Свернуть("ЛицевойСчет");
		
		Для Каждого ТекущийЛС Из ТаблицаЛицевыеСчета Цикл
			
			ТаблицаПоказанийЛС = ТаблицаПоказаний.Скопировать(Новый Структура("ЛицевойСчет", ТекущийЛС.ЛицевойСчет));
			
			КоличествоПоказаний = 0;
			
			Для Каждого ТекущаяСтрока Из ТаблицаПоказанийЛС Цикл
				
				КоличествоПоказаний = КоличествоПоказаний + ТекущаяСтрока.КоличествоПоказаний;
				
			КонецЦикла;
			
			Если МаксимальноеКоличествоПоказаний < КоличествоПоказаний Тогда
				МаксимальноеКоличествоПоказаний = КоличествоПоказаний;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МаксимальноеКоличествоПоказаний;
	
КонецФункции

&НаСервереБезКонтекста
// Получает общую сумму долга по всем лицевым счетам таблицы "ТаблицаДолгов".
//
// Параметры:
//  ПараметрыВыгрузки - Структура - настройки обработки.
//
Функция ПолучитьОбщуюСуммуДолга(ПараметрыВыгрузки)
	
	Сумма = ПараметрыВыгрузки.ТаблицаДолги.Итог("СуммаДолга");
	
	Возврат Сумма;
	
КонецФункции

&НаСервереБезКонтекста
// Получает общую сумму начислений по всем лицевым счетам таблицы "ТаблицаНачислений".
//
// Параметры:
//  ПараметрыВыгрузки - Структура - настройки обработки.
//
Функция ПолучитьОбщуюСуммуНачислений(ПараметрыВыгрузки)
	
	Сумма = ПараметрыВыгрузки.ТаблицаНачислений.Итог("СуммаНачисления");
	
	Возврат Сумма;
	
КонецФункции

&НаСервереБезКонтекста
// Получает период выгрузки для заголовка файла TXT.
//
// Параметры:
//  ПараметрыВыгрузки - Структура - настройки обработки.
//
Функция ПолучитьПериодВыгрузки(ПараметрыВыгрузки)
	
	Период = Формат(ПараметрыВыгрузки.Период, "ДФ=dd.MM.yyyy");
	
	Возврат Период;
	
КонецФункции

&НаСервереБезКонтекста
// Получает факт вывода заголовка в файле выгрузки.
//
// Параметры:
//  ФорматВыгрузки	 - Ссылка - настройки загрузки / выгрузки.
//
Функция ПолучитьНастройкуВыгрузкиВыводитьЗаголовок(ФорматВыгрузки, ПараметрыВыгрузки)
	
	Если ПараметрыВыгрузки.ЭтоTXT И ФорматВыгрузки.ВыводитьЗаголовок Тогда
		ВыводитьЗаголовок = Истина;
	Иначе
		ВыводитьЗаголовок = Ложь;
	КонецЕсли;
	
	Возврат ВыводитьЗаголовок;
	
КонецФункции

&НаСервереБезКонтекста
// Получает текст комментария для заголовка в файле.
//
// Параметры:
//  ПараметрыВыгрузки - Структура - настройки обработки.
//
Функция ПолучитьНастройкуВыгрузкиТекстЗаголовка(ПараметрыВыгрузки, ФорматВыгрузки)
	
	Если НЕ (ПараметрыВыгрузки.ЭтоTXT И ПараметрыВыгрузки.ВыводитьЗаголовок) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗаголовка     = ФорматВыгрузки.ТекстЗаголовкаВТекстовомФайле;
	СписокПараметров   = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПолучитьСписокПараметровДляЗаголовкаВТекстовомФайле();
	
	Для Каждого ТекущийПараметрСписка Из СписокПараметров Цикл
		ТекущийПараметр = ТекущийПараметрСписка.Значение;
		
		ПредставлениеПараметра = ПредставлениеТекущегоПараметра(ТекущийПараметр);
		
		Если ТекущийПараметр = "КоличествоЗаписей" Тогда
			// Значение получаем после заполнения файла TXT данными в процедуре "СформироватьФайлРеестра()".
		ИначеЕсли ТекущийПараметр = "ОбщаяСуммаДолга" Тогда
			ОбщаяСуммаДолга = ПолучитьОбщуюСуммуДолга(ПараметрыВыгрузки);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ПредставлениеПараметра, Формат(ОбщаяСуммаДолга, "ЧДЦ=2; ЧН=0,00; ЧГ="));
		ИначеЕсли ТекущийПараметр = "ОбщаяСуммаНачислений" Тогда
			ОбщаяСуммаНачислений = ПолучитьОбщуюСуммуНачислений(ПараметрыВыгрузки);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ПредставлениеПараметра, Формат(ОбщаяСуммаНачислений, "ЧДЦ=2; ЧН=0,00; ЧГ="));
		ИначеЕсли ТекущийПараметр = "ПериодВыгрузки" Тогда
			ПериодВыгрузки = ПолучитьПериодВыгрузки(ПараметрыВыгрузки);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ПредставлениеПараметра, ПериодВыгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаСервереБезКонтекста
// Получает представление параметра для текста заголовка TXT файла.
//
// Параметры:
//  ТекущийПараметр	 - Строка - имя параметра.
//
Функция ПредставлениеТекущегоПараметра(ТекущийПараметр)
	
	ПредставлениеПараметра = "[" + ТекущийПараметр + "]";
	
	Возврат ПредставлениеПараметра;
	
КонецФункции

&НаСервереБезКонтекста
// Получает разделитель колонок.
//
// Параметры:
//  ПараметрыВыгрузки	 - Структура - настройки обработки.
//
Функция ПолучитьРазделительКолонок(ПараметрыВыгрузки, РазделительКолонок)
	
	Если ПараметрыВыгрузки.ЭтоTXT Тогда
		Если РазделительКолонок = "Таб" Тогда
			Разделитель = Символы.Таб;
		ИначеЕсли ЗначениеЗаполнено(РазделительКолонок) Тогда
			Разделитель = РазделительКолонок;
		Иначе
			Разделитель = ":";
		КонецЕсли;
	ИначеЕсли ПараметрыВыгрузки.ЭтоCSV Тогда
		Разделитель = ";";
	Иначе
		Разделитель = "";
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции

&НаСервереБезКонтекста
// Подготавливает сведения о лицевых счетах в запросе.
//
// Параметры:
//  Запрос				 - результат запроса менеджера временных таблиц.
//  ПараметрыВыгрузки	 - Структура - настройки обработки.
//
Функция ПодготовитьОсновныеДанныеПоЛицевымСчетамВЗапросе(ПараметрыВыгрузки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода",                     ПараметрыВыгрузки.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                      ПараметрыВыгрузки.КонецПериода);
	Запрос.УстановитьПараметр("Организация",                       ПараметрыВыгрузки.Организация);
	Запрос.УстановитьПараметр("ОтборПоОтветственномуСобственнику", ПараметрыВыгрузки.ОтборПоОтветственномуСобственнику);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И &УсловиеОтбораЛицевыхСчетов) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних";
	
	ВыборЛицевыхСчетов = ПараметрыВыгрузки.ВыборЛицевыхСчетов;
	
	Если ВыборЛицевыхСчетов = 1 ИЛИ ВыборЛицевыхСчетов = 2 Тогда
		
		Запрос.УстановитьПараметр("СписокЛицевыхСчетов", ПараметрыВыгрузки.ВыбранныеЛицевыеСчета);
		
		Если ВыборЛицевыхСчетов = 1 Тогда
			УсловиеОтбораЛицевыхСчетов  = "ЛицевойСчет В (&СписокЛицевыхСчетов)";
			// Для дальнейшего получения телефонов жильцов подготовим таблицу заранее.
			ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ПараметрыВыгрузки.ВыбранныеЛицевыеСчета);
		ИначеЕсли ВыборЛицевыхСчетов = 2 Тогда
			УсловиеОтбораЛицевыхСчетов  = "НЕ ЛицевойСчет В (&СписокЛицевыхСчетов)";
			// Для дальнейшего получения телефонов жильцов подготовим таблицу заранее.
			ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ПараметрыВыгрузки.ВыбранныеЛицевыеСчета, Истина);
		КонецЕсли;
		
	Иначе // Выбор по лицевым счетам не используется.
		УсловиеОтбораЛицевыхСчетов = "ИСТИНА";
		// Для дальнейшего получения телефонов жильцов подготовим таблицу заранее.
		ТаблицаТелефоновЖильцов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТелефоновЖильцов", ТаблицаТелефоновЖильцов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораЛицевыхСчетов",  УсловиеОтбораЛицевыхСчетов);
	
	Запрос.Текст = Запрос.Текст +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" +
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаДействующиеЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&НачалоПериода,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией КАК втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период >= &НачалоПериода
	|	И КВП_ЛицевыеСчета.Период <= &КонецПериода
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией КАК втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛицевыеСчетаСоВзаиморасчетамиСОрганизацией
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Адрес.Код КАК КодПомещения,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Код КАК КодЛС,
	|	УПЖКХ_ОтветственныйСобственник.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ОтветственныйСобственник.ОтветственныйВладелец) КАК ОтветственныйВладелецПредставление,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	УПЖКХ_ОтветственныйСобственник.ЛицевойСчет.Телефон КАК НомерТелефонаЛС,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ОтветственныйСобственник.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоЖилец,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_ОтветственныйСобственник.ОтветственныйВладелец) = ТИП(Справочник.УПЖКХ_Жильцы)
	|			ТОГДА УПЖКХ_ОтветственныйСобственник.ОтветственныйВладелец.ФизЛицо
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)
	|	КОНЕЦ КАК ФизЛицоЖильца
	|ПОМЕСТИТЬ врТаблицаОтветственныеЛица
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&КонецПериода,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					врТаблицаДействующиеЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					врТаблицаДействующиеЛицевыеСчета КАК врТаблицаДействующиеЛицевыеСчета)) КАК УПЖКХ_ОтветственныйСобственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОтветственныеЛица.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаОтветственныеЛица.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	врТаблицаОтветственныеЛица.ОтветственныйВладелец.Наименование КАК НаименованиеКонтрагента,
	|	ВЫБОР
	|		КОГДА врТаблицаОтветственныеЛица.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазбиватьНаименованиеКонтрагента
	|ПОМЕСТИТЬ врТаблицаКонтрагентов
	|ИЗ
	|	врТаблицаОтветственныеЛица КАК врТаблицаОтветственныеЛица
	|ГДЕ
	|	НЕ врТаблицаОтветственныеЛица.ЭтоЖилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
	|ПОМЕСТИТЬ врТаблицаФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&КонецПериода,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					врТаблицаОтветственныеЛица.ФизЛицоЖильца КАК ФизЛицо
	|				ИЗ
	|					врТаблицаОтветственныеЛица КАК врТаблицаОтветственныеЛица
	|				ГДЕ
	|					врТаблицаОтветственныеЛица.ЭтоЖилец)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОтветственныеЛица.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаОтветственныеЛица.Помещение КАК Помещение,
	|	врТаблицаОтветственныеЛица.КодПомещения КАК КодПомещения,
	|	врТаблицаОтветственныеЛица.Здание КАК Здание,
	|	врТаблицаОтветственныеЛица.ИдентификаторЛС КАК ИдентификаторЛС,
	|	врТаблицаОтветственныеЛица.КодЛС КАК КодЛС,
	|	врТаблицаОтветственныеЛица.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	врТаблицаОтветственныеЛица.ОтветственныйВладелецПредставление КАК ОтветственныйВладелецПредставление,
	|	врТаблицаОтветственныеЛица.НаименованиеЛС КАК НаименованиеЛС,
	|	врТаблицаОтветственныеЛица.НомерТелефонаЛС КАК НомерТелефонаЛС,
	|	врТаблицаОтветственныеЛица.ЭтоЖилец КАК ЭтоЖилец,
	|	ЕСТЬNULL(врТаблицаКонтрагентов.НаименованиеКонтрагента, """") КАК НаименованиеКонтрагента,
	|	ЕСТЬNULL(врТаблицаКонтрагентов.РазбиватьНаименованиеКонтрагента, ЛОЖЬ) КАК РазбиватьНаименованиеКонтрагента,
	|	ЕСТЬNULL(врТаблицаФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(врТаблицаФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(врТаблицаФИОФизЛиц.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ врТаблицаОтветственныхСобственниковСФИО
	|ИЗ
	|	врТаблицаОтветственныеЛица КАК врТаблицаОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКонтрагентов КАК врТаблицаКонтрагентов
	|		ПО врТаблицаОтветственныеЛица.ЛицевойСчет = врТаблицаКонтрагентов.ЛицевойСчет
	|			И врТаблицаОтветственныеЛица.ОтветственныйВладелец = врТаблицаКонтрагентов.ОтветственныйВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаФИОФизЛиц КАК врТаблицаФИОФизЛиц
	|		ПО врТаблицаОтветственныеЛица.ФизЛицоЖильца = врТаблицаФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаОтветственныхСобственниковСФИО.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаОтветственныхСобственниковСФИО.Помещение КАК Помещение,
	|	врТаблицаОтветственныхСобственниковСФИО.КодПомещения КАК КодПомещения,
	|	врТаблицаОтветственныхСобственниковСФИО.Здание КАК Здание,
	|	врТаблицаОтветственныхСобственниковСФИО.НаименованиеЛС КАК НаименованиеЛС,
	|	врТаблицаОтветственныхСобственниковСФИО.ИдентификаторЛС КАК ИдентификаторЛС,
	|	врТаблицаОтветственныхСобственниковСФИО.КодЛС КАК КодЛС,
	|	врТаблицаОтветственныхСобственниковСФИО.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	врТаблицаОтветственныхСобственниковСФИО.ОтветственныйВладелецПредставление КАК ОтветственныйВладелецПредставление,
	|	врТаблицаОтветственныхСобственниковСФИО.НомерТелефонаЛС КАК НомерТелефонаЛС,
	|	врТаблицаОтветственныхСобственниковСФИО.ЭтоЖилец КАК ЭтоЖилец,
	|	врТаблицаОтветственныхСобственниковСФИО.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	|	врТаблицаОтветственныхСобственниковСФИО.РазбиватьНаименованиеКонтрагента КАК РазбиватьНаименованиеКонтрагента,
	|	врТаблицаОтветственныхСобственниковСФИО.Фамилия КАК Фамилия,
	|	врТаблицаОтветственныхСобственниковСФИО.Имя КАК Имя,
	|	врТаблицаОтветственныхСобственниковСФИО.Отчество КАК Отчество
	|ПОМЕСТИТЬ врТаблицаЛицевыеСчета
	|ИЗ
	|	врТаблицаОтветственныхСобственниковСФИО КАК врТаблицаОтветственныхСобственниковСФИО
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоОтветственномуСобственнику = 0
	|				ТОГДА ИСТИНА
	|			КОГДА &ОтборПоОтветственномуСобственнику = 1
	|				ТОГДА врТаблицаОтветственныхСобственниковСФИО.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
	|						ИЛИ врТаблицаОтветственныхСобственниковСФИО.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|							И врТаблицаОтветственныхСобственниковСФИО.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|			КОГДА &ОтборПоОтветственномуСобственнику = 2
	|				ТОГДА врТаблицаОтветственныхСобственниковСФИО.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|						И врТаблицаОтветственныхСобственниковСФИО.ОтветственныйВладелец.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаОтветственныеЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаФИОФизЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблицаЛицевыеСчета.Помещение КАК Помещение,
	|	врТаблицаЛицевыеСчета.Помещение КАК КодПомещения,
	|	врТаблицаЛицевыеСчета.Здание КАК Здание,
	|	врТаблицаЛицевыеСчета.НаименованиеЛС КАК НаименованиеЛС,
	|	врТаблицаЛицевыеСчета.ИдентификаторЛС КАК ИдентификаторЛС,
	|	врТаблицаЛицевыеСчета.КодЛС КАК КодЛС,
	|	врТаблицаЛицевыеСчета.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	врТаблицаЛицевыеСчета.ОтветственныйВладелецПредставление КАК ОтветственныйВладелецПредставление,
	|	врТаблицаЛицевыеСчета.НомерТелефонаЛС КАК НомерТелефонаЛС,
	|	врТаблицаЛицевыеСчета.ЭтоЖилец КАК ЭтоЖилец,
	|	врТаблицаЛицевыеСчета.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	|	врТаблицаЛицевыеСчета.РазбиватьНаименованиеКонтрагента КАК РазбиватьНаименованиеКонтрагента,
	|	врТаблицаЛицевыеСчета.Фамилия КАК Фамилия,
	|	врТаблицаЛицевыеСчета.Имя КАК Имя,
	|	врТаблицаЛицевыеСчета.Отчество КАК Отчество
	|ИЗ
	|	врТаблицаЛицевыеСчета КАК врТаблицаЛицевыеСчета";
	
	Запрос.Выполнить();
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует строку имени колонки.
//
// Параметры:
//  ИмяКолонки	 - Текст	 - начальное имя колонки.
//  Постфикс	 - Текст	 - последняя часть имени колонки.
// 
// Возвращаемое значение:
//  Текст.
//
&НаСервереБезКонтекста
Функция ЗаголовокКолонкиDBF(ИмяКолонки, Постфикс = "")
	
	МаксДлина = 10;
	
	Строка = Лев(ИмяКолонки, 10);
	
	ДлинаСтроки = СтрДлина(Строка) + СтрДлина(Постфикс);
	
	ДлинаКолонки = СтрДлина(Строка) - СтрДлина(Постфикс);
	
	Строка = ?(ДлинаСтроки > 10, Лев(Строка, ДлинаКолонки), Строка) + Постфикс;
	
	Возврат Строка;
	
КонецФункции

// Процедура добавляет колонку в таблицу значений.
//
// Параметры:
//  ТаблицаДанных				 - Таблица значений	 - таблица для добавления колонки.
//  ИмяКолонки					 - Текст	 - имя колонки.
//  ТипКолонки					 - Описание типов	 - тип значений колонки.
//  ЗаголовокКолонки			 - Текст	 - заголовок колонки.
//  КолонкаПараметраДобавлена	 - Булево	 - определяет факт изменения состава колонок в таблице.
//
&НаСервереБезКонтекста
Процедура ДобавитьКолонкуВТаблицу(ТаблицаДанных, ИмяКолонки, ТипКолонки, ЗаголовокКолонки, КолонкаПараметраДобавлена = Ложь)
	
	Если ТаблицаДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить(ИмяКолонки, ТипКолонки, ЗаголовокКолонки);
	КонецЕсли;
	
	КолонкаПараметраДобавлена = Истина;
	
КонецПроцедуры

// Функция формирует таблицу значений для заполнения выгружаемых данных.
//
// Параметры:
//  ПараметрыВыгрузки	 - Структура	 - структура настроек выгрузки.
// 
// Возвращаемое значение:
//  Таблица значений.
//
&НаСервереБезКонтекста
Функция ПолучитьТаблицуДанных(ПараметрыВыгрузки)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаПараметров                     = ПараметрыВыгрузки.ТаблицаПараметров.Скопировать();
	МаксимальноеКоличествоПоказаний       = ПараметрыВыгрузки.МаксимальноеКоличествоПоказаний;
	ВыгружатьПоказанияСчетчиков           = ПараметрыВыгрузки.ВыгружатьПоказанияСчетчиков;
	ФорматФайла                           = ПараметрыВыгрузки.ФорматФайла;
	ИспользоватьРезделителиКолонок        = ПараметрыВыгрузки.ИспользоватьРезделителиКолонок;
	ТаблицаЛицевыеСчета                   = ПараметрыВыгрузки.ТаблицаЛицевыеСчета;
	СтруктураЗначенийПолейФорматаВыгрузки = ПараметрыВыгрузки.СтруктураЗначенийПолейФорматаВыгрузки;
	РазделительКолонок                    = ПараметрыВыгрузки.РазделительКолонок;
	РазделительПарыПУПоказание            = ПараметрыВыгрузки.РазделительПарыПУПоказание;
	
	// 1. Получаем количество всех колонок по максимальному Номеру колонки или Номеру строки в таблице.
	Если ПараметрыВыгрузки.ЭтоDBF Тогда
		МаксимальныйНомер = ТаблицаПараметров.Количество();
		ПараметрПоиска = "НомерСтроки";
	Иначе
		МаксимальныйНомер = 0;
		Для Каждого ТекущаяСтрока Из ТаблицаПараметров Цикл
			Если МаксимальныйНомер < ТекущаяСтрока.НомерКолонки Тогда
				МаксимальныйНомер = ТекущаяСтрока.НомерКолонки;
			КонецЕсли;
		КонецЦикла;
		ПараметрПоиска = "НомерКолонки";
	КонецЕсли;
	
	// 2. Создаем колонки по Номерам колонок параметров. Если по номеру колонки нет в таблице параметров соответствующей
	// строки параметра, тогда создаем колонку с любым наименованием.
	// Для файла DBF имя колонки храним в заголовке таблицы с данными.
	
	Если ВыгружатьПоказанияСчетчиков Тогда
		
		ТаблицаСчетчикиИПоказания = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Отбор = Новый Структура(ПараметрПоиска);
	
	Для Каждого ТекущаяСтрокаЛицевогоСчета Из ТаблицаЛицевыеСчета Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		
		ПорядковыйНомерРазделителяПараметров = 1;
		ИмяКолонкиРазделителяПараметров      = "RC";
		
		Для Сч = 1 По МаксимальныйНомер Цикл
			
			КолонкаПараметраДобавлена = Ложь;
			
			Отбор[ПараметрПоиска] = Сч;
			
			НайденныеСтроки = ТаблицаПараметров.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ИмяКолонкиПараметра       = "NONAME";
				ТипКолонкиПараметра       = Новый ОписаниеТипов("Строка");
				ЗаголовокКолонкиПараметра = ЗаголовокКолонкиDBF(ИмяКолонкиПараметра, Сч);
				
				ДобавитьКолонкуВТаблицу(ТаблицаДанных, ИмяКолонкиПараметра + Сч, ТипКолонкиПараметра, ЗаголовокКолонкиПараметра, КолонкаПараметраДобавлена);
				
			ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
				
				ТекущаяСтрокаПараметра = НайденныеСтроки[0];
				
				Параметр = ТекущаяСтрокаПараметра.Параметр;
				
				ИмяКолонкиПараметра = ПолучитьИмяПараметра(Параметр);
				
				Если ВыгружатьПоказанияСчетчиков
				   И Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание
				   И НЕ ПараметрыВыгрузки.ТаблицаПоказаний = Неопределено Тогда
					
					ДобавитьКолонкуВТаблицу(ТаблицаДанных, "ТаблицаСчетчикиИПоказания", Новый ОписаниеТипов("ТаблицаЗначений"), "");
					
					ТаблицаСчетчикиИПоказания.Очистить();
					
					ИмяКолонкиСчетчик   = "PU";
					ИмяКолонкиПоказание = "PUSUMM";
					
					ИмяКолонкиРазделительПарыПУПоказание = "RCP";
					
					Если ПараметрыВыгрузки.ЭтоDBF Тогда
						
						СтруктураПоляDBF = СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузки(Параметр);
						НастройкиПоляDBF = ТекущаяСтрокаПараметра.НастройкиПоляDBF.Получить();
						
						Если ТипЗнч(НастройкиПоляDBF) = Тип("Структура") Тогда
							ЗаполнитьЗначенияСвойств(СтруктураПоляDBF, НастройкиПоляDBF);
						КонецЕсли;
						
						ЗаголовокКолонкиСчетчика  = СтруктураПоляDBF.ИмяПоляDBFСчетчик;
						ЗаголовокКолонкиПоказание = СтруктураПоляDBF.ИмяПоляDBFПоказание;
						
					Иначе
						
						ЗаголовокКолонкиСчетчика  = ИмяКолонкиСчетчик;
						ЗаголовокКолонкиПоказание = ИмяКолонкиПоказание;
						
					КонецЕсли;
					
					ТипКолонкиСчетчика         = Новый ОписаниеТипов("Строка");
					ТаблицаДанныхОПоказанияхЛС = ПараметрыВыгрузки.ТаблицаПоказаний.Скопировать(Новый Структура("ЛицевойСчет", ТекущаяСтрокаЛицевогоСчета.ЛицевойСчет));
					
					Если ТаблицаДанныхОПоказанияхЛС.Количество() = 0 Тогда
						ТаблицаДанныхОПоказанияхЛС.Добавить(); // Добавляем пустую строку для формирования колонк в таблице "ТаблицаСчетчикиИПоказания".
					КонецЕсли;
					
					Показания = ТаблицаДанныхОПоказанияхЛС[0].Показания;
					
					КоличествоПоказаний = Показания.Количество();
					
					НоваяСтрокаПоказания = ТаблицаСчетчикиИПоказания.Добавить();
					
					КоличествоПолейСПоказаниямиПоЛС = 0;
					
					Для СчПУ = 1 По МаксимальноеКоличествоПоказаний Цикл
						
						Если СчПУ <= КоличествоПоказаний Тогда
							СтрокаПоказаний = Показания[СчПУ - 1];
						Иначе
							СтрокаПоказаний = Неопределено;
						КонецЕсли;
						
						// Колонка Счетчик:
						врИмяКолонки = ИмяКолонкиСчетчик + СчПУ;
						ДобавитьКолонкуВТаблицу(ТаблицаСчетчикиИПоказания, врИмяКолонки, ТипКолонкиСчетчика, ЗаголовокКолонкиDBF(ЗаголовокКолонкиСчетчика, СчПУ), КолонкаПараметраДобавлена);
						Если НЕ СтрокаПоказаний = Неопределено Тогда
							НоваяСтрокаПоказания[врИмяКолонки] = СтрокаПоказаний.Счетчик;
							КоличествоПолейСПоказаниямиПоЛС    = КоличествоПолейСПоказаниямиПоЛС + 1;
						КонецЕсли;
						
						Если ИспользоватьРезделителиКолонок Тогда
							// Колонка Разделитель между Счетчиком и Показанием:
							врИмяКолонки = ИмяКолонкиРазделительПарыПУПоказание + СчПУ;
							ДобавитьКолонкуВТаблицу(ТаблицаСчетчикиИПоказания, врИмяКолонки, Новый ОписаниеТипов("Строка"), ЗаголовокКолонкиDBF(ИмяКолонкиРазделительПарыПУПоказание, СчПУ));
							НоваяСтрокаПоказания[врИмяКолонки] = РазделительПарыПУПоказание;
							КолонкаПараметраДобавлена = Ложь;
							Если НЕ СтрокаПоказаний = Неопределено Тогда
								КоличествоПолейСПоказаниямиПоЛС = КоличествоПолейСПоказаниямиПоЛС + 1;
							КонецЕсли;
						КонецЕсли;
						
						// Колонка Показание:
						врИмяКолонки = ИмяКолонкиПоказание + СчПУ;
						ДобавитьКолонкуВТаблицу(ТаблицаСчетчикиИПоказания, врИмяКолонки, Новый ОписаниеТипов("Строка"), ЗаголовокКолонкиDBF(ЗаголовокКолонкиПоказание, СчПУ), КолонкаПараметраДобавлена);
						Если НЕ СтрокаПоказаний = Неопределено Тогда
							НоваяСтрокаПоказания[врИмяКолонки] = Формат(СтрокаПоказаний.Показание, "ЧРГ=; ЧГ=");
							КоличествоПолейСПоказаниямиПоЛС    = КоличествоПолейСПоказаниямиПоЛС + 1;
						КонецЕсли;
						
						Если ИспользоватьРезделителиКолонок И КолонкаПараметраДобавлена Тогда
							
							Отбор[ПараметрПоиска] = Сч + 1;
							
							Если НЕ СчПУ = КоличествоПоказаний ИЛИ (СчПУ = КоличествоПоказаний И НЕ ТаблицаПараметров.НайтиСтроки(Отбор).Количество() = 0) Тогда
								// Колонка Разделитель колонок:
								врИмяКолонки = ИмяКолонкиРазделителяПараметров + ПорядковыйНомерРазделителяПараметров;
								ДобавитьКолонкуВТаблицу(ТаблицаСчетчикиИПоказания, врИмяКолонки, Новый ОписаниеТипов("Строка"), ЗаголовокКолонкиDBF(ИмяКолонкиРазделителяПараметров, ПорядковыйНомерРазделителяПараметров));
								НоваяСтрокаПоказания[врИмяКолонки]   = РазделительКолонок;
								ПорядковыйНомерРазделителяПараметров = ПорядковыйНомерРазделителяПараметров + 1;
								КолонкаПараметраДобавлена            = Ложь;
								Если НЕ СтрокаПоказаний = Неопределено Тогда
									КоличествоПолейСПоказаниямиПоЛС = КоличествоПолейСПоказаниямиПоЛС + 1;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					ДобавитьКолонкуВТаблицу(ТаблицаСчетчикиИПоказания, "КоличествоПолейСПоказаниямиПоЛС", Новый ОписаниеТипов("Число"), "");
					
					НоваяСтрокаПоказания.КоличествоПолейСПоказаниямиПоЛС = КоличествоПолейСПоказаниямиПоЛС;
					
					НоваяСтрока.ТаблицаСчетчикиИПоказания = ТаблицаСчетчикиИПоказания.Скопировать();
					
				Иначе
					
					ТипКолонкиПараметра = Новый ОписаниеТипов("Строка");
					
					Если ПараметрыВыгрузки.ЭтоDBF Тогда
						
						СтруктураПоляDBF = СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузки(Параметр);
						НастройкиПоляDBF = ТекущаяСтрокаПараметра.НастройкиПоляDBF.Получить();
						
						Если ТипЗнч(НастройкиПоляDBF) = Тип("Структура") Тогда
							ЗаполнитьЗначенияСвойств(СтруктураПоляDBF, НастройкиПоляDBF);
						КонецЕсли;
						
						ЗаголовокКолонкиПараметра = СтруктураПоляDBF.ИмяПоляDBF;
						
					Иначе
						
						ЗаголовокКолонкиПараметра = ИмяКолонкиПараметра;
						
					КонецЕсли;
					
					ДобавитьКолонкуВТаблицу(ТаблицаДанных, ИмяКолонкиПараметра, ТипКолонкиПараметра, ЗаголовокКолонкиDBF(ЗаголовокКолонкиПараметра), КолонкаПараметраДобавлена);
					
					НоваяСтрока[ИмяКолонкиПараметра] = ПолучитьЗначениеКолонки(Параметр, ПараметрыВыгрузки, ТекущаяСтрокаЛицевогоСчета, ТекущаяСтрокаПараметра);
					
					Отбор[ПараметрПоиска] = Сч + 1;
					
					// Колонку Разделителя создаём после первой созданной колонки параметра.
					Если ИспользоватьРезделителиКолонок И КолонкаПараметраДобавлена И НЕ ТаблицаПараметров.НайтиСтроки(Отбор).Количество() = 0 Тогда
						врИмяКолонки = ИмяКолонкиРазделителяПараметров + ПорядковыйНомерРазделителяПараметров;
						ДобавитьКолонкуВТаблицу(ТаблицаДанных, врИмяКолонки, Новый ОписаниеТипов("Строка"), ЗаголовокКолонкиDBF(ИмяКолонкиРазделителяПараметров, ПорядковыйНомерРазделителяПараметров));
						НоваяСтрока[врИмяКолонки] = РазделительКолонок;
						ПорядковыйНомерРазделителяПараметров = ПорядковыйНомерРазделителяПараметров + 1;
						КолонкаПараметраДобавлена = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция - Получить значение колонки
//
// Параметры:
//  Параметр					 - Ссылка	 - параметр универсальной выгрузки данных.
//  ПараметрыВыгрузки			 - Структура	 - структура настроек выгрузки.
//  ТекущаяСтрокаЛицевогоСчета	 - Строка таблицы значений	 - данные по лицевому счету.
//  ТекущаяСтрокаПараметра		 - Строка таблицы значений	 - настройки параметра универсальной выгрузки данных.
// 
// Возвращаемое значение:
//  Строка, Число.
//
&НаСервереБезКонтекста
Функция ПолучитьЗначениеКолонки(Параметр, ПараметрыВыгрузки, ТекущаяСтрокаЛицевогоСчета, ТекущаяСтрокаПараметра)
	
	СтруктураЗначенийПолейФорматаВыгрузки = ПараметрыВыгрузки.СтруктураЗначенийПолейФорматаВыгрузки;
	
	Если Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ЛицевойСчет Тогда
		
		Если ТекущаяСтрокаПараметра.ИдентификацияЛС = СтруктураЗначенийПолейФорматаВыгрузки.СпИдентификацияЛС[0].Значение Тогда // "наименование"
			
			// Берем наименование лицевого счета.
			Значение = СтрЗаменить(ТекущаяСтрокаЛицевогоСчета.НаименованиеЛС, "л/с №", "");
			
		ИначеЕсли ТекущаяСтрокаПараметра.ИдентификацияЛС = СтруктураЗначенийПолейФорматаВыгрузки.СпИдентификацияЛС[2].Значение Тогда // "идентификатор"
			
			// Берем идентификатор лицевого счета.
			Значение = ТекущаяСтрокаЛицевогоСчета.ИдентификаторЛС;
			
		ИначеЕсли ТекущаяСтрокаПараметра.ИдентификацияЛС = СтруктураЗначенийПолейФорматаВыгрузки.СпИдентификацияЛС[1].Значение Тогда // "код"
			
			// Берем код лицевого счета
			Значение = ТекущаяСтрокаЛицевогоСчета.КодЛС;
			
		КонецЕсли;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ФИООтветственногоСобственникаНанимателя Тогда
		
		Значение = ТекущаяСтрокаЛицевогоСчета.ОтветственныйВладелецПредставление;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Фамилия
		Или Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Имя
		Или Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Отчество Тогда
		
		Значение = ПолучитьЗначениеФИО(ТекущаяСтрокаЛицевогоСчета, Параметр);
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Площадь
			И ПараметрыВыгрузки.ТаблицаПлощадей <> Неопределено
			И ПараметрыВыгрузки.ТаблицаПлощадей.Количество() > 0 Тогда
		
		НайденнаяПлощадьСтрокаТаблицы = ПараметрыВыгрузки.ТаблицаПлощадей.Найти(ТекущаяСтрокаЛицевогоСчета.ЛицевойСчет, "ЛицевойСчет");
		
		Если НайденнаяПлощадьСтрокаТаблицы = Неопределено Тогда
			
			Значение = 0;
			
		Иначе
			
			Значение = Окр(НайденнаяПлощадьСтрокаТаблицы.Площадь, 2);
			
		КонецЕсли;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Адрес Тогда
		
		АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(ТекущаяСтрокаЛицевогоСчета.Здание);
		
		Значение = ПолучитьАдресПомещения(АдресДома, ТекущаяСтрокаЛицевогоСчета.Помещение);
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга Тогда
		
		СуммаДолга = 0;
		
		Если ПараметрыВыгрузки.ТаблицаДолги <> Неопределено Тогда
			
			НайденнаяСтрокаСуммыДолга = ПараметрыВыгрузки.ТаблицаДолги.Найти(ТекущаяСтрокаЛицевогоСчета.ЛицевойСчет, "ЛицевойСчет");
			
			Если НайденнаяСтрокаСуммыДолга <> Неопределено Тогда
				СуммаДолга = НайденнаяСтрокаСуммыДолга.СуммаДолга;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаДолга = 0 Тогда
			
			Если ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти = СтруктураЗначенийПолейФорматаВыгрузки.СпРазделителейДробнойЧасти[3].Значение Тогда // "Без разделителя"
				СуммаДолга = "0";
			Иначе
				СуммаДолга = "0" + ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти + "00";
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти = СтруктураЗначенийПолейФорматаВыгрузки.СпРазделителейДробнойЧасти[3].Значение Тогда // "Без разделителя"
				СуммаДолга = СтрЗаменить(Формат(СуммаДолга, "ЧДЦ=2; ЧГ=0"), ",", "");
			Иначе
				СуммаДолга = Формат(СуммаДолга, "ЧДЦ=2; ЧН=0,00; ЧГ=0; ЧРД=" + ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти + ";");
			КонецЕсли;
			
		КонецЕсли;
		
		Значение = СуммаДолга;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.НомерТелефона
		   И ПараметрыВыгрузки.ТаблицаКонтактныеДанные <> Неопределено Тогда
		
		НайденнаяСтрокаНомерТелефона = ПараметрыВыгрузки.ТаблицаКонтактныеДанные.Найти(ТекущаяСтрокаЛицевогоСчета.ЛицевойСчет, "ЛицевойСчет");
		
		Если НайденнаяСтрокаНомерТелефона = Неопределено Тогда
			Значение = "";
		Иначе
			Значение = СокрЛП(НайденнаяСтрокаНомерТелефона.НомерТелефона);
		КонецЕсли;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений Тогда
		
		СуммаНачисления = 0;
		
		Если ПараметрыВыгрузки.ТаблицаНачислений <> Неопределено Тогда
			
			НайденнаяСтрокаНачисления = ПараметрыВыгрузки.ТаблицаНачислений.Найти(ТекущаяСтрокаЛицевогоСчета.ЛицевойСчет, "ЛицевойСчет");
			
			Если НайденнаяСтрокаНачисления <> Неопределено Тогда
				СуммаНачисления = НайденнаяСтрокаНачисления.СуммаНачисления;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаНачисления = 0 Тогда
			
			Если ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти = "Без разделителя" Тогда
				СуммаНачисления = "0";
			Иначе
				СуммаНачисления = "0" + ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти + "00";
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти = "Без разделителя" Тогда
				СуммаНачисления = СтрЗаменить(Формат(СуммаНачисления, "ЧДЦ=2; ЧГ=0"), ",", "");
			Иначе
				СуммаНачисления = Формат(СуммаНачисления, "ЧДЦ=2; ЧН=0,00; ЧГ=0; ЧРД=" + ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти + ";");
			КонецЕсли;
			
		КонецЕсли;
		
		Значение = СуммаНачисления;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты Тогда
		
		ПорядокМесяц = ТекущаяСтрокаПараметра.ПорядокМесяц;
		ПорядокГод   = ТекущаяСтрокаПараметра.ПорядокГод;
		
		СимволРазделительПериода = ТекущаяСтрокаПараметра.СимволРазделительПериода;
		Если СимволРазделительПериода = "Без разделителя" Тогда
			СимволРазделительПериода = "";
		КонецЕсли;
		
		Если ПорядокМесяц < ПорядокГод Тогда
			ПериодОплаты = Формат(ПараметрыВыгрузки.НачалоПериода, "ДФ=ММ")
						 + СимволРазделительПериода
						 + Формат(ПараметрыВыгрузки.НачалоПериода, "ДФ=гг");
		Иначе
			ПериодОплаты = Формат(ПараметрыВыгрузки.НачалоПериода, "ДФ=гг")
						 + СимволРазделительПериода
						 + Формат(ПараметрыВыгрузки.НачалоПериода, "ДФ=ММ");
		КонецЕсли;
		
		Значение = ПериодОплаты;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ДатаОперации Тогда
		
		Значение = Формат(ТекущаяДата(), "ДФ=дд.MM.гггг");
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.РасчетныйСчетОрганизации Тогда
		
		Значение = Формат(ПараметрыВыгрузки.РасчетныйСчетОрганизации, "ДФ=дд.MM.гггг");
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ОКТМО Тогда
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки)
		 И ПараметрыВыгрузки.Свойство("Организация")
		 И ЗначениеЗаполнено(ПараметрыВыгрузки.Организация)
		 И ЗначениеЗаполнено(ПараметрыВыгрузки.Организация.РегистрацияВНалоговомОргане) Тогда
			Значение = Строка(ПараметрыВыгрузки.Организация.РегистрацияВНалоговомОргане.КодПоОКТМО);
		Иначе
			Значение = "";
		КонецЕсли;
		
	ИначеЕсли Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.КБК Тогда
		
		Значение = ?(ЗначениеЗаполнено(ТекущаяСтрокаПараметра.НалогКБК), ТекущаяСтрокаПараметра.НалогКБК.КодБК, "");
		//---
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Функция возвращает структуру поля DBF.
//
// Параметры:
//  Параметр - Ссылка	 - параметр универсальной выгрузки данных.
// 
// Возвращаемое значение:
//  Структура.
//
&НаСервереБезКонтекста
Функция СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузки(Параметр)
	
	Возврат Справочники.КВП_НастройкиЗагрузкиВыгрузки.СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузкиДанных(Параметр);
	
КонецФункции

// Функция - Получить значение ФИО
//
// Параметры:
// ДанныеЛицевогоСчета	 - СтрокаТаблицыЗначений
// ПараметрВыгрузки	 - Перечисление	
// 
// Возвращаемое значение:
// Строка - Фамилия, Имя, Отчество
//
&НаСервереБезКонтекста
Функция ПолучитьЗначениеФИО(ДанныеЛицевогоСчета, ПараметрВыгрузки)
	
	Если ДанныеЛицевогоСчета.ЭтоЖилец Тогда
		
		Если ПараметрВыгрузки = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Фамилия Тогда
			СтрокаВыводаВМассив = ДанныеЛицевогоСчета.Фамилия;
		ИначеЕсли ПараметрВыгрузки = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Имя Тогда
			СтрокаВыводаВМассив = ДанныеЛицевогоСчета.Имя;
		ИначеЕсли ПараметрВыгрузки = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Отчество Тогда
			СтрокаВыводаВМассив = ДанныеЛицевогоСчета.Отчество;
		КонецЕсли;
		
	Иначе
		Если ДанныеЛицевогоСчета.РазбиватьНаименованиеКонтрагента Тогда
			
			МассивФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеЛицевогоСчета.НаименованиеКонтрагента," ");
			
			Если ПараметрВыгрузки = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Фамилия Тогда
				
				Если МассивФИО.Количество() = 0 Тогда
					СтрокаВыводаВМассив = ДанныеЛицевогоСчета.НаименованиеКонтрагента;
				Иначе
					СтрокаВыводаВМассив = МассивФИО[0];
				КонецЕсли;
				
			ИначеЕсли ПараметрВыгрузки = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Имя Тогда
				
				Если МассивФИО.Количество() <= 1 Тогда
					СтрокаВыводаВМассив = "";
				Иначе
					СтрокаВыводаВМассив = МассивФИО[1];
				КонецЕсли;
				
			ИначеЕсли ПараметрВыгрузки = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Отчество Тогда
				
				Если МассивФИО.Количество() <= 2 Тогда
					СтрокаВыводаВМассив = "";
				Иначе
					СтрокаВыводаВМассив = МассивФИО[2];
				КонецЕсли;
				
			Иначе
				
				СтрокаВыводаВМассив = "";
				
			КонецЕсли;
			
		ИначеЕсли
			
			ПараметрВыгрузки = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Фамилия Тогда
			СтрокаВыводаВМассив = ДанныеЛицевогоСчета.НаименованиеКонтрагента;
			
		Иначе
			
			СтрокаВыводаВМассив = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаВыводаВМассив;
	
КонецФункции

// Процедура закрывает файл DBF.
//
// Параметры:
//  ФайлDBF	 - XBase	 - файл dbf.
//
&НаСервереБезКонтекста
Процедура ЗакрытьФайлDBF(ФайлDBF)
	
	Если ФайлDBF.Открыта() Тогда
		ФайлDBF.ЗакрытьФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Записывает файл реестра во временный каталог.
//
// Параметры:
//  ФайлРеестра				 - 	ТекстовыйДокумент, ТабличныйДокумент - объект файла реестра.
//  ПараметрыВыгрузки		 - 	Стркутура - параметры выгрузки.
//  АдресХранилища			 - 	Строка	 - адрес хранилища.
//
Функция ЗаписатьФайлРеестра(ФайлРеестра, ПараметрыВыгрузки)
	
	Кодировка = ПараметрыВыгрузки.Кодировка;
	
	Если ПараметрыВыгрузки.ЭтоTXT Тогда
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла(".txt");
		
		ФайлРеестра.Записать(ПутьКФайлу, ?(Кодировка = "DOS", КодировкаТекста.OEM, КодировкаТекста.ANSI));
		
	ИначеЕсли ПараметрыВыгрузки.ЭтоCSV Тогда
		
		ПутьКФайлу = ПолучитьИмяВременногоФайла(".csv");
		
		ФайлРеестра.Записать(ПутьКФайлу, ?(Кодировка = "DOS", КодировкаТекста.OEM, КодировкаТекста.ANSI));
		
	ИначеЕсли ПараметрыВыгрузки.ЭтоXLS Тогда
		
		ПутьКФайлу          = ПолучитьИмяВременногоФайла(".xlsx");
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
			ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
		Иначе
			ТипФайла = ТипФайлаТабличногоДокумента.XLS;
		КонецЕсли;
		
		ФайлРеестра.Записать(ПутьКФайлу, ТипФайла);
		
	ИначеЕсли ПараметрыВыгрузки.ЭтоDBF Тогда
		
		ПутьКФайлу = ФайлРеестра.ПолноеИмя;
		
		ЗакрытьФайлDBF(Новый XBase(ПутьКФайлу));
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлу), Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
