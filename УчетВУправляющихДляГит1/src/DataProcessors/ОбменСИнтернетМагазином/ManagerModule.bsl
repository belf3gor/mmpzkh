#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает результат тестового подключения к сайту.
//
// Параметры:
//  НастройкиПодключения - Структура, Адрес сайта, пользователь и пароль
//     * CMSИнтернетМагазина - Перечислениессылка.CMSИнтернетМагазина
//     * АдресСайта          - Строка - адрес сайта или скрипта обмена
//     * Пользователь        - Строка - Логин пользователя
//     * Пароль              - Строка - Пароль пользователя(опционально).
//                             Если не задан явно,то будет получен из безопасного хранилища
//  ТекстСообщения  - Строка -  текстовое сообщение об ошибках
//
// Возвращаемое значение:
//  Булево
//
Функция ВыполнитьТестовоеПодключение(Знач НастройкиПодключения, ТекстСообщения) Экспорт
	
	ТипСоединения = "catalog";
	ОписаниеОшибки = "";
	
	Если НЕ ДополнитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при получении параметров подключения к сайту.'")
			+ Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Соединение = СоединениеССервером(НастройкиПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при установке соединения с сайтом.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтветСервера = "";
	
	Успешно = ВыполнитьАвторизациюДляСоединения(Соединение, НастройкиПодключения, ОтветСервера,
												ОписаниеОшибки, ТипСоединения);
		
	Если Успешно Тогда
		
		ТекстСообщения = НСтр("ru = 'Соединение с сайтом успешно установлено.'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить соединение.'") + Символы.ПС + ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Загружает заказы с сайта интернет-магазина
//
// Параметры:
//  СтатистикаЗагрузки     - Структура, основные параметры
//     * Обработано - Число - Количество обработанных заказов
//     * Создано - Массив - Массив ссылок на Документ.СчетНаОплатуПокупателю
//     * Пропущено - Массив - Массив строк, содержащих номера заказов, пропущенных при обработке
//     * Обновлено - Массив - Массив ссылок на Документ.СчетНаОплатуПокупателю
//  ОписаниеОшибки - Строка, текст ошибки
//
// Возвращаемое значение
//   Булево - Истина, если загрузка прошла успешно. 
//
Функция ЗагрузитьЗаказыИнтернетМагазина(СтатистикаЗагрузки, ОписаниеОшибки) Экспорт
	
	НастройкиЗагрузки = ОбменСИнтернетМагазином.ПолучитьНастройкиОбмена();
	ДополнитьЗначенияПараметровПоУмолчанию(НастройкиЗагрузки);
	
	ПараметрыПодключения = Новый Структура("CMSИнтернетМагазина, АдресСайта, Пользователь");
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, НастройкиЗагрузки);
	ДополнитьНастройкиПодключения(ПараметрыПодключения, ОписаниеОшибки);
	ДобавитьПараметрыПротоколаОбмена(ПараметрыПодключения);
	
	ОтветСервера = "";
	Соединение = Неопределено;
	ТипСоединения = "sale";
	
	АдресДляРаботы = ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения;
	
	ОписаниеОшибки = "";
	Если НЕ ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, ОписаниеОшибки, ТипСоединения) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	КукиИмя             = СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение        = СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов   = "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		ОписаниеОшибки,
		АдресДляРаботы + ПараметрыПодключения.ПараметрЗапросаHTTP_ПолучитьДанные,
		ЗаголовкиЗапросов);
	
	Если ОтветСервера = Неопределено 
			ИЛИ ОписаниеОшибки <> "" Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаXML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
		
	Иначе
		
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			
			СтрокаXML = ОтветСервера;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаXML) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось прочитать данные, загруженные с сервера.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗагрузитьЗаказы(СтрокаXML, СтатистикаЗагрузки, НастройкиЗагрузки, ОписаниеОшибки) Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, 
			НСтр("ru = 'Не удалось обработать документы, загруженные с сервера.'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		ОписаниеОшибки,
		АдресДляРаботы + ПараметрыПодключения.ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта,
		ЗаголовкиЗапросов
	);
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			НСтр("ru = 'Загрузка заказов не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Сопоставляет переданный идентификатор интернет-магазина контрагенту в базе
//
// Параметры:
//  Идентификатор - строка
//
// Возвращаемое значение
//   СправочникСсылка.Контрагенты, Неопределено - Контрагент, соответствующий идентифкатору
//
Функция КонтрагентПоИдентификаторуМагазина(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Первые 1
	|	КонтрагентыИнтернетМагазина.Контрагент
	|ИЗ
	|	РегистрСведений.КонтрагентыИнтернетМагазина КАК КонтрагентыИнтернетМагазина
	|ГДЕ
	|	КонтрагентыИнтернетМагазина.ИдентификаторКонтрагента = &ИдентификаторКонтрагента";
	
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Создает контрагента и подчиненные справочники по полученным из интернет-магазина данным о контрагенте
//
// Параметры:
//  ДанныеКонтрагента - Структура - Значения данных контрагента и данные подчиненных справочников
//     * ЮрЛицо - Булево - Признак Юр.лицо/физ.лицо
//     * ОфициальноеНаименование - Строка - Наименование контрагента Юр.Лица
//     * ФИО - Строка - ФИО физлица
//     * НаименованиеПолное - Строка - полное наименование контрагента
//     * КонтактнаяИнформация - ТаблицаЗначений - Количество обработанных заказов
//       ** Вид           - Строка - Представление вида контактной информации
//       ** Представление - Строка - Представление вида контактной информации
//     * РасчетныеСчета - Массив - Массив структур
//       ** БИК        - Строка - БИК банка
//       ** НомерСчета - Строка - Номер счета в банке
//     * КонтактныеЛица - Массив -  Массив структур
//       **КонтактноеЛицо - Строка - Наименование контактного лица
//  ГруппаКонтрагента - СправочникСсылка.Контрагенты - Группа контрагента
//
// Возвращаемое значение
//   СправочникСсылка.Контрагенты - Созданный контрагент
//
Функция СоздатьКонтрагента(Знач ДанныеКонтрагента, Знач Организация, Знач ГруппаКонтрагента) Экспорт
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(Неопределено);
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	НовыйКонтрагент.Родитель = ГруппаКонтрагента;
	
	Если ДанныеКонтрагента.ЮрЛицо Тогда
		НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеКонтрагента.ОфициальноеНаименование) Тогда
			НовыйКонтрагент.НаименованиеПолное = ДанныеКонтрагента.ОфициальноеНаименование;
	ИначеЕсли НЕ ДанныеКонтрагента.ЮрЛицо
			И НЕ ПустаяСтрока(ДанныеКонтрагента.ФИО) Тогда
			НовыйКонтрагент.НаименованиеПолное = ДанныеКонтрагента.ФИО;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НовыйКонтрагент.НаименованиеПолное) Тогда
		НовыйКонтрагент.Наименование = НовыйКонтрагент.НаименованиеПолное;
	КонецЕсли;
	
	Если ПустаяСтрока(НовыйКонтрагент.Наименование) Тогда
		НовыйКонтрагент.Наименование = Нстр("ru = 'Розничный покупатель'");
	КонецЕсли;
	
	ЗаполненЮрАдрес = Ложь;
	ЗаполненФактАдрес = Ложь;
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.КонтактнаяИнформация Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег("ФактическийАдрес'") Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			ЗаполненФактАдрес = Истина;
		ИначеЕсли ВРег(СтрокаИнформации.Вид) = ВРег("ЮридическийАдрес") Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
										 
			ЗаполненЮрАдрес = Истина;
		ИначеЕсли ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонРабочий")
				ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонВнутренний")
				ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонМобильный")
				ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонДомашний")Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) = ВРег("Почта")
			ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ЭлектроннаяПочта") Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполненФактАдрес И НЕ ЗаполненЮрАдрес Тогда
		Адрес = НовыйКонтрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "Вид");
		
		ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		                             Перечисления.ТипыКонтактнойИнформации.Адрес,
		                             Адрес.Представление);
	ИначеЕсли ЗаполненЮрАдрес И НЕ ЗаполненФактАдрес Тогда
		Адрес = НовыйКонтрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид");
		
		ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		                             Перечисления.ТипыКонтактнойИнформации.Адрес,
		                             Адрес.Представление);
	КонецЕсли;
	
	НовыйКонтрагент.Записать();
	
	ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(НовыйКонтрагент.Ссылка, ДанныеКонтрагента, Организация);
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

// Сопоставляет переданные идентификаторы интернет-магазина номенклатуре в базе
//
// Параметры:
//  МассивИдентификаторов - Массив - Массив строк идентификаторов
//
// Возвращаемое значение
//   ТаблицаЗначений - Список сопоставленной номенклатуры с идентифкаторами
//      * Ссылка        - СправочникСсылка.Номенклатура - Номенклатура, соотв. идентифкатору
//      * Идентификатор - Строка - Переданный идентификатор
//
Функция НоменклатураПоИдентификаторамМагазина(МассивИдентификаторов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураИнтернетМагазина.Номенклатура КАК Ссылка,
	|	НоменклатураИнтернетМагазина.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	НоменклатураИнтернетМагазина.ИдентификаторНоменклатуры КАК Идентификатор,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС
	|ИЗ
	|	РегистрСведений.НоменклатураИнтернетМагазина КАК НоменклатураИнтернетМагазина
	|ГДЕ
	|	НоменклатураИнтернетМагазина.ИдентификаторНоменклатуры В(&ИдентификаторыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", МассивИдентификаторов);
	
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(СтрокаТаблицы.ВидСтавкиНДС, ТекущаяДата());
	КонецЦикла;
	
	ТаблицаНоменклатуры.Колонки.Удалить("ВидСтавкиНДС");
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Создает номенклатуру по полученным из интернет-магазина данным о товаре
//
// Параметры:
//  ДанныеНоменклатуры - Структура - Значения данных о товаре
//     * Услуга        - Булево - Признак Услуга/Товар
//     * Наименование  - Строка - Наименование контрагента Юр.Лица
//     * Единица       - Структура - Данные единицы измерения
//       ** Код        - Строка - Код единицы измерения по классификатору
//  ЗначенияПоУмолчанию - Структура - см. ОбменСИнтернетМагазином.ПолучитьНастройкиОбмена()
//
// Возвращаемое значение
//   СправочникСсылка.Номенклатура - новый элемент справочника номенклатура
//
Функция СоздатьНоменклатуру(ДанныеНоменклатуры, ЗначенияПоУмолчанию) Экспорт
	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	Номенклатура.Заполнить(Неопределено);
	ЗаполнитьЗначенияСвойств(Номенклатура, ДанныеНоменклатуры);
	Номенклатура.НаименованиеПолное   = Номенклатура.Наименование;
	Номенклатура.Родитель             = ЗначенияПоУмолчанию.ГруппаНоменклатуры;
	Номенклатура.НоменклатурнаяГруппа = ЗначенияПоУмолчанию.НоменклатурнаяГруппа;
	Номенклатура.ВидНоменклатуры      = ?(ДанныеНоменклатуры.Услуга,
										ЗначенияПоУмолчанию.ВидНоменклатурыУслуга,
										ЗначенияПоУмолчанию.ВидНоменклатуры);
										
	Номенклатура.Услуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ВидНоменклатуры, "Услуга");
	
	ЕдиницаИзм = Неопределено;
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Единица.Код) Тогда
		ЕдиницаИзм = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(ДанныеНоменклатуры.Единица.Код);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзм) И НЕ ДанныеНоменклатуры.Услуга Тогда
		ЕдиницаИзм = ЗначенияПоУмолчанию.ЕдиницаИзмерения;
	КонецЕсли;
	
	Номенклатура.ЕдиницаИзмерения = ЕдиницаИзм;
	Номенклатура.Записать();
	
	Возврат Номенклатура.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Подключение
Функция ПолучитьДанныеССервера(Соединение, ОписаниеОшибки, ПараметрыЗапроса = "", Заголовки = "")
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	Кодировка = Неопределено;
	
	Попытка
		
		HTTPОтвет = Соединение.Получить(СокрЛП(ПараметрыЗапроса), ИмяФайлаОтвета, СокрЛП(Заголовки));
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(
			НСтр("ru = 'Не удалось получить данные с сервера. 
				|Проверьте правильность адреса сервера, порт,'")
				+ Символы.ПС
				+ НСтр("ru = 'а также настройки подключения к Интернет.'")));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);
	ОтветСервера = Неопределено;
	
	Если ФайлОтвета.Существует() Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаОтвета);
			ЧтениеXML.Прочитать();
			Кодировка = ЧтениеXML.КодировкаXML;
		Исключение
		КонецПопытки;
		ЧтениеXML.Закрыть();
		
		Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
			ContentType = HTTPОтвет.Заголовки.Получить("Content-Type");
			Если ContentType <> Неопределено Тогда
				СписокПараметров = СтрРазделить(ContentType, ";", Ложь);
				Для Каждого Параметр Из СписокПараметров Цикл
					Если Найти(Параметр, "charset=") > 0 Тогда
						Кодировка = СтрЗаменить(Параметр, "charset=", "");
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Кодировка) Тогда
				//Shop-Script
				Encoding = HTTPОтвет.Заголовки.Получить("Encoding");
				Если Encoding <> Неопределено И НЕ ПустаяСтрока(Encoding) Тогда
					Кодировка = Encoding;
				Иначе
					Кодировка = КодировкаТекста.UTF8;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета, Кодировка);
		
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				НСтр("ru = 'Получение данных с сервера: Получен пустой ответ сервера.'"));
		КонецЕсли;
		
	Иначе
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			НСтр("ru = 'Получение данных с сервера: Ответ сервера не получен.'"));
			
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Ошибка удаления файла %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаОтвета);
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ВыполнитьАвторизациюДляСоединения(Соединение, ПараметрыПодключения, ОтветСервера, 
											ОписаниеОшибки, ТипСоединения = "catalog")
	
	Соединение = СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	
	Если Соединение = Неопределено Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ОписаниеОшибки = "";
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		ОписаниеОшибки,
		ПараметрыПодключения.АдресСкрипта + "?type=" + ТипСоединения + "&mode=checkauth");
	
	Если ОтветСервера = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервера, 1))) <> "success" Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'")
			+ Символы.ПС 
			+ НСтр("ru = 'Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по настройке обмена
// с учетом параметров прокси.
//
// Параметры:
//	УзелОбмена - ПланОбменаСсылка.ОбменУправлениеНебольшойФирмойСайт
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция ДополнитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки)
	
	Если НЕ РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкаПроксиСервера = Новый Соответствие;
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	
	Если НастройкаПроксиСервера <> Неопределено
		И НастройкаПроксиСервера["ИспользоватьПрокси"] = Ложь Тогда
		
		НастройкаПроксиСервера = Неопределено;
	КонецЕсли;
	
	Протокол = ?(НастройкиПодключения.ЗащищенноеСоединение, "https", "http");
	Прокси = ?(НастройкаПроксиСервера = Неопределено, Неопределено, НастройкиПрокси(НастройкаПроксиСервера, Протокол));
	
	НастройкиПодключения.Вставить("Прокси", Прокси);
	
	Если Не НастройкиПодключения.Свойство("Пароль") Тогда
		ИдентификаторПодсистемы = ОбменСИнтернетМагазином.ИдентификаторПодсистемы();
		УстановитьПривилегированныйРежим(Истина);
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы, "Пароль");
		УстановитьПривилегированныйРежим(Ложь);
		НастройкиПодключения.Вставить("Пароль", Пароль);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует структуру параметров подключения к сайту по URL.
//
// Параметры:
//	НастройкиПодключения - Структура настроек подключения к сайту
//	ОписаниеОшибки - Строка
//
// Возвращаемое значение:
//	Булево - Истина, если успех.
//
Функция РазобратьАдресСайта(НастройкиПодключения, ОписаниеОшибки)
	
	АдресСайта = СокрЛП(НастройкиПодключения.АдресСайта); 
	
	Сервер = ""; 
	
	Порт = 0;
	
	АдресСкрипта = "";
	
	ЗащищенноеСоединение = Ложь;
	
	Если НЕ ПустаяСтрока(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если НРег(Лев(АдресСайта, 7)) = "http://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли НРег(Лев(АдресСайта, 8)) = "https://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			ЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = СтрНайти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			Сервер = Лев(АдресСайта, ПозицияСлэша - 1);
			АдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			Сервер = АдресСайта;
			АдресСкрипта = "";
		КонецЕсли;
		
		ПозицияДвоеточия = СтрНайти(Сервер, ":");
		ПортСтрока = "0";
		Если ПозицияДвоеточия > 0 Тогда
			СерверСПортом = Сервер;
			Сервер = Лев(СерверСПортом, ПозицияДвоеточия - 1);
			ПортСтрока = Прав(СерверСПортом, СтрДлина(СерверСПортом) - ПозицияДвоеточия);
		КонецЕсли;
		
		Попытка
			
			Порт = Число(ПортСтрока);
			
		Исключение
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось получить номер порта:'")
					+ " " + ПортСтрока + Символы.ПС
					+ НСтр("ru = 'Проверьте правильность ввода адреса сайта.'")));
				
			Возврат Ложь;
			
		КонецПопытки;
		
		Если Порт = 0 Тогда
			Порт = ?(ЗащищенноеСоединение, 443, 80);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресСкрипта) Тогда
		АдресСкрипта = АдресСкриптаОбмена(НастройкиПодключения.CMSИнтернетМагазина);
	КонецЕсли;
	
	НастройкиПодключения.Вставить("Сервер", Сервер); 
	НастройкиПодключения.Вставить("Порт", Порт);
	НастройкиПодключения.Вставить("АдресСкрипта", АдресСкрипта);
	НастройкиПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Истина;
	
КонецФункции

Функция АдресСкриптаОбмена(ЗначениеСУС)
	
	Если ЗначениеСУС = Перечисления.CMSИнтернетМагазина.Bitrix Тогда
		АдресСкрипта = "/bitrix/admin/1c_exchange.php";
	ИначеЕсли ЗначениеСУС = Перечисления.CMSИнтернетМагазина.UMI Тогда
		АдресСкрипта = "/admin/exchange/autoimport/";
	Иначе
		АдресСкрипта = "";
	КонецЕсли;
	
	Возврат АдресСкрипта;
	
КонецФункции

// Формирует объект ИнтернетПрокси по настройкам прокси.
//
// Параметры:
//	Прокси		- Соответствие -
//					ключи:
//					НеИспользоватьПроксиДляЛокальныхАдресов - строка - 
//					Сервер			- адрес прокси-сервера
//					Порт			- порт прокси-сервера
//					Пользователь	- имя пользователя для авторизации на прокси-сервере
//					Пароль			- пароль пользователя
//	Протокол	- строка - протокол для которого устанавливаются параметры прокси сервера.
//					Например: "http", "https", "ftp".
//
Функция НастройкиПрокси(Настройки, Протокол)
	Прокси = Новый ИнтернетПрокси;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = Настройки["НеИспользоватьПроксиДляЛокальныхАдресов"];
	Прокси.Установить(Протокол, Настройки["Сервер"], Настройки["Порт"], Настройки["Пользователь"], Настройки["Пароль"]);
	
	Возврат Прокси;
	
КонецФункции

Функция СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки)
	
	Соединение = Неопределено;
	
	Попытка
		
		ssl = ?(ПараметрыПодключения.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
			
		Соединение = Новый HTTPСоединение(
			ПараметрыПодключения.Сервер,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.Пользователь,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.Прокси,
			1800,
			ssl
		);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.'"),
					ПараметрыПодключения.Сервер,
					ПараметрыПодключения.Порт)));
		
		Соединение = Неопределено;
			
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Процедура ДополнитьЗначенияПараметровПоУмолчанию(Параметры)
	
	ПрефиксСайта = Параметры.Префикс;
	ПрефиксСайта = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксСайта, 2, "0", "Слева");
	
	ПрефиксОрганизации ="";
	ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(Параметры.Организация, ПрефиксОрганизации);
	
	ПрефиксОрганизации = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
	
	Параметры.Вставить("ПолныйПрефиксДокумента", ПрефиксОрганизации + ПрефиксСайта);
	
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
	Параметры.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Параметры.Вставить("ВидНоменклатурыУслуга", Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(Истина));
	
КонецПроцедуры

Процедура ДобавитьПараметрыПротоколаОбмена(СтруктураПараметров)
	
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_Инициализация"			, "&mode=init");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПередачаФайла"			, "&mode=file&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ИмпортФайлаСервером"		, "&mode=import&filename=");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_ПолучитьДанные"			, "&mode=query");
	СтруктураПараметров.Вставить("ПараметрЗапросаHTTP_УспешноеЗавершениеИмпорта", "&mode=success");
	
	СтруктураПараметров.Вставить("ОтветСервера_ZIPРазрешен"								, "zip=yes");
	СтруктураПараметров.Вставить("ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена"	, "file_limit=");
	СтруктураПараметров.Вставить("ОтветСервера_УспешноеЗавершениеТекущейОперации"		, "success");
	СтруктураПараметров.Вставить("ОтветСервера_АварийноеЗавершениеТекущейОперации"		, "failure");
	СтруктураПараметров.Вставить("ОтветСервера_ВыполнениеТекущейОперации"				, "progress");
	
КонецПроцедуры	

Функция РаспаковатьZIPАрхив(СтрокаZIP, ОписаниеОшибки)
	
	СтрокаСодержимого = "";
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");

	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	
	Попытка
		
		СтрокаВФайл.Записать(ИмяФайла);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать архив с заказами: '")
				+ ИмяФайла));
				
		Возврат "";
		
	КонецПопытки;
	
	ИмяКаталога = ОбщегоНазначения.СоздатьВременныйКаталог();
	
	Попытка
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
		ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
		ЧтениеZIP.Закрыть();
		
		РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
		
		Если РаспакованныеФайлы.Количество() = 1 Тогда
			
			КодировкаXML = КодировкаФайла(РаспакованныеФайлы[0].ПолноеИмя);
			
			СтрокаИзФайла = Новый ТекстовыйДокумент;
			СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя, КодировкаXML);
			СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
			
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		ОбщегоНазначения.УдалитьВременныйКаталог(ИмяКаталога);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось распаковать архив с заказами: '")
				+ ИмяФайла));
		ОбщегоНазначения.УдалитьВременныйКаталог(ИмяКаталога);
				
		Возврат "";
		
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции

Функция КодировкаФайла(ИмяФайла)

	КодировкаXML = "UTF-8";
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеXML.Прочитать();
		КодировкаXML = ЧтениеXML.КодировкаXML;
	Исключение
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	Возврат КодировкаXML;

КонецФункции

#КонецОбласти

#Область ЗагрузкаЗаказа

// Выполняет загрузку заказов.
//
// Параметры:
//	ДанныеЗаказов		- строка для записи xml или ОбъектXDTO
//	СтруктураСтатистики	- Структура
//	Параметры			- Структура, основные параметры
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ЗагрузитьЗаказы(ДанныеЗаказов, СтатистикаЗагрузки, Параметры, ОписаниеОшибки)
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ЗаказыXDTO = ДанныеЗаказов;
	Иначе
		ЗаказыXDTO = ПолучитьЗаказыXDTO(ДанныеЗаказов, Параметры, ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗаказыXDTO = Неопределено Тогда 
		
		Возврат Ложь;
		
	ИначеЕсли НЕ ОбъектXDTOСодержитСвойство(ЗаказыXDTO, "Документ") Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Нет документов для обработки.'"));
		Возврат Истина;
		
	КонецЕсли;
	
	
	МассивЗаказовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗаказыXDTO.Документ);
	
	ЗагружаемыеЗаказы = СопоставитьЗагружаемыеЗаказы(МассивЗаказовXDTO, Параметры);
	
	// Подтверждение о получении заказов фиксируется интернет-магазином для всех выгружаемых заказов.
	// Если какой-то заказ не загрузился из-за ошибки, то повторно он появится в выгрузке только после изменения в интернет-магазине.
	// Чтобы иметь возможность повторно загрузить заказ после исправления ошибки - отказываемся от загрузки всех передаваемых заказов,
	// если хотя бы один из них содержит ошибку.
	
	НачатьТранзакцию();
	
	Успешно = СоздатьОбновитьЗаказы(ЗагружаемыеЗаказы, СтатистикаЗагрузки, Параметры, ОписаниеОшибки);
	
	Если Не Успешно Тогда
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Создает на основании XML объект XDTO.
//
// Параметры:
//	СтрокаXML - объект чтения XML
//	Параметры - структура
//	ОписаниеОшибки - строка
//
// Возвращаемое значение:
//	ОбъектXDTO.
//
Функция ПолучитьЗаказыXDTO(СтрокаXML, Параметры, ОписаниеОшибки)
	
	ОбъектXML = Новый ЧтениеXML();
	
	Попытка
		
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось разобрать строку XML'");
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ТекстОшибки));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		
		КоммерческаяИнформацияXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать XML'");
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ТекстОшибки));
			
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Получает заказы, ранее загруженные с сайта.
//
// Параметры:
//	МассивЗаказовXDTO - массив - данные загружаемых документов
//	ДатаНачалаОбмена - Дата - дата, ранее котрой загрузка заказов запрещена
//
// Возвращаемое значение
//	Таблица значений
//
Функция СопоставитьЗагружаемыеЗаказы(МассивЗаказовXDTO, Параметры)
	
	ТипНомер = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Метаданные.Документы.СчетНаОплатуПокупателю.ДлинаНомера));
	
	ТаблицаЗаказов = Новый ТаблицаЗначений;
	ТаблицаЗаказов.Колонки.Добавить("НомерДокумента",     ТипНомер);
	ТаблицаЗаказов.Колонки.Добавить("НомерЗаказа",        ТипНомер);
	ТаблицаЗаказов.Колонки.Добавить("ДатаЗаказа",         Новый ОписаниеТипов("Дата"));
	ТаблицаЗаказов.Колонки.Добавить("КонецДняДатаЗаказа", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаказов.Колонки.Добавить("ДокументXDTO");
	ТаблицаЗаказов.Колонки.Добавить("СчетНаОплатуПокупателю", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
	ТаблицаЗаказов.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	Для каждого ДокументXDTO Из МассивЗаказовXDTO Цикл
		ДатаЗаказа = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата);
		Если ДатаЗаказа < Параметры.ДатаНачалаОбмена Тогда
			Продолжить;
		КонецЕсли;
		НомерЗагруженногоДокумента = ПолучитьНомерЗаказаССайта(ДокументXDTO.Номер, Параметры);
		
		ДанныеЗаказа = ТаблицаЗаказов.Добавить();
		ДанныеЗаказа.НомерДокумента = НомерЗагруженногоДокумента;
		ДанныеЗаказа.НомерЗаказа = ДокументXDTO.Номер;
		ДанныеЗаказа.ДатаЗаказа = ДатаЗаказа;
		ДанныеЗаказа.КонецДняДатаЗаказа = КонецДня(ДатаЗаказа);
		ДанныеЗаказа.ДокументXDTO = ДокументXDTO;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДанныеЗаказов", ТаблицаЗаказов.Скопировать(,"НомерДокумента, НомерЗаказа, ДатаЗаказа, КонецДняДатаЗаказа"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЗаказов.НомерДокумента КАК НомерДокумента,
	|	ДанныеЗаказов.НомерЗаказа,
	|	ДанныеЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ДанныеЗаказов.КонецДняДатаЗаказа КАК КонецДняДатаЗаказа
	|ПОМЕСТИТЬ ДанныеЗаказов
	|ИЗ
	|	&ДанныеЗаказов КАК ДанныеЗаказов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетНаОплатуПокупателю.Ссылка КАК СчетНаОплатуПокупателю,
	|	ДанныеЗаказов.НомерЗаказа,
	|	ДанныеЗаказов.НомерДокумента,
	|	ДанныеЗаказов.ДатаЗаказа,
	|	СчетНаОплатуПокупателю.ПометкаУдаления
	|ИЗ
	|	ДанныеЗаказов КАК ДанныеЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|		ПО (СчетНаОплатуПокупателю.Номер = ДанныеЗаказов.НомерДокумента)
	|			И (СчетНаОплатуПокупателю.Дата МЕЖДУ ДанныеЗаказов.ДатаЗаказа И ДанныеЗаказов.КонецДняДатаЗаказа)";
	
	НайденныеЗаказы = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗаказов.Индексы.Добавить("НомерЗаказа, ДатаЗаказа");
	
	Пока НайденныеЗаказы.Следующий() Цикл
		Отбор = Новый Структура("НомерЗаказа, ДатаЗаказа", НайденныеЗаказы.НомерЗаказа, НайденныеЗаказы.ДатаЗаказа);
		НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(Отбор);
		НайденныеСтроки[0].СчетНаОплатуПокупателю = НайденныеЗаказы.СчетНаОплатуПокупателю;
		НайденныеСтроки[0].ПометкаУдаления = НайденныеЗаказы.ПометкаУдаления;
	КонецЦикла;
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

Процедура ЗаполнитьЗаказДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, Параметры)

	ВремяСтрока = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Время") Тогда
		ВремяСтрока = ДокументXDTO.Время;
	КонецЕсли;
	
	ДатаДокумента = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата, ВремяСтрока);
	
	ЕстьНДС = УчетнаяПолитика.ПлательщикНДС(Параметры.Организация, ДатаДокумента);
	
	Параметры.Вставить("ЕстьНДС", ЕстьНДС);
	
	СтавкаНДСПоУмолчанию = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДатаДокумента, ЕстьНДС);
	
	Если Параметры.ЭтоНовыйДокумент Тогда
		ДокументОбъект.Заполнить(Параметры);
	
		ДокументОбъект.Организация           = Параметры.Организация;
		ДокументОбъект.ОрганизацияПолучатель = Параметры.Организация;
		ДокументОбъект.Склад                 = Параметры.Склад;
		ДокументОбъект.Дата                  = ДатаДокумента;
		ДокументОбъект.ДокументБезНДС        = НЕ ЕстьНДС;
		ДокументОбъект.ВалютаДокумента       = ОбработатьВалютуXML(ДокументXDTO.Валюта);
	
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсВзаиморасчетов      = КурсНаДату.Курс;
		ДокументОбъект.КратностьВзаиморасчетов = КурсНаДату.Кратность;
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(ДокументОбъект.СтруктурнаяЕдиница,
			Параметры.Организация, ДокументОбъект.ВалютаДокумента);
		
		Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги")
			И ДокументXDTO.Налоги <> Неопределено
			И ОбъектXDTOСодержитСвойство(ДокументXDTO.Налоги, "Налог") Тогда
			
			НалогиXDTO = ДокументXDTO.Налоги.Налог;
			МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
			
			Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
						СтавкаНДСПоУмолчанию = ПолучитьСтавкуНДСПеречислением(НалогXDTO.Ставка);
					КонецЕсли;
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "УчтеноВСумме") Тогда
						ДокументОбъект.СуммаВключаетНДС = НалогXDTO.УчтеноВСумме = Истина ИЛИ НРег(НалогXDTO.УчтеноВСумме) = "true";
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("СтавкаНДСПоУмолчанию", СтавкаНДСПоУмолчанию);
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		Контрагент = КонтрагентПоДаннымИнтернетМагазина(ДокументXDTO);
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеКонтрагента= ЗаполнитьДанныеКонтрагента(ДокументXDTO);
			Если Параметры.СоздаватьНовыхКонтрагентов Тогда
				Контрагент = СоздатьКонтрагента(ДанныеКонтрагента, Параметры.Организация, Параметры.ГруппаКонтрагентов);
				РегистрыСведений.КонтрагентыИнтернетМагазина.УстановитьСоответствие(ДанныеКонтрагента.Идентификатор, Контрагент);
			Иначе
				Параметры.Вставить("ДанныеКонтрагента", ДанныеКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДокументОбъект.Контрагент = Контрагент;
			
			РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
				ДокументОбъект.ДоговорКонтрагента,
				ДокументОбъект.Контрагент,
				ДокументОбъект.Организация,
				Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		КонецЕсли;
		
	КонецЕсли;
	
	
	ЗаполнитьТабличнуюЧастьЗаказа(ДокументОбъект, ДокументXDTO, Параметры);
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Комментарий") 
		И СвойствоXDTOЗаполнено(ДокументXDTO.Комментарий) Тогда
		
		ДокументОбъект.Комментарий = СокрЛП(ДокументXDTO.Комментарий);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "АдресДоставки") 
		И СвойствоXDTOЗаполнено(ДокументXDTO.АдресДоставки) Тогда
		ДокументОбъект.АдресДоставки = СокрЛП(ДокументXDTO.АдресДоставки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНомерЗаказаССайта(НомерНаСайте, Параметры)
	
	СтрокаДопустимыхСиволов = "1234567890";
	МассивУдаляемыхСимволов = Новый Массив;
	
	НомерНаСайте = СокрЛП(НомерНаСайте);
	Если СтрДлина(НомерНаСайте) > 0 Тогда
		
		Для Сч = 1 по СтрДлина(НомерНаСайте) Цикл
			
			Символ = НРег(Сред(НомерНаСайте, Сч, 1));
			Если Не СтрНайти(СтрокаДопустимыхСиволов, Символ) Тогда
				МассивУдаляемыхСимволов.Добавить(Символ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Символ Из МассивУдаляемыхСимволов Цикл
		НомерНаСайте = СтрЗаменить(НомерНаСайте, Символ, "");
	КонецЦикла;
	
	Возврат Параметры.ПолныйПрефиксДокумента+ "-" + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаСайте, 6, "0", "Слева");
	
КонецФункции

Функция СоздатьОбновитьЗаказы(ЗаказыКЗагрузке, СтатистикаЗагрузки, Параметры, ОписаниеОшибки)
	
	Для каждого Заказ Из ЗаказыКЗагрузке Цикл
		ДокументXDTO = Заказ.ДокументXDTO;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
			ИЛИ НЕ НРег(ДокументXDTO.ХозОперация) = "заказ товара" Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				СтрШаблон(НСтр("ru = 'Ошибка в заказе № %1. Значение узла <Документ>.<ХозОперация> документа XML (%2). Ожидается ""Заказ товара""'"),
					ДокументXDTO.Номер,
					ДокументXDTO.ХозОперация));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтатистикаЗагрузки.Обработано = СтатистикаЗагрузки.Обработано + 1;
		
		Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Валюта")
			ИЛИ НЕ СвойствоXDTOЗаполнено(ДокументXDTO.Валюта) Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				СтрШаблон(НСтр("ru = 'Ошибка в заказе № %1. Значение узла <Документ>.<Валюта> документа XML. Валюта должна быть заполнена.'"),
				ДокументXDTO.Номер));
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СвойстваЗаказа = Новый Соответствие;
		
		Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "ЗначенияРеквизитов")
			И ДокументXDTO.ЗначенияРеквизитов <> Неопределено
			И ОбъектXDTOСодержитСвойство(ДокументXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
			
			МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита);
			
			Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
				
				Реквизит = ЗначениеРеквизитаXDTO.Наименование;
				Значение = ЗначениеРеквизитаXDTO.Значение;
				
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					СвойстваЗаказа.Вставить(Реквизит, Значение);
				ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO")
					И Значение.Количество() > 0 Тогда
					СвойстваЗаказа.Вставить(Реквизит, Значение[0]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЭтоНовыйДокумент = НЕ ЗначениеЗаполнено(Заказ.СчетНаОплатуПокупателю);
		ЗаказОтменен = ВРег(СвойстваЗаказа["Отменен"]) = "ИСТИНА"
				ИЛИ ВРег(СвойстваЗаказа["Отменен"]) = "TRUE";
				
		Если ЭтоНовыйДокумент Тогда
			
			// Если установлен статус заказа - "Отменен", то откажемся от загрузки документа
			Если ЗаказОтменен Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверим, что статус нового документа не запрещен к загрузке
			СтатусЗаказа = "";
			ЗапрещенныеСтатусы = Параметры.ЗапрещенныеСтатусы.Получить();
			Если Параметры.ИспользоватьОтборПостатусам
				И ЗапрещенныеСтатусы.Количество() > 0 Тогда
				
				СтатусЗаказа = СвойстваЗаказа["Статус заказа"];
				// Статус Bitrix содержит идентификатор статуса
				ПозицияИд = СтрНайти(СтатусЗаказа,"]");
				СтатусЗаказаБезИд = ?(ПозицияИд = 0, СтатусЗаказа, СокрЛП(Сред(СтатусЗаказа, ПозицияИд+1)));
				НайденЗапрещенныйСтатус = Ложь;
				Для Каждого Статус из ЗапрещенныеСтатусы Цикл
					Если ВРЕГ(Статус) = ВРЕГ(СтатусЗаказа)
						ИЛИ ВРЕГ(Статус) = ВРЕГ(СтатусЗаказаБезИд) Тогда
						НайденЗапрещенныйСтатус = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НайденЗапрещенныйСтатус Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
			
		Иначе
			
			Если Заказ.ПометкаУдаления Тогда
				
				СтатистикаЗагрузки.Пропущено.Добавить(ДокументXDTO.Номер);
				
				ДобавитьОписаниеОшибки(ОписаниеОшибки,
					СтрШаблон(НСтр("ru = ' Заказ № %1 пропущен по причине:'") + Символы.ПС 
					+ НСтр("ru = 'Документ %2 помечен на удаление'"),
					ДокументXDTO.Номер,
					Заказ.СчетНаОплатуПокупателю));
				
				Продолжить;
				
			КонецЕсли;
			
			ДокументОбъект = Заказ.СчетНаОплатуПокупателю.ПолучитьОбъект();
			
		КонецЕсли;
		
		ПараметрыЗаказа = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
		ПараметрыЗаказа.Вставить("ЭтоНовыйДокумент", ЭтоНовыйДокумент);
		
		ЗаполнитьЗаказДаннымиДокументаXDTO(ДокументОбъект, ДокументXDTO, ПараметрыЗаказа);
		
		Если ЭтоНовыйДокумент Тогда
			ДокументОбъект.Номер = Заказ.НомерДокумента;
		КонецЕсли;
		
		// Проводим новый документ, если все данные уже сопоставлены
		РазрешеноПроведение = НЕ ПараметрыЗаказа.Свойство("ДанныеНоменклатуры")
			И НЕ ПараметрыЗаказа.Свойство("ДанныеКонтрагента");
			
		Попытка
			
			ЗаписатьДокумент(ДокументОбъект, РазрешеноПроведение);
			
			Если НЕ ЭтоНовыйДокумент
				И ЗаказОтменен Тогда
				РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(ДокументОбъект.Ссылка,
					Перечисления.СтатусОплатыСчета.Отменен);
			КонецЕсли;
			
			Если ЭтоНовыйДокумент Тогда
				СтатистикаЗагрузки.Создано.Добавить(ДокументОбъект.Ссылка);
			Иначе
				СтатистикаЗагрузки.Обновлено.Добавить(ДокументОбъект.Ссылка);
			КонецЕсли;
			
			ЗаписатьДанныеДляСопоставления(ДокументОбъект.Ссылка, ПараметрыЗаказа);
			
		Исключение
			
			СтатистикаЗагрузки.Пропущено.Добавить(ДокументXDTO.Номер);
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки,
				ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось записать заказ №'") + ДокументXDTO.Номер));
				
			Возврат Ложь;
				
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьДокумент(ДокументОбъект, РазрешеноПроведение)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ДокументОбъект.Проведен = ?(ДокументОбъект.ЭтоНовый(),
								РазрешеноПроведение,
								ДокументОбъект.Проведен И РазрешеноПроведение);
	
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьЗаказа(ДокументОбъект, ДокументXDTO, Параметры)
	
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары")
		ИЛИ ДокументXDTO.Товары = Неопределено
		ИЛИ НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO.Товары, "Товар") Тогда
		
		Возврат ;
		
	КонецЕсли;
	
	ТоварыXDTO = ДокументXDTO.Товары.Товар;
	МассивТоваровXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварыXDTO);
	
	МассивИдНоменклатуры = Новый Массив;
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		ИД = "";
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
			ИД = ПолучитьИдНоменклатуры(ТоварXDTO.Ид);
		КонецЕсли;
		МассивИдНоменклатуры.Добавить(ИД);
		
	КонецЦикла;
	
	ТаблицаСоответствияНоменклатуры = НоменклатураПоИдентификаторамМагазина(МассивИдНоменклатуры);
	ТаблицаСоответствияНоменклатуры.Индексы.Добавить("Идентификатор");
	
	ТаблицаНесопоставленнойНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНесопоставленнойНоменклатуры.Колонки.Добавить("НомерСтрокиЗаказа", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6)));
	ТаблицаНесопоставленнойНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(110)));
	ТаблицаНесопоставленнойНоменклатуры.Колонки.Добавить("ДанныеНоменклатуры");
		
	ДокументОбъект.Товары.Очистить();
	СчСтрок = 0;
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		СтавкаНДС = Неопределено;
		
		НаименованиеНоменклатуры = "";
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
			НаименованиеНоменклатуры = ПолучитьНаименованиеНоменклатуры(ТоварXDTO.Наименование);
		КонецЕсли;
		
		ИдНоменклатуры = "";
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
			ИдНоменклатуры = ПолучитьИдНоменклатуры(ТоварXDTO.Ид);
		КонецЕсли;
		
		СоответствиеНоменклатуры = ТаблицаСоответствияНоменклатуры.Найти(ИдНоменклатуры, "Идентификатор");
		Если СоответствиеНоменклатуры = Неопределено Тогда
			ДанныеНоменклатуры = ОписаниеДанныхНоменклатуры();
			ДанныеНоменклатуры.Вставить("Идентификатор", ИдНоменклатуры);
			ДанныеНоменклатуры.Вставить("Наименование", НаименованиеНоменклатуры);
			
			ЗаполнитьДанныеНоменклатуры(ДанныеНоменклатуры, ТоварXDTO, Параметры);
			
			Если Параметры.СоздаватьНовуюНоменклатуру Тогда
				Номенклатура = СоздатьНоменклатуру(ДанныеНоменклатуры, Параметры);
				РегистрыСведений.НоменклатураИнтернетМагазина.УстановитьСоответствие(ИдНоменклатуры, Номенклатура);
			Иначе
				НоваяНоменклатура = ТаблицаНесопоставленнойНоменклатуры.Добавить();
				НоваяНоменклатура.НомерСтрокиЗаказа  = СчСтрок;
				НоваяНоменклатура.Идентификатор      = ДанныеНоменклатуры.Идентификатор;
				НоваяНоменклатура.ДанныеНоменклатуры = ДанныеНоменклатуры;
			КонецЕсли;
			
		Иначе
			
			Номенклатура = СоответствиеНоменклатуры.Ссылка;
			СтавкаНДС = СоответствиеНоменклатуры.СтавкаНДС;
			
		КонецЕсли;
		
		Количество = 0;
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Количество") Тогда 
			Количество = ПолучитьЧислоИзСтроки(ТоварXDTO.Количество);
		КонецЕсли;
		
		ЦенаЗаЕдиницу = 0;
		Сумма = 0;
		СуммаСкидок = 0;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЦенаЗаЕдиницу") Тогда
			ЦенаЗаЕдиницу = ПолучитьЧислоИзСтроки(ТоварXDTO.ЦенаЗаЕдиницу);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Сумма") Тогда
			Сумма = ПолучитьЧислоИзСтроки(ТоварXDTO.Сумма);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки")
			И ТоварXDTO.Скидки <> Неопределено
			И ОбъектXDTOСодержитСвойство(ТоварXDTO.Скидки, "Скидка") Тогда
			
			МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварXDTO.Скидки.Скидка);
			Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
				
				Если НЕ ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме") 
					ИЛИ НРег(СкидкаXDTO.УчтеноВСумме = "true") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СуммаСкидки = ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
				СуммаСкидок = СуммаСкидок + СуммаСкидки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьСтавкуНДСПоДаннымXDTO(СтавкаНДС, ТоварXDTO);
		
		// Добавляем новую строку в табличную часть "Товары".
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Содержание   = НаименованиеНоменклатуры;
		НоваяСтрока.Количество   = Количество;
		НоваяСтрока.СтавкаНДС    = ?(Параметры.ЕстьНДС И ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, Параметры.СтавкаНДСПоУмолчанию);
		НоваяСтрока.Сумма        = Сумма;
		НоваяСтрока.СуммаСкидки  = СуммаСкидок;
		Если НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = ?(ЦенаЗаЕдиницу > 0, ЦенаЗаЕдиницу, (НоваяСтрока.Сумма - НоваяСтрока.СуммаСкидки) / НоваяСтрока.Количество);
		Иначе
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
		КонецЕсли;
		
		Если НоваяСтрока.Сумма <> 0 Тогда
			НоваяСтрока.ПроцентСкидки =  НоваяСтрока.СуммаСкидки / НоваяСтрока.Сумма * 100;
		КонецЕсли;
		
		ПересчитатьСуммуНДС(НоваяСтрока, ДокументОбъект.СуммаВключаетНДС);
		СчСтрок = СчСтрок + 1;
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументОбъект);
	Если ТаблицаНесопоставленнойНоменклатуры.Количество() > 0 Тогда
		Параметры.Вставить("ДанныеНоменклатуры", ТаблицаНесопоставленнойНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС)
	
	Если Строка.СуммаСкидки > 0 Тогда
		Сумма = Строка.Сумма - Мин(Строка.СуммаСкидки, Строка.Сумма);
	Иначе
		Сумма = Строка.Сумма;
	КонецЕсли;

	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

КонецПроцедуры

#КонецОбласти

#Область ОбработкаНоменклатуры

Функция ОписаниеДанныхНоменклатуры()
	ДанныеНоменклатуры = новый Структура;
	ДанныеНоменклатуры.Вставить("Ссылка");
	ДанныеНоменклатуры.Вставить("Идентификатор");
	ДанныеНоменклатуры.Вставить("Артикул");
	ДанныеНоменклатуры.Вставить("Наименование");
	ДанныеНоменклатуры.Вставить("Услуга");
	ДанныеНоменклатуры.Вставить("ВидНоменклатуры");
	ДанныеНоменклатуры.Вставить("Единица", Новый Структура("Наименование, Код"));
	ДанныеНоменклатуры.Вставить("СвойстваТовара", Новый Массив);
	
	Возврат ДанныеНоменклатуры;
КонецФункции

Функция ПолучитьИдНоменклатуры(Знач Ид)
	
	ПозицияРазделителя = СтрНайти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдНоменклатуры = Лев(Ид, ПозицияРазделителя - 1);
	Иначе
		ИдНоменклатуры = Ид;
	КонецЕсли;
	
	Возврат ИдНоменклатуры;
	
КонецФункции

Функция ПолучитьНаименованиеНоменклатуры(Знач Наименование)
	
	ПозицияРазделителя = СтрНайти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеНоменклатуры = Лев(Наименование, ПозицияРазделителя - 1);
	Иначе
		НаименованиеНоменклатуры = Наименование;
	КонецЕсли;
	
	Возврат НаименованиеНоменклатуры;
	
КонецФункции

Процедура ЗаполнитьДанныеНоменклатуры(ДанныеНоменклатуры, ТоварXDTO, Параметры)
	
	АртикулНоменклатуры = "";
	НаименованиеНоменклатуры = "";
	ВидНоменклатуры = "";
	СвойстваТовара = Новый Соответствие;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Артикул") И СвойствоXDTOЗаполнено(ТоварXDTO.Артикул) Тогда
		АртикулНоменклатуры = ТоварXDTO.Артикул;
	КонецЕсли;
	ДанныеНоменклатуры.Вставить("Артикул", АртикулНоменклатуры);
	
	ДанныеНоменклатуры.Вставить("Единица", ПолучитьДанныеЕдиницыИзмеренияИзТоварXDTO(ТоварXDTO));
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
		И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
		И ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
	
		ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
		МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
		
		Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
			
			Если ЗначениеРеквизитаXDTO.Наименование = "ВидНоменклатуры" 
				И СвойствоXDTOЗаполнено(ЗначениеРеквизитаXDTO.Значение) Тогда
				
				ВидНоменклатуры = ЗначениеРеквизитаXDTO.Значение;
			Иначе
				Реквизит = ЗначениеРеквизитаXDTO.Наименование;
				Значение = ЗначениеРеквизитаXDTO.Значение;
				
				Если ТипЗнч(Значение) = Тип("Строка") Тогда
					СвойстваТовара.Вставить(Реквизит, Значение);
				ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO")
					И Значение.Количество() > 0 Тогда
					СвойстваТовара.Вставить(Реквизит, Значение[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Услуга = НРег(ВидНоменклатуры) = "услуга";
	ДанныеНоменклатуры.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	ДанныеНоменклатуры.Вставить("СвойстваТовара",  СвойстваТовара);
	ДанныеНоменклатуры.Вставить("Услуга",          Услуга);
	
КонецПроцедуры

Функция ПолучитьДанныеЕдиницыИзмеренияИзТоварXDTO(ТоварXDTO)
	
	ЕдиницаПоКлассификатору = Новый Структура("Код, Наименование");
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "БазоваяЕдиница") Тогда
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "Код")
			И СвойствоXDTOЗаполнено(ТоварXDTO.БазоваяЕдиница.Код) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Код", ТоварXDTO.БазоваяЕдиница.Код);
			
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "НаименованиеПолное")
			И СвойствоXDTOЗаполнено(ТоварXDTO.БазоваяЕдиница.НаименованиеПолное) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Наименование", ТоварXDTO.БазоваяЕдиница.НаименованиеПолное);
			
		КонецЕсли;
	ИначеЕсли ОбъектXDTOСодержитСвойство(ТоварXDTO, "Единица") Тогда
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.Единица, "Код")
			И СвойствоXDTOЗаполнено(ТоварXDTO.Единица.Код) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Код", ТоварXDTO.Единица.Код);
			
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.Единица, "НаименованиеПолное")
			И СвойствоXDTOЗаполнено(ТоварXDTO.Единица.НаименованиеПолное) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Наименование", ТоварXDTO.Единица.НаименованиеПолное);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕдиницаПоКлассификатору;
	
КонецФункции

Процедура ЗаполнитьСтавкуНДСПоДаннымXDTO(СтавкаНДС, ТоварXDTO)
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов")
		И ТоварXDTO.СтавкиНалогов <> Неопределено
		И ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
		
		СтавкиНалогов = ТоварXDTO.СтавкиНалогов.СтавкаНалога;
		МассивСтавокXDTO = ПолучитьМассивОбъектовСпискаXDTO(СтавкиНалогов);
		
		Для каждого СтавкаНалога Из МассивСтавокXDTO Цикл
			
			Если НРег(СтавкаНалога.Наименование) = "ндс" Тогда
				
				СтавкаНДС = ПолучитьСтавкуНДСПеречислением(СтавкаНалога.Ставка);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги")
		И ТоварXDTO.Налоги <> Неопределено
		И ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
		
		НалогиXDTO = ТоварXDTO.Налоги.Налог;
		МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
		
		Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
					
					СтавкаНДС = ПолучитьСтавкуНДСПеречислением(НалогXDTO.Ставка);
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКонтрагента

Функция КонтрагентПоДаннымИнтернетМагазина(ДокументXDTO)
	
	КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ТипЗнч(ДокументXDTO.Контрагенты.Контрагент) = Тип("ОбъектXDTO") Тогда
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент;
	Иначе
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент[0];
	КонецЕсли;
	
	ИдКонтрагента = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИД")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ИД) Тогда
		ИдКонтрагента = СОКРЛП(КонтрагентXDTO.ИД);
	КонецЕсли;
	
	КонтрагентСсылка = КонтрагентПоИдентификаторуМагазина(ИдКонтрагента);
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ИНН = "";
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН")
			И СвойствоXDTOЗаполнено(КонтрагентXDTO.ИНН) Тогда
			ИНН = КонтрагентXDTO.ИНН;
		КонецЕсли;
		
		КПП = "";
		Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП")
			И СвойствоXDTOЗаполнено(КонтрагентXDTO.КПП) Тогда
			КПП = КонтрагентXDTO.КПП;
		КонецЕсли;
		
		КонтрагентСсылка = ПоискКонтрагентаПоРеквизитам(ИНН, КПП);
		Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
			РегистрыСведений.КонтрагентыИнтернетМагазина.УстановитьСоответствие(ИдКонтрагента, КонтрагентСсылка);
		КонецЕсли;
	КонецЕслИ;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Функция ЗаполнитьДанныеКонтрагента(ДокументXDTO)
	
	ДанныеКонтрагента = Новый Структура;
	
	Если ТипЗнч(ДокументXDTO.Контрагенты.Контрагент) = Тип("ОбъектXDTO") Тогда
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент;
	Иначе
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент[0];
	КонецЕсли;
	
	ИдКонтрагента = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИД")
		И ТипЗнч(КонтрагентXDTO.ИД) = Тип("Строка") Тогда
		ИдКонтрагента = СОКРЛП(КонтрагентXDTO.ИД);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Идентификатор", ИдКонтрагента);
	
	ИНН = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ИНН) Тогда
		ИНН = КонтрагентXDTO.ИНН;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ИНН", ИНН);
	
	КПП = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.КПП) Тогда
		КПП = КонтрагентXDTO.КПП;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("КПП", КПП);
	
	ЮрЛицо = СтрДлина(ИНН) <> 12 И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование");
	
	ДанныеКонтрагента.Вставить("ЮрЛицо", ЮрЛицо);
	
	ОфициальноеНаименование = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОфициальноеНаименование) Тогда
		ОфициальноеНаименование = КонтрагентXDTO.ОфициальноеНаименование;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ОфициальноеНаименование", ОфициальноеНаименование);
	
	НаименованиеПолное = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ПолноеНаименование) Тогда
		НаименованиеПолное = СокрЛП(КонтрагентXDTO.ПолноеНаименование);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("НаименованиеПолное", НаименованиеПолное);
	
	Наименование = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
		Наименование = КонтрагентXDTO.Наименование;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", Наименование);
	
	ФИО = ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO);
	ДанныеКонтрагента.Вставить("ФИО", ФИО);
	
	ОКПО = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОКПО) Тогда
		ОКПО = КонтрагентXDTO.ОКПО;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ОКПО", ОКПО);
	
	// Банковские счета.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета")
		И КонтрагентXDTO.РасчетныеСчета <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
		
		РасчетныеСчетаXDTO = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
		МассивРасчетныхСчетовXDTO = ПолучитьМассивОбъектовСпискаXDTO(РасчетныеСчетаXDTO);
		
		РасчетныеСчета = Новый Массив;
		Для каждого РасчетныйСчетXDTO Из МассивРасчетныхСчетовXDTO Цикл
			
			НомерСчета = СтрЗаменить(РасчетныйСчетXDTO.НомерСчета, " ", "");
			Если ПустаяСтрока(НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетныйСчет = Новый Структура;
			
			РасчетныйСчет.Вставить("НомерСчета", НомерСчета);
			
			БанкXDTO = РасчетныйСчетXDTO.Банк;
			ДанныеБанкаXDTO = ПолучитьДанныеБанкаXDTO(БанкXDTO);
			
			РасчетныйСчет.Вставить("ДанныеБанка", ДанныеБанкаXDTO);
			
			Комментарий = "";
			Если ОбъектXDTOСодержитСвойство(РасчетныйСчетXDTO, "Комментарий")
				И СвойствоXDTOЗаполнено(РасчетныйСчетXDTO.Комментарий) Тогда
				
				Комментарий = РасчетныйСчетXDTO.Комментарий;
				
			КонецЕсли;
			
			РасчетныйСчет.Вставить("Комментарий", Комментарий);
			
			РасчетныеСчета.Добавить(РасчетныйСчет);
			
		КонецЦикла;
		
		ДанныеКонтрагента.Вставить("РасчетныеСчета", РасчетныеСчета);
		
	КонецЕсли;
	
	// Контактная информация.
	
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	КонтактнаяИнформация.Колонки.Добавить("Вид");
	КонтактнаяИнформация.Колонки.Добавить("Представление");
	
	ЗаполнитьКонтактнуюИнформациюКонтрагента(КонтактнаяИнформация, ДанныеКонтрагента, КонтрагентXDTO);
	ДанныеКонтрагента.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	
	Возврат ДанныеКонтрагента;

КонецФункции

Функция ПоискКонтрагентаПоРеквизитам(ИНН, КПП)
	
	ВозможенПоискЮрЛица = ЗначениеЗаполнено(ИНН)
		И СтрДлина(ИНН) = 10
		И ЗначениеЗаполнено(КПП);
		
	ВозможенПоискФизЛица = ЗначениеЗаполнено(ИНН)
		И СтрДлина(ИНН) = 12;
		
	
	СтрПоиска = "";
	Если ВозможенПоискЮрЛица Тогда
		
		СтрПоиска = " ГДЕ Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП";
		
	ИначеЕсли ВозможенПоискФизЛица Тогда
		
		СтрПоиска = " ГДЕ Контрагенты.ИНН = &ИНН";
		
	Иначе
		
		Возврат Неопределено;
			
	КонецЕсли;
	
	ШаблонТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	Запрос = Новый Запрос();
	Запрос.Текст = ШаблонТекстЗапроса + СтрПоиска;
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Контрагенты = РезультатЗапроса.Выгрузить();
		КонтрагентСсылка = Контрагенты[0].Контрагент;
		
	КонецЕсли;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформациюКонтрагента(КонтактнаяИнформация, ДанныеКонтрагента, КонтрагентXDTO)
	
	// Контактная информация.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Адрес.Представление) Тогда
		
		ФактическийАдресПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.Адрес);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ФактическийАдрес",
			ФактическийАдресПредставление,
			КонтактнаяИнформация);
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ЮридическийАдрес")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.ЮридическийАдрес, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ЮридическийАдрес.Представление) Тогда
		
		ЮридическийАдресПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.ЮридическийАдрес);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ЮридическийАдрес",
			ЮридическийАдресПредставление,
			КонтактнаяИнформация);
		
	КонецЕсли;
	
	Если НЕ ДанныеКонтрагента.ЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "АдресРегистрации")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.АдресРегистрации, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.АдресРегистрации.Представление) Тогда // физ. лицо содержит адрес регистрации
		
		АдресРегистрацииПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.АдресРегистрации);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ЮридическийАдрес",
			АдресРегистрацииПредставление,
			КонтактнаяИнформация);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Телефон, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Телефон.Представление)Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ТелефонМобильный",
			КонтрагентXDTO.Телефон.Представление,
			КонтактнаяИнформация);
	КонецЕсли;
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "email")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.email, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.email.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ЭлектроннаяПочта",
			КонтрагентXDTO.email.Представление,
			КонтактнаяИнформация);
	КонецЕсли;
	
	// Контакты.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты")
		И КонтрагентXDTO.Контакты <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Контакты, "Контакт") Тогда
		
		КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
		МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
		
		Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл
			
			Если НЕ СвойствоXDTOЗаполнено(КонтактXDTO.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
			
			ДобавитьСтрокуИнформацииПоКонтрагенту(ТипКИXDTO, КонтактXDTO.Значение, КонтактнаяИнформация);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Контактные лица.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители")
		И КонтрагентXDTO.Представители <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Представители, "Представитель") Тогда
		
		ПредставителиXDTO = КонтрагентXDTO.Представители.Представитель;
		МассивПредставителейXDTO = ПолучитьМассивОбъектовСпискаXDTO(ПредставителиXDTO);
		
		КонтактныеЛица = Новый Массив;
		Для каждого ПредставительXDTO Из МассивПредставителейXDTO Цикл
			
			
			Если ОбъектXDTOСодержитСвойство(ПредставительXDTO, "Контрагент")
				И ОбъектXDTOСодержитСвойство(ПредставительXDTO.Контрагент, "Наименование") Тогда
				
				КонтактныеЛица.Добавить(ПредставительXDTO.Контрагент.Наименование);
				
			КонецЕсли;
		КонецЦикла;
		Если КонтактныеЛица.Количество() > 0 Тогда
			ДанныеКонтрагента.Вставить("КонтактныеЛица", КонтактныеЛица);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет и заполняет строку табличной части "ИнформацияПоКонтрагенту" заказа покупателя.
//
// Параметры
//	Вид - Строка, вид информации
//	Представление - Строка, представление информации
//	ИнформацияПоКонтрагенту - ТабличнаяЧасть документ ЗаказПокупателю.
//
Процедура ДобавитьСтрокуИнформацииПоКонтрагенту(Вид, Представление, КонтактнаяИнформация)
	
	Если ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока = КонтактнаяИнформация.Добавить();
		НоваяСтрока.Вид = Вид;
		НоваяСтрока.Представление = СокрЛП(Представление);
	КонецЕсли;
	
КонецПроцедуры

Функция УточненноеПредставлениеАдреса(АдресXDTO)
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле")
		И ТипЗнч(АдресXDTO.АдресноеПоле) = Тип("СписокXDTO") Тогда
		
		АдресноеПоле = АдресXDTO.АдресноеПоле;
		Для Каждого ТипАдреса Из АдресноеПоле Цикл
			
			Если НРег(ТипАдреса.Тип) = НРег("Почтовый индекс") Тогда
				ПочтовыйИндекс = ТипАдреса.Значение;
			КонецЕсли;
			
			Если НРег(ТипАдреса.Тип) = НРег("Страна") Тогда
				Страна = ТипАдреса.Значение;
			КонецЕсли;
			
			Если НРег(ТипАдреса.Тип) = НРег("Город") Тогда
				Город = ТипАдреса.Значение;
			КонецЕсли;
			
			ПредставлениеАдреса = ?(ЗначениеЗаполнено(ПочтовыйИндекс), ПочтовыйИндекс+","+ " ","")
				+ ?(ЗначениеЗаполнено(Страна), Страна+"," + " ","")
				+ ?(ЗначениеЗаполнено(Город), Город+","+ " ","");
				
			ПредставлениеАдреса = ПредставлениеАдреса + СокрЛП(АдресXDTO.Представление);
			
		КонецЦикла;
		
	Иначе
		ПредставлениеАдреса = СокрЛП(АдресXDTO.Представление);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

Функция ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO)
	
	ТекущаяСтрока = "";
	Фамилия = "";
	Имя = "";
	Отчество = "";
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Фамилия") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Фамилия) Тогда
		ТекущаяСтрока = КонтрагентXDTO.Фамилия;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Имя") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Имя) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Имя);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Отчество") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Отчество) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Отчество);
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

Процедура ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(Контрагент, ДанныеКонтрагента, Организация)
	
	//Банки и расчетные счета.
	
	Если ДанныеКонтрагента.Свойство("РасчетныеСчета")
		И ДанныеКонтрагента.РасчетныеСчета.Количество() > 0 Тогда
		 Для каждого РасчетныйСчет Из ДанныеКонтрагента.РасчетныеСчета Цикл
			
			БИК = РасчетныйСчет.ДанныеБанка.БИК;
			Если НЕ ЗначениеЗаполнено(РасчетныйСчет.ДанныеБанка.БИК)
				ИЛИ НЕ ЗначениеЗаполнено(РасчетныйСчет.НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РасчетныйСчет, РасчетныйСчет.ДанныеБанка);
			РасчетныйСчет.Вставить("Владелец", Контрагент);
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.Заполнить(РасчетныйСчет);
			БанковскийСчет.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора",  Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ПараметрыДоговора.Вставить("Организация",  Организация);
		ПараметрыДоговора.Вставить("Владелец",     Контрагент);
		ПараметрыДоговора.Вставить("Наименование", НСтр("ru='Без договора'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
		РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЮрЛицо
		И ДанныеКонтрагента.Свойство("КонтактныеЛица") Тогда
		
		Для Каждого КонтактноеЛицо из ДанныеКонтрагента.КонтактныеЛица Цикл
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ОбъектВладелец", Контрагент);
			ДанныеЗаполнения.Вставить("Наименование", КонтактноеЛицо);
			
			КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
			КонтактноеЛицо.Заполнить(ДанныеЗаполнения);
			КонтактноеЛицо.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКонтактнуюИнформацию(Объект, ВидКИ, ТипКИ, Представление)
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидКИ, ТипКИ);
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Обмен с Интернет магазином'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ОбработатьВалютуXML(КодВалютыСтрока)
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(КодВалютыСтрока);
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
		
	Возврат Валюта;
	
КонецФункции

Функция ПолучитьДанныеБанкаXDTO(БанкXDTO)
	
	ДанныеБанка = Новый Структура;
	
	БИК = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "БИК") И СвойствоXDTOЗаполнено(БанкXDTO.БИК) Тогда
		БИК = СтрЗаменить(БанкXDTO.БИК, " ", "");
	КонецЕсли;
	
	SWIFT = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "SWIFT") И СвойствоXDTOЗаполнено(БанкXDTO.SWIFT) Тогда
		SWIFT = СтрЗаменить(БанкXDTO.SWIFT, " ", "");
	КонецЕсли;
	
	КоррСчет = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "СчетКорреспондентский") И СвойствоXDTOЗаполнено(БанкXDTO.СчетКорреспондентский) Тогда
		КоррСчет = СтрЗаменить(БанкXDTO.СчетКорреспондентский, " ", "");
	КонецЕсли;
	
	Адрес = "";
	Город = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Адрес") И СвойствоXDTOЗаполнено(БанкXDTO.Адрес.Представление) Тогда
		Адрес = СокрЛП(БанкXDTO.Адрес.Представление);
		Город = ПолучитьГородБанкаИзАдресаXDTO(БанкXDTO.Адрес);
	КонецЕсли;
	
	ДанныеБанка.Вставить("БИК", БИК);
	ДанныеБанка.Вставить("СВИФТБИК", SWIFT);
	ДанныеБанка.Вставить("КоррСчет", КоррСчет);
	ДанныеБанка.Вставить("Адрес", Адрес);
	ДанныеБанка.Вставить("Город", Город);
	
	Возврат ДанныеБанка;
	
КонецФункции

Функция ПолучитьГородБанкаИзАдресаXDTO(АдресXDTO)
	
	Город = "";
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле")
		И ТипЗнч(АдресXDTO.АдресноеПоле) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из АдресXDTO.АдресноеПоле Цикл
			
			Если ОбъектXDTO.Тип = "Город" Тогда
				
				Город = ОбъектXDTO.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Город;
	
КонецФункции

Функция СвойствоXDTOЗаполнено(СвойствоXDTO)
	
	СвойствоЗаполнено = Истина;
	
	Если ТипЗнч(СвойствоXDTO) = Тип("ОбъектXDTO")
		ИЛИ ТипЗнч(СвойствоXDTO) = Тип("СписокXDTO")
		ИЛИ НЕ ЗначениеЗаполнено(СвойствоXDTO) Тогда
		
		СвойствоЗаполнено = Ложь;
		
	КонецЕсли;
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство)
	
	ЕстьСвойство = Ложь;
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат ЕстьСвойство;
	КонецЕсли;
	
	Попытка
		ЕстьСвойство = ОбъектXDTO.Свойства().Получить(Свойство) <> Неопределено
			И ОбъектXDTO[Свойство] <> Неопределено;
	Исключение
	КонецПопытки;
	
	Возврат ЕстьСвойство;
	
КонецФункции

// Возвращает массив, содержащий объекты XDTO 
//	или объект XDTO, если тип переданного параметра "ОбъектXDTO".
//
// Параметры
//	СписокXDTO - СписокXDTO, ОбъектXDTO - список XDTO, объекты которого нужно получить
//
// Возвращаемое значение
//	Массив - массив свойств объекта XDTO.
//
Функция ПолучитьМассивОбъектовСпискаXDTO(СписокXDTO)
	
	МассивОбъектовXDTO = Новый Массив;
	
	Если ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из СписокXDTO Цикл 
			МассивОбъектовXDTO.Добавить(ОбъектXDTO);
		КонецЦикла;
		
	Иначе
		МассивОбъектовXDTO.Добавить(СписокXDTO);
	КонецЕсли;
	
	Возврат МассивОбъектовXDTO;
	
КонецФункции

//Преобразует строку даты вида 2016-03-28 и строку времени 23:59:59 к значению типа Дата("Дата и время")
Функция ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока = "")
	
	ДатаВремя = Дата(1,1,1);
	
	Попытка
		
		Если ТипЗнч(ДатаСтрока) = Тип("Дата")
			И ТипЗнч(ВремяСтрока) = Тип("Дата") Тогда
			
			ДатаВремя = Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
		КонецЕсли;
		
		Если ДатаВремя = Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(ВремяСтрока) Тогда
				Время = СтрЗаменить(ВремяСтрока, ":", "");
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + Время);
			Иначе
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + "000000");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(ЗначениеСтрока)
	
	ЗначениеЧисло = 0;
	
	Попытка
		ЗначениеЧисло = Число(ЗначениеСтрока);
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеЧисло;
	
КонецФункции

// Формирует расширенное описание ошибки.
//
// Параметры:
//	ТекстНачалаСообщения - Строка
//	ТекстОкончанияСообщения - Строка
//
// Возвращаемое значение:
//	Строка - Сформированное описание ошибки.
//
Функция ОписаниеИсключительнойОшибки(ТекстНачалаСообщения = "", ТекстОкончанияСообщения = "")
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	ТекстСообщения = НСтр("ru = 'Произошла ошибка:'")
		+ " " + ТекстНачалаСообщения
		+ ?(ПустаяСтрока(ТекстОкончанияСообщения), "", Символы.ПС + ТекстОкончанияСообщения)
		+ ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", Символы.ПС + ПодробноеПредставлениеОшибки);
		
	Возврат ТекстСообщения;
	
КонецФункции

// К существующему описанию добавляет текст
//
Процедура ДобавитьОписаниеОшибки(Описание, Дополнение)

	Если ПустаяСтрока(Описание) Тогда
		Описание = Дополнение;
	Иначе
		Описание = Описание + Символы.ПС + Дополнение;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьДанныеДляСопоставления(Документ, ПараметрыЗаказа)
	
	НеСопоставленныеДанные = Новый Структура;
	ЕстьНеСопоставленныеОбъекты = Ложь;
	Если ПараметрыЗаказа.Свойство("ДанныеКонтрагента") Тогда
		НеСопоставленныеДанные.Вставить("ДанныеКонтрагента",
			ПараметрыЗаказа.ДанныеКонтрагента);
		ЕстьНеСопоставленныеОбъекты = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаказа.Свойство("ДанныеНоменклатуры")
		И ПараметрыЗаказа.ДанныеНоменклатуры.Количество() > 0 Тогда
		
		НеСопоставленныеДанные.Вставить("ДанныеНоменклатуры",
			ПараметрыЗаказа.ДанныеНоменклатуры);
		ЕстьНеСопоставленныеОбъекты = Истина;
	КонецЕсли;
	
	Если ЕстьНеСопоставленныеОбъекты Тогда
		НовыеОбъекты = РегистрыСведений.НесопоставленныеОбъектыИнтернетМагазина.СоздатьМенеджерЗаписи();
		НовыеОбъекты.Документ = Документ;
		НовыеОбъекты.ДанныеОбъекта = Новый ХранилищеЗначения(НеСопоставленныеДанные, Новый СжатиеДанных(9));
		НовыеОбъекты.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС)
	
	ПредставлениеСтавкиНДС = СтавкаНДС;
	
	Если ВРЕГ(ПредставлениеСтавкиНДС) = "БЕЗ НДС" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли СтрНайти("10.00#10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли СтрНайти("20.00#20#0.2#0,2#0.20#0,20#20%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли СтрНайти("18.00#18#0.18#0,18#0.18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли СтрНайти("10.00/110.00#10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли СтрНайти("18.00/118.00#18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	ИначеЕсли СтрНайти("20.00/120.00#20/120#20% / 120%#20%/120%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20_120;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли