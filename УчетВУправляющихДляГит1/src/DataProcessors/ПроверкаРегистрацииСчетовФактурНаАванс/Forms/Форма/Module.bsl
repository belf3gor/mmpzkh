
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Обработки.ПроверкаРегистрацииСчетовФактурНаАванс.ПроверитьРегистрациюСчетовФактурНаАванс(Истина) Тогда
		ФормаНеДоступна = Истина;
		Возврат;
	КонецЕсли;
	
	НастройкаНеПроверятьПриНачалеРаботы = ХранилищеОбщихНастроек.Загрузить("ПроверкаРегистрацииСчетовФактурНаАванс", "НеПроверятьПриНачалеРаботы");
	НеПроверятьПриНачалеРаботы = НастройкаНеПроверятьПриНачалеРаботы = Истина;
	
	ТаблицаДанных = ПолучитьДанныеДокументов();
	Если ТаблицаДанных.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ТаблицаДанных, ТаблицаДокументов);
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.СчетФактураВыданный) Тогда
		Элементы.ПометитьНаУдаление.Видимость    = Ложь;
		Элементы.Обновить.Видимость              = Ложь;
		Элементы.ДекорацияРасположение.Видимость = Ложь;
		Элементы.ДекорацияИсправление.Видимость  = Ложь;
	Иначе
		Элементы.ДекорацияНетПрав.Видимость      = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ФормаНеДоступна Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не найдено ошибочных счетов-фактур!'"));
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(,ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ЗаписатьИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьДанныеДокументов()
	
	ТаблицаДокументов.Очистить();
	
	МассивОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", '20181001000000');
	Запрос.УстановитьПараметр("КонПериода", '20181001235959');
	Запрос.УстановитьПараметр("МассивОрганизаций",МассивОрганизаций);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НДСЗаписиКнигиПродаж.Регистратор КАК Документ,
	|	НДСЗаписиКнигиПродаж.Покупатель КАК Контрагент,
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НДСЗаписиКнигиПокупок.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаявленВычет,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаАванса,
	|	"""" КАК Отступ
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСЗаписиКнигиПродаж.Регистратор = СчетФактураВыданный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|		ПО НДСЗаписиКнигиПродаж.СчетФактура = НДСЗаписиКнигиПокупок.СчетФактура
	|			И (НДСЗаписиКнигиПокупок.Период >= &НачПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО НДСЗаписиКнигиПродаж.Организация = ДанныеПервичныхДокументов.Организация
	|			И НДСЗаписиКнигиПродаж.СчетФактура = ДанныеПервичныхДокументов.Документ
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачПериода И &КонПериода
	|	И НДСЗаписиКнигиПродаж.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)
	|	И НДСЗаписиКнигиПродаж.Организация В(&МассивОрганизаций)
	|	И НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста
	|	И НДСЗаписиКнигиПродаж.КорректируемыйПериод < &НачПериода
	|	И НЕ СчетФактураВыданный.Выставлен
	|	И НЕ СчетФактураВыданный.РучнаяКорректировка";
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзменения()
	
	ТаблицаДанных = ДанныеФормыВЗначение(ТаблицаДокументов, Тип("ТаблицаЗначений"));
	
	Для Каждого СтрокаТаблицыДанных Из ТаблицаДанных Цикл
		
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = СтрокаТаблицыДанных.Документ.ПолучитьОбъект();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина, ,РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект, Истина);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Не удалось пометить на удаление документ %1:
				|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,  СтрокаТаблицыДанных.Документ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				СтрокаТаблицыДанных.Документ,
				ТекстСообщения);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ТаблицаДанных = ПолучитьДанныеДокументов();
	ЗначениеВДанныеФормы(ТаблицаДанных, ТаблицаДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("ПроверкаРегистрацииСчетовФактурНаАванс", "НеПроверятьПриНачалеРаботы", НеПроверятьПриНачалеРаботы);
	
КонецПроцедуры

#КонецОбласти

