
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияНастроекРасписанияАвтоматическогоОбмена();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияВыгрузок".
//
Процедура ВидНастройкиРасписанияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияВыгрузок".
//
Процедура РасписаниеРегламентногоЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписание());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания выгрузок.
//
Процедура РасписаниеРегламентногоЗаданияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(РегламентноеЗадание, Диалог.Расписание);
		РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание, ВыполнятьОбменПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик нажатия кнопки "Закончить настройку расписания".
//
Процедура КомандаЗакрыть(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ФОРМОЙ

#Область ПроцедурыУправленияФормой

&НаСервере
// Иницализация и заполнение страницы настройки расписаний обменов.
//
Процедура ИнициализацияНастроекРасписанияАвтоматическогоОбмена()
	
	ПолучитьСохраненныеНастройки();
	
	ОпределитьРасписанияРегламентныхЗаданийПоУмолчанию();
	
	РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание, ВыполнятьОбменПоРасписанию);
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(РегламентноеЗадание, РасписаниеРегламентногоЗаданияПоУмолчанию, ВидРасписания);
	
	УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(ЭтаФорма);
	
	УстановитьВидимостьЭлементовРасписания();
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьПараметрыРегламентногоЗаданияПроизводителиСчетчиков(РегламентноеЗадание,
																											 УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ПолучитьСтроковоеПредставлениеТекущейСистемыДляРегламентныхЗаданий(Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ));
	
КонецПроцедуры

&НаСервере
// Получает и заполняет сохраненные настройки регламентных заданий.
//
Процедура ПолучитьСохраненныеНастройки()
	
	СохраненныеНастройки = УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ПолучитьНастройкиИнтеграцииССервисамиСбораПоказанийСчетчиков(Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ);
	
	РегламентноеЗадание = СохраненныеНастройки.РегламентноеЗаданиеОбмена;
	
КонецПроцедуры

&НаСервере
// Установка видимости элементов страницы настройки расписаний обменов.
//
Процедура УстановитьВидимостьЭлементовРасписания()
	
	Попытка
		
		ВыполнятьОбменПоРасписанию = (НЕ ВидРасписания = 0);
		
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПодготовитьРегламентноеЗаданиеПроизводителиСчетчиков(РегламентноеЗадание, ВыполнятьОбменПоРасписанию, Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ);
		
		Если ВидРасписания = 0 Тогда
			Элементы.РасписаниеРегламентногоЗадания.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗадания.Видимость = истина;
			Если ВидРасписания = 1 Тогда
				РасписаниеРегламентногоЗадания = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(РегламентноеЗадание,
																																						 ВыполнятьОбменПоРасписанию,
																																						 РасписаниеРегламентногоЗаданияПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗадания.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗадания.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Элементы.ВидНастройкиРасписания.Доступность   = Ложь;
		Элементы.РасписаниеРегламентногоЗадания.Доступность = Ложь;
		
		Элементы.РасписаниеРегламентногоЗадания.Видимость = Истина;
		
		РасписаниеРегламентногоЗадания = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Управляет отображением элементов формы.
//
Процедура УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидНастройкиРасписания = Форма.ВидРасписания;
	Элементы.РасписаниеРегламентногоЗадания.Доступность = ?(ВидНастройкиРасписания = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗадания.Видимость = НЕ ВидНастройкиРасписания = 0;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ

#Область ПроцедурыИФункцииРаботыСРегламентнымЗаданием

&НаСервереБезКонтекста
// Функция формирует текст расписания регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию)
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию);
	
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

&НаСервере
// Процедура определяет расписания регламентных заданий по умолчанию.
//
Процедура ОпределитьРасписанияРегламентныхЗаданийПоУмолчанию()
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьРасписаниеРегламентногоЗаданияПоУмолчанию(РасписаниеРегламентногоЗаданияПоУмолчанию);
	
КонецПроцедуры

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписание()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеПроизводителиСчетчиков(РегламентноеЗадание, Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ);
	
КонецФункции // ПолучитьРасписание()

#КонецОбласти