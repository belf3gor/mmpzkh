////////////////////////////////////////////////////////////////////////////////
// Модуль формы Обработка.СопоставлениеНоменклатурыБЭД.Форма
//  
////////////////////////////////////////////////////////////////////////////////
// Терминология:
// НоменклатураКонтрагента - Структура - См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
// НаборНоменклатурыКонтрагентов - массив из НоменклатураКонтрагента.
// НоменклатураИБ - Структура - См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
// ЗаписьСопоставления (Запись) - данные строки табличной части "Сопоставление" со служебной информацией.
// ЭлементСопоставления - структура:
//  * НоменклатураКонтрагента - Структура - См. НоменклатураКонтрагента.
//  * НоменклатураИБ - Структура - См. НоменклатураИБ.
// НаборЭлементовСопоставления - массив из ЭлементСопоставления.
// ДействиеСЭлементомСопоставления (ОписаниеДействия) - Структура - описание действия выполняемого над элементом сопоставления:
//  * Действие - название действия.
//  * ЭлементСопоставления - См. ЭлементСопоставления.
// Вариант - данные строки табличной части "Варианты" (или структура с аналогичными свойствами).
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем СохраненныеЭлементы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Инициализация.
	СопоставленоОтбор = "Все";
	РазрешитьСохранение = Истина;
	СохраненныеЭлементы = Новый Массив;
	ЕстьПравоДобавленияНоменклатуры = ЕстьПравоДобавленияНоменклатуры();
	
	// Обработка параметров формы.
	Если Параметры.Свойство("НоменклатураКонтрагентов") Тогда
		ЗаполнитьНоменклатуруКонтрагентов(Параметры.НоменклатураКонтрагентов);
		Модифицированность = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("РазрешитьСохранение") Тогда
		РазрешитьСохранение = Параметры.РазрешитьСохранение;
	КонецЕсли;
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	// Настройка формы.
	ОпределитьИспользованиеСервисаНоменклатуры();
	
	УстановитьСвойстваЭлементовФормы();
	УстановитьСвойстваПереопределяемыхЭлементовФормы();
	УстановитьСвойстваЭлементаОтбораПоВладельцу();
	УстановитьСвойстваЭлементаОтбораПоСопоставлению();
	УстановитьСвойстваЭлементовНоменклатурыСервиса();
	
	// Поиск вариантов сопоставления в фоновом режиме.
	ЗапуститьПоискВариантов();
	
	ТолькоПросмотр = Не ОбменСКонтрагентамиСлужебный.ЕстьПравоСопоставленияНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьЗавершениеПоискаВариантов(ИспользоватьСервис);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если Не ЗавершениеРаботы Тогда
			ПоказатьВопросОСохраненииПередЗакрытием();
		КонецЕсли;
		
	Иначе
		
		ОтборНеСопоставленныхЗаписей = Новый Структура("Сопоставлено", Ложь);
		НеСопоставленныеЗаписи = Объект.Сопоставление.НайтиСтроки(ОтборНеСопоставленныхЗаписей);
	
		Если ЗначениеЗаполнено(НеСопоставленныеЗаписи) И Не ЗавершениеРаботы Тогда
			Отказ = Истина;
			ПоказатьВопросОСопоставленииПередЗакрытием();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецОтборПриИзменении(Элемент)
	
	ОбработатьОтборЗаписейСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставленоОтборПриИзменении(Элемент)
	
	ОбработатьОтборЗаписейСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРаботаСНоменклатуройПодсказкаНажатие(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Сервис 1С:Номенклатура'"));
		ПараметрыОткрытия.Вставить("ОписаниеРаздела",
			НСтр("ru = 'Для возможности загрузки номенклатуры необходимо включить использование сервиса 1С:Номенклатура.'"));
		ПараметрыОткрытия.Вставить("Раздел", "НастройкиРаботаСНоменклатурой");
		
		Оповещение = Новый ОписаниеОповещения("РаботаСНоменклатуройПодсказкаЗавершение", ЭтотОбъект);
		
		МодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		МодульРаботаСНоменклатуройКлиент.ОткрытьФормуПанелиАдминистрирования(
			ПараметрыОткрытия, ЭтотОбъект, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСопоставление

&НаКлиенте
Процедура СопоставлениеПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьСписокДействийСЭлементомСопоставления();
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеПриИзменении(Элемент)
	
	СопоставлениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Обработаем выбор действия с элементом сопоставления в подчиненной форме.
	Если ЭтоДействиеСЭлементомСопоставления(ВыбранноеЗначение) Тогда
		
		ОбработатьДействиеСЭлементомСопоставления(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	// Обработаем создание номенклатуры по данным контрагента в подчиненной форме.
	Если Источник.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		
		ДополнительныеПараметры = Источник.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры;
		
		Если ЭтоЭлементСопоставления(ДополнительныеПараметры) Тогда
			
			ЗакончитьСозданиеНоменклатурыИнформационнойБазыВручную(ДополнительныеПараметры, НовыйОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Обработаем выбор действия с элементом сопоставления из выпадающего списка.
	Если ЭтоДействиеСЭлементомСопоставления(ВыбранноеЗначение) Тогда
	
		СтандартнаяОбработка = Ложь;
		ОбработатьДействиеСЭлементомСопоставления(ВыбранноеЗначение);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	СохраненныеЭлементы = СохранитьСопоставление();
	
	Закрыть(СохраненныеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохраненныеЭлементы = СохранитьСопоставление();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ВыделенныеЭлементыСопоставления = Новый Массив;
	
	Для Каждого Идентификатор Из Элементы.Сопоставление.ВыделенныеСтроки Цикл
		
		Запись = Объект.Сопоставление.НайтиПоИдентификатору(Идентификатор);
		ЭлементСопоставления = ЭлементСопоставленияПоЗаписи(Запись);
		ВыделенныеЭлементыСопоставления.Добавить(ЭлементСопоставления);
		
	КонецЦикла;
	
	ПоказатьВопросОСозданииНоменклатуры(ВыделенныеЭлементыСопоставления);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МетаданныеСопоставления = ОбменСКонтрагентамиСлужебный.МетаданныеСопоставленияНоменклатуры();
	
	// Отключим видимость поля характеристики контрагента, если она не заполнена.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.НаименованиеХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеНаименованиеХарактеристики.Имя);
	
	// Отключим видимость поля характеристики ИБ, если она не используется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
	// Включим отметку незаполненного поля характеристики ИБ, если она используется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
	// Настроим подсказку ввода для незаполненной номенклатуры ИБ.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ШрифтПодсказкиВвода = Новый Шрифт(Элементы.СопоставлениеНоменклатура.Шрифт,,,, Истина,,, 85);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтПодсказкиВвода);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", МетаданныеСопоставления.НоменклатураПредставлениеОбъекта);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеНоменклатура.Имя);
	
	// Настроим подсказку ввода для незаполненной характеристики ИБ.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ШрифтПодсказкиВвода = Новый Шрифт(Элементы.СопоставлениеХарактеристика.Шрифт,,,, Истина,,, 85);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтПодсказкиВвода);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", МетаданныеСопоставления.ХарактеристикаПредставлениеОбъекта);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
	// Настроим подсказку ввода для незаполненной упаковки ИБ.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ШрифтПодсказкиВвода = Новый Шрифт(Элементы.СопоставлениеУпаковка.Шрифт,,,, Истина,,, 85);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтПодсказкиВвода);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", МетаданныеСопоставления.УпаковкаПредставлениеОбъекта);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеУпаковка.Имя);
	
	// Включим отметку незаполненного поля упаковки ИБ, если она используется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Упаковка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеУпаковка.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.КомандаСохранить.Видимость = РазрешитьСохранение;
	
	ЗаголовокСохранитьИЗакрыть = НСтр("ru = 'Сохранить и закрыть'");
	Если Не РазрешитьСохранение Тогда
		ЗаголовокСохранитьИЗакрыть = НСтр("ru = 'Готово'");
	КонецЕсли;
	Элементы.КомандаСохранитьИЗакрыть.Заголовок = ЗаголовокСохранитьИЗакрыть;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПереопределяемыхЭлементовФормы()
	
	МетаданныеСопоставления = ОбменСКонтрагентамиСлужебный.МетаданныеСопоставленияНоменклатуры();
	
	Элементы.ВладелецОтбор.Заголовок = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.СопоставлениеВладелец.Заголовок = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.СопоставлениеНоменклатура.Заголовок = МетаданныеСопоставления.НоменклатураПредставлениеОбъекта;
	Элементы.СопоставлениеХарактеристика.Заголовок = МетаданныеСопоставления.ХарактеристикаПредставлениеОбъекта;
	Элементы.СопоставлениеУпаковка.Заголовок = МетаданныеСопоставления.УпаковкаПредставлениеОбъекта;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики, 
			"Элементы.Сопоставление.ТекущиеДанные.Номенклатура");
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		Элементы.СопоставлениеХарактеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиУпаковки) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(МетаданныеСопоставления.ИмяПараметраСвязиУпаковки, 
			"Элементы.Сопоставление.ТекущиеДанные.Номенклатура");
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		Элементы.СопоставлениеУпаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
	
	Элементы.КомандаСоздатьНоменклатуру.Видимость = ЕстьПравоДобавленияНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаОтбораПоВладельцу()
	
	ВсеВладельцы = Новый Массив;
	Для Каждого Запись Из Объект.Сопоставление Цикл
		Если ВсеВладельцы.Найти(Запись.Владелец) = Неопределено Тогда
			ВсеВладельцы.Добавить(Запись.Владелец);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ВладелецОтбор.СписокВыбора.ЗагрузитьЗначения(ВсеВладельцы);
	Элементы.ВладелецОтбор.СписокВыбора.СортироватьПоЗначению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаОтбораПоСопоставлению()
	
	ВсегоЗаписей = Объект.Сопоставление.Количество();
	ВсеСопоставленныеЗаписи = Объект.Сопоставление.НайтиСтроки(Новый Структура("Сопоставлено", Истина));
	СопоставленоЗаписей = ВсеСопоставленныеЗаписи.Количество();
	НеСопоставленоЗаписей = ВсегоЗаписей - СопоставленоЗаписей;
	
	Элементы.СопоставленоОтбор.СписокВыбора[0].Представление = СтрШаблон(НСтр("ru = 'Все (%1)'"), ВсегоЗаписей);
	Элементы.СопоставленоОтбор.СписокВыбора[1].Представление = СтрШаблон(НСтр("ru = 'Сопоставленные (%1)'"), СопоставленоЗаписей);
	Элементы.СопоставленоОтбор.СписокВыбора[2].Представление = СтрШаблон(НСтр("ru = 'Несопоставленные (%1)'"), НеСопоставленоЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовНоменклатурыСервиса()
	
	Элементы.СопоставлениеГруппаНоменклатураСервиса.Видимость = ИспользоватьСервис;
	Элементы.ГруппаРаботаСНоменклатуройПодсказка.Видимость    = ОтображатьПодсказкуСервиса;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользованиеСервисаНоменклатуры()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		
		ИспользоватьСервисРаботаСНоменклатурой = МодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы();
		
		ИспользоватьСервис = ИспользоватьСервисРаботаСНоменклатурой
			И МодульРаботаСНоменклатурой.ПравоИзмененияДанных();
		
		ОтображатьПодсказкуСервиса = Не ИспользоватьСервисРаботаСНоменклатурой
			И МодульРаботаСНоменклатурой.ПравоИзмененияНастроек()
			И ПереданыИдентификаторыНоменклатурыСервиса();
		
	Иначе
		ИспользоватьСервис         = Ложь;
		ОтображатьПодсказкуСервиса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтборЗаписейСопоставления()
	
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ВладелецОтбор) Тогда
		СтруктураОтбора.Вставить("Владелец", ВладелецОтбор);
	КонецЕсли;
	Если СопоставленоОтбор = "Сопоставленные" Тогда
		СтруктураОтбора.Вставить("Сопоставлено", Истина);
	ИначеЕсли СопоставленоОтбор = "Несопоставленные" Тогда
		СтруктураОтбора.Вставить("Сопоставлено", Ложь);
	КонецЕсли;
	
	Элементы.Сопоставление.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	ЭлементСопоставления = ТекущийЭлементСопоставления();
	Если ЭлементСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраВыбора = Новый Структура;
	ЗначениеПараметраВыбора.Вставить("НоменклатураКонтрагента", ЭлементСопоставления.НоменклатураКонтрагента);
	
	ПараметрыВыбораНоменклатуры = Новый ПараметрВыбора("Дополнительно.ОбменСКонтрагентами", ЗначениеПараметраВыбора);
	
	ВсеПараметрыВыбора = Новый Массив;
	ВсеПараметрыВыбора.Добавить(ПараметрыВыбораНоменклатуры);
	
	Элементы.СопоставлениеНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ВсеПараметрыВыбора);
	Элементы.СопоставлениеХарактеристика.ПараметрыВыбора = Новый ФиксированныйМассив(ВсеПараметрыВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВариантами

&НаСервере
Процедура ЗапуститьПоискВариантов()
	
	Если ИспользоватьСервис Тогда
		НачатьПоискВариантовПоИдентификаторам();
	Иначе
		НачатьПоискВариантов();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НачатьПоискВариантов()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск вариантов сопоставления номенклатуры.'");
	
	НаборНоменклатурыКонтрагентов = ПолучитьЭлементыСопоставления(, "НоменклатураКонтрагента");
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("НаборНоменклатурыКонтрагентов", НаборНоменклатурыКонтрагентов);
	
	ИмяМетода = "Обработка.СопоставлениеНоменклатурыБЭД.МодульОбъекта.НайтиВариантыСопоставленияНоменклатуры";
	
	ОперацияПоискаВариантов = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, ПараметрыВыполнения)
	
КонецПроцедуры

&НаСервере
Процедура НачатьПоискВариантовПоИдентификаторам()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск вариантов сопоставления номенклатуры по идентификаторам.'");
	
	ИдентификаторыОбъектов = Новый Массив;
	
	Для каждого ЭлементКоллекции Из Объект.Сопоставление Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторНоменклатурыСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыОбъектов.Добавить(
			Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики",
				ЭлементКоллекции.ИдентификаторНоменклатурыСервиса, ЭлементКоллекции.ИдентификаторХарактеристикиСервиса));
	КонецЦикла;
			
	ИмяМетода = "Обработка.СопоставлениеНоменклатурыБЭД.МодульОбъекта.НайтиВариантыСопоставленияНоменклатурыПоИдентификаторам";
	
	ОперацияПоискаВариантов = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ИдентификаторыОбъектов, ПараметрыВыполнения)
		
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеПоискаВариантов(ЭтоПоискПоИдентификаторам = Ложь, ПроводитьСтандартныйПоискВЛюбомСлучае = Ложь)
	
	ОбработкаЗавершенияПоискаВариантов = Новый ОписаниеОповещения("ЗакончитьПоискВариантов", ЭтотОбъект, 
		Новый Структура("ЭтоПоискПоИдентификаторам, ПроводитьСтандартныйПоискВЛюбомСлучае",
			ЭтоПоискПоИдентификаторам, ПроводитьСтандартныйПоискВЛюбомСлучае));
	
	ПараметрыОжидания                                 = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПоискаВариантов, ОбработкаЗавершенияПоискаВариантов, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПоискВариантов(Результат, ДополнительныеПараметры) Экспорт
	
	ЗакончитьПоискВариантовНаСервере(Результат, ДополнительныеПараметры);
	ЗаполнитьСписокДействийСЭлементомСопоставления();
	
	// Если не вся номенклатура была найдена по идентификаторам, на сервере запускается дополнительный поиск
	Если ДополнительныеПараметры.ЭтоПоискПоИдентификаторам 
		И ОперацияПоискаВариантов <> Неопределено Тогда
		
		ОжидатьЗавершениеПоискаВариантов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьПоискВариантовНаСервере(Результат, ДополнительныеПараметры)
	
	ОперацияПоискаВариантов = Неопределено;
	Элементы.ГруппаПоискВариантов.Видимость = Ложь;
		
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ЭтоПоискПоИдентификаторам Тогда		
		ПоискПоИдентификаторамВыполнен = Истина;
		Объект.Варианты.Очистить();
		ВариантыЭлементовСопоставления = ВариантыНайденныеПоИдентификаторам(Результат.АдресРезультата);	
	Иначе
		ВариантыЭлементовСопоставления = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);	
	КонецЕсли;
		
	ДобавитьВариантыСопоставления(ВариантыЭлементовСопоставления);
	
	Если ДополнительныеПараметры.ЭтоПоискПоИдентификаторам 
		И (Не ВсяНоменклатураСопоставлена() ИЛИ ДополнительныеПараметры.ПроводитьСтандартныйПоискВЛюбомСлучае) Тогда
		
		Элементы.ГруппаПоискВариантов.Видимость = Истина;
		НачатьПоискВариантов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВсяНоменклатураСопоставлена()
		
	Возврат Объект.Сопоставление.НайтиСтроки(
		Новый Структура("Номенклатура", НоменклатураПустаяСсылка)).Количество() = 0;
	
КонецФункции

&НаСервере
Функция ВариантыНайденныеПоИдентификаторам(АдресРезультата)
	
	ВариантыЭлементовСопоставления = Новый Массив;
	
	СсылкиПоИдентификаторам = ПолучитьИзВременногоХранилища(АдресРезультата);	
	
	Если СсылкиПоИдентификаторам <> Неопределено Тогда 
		
		Для каждого ЭлементКоллекции Из СсылкиПоИдентификаторам Цикл
			
			НайденныеСтроки = Объект.Сопоставление.НайтиСтроки(Новый Структура("ИдентификаторНоменклатурыСервиса, ИдентификаторХарактеристикиСервиса", 
			ЭлементКоллекции.ИдентификаторНоменклатуры, ЭлементКоллекции.ИдентификаторХарактеристики));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоменклатураИБ          = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
			НоменклатураКонтрагента = НоменклатураКонтрагентаПоЗаписиСопоставления(НайденныеСтроки[0]);
			
			Если ЭлементКоллекции.ОбъектУдален Тогда
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса   = "";
				НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса = "";
			Иначе
				НоменклатураИБ.Номенклатура   = ЭлементКоллекции.Номенклатура;
				НоменклатураИБ.Характеристика = ЭлементКоллекции.Характеристика;
			КонецЕсли;
			
			Вариант = Новый Структура();
			
			Вариант.Вставить("НоменклатураКонтрагента", НоменклатураКонтрагента);
			Вариант.Вставить("НоменклатураИБ",          НоменклатураИБ);
			Вариант.Вставить("Наименование",            ЭлементКоллекции.Номенклатура);
			Вариант.Вставить("Артикул",                 "");
			Вариант.Вставить("Штрихкод",                "");
			
			ВариантыЭлементовСопоставления.Добавить(Вариант);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВариантыЭлементовСопоставления;
	
КонецФункции

&НаСервере
Процедура ДобавитьВариантыСопоставления(Знач НаборЭлементовСопоставления)
	
	Если ТипЗнч(НаборЭлементовСопоставления) <> Тип("Массив") Тогда
		НаборЭлементовСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборЭлементовСопоставления);
	КонецЕсли;
	
	Для Каждого ЭлементСопоставления Из НаборЭлементовСопоставления Цикл
		
		НовыйВариант = Объект.Варианты.Добавить();
		НовыйВариант.Владелец = ЭлементСопоставления.НоменклатураКонтрагента.Владелец;
		НовыйВариант.Идентификатор = ЭлементСопоставления.НоменклатураКонтрагента.Идентификатор;
		НовыйВариант.Номенклатура = ЭлементСопоставления.НоменклатураИБ.Номенклатура;
		НовыйВариант.Характеристика = ЭлементСопоставления.НоменклатураИБ.Характеристика;
		НовыйВариант.Упаковка = ЭлементСопоставления.НоменклатураИБ.Упаковка;
		НовыйВариант.Артикул = ЭлементСопоставления.Артикул;
		НовыйВариант.Штрихкод = ЭлементСопоставления.Штрихкод;
		
	КонецЦикла;
	
	СопоставленоАвтоматически = 0;
	Для каждого Запись Из Объект.Сопоставление Цикл
		
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборВариантов = Новый Структура("Владелец,Идентификатор", Запись.Владелец, Запись.Идентификатор);
		НайденныеВарианты = Объект.Варианты.НайтиСтроки(ОтборВариантов);
		
		Если НайденныеВарианты.Количество() = 1 Тогда
			Запись.Номенклатура = НайденныеВарианты[0].Номенклатура;
			Запись.Характеристика = НайденныеВарианты[0].Характеристика;
			Запись.Упаковка = НайденныеВарианты[0].Упаковка;
			ОбработатьЗаписьСопоставления(Запись);
			Если Запись.Сопоставлено Тогда
				СопоставленоАвтоматически = СопоставленоАвтоматически + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоиска = СтрШаблон(НСтр("ru = 'Поиск вариантов завершен. Автоматически сопоставлено: %1'"), СопоставленоАвтоматически);
	Элементы.НадписьРезультатПоискаВариантов.Заголовок = РезультатПоиска;
	Элементы.НадписьРезультатПоискаВариантов.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВариантыСопоставления(Знач ЭлементСопоставления)
	
	Варианты = ВариантыЭлементаСопоставления(ЭлементСопоставления);
	Если Не ЗначениеЗаполнено(Варианты) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлементСопоставления", ЭлементСопоставления);
	ПараметрыФормы.Вставить("Варианты", Варианты);
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыБЭД.Форма.ФормаВариантов",
		ПараметрыФормы, Элементы.Сопоставление, ЭлементСопоставления,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция ВариантыЭлементаСопоставления(Знач ЭлементСопоставления)
	
	Варианты = Новый Массив;
	
	КлючЗаписи = Новый Структура("Владелец,Идентификатор");
	ЗаполнитьЗначенияСвойств(КлючЗаписи, ЭлементСопоставления.НоменклатураКонтрагента);
	
	СтрокиВариантовПоЗаписи = Объект.Варианты.НайтиСтроки(КлючЗаписи);
	
	Для Каждого СтрокаВарианта Из СтрокиВариантовПоЗаписи Цикл
		
		Вариант = Новый Структура("Номенклатура,Характеристика,Упаковка,Наименование,Артикул,Штрихкод");
		ЗаполнитьЗначенияСвойств(Вариант, СтрокаВарианта);
		
		Варианты.Добавить(Вариант);
		
	КонецЦикла;
	
	Возврат Варианты;
	
КонецФункции

#КонецОбласти

#Область РаботаССопоставлением

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСопоставленияПоЗаписи(Знач Запись)
	
	ЭлементСопоставления = Новый Структура;
	ЭлементСопоставления.Вставить("НоменклатураКонтрагента", 
		НоменклатураКонтрагентаПоЗаписиСопоставления(Запись));
	ЭлементСопоставления.Вставить("НоменклатураИБ", 
		НоменклатураИБПоЗаписиСопоставления(Запись));
	
	Возврат ЭлементСопоставления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатураКонтрагентаПоЗаписиСопоставления(Знач Запись)
	
	НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
	НоменклатураКонтрагента.Владелец = Запись.Владелец;
	НоменклатураКонтрагента.Идентификатор = Запись.Идентификатор;
	НоменклатураКонтрагента.Наименование = Запись.Наименование;
	НоменклатураКонтрагента.Характеристика = Запись.НаименованиеХарактеристики;
	НоменклатураКонтрагента.ЕдиницаИзмерения = Запись.ЕдиницаИзмерения;
	НоменклатураКонтрагента.ЕдиницаИзмеренияКод = Запись.ЕдиницаИзмеренияКод;
	НоменклатураКонтрагента.Артикул = Запись.Артикул;
	НоменклатураКонтрагента.СтавкаНДС = Запись.СтавкаНДС;
	НоменклатураКонтрагента.Штрихкод = Запись.Штрихкод;
	НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса = Запись.ИдентификаторНоменклатурыСервиса;
	НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса = Запись.ИдентификаторХарактеристикиСервиса;
	
	Возврат НоменклатураКонтрагента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатураИБПоЗаписиСопоставления(Знач Запись)
	
	НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	НоменклатураИБ.Номенклатура = Запись.Номенклатура;
	НоменклатураИБ.Характеристика = Запись.Характеристика;
	НоменклатураИБ.Упаковка = Запись.Упаковка;
	
	Возврат НоменклатураИБ;
	
КонецФункции


&НаКлиенте
Функция ЭтоДействиеСЭлементомСопоставления(Знач ПроверяемоеЗначение)
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
		
		Если ПроверяемоеЗначение.Свойство("Действие") 
			И ПроверяемоеЗначение.Свойство("ЭлементСопоставления") Тогда
			
			ДопустимыеДействия = Новый Массив;
			ДопустимыеДействия.Добавить("ПоказатьВарианты");
			ДопустимыеДействия.Добавить("ИдетПоискВариантов");
			ДопустимыеДействия.Добавить("ПрименитьВариант");
			ДопустимыеДействия.Добавить("ОткрытьСписок");
			ДопустимыеДействия.Добавить("СоздатьНоменклатуру");
			ДопустимыеДействия.Добавить("ЗагрузитьИзСервиса");
			ДопустимыеДействия.Добавить("ПодобратьИзСервиса");
			
			Если ДопустимыеДействия.Найти(ПроверяемоеЗначение.Действие) <> Неопределено Тогда
			
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДействиеСЭлементомСопоставления(Знач ОписаниеДействия)
	
	Действие = ОписаниеДействия.Действие;
	ЭлементСопоставления = ОписаниеДействия.ЭлементСопоставления;
	Если ЭлементСопоставления = Неопределено Тогда
		ЭлементСопоставления = ТекущийЭлементСопоставления();
	КонецЕсли;
	
	Если Действие = "ПоказатьВарианты" Тогда
		
		ПоказатьВариантыСопоставления(ЭлементСопоставления);
		
	ИначеЕсли Действие = "ИдетПоискВариантов" Тогда
		
		ТекстСообщения = НСтр("ru = 'Поиск вариантов еще не завершен. Попробуйте позже.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	ИначеЕсли Действие = "ПрименитьВариант" Тогда
		
		ОбработатьЭлементыСопоставления(ЭлементСопоставления);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
	ИначеЕсли Действие = "СоздатьНоменклатуру" Тогда
		
		ПоказатьВопросОСозданииНоменклатуры(ЭлементСопоставления);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
	ИначеЕсли Действие = "ОткрытьСписок" Тогда
		
		ОткрытьФормуВыбораНоменклатурыИнформационнойБазы(ЭлементСопоставления);
		
	ИначеЕсли Действие = "ПодобратьИзСервиса" Тогда
		
		ПоказатьПодборИзСервиса(ЭлементСопоставления);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
	ИначеЕсли Действие = "ЗагрузитьИзСервиса" Тогда
		
		НачатьЗагрузкуНоменклатуруИзСервиса(ЭлементСопоставления);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДействийСЭлементомСопоставления()
	
	СписокДействий = Элементы.СопоставлениеНоменклатура.СписокВыбора;
	СписокДействий.Очистить();
	
	ЭлементСопоставления = ТекущийЭлементСопоставления();
	Если ЭлементСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Показать варианты.
	Если ОперацияПоискаВариантов = Неопределено Тогда
		
		Варианты = ВариантыЭлементаСопоставления(ЭлементСопоставления);
		Если ЗначениеЗаполнено(Варианты) Тогда
			
			НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ПоказатьВарианты", Неопределено);
			Представление = СтрШаблон(НСтр("ru = 'Найдено в моей базе (%1)'"), Варианты.Количество());
			СписокДействий.Добавить(НовоеДействие, Представление,, БиблиотекаКартинок.ВыбратьЗначение);
			
		КонецЕсли;
		
	Иначе
		
		НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ИдетПоискВариантов", ЭлементСопоставления);
		Представление = НСтр("ru = 'Идет поиск вариантов'");
		СписокДействий.Добавить(НовоеДействие, Представление,, БиблиотекаКартинок.ДлительнаяОперация16);
			
	КонецЕсли;
	
	// Создать по данным контрагента.
	Если ЕстьПравоДобавленияНоменклатуры Тогда
		НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "СоздатьНоменклатуру", ЭлементСопоставления);
		Представление = НСтр("ru = 'Создать по данным контрагента'");
		СписокДействий.Добавить(НовоеДействие, Представление,, БиблиотекаКартинок.СоздатьЭлементСписка);
	КонецЕсли;
	
	// Загрузить/Подобрать из сервиса 1С:Номенклатура.
	Если ИспользоватьСервис И ПоискПоИдентификаторамВыполнен Тогда
		
		Если ЗначениеЗаполнено(ЭлементСопоставления.НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса) Тогда
			
			НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ЗагрузитьИзСервиса", ЭлементСопоставления);
			Представление = НСтр("ru = 'Загрузить из 1С:Номенклатура'");
			СписокДействий.Добавить(НовоеДействие, Представление, , БиблиотекаКартинок["ДобавитьРаботаСНоменклатурой"]);
			
		Иначе
			
			НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ПодобратьИзСервиса", ЭлементСопоставления);
			Представление = НСтр("ru = 'Подобрать из 1С:Номенклатура'");
			СписокДействий.Добавить(НовоеДействие, Представление, , БиблиотекаКартинок["ИконкаБелыйФонРаботаСНоменклатурой"]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция ЭтоЭлементСопоставления(Знач ПроверяемоеЗначение)
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
		
		Если ПроверяемоеЗначение.Свойство("НоменклатураКонтрагента") 
			И ПроверяемоеЗначение.Свойство("НоменклатураИБ") Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ТекущийЭлементСопоставления()
	
	Запись = Элементы.Сопоставление.ТекущиеДанные;
	Если Запись = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлементСопоставленияПоЗаписи(Запись);
	
КонецФункции

&НаСервере
Функция ПолучитьЭлементыСопоставления(Знач Отбор = Неопределено, Режим = "Полный")
	
	ЗаписиСопоставления = Объект.Сопоставление;
	Если ЗначениеЗаполнено(Отбор) Тогда
		Если ТипЗнч(Отбор) = Тип("Структура") Тогда
			ЗаписиСопоставления = Объект.Сопоставление.НайтиСтроки(Отбор);
		ИначеЕсли ТипЗнч(Отбор) = Тип("Массив") Тогда
			ЗаписиСопоставления = Отбор;
		КонецЕсли;
	КонецЕсли;
	
	ВыбранныеЭлементыСопоставления = Новый Массив;
	
	Для Каждого Запись Из ЗаписиСопоставления Цикл
		
		ЭлементСопоставления = ЭлементСопоставленияПоЗаписи(Запись);
		
		Если Режим = "НоменклатураКонтрагента" Тогда
			ВыбранныеЭлементыСопоставления.Добавить(ЭлементСопоставления.НоменклатураКонтрагента);
		ИначеЕсли Режим = "НоменклатураИБ" Тогда
			ВыбранныеЭлементыСопоставления.Добавить(ЭлементСопоставления.НоменклатураИБ);
		Иначе
			ВыбранныеЭлементыСопоставления.Добавить(ЭлементСопоставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранныеЭлементыСопоставления;
	
КонецФункции

&НаСервере
Процедура ОбработатьЭлементыСопоставления(Знач ЭлементыСопоставления)
	
	Если ТипЗнч(ЭлементыСопоставления) <> Тип("Массив") Тогда
		ЭлементыСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементыСопоставления);
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыСопоставления Цикл
		
		КлючЗаписи = Новый Структура("Владелец,Идентификатор");
		ЗаполнитьЗначенияСвойств(КлючЗаписи, Элемент.НоменклатураКонтрагента);
	
		ЗаписиСопоставления = Объект.Сопоставление.НайтиСтроки(КлючЗаписи);
	
		Для Каждого Запись Из ЗаписиСопоставления Цикл
		
			Запись.Номенклатура = Элемент.НоменклатураИБ.Номенклатура;
			Запись.Характеристика = Элемент.НоменклатураИБ.Характеристика;
			Запись.Упаковка = Элемент.НоменклатураИБ.Упаковка;
		
			ОбработатьЗаписьСопоставления(Запись);
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьСопоставления(Запись)
	
	Модифицированность = Истина;
	
	НоменклатураКонтрагента = НоменклатураКонтрагентаПоЗаписиСопоставления(Запись);
	НоменклатураИБ = НоменклатураИБПоЗаписиСопоставления(Запись);
	
	ОбменСКонтрагентамиСлужебный.ПодобратьНоменклатуруИнформационнойБазы(НоменклатураКонтрагента, НоменклатураИБ);
	ЗаполнитьЗначенияСвойств(Запись, НоменклатураИБ);
	
	СвойстваНоменклатурыИБ = ОбменСКонтрагентамиСлужебный.СвойстваНоменклатурыИнформационнойБазы(НоменклатураИБ);
	
	Запись.ИспользоватьХарактеристики = СвойстваНоменклатурыИБ.ИспользоватьХарактеристики;
	Запись.ИспользоватьУпаковки = СвойстваНоменклатурыИБ.ИспользоватьУпаковки;
	
	ЗаписьСопоставлено = Запись.Сопоставлено;
	
	Если ЗначениеЗаполнено(Запись.Номенклатура)
		И (ЗначениеЗаполнено(Запись.Характеристика) ИЛИ Не Запись.ИспользоватьХарактеристики)
		И (ЗначениеЗаполнено(Запись.Упаковка) ИЛИ Не Запись.ИспользоватьУпаковки) Тогда
		
		Запись.Сопоставлено = Истина;
		
	Иначе
		
		Запись.Сопоставлено = Ложь;
		
	КонецЕсли;
	
	Если ЗаписьСопоставлено <> Запись.Сопоставлено Тогда
		УстановитьСвойстваЭлементаОтбораПоСопоставлению();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция СохранитьСопоставление()
	
	ОтборЭлементовДляСохранения = Новый Структура("Сопоставлено,Сохранено", Истина, Ложь);
	
	Если РазрешитьСохранение Тогда
		
		ЭлементыДляСохранения = ПолучитьЭлементыСопоставления(ОтборЭлементовДляСохранения);
		
		Для Каждого Элемент Из ЭлементыДляСохранения Цикл
			
			ОбменСКонтрагентамиСлужебный.УстановитьСоответствиеНоменклатуры(
				Элемент.НоменклатураКонтрагента, Элемент.НоменклатураИБ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СохраненныеЗаписи = Объект.Сопоставление.НайтиСтроки(ОтборЭлементовДляСохранения);
	
	Для Каждого Запись Из СохраненныеЗаписи Цикл
		
		Запись.Сохранено = Истина;
		
	КонецЦикла;
	
	ОтборСохраненныхЭлементов = Новый Структура("Сопоставлено,Сохранено", Истина,Истина);
	СохраненныеЭлементы = ПолучитьЭлементыСопоставления(ОтборСохраненныхЭлементов);
	
	Модифицированность = Ложь;
	
	Возврат СохраненныеЭлементы;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОСохраненииПередЗакрытием()
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСохраненииПередЗакрытием", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Если Не РазрешитьСохранение Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Применить изменения?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСохраненииПередЗакрытием(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СохраненныеЭлементы = СохранитьСопоставление();
		Закрыть(СохраненныеЭлементы);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Для каждого Запись Из Объект.Сопоставление Цикл
			Запись.Сопоставлено = Истина;
		КонецЦикла;
		Если РазрешитьСохранение Тогда
			Закрыть(СохраненныеЭлементы);
		Иначе
			Закрыть();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСопоставленииПередЗакрытием() 
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСопоставленииПередЗакрытием", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Сопоставлены не все позиции номенклатуры. Закрыть помощник сопоставления?'");
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСопоставленииПередЗакрытием(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Для каждого Запись Из Объект.Сопоставление Цикл
			Запись.Сопоставлено = Истина;
		КонецЦикла;
		Закрыть(СохраненныеЭлементы);
	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьФормуВыбораНоменклатурыИнформационнойБазы(Знач ЭлементСопоставления)
	
	ПараметрыФормы = Новый Структура;
		
	ОбменСКонтрагентамиСлужебныйКлиентСервер.УстановитьСвойствоСтруктуры(
		ПараметрыФормы, "ДополнительныеПараметры.ОбменСКонтрагентами.НоменклатураКонтрагента", ЭлементСопоставления.НоменклатураКонтрагента);
		
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуВыбораНоменклатуры(
		ПараметрыФормы, Элементы.СопоставлениеНоменклатура, ЭлементСопоставления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруКонтрагентов(НаборНоменклатурыКонтрагентов)
	
	Объект.Сопоставление.Очистить();
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		НоваяЗапись = Объект.Сопоставление.Добавить();
		НоваяЗапись.Владелец = НоменклатураКонтрагента.Владелец;
		НоваяЗапись.Идентификатор = НоменклатураКонтрагента.Идентификатор;
		НоваяЗапись.Наименование = НоменклатураКонтрагента.Наименование;
		НоваяЗапись.НаименованиеХарактеристики = НоменклатураКонтрагента.Характеристика;
		НоваяЗапись.ЕдиницаИзмерения = НоменклатураКонтрагента.ЕдиницаИзмерения;
		НоваяЗапись.ЕдиницаИзмеренияКод = НоменклатураКонтрагента.ЕдиницаИзмеренияКод;
		НоваяЗапись.Артикул = НоменклатураКонтрагента.Артикул;
		НоваяЗапись.СтавкаНДС = НоменклатураКонтрагента.СтавкаНДС;
		НоваяЗапись.Штрихкод = НоменклатураКонтрагента.Штрихкод;
		НоваяЗапись.ИдентификаторНоменклатурыСервиса = НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса;
		НоваяЗапись.ИдентификаторХарактеристикиСервиса = НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса;
		
		ОбработатьЗаписьСопоставления(НоваяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СопоставлениеПриИзмененииНаСервере()
	
	ТекущаяСтрока = Элементы.Сопоставление.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Объект.Сопоставление.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ОбработатьЗаписьСопоставления(Запись);
	
КонецПроцедуры

&НаСервере
Функция ПереданыИдентификаторыНоменклатурыСервиса()
	
	Для Каждого ДанныеСопоставления Из Объект.Сопоставление Цикл
		Если Не ПустаяСтрока(ДанныеСопоставления.ИдентификаторНоменклатурыСервиса) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СозданиеНоменклатуры

&НаСервереБезКонтекста
Функция ЕстьПравоДобавленияНоменклатуры()
	
	ЕстьПраво = Истина;
	
	Для каждого ТипНоменклатуры Из Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип.Типы() Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипНоменклатуры);
		Если МетаданныеТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЕстьПравоДобавления = ПравоДоступа("Добавление", МетаданныеТипа);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ЕстьПраво = ЕстьПраво И ЕстьПравоДобавления;
		
	КонецЦикла;
	
	Возврат ЕстьПраво;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОСозданииНоменклатуры(Знач НаборЭлементовСопоставления)
	
	Если ТипЗнч(НаборЭлементовСопоставления) <> Тип("Массив") Тогда
		НаборЭлементовСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборЭлементовСопоставления);
	КонецЕсли;
	
	КоличествоСтрок = НаборЭлементовСопоставления.Количество();
	
	ТекстВопроса = "";
	
	Если КоличествоСтрок = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для создания номенклатуры необходимо выбрать хотя бы одну строку.'"));
		Возврат;
		
	ИначеЕсли КоличествоСтрок = 1 Тогда
	
		ТекстВопроса = НСтр("ru = 'Создать номенклатуру для выбранной строки?'");
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Создать номенклатуру для выбранных строк?'");
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("НаборЭлементовСопоставления", НаборЭлементовСопоставления);
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСозданииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСозданииНоменклатуры(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНоменклатуруИнформационнойБазы(ДополнительныеПараметры.НаборЭлементовСопоставления);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруИнформационнойБазы(Знач НаборЭлементовСопоставления)
	
	// Пробуем создать номенклатуру автоматически.
	
	ПараметрыОбработки = Новый Структура("НаборЭлементовСопоставления", НаборЭлементовСопоставления);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьСозданиеНоменклатурыИнформационнойБазыАвтоматически", ЭтотОбъект, ПараметрыОбработки);
	
	НачатьСозданиеНоменклатурыИнформационнойБазыАвтоматически(НаборЭлементовСопоставления, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеНоменклатурыИнформационнойБазыАвтоматически(Знач НаборЭлементовСопоставления, ОбработкаЗавершения)
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	Для Каждого ЭлементСопоставления Из НаборЭлементовСопоставления Цикл
		НаборНоменклатурыКонтрагентов.Добавить(ЭлементСопоставления.НоменклатураКонтрагента);
	КонецЦикла;
	
	ОбменСКонтрагентамиСлужебныйКлиент.НачатьСозданиеНоменклатурыПоДаннымКонтрагента(НаборНоменклатурыКонтрагентов, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьСозданиеНоменклатурыИнформационнойБазыАвтоматически(Знач СозданныеЭлементы, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СозданныеЭлементы) Тогда
		ОбработатьЭлементыСопоставления(СозданныеЭлементы);
	КонецЕсли;
	
	НаборЭлементовСопоставления = ДополнительныеПараметры.НаборЭлементовСопоставления;
	
	// Если создать номенклатуру автоматически не получилось
	// и выбрана только одна строка,
	// то предлагаем создать ее вручную.
	
	ВсегоЭлементов = НаборЭлементовСопоставления.Количество();
	СозданоЭлементов = СозданныеЭлементы.Количество();
	
	Если СозданоЭлементов = 0 И ВсегоЭлементов = 1 Тогда
		
		НачатьСозданиеНоменклатурыИнформационнойБазыВручную(НаборЭлементовСопоставления);
		
	ИначеЕсли ВсегоЭлементов <> СозданоЭлементов Тогда
		
		ТекстСообщения = НСтр("ru = 'Данных контрагента недостаточно для группового создания номенклатуры.'") + Символы.ПС
			+ НСтр("ru = 'Выберите одну строку и повторите попытку.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеНоменклатурыИнформационнойБазыВручную(Знач НаборЭлементовСопоставления)
	
	Для Каждого ЭлементСопоставления Из НаборЭлементовСопоставления Цикл
		
		ПараметрыФормы = Новый Структура;
		
		ОбменСКонтрагентамиСлужебныйКлиентСервер.УстановитьСвойствоСтруктуры(
			ПараметрыФормы, "ДополнительныеПараметры.ОбменСКонтрагентами.НоменклатураКонтрагента", ЭлементСопоставления.НоменклатураКонтрагента);
		
		// Передадим через ОписаниеОповещения элемент сопоставления для анализа в обработчике события СопоставлениеОбработкаЗаписиНового.
		ОбработкаЗакрытия = Новый ОписаниеОповещения(, , ЭлементСопоставления);
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНоменклатуры(ПараметрыФормы, Элементы.Сопоставление, ЭлементСопоставления, ОбработкаЗакрытия);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьСозданиеНоменклатурыИнформационнойБазыВручную(Знач ЭлементСопоставления, Знач НоваяНоменклатура)
	
	НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы(НоваяНоменклатура);
	ЭлементСопоставления.НоменклатураИБ = НоменклатураИБ;
	
	ОбработатьЭлементыСопоставления(ЭлементСопоставления);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервисом

&НаКлиенте
Процедура ПоказатьПодборИзСервиса(Знач ЭлементСопоставления) 
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
	
	ПараметрыФормыЗагрузки = МодульРаботаСНоменклатуройКлиент.ПараметрыФормыЗагрузкиНоменклатуры();
	ПараметрыФормыЗагрузки.СтрокаПоиска = ЭлементСопоставления.НоменклатураКонтрагента.Наименование;
	ПараметрыФормыЗагрузки.РежимВыбораНоменклатуры = Истина;
	ПараметрыФормыЗагрузки.СоздаватьНоменклатуруПриВыборе = Истина;
	ПараметрыФормыЗагрузки.ПодтверждатьСозданиеНоменклатуры = Истина;
	
	ПараметрыОбработки = Новый Структура("ЭлементСопоставления", ЭлементСопоставления);
	ОбработкаЗавершенияПодбора = Новый ОписаниеОповещения("ОбработатьПодборИзСервиса", ЭтотОбъект, ПараметрыОбработки);
	
	МодульРаботаСНоменклатуройКлиент.ОткрытьФормуЗагрузкиНоменклатуры(
		ПараметрыФормыЗагрузки, ЭтотОбъект, ОбработкаЗавершенияПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодборИзСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.ВыбранныеОбъекты) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйЭлемент = Результат.ВыбранныеОбъекты[0];
	
	Если ЗначениеЗаполнено(ВыбранныйЭлемент.Номенклатура) Тогда
		
		ЭлементСопоставления = ДополнительныеПараметры.ЭлементСопоставления;
		ЭлементСопоставления.НоменклатураИБ.Номенклатура = ВыбранныйЭлемент.Номенклатура;
		Если ЗначениеЗаполнено(ВыбранныйЭлемент.Характеристика) Тогда
			ЭлементСопоставления.НоменклатураИБ.Характеристика = ВыбранныйЭлемент.Характеристика;
		КонецЕсли;
		
		ОбработатьЭлементыСопоставления(ЭлементСопоставления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуНоменклатуруИзСервиса(Знач ЭлементСопоставления) 
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНоменклатурыСервиса = ЭлементСопоставления.НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса;
	ИдентификаторХарактеристикиСервиса = ЭлементСопоставления.НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса;
	Если Не ЗначениеЗаполнено(ИдентификаторНоменклатурыСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСервиса = Новый Структура;
	ИдентификаторСервиса.Вставить("ИдентификаторНоменклатуры", ИдентификаторНоменклатурыСервиса);
	ИдентификаторСервиса.Вставить("ИдентификаторХарактеристики", ИдентификаторХарактеристикиСервиса);
	НаборИдентификаторовСервиса = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСервиса);
	
	Попытка
		
		МодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		
		ПараметрыОбработки = Новый Структура("ЭлементСопоставления", ЭлементСопоставления);
		ОбработкаЗавершенияЗагрузки = Новый ОписаниеОповещения("ЗакончитьЗагрузкуНоменклатурыИзСервиса", ЭтотОбъект, ПараметрыОбработки);
		
		МодульРаботаСНоменклатуройКлиент.ЗагрузитьНоменклатуруИХарактеристики(
			ОбработкаЗавершенияЗагрузки, НаборИдентификаторовСервиса, ЭтотОбъект);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось загрузить номенклатуру из сервиса 1С:Номенклатура по причине:'")
			+ Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьЗагрузкуНоменклатурыИзСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.НовыеЭлементы) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент = Результат.НовыеЭлементы[0];
	
	Если ЗначениеЗаполнено(НовыйЭлемент.Номенклатура) Тогда
		
		ЭлементСопоставления = ДополнительныеПараметры.ЭлементСопоставления;
		ЭлементСопоставления.НоменклатураИБ.Номенклатура = НовыйЭлемент.Номенклатура;
		Если ЗначениеЗаполнено(НовыйЭлемент.Характеристика) Тогда
			ЭлементСопоставления.НоменклатураИБ.Характеристика = НовыйЭлемент.Характеристика;
		КонецЕсли;
		
		ОбработатьЭлементыСопоставления(ЭлементСопоставления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСНоменклатуройПодсказкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТребуетсяПересчетВариантов = Ложь;
	РаботаСНоменклатуройПодсказкаЗавершениеНаСервере(ТребуетсяПересчетВариантов);
	
	Если ТребуетсяПересчетВариантов Тогда
		ОжидатьЗавершениеПоискаВариантов(ИспользоватьСервис, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РаботаСНоменклатуройПодсказкаЗавершениеНаСервере(ТребуетсяПересчетВариантов)
	
	ТекущееЗначениеИспользованияСервиса = ИспользоватьСервис;
	ОпределитьИспользованиеСервисаНоменклатуры();
	УстановитьСвойстваЭлементовНоменклатурыСервиса();
	
	ТребуетсяПересчетВариантов = ТекущееЗначениеИспользованияСервиса <> ИспользоватьСервис;
	Если ТребуетсяПересчетВариантов Тогда
		ЗапуститьПоискВариантов();
		Элементы.НадписьРезультатПоискаВариантов.Видимость = Ложь;
		Элементы.ГруппаПоискВариантов.Видимость            = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
