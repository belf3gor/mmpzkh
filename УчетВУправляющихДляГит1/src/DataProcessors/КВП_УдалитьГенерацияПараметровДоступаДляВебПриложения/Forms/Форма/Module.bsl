
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Процедура заполнения данных на сервере.
Процедура ЗаполнитьДанныеНаСервере(СписокЗаполненных)
	
	Для Каждого ТекЛС Из СписокЗаполненных Цикл
		НоваяСтрока = Объект.ТаблицаЛС.Добавить();
		НоваяСтрока.ЛицевойСчет   = ТекЛС.Значение;
		НоваяСтрока.Логин         = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.ЛицевойСчет,
																							"Идентификатор");
		НоваяСтрока.ПарольДоступа = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.ЛицевойСчет,
																							"УдалитьПарольДоступа");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура генерации на сервере.
Процедура СгенерироватьНаСервере()
	
	ДопЧисло = 0;
	
	Для Каждого СтрокаТЧ Из Объект.ТаблицаЛС Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Логин) Тогда
			СтрокаТЧ.Логин = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторЛС( ,СтрокаТЧ.ЛицевойСчет.Наименование,ДопЧисло);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ПарольДоступа) Тогда
			СтрокаТЧ.ПарольДоступа = 
				УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПарольДоступаВеб( , ДопЧисло + 10);
		КонецЕсли;
		ДопЧисло = ДопЧисло + 20;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Прцедура поиска ошибок.
Функция НайтиОшибкиНаСервере()
	
	СчОшибок = 0;
	
	// проверим корректность введенных значений.
	Для Каждого СтрокаТЧ Из Объект.ТаблицаЛС Цикл
		ДанныеКорректны = Истина;
		
		// логин (идентификатор).
		ДанныеКорректны = ДанныеКорректны И ПроверитьКорректностьИдентификатораЛС(СтрокаТЧ.Логин);
		// пароля доступа.
		ДанныеКорректны = ДанныеКорректны И ПроверитьКорректностьПароляДоступаВеб(СтрокаТЧ.ПарольДоступа);
		
		СтрокаТЧ.ФлагНекорректности = Не ДанныеКорректны;
		СчОшибок = СчОшибок + ?(СтрокаТЧ.ФлагНекорректности, 1, 0);
	КонецЦикла;
	
	Возврат СчОшибок;
	
КонецФункции

&НаСервере
// Процедура записи данные на сервере.
Процедура ЗаписатьДанныеНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.ТаблицаЛС Цикл
		
		Если СтрокаТЧ.ФлагНекорректности Тогда
			Продолжить;
		Конецесли;
		
		ТекущийЛС = СтрокаТЧ.ЛицевойСчет;
		Если НЕ ТекущийЛС.Идентификатор = СтрокаТЧ.Логин Или НЕ ТекущийЛС.УдалитьПарольДоступа = СтрокаТЧ.ПарольДоступа Тогда
			ОбъектЛС = ТекущийЛС.ПолучитьОбъект();
			ОбъектЛС.Идентификатор = СтрокаТЧ.Логин;
			ОбъектЛС.УдалитьПарольДоступа = СтрокаТЧ.ПарольДоступа;
			КВП_ЗаписатьОбъект(ОбъектЛС);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Организация.Пустая() Тогда
		Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	мРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТаблицаЛСЛицевойСчет".
Процедура ТаблицаЛСЛицевойСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЛС.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.Логин         = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЛицевойСчет,
																								"Идентификатор");
		ТекущиеДанные.ПарольДоступа = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЛицевойСчет,
																								"УдалитьПарольДоступа");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	СтруктураПараметровОтбора = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	СтруктураПараметровОтбора.Вставить("ТипОбъекта"           , "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта"       , "ЛицевыеСчета");
	СтруктураПараметровОтбора.Вставить("Организация"          , Объект.Организация);
	СтруктураПараметровОтбора.Вставить("НачПериодЛС"          , НачалоМесяца(мРабочаяДата));
	СтруктураПараметровОтбора.Вставить("КонПериодЛС"          , КонецМесяца(мРабочаяДата));
	
	// Вызываем обработку заполнения.
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма",
				 СтруктураПараметровОтбора,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборОбъектов", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора объектов, вызванного в процедуре-обработчике
// команды "Заполнить()".
Процедура ОбработатьВыборОбъектов(СписокЗаполненных, ДополнительныеПараметры) Экспорт
	
	Если Не СписокЗаполненных = Неопределено И СписокЗаполненных.Количество() > 0 Тогда
		
		Если Объект.ТаблицаЛС.Количество() > 0 Тогда
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
			ДопПараметры = Новый Структура("СписокЗаполненных", СписокЗаполненных);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбработатьВыборОбъектов", ЭтаФорма, ДопПараметры),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДанныеНаСервере(СписокЗаполненных);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОбъектов()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ОбработатьВыборОбъектов()".
Процедура ОбработатьРезультатВопросаОбработатьВыборОбъектов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаЛС.Очистить();
	КонецЕсли;
	
	ЗаполнитьДанныеНаСервере(ДополнительныеПараметры.СписокЗаполненных);
	
КонецПроцедуры // ОбработатьРезультатВопросаОбработатьВыборОбъектов()

&НаКлиенте
// Обработчик команды "Очистить".
Процедура Очистить(Команда)
	
	ТекстВопроса = "Значения параметров доступа будут очищены. Продолжить?";
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчистить", ЭтаФорма),
				   ТекстВопроса,
				   РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // Очистить()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре-обработчике "Очистить()".
Процедура ОбработатьРезультатВопросаОчистить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого СтрокаТЧ Из Объект.ТаблицаЛС Цикл
			СтрокаТЧ.Логин = "";
			СтрокаТЧ.ПарольДоступа = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОчистить()

&НаКлиенте
// Обработчик команды "Сгенерировать".
Процедура Сгенерировать(Команда)
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.");
		Возврат;
	КонецЕсли;
	
	СгенерироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Сохранить".
Процедура Сохранить(Команда)
	
	СчОшибок = НайтиОшибкиНаСервере();
	
	Если СчОшибок > 0 Тогда
		ТекстВопроса = "Обнаружены некорректно заполненные значения параметров доступа! 
						|Количество строк с ошибками: " + СчОшибок + ". 
		                |Настройки логина и пароля задаются в учетной политике ТСЖ. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСохранить", ЭтаФорма),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	СохранитьПродолжение();
	
КонецПроцедуры // Сохранить()

&НаКлиенте
// Обработчик результата вопроса, вызванного в проыедуре-обработчике "Сохранить()".
Процедура ОбработатьРезультатВопросаСохранить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаСохранить()

&НаКлиенте
// Процедура-продолжение процендуры-обработчика "Сохранить()".
Процедура СохранитьПродолжение()
	
	ЗаписатьДанныеНаСервере();
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сохранение выполнено.");
	
КонецПроцедуры // СохранитьПродолжение()

&НаКлиенте
// Обработчик команды "Печать памяток доступа"
Процедура ПечатьПамятокДоступа(Команда)
	
	ОткрытьФорму("Справочник.Организации.ФормаВыбора",,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборОрганизации", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПечатьПамятокДоступа()

&НаКлиенте
// Обработчик выбора организации, вызванной в процедуре-обработчике команды "ПечатьПамятокДоступа()".
Процедура ОбработатьВыборОрганизации(ПараметрОрганизация, ДополнительныеПараметры) Экспорт
	
	Если ПараметрОрганизация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметрКоманды = Новый Массив;
	МассивПараметрКоманды.Добавить(ПараметрОрганизация);
	
	Для Каждого ТекЭлемент Из Объект.ТаблицаЛС Цикл
		МассивПараметрКоманды.Добавить(ТекЭлемент.ЛицевойСчет);
	КонецЦикла;
	
	ПараметрКоманды = МассивПараметрКоманды;
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("Обработка.КВП_УдалитьГенерацияПараметровДоступаДляВебПриложения",
													 "ПамяткаДоступа",
													 ПараметрКоманды,
													 Неопределено,
													 УПЖКХ_ТиповыеМетодыКлиент.ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды));
	
КонецПроцедуры // ОбработатьВыборОрганизации()


