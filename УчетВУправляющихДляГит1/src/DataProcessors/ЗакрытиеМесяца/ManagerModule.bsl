#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Инициализирует структуру параметров для вызова ВыполнитьОперацию()
//
Функция НовыеПараметрыВыполненияОперации() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Период",      '0001-01-01');
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("ВидОперации", Перечисления.ВидыРегламентныхОпераций.ПустаяСсылка());
	Результат.Вставить("Ссылка",      Документы.РегламентнаяОперация.ПустаяСсылка());
	Результат.Вставить("ПропуститьПроверкуСтатусаПредыдущих", Ложь);
	
	Возврат Результат;

КонецФункции

Процедура ВыполнитьОперацию(Параметры, АдресХранилища) Экспорт
	
	// Параметры и результат обернуты в структуру для их передачи через механизм ДлительныеОперации.
	// Состав параметров см. НовыеПараметрыВыполненияОперации().
	// Состав результата:
	// - ВидОперации
	// - Ссылка
	// - Состояние
	// - Отказ
	
	ВыполненныеПроверки = ПроверкиВозможностиВыполненияОперации();
	ВыполненныеПроверки.СтатусПредыдущих = Параметры.ПропуститьПроверкуСтатусаПредыдущих;
	
	Результат = ВыполнитьРегламентнуюОперацию(
		Параметры.Период, 
		Параметры.Организация, 
		Параметры.ВидОперации, 
		Параметры.Ссылка,
		Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
		ВыполненныеПроверки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗакрытьМесяц(Параметры, АдресХранилища) Экспорт
	
	// Параметры и результат обернуты в структуру для их передачи через механизм ДлительныеОперации.
	// Состав параметров:
	// - Период
	// - Организация
	// - СтатусЗакрытияМесяца
	// - ФинишнаяОперация
	// - ТолькоОперацииОбособленногоПодразделения
	// - ПропуститьПроверкуСтатусаПредыдущих
	// Состав результата:
	// - Выполнено
	// - Операции
	
	ВыполненныеПроверки = ПроверкиВозможностиВыполненияОперации();
	Если Параметры.Свойство("ПропуститьПроверкуСтатусаПредыдущих") Тогда
		ВыполненныеПроверки.СтатусПредыдущих = Параметры.ПропуститьПроверкуСтатусаПредыдущих;
	КонецЕсли;
	
	Результат = ВыполнитьЗакрытиеМесяца(
		Параметры.Период,
		Параметры.Организация,
		Параметры.СтатусЗакрытияМесяца,
		Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
		Параметры.ФинишнаяОперация,
		Параметры.ТолькоОперацииОбособленногоПодразделения,
		ВыполненныеПроверки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ПеренестиГраницуАктуальности(Параметры, АдресХранилища) Экспорт
	
	// Параметры и результат обернуты в структуру для их передачи через механизм ДлительныеОперации.
	// Состав параметров:
	// - Период
	// - Организация
	// - АдресХранилищаСОшибками
	// - ДополнительныеПараметры (содержит флаг СамостоятельнаяОперация)
	// Состав результата:
	// - ПоследовательностьВосстановлена
	// - АдресХранилищаСОшибками (не заполнено, если ошибок нет)
	// - ДополнительныеПараметры (передается структура, полученная в качестве входящего параметра)
	
	Результат = ВыполнитьПереносГраницыАктуальности(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Функция ЗакрытьМесяцПоЗагруженнымДанным(Период, Организация, РезультатЗакрытияМесяцаОтраженОперациями = Ложь) Экспорт
	
	// Данные могут быть загружены только по организации, не имеющей обособленных подразделений на выделенном балансе.
	
	// Результат - это структура.
	// Состав результата:
	// - Выполнено
	// - Операции
	
	Если РезультатЗакрытияМесяцаОтраженОперациями Тогда
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено;
	Иначе
		Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем детальный статус закрытия месяца
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Статус.Организация КАК Организация,
	|	Статус.ВидОперации.Порядок КАК ПорядокСледования,
	|	Статус.ВидОперации КАК ВидОперации,
	|	Статус.НомерГруппы КАК НомерГруппы,
	|	Статус.Требуется КАК Требуется,
	|	Статус.РучнаяКорректировка КАК РучнаяКорректировка,
	|	Статус.Ссылка КАК Ссылка,
	|	Статус.Состояние КАК Состояние,
	|	Статус.Устарела КАК Устарела
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерГруппы,
	|	Требуется УБЫВ,
	|	ПорядокСледования";
	СтатусЗакрытияМесяца = Запрос.Выполнить().Выгрузить();
    
	Результат = ВыполнитьЗакрытиеМесяца(
		Период,
		Организация,
		СтатусЗакрытияМесяца,
		Состояние);
		
	Возврат Результат;
	
КонецФункции

Функция МожноРедактироватьОперациюНДС(Период, Организация) Экспорт
	
	ПроверкаЗапрета = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	ДанныеДляПроверки = ПроверкаЗапрета.Добавить();
	ДанныеДляПроверки.Раздел = "БухгалтерскийУчет";
	
	ДанныеДляПроверки.Объект = Организация;
	ДанныеДляПроверки.Дата   = Период;
	
	Возврат НЕ ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ПроверкаЗапрета);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Печать

Процедура Печать(ПараметрыОтчета, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Формируем табличный документ и добавляем его в коллекцию печатных форм.
	Если Не ЗначениеЗаполнено(ПараметрыОтчета)
	 Или ТипЗнч(ПараметрыОтчета[0]) = Тип("ДокументСсылка.РегламентнаяОперация") Тогда // отчет для основной формы
	   
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВыполненныеОперации", 
			НСтр("ru = 'Отчет о выполнении операций'"), 
			ОтчетОВыполненииОпераций(ПараметрыПечати, ОбъектыПечати));
			
	Иначе // отчет для дополнительной формы

		ТабДокумент = РаботаСПоследовательностями.СформироватьСписокДокументовИзмененныхЗаПериод(ПараметрыПечати);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 1, ОбъектыПечати, "Закрытие месяца");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПерепроведенныеДокументы", 
			НСтр("ru = 'Отчет об измененных документах'"), 
			ТабДокумент);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ОтчетОВыполненииОпераций(Параметры, ОбъектыПечати)
	
	// Параметры:
	// Период
	// Организация
	// ВсеОбособленныеПодразделения
	// ПредварительноПолученныеДанные
	
	Период      = Параметры.Период;
	Организация = Параметры.Организация;
	
	ВсеОбособленныеПодразделения = (Параметры.Свойство("ВсеОбособленныеПодразделения") 
		И Параметры.ВсеОбособленныеПодразделения);
	
	// Пока не умеем обрабатывать ПредварительноПолученныеДанные.
	// Получим сведения о выполнении операций
	
	Если ВсеОбособленныеПодразделения Тогда
		ОтборОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация);
	Иначе
		ОтборОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем детальный статус закрытия месяца
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация, ОтборОрганизаций);
	
	// Составим таблицу с датам нарушения последовательности по каждой организациям.
	ТаблицаПоследовательности = Новый ТаблицаЗначений;
	ТаблицаПоследовательности.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПоследовательности.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаПоследовательности, ОтборОрганизаций, "Организация");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоследовательности Цикл
		
		МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведения(
			СтрокаТаблицы.Организация, КонецМесяца(Период));
		
		Если МоментНарушения <> Неопределено Тогда
			СтрокаТаблицы.Дата = МоментНарушения.Дата;
		КонецЕсли;
	
	КонецЦикла;
	
	
	// Отчет состоит из 4 разделов
	// В каждом из разделов операции группируются по организациям
	ЗаголовкиРазделов = Новый Соответствие;
	ЗаголовкиРазделов.Вставить(1, НСтр("ru = 'Список выполненных операций'"));
	ЗаголовкиРазделов.Вставить(2, НСтр("ru = 'Список операций, выполненных с ошибками'"));
	ЗаголовкиРазделов.Вставить(3, НСтр("ru = 'Список невыполненных операций'"));
	ЗаголовкиРазделов.Вставить(4, НСтр("ru = 'Список операций, рекомендуемых выполнить повторно'"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПоОрганизацииВЦелом", ВсеОбособленныеПодразделения);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",				НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",		КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТекстПерепроведениеДокументов", 	ЗакрытиеМесяца.ПредставлениеОперацииПерепроведениеДокументов());
	Запрос.УстановитьПараметр("ТаблицаПоследовательности", 		ТаблицаПоследовательности);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаПоследовательности.Организация КАК Справочник.Организации) КАК Организация,
	|	ТаблицаПоследовательности.Дата КАК Дата
	|ПОМЕСТИТЬ ДатыНарушенияПоследовательности
	|ИЗ
	|	&ТаблицаПоследовательности КАК ТаблицаПоследовательности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДатыНарушенияПоследовательности.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ДатыНарушенияПоследовательности.Дата <= &КонецПериодаРегистрации
	|			ТОГДА 4
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Раздел,
	|	ДатыНарушенияПоследовательности.Организация.Представление КАК ПредставлениеОрганизация,
	|	ДатыНарушенияПоследовательности.Организация КАК Организация,
	|	&ТекстПерепроведениеДокументов КАК ВидОперации,
	|	0 КАК ВидОперацииПорядок,
	|	&ТекстПерепроведениеДокументов КАК ПредставлениеВидОперации,
	|	0 КАК НомерГруппы,
	|	ЛОЖЬ КАК ПоОрганизацииВЦелом,
	|	ЛОЖЬ КАК РучнаяКорректировка,
	|	НЕОПРЕДЕЛЕНО КАК Ссылка
	|ИЗ
	|	ДатыНарушенияПоследовательности КАК ДатыНарушенияПоследовательности
	|ГДЕ
	|	(&ПоОрганизацииВЦелом
	|			ИЛИ ДатыНарушенияПоследовательности.Организация = &Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками)
	|			ТОГДА 2
	|		КОГДА Статус.Устарела
	|			ТОГДА 4
	|		КОГДА Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
	|			ТОГДА 1
	|		ИНАЧЕ 3
	|	КОНЕЦ,
	|	Статус.Организация.Представление,
	|	Статус.Организация,
	|	Статус.ВидОперации,
	|	Статус.ВидОперации.Порядок,
	|	ПРЕДСТАВЛЕНИЕ(Статус.ВидОперации),
	|	Статус.НомерГруппы,
	|	Статус.ПоОрганизацииВЦелом,
	|	Статус.РучнаяКорректировка,
	|	Статус.Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	(Статус.Требуется
	|			ИЛИ Статус.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено))
	|	И (&ПоОрганизацииВЦелом
	|			ИЛИ Статус.Организация = &Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел,
	|	ПредставлениеОрганизация,
	|	НомерГруппы,
	|	ВидОперацииПорядок
	|ИТОГИ ПО
	|	Раздел,
	|	Организация";
	
    ВыборкаРаздел = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Выведем отчет
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_о_выполнении_операций";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ЗакрытиеМесяца.ВыполненныеОперации");
	ОбластьМакета       = Макет.ПолучитьОбласть("Заголовок");
	ОбластьСостояние    = Макет.ПолучитьОбласть("Состояние");
	
	ОбластьМакетаОперация                  = Макет.ПолучитьОбласть("Операция");
	ОбластьМакетаОбособленноеПодразделение = Макет.ПолучитьОбласть("ОбособленноеПодразделение");
	
	ОбластьМакета.Параметры.Организация    = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Организация, ВсеОбособленныеПодразделения);
	ОбластьМакета.Параметры.Период         = Формат(Период, "ДФ='MMММ yyyy ""г.""'");
	ОбластьМакета.Параметры.ТекстСостояние = " на " + Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Для НомерРаздела = 1 По ЗаголовкиРазделов.Количество() Цикл
		
		// Заголовок списка
		ОбластьСостояние.Параметры.Состояние = ЗаголовкиРазделов[НомерРаздела];
		ТабДокумент.Вывести(ОбластьСостояние);
		
		// Пустой список
		Если НЕ ВыборкаРаздел.НайтиСледующий(НомерРаздела, "Раздел") Тогда
			ОбластьМакетаОперация.Параметры.Операция = НСтр("ru = 'Операций нет'");
			ТабДокумент.Вывести(ОбластьМакетаОперация);
			Продолжить;
		КонецЕсли;
		
		// Список
		ВыборкаОрганизации = ВыборкаРаздел.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизации.Следующий() Цикл
			
			Если ВсеОбособленныеПодразделения Тогда
				ОбластьМакетаОбособленноеПодразделение.Параметры.ОбособленноеПодразделение = ВыборкаОрганизации.Организация;
				ТабДокумент.Вывести(ОбластьМакетаОбособленноеПодразделение);
			КонецЕсли;
			
			НомерОперации = 0;
			ВыборкаОперации = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаОперации.Следующий() Цикл
				НомерОперации = НомерОперации + 1;
				ОбластьМакетаОперация.Параметры.Операция = "" + НомерОперации + ". " + ВыборкаОперации.ВидОперации;
				ТабДокумент.Вывести(ОбластьМакетаОперация);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 1, ОбъектыПечати, "Закрытие месяца");
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Выполнение процедуры закрытия месяца

Функция ВыполнитьРегламентнуюОперацию(Период, Организация, ВидОперации, Ссылка, Состояние, ВыполненныеПроверки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОперации", ВидОперации);
	Результат.Вставить("Ссылка",      Ссылка);
	Результат.Вставить("Состояние",   Состояние);
	Результат.Вставить("Отказ",       Ложь);
	
	// Регламентная операция
	Если ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(ВидОперации) Тогда
		
		УстранитьДубли(Период, Организация, ВидОперации, Ссылка);
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Объект = Ссылка.ПолучитьОбъект();
		Иначе
			Объект = Документы.РегламентнаяОперация.СоздатьДокумент();
			Объект.Ответственный = Пользователи.ТекущийПользователь();
			Объект.Состояние     = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
		КонецЕсли;
		
		Объект.Дата        = КонецМесяца(Период);
		Объект.Организация = Организация;
		Объект.ВидОперации = ВидОперации;
		
		Если ВыполненныеПроверки.Последовательность Тогда
			// По-умолчанию последовательность проверяется, но сейчас этого делать не надо, т.к. проверки проведены ранее.
			Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуПоследовательности", Истина);
		КонецЕсли;
		Если ВыполненныеПроверки.СтатусПредыдущих Тогда
			// По-умолчанию статус предыдущих операций проверяется, но сейчас этого делать не надо, т.к. проверки проведены ранее.
			Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуСтатусаПредыдущих", Истина);
		КонецЕсли;
		
		Если Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			Результат.Отказ = Не Объект.ВыполнитьОперацию();
		Иначе
			Объект.ПропуститьОперацию();
		КонецЕсли;
		
		// Если удалось выполнить операцию, то в дальнейшем проверок не нужно. Если не удалось, то включаем проверки.
		ВыполненныеПроверки.СтатусПредыдущих = Не Результат.Отказ;
		
		Если Объект.ЭтоНовый() Тогда
			Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
		Иначе
			Если Результат.Отказ Тогда
				Объект.Прочитать();
			КонецЕсли;
			Результат.Вставить("Ссылка",    Объект.Ссылка);
			Результат.Вставить("Состояние", Объект.Состояние);
		КонецЕсли;
		
	// Начисление зарплаты	
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеЗарплаты 
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		
		Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			// Начисление зарплаты "пропускать" не умеем
		Иначе
			
			СсылкаНачислениеЗарплаты = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(НачалоМесяца(Период), Организация);
			Результат.Вставить("Ссылка", СсылкаНачислениеЗарплаты);
			
			Если НЕ ЗначениеЗаполнено(СсылкаНачислениеЗарплаты) Тогда
				Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				Результат.Вставить("Отказ",     Истина);
			Иначе
				Объект = СсылкаНачислениеЗарплаты.ПолучитьОбъект();
				Попытка
					// Если документ начисления зарплаты отпусков создается из закрытия месяца,
					// т.е. не был раньше создан из группового перепроведения, то это означает, что:
					// - либо групповое перепроведение пропущено и контролировать последовательность не требуется;
					// - либо других первичных документов в месяце нет, поэтому он сразу оказывается в хронологической последовательности.
					// Поэтому установим соответствующий признак у документа.
					Объект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
				Исключение
					Результат.Вставить("Отказ",     Истина);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
			
	// Начисление резерва отпусков
	ИначеЕсли ВидОперации = Перечисления.ВидыРегламентныхОпераций.НачислениеРезерваОтпусков
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		И УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров()
		И УчетЗарплаты.ВедетсяУчетРезервовОтпусков(Организация, НачалоМесяца(Период)) Тогда
		
		Если Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			// Начисление резерва отпусков "пропускать" не умеем
		Иначе
			
			СсылкаНачислениеРезерваОтпусков = УчетЗарплаты.ПолучитьДокументНачисленияРезерваОтпусков(НачалоМесяца(Период), Организация);
			Результат.Вставить("Ссылка", СсылкаНачислениеРезерваОтпусков);
			
			Если НЕ ЗначениеЗаполнено(СсылкаНачислениеРезерваОтпусков) Тогда
				Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				Результат.Вставить("Отказ",     Истина);
			Иначе
				Объект = СсылкаНачислениеРезерваОтпусков.ПолучитьОбъект();
				Попытка
					// Если документ начисления резервов отпусков создается из закрытия месяца,
					// т.е. не был раньше создан из группового перепроведения, то это означает, что:
					// - либо групповое перепроведение пропущено и контролировать последовательность не требуется;
					// - либо других первичных документов в месяце нет, поэтому он сразу оказывается в хронологической последовательности.
					// Поэтому установим соответствующий признак у документа.
					Объект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
				Исключение
					Результат.Вставить("Отказ",     Истина);
					Результат.Вставить("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Так как операцию изменили программно, то также программно запишем и историю
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ИсторияРаботыПользователя.Добавить(ПолучитьНавигационнуюСсылку(Ссылка));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗакрытиеМесяца(Период, Организация, СтатусЗакрытияМесяца, Состояние, ФинишнаяОперация = Неопределено,
	ТолькоОперацииОбособленногоПодразделения = Ложь, ВыполненныеПроверки = Неопределено, СообщатьПрогрессВыполнения = Истина)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("Операции",  СтатусЗакрытияМесяца.СкопироватьКолонки("Организация, ВидОперации, Состояние, Ссылка"));
	
	// Найдем диапазон операций, которые следует выполнить
	ИндексСтартовойОперации = Неопределено;
	ИндексФинишнойОперации  = Неопределено;
	Если Не ЗначениеЗаполнено(ФинишнаяОперация) Тогда
		ИндексФинишнойОперации = СтатусЗакрытияМесяца.Количество() - 1;
	КонецЕсли;
		
	// Инициализируем параметры для отмены ненужных рег.операций.
	ПараметрыОтменыРегОпераций = Документы.РегламентнаяОперация.НовыеПараметрыОтменыОперации();
	ПараметрыОтменыРегОпераций.СдвигатьМоментНарушенияПоследовательности = Ложь;
	ПараметрыОтменыРегОпераций.ОбновитьГраницуАктуальности = Ложь;
	
	Для Каждого СтрокаТаблицы Из СтатусЗакрытияМесяца Цикл
		
		// Отменяем ненужную операцию до стартовой операции, если она мешает закрытию месяца.
		Если ИндексСтартовойОперации = Неопределено 
			И Не СтрокаТаблицы.Требуется
			И (СтрокаТаблицы.Устарела Или СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками) Тогда
			
			ОперацияОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			ОперацияОбъект.ОтменитьОперацию( , , ПараметрыОтменыРегОпераций);
			Если ОперацияОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
				СтрокаТаблицы.Состояние = ОперацияОбъект.Состояние;
				СтрокаТаблицы.Устарела = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = СтатусЗакрытияМесяца.Индекс(СтрокаТаблицы);
		
		Если ИндексСтартовойОперации = Неопределено 
			И ЗакрытиеМесяцаКлиентСервер.ОперацияВРаботе(СтрокаТаблицы) 
			И СтрокаТаблицы.Организация = Организация Тогда
			ИндексСтартовойОперации = Индекс;
		КонецЕсли;
		
		Если ИндексФинишнойОперации = Неопределено И СтрокаТаблицы.ВидОперации = ФинишнаяОперация Тогда
			ИндексФинишнойОперации = Индекс;
		КонецЕсли;
		
		Если ИндексФинишнойОперации <> Неопределено Тогда
			Если ИндексСтартовойОперации <> Неопределено Или Индекс >= ИндексФинишнойОперации Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексСтартовойОперации = Неопределено Или ИндексФинишнойОперации = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Подсчитываем, сколько операций предстоит выполнить.
	Если СообщатьПрогрессВыполнения Тогда
		
		КоличествоОпераций = 0;
		Для Индекс = ИндексСтартовойОперации По ИндексФинишнойОперации Цикл
			
			Операция = СтатусЗакрытияМесяца[Индекс];
			
			// Отменяем ненужную операцию среди выполняемых операций, если она мешает закрытию месяца.
			Если Не Операция.Требуется
				И (Операция.Устарела Или Операция.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками) Тогда
				
				ОперацияОбъект = Операция.Ссылка.ПолучитьОбъект();
				ОперацияОбъект.ОтменитьОперацию( , , ПараметрыОтменыРегОпераций);
				Если ОперацияОбъект.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
					Операция.Состояние = ОперацияОбъект.Состояние;
					Операция.Устарела = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ДопустимоВыполнитьОперацию = ОперацияДолжнаБытьВыполнена(Операция, ФинишнаяОперация, Организация, ТолькоОперацииОбособленногоПодразделения);
			Если ДопустимоВыполнитьОперацию = Неопределено Тогда // запрещена данная и все последующие
				Прервать;
			ИначеЕсли Не ДопустимоВыполнитьОперацию Тогда // запрещена данная операция
				Продолжить;
			КонецЕсли;
			
			КоличествоОпераций = КоличествоОпераций + 1;
			
		КонецЦикла;
		
		ПараметрыСообщенийПрогресса = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыСообщенийПрогресса();
		ПараметрыСообщенийПрогресса.Месяц       = Период;
		ПараметрыСообщенийПрогресса.Организация = Организация;
		ПараметрыСообщенийПрогресса.ИмяЭтапа    = ЗакрытиеМесяцаКлиентСервер.ИмяЭтапаЗакрытиеМесяца();
		ПараметрыСообщенийПрогресса.НачальноеЗначение   = 0;
		ПараметрыСообщенийПрогресса.КонечноеЗначение    = КоличествоОпераций;
		ПараметрыСообщенийПрогресса.ДостигнутоеЗначение = 0;
		
	КонецЕсли;
	
	// Закроем месяц
	ФинишнаяГруппа = Неопределено; // Если произошли ошибки, то не выполняем группы, после той, в которой ошибка.
	Если ВыполненныеПроверки = Неопределено Тогда
		ВыполненныеПроверки = ПроверкиВозможностиВыполненияОперации();
	КонецЕсли;
	
	Для Индекс = ИндексСтартовойОперации По ИндексФинишнойОперации Цикл
		
		Операция = СтатусЗакрытияМесяца[Индекс];
		
		ДопустимоВыполнитьОперацию = ОперацияДолжнаБытьВыполнена(Операция, ФинишнаяОперация, Организация, ТолькоОперацииОбособленногоПодразделения, ФинишнаяГруппа);
		Если ДопустимоВыполнитьОперацию = Неопределено Тогда // запрещена данная и все последующие
			Прервать;
		ИначеЕсли Не ДопустимоВыполнитьОперацию Тогда // запрещена данная операция
			Продолжить;
		КонецЕсли;
		
		Если СообщатьПрогрессВыполнения Тогда
			
			ПараметрыСообщенийПрогресса.ДостигнутоеЗначение =
				?(Индекс = ИндексСтартовойОперации, 0, ПараметрыСообщенийПрогресса.ДостигнутоеЗначение + 1);
			ДлительныеОперации.СообщитьПрогресс(, Строка(Операция.ВидОперации), ПараметрыСообщенийПрогресса);
			
		КонецЕсли;
		
		// Проверку нарушения последовательности выполняем для первой регламентной операции, а для последующих - не выполняем.
		РезультатВыполненияОперации = ВыполнитьРегламентнуюОперацию(
			Период,
			Операция.Организация,
			Операция.ВидОперации,
			Операция.Ссылка,
			Состояние,
			ВыполненныеПроверки);
			
		Если РезультатВыполненияОперации.Отказ 
			Или РезультатВыполненияОперации.Состояние <> Состояние Тогда
			Результат.Вставить("Выполнено", Ложь);
			ФинишнаяГруппа = Операция.НомерГруппы;
		КонецЕсли;
		
		НоваяСтрока = Результат.Операции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РезультатВыполненияОперации);
		НоваяСтрока.ВидОперации = Операция.ВидОперации;
		НоваяСтрока.Организация = Операция.Организация;

		Если Не ВыполненныеПроверки.Последовательность 
			И ЗакрытиеМесяцаКлиентСервер.ИспользуетсяДокументРегламентнаяОперация(Операция.ВидОперации) Тогда
			// После первой проверки нет необходимости повторно проверять, т.к. операции идут подряд.
			ВыполненныеПроверки.Последовательность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьПереносГраницыАктуальности(ПараметрыПереноса)
	
	Результат = Новый Структура;
	Результат.Вставить("ПоследовательностьВосстановлена", Ложь);
	Результат.Вставить("АдресХранилищаСОшибками");
	Результат.Вставить("ДополнительныеПараметры", ПараметрыПереноса.ДополнительныеПараметры);

	Организация = ПараметрыПереноса.Организация;
	ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации()
		+ "." + ЗакрытиеМесяца.ПредставлениеОперацииПереносГраницы(ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Границу последовательности всегда устанавливаем после конца месяца.
	ДатаОкончанияПерепроведения = КонецМесяца(ПараметрыПереноса.Период);
	// Если мы выполняем только перенос границы (самостоятельная операция), то текущий месяц не считаем закрытым.
	// Если мы выполняем перенос границы как подготовку к другой операции в текущем месяце, то предыдущий месяц закрываем.
	ДатаОкончанияЗакрытияМесяца = ?(ПараметрыПереноса.ДополнительныеПараметры.СамостоятельнаяОперация,
		ПараметрыПереноса.Период - 1, ДатаОкончанияПерепроведения);
	// Инициализируем значение даты, которая будет хранить минимальный из месяцев, попавших в изменения.
	ДатаНачалаПереносаГраницы = ДатаОкончанияЗакрытияМесяца;
	
	// Сделать актуализацию по документам отложенного проведения.
	МоментАктуальностиОтложенных = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(Организация, ДатаОкончанияПерепроведения);
	Если МоментАктуальностиОтложенных <> Неопределено Тогда
		
		ДатаНачалаПереносаГраницы = Мин(ДатаНачалаПереносаГраницы, МоментАктуальностиОтложенных.Дата);
		
		ПараметрыРасчета = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
		ПараметрыРасчета.Организация 				= Организация;	
		ПараметрыРасчета.ДатаОкончания 				= ДатаОкончанияПерепроведения;
		ПараметрыРасчета.ОстанавливатьсяПоОшибке 	= Истина;
		ПараметрыРасчета.СообщатьПрогрессВыполнения = Ложь;
		
		РезультатРасчета = УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
		
		Если РезультатРасчета.КоличествоДоговоровСОшибками <> 0 Тогда
			
			ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации()
				+ "." + ЗакрытиеМесяца.ПредставлениеОперацииПереносГраницы(ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение,
				,
				НСтр("ru = 'Актуализация расчетов с контрагентами при отложенном проведении'"));
			
			ПараметрыОтчета = ПроведениеСервер.НовыеПараметрыОтчетаССообщениямиПользователю(
								"АктуализацияРасчетовСКонтрагентами", РезультатРасчета.Сообщения);
			ПараметрыОтчета.ДатаНачала               = РезультатРасчета.ДатаНачала;
			ПараметрыОтчета.ДатаОкончания            = РезультатРасчета.ДатаОкончания;
			ПараметрыОтчета.ПроведеноДокументов      = РезультатРасчета.УспешноОбработаноДокументов;
			ПараметрыОтчета.НеУдалосьПровести        = РезультатРасчета.КоличествоДокументовСОшибками;
			ПараметрыОтчета.АктуализированоДоговоров = РезультатРасчета.УспешноОбработаноДоговоров;
			ПараметрыОтчета.НеУдалосьАктуализировать = РезультатРасчета.КоличествоДоговоровСОшибками;
			ТабДокумент = ПроведениеСервер.ВывестиСообщенияПользователю(ПараметрыОтчета);
				
			ПроведениеСервер.ПоместитьСообщенияПользователюВоВременноеХранилищеДляФормыОшибок(
				РезультатРасчета.Сообщения,
				ТабДокумент,
				ПараметрыПереноса.АдресХранилищаСОшибками);
			
			Результат.АдресХранилищаСОшибками = ПараметрыПереноса.АдресХранилищаСОшибками;
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отметить как актуальные документы из последовательности.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияПерепроведения);
	
	// Получаем данные, упорядоченные по приоритету, который определяется ПорядокАнализа. Далее из всех строк по одному
	// регистратору будет оставлена только одна, самая приоритетная (соответствующая ситуации по данному регистратору).
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыОрганизаций.Регистратор КАК Регистратор,
	|	МИНИМУМ(ДокументыОрганизаций.Период) КАК ГраницаПоРегистратору
	|ПОМЕСТИТЬ ДокументыНарушенияГраницы
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|ГДЕ
	|	ДокументыОрганизаций.Организация = &Организация
	|	И ДокументыОрганизаций.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности))
	|	И ДокументыОрганизаций.Период <= &ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОрганизаций.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыНарушенияГраницы.ГраницаПоРегистратору КАК ГраницаПоРегистратору,
	|	ДокументыОрганизаций.Регистратор КАК Регистратор,
	|	ДокументыОрганизаций.Период КАК Период,
	|	ДокументыОрганизаций.Организация КАК Организация,
	|	ДокументыОрганизаций.СостояниеПроведения КАК СостояниеПроведения,
	|	ВЫБОР
	|		КОГДА ДокументыОрганизаций.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности)
	|			ТОГДА 3
	|		КОГДА ДокументыОрганизаций.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПерепроведениеПропущено)
	|			ТОГДА 2
	|		КОГДА ДокументыОрганизаций.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокАнализа
	|ИЗ
	|	ДокументыНарушенияГраницы КАК ДокументыНарушенияГраницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций
	|		ПО ДокументыНарушенияГраницы.Регистратор = ДокументыОрганизаций.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГраницаПоРегистратору,
	|	Регистратор,
	|	ПорядокАнализа УБЫВ,
	|	Период";

	Выборка = Запрос.Выполнить().Выбрать();

	ТекущийРегистратор = Неопределено;
	ДокументыОрганизаций = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	ОтборНабора = ДокументыОрганизаций.Отбор.Регистратор;
	НаборСформирован = Ложь;
	
	Попытка
	
		Пока Выборка.Следующий() Цикл
			
			ДатаНачалаПереносаГраницы = Мин(ДатаНачалаПереносаГраницы, Выборка.Период);
			
			Если ТекущийРегистратор <> Выборка.Регистратор
			   И ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				// Переходит к новому регистратору, поэтому записываем движения по старому.
				ОтборНабора.Установить(ТекущийРегистратор);
				ДокументыОрганизаций.Записать(Истина);
				ДокументыОрганизаций.Очистить();
				
				ЗаписьЖурналаРегистрации(
					ИмяСобытия,
					УровеньЖурналаРегистрации.Предупреждение,
					ТекущийРегистратор.Метаданные(),
					ТекущийРегистратор,
					НСтр("ru = 'Пометка документа проведенным в последовательности'"));
				ТекущийРегистратор = Неопределено;
				НаборСформирован = Ложь;
				
			КонецЕсли;
			
			Если Выборка.Организация <> Организация Тогда // не изменяем записи другой организации
				
				НоваяРегистрация = ДокументыОрганизаций.Добавить();
				НоваяРегистрация.Регистратор         = Выборка.Регистратор;
				НоваяРегистрация.Период              = Выборка.Период;
				НоваяРегистрация.Организация         = Выборка.Организация;
				НоваяРегистрация.СостояниеПроведения = Выборка.СостояниеПроведения;
				Продолжить;
				
			КонецЕсли;
			
			Если НаборСформирован Тогда
				Продолжить;
			КонецЕсли;

			ТекущийРегистратор = Выборка.Регистратор;
			НаборСформирован = Ложь;
			
			Если Выборка.ПорядокАнализа <> 0 Тогда // оставить эту запись единственной
				
				НоваяРегистрация = ДокументыОрганизаций.Добавить();
				НоваяРегистрация.Регистратор         = ТекущийРегистратор;
				НоваяРегистрация.Период              = Выборка.Период;
				НоваяРегистрация.Организация         = Выборка.Организация;
				Если Выборка.ПорядокАнализа = 3 Тогда
					НоваяРегистрация.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности;
				Иначе
					НоваяРегистрация.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПерепроведениеПропущено;
				КонецЕсли;
				
			КонецЕсли;
			НаборСформирован = Истина;

		КонецЦикла;
		Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
			
			ОтборНабора.Установить(ТекущийРегистратор);
			ДокументыОрганизаций.Записать(Истина);
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				ТекущийРегистратор.Метаданные(),
				ТекущийРегистратор,
				НСтр("ru = 'Пометка документа проведенным в последовательности'"));
			
		КонецЕсли;
		
		// Устанавливаем границу на начало следующего месяца.
		МоментПервогоДокументаСледующегоМесяца = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
			Организация, ДатаОкончанияПерепроведения + 1);
		Если МоментПервогоДокументаСледующегоМесяца <> Неопределено Тогда
			
			РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
				МоментПервогоДокументаСледующегоМесяца.Ссылка, МоментПервогоДокументаСледующегоМесяца.Дата, Организация);
			ТекстСобытия = НСтр("ru = 'Граница последовательности сдвинута без перепроведения на %1'");
			ТекстСобытия = СтрШаблон(ТекстСобытия, Формат(МоментПервогоДокументаСледующегоМесяца.Дата, "ДЛФ=DT"));
			ЗаписьЖурналаРегистрации(
				ИмяСобытия,
				УровеньЖурналаРегистрации.Предупреждение,
				МоментПервогоДокументаСледующегоМесяца.Ссылка.Метаданные(),
				МоментПервогоДокументаСледующегоМесяца.Ссылка,
				ТекстСобытия);

		КонецЕсли;

	Исключение
		
		ТекстПричины = СтрШаблон(НСтр("ru = 'Не удалось отметить как актуальный документ ""%1"".'"), ТекущийРегистратор);
		
		ДобавитьСообщенияВРезультатОбработки(ПараметрыПереноса, ТекстПричины, Выборка.Период,
			ДокументыОрганизаций.Метаданные(), ТекущийРегистратор);
		
		Результат.АдресХранилищаСОшибками = ПараметрыПереноса.АдресХранилищаСОшибками;			
		Возврат Результат;
		
	КонецПопытки;
	
	// Отметим как актуальные регламентные операции за период переноса границы.
	Попытка
		
		ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации()
				+ "." + ЗакрытиеМесяца.ПредставлениеОперацииПереносГраницы(ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.РегистрыСведений.НеактуальныеРегламентныеОперации,
			,
			НСтр("ru = 'Пометка регламентных операций как актуальных'"));
			
		// Отметить как актуальные регламентные операции по тем месяцам, которые закрываются.
		РегистрыСведений.НеактуальныеРегламентныеОперации.УдалитьЗаписиПрошлыхПериодов(Организация, ДатаОкончанияЗакрытияМесяца + 1);	

		// Возможно в предыдущих периодах отдельные операции вообще не выполнялись. Тогда мы не можем пометить как актуальные
		// те операции, которые идут после невыполнявшихся. Пометим их как неактуальные.
		// Например, в январе не выполнена (или выполнена с ошибкой) операция "Закрытие счета 44". Тогда ни в январе,
		// ни в феврале мы не может пометить как актуальные операции "Закрытие счетов 90,91" и "Расчет налога на прибыль".
		ДатаНачалаПереносаГраницы = Макс(
			НачалоМесяца(ДобавитьМесяц(ДатаНачалаПереносаГраницы, -1)),
			РаботаСПоследовательностями.НачалоПоследовательности(Организация).Дата);
		Пока ДатаНачалаПереносаГраницы <= ДатаОкончанияЗакрытияМесяца Цикл
			
			СтатусЗакрытияМесяца = СтатусЗакрытияМесяца(Организация, ДатаНачалаПереносаГраницы);
			Для каждого РегОперация Из СтатусЗакрытияМесяца Цикл
				
				Если Не РегОперация.Требуется
				 Или РегОперация.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено
				 Или РегОперация.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
					Продолжить;
				КонецЕсли;

				РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
					Организация, ДатаНачалаПереносаГраницы, РегОперация.НомерГруппы, РегОперация.ВидОперации);
				Прервать;			
			
			КонецЦикла; 

			ДатаНачалаПереносаГраницы = ДобавитьМесяц(ДатаНачалаПереносаГраницы, 1);
			
		КонецЦикла;

	Исключение
		
		ТекстПричины = СтрШаблон(НСтр("ru = 'Не удалось отметить как актуальные регламентные операции до %1.'"),
			НРег(Формат(Выборка.Дата, "ДФ='ММММ гггг'")));
			
		ДобавитьСообщенияВРезультатОбработки(ПараметрыПереноса, ТекстПричины, ДатаОкончанияЗакрытияМесяца,
			Метаданные.РегистрыСведений.НеактуальныеРегламентныеОперации);
		
		Результат.АдресХранилищаСОшибками = ПараметрыПереноса.АдресХранилищаСОшибками;			
		Возврат Результат;
		
	КонецПопытки;

	Результат.ПоследовательностьВосстановлена = Истина;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСообщенияВРезультатОбработки(ПараметрыПереноса, ТекстПричины, ДатаОшибки, МетаданныеОшибки, СсылкаНаОбъект = Неопределено)
			
	ЗаписьЖурналаРегистрации(
		ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		МетаданныеОшибки,
		СсылкаНаОбъект,
		ТекстПричины + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	НовоеСообщение = Новый СообщениеПользователю;
	НовоеСообщение.Текст = ТекстПричины + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'");	
	
	ТаблицаСообщений = ПроведениеСервер.НовыеСообщенияПользователю();
	
	ПроведениеСервер.ДобавитьСообщениеПользователю(
		ТаблицаСообщений, ПараметрыПереноса.Организация, НовоеСообщение, СсылкаНаОбъект, ДатаОшибки, Истина);
		
	ПараметрыОтчета = ПроведениеСервер.НовыеПараметрыОтчетаССообщениямиПользователю(
						"Перепроведение", ТаблицаСообщений);
	ПараметрыОтчета.ДатаНачала               = НачалоМесяца(ДатаОшибки);
	ПараметрыОтчета.ДатаОкончания            = КонецМесяца(ДатаОшибки);
	ПараметрыОтчета.ПроведеноДокументов      = 0;
	ПараметрыОтчета.НеУдалосьПровести        = 1;
	ТабДокумент = ПроведениеСервер.ВывестиСообщенияПользователю(ПараметрыОтчета);
		
	ПроведениеСервер.ПоместитьСообщенияПользователюВоВременноеХранилищеДляФормыОшибок(
		ТаблицаСообщений,
		ТабДокумент,
		ПараметрыПереноса.АдресХранилищаСОшибками);
	
КонецПроцедуры
	
// Проверяет, что контекст выполнения (текущее закрытие месяца) допускает выполнение операции.
//
// Параметры:
//  Операция     - СтрокаТаблицыЗначений - проверяемая операция.
//  ФинишнаяОперация - ПеречислениеСсылка.ВидыРегламентныхОпераций - выполнять операции не далее данной операции.
//  Организация  - СправочникСсылка.Организации - выполнять только по данной организации.
//  ТолькоОперацииОбособленногоПодразделения - Булево - выполнять только операции, относящиеся к конкретной органазации.
//  ФинишнаяГруппа - Число - выполнять операции не далее данной группы операций.
//
// Возвращаемое значение:
//   * Булево    - Ложь, если выполнение операции в данном контексте не допускается; Истина, если операция допускается.
//   * Неопределено - если не допускается ни проверямая, ни все последующие операции.
//
Функция ОперацияДолжнаБытьВыполнена(Операция, ФинишнаяОперация, Организация, ТолькоОперацииОбособленногоПодразделения, ФинишнаяГруппа = Неопределено)
	
	Если ФинишнаяГруппа <> Неопределено И Операция.НомерГруппы > ФинишнаяГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Операция.ВидОперации) <> Тип("ПеречислениеСсылка.ВидыРегламентныхОпераций") Тогда
		// Операция по проведению документов должна быть выполнена или пропущена до вызова процедуры
		Возврат Ложь;
	КонецЕсли;
	
	// Если передана ФинишнаяОперация, т.е. пользователь указал по какую операцию выполнять закрытие,
	// то эту операцию выполняем в любом случае, даже если она пропущена.
	Если Операция.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено
		И Операция.ВидОперации <> ФинишнаяОперация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Операция.Требуется И Операция.Состояние <> Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Операция.Организация <> Организация Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТолькоОперацииОбособленногоПодразделения И Операция.ПоОрганизацииВЦелом Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Находит операции, в которых указан одинаковый Период, Организация и ВидОперации.
// Если есть дубли, то отменяет выполнение у всех, кроме одной (предпочтительно - ссылка на которую передана).
Процедура УстранитьДубли(Период, Организация, ВидОперации, Ссылка)
	
	Дубли = Документы.РегламентнаяОперация.НайтиДубли(Период, Организация, ВидОперации, Ссылка);
	
	Если Дубли.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтмены = Документы.РегламентнаяОперация.НовыеПараметрыОтменыОперации();
	
	Выборка = Дубли.Выбрать();

	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОтменитьОперацию(,, ПараметрыОтмены);

		// Сдвигаем последовательность только для первого документа, 
		// для всех остальных она уже будет сдвинута первым документом.
		ПараметрыОтмены.СдвигатьМоментНарушенияПоследовательности = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверкиВозможностиВыполненияОперации() Экспорт
	
	ВыполненныеПроверки = Новый Структура;
	ВыполненныеПроверки.Вставить("Последовательность", Ложь);
	ВыполненныеПроверки.Вставить("СтатусПредыдущих",   Ложь);
	
	Возврат ВыполненныеПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Актуализация данных 

// Проверяет необходимость актуализации данных для закрытия месяца. Запускается как фоновое задание.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности() .
//  АдресХранилища - Строка - адрес временного хранилища, куда будет помещен результат проверки актуальности.
//
Процедура ПроверитьАктуальностьВФоне(ПараметрыЗадания, АдресХранилища) Экспорт

	Результат = ПроверитьАктуальность(ПараметрыЗадания);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Проверяет необходимость актуализации данных для закрытия месяца.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности() .
//
// Возвращаемое значение:
//   Структура   - результат проверки актуальности данных:
//                * ТребуетсяАктуализация - Булево - Истина, если данные неактуальны; если все хорошо, то Ложь.
//                * УИДЗамера - УникальныйИдентификатор - см. ОценкаПроизводительностиКлиент.НачатьЗамерВремени() .
//                * АктуализацияДоступна - Булево - см. ПравоИзмененияРегламентныхОпераций() . 
//                * АктуализацияВозможна - Булево - Истина, если актуализация не требует действий пользователя.
//                * ДатаАктуальности - Дата - в какой дате находится граница актуальности данных.
//                * ТребуетсяПолнаяАктуализация - Булево - Ложь, если вызывающий алгоритм требует актуальности лишь
//                     отдельных данных, и достаточно выполнить актуализацию отложенных расчетов;
//                     - Истина, если требуется выполнение всех операций закрытия месяца.
//
Функция ПроверитьАктуальность(ПараметрыПроверки) Экспорт

	Организация = ПараметрыПроверки.Организация;
	Период		= ПараметрыПроверки.Период;
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяАктуализация", Ложь);
	Результат.Вставить("УИДЗамера", ПараметрыПроверки.УИДЗамера);
	
	Если ПараметрыПроверки.ПроверятьКонстантуАктуальностиДанныхУчета Тогда
		// Проверка актуальности не производится, это выключена соответствующая настройка.
		Если НЕ ЗакрытиеМесяцаВызовСервера.ПроверятьАктуальность() Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Без указания организации актуализация не выполняется.
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;

	Если ПараметрыПроверки.ТребуетсяПолнаяАктуализация = Неопределено Тогда
		ТребуетсяПолнаяАктуализация = НЕ МожноАктуализироватьТолькоРасчетыСКонтрагентами(
			ПараметрыПроверки.ОтборыРасчетыСКонтрагентами,
			ПараметрыПроверки.ДанныеРасшифровки);
	Иначе
		ТребуетсяПолнаяАктуализация = ПараметрыПроверки.ТребуетсяПолнаяАктуализация;
	КонецЕсли;

	// Если период не указан, актуализируем на последний документ последовательности.
	КонецПоследовательности = РаботаСПоследовательностями.КонецПоследовательности(Организация);
	
	// Актуализация имеет смысл только при наличии документов в последовательности.
	Если КонецПоследовательности = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	КонецПериодаОтчета = ?(ЗначениеЗаполнено(Период), КонецДня(Период), КонецПоследовательности.Дата);
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, КонецПериодаОтчета);

	// Дата актуальности.
	ДатаАктуальности = Неопределено;
	
	АктуализацияВозможна = АктуализацияВозможна();

	Если ТребуетсяПолнаяАктуализация ИЛИ НЕ ИспользуетсяОтложенноеПроведение Тогда

		// Актуализация проводится только в узле перепроведения.
		Если ОбщегоНазначенияБП.ИспользуютсяПланыОбмена(Истина) Тогда
			Если НЕ РаботаСПоследовательностямиПовтИсп.ЭтоУзелПерепроведенияДокументовПоОрганизации(Организация) Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверки.АктуализироватьВесьПериод Тогда
			ПределАктуализации = КонецПериодаОтчета;
		Иначе
			// Данные должны быть актуальны на наиболее раннюю из дат:
			// - конец периода отчета
			// - конец предшествующего текущему месяца
			КонецПредыдущегоМесяца = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
			ПределАктуализации = Мин(
				КонецПериодаОтчета,
				КонецПредыдущегоМесяца);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Период) Тогда
			// Если не указан период проверки актуальности, должны быть закрыты все месяцы до предела актуализации.
			ПределАктуализацииЗакрытияМесяца = НачалоМесяца(ПределАктуализации);
		Иначе
			Если КонецДня(Период) = КонецМесяца(Период) Тогда // Последний месяц отчета должен быть закрыт.
				ПределАктуализацииЗакрытияМесяца = НачалоМесяца(Период);
			Иначе // Последний месяц отчета закрывать не нужно.
				ПределАктуализацииЗакрытияМесяца = НачалоМесяца(ДобавитьМесяц(Период, -1));
			КонецЕсли;
			// Закрытие месяца актуализируется до предела актуализации.
			ПределАктуализацииЗакрытияМесяца = Мин(ПределАктуализацииЗакрытияМесяца, НачалоМесяца(ПределАктуализации)); 
		КонецЕсли;

		МоментНачалаПоследовательности = РаботаСПоследовательностями.НачалоПоследовательности(Организация);
		
		Если МоментНачалаПоследовательности <> Неопределено Тогда // В базе есть проведенные документы.
		
			// Определение первого незакрытого периода.
			ПервыйНезакрытыйПериод = НачалоМесяца(МоментНачалаПоследовательности.Дата);
			
			ПериодРегистрации = НачалоМесяца(ПределАктуализацииЗакрытияМесяца);
			
			Пока ПериодРегистрации >= НачалоМесяца(МоментНачалаПоследовательности.Дата) Цикл
				
				Если Выполнено(Организация, ПериодРегистрации) Тогда
					ПервыйНезакрытыйПериод = ДобавитьМесяц(ПериодРегистрации, 1);
					Прервать;
				КонецЕсли;
				ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, -1);
			КонецЦикла;
			
			// Незакрытый месяц должен быть в пределах актуализируемого периода.
			Если ПервыйНезакрытыйПериод > ПределАктуализацииЗакрытияМесяца Тогда
				ПервыйНезакрытыйПериод = Неопределено;
			КонецЕсли;
			
			МоментНарушенияПоследовательности = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
				Организация, ПределАктуализации);

			МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
				Организация, ПределАктуализации);
				
			// Выберем наиболее ранний момент времени.
			МоментНарушенияПоследовательности = РаботаСПоследовательностями.МинМоментВремени(
				МоментНарушенияПоследовательности,
				МоментАктуальностиОтложенныхРасчетов);
			
			// Момент нарушения последовательности должен находиться до предела актуализации.
			Если МоментНарушенияПоследовательности <> Неопределено Тогда
				Если МоментНарушенияПоследовательности.Дата > ПределАктуализации Тогда
					МоментНарушенияПоследовательности = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			// Вычисление даты актуальности.
			Если МоментНарушенияПоследовательности = Неопределено Тогда
				Если ПервыйНезакрытыйПериод <> Неопределено Тогда
					ДатаАктуальности = ДатаАктуальностиДляНезакрытогоПериода(Организация, ПервыйНезакрытыйПериод);
				КонецЕсли;
			Иначе
				Если ПервыйНезакрытыйПериод = Неопределено Тогда
					ДатаАктуальности = МоментНарушенияПоследовательности.Дата;
				ИначеЕсли КонецМесяца(ПервыйНезакрытыйПериод) < МоментНарушенияПоследовательности.Дата Тогда
					ДатаАктуальности = ДатаАктуальностиДляНезакрытогоПериода(Организация, ПервыйНезакрытыйПериод);
				Иначе
					ДатаАктуальности = ДатаАктуальностиДляНезакрытогоПериода(Организация, ПервыйНезакрытыйПериод);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	Иначе
		// Полной актуализации не требуется, достаточно актуализировать отложенные расчеты с контрагентами.
		МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
			Организация,
			КонецПериодаОтчета,
			ПараметрыПроверки.ОтборыРасчетыСКонтрагентами.Контрагенты,
			ПараметрыПроверки.ОтборыРасчетыСКонтрагентами.ДоговорыКонтрагентов);
			
		Если МоментАктуальностиОтложенныхРасчетов <> Неопределено Тогда
			ДатаАктуальности = МоментАктуальностиОтложенныхРасчетов.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда // Требуется актуализация итоговых данных.
	
		Результат.ТребуетсяАктуализация = Истина;
		Результат.Вставить("АктуализацияДоступна", 	ПравоИзмененияРегламентныхОпераций(Организация));
		Результат.Вставить("ДатаАктуальности", 		ДатаАктуальности);
		Результат.Вставить("АктуализацияВозможна", 			АктуализацияВозможна);
		Результат.Вставить("ТребуетсяПолнаяАктуализация", 	ТребуетсяПолнаяАктуализация);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаАктуальностиДляНезакрытогоПериода(Организация, ПервыйНезакрытыйПериод)
	
	// Проверяем дату нарушения последовательности для первого незакрытого периода.
	МоментНарушенияПоследовательностиВНезакрытомПериоде = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
		Организация, КонецМесяца(ПервыйНезакрытыйПериод));
		
	Если МоментНарушенияПоследовательностиВНезакрытомПериоде <> Неопределено Тогда
		ДатаАктуальности = Мин(КонецМесяца(ПервыйНезакрытыйПериод), МоментНарушенияПоследовательностиВНезакрытомПериоде.Дата);
	Иначе
		ДатаАктуальности = КонецМесяца(ПервыйНезакрытыйПериод);
	КонецЕсли;

	Возврат ДатаАктуальности;
	
КонецФункции

// Возвращает Истина, если для текущего отчета достаточно актуализировать только отложенные расчеты с контрагентами.
// 
// Параметры:
//	ОтборыРасчетыСКонтрагентами - Структура - см. БухгалтерскиеОтчетыКлиентСервер.ОпределитьПараметрыОтчетаРасчетыСКонтрагентами().
//	ДанныеРасшифровки - ХранилищеЗначения, Структура, Неопределено - Структура с данными расшифровки отчета, сохраняемая
//                      при заполнении отчета. Содержит ключи:
//						* ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных
//						* Объект - Структура - Содержит значения реквизитов отчета
//
Функция МожноАктуализироватьТолькоРасчетыСКонтрагентами(ОтборыРасчетыСКонтрагентами, ДанныеРасшифровки)

	Если Не ЗначениеЗаполнено(ОтборыРасчетыСКонтрагентами) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ОтборыРасчетыСКонтрагентами.ЕстьВалюта Тогда
		// Отложенные расчеты поддерживаются только для взаиморасчетов в рублях.
		ДанныеРасшифровкиДляПроверки = ?(ТипЗнч(ДанныеРасшифровки) = Тип("ХранилищеЗначения"),
			ДанныеРасшифровки.Получить(), ДанныеРасшифровки);
		Если ДанныеРасшифровкиДляПроверки <> Неопределено Тогда
			// Проанализируем, есть ли в отчете фактически данные по валюте.
			Если БухгалтерскиеОтчеты.ОтчетСодержитДанныеПоВалюте(ДанныеРасшифровкиДляПроверки) Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// Отборы по счетам.
	Если ОтборыРасчетыСКонтрагентами.Счета.Количество() > 0 Тогда
		
		СчетаВзаиморасчетов = УчетВзаиморасчетовОтложенноеПроведение.СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение();
		
		Для Каждого Счет Из ОтборыРасчетыСКонтрагентами.Счета Цикл
			Если СчетаВзаиморасчетов.Найти(Счет) = Неопределено Тогда
				// Есть счета, отличные от счетов взаиморасчетов с отложенным проведением.
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;

		Возврат Истина;

	КонецЕсли;

	// Отборы по видам субконто.
	Если ОтборыРасчетыСКонтрагентами.ВидыСубконто.Количество() > 0 Тогда
	
		ЕстьСубконтоКонтрагенты = Ложь;
		ЕстьСубконтоДоговоры    = Ложь;
	
		Для Каждого ВидСубконто Из ОтборыРасчетыСКонтрагентами.ВидыСубконто Цикл
			Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				ЕстьСубконтоКонтрагенты = Истина;
			ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				ЕстьСубконтоДоговоры = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьСубконтоКонтрагенты И НЕ ЕстьСубконтоДоговоры Тогда
			// Отчет по иным видам субконто.
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;

	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция Выполнено(Организация, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	// Получение детального статуса закрытия месяца.
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(
		МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется = ИСТИНА";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда // Закрытие месяца не требуется.
		Возврат Истина;
	КонецЕсли;
	
	СтатусыНевыполненныхОпераций = Новый Массив;
	СтатусыНевыполненныхОпераций.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено);
	СтатусыНевыполненныхОпераций.Добавить(Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	
	Запрос.УстановитьПараметр("СтатусыНевыполненныхОпераций", СтатусыНевыполненныхОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Статус.Ссылка КАК Ссылка
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	Статус.Требуется = ИСТИНА
	|	И Статус.Состояние В(&СтатусыНевыполненныхОпераций)";
	РезультатНевыполненныеОперации = Запрос.Выполнить();
	
	СпискиВидовОпераций = ЗакрытиеМесяца.СпискиВидовОперацийОбщийИПоОрганизацииВцелом(МенеджерВременныхТаблиц);
	
	Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	
	// Получение неактуальных операций.
	ОтборОпераций = ЗакрытиеМесяца.ОтборУстаревшихОпераций();
	ОтборОпераций.Период                          = Период;
	ОтборОпераций.Организации                     = Организации;
	ОтборОпераций.ГоловнаяОрганизация             = ГоловнаяОрганизация;
	ОтборОпераций.ВидыОпераций                    = СпискиВидовОпераций.ВидыОпераций;
	ОтборОпераций.ВидыОперацийПоОрганизацииВцелом = СпискиВидовОпераций.ПоОрганизацииВцелом;
	
	ЗакрытиеМесяца.СоздатьУстаревшиеОперации(МенеджерВременныхТаблиц, ОтборОпераций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстаревшиеОперации.ВидОперации
	|ИЗ
	|	УстаревшиеОперации";
	РезультатУстаревшиеОперации = Запрос.Выполнить();
	
	Выполнено = РезультатНевыполненныеОперации.Пустой() И РезультатУстаревшиеОперации.Пустой();
	
	Возврат Выполнено;
 	
КонецФункции

Функция АктуализироватьЗаПериод(ПараметрыЗадания)
	
	Организация                  = ПараметрыЗадания.Организация;
	Период                       = ПараметрыЗадания.Период;
	ОтборыРасчетыСКонтрагентами  = ПараметрыЗадания.ОтборыРасчетыСКонтрагентами;
	УникальныйИдентификаторФормы = ПараметрыЗадания.УникальныйИдентификаторФормы;
	ЭтоЗакрытиеМесяца            = ПараметрыЗадания.ЭтоЗакрытиеМесяца;
	Если ПараметрыЗадания.ДанныеРасшифровки <> Неопределено Тогда
		ДанныеРасшифровки = ПараметрыЗадания.ДанныеРасшифровки.Получить();
	КонецЕсли;
	
	ТребуетсяПолнаяАктуализация = НЕ МожноАктуализироватьТолькоРасчетыСКонтрагентами(ОтборыРасчетыСКонтрагентами, ДанныеРасшифровки);
	
	Если ЭтоЗакрытиеМесяца Тогда
		КонецПериодаОтчета = КонецМесяца(Период);
	ИначеЕсли ЗначениеЗаполнено(Период) Тогда
		КонецПериодаОтчета = КонецДня(Период);
	Иначе
		КонецПоследовательности = РаботаСПоследовательностями.КонецПоследовательности(Организация);
		КонецПериодаОтчета = КонецПоследовательности.Дата;
	КонецЕсли;
	
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, КонецПериодаОтчета);
	
	РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	РезультатАктуализации.ПолнаяАктуализация   = ТребуетсяПолнаяАктуализация Или НЕ ИспользуетсяОтложенноеПроведение;
	
	Если ИспользуетсяОтложенноеПроведение И НЕ ТребуетсяПолнаяАктуализация Тогда
		// Полной актуализации не требуется, достаточно выполнить отложенные расчеты с контрагентами.
		
		ПараметрыРасчета = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
		ПараметрыРасчета.Организация 	= Организация;
		ПараметрыРасчета.ДатаОкончания 	= КонецПериодаОтчета; // Актуализируем до конца периода отчета.
		ПараметрыРасчета.Контрагент		= ОтборыРасчетыСКонтрагентами.Контрагенты;
		ПараметрыРасчета.ДоговорКонтрагента 		= ОтборыРасчетыСКонтрагентами.ДоговорыКонтрагентов;
		ПараметрыРасчета.АдресХранилищаСОшибками	= ПараметрыЗадания.АдресХранилищаСОшибками;
		ПараметрыРасчета.СообщатьПрогрессВыполнения	= Истина;
		
		РезультатРасчета = УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
		
		РезультатАктуализации.Выполнено = РезультатРасчета.КоличествоДоговоровСОшибками = 0;
		РезультатАктуализации.ВывестиИнформациюУведомлений = НЕ РезультатАктуализации.Выполнено;
		РезультатАктуализации.Вставить("ПределАктуализации", КонецПериодаОтчета);
		
		Если НЕ РезультатАктуализации.Выполнено Тогда
			РезультатАктуализации.Вставить("АдресХранилищаСОшибками", ПараметрыЗадания.АдресХранилищаСОшибками);
		КонецЕсли;
		
		Возврат РезультатАктуализации;
		
	ИначеЕсли Не ЭтоЗакрытиеМесяца И НЕ АктуализацияВозможна() Тогда
	
		// В обычном случае в эту ветку не должны заходить.
		// Такое может случиться, если между вызовами ПроверитьАктуальность() и АктуализироватьВФоне()
		// произошли какие-то изменения в настройках отчета и/или организации.
		// Сообщим об этом пользователю.
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Автоматическая актуализация данных для %1 не поддерживается. Необходимо использовать ""Закрытие месяца"".'"),
			Организация);
		
		СообщенияПользователю = Новый Массив;
		СообщенияПользователю.Добавить(ТекстСообщения);
		РезультатАктуализации.Выполнено = Ложь;
		РезультатАктуализации.ВывестиИнформациюУведомлений = Истина;
		РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
		
		Возврат РезультатАктуализации;
		
	КонецЕсли;
	
	ДанныеЗаблокированы = Ложь;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		ИЛИ Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияОрганизацииВключена(Организация) Тогда
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Организация,, УникальныйИдентификаторФормы);
			ДанныеЗаблокированы = Истина;
			
		Исключение
			
			СообщенияПользователю = Новый Массив;
			СообщенияПользователю.Добавить(НСтр("ru='Не удалось заблокировать данные для актуализации.'"));
			РезультатАктуализации.Выполнено = Ложь;
			РезультатАктуализации.ВывестиИнформациюУведомлений = Истина;
			РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
			
			Возврат РезультатАктуализации;
			
		КонецПопытки;
		
	КонецЕсли;
		
	// Требуется полное перепроведение документов и закрытие месяца.
	
	Если ПараметрыЗадания.АктуализироватьВесьПериод Тогда
		ПределАктуализации = КонецПериодаОтчета;
	Иначе
		// Данные должны быть актуальны на наиболее раннюю из дат:
		// - конец периода отчета
		// - конец предшествующего текущему месяца
		КонецПредыдущегоМесяца = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1));
		ПределАктуализации = Мин(
			КонецПериодаОтчета,
			КонецПредыдущегоМесяца);
	КонецЕсли;
	
	МоментНарушенияПоследовательности = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
		Организация, ПределАктуализации);
	МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
		Организация, ПределАктуализации);
		
	ДатаНачалаПерепроведения = ПределАктуализации + 1;
	Если МоментНарушенияПоследовательности <> Неопределено Тогда
		ДатаНачалаПерепроведения = Мин(ДатаНачалаПерепроведения, МоментНарушенияПоследовательности.Дата);		
	КонецЕсли;
	Если МоментАктуальностиОтложенныхРасчетов <> Неопределено Тогда
		ДатаНачалаПерепроведения = Мин(ДатаНачалаПерепроведения, МоментАктуальностиОтложенныхРасчетов.Дата);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Или ЭтоЗакрытиеМесяца Тогда
		// Если не указан период проверки актуальности, должны быть закрыты все месяцы до предела актуализации.
		ПределАктуализацииЗакрытияМесяца = КонецМесяца(ПределАктуализации);
	Иначе
		Если КонецДня(Период) = КонецМесяца(Период) Тогда // Последний месяц отчета должен быть закрыт.
			ПределАктуализацииЗакрытияМесяца = КонецМесяца(Период);
		Иначе // Последний месяц отчета закрывать не нужно.
			ПределАктуализацииЗакрытияМесяца = КонецМесяца(ДобавитьМесяц(Период, -1));
		КонецЕсли;
		// Закрытие месяца актуализируется до предела актуализации.
		ПределАктуализацииЗакрытияМесяца = Мин(ПределАктуализацииЗакрытияМесяца, КонецДня(ПределАктуализации)); 
	КонецЕсли;
	
	ПараметрыПроверкиАктуальности = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверкиАктуальности.Организация 	               = Организация;
	ПараметрыПроверкиАктуальности.Период		               = ПределАктуализации;
	ПараметрыПроверкиАктуальности.УникальныйИдентификаторФормы = УникальныйИдентификаторФормы;
	ПараметрыПроверкиАктуальности.ПроверятьКонстантуАктуальностиДанныхУчета	= ПараметрыЗадания.ПроверятьКонстантуАктуальностиДанныхУчета;
	ПараметрыПроверкиАктуальности.ОтборыРасчетыСКонтрагентами  = ОтборыРасчетыСКонтрагентами;
	ПараметрыПроверкиАктуальности.ДанныеРасшифровки 		   = ДанныеРасшифровки;
	ПараметрыПроверкиАктуальности.ТребуетсяПолнаяАктуализация  = ТребуетсяПолнаяАктуализация;
	ПараметрыПроверкиАктуальности.АктуализироватьВесьПериод    = ПараметрыЗадания.АктуализироватьВесьПериод;
	РезультатПроверкиАктуальности = ПроверитьАктуальность(ПараметрыПроверкиАктуальности);
	
	Если РезультатПроверкиАктуальности.Свойство("АктуализацияДоступна")
	   И Не РезультатПроверкиАктуальности.АктуализацияДоступна Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У пользователя нет прав на закрытие месяца.
					|%1'"), Организация);
		СообщенияПользователю = Новый Массив;
		СообщенияПользователю.Добавить(ТекстСообщения);
		РезультатАктуализации.Выполнено = Ложь;
		РезультатАктуализации.ВывестиИнформациюУведомлений = Истина;
		РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
		
	    ДатаАктуальности = ПределАктуализации + 1;
		
	ИначеЕсли Не РезультатПроверкиАктуальности.ТребуетсяАктуализация Тогда // данные уже актуальны
		
		ДатаАктуальности = ПределАктуализации + 1;
		РезультатАктуализации.Выполнено = Истина;
		
	Иначе
		
		ДатаАктуальности = РезультатПроверкиАктуальности.ДатаАктуальности;
		
	КонецЕсли;
	
	Если Не ЭтоЗакрытиеМесяца Тогда
		// Вычисление количества выполняемых действий.
		КоличествоДействий = 0;
		ПериодРегистрации = ДатаАктуальности;
		Пока НачалоМесяца(ПериодРегистрации) <= НачалоМесяца(ПределАктуализации) Цикл
			КоличествоДействий = КоличествоДействий + 2; // Каждый месяц это два действия: восстановление последовательности и закрытие месяца.
			ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, 1);
		КонецЦикла;
		
		СчетчикДействий = 1;
		
	КонецЕсли;
	
	РезультатАктуализации.Выполнено = Истина;
	РезультатАктуализации.Вставить("ПолнаяАктуализация", ТребуетсяПолнаяАктуализация Или НЕ ИспользуетсяОтложенноеПроведение);
	РезультатАктуализации.Вставить("ПределАктуализации", ПределАктуализации);

	ОтборОшибочныхОпераций = Новый Структура("Состояние", Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками);
	ВыполненныеПроверки = ПроверкиВозможностиВыполненияОперации();
	
	Пока ДатаАктуальности <= ПределАктуализации Цикл

		Если КонецМесяца(ДатаАктуальности) >= ДатаНачалаПерепроведения Тогда
			// В текущем месяце нужно восстанавливать последовательность, а не только перевыполнить рег.операции.
			ПараметрыПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
			ПараметрыПерепроведения.Организация = Организация; 
			Если МоментНарушенияПоследовательности <> Неопределено Тогда
				ПараметрыПерепроведения.МоментНачала = МоментНарушенияПоследовательности;
			Иначе
				ПараметрыПерепроведения.МоментНачала = Новый МоментВремени(НачалоМесяца(ДатаАктуальности), Неопределено);
			КонецЕсли;
			Если МоментАктуальностиОтложенныхРасчетов <> Неопределено Тогда
				ПараметрыПерепроведения.МоментНачалаАктуализацииРасчетовСКонтрагентами = МоментАктуальностиОтложенныхРасчетов;
			ИначеЕсли ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, НачалоМесяца(ДатаАктуальности)) Тогда
				ПараметрыПерепроведения.МоментНачалаАктуализацииРасчетовСКонтрагентами = Новый МоментВремени(НачалоМесяца(ДатаАктуальности), Неопределено);
			КонецЕсли;
			ПараметрыПерепроведения.ДатаОкончания = КонецМесяца(ДатаАктуальности);
			
			ПараметрыПерепроведения.УникальныйИдентификаторФормы = УникальныйИдентификаторФормы;
			ПараметрыПерепроведения.ЭтоЗакрытиеМесяца            = Истина;
			ПараметрыПерепроведения.АдресХранилищаСОшибками      = ПараметрыЗадания.АдресХранилищаСОшибками;
			ПараметрыПерепроведения.СообщатьПрогрессВыполнения   = ЭтоЗакрытиеМесяца;
			ПараметрыПерепроведения.ДанныеЗаблокированы          = ДанныеЗаблокированы;
			ПараметрыПерепроведения.ОстанавливатьсяПоОшибке      = ЭтоЗакрытиеМесяца;
			
			РезультатОперации = Обработки.ГрупповоеПерепроведениеДокументов.ВыполнитьПерепроведение(ПараметрыПерепроведения);
			
			РезультатАктуализации.Выполнено = РезультатОперации.НеУдалосьПровести = 0
					И РезультатОперации.НеУдалосьАктуализировать = 0;
			РезультатАктуализации.ВывестиИнформациюУведомлений = РезультатОперации.ВывестиИнформациюУведомлений;
			Если РезультатАктуализации.ВывестиИнформациюУведомлений Тогда
				РезультатАктуализации.Вставить("АдресХранилищаСОшибками", РезультатОперации.АдресХранилищаСОшибками);
			КонецЕсли;
			
			Если Не РезультатАктуализации.Выполнено Тогда
				
				Если ЭтоЗакрытиеМесяца Тогда
					
					РезультатАктуализации.Вставить("ПоследовательностьВосстановлена", Ложь);
					РезультатАктуализации.Вставить("АдресХранилищаСОшибками", РезультатОперации.АдресХранилищаСОшибками);
					РезультатАктуализации.Вставить("ДополнительныеПараметры", ПараметрыЗадания.ДополнительныеПараметры);
					
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
			
			// В следующий раз надо начинать с 1 числа очередного месяца.
			МоментНарушенияПоследовательности = Неопределено;
			МоментАктуальностиОтложенныхРасчетов = Неопределено;
				
		КонецЕсли;
		
		Если Не ЭтоЗакрытиеМесяца Тогда
			// Индикация прогресса.
			СчетчикДействий = СчетчикДействий + 1;
			ДлительныеОперации.СообщитьПрогресс(Окр(СчетчикДействий / КоличествоДействий * 100, 0));
		КонецЕсли;
		
		// Закрытие месяца.
		Если ДатаАктуальности <= ПределАктуализацииЗакрытияМесяца Тогда
			
			СтатусЗакрытияМесяца = СтатусЗакрытияМесяца(Организация, НачалоМесяца(ДатаАктуальности));
			Попытка
				РезультатОперации = ВыполнитьЗакрытиеМесяца(
					НачалоМесяца(ДатаАктуальности),
					Организация,
					СтатусЗакрытияМесяца,
					Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
					Неопределено,
					Ложь,
					ВыполненныеПроверки,
					ЭтоЗакрытиеМесяца);
			Исключение
				
				РезультатАктуализации.Выполнено = Ложь;
				РезультатАктуализации.ВывестиИнформациюУведомлений = Истина;
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				СообщенияПользователю = ОбработатьСообщенияПользователю(СообщенияПользователю);
				СообщенияПользователю.Добавить(ОписаниеОшибки());
				РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
				Прервать;
				
			КонецПопытки;
			
			РезультатАктуализации.Выполнено = РезультатОперации.Выполнено;
			Если ЭтоЗакрытиеМесяца Тогда
				РезультатАктуализации.Вставить("Операции", РезультатОперации.Операции);
			КонецЕсли;
			Если Не РезультатАктуализации.Выполнено Тогда
				
				Если Не ЭтоЗакрытиеМесяца Тогда
					
					ОшибочныеОперации = РезультатОперации.Операции.НайтиСтроки(ОтборОшибочныхОпераций);
					РезультатАктуализации.ВывестиИнформациюУведомлений = Истина;
					РезультатАктуализации.Вставить("ПериодРегистрации", НачалоМесяца(ДатаАктуальности));
					Если РезультатОперации.Операции.Количество() > 0 Тогда
						РезультатАктуализации.Вставить("ВидОперации", РезультатОперации.Операции[0].ВидОперации);
					КонецЕсли;
					Если ОшибочныеОперации.Количество() > 0 Тогда
						РезультатАктуализации.Вставить("РегламентнаяОперацияСОшибками", ОшибочныеОперации[0].Ссылка);
					КонецЕсли;
					СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
					РезультатАктуализации.Вставить("СообщенияПользователю", ОбработатьСообщенияПользователю(СообщенияПользователю));
					
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЭтоЗакрытиеМесяца Тогда
			// Индикация прогресса.
			СчетчикДействий = СчетчикДействий + 1;
			ДлительныеОперации.СообщитьПрогресс(Окр(СчетчикДействий / КоличествоДействий * 100, 0));
		КонецЕсли;
		
		// В следующий раз надо начинать с 1 числа очередного месяца.
		ДатаАктуальности = НачалоМесяца(ДобавитьМесяц(ДатаАктуальности, 1));
		
	КонецЦикла;
	
	Если ДанныеЗаблокированы Тогда
		РазблокироватьДанныеДляРедактирования(Организация, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат РезультатАктуализации;
	
КонецФункции

// Выполняет перепроведение документов и выполнение регламентных операций.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации()
//  АдресХранилища - Строка - для возврата результата.
//
Процедура АктуализироватьВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	РезультатАктуализации = АктуализироватьЗаПериод(ПараметрыЗадания);
	РезультатАктуализации.АдресХранилища       = АдресХранилища;
	РезультатАктуализации.ИдентификаторЗадания = ПараметрыЗадания.ИдентификаторЗадания;	
	
	ПоместитьВоВременноеХранилище(РезультатАктуализации, АдресХранилища);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("АктуализацияДанныхВыполненаАктуализацияЗаПериод", ВремяНачала);
	
КонецПроцедуры

// Выполняет только регламентные операции, поставляющие данные для расчета налога.
//
// Параметры:
//  ПараметрыЗадания - Структура - см. ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации()
//  АдресХранилища - Строка - для возврата результата.
//
Процедура АктуализироватьВФонеДляРасчетаНалога(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Организация = ПараметрыЗадания.Организация;
	ГраницаАктуализацииНачало = ПараметрыЗадания.ГраницаАктуализацииНачало;
	ГраницаАктуализацииКонец  = КонецМесяца(ПараметрыЗадания.Период);
	
	РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	РезультатАктуализации.АктуализацияДляРасчетаНалога = Истина;
	РезультатАктуализации.Вставить("ПериодРегистрации",  ГраницаАктуализацииНачало);
	РезультатАктуализации.Вставить("ПределАктуализации", ГраницаАктуализацииКонец);
	
	Если Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияОрганизацииВключена(Организация) Тогда
		// В режиме интеграции не допускаем запуск двух быстрых актуализаций одновременно.
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация,, ПараметрыЗадания.УникальныйИдентификаторФормы);
		Исключение
			СообщенияПользователю = Новый Массив;
			СообщенияПользователю.Добавить(НСтр("ru='Не удалось заблокировать данные для актуализации.'"));
			РезультатАктуализации.Выполнено = Ложь;
			РезультатАктуализации.ВывестиИнформациюУведомлений = Истина;
			РезультатАктуализации.Вставить("СообщенияПользователю", СообщенияПользователю);
			
			Если ЗначениеЗаполнено(АдресХранилища) Тогда // помещаем по переданному адресу
				ПоместитьВоВременноеХранилище(РезультатАктуализации, АдресХранилища);
			Иначе // возвращаем адрес, куда поместили
				АдресХранилища = ПоместитьВоВременноеХранилище(РезультатАктуализации);
			КонецЕсли;
			
			ОценкаПроизводительности.ЗакончитьЗамерВремени("АктуализацияДанныхВыполненаАктуализацияРасчетаНалога", ВремяНачала);
			
			Возврат;
		КонецПопытки
	КонецЕсли;
	
	ОперацииДляРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги);
	
	Если УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ГраницаАктуализацииКонец) Тогда
		ОперацииДляРасчета.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН);
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлательщикЕНВД(Организация, ГраницаАктуализацииКонец) Тогда
		ОперацииДляРасчета.Добавить(Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД);
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		ОперацииДляРасчета.Добавить(Перечисления.ВидыРегламентныхОпераций.НачислениеСтраховыхВзносовИП);
	КонецЕсли;
	
	// Получаем список существующих регламентных операций за период.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",               ПараметрыЗадания.Организация);
	Запрос.УстановитьПараметр("ГраницаАктуализацииКонец",  ГраницаАктуализацииКонец);
	Запрос.УстановитьПараметр("ГраницаАктуализацииНачало", ГраницаАктуализацииНачало);
	Запрос.УстановитьПараметр("ОперацииДляРасчета",        ОперацииДляРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) КАК КонецКвартала,
	|	РегламентнаяОперация.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РасчетРасходовУменьшающихОтдельныеНалоги)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексОперации,
	|	РегламентнаяОперация.Ссылка КАК Операция
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Организация = &Организация
	|	И НЕ РегламентнаяОперация.ПометкаУдаления
	|	И РегламентнаяОперация.Дата МЕЖДУ &ГраницаАктуализацииНачало И &ГраницаАктуализацииКонец
	|	И РегламентнаяОперация.ВидОперации В(&ОперацииДляРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонецКвартала,
	|	ИндексОперации";
	
	СуществующиеОперации = Запрос.Выполнить().Выгрузить();
	
	МесяцевПериода = Год(ГраницаАктуализацииКонец) * 12 + Месяц(ГраницаАктуализацииКонец);
	МесяцевПериода = МесяцевПериода - Год(ГраницаАктуализацииНачало) * 12 - Месяц(ГраницаАктуализацииНачало) + 1;
	КварталовПериода = Цел(МесяцевПериода / 3);
	КоличествоДействий = ОперацииДляРасчета.Количество() * КварталовПериода;
	АктуализируемыйКвартал = КонецКвартала(ГраницаАктуализацииНачало);
	ОтборОперации = Новый Структура("КонецКвартала, ВидОперации");

	ПараметрыПроверок = ПроверкиВозможностиВыполненияОперации();
	ПараметрыПроверок.Последовательность = Истина; // не выполнять контроль границы последовательности
	ПараметрыПроверок.СтатусПредыдущих   = Истина; // не выполнять контроль предшествующих рег.операций
	
	Если СуществующиеОперации.Количество() > 0 Тогда
		// Проверка конфликта двух быстрых актуализаций.
		Попытка
			ЗаблокироватьДанныеДляРедактирования(СуществующиеОперации[0].Операция);
		Исключение
			Если ЗначениеЗаполнено(АдресХранилища) Тогда // помещаем по переданному адресу
				ПоместитьВоВременноеХранилище(РезультатАктуализации, АдресХранилища);
			Иначе // возвращаем адрес, куда поместили
				АдресХранилища = ПоместитьВоВременноеХранилище(РезультатАктуализации);
			КонецЕсли;
			ОценкаПроизводительности.ЗакончитьЗамерВремени("АктуализацияДанныхВыполненаАктуализацияРасчетаНалога", ВремяНачала);
			Возврат;
		КонецПопытки;
		РазблокироватьДанныеДляРедактирования(СуществующиеОперации[0].Операция);
		
	КонецЕсли;
	
	СчетчикДействий = 0;
	Пока АктуализируемыйКвартал <= ГраницаАктуализацииКонец Цикл
		
		ОтборОперации.КонецКвартала = АктуализируемыйКвартал;
		
		Для каждого ВидОперации Из ОперацииДляРасчета Цикл
		
			ОтборОперации.ВидОперации = ВидОперации;
			ИскомаяОперация = СуществующиеОперации.НайтиСтроки(ОтборОперации);
			Если ИскомаяОперация.Количество() > 0 Тогда // используем имеющуюся операцию
				Операция = ИскомаяОперация[0].Операция;
				СуществующиеОперации.Удалить(ИскомаяОперация[0]);
			Иначе // создаем новую операцию
				Операция = Неопределено;
			КонецЕсли;
			
			Результат = ВыполнитьРегламентнуюОперацию(
				НачалоМесяца(АктуализируемыйКвартал),
				Организация,
				ВидОперации,
				Операция,
				Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
				ПараметрыПроверок);
				
			РезультатАктуализации.Выполнено = Не Результат.Отказ;
			
			Если Не РезультатАктуализации.Выполнено Тогда
				РезультатАктуализации.ВывестиИнформациюУведомлений = Истина;
				РезультатАктуализации.Вставить("ВидОперации", ВидОперации);
				РезультатАктуализации.Вставить("ПериодРегистрации", НачалоМесяца(АктуализируемыйКвартал));
				СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
				РезультатАктуализации.Вставить("СообщенияПользователю", ОбработатьСообщенияПользователю(СообщенияПользователю));
				Если РезультатАктуализации.СообщенияПользователю.Количество() = 0 // вывод сообщений привязан к операции
				   И ЗначениеЗаполнено(Результат.Ссылка) Тогда
					РезультатАктуализации.Вставить("РегламентнаяОперацияСОшибками", Результат.Ссылка);
				КонецЕсли;
				Прервать;
			КонецЕсли;
			
			СчетчикДействий = СчетчикДействий + 1;
			ДлительныеОперации.СообщитьПрогресс(Окр(СчетчикДействий / КоличествоДействий * 100));
		
		КонецЦикла;
		
		Если Не РезультатАктуализации.Выполнено Тогда
			Прервать;
		КонецЕсли;
		
		АктуализируемыйКвартал = КонецМесяца(ДобавитьМесяц(АктуализируемыйКвартал, 3));
		
	КонецЦикла;
	
	РазблокироватьДанныеДляРедактирования(Организация, ПараметрыЗадания.УникальныйИдентификаторФормы);
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда // помещаем по переданному адресу
		ПоместитьВоВременноеХранилище(РезультатАктуализации, АдресХранилища);
	Иначе // возвращаем адрес, куда поместили
		АдресХранилища = ПоместитьВоВременноеХранилище(РезультатАктуализации);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("АктуализацияДанныхВыполненаАктуализацияРасчетаНалога", ВремяНачала);
	
КонецПроцедуры

Функция СтатусЗакрытияМесяца(Организация, Период) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем детальный статус закрытия месяца
	ЗакрытиеМесяца.СоздатьДетальныйСтатусЗакрытияМесяца(МенеджерВременныхТаблиц, Период, Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ДетальныйСтатусЗакрытияМесяца КАК Статус
	|ГДЕ
	|	(Статус.Требуется
	|			ИЛИ Статус.Устарела
	|			ИЛИ Статус.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Статус.ВидОперации.Порядок";
	СтатусЗакрытияМесяца = Запрос.Выполнить().Выгрузить();
	
	Возврат СтатусЗакрытияМесяца;
	
КонецФункции

Функция АктуализироватьОстатки(ПараметрыКорректировкиСтоимости) Экспорт
	
	ВыполненныеПроверки = ПроверкиВозможностиВыполненияОперации();
	ВыполненныеПроверки.Последовательность = Истина;
	ВыполненныеПроверки.СтатусПредыдущих = Истина;
	
	РезультатКорректировки = ВыполнитьРегламентнуюОперацию(
		ПараметрыКорректировкиСтоимости.Период, 
		ПараметрыКорректировкиСтоимости.Организация, 
		ПараметрыКорректировкиСтоимости.ВидОперации, 
		ПараметрыКорректировкиСтоимости.Ссылка,
		Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено,
		ВыполненныеПроверки);
	
	Возврат РезультатКорректировки;
	
КонецФункции

Процедура ПрочитатьРезультатЗаполнения(АдресХранилища, РезультатЗаполнения, Объект) Экспорт
	
	// Результат закрытия подготовлен в ЗаполнитьПоОстаткам() модуля менеджера документа.
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
		
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("ОткрытьФормуОшибки") Тогда
		Возврат;
	КонецЕсли;
		
	РезультатЗаполнения.ОткрытьФормуОшибки             = Результат.ОткрытьФормуОшибки;
	РезультатЗаполнения.ОперацияКорректировкаСтоимости = Результат.ОперацияКорректировкаСтоимости;
	
	// Переносим строки напрямую в табличную часть документа.
	Для каждого ЭлементРезультата Из Результат Цикл
		Если НЕ СтрНачинаетсяС(ЭлементРезультата.Ключ, "Таблица")
			Или ТипЗнч(ЭлементРезультата.Значение) <> Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТабличнойЧасти = Сред(ЭлементРезультата.Ключ, 8); // После слова Таблица.
		Объект[ИмяТабличнойЧасти].Загрузить(ЭлементРезультата.Значение);
	
	КонецЦикла;
	
КонецПроцедуры

// СЕРВИС

// Проверяет право пользователя на выполнение операций закрытия месяца.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, право на закрытие месяца по которой проверяется.
//
// Возвращаемое значение:
//   Булево      - Истина, если пользователь может выполнять операции закрытия месяца; иначе Ложь.
//
Функция ПравоИзмененияРегламентныхОпераций(Организация = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
		ОрганизацияДоступна = ДоступныеОрганизации.Найти(Организация) <> Неопределено;
		Если Не ОрганизацияДоступна Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	
КонецФункции

// Проверяет, что актуализацию можно выполнить без участия пользователя.
//
// Возвращаемое значение:
//   Булево      - Истина, если актуализация может быть выполнена полностью автоматически;
//               - Ложь, если пользователь должен открыть обработку ЗакрытиеМесяца.
//
Функция АктуализацияВозможна() Экспорт
	
	// Можно отказаться от актуализации,
	// установив флажок "Пошаговое выполнение регламентных операций" в настройках проведения документов.
	
	Если Константы.ПошаговоеВыполнениеРегламентныхОпераций.Получить() Тогда 
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСообщенияПользователю(СообщенияПользователю)
	
	Результат = Новый Массив;
	
	Если СообщенияПользователю = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого Сообщение Из СообщенияПользователю Цикл
		
		ПозицияСлужебнойПодстроки = СтрНайти(Сообщение.Текст, "{СтандартныеПодсистемы.ДлительныеОперации}");
		Если ПозицияСлужебнойПодстроки <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Найти(Сообщение.Текст) = Неопределено Тогда
			Результат.Добавить(Сообщение.Текст);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли
