#Область ПеременныеФормы

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиПодключена = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	УстановитьОтборыПриСозданииНаСервере(Параметры);
	
	МожноРедактироватьБанк = ПравоДоступа("Редактирование", Метаданные.Документы.СписаниеСРасчетногоСчета)
		И ПравоДоступа("Редактирование", Метаданные.Документы.ПоступлениеНаРасчетныйСчет);
	МожноРедактироватьКассу = ПравоДоступа("Редактирование", Метаданные.Документы.РасходныйКассовыйОрдер)
		И ПравоДоступа("Редактирование", Метаданные.Документы.ПриходныйКассовыйОрдер);
	
	Элементы.ЗагрузитьИзКлиентБанк.Видимость = МожноРедактироватьБанк;
	
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактироватьКассу И МожноРедактироватьБанк;
	Элементы.Список.ИзменятьСоставСтрок = МожноРедактироватьБанк И МожноРедактироватьКассу;
	
	Если ИнтеграцияСБанкамиПодключена Тогда
		ОбработатьРежимИнтеграцииСБанком();
	Иначе
		ВидимостьЭлементовДиректБанк = ?(УОрганизацииТолькоОдинБанковскийСчет,
			ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(ОтборОрганизация, ОсновнойБанковскийСчет),
			"НеПоказывать");
	КонецЕсли;
	
	ДанныеИтогов(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	
	ИмеютсяДействующиеПатенты = УчетПСН.ИмеютсяДействующиеПатенты(ТекущаяДатаСеанса());
	Если ИмеютсяДействующиеПатенты Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяПатент");
	КонецЕсли;
	
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.ЖурналДокументов.Деньги",
		"ФормаСпискаПростойИнтерфейс",
		НСтр("ru = 'Новости: Деньги'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УстановитьПрименяетсяУСНПатент();
	
	Элементы.ГруппаВидеоролики.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации")
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ЖурналДокументы"),
			ВРег("Видеоролики"),
			Истина);
	
	УстановитьФункциональныеОпцииФормы();
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ОтборыПриОткрытии) Тогда
		
		Если ОтборыПриОткрытии.Свойство("Организация") И ЗначениеЗаполнено(ОтборыПриОткрытии.Организация) Тогда
			ОтборОрганизация = ОтборыПриОткрытии.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
		
	ИначеЕсли ОткрытаДляПроверкиЗагрузкиДокументов Тогда
		ОтборОрганизацияИспользование = Ложь;
		ОтборБанковскийСчетИспользование = Ложь;
		ОтборДатаОтбораИспользование = Ложь;
		
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБаннерДиректБанк", 3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                 = ОсновнаяОрганизация;
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			
			УстановитьВосстановленныеОтборы();
			ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = ОтборОрганизация Тогда
		
		ИзменениеСоставаБанковскихСчетовОрганизации();
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБаннерДиректБанк", 3, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзмененоПредупреждениеПриЗагрузкеВыписки" Тогда
		
		ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
		Элементы.Список.Обновить();
		
	ИначеЕсли (ИмяСобытия = "ИзмененоСостояниеИнтеграцииСПлатформойСамозанятые"
				ИЛИ ИмяСобытия = "ИзменениеУчетнойПолитики") Тогда
		
		Если ОтборОрганизацияИспользование И ОтборОрганизация = Параметр Тогда
			ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
		КонецЕсли;
		УстановитьФункциональныеОпцииФормы();
		
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		
		Если ИнтеграцияСБанкамиПодключена Тогда
			ВидимостьЭлементовДиректБанк = ?(ЗначениеЗаполнено(ОсновнойБанковскийСчет),
				ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(ОтборОрганизация, ОсновнойБанковскийСчет),
				"НеПоказывать");
		Иначе
			ВидимостьЭлементовДиректБанк = ?(УОрганизацииТолькоОдинБанковскийСчет,
				ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(ОтборОрганизация, ОсновнойБанковскийСчет),
				"НеПоказывать");
		КонецЕсли;
		
		ПоказатьБаннерДиректБанк(ЭтотОбъект);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
		АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
		
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.ЗагрузитьЗначения(ВыбранноеЗначение);
		Если ВыпискиБанка.Количество() > 0 Тогда
			МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
			АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
			ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		ВыборСчетаДляЗагрузкиВыписки(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПоступлениеНаРасчетныйСчет(Команда)
	
	КлючеваяОперация = "СозданиеФормыПоступлениеНаРасчетныйСчет";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеСРасчетногоСчета(Команда)
	
	КлючеваяОперация = "СозданиеФормыСписаниеСРасчетногоСчета";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПриходныйКассовыйОрдер(Команда)
	
	КлючеваяОперация = "СозданиеФормыПриходныйКассовыйОрдер";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.ПриходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходныйКассовыйОрдер(Команда)
	
	КлючеваяОперация = "СозданиеФормыРасходныйКассовыйОрдер";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКлиентБанк(Команда)
	
	Если ИнтеграцияСБанкамиПодключена И Не ЕстьБанковскиеСчетаБезИнтеграции Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзКлиентБанкЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ОткрытьНастройки", НСтр("ru = 'Открыть настройки'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ТекстВопроса = НСтр("ru = 'Для загрузки выписки из другого банка укажите банковский счет в разделе Настройки'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Отмена);
	Иначе
		Организация = ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено);
		ЗагрузитьВыписку(Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализДвиженийДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("АнализДвиженийДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("ОстаткиДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоступленияДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("ПоступленияДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетРасходыДенежныхСредств(Команда)
	
	ОткрытьФормуОтчета("РасходыДенежныхСредств");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДоходыИРасходы(Команда)
	
	ОткрытьФормуОтчета("ДоходыРасходы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОборотныеСредства(Команда)

	ОткрытьФормуОтчета("ОборотныеСредства");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПродажиПоМесяцам(Команда)
	
	ОткрытьФормуОтчета("ПродажиПоМесяцам");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ОтборПоОрганизациямВЖурналеВыпискиПоБанку");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОтборОрганизацияПриИзмененииСервер();
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.3, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБаннерДиректБанк", 3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	Если ОтборОрганизацияИспользование Тогда
		СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	КонецЕсли;
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НапомнитьПозжеНажатие(Элемент)
	
	ОтложитьПоказНапоминанияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке(СсылкаНаСтатьюИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстРекламыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьДиректБанк" Тогда
		
		СтандартнаяОбработка = Ложь;
		Банк = ЗначениеРеквизитаОбъекта(ОсновнойБанковскийСчет, "Банк");
		ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(ОтборОрганизация, Банк);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьРекламуДиректБанкНажатие(Элемент)
	
	Банк = ЗначениеРеквизитаОбъекта(ОсновнойБанковскийСчет, "Банк");
	ЭлектронноеВзаимодействиеБПВызовСервера.СохранитьНастройкуВидимостиРекламыДиректБанк(Банк, Ложь);
	ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	ПоказатьБаннерДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВидеороликиНажатие(Элемент)
	
	Элементы.ГруппаВидеоролики.Видимость = Ложь;
	СохранитьОтключениеВидимостиВидеороликов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораОшибокЗагрузкиПриИзменении(Элемент)
	
	УстановитьОтборПредупрежденийПриЗагрузке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ЗакрытьБаннер();
	
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияСкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком(Элемент)
	
	СкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		КлючеваяОперация = "ОткрытиеФормыПоступлениеНаРасчетныйСчет";
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		КлючеваяОперация = "ОткрытиеФормыСписаниеСРасчетногоСчета";
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		КлючеваяОперация = "ОткрытиеФормыПриходныйКассовыйОрдер";
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		КлючеваяОперация = "ОткрытиеФормыРасходныйКассовыйОрдер";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("ИзменениеВыписки");
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура УстановитьОтборыПриСозданииНаСервере(Параметры)
	
	УстановитьВариантОтбораПредупрежденийПриЗагрузкеИзПараметров(Параметры);
	
	ВходящийОтборПоОрганизации = Ложь;
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		ВходящийОтборПоОрганизации = СтруктураОтбора.Свойство("Организация", ОтборОрганизация);
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		
		ЗаполнитьОтборПриОткрытииИзПараметров(Параметры.Отбор);
		
	КонецЕсли;
	
	ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если НЕ ВходящийОтборПоОрганизации И ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация              = ОсновнаяОрганизация;
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
	ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УОрганизацииТолькоОдинБанковскийСчет = Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(ОтборОрганизация) = 1;
	Если УОрганизацииТолькоОдинБанковскийСчет Тогда
		ОсновнойБанковскийСчет = ЗначениеРеквизитаОбъекта(ОтборОрганизация, "ОсновнойБанковскийСчет");
	Иначе
		БанкИКассаФормы.ОпределитьСчетаБезИнтеграции(ЭтотОбъект);
	КонецЕсли;
	
	НазваниеБанкаОсновногоБанковскогоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ОсновнойБанковскийСчет, "Банк.Наименование");
	
	ВидимостьЭлементовДиректБанк = ?(ЗначениеЗаполнено(ОсновнойБанковскийСчет),
		ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(ОтборОрганизация, ОсновнойБанковскийСчет),
		"НеПоказывать");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборПриОткрытииИзПараметров(Отбор)
	
	// Нужно переложить отборы из параметров в отдельную структуру,
	// которую потом будем использовать в ПриЗагрузкеДанныхИзНастроекНаСервере
	// Так как мы устанавливаем отбор самостоятельно, то нужно очистить те поля
	// структуры "Параметры.Отбор", для которых установлен отбор из кода.
	// Если не очистить поля - то будет вызвана ошибка пересечения отборов.
	
	ОтборыПриОткрытии = Новый Структура;
	
	Если Отбор.Свойство("Организация")
		И ЗначениеЗаполнено(Отбор.Организация) Тогда
		
		ОтборыПриОткрытии.Вставить("Организация", Отбор.Организация);
		Отбор.Удалить("Организация");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСоставаБанковскихСчетовОрганизации()
	
	УстановитьОтборыПриСозданииНаСервере(Новый Структура);
	
	Если ЕстьБанковскиеСчетаБезИнтеграции Тогда
		ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком = Ложь;
		БанкИКассаФормы.ПоказатьКонтекстнаяПодсказкаИнтеграцияСБанком(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаВыписки

&НаКлиенте
Процедура ЗагрузитьВыписку(Организация, БанковскийСчет = Неопределено)
	
	СоглашениеЭД = Неопределено;
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		БанковскийСчет = ОсновнойБанковскийСчет;
	КонецЕсли;
	
	НастройкиБанковскогоСчета = НастройкиКлиентБанкаДляБанковскогоСчета(Организация, ?(Организация <> Неопределено, БанковскийСчет, Неопределено));
	Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
		НастройкиБанковскогоСчета.Вставить("РежимИнтеграцииОграничиватьПериодВыписки", Истина);
	КонецЕсли;
	
	Если НастройкиБанковскогоСчета.ПередЗагрузкойПоказыватьФормуОбменаСБанком Тогда
		ОткрытьФормуКлиентБанка();
	ИначеЕсли НастройкиБанковскогоСчета.ЕстьПрямойОбменСБанками Тогда
		ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета);
	Иначе
		ЗагрузитьВыпискуЧерезФайл(НастройкиБанковскогоСчета.ФайлЗагрузки, НастройкиБанковскогоСчета.Кодировка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаДляЗагрузкиВыписки(ВыбранныйБанковскийСчет)
	
	Если ВыбранныйБанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ОтборОрганизацияИспользование ИЛИ НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОтборОрганизация              = ПолучитьРеквизитСчета(ВыбранныйБанковскийСчет, "Владелец");
		ОтборОрганизацияИспользование = Истина;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	КонецЕсли;
	
	// Загрузим выписку по выбранному счету
	ЗагрузитьВыписку(ОтборОрганизация, ВыбранныйБанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла, Кодировка = Неопределено) Экспорт
	
	ДлительнаяОперация = ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Загрузка выписки из банка'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиБанковскойВыпискиВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиБанковскойВыпискиВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация)
	
	ШаблонСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:
							|%1
							|Подробности в журнале регистрации.'");
	Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Иначе
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлЗагрузки",                            ОписаниеФайла.Имя);
	СтруктураПараметров.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	СтруктураПараметров.Вставить("Кодировка",                               Кодировка);
	Если НЕ ПустаяСтрока(ОписаниеФайла.Хранение) Тогда
		СтруктураПараметров.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение));
	КонецЕсли;
	
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = НовыйСведенияОВладельцеБанковскогоСчетаИзКонтекста();
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Добавить(ОтборОрганизация);
		Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
			СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Добавить(БанковскиеСчетаБезИнтеграции.Счета);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СведенияОВладельцеБанковскогоСчетаИзКонтекста", СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
		СтруктураПараметров.Вставить("РежимИнтеграцииОграничиватьПериодВыписки", Истина);
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка выписки из банка'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.КлючФоновогоЗадания = Обработки.КлиентБанк.КлючФоновогоЗаданияЗагрузкаВыписки();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала",
		СтруктураПараметров,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки)
	
	Для Каждого ТекстСообщения Из РезультатЗагрузки.СообщенияПользователю Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Если РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось прочитать файл'"));
		
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиРаспознавания" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияКонтрагентов" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияДокументов" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "НеобходимоСоздатьКонтрагентов" Тогда
		
		Если РезультатЗагрузки.Свойство("Организация") Тогда
			ОтборОрганизация = РезультатЗагрузки.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(РезультатЗагрузки.Организация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		ПараметрыФормыКлиентБанка = Новый Структура;
		ПараметрыФормыКлиентБанка.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", РезультатЗагрузки.АдресХранилищаРаспознанныеДанныеИзБанка);
		ПараметрыФормыКлиентБанка.Вставить("СообщенияПользователюВФормеОбменСБанком", РезультатЗагрузки.СообщенияПользователюВФормеОбменСБанком);
		ПараметрыФормыКлиентБанка.Вставить("НачалоПериода",                           ПериодНачало);
		ПараметрыФормыКлиентБанка.Вставить("КонецПериода",                            ПериодОкончание);
		ПараметрыФормыКлиентБанка.Вставить("СоглашениеЭД",                            СоглашениеЭД);
		ПараметрыФормыКлиентБанка.Вставить("ЭлектроннаяВыпискаБанка",                 ВыпискиБанка);
		
		Если РезультатЗагрузки.Свойство("ИмяФайла") Тогда
			ПараметрыФормыКлиентБанка.Вставить("ФайлЗагрузки", РезультатЗагрузки.ИмяФайла);
		КонецЕсли;
		
		ОткрытьФормуКлиентБанка(ПараметрыФормыКлиентБанка);
		
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "УспешнаяЗагрузка" Тогда
		
		Если РезультатЗагрузки.Свойство("Организация") Тогда
			ОтборОрганизация = РезультатЗагрузки.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(РезультатЗагрузки.Организация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		Элементы.Список.Обновить();
		
		Если РезультатЗагрузки.Свойство("РезультатСозданияДокументов") Тогда
			ВалютаСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗагрузки, "ВалютаСчета");
			ПоказатьРезультатСозданияДокументов(РезультатЗагрузки.РезультатСозданияДокументов, ВалютаСчета);
			
			ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКлиентБанка(ПараметрыФормы = Неопределено) Экспорт
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РежимПоУмолчанию", "ГруппаЗагрузка");
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#Область ПрямойОбменСБанком

&НаКлиенте
Процедура ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета)
	
	// Счет определен, начинаем получение выписки
	Если ЗначениеЗаполнено(НастройкиБанковскогоСчета.БанковскийСчет) Тогда
		ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета);
		
	// Счет не определен, спросим у пользователя по какому счету необходимо производить загрузку.
	// Может быть выбран счет по которому не подключен прямой обмен.
	// В этом случае производим загрузку через файл
	Иначе
		ПараметрыФормы = Новый Структура;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", НастройкиБанковскогоСчета.Организация);
		Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
			СтруктураОтбора.Вставить("Ссылка", БанковскиеСчетаБезИнтеграции.Счета);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета)
	
	НомерСчета = ПолучитьРеквизитСчета(НастройкиБанковскогоСчета.БанковскийСчет, "НомерСчета");
	
	// Необходимо определить период загрузки
	СтруктураПериода = ПериодЗагрузкиВыписки(НастройкиБанковскогоСчета,
		НастройкиБанковскогоСчета.РежимИнтеграцииОграничиватьПериодВыписки);
	
	БанкИКассаФормыКлиент.ПолучитьВыпискуБанка(ЭтотОбъект, НастройкиБанковскогоСчета, СтруктураПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискиПоПрямомуОбменуСБанкомЗавершение(ПараметрыФормы) Экспорт
	
	ОткрытьФормуКлиентБанка(ПараметрыФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодЗагрузкиВыписки(Знач НастройкиБанковскогоСчета, Знач РежимИнтеграцииОграничиватьПериодВыписки)
	
	Возврат Обработки.КлиентБанк.ПериодЗагрузкиВыписки(НастройкиБанковскогоСчета, РежимИнтеграцииОграничиватьПериодВыписки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыпискиБанкаВФайл(Знач МассивВыписок)
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

#КонецОбласти

#Область ОбменЧерезФайл

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайл(ФайлЗагрузки, Кодировка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	ДополнительныеПараметры.Вставить("Кодировка",    Кодировка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьВыпискуЧерезФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайлЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФайлЗагрузки) И РасширениеРаботыСФайламиПодключено Тогда
		// Файл определен - можно начинаем чтение
		ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(ДополнительныеПараметры.ФайлЗагрузки, ЭтотОбъект, ДополнительныеПараметры.Кодировка);
	Иначе
		// Файл не определен - запросим файл у пользователя
		ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект, ДополнительныеПараметры.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаКлиентБанка

&НаСервереБезКонтекста
Функция НастройкиКлиентБанкаДляБанковскогоСчета(Знач Организация, Знач БанковскийСчет)
	
	СтруктураНастроек = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЗначениеЗаполнено(СтруктураНастроек.СоглашениеПрямогоОбменаСБанками));
	Иначе
		// Проверим есть ли в ИБ прямой обмен с банками.
		// Если есть, то следует спрашивать у пользователя,
		// по какому счету производится загрузка
		// Если прямого обмена нет, то предлагаем выбрать файл -
		// банковский счет определяем из файла.
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЭлектронноеВзаимодействиеБП.ИспользуетсяПрямойОбменСБанком(Организация));
			
	КонецЕсли;
		
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьРезультатСозданияДокументов(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость Тогда
		Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатСозданияДокументов(РезультатСозданияДокументов, ВалютаСчета)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Истина;
	
	Если НЕ РезультатСозданияДокументов.Свойство("КоличествоЗагружено") Тогда
		Элементы.ТекстСостояниеЗагрузки.Заголовок = НСтр("ru='Новых документов для загрузки не обнаружено'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Загружено: [КоличествоДокументов]. Поступило: [СуммаПоступило] Списано: [СуммаСписано]'");
		
		СтрокаКоличествоДокументов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РезультатСозданияДокументов.КоличествоЗагружено, "документ, документа, документов");
		СтрокаСуммаПоступило       = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаПоступило, ВалютаСчета, "0,00");
		СтрокаСуммаПоступило       = ?((Прав(СтрокаСуммаПоступило, 1) = "."), СтрокаСуммаПоступило, СтрокаСуммаПоступило + ".");
		СтрокаСуммаСписано         = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаСписано, ВалютаСчета, "0,00");
		СтрокаСуммаСписано         = ?((Прав(СтрокаСуммаСписано, 1) = "."),   СтрокаСуммаСписано,   СтрокаСуммаСписано + ".");
		
		ВставляемыеЗначения = Новый Структура;
		ВставляемыеЗначения.Вставить("КоличествоДокументов", СтрокаКоличествоДокументов);
		ВставляемыеЗначения.Вставить("СуммаПоступило",       СтрокаСуммаПоступило);
		ВставляемыеЗначения.Вставить("СуммаСписано",         СтрокаСуммаСписано);
		Элементы.ТекстСостояниеЗагрузки.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ВставляемыеЗначения);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокументов.ПервыйЗагруженный) Тогда
			Элементы.Список.ТекущаяСтрока = РезультатСозданияДокументов.ПервыйЗагруженный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитСчета(Знач БанковскийСчет, Знач ИмяРеквизита)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, ИмяРеквизита);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьИзКлиентБанкЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариант = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/Обработка.ПанелиПростойИнтерфейс.Команда.Настройки");
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗадание

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ОбновитьИтогиОбработчик()
	
	ДанныеИтогов(ЭтотОбъект);
	ЗафиксироватьДлительностьКлючевойОперации();
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	
	Если ИмеютсяДействующиеПатенты Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяПатент");
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Организация
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизацияИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Если ИнтеграцияСБанкамиПодключена Тогда
		
		// Комментарий
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Комментарий");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ИнтеграцияСБанкамиПодключена", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	Иначе
		
		// БанковскийСчет
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БанковскийСчет");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ИнтеграцияСБанкамиПодключена", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Дата");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Доход");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Расход");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВидОперации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Тип");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Комментарий");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Номер");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьПредупреждения", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.БанковскиеДокументыСПредупреждениямиПриЗагрузке);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДанныеИтогов(Форма)
	
	ТекОрганизация = ?(Форма.ОтборОрганизацияИспользование, Форма.ОтборОрганизация, Неопределено);
	
	СтруктураИтогов = ПолучитьИтоги(ТекОрганизация);
	
	Форма.ИтогДата  = СтруктураИтогов.ИтогДата;
	Форма.ИтогБанк  = СтруктураИтогов.ИтогБанк;
	Форма.ИтогКасса = СтруктураИтогов.ИтогКасса;
	Форма.ИтогВсего = СтруктураИтогов.ИтогВсего;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает текущие остатки по кассе и банку
//
Функция ПолучитьИтоги(Знач ТекОрганизация)
	
	ИтогДата = КонецДня(ТекущаяДатаСеанса());
	СтруктураРезультат = Новый Структура("ИтогДата, ИтогБанк, ИтогКасса, ИтогВсего", ИтогДата, 0, 0, 0);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	// Если нет доступных организаций, то Итоги не вычисляем
	Если СписокДоступныхОрганизаций.Количество() = 0 Тогда
		Возврат СтруктураРезультат;
	ИначеЕсли ЗначениеЗаполнено(ТекОрганизация) Тогда
		// Если организация не числится в списке доступных, то Итоги не вычисляем
		Если СписокДоступныхОрганизаций.Найти(ТекОрганизация) = Неопределено Тогда
			Возврат СтруктураРезультат;
		КонецЕсли;
	КонецЕсли;
	
	СчетаУчетаНаличныхДС = Новый Массив;
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	СчетаУчетаНаличныхДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	
	СчетаУчетаБезналичныхДС = Новый Массив;
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.Аккредитивы);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ЧековыеКнижки);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчета);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.АккредитивыВал);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ДепозитныеСчетаВал);
	СчетаУчетаБезналичныхДС.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеСпециальныеСчетаВал);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаИтогов", Новый Граница(ИтогДата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("СчетаУчетаНаличныхДС", СчетаУчетаНаличныхДС);
	Запрос.УстановитьПараметр("СчетаУчетаБезналичныхДС", СчетаУчетаБезналичныхДС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстатокПоКассе.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ОстатокПоКассе.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ОстатокПоКассе.СуммаОстаток
	|	КОНЕЦ КАК ИтогКасса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В (&СчетаУчетаНаличныхДС), , %ОтборПоОрганизации%) КАК ОстатокПоКассе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОстатокПоБанку.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ОстатокПоБанку.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ОстатокПоБанку.СуммаОстаток
	|	КОНЕЦ КАК ИтогБанк
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаИтогов, Счет В (&СчетаУчетаБезналичныхДС), , %ОтборПоОрганизации%) КАК ОстатокПоБанку";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоОрганизации%",
		?(ЗначениеЗаполнено(ТекОрганизация), "Организация = &Организация", ""));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Касса
	Если НЕ РезультатЗапроса[0].Пустой() Тогда
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	// Банк
	Если НЕ РезультатЗапроса[1].Пустой() Тогда
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	СтруктураРезультат.ИтогВсего = СтруктураРезультат.ИтогКасса + СтруктураРезультат.ИтогБанк;
	СтруктураРезультат.ИтогДата = ИтогДата;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура УстановитьВосстановленныеОтборы()
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРежимИнтеграцииСБанком()
	
	// Интеграция подключена, значит основной банковский счет организации - это счет интеграции.
	БанковскийСчетОрганизации = ЗначениеРеквизитаОбъекта(ОтборОрганизация, "ОсновнойБанковскийСчет");
	Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		БанковскиеСчетаИнтеграции = Справочники.НастройкиИнтеграцииСБанками.БанковскиеСчетаОрганизацииВРежимеИнтеграции(
			ОтборОрганизация);
		Если БанковскиеСчетаИнтеграции.Количество() > 0 Тогда
			БанковскийСчетОрганизации = БанковскиеСчетаИнтеграции[0];
		КонецЕсли;
	КонецЕсли;
	
	БанкИнтеграции = ЗначениеРеквизитаОбъекта(БанковскийСчетОрганизации, "Банк");
	Если ЗначениеЗаполнено(БанкИнтеграции) Тогда
		РеквизитыБанкаИнтеграции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкИнтеграции,
			"Наименование, Код");
		НазваниеБанкаИнтеграции  = РеквизитыБанкаИнтеграции.Наименование;
		БИКБанкаИнтеграции       = РеквизитыБанкаИнтеграции.Код;
	КонецЕсли;
	
	Если Не ЕстьБанковскиеСчетаБезИнтеграции Тогда
		ВидимостьИзНастроек = ХранилищеОбщихНастроек.Загрузить(
			"ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком", БИКБанкаИнтеграции);
		ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком = ?(ВидимостьИзНастроек = Неопределено, Истина, ВидимостьИзНастроек);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ПометкаУдаления", Ложь,,, Истина);
	
	ВидимостьЭлементовДиректБанк = ?(ЗначениеЗаполнено(ОсновнойБанковскийСчет),
		ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(ОтборОрганизация, ОсновнойБанковскийСчет),
		"НеПоказывать");
	
	БанкИКассаФормы.НастроитьФормуЖурналаДляРежимаИнтеграции(ЭтотОбъект, ИнтеграцияСБанкамиПодключена);
	БанкИКассаФормы.ПоказатьКонтекстнаяПодсказкаИнтеграцияСБанком(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПравоПримененияСпецрежима

&НаСервере
Процедура УстановитьПрименяетсяУСНПатент()
	
	ДатаПроверки = ОбщегоНазначения.ТекущаяДатаПользователя();
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПрименениеУСН        = УчетнаяПолитика.ПрименяетсяУСН(ОтборОрганизация, ДатаПроверки);
		ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(ОтборОрганизация, ДатаПроверки);
	Иначе
		ПрименениеУСН        = Ложь;
		ПрименяетсяУСНПатент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОПравеПримененияСпецрежима()
	
	// Если не заполнена организация, тогда не показываем предупреждение.
	// Если организация не на УСН или Патенте, то не показываем предупреждение.
	Если НЕ (ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) 
		И (ПрименениеУСН ИЛИ ПрименяетсяУСНПатент)) Тогда
		Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере()
	
	ИнформацияОПравеПримененияСпецрежима = КонтрольПраваПримененияСпецрежима.ИнформацияОПравеПримененияСпецрежима(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы());
		
	СледующееЗначениеНапоминания         = ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания;
	СсылкаНаСтатьюИТС                    = ИнформацияОПравеПримененияСпецрежима.СсылкаНаСтатьюИТС;
	
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = ИнформацияОПравеПримененияСпецрежима.Показать;
	Элементы.ИнформацияОПравеПримененияСпецрежима.ЦветФона = ИнформацияОПравеПримененияСпецрежима.ЦветФонаГруппы;
	Элементы.ТекстИнформации.Заголовок = ИнформацияОПравеПримененияСпецрежима.ТекстИнформации;
	
	Элементы.НапомнитьПозже.Заголовок  = ИнформацияОПравеПримененияСпецрежима.ТекстНапомнитьПозже;
	// В случае если это последний шаг, то прячем команду "Напомнить позже"
	Элементы.НапомнитьПозже.Видимость  = (ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания < 100);
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьПоказНапоминанияНаСервере()
	
	КонтрольПраваПримененияСпецрежима.ОтложитьПоказНапоминания(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы(), 
		СледующееЗначениеНапоминания);
		
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПоказатьБаннерДиректБанк()

	ПоказатьБаннерДиректБанк(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьБаннерДиректБанк(Форма)
	
	Элементы = Форма.Элементы;
	ВидимостьБаннера = Ложь;
	Если Не Элементы.Баннер.Видимость // если не виден баннер персонализированного предложения
		И ЗначениеЗаполнено(Форма.ОсновнойБанковскийСчет)
		И Форма.ВидимостьЭлементовДиректБанк = "ПоказатьБаннер" Тогда 
		
		ВидимостьБаннера = Истина;
		
		Если ЗначениеЗаполнено(Форма.НазваниеБанкаОсновногоБанковскогоСчета) Тогда
			ЧастиБанера = Новый Массив;
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Обменивайтесь с банком'"), Новый Шрифт(Новый Шрифт,, 14)));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				Форма.НазваниеБанкаОсновногоБанковскогоСчета, Новый Шрифт(Новый Шрифт,, 14)));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'напрямую!'"), Новый Шрифт(Новый Шрифт,, 14)));
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Подключите сервис 1С:ДиректБанк'"),,,, "ПодключитьДиректБанк"));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'для отправки платежных документов и получения выписок'")));
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'напрямую из 1С:Предприятия, без использования клиент-банка.'")));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Подробнее'"),,,, "https://portal.1c.ru/applications/44"));
			
			Элементы.ДекорацияТекстРекламы.Заголовок = Новый ФорматированнаяСтрока(ЧастиБанера);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаРекламаДиректБанк.Видимость = ВидимостьБаннера;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОрганизацияПриИзмененииСервер()

	ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	
	УстановитьВосстановленныеОтборы();
	
	УОрганизацииТолькоОдинБанковскийСчет = Справочники.БанковскиеСчета.КоличествоБанковскихСчетовОрганизации(ОтборОрганизация) = 1;
	
	ОсновнойБанковскийСчет = ?(УОрганизацииТолькоОдинБанковскийСчет, ОтборОрганизация.ОсновнойБанковскийСчет, Справочники.БанковскиеСчета.ПустаяСсылка());
	НазваниеБанкаОсновногоБанковскогоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ОсновнойБанковскийСчет, "Банк.Наименование");
	
	ВидимостьЭлементовДиректБанк = ?(УОрганизацииТолькоОдинБанковскийСчет,
		ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборОрганизация.ОсновнойБанковскийСчет),
		"НеПоказывать");
	
	УстановитьПрименяетсяУСНПатент();
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Знач Ссылка, Знач Реквизит)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);

КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьОтключениеВидимостиВидеороликов()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ЖурналДеньги"), ВРег("Видеоролики"), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОтчета(ИмяОтчета)

	ФормаОтчета = ПолучитьФорму("Отчет." + ИмяОтчета + ".ФормаОбъекта",, ЭтотОбъект);
	
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии",
		БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(),
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат,
		"ФормированиеОтчета");
	ФормаОтчета.Открыть();

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, ОтборОрганизация);
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено));
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияДеньги());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
	// Скрываем баннер ДиректБанка, если есть персонализированное предложение
	Если Элементы.Баннер.Видимость Тогда
		Элементы.ГруппаРекламаДиректБанк.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	ПерсонализированныеПредложенияСервисов.ЗакрытьБаннер(ЭтотОбъект, ОтборОрганизация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйСведенияОВладельцеБанковскогоСчетаИзКонтекста()
	
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	
	Возврат СведенияОВладельцеБанковскогоСчетаИзКонтекста;
	
КонецФункции

&НаСервере
Процедура СкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком()
	
	БанкИКассаФормы.СкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроверкаПредупрежденийПриЗагрузке

&НаСервере
Процедура УстановитьВариантОтбораПредупрежденийПриЗагрузкеИзПараметров(Параметры)
	
	Если Параметры.Свойство("ПоказатьПредупреждения")
		И Параметры.ПоказатьПредупреждения Тогда
		
		ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораТребующиеПроверки();
		ОткрытаДляПроверкиЗагрузкиДокументов = Истина;
		
	Иначе
		
		ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораВсе();
		ОткрытаДляПроверкиЗагрузкиДокументов = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораВсе()
	Возврат "Все";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораТребующиеПроверки()
	Возврат "ТребующиеПроверки";
КонецФункции

&НаСервере
Процедура ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор()
	
	ОрганизацияПредупреждений = ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено);
	
	ЕстьПредупреждения = ЕстьДокументыСПредупреждениямиПриЗагрузке(ОрганизацияПредупреждений);
	
	Элементы.ГруппаПредупрежденияПриЗагрузкеИзКлиентБанка.Видимость = ЕстьПредупреждения;
	Если Не ЕстьПредупреждения Тогда
		ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораВсе();
	КонецЕсли;
	
	УстановитьОтборПредупрежденийПриЗагрузке(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДокументыСПредупреждениямиПриЗагрузке(Организация)
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	
	Возврат РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПредупрежденийПриЗагрузке(Форма)
	
	Настройки = Форма.Список.КомпоновщикНастроек.Настройки;
	
	ИмяПоля = "Ссылка";
	
	Если Форма.ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораТребующиеПроверки() Тогда
		
		ОрганизацияПредупреждений = ?(Форма.ОтборОрганизацияИспользование, Форма.ОтборОрганизация, Неопределено);
		ДокументыСПредупреждениямиПриЗагрузке = ДокументыСПредупреждениямиПриЗагрузке(ОрганизацияПредупреждений);
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Настройки.Отбор,
			ИмяПоля);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Настройки.Отбор,
			ИмяПоля,
			ДокументыСПредупреждениямиПриЗагрузке,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Настройки.Отбор,
			ИмяПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыСПредупреждениямиПриЗагрузке(Организация)
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	
	Возврат РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ДокументыСПредупреждениями(ПараметрыОтбораПредупреждений);
	
КонецФункции

#КонецОбласти
