
#Область ПеременныеФормы

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияСБанкамиПодключена = ИнтеграцияСБанкамиПовтИсп.ИнтеграцияВИнформационнойБазеВключена()
		И ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	УстановитьОтборыПриСозданииНаСервере(Параметры);
	
	ИтогиВключены = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЖурналБанковскиеВыписки", "ИтогиВключены", Истина);
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	
	ИспользуетсяНПД = ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые");
	
	ЕстьРасчетныеСчетаБезИнтеграции = НЕ ИнтеграцияСБанкамиПодключена
		ИЛИ Справочники.НастройкиИнтеграцииСБанками.ЕстьРасчетныеСчетаБезИнтеграции();
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.СписаниеСРасчетногоСчета)
		И ПравоДоступа("Редактирование", Метаданные.Документы.ПоступлениеНаРасчетныйСчет);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.ЗагрузитьИзКлиентБанк.Видимость    = МожноРедактировать;
	Элементы.ФормаОткрытьКлиентБанк.Видимость   = МожноРедактировать И ЕстьРасчетныеСчетаБезИнтеграции;
	Элементы.ФормаНастройкаКлиентБанк.Видимость = МожноРедактировать И ЕстьРасчетныеСчетаБезИнтеграции;
	Элементы.СоздатьНаОсновании.Видимость       = МожноРедактировать;
	
	Если ИнтеграцияСБанкамиПодключена Тогда
		ОбработатьРежимИнтеграцииСБанком();
	КонецЕсли;
	
	Если ИтогиВключены Тогда
		Элементы.ГруппаИтоги.Видимость = Истина;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СформироватьПараметрыИтогов(ЭтотОбъект));
	Иначе
		Элементы.ГруппаИтоги.Видимость = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	ИспользуетсяЭП = ЭлектронноеВзаимодействиеБП.НастроенОбменДиректБанк();
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.ЖурналДокументов.Деньги",
		"БанковскиеВыписки",
		НСтр("ru = 'Новости: Банковские выписки'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	БанкИНомерСчета(ОтборБанковскийСчет, Банк, НомерСчета);
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборБанковскийСчет);
	
	УстановитьПрименяетсяУСНПатент();
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
	АдресХранилищаНастройкиДинСпискаДляРеестра = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ОтборыПриОткрытии) Тогда
		
		Если ОтборыПриОткрытии.Свойство("Организация") И ЗначениеЗаполнено(ОтборыПриОткрытии.Организация) Тогда
			ОтборОрганизация = ОтборыПриОткрытии.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
		
		Если ОтборыПриОткрытии.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ОтборыПриОткрытии.БанковскийСчет) Тогда
			ОтборБанковскийСчет = ОтборыПриОткрытии.БанковскийСчет;
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет) 
				И НЕ ОткрытаДляПроверкиЗагрузкиДокументов;
		КонецЕсли;
		
		Если ОтборыПриОткрытии.Свойство("ДатаОтбора") И ЗначениеЗаполнено(ОтборыПриОткрытии.ДатаОтбора) Тогда
			ОтборДатаОтбора = ОтборыПриОткрытии.ДатаОтбора;
			ОтборДатаОтбораИспользование = ЗначениеЗаполнено(ОтборДатаОтбора)
				И НЕ ОткрытаДляПроверкиЗагрузкиДокументов;
		КонецЕсли;
		
	ИначеЕсли ОткрытаДляПроверкиЗагрузкиДокументов Тогда
		ОтборОрганизацияИспользование = Ложь;
		ОтборБанковскийСчетИспользование = Ложь;
		ОтборДатаОтбораИспользование = Ложь;
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация = ОсновнаяОрганизация;
			
			// Предварительно сбросим сохраненный банковский счет, т.к. он не принадлежит текущей организации
			// и может быть проблема при RLS.
			ОтборБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
			
			УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация, ИнтеграцияСБанкамиПодключена);
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБаннерДиректБанк", 3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                 = ОсновнаяОрганизация;
			УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация, ИнтеграцияСБанкамиПодключена);
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
			
			УстановитьВосстановленныеОтборы(Истина);
			ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
			
		КонецЕсли;
		
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
		
			
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = ОтборОрганизация Тогда
		
		ИзменениеСоставаБанковскихСчетовОрганизации();
		
	ИначеЕсли ИмяСобытия = "ИзмененоПредупреждениеПриЗагрузкеВыписки" Тогда
		
		ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
		Элементы.Список.Обновить();
		
	ИначеЕсли (ИмяСобытия = "ИзмененоСостояниеИнтеграцииСПлатформойСамозанятые"
				ИЛИ ИмяСобытия = "ИзменениеУчетнойПолитики") Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.1, Истина);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		
		ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
			ОтборОрганизация, Банк);
			
		ПоказатьБаннерДиректБанк(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ОтборДокумент) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыОткрытияДокумента = Неопределено;
		ПараметрыФормы.Вставить("Основание", ОтборДокумент);
		
		Если ПараметрыОткрытияДокумента <> Неопределено Тогда
			ВыбранноеЗначение = ПараметрыОткрытияДокумента.ИмяДокумента;
			ПараметрыФормы    = ПараметрыОткрытияДокумента.ПараметрыФормы;
		КонецЕсли;
		
		ОтборДокумент = Неопределено;
		ОткрытьФорму("Документ." + ВыбранноеЗначение + ".ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
		АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
		
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.ЗагрузитьЗначения(ВыбранноеЗначение);
		Если ВыпискиБанка.Количество() > 0 Тогда
			МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
			АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
			ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		ВыборСчетаДляЗагрузкиВыписки(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзКлиентБанк(Команда)
	
	Если ИнтеграцияСБанкамиПодключена И Не ЕстьБанковскиеСчетаБезИнтеграции Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзКлиентБанкЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ОткрытьНастройки", НСтр("ru = 'Открыть настройки'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ТекстВопроса = НСтр("ru = 'Для загрузки выписки из другого банка укажите банковский счет в разделе Настройки'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Отмена);
	Иначе
		Организация    = ?(ОтборОрганизацияИспользование,    ОтборОрганизация,    Неопределено);
		БанковскийСчет = ?(ОтборБанковскийСчетИспользование, ОтборБанковскийСчет, Неопределено);
		ЗагрузитьВыписку(Организация, БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНеоплаченныеПлатежныеПоручения(Команда)
	
	СтруктураОтбора = Новый Структура("Организация, БанковскийСчет, Дата", ОтборОрганизация, ОтборБанковскийСчет, ОтборДатаОтбора);
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаПодбораНеоплаченных", Новый Структура("Отбор", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеНаРасчетныйСчет(Команда)
	
	КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
						"СозданиеФормыПоступлениеНаРасчетныйСчет",
						"СозданиеОднострочнойФормыПоступлениеНаРасчетныйСчет");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если СтруктураОтбора.Свойство("ДатаОтбора") Тогда
		СтруктураОтбора.Вставить("Дата", СтруктураОтбора.ДатаОтбора);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеСРасчетногоСчета(Команда)
	
	КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
						"СозданиеФормыСписаниеСРасчетногоСчета",
						"СозданиеОднострочнойФормыСписаниеСРасчетногоСчета");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если СтруктураОтбора.Свойство("ДатаОтбора") Тогда
		СтруктураОтбора.Вставить("Дата", СтруктураОтбора.ДатаОтбора);
	КонецЕсли;
	
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлиентБанк(Команда)
	
	ОткрытьФормуКлиентБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКлиентБанка(Команда)
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		Организация = ОтборОрганизация;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		БанковскийСчет = ОтборБанковскийСчет;
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	НастройкиКлиентБанка = ПолучитьНастройкиКлиентБанка(Организация, БанковскийСчет, ИнтеграцияСБанкамиПодключена);
	НастройкиКлиентБанка.Вставить("ВозможностьВыбораФайлов", ПодключитьРасширениеРаботыСФайлами());
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаКлиентБанкаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения", НастройкиКлиентБанка, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",
		?(ПустаяСтрока(КлючНазначенияИспользования), "БанковскиеВыписки", КлючНазначенияИспользования));
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборДокумент = ТекущиеДанные.Ссылка;
		ПараметрыФормы.Вставить("Основание", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.Деньги.Форма.ВыборТипаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИтоги(Команда)
	
	ИтогиВключены = НЕ ИтогиВключены;
	Элементы.ГруппаИтоги.Видимость = ИтогиВключены;
	Если ИтогиВключены тогда
		ВсегдаОбновлять = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ЖурналБанковскиеВыписки", "ИтогиВключены", ИтогиВключены);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ОтборПоОрганизациямВЖурналеВыпискиПоБанку");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОтборОрганизацияПриИзмененииСервер();
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	Если ИтогиВключены Тогда
		ВсегдаОбновлять = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.3, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБаннерДиректБанк", 3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетПриИзменении(Элемент)
	
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	ОтборБанковскийСчетПриИзмененииСервер();
	
	ПересчитатьИтоги();
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьБаннерДиректБанк", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОтбораПриИзменении(Элемент)
	
	ОтборДатаОтбораИспользование = ЗначениеЗаполнено(ОтборДатаОтбора);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если ОтборБанковскийСчетИспользование Тогда
		СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	КонецЕсли;
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	Если ОтборОрганизацияИспользование Тогда
		Если НЕ ОтборБанковскийСчетИспользование И ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
			ОтборБанковскийСчетИспользование = Истина;
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
		КонецЕсли;
		
		СкрытьРезультатСозданияДокументов(ЭтотОбъект);
		
	ИначеЕсли ОтборБанковскийСчетИспользование Тогда
		ОтборБанковскийСчетИспользование = Ложь;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 0.2, Истина);
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура НапомнитьПозжеНажатие(Элемент)
	
	ОтложитьПоказНапоминанияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке(СсылкаНаСтатьюИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстРекламыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьДиректБанк" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
			ОтборОрганизация, Банк, НомерСчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьРекламуДиректБанкНажатие(Элемент)
	
	ЭлектронноеВзаимодействиеБПВызовСервера.СохранитьНастройкуВидимостиРекламыДиректБанк(Банк, Ложь);
	ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	ПоказатьБаннерДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораОшибокЗагрузкиПриИзменении(Элемент)
	
	УстановитьОтборПредупрежденийПриЗагрузке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ЗакрытьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком(Элемент)
	
	СкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("СписокПередНачаломДобавленияЗавершение", ЭтотОбъект);
		
		СписокСоздаваемыхДокументов = Новый СписокЗначений;
		СписокДоступныхПолей = Список.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора;
		СписокДоступныхТипов = СписокДоступныхПолей.НайтиПоле(Новый ПолеКомпоновкиДанных("Ссылка")).Тип.Типы();
		Для каждого ДоступныйТип Из СписокДоступныхТипов Цикл
			СписокСоздаваемыхДокументов.Добавить(ДоступныйТип, Строка(ДоступныйТип));
		КонецЦикла; 
		СписокСоздаваемыхДокументов.СортироватьПоПредставлению();
		
		ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, СписокСоздаваемыхДокументов, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
			"ОткрытиеФормыПоступлениеНаРасчетныйСчет",
			"ОткрытиеОднострочнойФормыПоступлениеНаРасчетныйСчет");
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
			"ОткрытиеФормыСписаниеСРасчетногоСчета",
			"ОткрытиеОднострочнойФормыСписаниеСРасчетногоСчета");
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	Если ИтогиВключены Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("ИзменениеВыписки");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ЧекиНПД.УстановитьВДинамическомСпискеПредставленияАннулированныхЧеков(Строки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура УстановитьОтборыПриСозданииНаСервере(Параметры)
	
	УстановитьВариантОтбораПредупрежденийПриЗагрузкеИзПараметров(Параметры);
	
	ВходящийОтборПоОрганизации = Ложь;
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		ВходящийОтборПоОрганизации = СтруктураОтбора.Свойство("Организация", ОтборОрганизация);
		СтруктураОтбора.Свойство("БанковскийСчет", ОтборБанковскийСчет);
		СтруктураОтбора.Свойство("ДатаОтбора",     ОтборДатаОтбора);
		
		ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		ОтборДатаОтбораИспользование     = ЗначениеЗаполнено(ОтборДатаОтбора);
		
		ЗаполнитьОтборПриОткрытииИзПараметров(Параметры.Отбор);
		
	КонецЕсли;
	
	ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	
	Если НЕ ВходящийОтборПоОрганизации И ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация                 = ОсновнаяОрганизация;
		УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация, ИнтеграцияСБанкамиПодключена);
		ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборПриОткрытииИзПараметров(Отбор)
	
	// Нужно переложить отборы из параметров в отдельную структуру,
	// которую потом будем использовать в ПриЗагрузкеДанныхИзНастроекНаСервере
	// Так как мы устанавливаем отбор самостоятельно, то нужно очистить те поля
	// структуры "Параметры.Отбор", для которых установлен отбор из кода.
	// Если не очистить поля - то будет вызвана ошибка пересечения отборов.
	
	ОтборыПриОткрытии = Новый Структура;
	
	Если Отбор.Свойство("Организация")
		И ЗначениеЗаполнено(Отбор.Организация) Тогда
		
		ОтборыПриОткрытии.Вставить("Организация", Отбор.Организация);
		Отбор.Удалить("Организация");
		
	КонецЕсли;
	
	Если Отбор.Свойство("БанковскийСчет")
		И ЗначениеЗаполнено(Отбор.БанковскийСчет) Тогда
		
		ОтборыПриОткрытии.Вставить("БанковскийСчет", Отбор.БанковскийСчет);
		Отбор.Удалить("БанковскийСчет");
		
	КонецЕсли;
	
	Если Отбор.Свойство("ДатаОтбора")
		И ЗначениеЗаполнено(Отбор.ДатаОтбора) Тогда
		
		ОтборыПриОткрытии.Вставить("ДатаОтбора", Отбор.ДатаОтбора);
		Отбор.Удалить("ДатаОтбора");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаВыписки

&НаКлиенте
Процедура ЗагрузитьВыписку(Организация, БанковскийСчет)
	
	СоглашениеЭД              = Неопределено;
	НастройкиБанковскогоСчета = НастройкиКлиентБанкаДляБанковскогоСчета(Организация, БанковскийСчет);
	Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
		НастройкиБанковскогоСчета.Вставить("РежимИнтеграцииОграничиватьПериодВыписки", Истина);
	КонецЕсли;
	
	Если НастройкиБанковскогоСчета.ПередЗагрузкойПоказыватьФормуОбменаСБанком Тогда
		ОткрытьФормуКлиентБанка();
	ИначеЕсли НастройкиБанковскогоСчета.ЕстьПрямойОбменСБанками Тогда
		ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета);
	Иначе
		ЗагрузитьВыпискуЧерезФайл(НастройкиБанковскогоСчета.ФайлЗагрузки, НастройкиБанковскогоСчета.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаДляЗагрузкиВыписки(ВыбранныйБанковскийСчет)
	
	Если ВыбранныйБанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим отборы
	ОтборБанковскийСчет               = ВыбранныйБанковскийСчет;
	ОтборБанковскийСчетИспользование  = Истина;
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если НЕ ОтборОрганизацияИспользование ИЛИ НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОтборОрганизация              = ПолучитьРеквизитСчета(ОтборБанковскийСчет, "Владелец");
		ОтборОрганизацияИспользование = Истина;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	КонецЕсли;
	
	// Загрузим выписку по выбранному счету
	ЗагрузитьВыписку(ОтборОрганизация, ОтборБанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла, Кодировка = Неопределено) Экспорт
	
	ДлительнаяОперация = ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка);
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Загрузка выписки из банка'");
		
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиБанковскойВыпискиВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиБанковскойВыпискиВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда // задание было отменено
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеДлительнойОперации(ДлительнаяОперация)
	
	ШаблонСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:
							|%1
							|Подробности в журнале регистрации.'");
	Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.КраткоеПредставлениеОшибки);
	Иначе
		СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлЗагрузки",                            ОписаниеФайла.Имя);
	СтруктураПараметров.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	СтруктураПараметров.Вставить("Кодировка",                               Кодировка);
	Если НЕ ПустаяСтрока(ОписаниеФайла.Хранение) Тогда
		СтруктураПараметров.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение));
	КонецЕсли;
	
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Добавить(ОтборОрганизация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Добавить(ОтборБанковскийСчет);
	ИначеЕсли ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Добавить(БанковскиеСчетаБезИнтеграции.Счета);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СведенияОВладельцеБанковскогоСчетаИзКонтекста", СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	Если ИнтеграцияСБанкамиПодключена И ЕстьБанковскиеСчетаБезИнтеграции Тогда
		СтруктураПараметров.Вставить("РежимИнтеграцииОграничиватьПериодВыписки", Истина);
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка выписки из банка'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.КлючФоновогоЗадания = Обработки.КлиентБанк.КлючФоновогоЗаданияЗагрузкаВыписки();
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.КлиентБанк.ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала",
		СтруктураПараметров,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки)
	
	Для Каждого ТекстСообщения Из РезультатЗагрузки.СообщенияПользователю Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Если РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла" Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось прочитать файл'"));
		Возврат;
	КонецЕсли;
	
	Если РезультатЗагрузки.Свойство("Организация") Тогда
		ОтборОрганизация = РезультатЗагрузки.Организация;
		ОтборОрганизацияИспользование = ЗначениеЗаполнено(РезультатЗагрузки.Организация);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	КонецЕсли;
	
	Если РезультатЗагрузки.Свойство("БанковскийСчет") Тогда
		ОтборБанковскийСчет = РезультатЗагрузки.БанковскийСчет;
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(РезультатЗагрузки.БанковскийСчет);
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	КонецЕсли;
	
	Если РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиРаспознавания"
		ИЛИ РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияКонтрагентов"
		ИЛИ РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияДокументов"
		ИЛИ РезультатЗагрузки.РезультатВыполнения = "ПередЗагрузкойПоказыватьФормуОбменаСБанком"
		ИЛИ РезультатЗагрузки.РезультатВыполнения = "НеобходимоСоздатьКонтрагентов" Тогда
		
		ПараметрыФормыКлиентБанка = Новый Структура;
		ПараметрыФормыКлиентБанка.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", РезультатЗагрузки.АдресХранилищаРаспознанныеДанныеИзБанка);
		ПараметрыФормыКлиентБанка.Вставить("СообщенияПользователюВФормеОбменСБанком", РезультатЗагрузки.СообщенияПользователюВФормеОбменСБанком);
		ПараметрыФормыКлиентБанка.Вставить("НачалоПериода",                           ПериодНачало);
		ПараметрыФормыКлиентБанка.Вставить("КонецПериода",                            ПериодОкончание);
		ПараметрыФормыКлиентБанка.Вставить("СоглашениеЭД",                            СоглашениеЭД);
		ПараметрыФормыКлиентБанка.Вставить("ЭлектроннаяВыпискаБанка",                 ВыпискиБанка);
		
		Если РезультатЗагрузки.Свойство("ИмяФайла") Тогда
			ПараметрыФормыКлиентБанка.Вставить("ФайлЗагрузки", РезультатЗагрузки.ИмяФайла);
		КонецЕсли;
		
		ОткрытьФормуКлиентБанка(ПараметрыФормыКлиентБанка);
		
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "УспешнаяЗагрузка" Тогда
		
		Элементы.Список.Обновить();
		
		Если РезультатЗагрузки.Свойство("РезультатСозданияДокументов") Тогда
			ВалютаСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗагрузки, "ВалютаСчета");
			ПоказатьРезультатСозданияДокументов(РезультатЗагрузки.РезультатСозданияДокументов, ВалютаСчета);
			
			ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		КонецЕсли;
		
		ВсегдаОбновлять = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКлиентБанка(ПараметрыФормы = Неопределено) Экспорт
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РежимПоУмолчанию", "ГруппаЗагрузка");
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПараметрыФормы.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборБанковскийСчетИспользование И ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		ПараметрыФормы.Вставить("БанковскийСчет", ОтборБанковскийСчет);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#Область ПрямойОбменСБанком

&НаКлиенте
Процедура ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета)
	
	// Счет определен, начинаем получение выписки
	Если ЗначениеЗаполнено(НастройкиБанковскогоСчета.БанковскийСчет) Тогда
		ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета);
		
	// Счет не определен, спросим у пользователя по какому счету необходимо производить загрузку.
	// Может быть выбран счет по которому не подключен прямой обмен.
	// В этом случае производим загрузку через файл
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", НастройкиБанковскогоСчета.Организация));
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета)
	
	НомерСчета = ПолучитьРеквизитСчета(НастройкиБанковскогоСчета.БанковскийСчет, "НомерСчета");
	
	// Необходимо определить период загрузки
	СтруктураПериода = ПериодЗагрузкиВыписки(НастройкиБанковскогоСчета,
		НастройкиБанковскогоСчета.РежимИнтеграцииОграничиватьПериодВыписки);
	
	БанкИКассаФормыКлиент.ПолучитьВыпискуБанка(ЭтотОбъект, НастройкиБанковскогоСчета, СтруктураПериода);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодЗагрузкиВыписки(Знач НастройкиБанковскогоСчета, Знач РежимИнтеграцииОграничиватьПериодВыписки)
	
	Возврат Обработки.КлиентБанк.ПериодЗагрузкиВыписки(НастройкиБанковскогоСчета, РежимИнтеграцииОграничиватьПериодВыписки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыпискиБанкаВФайл(Знач МассивВыписок)
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьВыпискиПоПрямомуОбменуСБанкомЗавершение(ПараметрыФормы) Экспорт
	
	ОткрытьФормуКлиентБанка(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезФайл

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайл(ФайлЗагрузки, Кодировка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	ДополнительныеПараметры.Вставить("Кодировка",    Кодировка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьВыпискуЧерезФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайлЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФайлЗагрузки) И РасширениеРаботыСФайламиПодключено Тогда
		// Файл определен - можно начинаем чтение
		ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(ДополнительныеПараметры.ФайлЗагрузки, ЭтотОбъект, ДополнительныеПараметры.Кодировка);
	Иначе
		// Файл не определен - запросим файл у пользователя
		ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект, ДополнительныеПараметры.Кодировка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаКлиентБанка

&НаСервереБезКонтекста
Функция ПолучитьНастройкиКлиентБанка(Знач Организация, Знач БанковскийСчет, Знач ИнтеграцияСБанкамиПодключена)
	
	НастройкиБанковскогоСчета = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	
	// Определим банковский счет
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(Организация)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		УстановитьСчетОрганизации(БанковскийСчет, Организация, ИнтеграцияСБанкамиПодключена);
	КонецЕсли;
	
	НастройкиКлиентБанка = Новый Структура;
	НастройкиКлиентБанка.Вставить("Организация",    Организация);
	НастройкиКлиентБанка.Вставить("БанковскийСчет", БанковскийСчет);
	НастройкиКлиентБанка.Вставить("Кодировка",      НастройкиБанковскогоСчета.Кодировка);
	
	Возврат НастройкиКлиентБанка;
	
КонецФункции

&НаКлиенте
Процедура НастройкаКлиентБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Организация <> ОтборОрганизация Тогда
		ОтборОрганизация                 = Результат.Организация;
		ОтборБанковскийСчет              = Результат.БанковскийСчет;
		ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		
		УстановитьВосстановленныеОтборы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиКлиентБанкаДляБанковскогоСчета(Знач Организация, Знач БанковскийСчет)
	
	СтруктураНастроек = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЗначениеЗаполнено(СтруктураНастроек.СоглашениеПрямогоОбменаСБанками));
	Иначе
		// Проверим есть ли в ИБ прямой обмен с банками.
		// Если есть, то следует спрашивать у пользователя,
		// по какому счету производится загрузка
		// Если прямого обмена нет, то предлагаем выбрать файл -
		// банковский счет определяем из файла.
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЭлектронноеВзаимодействиеБП.ИспользуетсяПрямойОбменСБанком(Организация));
		
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьРезультатСозданияДокументов(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость Тогда
		Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатСозданияДокументов(РезультатСозданияДокументов, ВалютаСчета)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Истина;
	
	Если НЕ РезультатСозданияДокументов.Свойство("КоличествоЗагружено") Тогда
		Элементы.ТекстСостояниеЗагрузки.Заголовок = НСтр("ru='Новых документов для загрузки не обнаружено'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Загружено: [КоличествоДокументов]. Поступило: [СуммаПоступило] Списано: [СуммаСписано]'");
		
		СтрокаКоличествоДокументов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РезультатСозданияДокументов.КоличествоЗагружено, "документ, документа, документов");
		СтрокаСуммаПоступило       = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаПоступило, ВалютаСчета, "0,00");
		СтрокаСуммаПоступило       = ?((Прав(СтрокаСуммаПоступило, 1) = "."), СтрокаСуммаПоступило, СтрокаСуммаПоступило + ".");
		СтрокаСуммаСписано         = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаСписано, ВалютаСчета, "0,00");
		СтрокаСуммаСписано         = ?((Прав(СтрокаСуммаСписано, 1) = "."),   СтрокаСуммаСписано,   СтрокаСуммаСписано + ".");
		
		ВставляемыеЗначения = Новый Структура;
		ВставляемыеЗначения.Вставить("КоличествоДокументов", СтрокаКоличествоДокументов);
		ВставляемыеЗначения.Вставить("СуммаПоступило",       СтрокаСуммаПоступило);
		ВставляемыеЗначения.Вставить("СуммаСписано",         СтрокаСуммаСписано);
		Элементы.ТекстСостояниеЗагрузки.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ВставляемыеЗначения);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокументов.ПервыйЗагруженный) Тогда
			Элементы.Список.ТекущаяСтрока = РезультатСозданияДокументов.ПервыйЗагруженный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитСчета(Знач БанковскийСчет, Знач ИмяРеквизита)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, ИмяРеквизита);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьИзКлиентБанкЗавершение(ВыбранныйВариант, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйВариант = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/Обработка.ПанелиПростойИнтерфейс.Команда.Настройки");
	
КонецПроцедуры

#КонецОбласти

#Область ФоновоеЗадание

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	Если УИДЗамера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура СписокПередНачаломДобавленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		
		ИмяДокумента = "СписаниеСРасчетногоСчета";
		
		КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
						"СозданиеФормыСписаниеСРасчетногоСчета",
						"СозданиеОднострочнойФормыСписаниеСРасчетногоСчета");
			
	Иначе
		
		ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
		
		КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
						"СозданиеФормыПоступлениеНаРасчетныйСчет",
						"СозданиеОднострочнойФормыПоступлениеНаРасчетныйСчет");
						
		Если СтруктураОтбора.Свойство("ДатаОтбора") Тогда
			СтруктураОтбора.Вставить("Дата", СтруктураОтбора.ДатаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьИтогиОбработчик()
	
	Если ИтогиВключены Тогда
		ОбновитьИтоги();
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если Команда.Имя = "ПодменюПечатьОбычное_Реестр" Тогда
		НастройкиДинамическогоСписка();
	КонецЕсли;
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	ОбновитьДоступностьКомандыСоздатьНаОсновании();
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиенте
Процедура ОбновитьДоступностьКомандыСоздатьНаОсновании()
	
	Элементы.СоздатьНаОсновании.Доступность = Элементы.Список.ТекущаяСтрока <> Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
		УсловноеОформление.Элементы.Очистить();
	
	// Организация
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизацияИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// БанковскийСчет
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БанковскийСчет");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборБанковскийСчетИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборБанковскийСчет", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Если ИнтеграцияСБанкамиПодключена Тогда
		
		// Комментарий
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Комментарий");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ИнтеграцияСБанкамиПодключена", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		// Скрепка
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЕстьФайлы");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ИнтеграцияСБанкамиПодключена", ВидСравненияКомпоновкиДанных.Равно, Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	// Строки с предупреждениями при загрузке
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Дата");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Поступление");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Списание");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Валюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НазначениеПлатежа");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Контрагент");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВидОперации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерВходящегоДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаВходящегоДокумента");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БанковскийСчет");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Номер");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Ответственный");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Комментарий");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьПредупреждения", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.БанковскиеДокументыСПредупреждениямиПриЗагрузке);
	
	// НПД
	БанкИКассаФормы.УстановитьУсловноеОформлениеНПД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обновление сумм остатков и оборотов за день в форме журнала
//
Процедура ОбновитьИтоги()
	
	Если НЕ ИтогиВключены Тогда
		ВсегдаОбновлять = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекОрганизация    = ?(ОтборОрганизацияИспользование,    ОтборОрганизация,    Неопределено);
		ТекБанковскийСчет = ?(ОтборБанковскийСчетИспользование, ОтборБанковскийСчет, Неопределено);
		Если ОтборДатаОтбора = '00010101' ИЛИ НЕ ОтборДатаОтбораИспользование Тогда
			ТекДата       = ТекущаяДата();
		Иначе
			ТекДата       = ОтборДатаОтбора;
		КонецЕсли;
	ИначеЕсли НЕ ТекДанные.Свойство("Ссылка") Тогда
		ВсегдаОбновлять = Ложь;
		Возврат;
	Иначе
		ТекДата           = ТекДанные.Дата;
		ТекОрганизация    = ТекДанные.Организация;
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
		
		Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) И НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации Тогда
			ТекБанковскийСчет = ОтборБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсегдаОбновлять ИЛИ НачалоДня(ИтогиДата) <> НачалоДня(ТекДата) ИЛИ ИтогиБанковскийСчет  <> ТекБанковскийСчет Тогда
		СтруктураПараметров = Новый Структура("ТекДата, ТекОрганизация, ТекБанковскийСчет",
			ТекДата, ТекОрганизация, ТекБанковскийСчет);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СформироватьПараметрыИтогов(ЭтотОбъект, СтруктураПараметров));
	КонецЕсли;
	
	ВсегдаОбновлять = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПараметрыИтогов(Форма, СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено Тогда
		ТекОрганизация    = ?(Форма.ОтборОрганизацияИспользование,    Форма.ОтборОрганизация,    Неопределено);
		ТекБанковскийСчет = ?(Форма.ОтборБанковскийСчетИспользование, Форма.ОтборБанковскийСчет, Неопределено);
		Если Форма.ОтборДатаОтбора = '00010101' ИЛИ НЕ Форма.ОтборДатаОтбораИспользование Тогда
			ТекДата = ТекущаяДата();
		Иначе
			ТекДата = Форма.ОтборДатаОтбора;
		КонецЕсли;
	Иначе
		ТекДата           = СтруктураПараметров.ТекДата;
		ТекОрганизация    = СтруктураПараметров.ТекОрганизация;
		ТекБанковскийСчет = СтруктураПараметров.ТекБанковскийСчет;
	КонецЕсли;
	
	СтруктураИтогов = ПолучитьИтоги(ТекДата, ТекОрганизация, ТекБанковскийСчет);
	
	Возврат Новый Структура(
		"ИтогиБанковскийСчет, ИтогиДата, ДатаИтогов, ИтогиНаНачалоДня, ИтогиНаКонецДня,
		|ИтогиПоступило, ИтогиСписано",
			ТекБанковскийСчет,
			ТекДата, Формат(ТекДата, "ДФ=dd.MM.yyyy"),
			СтруктураИтогов.НачальныйОстаток,
			СтруктураИтогов.КонечныйОстаток,
			СтруктураИтогов.ВсегоПоступило,
			СтруктураИтогов.ВсегоСписано);
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу сумм остатков и оборотов за указанный день по указанному счету
//
Функция ПолучитьИтоги(Знач ТекДата, Знач ТекОрганизация, Знач ТекБанковскийСчет)
	
	СтруктураРезультат = Новый Структура("НаименованиеСчета,
		|НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток"
		, ""
		, 0, 0, 0, 0);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	// Если нет доступных организаций, то Итоги не вычисляем
	Если СписокДоступныхОрганизаций.Количество() = 0 Тогда
		Возврат СтруктураРезультат;
	ИначеЕсли ЗначениеЗаполнено(ТекОрганизация) Тогда
		// Если организация не числится в списке доступных, то Итоги не вычисляем
		Если СписокДоступныхОрганизаций.Найти(ТекОрганизация) = Неопределено Тогда
			Возврат СтруктураРезультат;
		КонецЕсли;
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаНачальныйОстаток
	|				ИНАЧЕ ВТ_БИ.СуммаНачальныйОстаток
	|			КОНЕЦ), 0) КАК НачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ ВТ_БИ.СуммаОборотДт
	|			КОНЕЦ), 0) КАК ВсегоПоступило,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаОборотКт
	|				ИНАЧЕ ВТ_БИ.СуммаОборотКт
	|			КОНЕЦ), 0) КАК ВсегоСписано,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаКонечныйОстаток
	|				ИНАЧЕ ВТ_БИ.СуммаКонечныйОстаток
	|			КОНЕЦ), 0) КАК КонечныйОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		БИ.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|		БИ.ВалютнаяСуммаНачальныйОстаток КАК ВалютнаяСуммаНачальныйОстаток,
	|		БИ.СуммаОборотДт КАК СуммаОборотДт,
	|		БИ.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
	|		БИ.СуммаОборотКт КАК СуммаОборотКт,
	|		БИ.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
	|		БИ.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|		БИ.ВалютнаяСуммаКонечныйОстаток КАК ВалютнаяСуммаКонечныйОстаток,
	|		ВЫБОР
	|			КОГДА БИ.ВалютнаяСуммаНачальныйОстаток <> 0
	|					ИЛИ БИ.ВалютнаяСуммаОборотДт <> 0
	|					ИЛИ БИ.ВалютнаяСуммаОборотКт <> 0
	|					ИЛИ БИ.ВалютнаяСуммаКонечныйОстаток <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВалютныйСчет
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаИтоговНачалоДня, &ДатаИтоговКонецДня, , ДвиженияИГраницыПериода, Счет В (&СчетаССубконтоБанковскиеСчета), &ВидСубконтоБанковскиеСчета, Организация В (&Организации) {(ВЫРАЗИТЬ(Субконто1 КАК Справочник.БанковскиеСчета)) КАК БанковскийСчетИтогов}) КАК БИ) КАК ВТ_БИ";
	
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(ТекОрганизация);
	Иначе
		СписокОрганизаций = СписокДоступныхОрганизаций;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("БанковскийСчетИтогов");
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ТекБанковскийСчет;
		СтруктураРезультат.НаименованиеСчета = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекБанковскийСчет, "Наименование"));
	КонецЕсли;
	
	ПостроительЗапроса.Параметры.Вставить("Организации",         СписокОрганизаций);
	ПостроительЗапроса.Параметры.Вставить("ДатаИтоговНачалоДня", НачалоДня(ТекДата));
	ПостроительЗапроса.Параметры.Вставить("ДатаИтоговКонецДня",  КонецДня(ТекДата));
	ПостроительЗапроса.Параметры.Вставить("ВалютаРеглУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПостроительЗапроса.Параметры.Вставить("ВидСубконтоБанковскиеСчета",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	ПостроительЗапроса.Параметры.Вставить("СчетаССубконтоБанковскиеСчета",
		УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = ПостроительЗапроса.ПолучитьЗапрос().Выполнить();
	
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		Выборка = РезультатыЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьИтоги()
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВосстановленныеОтборы(ТолькоОрганизацияИСчет = Ложь)
	
	// Из сохраненного отбора может прийти битая ссылка - счет в настройках сохранен, но был удален позже.
	// Проверим отбор и очистим его, если счет битый.
	Если ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		Если ЗначениеЗаполнено(ОтборБанковскийСчет) И Не ОбщегоНазначения.СсылкаСуществует(ОтборБанковскийСчет) Тогда
			ОтборБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
			ОтборБанковскийСчетИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если НЕ ТолькоОрганизацияИСчет Тогда
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	КонецЕсли;
	
	БанкИКассаФормы.ОпределитьСчетаБезИнтеграции(ЭтотОбъект);
	УстановитьВидимостьБанковскогоСчета();
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
	НазваниеБанкаОсновногоБанковскогоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ОтборБанковскийСчет, "Банк.Наименование");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБанковскогоСчета()
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации    = ИспользуетсяНесколькоБанковскихСчетовОрганизации();
	
	Элементы.ОтборБанковскийСчет.Видимость              = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	Элементы.ОтборБанковскийСчетИспользование.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяНесколькоБанковскихСчетовОрганизации()
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		Возврат Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ОтборОрганизация);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСчетОрганизации(СчетОрганизации, Знач Организация, Знач ИнтеграцияСБанкамиПодключена)
	
	Если Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	// В режиме интеграции, при открытии в первый раз показываем операции по всем счетам.
	Если Не ИнтеграцияСБанкамиПодключена Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация,
			ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРежимИнтеграцииСБанком()
	
	// Интеграция подключена, значит основной банковский счет организации - это счет интеграции.
	БанковскийСчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборОрганизация, "ОсновнойБанковскийСчет");
	БанкИнтеграции            = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетОрганизации, "Банк");
	РеквизитыБанкаИнтеграции  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанкИнтеграции,
	"Наименование, Код");
	
	НазваниеБанкаИнтеграции   = РеквизитыБанкаИнтеграции.Наименование;
	БИКБанкаИнтеграции        = РеквизитыБанкаИнтеграции.Код;
	
	Если Не ЕстьБанковскиеСчетаБезИнтеграции Тогда
		ВидимостьИзНастроек = ХранилищеОбщихНастроек.Загрузить(
		"ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком", БИКБанкаИнтеграции);
		ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком = ?(ВидимостьИзНастроек = Неопределено, Истина, ВидимостьИзНастроек);
	КонецЕсли;
	
	БанкИКассаФормы.НастроитьФормуЖурналаДляРежимаИнтеграции(ЭтотОбъект, ИнтеграцияСБанкамиПодключена);
	
	БанкИКассаФормы.ПоказатьКонтекстнаяПодсказкаИнтеграцияСБанком(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеСоставаБанковскихСчетовОрганизации()
	
	БанкИКассаФормы.ОпределитьСчетаБезИнтеграции(ЭтотОбъект);
	УстановитьВидимостьБанковскогоСчета();
	
	Если ЕстьБанковскиеСчетаБезИнтеграции Тогда
		ВидимостьКонтекстнаяПодсказкаИнтеграцияСБанком = Ложь;
		БанкИКассаФормы.ПоказатьКонтекстнаяПодсказкаИнтеграцияСБанком(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПравоПримененияСпецрежима

&НаСервере
Процедура УстановитьПрименяетсяУСНПатент()
	
	ДатаПроверки = ОбщегоНазначения.ТекущаяДатаПользователя();
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПрименениеУСН        = УчетнаяПолитика.ПрименяетсяУСН(ОтборОрганизация, ДатаПроверки);
		ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(ОтборОрганизация, ДатаПроверки);
	Иначе
		ПрименениеУСН        = Ложь;
		ПрименяетсяУСНПатент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформациюОПравеПримененияСпецрежима()
	
	// Если не заполнена организация, тогда не показываем предупреждение.
	// Если организация не на УСН или Патенте, то не показываем предупреждение.
	Если НЕ (ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) 
		И (ПрименениеУСН ИЛИ ПрименяетсяУСНПатент)) Тогда
		Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере()
	
	ИнформацияОПравеПримененияСпецрежима = КонтрольПраваПримененияСпецрежима.ИнформацияОПравеПримененияСпецрежима(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы());
		
	СледующееЗначениеНапоминания         = ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания;
	СсылкаНаСтатьюИТС                    = ИнформацияОПравеПримененияСпецрежима.СсылкаНаСтатьюИТС;
	
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = ИнформацияОПравеПримененияСпецрежима.Показать;
	Элементы.ИнформацияОПравеПримененияСпецрежима.ЦветФона = ИнформацияОПравеПримененияСпецрежима.ЦветФонаГруппы;
	Элементы.ТекстИнформации.Заголовок = ИнформацияОПравеПримененияСпецрежима.ТекстИнформации;
	
	Элементы.НапомнитьПозже.Заголовок  = ИнформацияОПравеПримененияСпецрежима.ТекстНапомнитьПозже;
	// В случае если это последний шаг, то прячем команду "Напомнить позже"
	Элементы.НапомнитьПозже.Видимость  = (ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания < 100);
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьПоказНапоминанияНаСервере()
	
	КонтрольПраваПримененияСпецрежима.ОтложитьПоказНапоминания(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы(), 
		СледующееЗначениеНапоминания);
		
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПредупрежденийПриЗагрузке

&НаСервере
Процедура УстановитьВариантОтбораПредупрежденийПриЗагрузкеИзПараметров(Параметры)
	
	Если Параметры.Свойство("ПоказатьПредупреждения")
		И Параметры.ПоказатьПредупреждения Тогда
		
		ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораТребующиеПроверки();
		ОткрытаДляПроверкиЗагрузкиДокументов = Истина;
		
	Иначе
		
		ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораВсе();
		ОткрытаДляПроверкиЗагрузкиДокументов = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораВсе()
	Возврат "Все";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВариантОтбораТребующиеПроверки()
	Возврат "ТребующиеПроверки";
КонецФункции

&НаСервере
Процедура ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор()
	
	ОрганизацияПредупреждений = ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено);
	БанковскийСчетПредупреждений = ?(ОтборБанковскийСчетИспользование, ОтборБанковскийСчет, Неопределено);
	ДатаПредупреждений = ?(ОтборДатаОтбораИспользование, ОтборДатаОтбора, Неопределено);
	
	ЕстьПредупреждения = ЕстьДокументыСПредупреждениямиПриЗагрузке(
		ОрганизацияПредупреждений, БанковскийСчетПредупреждений, ДатаПредупреждений);
	
	Элементы.ГруппаПредупрежденияПриЗагрузкеИзКлиентБанка.Видимость = ЕстьПредупреждения;
	Если Не ЕстьПредупреждения Тогда
		ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораВсе();
	КонецЕсли;
	
	УстановитьОтборПредупрежденийПриЗагрузке(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДокументыСПредупреждениямиПриЗагрузке(Организация, СчетОрганизации, Дата)
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	ПараметрыОтбораПредупреждений.СчетОрганизации = СчетОрганизации;
	ПараметрыОтбораПредупреждений.НачалоПериода = Дата;
	ПараметрыОтбораПредупреждений.КонецПериода = Дата;
	
	Возврат РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПредупрежденийПриЗагрузке(Форма)
	
	Настройки = Форма.Список.КомпоновщикНастроек.Настройки;
	
	ИмяПоля = "Ссылка";
	
	Если Форма.ВариантОтбораПредупрежденийПриЗагрузке = ВариантОтбораТребующиеПроверки() Тогда
		
		ОрганизацияПредупреждений = ?(Форма.ОтборОрганизацияИспользование, Форма.ОтборОрганизация, Неопределено);
		ДокументыСПредупреждениямиПриЗагрузке = ДокументыСПредупреждениямиПриЗагрузке(ОрганизацияПредупреждений);
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Настройки.Отбор,
			ИмяПоля);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Настройки.Отбор,
			ИмяПоля,
			ДокументыСПредупреждениямиПриЗагрузке,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Настройки.Отбор,
			ИмяПоля);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыСПредупреждениямиПриЗагрузке(Организация)
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	
	Возврат РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ДокументыСПредупреждениями(ПараметрыОтбораПредупреждений);
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Процедура БанкИНомерСчета(БанковскийСчет, Банк, НомерСчета)

	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		Возврат;
		
	КонецЕсли;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Банк, НомерСчета");
	Банк = ЗначенияРеквизитов.Банк;
	НомерСчета = ЗначенияРеквизитов.НомерСчета;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьБаннерДиректБанк(Форма)
	
	Элементы = Форма.Элементы;
	ВидимостьБаннера = Ложь;
	Если Не Элементы.Баннер.Видимость // если не виден баннер персонализированного предложения
		И ЗначениеЗаполнено(Форма.ОтборБанковскийСчет)
		И Форма.ВидимостьЭлементовДиректБанк = "ПоказатьБаннер" Тогда 
		
		ВидимостьБаннера = Истина;
		
		Если ЗначениеЗаполнено(Форма.НазваниеБанкаОсновногоБанковскогоСчета) Тогда
			ЧастиБанера = Новый Массив;
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Обменивайтесь с банком'"), Новый Шрифт(Новый Шрифт, "Arial", 14)));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				Форма.НазваниеБанкаОсновногоБанковскогоСчета, Новый Шрифт(Новый Шрифт, "Arial", 14)));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'напрямую!'"), Новый Шрифт(Новый Шрифт, "Arial", 14)));
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Подключите сервис 1С:ДиректБанк'"),,,, "ПодключитьДиректБанк"));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'для отправки платежных документов и получения выписок'")));
			ЧастиБанера.Добавить(Символы.ПС);
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'напрямую из 1С:Предприятия, без использования клиент-банка.'")));
			ЧастиБанера.Добавить(" ");
			ЧастиБанера.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Подробнее'"),,,, "https://portal.1c.ru/applications/44"));
			
			Элементы.ДекорацияТекстРекламы.Заголовок = Новый ФорматированнаяСтрока(ЧастиБанера);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаРекламаДиректБанк.Видимость = ВидимостьБаннера;
	
КонецПроцедуры

&НаСервере
Процедура ОтборБанковскийСчетПриИзмененииСервер()
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	
	БанкИНомерСчета(ОтборБанковскийСчет, Банк, НомерСчета);
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборБанковскийСчет);
	
	ПоказатьБаннерПредупрежденийПриЗагрузкеИУстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ОтборОрганизацияПриИзмененииСервер()

	УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация, ИнтеграцияСБанкамиПодключена);
	ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	
	УстановитьПрименяетсяУСНПатент();
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);

	УстановитьВосстановленныеОтборы(Истина);
	
	БанкИНомерСчета(ОтборБанковскийСчет, Банк, НомерСчета);
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборБанковскийСчет);
	
КонецПроцедуры

&НаСервере
Процедура НастройкиДинамическогоСписка()
	
	Отчеты.РеестрДокументов.НастройкиДинамическогоСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьБаннерДиректБанк()
	
	ПоказатьБаннерДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", ?(ОтборОрганизацияИспользование, ОтборОрганизация, Неопределено));
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияБанковскиеВыписки());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
	// Скрываем баннер ДиректБанка, если есть персонализированное предложение
	Если Элементы.Баннер.Видимость Тогда
		Элементы.ГруппаРекламаДиректБанк.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	ПерсонализированныеПредложенияСервисов.ЗакрытьБаннер(ЭтотОбъект, ОтборОрганизация);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура СкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком()
	
	БанкИКассаФормы.СкрытьНажатиеТекстКонтекстнаяПодсказкиИнтеграцияСБанком(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти
