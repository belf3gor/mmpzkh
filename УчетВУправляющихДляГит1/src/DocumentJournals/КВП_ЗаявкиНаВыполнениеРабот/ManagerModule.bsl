
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура формирует таблицу документов "Заявка на выполнение работ" для вывода на печать.
//
Функция СформироватьИтоговуюТаблицу(Список, Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка КАК ДокСсылка
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот";
	
	Если Элементы.ИспользоватьОтбор.Пометка Тогда
	
		Флаг        = Ложь;
		ФлагОтбор   = Истина;
		ТексУсловия = "";
		
		// Готовим условия для отбора значения.
		Если ЗначениеЗаполнено(Форма.ДатаОтбораС)
		   И ЗначениеЗаполнено(Форма.ДатаОтбораПо) Тогда
			Запрос.Текст = Запрос.Текст + 
							ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.Дата <= &ДатаКон
							|	И КВП_ЗаявкаНаВыполнениеРабот.Дата >= &ДатаНач", Флаг);
			Запрос.УстановитьПараметр("ДатаНач", Форма.ДатаОтбораС);
			Запрос.УстановитьПараметр("ДатаКон", Форма.ДатаОтбораПо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ТипРаботОтбор) Тогда
			Запрос.Текст = Запрос.Текст + 
							ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.ВидОперации = &ВидОперации", Флаг);
			Запрос.УстановитьПараметр("ВидОперации", Форма.ТипРаботОтбор);
			ФлагОтбор = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СтатусВыполнения) Тогда
			Если Форма.СтатусВыполнения = 1 Тогда
				Статус = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Выполнено;
				Запрос.Текст = Запрос.Текст
							 + ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.ВремяУдобноеДляЗаказчика 
												| = КВП_ЗаявкаНаВыполнениеРабот.ВремяФактическогоОкончанияРабот", Флаг);
			ИначеЕсли Форма.СтатусВыполнения = 2 Тогда
				Статус = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Выполнено;
				Запрос.Текст = Запрос.Текст + 
								ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.Просрочена = &Просрочена", Флаг);
				Запрос.УстановитьПараметр("Просрочена", Истина);
			ИначеЕсли Форма.СтатусВыполнения = 3 Тогда
				Статус = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Принята;
			ИначеЕсли Форма.СтатусВыполнения = 4 Тогда
				Статус = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Отменена;
			КонецЕсли;
			Запрос.Текст = Запрос.Текст
						 + ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.СтатусВыполнения = &СтатусВыполнения", Флаг);
			
			Запрос.УстановитьПараметр("СтатусВыполнения", Статус);
			ФлагОтбор = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.КатегорияРаботОтбор) Тогда
			Запрос.Текст = Запрос.Текст + 
							ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.КатегорияВыполняемыхРабот = &КатегорияРаботОтбор", Флаг);
			Запрос.УстановитьПараметр("КатегорияРаботОтбор", Форма.КатегорияРаботОтбор);
			ФлагОтбор = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ОтветственныйОтбор) Тогда
			Запрос.Текст = Запрос.Текст + 
							ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.ОтветственныйЗаВыполнение = &ОтветственныйЗаВыполнение", Флаг);
			Запрос.УстановитьПараметр("ОтветственныйЗаВыполнение", Форма.ОтветственныйОтбор);
			ФлагОтбор = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ДиспетчерОтбор) Тогда
			Запрос.Текст = Запрос.Текст + 
							ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.Ответственный = &Ответственный", Флаг);
			Запрос.УстановитьПараметр("Ответственный", Форма.ДиспетчерОтбор);
			ФлагОтбор = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.ЛСОтбор) Тогда
			
			Если ТипЗнч(Форма.ЛСОтбор) = ТипЗнч(Справочники.КВП_Здания.ПустаяСсылка()) Тогда
				Запрос.Текст = Запрос.Текст + 
								ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.Здание = &Здание", Флаг);
				Запрос.УстановитьПараметр("Здание", Форма.ЛСОтбор);
				ФлагОтбор = Ложь;
				Если Не Форма.ПодъездОтбор.Пустая() Тогда
					Запрос.Текст = Запрос.Текст + 
								ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.Подъезд = &Подъезд", Флаг);
					Запрос.УстановитьПараметр("Подъезд", Форма.ПодъездОтбор);
					ФлагОтбор = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Форма.ЛСОтбор) = ТипЗнч(Справочники.КВП_ЛицевыеСчета.ПустаяСсылка()) Тогда
				Запрос.Текст = Запрос.Текст + 
								ПолучитьУсловие("КВП_ЗаявкаНаВыполнениеРабот.ЛицевойСчет = &ЛицевойСчет", Флаг);
				Запрос.УстановитьПараметр("ЛицевойСчет", Форма.ЛСОтбор);
				ФлагОтбор = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавим упорядочивание.
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	// Получаем результаты и выводим его в табличный документ.
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка;
	
КонецФункции // СформироватьИтоговуюТаблицу()

// Функция формирует условие для запроса.
//
Функция ПолучитьУсловие(ТекстУсловия, Флаг)
	
	Если НЕ Флаг Тогда 
		ТекстУсловия = "
		|ГДЕ 
		|	" + ТекстУсловия;
		Флаг = Истина;
	Иначе
		ТекстУсловия = "
		|	И " + ТекстУсловия;
	КонецЕсли;
	
	Возврат ТекстУсловия;
	
КонецФункции // ПолучитьУсловие()

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрЗаявок") Тогда
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрЗаявок", "Реестр заявок", ПечатьРеестрЗаявок(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры // Печать()

// Функция формирует табличный документ реестра заявок.
//
Функция ПечатьРеестрЗаявок(МассивОбъектов, ОбъектыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	Макет  = ЖурналыДокументов.КВП_ЗаявкиНаВыполнениеРабот.ПолучитьМакет("РеестрЗаявок");
	
	Для Каждого Объект Из МассивОбъектов Цикл
		
		Область = Макет.ПолучитьОбласть("Область");
		ЗаполнитьЗначенияСвойств(Область.Параметры, Объект);
		Если ЗначениеЗаполнено(Объект.ЛицевойСчет) Тогда
			Область.Параметры.ЛицевойСчетНадпись = "ЛицевойСчет:";
			Область.Параметры.ЛицевойСчет        = Объект.ЛицевойСчет;
			Область.Параметры.ТелефонНадпись     = "Телефон:";
			Область.Параметры.Телефон            = Объект.Телефон;
		КонецЕсли;
		Область.Параметры.Адрес = Объект.Адрес;
		
		УдобноеВремяВыполненияРабот = "";
		ВремяНачалаРабот    = Формат(Объект.ВремяУдобноеДляЗаказчика,               "ДФ='dd.MM.yyyy HH:mm'");
		ВремяОкончанияРабот = Формат(Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот, "ДФ='dd.MM.yyyy HH:mm'");
		Если Не ПустаяСтрока(ВремяНачалаРабот) Тогда
			
			УдобноеВремяВыполненияРабот = ВремяНачалаРабот;
			Если Не ПустаяСтрока(ВремяОкончанияРабот) И Не ВремяНачалаРабот = ВремяОкончанияРабот Тогда
				УдобноеВремяВыполненияРабот = УдобноеВремяВыполненияРабот + " - " + ВремяОкончанияРабот;
			КонецЕсли;
		КонецЕсли;
		Область.Параметры.УдобноеВремяВыполненияРабот = УдобноеВремяВыполненияРабот;
		
		Если Объект.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Выполнено Тогда
			ДатаДляСравненияСрокаЗаявки = Объект.ВремяУдобноеДляЗаказчика;
			Если Не Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот = Дата(1,1,1) Тогда
				ДатаДляСравненияСрокаЗаявки = Объект.ВремяУдобноеДляЗаказчикаОкончаниеРабот;
			КонецЕсли;
			Если Объект.ВремяФактическогоОкончанияРабот > ДатаДляСравненияСрокаЗаявки Тогда
				Область.Параметры.СтатусЗаявки = "выполнена, но просрочена";
			Иначе
				Область.Параметры.СтатусЗаявки = "выполнена в срок";
			КонецЕсли;
			ТабДок.Вывести(Область);
			Продолжить;
		КонецЕсли;
		
		КонецПериода = Объект.ВремяУдобноеДляЗаказчика;
		
		Если Объект.ВремяФактическогоОкончанияРабот < КонецПериода
			И Объект.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Принята Тогда
			Область.Параметры.СтатусЗаявки = "не выполнена в срок";
			ТабДок.Вывести(Область);
			Продолжить;
		КонецЕсли;
		
		Если Объект.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.Отменена Тогда
			Область.Параметры.СтатусЗаявки = "заявка отменена";
			ТабДок.Вывести(Область);
			Продолжить;
		КонецЕсли;
		
		Если Объект.СтатусВыполнения = Перечисления.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка Тогда
			Область.Параметры.СтатусЗаявки = "новая";
			ТабДок.Вывести(Область);
			Продолжить;
		КонецЕсли;
		
		ТабДок.Вывести(Область);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьРеестрЗаявок()

#КонецОбласти

#КонецЕсли