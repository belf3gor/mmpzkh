
///////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Процедура устанавливает отбор табличного поля "ЖурналДокументовСписок".
//
Процедура УстановитьОтбор(ИзменитьСтатусОтбора = Ложь)
	
	Если ИзменитьСтатусОтбора Тогда
		Элементы.ИспользоватьОтбор.Пометка = Не Элементы.ИспользоватьОтбор.Пометка;
	КонецЕсли;
	
	ИспользоватьОтбор = Элементы.ИспользоватьОтбор.Пометка;
	
	Элементы.ИспользоватьОтбор.Картинка = ?(ИспользоватьОтбор, БиблиотекаКартинок.ОтключитьОтбор,
											БиблиотекаКартинок.ОтборИСортировка);
	Элементы.ИспользоватьОтбор.Заголовок = ?(ИспользоватьОтбор, "Отключить отбор", "Установить отбор");
	
	// Очистим отбор.
	Если Не РежимВыбора Или ИзменитьСтатусОтбора Тогда
		Список.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Организация",
																ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	
	Если ЗначениеЗаполнено(ЛСОтбор) И ТипЗнч(ЛСОтбор) = Тип("СправочникСсылка.КВП_Здания") Тогда
		Элементы.ПодъездОтбор.Видимость = Истина;
	Иначе
		Элементы.ПодъездОтбор.Видимость = Ложь;
	КонецЕсли;
	
	// Если отбор не используется, то возвращаемся.
	Если Не ИспользоватьОтбор Тогда
		Возврат;
	КонецЕсли;
	
	// Установим отборы.
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтветственныйОтбор) Тогда
		СтруктураОтбора.Вставить("ОтветственныйЗаВыполнение", ОтветственныйОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДиспетчерОтбор) Тогда
		СтруктураОтбора.Вставить("Ответственный", ДиспетчерОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КатегорияРаботОтбор) Тогда
		СтруктураОтбора.Вставить("КатегорияРабот", КатегорияРаботОтбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛСОтбор) Тогда
		Если ТипЗнч(ЛСОтбор) = Тип("СправочникСсылка.КВП_Здания") Тогда
			СтруктураОтбора.Вставить("Здание", ЛСОтбор);
			Элементы.ПодъездОтбор.Видимость = Истина;
			Если ЗначениеЗаполнено(ПодъездОтбор) Тогда
				СтруктураОтбора.Вставить("Подъезд", ПодъездОтбор);
			КонецЕсли;
		Иначе
			СтруктураОтбора.Вставить("ЛицевойСчет", ЛСОтбор);
			Элементы.ПодъездОтбор.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ПодъездОтбор.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ДатаОтбораС = Дата(1,1,1) И Не ДатаОтбораПо = Дата(1,1,1) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Дата",
																НачалоДня(ДатаОтбораС), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		
		Элемент = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Дата");
		Элемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Элемент.ПравоеЗначение   = КонецДня(ДатаОтбораПо);
		Элемент.Использование    = Истина;
		
		//УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Дата", КонецДня(ДатаОтбораПо), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	КонецЕсли;
	
	Если СтатусВыполнения = 1 Тогда
		СтруктураОтбора.Вставить("СтатусЗаявки", ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Выполнено"));
	ИначеЕсли СтатусВыполнения = 2 Тогда
		СтруктураОтбора.Вставить("Просрочена", Истина);
	ИначеЕсли СтатусВыполнения = 3 Тогда
		МассивОтбора = Новый Массив;
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.НоваяЗаявка"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Принята"));
		СтруктураОтбора.Вставить("СтатусЗаявки", МассивОтбора);
	ИначеЕсли СтатусВыполнения = 4 Тогда
		СтруктураОтбора.Вставить("СтатусЗаявки", ПредопределенноеЗначение("Перечисление.КВП_ВидыСтатусовВыполненияРабот.Отменена"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипРаботОтбор) Тогда
		СтруктураОтбора.Вставить("ВидОперации", ТипРаботОтбор);
	КонецЕсли;
	
	Для Каждого ТекЭлементОтбора Из СтруктураОтбора Цикл
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, ТекЭлементОтбора.Ключ,
																ТекЭлементОтбора.Значение, ?(СтатусВыполнения = 3, ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет сведения по текущей заявке в списке.
Процедура ОбновитьСведенияПоТекущейЗаявке()
	
	ТекстПризнаковНеисправности = "";
	
	// Обновление признаков неисправности.
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекстПризнаковНеисправности = ПолучитьТекстПризнаковНеисправностиЗаявки(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	// Если описание пустое, то определим текст по умолчанию.
	Если ПустаяСтрока(ТекстПризнаковНеисправности) Тогда
		ТекстПризнаковНеисправности = "-";
	КонецЕсли;
	
	ПризнакиНеисправностиТекущейЗаявки = ТекстПризнаковНеисправности;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает текст признаков неисправности заявки, разделенный символом ";".
Функция ПолучитьТекстПризнаковНеисправностиЗаявки(Заявка)
	
	ТекстПризнаковНеисправности = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей.ПризнакНеисправности) КАК ПредставлениеПризнакаНеисправности
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот.ПризнакиНеисправностей КАК КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей.Ссылка = &Заявка
	|	И НЕ КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей.ПризнакНеисправности = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ПризнакиНеисправностей.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей.НомерСтроки";
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭтоПервыйПризнак = Истина;
	Пока Выборка.Следующий() Цикл
		
		// Определение значения разделителя.
		Если ЭтоПервыйПризнак Тогда
			ПрефиксПризнака = "- ";
			ЭтоПервыйПризнак = Ложь;
		Иначе
			ПрефиксПризнака = ";" + Символы.ПС + "- ";
		КонецЕсли;
		
		// Добавление представления текущего признака в общий текст.
		ТекстПризнаковНеисправности = ТекстПризнаковНеисправности + ПрефиксПризнака + СокрЛП(Выборка.ПредставлениеПризнакаНеисправности);
		
	КонецЦикла;
	
	Возврат СокрЛП(ТекстПризнаковНеисправности);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтборОрганизация = УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	ТекущаяРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "РабочаяДата", ТекущаяРабочаяДата);
	
	Если Параметры.Свойство("РежимВыбора", РежимВыбора) Тогда
		Элементы.Список.РежимВыбора = РежимВыбора;
	КонецЕсли;
	
	ДатаОтбораС  = НачалоМесяца(ТекущаяРабочаяДата);
	ДатаОтбораПо = КонецМесяца(ТекущаяРабочаяДата);
	
	Если Не РежимВыбора Тогда
		Элементы.ИспользоватьОтбор.Пометка =
			УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗаявкиНаВыполнениеРабот",
																			"ИспользоватьОтбор", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не РежимВыбора Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЗаявкиНаВыполнениеРабот", "ИспользоватьОтбор",
																		Элементы.ИспользоватьОтбор.Пометка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода ОтборОрганизация.
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Организация",
																ОтборОрганизация, ЗначениеЗаполнено(ОтборОрганизация));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ДатаОтбораС".
Процедура ДатаОтбораСПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ДатаОтбораПо".
Процедура ДатаОтбораПоПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ТипРаботОтбор".
Процедура ТипРаботОтборПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "СтатусВыполнения".
Процедура СтатусВыполненияПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "КатегорияВыполняемыхРабот".
Процедура КатегорияРаботОтборПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ОтветственныйОтбор".
Процедура ОтветственныйОтборПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ДиспетчерОтбор".
Процедура ДиспетчерОтборПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ЛСОтбор".
Процедура ЛСОтборПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЛСОтбор) И ТипЗнч(ЛСОтбор) = Тип("СправочникСсылка.КВП_Здания") Тогда
		Элементы.ПодъездОтбор.Видимость = Истина;
	Иначе
		Элементы.ПодъездОтбор.Видимость = Ложь;
		ПодъездОтбор = ПредопределенноеЗначение("Справочник.КВП_Подъезды.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "ПодъездОтбор".
Процедура ПодъездОтборПриИзменении(Элемент)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИспользоватьОтбор".
Процедура ИспользоватьОтбор(Команда)
	
	УстановитьОтбор(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПечатьРеестраЗаявок".
Процедура ПечатьРеестраЗаявок(Команда)
	
	ПараметрКоманды = СформироватьСписок();
	
	УПЖКХ_ТиповыеМетодыКлиент.ВыполнитьКомандуПечати("ЖурналДокументов"
												   + ".КВП_ЗаявкиНаВыполнениеРабот",
													 "РеестрЗаявок", ПараметрКоманды,
													 Неопределено, УПЖКХ_ТиповыеМетодыКлиент.ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды));
	
КонецПроцедуры

&НаСервере
// Функция возвращает список документов для печати
Функция СформироватьСписок()
	
	Возврат ЖурналыДокументов.КВП_ЗаявкиНаВыполнениеРабот.СформироватьИтоговуюТаблицу(Список, ЭтаФорма).ВыгрузитьКолонку("ДокСсылка");
	
КонецФункции

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Список".
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// При выделении заявки в списке необходимо обновить данные по текущей заявке.
	ПодключитьОбработчикОжидания("ОбновитьСведенияПоТекущейЗаявке", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти