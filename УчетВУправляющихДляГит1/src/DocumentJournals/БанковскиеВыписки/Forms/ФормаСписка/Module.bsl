#Область ПеременныеФормы

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем УИДЗамера;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	НастройкиКлиента  = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	
	ВходящийОтборПоОрганизации = Ложь;
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		ВходящийОтборПоОрганизации = СтруктураОтбора.Свойство("Организация", ОтборОрганизация);
		СтруктураОтбора.Свойство("БанковскийСчет", ОтборБанковскийСчет);
		СтруктураОтбора.Свойство("ДатаОтбора",     ОтборДатаОтбора);
		
		ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		ОтборДатаОтбораИспользование     = ЗначениеЗаполнено(ОтборДатаОтбора);
	КонецЕсли;
	
	ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	ИтогиВключены = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЖурналБанковскиеВыписки", "ИтогиВключены", Истина);
	ИспользоватьТабличныеФормыБанковскихДокументов = Константы.ИспользоватьТабличныеФормыБанковскихДокументов.Получить();
	
	Если НЕ ВходящийОтборПоОрганизации И ОтборОрганизация <> ОсновнаяОрганизация Тогда
		ОтборОрганизация                 = ОсновнаяОрганизация;
		УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация);
		ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Документы.СписаниеСРасчетногоСчета)
		И ПравоДоступа("Редактирование", Метаданные.Документы.ПоступлениеНаРасчетныйСчет);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.ЗагрузитьИзКлиентБанк.Видимость      = МожноРедактировать;
	Элементы.ФормаОткрытьКлиентБанк.Видимость     = МожноРедактировать;
	Элементы.ФормаНастройкаКлиентБанка.Видимость  = МожноРедактировать;
	Элементы.СоздатьНаОсновании.Видимость         = МожноРедактировать;
	
	Если ИтогиВключены Тогда
		Элементы.ГруппаИтоги.Видимость = Истина;
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СформироватьПараметрыИтогов(ЭтотОбъект));
	Иначе
		Элементы.ГруппаИтоги.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	ИспользуетсяЭП = ЭлектронноеВзаимодействиеБП.НастроенОбменДиректБанк();
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.ЖурналДокументов.БанковскиеВыписки",
		"ФормаСписка",
		НСтр("ru = 'Новости: Банковские выписки'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	БанкИНомерСчета(ОтборБанковскийСчет, Банк, НомерСчета);
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборБанковскийСчет);
		
	ПоказатьБаннерДиректБанк(ЭтотОбъект);
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Перем ОтборПоОрганизации, ОтборПоСчету, ОтборПоДате, ОтборПоКонтрагенту, ОтборПоНазначению;
	
	СтруктураОтбора = Неопределено;
	Если Параметры.Свойство("Отбор", СтруктураОтбора) И ЗначениеЗаполнено(СтруктураОтбора) Тогда
		
		Если СтруктураОтбора.Свойство("Организация") И ЗначениеЗаполнено(СтруктураОтбора.Организация) Тогда
			ОтборОрганизация = СтруктураОтбора.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("БанковскийСчет") И ЗначениеЗаполнено(СтруктураОтбора.БанковскийСчет) Тогда
			ОтборБанковскийСчет = СтруктураОтбора.БанковскийСчет;
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("ДатаОтбора") И ЗначениеЗаполнено(СтруктураОтбора.ДатаОтбора) Тогда
			ОтборДатаОтбора = СтруктураОтбора.ДатаОтбора;
			ОтборДатаОтбораИспользование = ЗначениеЗаполнено(ОтборДатаОтбора);
		КонецЕсли;
		
		Параметры.Отбор = Неопределено;
		
	Иначе
		Если ОтборОрганизация <> ОсновнаяОрганизация Тогда
			ОтборОрганизация                 = ОсновнаяОрганизация;
			
			// Предварительно сбросим сохраненный банковский счет, т.к. он не принадлежит текущей организации
			// и может быть проблема при RLS.
			ОтборБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
			
			УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация);
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		ИначеЕсли НЕ ОтборОрганизацияИспользование Тогда
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(ОтборОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВосстановленныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		ОсновнаяОрганизация = Параметр;
		Если ОсновнаяОрганизация <> ОтборОрганизация Тогда
			ОтборОрганизация                 = ОсновнаяОрганизация;
			УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация);
			ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
			
			УстановитьВосстановленныеОтборы(Истина);
			ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
			
		КонецЕсли;
		
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
		
			
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Истина;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Владелец = ОтборОрганизация Тогда
		УстановитьВидимостьБанковскогоСчета();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	ПрисоединенныеФайлыБПКлиент.ОбновитьСписокПослеДобавленияФайла(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "СозданаНастройкаОбменаСБанком" Тогда
		
		ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
			ОтборОрганизация, Банк);
			
		ПоказатьБаннерДиректБанк(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ОтборДокумент) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыОткрытияДокумента = Неопределено;
		ПараметрыФормы.Вставить("Основание", ОтборДокумент);
		
		Если ПараметрыОткрытияДокумента <> Неопределено Тогда
			ВыбранноеЗначение = ПараметрыОткрытияДокумента.ИмяДокумента;
			ПараметрыФормы    = ПараметрыОткрытияДокумента.ПараметрыФормы;
		КонецЕсли;
		
		ОтборДокумент = Неопределено;
		ОткрытьФорму("Документ." + ВыбранноеЗначение + ".ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СообщениеОбменСБанками") Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.Добавить(ВыбранноеЗначение);
		МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
		АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
		
		ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 Тогда
		
		ВыпискиБанка.Очистить();
		ВыпискиБанка.ЗагрузитьЗначения(ВыбранноеЗначение);
		Если ВыпискиБанка.Количество() > 0 Тогда
			МассивВыписок = ВыпискиБанка.ВыгрузитьЗначения();
			АдресФайла    = ПолучитьДанныеВыпискиБанкаВФайл(МассивВыписок);
			ПрочитатьФайлВыпискиНаКлиенте(Новый ОписаниеПередаваемогоФайла(,АдресФайла));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзКлиентБанк(Команда)
	
	Организация    = ?(ОтборОрганизацияИспользование,    ОтборОрганизация,    Неопределено);
	БанковскийСчет = ?(ОтборБанковскийСчетИспользование, ОтборБанковскийСчет, Неопределено);
	ЗагрузитьВыписку(Организация, БанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНеоплаченныеПлатежныеПоручения(Команда)
	
	СтруктураОтбора = Новый Структура("Организация, БанковскийСчет, Дата", ОтборОрганизация, ОтборБанковскийСчет, ОтборДатаОтбора);
	ОткрытьФорму("Документ.ПлатежноеПоручение.Форма.ФормаПодбораНеоплаченных", Новый Структура("Отбор", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоступлениеНаРасчетныйСчет(Команда)
	
	КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
						"СозданиеФормыПоступлениеНаРасчетныйСчет",
						"СозданиеОднострочнойФормыПоступлениеНаРасчетныйСчет");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	
	Если СтруктураОтбора.Свойство("ДатаОтбора") Тогда
		СтруктураОтбора.Вставить("Дата", СтруктураОтбора.ДатаОтбора);
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеСРасчетногоСчета(Команда)
	
	КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
						"СозданиеФормыСписаниеСРасчетногоСчета",
						"СозданиеОднострочнойФормыСписаниеСРасчетногоСчета");
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	СтруктураОтбора = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", СтруктураОтбора), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКлиентБанк(Команда)
	
	ОткрытьФормуКлиентБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКлиентБанка(Команда)
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		Организация = ОтборОрганизация;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		БанковскийСчет = ОтборБанковскийСчет;
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	НастройкиКлиентБанка = ПолучитьНастройкиКлиентБанка(Организация, БанковскийСчет);
	НастройкиКлиентБанка.Вставить("ВозможностьВыбораФайлов", ПодключитьРасширениеРаботыСФайлами());
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаКлиентБанкаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения", НастройкиКлиентБанка, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОсновании(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначения", КлючНазначенияИспользования);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОтборДокумент = ТекущиеДанные.Ссылка;
		ПараметрыФормы.Вставить("Основание", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.БанковскиеВыписки.Форма.ВыборТипаДокумента", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИтоги(Команда)
	
	ИтогиВключены = НЕ ИтогиВключены;
	Элементы.ГруппаИтоги.Видимость = ИтогиВключены;
	Если ИтогиВключены тогда
		ВсегдаОбновлять = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ЖурналБанковскиеВыписки", "ИтогиВключены", ИтогиВключены);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "ОтборПоОрганизациямВЖурналеВыпискиПоБанку");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ОтборОрганизацияПриИзмененииСервер();
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	Если ИтогиВключены Тогда
		ВсегдаОбновлять = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	Иначе
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетПриИзменении(Элемент)
	
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	ОтборБанковскийСчетПриИзмененииСервер();
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОтбораПриИзменении(Элемент)
	
	ОтборДатаОтбораИспользование = ЗначениеЗаполнено(ОтборДатаОтбора);
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБанковскийСчетИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если ОтборБанковскийСчетИспользование Тогда
		СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	КонецЕсли;
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	
	Если ОтборОрганизацияИспользование Тогда
		Если НЕ ОтборБанковскийСчетИспользование И ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
			ОтборБанковскийСчетИспользование = Истина;
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
		КонецЕсли;
		
		СкрытьРезультатСозданияДокументов(ЭтотОбъект);
		
	ИначеЕсли ОтборБанковскийСчетИспользование Тогда
		ОтборБанковскийСчетИспользование = Ложь;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаИспользованиеПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	
	ПересчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура НапомнитьПозжеНажатие(Элемент)
	
	ОтложитьПоказНапоминанияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке(СсылкаНаСтатьюИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстРекламыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьДиректБанк" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
			ОтборОрганизация, Банк, НомерСчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьРекламуДиректБанкНажатие(Элемент)
	
	ЭлектронноеВзаимодействиеБПВызовСервера.СохранитьНастройкуВидимостиРекламыДиректБанк(Банк, Ложь);
	ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	ПоказатьБаннерДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
		КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
			"ОткрытиеФормыПоступлениеНаРасчетныйСчет",
			"ОткрытиеОднострочнойФормыПоступлениеНаРасчетныйСчет");
	ИначеЕсли ТипЗнч(ДанныеСтроки.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		КлючеваяОперация = ?(ИспользоватьТабличныеФормыБанковскихДокументов,
			"ОткрытиеФормыСписаниеСРасчетногоСчета",
			"ОткрытиеОднострочнойФормыСписаниеСРасчетногоСчета");
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатьюКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если ИтогиВключены Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Оповестить("ИзменениеВыписки");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		
		Если ПрисоединенныеФайлыБПКлиент.ПараметрыПеретаскиванияСодержатФайлы(ПараметрыПеретаскивания) Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Ссылка"                 , Строка);
			ДополнительныеПараметры.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПеретаскиваниеФайловОтветПолучен",
				ПрисоединенныеФайлыБПКлиент,
				ДополнительныеПараметры);
			ШаблонВопроса = НСтр("ru='Присоединить файлы к документу %1?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Строка);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаВыписки

&НаКлиенте
Процедура ЗагрузитьВыписку(Организация, БанковскийСчет)
	
	СоглашениеЭД              = Неопределено;
	НастройкиБанковскогоСчета = НастройкиКлиентБанкаДляБанковскогоСчета(Организация, БанковскийСчет);
	Если НастройкиБанковскогоСчета.ПередЗагрузкойПоказыватьФормуОбменаСБанком Тогда
		ОткрытьФормуКлиентБанка();
	ИначеЕсли НастройкиБанковскогоСчета.ЕстьПрямойОбменСБанками Тогда
		ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета);
	Иначе
		ЗагрузитьВыпискуЧерезФайл(НастройкиБанковскогоСчета.ФайлЗагрузки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборСчетаДляЗагрузкиВыпискиЗавершение(ВыбранныйБанковскийСчет, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйБанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновим отборы
	ОтборБанковскийСчет               = ВыбранныйБанковскийСчет;
	ОтборБанковскийСчетИспользование  = Истина;
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если НЕ ОтборОрганизацияИспользование ИЛИ НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ОтборОрганизация              = ПолучитьРеквизитСчета(ОтборБанковскийСчет, "Владелец");
		ОтборОрганизацияИспользование = Истина;
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	КонецЕсли;
	
	// Загрузим выписку по выбранному счету
	ЗагрузитьВыписку(ОтборОрганизация, ОтборБанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлВыпискиНаКлиенте(ОписаниеФайла, Кодировка = Неопределено) Экспорт
	
	Результат = ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка);
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		ИдентификаторЗадания    = Результат.ИдентификаторЗадания;
		АдресХранилища          = Результат.АдресХранилища;
	Иначе
		ОбработатьЗагрузкуБанковскойВыписки(Результат.РезультатЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьБанковскуюВыпискуНаСервере(ОписаниеФайла, Кодировка)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлЗагрузки",                            ОписаниеФайла.Имя);
	СтруктураПараметров.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	СтруктураПараметров.Вставить("Кодировка",                               Кодировка);
	Если НЕ ПустаяСтрока(ОписаниеФайла.Хранение) Тогда
		СтруктураПараметров.Вставить("ДвоичныеДанные", ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение));
	КонецЕсли;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста = Новый Структура;
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("Организация",               Новый Массив);
	СведенияОВладельцеБанковскогоСчетаИзКонтекста.Вставить("БанковскийСчетОрганизации", Новый Массив);
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.Организация.Добавить(ОтборОрганизация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		СведенияОВладельцеБанковскогоСчетаИзКонтекста.БанковскийСчетОрганизации.Добавить(ОтборБанковскийСчет);
	КонецЕсли;
	СтруктураПараметров.Вставить("СведенияОВладельцеБанковскогоСчетаИзКонтекста", СведенияОВладельцеБанковскогоСчетаИзКонтекста);
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.КлиентБанк.ФоноваяЗагрузкаБанковскойВыпискиИзЖурнала",
		СтруктураПараметров,
		НСтр("ru = 'Загрузка выписки из банка'"));
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("РезультатЗагрузки", ПолучитьИзВременногоХранилища(АдресХранилища));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки)
	
	Для Каждого ТекстСообщения Из РезультатЗагрузки.СообщенияПользователю Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Если РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиЧтенияФайла" Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось прочитать файл'"));
		
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиРаспознавания" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияКонтрагентов" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "ЕстьОшибкиСозданияДокументов" ИЛИ
		РезультатЗагрузки.РезультатВыполнения = "НеобходимоСоздатьКонтрагентов" Тогда
		
		Если РезультатЗагрузки.Свойство("Организация") Тогда
			ОтборОрганизация = РезультатЗагрузки.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(РезультатЗагрузки.Организация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		Если РезультатЗагрузки.Свойство("БанковскийСчет") Тогда
			ОтборБанковскийСчет = РезультатЗагрузки.БанковскийСчет;
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(РезультатЗагрузки.БанковскийСчет);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
		КонецЕсли;
		
		ПараметрыФормыКлиентБанка = Новый Структура;
		ПараметрыФормыКлиентБанка.Вставить("АдресХранилищаРаспознанныеДанныеИзБанка", РезультатЗагрузки.АдресХранилищаРаспознанныеДанныеИзБанка);
		ПараметрыФормыКлиентБанка.Вставить("СообщенияПользователюВФормеОбменСБанком", РезультатЗагрузки.СообщенияПользователюВФормеОбменСБанком);
		ПараметрыФормыКлиентБанка.Вставить("НачалоПериода",                           ПериодНачало);
		ПараметрыФормыКлиентБанка.Вставить("КонецПериода",                            ПериодОкончание);
		ПараметрыФормыКлиентБанка.Вставить("СоглашениеЭД",                            СоглашениеЭД);
		ПараметрыФормыКлиентБанка.Вставить("ЭлектроннаяВыпискаБанка",                 ВыпискиБанка);
		
		Если РезультатЗагрузки.Свойство("ИмяФайла") Тогда 
			ПараметрыФормыКлиентБанка.Вставить("ФайлЗагрузки", РезультатЗагрузки.ИмяФайла);
		КонецЕсли;
		
		ОткрытьФормуКлиентБанка(ПараметрыФормыКлиентБанка);
		
	ИначеЕсли РезультатЗагрузки.РезультатВыполнения = "УспешнаяЗагрузка" Тогда
		
		Если РезультатЗагрузки.Свойство("Организация") Тогда
			ОтборОрганизация = РезультатЗагрузки.Организация;
			ОтборОрганизацияИспользование = ЗначениеЗаполнено(РезультатЗагрузки.Организация);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
		КонецЕсли;
		
		Если РезультатЗагрузки.Свойство("БанковскийСчет") Тогда
			ОтборБанковскийСчет = РезультатЗагрузки.БанковскийСчет;
			ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(РезультатЗагрузки.БанковскийСчет);
			ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
		КонецЕсли;
		
		Элементы.Список.Обновить();
		
		Если РезультатЗагрузки.Свойство("РезультатСозданияДокументов") Тогда
			ВалютаСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатЗагрузки, "ВалютаСчета");
			ПоказатьРезультатСозданияДокументов(РезультатЗагрузки.РезультатСозданияДокументов, ВалютаСчета);
			
			ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		КонецЕсли;
		
		ВсегдаОбновлять = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		ПодключитьОбработчикОжидания("ПоказатьИнформациюОПравеПримененияСпецрежима", 0.1, Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКлиентБанка(ПараметрыФормы = Неопределено)
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РежимПоУмолчанию", "ГруппаЗагрузка");
	Если ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ПараметрыФормы.Вставить("Организация",    ОтборОрганизация);
	КонецЕсли;
	
	Если ОтборБанковскийСчетИспользование И ЗначениеЗаполнено(ОтборБанковскийСчет) Тогда
		ПараметрыФормы.Вставить("БанковскийСчет", ОтборБанковскийСчет);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#Область ПрямойОбменСБанком

&НаКлиенте
Процедура ЗагрузитьВыпискуПоПрямомуОбмену(НастройкиБанковскогоСчета)
	
	// Счет определен, начинаем получение выписки
	Если ЗначениеЗаполнено(НастройкиБанковскогоСчета.БанковскийСчет) Тогда
		ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета);
		
	// Счет не определен, спросим у пользователя по какому счету необходимо производить загрузку.
	// Может быть выбран счет по которому не подключен прямой обмен.
	// В этом случае производим загрузку через файл
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", НастройкиБанковскогоСчета.Организация));
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСчетаДляЗагрузкиВыпискиЗавершение", ЭтотОбъект, НастройкиБанковскогоСчета);
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыпискиПоПрямомуОбменуСБанком(НастройкиБанковскогоСчета)
	
	СоглашениеЭД     = НастройкиБанковскогоСчета.СоглашениеПрямогоОбменаСБанками;
	НомерСчета       = ПолучитьРеквизитСчета(НастройкиБанковскогоСчета.БанковскийСчет, "НомерСчета");
	// Необходимо определить период загрузки
	СтруктураПериода = ПериодЗагрузкиВыписки(НастройкиБанковскогоСчета);
	ПериодНачало     = СтруктураПериода.ДатаНачала;
	ПериодОкончание  = СтруктураПериода.ДатаОкончания;
	
	// Вызываем метод ЭДО
	// Выписка будет обработана в событии "ОбработкаВыбора"
	ОбменСБанкамиКлиент.ПолучитьВыпискуБанка(СоглашениеЭД, ПериодНачало, ПериодОкончание, ЭтотОбъект, НомерСчета, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодЗагрузкиВыписки(Знач НастройкиБанковскогоСчета)
	
	СтруктураПериода = Новый Структура;
	СтруктураПериода.Вставить("ДатаНачала");
	СтруктураПериода.Вставить("ДатаОкончания", ТекущаяДатаСеанса());
	// Если период рабочей даты меньше текущей даты сеанса, то используем рабочую дату
	ПериодРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	Если ЗначениеЗаполнено(ПериодРабочейДаты) Тогда
		СтруктураПериода.ДатаОкончания = Мин(ПериодРабочейДаты, СтруктураПериода.ДатаОкончания);
	КонецЕсли;
	
	Организация    = НастройкиБанковскогоСчета.Организация;
	БанковскийСчет = НастройкиБанковскогоСчета.БанковскийСчет;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ПоступлениеНаРасчетныйСчет.Дата КАК Дата
	|	ИЗ
	|		Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|	ГДЕ
	|		ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|		И ПоступлениеНаРасчетныйСчет.СчетОрганизации = &БанковскийСчет
	|		И ПоступлениеНаРасчетныйСчет.Проведен = ИСТИНА
	|		И ПоступлениеНаРасчетныйСчет.Дата < &Дата
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		Дата УБЫВ) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Дата
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		СписаниеСРасчетногоСчета.Дата КАК Дата
	|	ИЗ
	|		Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Организация = &Организация
	|		И СписаниеСРасчетногоСчета.СчетОрганизации = &БанковскийСчет
	|		И СписаниеСРасчетногоСчета.Проведен = ИСТИНА
	|		И СписаниеСРасчетногоСчета.НеПодтвержденоВыпискойБанка = ЛОЖЬ
	|		И СписаниеСРасчетногоСчета.Дата < &Дата
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		СписаниеСРасчетногоСчета.Дата УБЫВ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	Запрос.УстановитьПараметр("Дата",           СтруктураПериода.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураПериода.ДатаНачала = НачалоДня(Выборка.Дата);
	Иначе
		// Если дата неопределена, запросим данные за предыдущий квартал.
		СтруктураПериода.ДатаНачала = НачалоДня(ДобавитьМесяц(СтруктураПериода.ДатаОкончания, -3));
		
		// Ограничим период датой учетной политики
		Если НЕ УчетнаяПолитика.Существует(Организация, СтруктураПериода.ДатаНачала) Тогда
			// Учетная политика на эту дату не определена.
			// Используем дату начала учетной политики
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	УчетнаяПолитикаСрезПервых.Период
			|ИЗ
			|	РегистрСведений.УчетнаяПолитика.СрезПервых(, Организация = &Организация) КАК УчетнаяПолитикаСрезПервых";
			Запрос.УстановитьПараметр("Организация", Организация);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				СтруктураПериода.ДатаНачала = Выборка.Период;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПериода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыпискиБанкаВФайл(Знач МассивВыписок)
	
	МассивСчетов      = Новый Массив;
	СсылкаНаХранилище = "";
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаТекстовыйФормат(МассивВыписок, СсылкаНаХранилище, МассивСчетов);
	
	Возврат СсылкаНаХранилище;
	
КонецФункции

#КонецОбласти

#Область ОбменЧерезФайл

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайл(ФайлЗагрузки)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФайлЗагрузки", ФайлЗагрузки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьВыпискуЧерезФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыпискуЧерезФайлЗавершение(ПодключеноРасширениеРаботыСФайлами, ДополнительныеПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = ПодключеноРасширениеРаботыСФайлами;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ФайлЗагрузки) И РасширениеРаботыСФайламиПодключено Тогда
		// Файл определен - можно начинаем чтение
		ОбменСБанкомКлиент.ЗагрузитьВыбранныйФайл(ДополнительныеПараметры.ФайлЗагрузки, ЭтотОбъект);
	Иначе
		// Файл не определен - запросим файл у пользователя
		ОбменСБанкомКлиент.ВыбратьИЗагрузитьФайл(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаКлиентБанка

&НаСервереБезКонтекста
Функция ПолучитьНастройкиКлиентБанка(Знач Организация, Знач БанковскийСчет)

	НастройкиБанковскогоСчета = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	
	// Определим банковский счет
	Если НЕ ЗначениеЗаполнено(БанковскийСчет) И ЗначениеЗаполнено(Организация)
		И НЕ Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Тогда
		УстановитьСчетОрганизации(БанковскийСчет, Организация);
	КонецЕсли;
	
	НастройкиКлиентБанка = Новый Структура;
	НастройкиКлиентБанка.Вставить("Организация",									 Организация);
	НастройкиКлиентБанка.Вставить("БанковскийСчет",									 БанковскийСчет);
	НастройкиКлиентБанка.Вставить("Кодировка",										 НастройкиБанковскогоСчета.Кодировка);
	
	Возврат НастройкиКлиентБанка;
	
КонецФункции

&НаКлиенте
Процедура НастройкаКлиентБанкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Организация <> ОтборОрганизация Тогда
		ОтборОрганизация                 = Результат.Организация;
		ОтборБанковскийСчет              = Результат.БанковскийСчет;
		ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
		ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
		
		УстановитьВосстановленныеОтборы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиКлиентБанкаДляБанковскогоСчета(Знач Организация, Знач БанковскийСчет)
	
	СтруктураНастроек = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет);
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЗначениеЗаполнено(СтруктураНастроек.СоглашениеПрямогоОбменаСБанками));
	Иначе
		// Проверим есть ли в ИБ прямой обмен с банками.
		// Если есть, то следует спрашивать у пользователя,
		// по какому счету производится загрузка
		// Если прямого обмена нет, то предлагаем выбрать файл -
		// банковский счет определяем из файла.
		СтруктураНастроек.Вставить("ЕстьПрямойОбменСБанками",
			ЭлектронноеВзаимодействиеБП.ИспользуетсяПрямойОбменСБанком(Организация));
		
	КонецЕсли;
		
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьРезультатСозданияДокументов(Форма)
	
	Элементы = Форма.Элементы;
	Если Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость Тогда
		Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатСозданияДокументов(РезультатСозданияДокументов, ВалютаСчета)
	
	Элементы.ГруппаСостояниеЗагрузкиИзКлиентБанка.Видимость = Истина;
	
	Если НЕ РезультатСозданияДокументов.Свойство("КоличествоЗагружено") Тогда
		Элементы.ТекстСостояниеЗагрузки.Заголовок = НСтр("ru='Новых документов для загрузки не обнаружено'");
	Иначе
		ШаблонТекста = НСтр("ru = 'Загружено: [КоличествоДокументов]. Поступило: [СуммаПоступило] Списано: [СуммаСписано]'");
		
		СтрокаКоличествоДокументов = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РезультатСозданияДокументов.КоличествоЗагружено, "документ, документа, документов");
		СтрокаСуммаПоступило       = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаПоступило, ВалютаСчета, "0,00");
		СтрокаСуммаПоступило       = ?((Прав(СтрокаСуммаПоступило, 1) = "."), СтрокаСуммаПоступило, СтрокаСуммаПоступило + ".");
		СтрокаСуммаСписано         = ОбщегоНазначенияБПВызовСервера.ФорматСумм(РезультатСозданияДокументов.СуммаСписано, ВалютаСчета, "0,00");
		СтрокаСуммаСписано         = ?((Прав(СтрокаСуммаСписано, 1) = "."),   СтрокаСуммаСписано,   СтрокаСуммаСписано + ".");
		
		ВставляемыеЗначения = Новый Структура;
		ВставляемыеЗначения.Вставить("КоличествоДокументов", СтрокаКоличествоДокументов);
		ВставляемыеЗначения.Вставить("СуммаПоступило",       СтрокаСуммаПоступило);
		ВставляемыеЗначения.Вставить("СуммаСписано",         СтрокаСуммаСписано);
		Элементы.ТекстСостояниеЗагрузки.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ВставляемыеЗначения);
		
		Если ЗначениеЗаполнено(РезультатСозданияДокументов.ПервыйЗагруженный) Тогда
			Элементы.Список.ТекущаяСтрока = РезультатСозданияДокументов.ПервыйЗагруженный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитСчета(Знач БанковскийСчет, Знач ИмяРеквизита)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, ИмяРеквизита);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФоновоеЗадание

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
			ОбработатьЗагрузкуБанковскойВыписки(РезультатЗагрузки);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			ОценкаВремени = "";
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьДлительностьКлючевойОперации()
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеОбработчики

&НаКлиенте
Процедура Подключаемый_ОбновитьИтогиОбработчик()
	
	Если ИтогиВключены Тогда
		ОбновитьИтоги();
		ЗафиксироватьДлительностьКлючевойОперации();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	УправлениеПечатьюКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	Если ИспользуетсяЭП Тогда
		ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии_ИспользуетсяЭП");
	КонецЕсли;
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	
	// Организация
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Организация");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизацияИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборОрганизация", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	// БанковскийСчет
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "БанковскийСчет");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборБанковскийСчетИспользование", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОтборБанковскийСчет", ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обновление сумм остатков и оборотов за день в форме журнала
//
Процедура ОбновитьИтоги()
	
	Если НЕ ИтогиВключены Тогда
		ВсегдаОбновлять = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекОрганизация    = ?(ОтборОрганизацияИспользование,    ОтборОрганизация,    Неопределено);
		ТекБанковскийСчет = ?(ОтборБанковскийСчетИспользование, ОтборБанковскийСчет, Неопределено);
		Если ОтборДатаОтбора = '00010101' ИЛИ НЕ ОтборДатаОтбораИспользование Тогда
			ТекДата       = ТекущаяДата();
		Иначе
			ТекДата       = ОтборДатаОтбора;
		КонецЕсли;
	ИначеЕсли НЕ ТекДанные.Свойство("Ссылка") Тогда
		ВсегдаОбновлять = Ложь;
		Возврат;
	Иначе
		ТекДата           = ТекДанные.Дата;
		ТекОрганизация    = ТекДанные.Организация;
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
		
		Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) И НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации Тогда
			ТекБанковскийСчет = ОтборБанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	Если ВсегдаОбновлять ИЛИ НачалоДня(ИтогиДата) <> НачалоДня(ТекДата) ИЛИ ИтогиБанковскийСчет  <> ТекБанковскийСчет Тогда
		СтруктураПараметров = Новый Структура("ТекДата, ТекОрганизация, ТекБанковскийСчет",
			ТекДата, ТекОрганизация, ТекБанковскийСчет);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СформироватьПараметрыИтогов(ЭтотОбъект, СтруктураПараметров));
	КонецЕсли;
	
	ВсегдаОбновлять = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПараметрыИтогов(Форма, СтруктураПараметров = Неопределено)
	
	Если СтруктураПараметров = Неопределено Тогда
		ТекОрганизация    = ?(Форма.ОтборОрганизацияИспользование,    Форма.ОтборОрганизация,    Неопределено);
		ТекБанковскийСчет = ?(Форма.ОтборБанковскийСчетИспользование, Форма.ОтборБанковскийСчет, Неопределено);
		Если Форма.ОтборДатаОтбора = '00010101' ИЛИ НЕ Форма.ОтборДатаОтбораИспользование Тогда
			ТекДата = ТекущаяДата();
		Иначе
			ТекДата = Форма.ОтборДатаОтбора;
		КонецЕсли;
	Иначе
		ТекДата           = СтруктураПараметров.ТекДата;
		ТекОрганизация    = СтруктураПараметров.ТекОрганизация;
		ТекБанковскийСчет = СтруктураПараметров.ТекБанковскийСчет;
	КонецЕсли;
	
	СтруктураИтогов = ПолучитьИтоги(ТекДата, ТекОрганизация, ТекБанковскийСчет);
	
	Возврат Новый Структура(
		"ИтогиБанковскийСчет, ИтогиДата, ДатаИтогов, ИтогиНаНачалоДня, ИтогиНаКонецДня,
		|ИтогиПоступило, ИтогиСписано",
			ТекБанковскийСчет,
			ТекДата, Формат(ТекДата, "ДФ=dd.MM.yyyy"),
			СтруктураИтогов.НачальныйОстаток,
			СтруктураИтогов.КонечныйОстаток,
			СтруктураИтогов.ВсегоПоступило,
			СтруктураИтогов.ВсегоСписано);
	
КонецФункции

&НаСервереБезКонтекста
// Возвращает таблицу сумм остатков и оборотов за указанный день по указанному счету
//
Функция ПолучитьИтоги(Знач ТекДата, Знач ТекОрганизация, Знач ТекБанковскийСчет)
	
	СтруктураРезультат = Новый Структура("НаименованиеСчета,
		|НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток"
		, ""
		, 0, 0, 0, 0);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	// Если нет доступных организаций, то Итоги не вычисляем
	Если СписокДоступныхОрганизаций.Количество() = 0 Тогда
		Возврат СтруктураРезультат;
	ИначеЕсли ЗначениеЗаполнено(ТекОрганизация) Тогда
		// Если организация не числится в списке доступных, то Итоги не вычисляем
		Если СписокДоступныхОрганизаций.Найти(ТекОрганизация) = Неопределено Тогда
			Возврат СтруктураРезультат;
		КонецЕсли;
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаНачальныйОстаток
	|				ИНАЧЕ ВТ_БИ.СуммаНачальныйОстаток
	|			КОНЕЦ), 0) КАК НачальныйОстаток,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаОборотДт
	|				ИНАЧЕ ВТ_БИ.СуммаОборотДт
	|			КОНЕЦ), 0) КАК ВсегоПоступило,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаОборотКт
	|				ИНАЧЕ ВТ_БИ.СуммаОборотКт
	|			КОНЕЦ), 0) КАК ВсегоСписано,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ВТ_БИ.ЭтоВалютныйСчет
	|					ТОГДА ВТ_БИ.ВалютнаяСуммаКонечныйОстаток
	|				ИНАЧЕ ВТ_БИ.СуммаКонечныйОстаток
	|			КОНЕЦ), 0) КАК КонечныйОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		БИ.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|		БИ.ВалютнаяСуммаНачальныйОстаток КАК ВалютнаяСуммаНачальныйОстаток,
	|		БИ.СуммаОборотДт КАК СуммаОборотДт,
	|		БИ.ВалютнаяСуммаОборотДт КАК ВалютнаяСуммаОборотДт,
	|		БИ.СуммаОборотКт КАК СуммаОборотКт,
	|		БИ.ВалютнаяСуммаОборотКт КАК ВалютнаяСуммаОборотКт,
	|		БИ.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|		БИ.ВалютнаяСуммаКонечныйОстаток КАК ВалютнаяСуммаКонечныйОстаток,
	|		ВЫБОР
	|			КОГДА БИ.ВалютнаяСуммаНачальныйОстаток <> 0
	|					ИЛИ БИ.ВалютнаяСуммаОборотДт <> 0
	|					ИЛИ БИ.ВалютнаяСуммаОборотКт <> 0
	|					ИЛИ БИ.ВалютнаяСуммаКонечныйОстаток <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВалютныйСчет
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаИтоговНачалоДня, &ДатаИтоговКонецДня, , ДвиженияИГраницыПериода, Счет В (&СчетаССубконтоБанковскиеСчета), &ВидСубконтоБанковскиеСчета, Организация В (&Организации) {(ВЫРАЗИТЬ(Субконто1 КАК Справочник.БанковскиеСчета)) КАК БанковскийСчетИтогов}) КАК БИ) КАК ВТ_БИ";
	
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		СписокОрганизаций = Новый Массив;
		СписокОрганизаций.Добавить(ТекОрганизация);
	Иначе
		СписокОрганизаций = СписокДоступныхОрганизаций;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("БанковскийСчетИтогов");
		ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.Значение      = ТекБанковскийСчет;
		СтруктураРезультат.НаименованиеСчета = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекБанковскийСчет, "Наименование"));
	КонецЕсли;
	
	ПостроительЗапроса.Параметры.Вставить("Организации",         СписокОрганизаций);
	ПостроительЗапроса.Параметры.Вставить("ДатаИтоговНачалоДня", НачалоДня(ТекДата));
	ПостроительЗапроса.Параметры.Вставить("ДатаИтоговКонецДня",  КонецДня(ТекДата));
	ПостроительЗапроса.Параметры.Вставить("ВалютаРеглУчета",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПостроительЗапроса.Параметры.Вставить("ВидСубконтоБанковскиеСчета",
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	ПостроительЗапроса.Параметры.Вставить("СчетаССубконтоБанковскиеСчета",
		УчетДенежныхСредствПовтИсп.ПолучитьСчетаССубконтоБанковскиеСчета());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапроса = ПостроительЗапроса.ПолучитьЗапрос().Выполнить();
	
	Если НЕ РезультатыЗапроса.Пустой() Тогда
		Выборка = РезультатыЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьИтоги()
	
	// Вызовет пересчет итогов
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ИтогиВключены Тогда
			ВсегдаОбновлять = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИтогиОбработчик", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВосстановленныеОтборы(ТолькоОрганизацияИСчет = Ложь)
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "Организация");
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	
	Если НЕ ТолькоОрганизацияИСчет Тогда
		ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "ДатаОтбора");
	КонецЕсли;
	
	УстановитьВидимостьБанковскогоСчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБанковскогоСчета()
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации    = ИспользуетсяНесколькоБанковскихСчетовОрганизации();
	
	Элементы.ОтборБанковскийСчет.Видимость              = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	Элементы.ОтборБанковскийСчетИспользование.Видимость = ИспользоватьНесколькоБанковскихСчетовОрганизации;
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяНесколькоБанковскихСчетовОрганизации()
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		Возврат Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(ОтборОрганизация);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСчетОрганизации(СчетОрганизации, Знач Организация)
	
	Если Организация = Неопределено Тогда
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(СчетОрганизации, Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
КонецПроцедуры

#КонецОбласти

#Область ПравоПримененияСпецрежима

&НаКлиенте
Процедура ПоказатьИнформациюОПравеПримененияСпецрежима()
	
	// Если не заполнена организация, тогда не показываем предупреждение
	Если НЕ (ОтборОрганизацияИспользование И ЗначениеЗаполнено(ОтборОрганизация)) Тогда
		Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформациюОПравеПримененияСпецрежимаНаСервере()
	
	ИнформацияОПравеПримененияСпецрежима = КонтрольПраваПримененияСпецрежима.ИнформацияОПравеПримененияСпецрежима(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы());
		
	СледующееЗначениеНапоминания         = ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания;
	СсылкаНаСтатьюИТС                    = ИнформацияОПравеПримененияСпецрежима.СсылкаНаСтатьюИТС;
	
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = ИнформацияОПравеПримененияСпецрежима.Показать;
	Элементы.ИнформацияОПравеПримененияСпецрежима.ЦветФона = ИнформацияОПравеПримененияСпецрежима.ЦветФонаГруппы;
	Элементы.ТекстИнформации.Заголовок = ИнформацияОПравеПримененияСпецрежима.ТекстИнформации;
	
	Элементы.НапомнитьПозже.Заголовок  = ИнформацияОПравеПримененияСпецрежима.ТекстНапомнитьПозже;
	// В случае если это последний шаг, то прячем команду "Напомнить позже"
	Элементы.НапомнитьПозже.Видимость  = (ИнформацияОПравеПримененияСпецрежима.СледующееЗначениеНапоминания < 100);
	
КонецПроцедуры

&НаСервере
Процедура ОтложитьПоказНапоминанияНаСервере()
	
	КонтрольПраваПримененияСпецрежима.ОтложитьПоказНапоминания(
		ОтборОрганизация, 
		КонтрольПраваПримененияСпецрежима.ИмяПоказателяСпецрежимаДоходы(), 
		СледующееЗначениеНапоминания);
		
	Элементы.ИнформацияОПравеПримененияСпецрежима.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура БанкИНомерСчета(БанковскийСчет, Банк, НомерСчета)

	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		Возврат;
		
	КонецЕсли;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "Банк, НомерСчета");
	Банк = ЗначенияРеквизитов.Банк;
	НомерСчета = ЗначенияРеквизитов.НомерСчета;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьБаннерДиректБанк(Форма)
	
	Элементы = Форма.Элементы;
	ВидимостьБаннера = Ложь;
	Если ЗначениеЗаполнено(Форма.ОтборБанковскийСчет)
		И Форма.ВидимостьЭлементовДиректБанк = "ПоказатьБаннер" Тогда 
		
		ВидимостьБаннера = Истина;
		
	КонецЕсли;
	Элементы.ГруппаРекламаДиректБанк.Видимость = ВидимостьБаннера;
	
КонецПроцедуры

&НаСервере
Процедура ОтборБанковскийСчетПриИзмененииСервер()
	
	ОтборыСписковКлиентСервер.УстановитьБыстрыйОтбор(ЭтотОбъект, "БанковскийСчет");
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);
	
	БанкИНомерСчета(ОтборБанковскийСчет, Банк, НомерСчета);
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборБанковскийСчет);
		
	ПоказатьБаннерДиректБанк(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОтборОрганизацияПриИзмененииСервер()

	УстановитьСчетОрганизации(ОтборБанковскийСчет, ОтборОрганизация);
	ОтборОрганизацияИспользование    = ЗначениеЗаполнено(ОтборОрганизация);
	ОтборБанковскийСчетИспользование = ЗначениеЗаполнено(ОтборБанковскийСчет);
	
	СкрытьРезультатСозданияДокументов(ЭтотОбъект);

	УстановитьВосстановленныеОтборы(Истина);
	
	БанкИНомерСчета(ОтборБанковскийСчет, Банк, НомерСчета);
	ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
		ОтборОрганизация, ОтборБанковскийСчет);
		
	ПоказатьБаннерДиректБанк(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти