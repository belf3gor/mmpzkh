#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список документов, которые регистрируются в журнале при указанном назначении использования.
// Из списка исключаются документы отключенные функциональными опциями.
//
// Параметры:
//  КлючНазначенияИспользования - Строка - вид ограничения на список метаданных.
//
// Возвращаемое значение:
//   Массив      - доступные объекты метаданных.
//
Функция СоставДокументов(КлючНазначенияИспользования = "") Экспорт

	Если КлючНазначенияИспользования = "ДокументыПоКонтрагенту" Тогда
		
		ТипыДокументовРазрешенные = КритерииОтбора.ДокументыПоКонтрагенту.СоставДокументов();
		
	ИначеЕсли КлючНазначенияИспользования = "ДокументыПоДоговоруКонтрагента" Тогда
		
		ТипыДокументовРазрешенные = КритерииОтбора.ДокументыПоДоговоруКонтрагента.СоставДокументов();
		
	ИначеЕсли КлючНазначенияИспользования = "ДокументыПокупателей"
	 Или КлючНазначенияИспользования = "ДокументыПоставщиков" Тогда
	 
		ТипыДокументов = СписокТиповПоНазначениюИспользования(КлючНазначенияИспользования);
		ТипыДокументовРазрешенные = Новый Массив;
		Для каждого ТипДокумента Из ТипыДокументов Цикл
			ТипыДокументовРазрешенные.Добавить(Метаданные.НайтиПоТипу(ТипДокумента));
		КонецЦикла;
		
	Иначе
		
		ТипыДокументовРазрешенные = Неопределено;
		
	КонецЕсли;
	
	СписокДокументов = Новый Массив;
	
	ДокументыЖурнала = Метаданные.ЖурналыДокументов.ЖурналОпераций.РегистрируемыеДокументы;
	Если ТипыДокументовРазрешенные <> Неопределено Тогда
		
		Для Каждого РегистрируемыйДокумент Из ТипыДокументовРазрешенные Цикл
			
			Если ДокументыЖурнала.Содержит(РегистрируемыйДокумент) <> Неопределено
			   И ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(РегистрируемыйДокумент) Тогда
				СписокДокументов.Добавить(РегистрируемыйДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого РегистрируемыйДокумент Из ДокументыЖурнала Цикл
			
			Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(РегистрируемыйДокумент) Тогда
				СписокДокументов.Добавить(РегистрируемыйДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

// Возвращает список типов документов, которые должны сейчас выводиться в журнале.
//
Функция СписокТиповПоНазначениюИспользования(КлючНазначенияИспользования) Экспорт
	
	СписокДокументов = Новый Массив;
	
	Если КлючНазначенияИспользования = "ДокументыПокупателей"
	 Или КлючНазначенияИспользования = "ДокументыКонтрагентов" Тогда
	 
	    СписокДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеТребование")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.РеализацияУслугПоПереработке")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ОказаниеУслуг")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ОплатаПлатежнойКартой"));
	 
	КонецЕсли;
	
	Если КлючНазначенияИспользования = "ДокументыПоставщиков"
	 Или КлючНазначенияИспользования = "ДокументыКонтрагентов" Тогда
	 
	    СписокДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ГТДИмпорт")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.КорректировкаПоступления")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПоставщика")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров")); 
		СписокДокументов.Добавить(Тип("ДокументСсылка.ВыкупПредметовЛизинга"));
	 
	КонецЕсли;
	
	Возврат СписокДокументов;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;
	
	ПолеЗапросаНомер =
	"	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.СчетФактураВыданный)
	|			ТОГДА ВЫРАЗИТЬ(Таб.Ссылка КАК Документ.СчетФактураВыданный).ПредставлениеНомера
	|		КОГДА ТИПЗНАЧЕНИЯ(Таб.Ссылка) = ТИП(Документ.СчетФактураПолученный)
	|			ТОГДА ВЫРАЗИТЬ(Таб.Ссылка КАК Документ.СчетФактураПолученный).ПредставлениеНомера
	|		ИНАЧЕ Таб.Номер
	|	КОНЕЦ";
	
	Результат.Вставить("Номер",                   ПолеЗапросаНомер);
	// Опишем реквизиты входящих документов, чтобы они были получены
	// из регистра ДанныеПервичныхДокументов, т.к. таких граф в журнале нет.
	Результат.Вставить("ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	Результат.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
	
	Возврат Результат;
	
КонецФункции

// Возвращает дату первого проведенного документа
//
// Параметры:
// Организация - СправочникСсылка.Организация
//
// Возвращаемое значение:
// Дата или Неопределено, если нет ни одного проведенного документа
//
Функция ДатаПервогоПроведенногоДокумента(Организация) Экспорт
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ложь);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДоступныеОрганизации = Новый Массив;
		ДоступныеОрганизации.Добавить(Организация);
		
	КонецЕсли;
	
	ДатаПервогоДокумента = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ДоступнаяОрганизация Из ДоступныеОрганизации Цикл
		
		ДатаПервогоДокументаОрганизации = ДатаПервогоПроведенногоДокументаОрганизации(ДоступнаяОрганизация);
		Если Не ЗначениеЗаполнено(ДатаПервогоДокументаОрганизации) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДатаПервогоДокумента = Неопределено
			Или ДатаПервогоДокументаОрганизации < ДатаПервогоДокумента Тогда
			ДатаПервогоДокумента = ДатаПервогоДокументаОрганизации;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДатаПервогоДокумента;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Функция ДатаПервогоПроведенногоДокументаОрганизации(Организация)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналОпераций.Дата КАК Дата
	|ИЗ
	|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
	|ГДЕ
	|	ЖурналОпераций.Организация = &Организация
	|	И ЖурналОпераций.Проведен
	|	И НЕ ЖурналОпераций.Ссылка ССЫЛКА Документ.ВводНачальныхОстатков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналОпераций.Дата";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Дата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецЕсли