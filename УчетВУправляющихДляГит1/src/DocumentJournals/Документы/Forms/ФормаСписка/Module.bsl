#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаОсновнаяКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияБПВызовСервера.УстановитьОтборПоОсновнойОрганизации(ЭтаФорма);
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусОплатыПоУмолчанию", Перечисления.СтатусОплатыСчета.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусРеализацииПоУмолчанию", Перечисления.СтатусыДокументовРеализации.СтатусНовогоДокумента());
	Список.Параметры.УстановитьЗначениеПараметра(
		"СтатусПоступленияПоУмолчанию", Перечисления.СтатусыДокументовПоступления.СтатусНовогоДокумента());
		
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеДокументаАктРеализация", НСтр("ru='Акт (реализация)'"));
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеДокументаНакладнаяРеализация", НСтр("ru='Накладная (реализация)'"));
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеДокументаРеализация", НСтр("ru='Реализация'"));
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеДокументаАктПоступление", НСтр("ru='Акт (поступление)'"));
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеДокументаНакладнаяПоступление", НСтр("ru='Накладная (поступление)'"));
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеДокументаПоступление", НСтр("ru='Поступление'"));
	
	ЕстьПравоИзменениеСчетПокупателю          = ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю);
	ЕстьПравоИзменениеРеализацияТоваровУслуг  = ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг);
	ЕстьПравоИзменениеСчетПоставщика          = ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПоставщика);
	ЕстьПравоИзменениеПоступлениеТоваровУслуг = ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	ЕстьПравоИзменениеПлатежноеПоручение      = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение);
	ЕстьПравоИзменениеАктСверкиВзаиморасчетов = ПравоДоступа("Изменение", Метаданные.Документы.АктСверкиВзаиморасчетов);
	
	МожноРедактировать = ЕстьПравоИзменениеСчетПокупателю
		И ЕстьПравоИзменениеРеализацияТоваровУслуг
		И ЕстьПравоИзменениеСчетПоставщика
		И ЕстьПравоИзменениеПоступлениеТоваровУслуг
		И ЕстьПравоИзменениеПлатежноеПоручение
		И ЕстьПравоИзменениеАктСверкиВзаиморасчетов;
	
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.Список.ИзменятьСоставСтрок                        = МожноРедактировать;
	Элементы.СоздатьСчетПокупателю.Видимость                   = ЕстьПравоИзменениеСчетПокупателю;
	Элементы.СоздатьАктРеализация.Видимость                    = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьНакладнуюРеализация.Видимость              = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьСчетПоставщика.Видимость                   = ЕстьПравоИзменениеСчетПоставщика;
	Элементы.СоздатьАктПоступление.Видимость                   = ЕстьПравоИзменениеПоступлениеТоваровУслуг;
	Элементы.СоздатьНакладнуюПоступление.Видимость             = ЕстьПравоИзменениеПоступлениеТоваровУслуг;
	Элементы.СоздатьПлатежноеПоручение.Видимость               = ЕстьПравоИзменениеПлатежноеПоручение;
	Элементы.СоздатьАктСверки.Видимость                        = ЕстьПравоИзменениеАктСверкиВзаиморасчетов;
	
	ТипыДокументовОтправляемыхПоЭлектроннойПочте = Метаданные.ОбщиеКоманды.ОтправитьПоЭлектроннойПочте.ТипПараметраКоманды;
	
	ОбщегоНазначенияБП.УстановитьВидимостьКолонокДополнительнойИнформации(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.ЖурналДокументов.Документы",
		"ФормаСпискаПростойИнтерфейс",
		НСтр("ru='Новости: Документы'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	Элементы.ГруппаВидеоролики.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации")
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ЖурналДокументы"), 
			ВРег("Видеоролики"), 
			Истина);
	
	ТарификацияБП.РазместитьИнформациюОбОграниченииПоКоличествуОбъектов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьАктПоступление(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктРеализация(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктСверки(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.АктСверкиВзаиморасчетов.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюПоступление(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюРеализация(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежноеПоручение(Команда)
	
	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПокупателю(Команда)

	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПоставщика(Команда)

	СтруктураПараметров = ПолучитьПараметрыФормыДокумента();
	ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкрытьВидеороликиНажатие(Элемент)
	
	Элементы.ГруппаВидеоролики.Видимость = Ложь;
	СохранитьОтключениеВидимостиВидеороликов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	
	Если Элемент.ВыделенныеСтроки.Количество() = 0 Тогда
		ДоступнаОтправкаПоЭлектроннойПочте = Ложь;
	Иначе
		ДоступнаОтправкаПоЭлектроннойПочте = Истина;
		Для каждого Документ Из Элемент.ВыделенныеСтроки Цикл
			Если НЕ ТипыДокументовОтправляемыхПоЭлектроннойПочте.СодержитТип(ТипЗнч(Документ)) Тогда
				ДоступнаОтправкаПоЭлектроннойПочте = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ОтправитьПоЭлектроннойПочте.Доступность = ДоступнаОтправкаПоЭлектроннойПочте;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьПараметрыФормыДокумента(ВидОперации = Неопределено)
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары") Тогда
			КлючеваяОперация = "СозданиеФормыПоступлениеТоваровУслугТовары";
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги") Тогда
			КлючеваяОперация = "СозданиеФормыПоступлениеТоваровУслугУслуги";
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугТовары";
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугУслуги";
		КонецЕсли;
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	ЗначенияЗаполнения = ОбщегоНазначенияБПВызовСервера.ЗначенияЗаполненияДинамическогоСписка(Список.КомпоновщикНастроек);
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьОтключениеВидимостиВидеороликов()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ЖурналДокументы"), ВРег("Видеоролики"), Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти