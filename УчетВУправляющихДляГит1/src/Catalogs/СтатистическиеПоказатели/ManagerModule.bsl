#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует текст для макета поставляемых данных ДанныеДляЗаполнения.
// Параметры:
//	ПроверятьДатуИзменения - Булево - Признак, нужно ли обновлять дату изменения в измененных объектах.
// Возвращаемое значение:
// - Строка - Строка с данными в формате XML, структуру данных см. в ПакетыXDTO.СтатистическиеПоказатели.
//
Функция ДанныеДляЗаполненияXML(ПроверятьДатуИзменения = Истина) Экспорт
	
	Если ПроверятьДатуИзменения Тогда
		// Если данные отличаются от предыдущей версии, то поднимем дату изменения.
		ДатаИзменения = НачалоДня(ТекущаяДатаСеанса());
		ПредыдущаяВерсияПравил = ПравилаЗаполненияФормСтатистики();
	Иначе
		// Может потребоваться сохранить версию - для конвертации данных при изменении формата их хранения.
		ДатаИзменения          = Неопределено;
		ПредыдущаяВерсияПравил = НовыйПравилаЗаполненияФормСтатистики();
	КонецЕсли;
	
	ПространствоИмен = Метаданные.ПакетыXDTO.СтатистическиеПоказатели.ПространствоИмен;
	
	ТипКонтейнер = ФабрикаXDTO.Тип(ПространствоИмен, "Контейнер");
	КонтейнерОбъектов = ФабрикаXDTO.Создать(ТипКонтейнер);
	КонтейнерОбъектов.ВерсияФормата = "3.0.1.1";
	
	// ОбъектыСтатистическогоНаблюдения.
	ВыгрузитьОбъектыНаблюденияРекурсивно(
		КонтейнерОбъектов.ОбъектыСтатистическогоНаблюдения,
		Справочники.ОбъектыСтатистическогоНаблюдения.ПустаяСсылка(),
		ПространствоИмен,
		ПредыдущаяВерсияПравил.ОбъектыНаблюдения,
		ДатаИзменения);

	// Инициализация контейнера объектов.
	ЗаписьОбъектов = Новый ЗаписьXML;
	ЗаписьОбъектов.УстановитьСтроку();
	ЗаписьОбъектов.ЗаписатьОбъявлениеXML();
		
	ФабрикаXDTO.ЗаписатьXML(
		ЗаписьОбъектов, 
		КонтейнерОбъектов,
		"Контейнер",
		ПространствоИмен,
		,
		НазначениеТипаXML.Явное);
		
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("ОбъектыНаблюдения", ЗаписьОбъектов.Закрыть());
	
	КонтейнерФорм = ФабрикаXDTO.Создать(ТипКонтейнер);
	КонтейнерФорм.ВерсияФормата = "3.0.1.1";
	
	// ФормыСтатистики.
	ВыгрузитьФормыСтатистики(
		КонтейнерФорм.ФормыСтатистики, 
		ПространствоИмен, 
		ПредыдущаяВерсияПравил.ФормыСтатистики, 
		ДатаИзменения);

	// Инициализация контейнера форм.
	ЗаписьФорм = Новый ЗаписьXML;
	ЗаписьФорм.УстановитьСтроку();
	ЗаписьФорм.ЗаписатьОбъявлениеXML();
		
	ФабрикаXDTO.ЗаписатьXML(
		ЗаписьФорм, 
		КонтейнерФорм,
		"Контейнер",
		ПространствоИмен,
		,
		НазначениеТипаXML.Явное);
		
	ДанныеДляЗаполнения.Вставить("ФормыСтатистики", ЗаписьФорм.Закрыть());
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

// Заполняет справочник поставляемыми данными из макета ДанныеДляЗаполнения.
//
Процедура ЗаполнитьПоставляемымиПравилами() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Поставляемые элементы не следует создавать в подчиненных узлах РИБ - 
		// они приедут туда из головного узла.
 		Возврат;
	КонецЕсли;

	// Получаем данные.
	ПравилаЗаполненияФормСтатистики = ПравилаЗаполненияФормСтатистики();
	ЗагрузитьПравилаЗаполненияФормСтатистики(ПравилаЗаполненияФормСтатистики);
	Справочники.ПоляФормСтатистики.ИсправитьНарушенияЕстественногоКлюча();
	
КонецПроцедуры

// Заполняет справочник переданными данными.
// Параметры:
//	ДанныеДляЗаполненияXML - Строка - Данные для заполнения см. подробнее ДанныеДляЗаполненияXML().
//
Процедура Заполнить(ДанныеДляЗаполненияXML) Экспорт
	
	ПравилаЗаполненияФормСтатистики = ПравилаЗаполненияФормСтатистики(ДанныеДляЗаполненияXML);
	ЗагрузитьПравилаЗаполненияФормСтатистики(ПравилаЗаполненияФормСтатистики);
	
КонецПроцедуры

// Переносимость поставляемых данных справочника ОбъектыСтатистическогоНаблюдения.
//
Процедура УстановитьСсылкиНаПредопределенныеЭлементыВОтборе(Отбор) Экспорт
	
	// Заменяем "ИмяПредопределенногоЗначения" на ссылки.
	СконвертироватьПредопределенныеЗначенияВЭлементахОтбора(Отбор.Элементы, "Импорт");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает реквизиты справочника, которые образуют естественный ключ.
//  для элементов справочника.
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих
//  естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("Детализировать");
	Результат.Добавить("ХарактеристикаОбъектаНаблюдения");
	
	Возврат Результат;
	
КонецФункции

// Записывает объект в базу данных.
// Параметры:
//	Объект - СправочникОбъект - Объект который нужно записать.
//
Процедура ЗаписатьПоставляемыеДанные(Объект) Экспорт
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Истина, Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Описание коллекции.

Функция НовыйПравилаЗаполненияФормСтатистики()
	
	// Имена колонок подобраны так, чтобы в парах Объекты/Показатели и Формы/Поля колонки имели уникальные имена.
	// Имена колонок совпадают с именами свойств в xsd схеме.
	
	ОписаниеТиповСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево          = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата 	         = Новый ОписаниеТипов("Дата");
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	
	// ОбъектыНаблюдения.
	ОбъектыНаблюдения = Новый ТаблицаЗначений;
	ОбъектыНаблюдения.Колонки.Добавить("Код", 		                ОписаниеТиповСтрока); // Ключ.
	ОбъектыНаблюдения.Колонки.Добавить("Родитель",                  ОписаниеТиповСтрока); // Код родительского объекта. В xsd отсутствует: используется иерархический список.
	ОбъектыНаблюдения.Колонки.Добавить("ДатаИзменения", 		    ОписаниеТиповДата);
	ОбъектыНаблюдения.Колонки.Добавить("Наименование", 			    ОписаниеТиповСтрока);
	ОбъектыНаблюдения.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	ОбъектыНаблюдения.Колонки.Добавить("ИсточникДанных", 		    Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхСтатистическихПоказателей"));
	ОбъектыНаблюдения.Колонки.Добавить("Детализация", 			    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСвободныхСтрокФормСтатистики"));
	ОбъектыНаблюдения.Колонки.Добавить("ТребуетНастройки", 		    ОписаниеТиповБулево);
	ОбъектыНаблюдения.Колонки.Добавить("Настройка", 			    ОписаниеТиповСтрока);
	ОбъектыНаблюдения.Колонки.Добавить("СтатистическиеПоказатели",  ОписаниеТиповТаблицаЗначений); // См. НовыйСтатистическиеПоказатели().
	ОбъектыНаблюдения.Индексы.Добавить(КлючОбъектыНаблюдения());
	
	// ФормыСтатистики.
	ФормыСтатистики = Новый ТаблицаЗначений;
	ФормыСтатистики.Колонки.Добавить("РегламентированныйОтчет", ОписаниеТиповСтрока); // Ключ - имя регл. отчета.
	ФормыСтатистики.Колонки.Добавить("ИмяФормы", 	            ОписаниеТиповСтрока); // Ключ - имя формы (техногенное).
	ФормыСтатистики.Колонки.Добавить("ДатаИзменения", 		    ОписаниеТиповДата);
	ФормыСтатистики.Колонки.Добавить("НаименованиеФормы", 	    ОписаниеТиповСтрока); // Пользовательское представление.
	ФормыСтатистики.Колонки.Добавить("Поля", 		            ОписаниеТиповТаблицаЗначений); //См. НовыйПоляФормСтатистики().
	ФормыСтатистики.Колонки.Добавить("ГруппыПолей", 		    ОписаниеТиповТаблицаЗначений); //См. НовыйГруппыПолейФормСтатистики().
	ФормыСтатистики.Индексы.Добавить(КлючФормыСтатистики());
	
	Результат = Новый Структура;
	Результат.Вставить("ОбъектыНаблюдения", ОбъектыНаблюдения);
	Результат.Вставить("ФормыСтатистики",   ФормыСтатистики);
	Возврат Результат;
	
КонецФункции

Функция НовыйГруппыПолейФормСтатистики()
	
	ОписаниеТиповСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево          = Новый ОписаниеТипов("Булево");
	
	ПоляФормСтатистики = Новый ТаблицаЗначений;
	ПоляФормСтатистики.Колонки.Добавить("КодПоля", 				    ОписаниеТиповСтрока); // Ключ. Как правило совпадает с именем. Может не совпадать с именем, если одно поле описывается несколькими элементами справочника.
	ПоляФормСтатистики.Колонки.Добавить("КодГруппыПолей",           ОписаниеТиповСтрока); // Код родительского поля. В xsd отсутствует: используется иерархический список.
	ПоляФормСтатистики.Колонки.Добавить("НаименованиеПоля", 		ОписаниеТиповСтрока);
	ПоляФормСтатистики.Индексы.Добавить(КлючПоляФормСтатистики());
	
	Возврат ПоляФормСтатистики;
	
КонецФункции

Функция НовыйПоляФормСтатистики()
	
	ОписаниеТиповСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево          = Новый ОписаниеТипов("Булево");
	
	ПоляФормСтатистики = Новый ТаблицаЗначений;
	ПоляФормСтатистики.Колонки.Добавить("КодПоля", 				    ОписаниеТиповСтрока); // Ключ. Как правило совпадает с именем. Может не совпадать с именем, если одно поле описывается несколькими элементами справочника.
	ПоляФормСтатистики.Колонки.Добавить("КодГруппыПолей",           ОписаниеТиповСтрока);
	ПоляФормСтатистики.Колонки.Добавить("ИмяПоля", 				    ОписаниеТиповСтрока);
	ПоляФормСтатистики.Колонки.Добавить("ЭтоГруппа", 				ОписаниеТиповБулево);
	ПоляФормСтатистики.Колонки.Добавить("НаименованиеПоля", 		ОписаниеТиповСтрока);
	ПоляФормСтатистики.Колонки.Добавить("СтатистическийПоказатель", Новый ОписаниеТипов("Структура")); // См. НовыйСтатистическийПоказательСсылка().
	ПоляФормСтатистики.Колонки.Добавить("Период", 				    Новый ОписаниеТипов("ПеречислениеСсылка.ОтносительныеПериодыОтчетности"));
	ПоляФормСтатистики.Колонки.Добавить("СНачалаГода", 				ОписаниеТиповБулево);
	ПоляФормСтатистики.Колонки.Добавить("ДоКонцаГода", 				ОписаниеТиповБулево);
	ПоляФормСтатистики.Колонки.Добавить("ДополнительныйАлгоритм",   Новый ОписаниеТипов("ПеречислениеСсылка.ДополнительныеАлгоритмыЗаполненияФормСтатистики"));
	ПоляФормСтатистики.Колонки.Добавить("НомерСтрокиОтчета", 	    ОписаниеТиповСтрока);
	ПоляФормСтатистики.Индексы.Добавить(КлючПоляФормСтатистики());
	
	Возврат ПоляФормСтатистики;
	
КонецФункции

Функция НовыйСтатистическиеПоказатели()
	
	ОписаниеТиповСтрока          = Новый ОписаниеТипов("Строка");
	ОписаниеТиповБулево          = Новый ОписаниеТипов("Булево");
	
	СтатистическиеПоказатели = Новый ТаблицаЗначений;	
	СтатистическиеПоказатели.Колонки.Добавить("ХарактеристикаОбъектаНаблюдения", ОписаниеТиповСтрока); // Ключ.
	СтатистическиеПоказатели.Колонки.Добавить("ДетализироватьОбъектНаблюдения",  ОписаниеТиповБулево); // Ключ.
	СтатистическиеПоказатели.Колонки.Добавить("НаименованиеПоказателя",          ОписаниеТиповСтрока);
	СтатистическиеПоказатели.Индексы.Добавить(КлючСтатистическиеПоказатели());
	Возврат СтатистическиеПоказатели;
	
КонецФункции

Функция НовыйСтатистическийПоказательСсылка()
	
	Возврат Новый Структура(ПолныйКлючСтатистическийПоказатель());
	
КонецФункции

Функция КлючОбъектыНаблюдения()

	Возврат "Код";
	
КонецФункции

Функция КлючСтатистическиеПоказатели()

	Возврат "ХарактеристикаОбъектаНаблюдения, ДетализироватьОбъектНаблюдения";
	
КонецФункции

Функция ПолныйКлючСтатистическийПоказатель()
	Возврат "КодОбъектаНаблюдения, " + КлючСтатистическиеПоказатели();
КонецФункции

Функция КлючФормыСтатистики()

	Возврат "РегламентированныйОтчет, ИмяФормы";
	
КонецФункции

Функция КлючПоляФормСтатистики()
	
	Возврат "КодПоля";
	
КонецФункции

// Выгрузка поставляемых данных.

Процедура ВыгрузитьОбъектыНаблюденияРекурсивно(Приемник, Родитель, ПространствоИмен, ПредыдущаяВерсияПравил, ДатаИзменения)
	
	ТипОбъектыСтатистическогоНаблюдения = ФабрикаXDTO.Тип(ПространствоИмен, "ОбъектыСтатистическогоНаблюдения");
	ТипСтатистическийПоказатель         = ФабрикаXDTO.Тип(ПространствоИмен, "СтатистическийПоказатель");
	
	ВыборкаОбъектов = Справочники.ОбъектыСтатистическогоНаблюдения.Выбрать(Родитель, , , "РеквизитДопУпорядочивания");
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		Если ВыборкаОбъектов.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		// Создаем и заполняем объект XTDO.
		ОписаниеОбъекта = ФабрикаXDTO.Создать(ТипОбъектыСтатистическогоНаблюдения);
		ЗаполнитьЗначенияСвойств(ОписаниеОбъекта, ВыборкаОбъектов, , "Настройка");
		
		// Настройку (отбор) нельзя выгружать "как есть", так как она содержит ссылки.
		// Начиная с версии платформы 8.3 в разных базах ссылки на один и тот же предопределенный элемент могут быть разными.
		// Поэтому, поставлять следует не ссылки, а символьное имя предопределенных данных.
		ОписаниеОбъекта.Настройка = НовыйПоставляемаяНастройка(ВыборкаОбъектов.Настройка);
		
		// Выгружаем связанные показатели статистики.
		ВыборкаПоказателей = Справочники.СтатистическиеПоказатели.Выбрать(,ВыборкаОбъектов.Ссылка);
		Пока ВыборкаПоказателей.Следующий() Цикл
			
			Если ВыборкаПоказателей.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			// Создаем и заполняем объект XTDO.
			ОписаниеПоказателя = ФабрикаXDTO.Создать(ТипСтатистическийПоказатель);
			ОписаниеПоказателя.ХарактеристикаОбъектаНаблюдения = ВыборкаПоказателей.ХарактеристикаОбъектаНаблюдения;
			ОписаниеПоказателя.ДетализироватьОбъектНаблюдения  = ВыборкаПоказателей.Детализировать;
			ОписаниеПоказателя.НаименованиеПоказателя          = ВыборкаПоказателей.Наименование;
			
			ОписаниеОбъекта.СтатистическиеПоказатели.Добавить(ОписаниеПоказателя);
			
		КонецЦикла;
		
		ОписаниеОбъекта = Приемник.Добавить(ОписаниеОбъекта);
		ПроверитьДатуИзменения(ОписаниеОбъекта, ПредыдущаяВерсияПравил, ДатаИзменения);
		
		// Выгружаем объекты статистического наблюдения находящиеся в иерархии данного объекта.
		
		ВыгрузитьОбъектыНаблюденияРекурсивно(
			ОписаниеОбъекта.ОбъектыСтатистическогоНаблюдения,
			ВыборкаОбъектов.Ссылка,
			ПространствоИмен,
			ПредыдущаяВерсияПравил,
			ДатаИзменения);
			
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВыгрузитьФормыСтатистики(Приемник, ПространствоИмен, ПредыдущаяВерсияПравил, ДатаИзменения)
	
	ТипФормыСтатистики  				= ФабрикаXDTO.Тип(ПространствоИмен, "ФормыСтатистики");
	
	// Формы статистики и их поля.
	// Статистический показатель описывается набором полей:
	// - КодОбъектаНаблюдения, 
	// - ХарактеристикаОбъектаНаблюдения, 
	// - ДетализироватьОбъектНаблюдения.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормыСтатистики.Ссылка КАК ФормаСтатистики,
	|	ФормыСтатистики.Владелец.ИсточникОтчета КАК РегламентированныйОтчет,
	|	ФормыСтатистики.Код КАК ИмяФормы,
	|	ФормыСтатистики.ДатаИзменения КАК ДатаИзменения,
	|	ФормыСтатистики.Наименование КАК НаименованиеФормы,
	|	ПоляФормСтатистики.Ссылка КАК ПолеФормыСтатистики,
	|	ПоляФормСтатистики.Код КАК КодПоля,
	|	ЕСТЬNULL(ПоляФормСтатистики.Родитель.Код, """") КАК КодГруппыПолей,
	|	ПоляФормСтатистики.ИмяПоля КАК ИмяПоля,
	|	ПоляФормСтатистики.ЭтоГруппа КАК ЭтоГруппа,
	|	ПоляФормСтатистики.Наименование КАК НаименованиеПоля,
	|	ЕСТЬNULL(ПоляФормСтатистики.СтатистическийПоказатель.Владелец.Код, """") КАК КодОбъектаНаблюдения,
	|	ЕСТЬNULL(ПоляФормСтатистики.СтатистическийПоказатель.ХарактеристикаОбъектаНаблюдения, """") КАК ХарактеристикаОбъектаНаблюдения,
	|	ЕСТЬNULL(ПоляФормСтатистики.СтатистическийПоказатель.Детализировать, ЛОЖЬ) КАК ДетализироватьОбъектНаблюдения,
	|	ПоляФормСтатистики.Период КАК Период,
	|	ПоляФормСтатистики.СНачалаГода КАК СНачалаГода,
	|	ПоляФормСтатистики.ДоКонцаГода КАК ДоКонцаГода,
	|	ПоляФормСтатистики.ДополнительныйАлгоритм КАК ДополнительныйАлгоритм,
	|	ПоляФормСтатистики.НомерСтрокиОтчета КАК НомерСтрокиОтчета
	|ИЗ
	|	Справочник.ПоляФормСтатистики КАК ПоляФормСтатистики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФормыСтатистики КАК ФормыСтатистики
	|		ПО ПоляФормСтатистики.Владелец = ФормыСтатистики.Ссылка
	|ГДЕ
	|	НЕ ФормыСтатистики.ПометкаУдаления
	|	И НЕ ПоляФормСтатистики.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентированныйОтчет,
	|	ИмяФормы,
	|	КодГруппыПолей,
	|	КодПоля
	|ИТОГИ ПО
	|	ФормыСтатистики.Ссылка КАК ФормыСтатистики,
	|	ПоляФормСтатистики.Ссылка ИЕРАРХИЯ КАК ПоляФормСтатистики";
	
	ВыборкаФорм = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФорм.Следующий() Цикл
		
		ОписаниеФормы = ФабрикаXDTO.Создать(ТипФормыСтатистики);
		ЗаполнитьЗначенияСвойств(ОписаниеФормы, ВыборкаФорм);
		
		ВыборкаПолей = ВыборкаФорм.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ВыгрузитьПоляФормыСтатистикиРекурсивно(ОписаниеФормы, ОписаниеФормы, ВыборкаПолей, ПространствоИмен);
		
		ПроверитьДатуИзменения(ОписаниеФормы, ПредыдущаяВерсияПравил, ДатаИзменения);
		
		Приемник.Добавить(ОписаниеФормы);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыгрузитьПоляФормыСтатистикиРекурсивно(ОписаниеФормы, ОписаниеГруппы, ВыборкаПолей, ПространствоИмен)
	
	Пока ВыборкаПолей.Следующий() Цикл
		
		Если ВыборкаПолей.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			
			ТипГруппыПолейФормСтатистики = ФабрикаXDTO.Тип(ПространствоИмен, "ГруппыПолейФормСтатистики");
			
			ОписаниеПоля = ФабрикаXDTO.Создать(ТипГруппыПолейФормСтатистики);
			ЗаполнитьЗначенияСвойств(ОписаниеПоля, ВыборкаПолей);
			ОписаниеПоля = ОписаниеГруппы.ГруппыПолей.Добавить(ОписаниеПоля);
			
			ВыборкаСледующийУровень = ВыборкаПолей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, ВыборкаПолей.Группировка());
			
			ВыгрузитьПоляФормыСтатистикиРекурсивно(
				ОписаниеФормы,
				ОписаниеПоля,
				ВыборкаСледующийУровень,
				ПространствоИмен);
			
		ИначеЕсли Не ВыборкаПолей.ЭтоГруппа Тогда // Группы выгружаются при обходе иерархии.
			
			ТипСтатистическийПоказательСсылка 	= ФабрикаXDTO.Тип(ПространствоИмен, "СтатистическийПоказательСсылка");
			СтатистическийПоказатель = ФабрикаXDTO.Создать(ТипСтатистическийПоказательСсылка);
			ЗаполнитьЗначенияСвойств(СтатистическийПоказатель, ВыборкаПолей);
			
			ТипПоляФормСтатистики = ФабрикаXDTO.Тип(ПространствоИмен, "ПоляФормСтатистики");
			ОписаниеПоля = ФабрикаXDTO.Создать(ТипПоляФормСтатистики);
			ЗаполнитьЗначенияСвойств(ОписаниеПоля, ВыборкаПолей);
			ОписаниеПоля.СтатистическийПоказатель = СтатистическийПоказатель;
			
			ОписаниеФормы.Поля.Добавить(ОписаниеПоля);
				
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Поднимает дату версии, если версия фактически изменилась.
//
// Параметры:
//  НоваяВерсия      - ОбъектXDTO типа ОбъектыСтатистическогоНаблюдения или ФормыСтатистики.
//  ПредыдущиеВерсии - Коллекция форм или коллекция объектов.
//  ДатаИзменения    - Дата - дата версии, которую следует присвоить, если версия данных изменилась.
//                  - Неопределено - не следует изменять дату версии (может использоваться для конвертации при изменении формата данных).
Процедура ПроверитьДатуИзменения(НоваяВерсия, ПредыдущиеВерсии, ДатаИзменения)
	
	Если ДатаИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = НоваяВерсия.Тип().Имя;
	
	КонтейнерНовойВерсии  = ПредыдущиеВерсии.СкопироватьКолонки();
	
	Если ТипОбъекта = "ОбъектыСтатистическогоНаблюдения" Тогда
		ПоискПредыдущейВерсии = Новый Структура(КлючОбъектыНаблюдения());
		Владелец = НоваяВерсия.Владелец();
		Если Владелец.Тип().Имя <> ТипОбъекта Тогда
			Родитель = Неопределено;
		Иначе
			Родитель = Владелец.Код;
		КонецЕсли;
		ПрочитатьДанныеОбъектаНаблюденияРекурсивно(КонтейнерНовойВерсии, НоваяВерсия, Родитель, Истина);
	ИначеЕсли ТипОбъекта = "ФормыСтатистики" Тогда
		ПоискПредыдущейВерсии = Новый Структура(КлючФормыСтатистики());
		ПрочитатьДанныеФормыСтатистики(КонтейнерНовойВерсии, НоваяВерсия);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПоискПредыдущейВерсии, КонтейнерНовойВерсии[0]);
	РезультатПоиска = ПредыдущиеВерсии.НайтиСтроки(ПоискПредыдущейВерсии);
		
	ОбновитьВерсию = Ложь;
	Если РезультатПоиска.Количество() = 0 Тогда
		ОбновитьВерсию = Истина;
	Иначе
		КонтейнерСтаройВерсии = ПредыдущиеВерсии.СкопироватьКолонки();
		ЗаполнитьЗначенияСвойств(КонтейнерСтаройВерсии.Добавить(), РезультатПоиска[0]);
		ОбновитьВерсию = Не ОбщегоНазначения.ДанныеСовпадают(КонтейнерНовойВерсии, КонтейнерСтаройВерсии);
	КонецЕсли;
		
	Если ОбновитьВерсию Тогда
		Если НоваяВерсия.ДатаИзменения < ДатаИзменения Тогда
			НоваяВерсия.ДатаИзменения = ДатаИзменения;
		Иначе
			НоваяВерсия.ДатаИзменения = КонецДня(НоваяВерсия.ДатаИзменения) + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переносимость поставляемых данных.

Функция НовыйПоставляемаяНастройка(Настройка)
	
	// Отбор может содержать ссылки на предопределенные элементы.
	// Такая ссылка обращается к предопределенному элементу не по имени, а по уникальному идентификатору.
	// Этот идентификатор будет разным в разных базах данных и разных областях одной базы данных.
	//
	// Поэтому при поставке настроек, а также при их хранении в составе общих (неразделенных) данных,
	// не следует использовать отбор в таком виде, как его может настроить пользователь.
	// 
	// Следует преобразовать его к "поставляемому" виду, то есть, вместо уникальных идентификаторов
	// он должен содержать имена предопределенных элементов.
	//
	// Такое преобразование не обеспечивается механизмами компоновки данных, поэтому конвертер реализован в конфигурации - 
	// см. СконвертироватьПредопределенныеЗначенияВЭлементахОтбора().
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Отбор = ОбщегоНазначения.ЗначениеИзСтрокиXML(Настройка);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	СконвертироватьПредопределенныеЗначенияВЭлементахОтбора(Отбор.Элементы, "Экспорт");
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Отбор);
	
КонецФункции

Процедура СконвертироватьПредопределенныеЗначенияВЭлементахОтбора(ЭлементыОтбора, Операция)

	// В поставляемой настройке используются "виртуальные" свойства 
	// с именем "ИмяПредопределенногоЗначения".
	//
	// Такие свойства недоступны в прикладных схемах компоновки.
	//
	// Виртуальное свойство используется вместо ИмяПредопределенныхДанных по двум причинам:
	// - для ИмяПредопределенныхДанных доступны не все виды сравнения, доступные для ссылок, в частности - ВИерархии
	// - удобнее искать ссылки по полному имени предопределенного значения ("ПланСчетов.Хозрасчетный.ГотоваяПродукция", а не "ГотоваяПродукция").
	//
	// Как следствие, экспортированный отбор не может быть непосредственно выполнен (передан компоновщику настроек),
	// поскольку свойства ИмяПредопределенногоЗначения будут недоступны (отсутствовать) 
	// и элементы отбора не будут иметь связи с доступными полями.
	//
	// Поставляемую или хранимую в составе общих данных настройку следует конвертировать до того, 
	// как она будет связана с конкретной схемой компоновки.
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			СконвертироватьПредопределенныеЗначенияВЭлементахОтбора(ЭлементОтбора.Элементы, Операция);
			
		Иначе                                                             
			
			Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			Исключение
				Продолжить;
			КонецПопытки;
			
			ИдентификаторПредопределенногоЗначения = ".ИмяПредопределенногоЗначения";
			
			Если Операция = "Экспорт" Тогда
			
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
					
					НовоеЗначениеОтбора = ИмяПредопределенногоЗначения(ЭлементОтбора.ПравоеЗначение);
					
					Если Не ЗначениеЗаполнено(НовоеЗначениеОтбора) Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлементОтбора.ПравоеЗначение = НовоеЗначениеОтбора;
					
				Иначе
					
					Если ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСписок = Новый Массив();
					СписокСконвертирован = Истина;
					Для Каждого ЗначениеИзСписка Из ЭлементОтбора.ПравоеЗначение Цикл
						
						ИмяПредопределенногоЗначения = ИмяПредопределенногоЗначения(ЗначениеИзСписка.Значение);
						
						Если Не ЗначениеЗаполнено(ИмяПредопределенногоЗначения) Тогда
							СписокСконвертирован = Ложь;
							Прервать;
						КонецЕсли;
						
						НовыйСписок.Добавить(ИмяПредопределенногоЗначения);
						
					КонецЦикла;	
					
					Если Не СписокСконвертирован Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(НовыйСписок);
					
				КонецЕсли;
				
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля + ИдентификаторПредопределенногоЗначения);
				
			ИначеЕсли Операция = "Импорт" Тогда
				
				ПозицияИдентификатора = Найти(ИмяПоля, ИдентификаторПредопределенногоЗначения);
				Если ПозицияИдентификатора = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Ссылка.ИмяПредопределенногоЗначения.
				// позиция идентификатора = 7.
				// длина имени поля = 35.
				// длина идентификатора = 29.
				Если ПозицияИдентификатора <> СтрДлина(ИмяПоля) - СтрДлина(ИдентификаторПредопределенногоЗначения) + 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("СписокЗначений") Тогда
					
					Попытка
						НовоеЗначениеОтбора = ПредопределенноеЗначение(ЭлементОтбора.ПравоеЗначение);
					Исключение
						Продолжить;
					КонецПопытки;
					
					ЭлементОтбора.ПравоеЗначение = НовоеЗначениеОтбора;
					
				Иначе
					
					НовыйСписок = Новый Массив();
					СписокСконвертирован = Истина;
					Для Каждого ЗначениеИзСписка Из ЭлементОтбора.ПравоеЗначение Цикл
						
						Попытка
							Значение = ПредопределенноеЗначение(ЗначениеИзСписка.Значение);
						Исключение
							СписокСконвертирован = Ложь;
							Прервать;
						КонецПопытки;
						
						НовыйСписок.Добавить(Значение);
						
					КонецЦикла;	
					
					Если Не СписокСконвертирован Тогда
						Продолжить;
					КонецЕсли;
					
					ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(НовыйСписок);
					
				КонецЕсли;
				
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Лев(ИмяПоля, ПозицияИдентификатора - 1));
				
			КонецЕсли;
				
		КонецЕсли;	
	КонецЦикла;// По элементам отбора.
	
КонецПроцедуры

Функция ИмяПредопределенногоЗначения(Значение)
	
	Если Значение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Тип = ТипЗнч(Значение);
	
	Если Не Справочники.ТипВсеСсылки().СодержитТип(Тип) 
		И Не ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) 
		И Не ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) 
		И Не ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) 
		И Не Значение.Предопределенный Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьПолноеИмяПредопределенногоЗначения(Значение);
	
КонецФункции

// Получает сериализованный отбор компоновки данных из поставляемой настройки.
// Параметры:
//   ПоставляемаяНастройка - ОбъектXDTO типа ПоставляемаяНастройка.
Функция ПолучитьНастройкуИзПоставляемыхДанных(Знач ПоставляемаяНастройка)
	
	Попытка
		Отбор = СериализаторXDTO.ПрочитатьXDTO(ПоставляемаяНастройка);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// Сериализуем отбор в XML.
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(Отбор);
	
КонецФункции

Функция ИмяСобытияВЖурналеРегистрации()

	Возврат НСтр("ru = 'Правила заполнения форм статистики'", ОбщегоНазначения.КодОсновногоЯзыка());

КонецФункции

// Чтение правил заполнения.

Функция ПравилаЗаполненияФормСтатистики(Знач ДанныеДляЗаполненияXML = Неопределено)
	
	// Подготавливаем коллекцию, в которую поместим прочитанные данные.
	ПравилаЗаполненияФормСтатистики = НовыйПравилаЗаполненияФормСтатистики();
	
	Если ДанныеДляЗаполненияXML = Неопределено Тогда
		// Поставляемые данные содержатся в макете.
		МакетОбъектыНаблюдения = Справочники.СтатистическиеПоказатели.ПолучитьМакет("ОбъектыНаблюдения");
		МакетФормыСтатистики = Справочники.СтатистическиеПоказатели.ПолучитьМакет("ФормыСтатистики");
		
		ДанныеДляЗаполненияXML = Новый Структура;
		ДанныеДляЗаполненияXML.Вставить("ОбъектыНаблюдения", МакетОбъектыНаблюдения.ПолучитьТекст());
		ДанныеДляЗаполненияXML.Вставить("ФормыСтатистики",   МакетФормыСтатистики.ПолучитьТекст());
		
	КонецЕсли;
	
	КонтейнерОбъектов = Контейнер(ДанныеДляЗаполненияXML.ОбъектыНаблюдения);
	
	Если КонтейнерОбъектов = Неопределено Тогда
		// Чтение макета не удалось, возвращаем пустую структуру данных.
		Возврат ПравилаЗаполненияФормСтатистики;
	КонецЕсли;
	
	Для Каждого ОписаниеОбъектаНаблюдения Из КонтейнерОбъектов.ОбъектыСтатистическогоНаблюдения Цикл
		ПрочитатьДанныеОбъектаНаблюденияРекурсивно(ПравилаЗаполненияФормСтатистики.ОбъектыНаблюдения, ОписаниеОбъектаНаблюдения);
	КонецЦикла;
	
	КонтейнерФорм = Контейнер(ДанныеДляЗаполненияXML.ФормыСтатистики);
	
	Если КонтейнерФорм = Неопределено Тогда
		// Чтение макета не удалось, возвращаем пустую структуру данных.
		Возврат ПравилаЗаполненияФормСтатистики;
	КонецЕсли;
	
	Для Каждого ОписаниеФормыСтатистики Из КонтейнерФорм.ФормыСтатистики Цикл
		ПрочитатьДанныеФормыСтатистики(ПравилаЗаполненияФормСтатистики.ФормыСтатистики, ОписаниеФормыСтатистики);
	КонецЦикла;
	
	Возврат ПравилаЗаполненияФормСтатистики;
	
КонецФункции

Процедура ПрочитатьДанныеОбъектаНаблюденияРекурсивно(Приемник, Источник, Родитель = Неопределено, ОдинОбъект = Ложь)
	
	НоваяСтрокаОбъектНаблюдения = Приемник.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектНаблюдения, Источник);
	
	НоваяСтрокаОбъектНаблюдения.Родитель                 = Родитель;
	НоваяСтрокаОбъектНаблюдения.СтатистическиеПоказатели = НовыйСтатистическиеПоказатели();
	НоваяСтрокаОбъектНаблюдения.Настройка                = ПолучитьНастройкуИзПоставляемыхДанных(Источник.Настройка);
	
	Для Каждого Показатель Из Источник.СтатистическиеПоказатели Цикл
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОбъектНаблюдения.СтатистическиеПоказатели.Добавить(), Показатель);
	КонецЦикла;
	
	Если ОдинОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПодчиненныйОбъект Из Источник.ОбъектыСтатистическогоНаблюдения Цикл
		ПрочитатьДанныеОбъектаНаблюденияРекурсивно(Приемник, ПодчиненныйОбъект, Источник.Код);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеФормыСтатистики(Приемник, Источник)
	
	НоваяСтрокаФормаСтатистики = Приемник.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаФормаСтатистики, Источник);
	
	НоваяСтрокаФормаСтатистики.ГруппыПолей = НовыйГруппыПолейФормСтатистики();
	НоваяСтрокаФормаСтатистики.Поля        = НовыйПоляФормСтатистики();
	
	ПрочитатьДанныеГруппПолейФормыРекурсивно(НоваяСтрокаФормаСтатистики.ГруппыПолей, Источник);
	
	Для Каждого ПолеФормы Из Источник.Поля Цикл
		НоваяСтрокаПолеФормы = НоваяСтрокаФормаСтатистики.Поля.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПолеФормы, ПолеФормы);
		НоваяСтрокаПолеФормы.СтатистическийПоказатель = НовыйСтатистическийПоказательСсылка();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПолеФормы.СтатистическийПоказатель, ПолеФормы.СтатистическийПоказатель);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПрочитатьДанныеГруппПолейФормыРекурсивно(Приемник, Источник, КодГруппыПолей = Неопределено)
	
	Для Каждого ГруппаПолей Из Источник.ГруппыПолей Цикл
		
		НоваяСтрока = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ГруппаПолей);
		НоваяСтрока.КодГруппыПолей = КодГруппыПолей;
		
		ПрочитатьДанныеГруппПолейФормыРекурсивно(Приемник, ГруппаПолей, ГруппаПолей.КодПоля);
		
	КонецЦикла;
	
КонецПроцедуры	

// Загрузка поставляемых данных в справочники.

Процедура ЗагрузитьПравилаЗаполненияФормСтатистики(ПравилаЗаполнения)
	
	Если ПравилаЗаполнения.ОбъектыНаблюдения.Количество() = 0 
		И ПравилаЗаполнения.ФормыСтатистики.Количество() = 0 Тогда
		Возврат; //Поставляемые данные отсутствуют.
	КонецЕсли;
	
	// Объекты статистического наблюдения и показатели загружаем первыми, 
	// потому что на показатели есть ссылки из форм статистики.
	НачатьТранзакцию();
	Попытка
		ЗагрузитьОбъектыНаблюдения(ПравилаЗаполнения.ОбъектыНаблюдения);
		ЗагрузитьФормыСтатистики(ПравилаЗаполнения.ФормыСтатистики);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление поставляемых данных статистики'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗагрузитьОбъектыНаблюдения(ПравилаЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыСтатистическогоНаблюдения.Код,
	|	ОбъектыСтатистическогоНаблюдения.Ссылка,
	|	ОбъектыСтатистическогоНаблюдения.ПометкаУдаления,
	|	ОбъектыСтатистическогоНаблюдения.ДатаИзменения
	|ИЗ
	|	Справочник.ОбъектыСтатистическогоНаблюдения КАК ОбъектыСтатистическогоНаблюдения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатистическиеПоказатели.Владелец КАК ОбъектНаблюдения,
	|	СтатистическиеПоказатели.Детализировать КАК ДетализироватьОбъектНаблюдения,
	|	СтатистическиеПоказатели.ХарактеристикаОбъектаНаблюдения КАК ХарактеристикаОбъектаНаблюдения,
	|	СтатистическиеПоказатели.Ссылка КАК Ссылка,
	|	СтатистическиеПоказатели.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.СтатистическиеПоказатели КАК СтатистическиеПоказатели";
	
	Результат = Запрос.ВыполнитьПакет();
	ЗагруженныеРанееОбъектыНаблюдения = Результат[0].Выгрузить();
	ПривестиКлючКВерхнемуРегистру(ЗагруженныеРанееОбъектыНаблюдения, КлючОбъектыНаблюдения());
	ЗагруженныеРанееОбъектыНаблюдения.Индексы.Добавить(КлючОбъектыНаблюдения());
	
	ЗагруженныеРанееПоказатели = Результат[1].Выгрузить();
	ПривестиКлючКВерхнемуРегистру(ЗагруженныеРанееПоказатели, КлючСтатистическиеПоказатели());
	ЗагруженныеРанееПоказатели.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ЗагруженныеРанееПоказатели.Индексы.Добавить("ОбъектНаблюдения");
	ЗагруженныеРанееПоказатели.Индексы.Добавить("ОбъектНаблюдения, " + КлючСтатистическиеПоказатели());
	
	// Правила заполнения содержат линейный список групп. 
	// Но загружать объекты следует в иерархическом порядке.
	// Коллекция ИерархияГрупп хранит перечень ранее обработанных групп и позволяет найти ссылку на родительский элемент.
	// В коллекции с правилами заполнения группы упорядочены так, чтобы вышележащие были раньше.
	ИерархияГрупп = Новый Соответствие; // Ключ - Код, Значение - Ссылка. 
	
	ПоискЗагруженногоРанееОбъектаНаблюдения = Новый Структура(КлючОбъектыНаблюдения());
	ПоискЗагруженногоРанееПоказателя        = Новый Структура("ОбъектНаблюдения, " + КлючСтатистическиеПоказатели());
	
	Для Каждого ПоставляемыйОбъектНаблюдения Из ПравилаЗаполнения Цикл
		
		ОписаниеЗагруженногоРанее = ЗагруженныйРанееЭлемент(ПоставляемыйОбъектНаблюдения, ЗагруженныеРанееОбъектыНаблюдения, ПоискЗагруженногоРанееОбъектаНаблюдения);
		Если ОписаниеЗагруженногоРанее = Неопределено Тогда
			
			Объект = Справочники.ОбъектыСтатистическогоНаблюдения.СоздатьЭлемент();
			
		Иначе
			
			Если Не ЗагружатьЭлементПравил(ПоставляемыйОбъектНаблюдения, ОписаниеЗагруженногоРанее) Тогда
				ИерархияГрупп.Вставить(ПоставляемыйОбъектНаблюдения.Код, ОписаниеЗагруженногоРанее.Ссылка);
				Продолжить;
			КонецЕсли;
			
			Объект = ОписаниеЗагруженногоРанее.Ссылка.ПолучитьОбъект();
			Объект.ПометкаУдаления = Ложь;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, ПоставляемыйОбъектНаблюдения);
		Объект.Родитель = ИерархияГрупп[ПоставляемыйОбъектНаблюдения.Родитель];
		
		ЗаписатьПоставляемыеДанные(Объект);
		ИерархияГрупп.Вставить(ПоставляемыйОбъектНаблюдения.Код, Объект.Ссылка);
		
		ОбъектНаблюдения = Объект.Ссылка;
		
		// Для того, чтобы удалить показатели, не предусмотренные поставляемыми данными,
		// сначала пометим все показатели поставляемого объекта, а потом снимем отметку у поставляемых показателей.
		ПоискЗагруженныхРанееПоказателейОбъекта = Новый Структура("ОбъектНаблюдения", ОбъектНаблюдения);
		Для Каждого ЗагруженныйРанееПоказатель Из ЗагруженныеРанееПоказатели.НайтиСтроки(ПоискЗагруженныхРанееПоказателейОбъекта) Цикл
			ЗагруженныйРанееПоказатель.Удалить = Истина;
		КонецЦикла;
		
		// Загрузим статистические показатели.
		ПоискЗагруженногоРанееПоказателя.ОбъектНаблюдения = ОбъектНаблюдения;
		Для Каждого ПоставляемыйПоказатель Из ПоставляемыйОбъектНаблюдения.СтатистическиеПоказатели Цикл
			
			ОписаниеЗагруженногоРанее = ЗагруженныйРанееЭлемент(ПоставляемыйПоказатель, ЗагруженныеРанееПоказатели, ПоискЗагруженногоРанееПоказателя);
			
			Если ОписаниеЗагруженногоРанее = Неопределено Тогда
				Объект = Справочники.СтатистическиеПоказатели.СоздатьЭлемент();
			Иначе
				ОписаниеЗагруженногоРанее.Удалить = Ложь;
				Объект = ОписаниеЗагруженногоРанее.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Ложь;
			КонецЕсли;
			
			Объект.Владелец                        = ОбъектНаблюдения;
			Объект.ХарактеристикаОбъектаНаблюдения = ПоставляемыйПоказатель.ХарактеристикаОбъектаНаблюдения;
			Объект.Детализировать                  = ПоставляемыйПоказатель.ДетализироватьОбъектНаблюдения;
			Объект.Наименование                    = ПоставляемыйПоказатель.НаименованиеПоказателя;
			ЗаписатьПоставляемыеДанные(Объект);
			
		КонецЦикла; // По поставляемым показателям.
		
	КонецЦикла; // По поставляемым объектам наблюдения.
		
	// Пометим на удаление показатели, которые не предусмотрены поставляемыми данными.
	ПометитьНаУдалениеУстаревшиеЭлементы(ЗагруженныеРанееПоказатели);
	
КонецПроцедуры

Процедура ЗагрузитьФормыСтатистики(ПравилаЗаполнения)
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФормыСтатистики.Владелец.ИсточникОтчета КАК РегламентированныйОтчет,
	|	ФормыСтатистики.Код КАК ИмяФормы,
	|	ФормыСтатистики.Ссылка КАК Ссылка,
	|	ФормыСтатистики.ПометкаУдаления КАК ПометкаУдаления,
	|	ФормыСтатистики.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	Справочник.ФормыСтатистики КАК ФормыСтатистики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоляФормСтатистики.Владелец КАК ФормаСтатистики,
	|	ПоляФормСтатистики.Код КАК КодПоля,
	|	ПоляФормСтатистики.ЭтоГруппа КАК ЭтоГруппа,
	|	ПоляФормСтатистики.Ссылка КАК Ссылка,
	|	ПоляФормСтатистики.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ПоляФормСтатистики КАК ПоляФормСтатистики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатистическиеПоказатели.Ссылка КАК Ссылка,
	|	СтатистическиеПоказатели.Владелец.Код КАК КодОбъектаНаблюдения,
	|	СтатистическиеПоказатели.Детализировать КАК ДетализироватьОбъектНаблюдения,
	|	СтатистическиеПоказатели.ХарактеристикаОбъектаНаблюдения КАК ХарактеристикаОбъектаНаблюдения
	|ИЗ
	|	Справочник.СтатистическиеПоказатели КАК СтатистическиеПоказатели
	|ГДЕ
	|	НЕ СтатистическиеПоказатели.ПометкаУдаления";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ПолныйКлючПолеФормыСтатистики      = "ФормаСтатистики, ЭтоГруппа, " + КлючПоляФормСтатистики();
	ПолныйКлючСтатистическийПоказатель = ПолныйКлючСтатистическийПоказатель();
	
	ЗагруженныеРанееФормыСтатистики = Результат[0].Выгрузить();
	ПривестиКлючКВерхнемуРегистру(ЗагруженныеРанееФормыСтатистики, КлючФормыСтатистики());
	ЗагруженныеРанееФормыСтатистики.Индексы.Добавить(КлючФормыСтатистики());
	
	ЗагруженныеРанееПоляФорм = Результат[1].Выгрузить();
	ПривестиКлючКВерхнемуРегистру(ЗагруженныеРанееПоляФорм, ПолныйКлючПолеФормыСтатистики);
	ЗагруженныеРанееПоляФорм.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ЗагруженныеРанееПоляФорм.Индексы.Добавить("ФормаСтатистики");
	ЗагруженныеРанееПоляФорм.Индексы.Добавить(ПолныйКлючПолеФормыСтатистики);
	
	СтатистическиеПоказатели = Результат[2].Выгрузить();
	ПривестиКлючКВерхнемуРегистру(СтатистическиеПоказатели, ПолныйКлючСтатистическийПоказатель);
	СтатистическиеПоказатели.Индексы.Добавить(ПолныйКлючСтатистическийПоказатель);
	
	// Собственно загрузка.
	ПоискЗагруженнойРанееФормы      = Новый Структура(КлючФормыСтатистики());
	ПоискЗагруженногоРанееПоляФормы = Новый Структура(ПолныйКлючПолеФормыСтатистики);
	ПоискСтатистическогоПоказателя  = Новый Структура(ПолныйКлючСтатистическийПоказатель);
	
	Для Каждого ПоставляемаяФорма Из ПравилаЗаполнения Цикл
		
		ОписаниеЗагруженногоРанее = ЗагруженныйРанееЭлемент(
			ПоставляемаяФорма,
			ЗагруженныеРанееФормыСтатистики,
			ПоискЗагруженнойРанееФормы);
		
		Если ОписаниеЗагруженногоРанее = Неопределено Тогда
			Объект = Справочники.ФормыСтатистики.СоздатьЭлемент();
		Иначе
			
			Если Не ЗагружатьЭлементПравил(ПоставляемаяФорма, ОписаниеЗагруженногоРанее) Тогда
				Продолжить;
			КонецЕсли;
			
			Объект = ОписаниеЗагруженногоРанее.Ссылка.ПолучитьОбъект();
			Объект.ПометкаУдаления = Ложь;
			
		КонецЕсли;
		
		Объект.Владелец      = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ПоставляемаяФорма.РегламентированныйОтчет);
		Объект.Код           = ПоставляемаяФорма.ИмяФормы;
		Объект.Наименование  = ПоставляемаяФорма.НаименованиеФормы;
		Объект.ДатаИзменения = ПоставляемаяФорма.ДатаИзменения;
		ЗаписатьПоставляемыеДанные(Объект);
		
		ФормаСтатистики = Объект.Ссылка;
		
		// Для того, чтобы удалить поля, не предусмотренные поставляемыми данными,
		// сначала пометим все поля поставляемого объекта, а потом снимем отметку у поставляемых полей.
		ПоискЗагруженныхРанееПолейФормы = Новый Структура("ФормаСтатистики", ФормаСтатистики);
		Для Каждого ЗагруженноеРанееПолеФормы Из ЗагруженныеРанееПоляФорм.НайтиСтроки(ПоискЗагруженныхРанееПолейФормы) Цикл
			ЗагруженноеРанееПолеФормы.Удалить = Истина;
		КонецЦикла;
		
		ПоискЗагруженногоРанееПоляФормы.ФормаСтатистики = ФормаСтатистики;
		
		// Правила заполнения содержат линейный список групп. 
		// Но загружать объекты следует в иерархическом порядке.
		// Коллекция ИерархияГрупп хранит перечень ранее обработанных групп и позволяет найти ссылку на родительский элемент.
		// В коллекции с правилами заполнения группы упорядочены так, чтобы вышележащие были раньше.
		ИерархияГрупп = Новый Соответствие; //Ключ - КодПоля, Значение - Ссылка.
		
		// Загрузим группы полей формы.
		ПоискЗагруженногоРанееПоляФормы.ЭтоГруппа = Истина;
		Для Каждого ПоставляемоеПоле Из ПоставляемаяФорма.ГруппыПолей Цикл
			
			ОписаниеЗагруженногоРанее = ЗагруженныйРанееЭлемент(ПоставляемоеПоле, ЗагруженныеРанееПоляФорм, ПоискЗагруженногоРанееПоляФормы);
			
			Если ОписаниеЗагруженногоРанее = Неопределено Тогда
				Объект = Справочники.ПоляФормСтатистики.СоздатьГруппу();
			Иначе
				ОписаниеЗагруженногоРанее.Удалить = Ложь;
				Объект = ОписаниеЗагруженногоРанее.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Ложь;
			КонецЕсли;
			
			Объект.Владелец     = ФормаСтатистики;
			Объект.Код          = ПоставляемоеПоле.КодПоля;
			Объект.Наименование = ПоставляемоеПоле.НаименованиеПоля;
			Объект.Родитель     = ИерархияГрупп[ПоставляемоеПоле.КодГруппыПолей];
			
			ЗаписатьПоставляемыеДанные(Объект);
			
			ИерархияГрупп.Вставить(Объект.Код, Объект.Ссылка);
			
		КонецЦикла; // По поставляемым группам полей.
		
		// Загрузим поля формы.
		ПоискЗагруженногоРанееПоляФормы.ЭтоГруппа = Истина;
		Для Каждого ПоставляемоеПоле Из ПоставляемаяФорма.Поля Цикл
			
			ОписаниеЗагруженногоРанее = ЗагруженныйРанееЭлемент(ПоставляемоеПоле, ЗагруженныеРанееПоляФорм, ПоискЗагруженногоРанееПоляФормы);
			
			Если ОписаниеЗагруженногоРанее = Неопределено Тогда
				Объект = Справочники.ПоляФормСтатистики.СоздатьЭлемент();
			Иначе
				ОписаниеЗагруженногоРанее.Удалить = Ложь;
				Объект = ОписаниеЗагруженногоРанее.Ссылка.ПолучитьОбъект();
				Объект.ПометкаУдаления = Ложь;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Объект, ПоставляемоеПоле);
			
			Объект.Владелец      = ФормаСтатистики;
			Объект.Код           = ПоставляемоеПоле.КодПоля;
			Объект.Наименование  = ПоставляемоеПоле.НаименованиеПоля;
			Объект.Родитель      = ИерархияГрупп[ПоставляемоеПоле.КодГруппыПолей];
			
			// СтатистическийПоказатель.
			ОписаниеЗагруженногоРанее = ЗагруженныйРанееЭлемент(ПоставляемоеПоле.СтатистическийПоказатель, СтатистическиеПоказатели, ПоискСтатистическогоПоказателя);
			Если ОписаниеЗагруженногоРанее <> Неопределено Тогда
				Объект.СтатистическийПоказатель = ОписаниеЗагруженногоРанее.Ссылка;
			КонецЕсли;
			
			ЗаписатьПоставляемыеДанные(Объект);
			
		КонецЦикла; // По поставляемым полям.
		
	КонецЦикла; // По поставляемым формам.
	
	// Пометим поля, которые отсутствуют в загруженных сейчас формах.
	ПометитьНаУдалениеУстаревшиеЭлементы(ЗагруженныеРанееПоляФорм);
	
КонецПроцедуры

Процедура ПометитьНаУдалениеУстаревшиеЭлементы(ЗагруженныеРанееДанные)
	
	ОтборЭлементовДляУдаления = Новый Структура;
	ОтборЭлементовДляУдаления.Вставить("Удалить",         Истина);
	ОтборЭлементовДляУдаления.Вставить("ПометкаУдаления", Ложь);
	ЭлементыДляУдаления = ЗагруженныеРанееДанные.НайтиСтроки(ОтборЭлементовДляУдаления);
	Для Каждого УстаревшийЭлемент Из ЭлементыДляУдаления Цикл
		Объект = УстаревшийЭлемент.Ссылка.ПолучитьОбъект();
		Если ТипЗнч(Объект) = Тип("СправочникОбъект.СтатистическиеПоказатели") Тогда
			// Статистический показатель недостаточно просто удалить,
			// нужно сделать набор ключевых полей уникальным, для этого,
			// присвоим полю ХарактеристикаОбъектаНаблюдения уникальный идентификатор.
			Объект.ХарактеристикаОбъектаНаблюдения = Новый УникальныйИдентификатор();
		КонецЕсли;
		Объект.ПометкаУдаления = Истина;
		ЗаписатьПоставляемыеДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагруженныйРанееЭлемент(Правило, ЗагруженныеРанееЭлементы, ПоискЗагруженногоРанееЭлемента)
	
	ЗаполнитьЗначенияСвойств(ПоискЗагруженногоРанееЭлемента, Правило);
	
	Для Каждого ПараметрПоиска Из ПоискЗагруженногоРанееЭлемента Цикл
		Если ТипЗнч(ПараметрПоиска.Значение) = Тип("Строка") Тогда
			ПоискЗагруженногоРанееЭлемента[ПараметрПоиска.Ключ] = ВРЕГ(ПараметрПоиска.Значение);
		КонецЕсли;
	КонецЦикла;
	
	РезультатПоиска = ЗагруженныеРанееЭлементы.НайтиСтроки(ПоискЗагруженногоРанееЭлемента);
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		ОписаниеЗагруженногоРанее = РезультатПоиска[0];
		Возврат ОписаниеЗагруженногоРанее;
	КонецЕсли;
	
КонецФункции

Функция ЗагружатьЭлементПравил(Правило, ОписаниеЗагруженногоРанее)
	// Проверим версию объекта. Загружаем те, у которых версия в поставляемых данных больше. 
	// Также загружаем помеченные на удаление (пометка удаления форсирует загрузку).
	// Проверка относится только к текущему объекту, но не к дочерним объектам.
	Возврат ОписаниеЗагруженногоРанее.ПометкаУдаления
		Или Правило.ДатаИзменения > ОписаниеЗагруженногоРанее.ДатаИзменения;
		
КонецФункции

Процедура ПривестиКлючКВерхнемуРегистру(Таблица, КлючевыеПоля)
	
	ИменаКлючевыхПолей = СтрРазделить(КлючевыеПоля, ",");
	Для К = 0 По ИменаКлючевыхПолей.Количество()-1 Цикл
		ИменаКлючевыхПолей[К] = СокрЛП(ИменаКлючевыхПолей[К]);
	КонецЦикла;
	
	Для Каждого Строка Из Таблица Цикл
		Для Каждого ИмяКлючевогоПоля Из ИменаКлючевыхПолей Цикл
			ЗначениеКлючевогоПоля = Строка[ИмяКлючевогоПоля];
			Если ТипЗнч(ЗначениеКлючевогоПоля) = Тип("Строка") Тогда
				Строка[ИмяКлючевогоПоля] = ВРЕГ(ЗначениеКлючевогоПоля);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция Контейнер(ДанныеСтрокой)
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ДанныеСтрокой);
	
	Попытка
		Контейнер = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Исключение
		// Чтение макета не удалось.
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать поставляемые данные.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Контейнер.ВерсияФормата, "3.0.2.0") >= 0 Тогда
		ТекстСообщения = НСтр("ru = 'Неподдерживаемая версия поставляемых данных %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Контейнер.ВерсияФормата);
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Возврат Контейнер;
	
КонецФункции

#КонецОбласти

#КонецЕсли
