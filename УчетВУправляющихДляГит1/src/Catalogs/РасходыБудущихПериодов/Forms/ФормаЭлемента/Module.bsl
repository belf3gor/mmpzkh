#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетЗатратПриИзменении(Элемент)
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	УстановитьВидАктива(ЭтаФорма, Объект.СчетЗатрат);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатрат1ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(1);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатрат1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатрат2ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(2);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатрат2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатрат3ПриИзменении(Элемент)
	
	ПриИзмененииСубконто(3);

КонецПроцедуры

&НаКлиенте
Процедура СубконтоЗатрат3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Для статей РБП по договорам добровольного страхования предлагается автоматическая установка способа
// признания расходов по календарным дням соответственно статье 272 гл.25 НК.
&НаКлиенте
Процедура ВидРБПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УказанныйСпособПризнанияРасходов = Объект.СпособПризнанияРасходов; 
	УказанныйВидРБП = ВыбранноеЗначение;
	
	Если УказанныйВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества") Тогда
		Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы");
		СчетЗатратПриИзменении(Элемент);
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоМесяцам");
	КонецЕсли;
	
	Если УказанныйВидРБП = ПредопределенноеЗначение("Перечисление.ВидыРБП.УбыткиПрошлыхЛет") Тогда
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ВОсобомПорядке");
		Объект.СчетЗатрат = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		СчетЗатратПриИзменении(Элемент);
	КонецЕсли;
	
	Если ВидыРБПДобровольноеСтрахование.НайтиПоЗначению(УказанныйВидРБП) <> Неопределено Тогда
		Если УказанныйСпособПризнанияРасходов <> ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням") Тогда
			ТекстВопроса = НСтр("ru='Расходы по добровольному страхованию следует списывать
				|пропорционально количеству календарных дней действия договора.
				|Изменить способ признания расходов?'");
				
			Оповещение = Новый ОписаниеОповещения("ВопросИзменитьСпособПризнанияРасходовЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРБППриИзменении(Элемент)
	
	Если ВидыРБПНУ.НайтиПоЗначению(Объект.ВидРБП) <> Неопределено Тогда
		Объект.ВидАктива = Неопределено;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ВидАктива) Тогда
		Объект.ВидАктива = ВидАктиваПоУмолчанию;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПризнанияРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УказанныйСпособПризнанияРасходов = ВыбранноеЗначение; 
	УказанныйВидРБП = Объект.ВидРБП;
	Если ВидыРБПДобровольноеСтрахование.НайтиПоЗначению(УказанныйВидРБП) <> Неопределено Тогда
		Если УказанныйСпособПризнанияРасходов <> ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням") Тогда
			СтандартнаяОбработка = Ложь;
			
			ТекстВопроса = НСтр("ru='Расходы по добровольному страхованию следует списывать
				|пропорционально количеству календарных дней действия договора.
				|Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ВопросСписыватьПропорциональноКоличествуКалендарныхДнейЗавершение", ЭтотОбъект, УказанныйСпособПризнанияРасходов);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоШапки(
		ЭтотОбъект, Объект, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
	ВидыРБПДобровольноеСтрахование.Добавить(Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни);
	ВидыРБПДобровольноеСтрахование.Добавить(Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов);
	ВидыРБПДобровольноеСтрахование.Добавить(Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности);
	
	ВидыРБПНУ.Добавить(Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества);
	ВидыРБПНУ.Добавить(Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
	ВидыРБПНУ.Добавить(Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств);
	
	ВидАктиваПоУмолчанию = Метаданные.Справочники.РасходыБудущихПериодов.Реквизиты.ВидАктива.ЗначениеЗаполнения;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ВидАктива.Доступность = (Форма.ВидыРБПНУ.НайтиПоЗначению(Объект.ВидРБП) = Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидАктива(ЭтаФорма, СчетЗатрат)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Объект.ВидАктива) Тогда
		ЭтаФорма.Объект.ВидАктива = ОпределитьВидАктиваРБП(СчетЗатрат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьСпособПризнанияРасходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СпособПризнанияРасходов = ПредопределенноеЗначение("Перечисление.СпособыПризнанияРасходов.ПоКалендарнымДням");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСписыватьПропорциональноКоличествуКалендарныхДнейЗавершение(Результат, УказанныйСпособПризнанияРасходов) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.СпособПризнанияРасходов = УказанныйСпособПризнанияРасходов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьВидАктиваРБП(СчетСписания) Экспорт
	
	Если Не ЗначениеЗаполнено(СчетСписания) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет01)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ОсновныеСредства)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&Счет08)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеВнеоборотныеАктивы)
		|				ИНАЧЕ ВЫБОР
		|						КОГДА Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетЗатрат)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.Запасы)
		|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ПрочиеОборотныеАктивы)
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ВидАктива
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка = &ТекущийСчет";

	Запрос.УстановитьПараметр("ТекущийСчет", СчетСписания);
	Запрос.УстановитьПараметр("Счет01", ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	Запрос.УстановитьПараметр("Счет08", ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);

	Запрос.УстановитьПараметр("СчетЗатрат", Массив);

	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();

	Возврат Результат.ВидАктива;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииСубконто(НомерСубконто)

	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		ЭтотОбъект, Объект, НомерСубконто, ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСубконто(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, 
		ПараметрыУстановкиСвойствСубконто(ЭтотОбъект));
		
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыУстановкиСвойствСубконто(Форма)

	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоЗатрат", "", "СубконтоЗатрат", "", "СчетЗатрат");
	Результат.ДопРеквизиты.Вставить("Организация", Форма.ОсновнаяОрганизация);
	
	Возврат Результат;

КонецФункции

#КонецОбласти
