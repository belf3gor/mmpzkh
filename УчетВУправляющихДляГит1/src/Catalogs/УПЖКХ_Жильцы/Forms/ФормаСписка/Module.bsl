
///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////
// Вывод степени родства пришлось реализовать в отдельном поле,
// так как нет метода "При выводе строки" списка и нельзя использовать
// временные таблицы в запросе динам. списка. Если использовать 
// вложенные запросы, то выполнение будет крайне неоптимальным.

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура обновляет степень родства физ. лица на сервере.
Процедура ОбновитьСтепеньРодстваНаСервере(Проживающий)
	
	ТекВладелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Проживающий.Владелец);
	Если ТипЗнч(ТекВладелец) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		Если Проживающий.ФизЛицо = ТекВладелец.ФизЛицо Тогда
			ТипРодственнойСвязи = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника();
		Иначе
			ТипРодственнойСвязи = ПолучитьСтепеньРодстваДляФизЛица(Проживающий.ФизЛицо, ТекВладелец.ФизЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТипРодственнойСвязи) Тогда
		ТипРодственнойСвязи = "<Не определен>";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет степень родства физ. лица.
Процедура ОбновитьСтепеньРодства()
	
	Проживающий = Элементы.Список.ТекущаяСтрока;
	
	Если Не Проживающий = Неопределено Тогда
		ОбновитьСтепеньРодстваНаСервере(Проживающий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает структуру параметров на сервере.
Функция ПодготовитьСтруктуруПараметровНаСервере(Владелец, ФизЛицо, Копирование)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим", "Создание");
	СтруктураПараметров.Вставить("Пол", "");
	СтруктураПараметров.Вставить("ФИО", "");
	СтруктураПараметров.Вставить("ЛицевойСчет", Владелец);
	СтруктураПараметров.Вставить("ДатаРождения", "");
	СтруктураПараметров.Вставить("ИНН", "");
	СтруктураПараметров.Вставить("СтраховойНомерПФР", "");
	СтруктураПараметров.Вставить("ФизЛицо", "");
	Если Копирование Тогда
		СтруктураПараметров.Вставить("ФИО", ФизЛицо.Наименование);
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ФизЛицо);
		СтруктураПараметров.ФизЛицо = ФизЛицо;
	КонецЕсли;
	
	Возврат Новый Структура("ДанныеОЖильце", СтруктураПараметров);
	
КонецФункции

&НаСервере
// Функция определяет, установлена ли у проживающего галочка "Зарегистрирован" или "Проживает" в регистре сведений.
Функция ПроверитьНаСуществованиеРегистрации(Проживающий)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет, 
	|				УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает, ЛОЖЬ) КАК Проживает
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			ДатаИзменения <= &ДатаСреза
	|				И Жилец = &Проживающий) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				ДатаИзменения <= &ДатаСреза
	|					И Жилец = &Проживающий) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец";
	
	Запрос.УстановитьПараметр("ДатаСреза", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("Проживающий", Проживающий);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ПроживаетИлиЗарегистрирован = Ложь;
	Для Каждого СтрокаТЗ Из ТаблицаРезультат Цикл
		Если СтрокаТЗ.Проживает ИЛИ СтрокаТЗ.Зарегистрирован Тогда
			ПроживаетИлиЗарегистрирован = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроживаетИлиЗарегистрирован Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Список".
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСтепеньРодства", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка.
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Группа Тогда
		
		Отказ = Истина;
		
		Если Не Элементы.Список.ТекущиеДанные = Неопределено Тогда
			Владелец = Элементы.Список.ТекущиеДанные.Владелец;
			ФизЛицо  = Элементы.Список.ТекущиеДанные.ФизЛицо;
		Иначе
			Владелец = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
			ФизЛицо  = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		КонецЕсли;
		
		СтруктураПараметров = ПодготовитьСтруктуруПараметровНаСервере(Владелец, ФизЛицо, Копирование);
		
		ФормаОбработки = ПолучитьФорму("Обработка.КВП_ПомощникСозданияПроживающего.Форма.ПомощникВводаЖильца",
		                                                                          СтруктураПараметров, ЭтаФорма);
		
		ФормаОбработки.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" списка.
Процедура СписокПриИзменении(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено
	   И НЕ Элемент.ТекущиеДанные = Неопределено
	      И Элемент.ТекущиеДанные.ПометкаУдаления Тогда
		Если ПроверитьНаСуществованиеРегистрации(Элемент.ТекущаяСтрока) Тогда
			ТекстПредупреждения = "При установке пометки на удаление проживающего необходимо внести изменения
								  |по лицевому счету с помощью документа ""Изменение лицевого счета""!";
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СписокПриИзменении()

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "СформироватьАдресныйЛистокПрибытия".
Процедура СформироватьАдресныйЛистокПрибытия(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Проживающий", ТекущаяСтрока);
	СтруктураПараметров.Вставить("ВидАдреса",   ПредопределенноеЗначение("Перечисление.КВП_ВидыАдресов.Прибытие"));
	
	ОткрытьФорму("Отчет.УПЖКХ_ПечатьАдресныхЛистков.Форма.Форма", СтруктураПараметров);
	
	// !!! Проверить открытие формы.
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СформироватьАдресныйЛистокУбытия".
Процедура СформироватьАдресныйЛистокУбытия(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Проживающий", ТекущаяСтрока);
	СтруктураПараметров.Вставить("ВидАдреса",   ПредопределенноеЗначение("Перечисление.КВП_ВидыАдресов.Выбытие"));
	
	ОткрытьФорму("Отчет.УПЖКХ_ПечатьАдресныхЛистков.Форма.Форма", СтруктураПараметров);
	
	// !!! Проверить открытие формы.
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Оповещение_ОбновитьСписокЖильцов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

#КонецОбласти
