
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Показывает или прячет панель основного изображения в зависимости от пометки кнопки изображения.
Процедура ПоказатьСпрятатьПанельОсновногоИзображения()
	
	Элементы.ГруппаКартинка.Видимость = Элементы.КнопкаИзображение.Пометка;
	
КонецПроцедуры // ПоказатьСпрятатьПанельОсновногоИзображения()

&НаСервереБезКонтекста
// Функция возвращает список телефонов физ. лица.
Функция ПолучитьСписокТелефоновФизЛица(ФизЛицо)
	
	СписокТелефонов = "";
	
	ТаблицаТелефонов = Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ФизЛицо);
	
	Если Не ТаблицаТелефонов.Количество() = 0 Тогда
		СписокТелефонов = ТаблицаТелефонов[0].СписокТелефонов;
	КонецЕсли;
	
	Возврат СписокТелефонов;
	
КонецФункции

&НаСервереБезКонтекста
// Процедура записывает настройки пользователя.
Процедура СохранитьНастройкиНаСервере(ОтображатьИзображение)
	
	ХранилищеОбщихНастроек.Сохранить("Справочники.УПЖКХ_Жильцы.ФормаЭлемента.Изображение", , ОтображатьИзображение);
	
КонецПроцедуры

&НаСервере
// Процедура обрабатывает изменение ЭУ физлицо
Процедура ОбработатьИзменениеФизлица()

	Если Объект.Физлицо.Пустая() Тогда
		Объект.ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ЗначениеВДанныеФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(), ФизлицоОбъект);
	Иначе
		ЗначениеВДанныеФормы(Объект.Физлицо.ПолучитьОбъект(), ФизлицоОбъект);
	КонецЕсли;
	
	Объект.Наименование = ФизлицоОбъект.Наименование;
	
КонецПроцедуры // ОбработатьИзменениеФизлица()

&НаСервере
// Заполняет форму данными из регистра сведений "ДокументыФизическихЛиц".
Процедура ЗаполнитьДаннымиДокументаИзРегистра()
	
	ВидДокумента        = Неопределено;
	СерияДокумента      = "";
	ДатаВыдачиДокумента = "";
	НомерДокумента      = "";
	КемВыданДокумент    = "";
	КодПодразделения    = "";
	ДатаИзмененияДанных = Дата('00010101');
	
	ЗапросДанныхОДокументах = Новый Запрос;
	
	// Запрос получения паспортных данных аналогично типовому в Физических лицах.
	ЗапросДанныхОДокументах.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.Физлицо КАК Физлицо,
	|	РегистрСведений.ВидДокумента КАК ВидДокумента,
	|	РегистрСведений.Серия КАК Серия,
	|	РегистрСведений.ДатаВыдачи КАК ДатаВыдачи,
	|	РегистрСведений.Номер КАК Номер,
	|	РегистрСведений.КемВыдан КАК КемВыдан,
	|	РегистрСведений.КодПодразделения КАК КодПодразделения
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Физлицо = &ТекущееФизлицо
	|	И РегистрСведений.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведений.Период УБЫВ";
	
	ЗапросДанныхОДокументах.УстановитьПараметр("ТекущееФизлицо", Объект.ФизЛицо);
	
	РезультатЗапроса  = ЗапросДанныхОДокументах.Выполнить();
	ВыборкаРезультата = РезультатЗапроса.Выбрать();
	Если ВыборкаРезультата.Следующий() Тогда
		ВидДокумента        = ВыборкаРезультата.ВидДокумента;
		СерияДокумента      = ВыборкаРезультата.Серия;
		ДатаВыдачиДокумента = ВыборкаРезультата.ДатаВыдачи;
		НомерДокумента      = ВыборкаРезультата.Номер;
		КемВыданДокумент    = ВыборкаРезультата.КемВыдан;
		КодПодразделения    = ВыборкаРезультата.КодПодразделения;
		ДатаИзмененияДанных = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет форму данными из регистра сведений "УПЖКХ_СтепеньРодстваФизЛиц".
Процедура ЗаполнитьРодственнуюСвязь()
	
	ТекВладелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект.Владелец);
	Если ТипЗнч(ТекВладелец) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		Если Объект.ФизЛицо = ТекВладелец.ФизЛицо Тогда
			ТипРодственнойСвязи = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника();
		Иначе
			ТипРодственнойСвязи = ПолучитьСтепеньРодстваДляФизЛица(Объект.ФизЛицо, ТекВладелец.ФизЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТипРодственнойСвязи) Тогда
		ТипРодственнойСвязи = "<Не определен>";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет форму данными из регистра сведений "УПЖКХ_СведенияОПроживающих" и "УПЖКХ_СведенияОЗарегистрированных".
Процедура ЗаполнитьДаннымиПроживающихИзРегистра()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СведенияОЖильцахСрезПоследних.Объект,
	|	КВП_СведенияОЖильцахСрезПоследних.ВладелецЕдинственногоЖилья,
	|	КВП_СведенияОЖильцахСрезПоследних.ДополнительнаяПлощадь,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель
	|ИЗ
	|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(&Дата, Объект = &Объект) КАК КВП_СведенияОЖильцахСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Собственник = &ФизЛицо) 
	|			КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект.ФизЛицо = УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_СведенияОЖильцахСрезПоследних.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дата",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);
	Запрос.УстановитьПараметр("Объект",  Объект.Ссылка);
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(, Жилец = &Объект И ДатаИзменения <= &Дата) 
	|		КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(, 
	|																					Жилец = &Объект И ДатаИзменения <= &Дата) 
	|			КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|
	|УПОРЯДОЧИТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ДатаИзменения УБЫВ,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения УБЫВ";
	
	Запрос.УстановитьПараметр("Дата", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультата.Следующий() Тогда
		
		Собственник                     = ВыборкаРезультата.Действует;
		ВладелецЕдинственногоЖилья      = ВыборкаРезультата.ВладелецЕдинственногоЖилья;
		ДополнительнаяПлощадь           = ВыборкаРезультата.ДополнительнаяПлощадь;
		ДоляСобственности               = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
											ВыборкаРезультата.ДоляСобственникаЧислитель,
											ВыборкаРезультата.ДоляСобственникаЗнаменатель);
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		Проживает                       = Выборка.Проживает;
		Зарегистрирован                 = Выборка.Зарегистрирован;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает ключ записи воинского учета.
Функция ПолучитьКлючЗаписиВоинскогоУчета(ФизЛицо, Период)
	
	Возврат РегистрыСведений.УПЖКХ_ВоинскийУчет.СоздатьКлючЗаписи(Новый Структура("ФизическоеЛицо, Период", ФизЛицо, Период));
	
КонецФункции

&НаСервере
// Процедура считывает место рождения физлица
//
Процедура ПрочитатьМестоРождения(МестоРожденияЗначение = Неопределено)
	
	Если МестоРожденияЗначение = Неопределено Тогда
		МестоРожденияЗначение = ФизлицоОбъект.МестоРождения;
	КонецЕсли;
	
	МестоРожденияФизЛица = УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеМестаРождения(МестоРожденияЗначение);
	Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) тогда
		МестоРожденияФизЛица = "Ввести место рождения";
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьМестоРождения

&НаСервереБезКонтекста
// Получает двоичные данные присоединненого файла.
//
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции // ПолучитьДанныеФайла()

&НаСервереБезКонтекста
// Получает ссылку на картинку из физ.лица.
//
Функция ПолучитьНавигационнуюСсылкуКартинки(ФайлКартинки, ИдентификаторФормы)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции // ПолучитьНавигационнуюСсылкуКартинки()

///////////////////////////////////////////
// Работа с близкими родственниками

&НаСервере
// Процедура заполняет таблицу близких родственников.
Процедура ПолучитьБлизкихРодственников(ТолькоБлизкиеРодственники = Ложь)
	
	// Очищаем таблицу близких родственников для перезаполнения.
	БлизкиеРодственники.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК ФизическоеЛицоСвязанное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Период, ФизическоеЛицоОсновное = &ФизическоеЛицоОсновное) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|ГДЕ
	|	&ТекстУсловияБлизкоеРодство";
	
	Запрос.УстановитьПараметр("Период",                 КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
	Запрос.УстановитьПараметр("ФизическоеЛицоОсновное", Объект.ФизЛицо);
	
	// Отбор родственников в зависимости от отбора.
	ТекстУсловияБлизкоеРодство = "ИСТИНА";
	Если ТолькоБлизкиеРодственники Тогда
		ТекстУсловияБлизкоеРодство = "СтепеньРодства.БлизкоеРодство";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияБлизкоеРодство", ТекстУсловияБлизкоеРодство);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = БлизкиеРодственники.Добавить();
		НоваяСтрока.Родственник    = Выборка.ФизическоеЛицоСвязанное;
		НоваяСтрока.СтепеньРодства = Выборка.СтепеньРодства;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	РазместитьКонтактнуюИнформацию();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Объект.ФизЛицо.Пустая() Тогда
		// Если в форму передали физлицо, то обновляем номер телефона.
		ЗначениеВРеквизитФормы(Объект.Физлицо.ПолучитьОбъект(), "ФизЛицоОбъект");
		Телефон = ПолучитьСписокТелефоновФизЛица(Объект.Физлицо);
		Элементы.Телефон.Видимость = Не ПустаяСтрока(Телефон);
	Иначе
		ЗначениеВРеквизитФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(), "ФизЛицоОбъект");
		Элементы.Телефон.Видимость = Ложь;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства".
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Получим представление строки о месте рождения.
	ПрочитатьМестоРождения();
	
	// Получим представление строки о воинском учете
	ВоинскийУчет = УПЖКХ_УчетЖильцов.ПолучитьПредставлениеДанныхВоинскогоУчетаФизическогоЛица(Объект.ФизЛицо);
	
	// Установка значения реквизита АдресКартинки.
	Если Не ФизЛицоОбъект.Ссылка.Пустая() И Не ФизЛицоОбъект.ОсновноеИзображение.Пустая() Тогда
		АдресКартинки = ПолучитьКартинку(ФизЛицоОбъект.ОсновноеИзображение, УникальныйИдентификатор);
		Элементы.ОчиститьКартинку.Видимость = Истина;
	Иначе
		АдресКартинки = "";
		Элементы.ОчиститьКартинку.Видимость = Ложь;
	Конецесли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ЗаполнитьДаннымиДокументаИзРегистра();
		ЗаполнитьДаннымиПроживающихИзРегистра();
		ЗаполнитьРодственнуюСвязь();
	КонецЕсли;
	
	ПоказыватьКартинку = ХранилищеОбщихНастроек.Загрузить("Справочники.УПЖКХ_Жильцы.ФормаЭлемента.Изображение");
	
	// Если сохраненного значения нет - режим показа картинки оставим по умолчанию.
	Если ПоказыватьКартинку <> Неопределено Тогда
		Элементы.КнопкаИзображение.Пометка = ПоказыватьКартинку;
	КонецЕсли;
	
	ПолучитьБлизкихРодственников();
	
	Если Параметры.Ключ.Пустая() Тогда
		РазместитьКонтактнуюИнформацию();
	КонецЕсли;

	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ПоказатьСпрятатьПанельОсновногоИзображения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму"
	 И ТипЗнч(Источник) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		Если ИмяОбновляемогоЭлемента = "ВоинскийУчет" Тогда
			ВоинскийУчет = УПЖКХ_УчетЖильцов.ПолучитьПредставлениеДанныхВоинскогоУчетаФизическогоЛица(Объект.ФизЛицо);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" Тогда
		
		// Обновляем картинку на первой странице.
		Если Не ФизЛицоОбъект.ОсновноеИзображение.Пустая() Тогда
			АдресКартинки = ПолучитьНавигационнуюСсылкуКартинки(ФизЛицоОбъект.ОсновноеИзображение, УникальныйИдентификатор);
		Иначе
			АдресКартинки = "";
		Конецесли;
		
		Если Источник = ФизлицоОбъект.Ссылка Тогда
			ЗаполнитьДаннымиДокументаИзРегистра();
			Объект.Наименование = ФизлицоОбъект.Наименование;
			Телефон = ПолучитьСписокТелефоновФизЛица(Объект.Физлицо);
			Элементы.Телефон.Видимость = Не ПустаяСтрока(Телефон);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ВладелецФайла")
			И Параметр.ВладелецФайла = Объект.Ссылка И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
			
			ФайлКартинки = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			АдресКартинки = ПолучитьКартинку(ФайлКартинки, УникальныйИдентификатор);
			
			Если ЗаписатьФайлКартинкиВФизЛицо(Объект.ФизЛицо, ФайлКартинки) Тогда
				Записать();
				Элементы.ОчиститьКартинку.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает навигационую ссылку файла
//
Функция ПолучитьКартинку(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции // ПолучитьТекущуюВерсиюКАртинки()

&НаСервереБезКонтекста
// Записывает ссылку на присоединенный файл (в случае очистки - пустую) в связанное физлицо.
//
Функция ЗаписатьФайлКартинкиВФизЛицо(ФизЛицо, ФайлКартинки)
	
	ОбъектФизЛицо = ФизЛицо.ПолучитьОбъект();
	ОбъектФизЛицо.ОсновноеИзображение = ФайлКартинки;
	
	Возврат КВП_ЗаписатьОбъект(ОбъектФизЛицо);
	
КонецФункции // ЗаписатьФайлКартинкиВФизЛицо()

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Контактная информация"
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	
	// Обработчик подсистемы "Свойства"
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Периоды адресов прибытия и выбытия записываем в табличную часть.
	Для Каждого ТекСтрокаКИ Из ТекущийОбъект.КонтактнаяИнформация Цикл
		
		Если ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца Тогда
			ТекСтрокаКИ.ДействуетС = Служебный_ДатаВыбытия;
		ИначеЕсли ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца Тогда
			ТекСтрокаКИ.ДействуетС = Служебный_ДатаПрибытия;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЗаписиНаСервере" формы.
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Запись не нового Проживающего, проверим необходимось записи физлица.
	Если Не Объект.Ссылка.Пустая() И Модифицированность Тогда
		
		ОбъектФизлица = ДанныеФормыВЗначение(ФизлицоОбъект, Тип("СправочникОбъект.ФизическиеЛица"));
		
		Попытка
			ОбъектФизлица.Заблокировать();
		Исключение
			ТекстСообщения = "Физическое лицо: " + ОбъектФизлица + " - объект заблокирован." 
				+ Символы.ПС + "Элемент не записан!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ);
			Возврат;
		КонецПопытки;
		
		КВП_ЗаписатьОбъект(ОбъектФизлица);
		
		ЗначениеВДанныеФормы(ОбъектФизлица, ФизлицоОбъект);
		
		УПЖКХ_УчетЖильцов.ПроверитьДублиФизлиц(ОбъектФизлица.Ссылка, ,
										 ОбъектФизлица.ИНН,
										 ОбъектФизлица.СтраховойНомерПФР,
										 Объект.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере(Элементы.КнопкаИзображение.Пометка);
	
КонецПроцедуры

&НаСервере
// Обработчик проверки заполнения формы на сервере.
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "Нажатие" поля "АдресКартинки".
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(АдресКартинки) Тогда
		
		ФайлКартинки = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФизЛицо, "ОсновноеИзображение");
		
		Если ЗначениеЗаполнено(ФайлКартинки) Тогда
			ДанныеФайла = ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
		КонецЕсли;
		
	Иначе
		
		Если Объект.Ссылка.Пустая() Тогда
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
			+ "|Все файлы(*.*)|*.*"
			+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
			+ "|Формат GIF(*.gif*)|*.gif"
			+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
			+ "|Формат PNG(*.png*)|*.png"
			+ "|Формат TIFF(*.tif)|*.tif"
			+ "|Формат icon(*.ico)|*.ico"
			+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, УникальныйИдентификатор, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода ФизЛицо.
Процедура ФизЛицоПриИзменении(Элемент)
	
	ОбработатьИзменениеФизлица();
	Оповестить("ИзменениеДанныхФизическогоЛица", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события НачалоВыбора элемента ВоинскийУчет.
//
Процедура ВоинскийУчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВоинскогоУчетаФизЛица = УПЖКХ_УчетЖильцов.ПолучитьДанныеВоинскогоУчетаФизическогоЛица(Объект.ФизЛицо);
	
	КлючЗаписи      = Неопределено;
	ПараметрФизЛицо = Неопределено;
	Если Не ДанныеВоинскогоУчетаФизЛица = Неопределено Тогда
		КлючЗаписи = ПолучитьКлючЗаписиВоинскогоУчета(Объект.ФизЛицо, ДанныеВоинскогоУчетаФизЛица.Период);
	Иначе
		ПараметрФизЛицо = Объект.ФизЛицо;
	КонецЕсли;
	
	ФормаДанных = ПолучитьФорму("РегистрСведений.УПЖКХ_ВоинскийУчет.ФормаЗаписи",
								Новый Структура("Ключ, ФизическоеЛицо, ОткрытаИзФормыЖильца", КлючЗаписи, ПараметрФизЛицо, Истина));
	
	ФормаДанных.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" элемента МестоРождения.
//
Процедура МестоРожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ФизическиеЛицаМестоРожденияНачалоВыбораЗавершение", ЭтотОбъект);
	УПЖКХ_ТиповыеМетодыКлиент.ФизическиеЛицаМестоРожденияНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, ФизлицоОбъект.МестоРождения, Оповещение);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора места рождения физ. лица.
//
Процедура ФизическиеЛицаМестоРожденияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> Неопределено Тогда
		
		ФизЛицоОбъект.МестоРождения = Результат;
		ПрочитатьМестоРождения(Результат);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка близких родственников.
Процедура БлизкиеРодственникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" списка близких родственников.
Процедура БлизкиеРодственникиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки "Телефон".
Процедура ТелефонНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия    = Новый Структура("Ключ", ФизЛицоОбъект.Ссылка);
	
	ФормаФизЛица = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма, Истина);
	ФормаФизЛица.ТекущийЭлемент = ФормаФизЛица.Элементы.ГруппаКонтактнаяИнформация;
	ФормаФизЛица.Открыть();
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиСобытийКомандФормы

&НаКлиенте
// Обработчик команды "ПоказатьИзображение".
Процедура ПоказатьИзображение(Команда)
	
	Элементы.КнопкаИзображение.Пометка = Не Элементы.КнопкаИзображение.Пометка;
	
	ПоказатьСпрятатьПанельОсновногоИзображения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПоказатьИзображение".
Процедура ПрисоединенныеФайлы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Объект.ФизЛицо);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтаФорма,
	             Объект.Ссылка,
	             ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
// Вызывается при нажатии по кнопке "История" на закладке "Основные сведения".
// Открывает историю изменений реквизита "Проживает".
//
Процедура ИсторияПроживает(Команда)
	
	// Если элемент не записан, предлагается запись.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Перед просмотром сведений о проживающем необходимо записать элемент. Записать?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаИсторияПроживает", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;
	
	// Открытие регистра с отбором по текущему проживающему.
	ИсторияПроживаетПродолжение();
	
КонецПроцедуры // ИсторияПроживает()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызваннго в процедуре "ИсторияПроживает()".
//
Процедура ОбработатьРезультатВопросаИсторияПроживает(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать();
	
	ИсторияПроживаетПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаИсторияПроживает()

&НаКлиенте
// Открывает форму списка РС "УПЖКХ_СведенияОПроживающих".
Процедура ИсторияПроживаетПродолжение()
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.УПЖКХ_СведенияОПроживающих.ФормаСписка", Новый Структура("Жилец", Объект.Ссылка));
	ФормаСписка.Открыть();
	
КонецПроцедуры // ИсторияПроживаетПродолжение()

&НаКлиенте
// Вызывается при нажатии по кнопке "История" на закладке "Основные сведения".
// Открывает историю изменений реквизита "Зарегистрирован".
//
Процедура ИсторияЗарегистрирован(Команда)
	
	// Если элемент не записан, предлагается запись.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Перед просмотром сведений о проживающем необходимо записать элемент. Записать?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаИсторияЗарегистрирован", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;
	
	// Открытие регистра с отбором по текущему проживающему.
	ИсторияЗарегистрированПродолжение();
	
КонецПроцедуры // ИсторияЗарегистрирован()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ИсторияЗарегистрирован()".
Процедура ОбработатьРезультатВопросаИсторияЗарегистрирован(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать();
	
	ИсторияЗарегистрированПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаИсторияЗарегистрирован()

&НаКлиенте
// ОТкрывает форму списка РС "УПЖКХ_СведенияОЗарегистрированных".
Процедура ИсторияЗарегистрированПродолжение()
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.ФормаСписка", Новый Структура("Жилец", Объект.Ссылка));
	ФормаСписка.Открыть();

КонецПроцедуры // ИсторияЗарегистрированПродолжение()

&НаКлиенте
// Вызывается при нажатии по кнопке "История" на закладке "Основные сведения".
Процедура ИсторияДоляСобственности(Команда)
	
	// Если элемент не записан, предлагается запись.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Перед просмотром сведений о проживающем необходимо записать элемент. Записать?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатЗапросаИсторияДоляСобственности", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;
	
	// Открытие регистра с отбором по текущему проживающему.
	ИсторияДоляСобственностиПродолжение();
	
КонецПроцедуры // ИсторияДоляСобственности()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ИсторияДоляСобственности()".
Процедура ОбработатьРезультатЗапросаИсторияДоляСобственности(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать();
	
	ИсторияДоляСобственностиПродолжение();
	
КонецПроцедуры // ОбработатьРезультатЗапросаИсторияДоляСобственности()

&НаКлиенте
// Открывает форму списка РС "УПЖКХ_СобственникиПомещений".
Процедура ИсторияДоляСобственностиПродолжение()
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.УПЖКХ_СобственникиПомещений.ФормаСписка", Новый Структура("Собственник", Объект.ФизЛицо));
	ФормаСписка.Открыть();
	
КонецПроцедуры // ИсторияДоляСобственностиПродолжение()

&НаКлиенте
// Вызывается при нажатии по кнопке "Изменить" на закладке "Основные документы".
Процедура ИсторияОсновногоДокумента(Команда)
	
	// Если элемент не записан, предлагается запись.
	Если Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Перед просмотром данных о документе необходимо записать элемент. Записать?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаИсторияОсновногоДокумента", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;

	// Открытие регистра с отбором по текущему физлицу.
	ИсторияОсновногоДокументаПродолжение();
	
КонецПроцедуры // ИсторияОсновногоДокумента()

&НаКлиенте
// Процедура-обработчиик результата вопроса, вызванного в процедуре "ИсторияОсновногоДокумента()".
Процедура ОбработатьРезультатВопросаИсторияОсновногоДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать();
	
	ИсторияОсновногоДокументаПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаИсторияОсновногоДокумента()

&НаКлиенте
// Открывает форму списка РС "ДокументыФизическихЛиц".
Процедура ИсторияОсновногоДокументаПродолжение()
	
	ФормаСписка = ПолучитьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица", Новый Структура("Отбор", Новый Структура("ФизЛицо", Объект.ФизЛицо)));
	ФормаСписка.Открыть();
	
КонецПроцедуры // ИсторияОсновногоДокументаПродолжение()

&НаКлиенте
// Обработчик команды "СформироватьАдресныйЛистокПрибытия".
Процедура СформироватьАдресныйЛистокПрибытия(Команда)
	
	Если ПустаяСтрока(КонтактнаяИнформацияПолеУПЖКХ_АдресПрибытияЖильца)
		ИЛИ КонтактнаяИнформацияПолеУПЖКХ_АдресПрибытияЖильца = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен адрес прибытия жильца.");
	Иначе
		СформироватьАдресныйЛисток(ПредопределенноеЗначение("Перечисление.КВП_ВидыАдресов.Прибытие"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СформироватьАдресныйЛистокУбытия".
Процедура СформироватьАдресныйЛистокУбытия(Команда)
	
	Если ПустаяСтрока(КонтактнаяИнформацияПолеУПЖКХ_АдресВыбытияЖильца)
		ИЛИ КонтактнаяИнформацияПолеУПЖКХ_АдресВыбытияЖильца = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен адрес выбытия жильца.");
	Иначе
		СформироватьАдресныйЛисток(ПредопределенноеЗначение("Перечисление.КВП_ВидыАдресов.Выбытие"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура задает вопрос о сохранении элемента в случае модифицированности, иначе передает управление
// на процедуру, непосредственно открывающую форму печати.
//
Процедура СформироватьАдресныйЛисток(ВидАдресаПечати)
	
	Если ЭтотОбъект.Модифицированность Или Объект.Ссылка.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("ВидАдресаПечати", ВидАдресаПечати);
		ОписаниеОповещения      = Новый ОписаниеОповещения("ОбработатьОтветПользователя", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса            = "Перед печатью адресного листка необходимо записать элемент.
								  |Записать?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПечатиАдресныхЛистков(ВидАдресаПечати);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик событий после ответа пользователем на вопрос, вызванный
// из процедуры "СформироватьАдресныйЛисток()".
// При положительном результате вопроса процедура записывает элемент справочника.
//
// Параметры:
//  РезультатВопроса		 - 	КодВозвратаДиалога - результат ответа пользователя.
//  ДополнительныеПараметры	 - 	Структура - дополнительные данные.
//
Процедура ОбработатьОтветПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	ОткрытьФормуПечатиАдресныхЛистков(ДополнительныеПараметры.ВидАдресаПечати);
	
КонецПроцедуры // ОбработатьОтветПользователя()

&НаКлиенте
// Открывает форму печати адресных листков.
//
Процедура ОткрытьФормуПечатиАдресныхЛистков(ВидАдреса)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Проживающий", Объект.Ссылка);
	СтруктураПараметров.Вставить("ВидАдреса",   ВидАдреса);
	
	ОткрытьФорму("Отчет.УПЖКХ_ПечатьАдресныхЛистков.Форма.Форма", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СформироватьАдресныйЛистокУбытия".
Процедура ОтобратьБлизкиеРодственники(Команда)
	
	Элементы.БлизкиеРодственникиОтобратьБлизкиеРодственники.Пометка = 
		НЕ Элементы.БлизкиеРодственникиОтобратьБлизкиеРодственники.Пометка;
	
	Если Элементы.БлизкиеРодственникиОтобратьБлизкиеРодственники.Пометка Тогда
		ПолучитьБлизкихРодственников(Истина);
	Иначе
		ПолучитьБлизкихРодственников();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОчиститьКартинку".
Процедура ОчиститьКартинку(Команда)
	
	АдресКартинки = Неопределено;
	Если ЗаписатьФайлКартинкиВФизЛицо(Объект.ФизЛицо, ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка")) Тогда
		Записать();
		Элементы.ОчиститьКартинку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ПроцедурыПодсистемыКонтактнаяИнформация

&НаКлиенте
// Обработчик события ПриИзменении поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события НачалоВыбора поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Очистка поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияОчистка(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
//
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияВыполнитьКоманду(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные контактной информации.
//
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

&НаСервере
// Размещает на форме элементы управления контактной информации.
//
Процедура РазместитьКонтактнуюИнформацию()
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВидыКИ = Новый Массив;
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца);
	ИсключаемыеВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца);
	
	ПараметрыРазмещенияКонтактнойИнформации = УПЖКХ_ТиповыеМетодыСервер.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВидыКИ;
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Также заполним служебные данные по адресам прибытия и выбытия.
	Для Каждого ТекСтрокаКИ Из Объект.КонтактнаяИнформация Цикл
		
		Если ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца Тогда
			Служебный_ДатаВыбытия = ТекСтрокаКИ.ДействуетС;
		ИначеЕсли ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца Тогда
			Служебный_ДатаПрибытия = ТекСтрокаКИ.ДействуетС;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РазместитьКонтактнуюИнформацию()

#КонецОбласти

