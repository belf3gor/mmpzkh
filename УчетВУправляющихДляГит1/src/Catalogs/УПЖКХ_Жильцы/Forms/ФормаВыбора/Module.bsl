
///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////
// Вывод степени родства пришлось реализовать в отдельном поле,
// так как нет метода "При выводе строки" списка и нельзя использовать
// временные таблицы в запросе динам. списка. Если использовать 
// вложенные запросы, то выполнение будет крайне неоптимальным.

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура обновляет степень родства физ. лица.
Процедура ОбновитьСтепеньРодстваНаСервере(Проживающий)
	
	ТекВладелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Проживающий.Владелец);
	Если ТипЗнч(ТекВладелец) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		Если Проживающий.ФизЛицо = ТекВладелец.ФизЛицо Тогда
			ТипРодственнойСвязи = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника();
		Иначе
			ТипРодственнойСвязи = ПолучитьСтепеньРодстваДляФизЛица(Проживающий.ФизЛицо, ТекВладелец.ФизЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТипРодственнойСвязи) Тогда
		ТипРодственнойСвязи = "<Не определен>";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет степень родства физ. лица.
Процедура ОбновитьСтепеньРодства()
	
	Проживающий = Элементы.Список.ТекущаяСтрока;
	
	Если Не Проживающий = Неопределено Тогда
		ОбновитьСтепеньРодстваНаСервере(Проживающий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает структуру параметров на сервере.
Функция ПодготовитьСтруктуруПараметровНаСервере(Владелец, ФизЛицо, Копирование)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим",             "Создание");
	СтруктураПараметров.Вставить("Пол",               "");
	СтруктураПараметров.Вставить("ФИО",               "");
	СтруктураПараметров.Вставить("ЛицевойСчет",       Владелец);
	СтруктураПараметров.Вставить("ДатаРождения",      "");
	СтруктураПараметров.Вставить("ИНН",               "");
	СтруктураПараметров.Вставить("СтраховойНомерПФР", "");
	СтруктураПараметров.Вставить("ФизЛицо",           "");
	
	Если Копирование Тогда
		СтруктураПараметров.Вставить("ФИО", ФизЛицо.Наименование);
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ФизЛицо);
		СтруктураПараметров.ФизЛицо = ФизЛицо;
	КонецЕсли;
	
	Возврат Новый Структура("ДанныеОЖильце", СтруктураПараметров);
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Список".
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСтепеньРодства", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка.
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Группа Тогда
		
		Отказ = Истина;
		
		Если Не Элементы.Список.ТекущиеДанные = Неопределено Тогда
			Владелец = Элементы.Список.ТекущиеДанные.Владелец;
			ФизЛицо  = Элементы.Список.ТекущиеДанные.ФизЛицо;
		Иначе
			Владелец = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
			ФизЛицо  = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		КонецЕсли;
		
		СтруктураПараметров = ПодготовитьСтруктуруПараметровНаСервере(Владелец, ФизЛицо, Копирование);
		
		// Если источник выбора жильца требует не вводить изменение л/с в помощнике
		// создания жильца, то передадим помощнику соответствующий параметр.
		СтруктураПараметров.Вставить("НеВводитьИзменениеЛСПриСозданииЖильца", НеВводитьИзменениеЛСПриСозданииЖильца);
		
		// Открываем форму помощника для создания нового жильца.
		ОткрытьФорму("Обработка.КВП_ПомощникСозданияПроживающего.Форма.ПомощникВводаЖильца", СтруктураПараметров, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаЗаписиНового" поля "Список".
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОповеститьОВыборе(НовыйОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если в параметрах получен лицевой счет, то установим отбор жильцов по нему.
	Если Параметры.Свойство("ЛицевойСчет") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Владелец",
																Параметры.ЛицевойСчет, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	КонецЕсли;
	
	// Если источник выбора жильца требует не вводить изменение л/с в помощнике
	// создания жильца, то передадим помощнику соответствующий параметр.
	Параметры.Свойство("НеВводитьИзменениеЛСПриСозданииЖильца", НеВводитьИзменениеЛСПриСозданииЖильца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Оповещение_ОбновитьСписокЖильцов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
