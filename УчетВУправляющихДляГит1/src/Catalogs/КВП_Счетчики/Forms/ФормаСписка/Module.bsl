
#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДатаАктуальностиСведений", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
	ГрафикТабличныйДокумент.ФиксацияСверху = 1;
	Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ПриСозданииНаСервере("КВП_Счетчики", ВыводитьГрафики);
	
	Если Параметры.Свойство("Объект") Тогда
		Объект = Параметры.Объект;
	КонецЕсли;
	
	Если Параметры.Свойство("Услуга") Тогда
		Услуга = Параметры.Услуга;
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаАктуальности") Тогда
		ДатаАктуальности = Параметры.ДатаАктуальности;
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	График_УстановитьВидимостьТабличногоДокументаСГрафиками();
	
	Если Не Элементы.Список.ТекущиеДанные = Неопределено
		И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Элементы.Список.ТекущаяСтрока, "ЭтоГруппа")
		И ВыводитьГрафики Тогда
		ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоСчетчикам", 0.2, Истина);
	КонецЕсли;
	
	НастроитьОтборВСпискеСчетчиков();
	УстановитьПараметрыИОтборыСпискаИсторииПоказанийТекущегоСчетчика();
	УстановитьПараметрыИОтборыСпискаСчетчиков();
	
	// В случе, если форма вызвана из сторонней формы, то есть передан параметр "Объект"
	// устанавливает режим отображения списка - "Список"
	Если ЗначениеЗаполнено(Объект) Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
// Процедура открывает помощник установки приборов учета.
//
Процедура ДействияФормыДействиеПомощник(Команда)
	
	Счетчик = Элементы.Список.ТекущаяСтрока;
	
	ПараметрыОткрытия = Новый Структура;
	Если Не Счетчик = Неопределено И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Счетчик, "ЭтоГруппа") Тогда
		ПараметрыОткрытия.Вставить("ГруппаСчетчиков", Счетчик);
	Иначе
		ПараметрыОткрытия.Вставить("ГруппаСчетчиков", ПредопределенноеЗначение("Справочник.КВП_Счетчики.ПустаяСсылка"));
	КонецЕсли;
	
	ОткрытьФорму("Обработка.УПЖКХ_ПомощникУстановкиПриборовУчета.Форма.ПомощникУстановкиПриборовУчета", ПараметрыОткрытия);
	
КонецПроцедуры // ДействияФормыДействиеПомощник()

&НаКлиенте
// Обработчик команды "ПоказатьСкрытьОтключенныеСчетчики".
//
Процедура ПоказатьСкрытьОтключенныеСчетчики(Команда)
	
	ПоказатьОтключенныеСчетчики = Не ПоказатьОтключенныеСчетчики;
	НастроитьОтборВСпискеСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьНастройкиГрафиков".
//
Процедура Графики_ОткрытьНастройкиГрафиков(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Форма.ФормаНастройкиГрафиков",
					Новый Структура("ИмяОбъекта, ВидГрафика", "КВП_Счетчики", "Счетчики"), ЭтаФорма,,,,
					ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Графики_ОткрытьНастройкиГрафиков()
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" списка счетчиков.
//
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("СписокСчетчиковПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" элемента "Услуга"
Процедура УслугаПриИзменении(Элемент)
	
	УстановитьПараметрыИОтборыСпискаСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" элемента "Объект"
Процедура ОбъектПриИзменении(Элемент)
	
	УстановитьПараметрыИОтборыСпискаСчетчиков();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" элемента "ДатаАктуальности"
Процедура ДатаАктуальностиПриИзменении(Элемент)
	
	УстановитьПараметрыИОтборыСпискаИсторииПоказанийТекущегоСчетчика();
	УстановитьПараметрыИОтборыСпискаСчетчиков();
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура обрабатывает событие активизации строки списка счетчиков.
//
Процедура СписокСчетчиковПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если ВыводитьГрафики Тогда
			Графики_ОбновитьГрафикиПоСчетчикам();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыИОтборыСпискаИсторииПоказанийТекущегоСчетчика();
	
КонецПроцедуры // СписокСчетчиковПриАктивизацииСтроки()

&НаКлиенте
// Включает/отключет отбор по недействующим счетчикам в списке счетчиков.
//
Процедура НастроитьОтборВСпискеСчетчиков()
	
	Элементы.Действует.Видимость                             = ПоказатьОтключенныеСчетчики;
	Элементы.СписокПоказатьСкрытьОтключенныеСчетчики.Пометка = ПоказатьОтключенныеСчетчики;
	
	Если ПоказатьОтключенныеСчетчики Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Действует", Истина, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		Элементы.СписокПоказатьСкрытьОтключенныеСчетчики.Заголовок = "Скрыть отключенные счетчики";
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Действует", Истина, Истина, ВидСравненияКомпоновкиДанных.Равно);
		Элементы.СписокПоказатьСкрытьОтключенныеСчетчики.Заголовок = "Показать отключенные счетчики";
	КонецЕсли;
	
КонецПроцедуры // НастроитьОтборВСпискеСчетчиков()

&НаКлиенте
// Устанавливает параметры "Счетчик" и "ДатаАктуальности" динамического списка "СписокРасшифровкиТекущихПоказаний"
// по текущему элементу динамического списка "Список"
//
// Параметры:
//  ТекущиеДанные - Активная строка динамического списка "Список"
//
Процедура УстановитьПараметрыИОтборыСпискаИсторииПоказанийТекущегоСчетчика()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	// Устанавливем параметр "Счетчик"
	ТекущийСчетчик = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ТекущийСчетчик = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ИсторияПоказанийТекущегоСчетчика, "Счетчик", ТекущийСчетчик);
	
	// Устанавливаем значение параметра "ДатаАктуальности". Если поле Формы "ДатаАктуальности заполнено - берем его значение, если нет, то текущую рабочую дату
	ДатаАктуальностиСведений = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ДатаАктуальностиСведений = ДатаАктуальности;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ИсторияПоказанийТекущегоСчетчика, "ДатаАктуальности", ДатаАктуальностиСведений);
	
	// Получаем последние показания счетчика и передаем регистратор последних показаний в качестве параметра "Регистратор"
	// динамического списка "СписокРасшифровкиТекущихПоказаний"
	РегистраторПоследнихПоказаний = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		РегистраторПоследнихПоказаний = ПолучитьРегистраторПоследнихПоказанийСчетчика(ТекущийСчетчик, ДатаАктуальностиСведений)
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ИсторияПоказанийТекущегоСчетчика, "РегистраторПоследнихПоказаний", РегистраторПоследнихПоказаний);
	
КонецПроцедуры // УстановитьПараметрыИОтборыСпискаИсторииПоказанийТекущегоСчетчика()

&НаКлиенте
// Устанавливает элементы отбора "ВидУслуги" и "Ссылка" в зависимости от выбранных
// пользователем параметров для динамического списка "Список"
//
Процедура УстановитьПараметрыИОтборыСпискаСчетчиков()
	
	// Отбор по элементу "ВидУслуги", в случае, если пользователь выбирает параметр отбора "Услуга"
	ОтборПоУслуге = Ложь;
	Если ЗначениеЗаполнено(Услуга) Тогда
		ОтборПоУслуге = Истина;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "ВидУслуги", Услуга, ОтборПоУслуге, ВидСравненияКомпоновкиДанных.ВИерархии);
	
	// Устанавливаем параметр "ДатаАктуальностиСведений" динамического списка "Список",
	// если пользователь выбирает параметр отбора "ДатаАктуальностиСведений".
	ДатаАктуальностиСведений = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ДатаАктуальностиСведений = ДатаАктуальности;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДатаАктуальностиСведений", ДатаАктуальностиСведений, Истина);
	
	// Отбор по элементу "Ссылка", в случае, если пользователь выбирает параметр отбора "Объект"
	ИспользоватьОтбор        = Ложь;
	СписокСчетчиковПоОбъекту = Неопределено;
	Если ЗначениеЗаполнено(Объект) Тогда
		ИспользоватьОтбор        = Истина;
		СписокСчетчиковПоОбъекту = ПолучитьСписокУстановленныхСчетчиковПоОбъектуНаСервере(Объект, ДатаАктуальностиСведений);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Ссылка", СписокСчетчиковПоОбъекту, ИспользоватьОтбор, ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры // УстановитьПараметрыИОтборыСпискаСчетчиков()

&НаСервереБезКонтекста
// Функция возвращает список счетчиков, установленных на выбранном пользователем объекте
//
// Параметры:
//  Объект - Ссылка - Здание, Подъезд, Помещение, Лицевой счет, где установлены выгружаемые счетчики
// 
// Возвращаемое значение:
//  СписокСчетчиковПоОбъекту - СписокЗначений - содержит список ссылок на элементы
//  справочника "КВП_Счетчики", установленных на выбранном объекте
//
Функция ПолучитьСписокУстановленныхСчетчиковПоОбъектуНаСервере(Объект, Период)
	
	СписокСчетчиковПоОбъекту = ПолучитьСписокУстановленныхСчетчиков(Объект, Период, , Ложь);
	// ПолучитьСписокУстановленныхСчетчиков(Объект, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), , Ложь);
	Возврат СписокСчетчиковПоОбъекту;
	
КонецФункции // ПолучитьСписокУстановленныхСчетчиковПоОбъектуНаСервере()

&НаСервереБезКонтекста
// Функця возвращает регистратор последних показаний счетчика
//
// Параметры:
//  ДатаАктуальности  - Дата - текущая дата актуальности для динамического списка "СписокРасшифровкиТекущихПоказаний"
//  ТекущийСчетчик  - Ссылка - текущий счетчик, в активной строке списка "Список", для отображения расширнной информации
//                 в динамическом списке "СписокРасшифровкиТекущихПоказаний"
//
// Возвращаемое значение:
//   Возвращает  регистратор последних показаний счетчика
//
Функция ПолучитьРегистраторПоследнихПоказанийСчетчика(ТекущийСчетчик, ДатаАктуальности)
	
	РегистраторПоследнихПоказаний = Неопределено;
	
	ПоследниеПоказания = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьПоследниеВведенныеПоказанияСчетчика(ТекущийСчетчик, ДатаАктуальности);
	Если ПоследниеПоказания.Следующий() Тогда
		РегистраторПоследнихПоказаний = ПоследниеПоказания.Регистратор;
	КонецЕсли;
	
	Возврат РегистраторПоследнихПоказаний;
	
КонецФункции // ПолучитьРегистраторПоследнихПоказанийСчетчика()

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область РаботаСГрафиками

&НаКлиенте
// Вызывает серверный механизм формирования графиков.
Процедура Графики_ОбновитьГрафикиПоСчетчикам()
	
	Попытка
		
		ГрафикТабличныйДокумент = Новый ТабличныйДокумент;
		График_УстановитьВидимостьТабличногоДокументаСГрафиками();
		
		Графики_ОбновитьГрафикиНаСервере(Элементы.Список.ТекущаяСтрока, ВыводитьГрафики, ГрафикТабличныйДокумент);
		ГрафикТабличныйДокумент.ФиксацияСверху = 1;
		
	Исключение
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		
	КонецПопытки;
	
	ОтключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоСчетчикам");
	
КонецПроцедуры // Графики_ОбновитьГрафикиПоСчетчикам()

&НаКлиенте
// Процедура устанавливает состояние табличных документов с графиками на форме.
Процедура График_УстановитьВидимостьТабличногоДокументаСГрафиками()
	
	Элементы.ГруппаГрафикРасходПоПУ.Видимость   = ВыводитьГрафики;
	
КонецПроцедуры // Графики_УстановитьВидимостьТабличногоДокументаСГрафиками()

&НаКлиенте
// Обработчик действий после закрытия формы настроек графиков.
Процедура Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Результат.Свойство("ВыводитьГрафики", ВыводитьГрафики);
		График_УстановитьВидимостьТабличногоДокументаСГрафиками();
		
		Графики_ОбновитьГрафикиПоСчетчикам();
	КонецЕсли;
	
КонецПроцедуры // Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков()

&НаСервереБезКонтекста
// Заполняет табличный документ формы.
Процедура Графики_ОбновитьГрафикиНаСервере(Счетчик, ВыводитьГрафики, ГрафикТабличныйДокумент)
	
	Если ВыводитьГрафики Тогда
		
		// Очищаем график в форме.
		ГрафикТабличныйДокумент = Новый ТабличныйДокумент;
		
		ТекущаяРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		
		// Параметры из формы объекта для передачи в обработку формирования графиков.
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("ОбъектОтчета",                 Счетчик);
		ПараметрыОтчета.Вставить("ИмяОбластиВыводаГрафика",      "ГруппаГрафикРасходПоПУ");
		ПараметрыОтчета.Вставить("ИмяОбъекта",                   "КВП_Счетчики");
		ПараметрыОтчета.Вставить("ДатаНачала",                   НачалоДня(ТекущаяРабочаяДата));
		ПараметрыОтчета.Вставить("ДатаОкончания",                КонецДня(ТекущаяРабочаяДата));
		ПараметрыОтчета.Вставить("МесяцВзаиморасчетов",          НачалоДня(ТекущаяРабочаяДата));
		ПараметрыОтчета.Вставить("ТекущаяУслугаТаблицыГраФиков", ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка"));
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ОбновитьГрафикиНаСервере(ТабличныйДокумент, ПараметрыОтчета);
		
		ГрафикТабличныйДокумент.АвтоМасштаб         = Истина;
		ГрафикТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		ГрафикТабличныйДокумент.ИмяПараметровПечати = "КВП_Счетчики_Графики";
		
		ГрафикТабличныйДокумент.Вывести(ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры // Графики_ОбновитьГрафикиНаСервере()

#КонецОбласти // РаботаСГрафиками
