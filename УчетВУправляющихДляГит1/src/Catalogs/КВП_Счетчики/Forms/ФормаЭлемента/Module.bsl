
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Функция определяет, указан ли прибор учета в качестве уменьшаемого,
// т.е. зависит ли расход по прибору от расхода по другим приборам учета.
// Зависимость расхода приборов учета устанавливается в РС "Зависимые приборы учета".
Функция ПриборУчетаУстановленКакУменьшаемый()
	
	КоличествоЗависимостей = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриборУчета", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КВП_ЗависимыеСчетчики.ВходнойПриборУчета) КАК КоличествоЗависимостей
	|ИЗ
	|	РегистрСведений.КВП_ЗависимыеСчетчики КАК КВП_ЗависимыеСчетчики
	|ГДЕ
	|	КВП_ЗависимыеСчетчики.ВходнойПриборУчета = &ПриборУчета";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоЗависимостей = Выборка.КоличествоЗависимостей;
	КонецЕсли;
	
	Возврат КоличествоЗависимостей > 0;
	
КонецФункции // ПриборУчетаУстановленКакУменьшаемый()

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.СистемаДистанционногоСнятияПоказаний.Видимость = Объект.ИмеетсяВозможностьДистанционногоСнятияПоказаний;
	Элементы.МестоположениеДатчикаТемпературы.Видимость     = Объект.ИмеетсяДатчикТемпературы;
	Элементы.МестоположениеДатчикаДавления.Видимость        = Объект.ИмеетсяДатчикДавления;
	Элементы.ДатаВводаВЭксплуатацию.Видимость               = Объект.ДатаВводаВЭксплуатациюОтличаетсяОтДатыУстановки;
	
	ТекстПредупрежденияРедактирования = "Счетчик уже был установлен, изменение его параметров может повлиять на расчеты прошлых периодов";
	Элементы.ВидУслуги.ПредупреждениеПриРедактировании                            = ТекстПредупрежденияРедактирования;
	Элементы.Тарифность.ПредупреждениеПриРедактировании                           = ТекстПредупрежденияРедактирования;
	Элементы.СпособРегистрацииПоказаний.ПредупреждениеПриРедактировании           = ТекстПредупрежденияРедактирования;
	Элементы.Коэффициент.ПредупреждениеПриРедактировании                          = ТекстПредупрежденияРедактирования;
	Элементы.ИспользоватьТемпературныйКоэффициент.ПредупреждениеПриРедактировании = ТекстПредупрежденияРедактирования;
	Элементы.ПризнакВыходногоСчетчика.ПредупреждениеПриРедактировании             = ТекстПредупрежденияРедактирования;
	
	// Если пользователь в диалоговом окне предупреждения нажал "Да", то есть не отказался выполнить действие,
	// и по выбранному счетчику был проведены такие документы, как "Установка счетчика" или "Ввод показаний счетчика",
	// то используем свойство Не Отображать предупреждение для заданных параметров;
	// Если пользователь в диалоговом окне предупреждения нажал "Нет", то есть отказался выполнить действие,
	// то используем свойство Отображать предупреждение для каждого поля, если по выбранному счетчику был проведены такие документы,
	// как "Установка счетчика" или "Ввод показаний счетчика".
	
	Если (Форма.СчетчикБылУстановленНаОбъект Или Форма.ПоСчетчикуБылиВведеныПоказания)
		И Не Форма.ПользовательОтказалсяОтПредупрежденияПриРедактированииПараметровСчетчика Тогда
		Элементы.ВидУслуги.ОтображениеПредупрежденияПриРедактировании                            = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элементы.ВидУслуги.ОтображениеПредупрежденияПриРедактировании                            = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	Если Форма.ПоСчетчикуБылиВведеныПоказания
		И Не Форма.ПользовательОтказалсяОтПредупрежденияПриРедактированииПараметровСчетчика Тогда
		Элементы.Тарифность.ОтображениеПредупрежденияПриРедактировании                           = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.СпособРегистрацииПоказаний.ОтображениеПредупрежденияПриРедактировании           = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Коэффициент.ОтображениеПредупрежденияПриРедактировании                          = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИспользоватьТемпературныйКоэффициент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ПризнакВыходногоСчетчика.ОтображениеПредупрежденияПриРедактировании             = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элементы.Тарифность.ОтображениеПредупрежденияПриРедактировании                           = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.СпособРегистрацииПоказаний.ОтображениеПредупрежденияПриРедактировании           = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.Коэффициент.ОтображениеПредупрежденияПриРедактировании                          = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.ИспользоватьТемпературныйКоэффициент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.ПризнакВыходногоСчетчика.ОтображениеПредупрежденияПриРедактировании             = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Данным запросом получаем необходимые сведения о состоянии выбранного счетчика
Процедура ПолучитьСведенияОСостоянииСчетчика()
	
	// Из Регистра сведений КВП_ЗакрепленныеСчетчики (движение по документу Установка счетчика), 
	// Регистра накоплений УПЖКХ_РасчетПриборовУчета (движение по документу Ввод показаний счетчика)
	// получаем информацию по установленным счетчикам. Если выбранный счетчик был устанвовлен на объект,
	// то записываем результат в переменную СчетчикБылУстановленНаОбъект,  ПоСчетчикуБылиВведеныПоказания.
	// Данный запрос необходим для корректного вывода предупреждения о подтверждении действий по таким полям, как Услуга, Тарифность,
	// Способ регимтрации показаний, Коэффициент трансформации, Использовать температурный коэффициент, Используется в качестве "выходного" прибора учета.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения КАК ДатаПоверки,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Регистратор КАК Документ
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&РабочаяДата,
	|			Счетчик = &Счетчик
	|				И ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка)
	|				И ДатаИзменения >= &РабочаяДата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_ЗакрепленныеСчетчики.Счетчик КАК Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.Счетчик = &Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_РасчетПриборовУчета.Счетчик КАК Счетчик
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета КАК УПЖКХ_РасчетПриборовУчета
	|ГДЕ
	|	УПЖКХ_РасчетПриборовУчета.Счетчик = &Счетчик";
	
	Запрос.УстановитьПараметр("РабочаяДата", КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
	Запрос.УстановитьПараметр("Счетчик",     Объект.Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка           = МассивРезультатов[0].Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДатаПоверки                  = Выборка.ДатаПоверки;
		ДокументУстановкаДатыПоверки = Выборка.Документ;
		
		// Реквизит "ДатаПервойПоверки" добавлялся специально для нужд ГИС ЖКХ.
		// При этом позднее они изменили требования и теперь дата первой поверки им не нужна,
		// а нужна дата последней поверки. Поэтому реквизит пометили на удаление и скрыли.
		// Таким образом, получать из него данные не нужно.
		
	КонецЕсли;
	
	Если Не МассивРезультатов[1].Пустой() Тогда
		СчетчикБылУстановленНаОбъект = Истина;
	КонецЕсли;
	
	Если Не МассивРезультатов[2].Пустой() Тогда
		ПоСчетчикуБылиВведеныПоказания = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Запрещает вводить даты ранее 1900 года, т.к. это негативно влияет на обмен с ГИС ЖКХ.
//
Процедура ПроверитьОграничениеВводаДаты(ДатаДляПроверки, ПутьКДанным, Отказ = Неопределено)
	
	Если ЗначениеЗаполнено(ДатаДляПроверки) И ДатаДляПроверки <= Дата(1900, 01, 01) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Проверьте корректность даты.", , ПутьКДанным, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СпособРегистрацииПоказаний) Тогда 
			Объект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Коэффициент) Тогда 
			Объект.Коэффициент = 1;
		КонецЕсли;
	Иначе
		ПолучитьСведенияОСостоянииСчетчика();
	КонецЕсли;
	
	// Получим значение флага ручного формата редактирования идентификатора счетчика.
	НастройкиИД = Константы.УПЖКХ_НастройкиИдентификатораПриборовУчета.Получить();
	мСтрока = Сред(НастройкиИД, Найти(НастройкиИД, ";") + 1);
	Попытка
		ИспользоватьРучнойФорматИдентификатораСч = Булево(Лев(мСтрока, Найти(мСтрока, ";") - 1));
	Исключение
		ИспользоватьРучнойФорматИдентификатораСч = Ложь;
	КонецПопытки;
	
	УправлениеФормой(ЭтаФорма);
	
	//ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма,);
	//Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверим, зависит ли расход по текущему прибору от расхода по другим приборам учета.
	Если Объект.ПризнакВыходногоСчетчика И ПриборУчетаУстановленКакУменьшаемый() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Расход по текущему прибору учета зависит от расхода по другим 
		                                                |приборам, поэтому для него не может быть установлен признак
		                                                |""Используется в качестве ""выходного"" прибора учета""! 
		                                                |Проверьте правильность настройки в регистре сведений ""Зависимые приборы учета""." ,Отказ);
	КонецЕсли;
	
	// Проверим, корректно ли записана дата первой поверки, дата опломбирования заводом и дата ввода в эксплуатацию.
	// Нужно запретить запись элемента справочника, если эти даты указаны 1900 года, т.к. это негативно влияет на обмен с ГИС ЖКХ.
	ПроверитьОграничениеВводаДаты(Объект.ДатаПервойПоверки,         "Объект.ДатаПервойПоверки",         Отказ);
	ПроверитьОграничениеВводаДаты(Объект.ДатаОпломбированияЗаводом, "Объект.ДатаОпломбированияЗаводом", Отказ);
	ПроверитьОграничениеВводаДаты(Объект.ДатаВводаВЭксплуатацию,    "Объект.ДатаВводаВЭксплуатацию",    Отказ);
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
// Обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Оповещение формы документа "Установка счетчика".
	Оповестить("Запись_Счетчики", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура открытия документа установки счетчика.
Процедура ДатаПоверкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ДокументУстановкаДатыПоверки.Пустая() Тогда
		ОткрытьФорму("Документ.КВП_УстановкаСчетчика.Форма.ФормаДокумента",
						Новый Структура("Ключ", ДокументУстановкаДатыПоверки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Имеется возможность дистанционного снятия показаний".
Процедура ИмеетсяВозможностьДистанционногоСнятияПоказанийПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ИмеетсяВозможностьДистанционногоСнятияПоказанийПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Имеется датчик температуры".
Процедура ИмеетсяДатчикТемпературыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ИмеетсяДатчикТемпературыПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Имеется датчик давления".
Процедура ИмеетсяДатчикДавленияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ИмеетсяДатчикДавленияПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Дата ввода в эксплуатацию отличается от даты установки".
Процедура ДатаВводаВЭксплуатациюОтличаетсяОтДатыУстановкиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ДатаВводаВЭксплуатациюОтличаетсяОтДатыУстановкиПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" расчетного параметра счетчика.
Процедура ПриИзмененииРасчетногоПараметраСчетчика(Элемент)
	
	Если Не ПользовательОтказалсяОтПредупрежденияПриРедактированииПараметровСчетчика Тогда
		ПользовательОтказалсяОтПредупрежденияПриРедактированииПараметровСчетчика = Истина;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаПервойПоверки".
//
Процедура ДатаПервойПоверкиПриИзменении(Элемент)
	
	ПроверитьОграничениеВводаДаты(Объект.ДатаПервойПоверки, "Объект.ДатаПервойПоверки");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаОпломбированияЗаводом".
//
Процедура ДатаОпломбированияЗаводомПриИзменении(Элемент)
	
	ПроверитьОграничениеВводаДаты(Объект.ДатаОпломбированияЗаводом, "Объект.ДатаОпломбированияЗаводом");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаВводаВЭксплуатацию".
//
Процедура ДатаВводаВЭксплуатациюПриИзменении(Элемент)
	
	ПроверитьОграничениеВводаДаты(Объект.ДатаВводаВЭксплуатацию, "Объект.ДатаВводаВЭксплуатацию");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик события нажатия кнопки "ЗаполнитьИдентификатор".
Процедура ЗаполнитьИдентификаторНажатие(Команда)
	
	Объект.Идентификатор = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторСчетчика( , Объект.Код,, Истина);
	
КонецПроцедуры // ЗаполнитьИдентификаторНажатие()

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры // Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
