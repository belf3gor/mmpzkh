
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПараметрыПоиска) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры.ПараметрыПоиска);
		
		Если ДанныеАдреса <> Неопределено
			И ЗначениеЗаполнено(ДанныеАдреса.СтранаGUID) Тогда
			СтранаМира = ИнтеграцияВЕТИСПовтИсп.СтранаМира(ДанныеАдреса.СтранаGUID);
		Иначе
			СтранаМира = Справочники.СтраныМира.Россия;
		КонецЕсли;
		
	Иначе
		
		Тип        = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо;
		СтранаМира = Справочники.СтраныМира.Россия;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОГРНПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура GLNПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеНаименованиеПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

#Область РедактированиеАдреса

&НаКлиенте
Процедура СтранаМираОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СтранаМираПриИзмененииНаСервере(СтранаМира)
	
	ДанныеСтраныМира = ПрочиеКлассификаторыВЕТИСВызовСервера.ДанныеСтраныМира(СтранаМира);
	
	ДанныеАдреса = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхАдреса();
	ДанныеАдреса.СтранаGUID          = ДанныеСтраныМира.Идентификатор;
	ДанныеАдреса.СтранаПредставление = ДанныеСтраныМира.Наименование;
	
	Адрес              = "";
	АдресПредставление = "";
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаМираПриИзменении(Элемент)
	
	СтранаМираПриИзмененииНаСервере(СтранаМира);
	
	Элементы.ПредставлениеАдреса.Видимость      = (СтранаМира  = ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	Элементы.ПредставлениеАдресаВЕТИС.Видимость = (СтранаМира <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Адрес = "";
		Возврат;
	КонецЕсли;
	
	АдресПредставление = Текст;
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииАдресаДоставки.
	ТекстСообщенияОбОшибке = ПредставлениеАдресаПриИзмененииНаСервере(Текст);
	
	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		ОчиститьСообщения();
		Если СтранаМира = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			ИмяПоля = "ПредставлениеАдреса";
		Иначе
			ИмяПоля = "ПредставлениеАдресаВЕТИС";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяПоля);
	КонецЕсли;
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> АдресПредставление Тогда
		АдресПредставление = Элемент.ТекстРедактирования;
		Адрес              = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдреса);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           Адрес);
	ПараметрыОткрытия.Вставить("Представление",           АдресПредставление);
	
	// Переопределямый заголовок формы, по умолчанию отобразятся данные по ВидКонтактнойИнформации.
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru='Адрес хозяйствующего субъекта'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОчистка(Элемент, СтандартнаяОбработка)
	
	// Сбрасываем как представления, так и внутренние значения полей.
	АдресПредставление = "";
	Адрес              = "";
	ДанныеАдреса = ДанныеАдресаКлиент();
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	АдресПредставление = ВыбранноеЗначение.Представление;
	Адрес              = ВыбранноеЗначение.КонтактнаяИнформация;
	ДанныеАдреса       = ДанныеАдресаКлиент();
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеАдресаВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ДанныеАдреса", ДанныеАдреса);
	
	ОткрытьФорму(
		"Обработка.КлассификаторыВЕТИС.Форма.РедактированиеАдреса",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ОбработатьРезультатРедактированияАдресаВЕТИС", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьПоиск(Команда)
	
	ОчиститьСообщения();
	
	Если Не РеквизитыПоискаКорректны() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ФизическоеЛицо                = ПредопределенноеЗначение("Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо");
	ИндивидуальныйПредприниматель = ПредопределенноеЗначение("Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель");
	ЮридическоеЛицо               = ПредопределенноеЗначение("Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо");
	
	ПараметрыПоиска = Новый Структура;
	
	Если ЗначениеЗаполнено(Тип) Тогда
		ПараметрыПоиска.Вставить("Тип", Тип);
	КонецЕсли;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) Тогда
		ПараметрыПоиска.Вставить("Идентификатор", Идентификатор);
		Закрыть(ПараметрыПоиска);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(GLN) Тогда
		ПараметрыПоиска.Вставить("GLN", GLN);
		Закрыть(ПараметрыПоиска);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ПараметрыПоиска.Вставить("ИНН", ИНН);
	КонецЕсли;
	
	Если Тип = ЮридическоеЛицо Тогда
		
		Если ЗначениеЗаполнено(КПП) Тогда
			ПараметрыПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			ПараметрыПоиска.Вставить("Наименование", НаименованиеПолное);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Тип = ЮридическоеЛицо
		Или Тип = ИндивидуальныйПредприниматель Тогда
		
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			ПараметрыПоиска.Вставить("НаименованиеПолное", НаименованиеПолное);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОГРН) И Не ЗначениеЗаполнено(ИНН) Тогда
			ПараметрыПоиска.Вставить("ОГРН", ОГРН);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Тип = ФизическоеЛицо
		Или Тип = ИндивидуальныйПредприниматель Тогда
		
		Если ЗначениеЗаполнено(ФИО) Тогда
			ПараметрыПоиска.Вставить("ФИО", ФИО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресПредставление) Тогда
		ПараметрыПоиска.Вставить("Адрес",              Адрес);
		ПараметрыПоиска.Вставить("АдресПредставление", АдресПредставление);
		ПараметрыПоиска.Вставить("ДанныеАдреса",       ДанныеАдреса);
	КонецЕсли;
	
	Если ПараметрыПоиска.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Необходимо указать хотя бы одно условие поиска'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	Закрыть(ПараметрыПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ИндивидуальныйПредприниматель = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель;
	ЮридическоеЛицо               = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо;
	ФизическоеЛицо                = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо;
	
	Если Тип = ЮридическоеЛицо Тогда
		
		Элементы.ИНН.ПодсказкаВвода  = НСтр("ru = 'Введите 10 символов'");
		Элементы.ОГРН.ПодсказкаВвода = НСтр("ru = 'Введите 13 символов'");
		ФИО = "";

	ИначеЕсли Тип = ИндивидуальныйПредприниматель Тогда
		
		Элементы.ИНН.ПодсказкаВвода = НСтр("ru = 'Введите 12 символов'");
		Элементы.ОГРН.ПодсказкаВвода = НСтр("ru = 'Введите 15 символов'");
		НаименованиеПолное = "";
		КПП                = "";
	
	ИначеЕсли Тип = ФизическоеЛицо Тогда
		
		Элементы.ИНН.ПодсказкаВвода = НСтр("ru = 'Введите 12 символов'");
		НаименованиеПолное = "";
		ОГРН               = "";
		КПП                = "";
		
	КонецЕсли;
	
	Элементы.ФИО.Видимость                = (Тип = ФизическоеЛицо Или Тип = ИндивидуальныйПредприниматель);
	Элементы.ПолноеНаименование.Видимость = (Тип = ЮридическоеЛицо);
	Элементы.КПП.Видимость                = (Тип = ЮридическоеЛицо);
	Элементы.ОГРН.Видимость               = (Тип = ИндивидуальныйПредприниматель Или Тип = ЮридическоеЛицо);
	
	Элементы.ПредставлениеАдреса.Видимость      = (СтранаМира  = Справочники.СтраныМира.Россия);
	Элементы.ПредставлениеАдресаВЕТИС.Видимость = (СтранаМира <> Справочники.СтраныМира.Россия);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЭлементовФормы()
	
	УказанИдентификатор = Не ПустаяСтрока(Идентификатор);
	УказанGLN           = Не ПустаяСтрока(GLN);
	УказанЮридическийРеквизит = Не ПустаяСтрока(ИНН)
	                            Или Не ПустаяСтрока(КПП)
	                            Или Не ПустаяСтрока(ОГРН);
	
	УказанРеквизитНеТочногоСоответствия = Не ПустаяСтрока(НаименованиеПолное)
	                                      Или Не ПустаяСтрока(ФИО)
	                                      Или Не ПустаяСтрока(АдресПредставление);
	
	УказанРеквизитТочногоСоответствия = УказанИдентификатор Или УказанGLN Или УказанЮридическийРеквизит;
	
	Элементы.ИНН.Доступность  = Не (УказанИдентификатор Или УказанGLN Или УказанРеквизитНеТочногоСоответствия);
	Элементы.КПП.Доступность  = Не (УказанИдентификатор Или УказанGLN Или УказанРеквизитНеТочногоСоответствия);
	Элементы.ОГРН.Доступность = Не (УказанИдентификатор Или УказанGLN Или УказанРеквизитНеТочногоСоответствия);
	
	Элементы.Идентификатор.Доступность = Не (УказанGLN Или УказанЮридическийРеквизит Или УказанРеквизитНеТочногоСоответствия);
	Элементы.GLN.Доступность           = Не (УказанИдентификатор Или УказанЮридическийРеквизит Или УказанРеквизитНеТочногоСоответствия);
	
	Элементы.ПолноеНаименование.Доступность  = Не УказанРеквизитТочногоСоответствия;
	Элементы.ФИО.Доступность                 = Не УказанРеквизитТочногоСоответствия;
	Элементы.ГруппаПоискПоАдресу.Доступность = Не УказанРеквизитТочногоСоответствия;

	Элементы.Идентификатор.ОтметкаНезаполненного = УказанИдентификатор И НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитыПоискаКорректны()

	Отказ = Ложь;
	
	ЮридическоеЛицо = ПредопределенноеЗначение("Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо");
	
	Если Не ПустаяСтрока(ИНН)  Тогда
		
		Если Тип = ЮридическоеЛицо Тогда
			
			Если СтрДлина(ИНН) <> 10 Тогда
			
			ТекстОшибки = НСтр("ru = 'ИНН должен содержать 10 символов'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"ИНН",, Отказ);
			
			КонецЕсли;
			
		Иначе
			
			Если СтрДлина(ИНН) <> 12 Тогда
				
				ТекстОшибки = НСтр("ru = 'ИНН должен содержать 12 символов'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"ИНН",, Отказ);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(КПП)
		И Тип = ЮридическоеЛицо
		И СтрДлина(КПП) <> 9 Тогда
		
		ТекстОшибки = НСтр("ru = 'Необходимо указать 9 символов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"КПП",, Отказ);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(GLN)
		И СтрДлина(GLN) <> 13 Тогда
		
		ТекстОшибки = НСтр("ru = 'Необходимо указать 13 символов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"GLN",, Отказ);
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОГРН)  Тогда
		
		Если Тип = ЮридическоеЛицо
			 И СтрДлина(ОГРН) <> 13 Тогда 
			
			ТекстОшибки = НСтр("ru = 'ОГРН должен содержать 13 символов'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"ОГРН",, Отказ);
			
		ИначеЕсли Тип <> ЮридическоеЛицо
			И СтрДлина(ОГРН) <> 15 Тогда
			
			ТекстОшибки = НСтр("ru = 'ОГРН должен содержать 15 символов'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"ОГРН",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Идентификатор)
		И НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Идентификатор) Тогда
		
		ТекстОшибки = НСтр("ru = 'Неправильно указан идентификатор'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ,"Идентификатор",, Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресПредставление)
		И ДанныеАдреса = Неопределено Тогда
		ДанныеАдреса = ДанныеАдресаКлиент(Ложь, Отказ);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#Область РедактированиеАдреса

&НаКлиенте
Функция ДанныеАдресаКлиент(ОчищатьСообщения = Истина, Отказ = Ложь)
	Попытка
		ДанныеАдресаСтруктурой = ИнтеграцияВЕТИСВызовСервера.ДанныеАдресаПоАдресуXML(Адрес, АдресПредставление);
	Исключение
		Если СтранаМира = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			ИмяПоля = "ПредставлениеАдреса";
			ТекстСообщения = НСтр("ru = 'Не удалось прочитать данные адреса. Возможно не корректно введен регион. Повторите ввод.'");
		Иначе
			ИмяПоля = "ПредставлениеАдресаВЕТИС";
			ТекстСообщения = НСтр("ru = 'Не удалось прочитать данные адреса. Возможно не корректно введены данные. Повторите ввод. Причина ошибки: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОписаниеОшибки());
		КонецЕсли;
		Если ОчищатьСообщения Тогда
			ОчиститьСообщения();
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ИмяПоля);
		ДанныеАдресаСтруктурой = Неопределено;
		
		Отказ = Истина;
	КонецПопытки;
	
	Возврат ДанныеАдресаСтруктурой;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	// Реквизит формы, контролирующий работу с адресом доставки.
	// Используемые поля аналогичны полям справочника ВидыКонтактнойИнформации.
	ВидКонтактнойИнформацииАдреса = Новый Структура;
	ВидКонтактнойИнформацииАдреса.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдреса.Вставить("АдресТолькоРоссийский",        Истина);
	ВидКонтактнойИнформацииАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдреса.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	
	Если СтранаМира  = Справочники.СтраныМира.Россия Тогда
		// Считываем данные из полей адреса в реквизиты для редактирования.
		АдресПредставление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеАдресаПриИзмененииНаСервере(Знач Представление)
	
	ТекстСообщенияОбОшибке = "";
	
	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(Представление, ВидКонтактнойИнформацииАдреса);
	
	Попытка
		ДанныеАдресаСтруктурой = ИнтеграцияВЕТИСВызовСервера.ДанныеАдресаПоАдресуXML(Адрес, АдресПредставление);
	Исключение
		
		Если СтранаМира = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось прочитать данные адреса. Возможно не корректно введен регион. Повторите ввод.'");
		Иначе
			ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось прочитать данные адреса. Возможно не корректно введены данные. Повторите ввод. Причина ошибки: %1'");
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ОписаниеОшибки());
		КонецЕсли;
		
		ДанныеАдресаСтруктурой = Неопределено;
		
	КонецПопытки;
	
	ДанныеАдреса = ДанныеАдресаСтруктурой;
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатРедактированияАдресаВЕТИС(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Адрес              = "";
	АдресПредставление = Результат.ПредставлениеАдреса;
	ДанныеАдреса       = Результат;
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
