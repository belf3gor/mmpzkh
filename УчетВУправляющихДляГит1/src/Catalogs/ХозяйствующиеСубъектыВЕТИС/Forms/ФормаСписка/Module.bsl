
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПравоДобавления = ПравоДоступа("Добавление", Метаданные.Справочники.ХозяйствующиеСубъектыВЕТИС);
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	
	ОбработатьПереданныеПараметры(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьЭлементыФормыПриСоздании();
	УправлениеЭлементамиФормы(ЭтотОбъект);
	УстановитьЗаголовокФормы();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ХозяйствующиеСубъектыВЕТИС"
		И ТипЗнч(Параметр) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС")
		И ЗначениеЗаполнено(Параметр) Тогда
		
		Элементы.Список.Обновить();
		Элементы.Список.ТекущаяСтрока = Параметр;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если РежимВыбора Тогда
		
		Если ТекущаяСтраница  = Элементы.СтраницаЗагруженные Тогда
		
			Элементы.СписокВыбрать.КнопкаПоУмолчанию = Истина;
			
		Иначе
			
			Элементы.ВыбратьИзКлассификатора.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПереключениеМеждуСтраницамиВыполнялось
		И РежимВыбора
		И (ЗначениеЗаполнено(ИНН) Или ЗначениеЗаполнено(КПП)) Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Тип", ТипХозяйствующегоСубъекта); 
		
		Если Не ПустаяСтрока(ИНН) Тогда
			ПараметрыПоиска.Вставить("ИНН", ИНН);
		КонецЕсли;
		
		Если Не ПустаяСтрока(КПП) Тогда
			ПараметрыПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		
		ОбработатьНайденныеХозяйствующиеСубъекты(1);
		
	КонецЕсли;
	
	ПереключениеМеждуСтраницамиВыполнялось = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННОтборПриИзменении(Элемент)
	
	ПриИзмененииОтбораИНН(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КППОтборПриИзменении(Элемент)
	
	ПриИзмененииОтбораКПП(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеСопоставленоПриИзменении(Элемент)
	
	ПриИзмененииОтбораСопоставление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеСопоставленоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСоответствуетПриИзменении(Элемент)
	
	ПриИзмененииОтбораЧемуСоответствует(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСоответствуетОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПриВыбореИзЗагруженных();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроеноПодключениеПриИзменении(Элемент)
	
	ПриИзмененииОтбораНастроеноПодключение(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоискВКлассификаторе

&НаКлиенте
Процедура ПредставлениеПараметровПоискаВКлассификатореОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуПараметрыПоиска" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ПараметрыПоиска", ПараметрыПоиска);
		
		ОткрытьФорму(
			"Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ПараметрыПоиска",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ОбработатьПараметрыПоискаВКлассификаторе", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующиеСубъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПриВыбореИзДанныхКлассификатора();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Создать(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ХозяйствующийСубъект",          Неопределено);
	ПараметрыОткрытияФормы.Вставить("Предприятие",                   Неопределено);
	ПараметрыОткрытияФормы.Вставить("СоздаетсяХозяйствующийСубъект", Истина);
	ПараметрыОткрытияФормы.Вставить("ОтборХозяйствующийСубъект",     ПараметрыПоиска);
	
	ОповещениеПослеСоздания = Новый ОписаниеОповещения("ХозяйствующийСубъектПослеСоздания", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлассификаторыВЕТИС.Форма.СозданиеХозяйствующегоСубъектаИПредприятия",
	             ПараметрыОткрытияФормы, ЭтотОбъект,,,,ОповещениеПослеСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПоискСтраницаПервая(Команда)
	
	ОчиститьСообщения();
	
	ОбработатьНайденныеХозяйствующиеСубъекты(1);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПоискСтраницаПоследняя(Команда)
	
	ОчиститьСообщения();
	
	КоличествоСтраниц = ОбщееКоличество / ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	Если Цел(КоличествоСтраниц) <> КоличествоСтраниц Тогда
		КоличествоСтраниц = Цел(КоличествоСтраниц) + 1;
	КонецЕсли;
	Если КоличествоСтраниц = 0 Тогда
		КоличествоСтраниц = 1;
	КонецЕсли;
	
	ОбработатьНайденныеХозяйствующиеСубъекты(КоличествоСтраниц);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПоискСтраницаПредыдущая(Команда)
	
	ОчиститьСообщения();
	
	ОбработатьНайденныеХозяйствующиеСубъекты(ТекущийНомерСтраницы - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПоискСтраницаСледующая(Команда)
	
	ОчиститьСообщения();
	
	ОбработатьНайденныеХозяйствующиеСубъекты(ТекущийНомерСтраницы + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПоискТекущаяСтраница(Команда)
	
	КоличествоСтраниц = ОбщееКоличество / ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	ТекущийНомерСтраницы = ТекущийНомерСтраницы;
	
	Если Цел(КоличествоСтраниц) <> КоличествоСтраниц Тогда
		КоличествоСтраниц = Цел(КоличествоСтраниц) + 1;
	КонецЕсли;
	Если КоличествоСтраниц = 0 Тогда
		КоличествоСтраниц = 1;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("МаксимальныйНомерСтраницы", КоличествоСтраниц);
	ПараметрыОткрытияФормы.Вставить("НомерСтраницы",             ТекущийНомерСтраницы);
	
	ОткрытьФорму(
		"Обработка.КлассификаторыВЕТИС.Форма.ПереходКСтраницеПоНомеру",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПослеВыбораНомераСтраницыХозяйствующиеСубъекты", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлассификатора(Команда)
	
	ТекущиеДанные = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, ИнтеграцияИСКлиентСервер.ТекстКомандаНеМожетБытьВыполнена());
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДанныхКлассификатора(ТекущиеДанные.GUID);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзКлассификатора(Команда)
	
	ПриВыбореИзДанныхКлассификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзЗагруженных(Команда)
	
	ПриВыбореИзЗагруженных();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОтбораИНН(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
	                                                                        "ИНН", 
	                                                                        Форма.ИНН, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,, 
	                                                                        ЗначениеЗаполнено(Форма.ИНН));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОтбораКПП(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
	                                                                        "КПП", 
	                                                                        Форма.КПП, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,, 
	                                                                        ЗначениеЗаполнено(Форма.КПП));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОтбораСопоставление(Форма)
	
	ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Форма.Список.Отбор.Элементы,
	                                                                                  НСтр("ru = 'Отбор по сопоставлению'"),
	                                                                                  ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Если Форма.ОтборНесопоставлено = "ХСНесопоставлен" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		                                                     "Контрагент", 
		                                                      , 
		                                                      ВидСравненияКомпоновкиДанных.НеЗаполнено,, 
		                                                      Истина);
		
	ИначеЕсли Форма.ОтборНесопоставлено = "БезПредприятий" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		                                                     "КоличествоПредприятий", 
		                                                     0, 
		                                                     ВидСравненияКомпоновкиДанных.Равно,, 
		                                                     Истина);
	
	ИначеЕсли Форма.ОтборНесопоставлено = "ЕстьНесопоставленныеПредприятия" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		                                                     "ЕстьНесопоставленные", 
		                                                     Истина, 
		                                                     ВидСравненияКомпоновкиДанных.Равно,, 
		                                                     Истина);
		
	ИначеЕсли Форма.ОтборНесопоставлено = "ЛюбоеНесопоставление" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		                                                     "Контрагент", 
		                                                     ,
		                                                     ВидСравненияКомпоновкиДанных.НеЗаполнено,, 
		                                                     Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		                                                     "ЕстьНесопоставленные", 
		                                                     Истина, 
		                                                     ВидСравненияКомпоновкиДанных.Равно,, 
		                                                     Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		                                                     "КоличествоПредприятий", 
		                                                     0, 
		                                                     ВидСравненияКомпоновкиДанных.Равно,, 
		                                                     Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОтбораЧемуСоответствует(Форма)

	Если Форма.ОтборСоответствует = "Все" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, 
		                                                                        "СоответствуетОрганизации", 
		                                                                        Истина, 
		                                                                        ВидСравненияКомпоновкиДанных.Равно, ,
		                                                                        Ложь);
		
	ИначеЕсли Форма.ОтборСоответствует = "Контрагенту" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, 
		                                                                        "СоответствуетОрганизации", 
		                                                                        Ложь, 
		                                                                        ВидСравненияКомпоновкиДанных.Равно, ,
		                                                                        Истина);
		
	ИначеЕсли Форма.ОтборСоответствует = "Организации" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, 
		                                                                        "СоответствуетОрганизации", 
		                                                                        Истина, 
		                                                                        ВидСравненияКомпоновкиДанных.Равно, ,
		                                                                        Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииОтбораНастроеноПодключение(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
	                                                                        "НастроеноПодключение", 
	                                                                        Истина, 
	                                                                        ВидСравненияКомпоновкиДанных.Равно,, 
	                                                                        Форма.ОтборНастроеноПодключение);
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияФормыИУправлениеЭлементами

&НаСервере
Процедура ОбработатьПереданныеПараметры(Отказ)
	
	РежимВыбора          = Параметры.РежимВыбора;
	Контрагент           = Параметры.Контрагент;
	ВыборИдентификаторов = Параметры.ВыборИдентификаторов;
	
	
	Если ТипЗнч(Параметры.ПараметрыПоиска) = Тип("Структура") Тогда

		ПараметрыПоиска = Параметры.ПараметрыПоиска;
		ОбработатьНайденныеХозяйствующиеСубъекты(1);
		
	ИначеЕсли ЗначениеЗаполнено(Контрагент)
		И Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип.Типы().Найти(ТипЗнч(Параметры.Контрагент)) <> Неопределено Тогда
		
		ДанныеКонтрагента = ИнтеграцияВЕТИС.ДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта(Параметры.Контрагент);
		
		ИНН                       = ДанныеКонтрагента.ИНН;
		КПП                       = ДанныеКонтрагента.КПП;
		ТипХозяйствующегоСубъекта = ?(ЗначениеЗаполнено(ДанныеКонтрагента.Тип), ДанныеКонтрагента.Тип, Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо);
		
		ПриИзмененииОтбораИНН(ЭтотОбъект);
		ПриИзмененииОтбораКПП(ЭтотОбъект);
		
	Иначе
		
		ПараметрыПоиска = Новый Структура;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Несопоставлено) Тогда
		ОтборНесопоставлено = Параметры.Несопоставлено;
	Иначе
		ОтборНесопоставлено = "Все";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Соответствует) Тогда
		ОтборСоответствует = Параметры.Соответствует;
	Иначе
		ОтборСоответствует = "Все";
	КонецЕсли;
	
	Если Параметры.Свойство("НастроеноПодключение") Тогда
		ОтборНастроеноПодключение = Параметры.НастроеноПодключение;
	Иначе
		ОтборНастроеноПодключение = Ложь;
	КонецЕсли;
	
	ПриИзмененииОтбораСопоставление(ЭтотОбъект);
	ПриИзмененииОтбораЧемуСоответствует(ЭтотОбъект);
	ПриИзмененииОтбораНастроеноПодключение(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()

	СформироватьПредставлениеПараметровПоиска(ПараметрыПоиска, Истина);
	
	Элементы.ПоискНеНастроен.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	Элементы.ПоискНеНастроен.ОтображениеСостояния.Текст = НСтр("ru = 'Элементы классификатора не выведены. Настройте отбор и выполните поиск.'");
	Элементы.ПоискНеНастроен.ОтображениеСостояния.Видимость = Истина;
	
	Если РежимВыбора Тогда
		
		Элементы.СписокВыбрать.Видимость                = Истина;
		Элементы.СписокКонтекстноеМенюВыбрать.Видимость = Истина;
		
		Элементы.КППОтбор.Видимость = ЗначениеЗаполнено(Контрагент);
		Элементы.ИННОтбор.Видимость = ЗначениеЗаполнено(Контрагент);
		
		Элементы.ОтборСоответствует.Видимость        = Не ЗначениеЗаполнено(Контрагент);
		Элементы.ОтборНесопоставлено.Видимость       = ОтборНесопоставлено <> "Все";
		Элементы.ОтборНастроеноПодключение.Видимость = Не ЗначениеЗаполнено(Контрагент);

		
	Иначе
		
		Элементы.СписокВыбрать.Видимость                = Ложь;
		Элементы.СписокКонтекстноеМенюВыбрать.Видимость = Ложь;
		
		Элементы.КППОтбор.Видимость = Ложь;
		Элементы.ИННОтбор.Видимость = Ложь;
		
		Элементы.ОтборСоответствует.Видимость  = Истина;
		Элементы.ОтборНесопоставлено.Видимость = Истина;
		
		Элементы.ОтборНастроеноПодключение.Видимость = Параметры.Свойство("НастроеноПодключение");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                  "ЕстьНесопоставленные",
	                                                                   НСтр("ru = 'есть несопоставленные'"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                  "ВсеСопоставлено",
	                                                                   НСтр("ru = 'все сопоставлено'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()

	ТекстЗаголовка = "";
	
	Если РежимВыбора Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Выбор хозяйствующего субъекта'");
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Хозяйствующие субъекты'");
		
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область Загруженные
	
#Область КонтрагентНеСопоставлено
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Контрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
#КонецОбласти

#Область ПредприятияНет
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоПредприятий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.КоличествоПредприятий");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

#Область ПредприятияЕстьНесопоставленные
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НесопоставленныеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ЕстьНесопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
#КонецОбласти

#Область ПредприятияНетНесопоставленных
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НесопоставленныеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ЕстьНесопоставленные");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
#КонецОбласти

#КонецОбласти

#Область ПоискВКлассификаторе

#Область ХСКППНеПрименимо
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ХозяйствующиеСубъектыКПП.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХозяйствующиеСубъекты.Тип");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не применимо>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти
	
#Область ХСОГРННеПрименимо

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ХозяйствующиеСубъектыОГРН.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ХозяйствующиеСубъекты.Тип");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не применимо>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
#КонецОбласти

#КонецОбласти

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)

	Элементы = Форма.Элементы;
	
	Если Форма.КоличествоСтраниц < 2 Тогда
		Элементы.НавигацияНайденоВКлассификаторе.Видимость = Ложь;
	Иначе
		Элементы.НавигацияНайденоВКлассификаторе.Видимость = Истина;
		Элементы.НавигацияНайденоВКлассификатореСтраницаСледующая.Доступность  = (Форма.ТекущийНомерСтраницы < Форма.КоличествоСтраниц);
		Элементы.НавигацияНайденоВКлассификатореСтраницаПредыдущая.Доступность = (Форма.ТекущийНомерСтраницы > 1)
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
Процедура ОбработатьПараметрыПоискаВКлассификаторе(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Результат;
	ОбработатьНайденныеХозяйствующиеСубъекты(1);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНайденныеХозяйствующиеСубъекты(НомерСтраницы)
	
	ХозяйствующиеСубъекты.Очистить();
	
	Если ПараметрыПоиска.Свойство("Идентификатор") Тогда
		Результат = ЦерберВЕТИСВызовСервера.ХозяйствующийСубъектПоGUID(ПараметрыПоиска.Идентификатор);
		ДобавитьВСписокНайденныйХозяйствующийСубъект(Результат);
	ИначеЕсли ПараметрыПоиска.Свойство("GLN") Тогда
		Результат = ЦерберВЕТИСВызовСервера.ХозяйствующийСубъектИПредприятиеПоGLN(ПараметрыПоиска.GLN);
		ЗаполнитьРезультатыНайденоПоGLN(Результат);
	ИначеЕсли ПараметрыПоиска.Количество() > 0 Тогда
		Результат = ЦерберВЕТИСВызовСервера.СписокХозяйствующихСубъектов(ПараметрыПоиска, НомерСтраницы);
		Если Не ЗначениеЗаполнено(Результат.ТекстОшибки)
			И ПараметрыПоиска.Свойство("КПП")
			И Результат.Список <> Неопределено И Результат.Список.Количество() = 0 Тогда
			ПараметрыПоиска.Удалить("КПП");
			Результат = ЦерберВЕТИСВызовСервера.СписокХозяйствующихСубъектов(ПараметрыПоиска, НомерСтраницы);
		КонецЕсли;
		ЗаполнитьСписокХозяйствующихСубъектов(Результат, НомерСтраницы);
	КонецЕсли;
	
	СформироватьПредставлениеПараметровПоиска(ПараметрыПоиска);
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуСХозяйствующимСубъектом(ДанныеХозяйствующегоСубъекта)
	
	НоваяСтрока = ХозяйствующиеСубъекты.Добавить();
	НоваяСтрока.Активность          = ДанныеХозяйствующегоСубъекта.active;
	НоваяСтрока.Актуальность        = ДанныеХозяйствующегоСубъекта.last;
	НоваяСтрока.GUID                = ДанныеХозяйствующегоСубъекта.GUID;
	НоваяСтрока.UUID                = ДанныеХозяйствующегоСубъекта.UUID;
	НоваяСтрока.Наименование        = ДанныеХозяйствующегоСубъекта.Name;
	НоваяСтрока.НаименованиеПолное  = ДанныеХозяйствующегоСубъекта.fullName;
	НоваяСтрока.ДатаСоздания        = ДанныеХозяйствующегоСубъекта.createDate;
	НоваяСтрока.ДатаИзменения       = ДанныеХозяйствующегоСубъекта.updateDate;
	НоваяСтрока.ИНН                 = ДанныеХозяйствующегоСубъекта.inn;
	НоваяСтрока.КПП                 = ДанныеХозяйствующегоСубъекта.kpp;
	НоваяСтрока.ОГРН                = ДанныеХозяйствующегоСубъекта.ogrn;
	НоваяСтрока.ФИО                 = ДанныеХозяйствующегоСубъекта.fio;
	НоваяСтрока.ДанныеАдреса        = ДанныеХозяйствующегоСубъекта.juridicalAddress;
	НоваяСтрока.ПредставлениеАдреса = ДанныеХозяйствующегоСубъекта.juridicalAddress.addressView;
	
	НоваяСтрока.Статус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ДанныеХозяйствующегоСубъекта.status);
	НоваяСтрока.Тип    = ИнтеграцияВЕТИС.ТипХозяйствующегоСубъекта(ДанныеХозяйствующегоСубъекта.type);
	
	Если НоваяСтрока.Тип = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо Тогда
		НоваяСтрока.Представление = НоваяСтрока.ФИО;
	ИначеЕсли НоваяСтрока.Тип = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель Тогда
		НоваяСтрока.Представление = НоваяСтрока.ФИО;
	Иначе
		Если ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
			НоваяСтрока.Представление = НоваяСтрока.Наименование;
		Иначе
			НоваяСтрока.Представление = НоваяСтрока.НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокХозяйствующихСубъектов(Результат, НомерСтраницы)
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Результат.Список Цикл
		
		ДобавитьСтрокуСХозяйствующимСубъектом(СтрокаТЧ);
		
	КонецЦикла;
	
	ОпределитьНаличиеХСВИБ();
	
	ОбщееКоличество = Результат.ОбщееКоличество;
	ТекущийНомерСтраницы   = НомерСтраницы;
	
	КоличествоСтраниц = ОбщееКоличество / ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	Если Цел(КоличествоСтраниц) <> КоличествоСтраниц Тогда
		КоличествоСтраниц = Цел(КоличествоСтраниц) + 1;
	КонецЕсли;
	Если КоличествоСтраниц = 0 Тогда
		КоличествоСтраниц = 1;
	КонецЕсли;
	
	Элементы.НавигацияНайденоВКлассификатореСтраницаТекущая.Заголовок =
		СтрШаблон(НСтр("ru = '%1 из %2'"), ТекущийНомерСтраницы, КоличествоСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокНайденныйХозяйствующийСубъект(Результат)
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Результат.Элемент <> Неопределено Тогда
		ДобавитьСтрокуСХозяйствующимСубъектом(Результат.Элемент);
	КонецЕсли;
	
	ОпределитьНаличиеХСВИБ();
	
	ОбщееКоличество       = 1;
	ТекущийНомерСтраницы  = 1;
	КоличествоСтраниц     = 1;
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПоискВКлассификаторе;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыНайденоПоGLN(Результат)
	
	Если Результат = Неопределено Тогда
		
		ДанныеПредприятияПоGLN = Неопределено;
		
	Иначе
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокуСХозяйствующимСубъектом(Результат.Элемент.businessEntity);
		Если ХозяйствующиеСубъекты.Количество() > 0 Тогда
			ДанныеХозяйствующегоСубъекта = ХозяйствующиеСубъекты[0];
		Иначе
			Возврат;
		КонецЕсли;
		ДанныеПредприятияПоGLN = ИнтеграцияВЕТИС.ДанныеПредприятия(Результат.Элемент.enterprise, Ложь);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ХозяйствующиеСубъектыВЕТИС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъектыВЕТИС
		|ГДЕ
		|	ХозяйствующиеСубъектыВЕТИС.Идентификатор = &ИдентификаторХозяйствующегоСубъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредприятияВЕТИС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПредприятияВЕТИС КАК ПредприятияВЕТИС
		|ГДЕ
		|	ПредприятияВЕТИС.Идентификатор = &ИдентификаторПредприятия";
		
		Запрос.УстановитьПараметр("ИдентификаторХозяйствующегоСубъекта", ДанныеХозяйствующегоСубъекта.GUID);
		Запрос.УстановитьПараметр("ИдентификаторПредприятия",            ДанныеПредприятияПоGLN.Идентификатор);
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаХозяйствующийСубъект = Результат[0].Выбрать();
		
		Если ВыборкаХозяйствующийСубъект.Следующий() Тогда
			ДанныеХозяйствующегоСубъекта.ХозяйствующийСубъект    = ВыборкаХозяйствующийСубъект.Ссылка;
			ДанныеХозяйствующегоСубъекта.ИндексКартинкиЕстьВБазе = 1;
		КонецЕсли;
		
		ВыборкаПредприятие = Результат[1].Выбрать();
		
		Если ВыборкаПредприятие.Следующий() Тогда
			ДанныеПредприятияПоGLN.Ссылка = ВыборкаПредприятие.Ссылка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеХСВИБ()
	
	Если ХозяйствующиеСубъекты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	МассивИдентификаторов = ХозяйствующиеСубъекты.Выгрузить(, "GUID").ВыгрузитьКолонку("GUID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозяйствующиеСубъектыВЕТИС.Идентификатор            КАК Идентификатор,
	|	ХозяйствующиеСубъектыВЕТИС.Ссылка                   КАК Ссылка
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъектыВЕТИС
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИС.Идентификатор В(&МассивИдентификаторов)";
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоискаИмеющихся = Новый Структура;
		ПараметрыПоискаИмеющихся.Вставить("GUID", Выборка.Идентификатор);
		
		НайденныеСтроки = ХозяйствующиеСубъекты.НайтиСтроки(ПараметрыПоискаИмеющихся);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ИндексКартинкиЕстьВБазе  = 1;
			НайденнаяСтрока.ХозяйствующийСубъект     = Выборка.Ссылка;
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораНомераСтраницыХозяйствующиеСубъекты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьНайденныеХозяйствующиеСубъекты(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеОтбора

&НаСервере
Процедура СформироватьПредставлениеПараметровПоиска(ПараметрыОтбора, ПриСоздании = Ложь)
	
	СтрокаОтбор = "";
	
	КоличествоПараметровОтбора = 0;
	
	Если ПараметрыОтбора <> Неопределено Тогда
		
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'ИНН'"),                  "ИНН",                 КоличествоПараметровОтбора );
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'КПП'"),                  "КПП",                 КоличествоПараметровОтбора);
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'ОГРН'"),                 "ОГРН",                КоличествоПараметровОтбора);
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'GLN'"),                  "GLN",                 КоличествоПараметровОтбора );
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'Наименование полное'"),  "НаименованиеПолное",  КоличествоПараметровОтбора);
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'ФИО'"),                  "ФИО",                 КоличествоПараметровОтбора);
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'Адрес'"),                "ДанныеАдреса",        КоличествоПараметровОтбора);
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'Идентификатор'"),        "Идентификатор",       КоличествоПараметровОтбора);
		ДобавитьВПредставление(СтрокаОтбор, ПараметрыОтбора, НСтр("ru = 'Идентификатор версии'"), "ИдентификаторВерсии", КоличествоПараметровОтбора);
		
	КонецЕсли;
	
	Если КоличествоПараметровОтбора = 0 Тогда
		
		ПредставлениеОтбора = ПредставлениеПустогоОтбора(ЭтотОбъект, ПриСоздании);
		
	Иначе
		
		ПредставлениеОтбора = ПредставлениеНеПустогоОтбора(СтрокаОтбор, ЭтотОбъект, ПриСоздании);
		
	КонецЕсли;
	
	Если ПриСоздании Тогда
		
		Элементы.КартинкаИнформацияНеНастроенПоиск.Видимость   = Истина;
		Элементы.Создать.Видимость                             = Ложь;
		Элементы.ВыбратьИзКлассификатора.Видимость             = Ложь;
		
		Элементы.СтраницыХозяйствующиеСубъекты.ТекущаяСтраница = Элементы.СтраницаХозяйствующиеСубъектыПоискНеВыполнен;
		
	Иначе
		
		Элементы.КартинкаИнформацияНеНастроенПоиск.Видимость                           = Ложь;
		Элементы.Создать.Видимость                                                     = Не РежимВыбора И КоличествоПараметровОтбора > 0;
		Элементы.ВыбратьИзКлассификатора.Видимость                                     = РежимВыбора;
		Элементы.ХозяйствующиеСубъектыКонтекстноеМенюВыбратьИзКлассификатора.Видимость = РежимВыбора;
		
		Элементы.СтраницыХозяйствующиеСубъекты.ТекущаяСтраница = Элементы.СтраницаХозяйствующиеСубъектыЭлементы;
		
	КонецЕсли;
	
	ПредставлениеПараметровПоиска = ПредставлениеОтбора;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВПредставление(Представление, ПараметрыОтбора, ПредставлениеПоля, ИмяПоля, КоличествоПараметров)
	
	Если ПараметрыОтбора.Свойство(ИмяПоля) Тогда
		
		Если ТипЗнч(ПараметрыОтбора[ИмяПоля]) = Тип("Структура")
			И ПараметрыОтбора[ИмяПоля].Свойство("ПредставлениеАдреса") Тогда
			Значение = ПараметрыОтбора[ИмяПоля].ПредставлениеАдреса;
		Иначе
			Значение = ПараметрыОтбора[ИмяПоля];
		КонецЕсли;
		
		КоличествоПараметров = КоличествоПараметров + 1;
		
	Иначе
		
		Значение = Неопределено;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяПоля = "ФИО" 
		Или ИмяПоля = "НаименованиеПолное"
		Или ИмяПоля = "Наименование" Тогда
		
		Разделитель = " " + НСтр("ru = 'содержит'") + " ";
		
	Иначе
		
		Разделитель = " = ";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		Представление = Представление + " " + НСтр("ru = 'и'") + " " + ПредставлениеПоля + Разделитель + """" + Значение + """";
	Иначе
		Представление = ПредставлениеПоля + Разделитель + """" + Значение + """";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустогоОтбора(Форма, ПриСоздании = Ложь)
	
	Если ПриСоздании Тогда
		
		Строки = Новый Массив;
		Строки.Добавить(НСтр("ru = 'Для вывода хозяйствующих субъектов'"));
		Строки.Добавить(" ");
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'настройте отбор'"),,
				Форма.ЦветГиперссылки,,
				"ОткрытьФормуПараметрыПоиска"));
		Строки.Добавить(" ");
		Строки.Добавить(НСтр("ru = 'и выполните поиск'"));
		
	Иначе
		
		СтрокаПредставлениеОтбора = НСтр("ru = 'Отбор не настроен'");
		
		МассивСтрокИзменить = Новый Массив;
		
		МассивСтрокИзменить.Добавить(" (");
		МассивСтрокИзменить.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'настроить отбор'"),,
				Форма.ЦветГиперссылки,,
				"ОткрытьФормуПараметрыПоиска"));
		МассивСтрокИзменить.Добавить(")");
		
		Строки = Новый Массив;
		Строки.Добавить(СтрокаПредставлениеОтбора);
		Строки.Добавить(Новый ФорматированнаяСтрока(МассивСтрокИзменить));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Строки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНеПустогоОтбора(СтрокаОтбор, Форма, ПриСоздании = Ложь)
	
	СтрокаПредставлениеОтбора = СтрШаблон(НСтр("ru = 'Установлен отбор по %1'"), СтрокаОтбор);
	
	МассивСтрокИзменить = Новый Массив;
	
	МассивСтрокИзменить.Добавить(" (");
	МассивСтрокИзменить.Добавить(
		Новый ФорматированнаяСтрока(
			НСтр("ru = 'изменить'"),,
			Форма.ЦветГиперссылки,,
			"ОткрытьФормуПараметрыПоиска"));
	МассивСтрокИзменить.Добавить(")");
	
	Строки = Новый Массив;
	Строки.Добавить(СтрокаПредставлениеОтбора);
	Строки.Добавить(Новый ФорматированнаяСтрока(МассивСтрокИзменить));
	
	Возврат Новый ФорматированнаяСтрока(Строки);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ХозяйствующийСубъектПослеСоздания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВыбора
		И ЗначениеЗаполнено(Результат)
		И ТипЗнч(Результат) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
		
		ОповеститьОВыборе(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДанныхКлассификатора(ИдентификаторХС)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторХС); 
	
	ОповещениеОЗакрытииФормыДанныхКлассификатора = Новый ОписаниеОповещения("ДанныеКлассификатораПослеЗакрытия", ЭтотОбъект);
	ОткрытьФорму("Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ДанныеКлассификатора", ПараметрыФормы, ЭтотОбъект,,,,
	             ОповещениеОЗакрытииФормыДанныхКлассификатора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКлассификатораПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат)
		И ТипЗнч(Результат) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
		
		Если РежимВыбора Тогда
			
			ОповеститьОВыборе(Результат);
			
		Иначе
			
			ОпределитьНаличиеХСВИБ();
			Элементы.Список.ТекущаяСтрока = Результат;
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаЗагруженные;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореИзДанныхКлассификатора()

	ТекущиеДанные = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		Возврат;
	КонецЕсли;
	
	Если РежимВыбора Тогда
		
		Если ВыборИдентификаторов Тогда
			
			ДанныеВыбора = ПустаяСтруктураВозвратаВыборИдентификаторов();
			ДанныеВыбора.Ссылка        = ТекущиеДанные.ХозяйствующийСубъект;
			ДанныеВыбора.Наименование  = ТекущиеДанные.Представление;
			ДанныеВыбора.Идентификатор = ТекущиеДанные.GUID;
			
			ОповеститьОВыборе(ДанныеВыбора);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ХозяйствующийСубъект) Тогда
		
			ОповеститьОВыборе(ТекущиеДанные.ХозяйствующийСубъект);
			
		Иначе
			
			ОткрытьФормуДанныхКлассификатора(ТекущиеДанные.GUID);
			
		КонецЕсли;
		
	Иначе
		
		ОткрытьФормуДанныхКлассификатора(ТекущиеДанные.GUID);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореИзЗагруженных()
	
	Если Не ИнтеграцияВЕТИСКлиент.ВыборСтрокиДинамическогоСпискаКорректен(ЭтотОбъект, "Список", Истина, Ложь) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если РежимВыбора Тогда
		Если ВыборИдентификаторов Тогда
			
			ДанныеВыбора = ПустаяСтруктураВозвратаВыборИдентификаторов();
			ДанныеВыбора.Ссылка        = ТекущиеДанные.Ссылка;
			ДанныеВыбора.Наименование  = ТекущиеДанные.Наименование;
			ДанныеВыбора.Идентификатор = ТекущиеДанные.Идентификатор;
			
			ОповеститьОВыборе(ДанныеВыбора);
			
		Иначе
			ОповеститьОВыборе(ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПустаяСтруктураВозвратаВыборИдентификаторов()

	ПустаяСтруктура = Новый Структура;
	ПустаяСтруктура.Вставить("Ссылка",        ПредопределенноеЗначение("Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка"));
	ПустаяСтруктура.Вставить("Наименование",  "");
	ПустаяСтруктура.Вставить("Идентификатор", "");
	
	Возврат ПустаяСтруктура;

КонецФункции 

#КонецОбласти



