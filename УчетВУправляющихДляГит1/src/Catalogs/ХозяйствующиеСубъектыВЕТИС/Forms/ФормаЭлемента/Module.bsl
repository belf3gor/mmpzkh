
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ОсновныеПраваДоступа = Истина;
	РегистрыСведений.ПраваДоступаПользователейВЕТИС.НастроитьСписокПравДоступа(ЭтотОбъект, "Пользователи", "Пользователи");
	УстановитьОтборСпискаПользователей();
	
	Если Параметры.ДополнительныеПараметры.Свойство("ИмяЭлементаПозиционирования") Тогда
		
		НайденныйЭлемент = Элементы.Найти(Параметры.ДополнительныеПараметры.ИмяЭлементаПозиционирования);
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭтотОбъект.ТекущийЭлемент = НайденныйЭлемент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Элементы.Предприятия.ИзменятьСоставСтрок = Истина;
		Элементы.ПользователиУдалитьПользователяХСРежимОтладки.Видимость = Истина;
		Элементы.ПользователиКонтекстноеМенюУдалитьПользователяХСРежимОтладки.Видимость = Истина;
	КонецЕсли;
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораКонтрагента(
		Новый ОписаниеОповещения("ПриВыбореКонтрагента", ЭтотОбъект), ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Изменение_ПраваДоступаПользователейВЕТИС"
		И Параметр = Объект.Ссылка Тогда
		
		Элементы.Пользователи.Обновить();
		ОпределитьКоличествоПользователей();
		
	ИначеЕсли ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияВЕТИСКлиентСервер.ИмяПодсистемы())
		И Параметр.Свойство("ОбъектИзменен")
		И Параметр.ОбъектИзменен Тогда
		
		ТребуетсяОбновление = Ложь;
		
		Если ТипЗнч(Параметр.Ссылка) = Тип("Массив") Тогда
			
			Если Параметр.Ссылка.Найти(Объект.Ссылка) <> Неопределено Тогда
				ТребуетсяОбновление = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметр.Ссылка) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
			
			Если Параметр.Ссылка = Объект.Ссылка Тогда
				ТребуетсяОбновление = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяОбновление Тогда
			ОбновитьПредставленияНаФорме();
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораКонтрагента(
		Новый ОписаниеОповещения("ПриВыбореКонтрагента", ЭтотОбъект), НовыйОбъект, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РегистрыСведений.НастройкиУполномоченногоГашенияВЕТИС.ВыполнитьЗаписьПоГрузоотправителю(
		Объект.Ссылка,
		УполномоченноеГашение.Выгрузить().ВыгрузитьКолонку("Грузополучатель"));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	УстановитьОтборСпискаПользователей();
	ЗаполнитьТаблицуУполномоченногоГашения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи = Новый Структура;
	Оповестить(
		"Запись_ХозяйствующиеСубъектыВЕТИС",
		ПараметрыЗаписи,
		Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипПриИзменении(Элемент)
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствуетОрганизацииПриИзменении(Элемент)
	
	Объект.Контрагент = СобственнаяОрганизацияЗначениеПоУмолчанию;
	
	СоответствуетОрганизацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ИНН",                     Объект.ИНН);
	Реквизиты.Вставить("КПП",                     Объект.КПП);
	Реквизиты.Вставить("Наименование",            Объект.НаименованиеПолное);
	Реквизиты.Вставить("СокращенноеНаименование", Объект.Наименование);
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуВыбораКонтрагента(
		ЭтотОбъект,
		Реквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Реквизиты = ИнтеграцияВЕТИСКлиентСервер.РеквизитыСозданияКонтрагента();
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	Реквизиты.ЮридическийАдрес = Объект.АдресПредставление;
	
	СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуСозданияКонтрагента(
		ЭтотОбъект,
		Реквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОсновныеПраваПриИзменении(Элемент)
	ТолькоОсновныеПраваПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиПользователи

&НаКлиенте
Процедура ПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ПоляОткрытияПользователяВЕТИС = Новый Массив();
	ПоляОткрытияПользователяВЕТИС.Добавить(Элементы.ПользователиПользователь);
	ПоляОткрытияПользователяВЕТИС.Добавить(Элементы.ПользователиПользовательВЕТИС);
	
	Если ПоляОткрытияПользователяВЕТИС.Найти(Поле) <> Неопределено Тогда
		ОткрытьФормуПользователяВЕТИС(ТекущиеДанные);
	ИначеЕсли Объект.СоответствуетОрганизации Тогда
		Если ЭтоАдминистраторХозяйствующегоСубъекта Тогда
			ОткрытьФормуНазначенияПрав(ТекущиеДанные, Ложь, Ложь);
		Иначе
			ОткрытьФормуПользователяВЕТИС(ТекущиеДанные);
		КонецЕсли;
	Иначе
		ОткрытьФормуНазначенияПрав(ТекущиеДанные, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиПредприятия

&НаКлиенте
Процедура ПредприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле.Имя = "ПредприятияПредприятие"
		Или Поле.Имя = "ПредприятияGLN") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Объект.Предприятия.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные <> Неопределено
			И ЗначениеЗаполнено(ТекущиеДанные.Предприятие) Тогда
			
			ПоказатьЗначение(, ТекущиеДанные.Предприятие);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Индекс = Объект.Предприятия.Индекс(ТекущиеДанные);
		
		СтрокаТЧ = Объект.Предприятия.Вставить(Индекс + 1);
		СтрокаТЧ.Предприятие            = ТекущиеДанные.Предприятие;
		СтрокаТЧ.ТорговыйОбъект         = Неопределено;
		СтрокаТЧ.ПроизводственныйОбъект = Неопределено;
		
		Элемент.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияПередУдалением(Элемент, Отказ)
	
	Если Объект.СоответствуетОрганизации Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено
			Или Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Предприятие)
			И Не ЕстьМножественнаяСвязь(ЭтотОбъект, ТекущиеДанные.Предприятие) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиУполномоченноеГашение

&НаКлиенте
Процедура УполномоченноеГашениеПриИзменении(Элемент)
	
	КоличествоСтрокУполномоченноеГашение = УполномоченноеГашение.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СопоставитьПоИННКПП(Команда)
	
	ОчиститьСообщения();
	
	КонтрагентНайден = СопоставитьПоИННКППСервер();
	
	Если Не КонтрагентНайден Тогда
		Если ЕстьПравоСозданияКонтрагента Тогда
			ПоказатьВопрос(
				Новый ОписаниеОповещения("СоздатьНовогоКонтрагента", ЭтотОбъект),
				НСтр("ru='Контрагент с указанными ИНН и КПП не найден. Создать нового?'"),
				РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Контрагент с указанными ИНН и КПП не найден.'"),,
				"ИНН",
				"Объект");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПредприятие(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Создание нового предприятия возможно только для записанного хозяйствующего субъекта. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриСозданииНовогоПредприятияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуПомощникаСозданияНовогоПредприятия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСписокПредприятий(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Синхронизация списка предприятий возможна только для записанного хозяйствующего субъекта. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриСинхронизацииЗавершение",
			ЭтотОбъект,
			Новый Структура("ЗагрузитьНовые", Ложь));
			
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьСинхронизациюПредприятий(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьСПредприятием(Команда)
	
	ПараметрыФормы = ПараметрыФормыИзмененияСвязи();
	
	ПараметрыФормы.ХозяйствующийСубъект = Объект.Ссылка;
	ПараметрыФормы.ВариантИзменения     = "Связывание";

	ОткрытьФорму(
		"Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ИзменениеСвязиПредприятияХозяйствующегоСубъекта",
		ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязь(Команда)
	
	ТекущиеДанные = Элементы.Предприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Спозиционируйтесь на предприятии, с которым необходимо разорвать связь'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыИзмененияСвязи();
	
	ПараметрыФормы.ХозяйствующийСубъект = Объект.Ссылка;
	ПараметрыФормы.ВариантИзменения     = "РазрывСвязи";
	ПараметрыФормы.Предприятие          = ТекущиеДанные.Предприятие;
	ПараметрыФормы.GLN                  = ТекущиеДанные.GLN;
	
	ОткрытьФорму(
		"Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ИзменениеСвязиПредприятияХозяйствующегоСубъекта",
		ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьGLN(Команда)
	
	ТекущиеДанные = Элементы.Предприятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Спозиционируйтесь на предприятии, которому необходимо изменить GLN'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыФормыИзмененияСвязи();
	
	ПараметрыФормы.ХозяйствующийСубъект = Объект.Ссылка;
	ПараметрыФормы.ВариантИзменения     = "ИзменениеGLN";
	ПараметрыФормы.Предприятие          = ТекущиеДанные.Предприятие;
	ПараметрыФормы.GLN                  = ТекущиеДанные.GLN;
	
	ОткрытьФорму(
		"Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ИзменениеСвязиПредприятияХозяйствующегоСубъекта",
		ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Подбор предприятий возможен только для записанного хозяйствующего субъекта. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриПодбореПредприятийЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьПодборПредприятий();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсе(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Загрузка списка предприятий возможна только для записанного хозяйствующего субъекта. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриСинхронизацииЗавершение",
			ЭтотОбъект,
			Новый Структура("ЗагрузитьНовые", Истина));
			
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьСинхронизациюПредприятий(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПользователя(Команда)
	
	ОткрытьФормуНазначенияПрав(Неопределено, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПользователя(Команда)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Спозиционируйтесь на пользователе, права которого необходимо скопировать'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНазначенияПрав(ТекущиеДанные, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПраваДоступа(Команда)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Спозиционируйтесь на пользователе, права которого необходимо изменить'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНазначенияПрав(ТекущиеДанные, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователя(Команда)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Спозиционируйтесь на пользователе, с которым необходимо разорвать связь'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФормы = "РегистрСведений.ПраваДоступаПользователейВЕТИС.Форма.ФормаУдалениеСвязи";
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ХозяйствующийСубъект", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПользовательВЕТИС",    ТекущиеДанные.ПользовательВЕТИС);
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьСписокПользователей(Команда)
	
	ПолноеИмяФормы = "Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ФормаСинхронизацияПользователей";
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ХозяйствующийСубъект", Объект.Ссылка);
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПользователяХозяйствующегоСубъектаВРежимеОтладки(Команда)
	
	ТекущиеДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПользователяХозяйствующегоСубъектаНаСервере(ТекущиеДанные.ХозяйствующийСубъект, ТекущиеДанные.ПользовательВЕТИС);
	
	Оповестить("Изменение_ПраваДоступаПользователейВЕТИС",     Объект.Ссылка, ЭтотОбъект);
	Оповестить("Изменение_АдресаЗонОтветственностиВЕТИС",      Объект.Ссылка, ЭтотОбъект);
	Оповестить("Изменение_ПредприятияЗонОтветственностиВЕТИС", Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВЕТИС(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",                      Объект.Идентификатор);
	ПараметрыФормы.Вставить("НеПоказыватьПереходКЗагруженномуХС", Ложь);
	ПараметрыФормы.Вставить("ПереходитьКПредприятиям",            Ложь);
	
	ОткрытьФорму(
		"Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ДанныеКлассификатора",
		ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьЗначениеКолонкиНеИспользовать(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьЗначениеКолонкиНеИспользовать(Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗначениеКолонкиНеИспользовать(Значение)
	
	Если Элементы.Предприятия.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Для Каждого ВыделеннаяСтрока Из Элементы.Предприятия.ВыделенныеСтроки Цикл
			
			СтрокаТЧ = Объект.Предприятия.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			СтрокаТЧ.НеИспользовать = Значение;
			
		КонецЦикла;
		
	ИначеЕсли Элементы.Предприятия.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Предприятия Цикл
			
			СтрокаТЧ.НеИспользовать = Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПользователиПользователь.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Пользователи.Пользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредприятияТорговыйОбъект.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Предприятия.ТорговыйОбъект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредприятияПроизводственныйОбъект.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Предприятия.ПроизводственныйОбъект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредприятияПроизводственныйОбъект.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Объект.СоответствуетОрганизации");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме()
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура СоответствуетОрганизацииПриИзмененииСервер()
	
	Объект.СоответствуетОрганизации = Булево(СоответствуетОрганизации);
	
	ИнтеграцияВЕТИСПереопределяемый.ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		СобственнаяОрганизацияЗначениеПоУмолчанию,
		СобственныйТорговыйОбъектЗначениеПоУмолчанию,
		СобственныйПроизводственныйОбъектЗначениеПоУмолчанию,
		СторонняяОрганизацияЗначениеПоУмолчанию,
		СтороннийТорговыйОбъектЗначениеПоУмолчанию);
	
	МассивТиповСобственнаяОрганизация = Новый Массив;
	МассивТиповСобственнаяОрганизация.Добавить(ТипЗнч(СобственнаяОрганизацияЗначениеПоУмолчанию));
	Элементы.Организация.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповСобственнаяОрганизация);
	
	МассивТиповСторонняяОрганизация = Новый Массив;
	МассивТиповСторонняяОрганизация.Добавить(ТипЗнч(СторонняяОрганизацияЗначениеПоУмолчанию));
	Элементы.СтороннийКонтрагент.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповСторонняяОрганизация);
	
	МассивТиповТорговыйОбъект = Новый Массив;
	Если Объект.СоответствуетОрганизации Тогда
		Если СобственныйТорговыйОбъектЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТиповТорговыйОбъект.Добавить(ТипЗнч(СобственныйТорговыйОбъектЗначениеПоУмолчанию));
		КонецЕсли;
		Если ИнтеграцияВЕТИС.ИспользуетсяПереработкаНаСтороне() 
			И СтороннийТорговыйОбъектЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТиповТорговыйОбъект.Добавить(ТипЗнч(СтороннийТорговыйОбъектЗначениеПоУмолчанию));
		КонецЕсли;
	ИначеЕсли СтороннийТорговыйОбъектЗначениеПоУмолчанию <> Неопределено Тогда
		МассивТиповТорговыйОбъект.Добавить(ТипЗнч(СтороннийТорговыйОбъектЗначениеПоУмолчанию));
	КонецЕсли;
	Если МассивТиповТорговыйОбъект.Количество() > 0 Тогда
		Элементы.ПредприятияТорговыйОбъект.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповТорговыйОбъект);
		Элементы.ПредприятияТорговыйОбъект.Видимость       = Истина;
	Иначе
		Элементы.ПредприятияТорговыйОбъект.Видимость = Ложь;
	КонецЕсли;
	
	МассивТиповПроизводственныйОбъект = Новый Массив;
	Если СобственныйПроизводственныйОбъектЗначениеПоУмолчанию <> Неопределено Тогда
		МассивТиповПроизводственныйОбъект.Добавить(ТипЗнч(СобственныйПроизводственныйОбъектЗначениеПоУмолчанию));
	КонецЕсли;
	Если МассивТиповПроизводственныйОбъект.Количество() > 0 Тогда
		Элементы.ПредприятияПроизводственныйОбъект.ОграничениеТипа = Новый ОписаниеТипов(МассивТиповПроизводственныйОбъект);
		Элементы.ПредприятияПроизводственныйОбъект.Видимость       = Истина;
	Иначе
		Элементы.ПредприятияПроизводственныйОбъект.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьДанныеСопоставления();
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
	УстановитьОтборСпискаПользователей();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ЗаполнитьДанныеСопоставления();
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоОсновныеПраваПриИзмененииНаСервере()
	
	НастройкиПредставленияПрав = Перечисления.ПраваДоступаВЕТИС.НастройкиПредставленияПравДоступаВЕТИС();
	
	Для Каждого НастройкаПредставления Из НастройкиПредставленияПрав Цикл
		ПолеСписка = Элементы["Пользователи" + НастройкаПредставления.ПравоДоступа];
		Если НЕ ОсновныеПраваДоступа Тогда
			ПолеСписка.Видимость = Истина;
		Иначе
			ПолеСписка.Видимость = НастройкаПредставления.Значимое;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо")
		 Или Объект.Тип.Пустая() Тогда
		
		Элементы.СтраницыИННКПП.ТекущаяСтраница = Элементы.СтраницаЮЛ;
		
	Иначе
		
		Элементы.СтраницыИННКПП.ТекущаяСтраница = Элементы.СтраницаИП;
		
	КонецЕсли;
	
	Если Объект.СоответствуетОрганизации Тогда
		
		Элементы.СтраницыЧемуСопоставлено.ТекущаяСтраница = Элементы.СтраницаСобственнаяОрганизация;
		Элементы.ИННОрганизацииНеСоответствуетОрганизацииВЕТИС.Видимость = ЗначениеЗаполнено(Форма.Объект.Контрагент)
		                                                                   И Не (Форма.ИНН = Объект.ИНН И Форма.КПП = Объект.КПП);
		
	Иначе
		
		Элементы.СтраницыЧемуСопоставлено.ТекущаяСтраница = Элементы.СтраницаСторонняяОрганизация;
		Элементы.ИННКонтрагентаНеСоответствуетОрганизацииВЕТИС.Видимость = ЗначениеЗаполнено(Форма.Объект.Контрагент)
		                                                                   И Не (Форма.ИНН = Объект.ИНН И Форма.КПП = Объект.КПП);
		
	КонецЕсли;
	
	Элементы.СопоставитьПоИННКПП.Доступность = ЗначениеЗаполнено(Объект.ИНН) И Форма.ЕстьПравоИзменения;
	Элементы.СопоставитьПоИНН.Доступность    = ЗначениеЗаполнено(Объект.ИНН) И Форма.ЕстьПравоИзменения;
	
	Элементы.СопоставитьПоИННКПП.Видимость = Не Объект.СоответствуетОрганизации;
	Элементы.СопоставитьПоИНН.Видимость    = Не Объект.СоответствуетОрганизации;
	
	Элементы.ПредприятияСоздатьПредприятие.Видимость   = Форма.ЕстьПравоИзменения И Форма.НастроеноПодключение;
	Элементы.ПредприятияСвязатьСПредприятием.Видимость = Форма.ЕстьПравоИзменения И Форма.НастроеноПодключение;
	Элементы.ПредприятияРазорватьСвязь.Видимость       = Форма.ЕстьПравоИзменения И Форма.НастроеноПодключение;
	Элементы.ПредприятияИзменитьGLN.Видимость          = Форма.ЕстьПравоИзменения И Форма.НастроеноПодключение;
	
	Элементы.ПредприятияЗагрузитьВсе.Доступность                 = Форма.ЕстьПравоИзменения;
	Элементы.ПредприятияЗагрузитьВсеСинхронизировать.Доступность = Форма.ЕстьПравоИзменения;
	Элементы.ПредприятияАктуализировать.Доступность              = Форма.ЕстьПравоИзменения;
	
	Элементы.ПредприятияПодобрать.Видимость       = Не Объект.СоответствуетОрганизации И Форма.ЕстьПравоИзменения;
	Элементы.ПредприятияЗагрузитьВсе.Видимость    = Не Объект.СоответствуетОрганизации И Форма.ЕстьПравоИзменения;
	Элементы.ПредприятияАктуализировать.Видимость = Не Объект.СоответствуетОрганизации И Форма.ЕстьПравоИзменения;
	
	Элементы.ПредприятияНеИспользовать.Видимость                  = Объект.СоответствуетОрганизации;
	Элементы.ПредприятияСнятьФлажки.Видимость                     = Объект.СоответствуетОрганизации;
	Элементы.ПредприятияУстановитьФлажки.Видимость                = Объект.СоответствуетОрганизации;
	Элементы.КонтекстноеМенюПредприятияСнятьФлажки.Видимость      = Объект.СоответствуетОрганизации;
	Элементы.КонтекстноеМенюПредприятияУстановитьФлажки.Видимость = Объект.СоответствуетОрганизации;
	
	Элементы.ПредприятияЗагрузитьВсеСинхронизировать.Видимость = Объект.СоответствуетОрганизации И Форма.ЕстьПравоИзменения;
	
	Элементы.СтраницаПользователи.Видимость          = Форма.НастроеноПодключение Или Форма.Объект.СоответствуетОрганизации;
	Элементы.СтраницаУполномоченноеГашение.Видимость = Форма.НастроеноПодключение;
	
	Если Элементы.СтраницаПользователи.Видимость Тогда
		Если Объект.СоответствуетОрганизации Тогда
			Элементы.ГруппаСвязьСПользователем.Видимость                          = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ИзменитьПраваДоступа.Видимость                               = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.СинхронизироватьСписокПользователей.Видимость                = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиСоздатьПользователя.Видимость                    = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиСкопироватьПользователя.Видимость                = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиИзменитьПраваДоступа.Видимость                   = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиУдалитьПользователя.Видимость                    = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиСинхронизироватьСписокПользователей.Видимость    = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиКонтекстноеМенюСкопироватьПользователя.Видимость = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиКонтекстноеМенюИзменитьПраваДоступа.Видимость    = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
			Элементы.ПользователиКонтекстноеМенюУдалитьПользователя.Видимость     = Форма.ЭтоАдминистраторХозяйствующегоСубъекта;
		Иначе
			Элементы.ГруппаСвязьСПользователем.Видимость                          = Истина;
			Элементы.ИзменитьПраваДоступа.Видимость                               = Истина;
			Элементы.СинхронизироватьСписокПользователей.Видимость                = Ложь;
			Элементы.ПользователиСоздатьПользователя.Видимость                    = Истина;
			Элементы.ПользователиСкопироватьПользователя.Видимость                = Истина;
			Элементы.ПользователиИзменитьПраваДоступа.Видимость                   = Истина;
			Элементы.ПользователиУдалитьПользователя.Видимость                    = Истина;
			Элементы.ПользователиСинхронизироватьСписокПользователей.Видимость    = Ложь;
			Элементы.ПользователиКонтекстноеМенюСкопироватьПользователя.Видимость = Истина;
			Элементы.ПользователиКонтекстноеМенюИзменитьПраваДоступа.Видимость    = Истина;
			Элементы.ПользователиКонтекстноеМенюУдалитьПользователя.Видимость     = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастроеноПодключение()
	
	НастроеноПодключение = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|ГДЕ
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
		|");
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", Объект.Ссылка);
		Результат = Запрос.Выполнить();
		НастроеноПодключение = Не Результат.Пустой();
		
	КонецЕсли;
	
	Возврат НастроеноПодключение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоАдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект)
	
	Возврат ПользователиВЕТИС.ЭтоАдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеЭтоАдминистраторХозяйствующегоСубъекта(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.СоответствуетОрганизации И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Форма.ЭтоАдминистраторХозяйствующегоСубъекта = ЭтоАдминистраторХозяйствующегоСубъекта(Объект.Ссылка);
	Иначе
		Форма.ЭтоАдминистраторХозяйствующегоСубъекта = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСопоставления()
	
	ДанныеСопоставления = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Контрагент)
		И ПравоДоступа("Чтение", Объект.Контрагент.Метаданные()) Тогда
		
		ДанныеСопоставления = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Объект.Контрагент);
		
	КонецЕсли;
	
	Если ДанныеСопоставления <> Неопределено Тогда
		
		ИНН = ДанныеСопоставления.ИНН;
		КПП = ДанныеСопоставления.КПП;
		
	Иначе
		
		ИНН = "";
		КПП = "";
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Справочники.ХозяйствующиеСубъектыВЕТИС);
	ЕстьПравоСозданияКонтрагента = ИнтеграцияИС.ЕстьПравоСозданияКонтрагента();
	НастроеноПодключение = НастроеноПодключение();
	
	ОбновитьЗначениеЭтоАдминистраторХозяйствующегоСубъекта(ЭтотОбъект);
	
	ЗаполнитьТаблицуУполномоченногоГашения();
	
	СоответствуетОрганизации = Число(Объект.СоответствуетОрганизации);
	
	СоответствуетОрганизацииПриИзмененииСервер();
	
	ЗаполнитьДанныеСопоставления();
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПользователяХозяйствующегоСубъектаНаСервере(ХозяйствующийСубъект, ПользовательВЕТИС)
	
	ПользователиВЕТИС.УдалитьСвязьПользователяСХозяйствующимСубъектом(ХозяйствующийСубъект, ПользовательВЕТИС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьМножественнаяСвязь(Форма, Предприятие)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Предприятие", Предприятие);
	
	Возврат Форма.Объект.Предприятия.НайтиСтроки(ПараметрыОтбора).Количество() > 1;
	
КонецФункции

#Область СинхронизацияПредприятий

&НаКлиенте
Процедура ВопросПриСинхронизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Записать();

	Если ЗаписаноУспешно Тогда
		ВыполнитьСинхронизациюПредприятий(ДополнительныеПараметры.ЗагрузитьНовые);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПользователяВЕТИС(ТекущиеДанные)
	
	ПолноеИмяФормы = "Справочник.ПользователиВЕТИС.ФормаОбъекта";
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ПользовательВЕТИС);
	РежимОткрытия  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииПользователяВЕТИС", ЭтотОбъект);
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект,,,, ОповещениеПриЗакрытии, РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииПользователяВЕТИС(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Пользователи.Обновить();
	
	ОбновитьЗначениеЭтоАдминистраторХозяйствующегоСубъекта(ЭтотОбъект);
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНазначенияПрав(ТекущиеДанные, Создание, Копирование)
	
	ПолноеИмяФормы = "РегистрСведений.ПраваДоступаПользователейВЕТИС.Форма.ФормаНазначениеПрав";
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеНового", Создание);
	ПараметрыФормы.Вставить("ХозяйствующийСубъект", Объект.Ссылка);
	
	Если Создание Тогда
		Если Копирование И ТекущиеДанные <> Неопределено Тогда
			ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.ПользовательВЕТИС);
		КонецЕсли;
	ИначеЕсли ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ПользовательВЕТИС", ТекущиеДанные.ПользовательВЕТИС);
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаИдентификаторовПредприятий()

	ТаблицаПредприятий = Новый ТаблицаЗначений;
	ТаблицаПредприятий.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТаблицаПредприятий.Колонки.Добавить("GLN",           ОбщегоНазначения.ОписаниеТипаСтрока(13));
	
	ПолучениеДанныхЗавершено      = Ложь;
	КоличествоПолученныхЭлементов = 0;
	НомерСтраницы                 = 1;
	
	Пока Не ПолучениеДанныхЗавершено Цикл
		
		ДанныеВЕТИС = ЦерберВЕТИСВызовСервера.СписокПредприятийХозяйствующегоСубъекта(Объект.Идентификатор, НомерСтраницы);
		
		Если ЗначениеЗаполнено(ДанныеВЕТИС.ТекстОшибки) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДанныеВЕТИС.ТекстОшибки);
			Возврат Неопределено;
		
		КонецЕсли;
		
		Для Каждого ДанныеПредприятия Из ДанныеВЕТИС.Список Цикл
			
			НоваяСтрока = ТаблицаПредприятий.Добавить();
			НоваяСтрока.Идентификатор = ДанныеПредприятия.enterprise.guid;
			Если ДанныеПредприятия.globalID.Количество() > 0 Тогда
				НоваяСтрока.GLN = ДанныеПредприятия.globalID[0];
			КонецЕсли;
			
			КоличествоПолученныхЭлементов = КоличествоПолученныхЭлементов + 1;
			
		КонецЦикла;
		
		Если КоличествоПолученныхЭлементов = ДанныеВЕТИС.ОбщееКоличество Тогда
			ПолучениеДанныхЗавершено  = Истина;
		Иначе
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПредприятий;

КонецФункции

&НаСервере
Процедура ЗагрузитьОтсутствующиеПредприятия(ТаблицаИдентификаторовПредприятий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИдентификаторыGLNПредприятий.Идентификатор КАК Идентификатор,
	|	ИдентификаторыGLNПредприятий.GLN           КАК GLN
	|ПОМЕСТИТЬ ИдентификаторыGLNПредприятий
	|ИЗ
	|	&ИдентификаторыGLNПредприятий КАК ИдентификаторыGLNПредприятий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыGLNПредприятий.Идентификатор КАК Идентификатор
	|ИЗ
	|	ИдентификаторыGLNПредприятий КАК ИдентификаторыGLNПредприятий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредприятияВЕТИС КАК ПредприятияВЕТИС
	|		ПО ИдентификаторыGLNПредприятий.Идентификатор = ПредприятияВЕТИС.Идентификатор
	|ГДЕ
	|	ПредприятияВЕТИС.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ИдентификаторыGLNПредприятий", ТаблицаИдентификаторовПредприятий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеПредприятия = ЦерберВЕТИСВызовСервера.ПредприятиеПоGUID(Выборка.Идентификатор, Истина);
		ИнтеграцияВЕТИС.ЗагрузитьПредприятие(ДанныеПредприятия.Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСинхронизациюПредприятий(ЗагрузитьНовые)

	ТаблицаИдентификаторовПредприятий = ТаблицаИдентификаторовПредприятий();
	
	Если ТаблицаИдентификаторовПредприятий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗагрузитьНовые Тогда
			ЗагрузитьОтсутствующиеПредприятия(ТаблицаИдентификаторовПредприятий);
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИдентификаторыGLNПредприятий.Идентификатор КАК Идентификатор,
		|	ИдентификаторыGLNПредприятий.GLN           КАК GLN
		|ПОМЕСТИТЬ ИдентификаторыGLNПредприятий
		|ИЗ
		|	&ИдентификаторыGLNПредприятий КАК ИдентификаторыGLNПредприятий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредприятияВЕТИС.Ссылка          КАК Предприятие,
		|	ИдентификаторыGLNПредприятий.GLN КАК GLN
		|ИЗ
		|	ИдентификаторыGLNПредприятий КАК ИдентификаторыGLNПредприятий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредприятияВЕТИС КАК ПредприятияВЕТИС
		|		ПО ИдентификаторыGLNПредприятий.Идентификатор = ПредприятияВЕТИС.Идентификатор
		|");
		
		Запрос.УстановитьПараметр("ИдентификаторыGLNПредприятий", ТаблицаИдентификаторовПредприятий);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Предприятие");
		
		ЗагруженныеПредприятия = Новый Соответствие;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗагруженныеПредприятия.Вставить(Выборка.Предприятие, Истина);
			
			ПараметрыОтбора.Предприятие = Выборка.Предприятие;
			
			НайденныеСтроки = Объект.Предприятия.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеСтроки.Количество() = 0 И ЗагрузитьНовые Тогда
				СтрокаТЧ = Объект.Предприятия.Добавить();
				СтрокаТЧ.Предприятие = Выборка.Предприятие;
				СтрокаТЧ.GLN         = Выборка.GLN;
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				СтрокаТЧ.GLN = Выборка.GLN;
			КонецЦикла;
			
		КонецЦикла;
		
		СтрокиТЧКУдалению = Новый Массив;
		Для Каждого СтрокаТЧ Из Объект.Предприятия Цикл
			Если ЗагруженныеПредприятия.Получить(СтрокаТЧ.Предприятие) = Неопределено Тогда
				СтрокиТЧКУдалению.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из СтрокиТЧКУдалению Цикл
			Объект.Предприятия.Удалить(СтрокаТЧ);
		КонецЦикла;
		
		Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОписаниеИсключения = НСтр( "ru = 'Синхронизация списка предприятий не выполнена по причине:'");
		ВызватьИсключение (ОписаниеИсключения + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПредприятий

&НаКлиенте
Процедура ВопросПриПодбореПредприятийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Записать();

	Если ЗаписаноУспешно Тогда
		ВыполнитьПодборПредприятий();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборПредприятий()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",                      Объект.Идентификатор);
	ПараметрыФормы.Вставить("ПереходитьКПредприятиям",            Истина);
	ПараметрыФормы.Вставить("НеПоказыватьПереходКЗагруженномуХС", Истина);
	
	ОповещениеОкончанияПодбора = Новый ОписаниеОповещения("ОкончаниеПодбораПредприятий", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ДанныеКлассификатора",
		ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОкончанияПодбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПодбораПредприятий(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Объект.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставленияНаФорме()
	
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеПартнеров

&НаСервере
Функция СопоставитьПоИННКППСервер()
	
	Если Объект.СоответствуетОрганизации Тогда
		
		НайденноеСоответствие = ИнтеграцияИС.ОрганизацияПоИННКПП(Объект.ИНН, Объект.КПП);
		
	Иначе
		
		НайденноеСоответствие = ИнтеграцияИС.КонтрагентПоИННКПП(Объект.ИНН, Объект.КПП);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденноеСоответствие) Тогда
		
		Объект.Контрагент = НайденноеСоответствие;
		ИНН               = Объект.ИНН;
		КПП               = Объект.КПП;
		УправлениеЭлементамиФормы(ЭтотОбъект);
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборСпискаПользователей()
	
	Если НастроеноПодключение
		Или Объект.СоответствуетОрганизации Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Пользователи, 
			"ХозяйствующийСубъект", 
			Объект.Ссылка, 
			ВидСравненияКомпоновкиДанных.Равно,,
			Истина);
		
		ОпределитьКоличествоПользователей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьКоличествоПользователей()
	
	Схема = Элементы.Пользователи.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Пользователи.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема,Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	КоличествоПользователей = Результат.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКонтрагента(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДанныеКонтрагента = ИнтеграцияВЕТИСКлиентСервер.РеквизитыСозданияКонтрагента();
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Объект);
		ДанныеКонтрагента.ЮридическийАдрес = Объект.АдресПредставление;
		
		СобытияФормВЕТИСКлиентПереопределяемый.ОткрытьФормуСозданияКонтрагента(ЭтотОбъект, ДанныеКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореКонтрагента(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.Контрагент = ВыбранноеЗначение;
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПомощникаСозданияНовогоПредприятия()
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ХозяйствующийСубъект", Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("Предприятие",          Неопределено);
	
	ОткрытьФорму(
		"Обработка.КлассификаторыВЕТИС.Форма.СозданиеХозяйствующегоСубъектаИПредприятия",
		ПараметрыОткрытияФормы,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриСозданииНовогоПредприятияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Записать();
	
	Если ЗаписаноУспешно Тогда
		ОткрытьФормуПомощникаСозданияНовогоПредприятия();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСвязи

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыФормыИзмененияСвязи()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("GLN",                  "");
	ПараметрыФормы.Вставить("ВариантИзменения",     "");
	ПараметрыФормы.Вставить("Предприятие",          ПредопределенноеЗначение("Справочник.ПредприятияВЕТИС.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ХозяйствующийСубъект", ПредопределенноеЗначение("Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка"));
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ИзменениеСвязи

Процедура ЗаполнитьТаблицуУполномоченногоГашения();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиУполномоченногоГашенияВЕТИС.Грузополучатель КАК Грузополучатель
	|ИЗ
	|	РегистрСведений.НастройкиУполномоченногоГашенияВЕТИС КАК НастройкиУполномоченногоГашенияВЕТИС
	|ГДЕ
	|	НастройкиУполномоченногоГашенияВЕТИС.Грузоотправитель = &ХозяйствующийСубъект");
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", Объект.Ссылка);
	
	УполномоченноеГашение.Загрузить(Запрос.Выполнить().Выгрузить());
	
	КоличествоСтрокУполномоченноеГашение = УполномоченноеГашение.Количество();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти