
#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// РАБОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Функция подключает внешнюю обработку для последующего открытия ее формы.
//
Функция ПодключитьОбработкуНаСервере(ОбработкаТестирования)
	
	ОбработкаОбъект = ОбработкаТестирования.ПолучитьОбъект();
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбработкаОбъект.ДанныеОбработки.Получить(), Новый УникальныйИдентификатор);
	Возврат ВнешниеОбработки.Подключить(АдресВХранилище, , Истина);
	
КонецФункции

&НаСервере
// Процедура фиксирует результат выполнения обработки на сервере.
//
Процедура ЗафиксироватьРезультатВыполненияОбработкиНаСервере(АдресХранилищаРезультата)
	
	РезультатыТестирования = ПолучитьИзВременногоХранилища(АдресХранилищаРезультата);
	Если ТипЗнч(РезультатыТестирования) = Тип("ТаблицаЗначений") Тогда
		
		Для Каждого СтрокаРезультата Из РезультатыТестирования Цикл
			ДобавитьИнформациюОбОшибке(ЭтаФорма, СтрокаРезультата.ИнформацияОбОшибке, СтрокаРезультата.ПредставлениеОбъекта);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Фиксирует информацию о выявленной ошибке в таблице результатов.
//
Процедура ДобавитьИнформациюОбОшибке(Форма, ИнформацияОбОшибке, ПредставлениеОбъекта = "")
	
	НоваяСтрокаОшибки = Форма.ОбнаруженныеОшибки.Добавить();
	НоваяСтрокаОшибки.ОбработкаТестирования = Строка(Форма.ТекущаяВыполняемаяОбработкаТестирования);
	НоваяСтрокаОшибки.ИнформацияОбОшибке    = ИнформацияОбОшибке;
	НоваяСтрокаОшибки.ПредставлениеОбъекта  = ПредставлениеОбъекта;
	
КонецПроцедуры

&НаКлиенте
// Процедура отмечает текущую обработку как выполненную.
//
Процедура ОтметитьТекущуюОбработкуКакВыполненную()
	
	НайденныеСтроки = ОбработкиТестирования.НайтиСтроки(Новый Структура("ОбработкаТестирования", ТекущаяВыполняемаяОбработкаТестирования));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Выполнена = Истина;
	КонецЕсли;
	
	ТекущаяВыполняемаяОбработкаТестирования = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Процедура завершает автоматическое тестирование конфигурации.
//
Процедура ЗавершитьАвтоматическоеТестированиеКонфигурации()
	
	ОтключитьОбработчикОжидания("ЗапуститьИВыполнитьОбработкуТестирования");
	
	ПодключитьсяКМенеджеруТестированияИВернутьРезультат();
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура подключается к менеджеру тестирования через com-соединение
// и передает ему результаты тестирования.
Процедура ПодключитьсяКМенеджеруТестированияИВернутьРезультат()
	
	V83 = Новый COMобъект("V83.ComConnector");
	
	// В исходной строке соединения заменяем символ ' на кавычки, так как они
	// были конвертированы при передаче параметров запуска тестовой базы.
	СтрокаСоединения = СтрЗаменить(МенеджерТестирования_СтрокаСоединения, "'", """") + " Usr = '" + МенеджерТестирования_Логин+"'; Pwd = '" + МенеджерТестирования_Пароль + "'";
	
	Попытка
		Подключение = V83.Connect(СтрокаСоединения);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось подключиться к базе" + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	МассивСтруктурОшибок = Новый Массив;
	
	Для Каждого ТекСтрокаОшибки Из ОбнаруженныеОшибки Цикл
		
		СтруктураОшибки = Новый Структура("ОбработкаТестирования, ИнформацияОбОшибке, ПредставлениеОбъекта");
		ЗаполнитьЗначенияСвойств(СтруктураОшибки, ТекСтрокаОшибки);
		
		МассивСтруктурОшибок.Добавить(СтруктураОшибки);
		
	КонецЦикла;
	
	Подключение.АТК_ОбщегоНазначенияВызовСервера.ЗаписатьРезультатыТестированияКонфигурации(МассивСтруктурОшибок);
	
	Подключение = Неопределено;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// УПРАВЛЯЮЩИЕ ПРОЦЕДУРЫ

&НаКлиенте
// Процедура выполняет периодическую проверку и запуск обработок тестирования.
//
Процедура ЗапуститьИВыполнитьОбработкуТестирования()
	
	// Если обработка все еще выполняется, то ожидаем ее завершения.
	Если Не ТекущаяВыполняемаяОбработкаТестирования.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// Если в очереди нет ни одной обработки к выполнению, то завершаем процесс тестирования.
	ОбработкиКВыполнению = ОбработкиТестирования.НайтиСтроки(Новый Структура("Выполнена", Ложь));
	Если ОбработкиКВыполнению.Количество() = 0 Тогда
		ЗавершитьАвтоматическоеТестированиеКонфигурации();
		Возврат
	КонецЕсли;
	
	// Определим текущую выполняемую обработку тестирования.
	ТекущаяВыполняемаяОбработкаТестирования = ОбработкиКВыполнению[0].ОбработкаТестирования;
	
	// Подключение внешней обработки на сервере.
	ИмяОбработки = ПодключитьОбработкуНаСервере(ТекущаяВыполняемаяОбработкаТестирования);
	
	// Открытие формы обработки на клиенте и запуск автотеста.
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияОбработки", ЭтотОбъект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗапуститьТестированиеПриОткрытии", Истина);
	
	ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик окончания проверки обработки.
//
Процедура ОбработатьРезультатВыполненияОбработки(АдресХранилищаРезультата, ДопПараметры) Экспорт
	
	Если Не АдресХранилищаРезультата = Неопределено Тогда
		
		ЗафиксироватьРезультатВыполненияОбработкиНаСервере(АдресХранилищаРезультата);
		ОтметитьТекущуюОбработкуКакВыполненную();
		
	Иначе
		ДобавитьИнформациюОбОшибке(ЭтаФорма, "При выполнении обработки тестирования возникли ошибки!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получение параметров доступа к менеджеру тестирования.
	Параметры.Свойство("МенеджерТестирования_СтрокаСоединения", МенеджерТестирования_СтрокаСоединения);
	Параметры.Свойство("МенеджерТестирования_Логин",            МенеджерТестирования_Логин);
	Параметры.Свойство("МенеджерТестирования_Пароль",           МенеджерТестирования_Пароль);
	
	// Заполнение списка обработок тестирования, который необходимо выполнить.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АТК_ОбработкиАвтоматическогоТестирования.Ссылка КАК ОбработкаТестирования
	|ИЗ
	|	Справочник.АТК_ОбработкиАвтоматическогоТестирования КАК АТК_ОбработкиАвтоматическогоТестирования
	|ГДЕ
	|	НЕ АТК_ОбработкиАвтоматическогоТестирования.ПометкаУдаления
	|	И АТК_ОбработкиАвтоматическогоТестирования.Использование = 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОбработкиТестирования.Добавить();
		НоваяСтрока.ОбработкаТестирования = Выборка.ОбработкаТестирования;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗапуститьИВыполнитьОбработкуТестирования", 1, Ложь);
	
КонецПроцедуры

#КонецОбласти
