#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Организация  = Параметры.Организация;
	Наименование = СтрШаблон("%1, %2", 
		Объект.КонтролирующийОрган,
		?(Объект.ПлановаяПроверка, НСтр("ru='плановая проверка'"), НСтр("ru='внеплановая проверка'")));
	ИнформацияОПодготовке = Справочники.ПроверкиКонтролирующимиОрганами.ИнформацияОПодготовкеКПроверке(
		Объект.КонтролирующийОрган);
	Если ЗначениеЗаполнено(ИнформацияОПодготовке.URL) Тогда
		ЗаголовокКакПодготовиться = СтрШаблон(НСтр("ru='Как подготовиться к проверке: %1'"), ИнформацияОПодготовке.Раздел);
		Элементы.ДекорацияКакПодготовиться.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокКакПодготовиться, , , , 
			ИнформацияОПодготовке.URL);
		Элементы.ДекорацияКакПодготовиться.Видимость = Истина;
	КонецЕсли;
	ЕстьПравоНаПросмотрЗаявлений = ПравоДоступа("Просмотр", 
		Метаданные.Документы.УведомлениеОСпецрежимахНалогообложения);
	ЕстьПравоНаСозданиеЗаявлений = ПравоДоступа("ИнтерактивноеДобавление", 
		Метаданные.Документы.УведомлениеОСпецрежимахНалогообложения);
	Если ЕстьПравоНаПросмотрЗаявлений Тогда
		ИнформацияОбОтмене = Справочники.ПроверкиКонтролирующимиОрганами.МожноПодатьЗаявлениеОбОтменеПроверки(
			Объект.ПлановаяПроверка, Организация, Объект.ПериодПроверки);
		Если ИнформацияОбОтмене.Результат Тогда
			ДанныеЗаявления = Справочники.ПроверкиКонтролирующимиОрганами.ДанныеПодготовленногоЗаявленияОбОтменеПроверки(
				Объект.Идентификатор, Организация);
			Если ЗначениеЗаполнено(ДанныеЗаявления.Заявление) Тогда
				ПоказатьПодготовленноеЗаявление(ДанныеЗаявления);
			ИначеЕсли ЕстьПравоНаСозданиеЗаявлений Тогда
				Если ИнформацияОбОтмене.Тип = "ЮридическоеЛицо" Тогда
					Элементы.ДекорацияОтменаПроверкиЮридическоеЛицо.Видимость = Истина;
				ИначеЕсли ИнформацияОбОтмене.Тип = "Предприниматель" Тогда
					Элементы.ДекорацияОтменаПроверкиПредприниматель.Видимость = Истина;
				КонецЕсли;
			КонецЕсли;
			Элементы.ЦельПроверки.Высота = СтрДлина(Объект.ЦельПроверки) / 80 + 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_УведомлениеОСпецрежимахНалогообложения" Тогда
	
		ЗапомнитьСозданиеЗаявленияОбОтменеПроверки(Источник);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОтменаПроверкиЮридическоеЛицоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтменаПроверкиОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "ЮридическоеЛицо");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменаПроверкиПредпринимательОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтменаПроверкиОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "Предприниматель");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКалендарьПроверок(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ОткрытьФорму("Отчет.КалендарьПроверокКонтролирующимиОрганами.Форма", 
		ПараметрыФормы, 
		, 
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтменаПроверкиОбработкаНавигационнойСсылки(НавигационнаяСсылка, СтандартнаяОбработка, Тип)

	Если НавигационнаяСсылка <> "РегламентированноеУведомлениеИсключениеПроверки" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Тип", Тип);
	СтруктураПараметров.Вставить("КонтролирующийОрган", Объект.КонтролирующийОрган);
	СтруктураПараметров.Вставить("ПериодПроверки",      Объект.ПериодПроверки);
	ДанныеЗаполнения = ДанныеЗаполненияЗаявления(СтруктураПараметров);
	РегламентированнаяОтчетностьКлиент.СоздатьУведомлениеОСпецрежимах(
		Организация,
		ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеИсключенииПроверки"),
		ДанныеЗаполнения);
	СозданоЗаявлениеОбОтменеПроверки = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЗаполненияЗаявления(Знач СтруктураПараметров)
	
	Возврат Справочники.ПроверкиКонтролирующимиОрганами.ДанныеЗаполненияЗаявленияОбОтменеПроверки(СтруктураПараметров);

КонецФункции

&НаСервере
Процедура ЗапомнитьСозданиеЗаявленияОбОтменеПроверки(Заявление)
	
	Если НЕ СозданоЗаявлениеОбОтменеПроверки Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.ЗаявленияОбОтменеПроверокКонтролирующимиОрганами.СоздатьМенеджерЗаписи();
	Запись.Организация   = Организация;
	Запись.Идентификатор = Объект.Идентификатор;
	Запись.Заявление     = Заявление;
	Запись.Записать();
	
	ДанныеЗаявления = Справочники.ПроверкиКонтролирующимиОрганами.ДанныеПодготовленногоЗаявленияОбОтменеПроверки(
		Объект.Идентификатор, Организация);
	Если ЗначениеЗаполнено(ДанныеЗаявления.Заявление) Тогда
		ПоказатьПодготовленноеЗаявление(ДанныеЗаявления);
	КонецЕсли;
	
	СозданоЗаявлениеОбОтменеПроверки = Ложь;

КонецПроцедуры 

&НаСервере
Процедура ПоказатьПодготовленноеЗаявление(ДанныеЗаявления)
	
	ЧастиСтроки = Новый Массив;
	ТекстЗаявление = НСтр("ru='Заявление об исключении из плана проверок'");
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстЗаявление, , , , 
		ПолучитьНавигационнуюСсылку(ДанныеЗаявления.Заявление)));
	ЧастиСтроки.Добавить(" " + СтрШаблон(НСтр("ru='подготовлено %1 г.'"), Формат(ДанныеЗаявления.Дата, "ДЛФ=D")));
	Элементы.ДекорацияПодготовленноеЗаявлениеОбОтменеПроверки.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
	
	Элементы.ДекорацияПодготовленноеЗаявлениеОбОтменеПроверки.Видимость = Истина;
	Элементы.ДекорацияОтменаПроверкиЮридическоеЛицо.Видимость           = Ложь;
	Элементы.ДекорацияОтменаПроверкиПредприниматель.Видимость           = Ложь;

КонецПроцедуры

#КонецОбласти

