#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновление списка проверок наших организаций контролирующими органами по данным веб-сервиса.
//
Процедура ОбновитьПроверки() Экспорт
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыСервиса.Организация,
	|	РеквизитыСервиса.ИНН КАК ИНН,
	|	РеквизитыСервиса.ИНН КАК Код,
	|	РеквизитыСервиса.ОбластьДанныхВспомогательныеДанные
	|ИЗ
	|	РегистрСведений.РеквизитыСервисаПроверокКонтролирующимиОрганами КАК РеквизитыСервиса";
	ТаблицаРеквизиты = Запрос.Выполнить().Выгрузить();
	
	ОбновитьПроверкиПоТаблицеОрганизаций(ТаблицаРеквизиты, Истина);
	
КонецПроцедуры

// Обновление списка проверок контролирующими органами наших организаций, указанных в таблице, по данным веб-сервиса.
//
// Параметры:
//  ТаблицаРеквизиты  - ТаблицаЗначений - таблица организаций, по которым надо получить данные.
//  СоздаватьРегламентноеЗадание  - Булево - создавать ли дополнительное регламентное задание,
//                 если при выполнении текущего задания по некоторым ИНН сервис вернул признак ОжиданиеОтвета.
//
Процедура ОбновитьПроверкиПоТаблицеОрганизаций(ТаблицаРеквизиты, СоздаватьРегламентноеЗадание = Ложь) Экспорт
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если РазделениеВключено Тогда
		ТаблицаРеквизиты.Индексы.Добавить("ОбластьДанныхВспомогательныеДанные");
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРеквизиты.ИНН,
	|	ТаблицаРеквизиты.ОбластьДанныхВспомогательныеДанные
	|ПОМЕСТИТЬ ТаблицаРеквизиты
	|ИЗ
	|	&ТаблицаРеквизиты КАК ТаблицаРеквизиты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаРеквизиты.ИНН,
	|	ТаблицаРеквизиты.ОбластьДанныхВспомогательныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверкиКонтролирующимиОрганами.Код КАК ИНН,
	|	ПроверкиКонтролирующимиОрганами.Идентификатор,
	|	ПроверкиКонтролирующимиОрганами.ОбластьДанныхВспомогательныеДанные
	|ПОМЕСТИТЬ ПроверкиКонтролирующимиОрганами
	|ИЗ
	|	Справочник.ПроверкиКонтролирующимиОрганами КАК ПроверкиКонтролирующимиОрганами
	|ГДЕ
	|	ПроверкиКонтролирующимиОрганами.ПериодПроверки >= &НачалоТекущегоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ПроверкиКонтролирующимиОрганами.ОбластьДанныхВспомогательныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверкиКонтролирующимиОрганами.ИНН,
	|	ПроверкиКонтролирующимиОрганами.Идентификатор,
	|	ПроверкиКонтролирующимиОрганами.ОбластьДанныхВспомогательныеДанные
	|ИЗ
	|	ПроверкиКонтролирующимиОрганами КАК ПроверкиКонтролирующимиОрганами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРеквизиты КАК ТаблицаРеквизиты
	|		ПО ПроверкиКонтролирующимиОрганами.ИНН = ТаблицаРеквизиты.ИНН
	|			И ПроверкиКонтролирующимиОрганами.ОбластьДанныхВспомогательныеДанные = ТаблицаРеквизиты.ОбластьДанныхВспомогательныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРеквизиты.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
	|ИЗ
	|	ТаблицаРеквизиты КАК ТаблицаРеквизиты";
	
	НачалоТекущегоМесяца = НачалоМесяца(ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ТаблицаРеквизиты",     ТаблицаРеквизиты);
	Запрос.УстановитьПараметр("НачалоТекущегоМесяца", НачалоТекущегоМесяца);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	СтарыеПроверки = РезультатыЗапроса[2].Выгрузить();
	СтарыеПроверки.Индексы.Добавить("ИНН,ОбластьДанныхВспомогательныеДанные,Идентификатор");
	ОбластиДанных = РезультатыЗапроса[3].Выгрузить();
	
	НаименованияОргановИСлова = НаименованияОргановИСлова();
	
	// Записываем новые проверки в справочник, а также в регистр для создания новых задач бухгалтера.
	ОтборНаличиеПроверок          = Новый Структура("ИНН,ОбластьДанныхВспомогательныеДанные");
	ОтборПроверкиПоИдентификатору = Новый Структура("ИНН,ОбластьДанныхВспомогательныеДанные,Идентификатор");
	// Ключ - ИНН, значение - таблица значений - таблица проверок.
	ДанныеОПроверках = Новый Соответствие;
	// Ключ - ИНН, значение - булево - есть ли в таблице проверок данные о плановых проверках, или только о внеплановых.
	ЕстьПлановыеПроверки = Новый Соответствие; 
	// Получение данных от сервиса может происходить асинхронно, 
	// при первом обращении по некоторым ИНН сервис может вернуть признак ОжиданиеОтвета. 
	// По всем таким ИНН вызываем дополнительное регламентное задание.
	ТаблицаОжиданиеОтвета = ТаблицаРеквизиты.СкопироватьКолонки();
	
	Для каждого СтрокаОбласти Из ОбластиДанных Цикл
		
		Если РазделениеВключено Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, СтрокаОбласти.ОбластьДанных);
			// Идентификатор см. в РаботаСКонтрагентами.ИдентификаторУслугиИнформацияОПроверкахКонтролирующимиОрганами.
			УслугаПодключена = ИнтернетПоддержкаПользователей.УслугаПодключена(
				"1c-counteragent-organization-audit",
				СтрокаОбласти.ОбластьДанных);
			Если НЕ УслугаПодключена Тогда
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОтборПоОбласти = Новый Структура("ОбластьДанныхВспомогательныеДанные", СтрокаОбласти.ОбластьДанных);
		ТаблицаРеквизитыОбласти = ТаблицаРеквизиты.НайтиСтроки(ОтборПоОбласти);
		
		Для каждого СтрокаТаблицы Из ТаблицаРеквизитыОбласти Цикл
			ИНН = СтрокаТаблицы.ИНН;
			ЗаполнитьЗначенияСвойств(ОтборНаличиеПроверок, СтрокаТаблицы);
			СтарыеПроверкиПоИНН = СтарыеПроверки.НайтиСтроки(ОтборНаличиеПроверок);
			ТолькоВнеплановые   = СтарыеПроверкиПоИНН.Количество() > 0;
			ДанныеОПроверкахПоИНН     = ДанныеОПроверках[ИНН];
			ЕстьПлановыеПроверкиПоИНН = ЕстьПлановыеПроверки[ИНН];
			Если ДанныеОПроверкахПоИНН = Неопределено 
				ИЛИ ЕстьПлановыеПроверкиПоИНН = Неопределено
				ИЛИ НЕ ТолькоВнеплановые И НЕ ЕстьПлановыеПроверкиПоИНН Тогда
				ИнформацияОПроверках = ИнформацияОПроверкахОрганизацииПоИНН(ИНН, ТолькоВнеплановые);
				Если ЗначениеЗаполнено(ИнформацияОПроверках.ОписаниеОшибки) Тогда
					Продолжить;
				ИначеЕсли ИнформацияОПроверках.ОжиданиеОтвета Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаОжиданиеОтвета.Добавить(), СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ДанныеОПроверкахПоИНН = ИнформацияОПроверках.Проверки;
				ДанныеОПроверках.Вставить(ИНН, ДанныеОПроверкахПоИНН);
				ЕстьПлановыеПроверки.Вставить(ИНН, НЕ ТолькоВнеплановые);
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ОтборПроверкиПоИдентификатору, СтрокаТаблицы);
			Для каждого СтрокаПроверки Из ДанныеОПроверкахПоИНН Цикл
				ЭтоПроверкаПрошлогоПериода = СтрокаПроверки.ПериодПроверки < НачалоТекущегоМесяца;
				Если ЭтоПроверкаПрошлогоПериода Тогда
					Продолжить;
				КонецЕсли;
				ОтборПроверкиПоИдентификатору.Идентификатор = СтрокаПроверки.Идентификатор;
				НайденныеПроверки = СтарыеПроверки.НайтиСтроки(ОтборПроверкиПоИдентификатору);
				ЭтоНоваяПроверка  = НайденныеПроверки.Количество() = 0;
				Если ЭтоНоваяПроверка Тогда
					// Новый элемент справочника
					НоваяПроверка = Справочники.ПроверкиКонтролирующимиОрганами.СоздатьЭлемент();
					ЗаполнитьЗначенияСвойств(НоваяПроверка, СтрокаПроверки);
					ЗаполнитьЗначенияСвойств(НоваяПроверка, СтрокаТаблицы);
					НоваяПроверка.Наименование = КраткоеНаименованиеПроверки(НоваяПроверка.КонтролирующийОрган, НаименованияОргановИСлова);
					НоваяПроверка.Записать();
					// Новая запись регистра
					МенеджерЗаписи = РегистрыСведений.НовыеПроверкиКонтролирующимиОрганами.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТаблицы);
					МенеджерЗаписи.Проверка = НоваяПроверка.Ссылка;
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если РазделениеВключено Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	// В неразделенном режиме сразу создаем задачи бухгалтера.
	// В сервисе создание задач вызывается из разделенного задания ОбновлениеЗадачБухгалтера.
	Если НЕ РазделениеВключено Тогда
		СоздатьЗадачиБухгалтераПоНовымПроверкам();
		МобильноеПриложениеПредприниматель.ОтправитьУведомленияОЗадачах();
		СинхронизацияСКалендаремGoogle.СинхронизироватьЗадачи();
	КонецЕсли;
	
	// Дополнительное регламентное задание по ИНН, для которых сервис вернул признак ОжиданиеОтвета.
	Если СоздаватьРегламентноеЗадание
		И ТаблицаОжиданиеОтвета.Количество() > 0 Тогда
		НовоеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(
			Метаданные.РегламентныеЗадания.ОбновлениеПроверокКонтролирующимиОрганамиПоТаблицеОрганизаций);
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ТаблицаОжиданиеОтвета);
		НовоеЗадание.Параметры = ПараметрыЗадания;
		НовоеЗадание.Использование = Истина;
		НовоеЗадание.Наименование  = СтрШаблон(НСтр("ru='Обновление проверок по таблице организаций - %1'"), 
			Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		ЗадержкаВыполнения = 5 * 60; // 5 минут
		НачалоВыполнения = ТекущаяДатаСеанса() + ЗадержкаВыполнения;
		Расписание = НовоеЗадание.Расписание;
		Расписание.ДатаНачала  = НачалоВыполнения;
		Расписание.ВремяНачала = НачалоВыполнения;
		НовоеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Создание новых задач бухгалтера для подготовки к проверкам наших организаций контролирующими органами.
//
Процедура СоздатьЗадачиБухгалтераПоНовымПроверкам() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеПроверки.ОбластьДанныхВспомогательныеДанные,
	|	НовыеПроверки.Организация,
	|	НовыеПроверки.Проверка КАК Правило,
	|	НовыеПроверки.Проверка КАК Проверка,
	|	НовыеПроверки.Проверка.ПериодПроверки КАК ПериодСобытия,
	|	НовыеПроверки.Проверка.ДатаПроверки КАК Срок,
	|	НовыеПроверки.Проверка.ДатаПроверки КАК НачалоВыполнения,
	|	НовыеПроверки.Проверка.ПлановаяПроверка КАК ПлановаяПроверка,
	|	НовыеПроверки.Проверка.КонтролирующийОрган КАК КонтролирующийОрган
	|ИЗ
	|	РегистрСведений.НовыеПроверкиКонтролирующимиОрганами КАК НовыеПроверки
	|ГДЕ
	|	НовыеПроверки.ОбластьДанныхВспомогательныеДанные = &ОбластьДанныхВспомогательныеДанные";
	
	Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		// Записываем задачу
		ЗаписьЗадачиБухгалтера = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьЗадачиБухгалтера, Выборка);
		ЗаписьЗадачиБухгалтера.Наименование = Строка(Выборка.Правило);
		ЗаписьЗадачиБухгалтера.Записать();
		// Удаляем запись о новой проверке
		ЗаписьНовыеПроверки = РегистрыСведений.НовыеПроверкиКонтролирующимиОрганами.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьНовыеПроверки, Выборка);
		ЗаписьНовыеПроверки.Удалить();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

// Запись в вспомогательный регистр механизма проверок при записи организации с измененным ИНН.
//
Процедура ЗаписатьРеквизитыСервисаПроверокПриЗаписиОрганизации(Реквизиты) Экспорт
	
	Если НЕ Реквизиты.ИзменилсяИНН Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Делаем запись о новом ИНН в регистр для запросов к веб-сервису.
	ЗаписиРеквизитыСервиса = РегистрыСведений.РеквизитыСервисаПроверокКонтролирующимиОрганами.СоздатьНаборЗаписей();
	ЗаписиРеквизитыСервиса.Отбор.Организация.Установить(Реквизиты.Ссылка);
	ЗаписиРеквизитыСервиса.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(Реквизиты.ЗначениеРазделителя);
	Если НЕ Реквизиты.ОбособленноеПодразделение
		И Реквизиты.КорректныйИНН Тогда
		НоваяЗапись = ЗаписиРеквизитыСервиса.Добавить();
		НоваяЗапись.Организация = Реквизиты.Ссылка;
		НоваяЗапись.ИНН         = Реквизиты.ИНН;
		НоваяЗапись.ОбластьДанныхВспомогательныеДанные = Реквизиты.ЗначениеРазделителя;
	КонецЕсли;
	ЗаписиРеквизитыСервиса.Записать();
	
КонецПроцедуры

// Очистка задач бухгалтера по проверкам при записи организации с измененным ИНН.
//
Процедура ОбновитьЗадачиБухгалтераПриЗаписиОрганизации(Реквизиты) Экспорт
	
	Если НЕ Реквизиты.ИзменилсяИНН Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Ищем и удаляем старые задачи бухгалтера, связанные с проверками этой организации.
	Если Реквизиты.ОбособленноеПодразделение
		ИЛИ Реквизиты.КорректныйСтарыйИНН Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачиБухгалтера.Организация,
		|	ЗадачиБухгалтера.Правило,
		|	ЗадачиБухгалтера.ПериодСобытия,
		|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане
		|ИЗ
		|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
		|ГДЕ
		|	ЗадачиБухгалтера.Организация = &Ссылка
		|	И ЗадачиБухгалтера.Правило ССЫЛКА Справочник.ПроверкиКонтролирующимиОрганами";
		Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ЗаписьЗадачиБухгалтера = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ЗаписьЗадачиБухгалтера, Выборка);
				ЗаписьЗадачиБухгалтера.Удалить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Ищем ранее существующие проверки с таким ИНН и делаем записи в регистр для создания задач бухгалтера.
	Если НЕ Реквизиты.ОбособленноеПодразделение 
		И Реквизиты.КорректныйИНН Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Проверки.Ссылка КАК Проверка,
		|	&Организация КАК Организация,
		|	&ЗначениеРазделителя КАК ОбластьДанныхВспомогательныеДанные
		|ИЗ
		|	Справочник.ПроверкиКонтролирующимиОрганами КАК Проверки
		|ГДЕ
		|	Проверки.Код = &ИНН
		|	И Проверки.ОбластьДанныхВспомогательныеДанные = &ЗначениеРазделителя";
		Запрос.УстановитьПараметр("ИНН", Реквизиты.ИНН);
		Запрос.УстановитьПараметр("Организация", Реквизиты.Ссылка);
		Запрос.УстановитьПараметр("ЗначениеРазделителя", Реквизиты.ЗначениеРазделителя);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи = РегистрыСведений.НовыеПроверкиКонтролирующимиОрганами.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			СоздатьЗадачиБухгалтераПоНовымПроверкам();
			МобильноеПриложениеПредприниматель.ОтправитьУведомленияОЗадачах();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Первоначальное заполнение регистра РеквизитыСервисаПроверокКонтролирующимиОрганами при обновлении конфигурации.
//
Процедура ЗаполнитьРеквизитыСервисаПроверокПриОбновлении() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначениеРазделителя = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ИНН,
	|	Организации.ЮридическоеФизическоеЛицо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.ОбособленноеПодразделение";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ЗаписиРеквизитыСервиса = РегистрыСведений.РеквизитыСервисаПроверокКонтролирующимиОрганами.СоздатьНаборЗаписей();
	ЗаписиРеквизитыСервиса.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ЗначениеРазделителя);
	Пока Выборка.Следующий() Цикл
		ЭтоЮридическоеЛицо  = Выборка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КорректныйИНН       = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
			Выборка.ИНН, ЭтоЮридическоеЛицо, "");
		Если КорректныйИНН Тогда
			НоваяЗапись = ЗаписиРеквизитыСервиса.Добавить();
			НоваяЗапись.Организация = Выборка.Ссылка;
			НоваяЗапись.ИНН         = Выборка.ИНН;
			НоваяЗапись.ОбластьДанныхВспомогательныеДанные = ЗначениеРазделителя;
		КонецЕсли;
	КонецЦикла;
	Если ЗаписиРеквизитыСервиса.Количество() > 0 Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗаписиРеквизитыСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Информация о проверках контролирующими органами нашей организации для календаря проверок.
//
// Параметры:
//  Организация  - <СправочникСсылка.Организации> - организация, для которой нужно получить информацию о проверках.
//
// Возвращаемое значение:
//   Структура   - информация о проверках. 
//                 Содержание структуры - см. функцию НоваяИнформацияОПроверкахКонтролирующимиОрганами.
//                 При наличии ошибок в ИНН структура содержит только свойство ОписаниеОшибки.
//
Функция ИнформацияОПроверкахОрганизации(Организация) Экспорт

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		"ИНН,ЮридическоеФизическоеЛицо");
		
	ОписаниеОшибки = "";
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда 
		КорректныйИНН = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(РеквизитыОрганизации.ИНН,
			РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
			ОписаниеОшибки);
	Иначе
		КорректныйИНН  = Ложь;
		ОписаниеОшибки = НСтр("ru='Заполните ИНН организации.'");
	КонецЕсли;
	
	Если КорректныйИНН Тогда
		СписокИНН = Новый Массив;
		СписокИНН.Добавить(РеквизитыОрганизации.ИНН);
		ИнформацияОПроверках = РаботаСКонтрагентами.ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН(
			СписокИНН, Истина, Истина, Ложь, Истина); // Незавершенные проверки
		Если Не (ИнформацияОПроверках.ОжиданиеОтвета Или ЗначениеЗаполнено(ИнформацияОПроверках.ОписаниеОшибки)) Тогда
			ИнформацияОПроверках.Проверки = ИнформацияОПроверках.Проверки[РеквизитыОрганизации.ИНН];
		КонецЕсли;
	Иначе
		ИнформацияОПроверках = Новый Структура("ОписаниеОшибки,ОжиданиеОтвета", ОписаниеОшибки, Ложь);
	КонецЕсли;
	
	Возврат ИнформацияОПроверках;

КонецФункции

// Информация о том, как подготовиться к проверке (адрес в интернете и его представление).
//
// Параметры:
//  КонтролирующийОрган  - <Строка> - наименование контролирующего органа.
//
// Возвращаемое значение:
//   Структура   - информация о подготовке к проверке. 
//      * URL - <Строка> - адрес статьи о подготовке к проверке.
//      * Раздел - <Строка> - кратое представление проверяющего органа.
//
Функция ИнформацияОПодготовкеКПроверке(КонтролирующийОрган) Экспорт
	
	Результат = Новый Структура("Раздел,URL");
	
	Наименование = ВРег(КонтролирующийОрган);
	Если СтрНайти(Наименование, "МЧС") > 0
		ИЛИ СтрНайти(Наименование, "ЧРЕЗВЫЧАЙН") > 0 Тогда
		Результат.Раздел = НСтр("ru='госпожарнадзор'");
		Результат.URL    = "http://buh.ru/articles/documents/45868";
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Можно ли подать заявление в контролирующий орган об отмене плановой проверки.
// Считаем (упрощенно), что заявление могут подать все предприниматели, а также юридические лица на УСН.
//
// Параметры:
//  ПлановаяПроверка  - <Булево> - является проверка плановой или внеплановой.
//  Организация  - <СправочникСсылка.Организации> - проверяемая организация.
//  ПериодПроверки  - <Дата> - период проверки.
//
// Возвращаемое значение:
//   Структура   - можно ли подать заявление и какого типа документы нужно будет к нему приложить.
//      * Результат - <Булево> - можно ли подать заявление.
//      * Тип - <Строка> - тип документов, которые нужно приложить к заявлению.
//
Функция МожноПодатьЗаявлениеОбОтменеПроверки(ПлановаяПроверка, Организация, ПериодПроверки) Экспорт
	
	Результат = Новый Структура("Результат,Тип", Ложь, "");
	
	Если НЕ ПлановаяПроверка Тогда
		Возврат Результат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодПроверки)
		ИЛИ ПериодПроверки < '20160101' Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Результат.Результат = Истина;
		Результат.Тип       = "Предприниматель";
	Иначе
		СистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(Организация, ПериодПроверки);
		Если СистемаНалогообложения <> Перечисления.СистемыНалогообложения.Общая Тогда
			Результат.Результат = Истина;
			Результат.Тип       = "ЮридическоеЛицо";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Данные для заполнения заявления в контролирующий орган об отмене плановой проверки.
//
// Параметры:
//  СтруктураПараметров  - <Структура> - входные параметры.
//
// Возвращаемое значение:
//   Структура   - Данные для заполнения заявления. 
//                 Ключи структуры соответствуют именам параметров макета заявления.
//
Функция ДанныеЗаполненияЗаявленияОбОтменеПроверки(СтруктураПараметров) Экспорт

	Результат = Новый Структура;
	ГодПроверки = Год(СтруктураПараметров.ПериодПроверки);
	Результат.Вставить("Орган", СтруктураПараметров.КонтролирующийОрган);
	Результат.Вставить("Год",   Формат(ГодПроверки, "ЧГ="));
	Результат.Вставить("ОргКонтроля", СтрШаблон("%1, %2", 
		СтруктураПараметров.КонтролирующийОрган,
		Формат(СтруктураПараметров.ПериодПроверки, "ДФ='MMMM yyyy ''г.'''")));
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если СтруктураПараметров.Тип = "ЮридическоеЛицо" Тогда
		Результат.Вставить("Док1",  НСтр("ru='Сведения о среднесписочной численности'", КодЯзыка));
		Результат.Вставить("Док2",  НСтр("ru='Бухгалтерская отчетность'", КодЯзыка));
		Результат.Вставить("Док3",  НСтр("ru='Выписка из ЕГРЮЛ'", КодЯзыка));
	ИначеЕсли СтруктураПараметров.Тип = "Предприниматель" Тогда
		Результат.Вставить("Док1",  НСтр("ru='Сведения о среднесписочной численности'", КодЯзыка));
		Результат.Вставить("Док2",  НСтр("ru='Налоговая декларация'", КодЯзыка));
		Результат.Вставить("Док3",  НСтр("ru='Выписка из ЕГРИП'", КодЯзыка));
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Данные подготовленного заявления в контролирующий орган об отмене плановой проверки.
//
// Параметры:
//  Идентификатор  - <Строка, 50> - идентификатор проверки.
//  Организация  - <СправочникСсылка.Организации> - проверяемая организация.
//
// Возвращаемое значение:
//   <Структура>   - данные подготовленного заявления об отмене проверки:
//      * Заявление - <ДокументСсылка.РегламентированныеОтчеты> - заявление об отмене проверки.
//      * Дата - <Дата> - дата подписи заявления.
//
Функция ДанныеПодготовленногоЗаявленияОбОтменеПроверки(Идентификатор, Организация) Экспорт
	
	Результат = Новый Структура("Заявление,Дата");
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Рег.Заявление КАК Заявление,
	|	Рег.Заявление.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ЗаявленияОбОтменеПроверокКонтролирующимиОрганами КАК Рег
	|ГДЕ
	|	Рег.Организация = &Организация
	|	И Рег.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Данные всех подготовленных организацией заявлений в контролирующие органы об отмене плановых проверок.
//
// Параметры:
//  Организация  - <СправочникСсылка.Организации> - проверяемая организация.
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - данные подготовленных заявлений об отмене проверок:
//      * Идентификатор - <Строка> - идентификатор проверки в Едином реестре проверок.
//      * Заявление - <ДокументСсылка.УведомлениеОСпецрежимахНалогообложения> - заявление об отмене проверки.
//      * Дата - <Дата> - дата подписи заявления.
//
Функция ДанныеПодготовленныхЗаявленийОбОтменеПроверок(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рег.Идентификатор КАК Идентификатор,
	|	Рег.Заявление КАК Заявление,
	|	Рег.Заявление.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ЗаявленияОбОтменеПроверокКонтролирующимиОрганами КАК Рег
	|ГДЕ
	|	Рег.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Устанавливает случайное время (в пределах от 00:00 до 01:00) для запуска 
// регламентного задания по обновлению списка проверок.
// 
Процедура УстановитьВремяОбновленияПроверок() Экспорт

	Задание = РегламентныеЗадания.НайтиПредопределенное("ОбновлениеПроверокКонтролирующимиОрганами");
	ГенераторЧисел = Новый ГенераторСлучайныхЧисел;
	ЧислоМинут = ГенераторЧисел.СлучайноеЧисло(0, 59);
	ЧислоСекунд = ГенераторЧисел.СлучайноеЧисло(0, 59);
	Задание.Расписание.ВремяНачала = Дата(1, 1, 1, 0, ЧислоМинут, ЧислоСекунд);
	Задание.Записать();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнформацияОПроверкахОрганизацииПоИНН(ИНН, ТолькоВнеплановые)

	ОписаниеОшибки = "";
	Если ЗначениеЗаполнено(ИНН) Тогда 
		ЮридическоеЛицо = СтрДлина(ИНН) = 10;
		КорректныйИНН   = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН,
			ЮридическоеЛицо,
			ОписаниеОшибки);
	Иначе
		КорректныйИНН  = Ложь;
		ОписаниеОшибки = НСтр("ru='Не заполнен ИНН организации.'");
	КонецЕсли;
	
	Если КорректныйИНН Тогда
		СписокИНН = Новый Массив;
		СписокИНН.Добавить(ИНН);
		ИнформацияОПроверках = РаботаСКонтрагентами.ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН(
			СписокИНН, НЕ ТолькоВнеплановые, Истина, Ложь, Истина); // Незавершенные проверки
		Если Не (ИнформацияОПроверках.ОжиданиеОтвета Или ЗначениеЗаполнено(ИнформацияОПроверках.ОписаниеОшибки)) Тогда
			ИнформацияОПроверках.Проверки = ИнформацияОПроверках.Проверки[ИНН];
		КонецЕсли;
	Иначе
		ИнформацияОПроверках = Новый Структура("ОписаниеОшибки,ОжиданиеОтвета", ОписаниеОшибки, Ложь);
	КонецЕсли;
	
	Возврат ИнформацияОПроверках;

КонецФункции

Функция НаименованияОргановИСлова()
	
	НаименованияОргановИСлова = Новый ТаблицаЗначений;
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(250);
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(1, 0, ДопустимыйЗнак.Неотрицательный);
	
	НаименованияОргановИСлова.Колонки.Добавить("Наименование", ТипСтрока);
	НаименованияОргановИСлова.Колонки.Добавить("Слово",        ТипСтрока);
	НаименованияОргановИСлова.Колонки.Добавить("Количество",   ТипЧисло);
	
	КлючевыеСловаПоиска = ПолучитьМакет("КлючевыеСловаПоиска");
	
	Для НомерСтроки = 1 По КлючевыеСловаПоиска.ВысотаТаблицы Цикл
		НовоеСлово = НаименованияОргановИСлова.Добавить();
		НовоеСлово.Наименование = КлючевыеСловаПоиска.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		НовоеСлово.Слово        = КлючевыеСловаПоиска.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		НовоеСлово.Количество   = КлючевыеСловаПоиска.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
	КонецЦикла;
	
	НаименованияОргановИСлова.Индексы.Добавить("Слово");
	
	Возврат НаименованияОргановИСлова;

КонецФункции

Функция КраткоеНаименованиеПроверки(КонтролирующийОрган, НаименованияОргановИСлова)
	
	НайденныеОрганы = Новый ТаблицаЗначений;
	НайденныеОрганы.Колонки.Добавить("Наименование");
	НайденныеОрганы.Колонки.Добавить("Количество");
	НайденныеОрганы.Колонки.Добавить("Уникальность");
	
	НаименованиеПоСловам = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(КонтролирующийОрган);
	
	КоличествоСловПоиска = 0;
	
	Для Каждого СловоНаименования Из НаименованиеПоСловам Цикл
		
		СловоПоиска = ВРег(СловоНаименования);
		
		ПодходящиеОрганы = НаименованияОргановИСлова.НайтиСтроки(Новый Структура("Слово", СловоПоиска));
		
		Если ПодходящиеОрганы.Количество() > 0 Тогда
			КоличествоСловПоиска = КоличествоСловПоиска + 1;
		КонецЕсли;
		
		Для Каждого Орган Из ПодходящиеОрганы Цикл
			
			Если Орган.Количество = 1 Тогда
				Возврат Орган.Наименование;
			Иначе
				НовыйОрган						= НайденныеОрганы.Добавить();
				НовыйОрган.Наименование	= Орган.Наименование;
				НовыйОрган.Количество			= 1;
				НовыйОрган.Уникальность			= Орган.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НайденныеОрганы.Количество() > 0 Тогда
		
		НайденныеОрганы.Свернуть("Наименование", "Количество, Уникальность");
		НайденныеОрганы.Сортировать("Количество Убыв, Уникальность Возр");
		// Считаем поиск успешным только если совпало более половины слов
		Если НайденныеОрганы[0].Количество >= КоличествоСловПоиска/2 Тогда
			Возврат НайденныеОрганы[0].Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НСтр("ru = 'Проверка'");

КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("КонтролирующийОрган");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ?(СтрДлина(Данные.КонтролирующийОрган) > 135, 
		Лев(Данные.КонтролирующийОрган, 135) + "...", 
		Данные.КонтролирующийОрган) + ", "
		+ "проверка";
	
КонецПроцедуры

#КонецОбласти
 