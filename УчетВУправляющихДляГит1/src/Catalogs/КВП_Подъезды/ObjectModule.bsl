#Область СлужебныеПроцедурыИФункции

// Функция выполняет проверку можно ли записать элемент справочника.
//
// Возвращаемое значение:
//  Булево - есть ли ошибки
//
Функция НельзяЗаписатьЭлемент(Отказ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Владелец",      Владелец);
	Запрос.УстановитьПараметр("НомерПодъезда", НомерПодъезда);
	Запрос.УстановитьПараметр("Суффикс",       Суффикс);
	Запрос.УстановитьПараметр("Ссылка",        Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Подъезды.Ссылка
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Владелец = &Владелец
	|	И КВП_Подъезды.НомерПодъезда = &НомерПодъезда
	|	И КВП_Подъезды.Суффикс = &Суффикс
	|	И КВП_Подъезды.Ссылка <> &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"В данном здании уже существует подъезд с таким типом и номером!", Отказ);
	КонецЕсли;
	
	Если НЕ Владелец.Многоквартирное Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Подъезд может быть только у многоквартирного дома!", Отказ);
	КонецЕсли;
	
КонецФункции //НельзяЗаписатьЭлемент()

// Процедура выполняет проверку корректности заполнения данных.
//
// Возвращаемое значение:
//  Булево - есть ли ошибки
//
Процедура ПроверитьКорректностьЗаполненияДанных(Отказ) Экспорт

	// Проверка диапазона помещений.
	УсловиеФильтра = "";
	Если НЕ ЭтоНовый() Тогда
		УсловиеФильтра = "И (НЕ КВП_Подъезды.Ссылка = &Ссылка)";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Подъезды.Ссылка
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Владелец = &Владелец
	|	И (НЕ(КВП_Подъезды.НомерПервойКвартиры > &НомерПервойКвартиры
	|					И КВП_Подъезды.НомерПервойКвартиры > &НомерПоследнейКвартиры
	|				ИЛИ КВП_Подъезды.НомерПоследнейКвартиры < &НомерПервойКвартиры
	|					И КВП_Подъезды.НомерПоследнейКвартиры < &НомерПоследнейКвартиры))
	|	" + УсловиеФильтра;

	Запрос.УстановитьПараметр("Ссылка",                 Ссылка);
	Запрос.УстановитьПараметр("Владелец",               Владелец);
	Запрос.УстановитьПараметр("НомерПервойКвартиры",    НомерПервойКвартиры);
	Запрос.УстановитьПараметр("НомерПоследнейКвартиры", НомерПоследнейКвартиры);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выбран некорректный диапазон помещений!", Отказ);
	КонецЕсли;

	// Проверка этажности.
	Если Этажность > Владелец.Этажей Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Количество этажей в подъезде не может быть больше количества 
										  |   этажей в здании, к которому относится данный подъезд!", Отказ);
	КонецЕсли;

КонецПроцедуры // ПроверитьКорректностьЗаполненияДанных()

// Дозаполняет элемент справочника обязательными значениями.
// Справочник участвует в интерфейсе (внутреннем АПИ) для загрузки данных о помещениях.
// Параметр "Наименование" - не используется, выполняет роль заглушки.
//
Процедура ДозаполнитьЭлементСправочника(Наименование = Неопределено, ДанныеДляЗаписи = Неопределено, НовыйЭлементСправочника) Экспорт
	
	Если ТипЗнч(ДанныеДляЗаписи) = Тип("СтрокаТаблицыЗначений") Тогда
		
		НовыйЭлементСправочника.Владелец = ДанныеДляЗаписи.Владелец;
		
	ИначеЕсли ТипЗнч(ДанныеДляЗаписи) = Тип("Структура") Тогда
		
		Если ДанныеДляЗаписи.Свойство("Владелец") Тогда
			НовыйЭлементСправочника.Владелец = ДанныеДляЗаписи.Владелец;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДозаполнитьЭлементСправочника()

#КонецОбласти
