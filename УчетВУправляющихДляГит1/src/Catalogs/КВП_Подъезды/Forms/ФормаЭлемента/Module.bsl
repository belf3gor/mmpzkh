
&НаКлиенте
Перем мАктуаленСтроительныйАдрес Экспорт; //Хранит статус актуальности "Строительного" адреса

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Функция склонения количества.
Функция СклонениеКоличестваЭтажей(Количество)
	
	Строка = ЧислоПрописью(Количество, ,"этаж, этажа, этажей,,,,,,0");
	Возврат Прав(Строка, СтрДлина(Строка) - Найти(Строка,"этаж") + 1) + ".";
	
КонецФункции

&НаСервере
// Процедура проверки корректности адреса.
Процедура ПроверитьПередЗаписью(Отказ, АктуаленСтроительныйАдрес)
	
	ОбъектСправочника = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.КВП_Подъезды"));
	
	Если НЕ АктуаленСтроительныйАдрес Тогда
		ОбъектСправочника.ПроверитьКорректностьЗаполненияДанных(Отказ);
	КонецЕсли;
	
	ОбъектСправочника.НельзяЗаписатьЭлемент(Отказ);
	
КонецПроцедуры 

&НаКлиенте
// Процедура обновляет этажность здания.
// Если она не отличается от общедомовой, то берется количество этажей здания.
//
Процедура ОбновитьЭтажностьЗдания()
	
	ЭтажностьЗдания = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "Этажей");
	Элементы.НадписьЭтажностьЗданияСоставляет.Заголовок = "Этажность здания составляет " + ЭтажностьЗдания + " " + СклонениеКоличестваЭтажей(ЭтажностьЗдания);
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет этажность подъезда.
// Если она не отличается от общедомовой то берется количество этажей здания.
//
Процедура ОбновитьЭтажностьПодъезда()
	
	Элементы.НадписьСклоненияЭтажностиПодъезда.Заголовок = СклонениеКоличестваЭтажей(Объект.Этажность);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаЭтажностьПодъезда.Видимость = Форма.ЭтажностьОтличаетсяОтОбщедомовой;
	Элементы.НадписьЭтажностьПодъездаСоответствуетЭтажностиДома.Видимость = НЕ Форма.ЭтажностьОтличаетсяОтОбщедомовой;
	
КонецПроцедуры //УправлениеФормой()

#КонецОбласти

#Область РаботаСУстановленнымОборудованием

&НаСервереБезКонтекста
// Функция возвращает ключ записи регистра сведений по структуре ключа.
//
Функция ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча)
	
	Возврат РегистрыСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.СоздатьКлючЗаписи(СтруктураКлюча);
	
КонецФункции

&НаСервере
// Процедура обновляет список связанного оборудования / объектов учета для текущего здания.
Процедура ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()
	
	УстановленноеОборудование.Загрузить(УПЖКХ_УчетОборудованияНаОбъектахУчетаСервер.ПолучитьОборудованиеУстановленноеНаОбъектУчета(Объект.Ссылка));
	
КонецПроцедуры // ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Владелец") И НЕ Параметры.Владелец.Пустая() Тогда
		Объект.Владелец = Параметры.Владелец;
	КонецЕсли;
	
	ЭтажностьОтличаетсяОтОбщедомовой = НЕ (Объект.Этажность = 0);
	
	ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	мАктуаленСтроительныйАдрес = 
		УПЖКХ_РаботаСОбъектамиУчетаКлиент.ОбновитьАктуальностьСтроительногоАдреса(Объект.Владелец, Ложь);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Владелец) Тогда
		Объект.НомерПодъезда = 
			УПЖКХ_РаботаСОбъектамиУчетаСервер.УстановитьНомерПодъезда(Объект.Владелец, мАктуаленСтроительныйАдрес);
		Объект.Наименование = 
			УПЖКХ_РаботаСОбъектамиУчетаКлиент.ОбновитьНаименованиеПодъезда(Объект, мАктуаленСтроительныйАдрес);
	КонецЕсли;
	
	ДатаИзменения = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ОбновитьЭтажностьЗдания();
	ОбновитьЭтажностьПодъезда();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСведенияОбУстановленномОборудовании" Тогда
		Если Источник = Объект.Ссылка Тогда
			ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЭтажностьОтличаетсяОтОбщедомовой И Объект.Этажность = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо указать количество этажей в подъезде!", Отказ);
	КонецЕсли;
	
	ПроверитьПередЗаписью(Отказ, мАктуаленСтроительныйАдрес);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтажностьОтличаетсяОтОбщедомовой И ТекущийОбъект.Этажность = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "Этажей") Тогда
		ТекущийОбъект.Этажность = 0;
		ЭтажностьОтличаетсяОтОбщедомовой = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "НомерПодъезда".
//
Процедура НомерПодъездаПриИзменении(Элемент)

	Объект.Наименование = 
		УПЖКХ_РаботаСОбъектамиУчетаКлиент.ОбновитьНаименованиеПодъезда(Объект, мАктуаленСтроительныйАдрес);

КонецПроцедуры // НомерПодъездаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Суффикс".
//
Процедура СуффиксПриИзменении(Элемент)

	Объект.Наименование = 
		УПЖКХ_РаботаСОбъектамиУчетаКлиент.ОбновитьНаименованиеПодъезда(Объект, мАктуаленСтроительныйАдрес);

КонецПроцедуры // СуффиксПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Секция".
//
Процедура СекцияПриИзменении(Элемент)

	Объект.Наименование = 
		УПЖКХ_РаботаСОбъектамиУчетаКлиент.ОбновитьНаименованиеПодъезда(Объект, мАктуаленСтроительныйАдрес);

КонецПроцедуры // СекцияПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Владелец".
//
Процедура ВладелецПриИзменении(Элемент)
	
	мАктуаленСтроительныйАдрес = 
		УПЖКХ_РаботаСОбъектамиУчетаКлиент.ОбновитьАктуальностьСтроительногоАдреса(Объект.Владелец, Ложь);
	Объект.НомерПодъезда = 
		УПЖКХ_РаботаСОбъектамиУчетаСервер.УстановитьНомерПодъезда(Объект.Владелец, мАктуаленСтроительныйАдрес);
	Объект.Наименование = 
		УПЖКХ_РаботаСОбъектамиУчетаКлиент.ОбновитьНаименованиеПодъезда(Объект, мАктуаленСтроительныйАдрес);
	
	ОбновитьЭтажностьЗдания();
	
КонецПроцедуры // ВладелецПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля формы "Этажность отличается от общедомовой".
//
Процедура ЭтажностьОтличаетсяОтОбщедомовойПриИзменении(Элемент)
	
	Если ЭтажностьОтличаетсяОтОбщедомовой Тогда
		Объект.Этажность = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "Этажей");
	Иначе
		Объект.Этажность = 0;
	КонецЕсли;
	
	ОбновитьЭтажностьПодъезда();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ЭтажностьОтличаетсяОтОбщедомовойПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля формы "Этажность".
//
Процедура ЭтажностьПриИзменении(Элемент)
	
	ОбновитьЭтажностьПодъезда();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "УстановленноеОборудование".
//
Процедура УстановленноеОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Период",          ТекущиеДанные.Период);
		СтруктураКлюча.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураКлюча.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		
		СтруктураПараметров = Новый Структура("Ключ", ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча));
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "УстановитьОборудования".
//
Процедура УстановитьОборудования(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
	СтруктураЗаполнения.Вставить("Установлено",     Истина);
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ВвестиАктуальныеСведения".
//
Процедура ВвестиАктуальныеСведения(Команда)
	
	ТекущиеДанные = Элементы.УстановленноеОборудование.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураЗаполнения.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		СтруктураЗаполнения.Вставить("Количество",      ТекущиеДанные.Количество);
		СтруктураЗаполнения.Вставить("Установлено",     Истина);
		
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
		
	КонецЕсли;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти