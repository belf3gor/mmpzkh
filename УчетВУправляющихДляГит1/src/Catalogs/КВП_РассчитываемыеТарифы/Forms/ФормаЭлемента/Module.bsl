
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Заполняет список показателей расчета.
Процедура ЗаполнитьСписокПоказателейРасчета()

	СписокПоказателей.Добавить().ПоказательРасчета = "Свойство здания";
	СписокПоказателей.Добавить().ПоказательРасчета = "Реквизит здания";
	СписокПоказателей.Добавить().ПоказательРасчета = "Площадь здания";
	СписокПоказателей.Добавить().ПоказательРасчета = "Свойство помещения";
	СписокПоказателей.Добавить().ПоказательРасчета = "Реквизит помещения";
	СписокПоказателей.Добавить().ПоказательРасчета = "Площадь помещения";
	
КонецПроцедуры // ЗаполнитьСписокПоказателейРасчета()

&НаСервере
// Получает текст формулы расчета на основании поля формулы.
Процедура ПолучитьТекстФормулыРасчета(Отказ)

	// Если показатели отображены как представления, то выполним преобразование в коды.
	Если Элементы.КодНаименование.Пометка Тогда
		Элементы.КодНаименование.Пометка = НЕ Элементы.КодНаименование.Пометка;
		ЗаменитьКодПредставление(Элементы.КодНаименование.Пометка);
	КонецЕсли;
	
	ТекстФормулы = "";
	
	Для Индекс = 1 по ПолеФормулы.ШиринаТаблицы Цикл
		
		ТекстЯчейки = СокрЛП(ПолеФормулы.Область(1,Индекс).Текст);
		
		Если НЕ ТекстЯчейки = "" Тогда 
			ТекстФормулы = ТекстФормулы + ТекстЯчейки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Объект.ФормулаРасчета = ТекстФормулы Тогда
		Объект.ФормулаРасчета = ТекстФормулы;
		УдалитьНеиспользуемыеПоказателиРасчетаИзТЧ(Объект.ФормулаРасчета);
	КонецЕсли;
	
	Если НЕ Объект.ФормулаРасчета = "" Тогда
		УПЖКХ_РасчетНачисленийСервер.ПроверитьКорректностьЗаполненияФормулы(Объект.ФормулаРасчета, Отказ);
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'При проверке вычисления возникла ошибка, проверьте формулу расчета.'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТекстФормулыРасчета()

&НаСервере
// Удаляет текущий показатель из ТЧ "Таблица показателей расчета" при удалении из поля формулы.
Процедура УдалитьНеиспользуемыеПоказателиРасчетаИзТЧ(ТекстФормулы)

	КоличествоСтрок = Объект.ТаблицаПоказателейРасчета.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		ТекСтрока = Объект.ТаблицаПоказателейРасчета[КоличествоСтрок - Индекс];
		СтрокаПоказателя = "[" + ТекСтрока.КодСтроки + "]";
		Если Найти(ТекстФормулы, СтрокаПоказателя) = 0 Тогда
			Объект.ТаблицаПоказателейРасчета.Удалить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьНеиспользуемыеПоказателиРасчетаИзТЧ()

&НаСервере
// Получает соответствие списков наборов показателей расчета.
Функция ПолучитьСпЗначенийПоказателейРасчета(ИмяНабора)
	
	мСоотвПоказателейРасчета = Новый Соответствие;
	
	СпЗнПоказателей = мСоотвПоказателейРасчета.Получить(ИмяНабора);
	
	Если СпЗнПоказателей = Неопределено Тогда
		Если ИмяНабора = "ЗС" Тогда
			СписокСвойств = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСписокСвойств(Справочники.КВП_Здания.СоздатьЭлемент(), Ложь);
			СпЗнПоказателей = Новый СписокЗначений();
			Для Каждого ТекСвойство Из СписокСвойств Цикл
				Если ТекСвойство.ТипЗначения.Типы().Количество() = 1 Тогда
					СпЗнПоказателей.Добавить(ТекСвойство);
				КонецЕсли;
			КонецЦикла;
			мСоотвПоказателейРасчета.Вставить("ЗС", СпЗнПоказателей);
		ИначеЕсли ИмяНабора = "ЗР" Тогда
			// Реквизиты здания.
			СпЗнПоказателей = Новый СписокЗначений();
			МетаРеквизиты = Метаданные.Справочники.КВП_Здания.Реквизиты;
			Для Каждого ТекРеквизит Из МетаРеквизиты Цикл
				Если ТекРеквизит.Тип.СодержитТип(Тип("Число")) Тогда
					СпЗнПоказателей.Добавить(ТекРеквизит.Имя, ТекРеквизит.Синоним);
				КонецЕсли;
			КонецЦикла;
			мСоотвПоказателейРасчета.Вставить("ЗР", СпЗнПоказателей);
		ИначеЕсли ИмяНабора = "ПС" Тогда
			// Свойства помещения.
			СписокСвойств = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСписокСвойств(Справочники.УПЖКХ_Помещения.СоздатьЭлемент(), Ложь);
			СпЗнПоказателей = Новый СписокЗначений();
			Для Каждого ТекСвойство Из СписокСвойств Цикл
				Если ТекСвойство.ТипЗначения.Типы().Количество() = 1 Тогда
					СпЗнПоказателей.Добавить(ТекСвойство);
				КонецЕсли;
			КонецЦикла;
			мСоотвПоказателейРасчета.Вставить("ПС", СпЗнПоказателей);
		ИначеЕсли ИмяНабора = "ПР" Тогда
			// Реквизиты помещения.
			СпЗнПоказателей = Новый СписокЗначений();
			МетаРеквизиты = Метаданные.Справочники.УПЖКХ_Помещения.Реквизиты;
			Для Каждого ТекРеквизит Из МетаРеквизиты Цикл
				Если ТекРеквизит.Тип.СодержитТип(Тип("Число")) Тогда
					СпЗнПоказателей.Добавить(ТекРеквизит.Имя, ТекРеквизит.Синоним);
				КонецЕсли;
			КонецЦикла;
			мСоотвПоказателейРасчета.Вставить("ПР", СпЗнПоказателей);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СпЗнПоказателей;
	
КонецФункции // ПолучитьСпЗначенийПоказателейРасчета()

&НаСервере
// Возникает при активации поля формулы.
Процедура ПриАктивизацииПоляФормулыНаСервере()
	
	Элемент = Элементы.ПолеФормулы;
	
	Если Элемент.ТекущаяОбласть.Низ > 1 Тогда
		
		Элемент.ТекущаяОбласть = ПолеФормулы.Область(1, Элемент.ТекущаяОбласть.Лево);
		
	КонецЕсли;
	
	Для Индекс = 1 по ПолеФормулы.ШиринаТаблицы Цикл
		
		ПолеФормулы.Область(1,Индекс).ЦветФона = Новый Цвет(255,255,255);
		
	КонецЦикла;
	
	Элемент.ТекущаяОбласть.ЦветФона = Новый Цвет(234,229,216);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМУЛЫ РАСЧЕТА

&НаСервере
// Заполняет поле формулы на основании строки реквизита "Формула расчета".
Процедура ЗаполнитьПолеФормулы()

	ТекстИсходный=СокрЛП(Объект.ФормулаРасчета);
	КоличествоСимволов=СтрДлина(ТекстИсходный);

	Если КоличествоСимволов>0 Тогда

		ТекстЯчейки="";

		Для Индекс=1 По КоличествоСимволов Цикл

			ТекСимвол=Сред(ТекстИсходный,Индекс,1);

			Если ТекСимвол="[" Тогда  // Формируем текст аргумента расчета

				ТекстЯчейки=ТекстЯчейки+ТекСимвол;

			ИначеЕсли ТекСимвол="]" Тогда // Устанавливаем текст аргумента расчета


				ТекстЯчейки=ТекстЯчейки+ТекСимвол;
				УстановитьТекстЯчейки(ТекстЯчейки);
				ТекстЯчейки="";

			Иначе

				Если ТекстЯчейки="" Тогда // Устанавливаем операнд расчета

					УстановитьТекстЯчейки(ТекСимвол);

				Иначе // Формируем текст аргумента расчета

					ТекстЯчейки=ТекстЯчейки+ТекСимвол;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	Иначе

		ОбластьВставки = ПолеФормулы.Область(1,1);
		ОбластьВставки.ШиринаКолонки=1;
		ОбластьВставки.ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;

		Элементы.ПолеФормулы.ТекущаяОбласть=ОбластьВставки;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьПолеФормулы()

&НаСервере
// Заменяет код показателя представлением и наоборот в зависимости от переданного параметра.
Процедура ЗаменитьКодПредставление(УстановитьПредставление)

	Если УстановитьПредставление Тогда
		КолонкаПоказателяТек = "КодСтроки";
		КолонкаПоказателяНов = "Представление";
	Иначе
		КолонкаПоказателяТек = "Представление";
		КолонкаПоказателяНов = "КодСтроки";
	КонецЕсли;
	
	Для каждого ТекСтрока Из Объект.ТаблицаПоказателейРасчета Цикл
		
		ТекстПоказателя = "["+ТекСтрока[КолонкаПоказателяТек]+"]";
		ОбластьПоказателя = ПолеФормулы.НайтиТекст(ТекстПоказателя,,,, Истина);
		
		Если НЕ ОбластьПоказателя = Неопределено Тогда
			ОбластьПоказателя.ШиринаКолонки = СтрДлина("[" + ТекСтрока[КолонкаПоказателяНов] +"]");
			ОбластьПоказателя.Текст = "[" + ТекСтрока[КолонкаПоказателяНов] +"]";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаменитьКодПредставление()

&НаСервере
// Процедура заполняет текст ячейки
//
// Параметры:
//  ТекстЯчейки - <строка>
//          - текст отображаемый в ячейк.
//
Процедура УстановитьТекстЯчейки(ТекстЯчейки)

	ОбластьВставки = Элементы.ПолеФормулы.ТекущаяОбласть;
	ОбластьВставки.ШиринаКолонки = СтрДлина(ТекстЯчейки);
	
	ОбластьВставки.Текст  = ТекстЯчейки;
	НоваяОбластьВставки   = ПолеФормулы.Область(1,ОбластьВставки.Лево + 1);
	НоваяОбластьВставки.ШиринаКолонки = ?(СтрДлина(НоваяОбластьВставки.Текст) = 0,
										  1,
										  ?(СтрДлина(НоваяОбластьВставки.Текст) = 1,
										  	3,
											СтрДлина(НоваяОбластьВставки.Текст)));
	НоваяОбластьВставки.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Элементы.ПолеФормулы.ТекущаяОбласть    = ПолеФормулы.Область(1,ОбластьВставки.Лево + 1);

КонецПроцедуры // УстановитьТекстЯчейки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокПоказателейРасчета();
	ЗаполнитьПолеФормулы();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ Отказ Тогда
		ПолучитьТекстФормулыРасчета(Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "Выбор" поля "СписокПоказателей".
Процедура СписокПоказателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СписокПоказателей.ТекущиеДанные;
	ВыборИзФормы = Ложь;
	ИмяПараметра = "";
	
	Если ТекСтрока.ПоказательРасчета = "Свойство здания" Тогда
		ВыборИзФормы = Истина;
		Приставка = "ЗС";
		Представление = "Свойство здания: ";
	ИначеЕсли ТекСтрока.ПоказательРасчета = "Реквизит здания" Тогда
		Приставка = "ЗР";
		Представление = "Реквизит здания: ";
	ИначеЕсли ТекСтрока.ПоказательРасчета = "Площадь здания" Тогда
		ВыборИзФормы = Истина;
		Приставка = "ЗП";
		Представление = "Площадь здания: ";
	ИначеЕсли ТекСтрока.ПоказательРасчета = "Свойство помещения" Тогда
		ВыборИзФормы = Истина;
		Приставка = "ПС";
		Представление = "Свойство помещения: ";
	ИначеЕсли ТекСтрока.ПоказательРасчета = "Реквизит помещения" Тогда
		Приставка = "ПР";
		Представление = "Реквизит помещения: ";
	ИначеЕсли ТекСтрока.ПоказательРасчета = "Площадь помещения" Тогда
		ВыборИзФормы = Истина;
		Приставка = "ПП";
		Представление = "Площадь помещения: ";
	КонецЕсли;
	
	ВыбранноеЗначение = Неопределено;
	РеквизитПараметра = "";
	
	Если ВыборИзФормы Тогда
		
		ИмяФормыВыбора       = "";
		ПараметрыФормыВыбора = Новый Структура;
		
		Если ТекСтрока.ПоказательРасчета = "Площадь здания" Тогда
			РеквизитПараметра = "Код";
			ИмяФормыВыбора    = "Справочник.КВП_ТипыПлощадейЗдания.ФормаВыбора";
		ИначеЕсли ТекСтрока.ПоказательРасчета = "Площадь помещения" Тогда
			РеквизитПараметра = "Код";
			ИмяФормыВыбора    = "Справочник.УПЖКХ_ВидыПлощадей.ФормаВыбора";
		Иначе
			ИмяФормыВыбора    = "ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора";
			РеквизитПараметра = "Наименование";
			
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Ссылка", ПолучитьСпЗначенийПоказателейРасчета(Приставка));
			
			ПараметрыФормыВыбора.Вставить("Отбор", СтруктураОтбора);
		КонецЕсли;
		
		// Открываем форму выбора.
		ДопПараметры       = Новый Структура("ВыборИзФормы, Приставка, ТекСтрока, РеквизитПараметра, Представление",
											 ВыборИзФормы, Приставка, ТекСтрока, РеквизитПараметра, Представление);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбоработатьВыборИзСписка", ЭтотОбъект, ДопПараметры);
		
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормыВыбора, Элемент, , , , ОписаниеОповещения);
		
	Иначе
		
		СписокВыбора = ПолучитьСпЗначенийПоказателейРасчета(Приставка);
		ДопПараметры = Новый Структура("ВыборИзФормы, Приставка, Представление, РеквизитПараметра", ВыборИзФормы, Приставка, Представление, "Значение");
		ЭтаФорма.ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбоработатьВыборИзСписка", ЭтотОбъект, ДопПараметры), СписокВыбора, Элемент);
		Возврат;
		
	КонецЕсли;
	
	СписокПоказателейВыборПродолжение(ВыборИзФормы, ВыбранноеЗначение, Представление, Приставка, РеквизитПараметра);
	
КонецПроцедуры // СписокПоказателейВыбор()

&НаКлиенте
// Процедура-обработчик выбора из списка, вызванной в процедуре "СписокПоказателейВыбор()".
//
// Параметры:
//  ВыбранныйЭлемент		 - 	Элемент списка значений - 
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура ОбоработатьВыборИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	СписокПоказателейВыборПродолжение(ДополнительныеПараметры.ВыборИзФормы,
									  ВыбранныйЭлемент,
									  ДополнительныеПараметры.Представление,
									  ДополнительныеПараметры.Приставка,
									  ДополнительныеПараметры.РеквизитПараметра);
	
КонецПроцедуры // ОбоработатьВыборИзСписка()

&НаКлиенте
// Процедура - Список показателей выбор продолжение
//
// Параметры:
//  ВыборИзФормы		 - 	 - 
//  ВыбранноеЗначение	 - 	 - 
//  Представление		 - 	 - 
//  Приставка			 - 	 - 
//  РеквизитПараметра	 - 	 - 
//
Процедура СписокПоказателейВыборПродолжение(Знач ВыборИзФормы, Знач ВыбранноеЗначение, Представление, Знач Приставка, Знач РеквизитПараметра)
	
	Если НЕ ВыбранноеЗначение  =Неопределено И Не ПустаяСтрока(РеквизитПараметра) Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ЭлементСпискаЗначений") Тогда
			ЗначениеРеквизитаПараметра = ВыбранноеЗначение[РеквизитПараметра];
		Иначе
			ЗначениеРеквизитаПараметра = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, РеквизитПараметра);
		КонецЕсли;
		
		КодПоказателя = Приставка + ЗначениеРеквизитаПараметра;
		Если ВыборИзФормы Тогда
			Представление = Представление + ВыбранноеЗначение;
		Иначе
			Представление = Представление + ЗначениеРеквизитаПараметра;
		КонецЕсли;
		
		// Если показатели отображены как представления, то выполним преобразование в коды.
		Если Элементы.КодНаименование.Пометка Тогда
			Элементы.КодНаименование.Пометка = НЕ Элементы.КодНаименование.Пометка;
			ЗаменитьКодПредставление(Элементы.КодНаименование.Пометка);
		КонецЕсли;
		
		УстановитьТекстЯчейки("["+ КодПоказателя+"]");
		
		НайдСтроки = Объект.ТаблицаПоказателейРасчета.НайтиСтроки(Новый Структура("КодСтроки", КодПоказателя));
		Если НайдСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ТаблицаПоказателейРасчета.Добавить();
			НоваяСтрока.КодСтроки         = КодПоказателя;
			НоваяСтрока.ПоказательРасчета = ?(ВыборИзФормы, ВыбранноеЗначение, ЗначениеРеквизитаПараметра);
			НоваяСтрока.Представление     = Представление;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СписокПоказателейВыборПродолжение()

&НаКлиенте
// Обработчик события "ПриАктивизацииОбласти" поля "ПолеФормулы".
Процедура ПолеФормулыПриАктивизацииОбласти(Элемент)
	
	ПриАктивизацииПоляФормулыНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

/////////////////////////////
// Вспомогательные процедуры

&НаСервере
// Раздвигает ячейки на сервере.
Процедура РаздвинутьНаСервере()
	
	ПолеФормулы.ВставитьОбласть(Элементы.ПолеФормулы.ТекущаяОбласть,, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	Для Индекс=1 по ПолеФормулы.ШиринаТаблицы Цикл
	
		ПолеФормулы.Область(1, Индекс).ШиринаКолонки = СтрДлина(ПолеФормулы.Область(1, Индекс).Текст);
	
	КонецЦикла;
	
	Элементы.ПолеФормулы.ТекущаяОбласть = ПолеФормулы.Область(1,Элементы.ПолеФормулы.ТекущаяОбласть.Лево+1);
	Элементы.ПолеФормулы.ТекущаяОбласть.Текст                   = " ";
	Элементы.ПолеФормулы.ТекущаяОбласть.ШиринаКолонки           = 1;
	Элементы.ПолеФормулы.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	
КонецПроцедуры

&НаСервере
// Стирает ячейку слева на сервере.
Процедура СтеретьСлеваНаСервере()
	
	Колонка = Элементы.ПолеФормулы.ТекущаяОбласть.Лево;
	Если Колонка > 1 Тогда
		
		ОбластьУдаления = ПолеФормулы.Область(1,Колонка-1);
		ПолеФормулы.УдалитьОбласть(ОбластьУдаления, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		
		Для Индекс = 1 по ПолеФормулы.ШиринаТаблицы Цикл
			
			ПолеФормулы.Область(1, Индекс).ШиринаКолонки = СтрДлина(ПолеФормулы.Область(1, Индекс).Текст);
			
		КонецЦикла;
		
		Элементы.ПолеФормулы.ТекущаяОбласть=ПолеФормулы.Область(1, Колонка-1);
		Элементы.ПолеФормулы.ТекущаяОбласть.ШиринаКолонки = ?(СтрДлина(Элементы.ПолеФормулы.ТекущаяОбласть.Текст) = 0,
																 1,
																 СтрДлина(Элементы.ПолеФормулы.ТекущаяОбласть.Текст));
		Элементы.ПолеФормулы.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Удаляет ячейки на сервере.
Процедура УдалитьНаСервере()
	
	ПолеФормулы.УдалитьОбласть(Элементы.ПолеФормулы.ТекущаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	
	Для Индекс=1 по ПолеФормулы.ШиринаТаблицы Цикл
		
		ПолеФормулы.Область(1, Индекс).ШиринаКолонки = СтрДлина(ПолеФормулы.Область(1, Индекс).Текст);
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////
// Обработчики

&НаКлиенте
// Обработчик команды "НажатьКнопку".
Процедура Плюс(Команда)
	
	УстановитьТекстЯчейки("+");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "НажатьКнопку".
Процедура Минус(Команда)
	
	УстановитьТекстЯчейки("-");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Умножить".
Процедура Умножить(Команда)
	
	УстановитьТекстЯчейки("*");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Разделить".
Процедура Разделить(Команда)
	
	УстановитьТекстЯчейки("/");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаУсловие".
Процедура КнопкаУсловие(Команда)
	
	УстановитьТекстЯчейки("?");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаБольше".
Процедура КнопкаБольше(Команда)
	
	УстановитьТекстЯчейки(">");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаМеньше".
Процедура КнопкаМеньше(Команда)
	
	УстановитьТекстЯчейки("<");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаРавно".
Процедура КнопкаРавно(Команда)
	
	УстановитьТекстЯчейки("=");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СкобкаЗакрыть".
Процедура СкобкаЗакрыть(Команда)
	
	УстановитьТекстЯчейки(")");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СкобкаОткрыть".
Процедура СкобкаОткрыть(Команда)
	
	УстановитьТекстЯчейки("(");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаМакс".
Процедура КнопкаМакс(Команда)
	
	УстановитьТекстЯчейки("Макс");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаМин".
Процедура КнопкаМин(Команда)
	
	УстановитьТекстЯчейки("Мин");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка1".
Процедура Кнопка1(Команда)
	
	УстановитьТекстЯчейки("1");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка2".
Процедура Кнопка2(Команда)
	
	УстановитьТекстЯчейки("2");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка3".
Процедура Кнопка3(Команда)
	
	УстановитьТекстЯчейки("3");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка4".
Процедура Кнопка4(Команда)
	
	УстановитьТекстЯчейки("4");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка5".
Процедура Кнопка5(Команда)
	
	УстановитьТекстЯчейки("5");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка6".
Процедура Кнопка6(Команда)
	
	УстановитьТекстЯчейки("6");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка7".
Процедура Кнопка7(Команда)
	
	УстановитьТекстЯчейки("7");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка8".
Процедура Кнопка8(Команда)
	
	УстановитьТекстЯчейки("8");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка9".
Процедура Кнопка9(Команда)
	
	УстановитьТекстЯчейки("9");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Кнопка0".
Процедура Кнопка0(Команда)
	
	УстановитьТекстЯчейки("0");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаЗапятая".
Процедура КнопкаЗапятая(Команда)
	
	УстановитьТекстЯчейки(",");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КнопкаТочка".
Процедура КнопкаТочка(Команда)
	
	УстановитьТекстЯчейки(".");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КодНаименование".
Процедура КодНаименование(Команда)
	
	Элементы.КодНаименование.Пометка = 
						    НЕ Элементы.КодНаименование.Пометка;
	ЗаменитьКодПредставление(Элементы.КодНаименование.Пометка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Раздвинуть".
Процедура Раздвинуть(Команда)
	
	РаздвинутьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СтеретьСлева".
Процедура СтеретьСлева(Команда)
	
	СтеретьСлеваНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СтеретьСлева".
Процедура Удалить(Команда)
	
	УдалитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ШагВлево".
Процедура ШагВлево(Команда)
	
	Если Элементы.ПолеФормулы.ТекущаяОбласть.Лево > 1 Тогда
		
		Элементы.ПолеФормулы.ТекущаяОбласть = ПолеФормулы.Область(1, Элементы.ПолеФормулы.ТекущаяОбласть.Лево - 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ШагВправо".
Процедура ШагВправо(Команда)
	
	Элементы.ПолеФормулы.ТекущаяОбласть = ПолеФормулы.Область(1, Элементы.ПолеФормулы.ТекущаяОбласть.Лево + 1);
	
КонецПроцедуры

#КонецОбласти