#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет правила, которые действуют для переданной организации в переданном интервале времени.
//
// Параметры:
//  Правила                  - ТаблицаЗначений - коллекция, которая будет дополнена правилами; Можно использовать коллекцию, конструируемую в НовыйТаблицаПравил()
//                             Колонки:
//                             * Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило (обязательная)
//                             * ФинансовыйПериод - Дата - налоговый или иной финансовый период, в котором организация обязана применять правило. 
//                               Если колонка в таблице есть, то правила будут детализированы по всем финансовым периодам, входящим в интервал составления перечня правил.
//                             * ВключеноПользователем - Булево - Истина, если правило действует на основании настройке в форме списка налогов и отчетов
//  Организация              - СправочникСсылка.Организации - 
//  НачалоИнтервала          - Дата - дата начала периода, за который нужно составить перечень правил
//  КонецИнтервала           - Дата - дата окончания периода, за который нужно составить перечень правил
//  Отбор        - Структура - настройка отбор задач
//                   * ИмяЗадачи - Строка - отбор по имени задачи
//                   * Действие  - ПеречислениеСсылка.ВидыДействийКалендаряБухгалтера - отбор по типу задачи
//                   * Правила  - Массив - отбор по правилам
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц, Неопределено - если передан менеджер, то в менеджер может быть помещена таблица ПравилаУплатыНалоговНаМестах.
//                             Это позволит, при необходимости, переиспользовать данные таблицы.
//                             Таблица может не быть помещена в менеджер, если список правил оказался пустым.
//
Процедура ЗаполнитьПравилаОрганизации(Правила, Организация, Знач НачалоИнтервала, Знач КонецИнтервала, Отбор = Неопределено, МенеджерВременныхТаблиц = Неопределено, ТекущийПериод = Неопределено) Экспорт
	
	Перем ОтборПоИмениЗадачи, ОтборПоДействию, ОтборПоПравилам;
	
	Если НачалоИнтервала >= КонецИнтервала Тогда
		Возврат;
	КонецЕсли;
	
	ДетализироватьДоПериода        = (Правила.Колонки.Найти("ФинансовыйПериод") <> Неопределено);
	ЗаполнятьВключеноПользователем = (Правила.Колонки.Найти("ВключеноПользователем") <> Неопределено);
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		Отбор.Свойство("ИмяЗадачи", ОтборПоИмениЗадачи);
		Отбор.Свойство("Действие", ОтборПоДействию);
		Отбор.Свойство("Правила", ОтборПоПравилам);
	КонецЕсли;
	
	РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьПравилаУплатыНалоговНаМестах(
		МенеджерВременныхТаблиц,
		Организация,
		ОтборПоИмениЗадачи,
		ТекущийПериод);
	
	// Таблица АктуальныеПравила содержит действующие в интервале правила в разрезе финансовых периодов
	СоздатьАктуальныеПравила(МенеджерВременныхТаблиц, НачалоИнтервала, КонецИнтервала, Организация, ОтборПоИмениЗадачи, ОтборПоДействию, ОтборПоПравилам, ТекущийПериод);
	
	// В актуальных правилах проверим выполнение условий.
	// Для этого сначала определим, какие условия надо выполнить (в разрезе правил и финансовых периодов)
	// Упорядочим эти условия по возрастанию сложности.
	// Сразу отсечем условия, которые требуют ручного выбора отчетов и задач.
	
	ПорядокУсловий = Новый ТаблицаЗначений;
	ПорядокУсловий.Колонки.Добавить("Условие", Новый ОписаниеТипов("ПеречислениеСсылка.УсловияПримененияТребованийЗаконодательства"));
	ПорядокУсловий.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Для Каждого Условие Из Перечисления.УсловияПримененияТребованийЗаконодательства.УсловияПоВозрастаниюСложности() Цикл
		НоваяСтрока = ПорядокУсловий.Добавить();
		НоваяСтрока.Условие = Условие;
		НоваяСтрока.Порядок = ПорядокУсловий.Индекс(НоваяСтрока);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПорядокУсловий", ПорядокУсловий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокУсловий.Условие КАК Условие,
	|	ПорядокУсловий.Порядок КАК Порядок
	|ПОМЕСТИТЬ ПорядокУсловий
	|ИЗ
	|	&ПорядокУсловий КАК ПорядокУсловий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Условие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Условия.Ссылка КАК Правило
	|ПОМЕСТИТЬ ВключаютсяТолькоВручную
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Условия
	|ГДЕ
	|	Условия.Условие В (ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ЗадачаВыбранаПользователем), ЗНАЧЕНИЕ(Перечисление.УсловияПримененияТребованийЗаконодательства.ПравилоВыбраноПользователем))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальныеПравила.ФинансовыйПериод КАК ФинансовыйПериод,
	|	АктуальныеПравила.Правило КАК Правило,
	|	ЕСТЬNULL(Условия.Условие, НЕОПРЕДЕЛЕНО) КАК Условие
	|ПОМЕСТИТЬ Условия
	|ИЗ
	|	АктуальныеПравила КАК АктуальныеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК Условия
	|		ПО АктуальныеПравила.Правило = Условия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВключаютсяТолькоВручную КАК ВключаютсяТолькоВручную
	|		ПО АктуальныеПравила.Правило = ВключаютсяТолькоВручную.Правило
	|ГДЕ
	|	ВключаютсяТолькоВручную.Правило ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Ссылка КАК Правило,
	|	Правила.ФинансовыйПериод КАК ДлительностьФинансовогоПериода,
	|	УсловияПоПериодам.ФинансовыйПериод КАК ФинансовыйПериод,
	|	УсловияПоПериодам.Условие КАК Условие,
	|	ЕСТЬNULL(ПорядокУсловий.Порядок, 1000) КАК Порядок
	|ИЗ
	|	Условия КАК УсловияПоПериодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|		ПО УсловияПоПериодам.Правило = Правила.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокУсловий КАК ПорядокУсловий
	|		ПО УсловияПоПериодам.Условие = ПорядокУсловий.Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|ИТОГИ ПО
	|	ФинансовыйПериод,
	|	Правило";
	
	// Получим перечень выполненных условий по данным явной настройки пользователя.
	// Они связаны друг с другом и не зависят от периода - их дешевле получить заранее.
	ПроверенныеГлобальныеУсловия = РегистрыСведений.ВариантыПримененияТребованийЗаконодательства.УсловияИзНастроек(Организация);
	
	// Некоторые условия достаточно проверять только один раз
	НепериодическиеУсловия = Перечисления.УсловияПримененияТребованийЗаконодательства.НепериодическиеУсловия();
	
	// В зависимости от того, требуется ли детализация до периода,
	// коллекция будет содержать все правила,
	// или будет обнуляться при обработке каждого периода
	ПравилаСВыполненнымиУсловиями = Новый Соответствие; 
	
	// Проверим, что условия выполняются (в каждом периоде)
	Периоды = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Периоды.Следующий() Цикл
		
		ПроверенныеУсловия = Новый Соответствие;
		Для Каждого КлючИЗначение Из ПроверенныеГлобальныеУсловия Цикл
			ПроверенныеУсловия.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		ВсеПравила = Периоды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВсеПравила.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ПравилаСВыполненнымиУсловиями[ВсеПравила.Правило]) Тогда
				// Это правило уже есть в списке
				Продолжить;
			КонецЕсли;
			
			УсловияДляПроверки = Новый Массив;
			
			ЕстьНеВыполненноеУсловие = Ложь;
			Условия = ВсеПравила.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Условия.Следующий() Цикл
				
				Если Условия.Условие = Неопределено Тогда
					// Не задано никаких условий
					РезультатПроверки = Истина;
				Иначе
					РезультатПроверки = ПроверенныеУсловия[Условия.Условие];
				КонецЕсли;
				
				Если РезультатПроверки = Ложь Тогда
					ЕстьНеВыполненноеУсловие = Истина;
					Прервать;
				ИначеЕсли РезультатПроверки = Неопределено Тогда
					Если УсловияДляПроверки.Найти(Условия.Условие) = Неопределено Тогда
						УсловияДляПроверки.Добавить(Условия.Условие);
					КонецЕсли;
				Иначе
					// Условие проверено - выполняется
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьНеВыполненноеУсловие Тогда
				// Другие условия не проверяем - все равно, это правило к организации в этом периоде не применяется
				Продолжить;
			КонецЕсли;
			
			Если УсловияДляПроверки.Количество() = 0 Тогда
				// Все условия проверены - правило надо выполнять
				ПравилаСВыполненнымиУсловиями.Вставить(ВсеПравила.Правило, Истина);
				Продолжить;
			КонецЕсли;
			
			ВыполненныеУсловия = Новый Массив;
			НеВыполненноеУсловие = Перечисления.УсловияПримененияТребованийЗаконодательства.ПроверитьУсловия(
				УсловияДляПроверки,
				ВсеПравила.ФинансовыйПериод,
				ВсеПравила.ДлительностьФинансовогоПериода,
				Организация,
				ВыполненныеУсловия);
			
			Для Каждого ВыполненноеУсловие Из ВыполненныеУсловия Цикл
				ПроверенныеУсловия.Вставить(ВыполненноеУсловие, Истина);
				Если НепериодическиеУсловия[ВыполненноеУсловие] <> Неопределено Тогда
					ПроверенныеГлобальныеУсловия.Вставить(ВыполненноеУсловие, Истина);
				КонецЕсли;
			КонецЦикла;
			
			Если НеВыполненноеУсловие = Неопределено Тогда
				// Все условия проверены - правило надо выполнять
				ПравилаСВыполненнымиУсловиями.Вставить(ВсеПравила.Правило, Истина);
			Иначе
				ПроверенныеУсловия.Вставить(НеВыполненноеУсловие, Ложь);
				Если НепериодическиеУсловия[НеВыполненноеУсловие] <> Неопределено Тогда
					ПроверенныеГлобальныеУсловия.Вставить(НеВыполненноеУсловие, Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; // ВсеПравила
		
		Если ДетализироватьДоПериода Тогда
			// Дополним коллекцию
			Для Каждого КлючИЗначение Из ПравилаСВыполненнымиУсловиями Цикл
				НоваяСтрока = Правила.Добавить();
				НоваяСтрока.Правило          = КлючИЗначение.Ключ;
				НоваяСтрока.ФинансовыйПериод = Периоды.ФинансовыйПериод;
			КонецЦикла;
			ПравилаСВыполненнымиУсловиями.Очистить();
		КонецЕсли;
		
	КонецЦикла; // Периоды
	
	Если Не ДетализироватьДоПериода Тогда
		// Дополним коллекцию
		Для Каждого КлючИЗначение Из ПравилаСВыполненнымиУсловиями Цикл
			Правила.Добавить().Правило = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	// Дополним правилами, которые действуют в силу прямого указания пользователя - 
	// выбраны им явно в списке НалогиОтчеты.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Правило
	|ПОМЕСТИТЬ ПравилаВключенныеПользователем
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО НалогиОтчеты.НалогОтчет = ПравилаПредставленияОтчетовУплатыНалогов.Владелец
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет ССЫЛКА Справочник.ЗадачиБухгалтера
	|	И НалогиОтчеты.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НалогиОтчеты.НалогОтчет
	|ИЗ
	|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
	|ГДЕ
	|	НалогиОтчеты.НалогОтчет ССЫЛКА Справочник.ПравилаПредставленияОтчетовУплатыНалогов
	|	И НалогиОтчеты.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|";
	Запрос.Выполнить();
	
	Если ДетализироватьДоПериода Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктуальныеПравила.Правило КАК Правило,
		|	АктуальныеПравила.ФинансовыйПериод КАК ФинансовыйПериод
		|ИЗ
		|	АктуальныеПравила КАК АктуальныеПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаВключенныеПользователем КАК ПравилаВключенныеПользователем
		|		ПО АктуальныеПравила.Правило = ПравилаВключенныеПользователем.Правило";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктуальныеПравила.Правило КАК Правило
		|ПОМЕСТИТЬ АктуальныеПравилаБезПериодов
		|ИЗ
		|	АктуальныеПравила КАК АктуальныеПравила
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Правило
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктуальныеПравила.Правило КАК Правило
		|ИЗ
		|	АктуальныеПравилаБезПериодов КАК АктуальныеПравила
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаВключенныеПользователем КАК ПравилаВключенныеПользователем
		|		ПО АктуальныеПравила.Правило = ПравилаВключенныеПользователем.Правило";
	
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Правила.Добавить();
		НоваяСтрока.Правило          = Выборка.Правило;
		Если ДетализироватьДоПериода Тогда
			НоваяСтрока.ФинансовыйПериод = Выборка.ФинансовыйПериод;
		КонецЕсли;
		Если ЗаполнятьВключеноПользователем Тогда
			НоваяСтрока.ВключеноПользователем = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ВключенныеПравилаОрганизации(Организация, ТекущийПериод = Неопределено) Экспорт
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("Правило",               Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	Правила.Колонки.Добавить("ВключеноПользователем", Новый ОписаниеТипов("Булево"));
	Правила.Индексы.Добавить("Правило");
	
	Если ТекущийПериод = Неопределено Тогда
		
		ТекущаяДата = ТекущаяДатаСеанса();
		
		НачалоИнтервала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -12));
		
		ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
		НачалоИнтервала = Макс(НачалоИнтервала, ДатаНачалаДеятельности);
		
		КонецИнтервала  = КонецГода(ДобавитьМесяц(ТекущаяДата, 12));
	Иначе
		НачалоИнтервала = НачалоМесяца(ДобавитьМесяц(НачалоГода(ТекущийПериод),-1));
		КонецИнтервала  = КонецГода(ТекущийПериод);
	КонецЕсли;
	
	ЗаполнитьПравилаОрганизации(Правила, Организация, НачалоИнтервала, КонецИнтервала,,, ТекущийПериод);
	
	Возврат Правила;
	
КонецФункции

Функция НовыйПравилаОрганизации() Экспорт
	
	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("ФинансовыйПериод", Новый ОписаниеТипов("Дата"));
	Правила.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	
	Возврат Правила;
	
КонецФункции

Функция СкомпоноватьПолноеИмяПравила(ИдентификаторЗадачи, ИдентификаторПравила) Экспорт
	
	Возврат Строка(ИдентификаторЗадачи) + "." + Строка(ИдентификаторПравила);
	
КонецФункции

// Возвращает идентификатор правила и задачи-владельца этого правила.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//
// Возвращаемое значение:
//   Структура
//     * ИдентификаторЗадачи
//     * ИдентификаторПравила
//
Функция ИдентификаторыПравилаИЗадачи(Правило) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Правило", Правило);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Владелец.Код КАК ИдентификаторЗадачи,
	|	Правила.Код КАК ИдентификаторПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Ссылка = &Правило";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Новый Структура("ИдентификаторЗадачи, ИдентификаторПравила");
		
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Возврат Результат;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолноеИмяПравила(Правило) Экспорт
	
	Идентификаторы = ИдентификаторыПравилаИЗадачи(Правило);
	
	Если Идентификаторы = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СкомпоноватьПолноеИмяПравила(Идентификаторы.ИдентификаторЗадачи, Идентификаторы.ИдентификаторПравила);
	
КонецФункции

Функция ТипПолногоИмениПравила() Экспорт
	
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(101);
	
КонецФункции

// Возвращает ссылку на правило по идентификатору задачи-владельца и самого правила.
//
// Параметры:
//	ИдентификаторЗадачи - Строка - Идентификатор задачи-владельца.
//	ИдентификаторПравила - Строка - Идентификатор правила.
//
// Возвращаемое значение:
//	СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов, Неопределено - Найденное правило или Неопределено.
//
Функция НайтиПоИдентификатору(ИдентификаторЗадачи, ИдентификаторПравила) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗадачи",  ИдентификаторЗадачи);
	Запрос.УстановитьПараметр("ИдентификаторПравила", ИдентификаторПравила);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Владелец.Код = &ИдентификаторЗадачи
	|	И Правила.Код = &ИдентификаторПравила
	|	И НЕ Правила.ПометкаУдаления";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

// Определяет все налоговые периоды, относящиеся к дате регистрации организации, которые организация для целей уплаты налогов (представления отчетов) пропускает.
// Такие требования установлены п. 2 ст. 55 НК РФ и п. 3 ст. 15 закона "О бухгалтерском учете".
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   ИсключаемыеПериоды - Соответствие
//    * Ключ     - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода
//    * Значение - Дата - Дата начала исключаемого финансового периода.
//
Функция ИсключаемыеПериодыПоДатеРегистрации(Организация) Экспорт
	
	ИсключаемыеПериоды = Новый Соответствие;
	
	ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ДатаРегистрации");
	
	Если Не ЗначениеЗаполнено(ДатаРегистрации) Тогда
		Возврат ИсключаемыеПериоды;
	КонецЕсли;
	
	Для Каждого ОписаниеВарианта Из Метаданные.Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.ЗначенияПеречисления Цикл
		
		Вариант = Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода[ОписаниеВарианта.Имя];
		
		ИсключаемыйПериод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(Вариант, Организация, ДатаРегистрации);
		
		Если ЗначениеЗаполнено(ИсключаемыйПериод) Тогда
			ИсключаемыеПериоды.Вставить(Вариант, ИсключаемыйПериод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсключаемыеПериоды;
	
КонецФункции

// Возвращает дату начала первого финансового периода для переданного правила и организации
// с учетом даты регистрации и особенностей законодательства (статья 55 НК РФ, п. 3 ст. 15 закона "О бухгалтерском учете").
//
// Пример: для организации, зарегистрированной в декабре 2017 года, и правила для декларации УСН
// будет возвращено 01.01.2018 - начало первого года, по итогам которого потребуется сдавать декларацию.
//
// Параметры:
//  ДанныеПравила          - Структура - сведения об особенностях отчета/налога.
//                              Ключи структуры:
//                               * ФинансовыйПериод - ПеречислениеСсылка.Периодичность - периодичность предоставления отчета / уплаты налога.
//                               * РасширенныйПервыйНалоговыйПериод - ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода -
//                                                    вариант особенностей законодательства для первого налогового/отчетного периода.
//                         - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов -
//                              правило, описывающее отчет/налог. Особенности отчета/налога будут определены из реквизитов правила.
//  Организация            - СправочникСсылка.Организации - проверяемая организация;
//  ДатаРегистрации        - Дата - дата регистрации проверяемой организации;
//                                  если не указана - будет получена из реквизитов организации.
//
// Возвращаемое значение:
//   Дата   - начало первого финансового периода.
//
Функция ПервыйФинансовыйПериод(ДанныеПравила, Организация, ДатаРегистрации = Неопределено) Экспорт
	
	ОсобенностиОтчетаНалога = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
	
	ТипДанныхПравила = ТипЗнч(ДанныеПравила);
	
	Если ТипДанныхПравила = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ОсобенностиОтчетаНалога, ДанныеПравила);
	ИначеЕсли ТипДанныхПравила = Тип("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов") Тогда
		ОсобенностиОтчетаНалога = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПравила, ОсобенностиОтчетаНалога);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	// Дату регистрации необходимо получить явно - здесь она является проверяемым периодом для БРО.
	Если ДатаРегистрации = Неопределено Тогда
		ДатаРегистрации = Справочники.Организации.ДатаРегистрацииОрганизации(Организация);
	КонецЕсли;
	
	ПервыйНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
		ДатаРегистрации,
		ОсобенностиОтчетаНалога.РасширенныйПервыйНалоговыйПериод,
		ОсобенностиОтчетаНалога.ФинансовыйПериод,
		ДатаРегистрации);
		
	Возврат ПервыйНалоговыйПериод.Период;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Следует вызывать при изменении результата ИнтерфейсыВзаимодействияБРОКлиентСервер.ВозможнаОтправкаЭлектронногоДокумента
//
Процедура ЗаполнитьОтправкаОтчетаОграничена() Экспорт
	
	// В обработчике реализовано первоначальное заполнение реквизита ОтправкаОтчетаОграничена.
	// В дальнейшем в обработчике можно опираться на предположение,
	// что перечень отчетов с ограниченной отправкой будет сокращаться, но не увеличиваться.
	
	ИсполнителиТребований = ИнтерфейсыВзаимодействияБРО.РеглОтчетыИсполнителиТребований();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.Ссылка КАК Ссылка,
	|	Правила.Владелец.Код КАК ИдентификаторЗадачи,
	|	Правила.Код КАК ИдентификаторПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	НЕ Правила.ОтправкаОтчетаОграничена";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Требование = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СкомпоноватьПолноеИмяПравила(
			Выборка.ИдентификаторЗадачи,
			Выборка.ИдентификаторПравила);
		ИмяОтчета  = ИнтерфейсыВзаимодействияБРО.ИмяРеглОтчета(Требование, ИсполнителиТребований);
		Если Не ЗначениеЗаполнено(ИмяОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтерфейсыВзаимодействияБРОКлиентСервер.ВозможнаОтправкаЭлектронногоДокумента(ИмяОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Объект.УстановитьОтправкаОтчетаОграничена(Истина);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает временную таблицу АктуальныеПравила.
//
// Актуальные =
// - действуют для данной организации
// - в периоде обзора по ним могут появиться новые задачи
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - в него будет помещена таблица.
//                             Должен содержать таблицу ПравилаУплатыНалоговНаМестах.
//  НачалоОбзора			 - Дата	- дата начала периода, к которому могут относиться задачи
//  КонецОбзора				 - Дата	- дата конца периода, к которому могут относиться задачи
//  Организация				 - СправочникСсылка.Организации	 - 
//  ИмяЗадачиУплатыНалога	 - Строка	- отбор; 
//                             если передано непустое имя, то правила будут выбраны только среди тех,
//                             что относятся к уплате налога по задаче с этим именем
//
Процедура СоздатьАктуальныеПравила(МенеджерВременныхТаблиц, НачалоОбзора, КонецОбзора, Организация, ИмяЗадачи, Действие, ОтборПоПравилам, ТекущийПериод = Неопределено)
	
	Правила = НовыйПравилаОрганизации();
	
	День = 24 * 60 * 60;
	ТекушаяДата = НачалоДня(ТекущаяДатаСеанса());
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	УсловияИсключения = Перечисления.УсловияПримененияТребованийЗаконодательства.УсловияИсключенияПоТипуОрганизации(Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УсловияИсключения", УсловияИсключения);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Исключения
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов.Условия КАК ПравилаПредставленияОтчетовУплатыНалоговУсловия
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалоговУсловия.Условие В(&УсловияИсключения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФедеральныеПравила.Ссылка КАК Правило,
	|	ФедеральныеПравила.ФинансовыйПериод КАК ДлительностьФинансовогоПериода,
	|	ФедеральныеПравила.НачалоДействия КАК НачалоДействия,
	|	ФедеральныеПравила.КонецДействия КАК КонецДействия,
	|	ФедеральныеПравила.Периодичность КАК Периодичность,
	|	ЕСТЬNULL(МестныеПравила.СрокМесяцев, ФедеральныеПравила.СрокМесяцев) КАК СрокМесяцев,
	|	ЕСТЬNULL(МестныеПравила.СрокДней, ФедеральныеПравила.СрокДней) КАК СрокДней,
	|	ФедеральныеПравила.ОтставаниеБазовогоПериода КАК ОтставаниеБазовогоПериода,
	|	ФедеральныеПравила.Действие КАК Действие,
	|	ФедеральныеПравила.БазовыйПериод КАК БазовыйПериод,
	|	ФедеральныеПравила.РасширенныйПервыйНалоговыйПериод КАК РасширенныйПервыйНалоговыйПериод
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ФедеральныеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУплатыНалоговНаМестах КАК МестныеПравила
	|		ПО ФедеральныеПравила.Ссылка = МестныеПравила.Правило
	|ГДЕ
	|	НЕ ФедеральныеПравила.ПометкаУдаления
	|	И ФедеральныеПравила.ФинансовыйПериод <> ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
	|	И ЕСТЬNULL(МестныеПравила.Включено, ИСТИНА)
	|	И &УсловиеПоИмениЗадачи
	|	И &УсловиеПоДействию
	|	И &УсловиеПоПравилам
	|	И &УсловиеПоПериоду
	|	И НЕ ФедеральныеПравила.Ссылка В
	|				(ВЫБРАТЬ
	|					ВТ_Исключения.Ссылка
	|				ИЗ
	|					ВТ_Исключения КАК ВТ_Исключения)";
	
	Если ЗначениеЗаполнено(ИмяЗадачи) Тогда
		Запрос.УстановитьПараметр("ИмяЗадачи", ИмяЗадачи);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоИмениЗадачи", "Владелец.Код = &ИмяЗадачи");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоИмениЗадачи", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		Запрос.УстановитьПараметр("Действие", Действие);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДействию", "Действие = &Действие");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоДействию", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоПравилам) Тогда
		Запрос.УстановитьПараметр("ОтборПоПравилам", ОтборПоПравилам);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПравилам", "Код В (&ОтборПоПравилам)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПравилам", "ИСТИНА");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийПериод) Тогда
		Запрос.УстановитьПараметр("ТекущийПериод", ТекущийПериод);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "
		|ВЫБОР
		|	КОГДА ФедеральныеПравила.КонецДействия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ИЛИ ФедеральныеПравила.КонецДействия >= &ТекущийПериод
		|			ТОГДА ИСТИНА
		|	КОГДА ФедеральныеПравила.СрокМесяцев >= 0
		|		ИЛИ (ФедеральныеПравила.СрокМесяцев < 0
		|		И РАЗНОСТЬДАТ(ФедеральныеПравила.КонецДействия, &ТекущийПериод, МЕСЯЦ) + ФедеральныеПравила.СрокМесяцев > 0)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ФедеральныеПравила.КонецДействия, МЕСЯЦ, ФедеральныеПравила.СрокМесяцев), ДЕНЬ, ФедеральныеПравила.СрокДней + 7) >= &ТекущийПериод
		|	ИНАЧЕ ЛОЖЬ
		| КОНЕЦ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоПериоду", "ИСТИНА");
	КонецЕсли;
	
	ИсключаемыеПериоды = ИсключаемыеПериодыПоДатеРегистрации(Организация);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		// Если интервал обзора настолько мал, что включает в себя только один период,
		// то это правило заведомо не приведет к появлению новых задач
		Если ЗначениеЗаполнено(НачалоОбзора) Тогда
			КонецПервогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
				Выборка.Периодичность,
				НачалоОбзора);
			Если КонецПервогоПериода >= КонецДня(КонецОбзора) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Определим интервал финансовых периодов, 
		// к которым относятся задачи, инициированные в периоде обзора
		
		// Часто он совпадает с окном обзора...
		ПервыйФинансовыйПериод    = НачалоОбзора;
		ПоследнийФинансовыйПериод = КонецОбзора;
		
		// ... но есть два исключения
		СобытиеПозжеРелевантногоПериода = КалендарьБухгалтера.СрокИстекаетПослеОкончанияРелевантногоПериода(Выборка);
		БазовыйПериодОпределяетсяПросто = КалендарьБухгалтера.БазовыйПериодОпределяетсяПросто(Выборка);
		ФинансовыйПериодОпределяетсяПросто = СобытиеПозжеРелевантногоПериода И БазовыйПериодОпределяетсяПросто;
		
		Если Не ФинансовыйПериодОпределяетсяПросто Тогда
			// Первым финансовым периодом считаем тот, к которому относятся задачи, 
			// появившиеся в начало обзора или немного ранее.
			Если БазовыйПериодОпределяетсяПросто Тогда
				ДлительностьБазовогоПериода = Выборка.Периодичность;
				ОтставаниеБазовогоПериода   = 0;
			Иначе
				ДлительностьБазовогоПериода = Выборка.БазовыйПериод;
				ОтставаниеБазовогоПериода   = Выборка.ОтставаниеБазовогоПериода;
			КонецЕсли;
			
			// Базовый период всегда предшествует сроку
			КалендарьБухгалтера.УточнитьОтставаниеБазовогоПериода(
				ОтставаниеБазовогоПериода, 
				ДлительностьБазовогоПериода, 
				Выборка.СрокМесяцев);
			
			Если ЗначениеЗаполнено(НачалоОбзора) Тогда
				ПервыйФинансовыйПериод = ПересчитатьБазовыйПериодВФинансовый(
					НачалоОбзора,
					ДлительностьБазовогоПериода,
					ОтставаниеБазовогоПериода);
			КонецЕсли;
				
			ПоследнийФинансовыйПериод = ПересчитатьБазовыйПериодВФинансовый(
				КонецОбзора,
				ДлительностьБазовогоПериода,
				ОтставаниеБазовогоПериода);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НачалоОбзора) Тогда
			// Первым финансовым периодом считаем тот, за который можем еще успеть выполнить
			// задачу в срок
			ПервыйФинансовыйПериод = КалендарьБухгалтера.НачалоАктуальногоПериода(
				Выборка,
				ТекушаяДата,
				ДатаНачалаДеятельности);
		КонецЕсли;
		
		// Сопоставим период обзора и период действия правила.
		// NB: здесь сравниваются финансовые периоды, а не базовые.
		Если ЗначениеЗаполнено(Выборка.НачалоДействия) Тогда
			ПервыйФинансовыйПериод = Макс(ПервыйФинансовыйПериод, Выборка.НачалоДействия);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.КонецДействия) Тогда
			ПоследнийФинансовыйПериод = Мин(ПоследнийФинансовыйПериод, Выборка.КонецДействия);
		КонецЕсли;
		
		Если ПервыйФинансовыйПериод > ПоследнийФинансовыйПериод Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим интервал финансовых периодов, 
		// к которым относятся задачи, инициированные в периоде обзора
		
		ФинансовыеПериоды = КалендарьБухгалтера.Периоды(ПервыйФинансовыйПериод, ПоследнийФинансовыйПериод, Выборка.ДлительностьФинансовогоПериода);
		
		Для Каждого ФинансовыйПериод Из ФинансовыеПериоды Цикл
			
			Если ИсключаемыеПериоды[Выборка.РасширенныйПервыйНалоговыйПериод] = ФинансовыйПериод Тогда
				// Не добавляем период, если для предусмотренного в правиле варианта расширенного первого налогового периода
				// есть исключаемый период, который совпадает с периодом задачи.
				Продолжить;
			КонецЕсли;
			
			Если ИнтерфейсыВзаимодействияБРО.ПервыйНалоговыйПериодНачинаетсяСДатыПостановкиНаУчет(Выборка.РасширенныйПервыйНалоговыйПериод) Тогда
				ДатаРегистрации = ОбщегоНазначенияБПВызовСервераПовтИсп.ДатаРегистрацииОрганизации(Организация);
				КонецФинансовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
					ИнтерфейсыВзаимодействияБРО.СтандартнаяДлительностьНалоговогоПериода(Выборка.РасширенныйПервыйНалоговыйПериод),
					ФинансовыйПериод);
				ДатаПостановкиНаУчет = УчетнаяПолитика.ДатаПостановкиНаУчетНалогоплательщика(Организация, КонецФинансовогоПериода);
				Если ИнтерфейсыВзаимодействияБРО.НалоговыйПериодПропущен(
						Организация,
						ФинансовыйПериод,
						Выборка.РасширенныйПервыйНалоговыйПериод,
						ДатаРегистрации,
						ДатаПостановкиНаУчет) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = Правила.Добавить();
			НоваяСтрока.Правило          = Выборка.Правило;
			НоваяСтрока.ФинансовыйПериод = ФинансовыйПериод;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Правила.Правило КАК Правило,
	|	Правила.ФинансовыйПериод КАК ФинансовыйПериод
	|ПОМЕСТИТЬ АктуальныеПравила
	|ИЗ
	|	&Правила КАК Правила
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	ФинансовыйПериод";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПересчитатьБазовыйПериодВФинансовый(БазовыйПериод, ДлительностьБазовогоПериода, ОтставаниеБазовогоПериода)
	
	ФинансовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
		ДлительностьБазовогоПериода,
		БазовыйПериод) + 1;
		
	Если ОтставаниеБазовогоПериода > 0 Тогда
		ФинансовыйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
			ФинансовыйПериод,
			ДлительностьБазовогоПериода,
			ОтставаниеБазовогоПериода);
	КонецЕсли;
	
	Возврат ФинансовыйПериод;
	
КонецФункции

#КонецОбласти

#КонецЕсли
