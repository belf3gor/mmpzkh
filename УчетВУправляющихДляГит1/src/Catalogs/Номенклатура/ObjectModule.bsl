#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция проверяет, существуют ли ссылки номенклатуру в движениях регистров накопления.
// Если есть - нельзя менять признак "Услуга"
//
// Параметры:
//  СуществуютСсылки - булево, переменная, в которой сохраняется результат работы функции, чтобы
//                     при последующих вызовах заново не считать функцию.
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция СуществуютСсылки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ХозрасчетныйСубконто.Значение = &Номенклатура"; 
	
	СтатусВозврата = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтатусВозврата;
	
КонецФункции

// Функция проверяет, существуют ли ссылки номенклатуру в справочнике "КонтрольныеЗнакиГИСМ".
// Если есть - нельзя менять признак "ПродукцияМаркируемаяДляГИСМ"
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция СуществуютСсылкиНаКонтрольныеЗнакиГИСМ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрольныеЗнакиГИСМ.Владелец
	|ИЗ
	|	Справочник.КонтрольныеЗнакиГИСМ КАК КонтрольныеЗнакиГИСМ
	|ГДЕ
	|	КонтрольныеЗнакиГИСМ.Владелец = &Номенклатура"; 
	
	СтатусВозврата = НЕ Запрос.Выполнить().Пустой();
	
	Возврат СтатусВозврата;
	
КонецФункции

// Функция проверяет, существуют ли ссылки номенклатуру в регистре "СоответствиеНоменклатурыВЕТИС".
// Если есть - нельзя менять признак "ПодконтрольнаяПродукцияВЕТИС".
//
// Возвращаемое значение:
//  Истина - если есть движения, Ложь - если нет.
//
Функция СуществуютСсылкиНаПодконтрольнуюПродукциюВЕТИС()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура = &Номенклатура"; 
	
	СтатусВозврата = НЕ Запрос.Выполнить().Пустой();
	
	Возврат СтатусВозврата;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа 
		И НЕ ЭтоНовый() Тогда
		
		РеквизитыНоменклатурыИзИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"Услуга, ПродукцияМаркируемаяДляГИСМ, ПодконтрольнаяПродукцияВЕТИС");
		
		Если Услуга <> РеквизитыНоменклатурыИзИБ.Услуга 
			И СуществуютСсылки() Тогда
		
			ТекстСообщения = НСтр("ru = 'Номенклатура ""%1"" участвует в товародвижении.
				|Признак услуги не может быть изменен!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Наименование));
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", 
				НСтр("ru = 'Услуга'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, 
				"Услуга", "Объект", Отказ);
			
		КонецЕсли;
		
		Если ПродукцияМаркируемаяДляГИСМ <> РеквизитыНоменклатурыИзИБ.ПродукцияМаркируемаяДляГИСМ 
			И (РеквизитыНоменклатурыИзИБ.ПродукцияМаркируемаяДляГИСМ = Истина
			И СуществуютСсылкиНаКонтрольныеЗнакиГИСМ()) Тогда
		
			ТекстСообщения = НСтр("ru = 'Для номенклатуры ""%1"" введены контрольные знаки ГИСМ.
				|Признак ""Меховое изделие"" не может быть изменен!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Наименование));
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", 
				НСтр("ru = 'Меховое изделие'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, 
				"ПродукцияМаркируемаяДляГИСМ", "Объект", Отказ);
			
		КонецЕсли;

		Если ПодконтрольнаяПродукцияВЕТИС <> РеквизитыНоменклатурыИзИБ.ПодконтрольнаяПродукцияВЕТИС 
			И (РеквизитыНоменклатурыИзИБ.ПодконтрольнаяПродукцияВЕТИС = Истина
			И СуществуютСсылкиНаПодконтрольнуюПродукциюВЕТИС()) Тогда
		
			ТекстСообщения = НСтр("ru = 'Номенклатура ""%1"" участвует в обмене с ФГИС ""Меркурий"".
				|Признак ""Ветеринарный контроль"" не может быть изменен!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Наименование));
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", 
				НСтр("ru = 'Ветеринарный контроль'"),,, ТекстСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, 
				"ПодконтрольнаяПродукцияВЕТИС", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ЭтоГруппа Тогда
	    ОсновнаяСпецификацияНоменклатуры = "";
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Родитель") Тогда
		
		РеквизитыГруппы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Родитель, 
			"ВидНоменклатуры");
			
		Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			ВидНоменклатуры	= РеквизитыГруппы.ВидНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		
		ОтборУслуга = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Услуга"));
		
		Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			
			УслугаВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "Услуга");
			
			Если ОтборУслуга И УслугаВидНоменклатуры <> ДанныеЗаполнения.Услуга Тогда
				ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
				Услуга = ДанныеЗаполнения.Услуга;
			Иначе
				Услуга = УслугаВидНоменклатуры;
			КонецЕсли;
			
		КонецЕсли;
		
		//Если вид номенклатуры не заполнен (в т.ч. если вид номенклатуры очищен, как не соотвествующий отбору)
		Если НЕ ЗначениеЗаполнено(ВидНоменклатуры) Тогда
			
			Запрос = Новый Запрос();
			Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ВидыНоменклатуры.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|ГДЕ
			|	НЕ ВидыНоменклатуры.ПометкаУдаления";
			
			Если ОтборУслуга Тогда
				Текст = Текст + "
								|	И ВидыНоменклатуры.Услуга = &Услуга";
				Запрос.УстановитьПараметр("Услуга", ДанныеЗаполнения.Услуга);
			КонецЕсли;
			Запрос.Текст = Текст;
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
				ВидНоменклатуры = Выборка.Ссылка;
				УслугаВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "Услуга");
				Услуга = УслугаВидНоменклатуры;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			
			ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
			
			НоменклатурнаяГруппа = БухгалтерскийУчетВызовСервераПовтИсп.ОсновнаяНоменклатурнаяГруппа();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЭтоГруппа Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидНоменклатуры");
	КонецЕсли;
	
	Если ЭтоГруппа ИЛИ Услуга Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмерения");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоГруппа Тогда
		
		Если Услуга Тогда
			ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВидНоменклатурыУслуга", ВидНоменклатуры);
			Справочники.Номенклатура.ПроверитьЗначениеОпцииИспользоватьПериодичностьУслуг(ПериодичностьУслуги);
		Иначе
			ОбщегоНазначенияБПВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновнойВидНоменклатуры", ВидНоменклатуры);
			Если ПродукцияМаркируемаяДляГИСМ Тогда
				Справочники.КонтрольныеЗнакиГИСМ.ПроверитьЗначениеОпцииИспользоватьКонтрольныеЗнакиГИСМ();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки,
	|	""СоответствиеНоменклатурыЕГАИС"" КАК ИмяРегистра
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Код,
	|	""КодыТоваровПодключаемогоОборудованияOffline"" КАК ИмяРегистра
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	""ШтрихкодыНоменклатуры"" КАК ИмяРегистра
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	Для каждого РезультатЗапроса Из РезультатыЗапросов Цикл
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений[Выборка.ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
	КонецЦикла; 
КонецПроцедуры

#КонецЕсли
