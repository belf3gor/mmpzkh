#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Процедура ПроверитьЗначениеОпцииИспользоватьПериодичностьУслуг(ПериодичностьУслуг) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПериодичностьУслуг")
		И ЗначениеЗаполнено(ПериодичностьУслуг) Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьПериодичностьУслуг.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоМаркируемаяАлкогольнаяПродукция(Номенклатура) Экспорт
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СоответствиеНоменклатурыЕГАИС) 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		
		Возврат Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = &Номенклатура
	|	И СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.ВидПродукции.Маркируемый";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.ПечатьЭтикеток) Тогда
		// Этикетка	
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Этикетка'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Этикетка'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиЭтикеток";
		КомандаПечати.СписокФорм    = "ФормаЭлемента";
		КомандаПечати.Порядок       = 10;
		
		// Ценник
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Ценники";
		КомандаПечати.Представление = НСтр("ru = 'Ценник'");
		КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Ценник'");
		КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиЦенников";
		КомандаПечати.СписокФорм    = "ФормаСписка, ФормаЭлемента";
		КомандаПечати.Порядок       = 20;
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеИменВидовНоменклатуры()
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("Наименование" , ВариантыОтчетов.ОписаниеТиповСтрока(200));
	ТаблицаСоответствий.Колонки.Добавить("Счет" , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Товары";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Материалы";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.СырьеИМатериалы;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Спецодежда";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Инвентарь и хозяйственные принадлежности";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Товары на комиссии";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Оборудование (объекты основных средств)";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Оборудование к установке";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Полуфабрикаты";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Продукция";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Продукция из материалов заказчика";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Возвратная тара";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя;
	
	НоваяСтрока 				= ТаблицаСоответствий.Добавить();
	НоваяСтрока.Наименование 	= "Товары на ответственном хранении";
	НоваяСтрока.Счет 			= ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

#Область ОбработчикиОбновления

Процедура ЗаполнитьВидыНоменклатуры() Экспорт
	
	//Проверим необходимость обновления
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СоответствиеИменВидовНоменклатуры", СоответствиеИменВидовНоменклатуры()); 
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеИменВидовНоменклатуры.Наименование,
	|	СоответствиеИменВидовНоменклатуры.Счет
	|ПОМЕСТИТЬ ВТСоответствиеИменВидовНоменклатуры
	|ИЗ
	|	&СоответствиеИменВидовНоменклатуры КАК СоответствиеИменВидовНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаНоменклатуры.Номенклатура.Ссылка КАК НоменклатураСсылка,
	|	СчетаУчетаНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	СчетаУчетаНоменклатуры.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(СчетаУчетаНоменклатуры.Номенклатура.ВидНоменклатуры.Услуга, НЕ ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ЛОЖЬ)) КАК Услуга
	|ПОМЕСТИТЬ ВТГруппыНоменклатуры
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Наименование,
	|	Номенклатура.ВидНоменклатуры,
	|	ЕСТЬNULL(Номенклатура.ВидНоменклатуры.Услуга, ЛОЖЬ)
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ЭтоГруппа
	|	И Номенклатура.ВидНоменклатуры <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ИменаВидовНоменклатуры.Наименование, ВЫБОР
	|			КОГДА ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ЛОЖЬ)
	|				ТОГДА СчетаУчетаНоменклатуры.СчетУчета.Наименование
	|			ИНАЧЕ ""Товары""
	|		КОНЕЦ) КАК ИмяВидаНоменклатуры,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ИСТИНА)
	|			ТОГДА СчетаУчетаНоменклатуры.СчетУчета.Наименование
	|		ИНАЧЕ ""Услуги""
	|	КОНЕЦ КАК ИмяВидаНоменклатурыУслуга,
	|	НЕ ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчета.Количественный, ИСТИНА) КАК Услуга
	|ПОМЕСТИТЬ ВТГруппаПустыхЭлементов
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеИменВидовНоменклатуры КАК ИменаВидовНоменклатуры
	|		ПО СчетаУчетаНоменклатуры.СчетУчета = ИменаВидовНоменклатуры.Счет
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаУчетаНоменклатуры.Организация,
	|	СчетаУчетаНоменклатуры.Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГруппыНоменклатуры.НоменклатураСсылка,
	|	ВТГруппыНоменклатуры.НоменклатураНаименование,
	|	ВТГруппыНоменклатуры.НоменклатураНаименование КАК НоменклатураНаименованиеУслуга,
	|	ВЫБОР
	|		КОГДА ВТГруппыНоменклатуры.Услуга
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ВТГруппыНоменклатуры.ВидНоменклатуры
	|	КОНЕЦ КАК ВидНоменклатуры,
	|	ВЫБОР
	|		КОГДА ВТГруппыНоменклатуры.Услуга
	|			ТОГДА ВТГруппыНоменклатуры.ВидНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ВидНоменклатурыУслуга,
	|	ВТГруппыНоменклатуры.Услуга КАК Услуга
	|ПОМЕСТИТЬ ВТВидыНоменклатуры
	|ИЗ
	|	ВТГруппыНоменклатуры КАК ВТГруппыНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	ВТГруппаПустыхЭлементов.ИмяВидаНоменклатуры,
	|	ВТГруппаПустыхЭлементов.ИмяВидаНоменклатурыУслуга,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка),
	|	ВТГруппаПустыхЭлементов.Услуга
	|ИЗ
	|	ВТГруппаПустыхЭлементов КАК ВТГруппаПустыхЭлементов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВидыНоменклатуры.НоменклатураСсылка КАК НоменклатураСсылка,
	|	МАКСИМУМ(ВТВидыНоменклатуры.НоменклатураНаименование) КАК НоменклатураНаименование,
	|	МАКСИМУМ(ВТВидыНоменклатуры.НоменклатураНаименованиеУслуга) КАК НоменклатураНаименованиеУслуга,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТВидыНоменклатуры.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|					И НЕ ВидыНоменклатуры.Ссылка ЕСТЬ NULL 
	|				ТОГДА ВидыНоменклатуры.Ссылка
	|			ИНАЧЕ ВТВидыНоменклатуры.ВидНоменклатуры
	|		КОНЕЦ) КАК ВидНоменклатуры,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТВидыНоменклатуры.ВидНоменклатурыУслуга = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|					И НЕ ВидыНоменклатурыУслуга.Ссылка ЕСТЬ NULL 
	|				ТОГДА ВидыНоменклатурыУслуга.Ссылка
	|			ИНАЧЕ ВТВидыНоменклатуры.ВидНоменклатурыУслуга
	|		КОНЕЦ) КАК ВидНоменклатурыУслуга,
	|	МИНИМУМ(ВТВидыНоменклатуры.Услуга) КАК Услуга
	|ИЗ
	|	ВТВидыНоменклатуры КАК ВТВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВТВидыНоменклатуры.НоменклатураНаименование = ВидыНоменклатуры.Наименование
	|			И (НЕ ВидыНоменклатуры.Услуга)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатурыУслуга
	|		ПО ВТВидыНоменклатуры.НоменклатураНаименованиеУслуга = ВидыНоменклатурыУслуга.Наименование
	|			И (ВидыНоменклатурыУслуга.Услуга)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВидыНоменклатуры.НоменклатураСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураСсылка";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("НоменклатураСсылка");
	ТаблицаРезультата.Индексы.Добавить("ВидНоменклатуры");
	ТаблицаРезультата.Индексы.Добавить("ВидНоменклатурыУслуга");
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыПоУмолчанию = ТаблицаРезультата[0];
	ПовторноеВыполнение = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыПоУмолчанию.ВидНоменклатуры) Тогда
		ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
		ЭлементСправочника.Наименование = СтрокаТаблицыПоУмолчанию.НоменклатураНаименование;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
		СтрокаТаблицыПоУмолчанию.ВидНоменклатуры = ЭлементСправочника.Ссылка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыПоУмолчанию.ВидНоменклатурыУслуга) Тогда
		ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
		ЭлементСправочника.Наименование = СтрокаТаблицыПоУмолчанию.НоменклатураНаименованиеУслуга;
		ЭлементСправочника.Услуга = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
		СтрокаТаблицыПоУмолчанию.ВидНоменклатурыУслуга = ЭлементСправочника.Ссылка;
	КонецЕсли;
	
	Для НомерСтроки = 1 По ТаблицаРезультата.Количество()-1 Цикл
		СтрокаРезультата = ТаблицаРезультата[НомерСтроки];
		Если ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатуры) ИЛИ 
			ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатурыУслуга) Тогда
			//Вид номенклатуры уже создан и используется для товаров
			ПовторноеВыполнение = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатуры) Тогда
			Если СтрокаРезультата.Услуга 
				ИЛИ СтрокаТаблицыПоУмолчанию.НоменклатураНаименование = СтрокаРезультата.НоменклатураНаименование Тогда
				СтрокаРезультата.ВидНоменклатуры = СтрокаТаблицыПоУмолчанию.ВидНоменклатуры;
			Иначе
				ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
				ЭлементСправочника.Наименование = СтрокаРезультата.НоменклатураНаименование;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
				СтрокаРезультата.ВидНоменклатуры = ЭлементСправочника.Ссылка;
			КонецЕсли;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(СтрокаРезультата.ВидНоменклатурыУслуга) Тогда
			Если (НЕ СтрокаРезультата.Услуга) 
				ИЛИ СтрокаТаблицыПоУмолчанию.НоменклатураНаименованиеУслуга = СтрокаРезультата.НоменклатураНаименованиеУслуга Тогда
				СтрокаРезультата.ВидНоменклатурыУслуга = СтрокаТаблицыПоУмолчанию.ВидНоменклатурыУслуга;
			Иначе
				ЭлементСправочника = Справочники.ВидыНоменклатуры.СоздатьЭлемент();				
				ЭлементСправочника.Наименование = СтрокаРезультата.НоменклатураНаименованиеУслуга;
				ЭлементСправочника.Услуга = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника);
				СтрокаРезультата.ВидНоменклатурыУслуга = ЭлементСправочника.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ВыборкаНоменклатуры = Справочники.Номенклатура.ВыбратьИерархически();
	
	ТекущееПравило	= СтрокаТаблицыПоУмолчанию;
	ТекущийУровень 	= -1;
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаНоменклатуры.ВидНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		Если ВыборкаНоменклатуры.ЭтоГруппа Тогда
			//Если это группа, проверим, есть ли для нее правило.
			//Если своего правила нет, действует правило вышестоящей группы
			ПравилоДляГруппы = ТаблицаРезультата.Найти(ВыборкаНоменклатуры.Ссылка, "НоменклатураСсылка");
			Если ПравилоДляГруппы = Неопределено Тогда
				//Проверим, что действующее правило определено для группы более высокого уровня
				//При повторной обработке часть элементов могут быть пропущены, поэтому доверять можно только правилу владельца
				Если (НЕ ВыборкаНоменклатуры.УровеньВВыборке() > ТекущийУровень)
					ИЛИ ПовторноеВыполнение 
					ИЛИ (НЕ ЗначениеЗаполнено(ТекущееПравило)) Тогда
					Если ЗначениеЗаполнено(ВыборкаНоменклатуры.Родитель) Тогда
						ТекущийВид 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаНоменклатуры.Родитель, "ВидНоменклатуры");
						ТекущийУровень 	= ВыборкаНоменклатуры.УровеньВВыборке()-1;
						ТекущееПравило	= ТаблицаРезультата.Найти(ТекущийВид, "ВидНоменклатуры, ВидНоменклатурыУслуга");
					Иначе
						ТекущийУровень 	= -1;
						ТекущееПравило	= СтрокаТаблицыПоУмолчанию;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущийУровень 	= ВыборкаНоменклатуры.УровеньВВыборке();
				ТекущееПравило 	= ПравилоДляГруппы;
			КонецЕсли;
		Иначе //Проверим соотвествие признака "Услуга" в номенклатуре и виде номенклатуры
			
			//Проверим, что действующее правило определено для группы более высокого уровня
			//При повторной обработке часть элементов могут быть пропущены, поэтому доверять можно только правилу владельца
			Если (НЕ ВыборкаНоменклатуры.УровеньВВыборке() > ТекущийУровень)
				ИЛИ ПовторноеВыполнение 
				ИЛИ (НЕ ЗначениеЗаполнено(ТекущееПравило)) Тогда
				Если ЗначениеЗаполнено(ВыборкаНоменклатуры.Родитель) Тогда
					ТекущийВид 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаНоменклатуры.Родитель, "ВидНоменклатуры");
					ТекущийУровень 	= ВыборкаНоменклатуры.УровеньВВыборке()-1;
					ТекущееПравило	= ТаблицаРезультата.Найти(ТекущийВид, "ВидНоменклатуры, ВидНоменклатурыУслуга");					
				Иначе
					ТекущийУровень 	= -1;
					ТекущееПравило	= СтрокаТаблицыПоУмолчанию;
				КонецЕсли;										
			КонецЕсли;
				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекущееПравило) Тогда
			Продолжить;
		КонецЕсли;
		
		//Обработаем элемент номенклатуры
		ЭлементНоменклатуры = ВыборкаНоменклатуры.ПолучитьОбъект();
		Если ВыборкаНоменклатуры.ЭтоГруппа Тогда
			ЭлементНоменклатуры.ВидНоменклатуры = ?(ТекущееПравило.Услуга, ТекущееПравило.ВидНоменклатурыУслуга, ТекущееПравило.ВидНоменклатуры);
		Иначе
			ЭлементНоменклатуры.ВидНоменклатуры = ?(ВыборкаНоменклатуры.Услуга, ТекущееПравило.ВидНоменклатурыУслуга, ТекущееПравило.ВидНоменклатуры);
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементНоменклатуры, Истина);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыСтавокНДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.УдалитьСтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидСтавкиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.ПустаяСсылка)
	|	И Номенклатура.УдалитьСтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НоменклатураОбъект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(Выборка.СтавкаНДС);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоменклатураОбъект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограмныйИнтерфейс

// Получает ставку НДС по номенклатуре
//
// Параметры:
//   Параметры - 
// Номенклатура - Справочник.Номенклатура - ставку НДС которой необходимо получить
// Период - Дата - дата получения Ставки НДС.
// Возвращаемое значение:
//  СтавкаНДС - Перечисление.СтавкаНДС - Ставка НДС
Функция СтавкаНДС(Номенклатура, Период = Неопределено) Экспорт

	ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидСтавкиНДС");
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	
	СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС, Период);

	Возврат СтавкаНДС;
КонецФункции

#КонецОбласти

#КонецЕсли

