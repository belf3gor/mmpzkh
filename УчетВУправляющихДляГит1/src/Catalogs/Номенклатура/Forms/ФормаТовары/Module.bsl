#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	ЕстьПравоИзменениеПоступлениеТоваровУслуг = ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	ЕстьПравоИзменениеРеализацияТоваровУслуг  = ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг);
	ЕстьПравоИзменениеСчетНаОплату            = ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю);
	
	Элементы.ГруппаКорзина.Видимость = ЕстьПравоИзменениеРеализацияТоваровУслуг Или ЕстьПравоИзменениеСчетНаОплату;
	Элементы.СписокКонтекстноеМенюДобавитьВКорзину.Видимость = ЕстьПравоИзменениеРеализацияТоваровУслуг Или ЕстьПравоИзменениеСчетНаОплату;
	Элементы.СоздатьСчетПокупателю.Видимость = ЕстьПравоИзменениеСчетНаОплату;
	Элементы.СоздатьАктРеализация.Видимость = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьНакладнуюРеализация.Видимость = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьНакладнуюПоступление.Видимость = ЕстьПравоИзменениеПоступлениеТоваровУслуг;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УправлениеКассовойСменойДоступно = КассовыеСменыВызовСервераБП.ДоступноУправлениеКассовойСменой();
	ПодключениеКассыДоступно = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.ПодключаемоеОборудование)
		И ПравоДоступа("Чтение", Метаданные.Справочники.РабочиеМеста);
	
	СуммаВключаетНДС = Истина;
	
	РазрешенПросмотрЦен = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	Элементы.ТипЦен.Видимость = РазрешенПросмотрЦен;
	Элементы.ТоварЦенаПредставление.Видимость = РазрешенПросмотрЦен;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.Номенклатура",
		"ФормаСпискаПростойИнтерфейс",
		НСтр("ru='Новости: Товары'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УправлениеФормой(ЭтотОбъект);
	
	НастроитьВидимостьКомандРозничнойТорговли();
	
	ОбновитьВидимостьБаннера(Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		СуммаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияТребующиеОбновленияСписка = Новый Массив;
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПоступлениеТоваровУслуг");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_РеализацияТоваровУслуг");
	
	Если СобытияТребующиеОбновленияСписка.Найти(ИмяСобытия) <> Неопределено Тогда
		Элементы.Список.Обновить();
		ОбновитьСвойстваТекущегоТовара();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ТипЦенНоменклатуры" Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьБаннеры_РозничнаяТорговля" Тогда
		ОбновитьВидимостьБаннера(Элементы);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНакладнуюПоступление(Команда)
	
	СоздатьНакладную();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВКорзину(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ВвестиНакладную", НСтр("ru='Ввести накладную'"));
		СписокКнопок.Добавить("ЗагрузитьИзExcel", НСтр("ru='Загрузить из Excel'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		Оповещение = Новый ОписаниеОповещения("ФормаТоварыЗавершениеВопросаДобавлениеТоваров", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Помещать в корзину пока нечего.
			|Начните с заполнения списка товаров.'"), СписокКнопок);
		
	Иначе
		
		Счетчик = 0;
		
		ВыбранныеЭлементыНоменклатуры = УбратьГруппы(Элементы.Список.ВыделенныеСтроки);
		
		Для каждого ЭлементНоменклатуры Из ВыбранныеЭлементыНоменклатуры Цикл
			
			СтруктураОтбора = Новый Структура("Номенклатура", ЭлементНоменклатуры);
			НайденныеСтроки = Корзина.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаКорзины = НайденныеСтроки[0];
				СтрокаКорзины.Количество = СтрокаКорзины.Количество + 1;
				СтрокаКорзины.Сумма = СтрокаКорзины.Количество * СтрокаКорзины.Цена;
				
			Иначе
				
				НоваяСтрока = Корзина.Добавить();
				НоваяСтрока.Номенклатура = ЭлементНоменклатуры;
				НоваяСтрока.Количество = 1;
				
				НоваяСтрока.Цена  = ТоварЦена;
				НоваяСтрока.Сумма = ТоварЦена;
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		УправлениеФормой(ЭтотОбъект);
		
		Если Счетчик = 1 Тогда
			ТекстОповещения = НСтр("ru='Товар добавлен в корзину'");
		ИначеЕсли Счетчик > 1 Тогда
			ТекстОповещения = НСтр("ru='Товары добавлены в корзину'");
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетПокупателю(Команда)
	
	СозданиеСчетаПокупателю();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладнуюРеализация(Команда)
	
	СозданияНакладнойРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАктРеализация(Команда)
	
	СозданиеАктаРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЧек(Команда)
	
	СозданиеЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДвижениеТоваров(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ДвижениеТоваров.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОборачиваемостьТоваров(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОборачиваемостьТоваров.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиТоваров(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ОстаткиТоваров.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПродажиПоНоменклатуре(Команда)
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("КлючВарианта", "ПродажиПоНоменклатуре");
	Уникальность = "Отчет.Продажи/КлючВарианта." + ПараметрыОтчета.КлючВарианта;

	ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
	ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	
	ФормаОтчета = ПолучитьФорму("Отчет.Продажи.ФормаОбъекта", ПараметрыОтчета, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетДоходыИРасходы(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ДоходыРасходы.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОборотныеСредства(Команда)

	ФормаОтчета = ПолучитьФорму("Отчет.ОборотныеСредства.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПродажиПоМесяцам(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ПродажиПоМесяцам.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетВаловаяПрибыль(Команда)
	
	ФормаОтчета = ПолучитьФорму("Отчет.ВаловаяПрибыль.ФормаОбъекта",, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВидовОплат(Команда)
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаСписка", , , , , ,
		Новый ОписаниеОповещения("ОповещениеОбновленияБаннера", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодключаемоеОборудование(Команда)
	
	// Предупреждающий баннер показываем в любом случае, пользователь должен знать, что для корректной работы
	// не хватает подключенного оборудования, даже если у него нет достаточных прав, чтобы самому выполнить подключение
	Если Не ПодключениеКассыДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Недостаточно прав для выполнения операции'"));
	Иначе
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", , , , , ,
			Новый ОписаниеОповещения("ОповещениеОбновленияБаннера", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	Если ДоступнаРаботаСКассовойСменой() Тогда
		ОчиститьСообщения();
		КассовыеСменыКлиентБП.ЗакрытьСмену(УникальныйИдентификатор, Список.КомпоновщикНастроек);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КорзинаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресКорзиныВХранилище = ПоместитьКорзинуВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресКорзиныВХранилище", АдресКорзиныВХранилище);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияКорзины", ЭтотОбъект);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаКорзина", ПараметрыФормы, ЭтаФорма,,,, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	
	СуммаВключаетНДС = ?(ЗначениеЗаполнено(ТипЦен), ЦенаВключаетНДС(ТипЦен), Истина);
	
	ОбновитьСвойстваТекущегоТовара();
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ПерезаполнитьЦеныВКорзине();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьВидеороликиНажатие(Элемент)
	
	Элементы.ГруппаВидеоролики.Видимость = Ложь;
	СохранитьОтключениеВидимостиВидеороликов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	МожноДобавлятьВКоризну = ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа;
	
	Элементы.ДобавитьВКорзину.Доступность = МожноДобавлятьВКоризну;
	Элементы.СписокКонтекстноеМенюДобавитьВКорзину.Доступность = МожноДобавлятьВКоризну;
	
	ПодключитьОбработчикОжидания("ОбновитьСвойстваТекущегоТовара", 0.2, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Группа Тогда
		КлючеваяОперация = "СозданиеФормыНоменклатура";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		КлючеваяОперация = "ОткрытиеФормыНоменклатура";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ИтогКоличество = Форма.Корзина.Итог("Количество");
	СтрокаКоличество = СтрЗаменить(ЧислоПрописью(ИтогКоличество, "Л=ru_RU", НСтр("ru='товар, товара, товаров, м,,,,, 0'")),
			ЧислоПрописью(ИтогКоличество, "Л=ru_RU", НСтр("ru=',,, м,,,,, 0'")),
			Формат(ИтогКоличество, "ЧЦ=") + " ");

	ИтогСумма = Форма.Корзина.Итог("Сумма");
	СтрокаСумма = ?(ИтогСумма = 0,
		"",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' на %1 %2'"), 
			Формат(ИтогСумма, "ЧДЦ=2; ЧН=0"), Форма.ВалютаРегламентированногоУчета));
	
	КоличествоПозицийВКорзине = Форма.Корзина.Количество();
	Форма.КорзинаПредставление = ?(КоличествоПозицийВКорзине = 0,
		НСтр("ru='Корзина пуста'"),
		СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", СтрокаКоличество, СтрокаСумма)));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьКомандРозничнойТорговли()
	
	// Меняем видимость элементов таким образом, чтобы не возникало ситуации, когда в подменю "Документы" отображается
	// всего одна кнопка "Создать чек"
	Если Не ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации") Тогда
		Элементы.СоздатьЧек_Подменю.Видимость = Ложь;
		Элементы.СоздатьЧек_Отдельно.Видимость = Истина;
	Иначе
		Элементы.СоздатьЧек_Подменю.Видимость = Истина;
		Элементы.СоздатьЧек_Отдельно.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьБаннера(Элементы)
	
	Баннер = ИмяВидимогоБаннераНаСервере();
	Если ЗначениеЗаполнено(Баннер)
		И Элементы.БаннерСтраницы.ПодчиненныеЭлементы.Найти(Баннер) <> Неопределено Тогда
		Элементы.БаннерСтраницы.Видимость = Истина;
		Элементы.БаннерСтраницы.ТекущаяСтраница = Элементы[Баннер];
	Иначе
		Элементы.БаннерСтраницы.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяВидимогоБаннераНаСервере()
	
	ИмяБаннера = ЖурналыДокументов.РозничныеПродажи.ИмяВидимогоБаннера_РозничнаяТорговля();
	// Настройка "Видеоролики" может устанавливаться в значение Ложь, если пользователь нажал на баннере кнопку "Скрыть",
	// см. СкрытьВидеороликиНажатие. Иначе значение настройки по умолчанию Истина
	Если Не ЗначениеЗаполнено(ИмяБаннера) И ПолучитьФункциональнуюОпцию("ИспользоватьДокументыПоступления")
		И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ФормаТовары"), ВРег("Видеоролики"), Истина) Тогда
		ИмяБаннера = "БаннерВидеоролик";
	КонецЕсли;
	Возврат ИмяБаннера;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруПараметровФормыДокумента(ВидОперации = Неопределено)

	Если ЗначениеЗаполнено(ВидОперации) Тогда
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугТовары";
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги") Тогда
			КлючеваяОперация = "СозданиеФормыРеализацияТоваровУслугУслуги";
		КонецЕсли;
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		ЗначенияЗаполнения.Вставить("ВидОперации", ВидОперации);
	КонецЕсли;
	
	АдресКорзиныВХранилище = ПоместитьКорзинуВХранилище();
	ЗначенияЗаполнения.Вставить("АдресТаблицыНоменклатуры", АдресКорзиныВХранилище);
	ЗначенияЗаполнения.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ЗначенияЗаполнения.Вставить("ТипЦен", ТипЦен);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Функция ПоместитьКорзинуВХранилище()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Корзина.Выгрузить(), УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКорзинуИзХранилища(АдресКорзиныВХранилище)
	
	СохраненнаяКорзина = ПолучитьИзВременногоХранилища(АдресКорзиныВХранилище);
	
	Если СохраненнаяКорзина <> Неопределено Тогда
		Корзина.Загрузить(СохраненнаяКорзина);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФормаТоварыЗавершениеВопросаДобавлениеТоваров(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "ВвестиНакладную" Тогда
		СоздатьНакладную();
	ИначеЕсли Ответ = "ЗагрузитьИзExcel" Тогда
		ЗагрузкаДанныхИзВнешнихФайловКлиент.ВыбратьФайлДляЗагрузки(
			"Обработка.ЗагрузкаНоменклатурыИзФайла.Форма", УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНакладную()
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыПоступлениеТоваровУслугТовары");
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНоменклатуре(Знач Номенклатура, Знач ТипЦен)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СчетаЗапасов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В (&СчетаИсключения)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНаСкладе.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ОстаткиНаСкладе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаЗапасов.Ссылка
	|				ИЗ
	|					ВТ_СчетаЗапасов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = &Номенклатура) КАК ОстаткиНаСкладе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры.ТипЦен КАК ТипЦен,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ТипЦен = &ТипЦен
	|				И Номенклатура = &Номенклатура
	|				И Валюта = &ВалютаРегламентированногоУчета
	|				И &ЦеныДоступны) КАК ЦеныНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0) КАК ТоварОстаток,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЦеныНоменклатуры.Цена ЕСТЬ NULL
	|				ТОГДА ЦеныНоменклатурыДокументов.Цена
	|			ИНАЧЕ ЦеныНоменклатуры.Цена
	|		КОНЕЦ, 0) КАК ТоварЦена,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС ЕСТЬ NULL
	|				ТОГДА ЦеныНоменклатурыДокументов.ЦенаВключаетНДС
	|			ИНАЧЕ ЦеныНоменклатуры.ТипЦен.ЦенаВключаетНДС
	|		КОНЕЦ, ИСТИНА) КАК ТоварЦенаВключаетНДС,
	|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиНаСкладе КАК ОстаткиНаСкладе
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыДокументов КАК ЦеныНоменклатурыДокументов
	|		ПО (ЦеныНоменклатурыДокументов.СпособЗаполненияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам))
	|			И (ЦеныНоменклатурыДокументов.Номенклатура = &Номенклатура)
	|			И (&ЦеныДоступны)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура";
	
	ЦеныДоступны = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Номенклатура",                   Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",                         ТипЦен);
	Запрос.УстановитьПараметр("ЦеныДоступны",                   ЦеныДоступны);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ГТД);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(РезультатЗапроса);
	Результат.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.СтавкаНДС(
		Результат.ВидСтавкиНДС, ОбщегоНазначения.ТекущаяДатаПользователя()));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСвойстваТекущегоТовара()
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТоварНаименование         = "";
		ТоварОстатокПредставление = "";
		ТоварЦенаПредставление    = "";
		
	Иначе
		
		Если ТекущиеДанные.ЭтоГруппа Тогда
		
			ТоварНаименование         = ТекущиеДанные.Наименование;
			ТоварОстатокПредставление = "";
			ТоварЦенаПредставление    = "";
		
		Иначе
		
			СведенияОНоменклатуре = СведенияОНоменклатуре(ТекущиеДанные.Ссылка, ТипЦен);
			
			ТоварНаименование    = ТекущиеДанные.Наименование;
			ТоварОстаток         = СведенияОНоменклатуре.ТоварОстаток;
			ТоварЦена            = СведенияОНоменклатуре.ТоварЦена;
			ТоварЦенаВключаетНДС = СведенияОНоменклатуре.ТоварЦенаВключаетНДС;
			СтавкаНДС            = СведенияОНоменклатуре.СтавкаНДС;
			
			Если ЗначениеЗаполнено(СтавкаНДС)
				И ТоварЦенаВключаетНДС <> СуммаВключаетНДС Тогда
				ТоварЦена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					ТоварЦена,
					ТоварЦенаВключаетНДС,
					СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			КонецЕсли;
			
			ТоварОстатокПредставление = ?(ТекущиеДанные.Услуга, "", Строка(ТоварОстаток) + " " + ТекущиеДанные.ЕдиницаИзмерения);
			ТоварЦенаПредставление    = ?(ТоварЦена = 0, "", Формат(ТоварЦена, "ЧДЦ=2") + " " + ВалютаРегламентированногоУчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтключениеВидимостиВидеороликов()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ФормаТовары"), ВРег("Видеоролики"), Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦенаВключаетНДС(ТипЦен)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьЦеныВКорзине()
	
	ТаблицаЦенНоменклатуры = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
		Корзина.Выгрузить().ВыгрузитьКолонку("Номенклатура"),
		ТипЦен,
		КонецДня(ТекущаяДатаСеанса()));
		
	Для каждого СтрокаКорзины Из Корзина Цикл
		
		МассивНайденныхСтрок = ТаблицаЦенНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура", СтрокаКорзины.Номенклатура));
		
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			
			СтрокаКорзины.Цена = 0;
			СтрокаКорзины.Сумма = 0;
			
		Иначе
			
			СтрокаТаблицыЦен = МассивНайденныхСтрок[0];
			
			ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыЦен.Номенклатура, "ВидСтавкиНДС");
			СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВидСтавкиНДС);
			
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТаблицыЦен.Цена,
				СтрокаТаблицыЦен.ЦенаВключаетНДС,
				СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС));
			
			СтрокаКорзины.Цена = Цена;
			СтрокаКорзины.Сумма = СтрокаКорзины.Количество * Цена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияКорзины(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ЗагрузитьКорзинуИзХранилища(РезультатЗакрытия.АдресКорзиныВХранилище);
		
		Если РезультатЗакрытия.Свойство("Действие") Тогда
		
			Если РезультатЗакрытия.Действие = "СоздатьСчетПокупателю" Тогда
			
				СозданиеСчетаПокупателю();
			
			ИначеЕсли РезультатЗакрытия.Действие = "СоздатьАктРеализация" Тогда
			
				СозданиеАктаРеализация();
			
			ИначеЕсли РезультатЗакрытия.Действие = "СоздатьНакладнуюРеализация" Тогда
			
				СозданияНакладнойРеализация();
			
			ИначеЕсли РезультатЗакрытия.Действие = "СоздатьЧек" Тогда
			
				СозданиеЧека();
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеСчетаПокупателю()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента();
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
	Корзина.Очистить();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданияНакладнойРеализация()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
	Корзина.Очистить();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеАктаРеализация()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента(
		ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", СтруктураПараметров, ЭтаФорма);
	
	Корзина.Очистить();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЧека()
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровФормыДокумента();
	СтруктураПараметров.ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРозничнаяПродажа.Продажа"));
	ОткрытьФорму("Документ.РозничнаяПродажа.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	
	Корзина.Очистить();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УбратьГруппы(Знач МассивЭлементов)
	
	Результат = Новый Массив;
	
	Для каждого Элемент Из МассивЭлементов Цикл
		Если НЕ Элемент.ЭтоГруппа Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповещениеОбновленияБаннера(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Оповестить("ОбновитьБаннеры_РозничнаяТорговля");
	
КонецПроцедуры

&НаКлиенте
Функция ДоступнаРаботаСКассовойСменой()
	
	// Возможен сценарий, когда пользователь работает с документом Розничная продажа (чек),
	// но не имеет прав для работы с кассовой сменой. В этом случае пользователь должен видеть
	// возможные проблемные ситуации, связанные с состоянием кассовой смены (смена закрыта, смена просрочена).
	// Элементы формы, связанные с управлением кассовой сменой, остаются видимыми, независимо от прав доступа,
	// на случай описанного сценария.
	Если Не УправлениеКассовойСменойДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Недостаточно прав для выполнения операции'"));
	КонецЕсли;
	Возврат УправлениеКассовойСменойДоступно;
	
КонецФункции

&НаКлиенте
Процедура ОперацияЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Доступность = Истина;
	
	Если РезультатВыполнения <> Неопределено И Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("СобытияДляОповещения") Тогда
		Для Каждого Событие Из ДополнительныеПараметры.СобытияДляОповещения Цикл
			Если Событие.Значение = Истина Тогда
				Оповестить(Событие.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти





