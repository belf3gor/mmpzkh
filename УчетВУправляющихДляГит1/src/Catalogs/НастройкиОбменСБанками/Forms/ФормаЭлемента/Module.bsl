
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтоНовый = Истина;
	КонецЕсли;
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если ЭтоНовый И НЕ ЗначениеЗаполнено(ЭтотОбъект.Параметры.ЗначениеКопирования) Тогда // новый
		
		Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
		Объект.ИспользуетсяКриптография = Ложь;
		ЗаполнитьЗначенияСвойств(Объект, Параметры);
		Если ЗначениеЗаполнено(Объект.Банк) Тогда
			НастройкиОбмена = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Объект.Банк);
			Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
				Объект.ПрограммаБанка = НастройкиОбмена.ПрограммаБанка;
				Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
					ИспользуетсяВнешнийМодуль = Истина;
					Элементы.СтраницыВнешнегоМодуля.ТекущаяСтраница = Элементы.Надпись;
					ЗагрузитьВК(НастройкиОбмена.АдресСервера, УникальныйИдентификатор, ИдентификаторЗаданияЗакачкиВК,
						Объект.ИмяВнешнегоМодуля, АдресВнешнегоМодуля);
				Иначе
					Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
			ЗаполнитьВидыЭДДоступнымиЗначениями();
		КонецЕсли;
		ЗаполнитьНаименование(Объект.Организация, Объект.Банк, Объект.Наименование);
	ИначеЕсли Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		
		СправочникОбъект = РеквизитФормыВЗначение("Объект");
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Параметры.ЗначениеКопирования) Тогда
			СертификатСбербанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ЭтотОбъект.Параметры.ЗначениеКопирования, "СертификатБанка");
			ДанныеСертификатаСбербанка = СертификатСбербанка.Получить();
			Если ТипЗнч(ДанныеСертификатаСбербанка) = Тип("ДвоичныеДанные") Тогда
				СправочникОбъект.СертификатБанка = Новый ХранилищеЗначения(ДанныеСертификатаСбербанка);
				СохранитьСертификатСбербанка = Истина;
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДанныеСертификатаСбербанка, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		ДвоичныеДанныеСертификата  = СправочникОбъект.СертификатБанка.Получить();
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда
			Попытка
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			Исключение
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Операция = НСтр("ru = 'Открытие настройки обмена с сервисом 1С:ДиректБанк.'");
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					Операция, ТекстОшибки, ТекстСообщения, "ОбменСБанками", Объект.Ссылка);
			КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля) Тогда
			Если РазделениеВключено Тогда
				Элементы.ИнформацияОКомпонентеСбербанка.Видимость = Ложь;
			Иначе
				Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Обновить из файла...'");
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			ПараметрыВнешнейКомпоненты = ДополнительныеВнешниеКомпонентыВызовСервера.ПараметрыВнешнейКомпоненты(
				Объект.ИмяВнешнегоМодуля);
			УстановитьПривилегированныйРежим(Ложь);

			
			Если ПараметрыВнешнейКомпоненты = Неопределено Тогда
				Элементы.ГруппаСертификатыСбербанк.Доступность = Ложь;
				Если РазделениеВключено Тогда
					Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = НСтр("ru = 'Отсутствует. Обратитесь в техническую поддержку сервиса.'");
					Элементы.НазваниеИВерсияКомпонентыСбербанка.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				Иначе
					Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = НСтр("ru = 'Не загружен. Загрузить из файла...'");
				КонецЕсли;

			Иначе
				ПредставлениеКомпоненты = НСтр("ru = '%1. Версия %2'");
				Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = СтрШаблон(
					ПредставлениеКомпоненты, ПараметрыВнешнейКомпоненты.Наименование, ПараметрыВнешнейКомпоненты.Версия);
				Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Истина;
			КонецЕсли;
		Иначе
			Элементы.ГруппаСертификатыСбербанк.Доступность = Ложь;
			Если РазделениеВключено Тогда
				Элементы.ИнформацияОКомпонентеСбербанка.Видимость = Ложь;
				Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = НСтр("ru = 'Отсутствует внешний модуль. Работа не возможна.'");
			Иначе
				Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Ложь;
				Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Не загружен. Загрузить из файла...'");
			КонецЕсли;
		КонецЕсли;
		Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.Банк) Тогда
		НастройкиОбменаСБанком = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Объект.Банк);
		Если ЗначениеЗаполнено(НастройкиОбменаСБанком) И НастройкиОбменаСБанком.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			Элементы.СтраницыВнешнегоМодуля.ТекущаяСтраница = Элементы.Надпись;
		ИначеЕсли ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
			Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
		ИначеЕсли РазделениеВключено Тогда
			Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтраницыВидыБанковскихСистем.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыВнешнегоМодуля.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		Объект.Банк = ОбменСБанкамиСлужебныйПовтИсп.ПустаяСсылкаСправочника("Банки");
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.ВыгрузитьСертификатВФайл.Видимость = Ложь;
	КонецЕсли;
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, РазделениеВключено,
		Объект.АутентификацияПоСертификату);
	
	ТекущаяОрганизация = Объект.Организация;
	
	ИспользуетсяВнешнийМодуль = Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезДопОбработку
		ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК;
		
	Если ИспользуетсяВнешнийМодуль И ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля) Тогда
		ЗаполнитьИнформациюОВнешнемМодуле();
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		Элементы.СтраницыВнешнегоМодуля.ТекущаяСтраница = Элементы.Надпись;
	КонецЕсли;

	Если НЕ ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиОбменСБанками) Тогда
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Видимость = Ложь;
		Элементы.ИнформацияОКомпонентеСбербанка.Видимость = Ложь;
		Элементы.ЗагрузитьНастройки.Доступность = Ложь;
		Элементы.ИсходящиеДокументыПодписыватьВБанке.Доступность = Ложь;
	КонецЕсли;
	
	ПанельАдминистрированияБСП = Метаданные.НайтиПоПолномуИмени("Обработка.ПанельАдминистрированияБСП");
	Элементы.ДекорацияВнешниеОбработкиНеИспользуются.Гиперссылка = ПанельАдминистрированияБСП <> Неопределено;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСлужебныеРеквизитыТаблицыИсходящихДокументов();
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, РазделениеВключено,
		Объект.АутентификацияПоСертификату);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияЗакачкиВК) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияСкачкиВК", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	УдалитьПустыеСтрокиТаблиц();
	
	Если НЕ Объект.ИспользуетсяКриптография Тогда
		Объект.АутентификацияПоСертификату = Ложь;
	КонецЕсли;
	
	Если СохранитьВнешнююКомпонентуСбербанка Тогда
		ДополнительныеВнешниеКомпонентыКлиент.УдалитьВнешнююКомпонентуИзКэш(Объект.ИмяВнешнегоМодуля);
		ОбменСБанкамиСлужебныйКлиент.ОчиститьДанныеАвторизацииСбербанк();
	КонецЕсли;

	Если СохранитьВнешнийМодуль ИЛИ ТребуетсяИнициализацияВнешнегоМодуля Тогда
		ПараметрыОбменаСБанками = ПараметрыПриложения["ЭлектронноеВзаимодействие.ОбменСБанками"];
		Если ПараметрыОбменаСБанками <> Неопределено Тогда
			ВнешниеКомпонентыИзКеша = ПараметрыОбменаСБанками.Получить("ВнешниеКомпоненты");
			Если ВнешниеКомпонентыИзКеша <> Неопределено Тогда
				ВнешниеКомпонентыИзКеша.Удалить(Объект.ИмяВнешнегоМодуля);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ПропуститьПроверки") Тогда
		// Выполняем серверный вызов, так как нужно проверить валидность маршрута и в случае ошибок спросить у пользователя,
		// записывать ли его.
		ЕстьОшибкиЗаполнения = Ложь;
		Если Не НастройкаВалидирована(ЕстьОшибкиЗаполнения) Тогда
			Отказ = Истина;
			
			Если Не ЕстьОшибкиЗаполнения Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗаписиПолученОтвет", ЭтотОбъект, ПараметрыЗаписи);
				ТекстВопроса = НСтр("ru = 'Обнаружены возможные ошибки в настройках маршрутов. Продолжить запись?'");
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, 
					НСтр("ru = 'Настройка некорректна'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СохранитьСертификатСбербанка Тогда
		Если ЗначениеЗаполнено(АдресСертификатаСбербанка) Тогда
			ДвоичныеДанныеСертификатаСбербанка = ПолучитьИзВременногоХранилища(АдресСертификатаСбербанка);
		Иначе
			ДвоичныеДанныеСертификатаСбербанка = Неопределено;
		КонецЕсли;
		СтепеньСжатия = Новый СжатиеДанных(9);
		ТекущийОбъект.СертификатБанка = Новый ХранилищеЗначения(ДвоичныеДанныеСертификатаСбербанка, СтепеньСжатия);
	КонецЕсли;
		
	Если СохранитьВнешнююКомпонентуСбербанка Тогда
		Справочники.ДополнительныеВнешниеКомпоненты.СохранитьВнешнююКомпонентуВИнформационнойБазе(АдресВнешнейКомпонентыСбербанка);
	КонецЕсли;
	
	Если СохранитьВнешнийМодуль Тогда
		Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
			Справочники.ДополнительныеВнешниеКомпоненты.СохранитьВнешнююКомпонентуВИнформационнойБазе(АдресВнешнегоМодуля);
		Иначе
			ОбменСБанкамиСлужебный.СохранитьВнешнююОбработку(
				АдресВнешнегоМодуля, ВерсияВнешнегоМодуля, Объект.ИмяВнешнегоМодуля, НаименованиеВнешнегоМодуля);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	
	Оповестить("ИзмененаНастройкаОбмена", Объект.Ссылка);

	Если НЕ ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗакрытии, Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
		// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоНовый И Объект.ПрограммаБанка <> Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		Менеджер = РегистрыСведений.ПараметрыОбменСБанками.СоздатьМенеджерЗаписи();
		Менеджер.НастройкаОбмена = Объект.Ссылка;
		Менеджер.Прочитать();
		Если Не Менеджер.Выбран() Тогда
			Менеджер.НастройкаОбмена = Объект.Ссылка;
			Менеджер.ПоследняяДатаПолученияЭД = НачалоДня(ТекущаяДатаСеанса());
			Менеджер.Записать();
		КонецЕсли;
	КонецЕсли;
	
	ИспользуютсяЭП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
	Если НЕ ИспользуютсяЭП И Объект.ИспользуетсяКриптография
		И (Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АльфаБанкОнлайн
			ИЛИ Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьЭлектронныеПодписи.Установить(Истина);
	КонецЕсли;
	
	Если НЕ Объект.ПометкаУдаления И НЕ Объект.Недействительна Тогда
		ИспользуетсяОбменЭДСБанками = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
			"ИспользоватьОбменСБанками");
		Если НЕ ИспользуетсяОбменЭДСБанками Тогда
			Константы.ИспользоватьОбменСБанками.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаполнитьСлужебныеРеквизитыТаблицыИсходящихДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаНастройкаОбменСБанками" И Параметр = Объект.Ссылка Тогда
		ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, РазделениеВключено,
			Объект.АутентификацияПоСертификату);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн")
			ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен"))
		И НЕ ОбменСБанкамиКлиентСервер.ПравильныйФорматАдреса(Объект.АдресСервера) И НЕ Объект.Недействительна Тогда
		ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с ""https://"" или ""http://""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "АдресСервера", "Объект", Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗагрузитьВнешнийМодульИзФайлаНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаПредупрежденияЗагрузитьВнешнийМодуль", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПредупреждениеБезопасности", , ЭтотОбъект, , , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОКомпонентеСбербанкаНажатие(Элемент)
	
	ОчиститьСообщения();
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыводаПредупрежденияЗагрузитьВнешнийМодульСбербанк", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПредупреждениеБезопасности", , ЭтотОбъект,
		УникальныйИдентификатор, , , Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ТекущаяОрганизация = Объект.Организация И Объект.ИспользуетсяКриптография Тогда
		СертификатыЗаполнены = Объект.СертификатыПодписейОрганизации.Количество() > 0;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("МаршрутЗависимОтОрганизации", Истина);
		ЕстьЗависимыеОтОрганизацииМаршруты = Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыПоиска).Количество() > 0;
		
		Если СертификатыЗаполнены ИЛИ ЕстьЗависимыеОтОрганизацииМаршруты Тогда
		    Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияИзмененияОрганизации", ЭтотОбъект);
			
			Действия = "";
			Если СертификатыЗаполнены Тогда
				Действия = НСтр("ru = 'список сертификатов будет очищен'");
			КонецЕсли;
			Если ЕстьЗависимыеОтОрганизацииМаршруты Тогда
				Действия = Действия 
					+ ?(ЗначениеЗаполнено(Действия), ", " , "")
					+ НСтр("ru = 'в некоторых строках списка ""Исходящие документы"" будет сброшен маршрут'");
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'После изменения организации %1.'"), Действия);
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(Истина, НСтр("ru = 'Сменить организацию'"));
			Кнопки.Добавить(Ложь, НСтр("ru = 'Отменить изменение'"));
			ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , Истина, НСтр("ru = 'Изменение организации'"));
		Иначе
			ДействияПриИзмененииОрганизации();
		КонецЕсли;
	ИначеЕсли Не ТекущаяОрганизация = Объект.Организация Тогда
		ДействияПриИзмененииОрганизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	Элементы.ГруппаВнешнегоМодуля.Видимость = Истина;

	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		НастройкиОбменаСБанком = ОбменСБанкамиСлужебныйВызовСервера.ПоставляемыеНастройкиОбмена(Объект.Банк);
	КонецЕсли;
	Если ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
		Объект.ПрограммаБанка = НастройкиОбменаСБанком.ПрограммаБанка;
	Иначе
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Если РазделениеВключено Тогда
			Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиОбменаСБанком)
		И НастройкиОбменаСБанком.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
		Элементы.СтраницыВнешнегоМодуля.ТекущаяСтраница = Элементы.Надпись;
		ИнформацияОВК = ИнформацияОВнешнейКомпоненте(Объект.Ссылка, НастройкиОбменаСБанком.АдресСервера);
		Если ИнформацияОВК = Неопределено И РазделениеВключено Тогда
			Элементы.ИнформацияОВнешнемМодуле.Заголовок = НСтр("ru = 'Отсутствует в информационной базе'");
		ИначеЕсли ИнформацияОВК <> Неопределено Тогда
			Объект.ИмяВнешнегоМодуля = ИнформацияОВК.ИмяМодуля;
			Элементы.ИнформацияОВнешнемМодуле.Заголовок = ИнформацияОВК.Название;
			ЗаполнитьИнформациюОВнешнемМодуле();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НастройкиОбменаСБанком) Тогда
		Элементы.ГруппаВнешнегоМодуля.Видимость = Ложь;
	Иначе
		Элементы.СтраницыВнешнегоМодуля.ТекущаяСтраница = Элементы.Флаг;
	КонецЕсли;
	
	Объект.ИспользуетсяКриптография = ИспользуетсяКриптография(Объект.ПрограммаБанка);
	
	ИспользуетсяВнешнийМодуль = Ложь;
	
	Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК")
		ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
		ИспользуетсяВнешнийМодуль = Истина;
	ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
		Если РазделениеВключено Тогда
			ПараметрыВнешнейКомпоненты = ДополнительныеВнешниеКомпонентыВызовСервера.ПараметрыВнешнейКомпоненты(
				"VPNKeyTLS");
			Если ПараметрыВнешнейКомпоненты = Неопределено Тогда
				ОчиститьСообщения();
				ТекстСообщения = НСтр("ru = 'В информационной базе отсутствует внешняя компонента Сбербанка.
											|Обратитесь в техническую поддержку сервиса.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Элементы.СтраницыРазделов.Видимость = Ложь;
				Возврат;
			Иначе
				ПредставлениеКомпоненты = НСтр("ru = '%1. Версия %2'");
				Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = СтрШаблон(
					ПредставлениеКомпоненты, ПараметрыВнешнейКомпоненты.Наименование, ПараметрыВнешнейКомпоненты.Версия);
				Объект.ИмяВнешнегоМодуля = "VPNKeyTLS";
				Элементы.ИнформацияОКомпонентеСбербанка.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаСертификатыСбербанк.Доступность = Ложь;
			Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Не загружен. Загрузить из файла...'");
			Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Наименование = Строка(Объект.Организация) + " - " + Строка(Объект.Банк);
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, РазделениеВключено,
		Объект.АутентификацияПоСертификату);
	
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		АдресСертификатаСбербанка = "";
		СохранитьСертификатСбербанка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыполнитьЗагрузкуСертификатаБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатБанкаОчистка(Элемент, СтандартнаяОбработка)
	
	АдресСертификатаСбербанка = "";
	СохранитьСертификатСбербанка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЛичногоКабинетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Текст = СокрЛП(Текст);
	Если ЗначениеЗаполнено(Текст) И ВРег(Сред(Текст,1,4)) <> "HTTP" Тогда
		Объект.АдресЛичногоКабинета = "http://" + Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяВнешнийМодульПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ИспользуетсяВнешнийМодуль Тогда
		Объект.ИспользуетсяКриптография = Истина;
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
	Иначе
		Объект.ИмяВнешнегоМодуля = "";
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = "";
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Заголовок = НСтр("ru = 'Не загружен. Загрузить из файла...'");

	КонецЕсли;
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, РазделениеВключено,
		Объект.АутентификацияПоСертификату);

	ЗаполнитьВидыЭДДоступнымиЗначениями();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейТаблицыИсходящиеДокументы

&НаКлиенте
Процедура ИсходящиеДокументыМаршрутПодписанияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ИсходящиеДокументы.ТекущиеДанные;
	ТекДанные.МаршрутЗависимОтОрганизации = МаршрутЗависимОтОрганизации(ТекДанные.МаршрутПодписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеДокументыПодписыватьВБанкеПриИзменении(Элемент)
	
	ОтобразитьГруппуПодтвержденияПлатежа(Объект, Элементы.ГруппаЛичногоКабинета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("ЗакрытьПослеЗаписи", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификат(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать организацию'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если (Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку")
			ИЛИ Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК"))
		И НЕ ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля) Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо загрузить внешний модуль'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

	Если Отказ ИЛИ НЕ НастройкаОбменаЗаписана("ВыполнитьЗагрузкуСертификата") Тогда
		Возврат;
	Иначе
		ВыполнитьЗагрузкуСертификата(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестНастроек(Команда)
	
	ОчиститьСообщения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиТестНастройкиОбмена", ЭтотОбъект);
	Если Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Необходимо сохранить текущую настройку обмена. Продолжить выполнение теста?'");
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить(Истина, НСтр("ru = 'Сохранить и выполнить тест'"));
		СписокКнопок.Добавить(Ложь, НСтр("ru = 'Отменить тест'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , Истина, НСтр("ru = 'Тест настроек'"));
	Иначе
		ПровестиТестНастройкиОбмена();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаОбмена", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ПараметрыОбменСБанками.Форма.РедактированиеЗаписи", ПараметрыФормы, ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройки(Команда)

	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Банк", Объект.Банк);
	ПараметрыФормы.Вставить("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	ПараметрыФормы.Вставить("НеПоказыватьСтраницуИнформации", Истина);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеЗавершенияРаботыПомощника", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.Форма.ПомощникСозданияНастройкиОбмена", ПараметрыФормы, , , , ,
		ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСертификатВФайл(Команда)
	
	Если СохранитьСертификатСбербанка Тогда
		АдресФайлаСертификатаСбербанка = АдресСертификатаСбербанка;
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		АдресФайлаСертификатаСбербанка = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "СертификатБанка");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресФайлаСертификатаСбербанка) Тогда
		ПолучитьФайл(АдресФайлаСертификатаСбербанка, СертификатБанка + ".cer");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сбербанк

&НаКлиенте
Процедура СохранитьКомпонентуСбербанкаПослеВыбораФайлаВВебКлиенте(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ПослеЗагрузкиФайлаВнешнейКомпонентыСбербанка(Адрес);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиФайлаВнешнейКомпонентыСбербанка(Адрес)
	
	ДополнительныеВнешниеКомпонентыКлиент.УдалитьВнешнююКомпонентуИзКэш(Объект.ИмяВнешнегоМодуля);

	ИнформацияОВКБанка = ДополнительныеВнешниеКомпонентыВызовСервера.ИнформацияОВнешнейКомпоненте(Адрес);
		
	Если ИнформацияОВКБанка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресВнешнейКомпонентыСбербанка = Адрес;
	
	Если ИнформацияОВКБанка.ИмяМодуля <> "VPNKeyTLS" Тогда
		ТекстВопроса = НСтр("ru = 'Выбранный файл не является модулем Сбербанка. Укажите другой файл.'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(Ложь, НСтр("ru = 'Выбрать другой файл'"));
		Кнопки.Добавить(Истина, НСтр("ru = 'Все равно продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		ОповещениеПослеВопроса = Новый ОписаниеОповещения(
			"ПродолжитьПодключениеКомпонентыСбербанка", ЭтотОбъект, ИнформацияОВКБанка);
		ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, Кнопки, , Ложь);
	Иначе
		ПродолжитьПодключениеКомпонентыСбербанка(Истина, ИнформацияОВКБанка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПодключениеКомпонентыСбербанка(Результат, ИнформацияОВКБанка) Экспорт
	
	Если Результат = Ложь Тогда
		ПослеВыводаПредупрежденияЗагрузитьВнешнийМодульСбербанк(Истина, Неопределено);
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбменСБанкамиСлужебныйКлиент.ПоддерживаетсяВерсияКомпонентыСбербанк(ИнформацияОВКБанка.Версия) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяВнешнегоМодуля = ИнформацияОВКБанка.ИмяМодуля;
	
	СохранитьВнешнююКомпонентуСбербанка = Истина;
	Модифицированность = Истина;
	Элементы.ИнформацияОКомпонентеСбербанка.Заголовок = НСтр("ru = 'Обновить из файла...'");
	ПредставлениеКомпоненты = НСтр("ru = '%1. Версия %2'");
	Элементы.НазваниеИВерсияКомпонентыСбербанка.Заголовок = СтрШаблон(
		ПредставлениеКомпоненты, ИнформацияОВКБанка.Название, ИнформацияОВКБанка.Версия);
	Элементы.НазваниеИВерсияКомпонентыСбербанка.Видимость = Истина;
	Элементы.ГруппаСертификатыСбербанк.Доступность = Истина;
	ДополнительныеПараметры = Новый Структура("ВерсияВК", ИнформацияОВКБанка.Версия);
	
	Оповещение = Новый ОписаниеОповещения;
	ДополнительныеВнешниеКомпонентыКлиент.ПодключитьВнешнююКомпонентуПоСсылке(
		Оповещение, АдресВнешнейКомпонентыСбербанка, Объект.ИмяВнешнегоМодуля, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеСертификатаНаТокенеСбербанка()
	
	Обработчик = Новый ОписаниеОповещения("ПолучитьИдентификаторСертификатаСбербанка", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.АутентифицироватьсяНаТокенеСбербанка(
		Обработчик, Объект.ИмяВнешнегоМодуля, Объект.Ссылка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСертификатаСбербанка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСертификата = Результат.Значение;
	
	ДвоичныеДанныеСертификата = ДополнительныеПараметры.СоответствиеСертификатов.Получить(ИдентификаторСертификата);
	
	ОписаниеОшибки = "";
	НовыйСертификат = ОбменСБанкамиСлужебныйВызовСервера.СоздатьСертификатСбербанка(
		ДвоичныеДанныеСертификата, Объект.Организация);
	Если НЕ ЗначениеЗаполнено(НовыйСертификат) Тогда
		Возврат;
	КонецЕсли;
	СтрокаНастройки = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаНастройки.СертификатЭП = НовыйСертификат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСертификатаСбербанка(АутентификацияВыполнена, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не АутентификацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПодключаемыйМодуль = ДополнительныеВнешниеКомпонентыКлиент.ВнешняяКомпонентаИзКэша(Объект.ИмяВнешнегоМодуля);

	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатПослеПолученияСпискаСертификатовСТокенаСбербанк", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеСертификатовСТокенаСбербанк(Оповещение, ПодключаемыйМодуль);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСертификатПослеПолученияСпискаСертификатовСТокенаСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат.Успех Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	СоответствиеСертификатов = Результат.СоответствиеСертификатов;
	ДополнительныеПараметры = Новый Структура("СоответствиеСертификатов", СоответствиеСертификатов);

	
	СписокСертификатов = Новый СписокЗначений;
	Если СоответствиеСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из СоответствиеСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла
	КонецЕсли;
	
	ВыборкаСертификатов = Новый Соответствие;
	
	Для Каждого Элемент Из СоответствиеСертификатов Цикл
		
		ИдентификаторСертификата = Элемент.Ключ;
		ДвоичныеДанныеСертификата = Элемент.Значение;
		
		Если ДвоичныеДанныеСертификата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураСертификата = ОбменСБанкамиСлужебныйВызовСервера.СтруктураСертификата(ДвоичныеДанныеСертификата);
		
		Если ЗначениеЗаполнено(СтруктураСертификата) Тогда
			ШаблонПредставления = НСтр("ru = '%1, до %2'");
			ДатаСтрокой = Формат(СтруктураСертификата.ДействителенДО, "ДФ=MM.yyyy");
			Представление = СтрШаблон(ШаблонПредставления, СтруктураСертификата.КомуВыдан, ДатаСтрокой);
			ВыборкаСертификатов.Вставить(ИдентификаторСертификата, Представление);
			
		КонецЕсли;
		
	КонецЦикла;

	Если ВыборкаСертификатов.Количество() = 1 Тогда
		Для Каждого КлючЗначение Из ВыборкаСертификатов Цикл
			ОбработкаВыбораСертификатаСбербанка(СписокСертификатов.Добавить(КлючЗначение.Ключ), ДополнительныеПараметры);
			Возврат;
		КонецЦикла
	КонецЕсли;
	
	Для Каждого Элемент Из ВыборкаСертификатов Цикл
		СписокСертификатов.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораСертификатаСбербанка", ЭтотОбъект, ДополнительныеПараметры);
	
	ЗаголовокФормыВыбора = НСтр("ru = 'Выберите сертификат подписи'");

	СписокСертификатов.ПоказатьВыборЭлемента(Оповещение, ЗаголовокФормыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаПредупрежденияЗагрузитьВнешнийМодульСбербанк(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеВнешниеКомпонентыКлиент.УдалитьВнешнююКомпонентуИзКэш(Объект.ИмяВнешнегоМодуля);
	
	#Если ВебКлиент Тогда
		АдресВХранилище = Неопределено;
		Обработчик = Новый ОписаниеОповещения("СохранитьКомпонентуСбербанкаПослеВыбораФайлаВВебКлиенте", ЭтотОбъект);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.zip", Истина, УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = НСтр("ru = 'Файл внешнего модуля'") + "(*.zip)|*.zip";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл внешнего модуля банка'");
		Обработчик = Новый ОписаниеОповещения("СохранитьКомпонентуПослеВыбораФайлаСбербанк", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(Обработчик);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКомпонентуПослеВыбораФайлаСбербанк(МассивФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = МассивФайлов[0];
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	АдресВнешнейКомпонентыСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
	ПослеЗагрузкиФайлаВнешнейКомпонентыСбербанка(АдресВнешнейКомпонентыСбербанка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезВК

&НаСервереБезКонтекста
Процедура ЗагрузитьВК(Знач АдресСервера, Знач УникальныйИдентификатор, ИдентификаторЗадания, ИмяВнешнегоМодуля, АдресВнешнегоМодуля)
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.СкачатьВКНаСервере(УникальныйИдентификатор, АдресСервера);
	
	АдресВнешнегоМодуля = Задание.АдресХранилища;
	
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВнешнегоМодуля);
			Если СтруктураДанных.СохранитьВИБ Тогда
				АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеВК, УникальныйИдентификатор);
				Справочники.ДополнительныеВнешниеКомпоненты.СохранитьВнешнююКомпонентуВИнформационнойБазе(АдресФайлаВнешнегоМодуля);
			КонецЕсли;
			ИмяВнешнегоМодуля = СтруктураДанных.ИмяВнешнегоМодуля;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Задание.Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияСкачкиВК()
	
	Задание = ОбменСБанкамиСлужебныйВызовСервера.ПроверитьВыполнениеФоновогоЗаданияНаСервере(
		ИдентификаторЗаданияЗакачкиВК, УникальныйИдентификатор);
	Если Задание.Завершено Тогда
		Если Задание.Успешно Тогда
			СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВнешнегоМодуля);
			Если СтруктураДанных.СохранитьВИБ Тогда
				АдресФайлаВнешнегоМодуля = ПоместитьВоВременноеХранилище(СтруктураДанных.ДанныеВК, УникальныйИдентификатор);
				СохранитьВКБанка(АдресФайлаВнешнегоМодуля);
			КонецЕсли;
			Объект.ИмяВнешнегоМодуля = СтруктураДанных.ИмяВнешнегоМодуля;
		Иначе
			Объект.ИмяВнешнегоМодуля = "";
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияСкачкиВК", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСертификатаЧерезВК(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат);
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НовыйСертификат = НайтиСоздатьСертификатВнешнегоМодуля(
		Результат.СертификатBase64, Объект.Организация, Объект.ПрограммаБанка, Результат);
	СтрокаСертификата = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСертификата.СертификатЭП = НовыйСертификат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияВК(ПодключаемыйМодуль, ДополнительныеПараметры) Экспорт
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПодключаемыйМодуль", ПодключаемыйМодуль);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияСертификатаЧерезВК", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыСоединения = ОбменСБанкамиСлужебныйВызовСервера.ПараметрыСоединенияВК(Объект.Ссылка);
	ОбменСБанкамиСлужебныйКлиент.ПолучитьДанныеСертификатаСТокенаВК(Оповещение, ПодключаемыйМодуль, ПараметрыСоединения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатЧерезВК()
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодключенияВК", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ПодключитьИИнициализироватьВК(Оповещение, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбменЧерезДополнительнуюОбработку

&НаКлиенте
Процедура ПродолжитьПолучениеСертификатаПослеВводаPinКода(PINКод, ПараметрыПолучения) Экспорт
	
	ИдентификаторХранилища = ПараметрыПолучения.ИдентификаторХранилища;
	
	Если PINКод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		Объект.ИмяВнешнегоМодуля);
	PINУстановлен = ОбменСБанкамиСлужебныйКлиент.УстановитьPINКодХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ИдентификаторХранилища, PINКод);
		
	Если Не PINУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыПолучения.ИдентификаторХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСертификатаЧерезДополнительнуюОбработку(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйСертификат = НайтиСоздатьСертификатВнешнегоМодуля(
		ДанныеСертификата.СертификатXML, Объект.Организация, Объект.ПрограммаБанка, ДанныеСертификата);
	СтрокаСертификата = Объект.СертификатыПодписейОрганизации.Добавить();
	СтрокаСертификата.СертификатЭП = НовыйСертификат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку(ПараметрыОбработки = Неопределено) Экспорт
	
	АдресВК = Неопределено;
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		Объект.ИмяВнешнегоМодуля, АдресВК);
	Если ВнешнийПодключаемыйМодуль = Неопределено Тогда
		Если ЗначениеЗаполнено(АдресВК) Тогда
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ТекущаяНастройкаОбменаЧерезДополнительнуюОбработку", Объект.Ссылка);
			Обработчик = Новый ОписаниеОповещения(
				"НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыОбработки);
			НачатьУстановкуВнешнейКомпоненты(Обработчик, АдресВК);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Устройства = ОбменСБанкамиСлужебныйКлиент.ПодключенныеХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль);
	Если Устройства=Неопределено ИЛИ Устройства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВыбораТокена = Новый Структура;
	ПараметрыВыбораТокена.Вставить("ВнешнийПодключаемыйМодуль", ВнешнийПодключаемыйМодуль);
	
	Если Устройства.Количество() = 1 Тогда
		ИдентификаторХранилища = Устройства[0];
		ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыВыбораТокена);
	Иначе
		Обработчик = Новый ОписаниеОповещения(
			"ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку", ЭтотОбъект, ПараметрыВыбораТокена);
		ОбменСБанкамиСлужебныйКлиент.ВыбратьХранилищеЧерезДополнительнуюОбработку(
			Объект.Ссылка, Обработчик, ПараметрыВыбораТокена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораХранилищаЧерезДополнительнуюОбработку(ИдентификаторХранилища, ПараметрыОбработки) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторХранилища) Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОбработки.Вставить("ИдентификаторХранилища", ИдентификаторХранилища);
	
	ВнешнийПодключаемыйМодуль = ПараметрыОбработки.ВнешнийПодключаемыйМодуль;
	
	ТребуетсяУстановкаPINКода = ОбменСБанкамиСлужебныйКлиент.НеобходимаУстановкаPINКодаХранилищаЧерезДополнительнуюОбработку(
		ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
		
	Если ТребуетсяУстановкаPINКода = Неопределено Тогда
		Возврат;
	ИначеЕсли ТребуетсяУстановкаPINКода Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения(
			"ПродолжитьПолучениеСертификатаПослеВводаPinКода", ЭтотОбъект, ПараметрыОбработки);
		ОбменСБанкамиСлужебныйКлиент.НачатьУстановкуPINКодаХранилища(
			Объект.Ссылка, ИдентификаторХранилища, ОповещениеОЗакрытии);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПолучениеСертификата(ПараметрыОбработки.ИдентификаторХранилища)
	
КонецПроцедуры

#КонецОбласти

#Область ВнешнийМодуль

&НаСервереБезКонтекста

Функция ИнформацияОВнешнейКомпоненте(Знач НастройкаОбмена, Знач АдресИнфоФайла)
	
	ВремФайл = ПолучитьИмяВременногоФайла("xml");
	ПараметрыПолучения = Новый Структура("Таймаут, ПутьДляСохранения", 7, ВремФайл);
	РезультатИнфоФайл = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(АдресИнфоФайла, ПараметрыПолучения);
	Если РезультатИнфоФайл.Статус Тогда
		Попытка
			ПараметрыВК = Справочники.ДополнительныеВнешниеКомпоненты.ПараметрыВК(ВремФайл);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
		ВКВИБ = ДополнительныеВнешниеКомпонентыВызовСервера.ПараметрыВнешнейКомпоненты(ПараметрыВК.ИмяМодуля);
		Если ВКВИБ = Неопределено И ОбщегоНазначения.РазделениеВключено() Тогда
			ВидОперации = НСтр("ru = 'Поиск внешнего модуля в информационной базе.'");
			ТекстСообщения = НСтр("ru = 'В информационной базе отсутствует внешний модуль %1.
										|Необходимо обратиться в техническую поддержку сервиса.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ТекстСообщения, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
			Возврат Неопределено;
		КонецЕсли;
		Возврат ПараметрыВК;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить информационный файл внешней компоненты.
									|Описание: %1'");
		ТекстОшибки =  НСтр("ru = 'Не удалось получить информационный файл внешней компоненты.
							|Описание: %1
							|URL: %2'");
		Если РезультатИнфоФайл.Свойство("КодСостояния") Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Код ошибки: %2'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатИнфоФайл.СообщениеОбОшибке, РезультатИнфоФайл.КодСостояния);
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Код ошибки: %3'");
			ТекстОшибки = СтрШаблон(
				ТекстОшибки, РезультатИнфоФайл.СообщениеОбОшибке, АдресИнфоФайла, РезультатИнфоФайл.КодСостояния);
		Иначе
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатИнфоФайл.СообщениеОбОшибке);
			ТекстОшибки = СтрШаблон(ТекстОшибки, РезультатИнфоФайл.СообщениеОбОшибке, АдресИнфоФайла);
		КонецЕсли;
		
		ВидОперации = НСтр("ru = 'Загрузка информационного файла через интернет.'");
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ВидОперации, ТекстОшибки, ТекстСообщения, "ОбменСБанками", НастройкаОбмена);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВремФайл);
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьВКБанка(Знач АдресФайлаВнешнегоМодуля)

	Справочники.ДополнительныеВнешниеКомпоненты.СохранитьВнешнююКомпонентуВИнформационнойБазе(АдресФайлаВнешнегоМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВнешнийМодульПослеВыбораФайлаВВебКлиенте(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		АдресВнешнегоМодуля = Адрес;
		ОбработатьВыборФайлаВнешнегоМодуля(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВнешнийМодульПослеВыбораФайла(МассивФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФайлаВнешнегоМодуля = МассивФайлов[0];
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайлаВнешнегоМодуля);
	АдресВнешнегоМодуля = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	ОбработатьВыборФайлаВнешнегоМодуля(ИмяФайлаВнешнегоМодуля);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайлаВнешнегоМодуля(ИмяФайлаВнешнегоМодуля)
	
	РасширениеФайла = ВРег(ОбменСБанкамиСлужебныйКлиент.РасширениеФайла(ИмяФайлаВнешнегоМодуля));

	Если Не РасширениеФайла = "ZIP" И Не РасширениеФайла = "EPF" Тогда
		ТекстСообщения = НСтр("ru = 'Указан неверный файл.
									|Файл внешнего модуля должен иметь расширение ""zip"" или ""epf""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если РасширениеФайла = "ZIP" Тогда // внешняя компонента
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			ТекстСообщения = НСтр("ru = 'Указан внешний модуль другого типа.
										|Необходимо выполнить команду ""Получить настройки""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
		ЗаполнитьВидыЭДДоступнымиЗначениями();

		ИнформацияОКомпоненте = ДополнительныеВнешниеКомпонентыВызовСервера.ИнформацияОВнешнейКомпоненте(
			АдресВнешнегоМодуля);
		
		Если ИнформацияОКомпоненте = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект.ИмяВнешнегоМодуля = ИнформацияОКомпоненте.ИмяМодуля;
		
		Шаблон = НСтр("ru = '%1. Версия %2.'");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = СтрШаблон(
			Шаблон, ИнформацияОКомпоненте.Название, ИнформацияОКомпоненте.Версия);
		СохранитьВнешнийМодуль = Истина;
		Модифицированность = Истина;
		
	Иначе // внешняя обработка
		
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
			Объект.СертификатыПодписейОрганизации.Очистить();
		КонецЕсли;
		
		Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
		ЗаполнитьВидыЭДДоступнымиЗначениями();

		#Если ТолстыйКлиентОбычноеПриложение Тогда
			ВремФайл = ПолучитьИмяВременногоФайла("epf");
			ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресВнешнегоМодуля);
			ДвоичныеДанныеОбработки.Записать(ВремФайл);
			ПодключаемыйМодуль = ВнешниеОбработки.ПолучитьФорму(ВремФайл);
			Объект.ИмяВнешнегоМодуля = ПодключаемыйМодуль.ЭтотОбъект;
			ПозицияТочки = СтрНайти(Объект.ИмяВнешнегоМодуля, ".");
			Объект.ИмяВнешнегоМодуля = Сред(Объект.ИмяВнешнегоМодуля, ПозицияТочки + 1);
		#Иначе
			
			Объект.ИмяВнешнегоМодуля = "";
			ПодключитьВнешнююОбработку();
			
			Если НЕ ЗначениеЗаполнено(Объект.ИмяВнешнегоМодуля) Тогда
				Возврат;
			КонецЕсли;
			
			ИмяФормыОбработки = "ВнешняяОбработка." + Объект.ИмяВнешнегоМодуля + ".Форма";
			Попытка
				ПараметрыФормыОбработки = Новый Структура("РежимЭДО", Истина);
				ПодключаемыйМодуль = ПолучитьФорму(ИмяФормыОбработки, ПараметрыФормыОбработки, , УникальныйИдентификатор);
			Исключение
				Операция = НСтр("ru = 'Получение формы внешней обработки.'");
				ТекстСообщения = НСтр("ru = 'Не удалось подключить выбранный внешний модуль'");
				ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					Операция, ПодробныйТекстОшибки, ТекстСообщения, "ОбменСБанками");
				Возврат;
			КонецПопытки;
		#КонецЕсли
		
		СведенияОВнешнейОбработке = ОбменСБанкамиСлужебныйВызовСервера.СведенияОВнешнейОбработке(Объект.ИмяВнешнегоМодуля);
		
		ВерсияВнешнегоМодуля = СведенияОВнешнейОбработке.Версия;
		НаименованиеВнешнегоМодуля = СведенияОВнешнейОбработке.Наименование;
	
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Заголовок = НСтр("ru = 'Обновить из файла...'");
		
		Шаблон = НСтр("ru = '%1. Версия %2.'");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = СтрШаблон(Шаблон, НаименованиеВнешнегоМодуля, ВерсияВнешнегоМодуля);
		СохранитьВнешнийМодуль = Истина;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьВнешнююОбработку()
	
	ОбменСБанкамиСлужебный.ПодключитьВнешнююОбработку(АдресВнешнегоМодуля, Объект.ИмяВнешнегоМодуля);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОВнешнемМодуле()

	Если Объект.ПрограммаБанка = Перечисления.ПрограммыБанка.ОбменЧерезВК Тогда
		ДанныеВнешнегоМодуля = ДополнительныеВнешниеКомпонентыВызовСервера.ПараметрыВнешнейКомпоненты(
			Объект.ИмяВнешнегоМодуля);
	Иначе
		ДанныеВнешнегоМодуля = ОбменСБанкамиСлужебныйПовтИсп.ДанныеВнешнейОбработки(Объект.ИмяВнешнегоМодуля);
	КонецЕсли;
	
	Если ДанныеВнешнегоМодуля.Существует Тогда
		Шаблон = НСтр("ru = '%1. Версия %2.'");
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = СтрШаблон(
			Шаблон, ДанныеВнешнегоМодуля.Наименование, ДанныеВнешнегоМодуля.Версия);
		Элементы.ЗагрузитьВнешнийМодульИзФайла.Заголовок = НСтр("ru = 'Обновить из файла...'");
	Иначе
		Элементы.ИнформацияОВнешнемМодуле.Заголовок = ДанныеВнешнегоМодуля.ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаПредупрежденияЗагрузитьВнешнийМодуль(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		АдресВХранилище = Неопределено;
		Обработчик = Новый ОписаниеОповещения("СохранитьВнешнийМодульПослеВыбораФайлаВВебКлиенте", ЭтотОбъект);
		НачатьПомещениеФайла(Обработчик, АдресВХранилище, , , УникальныйИдентификатор);
	#Иначе
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		Фильтр = НСтр("ru = 'Внешний модуль(*.zip;*.epf)|*.zip;*.epf'");

		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл внешнего модуля банка'");
		Обработчик = Новый ОписаниеОповещения("СохранитьВнешнийМодульПослеВыбораФайла", ЭтотОбъект);
		ДиалогОткрытияФайла.Показать(Обработчик);
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьСертификатВнешнегоМодуля(Знач ДанныеСертификата, Знач Организация, Знач ПрограммаБанка, Знач СвойстваСертификата)
	
	Возврат ОбменСБанкамиСлужебный.НайтиСоздатьСертификатВнешнегоМодуля(
		ДанныеСертификата, Организация, ПрограммаБанка, СвойстваСертификата);
	
КонецФункции

#КонецОбласти

#Область ТестНастройки

&НаКлиенте
Процедура ПровестиТестНастройкиОбмена(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = Истина Тогда
		Записать();
	ИначеЕсли Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбменСБанкамиКлиентСервер.ЗаполненыРеквизитыНастройкиОбмена(Объект, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеТестаНастройкиОбмена", ЭтотОбъект);
	ОбменСБанкамиСлужебныйКлиент.ПровестиТестНастройки(Обработчик, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПослеТестаНастройкиОбмена(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ Результат = Неопределено Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Тест не завершен.'"));
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат);
	ИначеЕсли Результат = Истина ИЛИ (ТипЗнч(Результат) = Тип("Структура") И Результат.Успех) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Тестирование выполнено успешно.'"));
	Иначе
		Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("МассивСообщений") Тогда
			Для Каждого Сообщение Из Результат.МассивСообщений Цикл
				Сообщение.Сообщить();
			КонецЦикла
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Тест не пройден.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификаты

&НаСервереБезКонтекста
Процедура ПоместитьВХранилищеСертификат(Знач ДвоичныеДанные, Знач УникальныйИдентификатор, АдресСертификатаСбербанка, ПредставлениеСертификата = Неопределено)
	
	ПредставлениеСертификата = "";
	
	Если ДвоичныеДанные = Неопределено Тогда
		АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Иначе
		Попытка
			СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
			АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Исключение
			ВремФайл = ПолучитьИмяВременногоФайла();
			Попытка
				ДвоичныеДанные.Записать(ВремФайл);
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ВремФайл);
				СтрокаBase64 = ТекстовыйДокумент.ПолучитьТекст();
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, "-----BEGIN CERTIFICATE-----" + Символы.ПС,""); 
				СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС + "-----END CERTIFICATE-----","");
				ДвоичныеДанныеСертификата = Base64Значение(СтрокаBase64);
				СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
				
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось прочитать файл сертификата, операция прервана.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				АдресСертификатаСбербанка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
				Возврат;
			КонецПопытки;
			ФайловаяСистема.УдалитьВременныйФайл(ВремФайл);
		КонецПопытки;
		ПредставлениеСертификата = ЭлектроннаяПодпись.ПредставлениеСубъекта(СертификатКриптографии);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтрокиТаблиц()
	
	СписокСтрокКУдалению = Новый СписокЗначений;
	Для каждого СтрокаСертификата Из Объект.СертификатыПодписейОрганизации Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.СертификатЭП) Тогда
			СписокСтрокКУдалению.Добавить(СтрокаСертификата.НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	СписокСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого Запись Из СписокСтрокКУдалению Цикл
		Объект.СертификатыПодписейОрганизации.Удалить(Запись.Значение-1);
	КонецЦикла

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеСертификата(ИдентификаторХранилища)
	
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияСертификатаЧерезДополнительнуюОбработку", ЭтотОбъект);
	ВнешнийПодключаемыйМодуль = ОбменСБанкамиСлужебныйКлиент.ВнешнийПодключаемыйМодульЧерезДополнительнуюОбработку(
		Объект.ИмяВнешнегоМодуля);
	
	ОбменСБанкамиСлужебныйКлиент.ПолучитьСертификатЧерезДополнительнуюОбработку(
		Обработчик, ВнешнийПодключаемыйМодуль, ИдентификаторХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификата(Результат, Параметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьНастройкуОбмена();
		Если Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку") Тогда
			НачатьЗагрузкуСертификатаЧерезДополнительнуюОбработку();
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК") Тогда
			ЗагрузитьСертификатЧерезВК();
		ИначеЕсли Объект.ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн") Тогда
			ПолучитьДанныеСертификатаНаТокенеСбербанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуСертификатаБанка()
	
	АдресВХранилище = Неопределено;
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыбораФайлаСертификатаБанка", ЭтотОбъект);
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, "*.cer", Истина, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФайлаСертификатаБанка(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
		ПоместитьВХранилищеСертификат(ДанныеФайла, УникальныйИдентификатор, АдресСертификатаСбербанка, СертификатБанка);
		СохранитьСертификатСбербанка = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьГруппуПодтвержденияПлатежа(Объект, Группа)
	
	ЕстьПодтверждаемыйДокумент = Ложь;
	Для каждого ЭлементКоллекции Из Объект.ИсходящиеДокументы Цикл
		Если ЭлементКоллекции.ПодтвердитьВБанке Тогда
			ЕстьПодтверждаемыйДокумент = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Группа.Видимость = ЕстьПодтверждаемыйДокумент;

КонецПроцедуры

#КонецОбласти

#Область ПроверкиПередЗаписью

&НаСервере
Функция НастройкаВалидирована(ЕстьОшибкиЗаполнения = Ложь)
	Если НЕ ПроверитьЗаполнение() Тогда
		ЕстьОшибкиЗаполнения = Истина;	
	КонецЕсли;
	
	ЕстьОшибкиВЗависимыхНастройках = Ложь;
	Если Не ЕстьОшибкиЗаполнения Тогда
		// Проверим, что все указанные маршруты возможно выполнить
		ПроверитьСоответствиеСертификатовМаршрутам(ЕстьОшибкиВЗависимыхНастройках);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибкиЗаполнения И Не ЕстьОшибкиВЗависимыхНастройках;

КонецФункции

&НаСервере
Процедура ПроверитьСоответствиеСертификатовМаршрутам(Отказ)
	
	СертификатыДляПодписи = Объект.СертификатыПодписейОрганизации.Выгрузить(,"СертификатЭП").ВыгрузитьКолонку("СертификатЭП");
	
	// Подготовим соответствие Маршрут - виды документов маршрута
	СоответствиеВидовЭДМаршрутам = Новый Соответствие;
	Для Каждого СтрокаИсходящегоДокумента Из Объект.ИсходящиеДокументы Цикл
		Если СтрокаИсходящегоДокумента.ИспользоватьЭП Тогда
			МаршрутПодписания 	= СтрокаИсходящегоДокумента.МаршрутПодписания;
			ВидЭД				= СтрокаИсходящегоДокумента.ИсходящийДокумент;
			
			МассивЭД = СоответствиеВидовЭДМаршрутам[МаршрутПодписания];
			Если МассивЭД = Неопределено Тогда
				МассивЭД = Новый Массив;
				СоответствиеВидовЭДМаршрутам.Вставить(МаршрутПодписания, МассивЭД);
			КонецЕсли;
			МассивЭД.Добавить(ВидЭД);
		КонецЕсли;
	КонецЦикла;
	
	// Проверим валидность каждого маршрута в соответствии с установленными настройками
	Для Каждого ЭлементСоответствия Из СоответствиеВидовЭДМаршрутам Цикл
		МаршрутПодписания = ЭлементСоответствия.Ключ;
		ВидыЭД            = ЭлементСоответствия.Значение;
		
		РезультатыПроверки = ЭлектронноеВзаимодействиеСлужебный.РезультатыПроверкиМаршрутаПоПараметрамНастройки(
			МаршрутПодписания, СертификатыДляПодписи, ВидыЭД);
			
		ЭлектронноеВзаимодействиеСлужебный.ВывестиРезультатыПроверкиМаршрута(РезультатыПроверки, 
			Объект.Ссылка, МаршрутПодписания, Отказ);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗаписиПолученОтвет(Ответ, ПараметрыЗаписи) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		НовыеПараметрыЗаписи = Новый Структура;
		НовыеПараметрыЗаписи.Вставить("ПропуститьПроверки");
		Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
			НовыеПараметрыЗаписи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

		Записать(НовыеПараметрыЗаписи);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	ОбменСБанкамиСлужебный.ЗаполнитьВидыЭДДоступнымиЗначениями(Объект);
	ЗаполнитьСлужебныеРеквизитыТаблицыИсходящихДокументов()
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницы(Форма, Знач ПрограммаБанка, Знач ИспользуетсяКриптография, Знач РазделениеВключено, Знач АутентификацияПоСертификату = Ложь)
	
	Форма.Элементы.ГруппаЛичногоКабинета.Видимость = Ложь;
	
	Форма.Элементы.СтраницыРазделов.Видимость = Истина;
	
	ЭтоСбербанк = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.СбербанкОнлайн");
	ЭтоОбменЧерезДопОбработку = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезДопОбработку");
	ЭтоАсинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен");
	ЭтоСинхронныйОбмен = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АльфаБанкОнлайн");
	ЭтоОбменЧерезВК = ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.ОбменЧерезВК");
	
	Если ЭтоСинхронныйОбмен Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСинхронный;
	ИначеЕсли ЭтоСбербанк Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаСбербанк;
		Форма.Элементы.ИмяПользователя.Видимость = НЕ ИспользуетсяКриптография;
		Форма.Элементы.КриптографияСбербанк.Видимость = ИспользуетсяКриптография;
		Форма.Элементы.ИсходящиеДокументыИспользоватьЭП.Видимость = ИспользуетсяКриптография;
		Форма.Элементы.СтраницыВнешнегоМодуля.ТекущаяСтраница = Форма.Элементы.Надпись;
	ИначеЕсли ЭтоАсинхронныйОбмен Тогда
		Форма.ВариантАутентификации = АутентификацияПоСертификату;
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаАсинхронный;
		Если ИспользуетсяКриптография Тогда
			Если АутентификацияПоСертификату Тогда
				Форма.Элементы.ЛогинАсинхронныйОбмен.Видимость = Ложь;
			Иначе
				Форма.Элементы.ЛогинАсинхронныйОбмен.Видимость = Истина;
			КонецЕсли;
			Форма.Элементы.ГруппаСертификатыАсинхронный.Видимость = Истина;
		Иначе
			Форма.Элементы.ГруппаСертификатыАсинхронный.Видимость = Ложь;
			Форма.Элементы.ЛогинАсинхронныйОбмен.Видимость = Истина;
		КонецЕсли;
		
		ОтобразитьГруппуПодтвержденияПлатежа(Форма.Объект, Форма.Элементы.ГруппаЛичногоКабинета);
		
	ИначеЕсли ЭтоОбменЧерезВК Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаВнешнийМодуль;
	ИначеЕсли ЭтоОбменЧерезДопОбработку Тогда
		Форма.Элементы.СтраницыВидыБанковскихСистем.ТекущаяСтраница = Форма.Элементы.СтраницаВнешнийМодуль;
		Форма.Элементы.СтраницыВнешнегоМодуля.ТекущаяСтраница = Форма.Элементы.Флаг;
	КонецЕсли;
	
	Форма.Элементы.ТестНастроек.Видимость = НЕ ЭтоСинхронныйОбмен;
	Форма.Элементы.ТестНастроек.Доступность = ОбменСБанкамиСлужебныйВызовСервера.ПравоВыполненияОбмена()
		ИЛИ ОбменСБанкамиСлужебныйВызовСервера.ПравоНастройкиОбмена();
	Форма.Элементы.НачальнаяДатаЗапросаДанных.Видимость = ЭтоАсинхронныйОбмен ИЛИ ЭтоСбербанк ИЛИ ЭтоОбменЧерезВК;
	Форма.Элементы.ЗагрузитьВнешнийМодульИзФайла.Видимость = (ЭтоОбменЧерезВК ИЛИ ЭтоОбменЧерезДопОбработку)
		И НЕ РазделениеВключено;
	Форма.Элементы.ИнформацияОВнешнемМодуле.Видимость = (ЭтоОбменЧерезВК ИЛИ ЭтоОбменЧерезДопОбработку);
	Форма.Элементы.ВерсияФормата.Видимость = ЭтоОбменЧерезВК ИЛИ ЭтоАсинхронныйОбмен;
	Форма.Элементы.ИсходящиеДокументыМаршрутПодписания.Видимость = ИспользуетсяКриптография;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкуОбмена()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	ПередЗаписьюНаСервере(Неопределено, СправочникОбъект, Неопределено);
	СправочникОбъект.Записать();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	ЗаполнитьСлужебныеРеквизитыТаблицыИсходящихДокументов();
	
КонецПроцедуры

&НаКлиенте
Функция НастройкаОбменаЗаписана(Обработчик)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Загружать сертификаты можно только в записанной настройке обмена.
								|Записать?'");
	
	ОП = Новый ОписаниеОповещения(Обработчик, ЭтотОбъект);
	ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПослеПодтвержденияИзмененияОрганизации(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ДействияПриИзмененииОрганизации();
	Иначе
		Объект.Организация = ТекущаяОрганизация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуетсяКриптография(ПрограммаБанка)
	
	Если НЕ ПрограммаБанка = ПредопределенноеЗначение("Перечисление.ПрограммыБанка.АсинхронныйОбмен") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьЭлектронныеПодписиЭД");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименование(Организация, Банк, Наименование)
	
	ШаблонНаименования = "%1 - %2";
	Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования, Организация, Банк);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияРаботыПомощника(НастройкаОбмена, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОбъектФормы(НастройкаОбмена);
	
	Прочитать();
	
	ПереключитьСтраницы(ЭтотОбъект, Объект.ПрограммаБанка, Объект.ИспользуетсяКриптография, РазделениеВключено,
		Объект.АутентификацияПоСертификату);

	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОбъектФормы(НастройкаОбмена)
	
	НастройкаОбменаОбъект = НастройкаОбмена.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(НастройкаОбменаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// У недействительной настройки отсутствует пометка незаполненных полей
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Организация.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РесурсПриемник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РесурсИсточник.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Банк.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресСервера.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СертификатБанка.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторОрганизации.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресСервераАсинхронный.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторОрганизацииАсинхронный.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Недействительна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Доступность маршрута подписания
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыМаршрутПодписания.Имя);
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИспользоватьЭП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.РазрешенВыборМаршрута");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(120, 120, 120));
	
	// Доступность установки флажка необходимости подтверждения платежа в личном кабинете банка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыПодписыватьВБанке.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИспользоватьЭП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИсходящиеДокументы.ИсходящийДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(ОбменСБанкамиСлужебный.ВидыПлатежныхДокументов());
	ОтборЭлемента.ПравоеЗначение = СписокОтбора;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только для асинхронного обмена доступны элементы подтверждения платежа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсходящиеДокументыПодписыватьВБанке.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПрограммаБанка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПрограммыБанка.АсинхронныйОбмен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Адрес личного кабинета необходимо указать, если требуется открывать окно подтверждения платежей
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЛичногоКабинета.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПоказыватьОкноПодтвержденияПлатежей");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Недействительна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТаблицыИсходящихДокументов()
	ВидыДокументовПодписываемыхПоМаршруту = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту();
	
	Для Каждого СтрокаТаблицы Из Объект.ИсходящиеДокументы Цикл
		СтрокаТаблицы.МаршрутЗависимОтОрганизации = МаршрутЗависимОтОрганизации(СтрокаТаблицы.МаршрутПодписания);
		СтрокаТаблицы.РазрешенВыборМаршрута = ВидыДокументовПодписываемыхПоМаршруту.Найти(СтрокаТаблицы.ИсходящийДокумент) <> Неопределено;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаршрутЗависимОтОрганизации(Маршрут)

	Результат = Ложь;
	Если ЗначениеЗаполнено(Маршрут) Тогда
		Результат = Не МаршрутПредопределенный(Маршрут);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ДействияПриИзмененииОрганизации()

	Объект.СертификатыПодписейОрганизации.Очистить();
	
	// В строках исходящих документов, где указан зависимый от организации маршрут установим маршрут по умолчанию.
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("МаршрутЗависимОтОрганизации", Истина);
	СтрокиДляЗаменыМаршрута = Объект.ИсходящиеДокументы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаИсходящихДокументов Из СтрокиДляЗаменыМаршрута Цикл
		СтрокаИсходящихДокументов.МаршрутПодписания = ПредопределенноеЗначение("Справочник.МаршрутыПодписания.ОднойДоступнойПодписью");
		СтрокаИсходящихДокументов.МаршрутЗависимОтОрганизации = МаршрутЗависимОтОрганизации(СтрокаИсходящихДокументов.МаршрутПодписания);
	КонецЦикла;
	
	ЗаполнитьНаименование(Объект.Организация, Объект.Банк, Объект.Наименование);
	ТекущаяОрганизация = Объект.Организация;

КонецПроцедуры

&НаСервереБезКонтекста
Функция МаршрутПредопределенный(Маршрут)

	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Маршрут, "Предопределенный");

КонецФункции 

#КонецОбласти

#КонецОбласти
