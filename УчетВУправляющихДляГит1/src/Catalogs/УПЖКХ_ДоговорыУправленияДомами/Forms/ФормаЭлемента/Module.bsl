
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	Если НЕ Объект.ОснованиеЗаключенияДоговора.Ссылка.Пустая() Тогда
		НаименованиеОснованияЗаключенияДоговора = Объект.ОснованиеЗаключенияДоговора.Наименование + "." 
		+ Объект.ОснованиеЗаключенияДоговора.Расширение;
	КонецЕсли;
	
	Если НЕ Объект.ДоговорУправления.Ссылка.Пустая() Тогда
		НаименованиеДоговораУправления = Объект.ДоговорУправления.Наименование + "." 
		+ Объект.ДоговорУправления.Расширение;
	КонецЕсли;
	
	НачальноеЗначениеЗдания = Объект.УправляемыйОбъект;
	
	Если Объект.ПереченьКоммунальныхУслуг.Количество() = 0 Тогда
		ЗаполнитьТаблицуКоммунальныхУслуг();
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.Наименование = "Договор управления №" + Объект.НомерДоговора + " от " + Формат(Объект.ДатаЗаключенияДоговора, "ДФ=dd.MM.yyyy");
	
КонецПроцедуры // ПередЗаписью()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки "ОснованиеЗаключенияДоговораСсылка".
Процедура ОснованиеЗаключенияДоговораСсылкаНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сначала необходимо записать элемент справочника.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ОснованиеЗаключенияДоговора = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
		ВыбратьИСохранитьФайл();
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ПрисоединенныйФайл", Объект.ОснованиеЗаключенияДоговора));
		
		ОткрытьФорму("РегистрСведений.ДвоичныеДанныеФайлов.Форма.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры // ОснованиеЗаключенияДоговораСсылкаНажатие()

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки "ДоговорУправленияСсылка".
Процедура ДоговорУправленияСсылкаНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сначала необходимо записать элемент справочника.");
		Возврат;
	КонецЕсли;
	
	Если Объект.ДоговорУправления = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
		ВыбратьИСохранитьФайл(Истина);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ПрисоединенныйФайл", Объект.ДоговорУправления));
		
		ОткрытьФорму("РегистрСведений.ДвоичныеДанныеФайлов.Форма.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры // ДоговорУправленияСсылкаНажатие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора "ВидОснованияЗаключенияДоговора".
Процедура ВидОснованияЗаключенияДоговораПриИзменении(Элемент)
	
	УстановитьНадписьОснованияЗаключенияДоговора(ЭтаФорма);
	
КонецПроцедуры // ВидОснованияЗаключенияДоговораПриИзменении()

&НаКлиенте
// Обработчик события "Нажатие" картинки "ОткрытьОснованиеЗаключенияДоговора".
Процедура ОткрытьОснованиеЗаключенияДоговораНажатие(Элемент)
	
	ОткрытьФайл(НаименованиеОснованияЗаключенияДоговора);
	
КонецПроцедуры // ОткрытьОснованиеЗаключенияДоговораНажатие()

&НаКлиенте
// Обработчик события "Нажатие" картинки "УдалитьОснованиеЗаключенияДоговора".
Процедура УдалитьОснованиеЗаключенияДоговораНажатие(Элемент)
	
	УдалитьПрисоединенныйФайл("Основание договора");
	
КонецПроцедуры // УдалитьОснованиеЗаключенияДоговораНажатие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора "ВидВторойСтороныДоговора".
Процедура ВидВторойСтороныДоговораПриИзменении(Элемент)
	
	УстановитьВидимостьВторойСтороныДоговора(ЭтаФорма);
	
	УстановитьСписокВыбораОснованийЗаключенияДоговора(ЭтаФорма);
	
КонецПроцедуры // ВидВторойСтороныДоговораПриИзменении()

&НаКлиенте
// Обработчик события "Нажатие" картинки "ОткрытьДоговорУправления".
Процедура ОткрытьДоговорУправленияНажатие(Элемент)
	
	ОткрытьФайл(НаименованиеДоговораУправления);
	
КонецПроцедуры // ОткрытьДоговорУправленияНажатие()

&НаКлиенте
// Обработчик события "Нажатие" картинки "УдалитьДоговорУправления".
Процедура УдалитьДоговорУправленияНажатие(Элемент)
	
	УдалитьПрисоединенныйФайл("Договор управления");
	
КонецПроцедуры // УдалитьДоговорУправленияНажатие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора "УправляемыйОбъект".
Процедура УправляемыйОбъектПриИзменении(Элемент)
	
	Если НЕ Объект.УправляемыйОбъект = НачальноеЗначениеЗдания 
		И НЕ НачальноеЗначениеЗдания = ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка") Тогда
		НачальноеЗначениеЗдания = Объект.УправляемыйОбъект;
		Оповещение = Новый ОписаниеОповещения("ВопросЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, "Очистить данные документа?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры // УправляемыйОбъектПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора "ПериодВыставленияКвитанцийЧисло".
Процедура ПериодВыставленияКвитанцийЧислоПриИзменении(Элемент)
	
	УстановитьНадписьЧислоВыставленияКвитанций(Этаформа);
	
КонецПроцедуры // ПериодВыставленияКвитанцийЧислоПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора "ЧислоПодачиПоказанийПоСчетчикам".
Процедура ПериодПодачиПоказанийПоСчетчикамКонецПриИзменении(Элемент)
	
	УстановитьНадписьЧислоПодачиПоказанийСчетчиков(ЭтаФорма);
	
КонецПроцедуры // ПериодПодачиПоказанийПоСчетчикамКонецПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "ДополнительноеСоглашениеПредставление".
Процедура ДополнительныеСоглашенияДополнительноеСоглашениеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сначала необходимо записать элемент справочника.");
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	
	ВыбратьИСохранитьФайл(, Истина, ТекущаяСтрока);
	
КонецПроцедуры // ДополнительныеСоглашенияДополнительноеСоглашениеПредставлениеНачалоВыбора()

&НаКлиенте
// Обработчик события "Очистка" поля ввода "ДополнительноеСоглашениеПредставление".
Процедура ДополнительноеСоглашениеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.ДополнительноеСоглашениеФайл = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
		ПометитьНаУдалениеНаСервере(ТекущаяСтрока.ДополнительноеСоглашениеФайл);
	КонецЕсли;
	
КонецПроцедуры // ДополнительноеСоглашениеПредставлениеОчистка()

&НаКлиенте
// Обработчик события "Открытие" поля ввода "ДополнительноеСоглашениеПредставление".
Процедура ДополнительноеСоглашениеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	
	ОткрытьФайл(ТекущаяСтрока.ДополнительноеСоглашениеПредставление);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ДополнительноеСоглашениеПредставлениеОткрытие()

&НаКлиенте
// Обработчик события "ПередУдалением" ТЧ "ДополнительныеСоглашения".
Процедура ДополнительныеСоглашенияПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.ДополнительныеСоглашения.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.ДополнительноеСоглашениеФайл = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
		ПометитьНаУдалениеНаСервере(ТекущаяСтрока.ДополнительноеСоглашениеФайл);
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеСоглашенияПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВИДИМОСТЬЮ

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	УстановитьСписокВыбораОснованийЗаключенияДоговора(Форма);
	
	УстановитьНадписьОснованияЗаключенияДоговора(Форма);
	
	УстановитьНадписьДоговораУправления(Форма);
	
	УстановитьВидимостьВторойСтороныДоговора(Форма);
	
	УстановитьНадписьЧислоВыставленияКвитанций(Форма);
	
	УстановитьНадписьЧислоПодачиПоказанийСчетчиков(Форма);
	
КонецПроцедуры // УправлениеФормой()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает список доступных значений для поля "Основание заключения договора".
Процедура УстановитьСписокВыбораОснованийЗаключенияДоговора(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СписокВидовОснований = Новый Массив;
	СписокВидовОснований.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияЗаключенияДоговораУправленияДомами.ПротоколОбщегоСобранияСобственников"));
	СписокВидовОснований.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияЗаключенияДоговораУправленияДомами.ПротоколОткрытогоКонкурса"));
	
	Если Объект.ВидВторойСтороныДоговора = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВторойСтороныУправленияДомами.Застройщик") Тогда
		СписокВидовОснований.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияЗаключенияДоговораУправленияДомами.ДокументПодтверждающийРешениеЗастройщика"));
	ИначеЕсли Объект.ВидВторойСтороныДоговора = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВторойСтороныУправленияДомами.ТСЖКооператив") Тогда
		СписокВидовОснований.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияЗаключенияДоговораУправленияДомами.ПротоколЗаседанияПравленияТСЖКооператива"));
	КонецЕсли;
	Элементы.ВидОснованияЗаключенияДоговора.СписокВыбора.ЗагрузитьЗначения(СписокВидовОснований);
	
КонецПроцедуры // УстановитьСписокВыбораОснованийЗаключенияДоговора()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает надпись гиперссылки с основанием заключения договора.
Процедура УстановитьНадписьОснованияЗаключенияДоговора(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ОснованиеЗаключенияДоговора = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
		Если Объект.ВидОснованияЗаключенияДоговора 
			= ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияЗаключенияДоговораУправленияДомами.ПротоколОбщегоСобранияСобственников") Тогда
			Элементы.ОснованиеЗаключенияДоговораСсылка.Заголовок = "Выбрать файл с протоколом общего собрания собственников";
		ИначеЕсли Объект.ВидОснованияЗаключенияДоговора 
			= ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияЗаключенияДоговораУправленияДомами.ПротоколОткрытогоКонкурса") Тогда
			Элементы.ОснованиеЗаключенияДоговораСсылка.Заголовок = "Выбрать файл с протоколом открытого конкурса";
		ИначеЕсли Объект.ВидОснованияЗаключенияДоговора 
			= ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияЗаключенияДоговораУправленияДомами.ПротоколЗаседанияПравленияТСЖКооператива") Тогда
			Элементы.ОснованиеЗаключенияДоговораСсылка.Заголовок = "Выбрать файл с протоколом заседания правления";
		Иначе
			Элементы.ОснованиеЗаключенияДоговораСсылка.Заголовок = "Выбрать документ, подтверждающий решение застройщика";
		КонецЕсли;
		
		Элементы.ОткрытьОснованиеЗаключенияДоговора.Видимость = Ложь;
		Элементы.УдалитьОснованиеЗаключенияДоговора.Видимость = Ложь;
	Иначе
		Элементы.ОснованиеЗаключенияДоговораСсылка.Заголовок = Форма.НаименованиеОснованияЗаключенияДоговора;
		Элементы.ОткрытьОснованиеЗаключенияДоговора.Видимость = Истина;
		Элементы.УдалитьОснованиеЗаключенияДоговора.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьНадписьОснованияЗаключенияДоговора()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает надпись гиперссылки с договором управления.
Процедура УстановитьНадписьДоговораУправления(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ДоговорУправления = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
		Элементы.ДоговорУправленияСсылка.Заголовок  = "Выбрать файл с договором управления зданием.";
		Элементы.ОткрытьДоговорУправления.Видимость = Ложь;
		Элементы.УдалитьДоговорУправления.Видимость = Ложь;
	Иначе
		Элементы.ДоговорУправленияСсылка.Заголовок  = Форма.НаименованиеДоговораУправления;
		Элементы.ОткрытьДоговорУправления.Видимость = Истина;
		Элементы.УдалитьДоговорУправления.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьНадписьДоговораУправления()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов, соответствующих второй стороне договора.
Процедура УстановитьВидимостьВторойСтороныДоговора(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидВторойСтороныДоговора = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВторойСтороныУправленияДомами.СобственникиПомещений") Тогда
		Элементы.ВтораяСторонаДоговораКонтрагент.Видимость   = Ложь;
		Элементы.ВтораяСторонаДоговораСобственники.Видимость = Истина;
		Элементы.ПереченьСобственниковПояснение.Видимость    = Истина;
	Иначе
		Элементы.ВтораяСторонаДоговораКонтрагент.Видимость   = Истина;
		Элементы.ВтораяСторонаДоговораСобственники.Видимость = Ложь;
		Элементы.ПереченьСобственниковПояснение.Видимость    = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьВторойСтороныДоговора()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает поясняющую надпись для поля ввода с числом выставления квитанций.
Процедура УстановитьНадписьЧислоВыставленияКвитанций(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ПериодВыставленияКвитанцийЧисло = 31 Тогда
		Элементы.ПоследнееЧислоМесяцаНадпись.Заголовок = "(последнее число месяца)";
	Иначе
		Элементы.ПоследнееЧислоМесяцаНадпись.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры // УстановитьНадписьЧислоВыставленияКвитанций()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает поясняющую надпись для поля ввода с числом подачи показаний счетчика.
Процедура УстановитьНадписьЧислоПодачиПоказанийСчетчиков(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ПериодПодачиПоказанийПоСчетчикамКонец = 31 Тогда
		Элементы.ПоследнееЧислоМесяцаСчетчики.Заголовок = "(последнее число месяца)";
	Иначе
		Элементы.ПоследнееЧислоМесяцаСчетчики.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры // УстановитьНадписьЧислоВыставленияКвитанций()


////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
// Заполняет ТЧ с коммунальными услугами значениями по умолчанию.
Процедура ЗаполнитьТаблицуКоммунальныхУслуг()
	
	ПереченьКУ = Новый Массив;
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Отопление);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ГорячееВодоснабжение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ХолодноеВодоснабжение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Водоотведение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Электроснабжение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Газоснабжение);
	
	Для Каждого КоммунальнаяУслуга Из ПереченьКУ Цикл
		НоваяСтрока = Объект.ПереченьКоммунальныхУслуг.Добавить();
		НоваяСтрока.Услуга = КоммунальнаяУслуга;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуКоммунальныхУслуг()

&НаКлиенте
// Открывает текущий файл.
//
// Параметры:
//  ПутьКФайлу - Строка - путь к текущему файлу.
//
Процедура ОткрытьФайл(ПутьКФайлу)
	
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(ПутьКФайлу);
	
КонецПроцедуры //ОткрытьФайл()

&НаСервере
// Помечает на удаление все дополнительные соглашения, присоединенные к текущему элементу справочника.
Процедура УдалитьДополнительныеСоглашения()
	
	Для Каждого СтрокаТаблицы Из Объект.ДополнительныеСоглашения Цикл
		ПометитьНаУдалениеНаСервере(СтрокаТаблицы.ДополнительноеСоглашениеФайл);
	КонецЦикла;
	
КонецПроцедуры // УдалитьДополнительныеСоглашения()

&НаКлиенте
// Удаляет присоединенный к элементу справочника файл.
//
// Параметры:
//  ТипФайла - Строка - тип файла, который надо удалить.
//
Процедура УдалитьПрисоединенныйФайл(ТипФайла)
	
	Если ТипФайла = "Основание договора" Тогда
		Если Объект.ОснованиеЗаключенияДоговора = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
			Возврат;
		КонецЕсли;
		
		ФайлБуффер = Объект.ОснованиеЗаключенияДоговора;
		Объект.ОснованиеЗаключенияДоговора = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка");
		
		УстановитьНадписьОснованияЗаключенияДоговора(ЭтаФорма);
	Иначе
		Если Объект.ДоговорУправления = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка") Тогда
			Возврат;
		КонецЕсли;
		
		ФайлБуффер = Объект.ДоговорУправления;
		Объект.ДоговорУправления = ПредопределенноеЗначение("Справочник.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка");
		
		УстановитьНадписьДоговораУправления(ЭтаФорма);
	КонецЕсли;
	
	ПометитьНаУдалениеНаСервере(ФайлБуффер);
	
КонецПроцедуры // УдалитьПрисоединенныйФайл()

&НаСервереБезКонтекста
// Помечает на удаление присоединенный файл.
//
// Параметры:
//  ФайлБуффер - СправочникСсылка.УПЖКХ_ПрисоединенныеФайлы - файл, который надо пометить на удаление.
Процедура ПометитьНаУдалениеНаСервере(ТекФайл)
	
	Если ТекФайл = Справочники.УПЖКХ_ПрисоединенныеФайлы.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ТекФайлОбъект = ТекФайл.ПолучитьОбъект();
	ТекФайлОбъект.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры // ПометитьНаУдалениеНаСервере()

&НаКлиенте
// Открывает окно выбора файла и присоединяет выбранный файл к элементу справочника.
//
// Параметры:
//  ТипФайла - Строка - тип файла, который надо выбрать.
//
Процедура ВыбратьИСохранитьФайл(ВыборДоговораУправления = Ложь, ВыборДопСоглашения = Ложь, СтрокаТаблицы = Неопределено)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	ДополнительныеПараметры = Новый Структура("ВыборДоговораУправления, ВыборДопСоглашения, СтрокаТаблицы",
												ВыборДоговораУправления, ВыборДопСоглашения, СтрокаТаблицы);
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыбратьИСохранитьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИСохранитьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ВыборДоговораУправления = ДополнительныеПараметры.ВыборДоговораУправления;
	ВыборДопСоглашения = ДополнительныеПараметры.ВыборДопСоглашения;
	СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ВыбранныйФайл = ВыбранныеФайлы[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ВыбранныйФайл);
	
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ПрисоединенныйФайл = ПолучитьПрисоединенныйФайл(Объект.Ссылка, ВыбранныйФайл, АдресВременногоХранилищаФайла);
	
	Если ПрисоединенныйФайл = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить файл. Возможно, выбран файл неверного формата.");
		
		Возврат;
	КонецЕсли;
	
	Если ВыборДопСоглашения Тогда
		СтрокаТаблицы.ДополнительноеСоглашениеПредставление = ВыбранныйФайл;
		СтрокаТаблицы.ДополнительноеСоглашениеФайл          = ПрисоединенныйФайл;
	Иначе
		Если ВыборДоговораУправления Тогда
			НаименованиеДоговораУправления = ВыбранныйФайл;
			Объект.ДоговорУправления       = ПрисоединенныйФайл;
			
			УстановитьНадписьДоговораУправления(ЭтаФорма);
		Иначе
			НаименованиеОснованияЗаключенияДоговора = ВыбранныйФайл;
			Объект.ОснованиеЗаключенияДоговора      = ПрисоединенныйФайл;
			
			УстановитьНадписьОснованияЗаключенияДоговора(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыбратьИСохранитьФайл()

&НаСервереБезКонтекста
// Вызывает типовые механизмы по формированию присоединенного файла.
//
// Параметры:
//  Ссылка - СправочникСсылка.УПЖКХ_ДоговорыУправленияДомами - ссылка на текущий элемент справочника
//  ВыбранныйФайл - Строка - путь к выбранному файлу
//  АдресВременногоХранилищаФайла - Строка - адрес файла во временном хранилище.
//
// Возвращаемое значение:
//  СправочникСсылка.УПЖКХ_ПрисоединенныеФайлы.
//
Функция ПолучитьПрисоединенныйФайл(Ссылка, ВыбранныйФайл, АдресВременногоХранилищаФайла)
	
	ПозицияТочкиРасширения = 0;
	
	Если Сред(ВыбранныйФайл, СтрДлина(ВыбранныйФайл) - 3, 1) = "." Тогда
		ПозицияТочкиРасширения = 3;
	ИначеЕсли Сред(ВыбранныйФайл, СтрДлина(ВыбранныйФайл) - 4, 1) = "." Тогда
		ПозицияТочкиРасширения = 4;
	КонецЕсли;
	
	Если ПозицияТочкиРасширения = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Ссылка,
	ЛЕВ(ВыбранныйФайл, СтрДлина(ВыбранныйФайл) - ПозицияТочкиРасширения - 1),
	Прав(ВыбранныйФайл, ПозицияТочкиРасширения),
	,
	,
	АдресВременногоХранилищаФайла);
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции // ПолучитьПрисоединенныйФайл()

&НаКлиенте
// Процедура-обработка результата вопроса, который вызывается при изменении управляемого объекта.
//
// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеПараметры - Структура.
//
Процедура ВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры //ВопросЗавершение()

&НаКлиенте
// Очищает данные документа.
Процедура ОчиститьДанныеДокумента()
	
	УдалитьДополнительныеСоглашения();
	
	Объект.УправляющаяОрганизация                 = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Объект.ВтораяСторонаДоговораКонтрагент        = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.ПериодВыставленияКвитанцийТекущийМесяц = Истина;
	Объект.ПериодВыставленияКвитанцийЧисло        = 1;
	Объект.ПериодПодачиПоказанийПоСчетчикамНачало = 1;
	Объект.ПериодПодачиПоказанийПоСчетчикамКонец  = 25;
	Объект.ПереченьКоммунальныхУслуг.Очистить();
	Объект.ПереченьДополнительныхУслуг.Очистить();
	Объект.ВтораяСторонаДоговораСобственники.Очистить();
	Объект.ДополнительныеСоглашения.Очистить();
	
	УдалитьПрисоединенныйФайл("Основание договора");
	УдалитьПрисоединенныйФайл("Договор управления");
	
КонецПроцедуры // ОчиститьДанныеДокумента()

#КонецОбласти
