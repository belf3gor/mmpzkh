#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания; 

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.ВидыОплатОрганизаций);
	ИспользоватьОтложенноеПроведение = ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение");
	
	Если ИспользоватьОтложенноеПроведение И МожноРедактировать Тогда
		// При пометке на удаление элемента справочника может запуститься фоновое задание для переключения режима проведения.
		// Поскольку узнать его идентификатор из формы списка нельзя, требуется запомнить список фоновых заданий,
		// которые были запущены перед удалением, а затем сравнить с ним список заданий, запущенных после удаления.
		// Если в списках будут отличия, значит, запущено новое задание, и надо ждать его окончания.
		ФоновыеЗаданияПереключениеОтложенногоПроведения = Справочники.ВидыОплатОрганизаций.ИдентификаторыЗаданийПереключениеОтложенногоПроведения();
	КонецЕсли;
	
	Элементы.Контрагент.Видимость = ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)

	Если НЕ ИспользоватьОтложенноеПроведение Тогда
		Возврат;
	КонецЕсли;

	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	ИдентификаторЗадания = Неопределено;

	РезультатВыполнения = НайтиФоновоеЗаданиеПереключениеОтложенногоПроведения();
	
	Если НЕ ЗначениеЗаполнено(РезультатВыполнения.ИдентификаторЗадания) Тогда
		// Новое задание не было запущено.
		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбщегоНазначенияБПВызовСервера.ОбработатьЗавершениеПереключенияОтложенногоПроведения(
			РезультатВыполнения.ИдентификаторЗадания);
	Иначе
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ФормаДлительнойОперации = ПроведениеКлиент.ОткрытьФормуДлительнойОперации(
			ИдентификаторЗадания, РезультатВыполнения.НаименованиеФоновогоЗадания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Родитель", Родитель);
	
	Если Копирование Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение[0].Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	ТипОплатыДоступныеЗначения = ПолучитьДоступныеЗначенияТипаОплаты();
	Если ТипОплатыДоступныеЗначения.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ТипОплатыДоступныеЗначения", ТипОплатыДоступныеЗначения)
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Если Элементы.Список.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущаяСтрока);
	
	ТипОплатыДоступныеЗначения = ПолучитьДоступныеЗначенияТипаОплаты();
	Если ТипОплатыДоступныеЗначения.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ТипОплатыДоступныеЗначения", ТипОплатыДоступныеЗначения)
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВидыОплатОрганизаций.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьДоступныеЗначенияТипаОплаты()

	ТипОплатыДоступныеЗначения = Новый Массив;
	
	Для каждого ЭлементОтбора Из Список.Отбор.Элементы Цикл
	
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка(ЭлементОтбора.ЛевоеЗначение) <> "ТипОплаты" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			ТипОплатыДоступныеЗначения.Добавить(ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Для каждого ЭлементСпискаЗначений Из ЭлементОтбора.ПравоеЗначение Цикл
				ТипОплатыДоступныеЗначения.Добавить(ЭлементСпискаЗначений.Значение);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Возврат ТипОплатыДоступныеЗначения;

КонецФункции

&НаСервере
Функция НайтиФоновоеЗаданиеПереключениеОтложенногоПроведения()

	Возврат Справочники.ВидыОплатОрганизаций.НайтиФоновоеЗаданиеПереключениеОтложенногоПроведения(ЭтотОбъект);

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ОбщегоНазначенияБПВызовСервера.ОбработатьЗавершениеПереключенияОтложенногоПроведения(ИдентификаторЗадания);
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти