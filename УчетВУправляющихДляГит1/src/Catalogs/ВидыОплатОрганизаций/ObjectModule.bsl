#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоГруппа И ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
			СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли НЕ ЭтоГруппа И НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") 
		И НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("Владелец", Контрагент);
		ПараметрыДоговора.Вставить("Организация", Организация);
		ПараметрыДоговора.Вставить("ВидДоговора", Справочники.ВидыОплатОрганизаций.ВидыДоговоровПоТипуОплаты(ТипОплаты)[0]);
		
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если НЕ РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			ДоговорКонтрагента,
			ПараметрыДоговора.Владелец,
			ПараметрыДоговора.Организация,
			ПараметрыДоговора.ВидДоговора) Тогда
			
			ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
			ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета()
		И НЕ ЗначениеЗаполнено(СчетУчетаРасчетов) Тогда
		СчетУчетаРасчетов = Справочники.ВидыОплатОрганизаций.СчетУчетаРасчетовПоУмолчанию(ТипОплаты);
	КонецЕсли;
	
	ВыполнитьПроверкуКлючевыхРеквизитов(Отказ);
	
	Если НЕ Отказ И НЕ ЭтоГруппа Тогда
		СброситьТипОплатыПриУстановкеПометкиУдаленияУЭлементаЭквайринга();
		
		КоличествоСтрок = КомиссияБанка.Количество();
		Если ПроцентБанковскойКомиссии > 0 ИЛИ КоличествоСтрок > 0 Тогда
			Если КоличествоСтрок = 0 Тогда
				КомиссияБанка.Добавить().ПроцентБанковскойКомиссии = ПроцентБанковскойКомиссии;
			ИначеЕсли КоличествоСтрок = 1 Тогда
				Если ПроцентБанковскойКомиссии = 0 Тогда
					КомиссияБанка.Очистить();
				Иначе
					КомиссияБанка[0].ПроцентБанковскойКомиссии = ПроцентБанковскойКомиссии;
				КонецЕсли;
			Иначе
				ПроцентБанковскойКомиссии = КомиссияБанка[0].ПроцентБанковскойКомиссии;
			КонецЕсли;
		КонецЕсли;
		
		ДействияСОтложеннымПроведением = ОпределитьДействияСРежимомОтложенногоПроведенияПослеЗаписи();
		ДополнительныеСвойства.Вставить("ДействияСОтложеннымПроведением", ДействияСОтложеннымПроведением);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьИзФормыЭлемента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ЗаписьИзФормыЭлемента", Ложь);
	
	Если ЗаписьИзФормыЭлемента Тогда
		// Если запись осуществляется из формы элемента, то фоновые задания вызываются
		// из нее же для возможности ожидания их выполнения.
		Возврат;
	КонецЕсли;
	
	ДействияСОтложеннымПроведением = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ДействияСОтложеннымПроведением");
	
	Если ДействияСОтложеннымПроведением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.НачатьПереключениеОтложенногоПроведения(
		ДействияСОтложеннымПроведением.Включить,
		ДействияСОтложеннымПроведением.Отключить,
		Неопределено);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЭтоГруппа Тогда
		
		МассивНепроверяемыхРеквизитов = Новый Массив;
		
		Если ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Организация");
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетов");
		КонецЕсли;
		
		Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		
		Если НЕ СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СчетУчетаРасчетов");
		КонецЕсли;
		
		Если КомиссияБанка.Количество() > 1 Тогда
			ШаблонТекстаНезаполненноеПоле = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка", "Заполнение", "%1", "%2", НСтр("ru = 'Комиссия банка'"));
			ШаблонТекстаНекорректноЗаполненноеПоле = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Колонка", "Корректность", "%1", "%2", НСтр("ru = 'Комиссия банка'"));
			ПредыдущаяСумма = 0;
			СоответствиеСумм = Новый Соответствие;
			Для каждого СтрокаКомиссия Из КомиссияБанка Цикл
				Если СтрокаКомиссия.НомерСтроки > 1 Тогда
					Если СтрокаКомиссия.СуммаОперацийОт = 0 Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонТекстаНезаполненноеПоле, НСтр("ru = 'Сумма операций'"), СтрокаКомиссия.НомерСтроки);
						Поле = "КомиссияБанка[" + Формат((СтрокаКомиссия.НомерСтроки - 1), "ЧН=0; ЧГ=") + "].СуммаОперацийОт";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					ИначеЕсли СоответствиеСумм[СтрокаКомиссия.СуммаОперацийОт] <> Неопределено Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонТекстаНекорректноЗаполненноеПоле, НСтр("ru = 'Сумма операций'"), СтрокаКомиссия.НомерСтроки,,
							НСтр("ru = 'Комиссия для такой суммы операций уже указана. Введите другое значение.'"));
						Поле = "КомиссияБанка[" + Формат((СтрокаКомиссия.НомерСтроки - 1), "ЧН=0; ЧГ=") + "].СуммаОперацийОт";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					ИначеЕсли ПредыдущаяСумма > СтрокаКомиссия.СуммаОперацийОт Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонТекстаНекорректноЗаполненноеПоле, НСтр("ru = 'Сумма операций'"), СтрокаКомиссия.НомерСтроки,,
							НСтр("ru = 'Сумма операций должна быть больше чем в предыдущей строке. Введите другое значение.'"));
						Поле = "КомиссияБанка[" + Формат((СтрокаКомиссия.НомерСтроки - 1), "ЧН=0; ЧГ=") + "].СуммаОперацийОт";
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
					Иначе
						СоответствиеСумм.Вставить(СтрокаКомиссия.СуммаОперацийОт, СтрокаКомиссия.НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				ПредыдущаяСумма = СтрокаКомиссия.СуммаОперацийОт;
			КонецЦикла;
		КонецЕсли;
		
		// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		СчетУчетаРасчетов = Справочники.ВидыОплатОрганизаций.СчетУчетаРасчетовПоУмолчанию(ТипОплаты);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
		Иначе
			Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьПроверкуКлючевыхРеквизитов(Отказ)
	
	ПроверитьДублированиеПодарочногоСертификата(Отказ);
	
	Если Отказ Или ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	// Получим значения реквизитов элемента из информационной базы
	РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ТипОплаты, Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов, Организация, ПометкаУдаления");
	
	Если ПометкаУдаления <> РеквизитыСсылки.ПометкаУдаления тогда
		//В случае установки или снятия пометки удаления не производить проверку
		Возврат;
	КонецЕсли;
	
	// Проверим, можно ли изменять реквизиты элемента
	Если ИзменениеКлючевыхРеквизитовЗапрещено(РеквизитыСсылки) Тогда
		
		СписокРеквизитов = Новый Структура("ТипОплаты, Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов, Организация",
					НСтр("ru = 'Способ оплаты'"),
					НСтр("ru = 'Контрагент'"),
					НСтр("ru = 'Договор контрагента'"),
					НСтр("ru = 'Счет учета расчетов'"),
					НСтр("ru = 'Организация'"));
		ТекстСообщения = НСтр("ru = 'Существуют документы, проведенные по виду оплаты %1.
			|Реквизит %2 не может быть изменен.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Наименование);
		Для Каждого КлючИЗначение Из СписокРеквизитов Цикл
			СообщитьОНекорректномРеквизите(КлючИЗначение.Ключ, КлючИЗначение.Значение, ТекстСообщения, РеквизитыСсылки, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДублированиеПодарочногоСертификата(Отказ)
	
	Если ЭтоГруппа
		Или (ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСобственный
			И ТипОплаты <> Перечисления.ТипыОплат.ПодарочныйСертификатСторонний) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если Не ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Контрагент = &Контрагент
	|	И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ВидыОплатОрганизаций.Организация = &Организация
	|	И (ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный)
	|			ИЛИ ВидыОплатОрганизаций.ТипОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))
	|	И &ОтборПоСсылке";
	
	ТекстОтборПоСсылке = ?(ЭтоНовый(), "ИСТИНА", "НЕ ВидыОплатОрганизаций.Ссылка = &ТекущаяСсылка");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСсылке", ТекстОтборПоСсылке);
	
	ВыборкаДублей = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДублей.Следующий() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подарочный сертификат с такой аналитикой расчетов (контрагент, договор)
			|уже зарегистрирован (см. ""%1"")'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ВыборкаДублей.Ссылка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменениеКлючевыхРеквизитовЗапрещено(РеквизитыСсылки)
	
	Если Контрагент <> РеквизитыСсылки.Контрагент
		Или ДоговорКонтрагента <> РеквизитыСсылки.ДоговорКонтрагента
		Или СчетУчетаРасчетов <> РеквизитыСсылки.СчетУчетаРасчетов
		Или Организация <> РеквизитыСсылки.Организация
		Или ТипОплаты <> РеквизитыСсылки.ТипОплаты Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Элемент", Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыПоВидуОплаты.Ссылка КАК ДокументПоВидуОплаты
		|ИЗ
		|	КритерийОтбора.ДокументыПоВидуОплаты(&Элемент) КАК ДокументыПоВидуОплаты
		|ГДЕ
		|	ДокументыПоВидуОплаты.Ссылка.Проведен";
		
		Возврат Не Запрос.Выполнить().Пустой();
		
	Иначе
		//ключевые реквизиты не менялись
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СообщитьОНекорректномРеквизите(ИмяРеквизита, СинонимРеквизита, ШаблонСообщения, РеквизитыСсылки, Отказ)
	
	Если ЭтотОбъект[ИмяРеквизита] <> РеквизитыСсылки[ИмяРеквизита] Тогда
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%2", СинонимРеквизита);
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
			СинонимРеквизита, , , ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ИмяРеквизита, "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьТипОплатыПриУстановкеПометкиУдаленияУЭлементаЭквайринга()
	
	// Когда в базе включено отложенное проведение и сейчас устанавливается пометка
	// удаления у вида оплат, связанных с эквайрингом, то если на него нет других элементов и ссылок в других объектах, 
	// то надо включить режим отложенного проведения.
	// Чтобы этот элемент случайно не начали снова использовать в документах, очистим у него тип оплаты.
	// Если пользователю в будущем потребуется использовать именно этот вид оплаты, то он должен будет
	// сначала заполнить тип оплаты, тогда проведем анализ необходимости переключения режима снова.
	
	Если ЭтоНовый() ИЛИ ЭтоГруппа ИЛИ НЕ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОплатЭквайринг = ТипыОплатЭквайринг();
	
	Если ТипыОплатЭквайринг.Найти(ТипОплаты) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьСсылкиНаОбъект() Тогда
		Возврат;
	КонецЕсли;
	
	// На текущий вид оплат никто не ссылается, сбросим у него реквизит ТипОплаты.
	ТипОплаты = Перечисления.ТипыОплат.ПустаяСсылка();
	
КонецПроцедуры

// Возвращает признак действия, которое необходимо выполнить для переключения
// режима отложенного проведения для организации после записи вида оплаты.
//
// Возвращаемое значение:
//	Неопределено или Структура - содержит ключи:
//		* Включить 	- Массив - Массив организаций, для которых надо включить отложенное проведение
//		* Отключить - Массив - Массив организаций, для которых надо отключить отложенное проведение
//
Функция ОпределитьДействияСРежимомОтложенногоПроведенияПослеЗаписи()
	
	// Для организаций на УСН или патентной системе отложенное проведение
	// не может применяться при наличии операций оплаты платежной картой или банковским кредитом.
	// Поэтому при добавлении первого вида оплаты с типом "платежная карта" или "банковский кредит"
	// отложенное проведение для организации надо отключать, а при удалении последнего - включать.
	// 
	// Для организаций на общей системе налогообложения наличие эквайринга не влияет на режим проведения.
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		// Отложенное проведение в базе выключено, ничего менять не требуется.
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Включить",  Новый Массив);
	Результат.Вставить("Отключить", Новый Массив);
	
	ТипыОплатЭквайринг = ТипыОплатЭквайринг();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяСсылка",      Ссылка);
	Запрос.УстановитьПараметр("ТекущаяОрганизация", Организация);
	Запрос.УстановитьПараметр("ТипыОплатЭквайринг", ТипыОплатЭквайринг);
	
	НомераТаблиц = Новый Структура();
	НомераТаблиц.Вставить("ВТ_ДанныеПередЗаписью",               НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СтараяОрганизация",                   НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДругиеВидыОплатыПоСтаройОрганизации", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДругиеВидыОплатыПоНовойОрганизации",  НомераТаблиц.Количество());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОплатыОрганизацийПередЗаписью.Организация
	|ПОМЕСТИТЬ ВТ_ДанныеПередЗаписью
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатыОрганизацийПередЗаписью
	|ГДЕ
	|	ВидыОплатыОрганизацийПередЗаписью.Ссылка = &ТекущаяСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеПередЗаписью.Организация
	|ИЗ
	|	ВТ_ДанныеПередЗаписью КАК ВТ_ДанныеПередЗаписью
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДругиеВидыОплатОрганизацийПередЗаписью.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ДругиеВидыОплатОрганизацийПередЗаписью
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеПередЗаписью КАК ВТ_ДанныеПередЗаписью
	|		ПО ДругиеВидыОплатОрганизацийПередЗаписью.Организация = ВТ_ДанныеПередЗаписью.Организация
	|			И (ДругиеВидыОплатОрганизацийПередЗаписью.Ссылка <> &ТекущаяСсылка)
	|			И (ДругиеВидыОплатОрганизацийПередЗаписью.ТипОплаты В (&ТипыОплатЭквайринг))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДругиеВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ДругиеВидыОплатОрганизаций
	|ГДЕ
	|	ДругиеВидыОплатОрганизаций.Ссылка <> &ТекущаяСсылка
	|	И ДругиеВидыОплатОрганизаций.Организация = &ТекущаяОрганизация
	|	И ДругиеВидыОплатОрганизаций.ТипОплаты В(&ТипыОплатЭквайринг)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСтараяОрганизация                = РезультатЗапроса[НомераТаблиц.СтараяОрганизация].Выбрать();
	НетДругихВидовОплатыПоСтаройОрганизации = РезультатЗапроса[НомераТаблиц.ДругиеВидыОплатыПоСтаройОрганизации].Пустой();
	НетДругихВидовОплатыПоНовойОрганизации  = РезультатЗапроса[НомераТаблиц.ДругиеВидыОплатыПоНовойОрганизации].Пустой();
	
	Если ВыборкаСтараяОрганизация.Следующий() Тогда
		СтараяОрганизация = ВыборкаСтараяОрганизация.Организация;
	Иначе
		СтараяОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Проверяем по организации, которая была до изменения.
	Если ЗначениеЗаполнено(СтараяОрганизация)
		И СтараяОрганизация <> Организация
		И НетДругихВидовОплатыПоСтаройОрганизации Тогда
		
		ОтложенноеПроведениеСЭквайрингом  = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(СтараяОрганизация, ТекущаяДатаСеанса);
		ОтложенноеПроведениеБезЭквайринга = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(СтараяОрганизация, ТекущаяДатаСеанса, Ложь);
		
		Если НЕ ОтложенноеПроведениеСЭквайрингом И ОтложенноеПроведениеБезЭквайринга Тогда
			// По организации до изменения не останется ни одного вида оплат с эквайрингом,
			// и по всем остальным параметрам для нее можно включить отложенное проведение.
			Результат.Включить.Добавить(СтараяОрганизация);
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем по организации, которая будет после изменения.
	Если ЗначениеЗаполнено(Организация) 
		И НетДругихВидовОплатыПоНовойОрганизации Тогда
		
		ПрименяетсяУСНДоходы = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ТекущаяДатаСеанса);
		ПрименяетсяУСНПатент = УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущаяДатаСеанса);
		
		// Наличие эквайринга влияет только при применении УСН или патента.
		Если ПрименяетсяУСНДоходы ИЛИ ПрименяетсяУСНПатент Тогда
			
			ИспользуетсяОтложенноеПроведение  = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, ТекущаяДатаСеанса);
			ОтложенноеПроведениеБезЭквайринга = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Организация, ТекущаяДатаСеанса, Ложь);
			
			Если ТипыОплатЭквайринг.Найти(ТипОплаты) <> Неопределено Тогда
				// Для элемента установлен тип оплаты, связанный с эквайрингом.
				
				Если ИспользуетсяОтложенноеПроведение Тогда
					// После записи появляется эквайринг, необходимо отключить отложенное проведение.
					Результат.Отключить.Добавить(Организация);
				КонецЕсли;
				
			Иначе
				// Для элемента установлен тип оплаты, не связанный с эквайрингом.
				Если НЕ ИспользуетсяОтложенноеПроведение И ОтложенноеПроведениеБезЭквайринга Тогда
					// После записи не будет эквайринга, необходимо включить отложенное проведение.
					Результат.Включить.Добавить(Организация);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипыОплатЭквайринг()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ТипыОплат.БанковскийКредит);
	Результат.Добавить(Перечисления.ТипыОплат.ПлатежнаяКарта);
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если на текущий вид оплаты есть ссылка хотя бы в одном объекте.
//
Функция ЕстьСсылкиНаОбъект()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяСсылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК Док
	|ГДЕ
	|	Док.ВидОплаты = &ТекущаяСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.ПодарочныеСертификаты КАК Док
	|ГДЕ
	|	Док.ВидОплаты = &ТекущаяСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Оплата КАК Док
	|ГДЕ
	|	Док.ВидОплаты = &ТекущаяСсылка";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли
