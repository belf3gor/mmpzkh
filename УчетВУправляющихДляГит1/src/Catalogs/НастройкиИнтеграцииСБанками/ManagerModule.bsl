#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейсБТС

// Возвращает двоичные данныеобъекта, которые будут переданы в составе zip-архива во внешнюю учетную систему. 
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных
//  ИдентификаторОбъекта - Строка(50) - идентификатор объекта. 
//  Обработчик - Строка(50) - обработчик данных объекта. 
// 
// Возвращаемое значение:
//   - ДвоичныеДанные - данные объекта. 
//
Функция ДанныеОбъекта(УчетнаяСистема, ИдентификаторОбъекта, Обработчик) Экспорт
	
	Возврат РегистрыСведений.ДокументыИнтеграцииСБанком.ДанныеОбъектаПоИдентификатору(
		УчетнаяСистема, ИдентификаторОбъекта, Обработчик);
	
КонецФункции

// Предназначен для обработки подтверждений, полученных от учетной системы после принятия ей файлов данных. 
// В ней можно определить действия с интегрируемыми объектами, по которым пришли подтверждения.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных
//  Подтверждения - Соответствие
//                  * Ключ - Строка - это идентификатор объекта
//                  * Значение - Структура
//                      * Версия - Строка - версия объекта
//                      * КодВозврата - Число - код возврата, определяется во внешней учетной системе.
//                        Рекомендуемые коды возврата см. в процедуре ИнтеграцияОбъектовОбластейДанныхПовтИсп.КодыВозврата
//                      * Ошибка - Булево - признак ошибки (по умолчанию - Ложь)
//                      * СообщениеОбОшибке - Строка - поднобности ошибки (по умолчанию не заполнено)
//  СтандартнаяОбработка - Булево - признак стандартной обработки. Если Ложь, то у обработанные объекты 
//                       не будут удалены из списка объектов к отправке.
//
Процедура ОбработатьПодтверждения(УчетнаяСистема, Подтверждения, СтандартнаяОбработка) Экспорт
	
	Для Каждого Подтверждение Из Подтверждения Цикл
		
		Если Подтверждение.Значение.Ошибка Тогда
			РегистрыСведений.ДокументыИнтеграцииСБанком.УстановитьСостояниеОшибкаПередачиВБанк(
				УчетнаяСистема, Подтверждение.Ключ, Подтверждение.Значение.СообщениеОбОшибке);
		Иначе
			РегистрыСведений.ДокументыИнтеграцииСБанком.УстановитьСостояниеДокументПереданВБанк(
				УчетнаяСистема, Подтверждение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для обработки даных объектов, получаемых от внешней учетной системы.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  ИдентификаторОбъекта - Строка(50) - идентификатор объекта для обработки
//  ПотокДанных - ФайловыйПоток, ПотокВПамяти - данные объекта
//  Обработчик - Строка - идентификатор обработчика
//  КодВозврата - Число - код возврата обработчика (по умолчанию - 10200)
//  Ошибка - Булево - признак ошибки (по умолчанию - Ложь)
//  СообщениеОбОшибке - Строка - подробности ошибки (по умолчанию не заполнено).
//
Процедура ОбработатьДанные(УчетнаяСистема, ИдентификаторОбъекта, ПотокДанных, Обработчик, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ЗаблокироватьУчетнуюСистему(УчетнаяСистема) Тогда
		Попытка
			ВыполнитьОбработкуДанных(УчетнаяСистема, ИдентификаторОбъекта, ПотокДанных, Обработчик, КодВозврата, Ошибка, СообщениеОбОшибке);
		Исключение
			РазблокироватьУчетнуюСистему(УчетнаяСистема);
			ВызватьИсключение;
		КонецПопытки;
		РазблокироватьУчетнуюСистему(УчетнаяСистема);
	Иначе
		КодВозврата = 10504; // Gateway Timeout
		Ошибка = Истина;
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Время ожидания выполнения обработчика %1 истекло.'"), Обработчик);
		ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.НастройкиИнтеграцииСБанками,
			,
			СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для обработки устанавливаемых настроек учетной системы, 
// полученных от внешней учетной системы.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных 
//  ПотокДанных - ФайловыйПоток, ПотокВПамяти - данные настроек (передаются в формате json) 
//  КодВозврата - Число - код возврата обработчика установки настроек (по умолчанию - 10200).
//  Ошибка - Булево - признак ошибки (по умолчанию - Ложь) 
//  СообщениеОбОшибке - Строка - подробности ошибки (по умолчанию не заполнено).
//  СтандартнаяОбработка - Булево - признак стандартной обработки. 
//
Процедура УстановитьНастройки(УчетнаяСистема, ПотокДанных, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Объект = УчетнаяСистема.ПолучитьОбъект();
	Данные = СтруктураИзПотокаJSON(ПотокДанных);
	
	Свойство = "id";
	Если Данные.Свойство(Свойство) Тогда
		Если ТипЗнч(Данные[Свойство]) = Тип("Строка") Тогда
			Банк = РаботаСБанкамиБП.НайтиБанк(Данные[Свойство]);
			ДобавитьБанк(Объект, Банк);
		Иначе
			СписокБиков = Данные[Свойство];
			Для Каждого БИК Из СписокБиков Цикл
				Банк = РаботаСБанкамиБП.НайтиБанк(БИК);
				ДобавитьБанк(Объект, Банк);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Банки.Количество() > 0 Тогда
		Объект.Наименование = Строка(Объект.Банки[0].Банк);
	КонецЕсли;
	
	Свойство = "dbo_url";
	Если Данные.Свойство(Свойство) Тогда
		Объект.ГиперссылкаДляПереходаКСпискуПлатежей = Данные[Свойство];
	КонецЕсли;
	
	Свойство = "app_title";
	Если Данные.Свойство(Свойство) Тогда
		Константы.ЗаголовокСистемы.Установить(Данные[Свойство]);
	КонецЕсли;
	
	Объект.Записать();
	
	УстановитьПраваПользователяИнтеграции(УчетнаяСистема);
	
КонецПроцедуры

// Обработчик выполнения команды учетной системы.
//
// Параметры:
//  УчетнаяСистема - ОпределяемыйТип.УчетныеСистемыИнтеграцииОбластейДанных - учетная система.
//  ПотокДанныхКоманды - ФайловыйПоток, ПотокВПамяти - данные команды. 
//  КодВозврата - Число - код возврата обработчика (по умолчанию - 10200)
//  Ошибка - Булево - признак ошибки (по умолчанию - Ложь)
//  СообщениеОбОшибке - Строка - подробности ошибки (по умолчанию не заполнено).
// Возвращаемое значение:
//   - Структура - результат выполнения команды, информация о созданном или измененном объекте.
//      * ИдентификаторОбъекта - Строка - идентификатор объекта.
//      * Обработчик - Строка - идентификатор обработчика.
//      * Данные - ДвоичныеДанные - данные объекта (не обязательно), если не переданы, будут запрошены при отправке.
//
Функция ВыполнитьКоманду(УчетнаяСистема, ПотокДанныхКоманды, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	ДанныеКоманды = СтруктураИзПотокаJSON(ПотокДанныхКоманды, "date");
	
	ПроверитьКорректностьДанныхКоманды(ДанныеКоманды, Ошибка, СообщениеОбОшибке);
	
	РезультатВыполнения = ИнтеграцияОбъектовОбластейДанных.НовыйРезультатыВыполненияКоманды();
	
	Если Не Ошибка Тогда
		ВыполнитьКомандуУчетнойСистемы(УчетнаяСистема, ДанныеКоманды, РезультатВыполнения, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
	Если Ошибка Тогда
		КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
		КодВозврата = КодыСостояний.ОшибкаДанных;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает идентификатор типа учетной системы для определения менеджера объекта, 
// если ссылки на учетную систему с пользователем обратившейся внешней системы еще не существует.
//
Функция ТипУчетнойСистемы() Экспорт
	
	Возврат "bank";
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает Истина, если в базе есть хотя бы одна действующая настройка интеграции.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ИнтеграцияВИнформационнойБазеВключена() Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиИнтеграцииСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиИнтеграцииСБанками КАК НастройкиИнтеграцииСБанками
	|ГДЕ
	|	НЕ НастройкиИнтеграцииСБанками.ПометкаУдаления";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает Истина, если для организации есть хотя бы одна действующая настройка интеграции.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ИнтеграцияОрганизацииВключена(Организация) Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчетаИнтеграцииСБанком.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|ГДЕ
	|	БанковскиеСчетаИнтеграцииСБанком.Организация = &Организация";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает Истина, если для расчетного счета включена интеграция.
//
// Параметры:
//  СчетОрганизации	 - СправочникСсылка.БанковскиеСчета - Ссылка на расчетный счет организации.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ИнтеграцияВключена(СчетОрганизации) Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетОрганизации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(НастройкаИнтеграцииБанковскогоСчета(СчетОрганизации));
	
КонецФункции

// Возвращает Истина, если в информационной базе есть хотя бы один расчетный счет, для которого не включена интеграция.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЕстьРасчетныеСчетаБезИнтеграции() Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|		ПО БанковскиеСчета.Ссылка = БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Организации)
	|	И БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет ЕСТЬ NULL";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает массив банковских счетов организации, открытых в банках, с которыми настроена интеграция.
//
// Возвращаемое значение:
//   Массив - массив банковских счетов организаций.
//
Функция БанковскиеСчетаОрганизацииВРежимеИнтеграции(Организация) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат МассивСчетов;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|		ПО БанковскиеСчета.Ссылка = БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

// Возвращает массив всех банковских счетов, открытых в банках, с которыми настроена интеграция.
//
// Возвращаемое значение:
//   Массив - массив банковских счетов.
//
Функция ВсеБанковскиеСчетаВРежимеИнтеграции() Экспорт
	
	МассивСчетов = Новый Массив;
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат МассивСчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|		ПО БанковскиеСчета.Ссылка = БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет
	|ГДЕ
	|	НЕ БанковскиеСчета.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает массив настроек интеграции для организации, которые связаны с рег.отчетностью.
// Параметры:
//   Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Массив - массив настроек интеграции.
//
Функция НастройкиИнтеграцииСБанкомДляОбменаРегламентированнойОтчетностью(Организация) Экспорт
	
	НастройкиИнтеграции = Новый Массив;
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат НастройкиИнтеграции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БанковскиеСчетаИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции
		|ИЗ
		|	РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
		|ГДЕ
		|	БанковскиеСчетаИнтеграцииСБанком.Организация = &Организация
		|	И НЕ БанковскиеСчетаИнтеграцииСБанком.НастройкаИнтеграции.ПометкаУдаления
		|	И НЕ БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НастройкиИнтеграции.Добавить(Выборка.НастройкаИнтеграции);
	КонецЦикла;
	
	Возврат НастройкиИнтеграции;
	
КонецФункции

// Возвращает настройку интеграции для отправки регламентированной отчетности.
// Если настройки нет - возвращает Неопределено.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которого нужно определить интеграцию.
// 
// Возвращаемое значение:
//   - СправочникСсылка.НастройкиИнтеграцииСБанками, Неопределено
//
Функция НастройкаИнтеграцииРегламентированнойОтчетности(Организация) Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиИнтеграции = НастройкиИнтеграцииСБанкомДляОбменаРегламентированнойОтчетностью(Организация);
	Если НастройкиИнтеграции.Количество() > 1 Тогда
		ВызватьИсключение НСтр("ru = 'Настройка интеграции для обмена регламентированной отчетностью не определена.
			|Настроена интеграция с несколькими банками.'");
	КонецЕсли;
	
	Возврат НастройкиИнтеграции[0];
	
КонецФункции

// Возвращает настройку интеграции для банковского счета организации. Если настройки нет - возвращает Неопределено.
//
// Параметры:
//  Банк - СправочникСсылка.БанковскиеСчета - Ссылка на банковский счет, для которого нужно определить интеграцию.
// 
// Возвращаемое значение:
//   - СправочникСсылка.НастройкиИнтеграцииСБанками, Неопределено
//
Функция НастройкаИнтеграцииБанковскогоСчета(СчетОрганизации) Экспорт
	
	Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("БанковскийСчет", СчетОрганизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчетаИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции
	|ИЗ
	|	РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|ГДЕ
	|	БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет = &БанковскийСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НастройкаИнтеграции;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает настройку интеграции для банка по организации. Если настройки нет - возвращает Неопределено.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию, для которой нужно определить интеграцию.
//  Банк - СправочникСсылка.Банки - Ссылка на банк, для которого нужно определить интеграцию.
// 
// Возвращаемое значение:
//   - СправочникСсылка.НастройкиИнтеграцииСБанками, Неопределено
//
Функция НастройкаИнтеграцииОрганизацииСБанком(Организация, Банк) Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Банк", Банк);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчетаИнтеграцииСБанком.НастройкаИнтеграции КАК НастройкаИнтеграции
	|ИЗ
	|	РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчетаИнтеграцииСБанком.Организация = &Организация
	|	И БанковскиеСчета.Банк = &Банк";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НастройкаИнтеграции;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция АдресСервисаВыполненияКомандыИнтеграции() Экспорт
	
	ЧастиАдреса = Новый Массив;
	
	ЧастиАдреса.Добавить("hs/dt/storage");
	ЧастиАдреса.Добавить(ИнтеграцияОбъектовОбластейДанных.ИдентификаторХранилища());
	ЧастиАдреса.Добавить(ИнтеграцияОбъектовОбластейДанныхСловарь.КомандаВыполнить());
	
	Возврат СтрСоединить(ЧастиАдреса, "/");
	
КонецФункции

Функция ВходящиеНастройкиСозданияДекларации(Организация, ВидДекларации, Период) Экспорт
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("type", ВидДекларации);
	ПараметрыМетода.Вставить("organization", РеквизитыОрганизации);
	ПараметрыМетода.Вставить("date", Период);
	
	Настройки = Новый Структура;
	Настройки.Вставить("method", ИмяМетодаСозданияРегламентированногоОтчета());
	Настройки.Вставить("parameters", ПараметрыМетода);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает массив банковских счетов организации, открытых в банках, с которыми не настроена интеграция.
//
// Возвращаемое значение:
//   Массив - массив банковских счетов организаций.
//
Функция БанковскиеСчетаОрганизацииБезИнтеграции(Организация) Экспорт
	
	Если Не ОбщегоНазначенияБП.ИнтеграцияСБанкомДоступна() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТаблицаБанковскихСчетов = Справочники.БанковскиеСчета.БанковскиеСчетаОрганизации(
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	ВсеБанковскиеСчета = ТаблицаБанковскихСчетов.ВыгрузитьКолонку("Ссылка");
	
	// По счетам в банке, с которым настроена интеграция, операции вручную не вводятся,
	// поэтому удалим такие счета из массива доступных счетов.
	БанковскиеСчетаБезИнтеграции = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ВсеБанковскиеСчета, БанковскиеСчетаОрганизацииВРежимеИнтеграции(Организация));
	
	Возврат БанковскиеСчетаБезИнтеграции;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновлени

Процедура ОбновитьПраваПользователяИнтеграции() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииСБанками.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиИнтеграцииСБанками КАК НастройкиИнтеграцииСБанками";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УстановитьПраваПользователяИнтеграции(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереходНаНовыйИнтерфейсИнтеграцияСБанком() Экспорт
	Перем ИмяТекущегоПользователя;
	
	Если Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБП.УстановитьОпциюПоказыватьИнформационнуюПанель();
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если Не ПустаяСтрока(ТекущийПользователь.Имя) Тогда
		ИмяТекущегоПользователя = ТекущийПользователь.Имя;
	КонецЕсли;
	
	Для Каждого ИмяПользователя Из ОбщегоНазначенияБПВызовСервера.ПользователиДляИзмененияИнтерфейса() Цикл
		ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс(ИмяПользователя);
		Если ИмяТекущегоПользователя = ИмяПользователя Тогда
			НачальнаяСтраница = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиНачальнойСтраницы", "",, ИмяПользователя);
			ОбщегоНазначенияБП.СохранитьНастройкиНачальнойСтраницы(НачальнаяСтраница);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьОбработкуДанных(УчетнаяСистема, ИдентификаторОбъекта, ПотокДанных, Обработчик, КодВозврата, Ошибка, СообщениеОбОшибке)
	
	Если НРег(Обработчик) = "bank_account_statement_1c_txt" Тогда
		
		Обработки.КлиентБанк.ЗагрузкаБанковскойВыпискиИзСервиса(ПотокДанных, КодВозврата, СообщениеОбОшибке);
		КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
		Если КодВозврата <> КодыСостояний.Выполнено Тогда
			Ошибка = Истина;
		КонецЕсли;
		
		РезервноеКопированиеОбластейДанных.УстановитьФлагАктивностиПользователяВОбласти();
		
	ИначеЕсли НРег(Обработчик) = "base_data" Тогда
		
		ДанныеОрганизации = СтруктураИзПотокаJSON(ПотокДанных);
		
		ПроверитьКорректностьДанныхДляОрганизации(ДанныеОрганизации, Ошибка, СообщениеОбОшибке);
		
		Если Не Ошибка Тогда
			ПроверитьВозможностьВключенияРежимаИнтеграцииСБанком(ДанныеОрганизации, Ошибка, СообщениеОбОшибке);
		КонецЕсли;
		
		КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
		Если Не Ошибка Тогда
			СоздатьЗаполнитьОрганизацию(УчетнаяСистема, ДанныеОрганизации, КодВозврата, СообщениеОбОшибке);
			Если КодВозврата <> КодыСостояний.Выполнено Тогда
				Ошибка = Истина;
			КонецЕсли;
		Иначе
			КодВозврата = КодыСостояний.ОшибкаДанных;
		КонецЕсли;
		
	ИначеЕсли НРег(Обработчик) = "bank_accounts" Тогда
		
		ДанныеБанковскихСчетов = СтруктураИзПотокаJSON(ПотокДанных);
		
		ПроверитьКорректностьДанныхДляСчетов(ДанныеБанковскихСчетов, Ошибка, СообщениеОбОшибке);
		
		КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
		Если Не Ошибка Тогда
			СоздатьЗаполнитьБанковскиеСчета(УчетнаяСистема, ДанныеБанковскихСчетов, КодВозврата, СообщениеОбОшибке);
			Если КодВозврата <> КодыСостояний.Выполнено Тогда
				Ошибка = Истина;
			КонецЕсли;
		Иначе
			КодВозврата = КодыСостояний.ОшибкаДанных;
		КонецЕсли;
		
	ИначеЕсли НРег(Обработчик) = "initial_balances_bank_account_statement" Тогда
		
		ОстаткиПоРасчетнымСчетам = ОстаткиПоРасчетнымСчетамИзПотокаДанных(УчетнаяСистема, ПотокДанных, Ошибка, СообщениеОбОшибке);
		Если ОстаткиПоРасчетнымСчетам <> Неопределено И ОстаткиПоРасчетнымСчетам.Количество() > 0 И Не Ошибка Тогда
			ВвестиДокументыВводаНачальныхОстатков(ОстаткиПоРасчетнымСчетам, Ошибка, СообщениеОбОшибке);
		КонецЕсли;
		
		Если Ошибка Тогда
			КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
			КодВозврата = КодыСостояний.ОшибкаДанных;
		ИначеЕсли ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
			КодВозврата = КодыСостояний.ВыполненоСПредупреждениями;
		КонецЕсли;
		
	ИначеЕсли НРег(Обработчик) = "tax_return_status" Тогда
		
		Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Нельзя изменять статусы регламентированных отчетов, если включена 1С:Отчетность.'");
		КонецЕсли;
		
		Если Не Ошибка Тогда
			ДанныеОтчета = СтруктураИзПотокаJSON(ПотокДанных);
			ПроверитьКорректностьДанныхОтчета(ДанныеОтчета, Ошибка, СообщениеОбОшибке);
		КонецЕсли;
		
		Если Не Ошибка Тогда
			ИзменитьСтатусОтчета(УчетнаяСистема, ИдентификаторОбъекта, ДанныеОтчета, Ошибка, СообщениеОбОшибке);
		КонецЕсли;
		
		Если Ошибка Тогда
			КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
			КодВозврата = КодыСостояний.ОшибкаДанных;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураИзПотокаJSON(ПотокДанных, ПоляТипаДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ПотокДанных);
	Ответ = ПрочитатьJSON(ЧтениеJSON,, ПоляТипаДата, ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();
	
	Возврат Ответ;
	
КонецФункции

Процедура ДобавитьБанк(Объект, Банк)
	
	Если ЗначениеЗаполнено(Банк) Тогда
		БанкиОбъекта = Объект.Банки.НайтиСтроки(Новый Структура("Банк", Банк));
		Если БанкиОбъекта.Количество() = 0 Тогда
			Строка = Объект.Банки.Добавить();
			Строка.Банк = Банк;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьВидимостьЭлементов1СОтчетности() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоказыватьЭлементы1СОтчетности = Константы.Использовать1СОтчетностьПриИнтеграцииСБанком.Получить()
		Или Не ИнтеграцияВИнформационнойБазеВключена();
	
	Константы.ПоказыватьЭлементы1СОтчетности.Установить(ПоказыватьЭлементы1СОтчетности);
	
КонецФункции

#Область БлокировкаУчетнойСистемы

Функция ЗаблокироватьУчетнуюСистему(УчетнаяСистема)
	
	УчетнаяСистемаЗаблокирована = Ложь;
	
	Для НомерПопытки = 1 По КоличествоПовторовОжиданияОбработкиДанных() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(УчетнаяСистема);
			УчетнаяСистемаЗаблокирована = Истина;
			Прервать;
		Исключение
			ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Справочники.НастройкиИнтеграцииСБанками,
				,
				НСтр("ru = 'Ожидание выполнения обработчика'"));
		КонецПопытки;
		ОбщегоНазначенияБТС.Пауза(ВремяОжиданияОбработкиДанных());
	КонецЦикла;
	
	Возврат УчетнаяСистемаЗаблокирована;
	
КонецФункции

Процедура РазблокироватьУчетнуюСистему(УчетнаяСистема)
	
	РазблокироватьДанныеДляРедактирования(УчетнаяСистема);
	
КонецПроцедуры

Функция КоличествоПовторовОжиданияОбработкиДанных()
	
	Возврат 6;
	
КонецФункции

Функция ВремяОжиданияОбработкиДанных()
	
	Возврат 20; // секунд
	
КонецФункции

#КонецОбласти

#Область СозданиеОрганизаци

Процедура ПроверитьКорректностьДанныхДляОрганизации(ДанныеОрганизации, Ошибка, СообщениеОбОшибке)
	
	ПроверитьНаличиеОбязательныхСтруктур(ДанныеОрганизации, Ошибка, СообщениеОбОшибке);
	
	Если ДанныеОрганизации.Свойство("organization") Тогда
		ПроверитьКорректностьОбязательныхРеквизитовОрганизации(ДанныеОрганизации.organization, Ошибка, СообщениеОбОшибке);
		ПроверитьНаименованиеОрганизации(ДанныеОрганизации.organization, Ошибка, СообщениеОбОшибке);
	Иначе
		ПроверитьКорректностьДанныхИндивидуальногоПредпринимателя(ДанныеОрганизации.entrepreneur, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхДляСчетов(ДанныеОрганизации, Ошибка, СообщениеОбОшибке)
	
	ПроверитьНаличиеОбязательныхСтруктур(ДанныеОрганизации, Ошибка, СообщениеОбОшибке);
	
	Если ДанныеОрганизации.Свойство("organization") Тогда
		ПроверитьКорректностьОбязательныхРеквизитовОрганизации(ДанныеОрганизации.organization, Ошибка, СообщениеОбОшибке);
	Иначе
		ПроверитьКорректностьИННДляИП(ДанныеОрганизации.entrepreneur, Ошибка, СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеОбязательныхСтруктур(ДанныеОрганизации, Ошибка, СообщениеОбОшибке)
	
	Если НЕ ДанныеОрганизации.Свойство("organization")
		И НЕ ДанныеОрганизации.Свойство("entrepreneur") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательная структура organization или entrepreneur'");
		Возврат;
	КонецЕсли;
	
	Если ДанныеОрганизации.Свойство("organization")
		И ДанныеОрганизации.Свойство("entrepreneur") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON присутствуют взаимоисключающие структуры organization и entrepreneur'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьОбязательныхРеквизитовОрганизации(СвойстваОрганизации, Ошибка, СообщениеОбОшибке)
	
	Если НЕ СвойстваОрганизации.Свойство("inn") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле inn'");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СвойстваОрганизации.inn) <> 10 Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Длина поля organization.inn должна равняться 10 символам'");
		Возврат;
	КонецЕсли;
	
	Если НЕ СвойстваОрганизации.Свойство("kpp") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре organization для юридического лица отсутствует обязательное поле kpp'");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СвойстваОрганизации.kpp) <> 9 Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Длина поля organization.kpp должна равняться 9 символам'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаименованиеОрганизации(СвойстваОрганизации, Ошибка, СообщениеОбОшибке)
	
	Если НЕ СвойстваОрганизации.Свойство("name") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле name'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьИННДляИП(СвойстваОрганизации, Ошибка, СообщениеОбОшибке)
	
	Если НЕ СвойстваОрганизации.Свойство("inn") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре entrepreneur отсутствует обязательное поле inn'");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СвойстваОрганизации.inn) <> 12 Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Длина поля entrepreneur.inn должна равняться 12 символам'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхИндивидуальногоПредпринимателя(СвойстваОрганизации, Ошибка, СообщениеОбОшибке, ИзменениеОрганизации = Истина)
	
	ПроверитьКорректностьИННДляИП(СвойстваОрганизации, Ошибка, СообщениеОбОшибке);
	
	Если НЕ СвойстваОрганизации.Свойство("name")
		ИЛИ ТипЗнч(СвойстваОрганизации.name) <> Тип("Структура") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре entrepreneur отсутствует обязательная структура name'");
		Возврат;
	КонецЕсли;
	
	Если НЕ СвойстваОрганизации.name.Свойство("second_name") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре entrepreneur.name отсутствует обязательная структура second_name'");
		Возврат;
	КонецЕсли;
	
	Если НЕ СвойстваОрганизации.name.Свойство("first_name") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре entrepreneur.name отсутствует обязательная структура first_name'");
		Возврат;
	КонецЕсли;
	
	Если НЕ СвойстваОрганизации.name.Свойство("patronymic") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре entrepreneur.name отсутствует обязательная структура patronymic'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаполнитьОрганизацию(НастройкаИнтеграции, ДанныеОрганизации, КодВозврата, СообщениеОбОшибке)
	
	ПараметрыСозданияОрганизации = Обработки.НачалоРаботы.НовыйПараметрыСозданияОрганизации();
	
	Если ДанныеОрганизации.Свойство("organization") Тогда
		
		Организация = ДанныеОрганизации.organization;
		ПараметрыСозданияОрганизации.Наименование = СокрЛП(Организация.name);
		ПараметрыСозданияОрганизации.КПП = СокрЛП(Организация.kpp);
		ЭтоЮридическоеЛицо = Истина;
	Иначе
		
		Организация = ДанныеОрганизации.entrepreneur;
		ПараметрыСозданияОрганизации.Наименование = СокрЛП(СтрШаблон("%1 %2 %3",
			Организация.name.second_name,
			Организация.name.first_name,
			Организация.name.patronymic));
		ЭтоЮридическоеЛицо = Ложь;
	КонецЕсли;
	ПараметрыСозданияОрганизации.ИНН = СокрЛП(Организация.inn);
	
	Адрес = "";
	Организация.Свойство("address", Адрес);
	Если ЗначениеЗаполнено(Адрес) Тогда
		ЗаполнитьАдресВПараметрахСозданияОрганизации(ПараметрыСозданияОрганизации, Адрес);
	КонецЕсли;
	
	ЗаполнитьФИОДиректора(ПараметрыСозданияОрганизации, ДанныеОрганизации);
	
	ЗаполнитьВидБизнеса(ПараметрыСозданияОрганизации, ДанныеОрганизации);
	
	Налогообложение = Налогообложение(ДанныеОрганизации);
	
	Организация = Справочники.Организации.НайтиОрганизацию(
		ПараметрыСозданияОрганизации.ИНН,
		ПараметрыСозданияОрганизации.КПП,
		Ложь);
	
	НачатьТранзакцию();
	Попытка
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = Обработки.НачалоРаботы.СоздатьОрганизациюПоИНН(ПараметрыСозданияОрганизации, Налогообложение);
		Иначе
			Если Не ОбщегоНазначения.ДанныеСовпадают(Налогообложение, НалогообложениеПоУмолчанию()) Тогда
				ПараметрыСозданияОрганизации.Вставить("Налогообложение", Налогообложение);
			КонецЕсли;
			Организация = Справочники.Организации.ОбновитьОрганизацию(Организация, ПараметрыСозданияОрганизации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			
			Если Лев(ПараметрыСозданияОрганизации.Адрес, 1) = "<" Тогда
				
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Организация, 
					ПараметрыСозданияОрганизации.Адрес,
					Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
					Перечисления.ТипыКонтактнойИнформации.Адрес);
				
			КонецЕсли;
			
			БанковскиеСчета = СоздатьБанковскиеСчета(НастройкаИнтеграции, Организация, ДанныеОрганизации);
			Если БанковскиеСчета.Количество() > 0
				И НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОсновнойБанковскийСчет")) Тогда
				ОрганизацияОбъект = Организация.ПолучитьОбъект();
				ОрганизацияОбъект.ОсновнойБанковскийСчет = БанковскиеСчета[0];
				ОрганизацияОбъект.Записать();
			КонецЕсли;
			
			ЗаполнитьБанковскиеСчетаВНастройкеИнтеграции(НастройкаИнтеграции, Организация, БанковскиеСчета);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсИнтеграцииСБанком() Тогда
		
		Если Не УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ТекущаяДатаСеанса()) Тогда
			// Интерфейс интеграции с банком доступен только для организаций на УСН (доходы)
			ВызватьИсключение НСтр("ru = 'Система налогообложения организации не подходит для включения простого интерфейса интеграции с банком.'")
		КонецЕсли;
		Если ЭтоЮридическоеЛицо Тогда
			// Интерфейс интеграции с банком доступен только для предпринимателей
			ВызватьИсключение НСтр("ru = 'Для юридических лиц не поддерживается простой интерфейс интеграции с банком.'")
		КонецЕсли;
		Если УчетЗарплаты.ВключенаПодсистемаУчетаЗарплатыИКадров() Тогда
			// Интерфейс интеграции с банком доступен только при отсутствии работников
			ВызватьИсключение НСтр("ru = 'Для предпринимателей с наемными работниками не поддерживается простой интерфейс интеграции с банком.'")
		КонецЕсли;
		Константы.НачалоРаботы.Установить(Ложь);
		ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса("ИнтерфейсИнтеграцииСБанком");
		ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейсДляВсехпользователей();
		
		// Простой режим отправки отчетности доступен только в простом интерфейсе интеграции с банком.
		Включить1СОтчетность(ДанныеОрганизации);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСозданияОрганизации.ВидБизнеса) Тогда
		Константы.НачалоРаботы.Установить(Ложь);
		НастройкиИнтерфейса = Обработки.НачалоРаботы.ПодходящиеНастройкиИнтерфейса();
		ОбщегоНазначенияБП.УстановитьРежимКомандногоИнтерфейса(НастройкиИнтерфейса.ВариантИнтерфейса);
		ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейсДляВсехпользователей();
	КонецЕсли;
	
	ВключитьДоступностьОплатыНалогаВПомощниках(ДанныеОрганизации);
	
	КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
	
	ВыводитьОписаниеВсехРеквизитов = Истина;
	Если Не ПроверитьРеквизитыДляДекларацииУСН(Организация, СообщениеОбОшибке, ВыводитьОписаниеВсехРеквизитов)
		Или Не ПроверитьРеквизитыДляУплатыСтраховыхВзносовИП(Организация, СообщениеОбОшибке, ВыводитьОписаниеВсехРеквизитов)
		Или Не ПроверитьНаличиеБанковскихСчетовИнтеграции(НастройкаИнтеграции, Организация, СообщениеОбОшибке) Тогда
		КодВозврата = КодыСостояний.ВыполненоСПредупреждениями;
	Иначе
		КодВозврата = КодыСостояний.Выполнено;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаполнитьБанковскиеСчета(НастройкаИнтеграции, ДанныеБанковскихСчетов, КодВозврата, СообщениеОбОшибке)
	
	ОрганизацияНеНайдена = Ложь;
	Организация = НайтиОрганизацию(ДанныеБанковскихСчетов, ОрганизацияНеНайдена, СообщениеОбОшибке);
	КодыСостояний = РегистрыСведений.СвойстваЗаданий.КодыСостояний();
	
	НачатьТранзакцию();
	Попытка
		Если ОрганизацияНеНайдена Тогда
			КодВозврата = КодыСостояний.ОшибкаДанных;
			Возврат;
		КонецЕсли;
		
		БанковскиеСчета = СоздатьБанковскиеСчета(НастройкаИнтеграции, Организация, ДанныеБанковскихСчетов);
		Если БанковскиеСчета.Количество() > 0
			И НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОсновнойБанковскийСчет")) Тогда
			ОрганизацияОбъект = Организация.ПолучитьОбъект();
			ОрганизацияОбъект.ОсновнойБанковскийСчет = БанковскиеСчета[0];
			ОрганизацияОбъект.Записать();
		КонецЕсли;
		
		ДобавитьБанковскиеСчетаВНастройкеИнтеграции(НастройкаИнтеграции, Организация, БанковскиеСчета);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
	КонецПопытки;
	
	КодВозврата = КодыСостояний.Выполнено;
	
КонецПроцедуры

Процедура ЗаполнитьБанковскиеСчетаВНастройкеИнтеграции(НастройкаИнтеграции, Организация, БанковскиеСчета)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("НастройкаИнтеграции", НастройкаИнтеграции);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчетаИнтеграцииСБанком.Организация КАК Организация,
	|	БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|ГДЕ
	|	БанковскиеСчетаИнтеграцииСБанком.НастройкаИнтеграции = &НастройкаИнтеграции
	|	И БанковскиеСчетаИнтеграцииСБанком.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборДанных = РегистрыСведений.БанковскиеСчетаИнтеграцииСБанком.СоздатьНаборЗаписей();
		НаборДанных.Отбор.Организация.Установить(Выборка.Организация);
		НаборДанных.Отбор.БанковскийСчет.Установить(Выборка.БанковскийСчет);
		НаборДанных.Записать();
	КонецЦикла;
	
	ДобавитьБанковскиеСчетаВНастройкеИнтеграции(НастройкаИнтеграции, Организация, БанковскиеСчета);
	
КонецПроцедуры

Процедура ДобавитьБанковскиеСчетаВНастройкеИнтеграции(НастройкаИнтеграции, Организация, БанковскиеСчета)
	
	Для Каждого БанковскийСчет Из БанковскиеСчета Цикл
		НаборДанных = РегистрыСведений.БанковскиеСчетаИнтеграцииСБанком.СоздатьНаборЗаписей();
		НаборДанных.Отбор.Организация.Установить(Организация);
		НаборДанных.Отбор.БанковскийСчет.Установить(БанковскийСчет);
		НоваяЗапись = НаборДанных.Добавить();
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.БанковскийСчет = БанковскийСчет;
		НоваяЗапись.НастройкаИнтеграции = НастройкаИнтеграции;
		НаборДанных.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФИОДиректора(ПараметрыСозданияОрганизации, ДанныеОрганизации)
	
	Если ДанныеОрганизации.Свойство("responsible_persons")
		И ЗначениеЗаполнено(ДанныеОрганизации.responsible_persons)
		И ДанныеОрганизации.responsible_persons.Свойство("director")
		И ЗначениеЗаполнено(ДанныеОрганизации.responsible_persons.director)
		И ДанныеОрганизации.responsible_persons.director.Свойство("name")
		И ЗначениеЗаполнено(ДанныеОрганизации.responsible_persons.director.name)Тогда
		
		Если ДанныеОрганизации.responsible_persons.director.name.Свойство("second_name") Тогда
			ПараметрыСозданияОрганизации.ФамилияДиректора = 
				Строка(ДанныеОрганизации.responsible_persons.director.name.second_name);
		КонецЕсли;
		
		Если ДанныеОрганизации.responsible_persons.director.name.Свойство("first_name") Тогда
			ПараметрыСозданияОрганизации.ИмяДиректора = 
				Строка(ДанныеОрганизации.responsible_persons.director.name.first_name);
		КонецЕсли;
		
		Если ДанныеОрганизации.responsible_persons.director.name.Свойство("patronymic") Тогда
			ПараметрыСозданияОрганизации.ОтчествоДиректора = 
				Строка(ДанныеОрганизации.responsible_persons.director.name.patronymic);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидБизнеса(ПараметрыСозданияОрганизации, ДанныеОрганизации)
	
	Если ДанныеОрганизации.Свойство("business_type")
		И ЗначениеЗаполнено(ДанныеОрганизации.business_type) Тогда
		
		ИдентификаторыВидовБизнеса = Перечисления.ВидыБизнеса.ИдентификаторыВидовБизнеса();
		ВидБизнеса = ИдентификаторыВидовБизнеса.Получить(ДанныеОрганизации.business_type);
		Если ЗначениеЗаполнено(ВидБизнеса) Тогда
			ПараметрыСозданияОрганизации.ВидБизнеса = ВидБизнеса;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Включить1СОтчетность(ДанныеОрганизации)
	
	Использовать1СОтчетность = Неопределено;
	Если ДанныеОрганизации.Свойство("enable_1c_report", Использовать1СОтчетность) И Использовать1СОтчетность Тогда
		Константы.Использовать1СОтчетностьПриИнтеграцииСБанком.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьДоступностьОплатыНалогаВПомощниках(ДанныеОрганизации)
	
	ПоказыватьКомандыОплаты = Неопределено;
	Если ДанныеОрганизации.Свойство("enable_tax_payments", ПоказыватьКомандыОплаты) И ПоказыватьКомандыОплаты Тогда
		Константы.ПоказыватьОплатуНалогаВПомощникахИнтерфейсИнтеграцииСБанком.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьРеквизитыДляДекларацииУСН(Организация, СообщениеОбОшибке, ВыводитьОписаниеВсехРеквизитов)
	Перем НезаполненныеРеквизиты;
	
	Период = КонецГода(ТекущаяДатаСеанса());
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, Период) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыОрганизацииЗаполнены =
		Обработки.ПомощникРасчетаНалогаУСН.РеквизитыДляОтчетностиЗаполнены(Организация, Период, НезаполненныеРеквизиты);
	
	Если Не РеквизитыОрганизацииЗаполнены Тогда
		СообщениеОбОшибке = ПроверкаРеквизитовОрганизации.ТекстОшибкиЗаполненияРеквизитов(
			Организация,
			НезаполненныеРеквизиты,
			Обработки.ПомощникРасчетаНалогаУСН.ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(Период),
			ВыводитьОписаниеВсехРеквизитов);
	КонецЕсли;
	
	Возврат РеквизитыОрганизацииЗаполнены;
	
КонецФункции

Функция ПроверитьРеквизитыДляУплатыСтраховыхВзносовИП(Организация, СообщениеОбОшибке, ВыводитьОписаниеВсехРеквизитов)
	Перем НезаполненныеРеквизиты;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыОрганизацииЗаполнены =
		Обработки.РасчетСтраховыхВзносовИП.РеквизитыДляОтчетностиЗаполнены(Организация, НезаполненныеРеквизиты);
	
	Если Не РеквизитыОрганизацииЗаполнены Тогда
		СообщениеОбОшибке = ПроверкаРеквизитовОрганизации.ТекстОшибкиЗаполненияРеквизитов(
			Организация,
			НезаполненныеРеквизиты,
			Обработки.РасчетСтраховыхВзносовИП.ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(),
			ВыводитьОписаниеВсехРеквизитов);
	КонецЕсли;
	
	Возврат РеквизитыОрганизацииЗаполнены;
	
КонецФункции

Функция Налогообложение(ДанныеОрганизации)
	
	Налогообложение = НалогообложениеПоУмолчанию();
	
	Если ДанныеОрганизации.Свойство("accounting_policy")
		И ЗначениеЗаполнено(ДанныеОрганизации.accounting_policy) Тогда
		
		Если ДанныеОрганизации.accounting_policy.Свойство("tax_system")
			И ЗначениеЗаполнено(ДанныеОрганизации.accounting_policy.tax_system) Тогда
		
			СистемаНалогообложенияJSON = ДанныеОрганизации.accounting_policy.tax_system;
			Если НРег(СистемаНалогообложенияJSON) = "usn_profit" Тогда
				Налогообложение.СистемаНалогообложения = "УпрощеннаяДоходы";
			ИначеЕсли НРег(СистемаНалогообложенияJSON) = "usn" Тогда
				Налогообложение.СистемаНалогообложения = "УпрощеннаяДоходыМинусРасходы";
			ИначеЕсли НРег(СистемаНалогообложенияJSON) = "patent" Тогда
				Налогообложение.СистемаНалогообложения = "Патентная";
			ИначеЕсли НРег(СистемаНалогообложенияJSON) = "envd" Тогда
				Налогообложение.СистемаНалогообложения = "ЕНВД";
			ИначеЕсли НРег(СистемаНалогообложенияJSON) = "npd" Тогда
				Налогообложение.СистемаНалогообложения = "НалогНаПрофессиональныйДоход";
			ИначеЕсли НРег(СистемаНалогообложенияJSON) = "common" Тогда
				Налогообложение.СистемаНалогообложения = "Общая";
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Передана неподерживаемая система налогообложения %1'"),
					СистемаНалогообложенияJSON);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеОрганизации.accounting_policy.Свойство("patent")
			И ДанныеОрганизации.accounting_policy.patent = Истина Тогда
			Налогообложение.ПрименяетсяУСНПатент = Истина;
		КонецЕсли;
		
		Если ДанныеОрганизации.accounting_policy.Свойство("envd")
			И ДанныеОрганизации.accounting_policy.envd = Истина Тогда
			Налогообложение.ПлательщикЕНВД = Истина;
		КонецЕсли;
		
		Если ДанныеОрганизации.accounting_policy.Свойство("sales_tax")
			И ДанныеОрганизации.accounting_policy.sales_tax = Истина Тогда
			Налогообложение.ПлательщикТорговогоСбора = Истина;
		КонецЕсли;
		
		Если ДанныеОрганизации.accounting_policy.Свойство("have_staff")
			И ДанныеОрганизации.accounting_policy.have_staff = Истина Тогда
			Налогообложение.ИспользуетсяТрудНаемныхРаботников = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Налогообложение;
	
КонецФункции

Функция НалогообложениеПоУмолчанию()
	
	Налогообложение = Обработки.НачалоРаботы.НовыйНалогообложениеОрганизации();
	Налогообложение.СистемаНалогообложения = "УпрощеннаяДоходы";
	
	Возврат Налогообложение;
	
КонецФункции

Процедура ЗаполнитьАдресВПараметрахСозданияОрганизации(ПараметрыСозданияОрганизации, СведенияОбАдресеJSON)
	
	Если ТипЗнч(СведенияОбАдресеJSON) = Тип("Структура") Тогда
	
		ПредставлениеАдреса = Неопределено;
		СведенияОбАдресеJSON.Свойство("representation", ПредставлениеАдреса);
		
		ИдентификаторДома = Неопределено;
		СведенияОбАдресеJSON.Свойство("house_id", ИдентификаторДома);
		
		ОписаниеПомещения = Неопределено;
		СведенияОбАдресеJSON.Свойство("room", ОписаниеПомещения);
		
		ЗначенияПолейАдреса = Неопределено;
		Если ЗначениеЗаполнено(ИдентификаторДома) Тогда
			ДополнительнаяИнформацияАдреса = Новый Структура;
			ДополнительнаяИнформацияАдреса.Вставить("НомерОфиса", СокрЛП(Строка(ОписаниеПомещения)));
			ДополнительнаяИнформацияАдреса.Вставить("АдресВJSON", Истина);
			ЗначениеАдресаJSON = РаботаСАдресами.АдресПоИдентификатору(ИдентификаторДома, ДополнительнаяИнформацияАдреса);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеАдресаJSON) Тогда
			ПараметрыСозданияОрганизации.ЗначениеАдресаJSON = ЗначениеАдресаJSON;
		Иначе
			ПараметрыСозданияОрганизации.Адрес = Строка(ПредставлениеАдреса);
		КонецЕсли;
		
	Иначе
		// В поле address передана строка - представление адреса.
		ПараметрыСозданияОрганизации.Адрес = СведенияОбАдресеJSON;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьБанковскиеСчета(НастройкаИнтеграции, Организация, ДанныеЗаполнения)
	
	// Будем создавать все переданные счета, а возвратим только
	// те счета, которые открыты в банках, которые относятся к настройке интеграции.
	
	БанковскиеСчета = Новый ТаблицаЗначений;
	БанковскиеСчета.Колонки.Добавить("Ссылка");
	БанковскиеСчета.Колонки.Добавить("ПометкаУдаления");
	БанковскиеСчета.Колонки.Добавить("ДатаЗакрытия");
	
	БИКБанковИнтеграции = БИКБанковИнтеграции(НастройкаИнтеграции);
	
	Если ДанныеЗаполнения.Свойство("bank_accounts") И ЗначениеЗаполнено(ДанныеЗаполнения.bank_accounts) Тогда
		Для Каждого account Из ДанныеЗаполнения.bank_accounts Цикл
			НомерРасчетногоСчета = Неопределено;
			account.Свойство("account", НомерРасчетногоСчета);
			
			БИК = Неопределено;
			account.Свойство("bank", БИК);
			
			Если ЗначениеЗаполнено(НомерРасчетногоСчета) И ЗначениеЗаполнено(БИК) Тогда
				БанковскийСчет = Справочники.БанковскиеСчета.ПолучитьЭлемент(Организация, НомерРасчетногоСчета, БИК);
				БанковскийСчетОбъект = Неопределено;
				
				Если account.Свойство("opening_date") И ЗначениеЗаполнено(account.opening_date) Тогда
					БанковскийСчетОбъект = БанковскийСчет.ПолучитьОбъект();
					БанковскийСчетОбъект.ДатаОткрытия = XMLЗначение(Тип("Дата"), account.opening_date);
				КонецЕсли;
				
				Если account.Свойство("closing_date") И ЗначениеЗаполнено(account.closing_date) Тогда
					Если БанковскийСчетОбъект = Неопределено Тогда
						БанковскийСчетОбъект = БанковскийСчет.ПолучитьОбъект();
					КонецЕсли;
					БанковскийСчетОбъект.ДатаЗакрытия = XMLЗначение(Тип("Дата"), account.closing_date);
				КонецЕсли;
				
				Если БанковскийСчетОбъект <> Неопределено Тогда
					БанковскийСчетОбъект.Записать();
				КонецЕсли;
				
				Если БИКБанковИнтеграции.Найти(БИК) <> Неопределено Тогда
					НоваяСтрока = БанковскиеСчета.Добавить();
					НоваяСтрока.Ссылка = БанковскийСчет;
					Если БанковскийСчетОбъект <> Неопределено Тогда
						НоваяСтрока.ПометкаУдаления = БанковскийСчетОбъект.ПометкаУдаления;
						НоваяСтрока.ДатаЗакрытия    = БанковскийСчетОбъект.ДатаЗакрытия;
					Иначе
						РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "ПометкаУдаления, ДатаЗакрытия");
						ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыСчета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Переместим наверх не помеченные на удаление и не закрытые счета
	БанковскиеСчета.Сортировать("ПометкаУдаления, ДатаЗакрытия");
	
	Возврат БанковскиеСчета.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция БИКБанковИнтеграции(НастройкаИнтеграции)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("НастройкаИнтеграции", НастройкаИнтеграции);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(НастройкиИнтеграцииСБанкамиБанки.Банк.Код, """") КАК БИК
	|ИЗ
	|	Справочник.НастройкиИнтеграцииСБанками.Банки КАК НастройкиИнтеграцииСБанкамиБанки
	|ГДЕ
	|	НастройкиИнтеграцииСБанкамиБанки.Ссылка = &НастройкаИнтеграции";
	БИКБанковИнтеграции = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("БИК");
	Возврат БИКБанковИнтеграции;
	
КонецФункции

Функция ПроверитьНаличиеБанковскихСчетовИнтеграции(НастройкаИнтеграции, Организация, СообщениеОбОшибке)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("НастройкаИнтеграции", НастройкаИнтеграции);
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчетаИнтеграцииСБанком.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	РегистрСведений.БанковскиеСчетаИнтеграцииСБанком КАК БанковскиеСчетаИнтеграцииСБанком
	|ГДЕ
	|	БанковскиеСчетаИнтеграцииСБанком.Организация = &Организация
	|	И БанковскиеСчетаИнтеграцииСБанком.НастройкаИнтеграции = &НастройкаИнтеграции";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 в настройке интеграции %2 не указано ни одного банковсого счета интеграции'"),
			Организация,
			НастройкаИнтеграции);
		СообщениеОбОшибке = СообщениеОбОшибке + ?(ЗначениеЗаполнено(СообщениеОбОшибке), Символы.ПС, "") + ТекстСообщения;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПроверитьВозможностьВключенияРежимаИнтеграцииСБанком(ДанныеОрганизации, Ошибка, СообщениеОбОшибке)
	
	Если ТарификацияБПВызовСервераПовтИсп.РазрешенТолькоИнтерфейсИнтеграцииСБанком() Тогда
		
		Если НЕ ДанныеОрганизации.Свойство("entrepreneur") Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Недоступен стандартный интерфейс. В интерфейсе интеграции с банком нельзя вести учет юридического лица.'");
			Возврат;
		КонецЕсли;
		
		Если ДанныеОрганизации.Свойство("accounting_policy")
			И ЗначениеЗаполнено(ДанныеОрганизации.accounting_policy) Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Недоступен стандартный интерфейс. Поле accounting_policy должно отсутствовать.'");
			Возврат;
		КонецЕсли;
		
		Если ДанныеОрганизации.Свойство("business_type")
			И ЗначениеЗаполнено(ДанныеОрганизации.business_type) Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Недоступен стандартный интерфейс. Поле business_type должно отсутствовать.'");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВводНачальныхОстатков

Функция ОстаткиПоРасчетнымСчетамИзПотокаДанных(УчетнаяСистема, ПотокДанных, Ошибка, СообщениеОбОшибке)
	
	СчетаВРежимеИнтеграции = ВсеБанковскиеСчетаВРежимеИнтеграции();
	ВыпискаПоСчетамВРежимеИнтеграции = Истина;
	
	Результат = ЭкспрессЧтениеФайла(ПотокДанных);
	Если Результат.НеУдалосьПрочитатьФайл Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать файл, возможно неверно указана кодировка!'");
		Возврат Неопределено;
	ИначеЕсли Не Результат.ЭтоФайлОбмена Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Указанный файл не является файлом обмена - не найден ключ ""1CClientBankExchange""'");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров = Обработки.КлиентБанк.ПараметрыДляЗагрузкиВыпискиДляСервиса(ПотокДанных);
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	СтруктураПараметров.ДвоичныеДанные.Записать(ИмяФайла);
	
	НастройкиЗагрузки = Обработки.КлиентБанк.НастройкиЗагрузки();
	НастройкиЗагрузки.Кодировка = Результат.Кодировка;
	
	ОдиночныйРазделительСтрок = Ложь;
	РезультатЧтенияФайла = ОбменСБанкомВФормате1С.РезультатЧтенияФайла(
		ИмяФайла, НастройкиЗагрузки.Кодировка, ОдиночныйРазделительСтрок);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Новый Массив);
	Отбор.Вставить("БанковскийСчетОрганизации", Новый Массив);
	
	ОстаткиПоРасчетнымСчетам = НовыйОстаткиПоРасчетнымСчетам();
	
	ОстаткиИзФайла = РезультатЧтенияФайла.ДанныеИзБанка.Остатки;
	Для Каждого ОстатокИзФайла Из ОстаткиИзФайла Цикл
		БанковскийСчетИОрганизация = БанковскийСчетИОрганизацияПоНомеруСчета(ОстатокИзФайла.РасчСчет);
		Если БанковскийСчетИОрганизация <> Неопределено Тогда
			СтрокаОстатка = ОстаткиПоРасчетнымСчетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, ОстатокИзФайла);
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, БанковскийСчетИОрганизация);
			
			СтрокаОстатка.ДатаОстатка  = ОстатокИзФайла.ДатаНачала;
			СтрокаОстатка.СуммаОстатка = ОстатокИзФайла.НачальныйОстаток;
			
			Если Отбор.Организация.Найти(СтрокаОстатка.Организация) = Неопределено Тогда
				Отбор.Организация.Добавить(СтрокаОстатка.Организация);
			КонецЕсли;
			
			Если Отбор.БанковскийСчетОрганизации.Найти(СтрокаОстатка.БанковскийСчет) = Неопределено Тогда
				Отбор.БанковскийСчетОрганизации.Добавить(СтрокаОстатка.БанковскийСчет);
			КонецЕсли;
			
			ВыпискаПоСчетамВРежимеИнтеграции = ВыпискаПоСчетамВРежимеИнтеграции
				И СчетаВРежимеИнтеграции.Найти(СтрокаОстатка.БанковскийСчет) <> Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыпискаПоСчетамВРежимеИнтеграции Тогда
		ПроверитьКорректныеОстаткиПоСчетамВРежимеИнтеграции(ОстаткиПоРасчетнымСчетам, Ошибка, СообщениеОбОшибке);
	Иначе
		ВыделитьОстаткиПоСчетамДругихБанков(
			ОстаткиПоРасчетнымСчетам,
			ИмяФайла,
			НастройкиЗагрузки,
			Отбор,
			ОдиночныйРазделительСтрок,
			Ошибка,
			СообщениеОбОшибке);
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат ОстаткиПоРасчетнымСчетам;
	
КонецФункции

Процедура ВыделитьОстаткиПоСчетамДругихБанков(ОстаткиПоРасчетнымСчетам,
			ИмяФайла,
			НастройкиЗагрузки,
			Отбор,
			ОдиночныйРазделительСтрок,
			Ошибка,
			СообщениеОбОшибке)
	
	Остатки = ОстаткиПоРасчетнымСчетам.Скопировать();
	Остатки.Сортировать("БанковскийСчет, ДатаНачала");
	
	ОстаткиПоРасчетнымСчетам = НовыйОстаткиПоРасчетнымСчетам();
	
	УчестьОбороты = Ложь;
	Для каждого БанковскийСчет Из Отбор.БанковскийСчетОрганизации Цикл
		ОтборПоСчету = Новый Структура("БанковскийСчет", БанковскийСчет);
		ОстаткиПоСчету = Остатки.НайтиСтроки(ОтборПоСчету);
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец");
		// Получим дату остатков
		ГраницаОтчетности = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
		Если Не ЗначениеЗаполнено(ГраницаОтчетности) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаВеденияУчета = ГраницаОтчетности + 1;
		
		ПроверитьОстаткиНаДатуБольшеДатыВводаОстатков(
			ОстаткиПоРасчетнымСчетам, ОстаткиПоСчету, ДатаНачалаВеденияУчета, Ошибка, СообщениеОбОшибке);
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ВыделитьОстатокНаДатуНачала(ОстаткиПоРасчетнымСчетам, Остатки, ОтборПоСчету, ДатаНачалаВеденияУчета) Тогда
			// Есть нет начального остатка на нужную дату,
			// то вычислим его по более раннему остатку и оборотам до нужной даты.
			ВыделитьОстатокНаДатуИзПериода(
				ОстаткиПоРасчетнымСчетам, Остатки, ОстаткиПоСчету, ДатаНачалаВеденияУчета, УчестьОбороты);
		КонецЕсли;
	КонецЦикла;
	
	Если УчестьОбороты Тогда
		РаспознанныеДанные = ЗагрузкаВыпискиПоБанковскомуСчету.РаспознанныеДанныеИзБанка(
			ИмяФайла, НастройкиЗагрузки, Отбор, ОдиночныйРазделительСтрок);
		УчестьОборотыВОстатках(ОстаткиПоРасчетнымСчетам, РаспознанныеДанные);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОстаткиПоРасчетнымСчетам()
	
	ТипСумма          = ОбщегоНазначения.ОписаниеТипаЧисло(15,2);
	ТипДатаБезВремени = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	
	ОстаткиПоРасчетнымСчетам = Новый ТаблицаЗначений;
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("БанковскийСчет",   Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("ДатаРегистрации",  ТипДатаБезВремени);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("ДатаОстатка",      ТипДатаБезВремени);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("ДатаНачала",       ТипДатаБезВремени);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("ДатаКонца",        ТипДатаБезВремени);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("СуммаОстатка",     ТипСумма);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("НачальныйОстаток", ТипСумма);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("КонечныйОстаток",  ТипСумма);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("ВсегоПоступило",   ТипСумма);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("ВсегоСписано",     ТипСумма);
	ОстаткиПоРасчетнымСчетам.Колонки.Добавить("УчестьОбороты",    Новый ОписаниеТипов("Булево"));
	
	Возврат ОстаткиПоРасчетнымСчетам;
	
КонецФункции

Функция БанковскийСчетИОрганизацияПоНомеруСчета(НомерСчета)
	
	// По номеру расчетного счета определим организацию и сам расчетный счет.
	// Если такого не найдено, либо найдено два - то строку остатков не добавляем.
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("НомерСчета", НомерСчета);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчета.Владелец КАК Организация,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Организации).ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВыделитьОстатокНаДатуНачала(ОстаткиПоРасчетнымСчетам, Остатки, ОтборПоСчету, ДатаПроверки)
	
	ОстатокВыделен = Ложь;
	
	// Есть начальный остаток на нужную дату.
	ОтборПоСчетуИДатеНачала = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборПоСчету);
	ОтборПоСчетуИДатеНачала.Вставить("ДатаНачала", ДатаПроверки);
	ОстаткиПоСчетуИДатеНачала = Остатки.НайтиСтроки(ОтборПоСчетуИДатеНачала);
	Если ОстаткиПоСчетуИДатеНачала.Количество() > 0 Тогда
		ОстатокВыделен = Истина;
		ЗаполнитьЗначенияСвойств(ОстаткиПоРасчетнымСчетам.Добавить(), ОстаткиПоСчетуИДатеНачала[0]);
	КонецЕсли;
	
	Возврат ОстатокВыделен;
	
КонецФункции

Процедура ПроверитьКорректныеОстаткиПоСчетамВРежимеИнтеграции(ОстаткиПоРасчетнымСчетам, Ошибка, СообщениеОбОшибке)
	
	Если ОстаткиПоРасчетнымСчетам.Количество() = 0 Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В выписке не найдены остатки по расчетным счетам информационной базы.'");
		ОстаткиПоРасчетнымСчетам = Неопределено;
	Иначе
		// Проверим, что даты всех остатков совпадают и дата приходится на начало года.
		ДатыОстатков = ОстаткиПоРасчетнымСчетам.ВыгрузитьКолонку("ДатаОстатка");
		ДатыОстатков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДатыОстатков);
		Если ДатыОстатков.Количество() = 1 Тогда
			СтрокаОстатка = ОстаткиПоРасчетнымСчетам.Найти(ДатыОстатков[0], "ДатаОстатка");
			Если ДатыОстатков[0] <> НачалоГода(ДатыОстатков[0])
				И (СтрокаОстатка.ДатаРегистрации < НачалоГода(ДатыОстатков[0]) Или СтрокаОстатка.СуммаОстатка <> 0) Тогда
				Ошибка = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Начальные остатки должны быть указаны на начало года.'");
				ОстаткиПоРасчетнымСчетам = Неопределено;
				Возврат;
			КонецЕсли;
			
			Если СтрокаОстатка <> Неопределено И СтрокаОстатка.ДатаОстатка <= СтрокаОстатка.ДатаРегистрации Тогда
				Если СтрокаОстатка.СуммаОстатка = 0 Тогда
					СтрокаОстатка.ДатаОстатка = КонецДня(СтрокаОстатка.ДатаРегистрации) + 1;
					СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Период начальных остатков установлен на дату регистрации организации %1'"),
						Формат(СтрокаОстатка.ДатаРегистрации, "ДФ=dd.MM.yyyy"));
				Иначе
					Ошибка = Истина;
					СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Период начальных остататков не должен быть раньше даты регистрации организации %1'"),
						Формат(СтрокаОстатка.ДатаРегистрации, "ДФ=dd.MM.yyyy"));
					ОстаткиПоРасчетнымСчетам = Неопределено;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Даты начальных остатков для расчетных счетов отличаются.'");
			ОстаткиПоРасчетнымСчетам = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОстаткиНаДатуБольшеДатыВводаОстатков(ОстаткиПоРасчетнымСчетам, ОстаткиПоСчету, ДатаПроверки, Ошибка, СообщениеОбОшибке)
	
	// Есть начальный остаток, но он на дату больше даты ввода остатков по счетам интеграции.
	// Значит эта выписка нам не подходит - начало периода формирования выписки больше, чем требуется для корректного учета.
	// Такое допустимо, только если нет входящего остатка:
	//  - счет открыт позже (даты ввода остатков)
	//  - до этой даты не было движений по счету.
	// В ином случае некорректным будет не только начальный остаток, но и обороты по этому счету за требуемый период.
	// А значит и налог может быть рассчитан неверно - в расчете не будут учтены доходы и/или уплаты налога
	// за этот выпавший период.
	
	Если ОстаткиПоСчету.Количество() > 0
		И ОстаткиПоСчету[0].ДатаНачала > ДатаПроверки
		И ОстаткиПоСчету[0].НачальныйОстаток > 0 Тогда
		Ошибка = Истина;
		ШаблонОшибки = НСтр("ru = 'Остаток по счету %1 указан на дату %2, позже даты ввода остатков %3.'");
		СообщениеОбОшибке = СтрШаблон(ШаблонОшибки,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОстаткиПоСчету[0].БанковскийСчет, "НомерСчета"),
			Формат(ОстаткиПоСчету[0].ДатаНачала, "ДФ=dd.MM.yyyy"),
			Формат(ДатаПроверки, "ДФ=dd.MM.yyyy"));
		ОстаткиПоРасчетнымСчетам = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыделитьОстатокНаДатуИзПериода(ОстаткиПоРасчетнымСчетам, Остатки, ОстаткиПоСчету, ДатаПроверки, УчестьОбороты)
	
	Если ОстаткиПоСчету.Количество() = 1 Тогда
		// Есть одна секция с остатком по счету по диапазону дат,
		// При этом дата начала диапазона меньше требуемой
		Если ОстаткиПоСчету[0].ДатаНачала < ДатаПроверки Тогда
			УчестьОбороты = Истина;
			ИтоговаяСтрокаОстатка = ОстаткиПоРасчетнымСчетам.Добавить();
			ЗаполнитьЗначенияСвойств(ИтоговаяСтрокаОстатка, ОстаткиПоСчету[0]);
			ИтоговаяСтрокаОстатка.ДатаОстатка   = ДатаПроверки;
			ИтоговаяСтрокаОстатка.УчестьОбороты = Истина;
		КонецЕсли;
	Иначе
		// Есть много остатков, нет на нужную дату, но есть на дату, меньше требуемой
		ОстаткиПоРасчетномуСчету = Остатки.Скопировать(ОстаткиПоСчету);
		СтрокаНаНужнуюДату = ОстаткиПоРасчетномуСчету.Добавить();
		СтрокаНаНужнуюДату.ДатаНачала = ДатаПроверки;
		ОстаткиПоРасчетномуСчету.Сортировать("ДатаНачала");
		
		ИндексСтрокиНаНужнуюДату = ОстаткиПоРасчетномуСчету.Индекс(СтрокаНаНужнуюДату);
		Если ИндексСтрокиНаНужнуюДату > 0 Тогда
			УчестьОбороты = Истина;
			ИтоговаяСтрокаОстатка = ОстаткиПоРасчетнымСчетам.Добавить();
			ЗаполнитьЗначенияСвойств(ИтоговаяСтрокаОстатка, ОстаткиПоРасчетномуСчету[ИндексСтрокиНаНужнуюДату - 1]);
			ИтоговаяСтрокаОстатка.ДатаОстатка   = ДатаПроверки;
			ИтоговаяСтрокаОстатка.УчестьОбороты = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УчестьОборотыВОстатках(ОстаткиПоРасчетнымСчетам, РаспознанныеДанные)
	
	Для Каждого ОстатокБезОборота Из ОстаткиПоРасчетнымСчетам Цикл
		Если Не ОстатокБезОборота.УчестьОбороты Тогда
			Продолжить;
		КонецЕсли;
		
		БанковскийСчет = ОстатокБезОборота.БанковскийСчет;
		СуммаОстатка   = ОстатокБезОборота.СуммаОстатка;
		РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчет, "НомерСчета, Банк.Код");
		
		ИдентификаторВыписки = ИдентификацияУчастниковБанковскихОпераций.ИдентификаторПоНомеруБанковскогоСчета(
			РаспознанныеДанные.УчастникиОпераций,
			РеквизитыСчета.НомерСчета,
			РеквизитыСчета.БанкКод);
		
		Для Каждого КлючИЗначение Из РаспознанныеДанные.Выписки Цикл
			Если ИдентификаторВыписки <> КлючИЗначение.Ключ Тогда
				Продолжить;
			КонецЕсли;
			
			Выписка = КлючИЗначение.Значение;
			РаспознаннаяВыписка = РаспознанныеДанные.РаспознанныеВыписки[ИдентификаторВыписки];
			Если РаспознаннаяВыписка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Операция Из Выписка.Операции Цикл
				Если Операция.ДатаИсполнения < ОстатокБезОборота.ДатаНачала Тогда
					Продолжить;
				КонецЕсли;
				
				Если Операция.ДатаИсполнения >= ОстатокБезОборота.ДатаОстатка Тогда
					Прервать;
				КонецЕсли;
				
				Если Операция.ПоступилоСписано = "Поступило" Тогда
					СуммаОстатка = СуммаОстатка + Операция.Сумма;
				Иначе
					СуммаОстатка = СуммаОстатка - Операция.Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ОстатокБезОборота.СуммаОстатка  = СуммаОстатка;
			ОстатокБезОборота.УчестьОбороты = Ложь;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВвестиДокументыВводаНачальныхОстатков(ОстаткиПоРасчетнымСчетам, Ошибка, СообщениеОбОшибке)
	
	Организации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ОстаткиПоРасчетнымСчетам.ВыгрузитьКолонку("Организация"));
	
	ДатыОстатков = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ОстаткиПоРасчетнымСчетам.ВыгрузитьКолонку("ДатаОстатка"));
	ДатаВводаНачальныхОстатков = НачалоДня(ДатыОстатков[0]) - 1;
	
	ЕстьОстаткиПоОрганизации = Новый Соответствие;
	Для Каждого Организация Из Организации Цикл
		УстановитьДатуНачальныхОстатков(Организация, ЕстьОстаткиПоОрганизации, ДатаВводаНачальныхОстатков, Ошибка, СообщениеОбОшибке);
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ УчетнаяПолитика.Существует(Организация, ДатаВводаНачальныхОстатков) Тогда
			// Нет учетной политики на дату ввода остатков.
			// Нужно скопировать существующую учетную политику в год, когда вводим остатки.
			НастройкиУчета.СкопироватьПараметрыУчетнойПолитикиНаНовуюДату("УчетнаяПолитика", Организация,
				ТекущаяДатаСеанса(), НачалоГода(ДатаВводаНачальныхОстатков));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Организация Из Организации Цикл
		СоздатьИзменитьДокументыВводаНачальныхОстатковОрганизации(
			Организация, ЕстьОстаткиПоОрганизации, ДатаВводаНачальныхОстатков, ОстаткиПоРасчетнымСчетам);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДатуНачальныхОстатков(Организация, ЕстьОстаткиПоОрганизации, ДатаВводаНачальныхОстатков, Ошибка, СообщениеОбОшибке)
	
	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Прочитать();
	
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		Если НачалоДня(МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков) = НачалоДня(ДатаВводаНачальныхОстатков) Тогда
			ЕстьОстаткиПоОрганизации.Вставить(Организация, Истина);
		Иначе
			Ошибка = Истина;
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для организации %1 уже установлена дата начальных остатков %2'"),
				Организация, МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = ДатаВводаНачальныхОстатков;
	МенеджерЗаписиРегистра.Записать();
	
КонецПроцедуры

Функция ДокументВводаОстатковПоДенежнымСредствам(Организация, ЕстьОстаткиПоОрганизации, ДатаВводаНачальныхОстатков)
	
	ВводНачальныхОстатков = Неопределено;
	Если ЕстьОстаткиПоОрганизации.Получить(Организация) = Неопределено Тогда
		Возврат ВводНачальныхОстатков;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", КонецДня(ДатаВводаНачальныхОстатков));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.ДенежныеСредства)
	|	И ВводНачальныхОстатков.Организация = &Организация
	|	И КОНЕЦПЕРИОДА(ВводНачальныхОстатков.Дата, ДЕНЬ) = &Дата
	|	И ВводНачальныхОстатков.Проведен";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВводНачальныхОстатков = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ВводНачальныхОстатков;
	
КонецФункции

Процедура СоздатьИзменитьДокументыВводаНачальныхОстатковОрганизации(Организация, ЕстьОстаткиПоОрганизации, ДатаВводаНачальныхОстатков, ОстаткиПоРасчетнымСчетам)
	
	ВводНачальныхОстатков = ДокументВводаОстатковПоДенежнымСредствам(
		Организация, ЕстьОстаткиПоОрганизации, ДатаВводаНачальныхОстатков);
	Если ВводНачальныхОстатков = Неопределено Тогда
		ВводНачальныхОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
	КонецЕсли;
	
	ВводНачальныхОстатков.Дата = КонецДня(ДатаВводаНачальныхОстатков);
	ВводНачальныхОстатков.Организация = Организация;
	ВводНачальныхОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	ВводНачальныхОстатков.ОтражатьВБухгалтерскомУчете    = Истина;
	ВводНачальныхОстатков.ОтражатьВНалоговомУчете        = Истина;
	ВводНачальныхОстатков.ОтражатьПоСпециальнымРегистрам = Истина;
	
	ОстаткиОрганизации = ОстаткиПоРасчетнымСчетам.НайтиСтроки(Новый Структура("Организация", Организация));
	Для Каждого ОстатокПоОрганизации Из ОстаткиОрганизации Цикл
		СтрокиДокумента = ВводНачальныхОстатков.БухСправка.НайтиСтроки(
			Новый Структура("Субконто1", ОстатокПоОрганизации.БанковскийСчет));
		Если СтрокиДокумента.Количество() >= 1 Тогда
			СтрокаОстатка = СтрокиДокумента[0];
		Иначе
			СтрокаОстатка = ВводНачальныхОстатков.БухСправка.Добавить();
		КонецЕсли;
		
		СтрокаОстатка.Валюта        = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		СтрокаОстатка.Ключ          = Строка(Новый УникальныйИдентификатор());
		СтрокаОстатка.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
		СтрокаОстатка.СчетУчета     = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		СтрокаОстатка.Субконто1     = ОстатокПоОрганизации.БанковскийСчет;
		СтрокаОстатка.Сумма         = ОстатокПоОрганизации.СуммаОстатка;
		СтрокаОстатка.ВалютнаяСумма = ОстатокПоОрганизации.СуммаОстатка;
	КонецЦикла;
	
	ВводНачальныхОстатков.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

#Область ЭкспрессПроверкаВыбранногоФайла

// Читаем первые строки файла, определяем является ли данный файл - файлом обмена, определяем кодировку.
// 
// Параметры:
//  Поток - ПотокВПамяти
//
// Возвращаемое значение:
//  Структура - содержит результат чтения файла.
//  Ключи     - ЭтоФайлОбмена          - Булево - Признак является ли файл файлом обмена
//            - НеУдалосьПрочитатьФайл - Булево
//            - Кодировка              - КодировкаТекста - Кодировка, в которой сохранен файл
//
Функция ЭкспрессЧтениеФайла(Поток)
	
	Кодировки = Новый Массив;
	Кодировки.Добавить(КодировкаТекста.ANSI);
	Кодировки.Добавить(КодировкаТекста.OEM);
	Кодировки.Добавить(КодировкаТекста.UTF8);
	
	Для каждого Кодировка Из Кодировки Цикл
		РезультатЧтенияФайла = ЧтениеПервыхСтрокФайлаПоКодировке(Поток, Кодировка);
		Если Не РезультатЧтенияФайла.НеУдалосьПрочитатьФайл Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатЧтенияФайла;
	
КонецФункции

Функция ЧтениеПервыхСтрокФайлаПоКодировке(Поток, Кодировка)
	
	РезультатЧтенияФайла = НовыйРезультатЧтенияФайла();
	
	Если Кодировка = КодировкаТекста.ANSI Тогда
		Кодир = "windows-1251";
	ИначеЕсли Кодировка = КодировкаТекста.OEM Тогда
		Кодир = "cp866";
	ИначеЕсли Кодировка = КодировкаТекста.UTF8 Тогда
		Кодир = "UTF8";
	Иначе
		РезультатЧтенияФайла.НеУдалосьПрочитатьФайл = Истина;
		Возврат РезультатЧтенияФайла;
	КонецЕсли;
	
	НомерТекущейСтроки = 0;
	
	Текст = Новый ЧтениеТекста(Поток, Кодир);
	СтрокаТекста = Текст.ПрочитатьСтроку();
	Пока СтрокаТекста <> Неопределено Цикл
		
		// Проверяем кодировку файла
		Если НЕ ОбменСБанкомКлиентСервер.ТолькоСимволыВСтроке(СтрокаТекста) Тогда
			РезультатЧтенияФайла.НеУдалосьПрочитатьФайл = Истина;
			Прервать;
		КонецЕсли;
		
		// Читаем первые пять строк, этого должно быть достаточно,
		// чтобы определить кодировку и найти ключ 1CClientBankExchange
		Если НомерТекущейСтроки > 5 Тогда
			Прервать;
		КонецЕсли;
		
		ДанныеСтроки = РазложитьСтроку(СтрокаТекста);
		
		Если Врег(ДанныеСтроки.Ключ) = Врег("1CClientBankExchange") Тогда
			РезультатЧтенияФайла.ЭтоФайлОбмена = Истина;
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		СтрокаТекста = Текст.ПрочитатьСтроку();
		
	КонецЦикла;
	
	РезультатЧтенияФайла.Кодировка = Кодировка;
	
	Поток.Перейти(0, ПозицияВПотоке.Начало); // Сбросим позицию потока в начало
	
	Возврат РезультатЧтенияФайла;
	
КонецФункции

Функция НовыйРезультатЧтенияФайла()
	
	РезультатЧтенияФайла = Новый Структура;
	РезультатЧтенияФайла.Вставить("ЭтоФайлОбмена",          Ложь);
	РезультатЧтенияФайла.Вставить("НеУдалосьПрочитатьФайл", Ложь);
	РезультатЧтенияФайла.Вставить("Кодировка",              Неопределено);
	
	Возврат РезультатЧтенияФайла;
	
КонецФункции

// Функция возвращает структуру строки из файла
// Параметры:
// Строка - Строка - Текстовая строка, прочитанная из файла
// Возвращаемое значение
// Структура:
//    Ключ     - Идентификатор из строки
//    Значение - Значение из строки
//
Функция РазложитьСтроку(Строка)
	
	Результат = Новый Структура;
	Результат.Вставить("Ключ",     "");
	Результат.Вставить("Значение", "");
	
	ПозицияРавно = СтрНайти(Строка, "=");
	Если ПозицияРавно = 0 Тогда
		Результат.Ключ = Строка;
	Иначе
		Результат.Ключ     = Лев(Строка,  ПозицияРавно - 1);
		Результат.Значение = Сред(Строка, ПозицияРавно + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВыполнениеКоманды

Процедура ПроверитьКорректностьДанныхКоманды(ДанныеКоманды, Ошибка, СообщениеОбОшибке)
	
	Если НЕ ДанныеКоманды.Свойство("method") Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательное поле method'");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеКоманды.method) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Поле method не заполнено'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуУчетнойСистемы(УчетнаяСистема, ДанныеКоманды, РезультатВыполнения, Ошибка, СообщениеОбОшибке)
	
	ИмяМетода = ДанныеКоманды.method;
	
	Параметры = Неопределено;
	ДанныеКоманды.Свойство("parameters", Параметры);
	
	Если ИмяМетода = ИмяМетодаСозданияРегламентированногоОтчета() Тогда
		
		ПроверитьПараметрыКомандыСозданияРегламентированногоОтчета(Параметры, Ошибка, СообщениеОбОшибке);
		Если Не Ошибка Тогда
			
			ВыполнитьКомандуСозданияРегламентированногоОтчета(УчетнаяСистема, Параметры, РезультатВыполнения, Ошибка, СообщениеОбОшибке);
			
		КонецЕсли;
		
		
	ИначеЕсли ИмяМетода = ИмяМетодаУстановитьРезультатыОпросаПоОтчетамПрошлыхПериодов() Тогда
		
		ПроверитьПараметрыКомандыУстановитьРезультатыОпросаПоОтчетамПрошлыхПериодов(Параметры, Ошибка, СообщениеОбОшибке);
		Если Не Ошибка Тогда
			
			ВыполнитьКомандуУстановитьРезультатыОпросаПоОтчетамПрошлыхПериодов(УчетнаяСистема, Параметры, РезультатВыполнения, Ошибка, СообщениеОбОшибке);
			
		КонецЕсли;
		
	ИначеЕсли ИмяМетода = ИмяМетодаУстановитьРезультатыОпросаПоОплатамПрошлыхПериодов() Тогда
		
		ПроверитьПараметрыКомандыУстановитьРезультатыОпросаПоОплатамПрошлыхПериодов(Параметры, Ошибка, СообщениеОбОшибке);
		Если Не Ошибка Тогда
			
			ВыполнитьКомандуУстановитьРезультатыОпросаПоОплатамПрошлыхПериодов(УчетнаяСистема, Параметры, РезультатВыполнения, Ошибка, СообщениеОбОшибке);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область КомандаСозданияРегламентированногоОтчета

Процедура ПроверитьПараметрыКомандыСозданияРегламентированногоОтчета(Параметры, Ошибка, СообщениеОбОшибке)
	
	Если НЕ Параметры.Свойство("type")
		ИЛИ Не ЗначениеЗаполнено(Параметры.type) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре parameters отсутствует или не заполнено обязательное поле type'");
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("date")
		ИЛИ Не ЗначениеЗаполнено(Параметры.date) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре parameters отсутствует или не заполнено обязательное поле date'");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("organization") Тогда
		
		СвойстваОрганизации = Параметры.organization;
		
		Если НЕ СвойстваОрганизации.Свойство("inn") Или Не ЗначениеЗаполнено(СвойстваОрганизации.inn) Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'В структуре parameters.organization нет обязательного поля inn'");
		КонецЕсли;
		
		Если СтрДлина(СвойстваОрганизации.inn) = 10 Тогда
			Если НЕ СвойстваОрганизации.Свойство("kpp") Или Не ЗначениеЗаполнено(СвойстваОрганизации.kpp) Или СтрДлина(СвойстваОрганизации.kpp) <> 9 Тогда
				Ошибка = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Для юридического лица длина обязательного поля parameters.organization.kpp должна быть равна 9'");
			КонецЕсли;
		ИначеЕсли СтрДлина(СвойстваОрганизации.inn) <> 12 Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Длина обязательного поля inn в структуре parameters.organization должна быть равна 10 или 12'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуСозданияРегламентированногоОтчета(УчетнаяСистема, Параметры, РезультатВыполнения, Ошибка, СообщениеОбОшибке)
	
	Организация = ОрганизацияИзПараметров(Параметры, Ошибка, СообщениеОбОшибке);
	
	Если Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьБП.Используется1СОтчетность() Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В информационной базе используется 1С:Отчетность. Удаленное создание регламентированных отчетов не поддерживается.'");
		Возврат;
	КонецЕсли;
	
	Если Параметры.type = "РегламентированныйОтчетУСН" Тогда
		
		Периодичность = Перечисления.Периодичность.Год;
		
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Параметры.date);
		КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Параметры.date);
		
		РегламентированныйОтчет = РегламентированнаяОтчетностьБП.СоздатьОбновитьРегламентированныйОтчет(Организация, Параметры.type,
			НачалоПериода, КонецПериода);
		
		Если Не ЗначениеЗаполнено(РегламентированныйОтчет) Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Ошибка при создании регламентированного отчета %1'"), Параметры.type);
			Возврат;
		КонецЕсли;
		
		УстановитьСтатусПодготовлено(РегламентированныйОтчет);
		
		ЗаполнитьРезультатВыполненияКомандыСозданияРегламентированногоОтчета(
			УчетнаяСистема, РегламентированныйОтчет, РезультатВыполнения, Ошибка, СообщениеОбОшибке);
		
	Иначе
		Ошибка = Истина;
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Создание регламентированного отчета %1 не поддерживается'"), Параметры.type);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусПодготовлено(РегламентированныйОтчет)
	
	Статус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(РегламентированныйОтчет);
	Если Не ЗначениеЗаполнено(Статус)
		Или Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой() Тогда
		
		ПараметрыСохранения = Новый Структура;
		ПараметрыСохранения.Вставить("СсылкаНаОбъект", РегламентированныйОтчет);
		ПараметрыСохранения.Вставить("Статус", ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой());
		ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(ПараметрыСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатВыполненияКомандыСозданияРегламентированногоОтчета(УчетнаяСистема, РегламентированныйОтчет, РезультатВыполнения, Ошибка, СообщениеОбОшибке)
	
	СостояниеИнтеграции = РегистрыСведений.ДокументыИнтеграцииСБанком.СостояниеИнтеграции(РегламентированныйОтчет);
	Если СостояниеИнтеграции = Перечисления.СостоянияДокументовИнтеграцииСБанком.ПодготовленоКОтправке Тогда
		// Выгрузка уже готова к отправке при записи документа. Повторно регистрировать к отправке документ не требуется,
		// достаточно просто получить данные регистрации и вернуть их в БТС.
		ДанныеОтправки = РегистрыСведений.ДокументыИнтеграцииСБанком.ЗарегистрированныеДанныеДляОтправки(РегламентированныйОтчет, УчетнаяСистема);
	Иначе
		// Выгрузка не была подготовлена при записи. Это может случиться из-за:
		//  - не было изменений по сравнению с последней выгрузкой в банк.
		//  - при выгрузке документа были получены ошибки.
		// В этом случае нужно принудительно повторно выполнить выгрузку и вернуть ошибку, если она есть.
		ДанныеОтправки = РегистрыСведений.ДокументыИнтеграцииСБанком.ЗарегистрироватьДокументКОтправке(РегламентированныйОтчет);
	КонецЕсли;
	
	Если ДанныеОтправки.Ошибка Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = ДанныеОтправки.СообщениеОбОшибке;
	Иначе
		Результат = РезультатВыполнения.Добавить();
		Результат.ИдентификаторОбъекта = ДанныеОтправки.Идентификатор;
		Результат.Обработчик = ДанныеОтправки.ИмяОбработчика;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяМетодаСозданияРегламентированногоОтчета()
	Возврат "Документ/РегламентированныйОтчет/Создать";
КонецФункции

#КонецОбласти

#Область ОпросПоОтчетамПрошлыхПериодов

Функция ИмяМетодаУстановитьРезультатыОпросаПоОтчетамПрошлыхПериодов()
	
	Возврат "Обработка/МониторНалоговИОтчетности/ОтчетыПрошлыхПериодов/УстановитьРезультатыОпросаПоОтчетам";
	
КонецФункции

Процедура ПроверитьПараметрыКомандыУстановитьРезультатыОпросаПоОтчетамПрошлыхПериодов(Параметры, Ошибка, СообщениеОбОшибке)
	
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не указаны параметры выполнения метода'");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("organization") Тогда
		
		СвойстваОрганизации = Параметры.organization;
		
		Если НЕ СвойстваОрганизации.Свойство("inn") Или Не ЗначениеЗаполнено(СвойстваОрганизации.inn) Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'В структуре parameters.organization нет обязательного поля inn'");
		КонецЕсли;
		
		Если СтрДлина(СвойстваОрганизации.inn) = 10 Тогда
			Если НЕ СвойстваОрганизации.Свойство("kpp") Или Не ЗначениеЗаполнено(СвойстваОрганизации.kpp) Или СтрДлина(СвойстваОрганизации.kpp) <> 9 Тогда
				Ошибка = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Для юридического лица длина обязательного поля parameters.organization.kpp должна быть равна 9'");
			КонецЕсли;
		ИначеЕсли СтрДлина(СвойстваОрганизации.inn) <> 12 Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Длина обязательного поля inn в структуре parameters.organization должна быть равна 10 или 12'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("type")
		ИЛИ Не ЗначениеЗаполнено(Параметры.type) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре parameters отсутствует или не заполнено обязательное поле type'");
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("status")
		ИЛИ Не ЗначениеЗаполнено(Параметры.type) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре parameters отсутствует или не заполнено обязательное поле status'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуУстановитьРезультатыОпросаПоОтчетамПрошлыхПериодов(УчетнаяСистема, Параметры, РезультатВыполнения, Ошибка, СообщениеОбОшибке)
	
	Организация = ОрганизацияИзПараметров(Параметры, Ошибка, СообщениеОбОшибке);
	
	Если Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(Параметры.type) = НРег(Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ИмяЗадачиПомощникаПодготовкиОтчетности()) Тогда
		
		ПроверитьВозможностьУстановкиРезультатаОпросаПоОтчетамПрошлыхПериодов(Организация, Ошибка, СообщениеОбОшибке);
		Если Ошибка Тогда
			Возврат;
		КонецЕсли;
		
		Правило = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ПравилоДляПомощникаПодготовкиОтчетности(Организация);
		
		Если Не ЗначениеЗаполнено(Правило) Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не определено правило предоставления отчетов по коду задачи %1.'"),
				Параметры.type);
			Возврат;
		КонецЕсли;
		
		РезультатТеста = РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.НовыйРезультатыТеста();
		РезультатТеста.Организация = Организация;
		РезультатТеста.Правило = Правило;
		
		Если Параметры.status = "ВсеОтчетыСданы" Тогда
			
			РезультатТеста.ДобавленыПрошлыеПериоды = Ложь;
			РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ЗарегистрироватьИзменения(РезультатТеста);
			
		КонецЕсли;
		
	Иначе
		Ошибка = Истина;
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установка результатов опроса по отчетам прошлых периодов для type=%1 не поддерживается.'"),
			Параметры.type);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьУстановкиРезультатаОпросаПоОтчетамПрошлыхПериодов(Организация, Ошибка, СообщениеОбОшибке)
	
	ТребуетсяТестОтчетности = Обработки.МониторНалоговИОтчетности.ТребуетсяТестОтчетностиПрошлыхПериодовПоУСН(Организация);
	РезультатТеста = Обработки.МониторНалоговИОтчетности.РезультатПроверкиОтчетностиПрошлыхПериодов(Организация);
	Если Не ТребуетсяТестОтчетности И Не РезультатТеста.ПроверкаВыполнена Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Опрос по отчетности прошлых периодов не требуется, поэтому результаты установить невозможно.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОпросПоОплатамПрошлыхПериодов

Функция ИмяМетодаУстановитьРезультатыОпросаПоОплатамПрошлыхПериодов()
	
	Возврат "Обработка/МониторНалоговИОтчетности/ОтчетыПрошлыхПериодов/УстановитьРезультатыОпросаПоОплатам";
	
КонецФункции

Процедура ПроверитьПараметрыКомандыУстановитьРезультатыОпросаПоОплатамПрошлыхПериодов(Параметры, Ошибка, СообщениеОбОшибке)
	
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не указаны параметры выполнения метода'");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("organization") Тогда
		
		СвойстваОрганизации = Параметры.organization;
		
		Если НЕ СвойстваОрганизации.Свойство("inn") Или Не ЗначениеЗаполнено(СвойстваОрганизации.inn) Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'В структуре parameters.organization нет обязательного поля inn'");
		КонецЕсли;
		
		Если СтрДлина(СвойстваОрганизации.inn) = 10 Тогда
			Если НЕ СвойстваОрганизации.Свойство("kpp") Или Не ЗначениеЗаполнено(СвойстваОрганизации.kpp) Или СтрДлина(СвойстваОрганизации.kpp) <> 9 Тогда
				Ошибка = Истина;
				СообщениеОбОшибке = НСтр("ru = 'Для юридического лица длина обязательного поля parameters.organization.kpp должна быть равна 9'");
			КонецЕсли;
		ИначеЕсли СтрДлина(СвойстваОрганизации.inn) <> 12 Тогда
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Длина обязательного поля inn в структуре parameters.organization должна быть равна 10 или 12'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("type")
		ИЛИ Не ЗначениеЗаполнено(Параметры.type) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре parameters отсутствует или не заполнено обязательное поле type'");
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("status")
		ИЛИ Не ЗначениеЗаполнено(Параметры.type) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'В структуре parameters отсутствует или не заполнено обязательное поле status'");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКомандуУстановитьРезультатыОпросаПоОплатамПрошлыхПериодов(УчетнаяСистема, Параметры, РезультатВыполнения, Ошибка, СообщениеОбОшибке)
	
	Организация = ОрганизацияИзПараметров(Параметры, Ошибка, СообщениеОбОшибке);
	
	Если Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	КодЗадачи = "";
	Если НРег(Параметры.type) = НРег(ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН()) Тогда
		КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН();
	ИначеЕсли НРег(Параметры.type) = НРег(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП()) Тогда
		КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодЗадачи) Тогда
		
		Если Параметры.status = "ЗадолженностиНет" Тогда
			
			Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ЗаписатьТестПоНалогуПройден(Организация, КодЗадачи);
			
		КонецЕсли;
		
	Иначе
		Ошибка = Истина;
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установка результатов опроса по оплатам налогов прошлых периодов для type=%1 не поддерживается.'"),
			Параметры.type);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Организация

Функция ОрганизацияИзПараметров(Параметры, Ошибка, СообщениеОбОшибке)
	
	Если Параметры.Свойство("organization") Тогда
		ИНН = Параметры.organization.inn;
		КПП = Неопределено;
		Параметры.organization.Свойство("kpp");
		Организация = Справочники.Организации.НайтиОрганизацию(ИНН, КПП);
		Если ЗначениеЗаполнено(Организация) Тогда
			Возврат Организация;
		Иначе
			Ошибка = Истина;
			СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Не найдена организация с ИНН/КПП: %1/%2'"), ИНН, КПП);
		КонецЕсли;
	Иначе
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(Организация) Тогда
			Возврат Организация;
		Иначе
			Ошибка = Истина;
			СообщениеОбОшибке = НСтр("ru = 'Не может быть определена основная организация для выполнения команды'")
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиОрганизацию(Параметры, Ошибка, СообщениеОбОшибке)
	
	Если Параметры.Свойство("organization") Тогда
		ИНН = Параметры.organization.inn;
		КПП = Неопределено;
		Параметры.organization.Свойство("kpp");
		Организация = Справочники.Организации.НайтиОрганизацию(ИНН, КПП);
		Если ЗначениеЗаполнено(Организация) Тогда
			Возврат Организация;
		Иначе
			Ошибка = Истина;
			СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Не найдена организация с ИНН/КПП: %1/%2 для выполнения команды'"), ИНН, КПП);
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("entrepreneur") Тогда
		ИНН = Параметры.entrepreneur.inn;
		Организация = Справочники.Организации.НайтиОрганизацию(ИНН);
		Если ЗначениеЗаполнено(Организация) Тогда
			Возврат Организация;
		Иначе
			Ошибка = Истина;
			СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Не найден предприниматель с ИНН: %1' для выполнения команды"), ИНН);
		КонецЕсли;
	Иначе
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не может быть определена организация для выполнения команды'")
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область НастройкиИнтеграции

Процедура УстановитьПраваПользователяИнтеграции(НастройкаИнтеграции)
	
	Пользователь = ПользовательИнтеграции(НастройкаИнтеграции);
	Если ЗначениеЗаполнено(Пользователь) Тогда
		СлужебныйПользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Служебный");
		Если СлужебныйПользователь Тогда
			УправлениеДоступомБП.УстановитьПраваСлужебногоПользователяИнтеграцииСБанком(Пользователь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПользовательИнтеграции(НастройкаИнтеграции)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиУчетныхСистем.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхСистем КАК НастройкиУчетныхСистем
	|ГДЕ
	|	НастройкиУчетныхСистем.УчетнаяСистема = &УчетнаяСистема
	|	И НЕ НастройкиУчетныхСистем.УчетнаяСистема.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("УчетнаяСистема", НастройкаИнтеграции);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

#КонецОбласти

#Область ИзменениеСтатусаОтчета

Процедура ПроверитьКорректностьДанныхОтчета(ДанныеОтчета, Ошибка, СообщениеОбОшибке)
	
	ИмяЕдинственногоОбязательногоПоля = "status";
	Если Не ДанныеОтчета.Свойство(ИмяЕдинственногоОбязательногоПоля) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'В структуре JSON отсутствует обязательное поле %1'"), ИмяЕдинственногоОбязательногоПоля);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСтатусОтчета(УчетнаяСистема, ИдентификаторОбъекта, ДанныеОтчета, Ошибка, СообщениеОбОшибке)
	
	СсылкаНаОбъект = РегистрыСведений.ДокументыИнтеграцииСБанком.ДокументПоИдентификатору(УчетнаяСистема, ИдентификаторОбъекта);
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Не найден объект с идентификатором %1'"), ИдентификаторОбъекта);
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	ТипРегламентированныйОтчет = Тип("ДокументСсылка.РегламентированныйОтчет");
	Если ТипОбъекта <> ТипРегламентированныйОтчет Тогда
		Ошибка = Истина;
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'По идентификатору %1 найден объект типа %2. Ожидается тип %3.'"),
			ИдентификаторОбъекта, ТипОбъекта, ТипРегламентированныйОтчет);
		Возврат;
	КонецЕсли;
	
	ТекущийСтатус = РегламентированнаяОтчетность.СохраненныйСтатусОтправкиРеглОтчета(СсылкаНаОбъект);
	НовыйСтатус = ДанныеОтчета.status;
	
	Если Не ЗначениеЗаполнено(ТекущийСтатус) Или ТекущийСтатус <> НовыйСтатус Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СсылкаНаОбъект", СсылкаНаОбъект);
		СтруктураПараметров.Вставить("Статус", НовыйСтатус);
		
		Попытка
			ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
		Исключение
			ЗаписьЖурналаРегистрации(ИнтеграцияСБанкамиКлиентСервер.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, УчетнаяСистема.Метаданные(), УчетнаяСистема,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
