&НаКлиенте
Перем ИдентификаторСтрокиПроводки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// Очистим параметры, принадлежащие копируемой типовой операции
	// т.к. Параметры типовой операции подчиненный справочник
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ОчиститьПараметрыТабличныхЧастей();
	КонецЕсли;

	Если Параметры.Ключ.Пустая() Тогда
		
		// Если типовая операция введена на основании документа операции или копированием, 
		// то необходимо получить описание типов в форме
		Если Объект.ДвиженияРегистров.Количество() > 0 Тогда
			ПолучитьОписанияТиповИзМетаданных();
		КонецЕсли;
		Если Объект.Хозрасчетный.Количество() > 0 Тогда
			УстановитьДоступностьИОтображениеПолейХозрасчетный();
		КонецЕсли;
		
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПараметрыТиповойОперации.Отбор,
		"Владелец",
		Объект.Ссылка,
		,
		,
		Истина);

	УстановитьУсловноеОформление();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьДоступностьИОтображениеПолейХозрасчетный();
	ПолучитьОписанияТиповИзМетаданных();
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьТаблицыФормыВТабличнуюЧастьНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьИОтображениеПолейХозрасчетный();
	ПолучитьОписанияТиповИзМетаданных();
	СоздатьНовыеПараметры();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПараметрыТиповойОперации.Отбор,
		"Владелец",
		Объект.Ссылка,
		,
		,
		Истина);
	
	Элементы.ПараметрыТиповойОперации.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененПараметр" И Параметр <> Неопределено Тогда
		СтруктураПараметра = Параметр;
		ОбновитьОтображениеПараметраНаКлиенте(СтруктураПараметра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)
	
	АдресСпискаРегистров = ПодготовитьСписокРегистровДляНастройки();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСпискаРегистров", АдресСпискаРегистров);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСоставРегистровЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ТиповыеОперации.Форма.ФормаНастройки", СтруктураПараметров, ЭтотОбъект, , , ,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиОперацию(Команда)
	
	Если ОбщегоНазначенияБПКлиент.НадоЗаписать(ЭтотОбъект) Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = НСтр("ru = 'Ввод операции возможен после записи данных.'")
			+ Символы.ПС
			+ НСтр("ru = 'Записать данные?'");
		ДополнительныеПараметры = Новый Структура("ДальнейшееДействие", "ВвестиОперацию");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаписатьФормуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0);
	Иначе
		ВвестиТиповуюОперацию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХозрасчетный

&НаКлиенте
Процедура ХозрасчетныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	ИдСтроки      = Элементы.Хозрасчетный.ТекущаяСтрока;
	
	Если ИдСтроки <> ИдентификаторСтрокиПроводки Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоДт1", "ХозрасчетныйСубконтоДт2", "ХозрасчетныйСубконтоДт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоКт1", "ХозрасчетныйСубконтоКт2", "ХозрасчетныйСубконтоКт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтотОбъект, ПоляФормы, Неопределено, Истина, Ложь);
		
		ИдентификаторСтрокиПроводки = ИдСтроки;
	
	КонецЕсли;
	
	// Создадим параметр Сумма для новой строки
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(ТекущиеДанные.Сумма) Тогда
		Параметр									 = ПараметрПоИмениТипу("Сумма", ОписаниеТиповСумма, Ложь);
		ТекущиеДанные.Сумма							 = Параметр;
		ТекущиеДанные.СуммаОтображение				 = "<" + Параметр + ">";
		Элементы.ХозрасчетныйСумма.ОграничениеТипа	 = Новый ОписаниеТипов;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВПроводке(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)
	
	ИдСтроки = Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбработатьИзменениеСчета(ИдСтроки, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)
	
	ИдСтроки = Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбработатьИзменениеСчета(ИдСтроки,"Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйНачалоВыбораЗначения(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СвязьПоВладельцу = Неопределено;
	ТекСтрока = Элементы.Хозрасчетный.ТекущиеДанные;
	ИмяПоля = СтрЗаменить(Элемент.Имя, "Хозрасчетный","");
	Если СтрНайти(ИмяПоля,"Сумма") > 0 Тогда
		ТипЗначения = ОписаниеТиповСумма;
	ИначеЕсли СтрНайти(ИмяПоля,"Количество") > 0 Тогда
		ТипЗначения = ОписаниеТиповКоличество;
	ИначеЕсли СтрНайти(ИмяПоля,"Подразделение") > 0 Тогда
		ТипЗначения = ОписаниеТиповПодразделение;
	ИначеЕсли СтрНайти(ИмяПоля,"Субконто") > 0 Тогда
		НомерСубконто = Прав(ИмяПоля, 1);
		ДтКт = Сред(ИмяПоля, 9,2);
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ТекСтрока["Счет" + ДтКт]);
		ТипЗначения = ДанныеСчета["ВидСубконто"+ НомерСубконто + "ТипЗначения"];
		СвязьПоВладельцу = ОпределитьСвязьПоВладельцу(ТекСтрока, ТипЗначения, ДтКт, ДанныеСчета);
	КонецЕсли;
	
	ВыборЗначенияХозрасчетный(ТекСтрока, ИмяПоля, ТипЗначения, СвязьПоВладельцу);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.Хозрасчетный.ТекущиеДанные;
	ИмяПоля = СтрЗаменить(Элемент.Имя, "Хозрасчетный","");
	Если СтрНайти(ИмяПоля,"Сумма") > 0 Тогда
		ТекСтрока[ИмяПоля] = 0;
	Иначе
		ТекСтрока[ИмяПоля] = Неопределено;
	КонецЕсли;
	ТекСтрока[ИмяПоля + "Отображение"] = "";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУниверсальные

&НаКлиенте
Процедура Подключаемый_ОбработатьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	// Получим необходимые реквизиты
	Строка				 = Элемент.Родитель.ТекущиеДанные;
	ИмяТаблицы			 = Элемент.Родитель.Имя;
	ИмяПоляОтображение	 = СтрЗаменить(Элемент.Имя, ИмяТаблицы,"");
	ИмяПоля				 = СтрЗаменить(ИмяПоляОтображение,"Отображение","");
	СтрокиДополнительныхКолонок = ДополнительныеКолонкиТаблиц.НайтиСтроки(Новый Структура("ИмяРегистра, Аналитика", ИмяТаблицы, ИмяПоля));
	Если СтрокиДополнительныхКолонок.Количество() > 0 Тогда
		СтрокаДопКолонок = СтрокиДополнительныхКолонок[0];
	Иначе
		Возврат;
	КонецЕсли;
	ЭтоРегистрСведений				 = ЭтоРегистрСведений(СтрокаДопКолонок.ТипРегистра);
	ЭтоПериодическийРегистрСведений	 = ЭтоРегистрСведений И СтрокаДопКолонок.ПериодическийОстаточныйРегистр;
	ОтображатьНеИзменять			 = ЭтоПериодическийРегистрСведений И ЭтоРесурс(СтрокаДопКолонок.ТипПоляРегистра);
	// Подготовим значения для структуры
	ТипЗначения = СтрокаДопКолонок.ТипЗначения;
	Если ОтображатьНеИзменять И Строка[ИмяПоля+"НеИзменятьЗначение"] Тогда
		ТекущееЗначение = Истина;
	ИначеЕсли Строка[ИмяПоляОтображение] <> "" И Строка[ИмяПоля] = Неопределено Тогда
		ЗначениеОтображения = Строка[ИмяПоляОтображение];
		ЗначениеОтображения = СтрЗаменить(ЗначениеОтображения, "<", "");
		ЗначениеОтображения = СтрЗаменить(ЗначениеОтображения, ">", "");
		ТекущееЗначение = ЗначениеОтображения;
	Иначе
		ТекущееЗначение = Строка[ИмяПоля];
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка",				 Строка);
	ДополнительныеПараметры.Вставить("Аналитика",			 ИмяПоля);
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть",		 "ДвиженияРегистров");
	ДополнительныеПараметры.Вставить("ОтображатьНеИзменять", ОтображатьНеИзменять);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВыбранноеЗначениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец",	 Объект.Ссылка);
	ПараметрыОтбора.Вставить("ТипПараметра", ТипЗначения);
	ПараметрыОтбора.Вставить("Значение",	 ТекущееЗначение);
	ПараметрыОтбора.Вставить("ОтображатьНеИзменять", ОтображатьНеИзменять);
	ОткрытьФорму("Справочник.ТиповыеОперации.Форма.ФормаВариантаЗаполнения", ПараметрыОтбора, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьПриИзменении(Элемент)
	
	Строка				 = Элемент.Родитель.ТекущиеДанные;
	ИмяТаблицы			 = Элемент.Родитель.Имя;
	ИмяПоляОтображение	 = СтрЗаменить(Элемент.Имя, ИмяТаблицы,"");
	ИмяПоля				 = СтрЗаменить(ИмяПоляОтображение,"Отображение","");

	УстановитьЗначениеПоОтображению(Строка, ИмяПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьПередУдалением(Элемент, Отказ)
	
	// Всегда оставляем одну строку, для того чтобы заполнить
	// табличную часть Движения хотя бы пустыми значениями
	Отказ = (ЭтотОбъект[Элемент.Имя].Количество() = 1);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыПараметрыТиповойОперации

&НаКлиенте
Процедура ПараметрыТиповойОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Параметры.Ключ.Пустая() Тогда
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура("ДальнейшееДействие", "ДобавитьПараметр");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросЗаписатьФормуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Режим = РежимДиалогаВопрос.ДаНет;
		Текст = НСтр("ru = 'Работа с параметрами возможна после записи данных.'")
			+ Символы.ПС
			+ НСтр("ru = 'Записать данные?'");
		ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКоманднойПанелиПараметрыТиповойОперации

&НаКлиенте
Процедура ПереместитьПараметрВверх(Команда)
	
	// Получим текущий порядок
	ТекСтрока = Элементы.ПараметрыТиповойОперации.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийПорядок = ТекСтрока.ПорядокПараметра;
	ИзменитьПорядокПараметраНаСервере(ТекущийПорядок, "Вверх");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПараметрВниз(Команда)
	
	// Получим текущий порядок
	ТекСтрока = Элементы.ПараметрыТиповойОперации.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийПорядок = ТекСтрока.ПорядокПараметра;
	ИзменитьПорядокПараметраНаСервере(ТекущийПорядок, "Вниз");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Для Сч = 1 По 3 Цикл
	
		///////////////////////////////
		// Субконто Дт
	
		// Пустое субконто в виде <...>

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Хозрасчетный.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Хозрасчетный.СубконтоДт" + Сч + "Отображение", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
	
		
		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться тоже всегда.
	
		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоДт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Хозрасчетный.СубконтоДт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
			
		///////////////////////////////
		// Субконто Кт

		// Пустое субконто в виде <...>

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Хозрасчетный.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Хозрасчетный.СубконтоКт" + Сч + "Отображение", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
	

		// Не показываем субконто совсем, если его нет на счете, чтобы не занимать строку на экране,
		// в том числе и первое субконто, т.к. первой строкой идет счет, 
		// который есть всегда, то и колонка тоже будет отображаться тоже всегда.

		ЭлементУО = УсловноеОформление.Элементы.Добавить();

		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСубконтоКт" + Сч);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Хозрасчетный.СубконтоКт" + Сч + "Доступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		
	КонецЦикла;


	///////////////////////////////
	// Подразделение Дт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ПодразделениеДтОтображение", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ПодразделениеДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	///////////////////////////////
	// Подразделение Кт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ПодразделениеКтОтображение", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));


	// ХозрасчетныйПодразделениеКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйПодразделениеКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ПодразделениеКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	///////////////////////////////
	// Количество Дт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйКоличествоДт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.КоличественныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	///////////////////////////////
	// Количество Кт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйНадписьКоличествоКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	
	// ХозрасчетныйКоличествоКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйКоличествоКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.КоличественныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);


	///////////////////////////////
	// Валюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ВалютныйДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ХозрасчетныйВалютнаяСуммаКт, ХозрасчетныйВалютаКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютнаяСуммаКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйВалютаКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.ВалютныйКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	///////////////////////////////
	// НУ, ВР, ПР

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСуммаНуДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСуммаПрДт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСуммаВрДт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.НалоговаяСуммаДтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ХозрасчетныйСуммаНуКт, ХозрасчетныйСуммаПрКт, ХозрасчетныйСуммаВрКт

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСуммаНуКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСуммаПрКт");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ХозрасчетныйСуммаВрКт");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Хозрасчетный.НалоговаяСуммаКтДоступность", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПараметр(Значение)
	
	Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПараметрыТиповойОперации");
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегистрНакопления(Значение)

	Возврат Значение = Перечисления.ТипыРегистров.РегистрНакопления;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегистрСведений(Значение)

	Возврат Значение = Перечисления.ТипыРегистров.РегистрСведений;

КонецФункции

&НаСервереБезКонтекста
Функция ТипРегистраСтрокой(Значение)

	Если Значение = Перечисления.ТипыРегистров.РегистрНакопления Тогда
		Возврат "РегистрыНакопления";
	Иначе
		Возврат "РегистрыСведений"
	КонецЕсли;

КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоРесурс(Значение)

	Возврат Значение = Перечисления.ТипыПолейРегистра.Ресурс;

КонецФункции

&НаСервере
Функция ЭтоПериодическийОстаточныйРегистр(ТипРегистра, ИмяРегистра)
	
	Если ЭтоРегистрНакопления(ТипРегистра) Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
		ПериодическийОстаточныйРегистр = МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Иначе
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
		НеПериодический = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		ПериодическийОстаточныйРегистр = (МетаданныеРегистра.ПериодичностьРегистраСведений <> НеПериодический);
	КонецЕсли;
	
	Возврат ПериодическийОстаточныйРегистр;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеПоОтображению(Строка, Поле)

	Строка[Поле] = Строка[Поле+"Отображение"];

КонецПроцедуры

&НаКлиенте
Процедура ВвестиТиповуюОперацию()
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("СпособЗаполнения", "ТиповаяОперация");
	ЗначенияЗаполнения.Вставить("ТиповаяОперация", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Содержание", Объект.Наименование);
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьСвязьПоВладельцу(ТекСтрока, ТипЗначения, ДтКт, ДанныеСчета)
	
	// Определим тип владельца
	ИскомоеОписаниеТипа = ОписаниеТипаВладельца(ТипЗначения);
	
	СвязьПоВладельцу = Неопределено;
	Если ИскомоеОписаниеТипа <> Неопределено Тогда
		Для НомерСубконто = 1 По 3 Цикл
			ТипЗначенияСубконто = ДанныеСчета["ВидСубконто"+ НомерСубконто + "ТипЗначения"];
			Если ТипЗначенияСубконто = ИскомоеОписаниеТипа Тогда
				Владелец = ТекСтрока["Субконто" + ДтКт + НомерСубконто];
				Если ЭтоПараметр(Владелец) ИЛИ (ТипЗнч(Владелец) = Тип("Строка")) Тогда
					СвязьПоВладельцу = "Параметр";
				Иначе
					СвязьПоВладельцу = Владелец;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СвязьПоВладельцу;
	
КонецФункции

#Область ПодготовкаФормы

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ОписаниеТиповВалюта			 = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ОписаниеТиповКоличество		 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	ОписаниеТиповПодразделение	 = БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	ОписаниеТиповСумма			 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	
	ЗаполнитьТаблицуРегистров();
	
	СоздатьИЗаполнитьТаблицыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПараметрыТабличныхЧастей()

	// Табличная часть Хозрасчетный
	КолонкиХозрасчетный = Объект.Хозрасчетный.Выгрузить().Колонки;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Хозрасчетный Цикл
		Для Каждого Колонка Из КолонкиХозрасчетный Цикл
			Если ЭтоПараметр(СтрокаТабличнойЧасти[Колонка.Имя]) Тогда
				// Параметр заменяем на строку с именем нового параметра
				СтрокаТабличнойЧасти[Колонка.Имя] = Строка(СтрокаТабличнойЧасти[Колонка.Имя]) + " *";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Табличная часть Движения
	Для Каждого СтрокаТабличнойЧасти Из Объект.ДвиженияРегистров Цикл
		Если ЭтоПараметр(СтрокаТабличнойЧасти.Значение) Тогда
			СтрокаТабличнойЧасти.Значение = Строка(СтрокаТабличнойЧасти.Значение) + " *";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПолучитьОписанияТиповИзМетаданных()
	
	// Для каждой строки Движения заполняем ОписаниеТипа из метаданных регистра
	Для Каждого Строка Из Объект.ДвиженияРегистров Цикл
		ТипРегистра = ТипРегистраСтрокой(Строка.ТипРегистра);
		ИмяРегистра = Строка.ИмяРегистра;
		
		МетаданныеРегистра = Метаданные[ТипРегистра][ИмяРегистра];
		Если Строка.ТипПоляРегистра = Перечисления.ТипыПолейРегистра.Измерение Тогда
			Строка.ОписаниеТипа = МетаданныеРегистра.Измерения[Строка.Аналитика].Тип;
		ИначеЕсли ЭтоРесурс(Строка.ТипПоляРегистра) Тогда
			Строка.ОписаниеТипа = МетаданныеРегистра.Ресурсы[Строка.Аналитика].Тип;
		Иначе
			Строка.ОписаниеТипа = МетаданныеРегистра.Реквизиты[Строка.Аналитика].Тип
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИОтображениеПолейХозрасчетный()

	МассивДтКт = Новый Массив;
	МассивДтКт.Добавить("Дт");
	МассивДтКт.Добавить("Кт");
	Для Каждого Строка Из Объект.Хозрасчетный Цикл
		
		Для Каждого ДтКт Из МассивДтКт Цикл
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Строка["Счет"+ДтКт]);
			ПоляОбъекта = Новый Структура;
			Для Индекс = 1 По 3 Цикл
				ПоляОбъекта.Вставить("Субконто"+Индекс, "Субконто"+ДтКт+Индекс);
				УстановитьОтображениеКолонки(Строка, "Субконто" + ДтКт + Индекс);
			КонецЦикла;
			БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Строка["Счет"+ДтКт], Строка, ПоляОбъекта, Ложь);
			Строка["Валютный"		 + ДтКт + "Доступность"] = СвойстваСчета.Валютный;
			Строка["Количественный"	 + ДтКт + "Доступность"] = СвойстваСчета.Количественный;
			Строка["Подразделение"	 + ДтКт + "Доступность"] = СвойстваСчета.УчетПоПодразделениям;
			Строка["НалоговаяСумма"	 + ДтКт + "Доступность"] = СвойстваСчета.НалоговыйУчет;
			УстановитьОтображениеКолонки(Строка, "Количество"	 + ДтКт);
			УстановитьОтображениеКолонки(Строка, "Подразделение" + ДтКт);
			УстановитьОтображениеКолонки(Строка, "СуммаНу"		 + ДтКт);
			УстановитьОтображениеКолонки(Строка, "СуммаПр"		 + ДтКт);
			УстановитьОтображениеКолонки(Строка, "СуммаВр"		 + ДтКт);
			УстановитьОтображениеКолонки(Строка, "ВалютнаяСумма" + ДтКт);
		КонецЦикла;
		УстановитьОтображениеКолонки(Строка, "Сумма");
		ЗаполнитьНадписиВПроводке(Строка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеКолонки(Строка, ИмяКолонки)
	
	Значение = Строка[ИмяКолонки];
	Если ЭтоПараметр(Значение) ИЛИ (ТипЗнч(Значение) = Тип("Строка") И СтрНайти(Значение," *") <> 0) Тогда
		Значение = "<" + Значение + ">";
	КонецЕсли;
	Строка[ИмяКолонки+"Отображение"] = Значение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)

	Проводка.НадписьНУ = НСтр("ru = 'НУ:'");
	Проводка.НадписьПР = НСтр("ru = 'ПР:'");
	Проводка.НадписьВР = НСтр("ru = 'ВР:'");
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров()

	ДвиженияОперации = Метаданные.Документы.ОперацияБух.Движения;
	
	Регистры.Очистить();

	Для Каждого МетаданныеРегистра Из ДвиженияОперации Цикл

		Если МетаданныеРегистра.Имя = "Хозрасчетный" ИЛИ Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Регистр				 = Регистры.Добавить();
		Регистр.ИмяРегистра	 = МетаданныеРегистра.Имя;
		ПолноеИмя			 = МетаданныеРегистра.ПолноеИмя();

		ПозицияТочки		 = СтрНайти(ПолноеИмя, ".");
		ИмяТипаРегистра		 = Лев(ПолноеИмя, ПозицияТочки - 1);
		Если ИмяТипаРегистра = "РегистрНакопления" Тогда
			Регистр.ТипРегистра = Перечисления.ТипыРегистров.РегистрНакопления;
		Иначе
			Регистр.ТипРегистра = Перечисления.ТипыРегистров.РегистрСведений;
		КонецЕсли;
		Регистр.Синоним		 = МетаданныеРегистра.Синоним;
		Регистр.ЕстьДвижения = Объект.ДвиженияРегистров.НайтиСтроки(Новый Структура("ИмяРегистра", Регистр.ИмяРегистра)).Количество()>0;
		
	КонецЦикла;

	// Первым показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляТабличнойЧастиХозрасчетный

&НаСервере
Процедура ОбработатьИзменениеСчета(ИдСтроки, ДтКт);

	Строка = Объект.Хозрасчетный.НайтиПоИдентификатору(ИдСтроки);
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Строка["Счет"+ДтКт]);
	
	// Обнуляем предыдущие субконто
	Для Индекс = 1 По 3 Цикл
		Строка["Субконто" + ДтКт + Индекс]					 = "";
		Строка["Субконто" + ДтКт + Индекс + "Отображение"]	 = "";
		Строка["Субконто" + ДтКт + Индекс + "Доступность"]	 = Ложь;
	КонецЦикла;
	
	Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
		ТипПараметра = ДанныеСчета["ВидСубконто"+Индекс+"ТипЗначения"];
		// Если Тип один, то используем его, так как он в единственном числе, например Контрагент
		// Если составной тип, то используем название субконто, например Расчетные документы
		Если ТипПараметра.Типы().Количество() = 1 Тогда
			ИмяПараметра = Строка(ТипПараметра.Типы()[0]);
		Иначе
			ИмяПараметра = ДанныеСчета["ВидСубконто"+Индекс+"Наименование"]
		КонецЕсли;
		// Ищем параметр по Типу
		Параметр = ПараметрПоИмениТипу(ИмяПараметра, ТипПараметра, Ложь);
		Строка["Субконто" + ДтКт + Индекс]					 = Параметр;
		Строка["Субконто" + ДтКт + Индекс + "Отображение"]	 = "<"+Параметр+">";
		Строка["Субконто" + ДтКт + Индекс + "Доступность"]	 = Истина;
		Элементы["ХозрасчетныйСубконто" + ДтКт + Индекс].ПодсказкаВвода = ИмяПараметра;

	КонецЦикла;
	Если ДанныеСчета.Количественный Тогда
		Параметр = ПараметрПоИмениТипу("Количество", ОписаниеТиповКоличество, Истина);
		Строка["Количество" + ДтКт]						 = Параметр;
		Строка["Количество" + ДтКт + "Отображение"]		 = "<"+Параметр+">";
	Иначе
		Строка["Количество" + ДтКт]						 = 0;
		Строка["Количество" + ДтКт + "Отображение"]		 = "";
	КонецЕсли;
	Если ДанныеСчета.УчетПоПодразделениям Тогда
		Параметр = ПараметрПоИмениТипу("Подразделение", ОписаниеТиповПодразделение, Ложь);
		Строка["Подразделение" + ДтКт]					 = Параметр;
		Строка["Подразделение" + ДтКт + "Отображение"]	 = "<"+Параметр+">";
	Иначе
		Строка["Подразделение" + ДтКт]					 = Неопределено;
		Строка["Подразделение" + ДтКт + "Отображение"]	 = "";
	КонецЕсли;
	Если ДанныеСчета.НалоговыйУчет Тогда
		Параметр = ПараметрПоИмениТипу("Сумма", ОписаниеТиповСумма, Ложь);
		Строка["СуммаНУ" + ДтКт]						 = Параметр;
		Строка["СуммаНУ" + ДтКт + "Отображение"]		 = "<"+Параметр+">";
		Строка["СуммаПР" + ДтКт]						 = 0;
		Строка["СуммаПР" + ДтКт + "Отображение"]		 = "";
		Строка["СуммаВР" + ДтКт]						 = 0;
		Строка["СуммаВР" + ДтКт + "Отображение"]		 = "";
	Иначе
		Строка["СуммаНУ" + ДтКт]						 = 0;
		Строка["СуммаНУ" + ДтКт + "Отображение"]		 = "";
		Строка["СуммаПР" + ДтКт]						 = 0;
		Строка["СуммаПР" + ДтКт + "Отображение"]		 = "";
		Строка["СуммаВР" + ДтКт]						 = 0;
		Строка["СуммаВР" + ДтКт + "Отображение"]		 = "";
	КонецЕсли;
	Если ДанныеСчета.Валютный Тогда
		Параметр = ПараметрПоИмениТипу("Валютная сумма", ОписаниеТиповСумма, Истина);
		Строка["Валюта"			 + ДтКт]				 = ОписаниеТиповВалюта.ПривестиЗначение(Строка["Валюта" + ДтКт]);
		Строка["Валюта"			 + ДтКт]				 = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		Строка["ВалютнаяСумма"	 + ДтКт]				 = Параметр;
		Строка["ВалютнаяСумма"	 + ДтКт + "Отображение"] = "<"+Параметр+">";
	Иначе
		Строка["Валюта"			 + ДтКт]				 = NULL;
		Строка["ВалютнаяСумма"	 + ДтКт]				 = NULL;
		Строка["ВалютнаяСумма"	 + ДтКт + "Отображение"] = NULL;
	КонецЕсли;
	
	Строка["Подразделение"	 + ДтКт + "Доступность"]	 = ДанныеСчета.УчетПоПодразделениям;
	Строка["Валютный"		 + ДтКт + "Доступность"]	 = ДанныеСчета.Валютный;
	Строка["Количественный"	 + ДтКт + "Доступность"]	 = ДанныеСчета.Количественный;
	Строка["НалоговаяСумма"	 + ДтКт + "Доступность"]	 = ДанныеСчета.НалоговыйУчет;
	
	ЗаполнитьНадписиВПроводке(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияХозрасчетный(Строка, Аналитика, ТипАналитики, СвязьПоВладельцу)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка",			 Строка);
	ДополнительныеПараметры.Вставить("Аналитика",		 Аналитика);
	ДополнительныеПараметры.Вставить("ТабличнаяЧасть",	 "Хозрасчетный");
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьВыбранноеЗначениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец",	 Объект.Ссылка);
	ПараметрыОтбора.Вставить("ТипПараметра", ТипАналитики);
	ПараметрыОтбора.Вставить("Значение",	 Строка[Аналитика]);
	ПараметрыОтбора.Вставить("СвязьПоВладельцу", СвязьПоВладельцу);
	ОткрытьФорму("Справочник.ТиповыеОперации.Форма.ФормаВариантаЗаполнения", ПараметрыОтбора, ЭтотОбъект, , , ,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляТабличнойЧастиДвижения

&НаСервере
Функция ПодготовитьСписокРегистровДляНастройки()

	// Актуализируем информацию о наличии движений
	Для каждого СтрокаРегистра Из Регистры Цикл
		СтрокаРегистра.ЕстьДвижения = Объект.ДвиженияРегистров.НайтиСтроки(Новый Структура("ИмяРегистра", СтрокаРегистра.ИмяРегистра)).Количество()>0;
	КонецЦикла;
	
	// Поместим таблицу Регистры во временное хранилище
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Регистры"), УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя)
	
	Для Каждого ИзмененныйРегистр Из РезультатДействийПользователя Цикл
		
		ИмяРегистра = ИзмененныйРегистр.Значение;
		
		// Найдем регистр в коллекции Регистры
		Отбор = Новый Структура("ИмяРегистра", ИмяРегистра);
		РезультатПоиска = Регистры.НайтиСтроки(Отбор);
		Если РезультатПоиска.Количество() = 0 Тогда
			// Имя регистра неизвестно в этой форме
			Продолжить;
		КонецЕсли;
		Регистр				 = РезультатПоиска[0];
		Регистр.ЕстьДвижения = ИзмененныйРегистр.Пометка;
		ТипРегистра			 = Регистр.ТипРегистра;
		
		// Удалим данные по отключенному регистру
		Если НЕ ИзмененныйРегистр.Пометка Тогда
			СтрокиСпискаРегистров = Регистры.НайтиСтроки(Новый Структура("ИмяРегистра, ТипРегистра", ИмяРегистра, ТипРегистра));
			Для Каждого СтрокаСпискаРегистров Из СтрокиСпискаРегистров Цикл
				СтруктураОтбора = Новый Структура("ИмяРегистра, ТипРегистра", ИмяРегистра, ТипРегистра);
				// Удалим строки из ТЧ Движения
				УдаляемыеСтрокиДвижения = Объект.ДвиженияРегистров.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаДвижения ИЗ УдаляемыеСтрокиДвижения Цикл
					Объект.ДвиженияРегистров.Удалить(СтрокаДвижения);
				КонецЦикла;
				УдалитьСвязанныеРеквизитыИЭлементыФормы(ИмяРегистра);
			КонецЦикла;
		Иначе
			// Добавим новый регистр
			СтруктураРезультата = Новый Структура();
			СтруктураРезультата.Вставить("ТипРегистра",	 ТипРегистра);
			СтруктураРезультата.Вставить("ИмяРегистра",	 ИмяРегистра);
			СтруктураРезультата.Вставить("Синоним",		 Регистр.Синоним);
			
			ДобавитьНовыйРегистрНаСервере(СтруктураРезультата);
			
		КонецЕсли;
	КонецЦикла;
	
	СоздатьИЗаполнитьТаблицыФормыНаСервере();

КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыйРегистрНаСервере(СтруктураСтрокаРегистра)
	
	// Определим метаданные регистра
	Если ЭтоРегистрНакопления(СтруктураСтрокаРегистра.ТипРегистра) Тогда
		МетаданныеРегистра				 = Метаданные.РегистрыНакопления[СтруктураСтрокаРегистра.ИмяРегистра];
		НеИзменятьЗначение				 = Ложь;
	Иначе
		МетаданныеРегистра				 = Метаданные.РегистрыСведений[СтруктураСтрокаРегистра.ИмяРегистра];
		НеПериодический					 = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		ЭтоПериодическийРегистрСведений	 = (МетаданныеРегистра.ПериодичностьРегистраСведений <> НеПериодический);
		НеИзменятьЗначение				 = ЭтоПериодическийРегистрСведений;
	КонецЕсли;
	
	// Структура для перебора метаданных регистра.
	СтруктураПолейРегистра = Новый Структура;
	СтруктураПолейРегистра.Вставить("Измерения", Перечисления.ТипыПолейРегистра.Измерение);
	СтруктураПолейРегистра.Вставить("Ресурсы",	 Перечисления.ТипыПолейРегистра.Ресурс);
	СтруктураПолейРегистра.Вставить("Реквизиты", Перечисления.ТипыПолейРегистра.Реквизит);

	// Заполним строки движения
	Для Каждого КлючИЗначение Из СтруктураПолейРегистра Цикл
		Для Каждого Аналитика Из МетаданныеРегистра[КлючИЗначение.Ключ] Цикл
			// Организация устанавливается из шапки документа Операция
			Если Аналитика.Имя = "Организация" Тогда
				Продолжить;
			КонецЕсли;
			// Добавляем и заполняем новую строку
			СтрокаДвижения					 = Объект.ДвиженияРегистров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтруктураСтрокаРегистра);
			СтрокаДвижения.Аналитика		 = Аналитика.Имя;
			СтрокаДвижения.Синоним			 = Аналитика.Синоним;
			СтрокаДвижения.ОписаниеТипа		 = Аналитика.Тип; 
			СтрокаДвижения.ТипПоляРегистра	 = КлючИЗначение.Значение;
			// Параметры для ресурсов у Регистров накопления ищем по имени
			ИскатьПоИмени = ЭтоРегистрНакопления(СтруктураСтрокаРегистра.ТипРегистра) И ЭтоРесурс(КлючИЗначение.Значение);
			// Для ресурсов регистра сведений используем Не изменять
			Если ЭтоРесурс(КлючИЗначение.Значение) И НеИзменятьЗначение Тогда
				СтрокаДвижения.Значение				 = "Не изменять";
				СтрокаДвижения.НеИзменятьЗначение	 = Истина;
			Иначе
				СтрокаДвижения.Значение = ПараметрПоИмениТипу(Аналитика.Синоним, Аналитика.Тип, ИскатьПоИмени);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммноеСозданиеТаблиц

&НаСервере
Процедура СоздатьИЗаполнитьТаблицыФормыНаСервере();
	
	Для Каждого СтрокаРегистра Из Регистры Цикл
		Если Не СтрокаРегистра.ЕстьДвижения Тогда
			Продолжить;
		КонецЕсли;
		СтруктураРегистра = Новый Структура;
		СтруктураРегистра.Вставить("ИмяРегистра", СтрокаРегистра.ИмяРегистра);
		СтруктураРегистра.Вставить("ТипРегистра", СтрокаРегистра.ТипРегистра);
		
		ПериодическийОстаточныйРегистр = ЭтоПериодическийОстаточныйРегистр(СтруктураРегистра.ТипРегистра, СтруктураРегистра.ИмяРегистра);
		ТипРегистра = ТипРегистраСтрокой(СтруктураРегистра.ТипРегистра);
		СинонимРегистра = Метаданные[ТипРегистра][СтрокаРегистра.ИмяРегистра].Синоним;
		// Проверим, есть ли такая группа, если нет, то создаем
		ИмяГруппы = "Группа" + СтруктураРегистра.ИмяРегистра;
		Если Элементы.Найти(ИмяГруппы) = Неопределено Тогда
			// Получим таблицу с аналитикой регистра
			ТаблицаАналитикиРегистра = Объект.ДвиженияРегистров.Выгрузить(СтруктураРегистра,"Аналитика, Синоним, ОписаниеТипа, ТипПоляРегистра");
			ТаблицаАналитикиРегистра.Свернуть("Аналитика, Синоним, ОписаниеТипа, ТипПоляРегистра");
			СоздатьРеквизитыФормыРегистра(ТаблицаАналитикиРегистра, СтруктураРегистра, ПериодическийОстаточныйРегистр);
			СоздатьЭлементыФормыРегистра(ТаблицаАналитикиРегистра, СтруктураРегистра, СинонимРегистра, ПериодическийОстаточныйРегистр);
		КонецЕсли;
		ЗаполнитьТаблицуФормыРегистра(СтруктураРегистра, ПериодическийОстаточныйРегистр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТаблицыФормыВТабличнуюЧастьНаСервере(ТекущийОбъект)

	ТекущийОбъект.ДвиженияРегистров.Очистить();
	
	Для Каждого СтрокаРегистра Из Регистры Цикл;
		Если НЕ СтрокаРегистра.ЕстьДвижения Тогда
			Продолжить;
		КонецЕсли;
		ИмяРегистра = СтрокаРегистра.ИмяРегистра;
		ТипРегистра = СтрокаРегистра.ТипРегистра;
		ПериодическийОстаточныйРегистр = ЭтоПериодическийОстаточныйРегистр(ТипРегистра, ИмяРегистра);
		// Получим и обойдем таблицу из формы
		Таблица = РеквизитФормыВЗначение(ИмяРегистра);
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			НомерДвижения = Таблица.Индекс(СтрокаТаблицы) + 1;
			Для Каждого Колонка Из Таблица.Колонки Цикл
				Если СтрНайти(Колонка.Имя, "Отображение") <> 0 
					ИЛИ Колонка.Имя = "ВидДвижения" 
					ИЛИ СтрНайти(Колонка.Имя, "НеИзменятьЗначение") <> 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДвижения				 = ТекущийОбъект.ДвиженияРегистров.Добавить();
				СтрокаДвижения.НомерДвижения = НомерДвижения;
				СтрокаДвижения.ИмяРегистра	 = ИмяРегистра;
				СтрокаДвижения.ТипРегистра	 = ТипРегистра;
				СтрокаДвижения.Аналитика	 = Колонка.Имя;
				СтрокаДвижения.Синоним		 = Элементы[ИмяРегистра+Колонка.Имя+"Отображение"].Заголовок;
				Если СтрокаТаблицы[Колонка.Имя] = Неопределено Тогда
					ЗначениеОтображения		 = СтрокаТаблицы[Колонка.Имя + "Отображение"];
					ЗначениеРеквизита		 = Сред(ЗначениеОтображения,2 ,СтрДлина(ЗначениеОтображения)-2);
				Иначе
					ЗначениеРеквизита		 =  СтрокаТаблицы[Колонка.Имя];
				КонецЕсли;
				СтрокаДвижения.Значение		 = ЗначениеРеквизита;
				// Заполним вид движения регистра накопления
				Если ЭтоРегистрНакопления(ТипРегистра)
					И ПериодическийОстаточныйРегистр Тогда
					СтрокаДвижения.ВидДвиженияРегистраНакопления = СтрокаТаблицы.ВидДвижения;
				КонецЕсли;
				// Заполним значения из служебной строки
				СтрокиДопКолонок = ДополнительныеКолонкиТаблиц.НайтиСтроки(Новый Структура("ИмяРегистра, Аналитика", ИмяРегистра, Колонка.Имя));
				Если СтрокиДопКолонок.Количество() > 0 Тогда
					СтрокаДопКолонок				 = СтрокиДопКолонок[0];
					СтрокаДвижения.ТипПоляРегистра	 = СтрокаДопКолонок.ТипПоляРегистра;
					// Заполним признак, что значение не изменяется для периодического регистра сведений
					ЭтоРегистрСведений = ЭтоРегистрСведений(ТипРегистра);
					Если ЭтоРегистрСведений И ПериодическийОстаточныйРегистр И ЭтоРесурс(СтрокаДопКолонок.ТипПоляРегистра) Тогда
						СтрокаДвижения.НеИзменятьЗначение = СтрокаТаблицы[Колонка.Имя+"НеИзменятьЗначение"];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормыРегистра(ТаблицаАналитикиРегистра, СтруктураРегистра, ПериодическийОстаточныйРегистр)
	
	МассивРеквизитов = Новый Массив;
	
	// Добавим таблицу регистра
	МассивРеквизитов.Добавить(Новый РеквизитФормы(СтруктураРегистра.ИмяРегистра, Новый ОписаниеТипов("ТаблицаЗначений"))); 
	
	// Добавим колонку вид движения
	Если ЭтоРегистрНакопления(СтруктураРегистра.ТипРегистра) И ПериодическийОстаточныйРегистр Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидДвижения", Новый ОписаниеТипов("Булево"), СтруктураРегистра.ИмяРегистра))
	КонецЕсли;

	// Добавим колонки для таблицы
	Для Каждого СтрокаАналитики Из ТаблицаАналитикиРегистра Цикл
		
		// Добавим колонку Отображение, которая будет отображаться на форме, так как нужно использовать "<>"
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(200));
		МассивРеквизитов.Добавить(Новый РеквизитФормы(СтрокаАналитики.Аналитика+"Отображение", ОписаниеТипа, СтруктураРегистра.ИмяРегистра));
		
		// Добавим колонку Значения аналитики
		МассивТипов = СтрокаАналитики.ОписаниеТипа.Типы();
		МассивТипов.Добавить(Тип("СправочникСсылка.ПараметрыТиповойОперации"));
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		РеквизитФормы = Новый РеквизитФормы(СтрокаАналитики.Аналитика, ОписаниеТипа, СтруктураРегистра.ИмяРегистра, СтрокаАналитики.Синоним);
		МассивРеквизитов.Добавить(РеквизитФормы);
		
		// Добавим колонку НеИзменятьЗначение
		ЭтоРегистрСведений = ЭтоРегистрСведений(СтруктураРегистра.ТипРегистра);
		Если ЭтоРегистрСведений И ПериодическийОстаточныйРегистр И ЭтоРесурс(СтрокаАналитики.ТипПоляРегистра) Тогда
			ИмяРеквизита = СтрокаАналитики.Аналитика+"НеИзменятьЗначение";
			МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Булево"), СтруктураРегистра.ИмяРегистра));
		КонецЕсли;
		
		// Заполним реквизиты связанные с дополнительными колонками
		СтрокаДопКолонок								 = ДополнительныеКолонкиТаблиц.Добавить();
		СтрокаДопКолонок.ИмяРегистра					 = СтруктураРегистра.ИмяРегистра;
		СтрокаДопКолонок.ТипРегистра					 = СтруктураРегистра.ТипРегистра;
		СтрокаДопКолонок.ПериодическийОстаточныйРегистр	 = ПериодическийОстаточныйРегистр;
		СтрокаДопКолонок.Аналитика						 = СтрокаАналитики.Аналитика;
		СтрокаДопКолонок.ТипЗначения					 = СтрокаАналитики.ОписаниеТипа;
		СтрокаДопКолонок.ТипПоляРегистра				 = СтрокаАналитики.ТипПоляРегистра;
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыРегистра(ТаблицаАналитикиРегистра, СтруктураРегистра, ЗаголовокТаблицы, ПериодическийОстаточныйРегистр)
	
	ИмяГруппы				 = "Группа" + СтруктураРегистра.ИмяРегистра;
	ГруппаТаблицы			 = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, Элементы.ГруппаПараметры);
	ГруппаТаблицы.Заголовок	 = ЗаголовокТаблицы;
	Если ЭтоРегистрНакопления(СтруктураРегистра.ТипРегистра) Тогда
		ГруппаТаблицы.Картинка = БиблиотекаКартинок.РегистрНакопления;
	Иначе
		ГруппаТаблицы.Картинка = БиблиотекаКартинок.РегистрСведений;
	КонецЕсли;
	
	// На странице регистра создаем таблицу
	ИмяТаблицы					 = СтруктураРегистра.ИмяРегистра;
	Таблица						 = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ГруппаТаблицы);
	Таблица.ПутьКДанным			 = СтруктураРегистра.ИмяРегистра;
	Таблица.АвтоВводНовойСтроки	 = Ложь;
	Таблица.УстановитьДействие("ПередУдалением", "Подключаемый_ОбработатьПередУдалением");
	
	// Создаем колонки таблицы
	
	// Колонка ВидДвижения для Остаточного регистра накопления
	Если ЭтоРегистрНакопления(СтруктураРегистра.ТипРегистра) И ПериодическийОстаточныйРегистр Тогда
		ИмяКолонки = СтруктураРегистра.ИмяРегистра + "ВидДвижения";
		Колонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Таблица);
		Колонка.ПутьКДанным			 = Таблица.ПутьКДанным +".ВидДвижения";
		Колонка.Заголовок			 = "Вид движения";
		Колонка.Вид					 = ВидПоляФормы.ПолеВвода;
		Колонка.РедактированиеТекста = Ложь;
		Колонка.Формат				 = "БЛ=Расход; БИ=Приход";
		Колонка.ФорматРедактирования = "БЛ=Расход; БИ=Приход";
	КонецЕсли;
	// Остальная аналитика регистра
	Для Каждого СтрокаАналитики Из ТаблицаАналитикиРегистра Цикл
		ИмяКолонки = СтруктураРегистра.ИмяРегистра + СтрокаАналитики.Аналитика+"Отображение";
		Колонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), Таблица);
		Колонка.ПутьКДанным				 = Таблица.ПутьКДанным +"."+СтрокаАналитики.Аналитика+"Отображение";
		Колонка.Заголовок				 = СтрокаАналитики.Синоним;
		Колонка.Вид						 = ВидПоляФормы.ПолеВвода;
		Колонка.РедактированиеТекста	 = Ложь;
		Колонка.КнопкаВыбора			 = Истина;
		Колонка.КнопкаВыпадающегоСписка	 = Ложь;
		Колонка.УстановитьДействие("НачалоВыбора", "Подключаемый_ОбработатьНачалоВыбора");
		Колонка.УстановитьДействие("ПриИзменении", "Подключаемый_ОбработатьПриИзменении");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуФормыРегистра(СтруктураРегистра, ПериодическийОстаточныйРегистр)
	
	Таблица = РеквизитФормыВЗначение(СтруктураРегистра.ИмяРегистра);
	Таблица.Очистить();
	// Выгрузим строки которые потребуются для заполнения
	ТаблицаДвижения = Объект.ДвиженияРегистров.Выгрузить(СтруктураРегистра, "Аналитика, Значение, НомерДвижения, НеИзменятьЗначение, ВидДвиженияРегистраНакопления");
	ТаблицаДвижения.Сортировать("НомерДвижения");
	
	// Создадим первую строку
	Если ТаблицаДвижения.Количество() > 0 Тогда
		НомерДвижения = ТаблицаДвижения[0].НомерДвижения;
		СтрокаТаблицы = Таблица.Добавить();
	КонецЕсли;
	Для Каждого СтрокаДвижения Из ТаблицаДвижения Цикл
		Если НомерДвижения <> СтрокаДвижения.НомерДвижения Тогда
			НомерДвижения = СтрокаДвижения.НомерДвижения;
			СтрокаТаблицы = Таблица.Добавить();
		КонецЕсли;
		// Заполним вид движения
		Если ЭтоРегистрНакопления(СтруктураРегистра.ТипРегистра) И ПериодическийОстаточныйРегистр Тогда
			СтрокаТаблицы.ВидДвижения = СтрокаДвижения.ВидДвиженияРегистраНакопления;
		КонецЕсли;
		КолонкаНеИзменятьЗначение = Таблица.Колонки.Найти(СтрокаДвижения.Аналитика+"НеИзменятьЗначение");
		НеИзменятьЗначение = КолонкаНеИзменятьЗначение <> Неопределено И СтрокаДвижения.НеИзменятьЗначение;
		// Заполняем аналитику
		Если НеИзменятьЗначение Тогда
			СтрокаТаблицы[КолонкаНеИзменятьЗначение.Имя] = СтрокаДвижения.НеИзменятьЗначение;
			Значение			 = "Не изменять";
			ЗначениеОтображения	 = "Не изменять";
		Иначе
			Значение = СтрокаДвижения.Значение;
			Если ЭтоПараметр(Значение) ИЛИ (ТипЗнч(Значение) = Тип("Строка") И СтрНайти(Значение, " *") <> 0) Тогда
				ЗначениеОтображения = "<"+Значение+">";
			Иначе
				ЗначениеОтображения = Значение;
			КонецЕсли;
		КонецЕсли;
		// Установим значения
		СтрокаТаблицы[СтрокаДвижения.Аналитика]					 = Значение;
		СтрокаТаблицы[СтрокаДвижения.Аналитика+"Отображение"]	 = ЗначениеОтображения;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Таблица,СтруктураРегистра.ИмяРегистра);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеРеквизитыИЭлементыФормы(ИмяРегистра);
	
	Элементы.Удалить(Элементы[ИмяРегистра]);
	Элементы.Удалить(Элементы["Группа"+ИмяРегистра]);
	
	УдаляемыеРеквизиты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяРегистра);
	ИзменитьРеквизиты(,УдаляемыеРеквизиты);

КонецПроцедуры

#КонецОбласти

#Область ПараметрыТиповойОперации

&НаСервере
Функция ПараметрПоИмениТипу(ИмяПараметра, ТипПараметра, ИскатьПоИмени)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыТиповойОперации.Ссылка,
	|	ПараметрыТиповойОперации.ОписаниеТипаРеквизита
	|ИЗ
	|	Справочник.ПараметрыТиповойОперации КАК ПараметрыТиповойОперации
	|ГДЕ
	|	ПараметрыТиповойОперации.Владелец = &Владелец";
	Если ИскатьПоИмени Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ПараметрыТиповойОперации.Наименование = &ИмяПараметра";
		Запрос.УстановитьПараметр("ИмяПараметра", ИмяПараметра);
	КонецЕсли;
	Параметр = ИмяПараметра + " *";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Ищем первое совпадение по типу
		Если Выборка.ОписаниеТипаРеквизита.Получить() = ТипПараметра Тогда
			Параметр = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Параметр;
	
КонецФункции

&НаСервере
Функция ОписаниеТипаВладельца(ТипПараметра)

	Если ТипПараметра.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		ИскомоеОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ИначеЕсли ТипПараметра.СодержитТип(Тип("СправочникСсылка.НазначенияИспользования")) Тогда
		ИскомоеОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Иначе
		ИскомоеОписаниеТипа = Неопределено;
	КонецЕсли;
	
	Возврат ИскомоеОписаниеТипа;

КонецФункции

&НаСервере
Функция ПараметрСвязьПоВладельцу(ПараметрыВладельцы, ТипПараметра)
	
	// Определим тип владельца
	ИскомоеОписаниеТипа = ОписаниеТипаВладельца(ТипПараметра);
	
	// Найдем параметр по типу
	Если ИскомоеОписаниеТипа <> Неопределено Тогда
		СвязьПоВладельцу = ПараметрыВладельцы.Получить(ИскомоеОписаниеТипа);
	Иначе
		СвязьПоВладельцу = Неопределено;
	КонецЕсли;
	
	Возврат СвязьПоВладельцу;
	
КонецФункции

&НаСервере
Функция СоответствиеТипаИПараметра()

	СоответствиеТипИПараметр = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыТиповойОперации.Ссылка,
	|	ПараметрыТиповойОперации.ОписаниеТипаРеквизита
	|ИЗ
	|	Справочник.ПараметрыТиповойОперации КАК ПараметрыТиповойОперации
	|ГДЕ
	|	ПараметрыТиповойОперации.Владелец = &Владелец";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеТипа = Выборка.ОписаниеТипаРеквизита.Получить();
		// вставим в соответствие типы, которые могут быть владельцами
		Если ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.Контрагенты")) 
			ИЛИ ОписаниеТипа.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
			СоответствиеТипИПараметр.Вставить(ОписаниеТипа, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Возврат СоответствиеТипИПараметр;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьПараметр(ИмяПараметра, ТипПараметра, СвязьПоВладелецу = Неопределено)
	
	// Возможно параметр был создан ранее, попробуем найти
	Параметр = ПараметрПоИмениТипу(ИмяПараметра, ТипПараметра, Истина);
	// Если не найден, то создаем новый параметр
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		НовыйПараметр						 = Справочники.ПараметрыТиповойОперации.СоздатьЭлемент();
		НовыйПараметр.Наименование			 = ИмяПараметра;
		НовыйПараметр.Владелец				 = Объект.Ссылка;
		НовыйПараметр.ОписаниеТипаРеквизита	 = Новый ХранилищеЗначения(ТипПараметра);
		НовыйПараметр.СвязьПоВладельцу		 = СвязьПоВладелецу;
		НовыйПараметр.Записать();
		Параметр = НовыйПараметр.Ссылка;
	КонецЕсли;
	
	Возврат Параметр;
	
КонецФункции

&НаСервере
Процедура СоздатьНовыеПараметры()
	
	ТребуетсяПерезапись = Ложь;
	
	// Табличная часть Хозрасчетный
	
	МассивДтКт = Новый Массив;
	МассивДтКт.Добавить("Дт");
	МассивДтКт.Добавить("Кт");
	
	СоответствиеТипИПараметр = СоответствиеТипаИПараметра();
	Для Каждого Строка Из Объект.Хозрасчетный Цикл
		Для Каждого ДтКт Из МассивДтКт Цикл;
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Строка["Счет"+ДтКт]);
			// Субконто
			Для Индекс = 1 По ДанныеСчета.КоличествоСубконто Цикл
				Если ТипЗнч(Строка["Субконто"+ДтКт+Индекс]) = Тип("Строка") И ЗначениеЗаполнено(Строка["Субконто"+ДтКт+Индекс]) Тогда;
					ИмяПараметра				 = СтрЗаменить(Строка["Субконто"+ДтКт+Индекс], " *","");
					ТипПараметра				 = ДанныеСчета["ВидСубконто"+Индекс+"ТипЗначения"];
					СвязьПоВладелецу			 = ПараметрСвязьПоВладельцу(СоответствиеТипИПараметр, ТипПараметра);
					Параметр					 = НайтиСоздатьПараметр(ИмяПараметра, ТипПараметра, СвязьПоВладелецу);
					Поле						 = "Субконто" + ДтКт + Индекс;
					Строка[Поле]				 = Параметр;
					Строка[Поле+"Отображение"]	 = "<" + Параметр + ">";
					ТребуетсяПерезапись			 = Истина;
					СоответствиеТипИПараметр.Вставить(ТипПараметра, Параметр);
				КонецЕсли;
			КонецЦикла;
			// Подразделения
			Если ДанныеСчета.УчетПоПодразделениям Тогда
				Если ТипЗнч(Строка["Подразделение"+ДтКт]) = Тип("Строка") И ЗначениеЗаполнено(Строка["Подразделение"+ДтКт]) Тогда
					Параметр					 = НайтиСоздатьПараметр("Подразделение", ОписаниеТиповПодразделение);
					Поле						 = "Подразделение" + ДтКт;
					Строка[Поле]				 = Параметр;
					Строка[Поле+"Отображение"]	 = "<" + Параметр + ">";
					ТребуетсяПерезапись			 = Истина;
				КонецЕсли;
			КонецЕсли;
			// Количество
			Если ДанныеСчета.Количественный Тогда
				Если ТипЗнч(Строка["Количество"+ДтКт]) = Тип("Строка") Тогда
					Параметр					 = НайтиСоздатьПараметр("Количество", ОписаниеТиповКоличество);
					Поле						 = "Количество" + ДтКт;
					Строка[Поле]				 = Параметр;
					Строка[Поле+"Отображение"]	 = "<" + Параметр + ">";
					ТребуетсяПерезапись			 = Истина;
				КонецЕсли;
			КонецЕсли;
			// Валютная сумма
			Если ДанныеСчета.Валютный Тогда
				Если ТипЗнч(Строка["ВалютнаяСумма"+ДтКт]) = Тип("Строка") Тогда
					Параметр					 = НайтиСоздатьПараметр("Валютная сумма", ОписаниеТиповСумма);
					Поле						 = "ВалютнаяСумма" + ДтКт;
					Строка[Поле]				 = Параметр;
					Строка[Поле+"Отображение"]	 = "<" + Параметр + ">";
					ТребуетсяПерезапись			 = Истина;
				КонецЕсли;
			КонецЕсли;
			// Налоговый учет
			Если ДанныеСчета.НалоговыйУчет Тогда
				Если ТипЗнч(Строка["СуммаНУ"+ДтКт]) = Тип("Строка") Тогда
					Параметр					 = НайтиСоздатьПараметр("Сумма", ОписаниеТиповСумма);
					Поле						 = "СуммаНУ" + ДтКт;
					Строка[Поле]				 = Параметр;
					Строка[Поле+"Отображение"]	 = "<" + Параметр + ">";
					ТребуетсяПерезапись			 = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		// Сумма
		Если ТипЗнч(Строка.Сумма) = Тип("Строка") Тогда;
			Параметр				 = НайтиСоздатьПараметр("Сумма", ОписаниеТиповСумма);
			Строка.Сумма			 = Параметр;
			Строка.СуммаОтображение	 = "<" + Параметр + ">";
			ТребуетсяПерезапись		 = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Табличная часть Движения
	
	Для Каждого Строка Из Объект.ДвиженияРегистров Цикл
		Если ТипЗнч(Строка.Значение) = Тип("Строка") И СтрНайти(Строка.Значение, " *")<>0 Тогда
			ИмяПараметра		 = СтрЗаменить(Строка.Значение, " *", "");
			ТипПараметра		 = Строка.ОписаниеТипа;
			СвязьПоВладелецу	 = ПараметрСвязьПоВладельцу(СоответствиеТипИПараметр, ТипПараметра);
			Параметр			 = НайтиСоздатьПараметр(ИмяПараметра, ТипПараметра, СвязьПоВладелецу);
			Строка.Значение		 = Параметр;
			ТребуетсяПерезапись	 = Истина;
			СоответствиеТипИПараметр.Вставить(ТипПараметра, Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяПерезапись Тогда
		// Перезаполним таблицу, так как поменялись параметры
		СоздатьИЗаполнитьТаблицыФормыНаСервере();
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеПараметраНаКлиенте(СтруктураПараметра)

	// Получим новое наименование параметра
	ПараметрТиповойОперации	 = СтруктураПараметра.Параметр;
	Наименование			 = СтруктураПараметра.Наименование;
	
	// Табличная часть Хозрасчетный
	МассивДтКт = Новый Массив;
	МассивДтКт.Добавить("Дт");
	МассивДтКт.Добавить("Кт");
	Для Каждого Строка ИЗ Объект.Хозрасчетный Цикл
		Для Каждого ДтКт Из МассивДтКт Цикл;
			Для Индекс = 1 По 3 Цикл
				Поле = "Субконто" + ДтКт + Индекс;
				Если Строка[Поле] = ПараметрТиповойОперации Тогда
					Строка[Поле + "Отображение"] = "<"+Наименование+">";
				КонецЕсли;
			КонецЦикла;
			Поле = "Количество" + ДтКт;
			Если Строка[Поле] = ПараметрТиповойОперации Тогда
				Строка[Поле + "Отображение"] = "<"+Наименование+">";
			КонецЕсли;
			Поле = "Подразделение" + ДтКт;
			Если Строка[Поле] = ПараметрТиповойОперации Тогда
				Строка[Поле + "Отображение"] = "<"+Наименование+">";
			КонецЕсли;
			Поле = "СуммаНУ" + ДтКт;
			Если Строка[Поле] = ПараметрТиповойОперации Тогда
				Строка[Поле + "Отображение"] = "<"+Наименование+">";
			КонецЕсли;
			Поле = "СуммаПР" + ДтКт;
			Если Строка[Поле] = ПараметрТиповойОперации Тогда
				Строка[Поле + "Отображение"] = "<"+Наименование+">";
			КонецЕсли;
			Поле = "СуммаВР" + ДтКт;
			Если Строка[Поле] = ПараметрТиповойОперации Тогда
				Строка[Поле + "Отображение"] = "<"+Наименование+">";
			КонецЕсли;
			Поле = "ВалютнаяСумма" + ДтКт;
			Если Строка[Поле] = ПараметрТиповойОперации Тогда
				Строка[Поле + "Отображение"] = "<"+Наименование+">";
			КонецЕсли;
		КонецЦикла;
		Если Строка["Сумма"] = ПараметрТиповойОперации Тогда
			Строка["СуммаОтображение"] = "<"+Наименование+">";
		КонецЕсли;
	КонецЦикла;
	
	// Таблицы формы регистров накопления и сведений
	
	Для Каждого Регистр Из Регистры Цикл
		Если НЕ Регистр.ЕстьДвижения Тогда 
			Продолжить;
		КонецЕсли;
		Таблица = ЭтотОбъект[Регистр.ИмяРегистра];
		// получим аналитику (Колонки регистра)
		АналитикаРегистра = ДополнительныеКолонкиТаблиц.НайтиСтроки(Новый Структура("ИмяРегистра", Регистр.ИмяРегистра));
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Для Каждого Колонка Из АналитикаРегистра Цикл
				ИмяКолонки = Колонка.Аналитика;
				Если СтрокаТаблицы[ИмяКолонки] = ПараметрТиповойОперации Тогда
					СтрокаТаблицы[ИмяКолонки + "Отображение"] = "<"+Наименование+">";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПорядокПараметраНаСервере(ТекущийПорядок, НаправлениеПеремещения)
	
	// Возвращает параметр, с которым необходимо поменяться местами
	СоседнийПараметр = ПараметрПоПорядку(ТекущийПорядок, НаправлениеПеремещения);
	
	Если СоседнийПараметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПараметр = ПараметрПоПорядку(ТекущийПорядок);
	
	ТекущийПараметр.ПорядокПараметра	 = СоседнийПараметр.ПорядокПараметра;
	СоседнийПараметр.ПорядокПараметра	 = ТекущийПорядок;
	
	// Попытаемся записать параметры, если что-то не получится, то отменяем запись объектов
	НачатьТранзакцию();
	Попытка
		ТекущийПараметр.Записать();
		СоседнийПараметр.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Элементы.ПараметрыТиповойОперации.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПараметрПоПорядку(ПорядокПараметра, НаправлениеПеремещения = "Равно");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПорядокПараметра",	 ПорядокПараметра);
	Запрос.УстановитьПараметр("Владелец",			 Объект.Ссылка);
	
	Если НаправлениеПеремещения = "Равно" Тогда
		ТекстУсловияПорядкаПараметра = " ПараметрыТиповойОперации.ПорядокПараметра = &ПорядокПараметра";
	ИначеЕсли НаправлениеПеремещения = "Вверх" Тогда
		ТекстУсловияПорядкаПараметра = " ПараметрыТиповойОперации.ПорядокПараметра < &ПорядокПараметра"
	Иначе
		ТекстУсловияПорядкаПараметра = " ПараметрыТиповойОперации.ПорядокПараметра > &ПорядокПараметра"
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыТиповойОперации.Ссылка
	|ИЗ
	|	Справочник.ПараметрыТиповойОперации КАК ПараметрыТиповойОперации
	|ГДЕ"
	+ ТекстУсловияПорядкаПараметра + "
	|	И ПараметрыТиповойОперации.Владелец = &Владелец
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыТиповойОперации.ПорядокПараметра";
	
	// Изменим упорядочивание
	Если НаправлениеПеремещения = "Вверх" Тогда
		ТекстЗапроса = ТекстЗапроса + " УБЫВ";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОписанияОповещений

&НаКлиенте
Процедура НастроитьСоставРегистровЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатДействийПользователя = РезультатЗакрытия;
	
	// Обработаем результат действий пользователя
	Если ТипЗнч(РезультатДействийПользователя) = Тип("СписокЗначений")
		И РезультатДействийПользователя.Количество() <> 0 Тогда
		
		Модифицированность = Истина;
		ПрименитьНастройкуСоставаРегистров(РезультатДействийПользователя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранноеЗначениеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка				 = ДополнительныеПараметры.Строка;
	Аналитика			 = ДополнительныеПараметры.Аналитика;
	ВыбранноеЗначение	 = Результат.Значение;
	// Получим значение, которое устанавливаем в "Отображение"
	Если Результат.ПараметрЗначениеНеИзменять = 0 И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЗначениеОтображение = "<"+ВыбранноеЗначение+">";
	Иначе
		ЗначениеОтображение = ВыбранноеЗначение;
	КонецЕсли;
	
	// Установим полученные значения
	Строка[Аналитика]				 = ВыбранноеЗначение;
	Строка[Аналитика+"Отображение"]	 = ЗначениеОтображение;
	
	Если ДополнительныеПараметры.ТабличнаяЧасть = "Хозрасчетный" Тогда
		// Установим Сумму НУ равную Сумме БУ
		Если Аналитика = "Сумма" Тогда
			Если Строка.НалоговаяСуммаДтДоступность Тогда
				Строка.СуммаНуДт			 = ВыбранноеЗначение;
				Строка.СуммаНуДтОтображение	 = ЗначениеОтображение;
			КонецЕсли;
			Если Строка.НалоговаяСуммаКтДоступность Тогда
				Строка.СуммаНуКт			 = ВыбранноеЗначение;
				Строка.СуммаНуКтОтображение	 = ЗначениеОтображение;
			КонецЕсли;
		ИначеЕсли СтрНайти(Аналитика, "Субконто") > 0 Тогда
			ДтКт = Сред(Аналитика, 9, 2);
			НомерСубконто = Прав(Аналитика, 1);
			ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Строка["Счет" + ДтКт]);
			ТипЗначения = ДанныеСчета["ВидСубконто"+ НомерСубконто + "ТипЗначения"].Типы()[0];
			
			Если ТипЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
				// Очистим ДоговорКонтрагента
				Для НомерСубконто = 1 По 3 Цикл
					Субконто = "Субконто" + ДтКт + НомерСубконто;
					ТипСубконто = ТипЗнч(Строка[Субконто]);
					Если ТипСубконто = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
						Строка[Субконто] = Неопределено;
						Строка[Субконто + "Отображение"] = "";
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Номенклатура") Тогда
				// Очистим НазначениеИспользования
				Для НомерСубконто = 1 По 3 Цикл
					Субконто = "Субконто" + ДтКт + НомерСубконто;
					ТипСубконто = ТипЗнч(Строка[Субконто]);
					Если ТипСубконто = Тип("СправочникСсылка.НазначенияИспользования") Тогда
						Строка[Субконто] = Неопределено;
						Строка[Субконто + "Отображение"] = "";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Установим флаг "не изменять значение"
		Если ДополнительныеПараметры.ОтображатьНеИзменять Тогда
			Строка[Аналитика+"НеИзменятьЗначение"] = (Результат.ПараметрЗначениеНеИзменять = 2);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьФормуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		Если ДополнительныеПараметры.ДальнейшееДействие = "ВвестиОперацию" Тогда
			ВвестиТиповуюОперацию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти