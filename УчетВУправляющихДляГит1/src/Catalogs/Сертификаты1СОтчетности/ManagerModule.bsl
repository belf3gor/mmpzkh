Функция ЗагрузитьСертификатИзФайлаНаСервере(АдресСертификата) Экспорт

	ФайлСертификата = ПолучитьИзВременногоХранилища(АдресСертификата);
	СвойстваСертификата = ПолучитьСвойстваСертификата(ФайлСертификата);	
	
	НайденныйЭлемент = Справочники.Сертификаты1СОтчетности.НайтиПоРеквизиту("Идентификатор", СвойстваСертификата.Идентификатор);
	Если ЗначениеЗаполнено(НайденныйЭлемент) Тогда
		Сертификат1СОтчетности = НайденныйЭлемент.ПолучитьОбъект();
	Иначе
		Сертификат1СОтчетности = Справочники.Сертификаты1СОтчетности.СоздатьЭлемент();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Сертификат1СОтчетности, СвойстваСертификата);
	Сертификат1СОтчетности.Записать();
	
	Возврат Сертификат1СОтчетности.Ссылка;
	
КонецФункции

Функция ПолучитьСвойстваСертификата(ФайлСертификата)
	
	Сертификат = Новый СертификатКриптографии(ФайлСертификата);
	
	СвойстваСертификата = Новый Структура;
	
	СвойстваСертификата.Вставить("ДатаНачала", Сертификат.ДатаНачала);
	СвойстваСертификата.Вставить("ДатаОкончания", Сертификат.ДатаОкончания);
	
	СвойстваСертификата.Вставить("Сертификат", Новый ХранилищеЗначения(ФайлСертификата, Новый СжатиеДанных(9)));
	СвойстваСертификата.Вставить("СерийныйНомер", Новый ХранилищеЗначения(Сертификат.СерийныйНомер, Новый СжатиеДанных(9)));
	СвойстваСертификата.Вставить("СерийныйНомерПредставление", Строка(Сертификат.СерийныйНомер));
	СвойстваСертификата.Вставить("Отпечаток", Новый ХранилищеЗначения(Сертификат.Отпечаток, Новый СжатиеДанных(9)));
	СвойстваСертификата.Вставить("ОтпечатокПредставление", Строка(Сертификат.Отпечаток));
	СвойстваСертификата.Вставить("ОткрытыйКлюч", Новый ХранилищеЗначения(Сертификат.ОткрытыйКлюч, Новый СжатиеДанных(9)));
	СвойстваСертификата.Вставить("ОткрытыйКлючПредставление", Строка(Сертификат.ОткрытыйКлюч));
	
	Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Сертификат", ФайлСертификата));
	Сертификаты = КриптографияЭДКОСлужебныйВызовСервера.ИзвлечьИнформациюОКриптопровайдереПоСертификату(Сертификаты);
	Если Сертификаты[0].Криптопровайдер <> Неопределено Тогда
		Если Сертификаты[0].Криптопровайдер.Имя = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro().Имя Тогда
			СвойстваСертификата.Вставить("Криптопровайдер", Перечисления.ТипыКриптоПровайдеров.CryptoPro);
		ИначеЕсли Сертификаты[0].Криптопровайдер.Имя = КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet().Имя Тогда
			СвойстваСертификата.Вставить("Криптопровайдер", Перечисления.ТипыКриптоПровайдеров.VipNet);	
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСертификата.Вставить("Идентификатор", ИдентификаторСертификата(Сертификат.СерийныйНомер, Сертификат.Издатель));
	
	СвойстваСертификата.Вставить("Наименование",  
		СтрШаблон(
			НСтр("ru = '%1 [%2 - %3]'"), 
			НаименованиеСертификата(Сертификат.Субъект),
			Формат(Сертификат.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'"), 
			Формат(Сертификат.ДатаОкончания, "ДФ='dd.MM.yyyy HH:mm'")));
			
	Возврат СвойстваСертификата;			
			
КонецФункции

Функция ИдентификаторСертификата(СерийныйНомер, Издатель)
	
	СписокOID = Новый СписокЗначений;
	Для Каждого OID Из Издатель Цикл
		Если Не СтрНачинаетсяС(OID.Ключ, "OID") Тогда
			Продолжить;
		КонецЕсли;
		СписокOID.Добавить(OID.Значение, СтрЗаменить(Сред(OID.Ключ, 4), "_", "."));
	КонецЦикла;
	
	Ключи = СтрРазделить("2.5.4.3,2.5.4.4,2.5.4.6,2.5.4.7,2.5.4.8,2.5.4.10,2.5.4.11,2.5.4.12,2.5.4.42,1.2.840.113549.1.9.1", ",");
	Свойства = Новый СписокЗначений;
	Для Каждого Элемент Из СписокOID Цикл
		Если Ключи.Найти(Элемент.Представление) <> Неопределено Тогда
			Свойства.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	СерийныйНомерСтрока = НРег(СтрЗаменить(СерийныйНомер, " ", ""));
	
	Свойства.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	МассивЗначений = Свойства.ВыгрузитьЗначения();
	
	МассивЗначений.Добавить(СерийныйНомерСтрока);
	
	ИздательИСерийныйНомер = СтрСоединить(МассивЗначений, "#");
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA1);
	Хеширование.Добавить(ИздательИСерийныйНомер);
	
	Возврат НРег(СтрЗаменить(Хеширование.ХешСумма, " ", ""));	
	
КонецФункции

Функция НаименованиеСертификата(Субъект)
	
	Если Субъект.Свойство("CN") Тогда
		Возврат Субъект["CN"];
	КонецЕсли;
	
	Возврат "";
	
КонецФункции
