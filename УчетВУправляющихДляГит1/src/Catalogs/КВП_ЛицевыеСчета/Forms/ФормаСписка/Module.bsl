
////////////////////////////////////////////////////////////////////////////////
// ОБЛАСТЬ ПЕРЕМЕННЫХ ФОРМЫ

#Область ПеременныеМодуля

&НаКлиенте
Перем ТекущийЛицевойСчет;		// Хранит ссылку на элемент справочника "Лицевые счета" - текущее выбранное
								// значение списка зданий.

&НаКлиенте
Перем ПредыдущийЛицевойСчет;	// Хранит ссылку на элемент справочника "Лицевые счета" - предыдущее выбранное
								// значение списка зданий.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОТБОРОМ Л/С

&НаСервереБезКонтекста
// Функция возвращает структуру параметров на сервере.
Функция ПодготовитьСтруктуруПараметровНаСервере(Владелец, ФизЛицо, Копирование)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим", "Создание");
	СтруктураПараметров.Вставить("Пол", "");
	СтруктураПараметров.Вставить("ФИО", "");
	СтруктураПараметров.Вставить("ЛицевойСчет", Владелец);
	СтруктураПараметров.Вставить("ДатаРождения", "");
	СтруктураПараметров.Вставить("ИНН", "");
	СтруктураПараметров.Вставить("СтраховойНомерПФР", "");
	СтруктураПараметров.Вставить("ФизЛицо", "");
	Если Копирование Тогда
		СтруктураПараметров.Вставить("ФИО", ФизЛицо.Наименование);
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ФизЛицо);
		СтруктураПараметров.ФизЛицо = ФизЛицо;
	КонецЕсли;
	
	Возврат Новый Структура("ДанныеОЖильце", СтруктураПараметров);
	
КонецФункции

&НаСервереБезКонтекста
// Процедура сохраняет настройки пользователя на сервере.
Процедура СохранитьНастройкиНаСервере(СтруктураДанных)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЛицевыеСчета", "ВсеПроживающие",              СтруктураДанных.ВсеПроживающие);
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЛицевыеСчета", "ПоказатьНедействующиеЛьготы", СтруктураДанных.ПоказатьНедействующиеЛьготы);
	
	НастройкиГрафиков = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЛицевыеСчета", "НастройкиГрафиков");
	Если ТипЗнч(НастройкиГрафиков) = Тип("Структура") Тогда
		НастройкиГрафиков.Вставить("ЛьготникиВыводитьНаФорме", СтруктураДанных.ЛьготникиВыводитьНаФорме);
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЛицевыеСчета", "НастройкиГрафиков", НастройкиГрафиков);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОДЧИНЕННЫМИ ДАННЫМИ

&НаСервере
// Получает информацию по проживающим выбранного лицевого счета.
//
// Параметры
//  нет
//
Процедура ОбновитьТаблицуПроживающих(ЛицевойСчет, Помещение, ПоказатьВсе = Истина)
	
	СписокПроживающих = Новый СписокЗначений;
	
	ЗапросДанныхПоПроживающим = Новый Запрос;
	
	ЗапросДанныхПоПроживающим.УстановитьПараметр("Дата",         КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
	ЗапросДанныхПоПроживающим.УстановитьПараметр("ЛицевойСчет",  ЛицевойСчет);
	ЗапросДанныхПоПроживающим.УстановитьПараметр("Помещение",    Помещение);
	ЗапросДанныхПоПроживающим.УстановитьПараметр("ПоказатьВсе",  ПоказатьВсе);
	ЗапросДанныхПоПроживающим.УстановитьПараметр("ТаблицаТелефоновЖильцов", Справочники.УПЖКХ_Жильцы.ПолучитьТаблицуТелефоновФизЛицЖильцов(ЛицевойСчет));
	ЗапросДанныхПоПроживающим.УстановитьПараметр("ПредставлениеОтвСобственника",
												 УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника());
	
	ЗапросДанныхПоПроживающим.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТелефоновЖильцов.Жилец КАК Жилец,
	|	ТаблицаТелефоновЖильцов.СписокТелефонов КАК СписокТелефонов
	|ПОМЕСТИТЬ втТелефоныЖильцов
	|ИЗ
	|	&ТаблицаТелефоновЖильцов КАК ТаблицаТелефоновЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникУПЖКХ_Жильцы.Ссылка КАК Ссылка,
	|	СправочникУПЖКХ_Жильцы.ВерсияДанных КАК ВерсияДанных,
	|	СправочникУПЖКХ_Жильцы.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникУПЖКХ_Жильцы.Предопределенный КАК Предопределенный,
	|	СправочникУПЖКХ_Жильцы.Владелец КАК Владелец,
	|	СправочникУПЖКХ_Жильцы.Код КАК Код,
	|	СправочникУПЖКХ_Жильцы.Наименование КАК Наименование,
	|	СправочникУПЖКХ_Жильцы.ПенсионноеУдостоверениеДата КАК ПенсионноеУдостоверениеДата,
	|	СправочникУПЖКХ_Жильцы.ПенсионноеУдостоверениеНомер КАК ПенсионноеУдостоверениеНомер,
	|	СправочникУПЖКХ_Жильцы.ПенсионноеУдостоверениеСерия КАК ПенсионноеУдостоверениеСерия,
	|	СправочникУПЖКХ_Жильцы.ПенсионноеУдостоверениеКемВыдано КАК ПенсионноеУдостоверениеКемВыдано,
	|	СправочникУПЖКХ_Жильцы.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ЕСТЬNULL(втТелефоныЖильцов.СписокТелефонов, """") КАК Телефон,
	|	СправочникУПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА СправочникУПЖКХ_Жильцы.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК НомерКартинки
	|ПОМЕСТИТЬ врПроживающие
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК СправочникУПЖКХ_Жильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТелефоныЖильцов КАК втТелефоныЖильцов
	|		ПО СправочникУПЖКХ_Жильцы.Ссылка = втТелефоныЖильцов.Жилец
	|ГДЕ
	|	СправочникУПЖКХ_Жильцы.Владелец = &ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Проживающий,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаРегистрации
	|ПОМЕСТИТЬ врТаблДатРегистрации
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			Зарегистрирован
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Проживающий,
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения КАК ДатаСнятияСРегистрации
	|ПОМЕСТИТЬ врТаблДатыСнятияСРегистрации
	|ИЗ
	|	(ВЫБРАТЬ
	|		УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|		УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаИзменения
	|	ИЗ
	|		РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|	ГДЕ
	|		НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблДатРегистрации КАК врТаблДатРегистрации
	|		ПО УПЖКХ_СведенияОЗарегистрированных.Жилец = врТаблДатРегистрации.Проживающий
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения > врТаблДатРегистрации.ДатаРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец, УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Проживающий,
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо.Пол, УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо.Пол) КАК Пол,
	|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо.ДатаРождения, УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо.ДатаРождения) КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоПроживающих
	|ПОМЕСТИТЬ врТаблПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Собственник,
	|	УПЖКХ_Жильцы.ФизЛицо.Пол КАК Пол,
	|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК Действует
	|ПОМЕСТИТЬ врТаблСобственников
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ПО УПЖКХ_Жильцы.ФизЛицо = УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец.Адрес = &Помещение
	|	И НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|	И УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(врТаблПроживающих.Проживающий, врТаблСобственников.Собственник) КАК Проживающий,
	|	ЕСТЬNULL(врТаблПроживающих.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(врТаблПроживающих.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(врТаблПроживающих.Пол, врТаблСобственников.Пол) КАК Пол,
	|	ЕСТЬNULL(врТаблПроживающих.ДатаРождения, врТаблСобственников.ДатаРождения) КАК ДатаРождения,
	|	ЕСТЬNULL(врТаблПроживающих.ВсегоЗарегистрированных, 0) КАК ВсегоЗарегистрированных,
	|	ЕСТЬNULL(врТаблПроживающих.ВсегоПроживающих, 0) КАК ВсегоПроживающих,
	|	врТаблДатРегистрации.ДатаРегистрации КАК ДатаРегистрации,
	|	врТаблДатыСнятияСРегистрации.ДатаСнятияСРегистрации КАК ДатаСнятияСРегистрации,
	|	ЕСТЬNULL(врТаблСобственников.Действует, ЛОЖЬ) КАК Собственник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(врТаблСобственников.Действует, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВсегоСобственников
	|ПОМЕСТИТЬ ДанныеОПроживающих
	|ИЗ
	|	врТаблПроживающих КАК врТаблПроживающих
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблДатРегистрации КАК врТаблДатРегистрации
	|		ПО врТаблПроживающих.Проживающий = врТаблДатРегистрации.Проживающий
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблДатыСнятияСРегистрации КАК врТаблДатыСнятияСРегистрации
	|		ПО врТаблПроживающих.Проживающий = врТаблДатыСнятияСРегистрации.Проживающий
	|		ПОЛНОЕ СОЕДИНЕНИЕ врТаблСобственников КАК врТаблСобственников
	|		ПО врТаблПроживающих.Проживающий = врТаблСобственников.Собственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо КАК ОтветственноеФизЛицо
	|ПОМЕСТИТЬ врОтветственныеФизЛица
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеФизЛица.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК ФизическоеЛицоСвязанное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства КАК СтепеньРодства
	|ПОМЕСТИТЬ врСтепениРодства
	|ИЗ
	|	врОтветственныеФизЛица КАК ОтветственныеФизЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|				&Дата,
	|				ФизическоеЛицоСвязанное В
	|					(ВЫБРАТЬ
	|						врПроживающие.ФизЛицо
	|					ИЗ
	|						врПроживающие)) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ПО ОтветственныеФизЛица.ОтветственноеФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтветственныеФизЛица.ЛицевойСчет,
	|	ОтветственныеФизЛица.ОтветственноеФизЛицо,
	|	&ПредставлениеОтвСобственника
	|ИЗ
	|	врОтветственныеФизЛица КАК ОтветственныеФизЛица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПроживающие.Ссылка КАК Ссылка,
	|	врПроживающие.ВерсияДанных КАК ВерсияДанных,
	|	врПроживающие.ПометкаУдаления КАК ПометкаУдаления,
	|	врПроживающие.Предопределенный КАК Предопределенный,
	|	врПроживающие.Владелец КАК Владелец,
	|	врПроживающие.Код КАК Код,
	|	врПроживающие.Наименование КАК Наименование,
	|	врПроживающие.ПенсионноеУдостоверениеДата КАК ПенсионноеУдостоверениеДата,
	|	врПроживающие.ПенсионноеУдостоверениеНомер КАК ПенсионноеУдостоверениеНомер,
	|	врПроживающие.ПенсионноеУдостоверениеСерия КАК ПенсионноеУдостоверениеСерия,
	|	врПроживающие.ПенсионноеУдостоверениеКемВыдано КАК ПенсионноеУдостоверениеКемВыдано,
	|	врПроживающие.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	врПроживающие.Телефон КАК Телефон,
	|	врПроживающие.ФизЛицо КАК ФизЛицо,
	|	ДанныеОПроживающих.Зарегистрирован КАК Зарегистрирован,
	|	ДанныеОПроживающих.Проживает КАК Проживает,
	|	ДанныеОПроживающих.Пол КАК Пол,
	|	ДанныеОПроживающих.ДатаРождения КАК ДатаРождения,
	|	ДанныеОПроживающих.ДатаРегистрации КАК ДатаРегистрации,
	|	ДанныеОПроживающих.ДатаСнятияСРегистрации КАК ДатаСнятияСРегистрации,
	|	ДанныеОПроживающих.Собственник КАК Собственник,
	|	врПроживающие.НомерКартинки КАК НомерКартинки,
	|	врСтепениРодства.СтепеньРодства КАК СтепеньРодства,
	|	ДанныеОПроживающих.ВсегоЗарегистрированных КАК ВсегоЗарегистрированных,
	|	ДанныеОПроживающих.ВсегоПроживающих КАК ВсегоПроживающих,
	|	ДанныеОПроживающих.ВсегоСобственников КАК ВсегоСобственников
	|ИЗ
	|	врПроживающие КАК врПроживающие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОПроживающих КАК ДанныеОПроживающих
	|		ПО врПроживающие.Ссылка = ДанныеОПроживающих.Проживающий
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСтепениРодства КАК врСтепениРодства
	|		ПО врПроживающие.Владелец = врСтепениРодства.ЛицевойСчет
	|			И врПроживающие.ФизЛицо = врСтепениРодства.ФизическоеЛицоСвязанное
	|ГДЕ
	|	(ДанныеОПроживающих.Зарегистрирован
	|			ИЛИ ДанныеОПроживающих.Проживает
	|			ИЛИ &ПоказатьВсе)";
	
	ТаблицаДанных = ЗапросДанныхПоПроживающим.Выполнить().Выгрузить();
	Проживающие.Загрузить(ТаблицаДанных);
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		Элементы.ПроживающиеЗарегистрирован.ТекстПодвала = ТаблицаДанных.Итог("ВсегоЗарегистрированных");
		Элементы.ПроживающиеПроживает.ТекстПодвала       = ТаблицаДанных.Итог("ВсегоПроживающих");
		Элементы.ПроживающиеСобственник.ТекстПодвала     = ТаблицаДанных.Итог("ВсегоСобственников");
	Иначе
		Элементы.ПроживающиеЗарегистрирован.ТекстПодвала = 0;
		Элементы.ПроживающиеПроживает.ТекстПодвала       = 0;
		Элементы.ПроживающиеСобственник.ТекстПодвала     = 0;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьИнформациюПоПроживающим()

&НаСервереБезКонтекста
// Процедура устанавливает пометку удаления объекта.
Процедура УстановитьПометкуУдаленияНаСервере(Ссылка)
	
	СправочникОбъект = Ссылка.ПолучитьОбъект();
	СправочникОбъект.ПометкаУдаления = Не СправочникОбъект.ПометкаУдаления;
	КВП_ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура заполняет закладку Общая информация данными лицевого счета по начислениям.
Процедура ЗаполнитьДанныеПоНачислениям(ЛицевойСчет)
	
	Если ЛицевойСчет.ЭтоГруппа Тогда
		ТекстУсловие = "ЛицевойСчет В ИЕРАРХИИ (&ЛицевойСчет)";
	Иначе
		ТекстУсловие = "ЛицевойСчет = &ЛицевойСчет";
	КонецЕсли;
	
	Если Не ОтборОрганизация.Пустая() Тогда
		ТекстУсловие = ТекстУсловие + " И Организация = &Организация";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток), 0) КАК ЗадолженностьНаНачалоМесяца,
	|	ЕСТЬNULL(СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток), 0) КАК ЗадолженностьНаКонецМесяца,
	|	0 КАК НачисленоПени,
	|	0 КАК Начислено,
	|	0 КАК Оплачено,
	|	&ДатаКонПредМесяца КАК МесяцНачислений
	|ПОМЕСТИТЬ втТаблицаНачисленийПредыдущегоПериода
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&ДатаНачПредМесяца, &ДатаКонПредМесяца, , , " + ТекстУсловие + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|						И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	&ДатаКонПредМесяца
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(&ДатаНачПредМесяца, &ДатаКонПредМесяца, , " + ТекстУсловие + ") КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток), 0) КАК ЗадолженностьНаНачалоМесяца,
	|	ЕСТЬNULL(СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток), 0) КАК ЗадолженностьНаКонецМесяца,
	|	0 КАК НачисленоПени,
	|	0 КАК Начислено,
	|	0 КАК Оплачено,
	|	&ДатаКонТекМесяца КАК МесяцНачислений
	|ПОМЕСТИТЬ втТаблицаНачисленийТекущегоПериода
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&ДатаНачТекМесяца, &ДатаКонТекМесяца, , , " + ТекстУсловие + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|						И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0),
	|	&ДатаКонТекМесяца
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(&ДатаНачТекМесяца, &ДатаКонТекМесяца, , " + ТекстУсловие + ") КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втТаблицаНачисленийПредыдущегоПериода.ЗадолженностьНаНачалоМесяца) КАК ЗадолженностьНаНачалоМесяца,
	|	СУММА(втТаблицаНачисленийПредыдущегоПериода.ЗадолженностьНаКонецМесяца) КАК ЗадолженностьНаКонецМесяца,
	|	СУММА(втТаблицаНачисленийПредыдущегоПериода.НачисленоПени) КАК НачисленоПени,
	|	СУММА(втТаблицаНачисленийПредыдущегоПериода.Начислено) КАК Начислено,
	|	СУММА(втТаблицаНачисленийПредыдущегоПериода.Оплачено) КАК Оплачено,
	|	втТаблицаНачисленийПредыдущегоПериода.МесяцНачислений
	|ИЗ
	|	втТаблицаНачисленийПредыдущегоПериода КАК втТаблицаНачисленийПредыдущегоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНачисленийПредыдущегоПериода.МесяцНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СУММА(втТаблицаНачисленийТекущегоПериода.ЗадолженностьНаНачалоМесяца),
	|	СУММА(втТаблицаНачисленийТекущегоПериода.ЗадолженностьНаКонецМесяца),
	|	СУММА(втТаблицаНачисленийТекущегоПериода.НачисленоПени),
	|	СУММА(втТаблицаНачисленийТекущегоПериода.Начислено),
	|	СУММА(втТаблицаНачисленийТекущегоПериода.Оплачено),
	|	втТаблицаНачисленийТекущегоПериода.МесяцНачислений
	|ИЗ
	|	втТаблицаНачисленийТекущегоПериода КАК втТаблицаНачисленийТекущегоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНачисленийТекущегоПериода.МесяцНачислений
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачислений";
	
	ДатаПросмотраПредМес = Добавитьмесяц(мМесяцВзаиморасчетов,-1);
	Запрос.УстановитьПараметр("ДатаНачПредМесяца", НачалоМесяца(ДатаПросмотраПредМес));
	Запрос.УстановитьПараметр("ДатаКонПредМесяца", КонецДня(КонецМесяца(ДатаПросмотраПредМес)));
	Запрос.УстановитьПараметр("ДатаНачТекМесяца",  НачалоМесяца(мМесяцВзаиморасчетов));
	Запрос.УстановитьПараметр("ДатаКонТекМесяца",  КонецДня(КонецМесяца(мМесяцВзаиморасчетов)));
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	Запрос.УстановитьПараметр("Организация",       ОтборОрганизация);
	
	врТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНачислений.Очистить();
	
	Макет = Справочники.КВП_ЛицевыеСчета.ПолучитьМакет("МакетВзаиморасчеты");
	
	ОбластьПозиции = Макет.ПолучитьОбласть("ОбластьПозиции");
	ТаблицаНачислений.Вывести(ОбластьПозиции);
	
	Для Каждого СтрокаНачислений Из врТаблицаНачислений Цикл
		
		ОбластьПоказатели = Макет.ПолучитьОбласть("ОбластьПоказатели");
		ОбластьПоказатели.Параметры.Заполнить(СтрокаНачислений);
		
		ТаблицаНачислений.Присоединить(ОбластьПоказатели);
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьДанныеПоНачислениям()

&НаСервере
// Процедура формирует отчет действующих начислений на сервере.
Процедура СформироватьОтчетДействующиеНачисленияНаСервере(ЛицевойСчет)
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ДатаПросмотра",            УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	ПараметрыОтчета.Вставить("ТипОбъектовНачисления",    "КВП_ЛицевыеСчета");
	ПараметрыОтчета.Вставить("ТипОбъектовНачисленияТип", Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	ПараметрыОтчета.Вставить("ОбъектНачисления",         ЛицевойСчет);
	ПараметрыОтчета.Вставить("ГруппироватьПоОбъектам",   Истина);
	ПараметрыОтчета.Вставить("УровеньГруппировки",       1);
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_ДействующиеНачисления.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.КВП_ДействующиеНачисления.СформироватьОтчет", 
			ПараметрыОтчета, 
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДокументНачисления = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Формирует отчет "Карточка расчетов" и выводит в табличное поле.
Процедура СформироватьОтчетКарточкаРасчетовНаСервере(ЛицевойСчет)
	
	СтруктураСПериодомФормированияОтчета = ОбработатьПериодыФормированияОтчетов(ДатаНачала, ДатаОкончания);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода", СтруктураСПериодомФормированияОтчета.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",  СтруктураСПериодомФормированияОтчета.КонецПериода);
	ПараметрыОтчета.Вставить("Организация",   ОтборОрганизация);
	ПараметрыОтчета.Вставить("ЛицевойСчет",   ЛицевойСчет);
	ПараметрыОтчета.Вставить("ВариантОтбораУслуг", ОтборВариантОтбораУслуг);
	ПараметрыОтчета.Вставить("ВариантВыводаСведенийОЗадолженности", ОтборВариантВыводаСведенийОЗадолженности);
	
	Если ОтборВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
		ПараметрыОтчета.Вставить("СписокУслуг", Новый СписокЗначений);
	Иначе
		ПараметрыОтчета.Вставить("СписокУслуг", мСтруктураНастроекКапРемонта.СписокУслуг);
	КонецЕсли;
	ПараметрыОтчета.Вставить("РазделУчета",   ОтборРазделУчета);
	ПараметрыОтчета.Вставить("ВидНачисления", ОтборВидНачисления);
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_КарточкаРасчетов.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.КВП_КарточкаРасчетов.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДокументКарточкаРасчетов = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры //ОбновитьКарточкуРасчетов

&НаСервере
// Процедура устанавливает параметры динамического списка льготников.
Процедура УстановитьПараметрыДинамическогоСпискаЛьготники(ЛицевойСчет)
	
	ПараметрДаты = КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",        ПараметрДаты);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_Проживающие.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК КВП_Проживающие
	|ГДЕ
	|	КВП_Проживающие.Владелец = &ЛицевойСчет";
	
	СписокПроживающих = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Льготники, "Дата",              ПараметрДаты);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Льготники, "СписокПроживающих", СписокПроживающих);
	
КонецПроцедуры

&НаСервере
// Процедура выводит основную информацию по лицевому счету в таблицу.
Процедура ОбновитьТаблицуОсновнойИнформации(ЛицевойСчет, Помещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЛС.ДатаОткрытия,
	|	ДанныеЛС.ДатаЗакрытия,
	|	ДанныеЛС.ДоляСобственности,
	|	ДанныеЛС.ОтветственныйВладелец,
	|	ВЫБОР
	|		КОГДА ДанныеЛС.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ""Частная, "" + ДанныеЛС.ПодвидЧастнойСобственности
	|		ИНАЧЕ ДанныеЛС.ВидСобственности
	|	КОНЕЦ КАК ВидСобственности,
	|	ДанныеЛС.ОбщаяПлощадь,
	|	ДанныеЛС.ЖилаяПлощадь
	|ИЗ
	|	(ВЫБРАТЬ
	|		КВП_ОткрытиеЛС.Период КАК ДатаОткрытия,
	|		ДОБАВИТЬКДАТЕ(КВП_ЗакрытиеЛС.Период, ДЕНЬ, -1) КАК ДатаЗакрытия,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА КВП_ДолиЛС.ДоляЗнаменатель = 0
	|					ТОГДА 0
	|				ИНАЧЕ КВП_ДолиЛС.ДоляЧислитель / КВП_ДолиЛС.ДоляЗнаменатель
	|			КОНЕЦ, 0) КАК ДоляСобственности,
	|		УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|		УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|		ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная)
	|				ТОГДА ""Индивидуальная""
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная)
	|				ТОГДА ""Совместная""
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|				ТОГДА ""Долевая""
	|		КОНЕЦ КАК ПодвидЧастнойСобственности,
	|		СУММА(ВЫБОР
	|				КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|					ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОбщаяПлощадь,
	|		СУММА(ВЫБОР
	|				КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|					ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ЖилаяПлощадь
	|	ИЗ
	|		РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
	|				,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И Действует) КАК КВП_ОткрытиеЛС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
	|					,
	|					ЛицевойСчет = &ЛицевойСчет
	|						И НЕ Действует) КАК КВП_ЗакрытиеЛС
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(, ЛицевойСчет = &ЛицевойСчет) КАК КВП_ДолиЛС
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|					,
	|					Объект = &Помещение
	|						И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь), ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|			ПО (ИСТИНА)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КВП_ОткрытиеЛС.Период,
	|		ДОБАВИТЬКДАТЕ(КВП_ЗакрытиеЛС.Период, ДЕНЬ, -1),
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА КВП_ДолиЛС.ДоляЗнаменатель = 0
	|					ТОГДА 0
	|				ИНАЧЕ КВП_ДолиЛС.ДоляЧислитель / КВП_ДолиЛС.ДоляЗнаменатель
	|			КОНЕЦ, 0),
	|		УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
	|		УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности,
	|		ВЫБОР
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная)
	|				ТОГДА ""Индивидуальная""
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная)
	|				ТОГДА ""Совместная""
	|			КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|				ТОГДА ""Долевая""
	|		КОНЕЦ) КАК ДанныеЛС";
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",   Помещение);
	
	ТаблицаОсновнойИнформации.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Функция возвращает значение константы "УПЖКХ_ИспользоватьФункционалВыгрузкиВГЦЖС".
Функция ПолучитьЗначениеНастройкиИспользоватьФункционалВГЦЖС()
	
	Возврат Константы.УПЖКХ_ИспользоватьФункционалВыгрузкиВГЦЖС.Получить();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Управляет элементами формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ИспользоватьФункционалВыгрузкиВГЦЖС = ПолучитьЗначениеНастройкиИспользоватьФункционалВГЦЖС();
	
	Элементы.ЛьготникиВидДокумента2.Видимость           = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиВидДокумента3.Видимость           = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиСерияДокумента2.Видимость         = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиСерияДокумента3.Видимость         = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиНомерДокумента2.Видимость         = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиНомерДокумента3.Видимость         = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиДатаВыдачиДокумента2.Видимость    = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиДатаВыдачиДокумента3.Видимость    = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиДатаОкончанияДокумента2.Видимость = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиДатаОкончанияДокумента3.Видимость = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиДатаВыдачиДокумента3.Видимость    = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиКемВыдан2.Видимость               = ИспользоватьФункционалВыгрузкиВГЦЖС;
	Элементы.ЛьготникиКемВыдан3.Видимость               = ИспользоватьФункционалВыгрузкиВГЦЖС;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция определяет, открыт ли лицевой счет на сервере.
Функция ЛицевойСчетОткрытНаСервере(ЛицевойСчет)
	
	Возврат Справочники.КВП_ЛицевыеСчета.ЛицевойСчетОткрыт(ЛицевойСчет);
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает элементы справочника по группе на сервере.
Функция ПолучитьЭлементыСправочникаПоГруппеНаСервере(Ссылка)
	
	Возврат ПолучитьЭлементыСправочникаПоГруппе(Ссылка);
	
КонецФункции

&НаКлиенте
// Обновляет отображение подчиненных таблиц и отчетов в зависимости
// от текущего элемента.
Процедура ОбновитьПодчиненныеТаблицы()
	
	// Обработка текущего элемента.
	ТекСтраница = Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница;
	
	Если мЗначениеОтбора = Неопределено ИЛИ мЗначениеОтбора.Пустая() Тогда
		ЛицевойСчетОпределен = Ложь;
	Иначе
		ЛицевойСчетОпределен = Истина;
	КонецЕсли;
	
	Если ЛицевойСчетОпределен Тогда
		// Если лицевой счет определен, делаем доступной группу связанной информации
		Элементы.ПанельДополнительнойИнформации.Доступность = Истина;
	Иначе
		// Если лицевой счет не определен, блокируем группу связанной информации
		// и переходим на страницу "Жильцы".
		// Очистить таблицу проживающих и перейти на вкладку "Жильцы"
		ОчиститьТаблицуПроживающих();
		Элементы.ПанельДополнительнойИнформации.Доступность = Ложь;
		Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтрПроживающие;
		Возврат;
	КонецЕсли;
	
	ЭтоГруппа = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭтоГруппа            = ТекущиеДанные.ЭтоГруппа;
		мЗначениеОтбораАдрес = ТекущиеДанные.Адрес;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		ОчиститьНеотображаемыеДанныеДляГруппЛицевыхСчетов(ТекСтраница);
	КонецЕсли;
	
	ЕстьОшибкиЗаполненияПараметровСтраниц = Ложь;
	
	Если ТекСтраница = Элементы.СтрПроживающие И НЕ ЭтоГруппа Тогда
		
		ОбновитьТаблицуПроживающих(мЗначениеОтбора, мЗначениеОтбораАдрес,
									Элементы.КнопкаВсеПроживающие.Пометка);
		
	ИначеЕсли ТекСтраница = Элементы.ОсновнаяИнформация И НЕ ЭтоГруппа Тогда
	
		ОбновитьТаблицуОсновнойИнформации(мЗначениеОтбора, мЗначениеОтбораАдрес);
	
	ИначеЕсли ТекСтраница = Элементы.СведенияДляВзаиморасчетов Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСведенийДляВзаиморасчетов, "Период",      КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСведенийДляВзаиморасчетов, "ЛицевойСчет", мЗначениеОтбора);
		
		НастроитьОтборВТаблицеСведенийДляВзаиморасчетов();
		
	ИначеЕсли ТекСтраница = Элементы.СтрДействующиеНачисления Тогда
		
		СформироватьОтчетДействующиеНачисленияНаСервере(мЗначениеОтбора);
		
	ИначеЕсли ТекСтраница = Элементы.СтрКарточкаРасчетов И НЕ ЭтоГруппа Тогда
		
		Если ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания Тогда
			// Если дата окончания меньше даты начала, то выводим сообщение об ошибке и не даем сформировать отчет.
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата начала периода не может быть больше даты конца периода");
			ЭтаФорма.ТекущийЭлемент = Элементы.НачалоПериода;
			ЕстьОшибкиЗаполненияПараметровСтраниц = Истина;
		КонецЕсли;
		
		Если ЕстьОшибкиЗаполненияПараметровСтраниц Тогда
			Элементы.ОтчетИГрафикиКарточкаРасчетов.Видимость = Ложь;
		Иначе
			Элементы.ОтчетИГрафикиКарточкаРасчетов.Видимость = Истина;
			
			СформироватьОтчетКарточкаРасчетовНаСервере(мЗначениеОтбора);
			
			// Графики не перезаполняем в том случае, если были изменены значения в полях "Раздел учета" и "Вид начисления".
			// Т.к. значения из данных полей не учитываются при формировании графиков.
			Если ЭтаФорма.ТекущийЭлемент = Элементы.ОтборРазделУчета
				ИЛИ ЭтаФорма.ТекущийЭлемент = Элементы.ОтборВидНачисления Тогда
				ТекущийЭлементЭтоОтборРазделаУчетаИлиВидаНачисления = Истина;
			Иначе
				ТекущийЭлементЭтоОтборРазделаУчетаИлиВидаНачисления = Ложь;
			КонецЕсли;
			
			Если НЕ ЭтоГруппа И ВыводитьГрафики И НЕ ТекущийЭлементЭтоОтборРазделаУчетаИлиВидаНачисления Тогда
				Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекСтраница, "ФОРМИРОВАНИЕОТЧЕТА");
				ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЛицевымСчетам", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.СтраницаЖурналДокументов Тогда
	
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ЖурналДокументов.Отбор, "ЛицевойСчет", мЗначениеОтбора,
																ВидСравненияКомпоновкиДанных.Равно);
	
	ИначеЕсли ТекСтраница = Элементы.Счетчики Тогда
	
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Дата", КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
		
		СписокОбъектов = Новый Массив;
		СписокОбъектов.Добавить(мЗначениеОтбора);
		СписокОбъектов.Добавить(мЗначениеОтбораАдрес);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Объект", СписокОбъектов);
		
		НастроитьОтборВТаблицеСчетчики();
		
		Если НЕ ЭтоГруппа И ВыводитьГрафики Тогда
			Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекСтраница, "ФОРМИРОВАНИЕОТЧЕТА");
			ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЛицевымСчетам", 0.2, Истина);
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.Примечания Тогда
		
		// Установим отбор по ЛС в табличном поле "Примечания".
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ТаблицаПримечаний.Отбор, "ЛицевойСчет", мЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.Равно);
		
	ИначеЕсли ТекСтраница = Элементы.ОбщаяИнформация Тогда
		
		Если ЕстьОшибкиЗаполненияПараметровСтраниц Тогда
			Элементы.ГруппаДанныеВзаиморасчеты.Видимость = Ложь;
		Иначе
			Элементы.ГруппаДанныеВзаиморасчеты.Видимость = Истина;
			ТекущийМесяц    = ПериодСтрокой;
			ПредыдущийМесяц = КВП_РаботаСДиалогами.ПолучитьПредставлениеМесяца(Добавитьмесяц(мМесяцВзаиморасчетов, -1));
			
			ЗаполнитьДанныеПоНачислениям(мЗначениеОтбора);
			
			Если ВыводитьГрафики Тогда
				Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекСтраница, "ФОРМИРОВАНИЕОТЧЕТА");
				ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЛицевымСчетам", 0.2, Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекСтраница = Элементы.стрЛьготники Тогда
		
		НастроитьОтборВТаблицеЛьготники();
		УстановитьПараметрыДинамическогоСпискаЛьготники(мЗначениеОтбора);
		
		Если ВыводитьГрафики Тогда
			Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекСтраница, "ФОРМИРОВАНИЕОТЧЕТА");
			ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЛицевымСчетам", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПодчиненныеТаблицы()

&НаКлиенте
// Процедура очищает данные, которые не отображаются в страницах внизу,
// если выбрана группа лицевых счетов.
//
Процедура ОчиститьНеотображаемыеДанныеДляГруппЛицевыхСчетов(СтраницаДопИнформации)
	
	// Жильцы.
	Если СтраницаДопИнформации = Элементы.СтрПроживающие Тогда
		
		ОчиститьТаблицуПроживающих();
		
	// Основная информация.
	ИначеЕсли СтраницаДопИнформации = Элементы.ОсновнаяИнформация Тогда
		
		ОчиститьТаблицуОсновнойИнформации();
		
	// Карточка расчетов.
	ИначеЕсли СтраницаДопИнформации = Элементы.СтрКарточкаРасчетов Тогда
		
		ОчиститьДанныеКарточкиРасчетов();
		
	// Счетчики.
	ИначеЕсли СтраницаДопИнформации = Элементы.Счетчики Тогда
		
		ОчиститьДанныеПоСчетчикам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура очищает таблицу проживающих.
//
Процедура ОчиститьТаблицуПроживающих()
	
	Проживающие.Очистить();
	
Конецпроцедуры

&НаКлиенте
// Процедура очищает таблицу основной информации.
//
Процедура ОчиститьТаблицуОсновнойИнформации()
	
	ТаблицаОсновнойИнформации.Очистить();
	
Конецпроцедуры

&НаСервере
// Процедура очищает данные карточки расчетов.
//
Процедура ОчиститьДанныеКарточкиРасчетов()
	
	ДокументКарточкаРасчетов.Очистить();
	ГрафикиТабличныйДокумент.Очистить();
	
Конецпроцедуры

&НаСервере
// Процедура очищает табличый документ с графиками по счетчикам.
//
Процедура ОчиститьДанныеПоСчетчикам()
	
	ГрафикиТабличныйДокумент.Очистить();
	
Конецпроцедуры

&НаКлиенте
// Процедура устанвливает режим просмотра списка л/с - "Список" при установке отбора,и
// "Иерархический список" при снятии отбора.
//
Процедура УстановитьРежимПросмотраСпискаЛицевыхСчетов()
	// Установлен отбор. Установить режим просмотра - список.
	Если ОтборЗданиеПризнак ИЛИ ОтборОтветственныйСобственникНанимательПризнак Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	Иначе
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

// Подготавливаем периоды для формирования отчета.
&НаСервере
Функция ОбработатьПериодыФормированияОтчетов(ДатаНачала, ДатаОкончания)
	
	СтруктураСПериодомФормированияОтчета = Новый Структура("НачалоПериода, КонецПериода");
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		// Если период формирования не заполнен, то отчет формируем за все время существования базы.
		НачалоПериода = '00010101';
		КонецПериода  = '39991230';
	Иначе
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			// Если заполнена только дата начала периода, то берем все данные от даты начала.
			НачалоПериода = НачалоДня(ДатаНачала);
			КонецПериода  = '39991230';
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
			// Если заполнена только дата окончания периода, то берем все данные до даты окончания.
			НачалоПериода = '00010101';
			КонецПериода  = КонецДня(ДатаОкончания);
		Иначе
			// Введены корректные дата начала и дата окончания.
			НачалоПериода = НачалоДня(ДатаНачала);
			КонецПериода  = КонецДня(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСПериодомФормированияОтчета.НачалоПериода = НачалоПериода;
	СтруктураСПериодомФормированияОтчета.КонецПериода  = КонецПериода;
	
	Возврат СтруктураСПериодомФормированияОтчета;
	
КонецФункции // ОбработатьПериодыФормированияОтчетов()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОтчетаПоКапремонту()
	
	Попытка
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(ОтборОрганизация, Истина);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>Не удалось получить настройки учета капитального ремонта. Пожалуйста, проверьте, корректно ли заданы настройки учета капитального ремонта.", ОписаниеОшибки()));
		Возврат;
	КонецПопытки;

КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

&НаСервере
// Процедура получает сведения о настройках кап. ремонта по текущей организации
// и управляет текстом гиперссылки открытия настроек кап. ремонта.
Процедура ОбновитьРеквизитыКапРемонта()
	
	ЗаполнитьРеквизитыОтчетаПоКапремонту();
	
	мМассивВариантовОтбораУслуг = Новый Массив;
	мМассивВариантовОтбораУслуг.Добавить("формировать отчет по всем услугам");
	
	Если ТипЗнч(мСтруктураНастроекКапРемонта) = Тип("Структура")
	   И мСтруктураНастроекКапРемонта.НастройкиОпределены
	   И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		СписокУслугКР = мСтруктураНастроекКапРемонта.СписокУслуг;
		СтрокаУслугКР = "";
		Для Каждого ТекЭлемент Из СписокУслугКР Цикл
			СтрокаУслугКР = СтрокаУслугКР + ?(Не ПустаяСтрока(СтрокаУслугКР), ",", "") + """" + ТекЭлемент.Значение + """";
		КонецЦикла;
		
		Если Не ПустаяСтрока(СтрокаУслугКР) Тогда
			СтрокаУслугКР = " (" +?(СписокУслугКР.Количество() > 1, "услуги: ", "услуга: ") + СтрокаУслугКР + ")";
		КонецЕсли;
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Ведется раздельный учет по услугам капитального ремонта" + СтрокаУслугКР;
		
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам, отличным от кап. ремонта");
		мМассивВариантовОтбораУслуг.Добавить("формировать отчет по услугам кап. ремонта");
		
	Иначе
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Не ведется раздельный учет по услугам капитального ремонта";
		
		Если ОтборВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта"
		 ИЛИ ОтборВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
			ОтборВариантОтбораУслуг = "формировать отчет по всем услугам";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОтборВариантОтбораУслуг.СписокВыбора.ЗагрузитьЗначения(мМассивВариантовОтбораУслуг);
	
	Если ПустаяСтрока(ОтборВариантОтбораУслуг) Тогда
		ОтборВариантОтбораУслуг = "формировать отчет по всем услугам";
	КонецЕсли;
	
КонецПроцедуры // ОбновитьРеквизитыКапРемонта()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()

// Предназначена для формирования заголовка свернутого отображения настроек,
// которые содержатся на странице "Карточка расчетов".
&НаСервере
Процедура СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов()
	
	ТекстЗаголовка = "";
	
	// Подстрока периода.
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Период: ""без ограничений""";
	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Период: ""до " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + """";
	ИначеЕсли НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Период: ""c " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + """";
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + "Период: ""с " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy") + """";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + "; ";
	
	// Подстрока организации.
	Если ОтборОрганизация.Пустая() Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Организация: <не указана>";
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + "Организация: """ + ОтборОрганизация  + """";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + "; ";
	
	// Подстрока варианта отбора услуг.
	Если ПустаяСтрока(ОтборВариантОтбораУслуг) Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Вариант отбора услуг: <не указан>";
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + "Вариант отбора услуг: """ + ОтборВариантОтбораУслуг + """";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + "; ";
	
	// Подстрока варианта отбора услуг.
	Если ПустаяСтрока(ОтборВариантВыводаСведенийОЗадолженности) Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Вариант вывода сведений о задолженности: <не указан>";
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + "Вариант вывода сведений о задолженности: """ + ОтборВариантВыводаСведенийОЗадолженности + """";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + "; ";
	
	// Подстрока раздела учета.
	Если ПустаяСтрока(ОтборРазделУчета) Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Раздел учета: <не указан>";
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + "Раздел учета: """ + ОтборРазделУчета + """";
	КонецЕсли;
	
	ТекстЗаголовка = ТекстЗаголовка + "; ";
	
	// Подстрока вида начисления.
	Если ПустаяСтрока(ОтборВидНачисления) Тогда
		ТекстЗаголовка = ТекстЗаголовка + "Вид начисления: <не указан>";
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + "Вид начисления: """ + ОтборВидНачисления + """";
	КонецЕсли;
	
	Элементы.ГруппаШапкаКарточкаРасчетов.ЗаголовокСвернутогоОтображения = ТекстЗаголовка;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Переменную РабочаяДата создавать нельзя, в толстом клиенте это вызовет ошибку.
	мРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	мМесяцВзаиморасчетов = мРабочаяДата;
	
	ДатаНачала     = НачалоМесяца(ДобавитьМесяц(мРабочаяДата, -3));
	ДатаОкончания  = КонецМесяца(мРабочаяДата);
	
	// Подключим дополнительные колонки списка ЛС в зависимости от версии платформы.
	ПроверитьПлатформуИПодключитьДополнительныеКолонкиСпискаЛицевыхСчетов();
	
	// Установим пустые значения параметров динамических списков.
	
	// Таблица сведений для взаиморасчетов
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСведенийДляВзаиморасчетов, "Период", КонецДня(мРабочаяДата));
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСведенийДляВзаиморасчетов, "ЛицевойСчет", Неопределено);
	// Таблица счетчиков
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Дата",   КонецДня(мРабочаяДата));
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаСчетчиков, "Объект", Неопределено);
	// Таблица льготников
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Льготники, "Дата",              мРабочаяДата);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Льготники, "СписокПроживающих", Неопределено);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметрДинамическогоСписка(Льготники, "ЛицевойСчет",       Неопределено);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.Месяц,
																	Элементы.ВидПериода.СписокВыбора, ВидПериода);
	
	Элементы.КнопкаВсеПроживающие.Пометка = 
		(УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЛицевыеСчета" , "ВсеПроживающие") = Истина);
	Элементы.ПоказатьНедействующиеЛьготы.Пометка = 
		(УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЛицевыеСчета" , "ПоказатьНедействующиеЛьготы") = Истина);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "мМесяцВзаиморасчетов", "ПериодСтрокой");
	
	ГрафикиТабличныйДокумент.ФиксацияСверху = 1;
	Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ПриСозданииНаСервере("КВП_ЛицевыеСчета", ВыводитьГрафики);
	
	// Установка списков выбора для полей параметров отчета "Карточка расчетов".
	СтруктураПараметров = Отчеты.КВП_КарточкаРасчетов.ЗаполнитьСтруктуруСМассивамиРазделовУчетаИВидовНачисления();
	Элементы.ОтборРазделУчета.СписокВыбора.ЗагрузитьЗначения(СтруктураПараметров.МассивРазделовУчета);
	Элементы.ОтборВидНачисления.СписокВыбора.ЗагрузитьЗначения(СтруктураПараметров.МассивВидовНачисления);
	
	// Заполним количество открытых лицевых счетов.
	КоличествоОткрытыхЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе();
	
	УправлениеФормой(ЭтаФорма);
	
	// ЧастоЗадаваемыеВпросы
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ФормаПользовательскиеКоманды);
	// Конец ЧастоЗадаваемыеВопросы
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Оповещение_ОбновитьСписокЛицевыхСчетов" Тогда
		Элементы.Список.Обновить();
	ИначеЕсли (ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = ОтборОрганизация) ИЛИ ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		Если Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтрКарточкаРасчетов Тогда
			ОбновитьРеквизитыКапРемонта();
			ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
			СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВсеПроживающие",              Элементы.КнопкаВсеПроживающие.Пометка);
	СтруктураДанных.Вставить("ПоказатьНедействующиеЛьготы", Элементы.ПоказатьНедействующиеЛьготы.Пометка);
	СтруктураДанных.Вставить("ЛьготникиВыводитьНаФорме",    ЛьготникиВыводитьНаФорме);
	
	СохранитьНастройкиНаСервере(СтруктураДанных);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//////////////////////////////////////////
// Список

&НаКлиенте
// Процедура вызывается при изменении списка.
Процедура СписокПриИзменении(Элемент)
	
	// Необходимо использовать обработчик ожидания, в противном случае
	// после перемещения последнего элемента группы в списке останется один элемент.
	ПодключитьОбработчикОжидания("ОбработчикПриИзмененииСписка", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик, возникающий после изменения списка лицевых счетов.
//
Процедура ОбработчикПриИзмененииСписка()
	
	Элемент = Элементы.Список;
	
	Если Не ТекущийЛицевойСчет = Неопределено
	   И НЕ Элемент.ТекущиеДанные = Неопределено
	      И Элемент.ТекущиеДанные.ПометкаУдаления Тогда
		
		ЛицевойСчет = ТекущийЛицевойСчет;
		
		Если ЛицевойСчетОткрытНаСервере(ЛицевойСчет) Тогда
			// Если лицевой счет открыт, то запрашиваем о его закрытии.
			ДопПараметры = Новый Структура("ЛицевойСчет", ЛицевойСчет);
			Оповещение   = Новый ОписаниеОповещения("ПослеУдаленияЛС", ЭтаФорма, ЛицевойСчет);
			ТекстВопроса = "При установке пометки удаления необходимо закрыть лицевой счет.
						 	|Закрыть лицевой счет?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикПриИзмененииСписка()

&НаКлиенте
// Обработчик оповещения после удаления лицевого счета.
//
Процедура ПослеУдаленияЛС(Результат, ЛицевойСчет) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ.КВП_ЗакрытиеЛицевогоСчета.ФормаОбъекта");
		ФормаДокумента.Объект.ЛицевойСчет = ЛицевойСчет;
		ФормаДокумента.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента списка справочника.
//
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// Данный код был добавлен по той причине, что при свертке группы настроек
	// на странице "Карточка расчетов" вызывался текущий обработчик с неверным определением
	// параметры "ТекущийЛицевойСчет".
	// В качестве текущего лицевого определялся лицевой счет из первой строки списка лицевых счетов.
	Если ЭтаФорма.ТекущийЭлемент <> Элементы.Список Тогда
		Возврат;
	КонецЕсли;
	
	мЗначениеОтбора      = Элемент.ТекущаяСтрока;
	ТекущийЛицевойСчет   = мЗначениеОтбора;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		мЗначениеОтбораАдрес = ТекущиеДанные.Адрес;
	КонецЕсли;
	
	Если мЗначениеОтбора <> ПредыдущийЛицевойСчет Тогда
		ПредыдущийЛицевойСчет = мЗначениеОтбора;
		ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры //СписокПриАктивизацииСтроки()

&НаКлиенте
// Процедура вызывается перед началом добавления нового элемента.
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Группа Тогда
		
		Отказ = Истина;
		
		СтруктураДанных = Новый Структура;
		
		Если Копирование И Не Элемент.ТекущиеДанные = Неопределено Тогда
			
			СтруктураДанных.Вставить("ШаблонЛС", мЗначениеОтбора);
			СтруктураДанных.Вставить("Здание",   УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Элемент.ТекущиеДанные.Адрес, "Владелец"));
			
		КонецЕсли;
		
		// Передаем группу создаваемого л/с, если она выбрана.
		Если Элемент.ТекущийРодитель <> Неопределено Тогда
			СтруктураДанных.Вставить("ГруппаЛС", Элемент.ТекущийРодитель);
		КонецЕсли;
		
		УПЖКХ_РаботаСЛицевымиСчетамиКлиент.ОткрытиеЛицевогоСчета(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" недоступного для редактирования поля.
Процедура НедоступноеПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//////////////////////////////////////////
// ПАНЕЛЬ ДОП. ИНФОРМАЦИИ

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" поля ввода "ПанельДополнительнойИнформации".
Процедура ПанельДополнительнойИнформацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОтключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы");
	ОтключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЛицевымСчетам");
	
	ГрафикиТабличныйДокумент = Новый ТабличныйДокумент;
	Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница);
	
	Если ТекущаяСтраница = Элементы.СтрКарточкаРасчетов Тогда
		Если ПустаяСтрока(ОтборВариантВыводаСведенийОЗадолженности) Тогда
			ОтборВариантВыводаСведенийОЗадолженности = "в основной таблице";
		КонецЕсли;
		ОбновитьРеквизитыКапРемонта();
		СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры // ПанельДополнительнойИнформацииПриСменеСтраницы()

//////////////////////////////////
// Основная информация по лицевому счету

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" таблицы "ТаблицаОсновнойИнформации".
//
Процедура ТаблицаОсновнойИнформацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" таблицы "ТаблицаОсновнойИнформации".
//
Процедура ТаблицаОсновнойИнформацииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ОтветственныйВладелец".
//
Процедура ТаблицаОсновнойИнформацииОтветственныйВладелецОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

//////////////////////////////////
// Сведения для взаиморасчетов по лицевому счету

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтборОрганизацияДляСведенийДляВзаиморасчетов".
//
Процедура ОтборОрганизацияДляСведенийДляВзаиморасчетовПриИзменении(Элемент)
	
	НастроитьОтборВТаблицеСведенийДляВзаиморасчетов();
	
КонецПроцедуры

&НаКлиенте
// Устанавливает отборы в динамическом списке таблицы сведений для взаиморасчетов.
//
Процедура НастроитьОтборВТаблицеСведенийДляВзаиморасчетов()
	
	Элементы.ТаблицаСведенийДляВзаиморасчетовОрганизация.Видимость = ОтборОрганизацияДляСведенийДляВзаиморасчетов.Пустая();
	
	Если Не ОтборОрганизацияДляСведенийДляВзаиморасчетов.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ТаблицаСведенийДляВзаиморасчетов.Отбор, "Организация", ОтборОрганизацияДляСведенийДляВзаиморасчетов,
																ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ТаблицаСведенийДляВзаиморасчетов.Отбор, "Организация");
	КонецЕсли;
	
	Элементы.ПоказыватьИсториюСведенийДляВзаиморасчетов.Пометка = ПоказыватьИсториюСведенийДляВзаиморасчетов;
	
	Если ПоказыватьИсториюСведенийДляВзаиморасчетов Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ТаблицаСведенийДляВзаиморасчетов.Отбор, "Актуальность");
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ТаблицаСведенийДляВзаиморасчетов.Отбор, "Актуальность", Истина,
																ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
КонецПроцедуры // НастроитьОтборВТаблицеСведенийДляВзаиморасчетов()

//////////////////////////////////////////
// Жильцы

&НаКлиенте
// Обработчик события "Выбор" поля "Проживающие".
Процедура ПроживающиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Проживающие".
Процедура ПроживающиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ЛицевойСчет = ТекущийЛицевойСчет;
	
	Если Не Группа Тогда
		
		Отказ = Истина;
		
		Владелец = ТекущийЛицевойСчет;
		
		Если Не Элемент.ТекущиеДанные = Неопределено Тогда
			ФизЛицо = Элемент.ТекущиеДанные.ФизЛицо;
		Иначе
			ФизЛицо = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
		КонецЕсли;
		
		СтруктураПараметров = ПодготовитьСтруктуруПараметровНаСервере(Владелец, ФизЛицо, Копирование);
		
		ФормаОбработки = ПолучитьФорму("Обработка.КВП_ПомощникСозданияПроживающего.Форма.ПомощникВводаЖильца",
										СтруктураПараметров, ЭтаФорма);
		
		ФормаОбработки.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "Проживающие".
Процедура ПроживающиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

//////////////////////////////////////////
// Взаиморасчеты

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "мМесяцВзаиморасчетов", "ПериодСтрокой");
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Графики_ОбработатьВыборПериодаВзаиморасчетов", ЭтаФорма);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "мМесяцВзаиморасчетов", "ПериодСтрокой", Ложь, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "мМесяцВзаиморасчетов", "ПериодСтрокой", Направление);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля " ОтборОрганизация".
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

//////////////////////////////////
// Карточка расчетов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачалоПериода".
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
	СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, ДатаНачала, ДатаОкончания, Период);
	
	ПараметрыСтраниц = Новый Структура;
	ПараметрыСтраниц.Вставить("ПроизвольныйПериод", "ГруппаПроизвольныйПериод");
	ПараметрыСтраниц.Вставить("ПериодПоВидам"     , "ГруппаПериодПоВидам");
	ПараметрыСтраниц.Вставить("День"              , "ГруппаДень");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода,
																			ПараметрыСтраниц);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
	СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" гиперссылки "КнопкаНастройкаВеденияКР".
&НаКлиенте
Процедура КомандаПоказатьНастройкиВеденияКР(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(ОтборОрганизация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", ОтборОрганизация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			Оповещение = Новый ОписаниеОповещения("КнопкаНастройкаВеденияКРНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КомандаПоказатьНастройкиВеденияКР()

&НаКлиенте
// Процедура - обработчик результата опроса команды "НадписьЭлементСправочника".
//
Процедура КнопкаНастройкаВеденияКРНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаВеденияКРНажатиеЗавершение()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, ДатаНачала, ДатаОкончания);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
	СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, ДатаНачала, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода.
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода    = СтруктураПериода.ВидПериода;
		Период        = СтруктураПериода.Период;
		ДатаНачала    = СтруктураПериода.НачалоПериода;
		ДатаОкончания = СтруктураПериода.КонецПериода;
		
		ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
		
		СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, ДатаНачала, ДатаОкончания);
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
			СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, ДатаНачала, ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачалоПериодаДень".
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	ДатаОкончания = КонецДня(ДатаНачала);
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля параметра отчета "Карточка расчетов".
Процедура ПриИзмененииПараметраКарточкиРасчетов(Элемент)
	
	Если ЭтаФорма.ТекущийЭлемент = Элементы.ОтборОрганизацияКарточкаРасчетов Тогда
		ОбновитьРеквизитыКапРемонта();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
	СформироватьЗаголовокСвернутогоОтображенияНастроекКарточкиРасчетов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Очистка" поля "ОтборВариантВыводаСведенийОЗадолженности".
//
Процедура ОтборВариантВыводаСведенийОЗадолженностиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОтборВариантВыводаСведенийОЗадолженностиОчистка()

//////////////////////////////////
// Журнал документов

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" поля "ЖурналДокументов".
Процедура ЖурналДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ЗначениеОтбора = ТекущийЛицевойСчет;
	
	Если ЗначениеОтбора = Неопределено
	  Или УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЗначениеОтбора, "ЭтоГруппа") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// Получаем статус лицевого счета:
	// 1 - Лицевой счет открыт или изменен.
	// 2 - Лицевой счет закрыт.
	// 3 - Лицевой счет не открыт.
	СтатусДокумента = УПЖКХ_РаботаСЛицевымиСчетами.СтатусЛицевогоСчета(ЗначениеОтбора);
	
	Если НЕ Копирование Тогда

		Отказ = Истина;

		// Получаем список доступных операций с лицевым счетом.
		СписокДокументов = УПЖКХ_РаботаСЛицевымиСчетами.ПолучитьСписокРегистрируемыхВЖурналеДокументов(
							"КВП_ДокументыПоЛицевымСчетам", СтатусДокумента);

		// Открываем документ.
		Если НЕ ЗначениеЗаполнено(СписокДокументов) Тогда
			ПоказатьПредупреждение(Неопределено, "Лицевой счет закрыт!");
		Иначе
			ДопПараметры       = Новый Структура("ЗначениеОтбора", ЗначениеОтбора);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборИзСпискаЖурналДокументов", ЭтаФорма, ДопПараметры);
			СписокДокументов.ПоказатьВыборЭлемента(ОписаниеОповещения,"Выбор вида документа");
		КонецЕсли;
		
	ИначеЕсли СтатусДокумента = 2 Тогда
		// Если лицевой счет уже закрыт.
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Лицевой счет закрыт!");
		
	ИначеЕсли СтатусДокумента = 1 И ТипЗнч(ТекущийЛицевойСчет) = Тип("ДокументСсылка.КВП_ОткрытиеЛицевогоСчета") Тогда
		// Если лицевой счет уже открыт.
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Лицевой счет уже открыт!");
		
	КонецЕсли;
	
КонецПроцедуры // ЖурналДокументовПередНачаломДобавления()

&НаКлиенте
// Процедура-обработчик результата выбора, вызванного в процедуре "".
//
Процедура ОбработатьВыборИзСпискаЖурналДокументов(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ФормаДокумента = ПолучитьФорму("Документ." + ВыбранныйЭлемент.Значение + ".ФормаОбъекта",
										Новый Структура("ЛицевойСчет", ДополнительныеПараметры.ЗначениеОтбора));
		ФормаДокумента.Открыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборИзСпискаЖурналДокументов()


//////////////////////////////////
// Таблица счетчиков

&НаКлиенте
// Обработчик события "Выбор" поля "ТаблицаСчетчиков".
Процедура ТаблицаСчетчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		Если Поле.Имя = "ТаблицаСчетчиковСчетчик" Тогда
			ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.Счетчик);
		КонецЕсли;
		Если Поле.Имя = "ТаблицаСчетчиковУслуга" Тогда
			ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.Услуга);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСчетчиковВыбор()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "ТаблицаСчетчиков".
Процедура ТаблицаСчетчиковПриАктивизацииСтроки(Элемент)
	
	Если ВыводитьГрафики Тогда
		МетодВыводаУслугВДиаграммах = Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах();
		Если Элемент.ТекущиеДанные <> Неопределено
		   И НЕ Элемент.ТекущиеДанные.Услуга.Пустая()
		   И МетодВыводаУслугВДиаграммах = 0
		   И ТекущаяУслугаТаблицыГрафиков <> Элемент.ТекущиеДанные.Услуга Тогда
			ТекущаяУслугаТаблицыГрафиков = Элемент.ТекущиеДанные.Услуга;
			Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.Счетчики, "ФОРМИРОВАНИЕОТЧЕТА");
			ПодключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЛицевымСчетам", 0.2, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаСчетчиковПриАктивизацииСтроки()


//////////////////////////////////
// Льготники

&НаКлиенте
// Обработчик события "Выбор" поля "Льготники".
Процедура ЛьготникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Открываем документ установки льготы.
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры // ЛьготникиВыбор()

&НаКлиенте
// Процедура настраивает отбор строк в таблице льготников.
Процедура НастроитьОтборВТаблицеЛьготники()
	
	Кнопка = Элементы.ПоказатьНедействующиеЛьготы;
	Элементы.ЛьготникиДействует.Видимость = Кнопка.Пометка;
	
	Если Кнопка.Пометка Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Льготники, "Действует", Истина, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		Кнопка.Заголовок = "Скрыть недействующие льготы";
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(Льготники, "Действует", Истина, Истина, ВидСравненияКомпоновкиДанных.Равно);
		Кнопка.Заголовок = "Показать недействующие льготы";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "ЗаполнитьНормыПотребления".
Процедура ЗаполнитьНормыПотребления(Команда)
	
	ТекущийЛС = ТекущийЛицевойСчет;
	Если ТекущийЛС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаЗаполненияНорм = ПолучитьФорму("Обработка.КВП_ЗаполнениеНормПотребленияУслуг.Форма",
										Новый Структура("НормаНаЛицевойСчет", Истина));
	НоваяСтрока        = ФормаЗаполненияНорм.Объект.Объекты.Добавить();
	НоваяСтрока.Объект = ТекущийЛС;
	ФормаЗаполненияНорм.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПоказатьОтключенныеСчетчики".
Процедура ПоказатьОтключенныеСчетчики(Команда)
	
	ЭтаФорма.ПоказатьОтключенныеСчетчики = НЕ ЭтаФорма.ПоказатьОтключенныеСчетчики;
	
	НастроитьОтборВТаблицеСчетчики();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПоказатьНедействующиеЛьготы" с настройкой отбора строк в таблице льготников.
Процедура ПоказатьНедействующиеЛьготы(Команда)
	
	Кнопка = Элементы.ПоказатьНедействующиеЛьготы;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	НастроитьОтборВТаблицеЛьготники();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПоказыватьТолькоАктуальныеСведенияДляВзаиморасчетов".
//
Процедура ПоказыватьИсториюСведенийДляВзаиморасчетов(Команда)
	
	ПоказыватьИсториюСведенийДляВзаиморасчетов = Не ПоказыватьИсториюСведенийДляВзаиморасчетов;
	НастроитьОтборВТаблицеСведенийДляВзаиморасчетов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьКоличествоЛС".
//
Процедура ОбновитьКоличествоЛС(Команда)
	
	КоличествоОткрытыхЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе();
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

//////////////////////////////////////////
// Дополнительно

&НаКлиенте
// Обработчик команды "СоздатьРегистрациюОплаты".
Процедура СоздатьРегистрациюОплаты(Команда)
	
	ТекущаяСтрока = ТекущийЛицевойСчет;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ПолучитьФорму("Документ.КВП_РегистрацияОплаты.ФормаОбъекта");
	
	СписокОбъектов = ПолучитьЭлементыСправочникаПоГруппеНаСервере(ТекущаяСтрока);
	Для каждого ЭлементСписка Из СписокОбъектов Цикл
		НоваяСтрока = ФормаДокумента.Объект.ЛицевыеСчета.Добавить();
		НоваяСтрока.Объект = ЭлементСписка.Значение;
	КонецЦикла;
	
	Если ФормаДокумента.Открыта() Тогда
		ФормаДокумента.Закрыть();
	КонецЕсли;

	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьКорректировкуНачислений".
Процедура СоздатьКорректировкуНачислений(Команда)
	
	ТекущаяСтрока = ТекущийЛицевойСчет;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаДокумента = ПолучитьФорму("Документ.КВП_КорректировкаНачислений.ФормаОбъекта");
	ФормаДокумента.Объект.Объект = ТекущаяСтрока;
	
	МесяцКорректировки = КонецМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
	СписокОбъектов = ПолучитьЭлементыСправочникаПоГруппеНаСервере(ТекущаяСтрока);
	Для каждого ЭлементСписка Из СписокОбъектов Цикл
		НоваяСтрока                 = ФормаДокумента.Объект.Корректировки.Добавить();
		НоваяСтрока.ЛицевойСчет     = ЭлементСписка.Значение;
		НоваяСтрока.МесяцНачисления = МесяцКорректировки;
	КонецЦикла;

	Если ФормаДокумента.Открыта() Тогда
		ФормаДокумента.Закрыть();
	КонецЕсли;

	ФормаДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьКорректировкуНачислений".
Процедура ОткрытьОтчетСписокПроживающих(Команда)
	
	ТекущаяСтрока = ТекущийЛицевойСчет;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаПросмотра", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	СтруктураПараметров.Вставить("ЛицевойСчет",   ТекущаяСтрока);
	
	ФормаОтчета = ПолучитьФорму("Отчет.КВП_КраткийСписокПроживающихПоЛицевомуСчету.Форма", СтруктураПараметров);
	ФормаОтчета.СформироватьПриОткрытии = Истина;
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьКорректировкуНачислений".
Процедура ОткрытьОтчетКвитанцииИзвещения(Команда)
	
	КВП_РаботаСДиалогамиКлиент.ОткрытьОтчетКвитанцииИзвещения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьОтчетДействующиеНачисления".
Процедура ОткрытьОтчетДействующиеНачисления(Команда)
	
	КВП_РаботаСДиалогамиКлиент.ОткрытьОтчетНазначенныхНачислений(ЭтаФорма);
	
КонецПроцедуры // ОткрытьОтчетДействующиеНачисления()

&НаКлиенте
// Процедура выводит список значений для выбора пользователем.
Процедура ВыбратьСпособОткрытияИзМеню(СписокВыбораОбъекта, ЭлементФормы, ИмяМетаданных) Экспорт
	
	ДопПараметры = Новый Структура("ИмяМетаданных, СписокВыбораОбъекта", ИмяМетаданных, СписокВыбораОбъекта);
	ПоказатьВыборИзМеню(Новый ОписаниеОповещения("ОбработатьВыборСпособаОткрытияИзМеню", ЭтаФорма, ДопПараметры),
						СписокВыбораОбъекта,
						ЭлементФормы);
	
КонецПроцедуры // ВыбратьСпособОткрытияИзМеню()

&НаКлиенте
// Обработчик результата выбора, вызванного в процедуре "ВыбратьСпособОткрытияИзМеню()".
Процедура ОбработатьВыборСпособаОткрытияИзМеню(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Неопределено;
	
	// Если выбран конкретный объект, сформируем отчет по текущему объекту в списке.
	Если ДополнительныеПараметры.СписокВыбораОбъекта.Индекс(ВыбранныйЭлемент) = 1 Тогда
		ТекущийОбъект = ТекущийЛицевойСчет;
		Если НЕ ТекущийОбъект = Неопределено И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущийОбъект, "ЭтоГруппа") Тогда
			Объект = ТекущийОбъект;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ДатаПросмотра",         УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	ПараметрыОтчета.Вставить("ТипОбъектовНачисления", ДополнительныеПараметры.ИмяМетаданных);
	ПараметрыОтчета.Вставить("ОбъектНачисления",      Объект);
	
	ФормаОтчета = ПолучитьФорму("Отчет.КВП_ДействующиеНачисления.Форма", ПараметрыОтчета);
	ФормаОтчета.Открыть();
	
КонецПроцедуры // ОбработатьВыборСпособаОткрытияИзМеню()

&НаКлиенте
// Обработчик команды "СоздатьКорректировкуНачислений".
Процедура ОткрытьОтчетПоНачислениямИДолгам(Команда)
	
	// Получаем текущие данные
	ТекущаяСтрока = ТекущийЛицевойСчет;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем отчет и его форму
	ФормаОтчета = ПолучитьФорму("Отчет.КВП_ОтчетПоНачислениямИДолгам.Форма",
								Новый Структура("ЛицевойСчет", ТекущаяСтрока));
	ФормаОтчета.СформироватьПриОткрытии = Истина;
	ФормаОтчета.Открыть();
	
КонецПроцедуры

//////////////////////////////////////////
// Жильцы

&НаКлиенте
// Обработчик команды "ВсеПроживающие".
Процедура ВсеПроживающие(Команда)
	
	Кнопка = Элементы.КнопкаВсеПроживающие;
	Кнопка.Пометка = Не Кнопка.Пометка;
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИзменитьПроживающего".
Процедура ИзменитьПроживающего(Команда)
	
	Если Не Элементы.Проживающие.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(Неопределено, Элементы.Проживающие.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПроживающего()

&НаКлиенте
// Обработчик команды "ОткрытьОтчетФинансовоЛицевойСчет".
Процедура УстановитьПометкуУдаленияЖильца(Команда)
	
	Если Не Элементы.Проживающие.ТекущиеДанные = Неопределено Тогда
		УстановитьПометкуУдаленияНаСервере(Элементы.Проживающие.ТекущиеДанные.Ссылка);
		ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьСписокЖильцов".
Процедура ОбновитьСписокЖильцов(Команда)
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьОтчетФормыРегистрационногоУчета".
Процедура ОткрытьОтчетФормыРегистрационногоУчета(Команда)
	
	Если Не ТекущийЛицевойСчет = Неопределено И Не Элементы.Проживающие.ТекущиеДанные = Неопределено Тогда
		
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("ЛицевойСчет", ТекущийЛицевойСчет);
		СтруктураОткрытия.Вставить("Проживающий", Элементы.Проживающие.ТекущиеДанные.Ссылка);
		СтруктураОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму("Отчет.КВП_ФормыРегистрационногоУчета.Форма", СтруктураОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьОтчетФинансовоЛицевойСчет".
Процедура ОткрытьОтчетФинансовоЛицевойСчет(Команда)
	
	Если Не ТекущийЛицевойСчет = Неопределено И Не Элементы.Проживающие.ТекущиеДанные = Неопределено Тогда
		
		СтруктураОткрытия = Новый Структура;
		СтруктураОткрытия.Вставить("ЛицевойСчет", ТекущийЛицевойСчет);
		СтруктураОткрытия.Вставить("Адрес",       Элементы.Список.ТекущиеДанные.Адрес);
		СтруктураОткрытия.Вставить("Проживающий", Элементы.Проживающие.ТекущиеДанные.Ссылка);
		СтруктураОткрытия.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму("Отчет.КВП_ФинансовоЛицевойСчетФорма1_3.Форма", СтруктураОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////
// Счетчики

&НаКлиенте
// Процедура настраивает отбор строк в таблице счетчиков.
Процедура НастроитьОтборВТаблицеСчетчики()
	
	Элементы.ТаблицаСчетчиковДействует.Видимость                 = ЭтаФорма.ПоказатьОтключенныеСчетчики;
	Элементы.ТаблицаСчетчиковПоказатьОтключенныеСчетчики.Пометка = ЭтаФорма.ПоказатьОтключенныеСчетчики;
	
	Если ЭтаФорма.ПоказатьОтключенныеСчетчики Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(ТаблицаСчетчиков, "Действует", Истина, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		Элементы.ТаблицаСчетчиковПоказатьОтключенныеСчетчики.Заголовок = "Скрыть отключенные счетчики";
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЭлементОтбораСписка(ТаблицаСчетчиков, "Действует", Истина, Истина, ВидСравненияКомпоновкиДанных.Равно);
		Элементы.ТаблицаСчетчиковПоказатьОтключенныеСчетчики.Заголовок = "Показать отключенные счетчики";
	КонецЕсли;
	
КонецПроцедуры // НастроитьОтборВТаблицеСчетчики()

#КонецОбласти

#Область РаботаСГрафиками

&НаКлиенте
// Процедура устанавливает начальные параметры графиков.
Процедура Графики_ОткрытьНастройкиГрафиков(Команда)
	
	ТекущаяВкладка = Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница.Заголовок;
	ОписаниеОповещения = Новый ОписаниеОповещения("Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Форма.ФормаНастройкиГрафиков",
					Новый Структура("ИмяОбъекта, ВидГрафика", "КВП_ЛицевыеСчета",ТекущаяВкладка), ЭтаФорма,,,,
					ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Графики_ОткрытьНастройкиГрафиков()

&НаСервереБезКонтекста
// Возвращает значение параметра "МетодВыводаУслугВДиаграммах" из настроек графиков.
Функция Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах()
	
	Возврат Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах("КВП_ЛицевыеСчета");
	
КонецФункции // Графики_ПолучитьЗначниеМетодаВыводаУслугВДиаграммах()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ЛьготникиВыводитьНаФорме".
Процедура ЛьготникиВыводитьНаФормеПриИзменении(Элемент)
	
	НастроитьВидимостьЭлементовСтраницаЛьготники();
	
КонецПроцедуры // ЛьготникиВыводитьНаФормеПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ЛьготникиВыводитьНаФорме".
Процедура НастроитьВидимостьЭлементовСтраницаЛьготники()
	
	Если НЕ ВыводитьГрафики Тогда
		Элементы.Льготники.Видимость                      = Истина;
		Элементы.ГрафикиЛьготыТабличныйДокумент.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЛьготникиВыводитьНаФорме = 0 Тогда
		Элементы.Льготники.Видимость                        = Истина;
		Элементы.ГрафикиЛьготыТабличныйДокумент.Видимость   = Истина;
		Элементы.ОтборОрганизацияДляГрафиковЛьгот.Видимость = Истина;
	ИначеЕсли ЛьготникиВыводитьНаФорме = 1 Тогда
		Элементы.Льготники.Видимость                        = Истина;
		Элементы.ГрафикиЛьготыТабличныйДокумент.Видимость   = Ложь;
		Элементы.ОтборОрганизацияДляГрафиковЛьгот.Видимость = Ложь;
	ИначеЕсли ЛьготникиВыводитьНаФорме = 2 Тогда
		Элементы.Льготники.Видимость                        = Ложь;
		Элементы.ГрафикиЛьготыТабличныйДокумент.Видимость   = Истина;
		Элементы.ОтборОрганизацияДляГрафиковЛьгот.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // НастроитьВидимостьЭлементовСтраницаЛьготники()

&НаКлиенте
// Вызывает серверный механизм формирования графиков.
Процедура Графики_ОбновитьГрафикиПоЛицевымСчетам()
	
	ОтключитьОбработчикОжидания("Графики_ОбновитьГрафикиПоЛицевымСчетам");
	
	Попытка
		
		ГрафикиТабличныйДокумент = Новый ТабличныйДокумент;
		
		Графики_ОбновитьГрафикиНаСервере();
		
		Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница, "НеИспользовать");
		
		ГрафикиТабличныйДокумент.ФиксацияСверху = 1;
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры // Графики_ОбновитьГрафикиПоЛицевымСчетам()

&НаКлиенте
// Процедура устанавливает состояние табличных документов с графиками на форме.
Процедура Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(ТекущаяСтраница, СостояниеПоля = "")
	
	ТабличныйДокумент = Неопределено;
	
	Если ТекущаяСтраница = Элементы.ОбщаяИнформация Тогда
		
		ТабличныйДокумент = Элементы.ГрафикиВзаиморасчетыТабличныйДокумент;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтрКарточкаРасчетов Тогда
		
		ТабличныйДокумент = Элементы.ГрафикиКарточкаРасчетовТабличныйДокумент;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Счетчики Тогда
		
		ТабличныйДокумент = Элементы.ГрафикиРасходПоПУТабличныйДокумент;
		
	ИначеЕсли ТекущаяСтраница = Элементы.стрЛьготники Тогда
		
		ТабличныйДокумент = Элементы.ГрафикиЛьготыТабличныйДокумент;
		НастроитьВидимостьЭлементовСтраницаЛьготники();
		
	КонецЕсли;
	
	Элементы.ГруппаГрафикиПоВзаиморасчетам.Видимость                  = ВыводитьГрафики;
	Элементы.ГруппаГрафикиКарточкаРасчетовТабличныйДокумент.Видимость = ВыводитьГрафики;
	Элементы.ГруппаГрафикиРасходПоПУТабличныйДокумент.Видимость       = ВыводитьГрафики;
	Элементы.ЛьготникиВыводитьНаФорме.Видимость                       = ВыводитьГрафики;
	
	Если НЕ ТабличныйДокумент = Неопределено И ВыводитьГрафики И Не ПустаяСтрока(СостояниеПоля) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ТабличныйДокумент, СостояниеПоля);
	КонецЕсли;
	
КонецПроцедуры // Графики_УстановитьВидимостьТабличногоДокументаСГрафиками()

&НаКлиенте
// Обработчик результата выбора периода для взаиморасчетов.
Процедура Графики_ОбработатьВыборПериодаВзаиморасчетов(Результат, ДопПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	
КонецПроцедуры // Графики_ОбработатьВыборПериодаВзаиморасчетов()

&НаКлиенте
// Обработчик действий после закрытия формы настроек графиков.
Процедура Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		
		Результат.Свойство("ВыводитьГрафики", ВыводитьГрафики);
		Графики_УстановитьВидимостьТабличногоДокументаСГрафиками(Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница, "НеИспользовать");
		
		ПодключитьОбработчикОжидания("ОбновитьПодчиненныеТаблицы", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры // Графики_ОбработатьРезультатЗакрытияФормыНастроекГрафиков()

&НаСервере
// Заполняет табличный документ формы.
Процедура Графики_ОбновитьГрафикиНаСервере()
	
	СтруктураСПериодомФормированияОтчета = ОбработатьПериодыФормированияОтчетов(ДатаНачала, ДатаОкончания);
	
	// Параметры из формы объекта для передачи в обработку формирования графиков.
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",                  ОтборОрганизация);
	ПараметрыОтчета.Вставить("ОбъектОтчета",                 Элементы.Список.ТекущаяСтрока);
	ПараметрыОтчета.Вставить("ИмяОбластиВыводаГрафика",      Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница.Имя);
	ПараметрыОтчета.Вставить("ИмяОбъекта",                   "КВП_ЛицевыеСчета");
	ПараметрыОтчета.Вставить("ДатаНачала",                   СтруктураСПериодомФормированияОтчета.НачалоПериода);
	ПараметрыОтчета.Вставить("ДатаОкончания",                СтруктураСПериодомФормированияОтчета.КонецПериода);
	ПараметрыОтчета.Вставить("МесяцВзаиморасчетов",          мМесяцВзаиморасчетов);
	ПараметрыОтчета.Вставить("ТекущаяУслугаТаблицыГраФиков", ТекущаяУслугаТаблицыГрафиков);
	
	// Отбор выводимых услуг.
	Если Элементы.ПанельДополнительнойИнформации.ТекущаяСтраница = Элементы.СтрКарточкаРасчетов Тогда
		Если ОтборВариантОтбораУслуг = "формировать отчет по всем услугам" Тогда
			ПараметрыОтчета.Вставить("СписокУслуг",            Новый СписокЗначений);
			ПараметрыОтчета.Вставить("ИсключатьУслугиВЗапросе", Неопределено);
		Иначе
			ПараметрыОтчета.Вставить("СписокУслуг", мСтруктураНастроекКапРемонта.СписокУслуг);
			Если ОтборВариантОтбораУслуг = "формировать отчет по услугам, отличным от кап. ремонта" Тогда
				ПараметрыОтчета.Вставить("ИсключатьУслугиВЗапросе", Истина);
			ИначеЕсли ОтборВариантОтбораУслуг = "формировать отчет по услугам кап. ремонта" Тогда
				ПараметрыОтчета.Вставить("ИсключатьУслугиВЗапросе", Ложь);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыОтчета.Вставить("СписокУслуг",             Новый СписокЗначений);
		ПараметрыОтчета.Вставить("ИсключатьУслугиВЗапросе", Неопределено);
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.Графики_ОбновитьГрафикиНаСервере(ТабличныйДокумент, ПараметрыОтчета);
	
	ГрафикиТабличныйДокумент.АвтоМасштаб         = Истина;
	ГрафикиТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ГрафикиТабличныйДокумент.ИмяПараметровПечати = "КВП_ЛицевыеСчета_Графики";
	
	ГрафикиТабличныйДокумент.Вывести(ТабличныйДокумент);
	
КонецПроцедуры // Графики_ОбновитьГрафикиНаСервере()

#КонецОбласти // Графики

/////////////////////////////////////////////////////////////////////////
// Методы, предназначенные для работы под управлением платформы 8.3.10.

#Область МетодыПредназначенныеДляРаботыПодУправлениемПлатформы_8_3_10

#Область ЗаполнениеКолонокОтветственногоСобственнникаИКонтрагентаДляОтраженияВРУ

&НаСервере
// Проверяет текущую версию платформы, сравнивая с минимально необходимо версией, подключает использование
// колонок "Ответственный собственник" и "Контрагент" и устанавливает дополнительное действие для списка ЛС.
//
Процедура ПроверитьПлатформуИПодключитьДополнительныеКолонкиСпискаЛицевыхСчетов()
	
	// Для заполнения дополнительных колонок списка л/с версия платформы должна быть не ниже 8.3.10.
	МинимальноНеобходимаяВерсияПлатформы = "8.3.10.0000";
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если Не УПЖКХ_ТиповыеМетодыКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, МинимальноНеобходимаяВерсияПлатформы) < 0 Тогда
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Список.УстановитьДействие("ПриПолученииДанныхНаСервере", "СписокПриПолученииДанныхНаСервере");
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПлатформуИПодключитьДополнительныеКолонкиСпискаЛицевыхСчетов()

&НаСервереБезКонтекста
// Процедура-обработчик события "ПриПолученииДанныхНаСервере" под управлением платформы 8.3.10.
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Внимание! Данная процедура выполняется только под управлением платформы 8.3.10. В платформах версий ниже,
	// чем 8.3.10, проверка конфигурации может выдавать ошибки.
	
	// Получаем лицевые счета.
	МассивЛС = Строки.ПолучитьКлючи();
	
	// Проверяем, есть ли в данных строк контрагент. Если нет - запрос не выполняем.
	// Для этого получаем первый ключ из массива л/с, по ключу находим строку с ее данными, ищем в данных строки свойство
	// "Контрагент", если такового нет, значит либо платформа ниже 8.3.10, либо колонка отключена
	// пользователем в свойствах формы.
	Если Строки.Количество() > 0 Тогда
		
		ДанныеСтроки = Строки[МассивЛС.Получить(0)].Данные;
		
		Если ДанныеСтроки.Свойство("Контрагент") Тогда
			ЗаполнитьСтрокиЛицевыхСчетовКонтрагентами(Строки, МассивЛС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписокПриПолученииДанныхНаСервере()

&НаСервереБезКонтекста
// Заполняет строки лицевых счетов контрагентами из сведений для взаиморасчетов по л/с.
//
Процедура ЗаполнитьСтрокиЛицевыхСчетовКонтрагентами(Строки, МассивЛС)
	
	ЗапросКонтрагенты = Новый Запрос;
	ЗапросКонтрагенты.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент) КАК ПредставлениеКонтрагента,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация) КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Период, ЛицевойСчет В (&МассивЛС)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	Контрагент";
	
	ЗапросКонтрагенты.УстановитьПараметр("МассивЛС", МассивЛС);
	ЗапросКонтрагенты.УстановитьПараметр("Период",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
	// Собираем данные о сведениях для взаиморасчетов в разрезе организаций.
	// Сведения будем выводить в колонку "Контрагент" в 3х форматах.
	// 1. Если по лицевому счету имеются только одни сведения для взаиморасчетов по одной организации, то выводим Контрагента.
	// 2. Если по лицевому счету имеется 2 и более сведений по разным организациям, но по одному контрагенту,
	// то выводим в формате: [Контрагент] ([Организация1], [Организация2]...).
	// 3. Если по лицевому счету имеется 2 и более сведений по разным организациям и контрагентам, то выводим
	//  в формате: [Контрагент1] ([Организация1], [Организация2]...), [Контрагент2] ([Организация1], [Организация2]...).
	
	// Выборка лицевых счетов.
	ВыборкаЛицевыхСчетов = ЗапросКонтрагенты.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЛицевыхСчетов.Следующий() Цикл
		
		// Контролируем наличие лицевого счета в строках данных.
		СтрокаДинамическогоСписка = Строки.Получить(ВыборкаЛицевыхСчетов.ЛицевойСчет);
		Если Не СтрокаДинамическогоСписка = Неопределено Тогда
			
			// Представление контрагента по умолчанию.
			ПредставлениеКонтрагентаСтрокой = "";
			
			// Выборка контрагентов.
			ВыборкаКонтрагентов = ВыборкаЛицевыхСчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоКонтрагентов = ВыборкаКонтрагентов.Количество();
			
			Пока ВыборкаКонтрагентов.Следующий() Цикл
				
				// Дополним строку представлением контрагента.
				ПредставлениеКонтрагентаСтрокой = ПредставлениеКонтрагентаСтрокой + ВыборкаКонтрагентов.ПредставлениеКонтрагента;
				
				// Выборка организаций.
				ВыборкаОрганизаций = ВыборкаКонтрагентов.Выбрать();
				КоличествоОрганизаций = ВыборкаОрганизаций.Количество();
				
				// Представление организаций выводим в случае, если есть несколько контрагентов
				// или по одному контрагенту ведется учет в нескольких организациях.
				Если КоличествоКонтрагентов > 1 Или КоличествоОрганизаций > 1 Тогда
					
					// Собираем представление организаций.
					ПредставлениеОрганизаций = "";
					Пока ВыборкаОрганизаций.Следующий() Цикл
						ПредставлениеОрганизаций = ПредставлениеОрганизаций + СокрЛП(ВыборкаОрганизаций.Организация) + ", ";
					КонецЦикла;
					
					// Исключаем последние символы ", " из представления организаций.
					ПредставлениеОрганизаций = Лев(ПредставлениеОрганизаций, СтрДлина(ПредставлениеОрганизаций) - 2);
					
					// Добавляем представление организаций к представлению контрагента строкой.
					ПредставлениеКонтрагентаСтрокой = ПредставлениеКонтрагентаСтрокой + " " + "(" + ПредставлениеОрганизаций + ")";
					
				КонецЕсли;
				
				// Добавляем разделитель между контрагентами.
				ПредставлениеКонтрагентаСтрокой = ПредставлениеКонтрагентаСтрокой + ", ";
				
			КонецЦикла;
			
			// Исключаем последние символы ", " из представления контрагента строкой.
			ПредставлениеКонтрагентаСтрокой = Лев(ПредставлениеКонтрагентаСтрокой, СтрДлина(ПредставлениеКонтрагентаСтрокой) - 2);
			
			// Записываем сформированное представление в строку данных лицевого счета.
			СтрокаДинамическогоСписка.Данные["Контрагент"] = ПредставлениеКонтрагентаСтрокой;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСтрокиЛицевыхСчетовКонтрагентами()

#КонецОбласти

#Область ОтборПоОтветственномуСобственнику

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ОтборОтветственныйСобственникНаниматель".
//
Процедура ОтборОтветственныйСобственникНанимательПриИзменении(Элемент)
	
	// Отбор/поиск по колонке "Ответственный владелец" списка ЛС невозможен вследствие особенностей заполнения колонки
	// данными. Поэтому в качестве временного решения поместили на форму поле отбора л/с по ответственному владельцу.
	ОтборОтветственныйСобственникНанимательПризнак = ЗначениеЗаполнено(ОтборОтветственныйСобственникНаниматель);
	УстановитьОтборПоОтветственному();
	
КонецПроцедуры // ОтборОтветственныйСобственникНанимательПриИзменении()

&НаСервереБезКонтекста
// Функция возвращает массив лицевых счетов, отобранных по отвественному владельцу л/с по состоянию на текущую дату.
//
Функция ПолучитьСписокЛицевыхСчетовДляОтбораПоОтветственномуСобственнику(ОтветственныйСобственникНаниматель)
	
	МассивЛС = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Период, ) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|ГДЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец = &ОтветственныйВладелец";
	
	Запрос.УстановитьПараметр("Период", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("ОтветственныйВладелец", ОтветственныйСобственникНаниматель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЛС.Добавить(Выборка.ЛицевойСчет);
	КонецЦикла;
	
	Возврат МассивЛС;
	
КонецФункции // ПолучитьСписокЛицевыхСчетовДляОтбораПоОтветственномуСобственнику()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ОтборОтветственныйСобственникНаниматель".
//
Процедура ОтборОтветственныйСобственникНанимательПризнакПриИзменении(Элемент)
	
	УстановитьОтборПоОтветственному();
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор по отвественному владельцу л/с.
//
Процедура УстановитьОтборПоОтветственному()
	
	МассивЛС = Новый Массив;
	Если ОтборОтветственныйСобственникНанимательПризнак Тогда
		МассивЛС = ПолучитьСписокЛицевыхСчетовДляОтбораПоОтветственномуСобственнику(ОтборОтветственныйСобственникНаниматель);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(
		ЭтаФорма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"Ссылка",
		МассивЛС,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ОтборОтветственныйСобственникНанимательПризнак);
		
		УстановитьРежимПросмотраСпискаЛицевыхСчетов();
	
КонецПроцедуры // УстановитьОтборПоОтветственному()

#КонецОбласти

#Область ОтборПоЗданию

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ОтборЗданиеПризнак".
//
Процедура ОтборЗданиеПризнакПриИзменении(Элемент)
	
	УстановитьОтборПоЗданию();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ОтборЗдание".
//
Процедура ОтборЗданиеПриИзменении(Элемент)
	
	ОтборЗданиеПризнак = ЗначениеЗаполнено(ОтборЗдание);
	УстановитьОтборПоЗданию();
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор по зданию в списке л/с.
//
Процедура УстановитьОтборПоЗданию()
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(
		ЭтаФорма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		"Адрес.Владелец",
		ОтборЗдание,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ОтборЗданиеПризнак);
		
		УстановитьРежимПросмотраСпискаЛицевыхСчетов();
	
КонецПроцедуры // УстановитьОтборПоЗданию()

#КонецОбласти

#КонецОбласти