
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Функция возвращает долю собственности на сервере.
Функция ПолучитьДолюСобственностиЛСНаСервере(Дата, Ссылка)
	
	Возврат ПолучитьДолюСобственностиЛС(Дата, Ссылка);
	
КонецФункции

&НаКлиенте
// Устанавливает отбор списка норм.
Процедура УстановитьОтборНормНаКлиенте(ОтборСтрок, ПоказатьВсе)
	
	Если ПоказатьВсе Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("Актуальность", Истина);
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет табличное поле "Комнаты".
Процедура ЗаполнениеСпискаКомнат()
	
	Если Объект.Ссылка.Пустая() Тогда
		СвязанныеКомнаты.Очистить();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната
	|ПОМЕСТИТЬ вт_КомнатыЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(&Период, ЛицевойСчет = &ЛС) 
	|		КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	вт_КомнатыЛС.Комната,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ИЗ
	|	вт_КомнатыЛС КАК вт_КомнатыЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&Период,
	|				ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|					И Объект В
	|						(ВЫБРАТЬ
	|							вт_КомнатыЛС.Комната
	|						ИЗ
	|							вт_КомнатыЛС КАК вт_КомнатыЛС)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО вт_КомнатыЛС.Комната = КВП_ПлощадьПомещенияСрезПоследних.Объект";
	
	Запрос.УстановитьПараметр("Период", КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
	Запрос.УстановитьПараметр("ЛС",     Объект.Ссылка);
	
	СвязанныеКомнаты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ОбновитьТаблицуПлощадейПомещения()

&НаСервере
// Заполняет форму данными из регистра сведений "ПаспортныеДанныеФизЛиц".
Процедура ЗаполнитьДаннымиДокументаСобственника()
	
	Если ЗначениеЗаполнено(ТекВладелецОбъекта) И ТипЗнч(ТекВладелецОбъекта) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		
		Элементы.СтраницаПроживающий.Видимость = Истина;
		Элементы.СтраницаКонтрагент.Видимость  = Ложь;
		
		ЗапросДанныхОДокументах = Новый Запрос;
		ЗапросДанныхОДокументах.Текст =
		"ВЫБРАТЬ
		|	ДокументыФизическихЛиц.ФизЛицо,
		|	ДокументыФизическихЛиц.ВидДокумента,
		|	ДокументыФизическихЛиц.Серия,
		|	ДокументыФизическихЛиц.ДатаВыдачи,
		|	ДокументыФизическихЛиц.Номер,
		|	ДокументыФизическихЛиц.КемВыдан,
		|	ДокументыФизическихЛиц.КодПодразделения
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|						&Период, 
		|						Физлицо = &ТекущееФизлицо) КАК ДокументыФизическихЛиц
		|";
	
		ЗапросДанныхОДокументах.УстановитьПараметр("ТекущееФизлицо", ТекВладелецОбъекта.ФизЛицо);
		ЗапросДанныхОДокументах.УстановитьПараметр("Период",         УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
		РезультатЗапроса  = ЗапросДанныхОДокументах.Выполнить();
		ВыборкаРезультата = РезультатЗапроса.Выбрать();
		Пока ВыборкаРезультата.Следующий() Цикл
			ВидДокумента                      = ВыборкаРезультата.ВидДокумента;
			СерияДокумента                    = ВыборкаРезультата.Серия;
			ДатаВыдачиДокумента               = ВыборкаРезультата.ДатаВыдачи;
			НомерДокумента                    = ВыборкаРезультата.Номер;
			КемВыданДокумент                  = ВыборкаРезультата.КемВыдан;
			КодПодразделения                  = ВыборкаРезультата.КодПодразделения;
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ТекВладелецОбъекта)
	  И ТипЗнч(ТекВладелецОбъекта) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Элементы.СтраницаПроживающий.Видимость = Ложь;
		Элементы.СтраницаКонтрагент.Видимость  = Истина;
		ДокументУдостоверяющийЛичность = ТекВладелецОбъекта.ДокументУдостоверяющийЛичность;
		
	Иначе
		
		Элементы.СтраницаПроживающий.Видимость = Ложь;
		Элементы.СтраницаКонтрагент.Видимость  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура управляет отображением и содержанием информации для взаиморасчетов.
//
Процедура ЗаполнитьСведенияДляВзаиморасчетов()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// В общем случае устанавливаем значение видимости информации по взаиморасчетам в "Ложь".
	ОтображатьЭлементыСведенийДляВзаиморасчетов = Ложь;
	
	// В случае, когда в полученных данных только одна запись - выводим полученные значения в форму
	// и устанавливаем видимость информации в значение "Истина".
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		
		ТекОрганизация = Выборка.Организация;
		ТекДоговор     = Выборка.Договор;
		ТекКонтрагент  = Выборка.Контрагент;
		
		ОтображатьЭлементыСведенийДляВзаиморасчетов = Истина;
		
	КонецЕсли;
	
	// Устанавливаем видимость информации по организации, контрагенту и договору
	// в соответствии со значением переменной "ОтображатьЭлементыСведенийДляВзаиморасчетов".
	Элементы.ТекОрганизация.Видимость = ОтображатьЭлементыСведенийДляВзаиморасчетов;
	Элементы.ТекКонтрагент.Видимость  = ОтображатьЭлементыСведенийДляВзаиморасчетов;
	Элементы.ТекДоговор.Видимость     = ОтображатьЭлементыСведенийДляВзаиморасчетов;
	
КонецПроцедуры // ЗаполнитьСведенияДляВзаиморасчетов()

&НаСервереБезКонтекста
// Получает email и телефоны жильца, собственника.
//
Функция ПолучитьКИСобственника(Собственник)
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	МассивСобственников = Новый Массив;
	МассивСобственников.Добавить(Собственник);
	ВременнаяТаблицаКИ = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбъектов(МассивСобственников, МассивТиповКИ);
	
	МассивТелефоновСобственника = Новый Массив;
	МассивАдресовЭлектроннойПочтыСобственника = Новый Массив;
	
	Для Каждого СтрокаВременнойТаблицыКИ Из ВременнаяТаблицаКИ Цикл
	
		Если СтрокаВременнойТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
			МассивТелефоновСобственника.Добавить(СтрокаВременнойТаблицыКИ.Представление);
		ИначеЕсли СтрокаВременнойТаблицыКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			МассивАдресовЭлектроннойПочтыСобственника.Добавить(СтрокаВременнойТаблицыКИ.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаТелефоновСобственника = СтрСоединить(МассивТелефоновСобственника, ", ");
	СтрокаАдресовЭлектроннойПочтыСобственника = СтрСоединить(МассивАдресовЭлектроннойПочтыСобственника, ", ");
	СтруктураКИСобственника = Новый Структура("СтрокаТелефоновСобственника, СтрокаАдресовЭлектроннойПочтыСобственника, Представление",
	                                          СтрокаТелефоновСобственника, СтрокаАдресовЭлектроннойПочтыСобственника, Собственник.Наименование);
	
	Возврат СтруктураКИСобственника;
	
КонецФункции

&НаСервере
// Заполняет таблицу контакной информации собственников на форме.
//
Процедура ЗаполнитьТаблицуКИСобственников(Период = Неопределено)
	
	// В таблицу включаем собственников и жильцов.
	
	КИСобственников.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Ссылка,
		|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник.Наименование КАК Представление,
		|	2 КАК ПриоритетКатегории
		|ПОМЕСТИТЬ ВтСобственникиЖильцы
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
		|ГДЕ
		|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует = ИСТИНА
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо.Наименование,
		|	1
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|			,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ДатаИзменения <= &Период) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает = ИСТИНА
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо.Наименование,
		|	1
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ДатаИзменения <= &Период) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтСобственникиЖильцы.Ссылка КАК Ссылка,
		|	ВтСобственникиЖильцы.Представление КАК Представление,
		|	МАКСИМУМ(ВтСобственникиЖильцы.ПриоритетКатегории) КАК ПриоритетКатегории
		|ПОМЕСТИТЬ ВтСобственникиЖильцыСПриоритетами
		|ИЗ
		|	ВтСобственникиЖильцы КАК ВтСобственникиЖильцы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтСобственникиЖильцы.Ссылка,
		|	ВтСобственникиЖильцы.Представление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтСобственникиЖильцыСПриоритетами.Представление КАК Представление,
		|	ВтСобственникиЖильцыСПриоритетами.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВтСобственникиЖильцыСПриоритетами.ПриоритетКатегории = 2
		|				ТОГДА ""собственник""
		|			ИНАЧЕ ""жилец""
		|		КОНЕЦ КАК СТРОКА(20)) КАК Категория
		|ИЗ
		|	ВтСобственникиЖильцыСПриоритетами КАК ВтСобственникиЖильцыСПриоритетами";
	
	Запрос.УстановитьПараметр("Период", ?(Период = Неопределено, КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()),Период));
	Запрос.УстановитьПараметр("Помещение", Объект.Адрес);
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект.Ссылка);
	
	ТаблицаСобственников = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСобственников.Колонки.Добавить("ЭтоОтветственныйСобственник", Новый ОписаниеТипов("Булево"));
	
	Если ЗначениеЗаполнено(ТекВладелецОбъекта) И НЕ ТекВладелецОбъекта = "Собственник не указан" Тогда
		
		Если ТипЗнч(ТекВладелецОбъекта) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			ОтветственныйСобственник = ТекВладелецОбъекта.ФизЛицо;
		ИначеЕсли ТипЗнч(ТекВладелецОбъекта) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОтветственныйСобственник = ТекВладелецОбъекта;
		КонецЕсли;
		
		РезультатПоиска = ТаблицаСобственников.Найти(ОтветственныйСобственник, "Ссылка");
		
		Если РезультатПоиска = Неопределено Тогда
			НоваяСтрокаТаблицыСобственников                             = ТаблицаСобственников.Добавить();
			НоваяСтрокаТаблицыСобственников.Ссылка                      = ОтветственныйСобственник;
			НоваяСтрокаТаблицыСобственников.Представление               = ОтветственныйСобственник.Наименование;
			НоваяСтрокаТаблицыСобственников.Категория                   = "отв. собственник";
			НоваяСтрокаТаблицыСобственников.ЭтоОтветственныйСобственник = Истина;
		Иначе
			РезультатПоиска.Категория                   = "отв. собственник";
			РезультатПоиска.ЭтоОтветственныйСобственник = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСобственников = ТаблицаСобственников.ВыгрузитьКолонку("Ссылка");
	
	Если МассивСобственников.Количество() > 0 Тогда
		
		МассивТиповКИ = Новый Массив;
		МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		ВременнаяТаблицаКИ = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбъектов(МассивСобственников, МассивТиповКИ);
		
		ОтборПоСсылке = Новый Структура("Объект");
		
		МассивТелефоновСобственника = Новый Массив;
		МассивАдресовЭлектроннойПочтыСобственника = Новый Массив;
		
		// Берем только тех собственников, жильцов, у которых есть КИ
		ТаблицаСобственниковСКИ = ВременнаяТаблицаКИ.Скопировать(,"Объект");
		ТаблицаСобственниковСКИ.Свернуть("Объект");
		
		Для Каждого СтрокаТаблицыСобственниковСКИ Из ТаблицаСобственниковСКИ Цикл
			
			ОтборПоСсылке.Объект = СтрокаТаблицыСобственниковСКИ.Объект;
			
			МассивТелефоновСобственника.Очистить();
			МассивАдресовЭлектроннойПочтыСобственника.Очистить();
			
			МассивСтрокСКИСобственника = ВременнаяТаблицаКИ.НайтиСтроки(ОтборПоСсылке);
			
			Для Каждого ЭлементМассиваСКИСобственника Из МассивСтрокСКИСобственника Цикл
				
				Если ЭлементМассиваСКИСобственника.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					МассивТелефоновСобственника.Добавить(ЭлементМассиваСКИСобственника.Представление);
				ИначеЕсли ЭлементМассиваСКИСобственника.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					МассивАдресовЭлектроннойПочтыСобственника.Добавить(ЭлементМассиваСКИСобственника.Представление);
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаТелефоновСобственника = СтрСоединить(МассивТелефоновСобственника, ", ");
			СтрокаАдресовЭлектроннойПочтыСобственника = СтрСоединить(МассивАдресовЭлектроннойПочтыСобственника, ", ");
			
			СтрокаСПредставлениемСобственника = ТаблицаСобственников.Найти(СтрокаТаблицыСобственниковСКИ.Объект, "Ссылка");
			
			НоваяСтрокаТаблицыКИСобственников = КИСобственников.Добавить();
			
			НоваяСтрокаТаблицыКИСобственников.Представление               = СтрокаСПредставлениемСобственника.Представление + " (" + СтрокаСПредставлениемСобственника.Категория + ")";
			НоваяСтрокаТаблицыКИСобственников.Телефоны                    = СтрокаТелефоновСобственника;
			НоваяСтрокаТаблицыКИСобственников.АдресаЭлектроннойПочты      = СтрокаАдресовЭлектроннойПочтыСобственника;
			НоваяСтрокаТаблицыКИСобственников.Ссылка                      = СтрокаТаблицыСобственниковСКИ.Объект;
			НоваяСтрокаТаблицыКИСобственников.ЭтоОтветственныйСобственник = СтрокаСПредставлениемСобственника.ЭтоОтветственныйСобственник;
			НоваяСтрокаТаблицыКИСобственников.Категория                   = СтрокаСПредставлениемСобственника.Категория;
			
			Если ЗначениеЗаполнено(СтрокаАдресовЭлектроннойПочтыСобственника) Тогда
				НоваяСтрокаТаблицыКИСобственников.КартинкаОтправки = 0;
			Иначе
				НоваяСтрокаТаблицыКИСобственников.КартинкаОтправки = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		//Ответственный собственник всегда идет вверху списка.
		//Остальные пункты списка сортируются по категории, а потом по алфавиту.
		КИСобственников.Сортировать("ЭтоОтветственныйСобственник УБЫВ, Категория УБЫВ, Представление");
		
	КонецЕсли;//Если МассивСобственников.Количество() > 0 Тогда
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МЕТОДАМИ МОДУЛЯ ОБЪЕКТА


// Формирует таблицу норм потребления.
&НаСервере
Процедура ОбновитьТаблицуНорм()
		
	НормыПотребленияУслуг.Загрузить(УПЖКХ_РаботаСОбъектамиУчетаСервер.ЗаполнитьТаблицуНормативовУслуг(Объект.Ссылка));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мТекРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	тмОрганизацияЛС = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		КоличествоПроживающих        = ПолучитьКоличествоПроживающих(Объект.Ссылка,
																КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
		КоличествоЗарегистрированных = ПолучитьКоличествоЗарегистрированных(Объект.Ссылка,
																КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
		
		СтруктураЛС = ПолучитьДатуОткрытияЗакрытияЛС(Объект.Ссылка);
		СтруктураЛС.Свойство("ДокументОткрытия", ДокументОткрытия);
		СтруктураЛС.Свойство("ДатаОткрытия",     ДатаОткрытия);
		СтруктураЛС.Свойство("ДокументЗакрытия", ДокументЗакрытия);
		СтруктураЛС.Свойство("ДатаЗакрытия",     ДатаЗакрытия);
		
		Если ЗначениеЗаполнено(Объект.Адрес) Тогда
			ТекПомещение = Объект.Адрес;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Адрес)
			И ЗначениеЗаполнено(Объект.Адрес.Владелец) Тогда
			ТекЗдание = Объект.Адрес.Владелец;
		КонецЕсли;
		ТекВладелецОбъекта = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(
								Объект.Ссылка, КонецДня(мТекРабочаяДата));
		ДанныеОСобственности = ПолучитьДанныеОСобственностиПомещения(Объект.Адрес, КонецДня(мТекРабочаяДата));
		Если ДанныеОСобственности.Количество() > 0 Тогда
			
			мВидСобственности = ДанныеОСобственности.Получить(0).ВидСобственности;
			Если мВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная Тогда
				ТекВидСобственности = Строка(мВидСобственности) + ", "
				                    + Строка(ДанныеОСобственности.Получить(0).ПодвидЧастнойСобственности);
			Иначе
				ТекВидСобственности = Строка(мВидСобственности);
			КонецЕсли;
			
		КонецЕсли;
		
		// проверка заполненности реквизитов
		Если НЕ ЗначениеЗаполнено(ТекВладелецОбъекта) Тогда
			ТекВладелецОбъекта   = "Собственник не указан";
			Элементы.ТекВладелецОбъекта.Гиперссылка = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекВидСобственности) Тогда
			ТекВидСобственности = "Данные о собственности не указаны";
		КонецЕсли;
		
		ЗаполнитьДаннымиДокументаСобственника();
		ЗаполнитьСведенияДляВзаиморасчетов();
		
		ЗаполнитьТаблицуКИСобственников(КонецДня(мТекРабочаяДата));
		
	КонецЕсли;
	
	ОбновитьТаблицуНорм();
	
	ЗаполнениеСпискаКомнат();
	
	// Данные по долям л/с
	СтруктураДолиЛС   = 
		ПолучитьДолюСобственностиЛСНаСервере(КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()), Объект.Ссылка);
	ДоляЛСЧислитель   = СтруктураДолиЛС.Числитель;
	ДоляЛСЗнаменатель = СтруктураДолиЛС.Знаменатель;
	ДоляЛС = ?(ДоляЛСЗнаменатель = 0, 0, ДоляЛСЧислитель/ДоляЛСЗнаменатель);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив;
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	
	ПараметрыРазмещенияКонтактнойИнформации = УПЖКХ_ТиповыеМетодыСервер.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаАдресДоставки";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВиды;
	
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриСозданииНаСервере(ЭтаФорма, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Отказ = Истина;
		УПЖКХ_РаботаСЛицевымиСчетамиКлиент.ОткрытиеЛицевогоСчета();
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ Объект.Идентификатор = "" Тогда
		Элементы.Идентификатор.ТолькоПросмотр       = Истина;
		Элементы.ЗаполнитьИдентификатор.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьОтборНормНаКлиенте(Элементы.НормыПотребленияУслуг.ОтборСтрок,
									Не Элементы.КнопкаПоказатьВсеНормы.Пометка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьДолюЛС" Тогда
		СтруктураДолиЛС   = ПолучитьДолюСобственностиЛСНаСервере(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(),
																	Объект.Ссылка);
		ДоляЛСЧислитель   = СтруктураДолиЛС.Числитель;
		ДоляЛСЗнаменатель = СтруктураДолиЛС.Знаменатель;
		ДоляЛС = ?(ДоляЛСЗнаменатель = 0, 0, ДоляЛСЧислитель/ДоляЛСЗнаменатель);
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТаблицуНорм" Тогда
		ОбновитьТаблицуНорм();
	КонецЕсли;	
	
	Если ИмяСобытия = "ИзменениеДанныхФизическогоЛица" ИЛИ ИмяСобытия = "Запись_Контрагенты" Тогда
		
		ОтборПоСобственнику = Новый Структура("Ссылка", Источник);
		
		МассивСтрок = КИСобственников.НайтиСтроки(ОтборПоСобственнику);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтруктураКИСобственника = ПолучитьКИСобственника(МассивСтрок[0].Ссылка);
			
			Если ЗначениеЗаполнено(СтруктураКИСобственника.СтрокаТелефоновСобственника)
				ИЛИ ЗначениеЗаполнено(СтруктураКИСобственника.СтрокаАдресовЭлектроннойПочтыСобственника) Тогда
				
				МассивСтрок[0].Представление          = СтруктураКИСобственника.Представление + " (" + МассивСтрок[0].Категория + ")";
				МассивСтрок[0].Телефоны               = СтруктураКИСобственника.СтрокаТелефоновСобственника;
				МассивСтрок[0].АдресаЭлектроннойПочты = СтруктураКИСобственника.СтрокаАдресовЭлектроннойПочтыСобственника;
				
				Если ЗначениеЗаполнено(СтруктураКИСобственника.СтрокаАдресовЭлектроннойПочтыСобственника) Тогда
					МассивСтрок[0].КартинкаОтправки = 0;
				Иначе
					МассивСтрок[0].КартинкаОтправки = 1;
				КонецЕсли;
					
			Иначе
				
				КИСобственников.Удалить(МассивСтрок[0]);
				
			КонецЕсли;
		Иначе
			
			ЗаполнитьТаблицуКИСобственников();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Контактная информация"
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	
	// Обработчик подсистемы "Свойства"
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Обработка проверки заполнения формы на сервере.
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
// Обработка после записи.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЭтаФорма.Элементы.Идентификатор.ТолькоПросмотр       = Истина;
	ЭтаФорма.Элементы.ЗаполнитьИдентификатор.Доступность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "Открытие" поля "ДатаОткрытия".
Процедура ДатаОткрытияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ДокументОткрытия.Пустая() Тогда
		ПоказатьЗначение(Неопределено, ДокументОткрытия);
	КонецЕсли;
	
КонецПроцедуры // ДатаОткрытияОткрытие()

&НаКлиенте
// Обработчик события "Открытие" поля "ДатаЗакрытия".
Процедура ДатаЗакрытияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ДокументОткрытия.Пустая() Тогда
		ПоказатьЗначение(Неопределено, ДокументЗакрытия);
	КонецЕсли;
	
КонецПроцедуры // ДатаЗакрытияОткрытие()

&НаКлиенте
// Обработчик нажатия кнопки "ИзменитьИдентификатор".
Процедура ИзменитьИдентификатор(Команда)
	
	Если Объект.Идентификатор = "" Тогда
		ЭтаФорма.Элементы.Идентификатор.ТолькоПросмотр       = Ложь;
		ЭтаФорма.Элементы.ЗаполнитьИдентификатор.Доступность = Истина;
	Иначе
		ТекстВопроса = "Идентификаторы лицевых счетов могут использоваться в сторонних системах, в том числе для идентификации лицевого счета на сайте ЖКХ.
					   |Изменение идентификатора может привести к некорректной идентификации лицевого счета в этих системах.
					   |Вы действительно хотите изменить идентификатор?";
		ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("ИзменитьИдентификаторОбработкаОтвета", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеОВыбореОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура изменяет видимость кнопки изменения идентфикатора в зависимости от ответа пользователя.
//
Процедура ИзменитьИдентификаторОбработкаОтвета(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Элементы.Идентификатор.ТолькоПросмотр       = Ложь;
		ЭтаФорма.Элементы.ЗаполнитьИдентификатор.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьИдентификаторОбработкаОтвета()

&НаКлиенте
// Обработчик события "Выбор" таблицы формы КИСобственников.
//
Процедура КИСобственниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.КИСобственников.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "КИСобственниковТелефоны" Тогда
		Возврат;
	ИначеЕсли Поле.Имя = "КИСобственниковПредставление" Тогда
		
		ПараметрыОткрытия = Новый Структура("Ключ", Элементы.КИСобственников.ТекущиеДанные.Ссылка);
		
		Если ТипЗнч(Элементы.КИСобственников.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			ФормаВладельцаКИ = ПолучитьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма, Истина);
			
			Если НЕ ФормаВладельцаКИ.Элементы.Найти("ГруппаКонтактнаяИнформация") = Неопределено Тогда
				ФормаВладельцаКИ.ТекущийЭлемент = ФормаВладельцаКИ.Элементы.ГруппаКонтактнаяИнформация;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элементы.КИСобственников.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ФормаВладельцаКИ = ПолучитьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма, Истина);
			
			Если НЕ ФормаВладельцаКИ.Элементы.Найти("ГруппаКомпоновкиКонтактнойИнформации") = Неопределено Тогда
				ФормаВладельцаКИ.ТекущийЭлемент = ФормаВладельцаКИ.Элементы.ГруппаКомпоновкиКонтактнойИнформации;
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаВладельцаКИ.Открыть();
		
	ИначеЕсли Поле.Имя = "КИСобственниковАдресаЭлектроннойПочты" Тогда
		
		Если ЗначениеЗаполнено(Элементы.КИСобственников.ТекущиеДанные.АдресаЭлектроннойПочты) Тогда
		
			УПЖКХ_ТиповыеМетодыКлиент.СоздатьЭлектронноеПисьмо(Элементы.КИСобственников.ТекущиеДанные.АдресаЭлектроннойПочты,
			                                                   Элементы.КИСобственников.ТекущиеДанные.АдресаЭлектроннойПочты,
			                                                   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Нормы потребления услуг

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка норм потребления услуг.
Процедура НормыПотребленияУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;

	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаписатьЭлемент", ЭтаФорма),
					   "Перед добавлением норм потребления элемент необходимо записать. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ПараметрыФормы = Новый Структура("ОтборОбъект", Объект.Ссылка);
		
		Если Копирование Тогда
			ПараметрыФормы.Вставить("Услуга",           Элемент.ТекущиеДанные.Услуга);
			ПараметрыФормы.Вставить("НормаПотребления", Элемент.ТекущиеДанные.НормаПотребления);
		КонецЕсли;
		
		ОткрытьФорму("РегистрСведений.КВП_НормыПотребленияУслугЛС.ФормаЗаписи", ПараметрыФормы);	
	КонецЕсли;
	
КонецПроцедуры // НормыПотребленияУслугУслугиПередНачаломДобавления()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "НормыПотребленияУслугУслугиПередНачаломДобавления()".
Процедура ОбработатьРезультатВопросаЗаписатьЭлемент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФорму("РегистрСведений.КВП_НормыПотребленияУслугЛС.ФормаЗаписи", Новый Структура("ОтборОбъект", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаписатьЭлемент()

&НаКлиенте
// Обработчик события "ПослеУдаления"  списка норм потребления услуг.
Процедура НормыПотребленияУслугПослеУдаления(Элемент)
	
	Оповестить("ОбновитьТаблицуНорм");	

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "КОМНАТЫ"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка комнат.
Процедура СвязанныеКомнатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" списка комнат.
Процедура СвязанныеКомнатыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "ЗаполнитьИдентификатор".
Процедура ЗаполнитьИдентификатор(Команда)
	
	Объект.Идентификатор = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторЛС(, Объект.Наименование,, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИзменитьДолюЛС".
Процедура ИзменитьДолюЛС(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(ДатаОткрытия) Тогда
		ПоказатьПредупреждение(Неопределено, "Лицевой счет не открыт!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Здание",      ТекЗдание);
	СтруктураПараметров.Вставить("Помещение",   Объект.Адрес);
	СтруктураПараметров.Вставить("ЛицевойСчет", Объект.Ссылка);
	
	Форма = ПолучитьФорму("Обработка.КВП_УстановкаДолей.Форма", СтруктураПараметров);
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИсторияДолиЛС".
Процедура ИсторияДолиЛС(Команда)
	
	// Если элемент не записан, предлагается запись.
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаИсторияДолиЛС", ЭтотОбъект);
		ТекстВопроса       = "Перед просмотром истории изменения долей л/с необходимо записать элемент.
							 |Записать?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;

	// Открытие регистра с отбором по текущему лицевому счету.
	ОткрытьФормуРазмерыДолей();
	
КонецПроцедуры // ИсторияДолиЛС()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванный из процедуры "ИсторияДолиЛС()".
// При положительном ответе записывает элемент справочника и вызывает функцию открытия формы
// списка РС "КВП_РазмерыДолейЛицевыхСчетов".
//
// Параметры:
//  РезультатВопроса		 - 	КодВозвратаДиалога - код ответа.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура ОбработатьРезультатВопросаИсторияДолиЛС(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	Записать();
	
	ОткрытьФормуРазмерыДолей();
	
КонецПроцедуры // ОбработатьРезультатВопросаИсторияДолиЛС()

&НаКлиенте
// Процедура открывает форму списка РС "КВП_РазмерыДолейЛицевыхСчетов".
Процедура ОткрытьФормуРазмерыДолей()
	
	ОткрытьФорму("РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.ФормаСписка",
				 Новый Структура("ЛицевойСчет", Объект.Ссылка));
	
КонецПроцедуры // ОткрытьФормуРазмерыДолей()

&НаКлиенте
// Обработчик команды "ПоказатьВсеНормы".
Процедура ПоказатьВсеНормы(Команда)
	
	Кнопка = Элементы.КнопкаПоказатьВсеНормы;
	Кнопка.Пометка = Не Кнопка.Пометка;
	
	УстановитьОтборНормНаКлиенте(Элементы.НормыПотребленияУслуг.ОтборСтрок, Не Кнопка.Пометка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьНормы".
Процедура ОбновитьСписокКомнат(Команда)
	
	ЗаполнениеСпискаКомнат();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки "СведенияДляВзаиморасчетов".
Процедура ОткрытьСведенияДляВзаиморасчетов(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЛицевойСчет", Объект.Ссылка);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", Отбор);
		ФормаСписка = ОткрытьФорму("РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ФормаСписка", ПараметрыОткрытия);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Лицевой счет не записан.");
	КонецЕсли;
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

&НаКлиенте
// Обработчик команды "СоздатьЭлектронноеПисьмо".
Процедура СоздатьЭлектронноеПисьмо(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.СоздатьЭлектронноеПисьмо(Объект.АдресЭлектроннойПочты,
													   Объект.АдресЭлектроннойПочты,
													   ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"),
													   Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПодсистемыКонтактнаяИнформация

&НаКлиенте
// Обработчик события ПриИзменении поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриИзменении поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события НачалоВыбора поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Очистка поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияОчистка(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
//
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияВыполнитьКоманду(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные контактной информации.
//
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
КонецФункции

&НаКлиенте
// Управление этой процедуре передается после изменения полей контактной информации.
//
Процедура ПослеИзмененияКонтактнойИнформации(Результат) Экспорт
	
	// Заглушка. Процедура необходима для безошибочной отработки механизма ввода адреса.
	
КонецПроцедуры

// Обработчик события "ПередУдалением" списка норм потребления услуг.
&НаКлиенте
Процедура НормыПотребленияУслугПередУдалением(Элемент, Отказ)
	УПЖКХ_РаботаСОбъектамиУчетаСервер.УдалитьНормуИзРегистраСведений(Элемент.ТекущиеДанные.Период, Объект.Ссылка, Элемент.ТекущиеДанные.Услуга);
КонецПроцедуры

// Обработчик события "Выбор" списка норм потребления услуг.
&НаКлиенте
Процедура НормыПотребленияУслугУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура("Ключ, ОтборОбъект",  УПЖКХ_РаботаСОбъектамиУчетаСервер.ПолучитьКлючЗаписиРегистраНормыПотребленияЛС(Элемент.ТекущиеДанные.Период, Объект.Ссылка, Элемент.ТекущиеДанные.Услуга), Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.КВП_НормыПотребленияУслугЛС.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

#КонецОбласти
