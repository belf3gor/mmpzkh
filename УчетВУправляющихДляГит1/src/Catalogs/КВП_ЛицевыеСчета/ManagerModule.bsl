
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Проверяет уникальность идентификатора лицевого счета.
//
Функция ПроверитьУникальностьИдентификатора(Идентификатор, ЛицевойСчет = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_ЛицевыеСчета.Ссылка
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Идентификатор = &Идентификатор
	|	И &УсловиеНаЛицевойСчет";
	
	УсловиеНаЛицевойСчет = "ИСТИНА";
	Если Не ЛицевойСчет = Неопределено
	   И Не ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
		УсловиеНаЛицевойСчет = "НЕ КВП_ЛицевыеСчета.Ссылка = &ЛицевойСчет";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЛицевойСчет", УсловиеНаЛицевойСчет);
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ЛицевойСчет",   ЛицевойСчет);
	
	// Запрос необходимо выполнить в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	ИдУникален = Запрос.Выполнить().Пустой();
	
	// Снимаем привилегированный режим.
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИдУникален;
	
КонецФункции //ПроверитьУникальностьИдентификатора()

// Обработчик установки пометки удаления на лицевом счете.
//  Проверяет, является ли лицевой счет закрытым. Если нет - требует его
// закрытия для продолжения.
//
// Параметры:
//  ЛицевойСчет  - обрабатываемый лицевой счет,
//  Период       - период, на который необходимо получить сведения,
//  Отказ        - Булево - флаг отказа в установки пометки удаления.
//
Функция ЛицевойСчетОткрыт(ЛицевойСчет, Период = Неопределено) Экспорт
	
	// Если "Период" не определен, то переопределяем переменную на пустую дату,
	// чтобы получить срез сведений на последний момент времени.
	Если Период = Неопределено Тогда
		Период = '00010101';
	КонецЕсли;
	
	// Проверим, не открыт ли лицевой счет.
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Период,
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Период, ЛицевойСчет = &ЛицевойСчет) КАК КВП_ЛицевыеСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	// Если лицевой счет не открыт, то ничего не делаем.
	Если ВыборкаИзЗапроса.Следующий() И ВыборкаИзЗапроса.Действует Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция формирует табличный документ с памяткой доступа в личный кабинет.
//
// Параметры
//  МассивОбъектов  - массив с объектами печати. При этом первым объектом в массиве является организация,
//  в разрезе которой осуществляется печать памяток. Все последующие объекты - лицевые счета.
//  ОбъектыПечати - список значений.
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция ПечатьПамяткиДоступа(МассивОбъектов, ОбъектыПечати) Экспорт
	
	// СБОР ИНФОРМАЦИИ.
	СтруктураПараметров = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	
	Организация = МассивОбъектов.Получить(0);
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Справочник.КВП_ЛицевыеСчета.ПФ_MXL_ПамяткаДляДоступаВЛичныйКабинетНаСайтеЖКХ");
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КВП_ЛицевыеСчета_ПамяткаДляДоступаВЛичныйКабинетНаСайтеЖКХ";
	
	Если МассивОбъектов.Количество() < 2 Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ТекущаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ТипОбъекта = ТипЗнч(МассивОбъектов.Получить(1));
	ПервыйЭлемент = Истина;
	
	Если ТипОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		// СТАРЫЙ МЕХАНИЗМ (удалить после удаления обработки "Генерация параметров доступа для WEB-приложения").
		ТаблицаВладельцевЛС = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуВладельцевЛицевыхСчетов(ТекущаяДата, МассивОбъектов);
		
		Для Каждого ЛицевойСчет Из МассивОбъектов Цикл
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПодготовитьКПечатиСтруктуруСПараметрами_СтарыйМеханизм(СтруктураПараметров, ТаблицаВладельцевЛС, ЛицевойСчет, Организация, ТекущаяДата);
			
			Область = Макет.ПолучитьОбласть("Блок1");
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок2");
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок3");
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок4");
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		
	Иначе
		// НОВЫЙ МЕХАНИЗМ.
		ТаблицаПД = ПолучитьТаблицуПараметровДоступа(МассивОбъектов);
		
		Для Каждого СтрокаЛС Из ТаблицаПД Цикл
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПодготовитьКПечатиСтруктуруСПараметрами(СтруктураПараметров, СтрокаЛС, Организация, ТекущаяДата);
			
			Область = Макет.ПолучитьОбласть("Блок1");
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок2");
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок3");
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок4");
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
	КонецЕсли;
	
	ТабличныйДокумент.ПолеСнизу   = 0;
	ТабличныйДокумент.ПолеСверху  = 0;
	ТабличныйДокумент.ПолеСлева   = 0;
	ТабличныйДокумент.ПолеСправа  = 0;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПамяткиДоступа()

// Заполняет структуру с параметрыми данными, необходимыми для вывода.
//
// Параметры:
//  СтруктураПараметров - структура с параметрами
//  СтрокаЛС - строка таблицы с параметрами доступа
//  Организация - текущая организация
//  ТекущаяДата - рабочая дата.
//
Процедура ПодготовитьКПечатиСтруктуруСПараметрами(СтруктураПараметров, СтрокаЛС, Организация, ТекущаяДата)
	
	СтруктураПараметров.Вставить("ЛицевойСчет", СтрокаЛС.ЛицевойСчет);
	
	АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(СтрокаЛС.ЛицевойСчет.Адрес.Владелец);
	Адрес     = ПолучитьАдресПомещения(АдресДома, СтрокаЛС.ЛицевойСчет.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = СтрокаЛС.ЛицевойСчет.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	СтруктураПараметров.Вставить("Адрес", Адрес);
	
	СтруктураПараметров.Вставить("ФИО",    СтрокаЛС.Владелец);
	СтруктураПараметров.Вставить("Логин",  СтрокаЛС.Логин);
	СтруктураПараметров.Вставить("Пароль", СтрокаЛС.Пароль);
	
КонецПроцедуры // ПодготовитьКПечатиСтруктуруСПараметрами()

// Заполняет структуру с параметрыми данными, необходимыми для вывода.
//
// Параметры:
//  СтруктураПараметров - структура с параметрами
//  ТаблицаВладельцевЛС - таблица с ответственными собственниками л/с
//  ЛицевойСчет - текущий лицевой счет
//  Организация - текущая организация
//  ТекущаяДата - рабочая дата.
//
Процедура ПодготовитьКПечатиСтруктуруСПараметрами_СтарыйМеханизм(СтруктураПараметров, ТаблицаВладельцевЛС, ЛицевойСчет, Организация, ТекущаяДата)
	
	СтруктураПараметров.Вставить("ЛицевойСчет", ЛицевойСчет);
	
	АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(ЛицевойСчет.Адрес.Владелец);
	Адрес     = ПолучитьАдресПомещения(АдресДома, ЛицевойСчет.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = ЛицевойСчет.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	СтруктураПараметров.Вставить("Адрес", Адрес);
	
	СтрокаВладельцаЛС = ТаблицаВладельцевЛС.Найти(ЛицевойСчет, "ЛицевойСчет");
	Если СтрокаВладельцаЛС = Неопределено Тогда
		ВладелецЛС = "";
	Иначе
		ВладелецЛС = СтрокаВладельцаЛС.Владелец;
	КонецЕсли;
	СтруктураПараметров.Вставить("ФИО", ВладелецЛС);
	
	СтруктураПараметров.Вставить("Логин",  ЛицевойСчет.Идентификатор);
	СтруктураПараметров.Вставить("Пароль", ЛицевойСчет.УдалитьПарольДоступа);
	
КонецПроцедуры // ПодготовитьКПечатиСтруктуруСПараметрами()

// Формирует таблицу с параметрами доступа по л/с.
//
// Параметры:
//  МассивОбъектов - массив со структурами, содержащими параметры доступа по л/с.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуПараметровДоступа(МассивОбъектов)
	
	ТаблицаПД = Новый ТаблицаЗначений;
	ТаблицаПД.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаПД.Колонки.Добавить("Логин",       Новый ОписаниеТипов("Строка"));
	ТаблицаПД.Колонки.Добавить("Пароль",      Новый ОписаниеТипов("Строка"));
	
	Для Каждого Структура ИЗ МассивОбъектов Цикл
		Если НЕ Структура.Свойство("ЛицевойСчет") ИЛИ НЕ Структура.Свойство("Логин")
		 ИЛИ НЕ Структура.Свойство("Пароль") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПД.Добавить();
		НоваяСтрока.ЛицевойСчет = Структура.ЛицевойСчет;
		НоваяСтрока.Логин       = Структура.Логин;
		НоваяСтрока.Пароль      = Структура.Пароль;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПД.ЛицевойСчет,
	|	ТаблицаПД.Логин,
	|	ТаблицаПД.Пароль
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	&ТаблицаПД КАК ТаблицаПД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец
	|ПОМЕСТИТЬ втВладельцы
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ТекущаяДата,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Логин,
	|	втЛицевыеСчета.Пароль,
	|	втВладельцы.Владелец
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВладельцы КАК втВладельцы
	|		ПО втЛицевыеСчета.ЛицевойСчет = втВладельцы.ЛицевойСчет";

	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаПД",   ТаблицаПД);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуПараметровДоступа()

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ ПАМЯТОК ДЛЯ МОБИЛЬНОГО ПРИЛОЖЕНИЯ

// Функция формирует табличный документ с памяткой доступа в личный кабинет.
//
// Параметры:
//  МассивОбъектов  - массив с объектами печати. При этом первым объектом в массиве является организация,
//  в разрезе которой осуществляется печать памяток. Все последующие объекты - лицевые счета.
//  ОбъектыПечати - список значений.
//
// Возвращаемое значение:
//   ТабличныйДокумент.
//
Функция ПечатьПамяткиДоступаМобильноеПриложение(МассивОбъектов, ОбъектыПечати) Экспорт
	
	СтруктураПараметров = Новый Структура;
	ТабличныйДокумент   = Новый ТабличныйДокумент;
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Справочник.КВП_ЛицевыеСчета.ПФ_MXL_ПамяткаДляДоступаВЛичныйКабинетВМобильномПриложенииЖКХ");
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПЖКХ_ИнтеграцияСМобильнымПриложением_ПамяткаДляДоступаВЛичныйКабинетВМобильномПриложенииЖКХ";
	
	Если МассивОбъектов.Количество() < 1 Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(МассивОбъектов.Получить(0));
	ПервыйЭлемент = Истина;
	
	Если ТипОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		// Данные QR кода для скачивания приложения с Google Play.
		АдресGooglePlay = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресМобильногоПриложенияЖКХЛичныйКабинетGooglePlay();
		АдресAppStore   = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресМобильногоПриложенияЖКХЛичныйКабинетAppStore();
		
		ДанныеQRКодаGooglePlay = УправлениеПечатью.ДанныеQRКода(АдресGooglePlay, 1, 190);
		ДанныеQRКодаAppStore   = УправлениеПечатью.ДанныеQRКода(АдресAppStore, 1, 190);
		
		// Получаем идентификаторы лицевых счетов.
		ТаблицаИдентификаторов = ПолучитьИдентификаторыЛицевыхСчетовМобильноеПриложение(МассивОбъектов);
		
		Для Каждого СтрокаЛС Из ТаблицаИдентификаторов Цикл
			
			Если СтрокаЛС.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПервыйЭлемент Тогда
				ПервыйЭлемент = Ложь;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПодготовитьКПечатиСтруктуруСПараметрамиМобильноеПриложение(СтруктураПараметров, СтрокаЛС, АдресGooglePlay);
			
			Область = Макет.ПолучитьОбласть("Блок1");
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок2");
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок3");
			Область.Параметры.Заполнить(СтруктураПараметров);
			
			// QR-код с адресом в Google play.
			Если ТипЗнч(ДанныеQRКодаGooglePlay) = Тип("ДвоичныеДанные")
			   И Не Область.Области.Найти("QR_GooglePlay") = Неопределено Тогда
				Область.Области.QR_GooglePlay.Картинка = Новый Картинка(ДанныеQRКодаGooglePlay);
			КонецЕсли;
			
			// QR-код с адресом в App Store.
			Если ТипЗнч(ДанныеQRКодаAppStore) = Тип("ДвоичныеДанные")
			   И Не Область.Области.Найти("QR_AppStore") = Неопределено Тогда
				Область.Области.QR_AppStore.Картинка = Новый Картинка(ДанныеQRКодаAppStore);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(Область);
			
			Область = Макет.ПолучитьОбласть("Блок4");
			Область.Параметры.Заполнить(СтруктураПараметров);
			
			ПараметрыШтрихкода = Новый Структура;
			ЗаполнитьПараметрыОдномерногоШК(ПараметрыШтрихкода, СтрокаЛС.Идентификатор);
			
			КартинкаШК = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
			
			Если ТипЗнч(КартинкаШК) = Тип("Картинка") И НЕ Область.Области.Найти("ИдентификаторШК") = Неопределено Тогда
				Область.Области.ИдентификаторШК.Картинка = КартинкаШК;
			КонецЕсли;
			
			Область.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
	КонецЕсли;
	
	ТабличныйДокумент.ПолеСнизу   = 0;
	ТабличныйДокумент.ПолеСверху  = 0;
	ТабличныйДокумент.ПолеСлева   = 0;
	ТабличныйДокумент.ПолеСправа  = 0;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПамяткиДоступа()

// Получает идентификаторы лицевых счетов для сервиса моб. приложения.
//
Функция ПолучитьИдентификаторыЛицевыхСчетовМобильноеПриложение(МассивЛС)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.Идентификатор,
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет
	|ПОМЕСТИТЬ втИдентификаторыЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
	|ГДЕ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет В(&МассивЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец
	|ПОМЕСТИТЬ втВладельцы
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентификаторыЛС.ЛицевойСчет
	|				ИЗ
	|					втИдентификаторыЛС КАК втИдентификаторыЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификаторыЛС.ЛицевойСчет,
	|	втИдентификаторыЛС.Идентификатор,
	|	втВладельцы.Владелец
	|ИЗ
	|	втИдентификаторыЛС КАК втИдентификаторыЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВладельцы КАК втВладельцы
	|		ПО втИдентификаторыЛС.ЛицевойСчет = втВладельцы.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("МассивЛС", МассивЛС);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет структуру с параметрыми данными, необходимыми для вывода.
//
// Параметры:
//  СтруктураПараметров - структура с параметрами.
//  СтрокаЛС - строка таблицы с параметрами доступа.
//  Организация - текущая организация.
//  ТекущаяДата - рабочая дата.
//
Процедура ПодготовитьКПечатиСтруктуруСПараметрамиМобильноеПриложение(СтруктураПараметров, СтрокаЛС, АдресGooglePlay)
	
	СтруктураПараметров.Вставить("ЛицевойСчет", СтрокаЛС.ЛицевойСчет);
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта(СтрокаЛС.ЛицевойСчет.Адрес.Владелец, Перечисления.КВП_ВидыАдресов.Здание);
	Адрес     = ПолучитьАдресПомещения(АдресДома, СтрокаЛС.ЛицевойСчет.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = СтрокаЛС.ЛицевойСчет.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	СтруктураПараметров.Вставить("Адрес",         Адрес);
	СтруктураПараметров.Вставить("ФИО",           СтрокаЛС.Владелец);
	СтруктураПараметров.Вставить("Идентификатор", СтрокаЛС.Идентификатор);
	
КонецПроцедуры // ПодготовитьКПечатиСтруктуруСПараметрами()

// Процедура заполняет параметры одномерного штрихкода.
//
Процедура ЗаполнитьПараметрыОдномерногоШК(ПараметрыШтрихкода, Знач ТекстКода) Экспорт
	
	ПараметрыШтрихкода.Вставить("Штрихкод",        ТекстКода);
	ПараметрыШтрихкода.Вставить("Ширина",          100);
	ПараметрыШтрихкода.Вставить("Высота",          30);
	ПараметрыШтрихкода.Вставить("ТипКода",         4);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	
КонецПроцедуры // ЗаполнитьПараметрыОдномерногоШК()

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ПЕЧАТИ

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, 
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПамяткаДоступа") Тогда
		
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																   "ПамяткаДоступа",
																   "ПамяткаДоступа",
																   ПечатьПамяткиДоступа(МассивОбъектов, ПараметрыПечати));
		
	ИначеЕсли УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПамяткаДляДоступаВЛичныйКабинетВМобильномПриложенииЖКХ") Тогда
		
		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
																   "ПФ_MXL_ПамяткаДляДоступаВЛичныйКабинетВМобильномПриложенииЖКХ",
																   "Памятка для доступа в личный кабинет в мобильном приложении (ЖКХ)",
																   ПечатьПамяткиДоступаМобильноеПриложение(МассивОбъектов, ПараметрыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли