#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьЦеликомПредопределенныеВидыОтправляемыхДокументов() Экспорт
	
	ЗаполнитьПредопределенныеВидыОтправляемыхДокументов(Истина);
	
КонецПроцедуры 

Процедура ОбновитьНаименованияПредопределенныхЭлементов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтправляемыхДокументов.Ссылка,
	|	ВидыОтправляемыхДокументов.Наименование,
	|	ВидыОтправляемыхДокументов.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
	|ГДЕ
	|	ВидыОтправляемыхДокументов.Предопределенный = ИСТИНА
	|	И ВидыОтправляемыхДокументов.ЭтоГруппа = ЛОЖЬ";	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаРезультата = Результат.Выбрать();
	
	СоответствиеСвойств = ПолучитьСоответствиеСвойствВидовОтправляемыхДокументов();
	
	ВыборкаРезультата = Результат.Выбрать();
	
	//заполняем свойства, перебирая выборку результата запроса
	Пока ВыборкаРезультата.Следующий() Цикл
		СпрСсылка = ВыборкаРезультата.Ссылка;
		СпрИмя = ВыборкаРезультата.ИмяПредопределенныхДанных;
		ЭталонныеСвойства = СоответствиеСвойств[СпрИмя];
		
		Если ЭталонныеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭталонНаименование 	= ЭталонныеСвойства.Наименование;
		
		Если ВыборкаРезультата.Наименование <> ЭталонНаименование Тогда
			
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			
			СпрОбъект.Наименование = ЭталонНаименование;
			
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			
			СпрОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Получает список видов отправляемых документов по шаблону, представленному
// в макете ОписаниеВидовОтправляемыхДокументов объекта Справочник.ВидыОтправляемыхДокументов
//
Функция ПолучитьСоответствиеСвойствВидовОтправляемыхДокументов(МассивВыборочныхИмен = Неопределено) 

	ВыборочноеЗаполнение = (МассивВыборочныхИмен <> Неопределено);
	
	РезультатСоответствие = Новый Соответствие;
	
	// Получим макет со списком документов.
	МакетСписокДокументов = Справочники.ВидыОтправляемыхДокументов.ПолучитьМакет("ОписаниеВидовОтправляемыхДокументов");

	Для Инд = 0 По МакетСписокДокументов.Области.Количество() - 1 Цикл

		ТекОбласть = МакетСписокДокументов.Области[Инд];

		ИмяГруппы 			= СокрЛП(МакетСписокДокументов.Область(ТекОбласть.Верх, 1).Текст);
		НаименованиеГруппы 	= СокрЛП(МакетСписокДокументов.Область(ТекОбласть.Верх, 2).Текст);
		ОписаниеГруппы		= СокрЛП(МакетСписокДокументов.Область(ТекОбласть.Верх, 3).Текст);
		
		Если Не ПустаяСтрока(ИмяГруппы) Тогда

			Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
				
				// перебираем элементы второго уровня
				ИмяЭлемента = СокрЛП(МакетСписокДокументов.Область(Ном, 1).Текст);
				
				Если ВыборочноеЗаполнение Тогда
					Если МассивВыборочныхИмен.Найти(ИмяЭлемента) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураСвойствЭлемента = Новый Структура();
				СтруктураСвойствЭлемента.Вставить("Наименование", 	СокрЛП(МакетСписокДокументов.Область(Ном, 2).Текст));
				СтруктураСвойствЭлемента.Вставить("Описание", 		СокрЛП(МакетСписокДокументов.Область(Ном, 3).Текст));
				СтруктураСвойствЭлемента.Вставить("Источник", 		СокрЛП(МакетСписокДокументов.Область(Ном, 4).Текст));
				СтруктураСвойствЭлемента.Вставить("ТипПолучателя", 	СокрЛП(МакетСписокДокументов.Область(Ном, 5).Текст));
				СтруктураСвойствЭлемента.Вставить("ТипДокумента", 	СокрЛП(МакетСписокДокументов.Область(Ном, 6).Текст));
				
				РезультатСоответствие.Вставить(ИмяЭлемента, СтруктураСвойствЭлемента);
			КонецЦикла;

		Иначе
			// для элемента корневого (0-уровня)
			Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
				
				// перебираем элементы второго уровня
				ИмяЭлемента = СокрЛП(МакетСписокДокументов.Область(Ном, 1).Текст);
				
				Если ВыборочноеЗаполнение Тогда
					Если МассивВыборочныхИмен.Найти(ИмяЭлемента) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				СтруктураСвойствЭлемента = Новый Структура();
				СтруктураСвойствЭлемента.Вставить("Наименование", 	СокрЛП(МакетСписокДокументов.Область(Ном, 2).Текст));
				СтруктураСвойствЭлемента.Вставить("Описание", 		СокрЛП(МакетСписокДокументов.Область(Ном, 3).Текст));
				СтруктураСвойствЭлемента.Вставить("Источник", 		СокрЛП(МакетСписокДокументов.Область(Ном, 4).Текст));
				СтруктураСвойствЭлемента.Вставить("ТипПолучателя", 	СокрЛП(МакетСписокДокументов.Область(Ном, 5).Текст));
				СтруктураСвойствЭлемента.Вставить("ТипДокумента", 	СокрЛП(МакетСписокДокументов.Область(Ном, 6).Текст));
				
				РезультатСоответствие.Вставить(ИмяЭлемента, СтруктураСвойствЭлемента);

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;
	
	Возврат РезультатСоответствие;

КонецФункции

// Обработчик обновления БРО.
//
// Вызывается при каждом обновлении ИБ.
// Заполняет реквизиты предопределенных элементов справочника "ВидыОтправляемыхДокументов".
Процедура ЗаполнитьПредопределенныеВидыОтправляемыхДокументов(СправочникЦеликом = Ложь) Экспорт
	
	Если СправочникЦеликом Тогда
		
		// полное заполнение при интерактивном выборе восстановления
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтправляемыхДокументов.Ссылка,
		|	ВидыОтправляемыхДокументов.Наименование,
		|	ВидыОтправляемыхДокументов.Описание,
		|	ВидыОтправляемыхДокументов.Источник,
		|	ВидыОтправляемыхДокументов.ТипПолучателя,
		|	ВидыОтправляемыхДокументов.ТипДокумента,
		|	ВидыОтправляемыхДокументов.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Предопределенный = ИСТИНА
		|	И ВидыОтправляемыхДокументов.ЭтоГруппа = ЛОЖЬ";	
		
		Результат = Запрос.Выполнить();
		
		ВыборкаРезультата = Результат.Выбрать();
		
		СоответствиеСвойств = ПолучитьСоответствиеСвойствВидовОтправляемыхДокументов();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтправляемыхДокументов.Ссылка,
		|	ВидыОтправляемыхДокументов.Наименование,
		|	ВидыОтправляемыхДокументов.Описание,
		|	ВидыОтправляемыхДокументов.Источник,
		|	ВидыОтправляемыхДокументов.ТипПолучателя,
		|	ВидыОтправляемыхДокументов.ТипДокумента,
		|	ВидыОтправляемыхДокументов.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Предопределенный = ИСТИНА
		|	И ВидыОтправляемыхДокументов.ЭтоГруппа = ЛОЖЬ
		|	И (ВидыОтправляемыхДокументов.Источник = """"
		|			ИЛИ ВидыОтправляемыхДокументов.ТипПолучателя = ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ПустаяСсылка)
		|			ИЛИ ВидыОтправляемыхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОтправляемыхДокументов.ПустаяСсылка))";	
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			//свойства всех предопределенных элементов заполнены
			Возврат;	
		КонецЕсли;
		
		ВыборкаРезультата = Результат.Выбрать();
		
		МассивНезаполненныхЭлементов = Новый Массив;
		
		Пока ВыборкаРезультата.Следующий() Цикл
			ИмяЭлемента = ВыборкаРезультата.ИмяПредопределенныхДанных;
			МассивНезаполненныхЭлементов.Добавить(ИмяЭлемента);	
		КонецЦикла;
		
		СоответствиеСвойств = ПолучитьСоответствиеСвойствВидовОтправляемыхДокументов(МассивНезаполненныхЭлементов);
		
	КонецЕсли;
	
	ВыборкаРезультата = Результат.Выбрать();
	
	//заполняем свойства, перебирая выборку результата запроса
	Пока ВыборкаРезультата.Следующий() Цикл
		СпрСсылка = ВыборкаРезультата.Ссылка;
		СпрИмя = ВыборкаРезультата.ИмяПредопределенныхДанных;
		ЭталонныеСвойства = СоответствиеСвойств[СпрИмя];
		
		Если ЭталонныеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭталонНаименование 	= ЭталонныеСвойства.Наименование;
		ЭталонОписание 		= ЭталонныеСвойства.Описание;
		ЭталонИсточник 		= ЭталонныеСвойства.Источник;
		ЭталонТипПолучателя = Перечисления.ТипыКонтролирующихОрганов[ЭталонныеСвойства.ТипПолучателя];
		ЭталонТипДокумента 	= Перечисления.ТипыОтправляемыхДокументов[ЭталонныеСвойства.ТипДокумента];
		
		Если ВыборкаРезультата.Наименование <> ЭталонНаименование
			ИЛИ ВыборкаРезультата.Описание <> ЭталонОписание
			ИЛИ ВыборкаРезультата.Источник <> ЭталонИсточник
			ИЛИ ВыборкаРезультата.ТипПолучателя <> ЭталонТипПолучателя
			ИЛИ ВыборкаРезультата.ТипДокумента <> ЭталонТипДокумента Тогда
			
			СпрОбъект = СпрСсылка.ПолучитьОбъект();
			
			СпрОбъект.Наименование = ЭталонНаименование;
			СпрОбъект.Описание = ЭталонОписание;
			СпрОбъект.Источник = ЭталонИсточник;
			СпрОбъект.ТипПолучателя = ЭталонТипПолучателя;
			СпрОбъект.ТипДокумента = ЭталонТипДокумента;
			
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			
			СпрОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПредопределенныеВидыОтправляемыхДокументов()

// Обработчик обновления БРО 1.1.13.30
//
Процедура ИсправитьИмяОбъектаМетаданныхСтатистикаФорма2ТПВоздух() Экспорт
	
	ИсправитьВидыОтправляемыхДокументов(Справочники.ВидыОтправляемыхДокументов.СтатистикаФорма2ТПВоздух);
	
КонецПроцедуры

// Обработчик обновления БРО 1.1.13.1
//
Процедура ИсправитьОписаниеФармацевтическихДекларацийНДФЛиАДВ1() Экспорт
	
	ОтборСсылки = Новый Массив;
	ОтборИсточники = Новый Массив;
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОбъемПроизводстваПоставкиФармсубстанцииСпиртаЭтилового);
	ОтборИсточники.Добавить("РегламентированныйОтчетАлкоПриложение16");
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОбъемИспользованияДляСобственныхНуждФармсубстанцииСпиртаЭтилового);
	ОтборИсточники.Добавить("РегламентированныйОтчетАлкоПриложение17");
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОбъемПоставкиФармсубстанцииСпиртаЭтилового);
	ОтборИсточники.Добавить("РегламентированныйОтчетАлкоПриложение18");
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.СправкаПоНДФЛВНалоговыйОрган);
	ОтборИсточники.Добавить("СправкаПоНДФЛВНалоговыйОрган");
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.АнкетаЗастрахованногоЛица);
	ОтборИсточники.Добавить("АнкетаЗастрахованногоЛица");
	
	ИсправитьВидыОтправляемыхДокументов(ОтборСсылки, ОтборИсточники);
	
КонецПроцедуры

// Обработчик обновления БРО 1.1.11.37
//
Процедура ИзменитьОписаниеДекларацийПоКосвеннымНалогам() Экспорт
	
	ИсправитьВидыОтправляемыхДокументов(Справочники.ВидыОтправляемыхДокументов.КосвенныеНалогиТамСоюз);
	
КонецПроцедуры

// Обработчик обновления БРО 1.1.11.36
//
Процедура ИсправитьВидыОтправляемыхДокументовСЗВК() Экспорт
	
	ИсправитьВидыОтправляемыхДокументов(Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК,
		"СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК");
	
КонецПроцедуры

// Обработчик обновления БРО 1.1.9.14
//
Процедура ИсправитьОписаниеДекларацийПоАлкоголюРеестровПоНДС() Экспорт
	
	ОтборСсылки = Новый Массив;
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотЭтиловогоСпирта);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ИспользованиеЭтиловогоСпирта);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ПроизводствоИОборотАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ИспользованиеАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОборотЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ПоставкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ЗакупкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОбъемПеревозкиЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ПеревозкаЭтиловогоСпиртаАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ИспользованиеМощностейПоПроизводствуЭтиловогоСпиртаИАлкогольнойПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаАлкогольнойИСпиртосодержащейПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РозничнаяПродажаПиваИПивныхНапитков);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОбъемСобранногоВиноградаДляПроизводстваВинодельческойПродукции);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОбъемВиноградаИспользованногоДляПроизводстваВинаИгристогоВинаШампанского);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.ОбъемВиноградаИспользованногоДляПроизводстваЗащищенныхВин);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение1);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение2);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение3);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение4);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение5);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение6);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение7);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение8);
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.РеестрНДСПриложение9);
	
	ИсправитьВидыОтправляемыхДокументов(ОтборСсылки);
	
КонецПроцедуры

// Обработчик обновления БРО 1.1.9.12
//
Процедура ИсправитьВидыОтправляемыхДокументовОбъемВинограда() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыОтправляемыхДокументов.Ссылка
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Предопределенный = ИСТИНА
		|	И ВидыОтправляемыхДокументов.ЭтоГруппа = ЛОЖЬ
		|	И (ВидыОтправляемыхДокументов.Источник = ""РегламентированныйОтчетАлкоПриложение14""
		|		ИЛИ ВидыОтправляемыхДокументов.Источник = ""РегламентированныйОтчетАлкоПриложение15"")
		|	И ВидыОтправляемыхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыОтправляемыхДокументов.ОтчетФСРАРРозница)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		ВидыОтправляемыхДокументовОбъект = СтрокаЗапроса.Ссылка.ПолучитьОбъект();
		
		ВидыОтправляемыхДокументовОбъект.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов.ОтчетФСРАРОпт;
		ВидыОтправляемыхДокументовОбъект.ОбменДанными.Загрузка = Истина;
		
		ВидыОтправляемыхДокументовОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БРО 1.1.9.5
//
Процедура ИсправитьВидыОтправляемыхДокументовСЗВ_МДоходыОтОбрМедДеятельностиНДФЛ() Экспорт
	
	ОтборСсылки = Новый Массив;
	ОтборИсточники = Новый Массив;
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М);
	ОтборИсточники.Добавить("ПачкаДокументовСЗВ_М");
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.СведенияОДолеДоходовОтОбразовательнойИлиМедицинскойДеятельности);
	ОтборИсточники.Добавить("РегламентированныйОтчетСведенияОДолеДоходовОтОбразовательнойИлиМедицинскойДеятельности");
	ОтборСсылки.Добавить(Справочники.ВидыОтправляемыхДокументов.СправкаПоНДФЛВНалоговыйОрган);
	ОтборИсточники.Добавить("СправкаПоНДФЛВНалоговыйОрган");
	
	ИсправитьВидыОтправляемыхДокументов(ОтборСсылки, ОтборИсточники);
	
КонецПроцедуры

Процедура ИсправитьВидыОтправляемыхДокументов(ОтборСсылки, ОтборИсточники = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОтборИсточники <> Неопределено И ТипЗнч(ОтборСсылки) = Тип("Массив") Тогда
		УсловияОтбора = "";
		
		ИндексСсылки = 0;
		Для каждого ОтборСсылка Из ОтборСсылки Цикл
			Если ИндексСсылки < ОтборИсточники.Количество() Тогда
				ОтборИсточник = ОтборИсточники[ИндексСсылки];
			Иначе
				ОтборИсточник = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтборИсточник) Тогда
				УсловиеОтбора = СтрШаблон(
					"ВидыОтправляемыхДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.%1)
					|	И ВидыОтправляемыхДокументов.Источник = ""%2""",
					ОтборСсылка.ИмяПредопределенныхДанных,
					ОтборИсточник);
			Иначе
				УсловиеОтбора = СтрШаблон(
					"ВидыОтправляемыхДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.%1)",
					ОтборСсылка.ИмяПредопределенныхДанных);
			КонецЕсли;
			
			УсловияОтбора = ?(ЗначениеЗаполнено(УсловияОтбора), УсловияОтбора + "
				|	ИЛИ ", "") + УсловиеОтбора;
			
			ИндексСсылки = ИндексСсылки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыОтправляемыхДокументов.Ссылка,
		|	ВидыОтправляемыхДокументов.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Предопределенный = ИСТИНА
		|	И ВидыОтправляемыхДокументов.ЭтоГруппа = ЛОЖЬ" + ?(ОтборИсточники = Неопределено, ?(ТипЗнч(ОтборСсылки) = Тип("Массив"), "
		|	И ВидыОтправляемыхДокументов.Ссылка В (&Ссылки)", "
		|	И ВидыОтправляемыхДокументов.Ссылка = &Ссылка"), ?(ТипЗнч(ОтборСсылки) = Тип("Массив"), "
		|	И (" + УсловияОтбора + ")", "
		|	И ВидыОтправляемыхДокументов.Ссылка = &Ссылка
		|	И ВидыОтправляемыхДокументов.Источник = &Источник"));
	
	Если ОтборИсточники = Неопределено Тогда
		Если ТипЗнч(ОтборСсылки) = Тип("Массив") Тогда
			Запрос.УстановитьПараметр("Ссылки", ОтборСсылки);
		Иначе
			Запрос.УстановитьПараметр("Ссылка", ОтборСсылки);
		КонецЕсли
	ИначеЕсли ТипЗнч(ОтборСсылки) <> Тип("Массив") Тогда
		Запрос.УстановитьПараметр("Ссылка", 	ОтборСсылки);
		Запрос.УстановитьПараметр("Источник", 	ОтборИсточники);
	КонецЕсли;
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		МассивКорректируемыхЭлементов = Новый Массив;
		Для каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
			МассивКорректируемыхЭлементов.Добавить(СтрокаЗапроса.ИмяПредопределенныхДанных);
		КонецЦикла;
		
		СоответствиеСвойств = ПолучитьСоответствиеСвойствВидовОтправляемыхДокументов(МассивКорректируемыхЭлементов);
		
		Для каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
			ЭталонныеСвойства = СоответствиеСвойств[СтрокаЗапроса.ИмяПредопределенныхДанных];
			Если ЭталонныеСвойства = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВидыОтправляемыхДокументовОбъект = СтрокаЗапроса.Ссылка.ПолучитьОбъект();
			
			ВидыОтправляемыхДокументовОбъект.Наименование = ЭталонныеСвойства.Наименование;
			ВидыОтправляемыхДокументовОбъект.Описание = ЭталонныеСвойства.Описание;
			ВидыОтправляемыхДокументовОбъект.Источник = ЭталонныеСвойства.Источник;
			ВидыОтправляемыхДокументовОбъект.ТипПолучателя = Перечисления.ТипыКонтролирующихОрганов[ЭталонныеСвойства.ТипПолучателя];
			ВидыОтправляемыхДокументовОбъект.ТипДокумента = Перечисления.ТипыОтправляемыхДокументов[ЭталонныеСвойства.ТипДокумента];
			
			ВидыОтправляемыхДокументовОбъект.ОбменДанными.Загрузка = Истина;
			
			ВидыОтправляемыхДокументовОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли