
#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу типов характеристик.
Процедура ЗаполнитьТаблицуТиповХарактеристик()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		НормаОбъект = Объект.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекСтрока Из НормаОбъект.Характеристики Цикл
			
			СтрокиХарактеристики = Объект.Характеристики.НайтиСтроки(Новый Структура("Имя, Вид", ТекСтрока.Имя, ТекСтрока.Вид));
			Если СтрокиХарактеристики.Количество() > 0 Тогда
				
				СтрокаХарактеристики = СтрокиХарактеристики[0];
				СтрокаХарактеристики.ВариантЗначения = Элементы.ХарактеристикиВариантЗначения.СписокВыбора[?(СтрокаХарактеристики.ВводДиапазона, 1, 0)].Значение;
				
				ЗначениеТипа = ТекСтрока.ХранилищеТипа.Получить();
				Если НЕ ЗначениеЗаполнено(ЗначениеТипа) Тогда
					УстановитьХранилищеТипаВСтрокеХарактеристики(СтрокаХарактеристики.ПолучитьИдентификатор());
				ИначеЕсли ТипЗнч(ЗначениеТипа) = Тип("ОписаниеТипов") Тогда
					СтрокаХарактеристики.Тип = ЗначениеТипа;
				ИначеЕсли ТипЗнч(ЗначениеТипа) = Тип("Тип") Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ЗначениеТипа);
					СтрокаХарактеристики.Тип = Новый ОписаниеТипов(МассивТипов);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура формирует колонки табличного документа.
Процедура СформироватьКолонки()
	
	мУдаляемыхРеквизитов = Новый Массив;
	мУдаляемыхЭлементов  = Новый Массив;
	Для Каждого ЭлементКолонка Из Элементы.ТаблицаРазмеровНорм.ПодчиненныеЭлементы Цикл
		ЭлементПутьКДанным = ЭлементКолонка.ПутьКДанным;
		ЭлементКолонкаРеквизитИмя = СтрЗаменить(ЭлементПутьКДанным, ("ТаблицаРазмеровНорм."),"");
		мУдаляемыхРеквизитов.Добавить(ЭлементПутьКДанным);
		мУдаляемыхЭлементов.Добавить(ЭлементКолонка);
	КонецЦикла;
	
	// Удалим динамические реквизиты и элементы(колонки), вернув таблицу формы к исходному виду.
	Если мУдаляемыхРеквизитов.Количество() Тогда
		ЭтаФорма.ИзменитьРеквизиты(,мУдаляемыхРеквизитов);
		Для Каждого ЭлементКолонка Из мУдаляемыхЭлементов Цикл
			Элементы.Удалить(ЭлементКолонка);
		КонецЦикла;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеТипаБулево = Новый ОписаниеТипов(МассивТипов);
	
	МассивТиповСтроки = новый Массив;
	МассивТиповСтроки.Добавить(Тип("Строка"));
	ОписаниеТипаСтрока = Новый ОписаниеТипов(МассивТиповСтроки, , ,Новый КвалификаторыСтроки(40));
	
	Реквизиты = Новый Массив;
	
	// Добавим реквизиты колонок характеристик
	СправочникОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.КВП_НормыПотребленияУслуг"));
	
	Для Каждого ТекСтрока Из Объект.Характеристики Цикл
		
		Реквизиты.Добавить(Новый РеквизитФормы(ТекСтрока.ИмяКолонки, ?(ТекСтрока.ВводДиапазона, ОписаниеТипаСтрока, ТекСтрока.Тип), "ТаблицаРазмеровНорм",
												ТекСтрока.ПредставлениеКолонки));
		Реквизиты.Добавить(Новый РеквизитФормы("ФлагДругиеЗначения" + ТекСтрока.ИмяКолонки, ОписаниеТипаБулево,
												"ТаблицаРазмеровНорм"));
		Для Значение = 1 По 2 Цикл
			Реквизиты.Добавить(Новый РеквизитФормы(ТекСтрока.ИмяКолонки + "Значение" + Значение, ТекСтрока.Тип, "ТаблицаРазмеровНорм",
										ТекСтрока.ПредставлениеКолонки));
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавим реквизит размера
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповРазмер = Новый ОписаниеТипов(Массив, , ,Новый КвалификаторыЧисла(18,6));
	Реквизиты.Добавить(Новый РеквизитФормы("Размер", ОписаниеТиповРазмер, "ТаблицаРазмеровНорм"));
	
	// Создадим реквизиты
	ЭтаФорма.ИзменитьРеквизиты(Реквизиты);
	
	УсловноеОформление.Элементы.Очистить();
	
	// Создадим элементы формы
	Для Каждого ТекСтрока Из Объект.Характеристики Цикл
		
		// Элемент для вывода
		Элемент = Элементы.Добавить(ТекСтрока.ИмяКолонки, Тип("ПолеФормы"), Элементы.ТаблицаРазмеровНорм);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ТаблицаРазмеровНорм." + ТекСтрока.ИмяКолонки;
		Элемент.ВыбиратьТип = Ложь;
		Элемент.КнопкаОткрытия = Ложь;
		
		Если Не ТекСтрока.ВводДиапазона Тогда
			Если ТекСтрока.ТипЗначенияСсылкаБулево Тогда
				Элемент.КнопкаВыбора       = Истина;
			Иначе
				Элемент.КнопкаВыбора       = Ложь;
			КонецЕсли;
		Иначе
			Элемент.КнопкаВыбора         = Истина;
			Элемент.РедактированиеТекста = Ложь;
			Элемент.УстановитьДействие("НачалоВыбора", "ТаблицаРазмеровНормНачалоВыбора");
		КонецЕсли;
		
		Элемент.КнопкаВыпадающегоСписка = Истина;
		Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.Выбрать;
		Элемент.Видимость               = Истина;
		Элемент.КнопкаОчистки           = Ложь;
		
		Элемент.СписокВыбора.Добавить("Другие");
		
		// Установим действия обработчиков событий
		Элемент.УстановитьДействие("ОбработкаВыбора", "ТаблицаРазмеровНормОбработкаВыбора");
		Элемент.УстановитьДействие("ПриИзменении",    "ТаблицаРазмеровНормПриИзменении");
		
		// Колонки значений.
		Для Значение = 1 По 2 Цикл
			Элемент = Элементы.Добавить(ТекСтрока.ИмяКолонки + "Значение" + Значение, Тип("ПолеФормы"), Элементы.ТаблицаРазмеровНорм);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ТаблицаРазмеровНорм." + ТекСтрока.ИмяКолонки + "Значение" + Значение;
			Элемент.КнопкаВыбора            = Ложь;
			Элемент.КнопкаВыпадающегоСписка = Истина;
			Элемент.КнопкаОчистки           = Ложь;
			Элемент.Видимость               = Ложь;
			
			Элемент.КартинкаКнопкиВыбора = БиблиотекаКартинок.Выбрать;
		КонецЦикла;
		
		// Добавим вспомогательный элемент
		Элемент = Элементы.Добавить("ФлагДругиеЗначения" + ТекСтрока.ИмяКолонки, Тип("ПолеФормы"),
									Элементы.ТаблицаРазмеровНорм);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ТаблицаРазмеровНорм." + "ФлагДругиеЗначения" + ТекСтрока.ИмяКолонки;
		Элемент.Видимость = Ложь;
		
	КонецЦикла;
	
	Элемент = Элементы.Добавить("ТаблицаНорм_" + "Размер", Тип("ПолеФормы"), Элементы.ТаблицаРазмеровНорм);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "ТаблицаРазмеровНорм.Размер";
	Элемент.Видимость = Истина;
	
	// Установим условное оформление
	Для Каждого ТекСтрока Из Объект.Характеристики Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭУО_Оформление = ЭлементОформления.Оформление.Элементы.Найти("Текст");
		ЭУО_Оформление.Значение = "0";
		ЭУО_Оформление.Использование = Истина;
		ЭУО_Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭУО_Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭУО_Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРазмеровНорм."+ТекСтрока.ИмяКолонки);
		ЭУО_Отбор.ПравоеЗначение = 0;
		ЭУО_Отбор.Использование = Истина;
		ЭУО_Поле = ЭлементОформления.Поля.Элементы.Добавить();
		ЭУО_Поле.Использование = Истина;
		ЭУО_Поле.Поле = Новый ПолеКомпоновкиДанных(ТекСтрока.ИмяКолонки);
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭУО_Оформление = ЭлементОформления.Оформление.Элементы.Найти("Текст");
		ЭУО_Оформление.Значение = "Другие";
		ЭУО_Оформление.Использование = Истина;
		ЭУО_Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭУО_Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭУО_Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРазмеровНорм.ФлагДругиеЗначения"+ТекСтрока.ИмяКолонки);
		ЭУО_Отбор.ПравоеЗначение = Истина;
		ЭУО_Отбор.Использование = Истина;
		ЭУО_Поле = ЭлементОформления.Поля.Элементы.Добавить();
		ЭУО_Поле.Использование = Истина;
		ЭУО_Поле.Поле = Новый ПолеКомпоновкиДанных(ТекСтрока.ИмяКолонки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу норм.
Процедура ЗаполнитьТаблицуНорм()
	
	Если Объект.РазмерыНорм.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	врТаблицаНорм = Объект.РазмерыНорм.Выгрузить();
	врТаблицаНорм.Сортировать("НомерСтрокиТЧ");
	
	ТекНомерСтроки = врТаблицаНорм[0].НомерСтрокиТЧ;
	НоваяСтрока = Неопределено;
	
	Для Каждого ТекСтрока Из врТаблицаНорм Цикл
		
		Если НоваяСтрока = Неопределено Или Не ТекНомерСтроки = ТекСтрока.НомерСтрокиТЧ Тогда
			
			НоваяСтрока = ТаблицаРазмеровНорм.Добавить();
			
			Если ТекСтрока.Значение2 = 0
			 Или ТекСтрока.Значение2 = Неопределено Тогда
				// Норма установлена в ввиде простых значений, если значение верхней границы
				// равно нулю или неопределено, хотя неопределенное значение является ошибкой.
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки, ТекСтрока.Значение);
			Иначе
				// В противном случае значения нормы заданы в виде интервалов.
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки, "[" + ТекСтрока.Значение + ?(ТекСтрока.Значение2 = -1, " и более", "; " + ТекСтрока.Значение2) + ")");
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки + "Значение1", ТекСтрока.Значение);
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки + "Значение2", ТекСтрока.Значение2);
			КонецЕсли;
			
			ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, "Размер", ТекСтрока.Размер);
			ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, "ФлагДругиеЗначения" + ТекСтрока.ИмяКолонки, ТекСтрока.ФлагДругиеЗначения);
			
			ТекНомерСтроки = ТекСтрока.НомерСтрокиТЧ;
			
		Иначе
			
			Если ТекСтрока.Значение2 = 0
			 Или ТекСтрока.Значение2 = Неопределено Тогда
				// Норма установлена в ввиде простых значений, если значение верхней границы
				// равно нулю или неопределено, хотя неопределенное значение является ошибкой.
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки, ТекСтрока.Значение);
			Иначе
				// В противном случае значения нормы заданы в виде интервалов.
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки, "[" + ТекСтрока.Значение + ?(ТекСтрока.Значение2 = -1, " и более", "; " + ТекСтрока.Значение2) + ")");
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки + "Значение1", ТекСтрока.Значение);
				ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, ТекСтрока.ИмяКолонки + "Значение2", ТекСтрока.Значение2);
			КонецЕсли;
			
			ЗаполнитьЗначениеКолонкиВСтроке(НоваяСтрока, "ФлагДругиеЗначения" + ТекСтрока.ИмяКолонки, ТекСтрока.ФлагДругиеЗначения);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет значение колонки в переданной строке.
Процедура ЗаполнитьЗначениеКолонкиВСтроке(ЗаполняемаяСтрока, ИмяКолонки, Значение)
	
	Попытка
		ЗаполняемаяСтрока[ИмяКолонки] = Значение;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не найдена колонка " + ИмяКолонки + "! Убедитесь в корректности заполнения характеристик нормы!");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет колонки таблицы размеров.
Процедура ОбновитьКолонки(Отказ = Ложь)
	
	Если ТаблицаРазмеровНорм.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗавершениеВопросаПриОбновленииКолонок", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Перед изменением характеристик норм необходимо очистить таблицу норм. Очистить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьНормыИКолонкиЗавершениеОбновленияКолонок();
	
КонецПроцедуры // ОбновитьКолонки()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного из процедуры "ОбновитьКолонки()".
//
// Параметры:
//  РезультатВыбора			 - 	Элемент списка значений - значение основания.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура ОбработатьЗавершениеВопросаПриОбновленииКолонок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОбновитьНормыИКолонкиЗавершениеОбновленияКолонок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обновляет таблицу норм и формирует новые колонки.
//
Процедура ОбновитьНормыИКолонкиЗавершениеОбновленияКолонок()
	
	ТаблицаРазмеровНорм.Очистить();
	СформироватьКолонки();
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет имя поле "ИмяКолонки" в ТЧ "Характеристики".
Функция ОбновитьИмяКолонки(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ИмяКолонки = "";
	СтрокаТабличнойЧасти.ПредставлениеКолонки = "";
	
	ИмяТекКолонки = УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(СтрЗаменить(Строка(СтрокаТабличнойЧасти.Имя) + Строка(СтрокаТабличнойЧасти.Вид), " ", ""), "\/:*?""<>|(),.");
	СтрокиХарактеристик = Объект.Характеристики.НайтиСтроки(Новый Структура("ИмяКолонки", ИмяТекКолонки));
	Если СтрокиХарактеристик.Количество() = 0 Тогда
		СтрокаТабличнойЧасти.ИмяКолонки           = ИмяТекКолонки;
		СтрокаТабличнойЧасти.ПредставлениеКолонки = 
			Строка(СтрокаТабличнойЧасти.Имя) + " (" + НРег(Строка(СтрокаТабличнойЧасти.Вид)) + ")";
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет хранилище типа в строке характеристики.
Процедура УстановитьХранилищеТипаВСтрокеХарактеристики(ТекСтрока)
	
	ТекущаяСтрока = Объект.Характеристики.НайтиПоИдентификатору(ТекСтрока);
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.Имя = "Свойство здания" Тогда
		
		ТекущаяСтрока.Тип = ТекущаяСтрока.Вид.ТипЗначения;
		
	ИначеЕсли ТекущаяСтрока.Имя = "Реквизит здания" Тогда
		
		ТекущаяСтрока.Тип = Метаданные.Справочники.КВП_Здания.Реквизиты.Найти(ТекущаяСтрока.ВидДляТипаЗначения).Тип;
		
	ИначеЕсли ТекущаяСтрока.Имя = "Свойство помещения" Тогда
		
		ТекущаяСтрока.Тип = ТекущаяСтрока.Вид.ТипЗначения;
		
	ИначеЕсли ТекущаяСтрока.Имя = "Реквизит помещения" Тогда
		
		ТекущаяСтрока.Тип = Метаданные.Справочники.УПЖКХ_Помещения.Реквизиты.Найти(ТекущаяСтрока.ВидДляТипаЗначения).Тип;
		
	Иначе
		
		// Получим тип из макета
		Если мТаблицаХарактеристикИзМакета.Количество() = 0 Тогда
			ОбновитьТаблицуХарактеристикМакета();
		КонецЕсли;
		НайденныеСтроки = мТаблицаХарактеристикИзМакета.НайтиСтроки(
			Новый Структура("Характеристика,Вид", ТекущаяСтрока.Имя, ТекущаяСтрока.Вид));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущаяСтрока.Тип = Новый ОписаниеТипов(НайденныеСтроки[0].Тип);
		Иначе
			ТекущаяСтрока.Тип = Новый ОписаниеТипов("Число");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает список видов для выбора вида характеристики.
Функция ПолучитьСписокВыбораВидаХарактеристики(ИмяХарактеристики)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ИмяХарактеристики = "Свойство здания" Тогда
		// Свойства здания.
		СписокСвойств = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСписокСвойств(Справочники.КВП_Здания.СоздатьЭлемент(), Ложь);
		Для Каждого ТекСвойство Из СписокСвойств Цикл
			СписокВыбора.Добавить(ТекСвойство);
		КонецЦикла;
		
	ИначеЕсли ИмяХарактеристики = "Реквизит здания" Тогда
		// Реквизиты здания.
		МетаРеквизиты = Метаданные.Справочники.КВП_Здания.Реквизиты;
		Для Каждого ТекРеквизит Из МетаРеквизиты Цикл
			Если Не ТекРеквизит.Тип.СодержитТип(Тип("Строка")) Тогда
				СписокВыбора.Добавить(ТекРеквизит.Имя, ТекРеквизит.Синоним);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяХарактеристики = "Свойство помещения" Тогда
		// Свойства помещения.
		СписокСвойств = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСписокСвойств(Справочники.УПЖКХ_Помещения.СоздатьЭлемент(), Ложь);
		Для Каждого ТекСвойство Из СписокСвойств Цикл
			СписокВыбора.Добавить(ТекСвойство);
		КонецЦикла;
		
	ИначеЕсли ИмяХарактеристики = "Реквизит помещения" Тогда
		// Реквизиты помещения.
		МетаРеквизиты = Метаданные.Справочники.УПЖКХ_Помещения.Реквизиты;
		Для Каждого ТекРеквизит Из МетаРеквизиты Цикл
			Если Не ТекРеквизит.Тип.СодержитТип(Тип("Строка")) Тогда
				СписокВыбора.Добавить(ТекРеквизит.Имя, ТекРеквизит.Синоним);
			КонецЕсли;
		КонецЦикла;
		
	Иначе // Получим список видов из макета
		Если мТаблицаХарактеристикИзМакета.Количество() = 0 Тогда
			ОбновитьТаблицуХарактеристикМакета();
		КонецЕсли;
		НайденныеСтроки = мТаблицаХарактеристикИзМакета.НайтиСтроки(Новый Структура("Характеристика", ИмяХарактеристики));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			Если (НеИспользоватьБлизкихРодственников Или Не Объект.НормаНаЛицевойСчет) И ТекСтрока.Вид = "Близких родственников" Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыбора.Добавить(ТекСтрока.Вид);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
// Если норма уже установлена на какой-либо объект, то предупреждаем пользователя об изменениях.
//  Возвращаемое значение:
//   Булево - ответ пользователя: истина - пользователь отказался внести изменения,
//                                 ложь - пользователь не отказался внести изменения.
Функция ПредупреждениеПриИзменении()
	
	// Не показывать предупреждение если оно уже было показано.
	Если Не ПредупреждениеПриИзмененииПараметровНормыПоказано Тогда
		
		Если Не Объект.Ссылка.Пустая() И НормаИспользуетсяВУчете(Объект.Ссылка) Тогда
			ПоказатьПредупреждение(, "Внимание! Вы вносите изменения в норму потребления услуг, которая уже установлена на объекты и используется в расчетах.");
			ПредупреждениеПриИзмененииПараметровНормыПоказано = Истина;
			Возврат Истина;
		Иначе
			// Если норма не используется, не отказываемся от изменений.
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Процедура устанавливает единицу измерения по услуге.
Процедура УстановитьЕдиницуИзмеренияПоУслуге(УслугаНормы)
	
	// Если норма на здание или ед. измерения пуста - заполняет поле ед. измерения из вида выбранной услуги.
	Если Не Объект.НормаНаЛицевойСчет ИЛИ Объект.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка") Тогда
		Объект.ЕдиницаИзмерения = УслугаНормы.ВидУслуги.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет таблицу характеристик макета.
Процедура ОбновитьТаблицуХарактеристикМакета()
	
	Таблица = Справочники.КВП_НормыПотребленияУслуг.ПолучитьТаблицуХарактеристикИзМакета(Объект.НормаНаЛицевойСчет, ВыбранСоставнойТипУслуги);
	мТаблицаХарактеристикИзМакета.Загрузить(Таблица);
	
КонецПроцедуры

&НаСервере
// Процедура помещает временную таблицу норм в ТЧ.
Процедура ПоместитьТаблицуНормВТЧ(Отказ)
	
	Если ТаблицаРазмеровНорм.Количество() = 0 Тогда
		Если НЕ ТаблицаРазмеровНорм.Количество() = Объект.РазмерыНорм.Количество() Тогда
			Объект.РазмерыНорм.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Получим список колонок и проверим правильность заполнения.
	СтрокаИменКолонок = "";
	СтрокаИменКолонокСФлагами = "";
	
	Для Каждого ТекСтрокаХарактеристики Из Объект.Характеристики Цикл
		СтрокаИменКолонок = СтрокаИменКолонок + ТекСтрокаХарактеристики.ИмяКолонки + ",";
		СтрокаИменКолонокСФлагами = СтрокаИменКолонокСФлагами + "ФлагДругиеЗначения"
								  + ТекСтрокаХарактеристики.ИмяКолонки + ",";
	КонецЦикла;
	
	СтрокаИменКолонок = Лев(СтрокаИменКолонок, СтрДлина(СтрокаИменКолонок) - 1);
	СтрокаИменКолонокСФлагами = СтрокаИменКолонокСФлагами + СтрокаИменКолонок;
	
	врТаблицаРазмеров = ТаблицаРазмеровНорм.Выгрузить( , СтрокаИменКолонокСФлагами);
	
	Для Каждого ТекСтрокаВр Из врТаблицаРазмеров Цикл
		Для Каждого ТекСтрокаХарактеристики Из Объект.Характеристики Цикл
			Если ТекСтрокаВр["ФлагДругиеЗначения" + ТекСтрокаХарактеристики.ИмяКолонки] Тогда
				ТекСтрокаВр[ТекСтрокаХарактеристики.ИмяКолонки] = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	врТаблицаРазмеров.Свернуть(СтрокаИменКолонок + ", ФлагДругиеЗначения" + СтрокаИменКолонок);
	Если Не ТаблицаРазмеровНорм.Количество() = врТаблицаРазмеров.Количество() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице размеров норм обнаружены ошибки!" + Символы.ПС
										+ "Таблица не должна содержать повторяющихся строк.", Отказ);
		Возврат;
	КонецЕсли;
	
	Объект.РазмерыНорм.Очистить();
	
	НомерСтрокиТЧ = 1;
	врТаблицаРазмеровНорм = ТаблицаРазмеровНорм.Выгрузить();
	Для Каждого ТекСтрока Из врТаблицаРазмеровНорм Цикл // Цикл по строкам
		
		Для Каждого ТекКолонка Из врТаблицаРазмеровНорм.Колонки Цикл // Цикл по колонкам
			
			Если ТекКолонка.Имя = "Размер" Или Лев(ТекКолонка.Имя, 18) = "ФлагДругиеЗначения" 
				Или Сред(ТекКолонка.Имя, СтрДлина(ТекКолонка.Имя) - 8, 8) = "Значение" Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.РазмерыНорм.Добавить();
			НоваяСтрока.НомерСтрокиТЧ      = НомерСтрокиТЧ;
			НоваяСтрока.ИмяКолонки         = ТекКолонка.Имя;
			Если (ТекСтрока[ТекКолонка.Имя + "Значение1"] = 0 И ТекСтрока[ТекКолонка.Имя + "Значение2"] = 0) ИЛИ
				(Не ЗначениеЗаполнено(ТекСтрока[ТекКолонка.Имя + "Значение1"]) И Не ЗначениеЗаполнено(ТекСтрока[ТекКолонка.Имя + "Значение2"])) Тогда
				НоваяСтрока.Значение  = ТекСтрока[ТекКолонка.Имя];
				НоваяСтрока.Значение2 = 0;
			Иначе
				НоваяСтрока.Значение  = ТекСтрока[ТекКолонка.Имя + "Значение1"];
				НоваяСтрока.Значение2 = ТекСтрока[ТекКолонка.Имя + "Значение2"];
			КонецЕсли;
			НоваяСтрока.ФлагДругиеЗначения = ТекСтрока["ФлагДругиеЗначения" + ТекКолонка.Имя];
			НоваяСтрока.Размер             = ТекСтрока["Размер"];
		КонецЦикла;
		
		НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Проверяет заполнение строк таблицы размеров норм.
Процедура ПроверитьЗаполнениеСтрокТаблицыРазмеровНорм(Отказ)
	
	Для Каждого СтрокаТаблицыНорм Из Объект.РазмерыНорм Цикл
		Если Не СтрокаТаблицыНорм.ФлагДругиеЗначения И (СтрокаТаблицыНорм.Значение = Неопределено ИЛИ СтрокаТаблицыНорм.Значение = "") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице размеров норм имеются характеристики с незаполненными значениями.");
			Отказ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокТаблицыРазмеровНорм()

#КонецОбласти

#Область ПроцедурыИФункцииУправленияФормой

&НаКлиентеНаСервереБезКонтекста
// Обновляет описание настройки "При отсутствии считать на одного".
Процедура ОбновитьОписаниеНастройкиПриОтсутствииВыбранногоВидаЖильцов(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВидЖильцов.Пустая() Тогда
		Элементы.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных.РасширеннаяПодсказка.Заголовок = " ";
		Возврат;
	КонецЕсли;
	
	ДопПредупреждение = "";
	Если Объект.ВидЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные") Тогда
		ДопСтрока = " нет зарегистрированных";
	ИначеЕсли Объект.ВидЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Проживающие") Тогда
		ДопСтрока = " нет проживающих";
	ИначеЕсли Объект.ВидЖильцов = ПредопределенноеЗначение(
									"Перечисление.УПЖКХ_ВидыЖильцов.ВладельцыЕдинственногоЖилья") Тогда
		ДопСтрока = " нет владельцев единственного жилья";
	ИначеЕсли Объект.ВидЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Льготники") Тогда
		ДопПредупреждение = " Считаются только зарегистрированные льготники.";
		ДопСтрока = " нет льготников";
	Иначе
		Возврат;
	КонецЕсли;
	
	ДопСтрока2 = ", основание для расчета нормы потребления";
	Если Объект.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = 
			ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.НаОдногоЧеловека") Тогда
		ДопСтрока2 = ДопСтрока2 + " рассчитывается на одного человека.";
	ИначеЕсли Объект.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = 
			ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.ПоКоличествуСобственников") Тогда
		ДопСтрока2 = ДопСтрока2 + " рассчитывается исходя из количества собственников помещения.";
	Иначе // НеОпределять
		ДопСтрока2 = ", норма потребления услуги будет нулевой.";
	КонецЕсли;
		
	Элементы.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных.РасширеннаяПодсказка.Заголовок =
		"В случае, когда на лицевом счете" + ДопСтрока + ДопСтрока2 + ДопПредупреждение +
		" При расчете расширенной нормы потребления, когда в качестве характеристики нормы указано" +
		" количество проживающих или зарегистрированных человек, данная настройка не используется" +
		" при вычислении значения характеристики.";
	
КонецПроцедуры // ОбновитьОписаниеНастройкиПриОтсутствииВыбранногоВидаЖильцов()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.ПустаяСсылка") Тогда
		Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой");
	КонецЕсли;
	
	Элементы.Размер.Видимость                   = ?(Не Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой"),     Ложь, Истина);
	Элементы.ГруппаРасширенныйВариант.Видимость = ?(Не Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный"), Ложь, Истина);
	ЭтоФормула                                  = ?(Не Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула"),     Ложь, Истина);
	
	Элементы.ГруппаОтступОткрытьКонструкторФормул.Видимость = Ложь;
	Элементы.Формула.Видимость                              = Ложь;

	Если ЭтоФормула И Объект.ФормулаРасчета = "" Тогда
		Элементы.ГруппаОтступОткрытьКонструкторФормул.Видимость = Истина;
	ИначеЕсли ЭтоФормула И Не Объект.ФормулаРасчета = "" Тогда
		Элементы.Формула.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПанельНастройки.Видимость          = Ложь;
	Элементы.ГруппаПоОдномуЧеловеку.Видимость   = Ложь;
	Элементы.ГруппаПоПлощади.Видимость          = Ложь;
	Элементы.ГруппаПоПлощадиЗдания.Видимость    = Ложь;
	
	Элементы.ЕдиницаИзмерения.Доступность = Объект.НормаНаЛицевойСчет;
	
	Если Объект.НормаНаЛицевойСчет Тогда
		Если Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек") Тогда
			
			ОбновитьОписаниеНастройкиПриОтсутствииВыбранногоВидаЖильцов(Форма);
			
			Если Объект.ВидЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.БлизкиеРодственники") Тогда
				// Если расчет идет по количеству близких родственников, то смысла в настройке нет:
				// норматив по близким родственникам имеет смысл только в целях расчета льгот, 
				// поэтому есть как минимум льготник - нулевого количества не будет.
				Элементы.ГруппаПриОтсутствииЖильцов.Видимость = Ложь;
			Иначе
				Элементы.ГруппаПриОтсутствииЖильцов.Видимость = Истина;
			КонецЕсли;
			
			Элементы.ГруппаПоОдномуЧеловеку.Видимость = Истина;
			Элементы.ПанельНастройки.Видимость        = Истина;
			
		ИначеЕсли Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Площадь") Тогда
			
			Элементы.ГруппаПоПлощади.Видимость = Истина;
			Элементы.ПанельНастройки.Видимость = Истина;
			
		КонецЕсли;
	Иначе
		Если Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Площадь") Тогда
			
			Элементы.ГруппаПоПлощадиЗдания.Видимость = Истина;
			Элементы.ПанельНастройки.Видимость       = Истина;
			
		ИначеЕсли Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек") Тогда
			
			Элементы.ГруппаПоОдномуЧеловеку.Видимость     = Истина;
			Элементы.ГруппаПриОтсутствииЖильцов.Видимость = Ложь;
			Элементы.ПанельНастройки.Видимость            = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	// Настройка-признак "Норма для владельцев (нанимателей) единственного жилья" должна быть доступна только:
	//  - для норм на лицевые счета;
	//  - для составных услуг;
	//  - при установленной настройке функциональности "Вести учет владельцев единственного жилья".
	Элементы.ГруппаНормаДляВЕЖ.Видимость = Объект.НормаНаЛицевойСчет И Форма.ВыбранСоставнойТипУслуги И Форма.ИспользоватьФункционалВЕЖ;
	
	// Для нормы с признаком "Норма для владельцев (нанимателей) единственного жилья" расчет происходит в зависимости
	// от наличия на лицевом счете зарегистрированного жильца с признаком "ВЕЖ" без учета значения основания нормы.
	// Указание основания для таких норм становится бессмысленным, поэтому скроем его от пользователя.
	Элементы.ПанельНастройки.Видимость = НЕ Объект.НормаДляВЕЖ;
	Элементы.Основание.Видимость = НЕ Объект.НормаДляВЕЖ;
	
КонецПроцедуры // УправлениеФормой()

&НаСервереБезКонтекста
// Функция определяет, используется ли норма в учете.
Функция НормаИспользуетсяВУчете(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Норма", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет) КАК КоличествоОбъектов
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(, НормаПотребления = &Норма) 
	|		КАК КВП_НормыПотребленияУслугЛССрезПоследних";
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоОбъектов = 0;
	
	Если Выборка.Следующий() Тогда
		КоличествоОбъектов = Выборка.КоличествоОбъектов;
	КонецЕсли;
	
	Возврат КоличествоОбъектов > 0;
	
КонецФункции

&НаСервере
// Функция возвращает список характеристик для выбора.
Функция ПолучитьСписокВыбораХарактеристики(НормаНаЛицевойСчет)
	
	// Общие характеристики.
	СписокПредопределенныхХарактеристик = Новый СписокЗначений;
	СписокПредопределенныхХарактеристик.Добавить("Свойство здания");
	СписокПредопределенныхХарактеристик.Добавить("Реквизит здания");
	СписокПредопределенныхХарактеристик.Добавить("Площадь здания");
	Если НормаНаЛицевойСчет Тогда
		// Только для норм на лицевой счет.
		СписокПредопределенныхХарактеристик.Добавить("Свойство помещения");
		СписокПредопределенныхХарактеристик.Добавить("Реквизит помещения");
		СписокПредопределенныхХарактеристик.Добавить("Площадь помещения");
	КонецЕсли;
	
	Если мСписокВыбораХарактеристики.Количество() = 0 Или ТипОбъектаНазначенияИзменен Тогда
		
		// Получим данные из макета характеристик.
		Если мТаблицаХарактеристикИзМакета.Количество() = 0 Или ТипОбъектаНазначенияИзменен Тогда
			ОбновитьТаблицуХарактеристикМакета();
			ТипОбъектаНазначенияИзменен = Ложь;
		КонецЕсли;
		врТаблицаХарактеристик = мТаблицаХарактеристикИзМакета.Выгрузить( , "Характеристика");
		врТаблицаХарактеристик.Свернуть("Характеристика");
		мСписокВыбораХарактеристики.ЗагрузитьЗначения(врТаблицаХарактеристик.ВыгрузитьКолонку("Характеристика"));
		
		// Получим данные из списка предопределенных характеристик.
		Для Каждого ТекЭлемент Из СписокПредопределенныхХарактеристик Цикл
			мСписокВыбораХарактеристики.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат мСписокВыбораХарактеристики;
	
КонецФункции

&НаКлиенте
// Обновляет список выбора характеристик в зависимости от типа объекта назначения.
Процедура ОбновитьСписокХарактеристик(НормаНаЛицевойСчет)
	
	// Заполним список выбора поля ввода характеристик.
	СписокВыбора = ПолучитьСписокВыбораХарактеристики(Объект.НормаНаЛицевойСчет);
	Элементы.ХарактеристикиИмя.СписокВыбора.Очистить();
	
	Для Каждого ТекЭлемент Из СписокВыбора Цикл
		Элементы.ХарактеристикиИмя.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокХарактеристик()

&НаСервере
// Проверяет, является ли услуга составной и устанавливает в соответствующее
// значение реквизит формы "ВыбранСоставнойТипУслуги".
Процедура ПроверитьСоставнойТипУслуги()
	
	Если Не Объект.Владелец.Пустая()
	   И Объект.Владелец.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
		ВыбранСоставнойТипУслуги = Истина;
	Иначе
		ВыбранСоставнойТипУслуги = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоставнойТипУслуги()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РазмерПередНачаломИзменения = Объект.Размер;
	мУказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
	ИспользоватьФункционалВЕЖ = Константы.УПЖКХ_ИспользоватьФункционалВЕЖ.Получить();
	
	ЗаполнитьТаблицуТиповХарактеристик();
	СформироватьКолонки();
	ЗаполнитьТаблицуНорм();
	ТипОбъектаНазначенияИзменен = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Основание = Перечисления.КВП_ОснованияНормПотребления.БезОснования;
		Объект.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных 
						 = Перечисления.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.НеОпределять;
		Объект.НормаНаЛицевойСчет = ?(ТипОбъектаНазначенияНовогоЭлементаПредустановлен, Объект.НормаНаЛицевойСчет, Истина);
		
		Если Не Объект.Владелец.Пустая() Тогда
			УстановитьЕдиницуИзмеренияПоУслуге(Объект.Владелец);
		КонецЕсли;
		
	Иначе
		Если Объект.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Зарегистрированные Тогда
			врВидЖильцов = "Зарегистрированный";
		ИначеЕсли Объект.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Проживающие Тогда
			врВидЖильцов = "Проживающий";
		ИначеЕсли Объект.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.ВладельцыЕдинственногоЖилья Тогда
			врВидЖильцов = "Владелец единственного жилья(только зарегистрированные)";
		ИначеЕсли Объект.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.Льготники Тогда
			врВидЖильцов = "Льготник";
		ИначеЕсли Объект.ВидЖильцов = Перечисления.УПЖКХ_ВидыЖильцов.БлизкиеРодственники Тогда
			врВидЖильцов = "Близкий родственник";
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.Владелец.Пустая()
	   И Объект.Владелец.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
		ВыбранСоставнойТипУслуги = Истина;
	Иначе
		ВыбранСоставнойТипУслуги = Ложь;
	КонецЕсли;
	
	// Зададим список выбора для поля ввода вида площади здания.
	СписокВыбораПлощадиЗдания = Новый СписокЗначений;
	СписокВыбораПлощадиЗдания.Добавить("ОбщаяПлощадьВсехПомещений",                     "Общая площадь всех помещений");
	СписокВыбораПлощадиЗдания.Добавить("ОбщаяПлощадьВсехЖилыхНежилыхПомещений",         "Общая площадь всех жилых и нежилых помещений");
	СписокВыбораПлощадиЗдания.Добавить("ОбщаяПлощадьВсехПомещенийВСоставеОбщИмущества", 
																						"Общая площадь всех помещений, входящих в состав общего имущества");
	
	Для Каждого ТекЭлемент Из СписокВыбораПлощадиЗдания Цикл
		Элементы.ВидПлощадиЗданияНаФорме.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	ВидПлощадиЗданияНаФорме = Объект.ВидПлощадиЗдания;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ТипОбъектаНазначения = ?(Объект.НормаНаЛицевойСчет, 1, 0);
	
	ПроверитьСоставнойТипУслуги();
	
	ОбновитьСписокХарактеристик(Объект.НормаНаЛицевойСчет);
	
	// Установим видимость элементов.
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗаписиНаСервере" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ЗакрытьФормуПослеЗаписи Тогда
	
		Если Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный") Тогда
			ПоместитьТаблицуНормВТЧ(Отказ);
			Если ТаблицаРазмеровНорм.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заданы размеры норм!", Отказ);
			Иначе
				ПроверитьЗаполнениеСтрокТаблицыРазмеровНорм(Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.НормаНаЛицевойСчет Тогда
			Объект.ВидПлощадиЗдания = "";
		Иначе
			Объект.ВидПлощади = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка");
			Объект.ВидПлощадиЗдания = ВидПлощадиЗданияНаФорме;
		КонецЕсли;
		
		// Проверка заполнения.
		
		Если Объект.Основание.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрано основание нормы потребления!", Отказ);
		КонецЕсли;
		
		Если Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек")
		  И НЕ ЗначениеЗаполнено(врВидЖильцов)Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран вид жильцов!", Отказ);
		КонецЕсли;
		
		Если Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Площадь")
		  И (Не ЗначениеЗаполнено(Объект.ВидПлощади) И Не ЗначениеЗаполнено(Объект.ВидПлощадиЗдания)) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан вид площади!", Отказ);
		КонецЕсли;
		
		Если Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула") Тогда
			Если Объект.ФормулаРасчета = "" Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не введена формула расчета!", Отказ);
			КонецЕсли;
		КонецЕсли;

		Если Объект.НормаНаЛицевойСчет
		   И Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек")
		   И Объект.ВидЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.ВладельцыЕдинственногоЖилья")
		   И мУказыватьКоличествоПрожИЗарегЧислами Тогда
			
			ТекстВопроса       = "В параметрах учетной политики ЖКХ выбран учет жильцов готовыми числами.
								 |Для вида жильцов ""Владелец единственного жилья"" расчет начислений может производиться некорректно! Продолжить?";
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗаписью", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
// Процедура-обработчик результат вопроса, вызванного в процедуре "ПередЗаписью()".
Процедура ОбработатьРезультатВопросаПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ЗакрытьФормуПослеЗаписи = Истина;
	Записать();
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗаписью()

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого ТекСтрокаХарактеристики Из ТекущийОбъект.Характеристики Цикл
		СтрокиХарактеристики = Объект.Характеристики.НайтиСтроки(
								Новый Структура("Имя, Вид", ТекСтрокаХарактеристики.Имя, ТекСтрокаХарактеристики.Вид));
		Если СтрокиХарактеристики.Количество() > 0 Тогда
			СтрокаХарактеристики = СтрокиХарактеристики[0];
			ТекСтрокаХарактеристики.ХранилищеТипа = Новый ХранилищеЗначения(СтрокаХарактеристики.Тип);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьТаблицуТиповХарактеристик();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Владелец".
Процедура ВладелецОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранСоставнойТипУслуги = Ложь;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Если НЕ Объект.Владелец = ВыбранноеЗначение Тогда
			СтандартнаяОбработка = НЕ ПредупреждениеПриИзменении();
		КонецЕсли;
		
		УстановитьЕдиницуИзмеренияПоУслуге(ВыбранноеЗначение);
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "СпособРасчета")
					= ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам") Тогда
			ВыбранСоставнойТипУслуги = Истина;
		КонецЕсли;
		
		Если НЕ ВыбранСоставнойТипУслуги Тогда
			// Признак "Норма для владельцев (нанимателей) единственного жилья" действует только для составных услуг,
			// поэтому при указании услуги, отличной от составной, сбрасываем флаг.
			Объект.НормаДляВЕЖ = Ложь;
		КонецЕсли;
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипВладельца".
Процедура ТипОбъектаНазначенияПриИзменении(Элемент)
	
	Объект.НормаНаЛицевойСчет = (ТипОбъектаНазначения = 1);
	
	Если ПредупреждениеПриИзменении() Тогда
		Объект.НормаНаЛицевойСчет = Не Объект.НормаНаЛицевойСчет;
		Возврат;
	КонецЕсли;
	
	ТипОбъектаНазначенияИзменен = Истина;
	
	Если Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный") Тогда
		
		Если Не Объект.Характеристики.Количество() = 0 Тогда
			Если ПроверитьЗависимостьНормыПотребления() Тогда
				ТекстВопроса = "В таблице характеристик имеются характеристики, неприменимые для ввода норм потребления на "
								+ ?(Объект.НормаНаЛицевойСчет, "лицевой счет.", "здание.")
								+ Символы.ПС + "Таблица характеристик будет очищена. Продолжить?";
				ВопросОчисткиТаблицыХарактеристик = Новый ОписаниеОповещения("ЗавершениеВопросОчисткиТаблицыХарактеристик", ЭтаФорма);
				ПоказатьВопрос(ВопросОчисткиТаблицыХарактеристик, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьСписокХарактеристик(Объект.НормаНаЛицевойСчет);
		
	ИначеЕсли Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула") Тогда
		
		Если ПроверитьЗависимостьНормыПотребления() Тогда
			ТекстВопроса = "В формуле расчета имеются показатели, неприменимые для ввода норм потребления на здание."
							+ Символы.ПС + "Поле формулы будет очищено. Продолжить?";
			ВопросОчисткиФормулыРасчета = Новый ОписаниеОповещения("ЗавершениеВопросОчисткиФормулыРасчета", ЭтаФорма);
			ПоказатьВопрос(ВопросОчисткиФормулыРасчета, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Объект.НормаНаЛицевойСчет
	  И Не Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.БезОснования")
	  И Не Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Площадь") Тогда
		Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ПустаяСсылка");
	КонецЕсли;
	
	// Признак "Норма для владельцев (нанимателей) единственного жилья" может быть установлен 
	// только для норм на лицевые счета. Поэтому сбрасываем его, если выбрано значение "Норма на здание, сооружение".
	Если НЕ Объект.НормаНаЛицевойСчет Тогда
		Объект.НормаДляВЕЖ = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик завершения ответа пользователя на вопрос очистки таблицы характеристик.
//
Процедура ЗавершениеВопросОчисткиТаблицыХарактеристик(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Характеристики.Очистить();
		ТаблицаРазмеровНорм.Очистить();
		СформироватьКолонки();
	Иначе
		Объект.НормаНаЛицевойСчет = Не Объект.НормаНаЛицевойСчет;
		ТипОбъектаНазначения = ?(Объект.НормаНаЛицевойСчет, 1, 0);
		ТипОбъектаНазначенияИзменен = Ложь;
	КонецЕсли;
	
	ОбновитьСписокХарактеристик(Объект.НормаНаЛицевойСчет);
	
	Если Не Объект.НормаНаЛицевойСчет
	  И Не Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.БезОснования")
	  И Не Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Площадь") Тогда
		Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик завершения ответа пользователя на вопрос очистки формулы расчета.
//
Процедура ЗавершениеВопросОчисткиФормулыРасчета(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ФормулаРасчета = "";
	Иначе
		Объект.НормаНаЛицевойСчет = Не Объект.НормаНаЛицевойСчет;
		ТипОбъектаНазначения = ?(Объект.НормаНаЛицевойСчет, 1, 0);
		ТипОбъектаНазначенияИзменен = Ложь;
	КонецЕсли;
	
	Если Не Объект.НормаНаЛицевойСчет
	  И Не Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.БезОснования")
	  И Не Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Площадь") Тогда
		Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Проверяет зависимость нормы потребления.
Функция ПроверитьЗависимостьНормыПотребления()
	
	Если Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный") Тогда
		Характеристики = Новый Массив;
		Для Каждого Строка Из Объект.Характеристики Цикл
			Если Не Объект.НормаНаЛицевойСчет И Строка.Вид = "Близких родственников" Тогда
				Характеристики.Добавить(Строка.Вид);
			Иначе
				Характеристики.Добавить(Строка.Имя);
			КонецЕсли;
		КонецЦикла;
		
		МассивХарактеристикДляПоиска = Новый Массив;
		Если Не Объект.НормаНаЛицевойСчет Тогда
			МассивХарактеристикДляПоиска.Добавить("Количество комнат");
			МассивХарактеристикДляПоиска.Добавить("Свойство помещения");
			МассивХарактеристикДляПоиска.Добавить("Реквизит помещения");
			МассивХарактеристикДляПоиска.Добавить("Площадь помещения");
			
			МассивХарактеристикДляПоиска.Добавить("Близких родственников");
		Иначе
			МассивХарактеристикДляПоиска.Добавить("Количество проживающих / Площадь");
			МассивХарактеристикДляПоиска.Добавить("Количество зарегистрированных / Площадь");
			МассивХарактеристикДляПоиска.Добавить("Площадь / Количество проживающих");
			МассивХарактеристикДляПоиска.Добавить("Площадь / Количество зарегистрированных");
		КонецЕсли;
		
		ЕстьЗависимыеПараметры = Ложь;
		
		Для Каждого ТекХарактеристика Из Характеристики Цикл
			Если Не МассивХарактеристикДляПоиска.Найти(ТекХарактеристика) = Неопределено Тогда
				ЕстьЗависимыеПараметры = Истина;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула") Тогда
		
		МассивПоказателейДляПоиска = Новый Массив;
		МассивПоказателейДляПоиска.Добавить("Количество комнат");
		МассивПоказателейДляПоиска.Добавить("СвойствоПомещения");
		МассивПоказателейДляПоиска.Добавить("РеквизитПомещения");
		МассивПоказателейДляПоиска.Добавить("ПлощадьПомещения");
		МассивПоказателейДляПоиска.Добавить("Близких родственников");
		
		ЕстьЗависимыеПараметры = Ложь;
		
		Для Каждого ТекПоказатель Из МассивПоказателейДляПоиска Цикл
			Если СтрНайти(Объект.ФормулаРасчета, ТекПоказатель) > 0 Тогда
				ЕстьЗависимыеПараметры = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьЗависимыеПараметры;
	
КонецФункции // ПроверитьЗависимостьНормыПотребления()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Основание".
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Если Объект.НормаНаЛицевойСчет Тогда
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.КоличествоДней"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Услуга"));
	КонецЕсли;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.Площадь"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.БезОснования"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборИзСпискаОснование", ЭтаФорма);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);
	
КонецПроцедуры // ОснованиеНачалоВыбора()

&НаКлиенте
// Процедура-обработчик результата выбора из списка, вызванной из процедуры "ОснованиеНачалоВыбора()".
//
// Параметры:
//  РезультатВыбора			 - 	Элемент списка значений - значение основания.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура ОбработатьВыборИзСпискаОснование(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено
	   И Не Объект.Основание = РезультатВыбора.Значение
	   И НЕ ПредупреждениеПриИзменении() Тогда
		Объект.Основание = РезультатВыбора.Значение;
		Модифицированность = Истина;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборИзСпискаОснование()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "врВидЖильцов".
Процедура врВидЖильцовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Зарегистрированные",          "Зарегистрированный");
	СписокВыбора.Добавить("Проживающие",                 "Проживающий");
	Если Объект.НормаНаЛицевойСчет Тогда
		СписокВыбора.Добавить("Льготники", "Льготник");
		Если НЕ НеИспользоватьБлизкихРодственников Тогда
			СписокВыбора.Добавить("БлизкиеРодственники", "Близкий родственник");
		КонецЕсли;
	КонецЕсли;
	Если ВыбранСоставнойТипУслуги Тогда
		СписокВыбора.Добавить("ВладельцыЕдинственногоЖилья", "Владелец единственного жилья (только зарегистрированные)");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборИзСпискаВидЖильцов", ЭтаФорма);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата выбора из списка, вызванной из процедуры "ОснованиеНачалоВыбора()".
//
// Параметры:
//  РезультатВыбора			 - 	Элемент списка значений - значение основания.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура ОбработатьВыборИзСпискаВидЖильцов(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено
	   И Не врВидЖильцов = РезультатВыбора.Представление
	   И НЕ ПредупреждениеПриИзменении() Тогда
		врВидЖильцов      = РезультатВыбора.Представление;
		Объект.ВидЖильцов = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов." + РезультатВыбора.Значение);
		ОбновитьОписаниеНастройкиПриОтсутствииВыбранногоВидаЖильцов(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборИзСпискаВидЖильцов()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля ввода "ЕдиницаИзмерения".
Процедура ЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ Объект.ЕдиницаИзмерения = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = НЕ ПредупреждениеПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля ввода "ВидПлощадиЗданияНаФорме".
Процедура ВидПлощадиЗданияНаФормеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВидПлощадиЗданияНаФорме = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = НЕ ПредупреждениеПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля ввода "ВидПлощади".
Процедура ВидПлощадиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ Объект.ВидПлощади = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = НЕ ПредупреждениеПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "Вариант определения количества жильцов при отсутствии выбранного вида жильцов".
Процедура ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхПриИзменении(Элемент)
	
	ОбновитьОписаниеНастройкиПриОтсутствииВыбранногоВидаЖильцов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля ввода "Размер".
Процедура РазмерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ Объект.Размер = ВыбранноеЗначение Тогда
		СтандартнаяОбработка = НЕ ПредупреждениеПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "Размер".
Процедура РазмерПриИзменении(Элемент)
	
	Если НЕ Объект.Размер = РазмерПередНачаломИзменения И ПредупреждениеПриИзменении() Тогда
		Объект.Размер = РазмерПередНачаломИзменения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВариантНастройки".
Процедура ВариантНастройкиПриИзменении(Элемент)
	
	ПредупреждениеПриИзменении();
	
	УправлениеФормой(ЭтаФорма);
	
	Если Объект.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный") Тогда
		ОбновитьСписокХарактеристик(Объект.НормаНаЛицевойСчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" флага "НормаДляВЕЖ".
Процедура НормаДляВЕЖПриИзменении(Элемент)
	
	// При установленном флаге "Норма для владельцев (нанимателей) единственного жилья" расчет происходит в зависимости
	// от наличия на лицевом счете зарегистрированного жильца с признаком "ВЕЖ" без учета значения основания нормы.
	// Указание основания для таких норм становится бессмысленным, поэтому очистим значение основания, а далее основание
	// будет от пользователя в процедуре "УправлениеФормой()".
	Если Объект.НормаДляВЕЖ Тогда
		Объект.Основание = ПредопределенноеЗначение("Перечисление.КВП_ОснованияНормПотребления.БезОснования");
	КонецЕсли;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // НормаДляВЕЖПриИзменении()

&НаКлиенте
// Обработчик нажатия на подсказку поля "НормаДляВЕЖ".
Процедура НормаДляВЕЖРасширеннаяПодсказкаНажатие(Элемент)
	
	ФормаНастроекПрограммы = ПолучитьФорму("ОбщаяФорма.УПЖКХ_НастройкаПрограммы");
	ФормаНастроекПрограммы.Элементы.Группа.ТекущаяСтраница = ФормаНастроекПрограммы.Элементы.Группа.ПодчиненныеЭлементы.ФункциональностьПрограммы;
	ФормаНастроекПрограммы.Открыть();
	
КонецПроцедуры // НормаДляВЕЖРасширеннаяПодсказкаНажатие()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "ХАРАКТЕРИСТИКИ"

&НаКлиенте
// Обработчик события "ПередУдалением" табличного поля "Характеристики".
Процедура ХарактеристикиПередУдалением(Элемент, Отказ)
	
	Отказ = ПредупреждениеПриИзменении();
	
	Если Не Отказ Тогда
		ОбновитьКолонки(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" табличного поля "Характеристики".
Процедура ХарактеристикиПослеУдаления(Элемент)
	
	СформироватьКолонки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередОкончаниемРедактирования" табличного поля "Характеристики".
Процедура ХарактеристикиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	СтрокаТабличнойЧасти = Элементы.Характеристики.ТекущиеДанные;
	
	Если Не ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Вид) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан вид характеристики!", Отказ);
			СтрокаТабличнойЧасти.Вид = Неопределено;
			Возврат;
		ИначеЕсли Не ОбновитьИмяКолонки(СтрокаТабличнойЧасти) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Характеристика с данным видом уже имеется в таблице характеристик!", Отказ);
			СтрокаТабличнойЧасти.Вид = Неопределено;
			Возврат;
		КонецЕсли;
		
		ОбновитьКолонки(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ХарактеристикиИмя".
Процедура ХарактеристикиИмяПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Характеристики.ТекущиеДанные;
	Если Не СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти.Вид = Неопределено;
		СтрокаТабличнойЧасти.ВводДиапазона = Ложь;
		СтрокаТабличнойЧасти.ВариантЗначения = Элементы.ХарактеристикиВариантЗначения.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ОбновитьИмяКолонки(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ХарактеристикиВид".
Процедура ХарактеристикиВидПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Характеристики.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьХранилищеТипаВСтрокеХарактеристики(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ХарактеристикиВид".
Процедура ХарактеристикиВидНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Характеристики.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборИзФормы = Ложь;
	
	Если ТекСтрока.Имя = "Площадь здания"
	 Или ТекСтрока.Имя = "Площадь помещения" Тогда
		ВыборИзФормы = Истина;
	КонецЕсли;
	
	ВыбранноеЗначение  = Неопределено;
	ДопПараметры       = Новый Структура("ВыборИзФормы, ВыбранноеЗначение, ТекСтрока, Элемент", ВыборИзФормы, ВыбранноеЗначение, ТекСтрока, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ХарактеристикиВидНачалоВыбораЗавершение", ЭтотОбъект, ДопПараметры);
	
	Если ВыборИзФормы Тогда
		
		Если ТекСтрока.Имя = "Площадь здания" Тогда
			ИмяФормыВыбора = "Справочник.КВП_ТипыПлощадейЗдания.ФормаВыбора";
		ИначеЕсли ТекСтрока.Имя = "Площадь помещения" Тогда
			ИмяФормыВыбора = "Справочник.УПЖКХ_ВидыПлощадей.ФормаВыбора";
		КонецЕсли;
		
		ОткрытьФорму(ИмяФормыВыбора, , Элемент,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	Иначе
		ДопПараметры       = Новый Структура("ВыборИзФормы, ВыбранноеЗначение, ТекСтрока, Элемент", ВыборИзФормы, ВыбранноеЗначение, ТекСтрока, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ХарактеристикиВидНачалоВыбораЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВыборИзСписка(ОписаниеОповещения, ПолучитьСписокВыбораВидаХарактеристики(ТекСтрока.Имя), Элемент);
		Возврат;
		
	КонецЕсли;
	
	ХарактеристикиВидНачалоВыбораФрагмент(ВыборИзФормы, ВыбранноеЗначение, ТекСтрока, Элемент);
	
КонецПроцедуры // ХарактеристикиВидНачалоВыбора()

&НаКлиенте
// Процедура-обработчик результата выбора значения, вызванный в процедуре "ХарактеристикиВидНачалоВыбора()".
//
// Параметры:
//  ВыбранныйЭлемент		 - 	Элемент списка значений.
//  ДополнительныеПараметры	 - 	Структура.
//
Процедура ХарактеристикиВидНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ХарактеристикиВидНачалоВыбораФрагмент(ДополнительныеПараметры.ВыборИзФормы,
										  ВыбранныйЭлемент,
										  ДополнительныеПараметры.ТекСтрока,
										  ДополнительныеПараметры.Элемент);

КонецПроцедуры // ХарактеристикиВидНачалоВыбораЗавершение()

&НаКлиенте
// Процедура вызывает обновление структуры колонок таблицы.
Процедура ХарактеристикиВидНачалоВыбораФрагмент(Знач ВыборИзФормы, Знач ВыбранноеЗначение, Знач ТекСтрока, Знач Элемент)
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		Если ВыборИзФормы Тогда
			ТекСтрока.Вид = ВыбранноеЗначение;
			ТекСтрока.ВидДляТипаЗначения = ВыбранноеЗначение;
		Иначе
			ТекСтрока.Вид = ВыбранноеЗначение.Значение;
			ТекСтрока.ВидДляТипаЗначения = ВыбранноеЗначение.Значение;
		КонецЕсли;
		
		Если Не ОбновитьИмяКолонки(ТекСтрока) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Характеристика с данным видом уже имеется в таблице характеристик!");
			ТекСтрока.Вид = Неопределено;
			Возврат;
		КонецЕсли;
		
		// Обработку изменения вида характеристики нужно выполнять в любом случае,
		// так как нужно установить тип значения поля значения в таблице размеров норм.
		ХарактеристикиВидПриИзменении(Элемент);
		
		// Проводим сравнение типа добавляемого реквизита.
		ОписаниеТиповХарактеристики = ТекСтрока.Тип;
		КвалификаторЧисло = Новый КвалификаторыЧисла(ОписаниеТиповХарактеристики.КвалификаторыЧисла.Разрядность,
													 ОписаниеТиповХарактеристики.КвалификаторыЧисла.РазрядностьДробнойЧасти,
													 ОписаниеТиповХарактеристики.КвалификаторыЧисла.ДопустимыйЗнак);
		КвалификаторСтрока = Новый КвалификаторыСтроки(ОписаниеТиповХарактеристики.КвалификаторыСтроки.Длина,
													   ОписаниеТиповХарактеристики.КвалификаторыСтроки.ДопустимаяДлина);
		МассивЧисло = Новый Массив;
		МассивЧисло.Добавить(Тип ("Число"));
		МассивСтрока = Новый Массив;
		МассивСтрока.Добавить(Тип ("Строка"));
		
		ОписаниеТипаДляСравненияЧисло  = Новый ОписаниеТипов(МассивЧисло, , , КвалификаторЧисло);
		ОписаниеТипаДляСравненияСтрока = Новый ОписаниеТипов(МассивСтрока, ,КвалификаторСтрока);
		
		Если ОписаниеТиповХарактеристики = ОписаниеТипаДляСравненияЧисло Или ОписаниеТиповХарактеристики = ОписаниеТипаДляСравненияСтрока Тогда
			ТекСтрока.ТипЗначенияСсылкаБулево = Ложь;
		Иначе
			ТекСтрока.ТипЗначенияСсылкаБулево = Истина;
		КонецЕсли;
		
		Если ТекСтрока.ТипЗначенияСсылкаБулево И ТекСтрока.ВариантЗначения = Элементы.ХарактеристикиВариантЗначения.СписокВыбора[1].Значение Тогда
			ХарактеристикиВариантЗначенияПриИзменении(Элементы.ХарактеристикиВариантЗначения);
		Иначе
			ОбновитьКолонки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ХарактеристикиВидНачалоВыбораФрагмент()

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" табличного поля "Характеристики".
Процедура ХарактеристикиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = ПредупреждениеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" табличного поля "Характеристики".
Процедура ХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = ПредупреждениеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ХарактеристикиВариантЗначения".
Процедура ХарактеристикиВариантЗначенияПриИзменении(Элемент)
	
	ТекДанные = Элементы.Характеристики.ТекущиеДанные;
	Если ТекДанные.ВариантЗначения = Элемент.СписокВыбора[0].Значение Тогда
		ТекДанные.ВводДиапазона = Ложь;
	Иначе
		Если ТекДанные.ТипЗначенияСсылкаБулево = Истина Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Виды характеристик типа ""Булево"" и ""Ссылка"" не могут задаваться по варианту значения ""Диапазон"".");
			ТекДанные.ВариантЗначения = Элемент.СписокВыбора[0].Значение;
			ТекДанные.ВводДиапазона = Ложь;
		Иначе
			ТекДанные.ВводДиапазона = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКолонки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ХарактеристикиВариантЗначения".
Процедура ХарактеристикиВариантЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Элементы.Характеристики.ТекущиеДанные.Вид) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан вид характеристики!");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "ТАБЛИЦА РАЗМЕРОВ НОРМ"

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Владелец".
Процедура ТаблицаРазмеровНормОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.ТаблицаРазмеровНорм.ТекущиеДанные;
	Если Не СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти["ФлагДругиеЗначения" + Элемент.Имя] = (ВыбранноеЗначение = "Другие");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля значения характеристики.
Процедура ТаблицаРазмеровНормПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТаблицаРазмеровНорм.ТекущиеДанные;
	Если Не СтрокаТабличнойЧасти = Неопределено Тогда
		Если СтрокаТабличнойЧасти["ФлагДругиеЗначения" + Элемент.Имя] И ЗначениеЗаполнено(СтрокаТабличнойЧасти[Элемент.Имя]) И НЕ СтрокаТабличнойЧасти[Элемент.Имя] = "Другие" Тогда
			СтрокаТабличнойЧасти["ФлагДругиеЗначения" + Элемент.Имя] = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" колонок табличного поля "ТаблицаРазмеровНорм".
Процедура ТаблицаРазмеровНормПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Характеристики.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сначала необходимо добавить характеристику.", Отказ);
	КонецЕсли;
	
	Отказ = ПредупреждениеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" табличного поля "ТаблицаРазмеровНорм".
Процедура ТаблицаРазмеровНормПередУдалением(Элемент, Отказ)
	
	Отказ = ПредупреждениеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" табличного поля "ТаблицаРазмеровНорм".
Процедура ТаблицаРазмеровНормПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = ПредупреждениеПриИзменении();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" табличного поля "ТаблицаРазмеровНорм".
Процедура ТаблицаРазмеровНормНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = Элементы.ТаблицаРазмеровНорм.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	
	ЗначенияВведены = (Не СтрокаТабличнойЧасти[Элемент.Имя + "Значение1"] = 0 Или Не СтрокаТабличнойЧасти[Элемент.Имя + "Значение2"] = 0);
	
	СтруктураПараметров.Вставить("НижнееЗначение",  ?(ЗначенияВведены, СтрокаТабличнойЧасти[Элемент.Имя + "Значение1"], Неопределено));
	СтруктураПараметров.Вставить("ВерхнееЗначение", ?(ЗначенияВведены, СтрокаТабличнойЧасти[Элемент.Имя + "Значение2"], Неопределено));
	
	ОткрытьФорму("Справочник.КВП_НормыПотребленияУслуг.Форма.ФормаВводаДиапазона",
				 СтруктураПараметров,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборДиапазона",
				 						  ЭтаФорма,
										  Новый Структура("Элемент, СтрокаТабличнойЧасти", Элемент, СтрокаТабличнойЧасти)),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ТаблицаРазмеровНормНачалоВыбора()

&НаКлиенте
// Процедура-обработчик результата выбора, вызванного из процедуры "ТаблицаРазмеровНормНачалоВыбора()".
Процедура ОбработатьВыборДиапазона(СтруктураДанныхВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не СтруктураДанныхВыбора = Неопределено Тогда
		
		СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
		Элемент              = ДополнительныеПараметры.Элемент;
		
		СтрокаТабличнойЧасти[Элемент.Имя]               = СтруктураДанныхВыбора.ВидДляВывода;
		СтрокаТабличнойЧасти[Элемент.Имя + "Значение1"] = СтруктураДанныхВыбора.Значение1;
		СтрокаТабличнойЧасти[Элемент.Имя + "Значение2"] = СтруктураДанныхВыбора.Значение2;
		
		Если СтрокаТабличнойЧасти["ФлагДругиеЗначения" + Элемент.Имя] Тогда
			СтрокаТабличнойЧасти["ФлагДругиеЗначения" + Элемент.Имя] = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДиапазона()

#КонецОбласти

#Область ОбработчикиКомандФормы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

//Обработчик команды "ОткрытьКонструкторФормул".
&НаКлиенте
Процедура ОткрытьКонструкторФормул(Команда)
	
	РезультатРедактирования = Неопределено;
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", 
	             ПолучитьПараметрыФормыРедактированияНормы(),
	             Объект.ФормулаРасчета, 
	             , 
	             , 
	             , 
	             Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект), 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область КонструкторФормул

//Процедура обработчик события "Завершениие" формы КонструкторФормул.
//
&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ФормулаРасчета = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

//Получает параметры открытия формы КонструкторФормул.
//
&НаКлиенте
Функция ПолучитьПараметрыФормыРедактированияНормы()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Формула",                     Объект.ФормулаРасчета);
	ПараметрыФормы.Вставить("ТипРезультата",               Новый ОписаниеТипов("Число"));
	ПараметрыФормы.Вставить("ИспользуетсяДеревоОперандов", Истина);
	ПараметрыФормы.Вставить("Операнды",                    ПостроитьДеревоОперандов());
	ПараметрыФормы.Вставить("ОперандыЗаголовок",           НСтр("ru = 'Доступные параметры расчета нормы потребления услуг'"));
	ПараметрыФормы.Вставить("Операторы",                   ПостроитьДеревоОператоров());
	ПараметрыФормы.Вставить("НеИспользоватьПредставление", Истина);
	
	Возврат ПараметрыФормы
	
КонецФункции

//Возвращает дерево операндов.
//
&НаСервере
Функция ПостроитьДеревоОперандов()
	
	Дерево =  РаботаСФормулами.ПолучитьПустоеДеревоОперандов();
	
	//СвойствоЗдания
	Уровень1 = Дерево.Строки.Добавить();
	Уровень1.Идентификатор = "Здание";
	Уровень1.Представление = "Здание";
	
	Уровень2 = Уровень1.Строки.Добавить();
	Уровень2.Идентификатор = "СвойствоЗдания";
	Уровень2.Представление = "Свойства здания";
	
	Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
	
	Для Каждого Строка Из Выборка Цикл 
		
		Уровень3 = Уровень2.Строки.Добавить();
		Уровень3.Идентификатор = Строка;
		Уровень3.Представление = Строка;
		
	КонецЦикла;
	
	Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
	
	Для Каждого Строка Из Выборка Цикл 
		
		Уровень3 = Уровень2.Строки.Добавить();
		Уровень3.Идентификатор = Строка;
		Уровень3.Представление = Строка;
		
	КонецЦикла;
	
	// РеквизитЗдания
	Уровень2 = Уровень1.Строки.Добавить();
	Уровень2.Идентификатор = "РеквизитЗдания";
	Уровень2.Представление = "Реквизиты здания";
	
	Выборка = Метаданные.Справочники.КВП_Здания.Реквизиты;
	
	Для Каждого Строка Из Выборка Цикл 
		
		Уровень3 = Уровень2.Строки.Добавить();
		Уровень3.Идентификатор = Строка.Имя;
		Уровень3.Представление = Строка;
		
	КонецЦикла;
	
	// ПлощадьЗдания
	Уровень2 = Уровень1.Строки.Добавить();
	Уровень2.Идентификатор = "ПлощадьЗдания";
	Уровень2.Представление = "Площади здания";
	
	Выборка = Справочники.КВП_ТипыПлощадейЗдания.Выбрать();;
	
	Пока Выборка.Следующий() Цикл  
		
		Уровень3 = Уровень2.Строки.Добавить();
		Уровень3.Идентификатор = Выборка.ИдентификаторДляФормул;
		Уровень3.Представление = Выборка;
		
	КонецЦикла;
	
	Если Объект.НормаНаЛицевойСчет Тогда 
		
		//Помещения
		Уровень1 = Дерево.Строки.Добавить();
		Уровень1.Идентификатор = "Помещение";
		Уровень1.Представление = "Помещение";
		
		//СвойствоПомещения
		Уровень2 = Уровень1.Строки.Добавить();
		Уровень2.Идентификатор = "СвойствоПомещения";
		Уровень2.Представление = "Свойства помещения";
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_УПЖКХ_Помещения.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
		
		Для Каждого Строка Из Выборка Цикл 
			
			Уровень3 = Уровень2.Строки.Добавить();
			Уровень3.Идентификатор = Строка;
			Уровень3.Представление = Строка;
			
		КонецЦикла;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_УПЖКХ_Помещения.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
		
		Для Каждого Строка Из Выборка Цикл 
			
			Уровень3 = Уровень2.Строки.Добавить();
			Уровень3.Идентификатор = Строка;
			Уровень3.Представление = Строка;
			
		КонецЦикла;
		
		// РеквизитПомещения
		Уровень2 = Уровень1.Строки.Добавить();
		Уровень2.Идентификатор = "РеквизитПомещения";
		Уровень2.Представление = "Реквизиты помещения";
		
		Выборка = Метаданные.Справочники.УПЖКХ_Помещения.Реквизиты;
		
		Для Каждого Строка Из Выборка Цикл 
			
			Уровень3 = Уровень2.Строки.Добавить();
			Уровень3.Идентификатор = Строка.Имя;
			Уровень3.Значение      = 1;
			Уровень3.Представление = Строка;
			
		КонецЦикла;
		
		// ПлощадьПомещения
		Уровень2 = Уровень1.Строки.Добавить();
		Уровень2.Идентификатор = "ПлощадьПомещения";
		Уровень2.Представление = "Площади помещения";
		
		Выборка = Справочники.УПЖКХ_ВидыПлощадей.Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			
			Уровень3 = Уровень2.Строки.Добавить();
			Уровень3.Идентификатор = Выборка.ИдентификаторДляФормул;
			Уровень3.Представление = Выборка;
			
		КонецЦикла;
		
		// КоличествоКомнат
		Уровень1 = Дерево.Строки.Добавить();
		Уровень1.Идентификатор = "КоличествоКомнат";
		Уровень1.Представление = "Количество комнат";
		
		ТаблицаЗначенийПоказателей = Справочники.КВП_НормыПотребленияУслуг.ПолучитьТаблицуХарактеристикИзМакета(Объект.НормаНаЛицевойСчет, ВыбранСоставнойТипУслуги);
		Выборка = ТаблицаЗначенийПоказателей.НайтиСтроки(Новый Структура("Характеристика", "Количество комнат"));
		
		Для Каждого Строка Из Выборка Цикл
			
			Уровень2 = Уровень1.Строки.Добавить();
			Уровень2.Идентификатор = Строка.Вид;
			Уровень2.Представление = Строка.Вид;
			
		КонецЦикла;
		
	КонецЕсли;
		
	// КоличествоЧеловек
	Уровень1 = Дерево.Строки.Добавить();
	Уровень1.Идентификатор = "КоличествоЧеловек";
	Уровень1.Представление = "Количество человек";
	
	ТаблицаЗначенийПоказателей = Справочники.КВП_НормыПотребленияУслуг.ПолучитьТаблицуХарактеристикИзМакета(Объект.НормаНаЛицевойСчет, ВыбранСоставнойТипУслуги);
	Выборка = ТаблицаЗначенийПоказателей.НайтиСтроки(Новый Структура("Характеристика", "Количество человек"));
	
	Для Каждого Строка Из Выборка Цикл
		
		Если (НеИспользоватьБлизкихРодственников Или Не Объект.НормаНаЛицевойСчет) И Строка.Вид = "Близких родственников" Тогда
			Продолжить;
		КонецЕсли;
		
		Уровень2 = Уровень1.Строки.Добавить();
		Уровень2.Идентификатор = Строка.Вид;
		Уровень2.Представление = Строка.Вид;
		
	КонецЦикла;
	
	Уровень1 = Дерево.Строки.Добавить();
	Уровень1.Идентификатор = "ПоказательРасчета";
	Уровень1.Представление = "Показатели расчета";

	Уровень2 = Уровень1.Строки.Добавить();
	Уровень2.Идентификатор = "КоличествоДнейВМесяце";
	Уровень2.Представление = "Количество дней в месяце";

	Уровень2 = Уровень1.Строки.Добавить();
	Уровень2.Идентификатор = "МесяцРасчета";
	Уровень2.Представление = "Месяц расчета";
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

//Возвращает дерево операторов.
//
&НаСервере
Функция ПостроитьДеревоОператоров()
	
	ПараметрыОператоров = Новый Структура;
	ПараметрыОператоров.Вставить("СтандартныеОператоры", Истина);
	ПараметрыОператоров.Вставить("ЛогическиеОператоры",  Истина);
	ПараметрыОператоров.Вставить("Функции",              Истина);
	
	Возврат РаботаСФормулами.ПостроитьДеревоОператоров(ПараметрыОператоров, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти
