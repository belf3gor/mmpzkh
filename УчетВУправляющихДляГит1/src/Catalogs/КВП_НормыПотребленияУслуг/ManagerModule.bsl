
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ФункцииДляПолученияЗначенийПараметровИзМакета

// Функции должны быть экспортными. Указывается один параметр,
// в который передается структура параметров.

// Функция получения количества проживающих.
Функция _ПолучитьКоличествоПроживающих(ДопПараметры) Экспорт
	
	Количество = 0;
	ПараметрЛицевойСчет = Неопределено;
	ПараметрПериод      = Неопределено;
	ПараметрДатаДок     = Неопределено;
	ДопПараметры.Свойство("ДатаДок", ПараметрДатаДок);

	Если ДопПараметры.Свойство("ЛицевойСчет", ПараметрЛицевойСчет) 
	   И ДопПараметры.Свойство("Период",      ПараметрПериод) Тогда
		Количество = ПолучитьКоличествоПроживающих(ПараметрЛицевойСчет, ПараметрПериод, ПараметрДатаДок);
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Функция получения количества зарегистрированных.
Функция _ПолучитьКоличествоЗарегистрированных(ДопПараметры) Экспорт
	
	Количество = 0;
	ПараметрЛицевойСчет = Неопределено;
	ПараметрПериод      = Неопределено;
	ПараметрДатаДок     = Неопределено;
	ДопПараметры.Свойство("ДатаДок", ПараметрДатаДок);
	
	Если ДопПараметры.Свойство("ЛицевойСчет", ПараметрЛицевойСчет) 
	   И ДопПараметры.Свойство("Период", ПараметрПериод) Тогда
		Количество = ПолучитьКоличествоЗарегистрированных(ПараметрЛицевойСчет, ПараметрПериод, ПараметрДатаДок);
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Функция получения количество владельцев единственного жилья.
Функция _ПолучитьКоличествоВладельцевЕдинственногоЖилья(ДопПараметры) Экспорт
	
	Количество = 0;
	ПараметрЛицевойСчет = Неопределено;
	ПараметрПериод      = Неопределено;
	
	Если ДопПараметры.Свойство("ЛицевойСчет", ПараметрЛицевойСчет) 
	   И ДопПараметры.Свойство("Период", ПараметрПериод) Тогда
		Количество = ПолучитьКоличествоВладельцевЕдинственногоЖилья(ПараметрЛицевойСчет, ПараметрПериод);
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Функция получения количества проживающих.
Функция _ПолучитьКоличествоЛьготников(ДопПараметры) Экспорт
	
	Количество = 0;
	
	ПараметрЛицевойСчет           = Неопределено;
	ПараметрПериод                = Неопределено;
	ПараметрыОтбораДляРасчетЛьгот = Неопределено;
	
	ДопПараметры.Свойство("ПараметрыОтбораДляРасчетЛьгот", ПараметрыОтбораДляРасчетЛьгот);
	
	Если ДопПараметры.Свойство("ЛицевойСчет", ПараметрЛицевойСчет) 
	   И ДопПараметры.Свойство("Период",      ПараметрПериод) Тогда
		Количество = ПолучитьКоличествоЛьготников(ПараметрЛицевойСчет, 
												  ПараметрПериод,
												  ПараметрыОтбораДляРасчетЛьгот);
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Функция получения количества проживающих.
Функция _ПолучитьКоличествоБлизкихРодственников(ДопПараметры) Экспорт
	
	Количество = 0;
	
	ПараметрПроживающий           = Неопределено;
	ПараметрПериод                = Неопределено;
	ПараметрыОтбораДляРасчетЛьгот = Неопределено;
	
	ДопПараметры.Свойство("ПараметрыОтбораДляРасчетЛьгот", ПараметрыОтбораДляРасчетЛьгот);
	
	Если ДопПараметры.Свойство("Проживающий", ПараметрПроживающий) 
	   И ДопПараметры.Свойство("Период",      ПараметрПериод) Тогда
		Количество = ПолучитьКоличествоБлизкихРодственников(ПараметрПроживающий, 
															ПараметрПериод, 
															ПараметрыОтбораДляРасчетЛьгот);
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Функция получения количества жилых комнат.
Функция _ПолучитьКоличествоЖилыхКомнат(ДопПараметры) Экспорт
	
	Количество = 0;
	ПараметрЛицевойСчет = Неопределено;
	ПараметрПериод      = Неопределено;
	
	Если ДопПараметры.Свойство("ЛицевойСчет", ПараметрЛицевойСчет) 
	   И ДопПараметры.Свойство("Период", ПараметрПериод) Тогда
		
		СписокТиповКомнат = Новый СписокЗначений;
		СписокТиповКомнат.Добавить(Перечисления.КВП_ТипыПомещений.Комната);
		СписокТиповКомнат.Добавить(Перечисления.КВП_ТипыПомещений.Кабинет);
		
		Количество = 
			КВП_ПолучитьСписокКомнатПоЛицевомуСчету(ПараметрЛицевойСчет, ПараметрПериод, СписокТиповКомнат).Количество();
		
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Функция получения количества комнат всего.
Функция _ПолучитьКоличествоВсегоКомнат(ДопПараметры) Экспорт
	
	Количество = 0;
	ПараметрЛицевойСчет = Неопределено;
	ПараметрПериод      = Неопределено;
	ПараметрПомещение   = Неопределено;
	
	Если ДопПараметры.Свойство("ЛицевойСчет", ПараметрЛицевойСчет) 
	   И ДопПараметры.Свойство("Период", ПараметрПериод) Тогда
		
		Количество = КВП_ПолучитьСписокКомнатПоЛицевомуСчету(ПараметрЛицевойСчет, ПараметрПериод).Количество();
		
	КонецЕсли;
	
	Если Количество = 0 И ДопПараметры.Свойство("Помещение", ПараметрПомещение) Тогда
		
		Количество = ПараметрПомещение.КоличествоКомнат;
		
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Функция получения отношения количества проживающих к площади.
Функция _ПолучитьКоличествоПроживающихКПлощади(ДопПараметры) Экспорт
	
	Отношение = 0;
	Площадь   = 0;
	
	Если ДопПараметры.Свойство("Площадь", Площадь) Тогда
		КоличествоПроживающих = _ПолучитьКоличествоПроживающих(ДопПараметры);
		Если Не Площадь = 0 Тогда
			Отношение = Окр(КоличествоПроживающих / Площадь, 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отношение;
	
КонецФункции // _ПолучитьКоличествоПроживающихКПлощади()

// Функция получения отношения количества проживающих к площади.
Функция _ПолучитьКоличествоЗарегистрированныхКПлощади(ДопПараметры) Экспорт
	
	Отношение = 0;
	Площадь   = 0;
	
	Если ДопПараметры.Свойство("Площадь", Площадь) Тогда
		КоличествоЗарегистрированных = _ПолучитьКоличествоЗарегистрированных(ДопПараметры);
		Если Не Площадь = 0 Тогда
			Отношение = Окр(КоличествоЗарегистрированных / Площадь, 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отношение;
	
КонецФункции // _ПолучитьКоличествоЗарегистрированныхКПлощади()

// Функция получения отношения количества проживающих к площади.
Функция _ПолучитьПлощадьККоличествуПроживающих(ДопПараметры) Экспорт
	
	Отношение = 0;
	Площадь   = 0;
	
	Если ДопПараметры.Свойство("Площадь", Площадь) Тогда
		КоличествоПроживающих = _ПолучитьКоличествоПроживающих(ДопПараметры);
		Если Не КоличествоПроживающих = 0 Тогда
			Отношение = Окр(Площадь / КоличествоПроживающих, 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отношение;
	
КонецФункции // _ПолучитьПлощадьККоличествуПроживающих()

// Функция получения отношения количества проживающих к площади.
Функция _ПолучитьПлощадьККоличествуЗарегистрированных(ДопПараметры) Экспорт
	
	Отношение = 0;
	Площадь   = 0;
	
	Если ДопПараметры.Свойство("Площадь", Площадь) Тогда
		КоличествоЗарегистрированных = _ПолучитьКоличествоЗарегистрированных(ДопПараметры);
		Если Не КоличествоЗарегистрированных = 0 Тогда
			Отношение = Окр(Площадь / КоличествоЗарегистрированных, 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отношение;
	
КонецФункции // _ПолучитьПлощадьККоличествуЗарегистрированных()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция возвращает таблицу характеристик по макету.
//
Функция ПолучитьТаблицуХарактеристикИзМакета(НормаНаЛицевойСчет, СоставнойТипУслуги = Ложь, КэшМакетаХарактеристикНормПотребления = Неопределено) Экспорт
	
	ТаблицаХарактеристикИзМакета = Новый ТаблицаЗначений;
	ТаблицаХарактеристикИзМакета.Колонки.Добавить("Характеристика");
	ТаблицаХарактеристикИзМакета.Колонки.Добавить("Вид");
	ТаблицаХарактеристикИзМакета.Колонки.Добавить("Тип");
	ТаблицаХарактеристикИзМакета.Колонки.Добавить("ПроцедураПолученияПараметра");
	
	Если НЕ ТипЗнч(КэшМакетаХарактеристикНормПотребления) = Тип("ТабличныйДокумент") Тогда
		КэшМакетаХарактеристикНормПотребления = ПолучитьМакет("Характеристики");
	КонецЕсли;
	
	Макет = КэшМакетаХарактеристикНормПотребления;
	
	Если НормаНаЛицевойСчет Тогда
		ОбластьХарактеристик = Макет.ПолучитьОбласть("ОписаниеХарактеристикЛС");
	Иначе
		ОбластьХарактеристик = Макет.ПолучитьОбласть("ОписаниеХарактеристикЗдание");
	КонецЕсли;
	
	Для НомерСтроки = 1 По ОбластьХарактеристик.ВысотаТаблицы Цикл
		ТекстХарактеристики = ОбластьХарактеристик.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		ТекстВида           = ОбластьХарактеристик.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		ТекстТипа           = ОбластьХарактеристик.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		ТекстПроцедура      = ОбластьХарактеристик.Область(НомерСтроки, 4, НомерСтроки, 4).Текст;
		
		Если Не ПустаяСтрока(ТекстХарактеристики)
		   И НЕ (НЕ СоставнойТипУслуги И ТекстВида = "Владельцев единственного жилья") Тогда
			Если Не ПустаяСтрока(ТекстВида) Тогда
				
				НоваяСтрока                             = ТаблицаХарактеристикИзМакета.Добавить();
				НоваяСтрока.Характеристика              = ТекстХарактеристики;
				НоваяСтрока.Вид                         = ТекстВида;
				НоваяСтрока.Тип                         = ТекстТипа;
				НоваяСтрока.ПроцедураПолученияПараметра = ТекстПроцедура;
				
			Иначе
				
				МассивВидовПлащадейЗдания = Новый Массив;
				МассивВидовПлащадейЗдания.Добавить("Общая площадь всех помещений");
				МассивВидовПлащадейЗдания.Добавить("Общая площадь всех жилых и нежилых помещений");
				МассивВидовПлащадейЗдания.Добавить("Общая площадь всех помещений, входящих в состав общего имущества");
				МассивВидовПлащадейЗдания.Добавить("Общая площадь жилых помещений");
				
				Для Каждого Элемент Из МассивВидовПлащадейЗдания Цикл
					НоваяСтрока                             = ТаблицаХарактеристикИзМакета.Добавить();
					НоваяСтрока.Характеристика              = ТекстХарактеристики;
					НоваяСтрока.Вид                         = Элемент;
					НоваяСтрока.Тип                         = ТекстТипа;
					НоваяСтрока.ПроцедураПолученияПараметра = ТекстПроцедура;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаХарактеристикИзМакета;
	
КонецФункции

// Функция возвращает список норм потребления, которые зависят от количества близких родственников.
Функция ПолучитьСписокНормЗависящихОтКоличестваБлизкихРодственников(УслугаВладелец = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УслугаВладелец", УслугаВладелец);
	Запрос.УстановитьПараметр("УслугаНеЗадана", УслугаВладелец = Неопределено);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугХарактеристики.Ссылка
	|ПОМЕСТИТЬ врНормы
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг.Характеристики КАК КВП_НормыПотребленияУслугХарактеристики
	|ГДЕ
	|	КВП_НормыПотребленияУслугХарактеристики.Вид = ""Близких родственников""
	|	И (КВП_НормыПотребленияУслугХарактеристики.Ссылка.Владелец = &УслугаВладелец
	|			ИЛИ &УслугаНеЗадана)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.Ссылка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	КВП_НормыПотребленияУслуг.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
	|	И КВП_НормыПотребленияУслуг.ВидЖильцов = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.БлизкиеРодственники)
	|	И (КВП_НормыПотребленияУслуг.Владелец = &УслугаВладелец
	|			ИЛИ &УслугаНеЗадана)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНормы.Ссылка
	|ИЗ
	|	врНормы КАК врНормы
	|
	|СГРУППИРОВАТЬ ПО
	|	врНормы.Ссылка";
	
	СписокНорм = Новый СписокЗначений;
	
	СписокНорм.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокНорм;
	
КонецФункции

//Функция добавляет навигационные ссылки на заданные формулой нормы потребления в HTML документ и помещает текст во временное хранилище.
//
Функция ПолучитьПараметрыОповещенияОПроверкеФормул() Экспорт
	
	ЕстьНормыСФормулами = Ложь;
	
	ТекстМакета = Справочники.КВП_НормыПотребленияУслуг.ПолучитьМакет("ОповещениеОПроверкеФормулВНормахПотребления").ПолучитьТекст();
	
	ТекстСпискаНормВHTML = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	КВП_НормыПотребленияУслуг.ВариантНастройки = &ВариантНастройки";
	
	Запрос.УстановитьПараметр("ВариантНастройки", Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула);
	
	НормыПотребленияКОбработке = Запрос.Выполнить().Выбрать();
	Пока НормыПотребленияКОбработке.Следующий() Цикл
		
		ТекстСпискаНормВHTML = ТекстСпискаНормВHTML + "<LI><A href=""" + ПолучитьНавигационнуюСсылку(НормыПотребленияКОбработке.Ссылка) + """>" + НормыПотребленияКОбработке.Ссылка + "</A></LI>";
		
		ЕстьНормыСФормулами = Истина;
		
	КонецЦикла;
	
	ТекстМакета = СтрЗаменить(ТекстМакета, "%Норма%", ТекстСпискаНормВHTML);
	
	ТекстМакета = СтрЗаменить(ТекстМакета, "%КонтактыДляОбратнойСвязиHTML%", УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиHTML());
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Тема",        "Оповещение о проверке формул в нормах потребления");
	СтруктураРезультата.Вставить("ТекстМакета", ТекстМакета);
	СтруктураРезультата.Вставить("Заголовок",  "Важная информация");
	СтруктураРезультата.Вставить("Показывать",  ЕстьНормыСФормулами);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#КонецЕсли