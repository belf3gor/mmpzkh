#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает дату платежа по правилу в заданном периоде
Функция ДатаПлатежаВПериоде(Правило, ПериодСобытия) Экспорт
	
	НачалоБазовогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, Правило.НачалоВыполнения);
	НачалоТекущегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Правило.Периодичность, ПериодСобытия);
	
	// рассчитываем разницу в месяцах между периодом начала события и текущим периодом
	РазницаМесяцев = МесяцОтНачалаНашейЭры(НачалоТекущегоПериода) - МесяцОтНачалаНашейЭры(НачалоБазовогоПериода);
	
	Возврат ДобавитьМесяц(Правило.НачалоВыполнения, РазницаМесяцев);
	
КонецФункции

// возвращает дату первого актуального платежа по правилу
Функция ДатаБлижайшегоПлатежа(Правило, ПериодСобытия) Экспорт

	ТекущаяДата = ТекущаяДатаСеанса();
	
	ШаблонПравила = РегистрыСведений.РегулярныеПлатежи.ШаблонПравила(
		Правило.Организация, 
		Правило);
	
	Если ШаблонПравила = Неопределено Тогда
		
		ДатаСледующегоПериода = Макс(
			ТекущаяДата,
			Правило.НачалоВыполнения);
		
	Иначе
		
		ДатаСледующегоПериода = Макс(
			ТекущаяДата,
			ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ШаблонПравила.ПериодСобытия, Правило.Периодичность),
			ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ПериодСобытия, Правило.Периодичность),
			Правило.НачалоВыполнения);
		
	КонецЕсли;
		
	ДатаСледующегоПериода = ДатаПлатежаВПериоде(Правило, ДатаСледующегоПериода);
	
	Пока ДатаСледующегоПериода < ТекущаяДата Цикл
	
		ДатаСледующегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(ДатаСледующегоПериода, Правило.Периодичность)
	
	КонецЦикла;
	
	Возврат ДатаСледующегоПериода;

КонецФункции
 

// Формирует список действующих правил по организации в периоде
Функция ПравилаОрганизации(Организация, НачалоОбзора, КонецОбзора) Экспорт
	
	Запрос = Новый Запрос;
	ТаблицаПравил = НовыйТаблицаПравил();
	Условия = Новый Массив;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	// получаем исходный запрос
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПравилаРегулярныхПлатежей.Ссылка КАК Правило,
	|	ПравилаРегулярныхПлатежей.Периодичность КАК Периодичность,
	|	ПравилаРегулярныхПлатежей.НачалоВыполнения КАК НачалоВыполнения,
	|	ПравилаРегулярныхПлатежей.Организация КАК Организация
	|ПОМЕСТИТЬ ПравилаПоОрганизации
	|ИЗ
	|	Справочник.ПравилаРегулярныхПлатежей КАК ПравилаРегулярныхПлатежей
	|ГДЕ
	|	&ДополнительноеУсловие
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаРегулярныхПлатежей.Ссылка,
	|	ПравилаРегулярныхПлатежей.Периодичность,
	|	ПравилаРегулярныхПлатежей.НачалоВыполнения,
	|	ПравилаРегулярныхПлатежей.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПоОрганизации.Организация КАК Организация,
	|	ПравилаПоОрганизации.Правило КАК Правило,
	|	ПравилаПоОрганизации.Периодичность,
	|	ПравилаПоОрганизации.НачалоВыполнения,
	|	МАКСИМУМ(РегулярныеПлатежи.ПериодСобытия) КАК ПериодСобытия
	|ПОМЕСТИТЬ ТаблицаПравилПоДатамПлатежа
	|ИЗ
	|	ПравилаПоОрганизации КАК ПравилаПоОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО ПравилаПоОрганизации.Организация = РегулярныеПлатежи.Организация
	|			И ПравилаПоОрганизации.Правило = РегулярныеПлатежи.Правило
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаПоОрганизации.НачалоВыполнения,
	|	ПравилаПоОрганизации.Периодичность,
	|	ПравилаПоОрганизации.Правило,
	|	ПравилаПоОрганизации.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПравилПоДатамПлатежа.Организация,
	|	ТаблицаПравилПоДатамПлатежа.Правило,
	|	ТаблицаПравилПоДатамПлатежа.Периодичность,
	|	ТаблицаПравилПоДатамПлатежа.НачалоВыполнения,
	|	МАКСИМУМ(РегулярныеПлатежи.ПлатежноеПоручение) КАК АктивныйШаблон
	|ИЗ
	|	ТаблицаПравилПоДатамПлатежа КАК ТаблицаПравилПоДатамПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегулярныеПлатежи КАК РегулярныеПлатежи
	|		ПО ТаблицаПравилПоДатамПлатежа.Правило = РегулярныеПлатежи.Правило
	|			И ТаблицаПравилПоДатамПлатежа.ПериодСобытия = РегулярныеПлатежи.ПериодСобытия
	|			И ТаблицаПравилПоДатамПлатежа.Организация = РегулярныеПлатежи.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПравилПоДатамПлатежа.НачалоВыполнения,
	|	ТаблицаПравилПоДатамПлатежа.Правило,
	|	ТаблицаПравилПоДатамПлатежа.Периодичность,
	|	ТаблицаПравилПоДатамПлатежа.Организация";
	
	Условия.Добавить("ПравилаРегулярныхПлатежей.Организация = &Организация");
	Условия.Добавить("ПравилаРегулярныхПлатежей.Выполняется");
	
	Если НЕ ЗначениеЗаполнено(НачалоОбзора) Тогда
		
		// Если не заполнена дата начала обзора, то получаем только правила, действующие на дату окончания обзора
		// В противном случае получаем все действующие правила
		Запрос.УстановитьПараметр("КонецОбзора", КонецОбзора);
		Условия.Добавить("ПравилаРегулярныхПлатежей.НачалоВыполнения < &КонецОбзора");
		
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса , "&ДополнительноеУсловие", СтрСоединить(Условия, " И "));
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТаблицаЗапроса, ТаблицаПравил);
	
	Возврат ТаблицаПравил;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция НовыйТаблицаПравил()

	ТаблицаПравил = Новый ТаблицаЗначений;
	
	ТаблицаПравил.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПравил.Колонки.Добавить("Правило",          Новый ОписаниеТипов("СправочникСсылка.ПравилаРегулярныхПлатежей"));
	ТаблицаПравил.Колонки.Добавить("Периодичность",    Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПравил.Колонки.Добавить("НачалоВыполнения", Новый ОписаниеТипов("Дата"));
	ТаблицаПравил.Колонки.Добавить("АктивныйШаблон",   Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение"));
	
	Возврат ТаблицаПравил;
	
КонецФункции

Функция МесяцОтНачалаНашейЭры(Дата)
	
	Возврат Месяц(Дата)+Год(Дата)*12;
	
КонецФункции 

#КонецОбласти 

#КонецЕсли