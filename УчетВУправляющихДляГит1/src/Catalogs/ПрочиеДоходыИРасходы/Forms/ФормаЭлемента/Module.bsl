////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ВидПрочихДоходовИРасходов");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ПринятиеКналоговомуУчету.Доступность = Форма.Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат =
		ПредопределенноеЗначение("Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения");
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ВидДеятельностиДляНалоговогоУчетаЗатратПриИзменении(Элемент)
	
	// По видам деятельности с особым порядком налогообложения и разным видам деятельности
	// расход всегда должен учитываться для целей налогообложения прибыли.
	
	Если Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат <> ПредопределенноеЗначение("Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения") Тогда
		Объект.ПринятиеКналоговомуУчету = Истина;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
	ТаблицаПредопределнных = Справочники.ПрочиеДоходыИРасходы.ПолучитьТаблицуПредопределенныхЗначений();
		
	ТекущееНазначение = ТаблицаПредопределнных.Найти(Объект.ИмяПредопределенныхДанных, "Имя");
	Если НЕ ТекущееНазначение = НЕОПРЕДЕЛЕНО Тогда
		ЭтаФорма.ИспользованиеПоУмолчанию = ТекущееНазначение.Текст;
		ЭтаФорма.Элементы.ИспользованиеПоУмолчанию.Доступность = ТекущееНазначение.Доступность;
	КонецЕсли;
	                                                             
	Элементы.ИспользованиеПоУмолчанию.СписокВыбора.Очистить();
	Для Каждого ПредопределенныйЭлемент Из ТаблицаПредопределнных Цикл
		Если ПредопределенныйЭлемент.Доступность Тогда
			Элементы.ИспользованиеПоУмолчанию.СписокВыбора.Добавить(ПредопределенныйЭлемент.Текст);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеФормой(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ИспользованиеПоУмолчанию) ИЛИ Объект.Предопределенный Тогда
		ОбработатьИмяПредопределенныхДанных(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИмяПредопределенныхДанных(Отказ)
	
	ТаблицаПредопределнных = Справочники.ПрочиеДоходыИРасходы.ПолучитьТаблицуПредопределенныхЗначений();
	
	Если НЕ ЗначениеЗаполнено(ИспользованиеПоУмолчанию) Тогда
		Объект.ИмяПредопределенныхДанных = "";
		Возврат;
	КонецЕсли;
	
	ТекущееНазначение = ТаблицаПредопределнных.Найти(ЭтаФорма.ИспользованиеПоУмолчанию, "Текст");
	Если НЕ ТекущееНазначение = НЕОПРЕДЕЛЕНО Тогда
		НовыйПредопределенный = ТекущееНазначение.Имя;
		СтарыйПредопределенный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы." + НовыйПредопределенный);
				
		Если ЗначениеЗаполнено(СтарыйПредопределенный) И СтарыйПредопределенный <> Объект.Ссылка Тогда
			СтарыйОбъект = СтарыйПредопределенный.ПолучитьОбъект();
			Попытка
				СтарыйОбъект.Заблокировать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось заблокировать объект'") + " '" + СтарыйОбъект + "'!
				|"+ ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтарыйПредопределенный, , , Отказ);
				Возврат;
			КонецПопытки;
			СтарыйОбъект.ИмяПредопределенныхДанных = "";
			СтарыйОбъект.Записать();                                 			
		КонецЕсли;
		Объект.ИмяПредопределенныхДанных = НовыйПредопределенный;
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
