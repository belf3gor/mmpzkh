#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ОсновнаяСтатьяПрочихРасходов() Экспорт
	Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ПрочиеВнереализационныеДоходыРасходы");
КонецФункции

Функция ПолучитьТаблицуПредопределенныхЗначений() Экспорт
	
	ТаблицаИмен = Новый ТаблицаЗначений();
	ТаблицаИмен.Колонки.Добавить("Имя", 			Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("Представление", 	Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("Текст",	 		Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("Доступность", 	Новый ОписаниеТипов("Булево"));
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РасходыНаУслугиБанков";
	Строка.Представление 	= "Расходы на услуги банков";
	Строка.Текст	 		= "Документ «Списание с расчетного счета», используется при загрузке из клиент-банка";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РазницыЗалоговойИФактическойСтоимостиТары";
	Строка.Представление 	= "Разницы залоговой и фактической стоимости тары";
	Строка.Текст	 		= "Разницы залоговой и фактической стоимости тары";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ИсправительныеЗаписиПоОперациямПрошлыхЛет";
	Строка.Представление 	= "Исправительные записи по операциям прошлых лет";
	Строка.Текст	 		= "Документы «Корректировка поступления» и «Корректировка реализации»";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ОприходованиеИзлишков";
	Строка.Представление 	= "Оприходование излишков";
	Строка.Текст	 		= "Документ «Оприходование товаров»";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РеализацияОсновныхСредств";
	Строка.Представление 	= "Реализация основных средств";
	Строка.Текст	 		= "Документ «Передача ОС» (доходы и расходы от реализации)";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РеализацияПрочегоИмущества";
	Строка.Представление 	= "Реализация прочего имущества (материалов)";
	Строка.Текст	 		= "Документ «Реализация (акт, накладная)», если счет доходов от реализации 91";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ВосстановлениеАмортизационнойПремии";
	Строка.Представление 	= "Восстановление амортизационной премии";
	Строка.Текст	 		= "Документ «Передача ОС» (амортизационная премия)";
	Строка.Доступность 		= Истина;
	
	Строка = ТаблицаИмен.Добавить();
	Строка.Имя              = "ВозвратТоваровПрошлыхЛет";
	Строка.Представление    = НСтр(
		"ru = 'Возврат товаров, реализованных в предыдущем налоговом периоде'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Строка.Текст            = НСтр("ru = 'Документ «Возврат товаров от покупателя»'");
	Строка.Доступность      = Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РасходыПоБезвозмезднойПередаче";
	Строка.Представление 	= "Безвозмездная передача ценности";
	Строка.Текст	 		= "Документ «Безвозмездная передача»";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "СписаниеНДСНаПрочиеРасходы";
	Строка.Представление 	= "Списание НДС при переходе на УСН";
	Строка.Текст	 		= "Документ «Восстановление НДС» при переходе на УСН";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "УступкаПраваТребованияПоДоговоруФакторинга";
	Строка.Представление 	= "Уступка права требования по договору факторинга";
	Строка.Текст	 		= "Документ «Передача задолженности на факторинг»";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РасходыНаУслугиФакторинговыхКомпаний";
	Строка.Представление 	= "Расходы на услуги факторинговых компаний";
	Строка.Текст	 		= "Документ «Поступление: услуги факторинга»";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ШтрафыПениНеустойки";
	Строка.Представление 	= "Штрафы, пени и неустойки к получению";
	Строка.Текст	 		= "Документ «Начисление пени»";
	Строка.Доступность 		= Истина;
	
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "СписаниеВыделенногоНДСНаПрочиеРасходы";
	Строка.Представление 	= "Списание выделенного НДС на прочие расходы";
	Строка.Текст	 		= "Списание НДС, не подтвержденного счетом-фактурой поставщика";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров";
	Строка.Представление 	= "Разницы стоимости возврата и фактической стоимости товаров";
	Строка.Текст	 		= "Разницы стоимости возврата и фактической стоимости товаров";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РасходыПоУплатеСтраховыхВзносов";
	Строка.Представление 	= "Расходы по уплате страховых взносов";
	Строка.Текст	 		= "Расходы по уплате страховых взносов от начислений из прибыли";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РасходыПоУплатеСтраховыхВзносовИП";
	Строка.Представление 	= "Расходы по уплате страховых взносов ИП (за себя)";
	Строка.Текст	 		= "Расходы по уплате страховых взносов от начислений из прибыли ИП (за себя)";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ДоходыПоАвансамПрошлогоНалоговогоПериодаИП";
	Строка.Представление 	= "Доходы по авансам прошлого года (ИП)";
	Строка.Текст	 		= "Доходы ИП по авансам прошлого года";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "РезервыПоСомнительнымДолгам";
	Строка.Представление 	= "Резервы по сомнительным долгам";
	Строка.Текст	 		= "Отчисления в оценочные резервы по сомнительным долгам";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "КурсовыеРазницы";
	Строка.Представление 	= "Курсовые разницы";
	Строка.Текст	 		= "Курсовые разницы";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "КурсовыеРазницыПоРасчетамВУЕ";
	Строка.Представление 	= "Курсовые разницы по расчетам в у.е.";
	Строка.Текст	 		= "Курсовые разницы по расчетам в у.е.";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "СуммовыеРазницы";
	Строка.Представление 	= "Суммовые разницы (налоговый учет)";
	Строка.Текст	 		= "Суммовые разницы (налоговый учет)";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ОтклонениеКурсаПродажиПокупкиВалюты";
	Строка.Представление 	= "Отклонения курса продажи (покупки) валюты";
	Строка.Текст	 		= "Отклонения курса продажи (покупки) валюты от официального курса";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ДоходыРасходыПриПродажеПокупкеВалюты";
	Строка.Представление 	= "Продажа (покупка) иностранной валюты";
	Строка.Текст	 		= "Доходы и расходы при продаже (покупке) иностранной валюты";
	Строка.Доступность 		= Ложь;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "КомпенсацияЗаЗадержкуЗарплаты";
	Строка.Представление 	= "Компенсация за задержку зарплаты";
	Строка.Текст	 		= "Компенсация за задержку зарплаты";
	Строка.Доступность 		= Истина;
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ПроцентыПоЗаймамСотрудникам";
	Строка.Представление 	= "Проценты по займам сотрудникам";
	Строка.Текст	 		= "Проценты по займам сотрудникам";
	Строка.Доступность 		= Истина;
	
	РасходыОбслуживающихПроизводств.ДополнитьПредопределенныеЭлементыПрочиеДоходыИРасходы(ТаблицаИмен);
	
	Строка 					= ТаблицаИмен.Добавить();
	Строка.Имя 				= "ПрочиеВнереализационныеДоходыРасходы";
	Строка.Представление 	= "Прочие внереализационные доходы и расходы";
	Строка.Текст	 		= "Основная статья прочих доходов и расходов";
	Строка.Доступность 		= Истина;
	
	Возврат ТаблицаИмен;
	
КонецФункции	

Функция СтатьяВозвратТоваровПрошлыхЛет() Экспорт
	
	ИмяСтатьи = "ВозвратТоваровПрошлыхЛет";
	
	СтатьяДоходовРасходов = ПредопределенныйЭлемент(ИмяСтатьи);
	
	Если ЗначениеЗаполнено(СтатьяДоходовРасходов) Тогда
		Возврат СтатьяДоходовРасходов;
	КонецЕсли;
	
	Возврат СоздатьПредопределенныйЭлемент(ИмяСтатьи);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Процедура СоздатьУстановитьПредопределенныеЭлементыДляУчетаЗарплаты()Экспорт
	
	Если УчетЗарплаты.ВключенаПодсистемаУчетаЗарплатыИКадров() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносов") = Неопределено Тогда
			СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
			СтатьяДоходовРасходов.Наименование = "Расходы по уплате страховых взносов";
			СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
			СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
			СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "РасходыПоУплатеСтраховыхВзносов";
			СтатьяДоходовРасходов.Записать();
		КонецЕсли; 
		
		Если ПредопределенныйЭлемент("ПрочиеВнереализационныеДоходыРасходы") = Неопределено Тогда
			СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
			СтатьяДоходовРасходов.Наименование = "Прочие внереализационные доходы (расходы)";
			СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
			СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
			СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "ПрочиеВнереализационныеДоходыРасходы";
			СтатьяДоходовРасходов.Записать();
		КонецЕсли;
		
		Если ПредопределенныйЭлемент("КомпенсацияЗаЗадержкуЗарплаты") = Неопределено Тогда
			СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
			СтатьяДоходовРасходов.Наименование = "Компенсация за задержку зарплаты";
			СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
			СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Ложь;
			СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "КомпенсацияЗаЗадержкуЗарплаты";
			СтатьяДоходовРасходов.Записать();
		КонецЕсли;
		
		Если ПредопределенныйЭлемент("ПроцентыПоЗаймамСотрудникам") = Неопределено Тогда
			СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
			СтатьяДоходовРасходов.Наименование = "Проценты по займам сотрудникам";
			СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате;
			СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
			СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "ПроцентыПоЗаймамСотрудникам";
			СтатьяДоходовРасходов.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

// Функция получения предопределнного элемента по имени
// Используется для исключения влияния повторного использования в стандартном механизме
Функция ПредопределенныйЭлемент(ИмяПредопределенногоЭлемента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрочиеДоходыИРасходы.Ссылка
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенногоЭлемента);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Результат.Выгрузить()[0].Ссылка;
		
	КонецЕсли;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат "ЗаполнениеПоставляемымиДанными";
	
КонецФункции

Процедура СоздатьУстановитьПредопределенныеЭлементыВалютныйУчет()  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если ПредопределенныйЭлемент("КурсовыеРазницы") = Неопределено Тогда
		
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Курсовые разницы";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету    = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "КурсовыеРазницы";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли; 
	
	Если ПредопределенныйЭлемент("СуммовыеРазницы") = Неопределено Тогда
		
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Суммовые разницы (налоговый учет) (по сделкам до 2015 г)";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету    = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "СуммовыеРазницы";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли; 
	
	Если ПредопределенныйЭлемент("ДоходыРасходыПриПродажеПокупкеВалюты") = Неопределено Тогда
		
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Продажа (покупка) иностранной валюты";
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Ложь;
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "ДоходыРасходыПриПродажеПокупкеВалюты";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли; 
	
	Если ПредопределенныйЭлемент("ОтклонениеКурсаПродажиПокупкиВалюты") = Неопределено Тогда
		
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Отклонения курса продажи (покупки) иностранной валюты от официального курса";
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "ОтклонениеКурсаПродажиПокупкиВалюты";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли; 
	
	Если ПредопределенныйЭлемент("КурсовыеРазницыПоРасчетамВУЕ") = Неопределено Тогда
		
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Курсовые разницы по расчетам в у.е. (по сделкам до 2015 г)";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "КурсовыеРазницыПоРасчетамВУЕ";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыФакторинга(ВыполняетсяОбработчикОбновления = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.ИспользоватьФакторинг.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("УступкаПраваТребованияПоДоговоруФакторинга") = Неопределено Тогда
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Уступка права требования по договору факторинга";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету  = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "УступкаПраваТребованияПоДоговоруФакторинга";
		// Запись может выполнятся либо в обработчике обновления при включении факторинга,
		// либо при интерактивном включении факторинга в функциональности.
		// Если элемент создается обработчиком обновления, то бизнес-логика должна быть отключена.
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтатьяДоходовРасходов, Истина, НЕ ВыполняетсяОбработчикОбновления);
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("РасходыНаУслугиФакторинговыхКомпаний") = Неопределено Тогда
	
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Расходы на услуги факторинговых компаний";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету  = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "РасходыНаУслугиФакторинговыхКомпаний";
		// Запись может выполнятся либо в обработчике обновления при включении факторинга,
		// либо при интерактивном включении факторинга в функциональности.
		// Если элемент создается обработчиком обновления, то бизнес-логика должна быть отключена.
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтатьяДоходовРасходов, Истина, НЕ ВыполняетсяОбработчикОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыВозвратнаяТара() Экспорт 
	
	Если ПредопределенныйЭлемент("РазницыЗалоговойИФактическойСтоимостиТары") = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Разницы залоговой и фактической стоимости тары";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "РазницыЗалоговойИФактическойСтоимостиТары";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыУСН() Экспорт
	
	Если ПредопределенныйЭлемент("СписаниеНДСНаПрочиеРасходы") = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);

		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Списание НДС на прочие расходы";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ПринятиеКналоговомуУчету = Истина;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "СписаниеНДСНаПрочиеРасходы";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементРасходыНаУслугиБанков()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
	СтатьяДоходовРасходов.Наименование = НСтр("ru = 'Расходы на услуги банков'");
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	СтатьяДоходовРасходов.ПринятиеКналоговомуУчету  = Истина;
	СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "РасходыНаУслугиБанков";
	СтатьяДоходовРасходов.Записать();
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныйЭлементШтрафыПениНеустойки()

	УстановитьПривилегированныйРежим(Истина);
	
	СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
	СтатьяДоходовРасходов.Наименование = НСтр("ru = 'Штрафы, пени и неустойки к получению (уплате)'");
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	СтатьяДоходовРасходов.ПринятиеКналоговомуУчету  = Истина;
	СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "ШтрафыПениНеустойки";
	СтатьяДоходовРасходов.Записать();

КонецПроцедуры

Процедура ОбработкаСправочникаДляУправленияПредопределеннымиЗначениями() Экспорт
	
	Если ПредопределенныйЭлемент("РасходыНаУслугиБанков") = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ПрочиеДоходыИРасходы.Ссылка
		|ИЗ
		|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
		|ГДЕ
		|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков)
		|	И ПрочиеДоходыИРасходы.ПометкаУдаления = ЛОЖЬ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "РасходыНаУслугиБанков";
			ЭлементСправочника.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("ВосстановлениеАмортизационнойПремии") = Неопределено Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ВидДохода", Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
		|ГДЕ
		|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = &ВидДохода
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПрочиеДоходыИРасходы.Код";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "ВосстановлениеАмортизационнойПремии";
			ЭлементСправочника.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("ДоходыПоАвансамПрошлогоНалоговогоПериодаИП") = Неопределено Тогда
		
		СтатьяУчетаПрочихДоходов = Неопределено;
		НаименованиеСтатьиУчетаПрочихДоходов	= НСтр("ru = 'Доходы по авансам полученным от покупателей в прошлом налоговом периоде (по умолчанию)'");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НаименованиеСтатьиУчетаПрочихДоходов", НаименованиеСтатьиУчетаПрочихДоходов);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникОрганизации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ВТ_Предприниматели
		|ИЗ
		|	Справочник.Организации КАК СправочникОрганизации
		|ГДЕ
		|	НЕ СправочникОрганизации.ПометкаУдаления
		|	И СправочникОрганизации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрочиеДоходыИРасходы.Ссылка КАК СтатьяУчетаПрочихДоходов,
		|	"""" КАК Код
		|ИЗ
		|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
		|ГДЕ
		|	НЕ ПрочиеДоходыИРасходы.ПометкаУдаления
		|	И НЕ ПрочиеДоходыИРасходы.ЭтоГруппа
		|	И ПрочиеДоходыИРасходы.Наименование = &НаименованиеСтатьиУчетаПрочихДоходов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.УдалитьСтатьяУчетаПрочихДоходовПоАвансамИП,
		|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.УдалитьСтатьяУчетаПрочихДоходовПоАвансамИП.Код
		|ИЗ
		|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций.СрезПоследних(
		|			,
		|			Организация В
		|					(ВЫБРАТЬ
		|						ВТ_Предприниматели.Организация
		|					ИЗ
		|						ВТ_Предприниматели КАК ВТ_Предприниматели)
		|				И НЕ СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)) КАК УдалитьУчетнаяПолитикаОрганизацийСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.СтатьяУчетаПрочихДоходов) Тогда
					Продолжить;
				КонецЕсли;
				СтатьяУчетаПрочихДоходов	= Выборка.СтатьяУчетаПрочихДоходов;
				Прервать;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтатьяУчетаПрочихДоходов) Тогда
			ЭлементСправочника	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
			ЭлементСправочника.Наименование				= НаименованиеСтатьиУчетаПрочихДоходов;
			ЭлементСправочника.ПринятиеКналоговомуУчету	= Истина;
			ЭлементСправочника.ВидПрочихДоходовИРасходов	= Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
			ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат	= Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			ЭлементСправочника.ИмяПредопределенныхДанных 	= "ДоходыПоАвансамПрошлогоНалоговогоПериодаИП";
		Иначе
			ЭлементСправочника	= СтатьяУчетаПрочихДоходов.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных 	= "ДоходыПоАвансамПрошлогоНалоговогоПериодаИП";
		КонецЕсли;
		
		Попытка
			ЭлементСправочника.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина = Неопределено Тогда
				ОписаниеОшибки = ИнформацияОбОшибке.Описание;
			Иначе
				ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
			КонецЕсли;
			
			ОписаниеОшибки = НСтр("ru = 'Ошибка при записи статьи прочих доходов и расходов:'") + Символы.ПС + ОписаниеОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецПопытки;
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("РезервыПоСомнительнымДолгам") = Неопределено Тогда
		
		СтатьяУчетаПрочихДоходов = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.УдалитьСтатьяУчетаПрочихДоходовИРасходовПоСомнительнымДолгам КАК Ссылка,
		|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.УдалитьСтатьяУчетаПрочихДоходовИРасходовПоСомнительнымДолгам.Код КАК Код
		|ИЗ
		|	РегистрСведений.УдалитьУчетнаяПолитикаОрганизаций.СрезПоследних(, ) КАК УдалитьУчетнаяПолитикаОрганизацийСрезПоследних
		|ГДЕ
		|	УдалитьУчетнаяПолитикаОрганизацийСрезПоследних.УдалитьСтатьяУчетаПрочихДоходовИРасходовПоСомнительнымДолгам <> ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СтатьяУчетаПрочихДоходов = Выборка.Ссылка;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтатьяУчетаПрочихДоходов) Тогда
			ЭлементСправочника = СтатьяУчетаПрочихДоходов.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "РезервыПоСомнительнымДолгам";
		Иначе
			ЭлементСправочника	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
			ЭлементСправочника.Наименование				= "Резервы по сомнительным долгам";
			ЭлементСправочника.ПринятиеКналоговомуУчету	= Истина;
			ЭлементСправочника.ВидПрочихДоходовИРасходов	= Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы;
			ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат	= Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
			ЭлементСправочника.ИмяПредопределенныхДанных 	= "РезервыПоСомнительнымДолгам"
		КонецЕсли;
		
		Попытка
			ЭлементСправочника.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина = Неопределено Тогда
				ОписаниеОшибки = ИнформацияОбОшибке.Описание;
			Иначе
				ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
			КонецЕсли;
			
			ОписаниеОшибки = НСтр("ru = 'Ошибка при записи статьи прочих доходов и расходов:'") + Символы.ПС + ОписаниеОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
		КонецПопытки;			
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("ОприходованиеИзлишков") = Неопределено Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	ОприходованиеТоваров.СтатьяПрочихДоходовРасходов КАК Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
		|ГДЕ
		|	НЕ ОприходованиеТоваров.СтатьяПрочихДоходовРасходов = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			СтатьяЗатрат = Выборка.Ссылка;
			ЭлементСправочника = СтатьяЗатрат.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "ОприходованиеИзлишков";
			ЭлементСправочника.Записать();
		КонецЕсли;
			
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("РеализацияОсновныхСредств") = Неопределено Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	ВЫБОР
		|		КОГДА ПередачаОСОС.Субконто ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(ПередачаОСОС.Субконто КАК Справочник.ПрочиеДоходыИРасходы)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
		|	КОНЕЦ КАК Ссылка
		|ИЗ
		|	Документ.ПередачаОС.ОС КАК ПередачаОСОС
		|ГДЕ
		|	ПередачаОСОС.Субконто ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|	И (НЕ ПередачаОСОС.Субконто = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка))
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			СтатьяЗатрат = Выборка.Ссылка;
			ЭлементСправочника = СтатьяЗатрат.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "РеализацияОсновныхСредств";
			ЭлементСправочника.Записать();
		КонецЕсли;
			
	КонецЕсли;	
	
	Если ПредопределенныйЭлемент("РеализацияПрочегоИмущества") = Неопределено Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Субконто ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|			ТОГДА ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Субконто КАК Справочник.ПрочиеДоходыИРасходы)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
		|	КОНЕЦ КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Субконто ССЫЛКА Справочник.ПрочиеДоходыИРасходы
		|	И (НЕ РеализацияТоваровУслугТовары.Субконто = ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка))
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
			СтатьяЗатрат = Выборка.Ссылка;
			ЭлементСправочника = СтатьяЗатрат.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "РеализацияПрочегоИмущества";
			ЭлементСправочника.Записать();
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура Заполнить_СписаниеНДСНаРасходыПереходНаУСН() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	СтатьяДоходовРасходов = ПредопределенныйЭлемент("СписаниеНДСНаПрочиеРасходы");
	
	Если ЗначениеЗаполнено(СтатьяДоходовРасходов) И (НЕ ЗначениеЗаполнено(СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов)) Тогда
		ЭлементСправочника = СтатьяДоходовРасходов.ПолучитьОбъект();
		ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
		ЭлементСправочника.ПринятиеКНалоговомуУчету = Истина;
		ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		ЭлементСправочника.Записать();
	ИначеЕсли НЕ ЗначениеЗаполнено(СтатьяДоходовРасходов) Тогда
		ЭлементСправочника	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		ЭлементСправочника.Наименование				= "Списание НДС на прочие расходы";
		ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
		ЭлементСправочника.ПринятиеКНалоговомуУчету = Истина;
		ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		ЭлементСправочника.ИмяПредопределенныхДанных 	= "СписаниеНДСНаПрочиеРасходы";
		ЭлементСправочника.Записать();
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьПредопределенныеЭлементыНоваяИБ() Экспорт

	Если ПредопределенныйЭлемент("РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров") = Неопределено Тогда
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Разницы стоимости возврата и фактической стоимости товаров";
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров";
		СтатьяДоходовРасходов.Записать();
	КонецЕсли; 
	
	Если ПредопределенныйЭлемент("РезервыПоСомнительнымДолгам") = Неопределено Тогда
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Резервы по сомнительным долгам";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "РезервыПоСомнительнымДолгам";
		СтатьяДоходовРасходов.Записать();
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносовИП") = Неопределено Тогда
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Расходы по уплате страховых взносов ИП (за себя)";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "РасходыПоУплатеСтраховыхВзносовИП";
		СтатьяДоходовРасходов.Записать();
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("СписаниеВыделенногоНДСНаПрочиеРасходы") = Неопределено Тогда
		ЭлементСправочника	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		ЭлементСправочника.Наименование				= "Списание выделенного НДС на прочие расходы";
		ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
		ЭлементСправочника.ПринятиеКНалоговомуУчету = Ложь;
		ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		ЭлементСправочника.ИмяПредопределенныхДанных 	= "СписаниеВыделенногоНДСНаПрочиеРасходы";
		ЭлементСправочника.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПредопределенныеЭлементыПереходСБП20() Экспорт

	Если ПредопределенныйЭлемент("РезервыПоСомнительнымДолгам") = Неопределено Тогда
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Резервы по сомнительным долгам";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "РезервыПоСомнительнымДолгам";
		СтатьяДоходовРасходов.Записать();
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("РасходыПоУплатеСтраховыхВзносовИП") = Неопределено Тогда
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Расходы по уплате страховых взносов ИП (за себя)";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных 	= "РасходыПоУплатеСтраховыхВзносовИП";
		СтатьяДоходовРасходов.Записать();
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("СписаниеВыделенногоНДСНаПрочиеРасходы") = Неопределено Тогда
		ЭлементСправочника	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		ЭлементСправочника.Наименование				= "Списание выделенного НДС на прочие расходы";
		ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
		ЭлементСправочника.ПринятиеКНалоговомуУчету = Ложь;
		ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		ЭлементСправочника.ИмяПредопределенныхДанных 	= "СписаниеВыделенногоНДСНаПрочиеРасходы";
		ЭлементСправочника.Записать();
	КонецЕсли;	

КонецПроцедуры

Процедура ОбновитьПредопределенныйЭлементРасходыНаУслугиБанков() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("РасходыНаУслугиБанков") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ПрочиеДоходыИРасходы.Ссылка
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков)
	|	И ПрочиеДоходыИРасходы.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СоздатьУстановитьПредопределенныеЭлементРасходыНаУслугиБанков();
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "РасходыНаУслугиБанков";
			ЭлементСправочника.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредопределенныйЭлементШтрафыПениНеустойки() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Если ПредопределенныйЭлемент("ШтрафыПениНеустойки") <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ПрочиеДоходыИРасходы.Ссылка
	|ИЗ
	|	Справочник.ПрочиеДоходыИРасходы КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате)
	|	И ПрочиеДоходыИРасходы.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		СоздатьУстановитьПредопределенныйЭлементШтрафыПениНеустойки();
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ЭлементСправочника = Выборка.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = "ШтрафыПениНеустойки";
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементСправочника, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныйЭлементБезвозмезднаяПередача()  Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПредопределенныйЭлемент("РасходыПоБезвозмезднойПередаче") = Неопределено Тогда
		
		СтатьяДоходовРасходов	= Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
		СтатьяДоходовРасходов.Наименование = "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд";
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов
			= Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд;
		СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Ложь;
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат
			 = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		СтатьяДоходовРасходов.ИмяПредопределенныхДанных = "РасходыПоБезвозмезднойПередаче";
		СтатьяДоходовРасходов.Записать();
		
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьПредопределенныйЭлементОбслуживающиеПроизводства() Экспорт
	
	СтатьяРасходыОбслуживающихПроизводствИХозяйств = ПредопределенныйЭлемент("РасходыОбслуживающихПроизводствИХозяйств");
	
	Если НЕ ЗначениеЗаполнено(СтатьяРасходыОбслуживающихПроизводствИХозяйств) Тогда
		СтатьяРасходыОбслуживающихПроизводствИХозяйств = Справочники.ПрочиеДоходыИРасходы.ПустаяСсылка();
		РасходыОбслуживающихПроизводств.СоздатьПредопределенныйЭлементОбслуживающиеПроизводства(СтатьяРасходыОбслуживающихПроизводствИХозяйств);
	КонецЕсли;
	Возврат СтатьяРасходыОбслуживающихПроизводствИХозяйств;
	
КонецФункции

Функция СоздатьПредопределенныйЭлемент(ИмяСтатьи)
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.ПрочиеДоходыИРасходы) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ОписанияВсехСтатей = ПолучитьТаблицуПредопределенныхЗначений();
	ОписаниеСтатьи = ОписанияВсехСтатей.Найти(ИмяСтатьи, "Имя");
	
	Если ОписаниеСтатьи = Неопределено Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ЭлементСправочника = СоздатьЭлемент();
	ЭлементСправочника.Заполнить(Неопределено);
	ЭлементСправочника.ИмяПредопределенныхДанных = ОписаниеСтатьи.Имя;
	ЭлементСправочника.Наименование              = ОписаниеСтатьи.Представление;
	ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет;
	ЭлементСправочника.ПринятиеКНалоговомуУчету  = Истина;
	
	ШаблонТекстаОшибкиЗаписи = НСтр(
		"ru = 'Не создана статья прочих доходов (расходов) ""%1""
         |Подробная информация записана в журнал регистрации'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
		
	Попытка
		ЭлементСправочника.Записать();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ПрочиеДоходыИРасходы,
			, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибкиЗаписи, ОписаниеСтатьи.Представление);
		
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат ЭлементСправочника.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
