
&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанные(Параметры);
	ИзменитьОформлениеФормы(ЭтотОбъект); // Клиент-серверная
	НачатьСравнениеТабДок();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого СтрокаТаблицы Из ТекущийОбъект.ЭлектронныеДокументы Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Файл) Тогда
			
			ОписаниеФайла = ТекущийОбъект.ДополнительныеСвойства.СоответствиеФайлов[СтрокаТаблицы.Файл];
			
			Если ЗначениеЗаполнено(ОписаниеФайла.Адрес) Тогда
				Если ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Файл) Тогда
					РаботаСФайлами.ОбновитьФайл(СтрокаТаблицы.Файл, ОписаниеФайла);
				Иначе
					
					РаботаСФайлами.ДобавитьФайл(
						ОписаниеФайла,
						ОписаниеФайла.Адрес,,,
						СтрокаТаблицы.Файл);
						
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		Ссылка = Справочники.ЗаявлениеОНазначенииПенсии.ПолучитьСсылку();
		ТекущийОбъект.УстановитьСсылкуНового(Ссылка);
	Иначе
		Ссылка = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	ТекущийОбъект.ЭлектронныеДокументы.Очистить();
	
	СоответствиеФайлов = Новый Соответствие;
	ДобавитьДокументыВСоответствие(ТекущийОбъект, Ссылка, СоответствиеФайлов, ФайлыВложения);
	ДобавитьДокументыВСоответствие(ТекущийОбъект, Ссылка, СоответствиеФайлов, ФайлыЗаявлениеОДоставке);
	ДобавитьДокументыВСоответствие(ТекущийОбъект, Ссылка, СоответствиеФайлов, ФайлыЗаявлениеОНазначении);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СоответствиеФайлов", СоответствиеФайлов);
	
	ТекущийОбъект.ПредыдущийТабДокЗаявлениеОНазначении = Новый ХранилищеЗначения(ПредыдущийТабДокЗаявлениеОНазначении);
	ТекущийОбъект.ПредыдущийТабДокЗаявлениеОДоставке   = Новый ХранилищеЗначения(ПредыдущийТабДокЗаявлениеОДоставке);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаявлениеОНазначенииПенсии", , Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_" + ИмяТипаСотрудник И НЕ ЗапретитьИзменение
		И (Параметр = Объект.Сотрудник ИЛИ Источник = Объект.Сотрудник) Тогда
		СотрудникПриИзменении(Элементы.Сотрудник);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ОрганыПФР" И НЕ ЗапретитьИзменение
		И (Параметр = Объект.Получатель ИЛИ Источник = Объект.Получатель) Тогда
		ПолучательПриИзменении(Элементы.Получатель);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказатьНаКартеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(
		Элементы.АдресУПФР.Заголовок,
		"ЯндексКарты");
	
КонецПроцедуры
	
&НаКлиенте
Процедура РаспечататьЗаявлениеОНазначенииНажатие(Элемент)
	
	Если НЕ ЗапретитьИзменение Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) И Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСкана = СвойстваСкана(ЭтотОбъект, Элемент.Имя);
	ВидДокумента  = СвойстваСкана.ВидДокумента;
		
	ПредыдущийТабДокЗаявлениеОНазначении = ТабличныйДокументЗаявлениеОНазначении();
	КонтекстЭДОКлиент.НапечататьДокумент(ПредыдущийТабДокЗаявлениеОНазначении, ВидДокумента);
	
	// Для сохранения предыдущего табличного документа в документ
	Записать();

	Если НЕ ЗапретитьИзменение Тогда
		ЕстьИзмененияВЗаявленииОНазначении = Ложь;
		ПрекратитьПроверкуРезультатаСравненияТабДокЗаявлениеОНазначении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьЗаявлениеОДоставкеНажатие(Элемент)
	
	Если НЕ ЗапретитьИзменение Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) И Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваСкана = СвойстваСкана(ЭтотОбъект, Элемент.Имя);
	ВидДокумента  = СвойстваСкана.ВидДокумента;
		
	ПредыдущийТабДокЗаявлениеОДоставке = ТабличныйДокументЗаявлениеОДоставке();
	КонтекстЭДОКлиент.НапечататьДокумент(ПредыдущийТабДокЗаявлениеОДоставке, ВидДокумента);
	
	// Для сохранения предыдущего табличного документа в документ
	Записать();
	
	Если НЕ ЗапретитьИзменение Тогда
		ЕстьИзмененияВЗаявленииОДоставке = Ложь;
		ПрекратитьПроверкуРезультатаСравненияТабДокЗаявлениеОДоставке();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаявлениеОНазначенииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ВыполнитьДействиеСФайлом(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаявлениеОДоставкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ВыполнитьДействиеСФайлом(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВложенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ВыполнитьДействиеСФайлом(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ПринимаетЗаявления = ПринимаетЗаявления(Объект.Получатель);
	
	Если НЕ ПринимаетЗаявления Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Орган ПФР %1 не принимает заявления о назначении и доставке пенсии по каналам связи.
                                    |Вы можете представить заявление о назначении пенсии только в бумажном виде.'");
		ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Строка(Объект.Получатель));
	
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		НачатьОпределениеКонтактовПФР();
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР", 0.1, Истина);
	
	ИзменитьОформлениеПодсказкиЭтап3(ЭтотОбъект);
	ЗаполнитьНастройки(ЭтотОбъект);
	ИзменитьОформлениеФормы(ЭтотОбъект);
	СравнитьТабДокЗаявлений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаявлениНажатие(Элемент)
	
	СвойстваСкана = СвойстваСкана(ЭтотОбъект, Элемент.Имя);
	ИмяТаблицы    = СвойстваСкана.ИмяТаблицы;
	
	ЭтотОбъект[ИмяТаблицы].Очистить();

	ИзменитьОформлениеЗаявленийИВложений(ЭтотОбъект);
	
	Если ИмяТаблицы = "ФайлыЗаявлениеОНазначении" Тогда
		ПрекратитьПроверкуРезультатаСравненияТабДокЗаявлениеОНазначении();
	Иначе
		ПрекратитьПроверкуРезультатаСравненияТабДокЗаявлениеОДоставке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьПредставительПриИзменении(Элемент)
	
	ИнициализироватьКомуДоставлятьПенсию(ЭтотОбъект);
	ИзменитьОформлениеПредставителя(ЭтотОбъект);
	ИзменитьОформлениеСпособаПолучения(ЭтотОбъект);
	СравнитьТабДокЗаявлений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Отправитель = Объект.Организация;
	
	Если ОпределитьПолучателя() Тогда
		// Остальные функции будут выполнены внутри этой функции
		ПолучательПриИзменении(Элементы.Получатель);
	Иначе
		ЗаполнитьНастройки(ЭтотОбъект);
		СравнитьТабДокЗаявлений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаЗаявления(Элемент)
	
	ИзменитьОформлениеФормы(ЭтотОбъект);
	СравнитьТабДокЗаявлений();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ЗаполнитьСведенияОСотрудникеНаСервере(Объект.Сотрудник);
	УстановитьНаименование();
	ИзменитьОформлениеСведенияОПолучателе(ЭтотОбъект);
	СравнитьТабДокЗаявлений();
	ПодключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СотрудникПослеВыбораИзСписка", ЭтотОбъект);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьСотрудникаИзСписка(
		Оповещение, Объект.Сотрудник, Объект.Отправитель, ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСпособПолучения(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сначала выберите получателя пенсии'"),, "Объект.Сотрудник");
		Возврат;
	КонецЕсли;
	
	// Все эти параметры должны быть в реквизитах формы Мастер_РасширенныеНастройки
	ПараметрыФормыБезАдреса = 
		"КомуДоставлятьПенсию,
		|КомуДоставлятьПенсиюДоЗаключенияДоговора,
		|КудаДоставлятьДоЗаключенияДоговора,
		|КудаДоставлятьПенсию,
		|НаименованиеОрганизацииДоставкиПенсии,
		|НаименованиеОрганизацииДоставкиПенсииДоЗаключенияДоговора,
		|ВидОрганизацийДоставкиПенсии,
		|ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора,
		|ВидПредставителя,
		|ЕстьПредставитель,
		|ЭтоЗаявлениеОДоставкеПенсии,
		|ЭтоЗаявлениеОНазначенииПенсии,
		|Счет,
		|СчетДоЗаключенияДоговора,
		|СпособПолученияПенсии,
		|СпособПолученияПенсииДоЗаключенияДоговора,
		|СекретныйВопрос,
		|ОтветНаСекретныйВопрос,
		|КогоУведомлятьПочта,
		|КогоИнформироватьПочта,
		|КогоИнформироватьТелефон,
		|МестоПроживания";
	
	ПараметрыАдреса =
		"АдресМестаЖительства,
		|АдресМестаПребывания,
		|АдресФактический,
		|ПредставительАдресМестаЖительства,
		|ПредставительАдресМестаПребывания,
		|ПредставительАдресФактический,
		|ПредставительАдресОрганизации";
	
	ПараметрыФормы = ПараметрыФормыБезАдреса + "," + Символы.ПС + ПараметрыАдреса;
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект, ПараметрыФормы);
	ДополнительныеПараметры.Вставить("ПараметрыФормыБезАдреса",  ПараметрыФормыБезАдреса);
	ДополнительныеПараметры.Вставить("ПараметрыАдреса", ПараметрыАдреса);
	ДополнительныеПараметры.Вставить("ЗапретитьИзменение", ЗапретитьИзменение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьСпособПолучения_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму("Справочник.ЗаявлениеОНазначенииПенсии.Форма.СпособПолучения", ДополнительныеПараметры,,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОПредставителе(Команда)
	
	// Все эти параметры должны быть в реквизитах формы Мастер_РасширенныеНастройки
	ПараметрыФормы = 
		"ВидПредставителя,
		|ПредставительНаименованиеОрганизации,
		|ПредставительИмя,
		|ПредставительОтчество,
		|ПредставительФамилия,
		|ПредставительВидДокумента,
		|ПредставительСерияНомер,
		|ПредставительКемВыдан,
		|ПредставительДатаВыдачи,
		|ПредставительНаименованиеДокумента,
		|ПредставительПолномочияСерияНомер,
		|ПредставительПолномочияКемВыдан,
		|ПредставительПолномочияДатаВыдачи,
		|ПредставительПолномочияСрокДействия,
		|ПредставительАдресМестаЖительства,
		|ПредставительАдресМестаПребывания,
		|ПредставительАдресФактический,
		|ПредставительАдресОрганизации,
		|ПредставительТелефон,
		|ЕстьПредставитель,
		|ПредставительЭлектроннаяПочта,
		|СпособПолученияПенсии,
		|СпособПолученияПенсииДоЗаключенияДоговора,
		|ЭтоЗаявлениеОДоставкеПенсии,
		|КомуДоставлятьПенсию,
		|КомуДоставлятьПенсиюДоЗаключенияДоговора";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	ДополнительныеПараметры.Вставить("ЗапретитьИзменение", ЗапретитьИзменение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьСведенияОПредставителе_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму("Справочник.ЗаявлениеОНазначенииПенсии.Форма.Представитель", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидПенсии(Команда)
	
	// Все эти параметры должны быть в реквизитах формы Мастер_РасширенныеНастройки
	ПараметрыФормы = 
		"ВидПенсииОсновной,
		|ВидПенсииВторой,
		|УточнениеПоВидуПенсии,
		|УчестьДопСтраховыеВзносыВСоставеНакопительной,
		|УстановитьСоцДоплату,
		|ПредыдущийВидПенсии,
		|ЗаконодательныйАкт,
		|НовыйВидПенсии,
		|ЭтоЗаявлениеОНазначенииПенсии,
		|Действие";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", 		ПараметрыФормы);
	ДополнительныеПараметры.Вставить("ЗапретитьИзменение",  ЗапретитьИзменение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьВидПенсии_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму("Справочник.ЗаявлениеОНазначенииПенсии.Форма.ВыборВидаПенсии", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	Если (Модифицированность ИЛИ Параметры.Ключ.Пустая()) 
		И Не Записать() ИЛИ Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка сканов убрана из проверки формы для того, чтобы при печати таб. док-ов не было сообщения, 
	// что эти документы не приложены, хотя я их еще только печатаю
	Если СканыЗаявленийНеПриложены() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДО", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОтправитьПослеВыполнения", ЭтотОбъект, ДополнительныеПараметры);
	
	КонтекстЭДОКлиент.ОтправкаМакетаПенсионногоДелаИЗаявления(Объект.Ссылка, Объект.Организация, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОПолучателе(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сначала выберите получателя пенсии'"),, "Объект.Сотрудник");
		Возврат;
	КонецЕсли;
	
	// Все эти параметры должны быть в реквизитах формы Мастер_РасширенныеНастройки
	ПараметрыФормы = 
		"АдресМестаЖительства,
		|АдресМестаПребывания,
		|АдресФактический,
		|АдресЗаПределамиРФНаИностранном,
		|АдресЗаПределамиРФНаРусском,
		|ВидДокумента,
		|Гражданство,
		|ДатаВыдачи,
		|ДатаРождения,
		|КемВыдан,
		|МестоПроживания,
		|МестоРождения,
		|Пол,
		|СерияНомер,
		|СНИЛС,
		|СрокДействия,
		|Телефон,
		|ЭлектроннаяПочта,
		|ЭтоЗаявлениеОДоставкеПенсии,
		|ЭтоЗаявлениеОНазначенииПенсии,
		|Сотрудник,
		|СпособПолученияПенсии,
		|СпособПолученияПенсииДоЗаключенияДоговора,
		|КомуДоставлятьПенсию,
		|КомуДоставлятьПенсиюДоЗаключенияДоговора";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект, ПараметрыФормы);
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	ДополнительныеПараметры.Вставить("ЗапретитьИзменение", ЗапретитьИзменение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьСведенияОПолучателе_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму("Справочник.ЗаявлениеОНазначенииПенсии.Форма.СведенияОПолучателе", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДопСведения(Команда)
	
	ЕстьОшибка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сначала выберите получателя пенсии'"),, "Объект.Сотрудник");
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПенсииОсновной) И НЕ ЗначениеЗаполнено(Объект.ВидПенсииВторой) И НЕ ЗначениеЗаполнено(Объект.НовыйВидПенсии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сначала выберите вид пенсии'"),, "УказательВидПенсии");
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ПараметрыФормыЗаполнитьДопСведения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьДопСведения_Завершение", 
		ЭтотОбъект);
		
	ОткрытьФорму("Справочник.ЗаявлениеОНазначенииПенсии.Форма.ДопСведения", ДополнительныеПараметры,,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ВывестиКонтактыПФР()
	
	Если ЭтоАдресВременногоХранилища(АдресЗаданияПоПолучениюКонтактовПФР) Тогда
			
		Данные = ПолучитьИзВременногоХранилища(АдресЗаданияПоПолучениюКонтактовПФР);
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			
			Если Данные.Выполнено Тогда
			
				АдресЗаданияПоПолучениюКонтактовПФР = Неопределено;
				
				Элементы.ГруппаКонтактовПФР.Видимость = Истина;
				Элементы.НаименованиеУПФР.Заголовок  = Данные.Наименование;
				Элементы.АдресУПФР.Заголовок 		 = Данные.Адрес;
				Элементы.ТелефонУПФР.Заголовок 		 = Данные.Телефон;
				
				ОтключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР");
				
			Иначе
				// Если орган ПФР тестовый, то для него ответ не возвращается. Только для 099-099
				ОтключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР");
			КонецЕсли;
				

		Иначе
			Элементы.ГруппаКонтактовПФР.Видимость = Ложь;
			ПодключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР", 0.1, Истина);
		КонецЕсли;
	Иначе
		Элементы.ГруппаКонтактовПФР.Видимость = Ложь;
		ОтключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР");
	КонецЕсли;
	
КонецПроцедуры
		
&НаСервере
Функция СканыЗаявленийНеПриложены()

	// Проверка заявления выполняется через структуру, чтобы не записывать заявление, 
	// т.к. у незаписанного заявления в ТЧ еще нет документов
	ЗаявлениеВСтруктуре = ЗаявлениеВСтруктуру();
	ЕстьОшибка = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СканыЗаявленийНеПриложены(ЗаявлениеВСтруктуре);
	Возврат ЕстьОшибка;

КонецФункции

&НаСервере
Функция ПринимаетЗаявления(ОрганПФР)
	
	Возврат ЗначениеЗаполнено(ОрганПФР) И ОрганПФР.ПринимаетЗаявленияОНазначенииИДоставкеПенсии; 
	
КонецФункции
	
&НаСервере
Процедура НачатьСравнениеТабДок()
	
	Если ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоЗаявлениеОНазначенииПенсии Тогда
		СравнитьТабДокЗаявленияСервер(Истина);
	КонецЕсли;
	
	Если Объект.ЭтоЗаявлениеОДоставкеПенсии Тогда
		СравнитьТабДокЗаявленияСервер(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьПослеВыполнения(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДО = ДополнительныеПараметры.КонтекстЭДО;
	
	// Перерисовка статуса отправки в форме Отчетность
	ПараметрыОповещения = Новый Структура; 
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Организация", Объект.Организация);
	Оповестить("Завершение отправки в контролирующий орган", ПараметрыОповещения, Объект.Ссылка);
	
	СтатусОтправки = КонтекстЭДО.ПолучитьСтатусОтправкиОбъекта(Объект.Ссылка);	
	ПисьмоОтправлено = ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ВКонверте");
	Если ПисьмоОтправлено Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПисем.Отправленное");
		Объект.ДатаОтправки = ОбщегоНазначенияКлиент.ДатаСеанса();
		Записать();
	КонецЕсли;
	
	Если Открыта() И ПисьмоОтправлено Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьТабДокЗаявлений()
	
	Если Объект.ЭтоЗаявлениеОНазначенииПенсии Тогда
		СравнитьТабДокЗаявленияСервер(Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОНазначении", 0.1, Истина);
	КонецЕсли;
	
	Если Объект.ЭтоЗаявлениеОДоставкеПенсии Тогда
		СравнитьТабДокЗаявленияСервер(Ложь);
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОДоставке", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьПроверкуРезультатаСравненияТабДокЗаявлениеОНазначении()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОНазначении");
	АдресЗаданияСравненияТабДокЗаявленияОНазначении = Неопределено;
	ИзменитьОформлениеРезультатаСравнениеТабличныхДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрекратитьПроверкуРезультатаСравненияТабДокЗаявлениеОДоставке()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОДоставке");
	АдресЗаданияСравненияТабДокЗаявленияОДоставке = Неопределено;
	ИзменитьОформлениеРезультатаСравнениеТабличныхДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗаявлениеВСтруктуру()

	Документ = Новый Структура;
	Для каждого Реквизит Из Метаданные.Справочники.ЗаявлениеОНазначенииПенсии.Реквизиты Цикл
		
		ИмяРеквизита = Реквизит.Имя;
		Если ИмяРеквизита <> "ПредыдущийТабДокЗаявлениеОДоставке" 
			И ИмяРеквизита <> "ПредыдущийТабДокЗаявлениеОНазначении" Тогда
			Документ.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ТабличнаяЧасть Из Метаданные.Справочники.ЗаявлениеОНазначенииПенсии.ТабличныеЧасти Цикл
		Документ.Вставить(ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	Документ.Вставить("ЭлектронныеДокументы", Новый Массив);
	
	ДобавитьДокументыВСоответствие(Документ, Неопределено, Документ.ЭлектронныеДокументы, ФайлыВложения);
	ДобавитьДокументыВСоответствие(Документ, Неопределено, Документ.ЭлектронныеДокументы, ФайлыЗаявлениеОДоставке);
	ДобавитьДокументыВСоответствие(Документ, Неопределено, Документ.ЭлектронныеДокументы, ФайлыЗаявлениеОНазначении);

	Возврат Документ;
	
КонецФункции

&НаСервере
Функция ПараметрыСравнениеТабДок(ЭтоЗаявлениеОНазначении)
	
	Заявление = ЗаявлениеВСтруктуру();
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Объект", Заявление);
	
	Если ЭтоЗаявлениеОНазначении Тогда
		
		АдресЗаданияСравненияТабДокЗаявленияОНазначении = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		ДополнительныеПараметры.Вставить("ТабДокПредыдущий", ПредыдущийТабДокЗаявлениеОНазначении);
		ДополнительныеПараметры.Вставить("ИмяМетода", 		 "ТабличныйДокументЗаявлениеОНазначении");
		ДополнительныеПараметры.Вставить("АдресХранилища", 	 АдресЗаданияСравненияТабДокЗаявленияОНазначении);
		
	Иначе
		
		АдресЗаданияСравненияТабДокЗаявленияОДоставке = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		ДополнительныеПараметры.Вставить("ТабДокПредыдущий", ПредыдущийТабДокЗаявлениеОДоставке);
		ДополнительныеПараметры.Вставить("ИмяМетода", 		 "ТабличныйДокументЗаявлениеОДоставке");
		ДополнительныеПараметры.Вставить("АдресХранилища", 	 АдресЗаданияСравненияТабДокЗаявленияОДоставке);
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаСервере
Функция СравнитьТабДокЗаявленияСервер(ЭтоЗаявлениеОНазначении)
	
	Попытка
		
		ПараметрыСравнениеТабДок = ПараметрыСравнениеТабДок(ЭтоЗаявлениеОНазначении);
		
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыСравнениеТабДок);
		
		ФоновыеЗадания.Выполнить(
			"ЭлектронныйДокументооборотСКонтролирующимиОрганами.СравнитьТабличныеДокументыЗаявлений", 
			ПараметрыФоновогоЗадания, 
			, 
			НСтр("ru = 'Сравнение табличных документов заявления на пенсию'"));
			
		// Если нужно не фоновое задание, то использовать это:
		// ЭлектронныйДокументооборотСКонтролирующимиОрганами.СравнитьТабличныеДокументыЗаявлений(ПараметрыСравнениеТабДок);
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Сравнение табличных документов заявления на пенсию'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			
		ИнформацияОбОшибке = ИнформацияОбОшибке();
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
	КонецПопытки;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОНазначении()
	
	Если ЗначениеЗаполнено(АдресЗаданияСравненияТабДокЗаявленияОНазначении)
		И ЭтоАдресВременногоХранилища(АдресЗаданияСравненияТабДокЗаявленияОНазначении) Тогда
		
		ЕстьИзменения = ПолучитьИзВременногоХранилища(АдресЗаданияСравненияТабДокЗаявленияОНазначении);
		
		Если ЕстьИзменения = Неопределено Тогда
			// Задание еще не закончилось
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОНазначении", 0.2, Истина);
			Возврат;
		КонецЕсли;
		
		ЕстьИзмененияВЗаявленииОНазначении = ЕстьИзменения;
		
	КонецЕсли;
	
	ИзменитьОформлениеРезультатаСравнениеТабличныхДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОДоставке()
	
	Если ЗначениеЗаполнено(АдресЗаданияСравненияТабДокЗаявленияОДоставке)
		И ЭтоАдресВременногоХранилища(АдресЗаданияСравненияТабДокЗаявленияОДоставке) Тогда
		
		ЕстьИзменения = ПолучитьИзВременногоХранилища(АдресЗаданияСравненияТабДокЗаявленияОДоставке);
		
		Если ЕстьИзменения = Неопределено Тогда
			// Задание еще не закончилось
			ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОДоставке", 0.2, Истина);
			Возврат;
		КонецЕсли;
		
		ЕстьИзмененияВЗаявленииОДоставке = ЕстьИзменения;
		
	КонецЕсли;
	
	ИзменитьОформлениеРезультатаСравнениеТабличныхДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеРезультатаСравнениеТабличныхДокументов(Форма)
	
	Элементы = Форма.Элементы;

	Элементы.ПроверкаЗаявлениеОНазначении.Видимость = Форма.ЕстьИзмененияВЗаявленииОНазначении;
	Элементы.ПроверкаЗаявлениеОДоставке.Видимость   = Форма.ЕстьИзмененияВЗаявленииОДоставке;
	
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументЗаявлениеОНазначении()
	
	Возврат Справочники.ЗаявлениеОНазначенииПенсии.ТабличныйДокументЗаявлениеОНазначении(Объект.Ссылка);
	
КонецФункции 

&НаСервере
Функция ТабличныйДокументЗаявлениеОДоставке()
	
	Возврат Справочники.ЗаявлениеОНазначенииПенсии.ТабличныйДокументЗаявлениеОДоставке(Объект.Ссылка);
	
КонецФункции
 
&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьКомуДоставлятьПенсию(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ Объект.ЕстьПредставитель Тогда
		
		Объект.КомуДоставлятьПенсию = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
		Объект.КомуДоставлятьПенсиюДоЗаключенияДоговора = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
		
		Если Объект.КогоУведомлятьПочта = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Представитель") Тогда
			Объект.КогоУведомлятьПочта = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
		КонецЕсли;
		
		Если Объект.КогоИнформироватьТелефон = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Представитель") Тогда
			Объект.КогоИнформироватьТелефон = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
		КонецЕсли;
		
		Если Объект.КогоИнформироватьПочта = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Представитель") Тогда
			Объект.КогоИнформироватьПочта = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьПолучателя()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганыПФР.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ДополнительныеРеквизитыУчетнойЗаписиПолучатели КАК ДополнительныеРеквизитыУчетнойЗаписиПолучатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОрганыПФР КАК ОрганыПФР
		|		ПО ДополнительныеРеквизитыУчетнойЗаписиПолучатели.КодПолучателя = ОрганыПФР.Код
		|ГДЕ
		|	ДополнительныеРеквизитыУчетнойЗаписиПолучатели.УчетнаяЗапись = &УчетнаяЗапись
		|	И ОрганыПФР.ПринимаетЗаявленияОНазначенииИДоставкеПенсии = ИСТИНА";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.Организация.УчетнаяЗаписьОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Объект.Получатель = ВыборкаДетальныеЗаписи.Ссылка;
		Возврат Истина;
	Иначе
		Объект.Получатель = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНастройки(ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеСФайлом(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "выберите"
		ИЛИ НавигационнаяСсылкаФорматированнойСтроки = "Файл" Тогда
		
		ДобавитьФайлыСПредпросмотром(Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Отсканируйте" Тогда
		
		СканироватьФайл(Элемент.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьФайл(ЭлементИмя)
	
	Если СканированиеДоступно Тогда
		
		Записать();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СканироватьФайл_Завершение", 
			ЭтотОбъект,
			ЭлементИмя);
		
		РаботаСФайламиКлиент.ДобавитьФайл(
			ОписаниеОповещения,
			Объект.Ссылка,
			ЭтотОбъект,
			3,
			Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьФайл_Завершение(Результат, ЭлементИмя) Экспорт
	
	Если Результат <> Неопределено И Результат.ФайлДобавлен Тогда
		ДобавитьОтсканированныеФайлы(Результат.ФайлСсылка, ЭлементИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтсканированныеФайлы(ПрисоединенныйФайл, ЭлементИмя)
	
	СвойстваСкана = СвойстваСкана(ЭтотОбъект, ЭлементИмя);
	ИмяТаблицы    = СвойстваСкана.ИмяТаблицы;
	ВидДокумента  = СвойстваСкана.ВидДокумента;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор, Истина);
	
	Файл = Новый Структура;
	Файл.Вставить("Адрес", 		 ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	Файл.Вставить("ИсходноеИмя", ДанныеФайла.ИмяФайла);
	Файл.Вставить("Имя", 		 ДанныеФайла.ИмяФайла);
	Файл.Вставить("Документ", 	 СвойстваСкана.ВидДокумента);
	
	ОписанияФайлов = Новый Массив;
	ОписанияФайлов.Добавить(Файл);
	
	ОписанияФайлов = ОперацииСФайламиЭДКОСлужебныйВызовСервера.ДополнитьОписанияРазмерамиФайлов(ОписанияФайлов);
	Файл = ОписанияФайлов[0];
	
	ЭтотОбъект[ИмяТаблицы].Добавить(Файл);
	
	ИзменитьОформлениеЗаявленийИВложений(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Функция ФильтрВыбораСканов()
	
	Расширения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ДопустимыеТипыФайлов);
	
	Фильтры = Новый Массив;
	Для каждого Расширение Из Расширения Цикл
		Шаблон = НСтр("ru = 'Документ с расширением %1|*.%1'");
		Фильтр = СтрШаблон(Шаблон, Расширение);
		Фильтры.Добавить(Фильтр);
	КонецЦикла;
	
	Фильтры = СтрСоединить(Фильтры, "|");
	
	Возврат Фильтры; 
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФайлыСПредпросмотром(Элемент)
	
	СвойстваСкана = СвойстваСкана(ЭтотОбъект, Элемент.Имя);
	ИмяТаблицы    = СвойстваСкана.ИмяТаблицы;
	ВидДокумента  = СвойстваСкана.ВидДокумента;
	
	ПараметрыФункции = ПараметрыПроцедурыВыбораФайлов();
	
	Файлы = Новый Массив;
	Для каждого ФайлДокумента Из ЭтотОбъект[ИмяТаблицы] Цикл
		
		ФайлДокумента = ФайлДокумента.Значение;
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("Адрес", 		ФайлДокумента.Адрес);
		ПараметрыФайла.Вставить("ИсходноеИмя", 	ФайлДокумента.ИсходноеИмя);
		Файлы.Добавить(ПараметрыФайла);
		
	КонецЦикла;
	
	Если ВидДокумента = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаВложения() Тогда
		МаксимальныйРазмер = МаксимальныйРазмерВложения;
	Иначе
		МаксимальныйРазмер = МаксимальныйРазмерФайла;
	КонецЕсли;
	
	ПараметрыФункции.Вставить("Файлы", Файлы);
	
	ПредставлениеРазмераФайла = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(МаксимальныйРазмер);
	Размер = СтрШаблон("Не более %1", ПредставлениеРазмераФайла);
	
	Требования = Новый Структура;
	Требования.Вставить("Формат", 		СтрСоединить(СтрРазделить(ВРег(ДопустимыеТипыФайлов), ";"), ", "));
	Требования.Вставить("Разрешение", 	"150-400 dpi");
	Требования.Вставить("Цветность", 	"Цветное изображение, глубина цвета 16-24 бит");
	Требования.Вставить("Размер", 		Размер);
	
	ТребованияКФайлу = Новый Структура();
	ТребованияКФайлу.Вставить("Требования",     Требования);
	ТребованияКФайлу.Вставить("КлючТребований", "Заявление о назначении пенсии");
	
	Документ = СтрШаблон(НСтр("ru = 'Выберите файлы документа ""%1""'"), ВидДокумента);
	
	ПараметрыФункции.Вставить("Требования", 			 ТребованияКФайлу);
	ПараметрыФункции.Вставить("ЭлементИмя", 			 Элемент.Имя);
	ПараметрыФункции.Вставить("РежимТолькоПросмотр",  	 ЗапретитьИзменение);
	ПараметрыФункции.Вставить("ДопустимыеТипыФайлов", 	 ДопустимыеТипыФайлов);
	ПараметрыФункции.Вставить("Фильтр", 				 ФильтрВыбораСканов());
	ПараметрыФункции.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмер);
	ПараметрыФункции.Вставить("Документ", 				 Документ);
	
	Оповещение = Новый ОписаниеОповещения(
		"ДобавитьФайлыСПредпросмотромПослеВыполнения", 
		ЭтотОбъект, 
		ПараметрыФункции);
		
	ОперацииСФайламиЭДКОКлиент.ДобавитьФайлыСПредпросмотром(
		Оповещение, 
		УникальныйИдентификатор, 
		Документ, 
		ПараметрыФункции);
		
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьФайлыСПредпросмотромПослеВыполнения(Результат, ВходящийКонтекст) Экспорт
	
	Если ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Выполнено Тогда
		
		Модифицированность = Истина;
		
		ЭлементИмя    = ВходящийКонтекст.ЭлементИмя;
		СвойстваСкана = СвойстваСкана(ЭтотОбъект, ЭлементИмя);
		ИмяТаблицы    = СвойстваСкана.ИмяТаблицы;
		ВидДокумента  = СвойстваСкана.ВидДокумента;
		
		ЭтотОбъект[ИмяТаблицы].Очистить();
		
		Для Каждого Файл Из Результат.Файлы Цикл
			Файл.Вставить("Документ", ВидДокумента);
			ЭтотОбъект[ИмяТаблицы].Добавить(Файл);
		КонецЦикла;
		
		ИзменитьОформлениеЗаявленийИВложений(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент    = Результат.КонтекстЭДО;
	СканированиеДоступно = РаботаСФайламиСлужебныйКлиент.ДоступнаКомандаСканировать();
	ИзменитьОформлениеЗаявленийИВложений(ЭтотОбъект);
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	Если ЭтоНовый И ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзменении(Элементы.Организация);
	КонецЕсли;
	
	Если Объект.ЭтоЗаявлениеОНазначенииПенсии Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОНазначении", 0.1, Истина);
	КонецЕсли;
	
	Если Объект.ЭтоЗаявлениеОДоставкеПенсии Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультаСравненияТабДокЗаявлениеОДоставке", 0.1, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОПолучателе_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	Если Результат.Модифицированность Тогда
		
		Модифицированность = Истина;

		ЗаполнитьЗначенияСвойств(Объект, Результат, ПараметрыФормы, "ПараметрыФормы");
		ИзменитьОформлениеСведенияОПолучателе(ЭтотОбъект);
		СравнитьТабДокЗаявлений();
		НачатьОпределениеКонтактовПФР();
		ПодключитьОбработчикОжидания("Подключаемый_ВывестиКонтактыПФР", 0.1, Истина);
		
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОПредставителе_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	Если Результат.Модифицированность Тогда
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, Результат, ПараметрыФормы, "ПараметрыФормы");
		ИзменитьОформлениеПредставителя(ЭтотОбъект);
		СравнитьТабДокЗаявлений();
	Конецесли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеПредставителя(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	МастерДалее       = Истина;
	ВыводитьСообщения = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПредставительУказанКорректно(Форма.Объект, МастерДалее, ВыводитьСообщения);
	
	Если МастерДалее ИЛИ НЕ Объект.ЕстьПредставитель Тогда
		Если ЗначениеЗаполнено(Объект.ПредставительФамилия) Тогда
			Элементы.ЗаполнитьСведенияОПредставителе.ЦветТекста = Новый Цвет();
			Элементы.ЗаполнитьСведенияОПредставителе.Заголовок  = СокрЛП(Объект.ПредставительФамилия + " " + Объект.ПредставительИмя + " " + Объект.ПредставительОтчество);
		Иначе
			Элементы.ЗаполнитьСведенияОПредставителе.ЦветТекста = Новый Цвет();
			Элементы.ЗаполнитьСведенияОПредставителе.Заголовок  = НСтр("ru = 'Сведения о представителе'");
		КонецЕсли;
	Иначе
		Элементы.ЗаполнитьСведенияОПредставителе.ЦветТекста = Форма.КрасныйЦвет;
		Элементы.ЗаполнитьСведенияОПредставителе.Заголовок  = НСтр("ru = 'Заполнить сведения о представителе'");
	КонецЕсли;
	Элементы.ЗаполнитьСведенияОПредставителе.Доступность = Форма.Объект.ЕстьПредставитель;
	
	ИзменитьОформлениеПодсказкиЭтап3(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеПодсказкиЭтап3(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Объект.ЕстьПредставитель Тогда
		Элементы.ВложениеПояснение2.Заголовок = НСтр("ru = 'Распечатайте и поставьте подпись представителя получателя пенсии.'");
	Иначе
		Элементы.ВложениеПояснение2.Заголовок = НСтр("ru = 'Распечатайте и поставьте подпись получателя пенсии.'");
	КонецЕсли;
	
	Если НЕ Форма.ПринимаетЗаявления Тогда
		Элементы.ВложениеПояснение2.Заголовок = Элементы.ВложениеПояснение2.Заголовок + Символы.ПС +
			НСтр("ru = 'Отнесите заявление в ПФР.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыЗаполнитьДопСведения()
	
	// Все эти параметры должны быть в реквизитах формы Мастер_РасширенныеНастройки
	ПараметрыФормы = 
		"ВоеннаяСлужбаПоПризывуНачало,
		|ВоеннаяСлужбаПоПризывуОкончание,
		|ВступилВБрак,
		|ЗамещаетГосударственнуюДолжность,
		|НетрудоспособныхЧленов,
		|ПолучаетПенсиюДругогоГосударства,
		|ПолучаетПенсиюПоФЗ3132_1,
		|ПолучаетПенсиюПоФЗ4468_1,
		|ПрописанВДругомГосударстве,
		|Работает,
		|СогласенНаПерерасчетПенсии,
		|СогласенНеУчитыватьСтажИЗаработок,
		|СтранаВыплачивающаяПенсию,
		|ВидПенсииПоФЗ4468_1,
		|ОрганВыплачивающийПенсию,
		|ВидПенсииОсновной,
		|ВидПенсииВторой,
		|Пол,
		|УмершийКормилецПолучалПенсиюДругогоГосударства,
		|СтранаВыплачивающаяПенсиюУмершемуКормильцу,
		|УмершийКормилецПолучаетПенсиюПоФЗ4468_1,
		|ОрганВыплачивающийПенсиюУмершемуКормильцу,
		|УмершийКормилецПолучаетПенсиюПоФЗ3132_1,
		|УмершийКормилецЗамещалГосударственнуюДолжность,
		|ЭтоЗаявлениеОНазначенииПенсии,
		|ЭтоЗаявлениеОДоставкеПенсии,
		|ДатаВыходаНаПенсию,
		|Стаж,
		|ОрганПФРПоМестуНазначенияПенсии,
		|НовыйВидПенсии";
	
	ДополнительныеПараметры = Новый Структура(ПараметрыФормы);
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, Объект, ПараметрыФормы); 
	ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
	ДополнительныеПараметры.Вставить("ЗапретитьИзменение", ЗапретитьИзменение);
	
	АдресТаблицыДети = ПоместитьВоВременноеХранилище(Объект.Дети.Выгрузить(), Новый УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("АдресТаблицыДети",  АдресТаблицыДети);
	
	АдресТаблицыИнвалидыПожилые = ПоместитьВоВременноеХранилище(Объект.ИнвалидыПожилые.Выгрузить(), Новый УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("АдресТаблицыИнвалидыПожилые",  АдресТаблицыИнвалидыПожилые);
	
	АдресТаблицыВоеннаяСлужба = ПоместитьВоВременноеХранилище(Объект.ВоеннаяСлужба.Выгрузить(), Новый УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("АдресТаблицыВоеннаяСлужба",  АдресТаблицыВоеннаяСлужба);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВидПенсии_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	Если Результат.Модифицированность Тогда
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(Объект, Результат, ПараметрыФормы, "ПараметрыФормы");
		ИзменитьОформлениеВидаПенсии(ЭтотОбъект);
		СравнитьТабДокЗаявлений();
	Конецесли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеВидаПенсии(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.Действие = ПредопределенноеЗначение("Перечисление.ДействиеВЗаявленииОНазначенииПенсии.ИзменитьВидПенсии") Тогда
		
		Если ЗначениеЗаполнено(Объект.НовыйВидПенсии) Тогда
			Элементы.ЗаполнитьВидПенсии.Заголовок = Объект.НовыйВидПенсии;
		Иначе
			Элементы.ЗаполнитьВидПенсии.Заголовок = НСтр("ru = 'Заполнить'");
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ВидПенсииОсновной) И ЗначениеЗаполнено(Объект.ВидПенсииВторой) Тогда
			Элементы.ЗаполнитьВидПенсии.Заголовок = Строка(Объект.ВидПенсииОсновной) + ", " + Нрег(Строка(Объект.ВидПенсииВторой));
		ИначеЕсли ЗначениеЗаполнено(Объект.ВидПенсииОсновной) Тогда
			Элементы.ЗаполнитьВидПенсии.Заголовок = Объект.ВидПенсииОсновной;
		ИначеЕсли ЗначениеЗаполнено(Объект.ВидПенсииВторой) Тогда
			Элементы.ЗаполнитьВидПенсии.Заголовок = Объект.ВидПенсииВторой;
		ИначеЕсли ЗначениеЗаполнено(Объект.НовыйВидПенсии) Тогда
			Элементы.ЗаполнитьВидПенсии.Заголовок = Объект.НовыйВидПенсии;
		Иначе
			Элементы.ЗаполнитьВидПенсии.Заголовок = НСтр("ru = 'Заполнить'");
		КонецЕсли;
		
	КонецЕсли;
	
	МастерДалее       = Истина;
	ВыводитьСообщения = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СведенияВидаПенсииУказаныКорректно(Форма.Объект, МастерДалее, ВыводитьСообщения);
	
	Если МастерДалее Тогда
		Элементы.ЗаполнитьВидПенсии.ЦветТекста = Новый Цвет();
	Иначе
		Элементы.ЗаполнитьВидПенсии.ЦветТекста = Форма.КрасныйЦвет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДопСведения_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Модифицированность Тогда
		
		Модифицированность = Истина;
		ЗаполнитьСведенияОПолучателеНаСервере(Результат);
		ИзменитьОформлениеДопСведения(ЭтотОбъект);
		СравнитьТабДокЗаявлений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособПолучения_Завершение(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат = Неопределено ИЛИ ЗапретитьИзменение Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыБезАдреса = Результат.ПараметрыФормыБезАдреса;
	Если Результат.Модифицированность Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, Результат, ПараметрыФормыБезАдреса, "ПараметрыФормыБезАдреса");
		ИзменитьОформлениеСпособаПолучения(ЭтотОбъект);
		
		// Если выбран адрес, который не заполнен, обозначаем ошибку
		ИзменитьОформлениеПредставителя(ЭтотОбъект);
		ИзменитьОформлениеСведенияОПолучателе(ЭтотОбъект);
		СравнитьТабДокЗаявлений();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеСпособаПолучения(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ЭтоЗаявлениеОДоставкеПенсии Тогда
		
		Если ЗначениеЗаполнено(Объект.ВидОрганизацийДоставкиПенсии) ИЛИ ЗначениеЗаполнено(Объект.ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора) Тогда
		
			Если ЗначениеЗаполнено(Объект.ВидОрганизацийДоставкиПенсии) 
				И ЗначениеЗаполнено(Объект.ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора) Тогда
				
				Представление = НСтр("ru = 'До заключения договора - %2, после заключения - %1'");
				Представление = СтрШаблон(Представление, ОрганизацияДоставки(Объект.ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора), ОрганизацияДоставки(Объект.ВидОрганизацийДоставкиПенсии));
					
			ИначеЕсли ЗначениеЗаполнено(Объект.ВидОрганизацийДоставкиПенсии) Тогда
				
				Представление = НСтр("ru = 'После заключения договора - %1'");
				Представление = СтрШаблон(Представление, ОрганизацияДоставки(Объект.ВидОрганизацийДоставкиПенсии));
					
				Представление = Объект.ВидОрганизацийДоставкиПенсии;
			ИначеЕсли ЗначениеЗаполнено(Объект.ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора) Тогда
				
				Представление = НСтр("ru = 'До заключения договора - %1'");
				Представление = СтрШаблон(Представление, ОрганизацияДоставки(Объект.ВидОрганизацийДоставкиПенсииДоЗаключенияДоговора));
					
			КонецЕсли;
			
		Иначе
			Представление = НСтр("ru = 'Заполнить'");
		КонецЕсли;
		
	ИначеЕсли Объект.ЭтоЗаявлениеОНазначенииПенсии Тогда
		
		Никого        = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Никого");
		Пенсионер     = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Пенсионер");
		Представитель = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Представитель");
		
		Если НЕ ЗначениеЗаполнено(Объект.КогоУведомлятьПочта)
			И НЕ ЗначениеЗаполнено(Объект.КогоИнформироватьПочта)
			И НЕ ЗначениеЗаполнено(Объект.КогоИнформироватьТелефон) Тогда
			
			Представление = НСтр("ru = 'Заполнить'");
			
		Иначе
			
			// Объект.КогоУведомлятьПочта, Объект.КогоИнформироватьПочта, Объект.КогоИнформироватьТелефон
			Шаблоны = Новый Массив;
			ДобавитьШаблонПредставления(Шаблоны, Ложь, Ложь, Ложь, НСтр("ru = 'Не информировать'"));
			ДобавитьШаблонПредставления(Шаблоны, Ложь, Ложь, Истина, НСтр("ru = 'Информировать по телефону %3'"));
			ДобавитьШаблонПредставления(Шаблоны, Ложь, Истина, Ложь, НСтр("ru = 'Информировать по почте %2'"));
			
			Если Объект.КогоИнформироватьПочта = Объект.КогоИнформироватьТелефон Тогда
				ДобавитьШаблонПредставления(Шаблоны, Ложь, Истина, Истина, НСтр("ru = 'Информировать по почте и по телефону %2'"));
			Иначе
				ДобавитьШаблонПредставления(Шаблоны, Ложь, Истина, Истина, НСтр("ru = 'Информировать по почте %2 и по телефону %3'"));
			КонецЕсли;	
			
			ДобавитьШаблонПредставления(Шаблоны, Истина, Ложь, Ложь, НСтр("ru = 'Уведомлять по почте %1'"));
			
			Если Объект.КогоУведомлятьПочта = Объект.КогоИнформироватьТелефон Тогда
				ДобавитьШаблонПредставления(Шаблоны, Истина, Ложь, Истина, НСтр("ru = 'Уведомлять по почте и информировать по телефону %1'"));
			Иначе
				ДобавитьШаблонПредставления(Шаблоны, Истина, Ложь, Истина, НСтр("ru = 'Уведомлять по почте %1 и информировать по телефону %3'"));
			КонецЕсли;
			
			Если Объект.КогоУведомлятьПочта = Объект.КогоИнформироватьПочта Тогда
				ДобавитьШаблонПредставления(Шаблоны, Истина, Истина, Ложь, НСтр("ru = 'Уведомлять и информировать по почте %1'"));
			Иначе
				ДобавитьШаблонПредставления(Шаблоны, Истина, Истина, Ложь, НСтр("ru = 'Уведомлять по почте %1 и информировать по почте %2'"));
			КонецЕсли;
			
			Если Объект.КогоУведомлятьПочта = Объект.КогоИнформироватьПочта И Объект.КогоИнформироватьПочта = Объект.КогоИнформироватьТелефон Тогда
				ДобавитьШаблонПредставления(Шаблоны, Истина, Истина, Истина, НСтр("ru = 'Уведомлять по почте, информировать по почте и по телефону %3'"));
			ИначеЕсли Объект.КогоУведомлятьПочта <> Объект.КогоИнформироватьПочта И Объект.КогоИнформироватьПочта = Объект.КогоИнформироватьТелефон Тогда
				ДобавитьШаблонПредставления(Шаблоны, Истина, Истина, Истина, НСтр("ru = 'Уведомлять по почте %1, информировать по почте и по телефону %3'"));
			Иначе 
				ДобавитьШаблонПредставления(Шаблоны, Истина, Истина, Истина, НСтр("ru = 'Уведомлять по почте %1, информировать по почте %2 и по телефону %3'"));
			КонецЕсли;
			
			Представление = "";
			Для каждого Шаблон Из Шаблоны Цикл
				
				Если Шаблон.УведомлятьПоПочте = Задано(Объект.КогоУведомлятьПочта)
					И Шаблон.ИнформироватьПоПочте = Задано(Объект.КогоИнформироватьПочта)
					И Шаблон.ИнформироватьПоТелефону = Задано(Объект.КогоИнформироватьТелефон) Тогда
					
					Представление = СтрЗаменить(Шаблон.Шаблон, "%1", НРег(Объект.КогоУведомлятьПочта));
					Представление = СтрЗаменить(Представление, "%2", НРег(Объект.КогоИнформироватьПочта));
					Представление = СтрЗаменить(Представление, "%3", НРег(Объект.КогоИнформироватьТелефон));
					
				КонецЕсли;
			
			КонецЦикла; 
			
			Если Представление = "" Тогда
				Шаблон = НСтр("ru = 'Уведомлять по почте - %1, информировать по почте - %2 и по телефону - %3'");
				Представление = СтрЗаменить(Шаблон, "%1", НРег(Объект.КогоУведомлятьПочта));
				Представление = СтрЗаменить(Представление, "%2", НРег(Объект.КогоИнформироватьПочта));
				Представление = СтрЗаменить(Представление, "%3", НРег(Объект.КогоИнформироватьТелефон));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Цвет
	МастерДалее       = Истина;
	ВыводитьСообщения = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СпособПолученияУказанКорректно(Форма.Объект, МастерДалее, ВыводитьСообщения);
	
	Если МастерДалее Тогда
		Элементы.ЗаполнитьСпособПолучения.ЦветТекста = Новый Цвет();
	Иначе
		Элементы.ЗаполнитьСпособПолучения.ЦветТекста = Форма.КрасныйЦвет;
	КонецЕсли;
	
	Элементы.ЗаполнитьСпособПолучения.Заголовок = Представление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьШаблонПредставления(Шаблоны, УведомлятьПоПочте, ИнформироватьПоПочте, ИнформироватьПоТелефону, Шаблон)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("УведомлятьПоПочте", 		УведомлятьПоПочте);
	ДополнительныеПараметры.Вставить("ИнформироватьПоПочте", 	ИнформироватьПоПочте);
	ДополнительныеПараметры.Вставить("ИнформироватьПоТелефону", ИнформироватьПоТелефону);
	ДополнительныеПараметры.Вставить("Шаблон", 					Шаблон);
	
	Шаблоны.Добавить(ДополнительныеПараметры);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеЗадано(Значение)
	
	Возврат Не ЗначениеЗаполнено(Значение) ИЛИ Значение = ПредопределенноеЗначение("Перечисление.ВидыПолучателейПенсии.Никого");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Задано(Значение)
	
	Возврат НЕ НеЗадано(Значение);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОрганизацияДоставки(ВидОрганизации)
	
	Если ВидОрганизации = ПредопределенноеЗначение("Перечисление.ВидыОрганизацийДоставкиПенсии.Почта") Тогда
		Возврат НСтр("ru = 'по почте'");
	ИначеЕсли ВидОрганизации = ПредопределенноеЗначение("Перечисление.ВидыОрганизацийДоставкиПенсии.КредитнаяОрганизация") Тогда
		Возврат НСтр("ru = ' через кредитную организацию'");
	ИначеЕсли ВидОрганизации = ПредопределенноеЗначение("Перечисление.ВидыОрганизацийДоставкиПенсии.ИнаяОрганизация") Тогда
		Возврат НСтр("ru = ' через иную организацию'");
	КонецЕсли;
	
КонецФункции
	
&НаСервере
Процедура ЗаполнитьСведенияОПолучателеНаСервере(Результат)
	
	ПараметрыФормы = Результат.ПараметрыФормы;
	Если Результат.Модифицированность Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(Объект, Результат, ПараметрыФормы, "ПараметрыФормы");
		
		Таблица = ПолучитьИзВременногоХранилища(Результат.АдресТаблицыДети);
		Объект.Дети.Загрузить(Таблица);
		
		Таблица = ПолучитьИзВременногоХранилища(Результат.АдресТаблицыИнвалидыПожилые);
		Объект.ИнвалидыПожилые.Загрузить(Таблица);
		
		Таблица = ПолучитьИзВременногоХранилища(Результат.АдресТаблицыВоеннаяСлужба);
		Объект.ВоеннаяСлужба.Загрузить(Таблица);
		
		ИзменитьОформлениеСведенияОПолучателе(ЭтотОбъект);
	Конецесли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеСведенияОПолучателе(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Объект.Телефон) ИЛИ ЗначениеЗаполнено(Объект.ВидДокумента) ИЛИ ЗначениеЗаполнено(Объект.СерияНомер) Тогда
		
		ПредставлениеПаспорта = СокрЛП(Строка(Объект.ВидДокумента) + " " + Объект.СерияНомер);
		
		Подстроки = Новый Массив;
		Подстроки.Добавить(ПредставлениеПаспорта);
		
		Если ЗначениеЗаполнено(Объект.Телефон) Тогда
			Подстроки.Добавить(НСтр("ru = 'тел. '") + Объект.Телефон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеПаспорта) И ЗначениеЗаполнено(Объект.Телефон) Тогда
			Представление = СокрЛП(СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Подстроки, ", "));
		Иначе
			Представление = СокрЛП(СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Подстроки, " "));
		КонецЕсли;
		
	Иначе
		Представление = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	// Цвет
	МастерДалее       = Истина;
	ВыводитьСообщения = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СведенияОПолучателеУказаныКорректно(Форма.Объект, МастерДалее, ВыводитьСообщения);
	
	Если МастерДалее Тогда
		Элементы.ЗадатьСведенияОПолучателе.ЦветТекста = Новый Цвет();
	Иначе
		Элементы.ЗадатьСведенияОПолучателе.ЦветТекста = Форма.КрасныйЦвет;
	КонецЕсли;
	
	Элементы.ЗадатьСведенияОПолучателе.Заголовок = Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПослеВыбораИзСписка(Результат, ВходящийКонтекст) Экспорт
	
	Объект.Сотрудник = Результат;
	СотрудникПриИзменении(Элементы.Сотрудник);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)
	
	Если Не Форма.Параметры.Ключ.Пустая() И ЗначениеЗаполнено(Форма.Объект.Наименование) Тогда
		Форма.Заголовок = Форма.Объект.Наименование;
	ИначеЕсли НЕ ЗначениеЗаполнено(Форма.Объект.Наименование) Тогда
		Форма.Заголовок = НСтр("ru = 'Заявление о назначении пенсии'");
	Иначе
		Форма.Заголовок = НСтр("ru = 'Заявление о назначении пенсии (создание)'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименование()
	
	Объект.Наименование = СтрШаблон("Заявление о назначении пенсии (%1)", Объект.Сотрудник);
	УстановитьЗаголовокФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОСотрудникеНаСервере(Сотрудник)
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("Фамилия");
	МассивПоказателей.Добавить("Имя");
	МассивПоказателей.Добавить("Отчество");
	МассивПоказателей.Добавить("СНИЛС");
	МассивПоказателей.Добавить("АдресРегистрации");
	МассивПоказателей.Добавить("Телефон");
	МассивПоказателей.Добавить("АдресМестаЖительства_XML");
	МассивПоказателей.Добавить("АдресМестаПребывания_XML");
	МассивПоказателей.Добавить("АдресФактическогоПроживания_XML");
	МассивПоказателей.Добавить("АдресЗаПределамиРФНаРусском_XML");
	МассивПоказателей.Добавить("АдресЗаПределамиРФНаИностранном_XML");
	МассивПоказателей.Добавить("ЭлектроннаяПочта");
	МассивПоказателей.Добавить("УдостоверениеЛичности");
	МассивПоказателей.Добавить("Гражданство");
	МассивПоказателей.Добавить("Пол");
	МассивПоказателей.Добавить("МестоРождения");
	МассивПоказателей.Добавить("ДатаРождения");
	
	СведенияОСотруднике = ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьСведенияОСотруднике(Сотрудник, МассивПоказателей);
	
	Если СведенияОСотруднике = Неопределено Тогда
		// Не определили переопределяемую
		Возврат;
	КонецЕсли;
	
	СведенияОСотруднике.Свойство("Фамилия",  Объект.Фамилия);
	СведенияОСотруднике.Свойство("Имя", 	 Объект.Имя);
	СведенияОСотруднике.Свойство("Отчество", Объект.Отчество);
	СведенияОСотруднике.Свойство("СНИЛС", 	 Объект.СНИЛС);
	
	Если СведенияОСотруднике.Свойство("Телефон") Тогда
		Объект.Телефон = СведенияОСотруднике.Телефон;
	КонецЕсли;
	
	Если СведенияОСотруднике.Свойство("ЭлектроннаяПочта") Тогда 
		Объект.ЭлектроннаяПочта = СведенияОСотруднике.ЭлектроннаяПочта;
	КонецЕсли;
	
	Если СведенияОСотруднике.Свойство("УдостоверениеЛичности") Тогда
		
		УдостоверениеЛичности = СведенияОСотруднике.УдостоверениеЛичности;
		
		Если УдостоверениеЛичности <> Неопределено Тогда
		
			Если УдостоверениеЛичности.Свойство("Серия") И УдостоверениеЛичности.Свойство("Номер") Тогда
				Объект.СерияНомер = СокрЛП(Строка(УдостоверениеЛичности.Серия) + " " + Строка(УдостоверениеЛичности.Номер));
			КонецЕсли;
			
			Если УдостоверениеЛичности.Свойство("КемВыдан") И УдостоверениеЛичности.Свойство("КодПодразделения") Тогда
				Объект.КемВыдан = СокрЛП(Строка(УдостоверениеЛичности.КемВыдан) + " " + Строка(УдостоверениеЛичности.КодПодразделения));
			КонецЕсли;
			
			УдостоверениеЛичности.Свойство("ДатаВыдачи", 	Объект.ДатаВыдачи);
			УдостоверениеЛичности.Свойство("ВидДокумента",  Объект.ВидДокумента);
			УдостоверениеЛичности.Свойство("СрокДействия",  Объект.СрокДействия);
			
		КонецЕсли;
		
	КонецЕсли;
		
	СведенияОСотруднике.Свойство("АдресМестаЖительства_XML",            Объект.АдресМестаЖительства);
	СведенияОСотруднике.Свойство("АдресМестаПребывания_XML",            Объект.АдресМестаПребывания);
	СведенияОСотруднике.Свойство("АдресФактическогоПроживания_XML",     Объект.АдресФактический);
	СведенияОСотруднике.Свойство("АдресЗаПределамиРФНаИностранном_XML", Объект.АдресЗаПределамиРФНаИностранном);
	СведенияОСотруднике.Свойство("АдресЗаПределамиРФНаРусском_XML",     Объект.АдресЗаПределамиРФНаРусском);
	СведенияОСотруднике.Свойство("Пол", 								Объект.Пол);
	СведенияОСотруднике.Свойство("Гражданство", 						Объект.Гражданство);
	СведенияОСотруднике.Свойство("МестоРождения", 						Объект.МестоРождения);
	СведенияОСотруднике.Свойство("ДатаРождения", 						Объект.ДатаРождения);
	
	Объект.АдресЗаПределамиРФНаИностранном = ПредставлениеКонтактнойИнформации(Объект.АдресЗаПределамиРФНаИностранном);
	Объект.АдресЗаПределамиРФНаРусском     = ПредставлениеКонтактнойИнформации(Объект.АдресЗаПределамиРФНаРусском);
	
	Объект.УстановитьСоцДоплату = Истина;
	Объект.Работает 			= Истина;
	
	Объект.ПолучаетПенсиюДругогоГосударства 			  = Перечисления.ОтветыНаВопросыОПенсии.Нет;
	Объект.УмершийКормилецПолучалПенсиюДругогоГосударства = Перечисления.ОтветыНаВопросыОПенсии.Нет;
	
	НачатьОпределениеКонтактовПФР();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеКонтактнойИнформации(ЗначениеАдреса)
	
	Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеАдреса);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДанные(Параметры)

	ЭтоНовый = Параметры.Ключ.Пустая();
	
	Если ЭтоНовый Тогда
		Если Параметры.Свойство("Организация") Тогда
			Объект.Организация = Параметры.Организация;
		КонецЕсли;
		Объект.ЭтоЗаявлениеОНазначенииПенсии = Истина;
		// Заявление о доставке временно не поддерживается
		Объект.ЭтоЗаявлениеОДоставкеПенсии   = Ложь;
		Объект.Действие = Перечисления.ДействиеВЗаявленииОНазначенииПенсии.ВыбратьВидПенсии;
		ПринимаетЗаявления = ПринимаетЗаявления(Объект.Получатель);
	Иначе
		ВосстановитьДокументы();
		ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
		ПринимаетЗаявления = ПринимаетЗаявления(Объект.Получатель);
		НачатьОпределениеКонтактовПФР();
	КонецЕсли;
	
	КонтекстЭДОСервер  = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	СтатусОтправки     = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(Объект.Ссылка);
	ЗапретитьИзменение = ЗначениеЗаполнено(СтатусОтправки) И СтатусОтправки <> Перечисления.СтатусыОтправки.ВКонверте;
	КрасныйЦвет 	   = ЦветаСтиля.ЦветОшибкиПроверкиБРО;
	СерыйЦвет 	  	   = Новый Цвет(139, 139, 139);
	ОднаОрганизация    = РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация();
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(
		ЭтотОбъект, 
		"Организация");
		
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.СкрытьЭлементыФормыПриИспользованииОднойОрганизации(
		ЭтотОбъект, 
		"ОтКогоЗаголовок");
		
	ЗаполнитьНастройки(ЭтаФорма);
	
	ПредыдущийТабДокЗаявлениеОДоставке   = Объект.Ссылка.ПредыдущийТабДокЗаявлениеОДоставке.Получить();
	ПредыдущийТабДокЗаявлениеОНазначении = Объект.Ссылка.ПредыдущийТабДокЗаявлениеОНазначении.Получить();
	
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеФормы(Форма)
	
	Элементы = Форма.Элементы;

	Если Форма.ЗапретитьИзменение Тогда
		
		Элементы.ГруппаВидЗаявления.ТолькоПросмотр    = Истина;
		Элементы.ЕстьПредставитель.ТолькоПросмотр     = Истина;
		Элементы.ФормаЗаписать.ТолькоВоВсехДействиях  = Истина;
		
		Элементы.Организация.Вид = ВидПоляФормы.ПолеНадписи;
		Элементы.Получатель.Вид  = ВидПоляФормы.ПолеНадписи;
		Элементы.Сотрудник.Вид   = ВидПоляФормы.ПолеНадписи;

	КонецЕсли;
	
	УстановитьЗаголовокФормы(Форма);
	ПрорисоватьСтатус(Форма);
	
	ИзменитьОформлениеФормыВЗависимостиОтВидаЗаявления(Форма);
	ИзменитьОформлениеФормыПриНедоступнойОтправке(Форма);
	ИзменитьОформлениеСведенияОПолучателе(Форма);
	ИзменитьОформлениеВидаПенсии(Форма);
	ИзменитьОформлениеДопСведения(Форма);
	ИзменитьОформлениеПредставителя(Форма);
	ИзменитьОформлениеСпособаПолучения(Форма);
	ИзменитьОформлениеБлокаПечатиЗаявление(Форма, "ЗаголовокРаспечататьЗаявлениеОНазначении");
	ИзменитьОформлениеБлокаПечатиЗаявление(Форма, "ЗаголовокРаспечататьЗаявлениеОДоставке");
	ИзменитьОформлениеЗаявленийИВложений(Форма);
	
	Видимость = Форма.Объект.ЭтоЗаявлениеОНазначенииПенсии ИЛИ Форма.Объект.ЭтоЗаявлениеОДоставкеПенсии;
	Элементы.ГруппаРеквизитыЗаявления.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура НачатьОпределениеКонтактовПФР()

	Если ЗапретитьИзменение ИЛИ НЕ ЗначениеЗаполнено(Объект.Получатель) ИЛИ ПринимаетЗаявления Тогда
		АдресЗаданияПоПолучениюКонтактовПФР = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресМестаЖительства) Тогда
		КодРегиона = КодРегионаПоАдресу(Объект.АдресМестаЖительства);
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресМестаПребывания) Тогда
		КодРегиона = КодРегионаПоАдресу(Объект.АдресМестаПребывания);
	ИначеЕсли ЗначениеЗаполнено(Объект.АдресФактический) Тогда
		КодРегиона = КодРегионаПоАдресу(Объект.АдресФактический);
	Иначе
		Возврат;
	КонецЕсли;
	
	АдресЗаданияПоПолучениюКонтактовПФР = ПоместитьВоВременноеХранилище("", ЭтаФорма.УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Массив();
	ДополнительныеПараметры.Добавить(АдресЗаданияПоПолучениюКонтактовПФР);
	ДополнительныеПараметры.Добавить(КодРегиона);
	ДополнительныеПараметры.Добавить(Объект.Получатель.Код);
	
	ФоновыеЗадания.Выполнить("ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьКонтактыПФР", ДополнительныеПараметры);
	
	// Если нужно не фоновое задание, то использовать это:
	// ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПолучитьКонтактыПФР(АдресЗаданияПоПолучениюКонтактовПФР, КодРегиона, Объект.Получатель.Код);

КонецПроцедуры

&НаСервере
Функция КодРегионаПоАдресу(Адрес)

	КонтекстЭДОСервер = ДокументооборотСКОВызовСервера.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.КодРегионаВМастереПоАдресу(Адрес)
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеФормыПриНедоступнойОтправке(Форма)
	
	// Элементы отправки
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	ЗапретитьИзменение = Форма.ЗапретитьИзменение;
	
	ОтображатьЭлементыОтправки = ЗначениеЗаполнено(Объект.Получатель) И Форма.ПринимаетЗаявления;
	ВидВыбран = Объект.ЭтоЗаявлениеОНазначенииПенсии ИЛИ Объект.ЭтоЗаявлениеОДоставкеПенсии;
	
	Элементы.ГруппаПанельОтправки.Видимость  = ОтображатьЭлементыОтправки;
	Элементы.ФормаКомандаОтправить.Видимость = ОтображатьЭлементыОтправки И НЕ ЗапретитьИзменение;
	Элементы.КомандаОтправить.Видимость      = ОтображатьЭлементыОтправки И ВидВыбран И НЕ ЗапретитьИзменение;
	Элементы.ЗаписатьИЗакрыть.Видимость      = НЕ ОтображатьЭлементыОтправки И ВидВыбран И НЕ ЗапретитьИзменение;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = НЕ ОтображатьЭлементыОтправки И ВидВыбран И НЕ ЗапретитьИзменение;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеЗаявленийИВложений(Форма)
	
	Элементы = Форма.Элементы;
	
	ИзменитьОформлениеСкана(Форма, Элементы.СсылкаВложения.Имя, Ложь);
	ИзменитьОформлениеСкана(Форма, Элементы.СсылкаЗаявлениеОНазначении.Имя);
	ИзменитьОформлениеСкана(Форма, Элементы.СсылкаЗаявлениеОДоставке.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеДопСведения(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	МастерДалее       = Истина;
	ВыводитьСообщения = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ДопСведенияУказаныКорректно(Форма.Объект, МастерДалее, ВыводитьСообщения);
	
	Если МастерДалее Тогда
		Элементы.ЗаполнитьДопСведения.ЦветТекста = Новый Цвет();
		Элементы.ЗаполнитьДопСведения.Заголовок  = НСтр("ru = 'Редактировать'");
	Иначе
		Элементы.ЗаполнитьДопСведения.ЦветТекста = Форма.КрасныйЦвет;
		Элементы.ЗаполнитьДопСведения.Заголовок  = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеФормыВЗависимостиОтВидаЗаявления(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	УстановитьВидимостьПриЗаявленииОНазначенииПенсии(Форма);
	УстановитьВидимостьПриЗаявленииОДоставкеПенсии(Форма);
	
	Если НЕ Объект.ЭтоЗаявлениеОНазначенииПенсии И Объект.ЭтоЗаявлениеОДоставкеПенсии Тогда
		// Меняем нумерацию этапов, так как скроется 2 этап
		Элементы.Этап3.Картинка = БиблиотекаКартинок.Этап2БРО;
		Элементы.Этап4.Картинка = БиблиотекаКартинок.Этап3БРО;
	Иначе
		// Восстанавливаем нумерацию
		Элементы.Этап3.Картинка = БиблиотекаКартинок.Этап3БРО;
		Элементы.Этап4.Картинка = БиблиотекаКартинок.Этап4БРО;
	КонецЕсли;
	
	ВидВыбран      = Объект.ЭтоЗаявлениеОНазначенииПенсии ИЛИ Объект.ЭтоЗаявлениеОДоставкеПенсии;
	ВыбраныОбаВида = Объект.ЭтоЗаявлениеОНазначенииПенсии И Объект.ЭтоЗаявлениеОДоставкеПенсии;
	
	Элементы.Блок3.Видимость = ВидВыбран;
	Элементы.Блок4.Видимость = ВидВыбран И Форма.ПринимаетЗаявления;
	
	Если ВыбраныОбаВида Тогда
		Элементы.НазваниеЭтапа3.Заголовок = НСтр("ru = 'Распечатайте и подпишите заявления'");
	Иначе
		Элементы.НазваниеЭтапа3.Заголовок = НСтр("ru = 'Распечатайте и подпишите заявление'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПриЗаявленииОНазначенииПенсии(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Элементы, видимые только в заявлении "О назначении пенсии"
	ЭлементыЗаявленияОНазначении = Новый Массив;
	
	// Вид пенсии
	ЭлементыЗаявленияОНазначении.Добавить(Элементы.ГруппаВыбратьВидПенсии);
	ЭлементыЗаявленияОНазначении.Добавить(Элементы.ВидПенсииЗаголовок);
	
	// Приложите скан-копии вложений 
	ЭлементыЗаявленияОНазначении.Добавить(Элементы.Блок2);
	
	// Распечатайте заявления
	ЭлементыЗаявленияОНазначении.Добавить(Элементы.ГруппаРаспечататьЗаявлениеОНазначении);
	
	// Прикрепите скан-копии
	ЭлементыЗаявленияОНазначении.Добавить(Элементы.ГруппаЗаявлениеОНазначении);
	
	Для каждого ЭлементЗаявленияОНазначении Из ЭлементыЗаявленияОНазначении Цикл
		ЭлементЗаявленияОНазначении.Видимость = Объект.ЭтоЗаявлениеОНазначенииПенсии;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПриЗаявленииОДоставкеПенсии(Форма)

	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Элементы, видимые только в заявлении "О доставке пенсии"
	ЭлементыЗаявленияОДоставке = Новый Массив;
	
	// Распечатайте заявления
	ЭлементыЗаявленияОДоставке.Добавить(Элементы.ГруппаРаспечататьЗаявлениеОДоставке);
	
	// Прикрепите скан-копии
	ЭлементыЗаявленияОДоставке.Добавить(Элементы.ГруппаЗаявлениеОДоставке);
	
	Для каждого ЭлементЗаявленияОДоставке Из ЭлементыЗаявленияОДоставке Цикл
		ЭлементЗаявленияОДоставке.Видимость = Объект.ЭтоЗаявлениеОДоставкеПенсии;
	КонецЦикла;
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, ИмяТекущегоТипаПолучателя());
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, ИмяТекущегоТипаПолучателя());
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, ИмяТекущегоТипаПолучателя());
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, ИмяТекущегоТипаПолучателя());
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, ИмяТекущегоТипаПолучателя());
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТекущегоТипаПолучателя()
	
	Возврат "ПФР";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрорисоватьСтатус(Форма)
	
	ВидКонтролирующегоОргана = ИмяТекущегоТипаПолучателя();
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(Форма.Объект.Ссылка, Форма.Объект.Организация, ВидКонтролирующегоОргана);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанелиОтправки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНастройки(Форма)
	
	Объект = Форма.Объект;
	
	Настройки = ПолучитьНастройки(Объект.Отправитель, Объект.Получатель);
	Если ЗначениеЗаполнено(Настройки) Тогда
		
		Форма.ДопустимыеТипыФайлов       = Настройки.Вложение.ДопустимыеТипы;
		Форма.МаксимальныйРазмерФайла    = Настройки.Вложение.МаксимальныйРазмерФайла;
		Форма.МаксимальныйРазмерВложения = Настройки.Вложение.МаксимальныйРазмерВложения;
		
	КонецЕсли;
	
	ИзменитьОформлениеТребованийКФайлу(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеТребованийКФайлу(Форма)
	
	Элементы = Форма.Элементы;
	
	ИсходныйТекст = НСтр("ru = 'Состав документов, которые необходимо приложить к заявлению, уточняйте в своем отделении ПФР.'");
	
	ПодставитьТребованияКИзображению(
		Форма, 
		Элементы.ВложениеПояснение,
		ИсходныйТекст,
		Форма.МаксимальныйРазмерВложения);
		
	ИсходныйТекст = НСтр("ru = ''");
		
	ПодставитьТребованияКИзображению(
		Форма,
		Элементы.ФайлПояснение, 
		ИсходныйТекст,
		Форма.МаксимальныйРазмерФайла);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодставитьТребованияКИзображению(Форма, Элемент, ИсходныйТекст, МаксимальныйРазмер)
	
	ДопустимыеТипыФайлов    = Форма.ДопустимыеТипыФайлов;
	Размер                  = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(МаксимальныйРазмер);	
	
	ДобавитьИли(ДопустимыеТипыФайлов);

	Если ЗначениеЗаполнено(Форма.ДопустимыеТипыФайлов) И ЗначениеЗаполнено(МаксимальныйРазмер) Тогда
		Требования = НСтр("ru = 'Требования к изображениям: файлы %1 не более %2 каждый.'");
		Требования = СтрШаблон(Требования, ДопустимыеТипыФайлов, Размер);
	ИначеЕсли ЗначениеЗаполнено(Форма.ДопустимыеТипыФайлов) И НЕ ЗначениеЗаполнено(МаксимальныйРазмер) Тогда
		Требования = НСтр("ru = 'Требования к изображениям: файлы %1.'");
		Требования = СтрШаблон(Требования, ДопустимыеТипыФайлов);
	ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ДопустимыеТипыФайлов) И ЗначениеЗаполнено(МаксимальныйРазмер) Тогда
		Требования = НСтр("ru = 'Требования к изображениям: не более %1 каждый файл.'");
		Требования = СтрШаблон(Требования, Размер);
	Иначе
		Требования = "";
	КонецЕсли;
	
	Элемент.Заголовок = СокрЛП(ИсходныйТекст + Символы.ПС + Требования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьИли(ДопустимыеТипыФайлов)
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ДопустимыеТипыФайлов, ",; ");
	Количество = МассивСлов.Количество();
	Если Количество > 1 Тогда
		
		Последний = СокрЛП(МассивСлов[Количество - 1]);
		МассивСлов.Удалить(Количество - 1);
		
		ДопустимыеТипыФайлов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивСлов, ", ", Истина);
		ДопустимыеТипыФайлов = ДопустимыеТипыФайлов + НСтр("ru = ' или '") + Последний;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройки(Отправитель, Получатель)
	
	Настройки = Новый Структура;
	
	Если ЗначениеЗаполнено(Отправитель) И ЗначениеЗаполнено(Получатель) Тогда
		Настройки = РегистрыСведений.ПравилаОтправкиОтчетностиПоФизЛицам.ПолучитьНастройки(
			Отправитель, 
			Получатель,
			Перечисления.ВидыОтчетностиПоФизЛицам.ЗаявлениеОНазначенииИДоставкеПенсии);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Функция ПараметрыПроцедурыВыбораФайлов()
		
	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("МаксимальныйРазмерФайла", 	МаксимальныйРазмерФайла);
	ПараметрыФункции.Вставить("ДопустимыеТипыФайлов",		ДопустимыеТипыФайлов);
	ПараметрыФункции.Вставить("ВозвращатьРазмер", 			Истина);
	ПараметрыФункции.Вставить("РежимТолькоПросмотр", 		Ложь);
	ПараметрыФункции.Вставить("ИспользоватьСтраницы", 		Ложь);
	ПараметрыФункции.Вставить("Получатель", 				Объект.Получатель);
	
	Возврат ПараметрыФункции;
	
КонецФункции

&НаСервере
Процедура ВосстановитьДокументы()
	
	Для Каждого ЭлектронныйДокумент Из Объект.ЭлектронныеДокументы Цикл
		
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлектронныйДокумент.Файл, УникальныйИдентификатор, Истина);
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Размер", 		ДанныеФайла.Размер);
		ОписаниеФайла.Вставить("Адрес", 		ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ОписаниеФайла.Вставить("ИсходноеИмя", 	ДанныеФайла.ИмяФайла);
		ОписаниеФайла.Вставить("Документ", 		ЭлектронныйДокумент.Документ);
		
		ЭтоВидДокументаВложения             = ЭлектронныйДокумент.Документ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаВложения();
		ЭтоВидДокументаЗаявлениеОДоставке   = ЭлектронныйДокумент.Документ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаЗаявлениеОДоставке();
		ЭтоВидДокументаЗаявлениеОНазначении = ЭлектронныйДокумент.Документ = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаЗаявлениеОНазначении();
		
		Если ЭтоВидДокументаВложения Тогда
			ФайлыВложения.Добавить(ОписаниеФайла);
		ИначеЕсли ЭтоВидДокументаЗаявлениеОДоставке Тогда
			ФайлыЗаявлениеОДоставке.Добавить(ОписаниеФайла);
		ИначеЕсли ЭтоВидДокументаЗаявлениеОНазначении Тогда
			ФайлыЗаявлениеОНазначении.Добавить(ОписаниеФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеБлокаПечатиЗаявление(Форма, ЭлементИмя)
	
	СвойстваСкана = СвойстваСкана(Форма, ЭлементИмя);
	ИмяТаблицы 	  = СвойстваСкана.ИмяТаблицы;
	ВидДокумента  = СвойстваСкана.ВидДокумента;
	Элемент  	  = СвойстваСкана.Элемент;
	
	Элементы 	  = Форма.Элементы;
	Объект 	 	  = Форма.Объект;
	
	Если Объект.ЭтоЗаявлениеОНазначенииПенсии И Объект.ЭтоЗаявлениеОДоставкеПенсии Тогда
		Номер = "1. ";
		Если ИмяТаблицы = "ФайлыЗаявлениеОДоставке" Тогда
			Номер = "2. ";
		КонецЕсли;
	Иначе
		Номер = "";
	КонецЕсли;
	
	Элемент.Заголовок = Номер + ВидДокумента + ":";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеСкана(Форма, ЭлементИмя, Обязательно = Истина)
	
	ИзменитьОформлениеЗаголовкаЗаявление(Форма, ЭлементИмя);
	ИзменитьОформлениеСсылкиЗаявления(Форма, ЭлементИмя, Обязательно);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСкана(Форма, ЭлементИмя)
	
	ИмяТаблицыБезПрефикса = ЭлементИмя;
	Если Найти(ЭлементИмя, "Заявление") Тогда
		ИмяТаблицыБезПрефикса = Сред(ИмяТаблицыБезПрефикса, Найти(ЭлементИмя, "Заявление"));
	КонецЕсли;
	
	Если Найти(ЭлементИмя, "Вложения") Тогда
		ИмяТаблицыБезПрефикса = Сред(ИмяТаблицыБезПрефикса, Найти(ЭлементИмя, "Вложения"));
	КонецЕсли;
	
	ИмяТаблицы   = НСтр("ru = 'Файлы'") + ИмяТаблицыБезПрефикса;
	ВидДокумента = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаПоНазначению(ИмяТаблицыБезПрефикса);

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",   	ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИмяЗаголовка", 	"ЗаголовокВыбрать" + ИмяТаблицыБезПрефикса);
	ДополнительныеПараметры.Вставить("ИмяСсылка",    	"Ссылка" + ИмяТаблицыБезПрефикса);
	ДополнительныеПараметры.Вставить("ВидДокумента", 	ВидДокумента);
	ДополнительныеПараметры.Вставить("Элемент", 	 	Форма.Элементы[ЭлементИмя]);
	ДополнительныеПараметры.Вставить("ИмяБезПрефикса",  ИмяТаблицыБезПрефикса);

	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеЗаголовкаЗаявление(Форма, ЭлементИмя)

	СвойстваСкана = СвойстваСкана(Форма, ЭлементИмя);
	ИмяТаблицы    = СвойстваСкана.ИмяТаблицы;
	ВидДокумента  = СвойстваСкана.ВидДокумента;
	ИмяЗаголовка  = СвойстваСкана.ИмяЗаголовка;
	Элементы 	  = Форма.Элементы;
	Объект 		  = Форма.Объект;
	
	// Заголовок
	Если Объект.ЭтоЗаявлениеОНазначенииПенсии И Объект.ЭтоЗаявлениеОДоставкеПенсии И НЕ ИмяТаблицы = "ФайлыВложения" Тогда
		Префикс = "1. " + ВидДокумента;
		Если ИмяТаблицы = "ФайлыЗаявлениеОДоставке" Тогда
			Префикс = "2. " + ВидДокумента;
		КонецЕсли;
	Иначе
		Префикс = ВидДокумента;
	КонецЕсли;
	Префикс = Префикс + ": ";
	
	Элементы[ИмяЗаголовка].Заголовок = Префикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОформлениеСсылкиЗаявления(Форма, ЭлементИмя, Обязательно = Истина)
	
	СвойстваСкана  = СвойстваСкана(Форма, ЭлементИмя);
	ИмяБезПрефикса = СвойстваСкана.ИмяБезПрефикса;
	Размер 		  = 0;
	Количество    = 0;
	ИмяПервого    = "";
	
	Для каждого ФайлДокумента Из Форма[СвойстваСкана.ИмяТаблицы] Цикл
		
		ФайлДокумента = ФайлДокумента.Значение;
		Размер        = Размер + ФайлДокумента.Размер;
		Количество    = Количество + 1;
		ИмяПервого    = ФайлДокумента.ИсходноеИмя;
		
	КонецЦикла;
	
	ДокументооборотСКОКлиентСервер.ИзменитьОформлениеДокумента(
		Форма, 
		ИмяБезПрефикса, 
		Размер, 
		Количество, 
		ИмяПервого, 
		Форма.ЗапретитьИзменение, 
		Обязательно);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокументыВСоответствие(ТекущийОбъект, Ссылка, СоответствиеФайлов, Таблица)
	
	Для Каждого ЭлементСписка Из Таблица Цикл
		
		Документ    = ЭлементСписка.Значение.Документ;
		ИсходноеИмя = ЭлементСписка.Значение.ИсходноеИмя;
		Размер      = ЭлементСписка.Значение.Размер;
		Адрес       = ЭлементСписка.Значение.Адрес;
		
		Файл = Новый Файл(ИсходноеИмя);

		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов", 				Ссылка);
		ПараметрыФайла.Вставить("ИмяБезРасширения", 			Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", 			СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	ТекущаяУниверсальнаяДата());
		ПараметрыФайла.Вставить("Автор", 						Пользователи.ТекущийПользователь());
		ПараметрыФайла.Вставить("Адрес", 						Адрес);
		ПараметрыФайла.Вставить("Документ", 					Документ);
		ПараметрыФайла.Вставить("Размер", 						Размер);
		ПараметрыФайла.Вставить("ИсходноеИмя", 					ИсходноеИмя);
		
		Если ТипЗнч(ТекущийОбъект.ЭлектронныеДокументы) = Тип("Массив") Тогда
			СоответствиеФайлов.Добавить(ПараметрыФайла);
		Иначе
			НоваяСтрока = ТекущийОбъект.ЭлектронныеДокументы.Добавить();
			НоваяСтрока.Документ = Документ;
			НоваяСтрока.Размер   = Размер;
			НоваяСтрока.Файл     = РаботаСФайлами.НоваяСсылкаНаФайл(Ссылка);
			
			СоответствиеФайлов.Вставить(НоваяСтрока.Файл, ПараметрыФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти