#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Владелец) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрацииВНалоговомОргане.Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Владелец);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();

КонецФункции

// Определяет код территории по классификатору ОКТМО или ОКАТО,
// на котором организация или обособленное подразделение зарегистрирована по месту нахождения.
//
// Параметры:
//  РегистрацияВНалоговомОргане	 - СправочникСсылка.РегистрацииВНалоговомОргане
//  ТипКода	- Строка - "ОКТМО" или "ОКАТО"
//          - Дата - с даты применения ОКТМО будет возвращен код по ОКТМО, в остальных случаях - код по ОКАТО
// 
// Возвращаемое значение:
//  Строка - код территории
//
Функция КодТерритории(РегистрацияВНалоговомОргане, Знач ТипКода = "ОКТМО") Экспорт
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ТипКода) = Тип("Дата") И Год(ТипКода) < 2014 Тогда
		ТипКода = "ОКАТО";
	ИначеЕсли ТипКода <> "ОКАТО" Тогда
		ТипКода = "ОКТМО";
	КонецЕсли;
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПо" + ТипКода));
	
КонецФункции

Функция НайтиПоКодуТерритории(Организация, КодТерритории) Экспорт
	
	// Ищем по ОКАТО или ОКТМО - по чему найдем.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("КодТерритории",       КодТерритории);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
	|	ИСТИНА КАК НайденПоОКТМО,
	|	ЛОЖЬ КАК НайденПоОКАТО
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация
	|	И РегистрацииВНалоговомОргане.КодПоОКТМО = &КодТерритории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация
	|	И РегистрацииВНалоговомОргане.КодПоОКАТО = &КодТерритории
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		ОбластьПоиска = Неопределено;
	Иначе
		
		// Выберем более адекватный
		
		ИскатьПоОКТМО = ПлатежиВБюджетКлиентСервер.ЭтоКодОКТМО(КодТерритории);
		ИскатьПоОКАТО = ПлатежиВБюджетКлиентСервер.ЭтоКодОКАТО(КодТерритории);
		Если ИскатьПоОКТМО = ИскатьПоОКАТО Тогда
			ОбластьПоиска = Неопределено;
		ИначеЕсли ИскатьПоОКТМО Тогда
			ОбластьПоиска = "ОКТМО";
		Иначе
			ОбластьПоиска = "ОКАТО";
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		
		Результат = Выборка.Ссылка;
		
		Если (ОбластьПоиска = Неопределено)
			Или (ОбластьПоиска = "ОКТМО" И Выборка.НайденПоОКТМО)
			Или (ОбластьПоиска = "ОКАТО" И Выборка.НайденПоОКАТО) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПоКПП(Организация, КПП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("КПП",                 КПП);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &ГоловнаяОрганизация
	|	И РегистрацииВНалоговомОргане.КПП = &КПП";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция РегистрацияВНалоговомОргане(Владелец, КПП, КодНалоговогоОргана) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Владелец);
	Запрос.Параметры.Вставить("КПП", КПП);
	Запрос.Параметры.Вставить("Код", КодНалоговогоОргана);
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацииВНалоговомОргане.Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Организация
	|	И РегистрацииВНалоговомОргане.Код = &Код
	|	И &УсловиеПоКПП
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрацииВНалоговомОргане.КПП";
	
	Если ПустаяСтрока(КПП) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "ИСТИНА");
	ИначеЕсли Найти(КПП, "_") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "РегистрацииВНалоговомОргане.КПП ПОДОБНО &КПП");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКПП", "РегистрацииВНалоговомОргане.КПП = &КПП");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	
КонецФункции

Функция НайтиРегистрациюВНалоговомОргане(Организация, НалоговыйОрган) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НалоговыйОрган", НалоговыйОрган);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО (РегистрацииВНалоговомОргане.Код = Контрагенты.КодГосударственногоОргана)
		|ГДЕ
		|	Контрагенты.Ссылка = &НалоговыйОрган
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И Контрагенты.ГосударственныйОрган
		|	И Контрагенты.ВидГосударственногоОргана = ЗНАЧЕНИЕ(Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган)
		|	И РегистрацииВНалоговомОргане.Владелец = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат =  Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НаименованиеСлужебное(РегистрацияВНалоговомОргане) Экспорт

	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	
	// НаименованиеСлужебное определяется из наименования организации или ее обособленных подразделений в строгом порядке
	// Порядок (порядок - источник наименования):
	//	1 - НаименованиеПолное организации
	//	2 - НаименованиеПолное обособленного подразделения на отдельном балансе
	//	3 - НаименованиеПолное обособленного подразделения на общем балансе
	//	4 - Наименование организации
	//	5 - Наименование обособленного подразделения на отдельном балансе
	//	6 - Наименование обособленного подразделения на общем балансе
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное = """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 1
	|		КОГДА Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 2
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И НЕ Организации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.НаименованиеПолное = """"
	|			ТОГДА ПодразделенияОрганизаций.Наименование
	|		ИНАЧЕ ПодразделенияОрганизаций.НаименованиеПолное
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.НаименованиеПолное = """"
	|			ТОГДА 6
	|		ИНАЧЕ 3
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И ПодразделенияОрганизаций.ОбособленноеПодразделение
	|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Наименование УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;	
	
	// берем первое значение из выборки, т.к. она уже отсортирована по порядку
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Наименование;
	
КонецФункции  

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("Организация") Тогда
		Если ЗначениеЗаполнено(Параметры.Отбор.Организация) Тогда
			Параметры.Отбор.Организация = РегламентированнаяОтчетность.ГоловнаяОрганизация(Параметры.Отбор.Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоИспользуемые") И Параметры.ТолькоИспользуемые Тогда
		
		//выводим в список только те налоговые органы, которые выбраны в подразделениях данного региона
		
		НалоговыеОрганы = Новый СписокЗначений;
		
		Запрос = Новый Запрос;
		//при данном условии (ТолькоИспользуемые = Истина) в отборе обязательно будут организация и код региона, а параметрах - период
		Запрос.УстановитьПараметр("Организация", Параметры.Отбор.Владелец);
		Запрос.УстановитьПараметр("КодРегиона",  Параметры.Отбор.КодРегиона);
		Запрос.УстановитьПараметр("Период",      Параметры.Период);
		
		// В запросе выбираем действующие регистрации в налоговом органе подразделений организации
		// на выбранный период
		// Если истории регистраций по подразделению нет, то берем регистрации из подразделения
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ СтруктурныеЕдиницы
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.Ссылка = &Организация
		|			ИЛИ Организации.ГоловнаяОрганизация = &Организация)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка,
		|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.ОбособленноеПодразделение
		|	И ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтруктурныеЕдиницы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
		|ПОМЕСТИТЬ НезаполненнаяИстория
		|ИЗ
		|	СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
		|		ПО СтруктурныеЕдиницы.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
		|ГДЕ
		|	СтруктурныеЕдиницы.РегистрацияВНалоговомОргане.КодРегиона = &КодРегиона
		|	И ИсторияРегистрацийВНалоговомОргане.Период ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияНалоговыхОрганов.РегистрацияВНалоговомОргане КАК Ссылка
		|ИЗ
		|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
		|			&Период,
		|			СтруктурнаяЕдиница В
		|				(ВЫБРАТЬ
		|					СтруктурныеЕдиницы.Ссылка
		|				ИЗ
		|					СтруктурныеЕдиницы КАК СтруктурныеЕдиницы)) КАК ИсторияНалоговыхОрганов
		|ГДЕ
		|	ИсторияНалоговыхОрганов.РегистрацияВНалоговомОргане.КодРегиона = &КодРегиона
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НезаполненнаяИстория.РегистрацияВНалоговомОргане
		|ИЗ
		|	НезаполненнаяИстория КАК НезаполненнаяИстория";
				
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;	
		
		// результат запроса используем для отбора списка выбора
		// прямое заполнение данных выбора не используем, чтобы не отключать стандартную обработку
		НалоговыеОрганы.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		Параметры.Отбор.Вставить("Ссылка", НалоговыеОрганы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Код");
	Поля.Добавить("КПП");
	Поля.Добавить("НаименованиеСлужебное");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если  ЗначениеЗаполнено(Данные.КПП) И ЗначениеЗаполнено(Данные.НаименованиеСлужебное) Тогда
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ФНС %1 КПП %2 (%3)'"),
			Данные.Код, Данные.КПП, Данные.НаименованиеСлужебное);
	ИначеЕсли ЗначениеЗаполнено(Данные.КПП) Тогда
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ФНС %1 КПП %2'"),
			Данные.Код, Данные.КПП);
	Иначе
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ФНС %1'"),
			Данные.Код);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

// Процедура заполняет новые реквизиты справочника РегистрацииВНалоговомОргане:
// - КодРегиона (по коду налогового органа)
// - НаименованиеСлужебное (по наименованию подразделения, аналогично процедуре НаименованиеСлужебное())
// Обрабатываем все элементы справочника одной порцией, так как элементов в справочнике, как правило, совсем немного
Процедура ЗаполнитьКодыРегионовИСлужебныеНаименования(Параметры) Экспорт
	
	// НаименованиеСлужебное определяется из наименования организации или ее обособленных подразделений в строгом порядке
	// Порядок (порядок - источник наименования):
	//	1 - НаименованиеПолное организации
	//	2 - НаименованиеПолное обособленного подразделения на отдельном балансе
	//	3 - НаименованиеПолное обособленного подразделения на общем балансе
	//	4 - Наименование организации
	//	5 - Наименование обособленного подразделения на отдельном балансе
	//	6 - Наименование обособленного подразделения на общем балансе
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
	|	РегистрацииВНалоговомОргане.НаименованиеОбособленногоПодразделения КАК НаименованиеОбособленногоПодразделения,
	|	РегистрацииВНалоговомОргане.НаименованиеОбособленногоПодразделения <> """" КАК ЗаполненоНаименованиеПодразделения
	|ПОМЕСТИТЬ РегистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	(РегистрацииВНалоговомОргане.КодРегиона = 0
	|			ИЛИ РегистрацииВНалоговомОргане.НаименованиеСлужебное = """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное = """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК Наименование,
	|	ВЫБОР
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 1
	|		КОГДА Организации.ОбособленноеПодразделение
	|				И Организации.НаименованиеПолное <> """"
	|			ТОГДА 2
	|		КОГДА НЕ Организации.ОбособленноеПодразделение
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Порядок
	|ПОМЕСТИТЬ ИсточникиНаименованияНалоговыхОрганов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО Организации.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И (НЕ РегистрацииВНалоговомОргане.ЗаполненоНаименованиеПодразделения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.НаименованиеПолное = """"
	|			ТОГДА ПодразделенияОрганизаций.Наименование
	|		ИНАЧЕ ПодразделенияОрганизаций.НаименованиеПолное
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.НаименованиеПолное = """"
	|			ТОГДА 6
	|		ИНАЧЕ 3
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО ПодразделенияОрганизаций.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|ГДЕ
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение
	|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления
	|	И (НЕ РегистрацииВНалоговомОргане.ЗаполненоНаименованиеПодразделения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ИсточникиНаименованияНалоговыхОрганов.Наименование, РегистрацииВНалоговомОргане.НаименованиеОбособленногоПодразделения) КАК НаименованиеСлужебное,
	|	ЕСТЬNULL(ИсточникиНаименованияНалоговыхОрганов.Порядок, 0) КАК Порядок
	|ИЗ
	|	РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиНаименованияНалоговыхОрганов КАК ИсточникиНаименованияНалоговыхОрганов
	|		ПО РегистрацииВНалоговомОргане.Ссылка = ИсточникиНаименованияНалоговыхОрганов.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НаименованиеСлужебное УБЫВ
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаРегистраций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов      = ВыборкаРегистраций.Количество();
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 0;
		
	Пока ВыборкаРегистраций.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РегистрацииВНалоговомОргане");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаРегистраций.Ссылка);
			Блокировка.Заблокировать();
			
			РегистрацияВНалоговомОрганеОбъект = ВыборкаРегистраций.Ссылка.ПолучитьОбъект();
			
			// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
			Если РегистрацияВНалоговомОрганеОбъект = Неопределено
			 ИЛИ (РегистрацияВНалоговомОрганеОбъект.КодРегиона <> 0 И НЕ ПустаяСтрока(РегистрацияВНалоговомОрганеОбъект.НаименованиеСлужебное)) Тогда
				ОтменитьТранзакцию();
				Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
				Продолжить;
			КонецЕсли;
			
			РегистрацияВНалоговомОрганеОбъект.ЗаполнитьКодРегиона();

			Если ПустаяСтрока(РегистрацияВНалоговомОрганеОбъект.НаименованиеСлужебное) Тогда
				// берем НаименованиеСлужебное из первого элемента детальной выборки, т.к. она уже отсортирована по порядку
				ВыборкаНаименований = ВыборкаРегистраций.Выбрать();
				ВыборкаНаименований.Следующий();
				РегистрацияВНалоговомОрганеОбъект.НаименованиеСлужебное = ВыборкаНаименований.НаименованиеСлужебное;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РегистрацияВНалоговомОрганеОбъект);
			
			ЗафиксироватьТранзакцию();
			Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + 1;
		
		Исключение
			
			ОтменитьТранзакцию();
			
			// Обрабатываем исключение без вызова ошибки, чтобы защититься от неоправданного "блокирования" обработчика
			// после первого "неудачного" элемента справочника
			ЗаписьЖурналаРегистрации(
			 	ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
			 	Метаданные.Справочники.РегистрацииВНалоговомОргане,
				ВыборкаРегистраций.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = (Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов);
	
	// Если что-то не обработано, то вызовем исключение с информативным описанием итогового результата 
	Если Не Параметры.ОбработкаЗавершена Тогда
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаполнитьКодыРегионовИСлужебныеНаименования не удалось обработать некоторые регистрации в налоговом органе (пропущены): %1'"), 
	   		Параметры.ПрогрессВыполнения.ВсегоОбъектов - Параметры.ПрогрессВыполнения.ОбработаноОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

