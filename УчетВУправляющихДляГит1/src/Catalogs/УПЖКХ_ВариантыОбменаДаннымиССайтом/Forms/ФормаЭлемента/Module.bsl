
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписание()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеВебИнтеграция(Объект.РегламентноеЗадание, Объект.Наименование);
	
КонецФункции // ПолучитьРасписание()

&НаСервере
// Процедура управления видимостью.
//
Процедура УправлениеФормой()
	
	Если ПроверитьНаличиеПравНаИспользованиеРегламентныхЗаданий() Тогда
		
		Элементы.РасписаниеРегламентногоЗадания.Доступность = Объект.ИспользоватьРегламентноеЗадание;
		
	Иначе
		
		Элементы.ИспользоватьРегламентноеЗадание.Доступность = Ложь;
		Элементы.РасписаниеРегламентногоЗадания.Доступность  = Ложь;
		
		РасписаниеРегламентногоЗадания = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		
	КонецЕсли;
	
	// Гиперссылка на настройку сбора данных.
	УПЖКХ_ПодключаемыеЭлементыФормСервер.ДобавитьГиперссылкуНаНастройкуСбораДанныхПоНастройкеОбменаДанными(ЭтаФорма, Элементы.ГруппаНастройкаВыгрузкаДанныхПоЛС, Объект.НастройкаОбмена, Объект.ВыгрузкаДанныхПоЛС);
	
КонецПроцедуры // УправлениеФормой()

&НаСервереБезКонтекста
// Функция проверяет наличие прав для работы с регламентными заданиями.
Функция ПроверитьНаличиеПравНаИспользованиеРегламентныхЗаданий()
	
	Возврат ПравоДоступа("Администрирование", Метаданные);
	
КонецФункции

&НаКлиенте
// Актуализирует элементы формы на основании версии обмена.
//
Процедура АктуализироватьЭлементыФормыПоВерсииОбмена()
	
	// Проверяем заполнение настройки доступа.
	// Если не заполнена, то устанавливаем видимость по умолчанию.
	// Если заполнена, то получаем номер версии обмена с сайта.
	Если Объект.НастройкаДоступа.Пустая() Тогда
		
		Элементы.ЗагрузкаСведенийОбАккаунтах.Видимость = Ложь;
		Объект.ЗагрузкаСведенийОбАккаунтах = Ложь;
		
		Элементы.ВыгрузкаЭлектронныхПаспортов.Доступность = Ложь;
		Объект.ВыгрузкаЭлектронныхПаспортов = Ложь;
		
	Иначе
		
		СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(Объект.НастройкаДоступа);
		
		Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 3 Тогда
			
			Элементы.ЗагрузкаСведенийОбАккаунтах.Видимость = Истина;
			
			Элементы.ВыгрузкаЭлектронныхПаспортов.Видимость = Ложь;
			Объект.ВыгрузкаЭлектронныхПаспортов = Ложь;
			
		Иначе
			
			Элементы.ЗагрузкаСведенийОбАккаунтах.Видимость = Ложь;
			Объект.ЗагрузкаСведенийОбАккаунтах = Ложь;
			
			Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 И НЕ СтруктураИнформацииОСайте.МассивУстановленныхНаСайтеМодулей.Найти(УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьНаименованиеМодуляЭПДНаСайте()) = Неопределено Тогда
				Элементы.ВыгрузкаЭлектронныхПаспортов.Видимость = Истина;
				Элементы.ВыгрузкаЭлектронныхПаспортов.Доступность = Истина;
			Иначе
				Элементы.ВыгрузкаЭлектронныхПаспортов.Видимость = Истина;
				Элементы.ВыгрузкаЭлектронныхПаспортов.Доступность = Ложь;
				Объект.ВыгрузкаЭлектронныхПаспортов = Ложь;
			КонецЕсли;
			
			Если НЕ СтруктураИнформацииОСайте.НомерБилда = 1 И СтруктураИнформацииОСайте.МассивУстановленныхНаСайтеМодулей.Найти(УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьНаименованиеМодуляОплатНаСайте()) = Неопределено Тогда
				Элементы.ЗагрузкаРеестраПлатежей.Доступность = Ложь;
			Иначе
				Элементы.ЗагрузкаРеестраПлатежей.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверяет правильность заполнения указанных настроек перед записью элемента справочника.
//
Процедура ПроверитьЗаполнениеНастроекПередЗаписью(Отказ)
	
	Отказ = НЕ Объект.ВыгрузкаДанныхПоЛС
		  И НЕ Объект.ВыгрузкаЭлектронныхПаспортов
		  И НЕ Объект.ЗагрузкаПоказанийПУ
		  И НЕ Объект.ЗагрузкаРеестраПлатежей
		  И НЕ Объект.ЗагрузкаСведенийОбАккаунтах
		  И НЕ Объект.ЗагрузкаЗаявокАДС;
	
	Если Отказ Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран ни один вид обмена данными с сайтом. Пожалуйста, укажите, какими именно данными необходимо обмениваться.", Отказ, "Не выбран ни один вид обмена", СтатусСообщения.Внимание, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РасписаниеРегламентногоЗадания = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(Объект.РегламентноеЗадание, Объект.ИспользоватьРегламентноеЗадание);
	
	УправлениеФормой();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	АктуализироватьЭлементыФормыПоВерсииОбмена();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Устанавливаем настройки регламентного задания, только если имеется право "Администрирование".
	ПроверитьЗаполнениеНастроекПередЗаписью(Отказ);
	
	Если НЕ Отказ Тогда
		
		Если ПроверитьНаличиеПравНаИспользованиеРегламентныхЗаданий() Тогда
			
			УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьПараметрыРегламентногоЗаданияВебИнтеграция(Объект.РегламентноеЗадание, Объект.Код);
			
		Иначе
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Нет прав на использование регламентного задания. Изменения в регламентом задании не будут сохранены.");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик нажатия надписи "РасписаниеРегламентногоЗадания".
//
Процедура РасписаниеРегламентногоЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(Неопределено, "Перед редактированием настроек расписания необходимо записать элемент!", , "Внимание");
		Возврат;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписание());
	
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияНажатиеЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Процедура завершения обработки оповещения редактирования расписания регл. задания.
//
Процедура РасписаниеРегламентногоЗаданияНажатиеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
		
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(Объект.РегламентноеЗадание, Диалог.Расписание);
		
		РасписаниеРегламентногоЗадания = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(Объект.РегламентноеЗадание, Объект.ИспользоватьРегламентноеЗадание);
		
	КонецЕсли;
	
КонецПроцедуры // РасписаниеРегламентногоЗаданияНажатие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ИспользоватьРегламентноеЗадание".
//
Процедура ИспользоватьРегламентноеЗаданиеПриИзменении(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТектсПредупреждения = "Перед редактированием настроек расписания необходимо записать элемент!";
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ИспользоватьРегламентноеЗаданиеПриИзмененииЗавершение", ЭтотОбъект), ТектсПредупреждения, , "Внимание");
		Возврат;
		
	КонецЕсли;
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПодготовитьРегламентноеЗаданиеВебИнтеграция(Объект.РегламентноеЗадание, Объект.ИспользоватьРегламентноеЗадание, Объект.Наименование);
	
	РасписаниеРегламентногоЗадания = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(Объект.РегламентноеЗадание, Объект.ИспользоватьРегламентноеЗадание);
	
	УправлениеФормой();
	
КонецПроцедуры // ИспользоватьРегламентноеЗаданиеПриИзменении()

&НаКлиенте
// Обработчик оповещения после события "ПриИзменении" флага "ИспользоватьРегламентноеЗадание".
//
Процедура ИспользоватьРегламентноеЗаданиеПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	Объект.ИспользоватьРегламентноеЗадание = Не Объект.ИспользоватьРегламентноеЗадание;
	
КонецПроцедуры // ИспользоватьРегламентноеЗаданиеПриИзмененииЗавершение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	АктуализироватьЭлементыФормыПоВерсииОбмена();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыгрузкаДанныхПоЛС".
//
Процедура ВыгрузкаДанныхПоЛСПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкаОбмена".
//
Процедура НастройкаОбменаПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
