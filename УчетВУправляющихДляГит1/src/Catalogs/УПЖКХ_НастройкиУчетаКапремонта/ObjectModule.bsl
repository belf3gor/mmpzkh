////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

#Область ОбработчикиСобытийОбъекта

// Процедура - обработчик события "ПриЗаписи" объекта.
//
Процедура ПередЗаписью(Отказ)
	
	// Предназначена для проверки корректности программно добавляемых элементов.
	Если Ссылка.Пустая() Тогда
		Если Владелец.Пустая() Тогда
			ТекстОшибки = "Создание элемента с незаполненной организацией запрещено!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		//ИначеЕсли НЕ ПолучитьЭлементПоДаннойОрганизации().Пустая() Тогда
		ИначеЕсли НЕ Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Владелец) = Неопределено Тогда
			ТекстОшибки = "Для организации " + Владелец + " в базе уже создан элемент." + Символы.ПС
						+ "Создание нескольких элементов с одинаковыми организациями запрещено!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		Иначе
			// Заполняем наименование только при программном создании элемента.
			Наименование = Справочники.УПЖКХ_НастройкиУчетаКапремонта.СформироватьНаименованиеЭлемента(Владелец);
		КонецЕсли;
	КонецЕсли;
	
	Если ВестиРаздельныйУчетПоУслугамКапремонта Тогда
		СвернутьТаблицуУслугКапремонтаИУдалитьПустыеСтроки();
		Если Услуги.Количество() = 0 Тогда
			ВестиРаздельныйУчетПоУслугамКапремонта = Ложь;
			Если ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами Тогда
				ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами = Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Услуги.Количество() > 0 Тогда
		// Если флаг "ВестиРаздельныйУчетПоУслугамКапремонта" снят
		// и таблица услуга капремонта заполнена, то очищаем её.
		Услуги.Очистить();
		Если ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами Тогда
			ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПроцедурыИФункции

// Процедура предназначена для свертки таблицы услуг объекта справочника.
Процедура СвернутьТаблицуУслугКапремонтаИУдалитьПустыеСтроки()
	
	Если Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Услуги.Свернуть("Услуга");
	
	ПустаяСтрока = Услуги.Найти(Справочники.КВП_Услуги.ПустаяСсылка(), "Услуга");
	Если Не ПустаяСтрока = Неопределено Тогда
		Услуги.Удалить(ПустаяСтрока);
	КонецЕсли;
	
КонецПроцедуры // СвернутьТаблицуУслугКапремонтаИУдалитьПустыеСтроки()

#КонецОбласти
