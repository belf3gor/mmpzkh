////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта" Тогда
		Элементы.Список.Обновить();
		ОбновитьПредставлениеКнопкиДействияНастройкиУчета();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события "СписокПриАктивизацииСтроки" таблицы "Список".
//
&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьПредставлениеКнопкиДействияНастройкиУчета();
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

// Процедура - обработчик события "ПередНачаломДобавления" таблицы "Список".
//
&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Отключаем стандартную обработку события.
	Отказ = Истина;
	
	// 1.Получаем список организаций, для которых не созданы элементы в справочнике "Настройки учета капремонта".
	// Без учета организаций которые помечены на удаление.
	СписокОрганизацийБезЭлементов = ПолучитьСписокОрганизацийБезЭлементов();
	Если СписокОрганизацийБезЭлементов.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Настройки учета по услугам капитального ремонта уже заданы для всех организаций!");
		Возврат;
	ИначеЕсли СписокОрганизацийБезЭлементов.Количество() = 1 Тогда
		ВыбранноеЗначение = СписокОрганизацийБезЭлементов[0].Значение;
	Иначе
		// 2. Открываем форму выбор справочника "Организации" с отбором по организациям, полученным в п.1.
		ФормаВыбора = ПолучитьФорму("Справочник.Организации.Форма.ФормаВыбора");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокОрганизацийБезЭлементов,
																ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
																РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		ФормаВыбора.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		
		ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
		
	КонецЕсли;
	
	// 3. Если организация не заполнена, то не создаем новый элемент справочника.
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// 4. Заполнение параметров открытия формы объекта справочника.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", ВыбранноеЗначение);
	Если Копирование Тогда
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.Список.ТекущаяСтрока);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры // СписокПередНачаломДобавления()

// Процедура - обработчик события "Нажатие" кнопки "РедактироватьПометкуНаУдаление" командной панели формы.
//
&НаКлиенте
Процедура РедактироватьПометкуНаУдалениеЭлемента(Команда)
	
	РедактироватьПометкуНаУдалениеПоСсылке(Элементы.Список.ТекущаяСтрока, Элементы.Список.ТекущиеДанные.Действует);
	
	Элементы.Список.Обновить();
	
	ОбновитьПредставлениеКнопкиДействияНастройкиУчета();
	
	Оповестить("ЗаписаныНастройкиУчетаКапремонта", Элементы.Список.ТекущиеДанные.Организация);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеЭлемента()

// Процедура - обработчик события "ПередНачаломИзменения" таблицы "Список".
//
&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные.Действует Тогда
		
		Оповещение = Новый ОписаниеОповещения("СписокПередНачаломИзмененияЗавершение", ЭтотОбъект, Элемент);
		
		ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
					 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // СписокПередНачаломИзменения()

&НаКлиенте
Процедура СписокПередНачаломИзмененияЗавершение(Результат, Элемент) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РедактироватьПометкуНаУдалениеПоСсылке(Элемент.ТекущаяСтрока, Элемент.ТекущиеДанные.Действует);
		
		Элементы.Список.Обновить();
		
		ОбновитьПредставлениеКнопкиДействияНастройкиУчета();
		
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущаяСтрока), ЭтаФорма);
		
	КонецЕсли;

КонецПроцедуры // СписокПередНачаломИзменения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

// Процедура предназначена для обновления заголовка кнопки "РедактироватьПометкуНаУдалениеЭлемента".
//
&НаКлиенте
Процедура ОбновитьПредставлениеКнопкиДействияНастройкиУчета()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.РедактироватьПометкуНаУдалениеЭлемента.Доступность = Ложь;
		Элементы.РедактироватьПометкуНаУдалениеЭлемента.Видимость   = Ложь;
	Иначе
		Элементы.РедактироватьПометкуНаУдалениеЭлемента.Доступность = Истина;
		Элементы.РедактироватьПометкуНаУдалениеЭлемента.Видимость   = Истина;
		Элементы.РедактироватьПометкуНаУдалениеЭлемента.Заголовок = ?(ТекущиеДанные.Действует,
																	  "Отменить действие настройки",
																	  "Включить действие настройки");
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПредставлениеКнопкиДействияНастройкиУчета()

// Предназначена для получения списка организаций, для которых в базе не созданы 
// элементы справочника "УПЖКХ_НастройкиУчетаКапремонта".
&НаСервереБезКонтекста
Функция ПолучитьСписокОрганизацийБезЭлементов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиУчетаКапремонта.Владелец КАК Организация
	|ПОМЕСТИТЬ втОрганизацииСЭлементом
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУчетаКапремонта КАК УПЖКХ_НастройкиУчетаКапремонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Ссылка В
	|				(ВЫБРАТЬ
	|					втОрганизацииСЭлементом.Организация
	|				ИЗ
	|					втОрганизацииСЭлементом КАК втОрганизацииСЭлементом)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокОрганизаций = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Организация);
	КонецЦикла;
	
	Возврат СписокОрганизаций;
	
КонецФункции // ПолучитьСписокОрганизацийБезЭлементов()

// Предназначена для редактирования пометки на удаление элемента с указанной ссылкой.
//
&НаСервереБезКонтекста
Процедура РедактироватьПометкуНаУдалениеПоСсылке(Ссылка, Действует)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(Ссылка, Действует);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылке()

#КонецОбласти