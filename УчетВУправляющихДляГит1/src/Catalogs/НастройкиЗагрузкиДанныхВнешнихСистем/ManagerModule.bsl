// В целом, подсистема ТранспортИнтернетПоддержкаПользователей поддерживает работу с неограниченным числом внешних систем.
// Однако, существенная часть кода этого справочника разработана исходя из ограничения, что эта система ровно одна.
// При необходимости подключения второй системы в этот код может потребоваться внести значимые изменения.

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОграничениеSmartway

// Эти функции - часть кода, ограничивающего использование модуля одной внешней системой.
// При необходимости подключить вторую, не следует копировать эти функции.
// Следует
// - ОбменДаннымиСВнешнимиСистемамиБПКлиентСервер.ИдентификаторСистемыSmartway 
//   сделать непубличной, поместить в раздел ИзвестныеВнешниеСистемы
// - от остальных - избавиться.

Функция ИспользуемаяНастройкаSmartway() Экспорт
	
	Возврат ИспользуемаяНастройка(ОбменДаннымиСВнешнимиСистемамиБПКлиентСервер.ИдентификаторСистемыSmartway());
	
КонецФункции

#КонецОбласти

#Область СохраненныеДанныеНастройки

Функция ЗагружаютсяДанныеВнешнихСистем() Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(ИспользуемаяНастройкаSmartway());
	
КонецФункции

Функция ИспользуемаяНастройка(ИдентификаторСистемы) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.НастройкиЗагрузкиДанныхВнешнихСистем) 
		Или Не ПравоДоступа("Чтение", Метаданные.Справочники.СеансыЗагрузкиДанныхВнешнихСистем) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСистемы", ИдентификаторСистемы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Настройки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиЗагрузкиДанныхВнешнихСистем КАК Настройки
	|ГДЕ
	|	Настройки.ИдентификаторСистемы = &ИдентификаторСистемы
	|	И НЕ Настройки.Отключено";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// Выберем наиболее живую - с момента получения данных по которой прошло меньше всего времени
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСистемы", ИдентификаторСистемы);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Настройки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	Справочник.НастройкиЗагрузкиДанныхВнешнихСистем КАК Настройки
	|ГДЕ
	|	Настройки.ИдентификаторСистемы = &ИдентификаторСистемы
	|	И НЕ Настройки.Отключено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Сеансы.ДатаЗавершения КАК ДатаЗавершения,
	|	Настройки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Сеансы
	|ИЗ
	|	Справочник.СеансыЗагрузкиДанныхВнешнихСистем КАК Сеансы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Настройки КАК Настройки
	|		ПО Сеансы.Владелец = Настройки.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗавершения УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Сеансы.Ссылка КАК Ссылка
	|ИЗ
	|	Сеансы КАК Сеансы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройки.Ссылка
	|ИЗ
	|	Настройки КАК Настройки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ОписаниеСистемы(Настройка) Экспорт
	
	Описание = НовыйОписаниеВнешнейСистемы();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка", Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.ИдентификаторСистемы КАК ИдентификаторСистемы,
	|	Настройки.НаименованиеСистемы КАК НаименованиеСистемы,
	|	Настройки.ОписаниеСистемы КАК ОписаниеСистемы,
	|	Настройки.РасписаниеЗагрузки КАК РасписаниеЗагрузки,
	|	Настройки.АдресКодПодтверждения КАК АдресКодПодтверждения
	|ИЗ
	|	Справочник.НастройкиЗагрузкиДанныхВнешнихСистем КАК Настройки
	|ГДЕ
	|	Настройки.Ссылка = &Настройка";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Описание, Выборка, , "РасписаниеЗагрузки, ОписаниеСистемы");
		Если ЗначениеЗаполнено(Выборка.РасписаниеЗагрузки) Тогда
			Попытка
				Описание.РасписаниеЗагрузки = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.РасписаниеЗагрузки);
			Исключение
				// не является сколь-либо значимой проблемой, поэтому не записываем в журнал
			КонецПопытки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ОписаниеСистемы) Тогда
			Попытка
				Описание.ОписаниеСистемы = ОбщегоНазначения.ЗначениеИзСтрокиXML(Выборка.ОписаниеСистемы);
			Исключение
				// не является сколь-либо значимой проблемой, поэтому не записываем в журнал
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьОписаниеВнешнейСистемыДаннымиКонфигурации(Описание);
	
	Возврат Описание;
	
КонецФункции

Функция НовыйОписаниеВнешнейСистемы() Экспорт
	
	// См. ОбменДаннымиСВнешнимиСистемамиБП.ОписаниеВнешнихСистем()
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторСистемы",      "");
	Описание.Вставить("НаименованиеСистемы",       ""); // в БИП - "Наименование"
	Описание.Вставить("ОписаниеСистемы",           Новый ФорматированнаяСтрока(""));
	Описание.Вставить("РасписаниеЗагрузки",        Новый РасписаниеРегламентногоЗадания);
	Описание.Вставить("АдресКодПодтверждения",     "");
	Описание.Вставить("ОписаниеЗагружаемыхДанных", "");// с учетом возможностей конфигурации
	
	Возврат Описание;
	
КонецФункции

Функция КодРазрешения(Настройка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Код");
КонецФункции

// Определяет, насколько актуальны данные информационной базы - т.е. как давно был выполнен успешный запрос данных внешней системы.
// Запрос, показавший, что у внешней системы нет данных, считается успешным.
//
// Следует иметь в виду, что в результате такого запроса не создается сеанс загрузки данных 
// и данные из Справочники.СеансыЗагрузкиДанныхВнешнихСистем.ЛокальнаяДатаЗагрузки могут не соответствовать результату этой функции
//
// Запросы до момента первого получения данных по настройке не считаются успешными, так как до этого момента у сервиса передачи данных
// нет сведений о завершении настройки обмена с внешней системой.
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиЗагрузкиДанныхВнешнихСистем - настройка, с помощью которой загружаются данные
//
// Возвращаемое значение:
//  Число - время в секундах с крайнего успешного запроса данных внешней системы
//
Функция АктуальностьДанных(Настройка) Экспорт
	
	Возврат ТекущаяУниверсальнаяДата() - ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "КрайнийЗапрос");
	
КонецФункции

#КонецОбласти

#Область НастройкаСервисаИнтернетПоддержки

// Определяет сведения об активности внешней системы.
// При необходимости, обращается к сервису интернет-поддержки.
// Внешняя система считается активной, если она хотя бы раз передала данные.
// См. также АктуальностьДанных()
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиЗагрузкиДанныхВнешнихСистем - проверяемая настройка обмена с внешней системой
// 
// Возвращаемое значение:
//  Булево - Ложь, если сведений об активности системы нет
//  Строка - информация о внутренней ошибке сервиса, которая может быть специальным образом обработана вызывающим кодом:
//           * "НетИнтернетПоддержки",
//           * "Отключено"
//  В случае иных ошибок сервиса выдается исключение с текстом для вывода пользователю
//
Функция ВнешняяСистемаАктивна(Настройка) Экспорт
	
	Если ЗначениеЗаполнено(Справочники.СеансыЗагрузкиДанныхВнешнихСистем.КрайнийСеансЗагрузки(Настройка)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОтветСервиса = ВнешняяСистемаАктивнаЗапросСервиса(КодРазрешения(Настройка));
	Если ТипЗнч(ОтветСервиса) = Тип("Строка") Тогда
		ЗаписатьОтключениеВнешнейСистемы(ОтветСервиса, Настройка);
		Возврат ОтветСервиса;
	КонецЕсли;
	
	Если ОтветСервиса = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект = Справочники.СеансыЗагрузкиДанныхВнешнихСистем.СоздатьЭлемент();
	Объект.Владелец = Настройка;
	Объект.ДатаНачала     = ТекущаяУниверсальнаяДата();
	Объект.ДатаЗавершения = Объект.ДатаНачала;
	Объект.Записать();
	
	Справочники.Билеты.ВключитьИспользование();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область РегулярныйОбмен

Процедура ЗагрузитьПоРасписанию() Экспорт // обработчик регламентного задания
	
	Настройка = ИспользуемаяНастройкаSmartway();
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		ОтключитьРегламентноеЗадание();
		Возврат;
	КонецЕсли;
	
	Если Не ТребуетсяВыполнениеРегламентногоЗаданияПослеОперативнойЗагрузки(АктуальностьДанных(Настройка)) Тогда
		// Данные достаточно актуальны - получены оперативно
		// (с момента актуализации прошло меньше времени, чем интервал расписания регламентного задания)
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанные(Настройка);
	
КонецПроцедуры

// Загружает с сервиса интернет-поддержки данные, переданные внешней системой.
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиЗагрузкиДанныхВнешнихСистем - настройка системы, данные которой нужно загрузить
// 
// Возвращаемое значение:
//  Структура - результат загрузки - см. НовыйРезультатЗагрузки
//  Строка - информация о внутренней ошибке сервиса, не позволившей загрузить какие-либо данные
//           * "НетИнтернетПоддержки" - код описания ошибки сервиса для выполнения действий на клиенте
//           * остальные строки       - текст описания ошибки сервиса для вывода пользователю
//
Функция ЗагрузитьДанные(Настройка) Экспорт
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Возврат "НетИнтернетПоддержки";
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Настройка);
	Исключение
		// Данные получаются другим потоком
		Возврат НовыйРезультатЗагрузки();
	КонецПопытки;
	
	Сеанс = Справочники.СеансыЗагрузкиДанныхВнешнихСистем.СоздатьЭлемент();
	Сеанс.Владелец   = Настройка;
	Сеанс.ДатаНачала = ТекущаяУниверсальнаяДата();
	
	// В рамках сеанса может быть загружено множество файлов
	
	ОшибкаПолученияФайла    = "";   // ошибка получения файла прерывает загрузку
	ЕстьОшибкиОбработки     = Ложь; // ошибка загрузки данных из файла - не прерывает (файл будет сохранен для дальнейшей обработки)
	ТипыЗагруженныхОбъектов = Новый Соответствие;
	
	Для НомерФайла = 1 По ЛимитФайловЗаСеанс() Цикл
		
		РезультатЗагрузкиФайла = ЗагрузитьФайл(Сеанс);
		
		Если Не ПустаяСтрока(РезультатЗагрузкиФайла.ОшибкаПолученияФайла) Тогда
			ОшибкаПолученияФайла = РезультатЗагрузкиФайла.ОшибкаПолученияФайла;
			Прервать;
		КонецЕсли;
		
		ЕстьОшибкиОбработки = ЕстьОшибкиОбработки Или РезультатЗагрузкиФайла.ЕстьОшибкиОбработкиФайла;
		
		Если РезультатЗагрузкиФайла.ФайлПолучен Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ТипыЗагруженныхОбъектов, РезультатЗагрузкиФайла.ТипыЗагруженныхОбъектов, Истина);
		КонецЕсли;
		
		Если Не РезультатЗагрузкиФайла.ФайлПолучен 
			Или Не РезультатЗагрузкиФайла.ЕстьСледующий Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ФатальнаяОшибка = Сеанс.ЭтоНовый() И Не ПустаяСтрока(ОшибкаПолученияФайла); // Ошибка при получении первого файла
	Если Не ФатальнаяОшибка Тогда
		ЗарегистрироватьКрайнийЗапрос(Настройка);
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Настройка);
	
	Если Сеанс.ЭтоНовый() И Не ПустаяСтрока(ОшибкаПолученияФайла) Тогда
		ЗаписатьОтключениеВнешнейСистемы(ОшибкаПолученияФайла, Настройка);
		Возврат ОшибкаПолученияФайла;
	КонецЕсли;
	
	ВключеноИспользованиеБилетов = Ложь;
	Если Не Сеанс.ЭтоНовый() Тогда
		ВключеноИспользованиеБилетов = Справочники.Билеты.ВключитьИспользование();
	КонецЕсли;
	
	Результат = НовыйРезультатЗагрузки();
	Результат.Сеанс = Сеанс.Ссылка;
	Если ЗначениеЗаполнено(Сеанс.ДатаЗавершения) Тогда
		Результат.ДатаЗавершения = МестноеВремя(Сеанс.ДатаЗавершения);
	КонецЕсли;
	Результат.ЕстьОшибки = ЕстьОшибкиОбработки;
	Для Каждого КлючИЗначение Из ТипыЗагруженныхОбъектов Цикл
		Результат.ТипыЗагруженныхОбъектов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	Результат.ОбновитьИнтерфейс = ВключеноИспользованиеБилетов;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиДлительныхОпераций

// Запрашивает у сервиса интернет-поддержки активность внешней системы (в длительной операции)
//
// Параметры:
//  Параметры        - Структура -
//                      * Настройка - настройка загрузки из внешней системы, активность которой нужно проверить
//  АдресРезультата	 - Строка - адрес во временном хранилище, куда помещен результат.
//                     Содержимое временного хранилища - см. ВнешняяСистемаАктивна()
//
Процедура ЗапроситьАктивностьВнешнейСистемы(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(ВнешняяСистемаАктивна(Параметры.Настройка), АдресРезультата);
	
КонецПроцедуры

// Запрашивает у сервиса интернет-поддержки описание внешней системы (в длительной операции)
//
// Параметры:
//  Параметры        - Структура -
//                      * ИдентификаторСистемы - идентификатор внешней системы, описание которой нужно предоставить
//  АдресРезультата  - Строка - адрес во временном хранилище, куда помещен результат.
//                     Содержимое временного хранилища - см. ПоставляемоеОписание()
//
Процедура ЗапроситьПоставляемоеОписаниеВнешнейСистемы(Параметры, АдресРезультата) Экспорт
	
	Описание = ПоставляемоеОписание(Параметры.ИдентификаторСистемы);
	ПоместитьВоВременноеХранилище(Описание, АдресРезультата);
	
КонецПроцедуры

// Запрашивает у сервиса интернет-поддержки данные, переданные внешней системой, и загружает их (в длительной операции)
//
// Параметры:
//  Параметры        - Структура -
//                      * Настройка - настройка загрузки из внешней системы
//  АдресРезультата	 - Строка - адрес во временном хранилище, куда помещен результат.
//                     Содержимое временного хранилища - см. ЗагрузитьДанные()
//
Процедура ЗагрузитьВФоне(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(ЗагрузитьДанные(Параметры.Настройка), АдресРезультата);
	
КонецПроцедуры

// Запрашивает у сервиса интернет-поддержки описание внешней системы, и сохраняет его в настройке загрузки
// (в длительной операции)
//
// Параметры:
//  Параметры        - Структура -
//                      * Настройка - настройка загрузки из внешней системы, характеризующая внешнюю систему
//  АдресРезультата	 - Строка - адрес во временном хранилище, куда помещен результат.
//                     Содержимое временного хранилища - см. ОбновитьПоставляемоеОписаниеВнешнейСистемы()
//
Процедура ОбновитьПоставляемоеОписаниеВнешнейСистемыВФоне(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(ОбновитьПоставляемоеОписаниеВнешнейСистемы(Параметры.Настройка), АдресРезультата);
	
КонецПроцедуры

// Запрашивает у сервиса интернет-поддержки идентификатор новой настройки обмена и сохраняет его
// (в длительной операции)
//
// Параметры:
//  Параметры        - Структура -
//                      * ИдентификаторСистемы - идентификатор подключаемой внешней системы
//  АдресРезультата	 - Строка - адрес во временном хранилище, куда помещен результат.
//                     Содержимое временного хранилища - см. ПодключитьВнешнююСистему()
//
Процедура ПодключитьВнешнююСистемуВФоне(Параметры, АдресРезультата) Экспорт
	
	Результат = ПодключитьВнешнююСистему(Параметры.ИдентификаторСистемы);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Запрашивает у сервиса интернет-поддержки отключение обмена.
//
// Параметры:
//  Параметры        - Структура -
//                      * Настройка - настройка загрузки из внешней системы, работу которой следует прекратить
//  АдресРезультата	 - Строка - адрес во временном хранилище, куда помещен результат.
//                     Содержимое временного хранилища - см. Отключить()
//
Процедура ЗапроситьОтключение(Параметры, АдресРезультата) Экспорт
	
	ПоместитьВоВременноеХранилище(Отключить(Параметры.Настройка), АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодключениеВнешнейСистемы

Функция НовыйКодРазрешения(ИдентификаторСистемы)
	
	АдресОтветаСервиса = ПоместитьВоВременноеХранилище(Неопределено);
	ПараметрыЗапроса   = Новый Структура;
	ПараметрыЗапроса.Вставить("ИдентификаторСистемы", ИдентификаторСистемы);
	ПараметрыЗапроса.Вставить("ОписаниеНастройки",    Константы.ЗаголовокСистемы.Получить());
	
	ОбменДаннымиСВнешнимиСистемамиБП.ПолучитьИдентификаторОбменДанными(ПараметрыЗапроса, АдресОтветаСервиса);
	
	ОтветСервиса = ПолучитьИзВременногоХранилища(АдресОтветаСервиса);
	
	ОбрабатываемыеОшибки = Новый Массив;
	ОбрабатываемыеОшибки.Добавить("НетИнтернетПоддержки");
	Ошибка = ОшибкаИнтернетПоддержки(ОтветСервиса, ОбрабатываемыеОшибки);
	Если Не ПустаяСтрока(Ошибка)  Тогда
		Возврат Ошибка;
	Иначе
		Возврат ОтветСервиса.Идентификатор;
	КонецЕсли;
	
КонецФункции

// Запрашивает на сервисе интернет-поддержки описание внешней системы.
//
// Параметры:
//  ИдентификаторСистемы - Строка - идентификатор системы, описание которой нужно предоставить
// 
// Возвращаемое значение:
//  Структура - описание внешней системы - см. НовыйОписаниеВнешнейСистемы
//  Строка - информация о внутренней ошибке сервиса, которая может быть специальным образом обработана вызывающим кодом:
//           * "НетИнтернетПоддержки"
//  В случае иных ошибок сервиса выдается исключение с текстом для вывода пользователю
//
Функция ПоставляемоеОписание(ИдентификаторСистемы)
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Возврат "НетИнтернетПоддержки";
	КонецЕсли;
	
	Отбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСистемы);
	ОтветСервиса = ОбменДаннымиСВнешнимиСистемамиБП.ДоступныеВнешниеСистемы(Отбор);
	
	ОбрабатываемыеОшибки = Новый Массив;
	ОбрабатываемыеОшибки.Добавить("НетИнтернетПоддержки");
	Ошибка = ОшибкаИнтернетПоддержки(ОтветСервиса, ОбрабатываемыеОшибки);
	Если Не ПустаяСтрока(Ошибка)  Тогда
		Возврат Ошибка;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОтветСервиса.ДанныеВнешнихСистем) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить информацию о внешней системе'");
	КонецЕсли;
	
	ДанныеСервиса = ОтветСервиса.ДанныеВнешнихСистем[0];
	
	Описание = НовыйОписаниеВнешнейСистемы();
	ЗаполнитьЗначенияСвойств(Описание, ДанныеСервиса);
	Описание.НаименованиеСистемы   = ДанныеСервиса.Наименование;
	Описание.АдресКодПодтверждения = ДанныеСервиса.СсылкаНаВнешнююСистему;
	
	// БИП передает строку по правилам HTML
	ПостроительОписания = Новый ФорматированныйДокумент;
	ПостроительОписания.УстановитьHTML(ДанныеСервиса.ОписаниеСистемы, Новый Структура);
	Описание.ОписаниеСистемы = ПостроительОписания.ПолучитьФорматированнуюСтроку();
	
	ДополнитьОписаниеВнешнейСистемыДаннымиКонфигурации(Описание);
	
	Возврат Описание;
	
КонецФункции

// Обновляет сохраненное в информационной базе описание внешней системы - приводит в соответствие с поставляемым сервисом.
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиЗагрузкиДанныхВнешнихСистем - настройка системы, описание которой нужно обновить.
// 
// Возвращаемое значение:
//  Булево - Истина, если описание изменено; Ложь - если описание было актуальным
//  Строка - информация о внутренней ошибке сервиса, которая может быть специальным образом обработана вызывающим кодом:
//           * "НетИнтернетПоддержки"
//  В случае иных ошибок сервиса выдается исключение с текстом для вывода пользователю
//
Функция ОбновитьПоставляемоеОписаниеВнешнейСистемы(Настройка)
	
	ИдентификаторСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "ИдентификаторСистемы");
	ПоставляемоеОписание = ПоставляемоеОписание(ИдентификаторСистемы);
	Если ТипЗнч(ПоставляемоеОписание) <> Тип("Структура") Тогда
		// Ошибка сервиса
		Возврат ПоставляемоеОписание;
	КонецЕсли;
	
	СохраненноеОписание = ОписаниеСистемы(Настройка);
	
	Изменения = Новый Структура;
	
	Для Каждого ЭлементОписания Из ПоставляемоеОписание Цикл
		
		Если ЭлементОписания.Ключ = "РасписаниеЗагрузки" Тогда
			// БИП передает рандомизированное расписание, предназначенное исключительно для первоначального заполнения
			Продолжить;
		КонецЕсли;
			
		Если СохраненноеОписание[ЭлементОписания.Ключ] = ЭлементОписания.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОписания.Ключ = "ОписаниеСистемы" Тогда
			
			Изменения.Вставить(ЭлементОписания.Ключ, ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОписания.Значение));
			
		Иначе
			
			Изменения.Вставить(ЭлементОписания.Ключ, ЭлементОписания.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьИзменения = ЗначениеЗаполнено(Изменения);
	
	Если ЕстьИзменения Тогда
		Объект = Настройка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, Изменения);
		Объект.Записать();
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

// Начинает подключение внешней системы - запрашивает код подключения.
//
// Параметры:
//  ИдентификаторСистемы - Строка - идентификатор системы, которую нужно подключить
// 
// Возвращаемое значение:
//  СправочникСсылка.НастройкиЗагрузкиДанныхВнешнихСистем - созданная настройка загрузки; содержит выданный код подключения
//  Строка - информация о внутренней ошибке сервиса, которая может быть специальным образом обработана вызывающим кодом:
//           * "НетИнтернетПоддержки"
//  В случае иных ошибок сервиса выдается исключение с текстом для вывода пользователю
//
Функция ПодключитьВнешнююСистему(ИдентификаторСистемы)
	
	ОписаниеВнешнейСистемы = ПоставляемоеОписание(ИдентификаторСистемы);
	КодРазрешения          = НовыйКодРазрешения(ИдентификаторСистемы);
	
	Если ОписаниеВнешнейСистемы = "НетИнтернетПоддержки"
		Или КодРазрешения = "НетИнтернетПоддержки" Тогда
		Возврат "НетИнтернетПоддержки";
	КонецЕсли;
	
	// Сохраним настройку
	Объект = Справочники.НастройкиЗагрузкиДанныхВнешнихСистем.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(Объект, ОписаниеВнешнейСистемы);
	Объект.Код                = КодРазрешения;
	Объект.РасписаниеЗагрузки = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеВнешнейСистемы.РасписаниеЗагрузки);
	Объект.ОписаниеСистемы    = ОбщегоНазначения.ЗначениеВСтрокуXML(ОписаниеВнешнейСистемы.ОписаниеСистемы);
	Объект.Записать();
	
	ВключитьРегламентноеЗадание(ОписаниеВнешнейСистемы.РасписаниеЗагрузки);
	
	Возврат Объект.Ссылка;
	
КонецФункции

Процедура ЗаписатьОтключениеВнешнейСистемы(ОтветСервиса, Настройка)
	
	Если ОтветСервиса <> "Отключено" Тогда
		Возврат;
	КонецЕсли;
	
	Отключено = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Отключено");
	Если Отключено = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); // Информация об отключении системы может поступить при работе пользователя, имеющего право на обмен, но не на настройку обмена
	
	Объект = Настройка.ПолучитьОбъект();
	Объект.Отключено = Истина;
	Объект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстСообщения = НСтр(
		"ru = 'Отключено использование внешней системы по команде сервиса интернет-поддержки'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(
		ОбменДаннымиСВнешнимиСистемамиБП.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.НастройкиЗагрузкиДанныхВнешнихСистем,
		Настройка,
		ТекстСообщения);
	
КонецПроцедуры

// Отключает загрузку данных из внешней системы на сервисе интернет-поддержки.
// Информация об отключении записывается в информационную базу.
//
// Параметры:
//  Настройка - СправочникСсылка.НастройкиЗагрузкиДанныхВнешнихСистем - настройка системы, работу которой следует остановить.
// 
// Возвращаемое значение:
//  Строка - пустая строка, если загрузка отключена
//         - информация о внутренней ошибке сервиса, которая может быть специальным образом обработана вызывающим кодом:
//           * "НетИнтернетПоддержки"
//  В случае иных ошибок сервиса выдается исключение с текстом для вывода пользователю
//
Функция Отключить(Настройка)
	
	ОтветСервиса = ОбменДаннымиСВнешнимиСистемамиБП.УдалитьНастройкуОбменаДанными(КодРазрешения(Настройка));
	
	ОбрабатываемыеОшибки = Новый Массив;
	ОбрабатываемыеОшибки.Добавить("НетИнтернетПоддержки");
	ОбрабатываемыеОшибки.Добавить("Отключено");
	Ошибка = ОшибкаИнтернетПоддержки(ОтветСервиса, ОбрабатываемыеОшибки);
	
	Если ПустаяСтрока(Ошибка)          // отключено сейчас
		Или Ошибка = "Отключено" Тогда // отключено ранее
		ЗаписатьОтключениеВнешнейСистемы("Отключено", Настройка);
		Возврат "";
	КонецЕсли;
	
	Возврат Ошибка;

КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

Функция НовыйРезультатЗагрузки()
	
	Результат = Новый Структура;
	Результат.Вставить("Сеанс",                   Справочники.СеансыЗагрузкиДанныхВнешнихСистем.ПустаяСсылка());
	Результат.Вставить("ДатаЗавершения",          '0001-01-01');
	Результат.Вставить("ЕстьОшибки",              Ложь);
	Результат.Вставить("ОбновитьИнтерфейс",       Ложь); // До первого получения данных загруженные объекты могут быть скрыты. См. Справочники.Билеты.ВключитьИспользование
	Результат.Вставить("ТипыЗагруженныхОбъектов", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатЗагрузкиФайла()
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлПолучен",              Ложь);
	Результат.Вставить("ОшибкаПолученияФайла",     "");   // файл может быть не получен, если есть ошибка или если нет файлов (кончились)
	Результат.Вставить("ЕстьСледующий",            Ложь);
	Результат.Вставить("ЕстьОшибкиОбработкиФайла", Ложь); // файл может быть получен, но данные из него загрузить не удастся
	Результат.Вставить("ТипыЗагруженныхОбъектов",  Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьФайл(Сеанс)
	
	Результат = НовыйРезультатЗагрузкиФайла();
	
	КодРазрешения = КодРазрешения(Сеанс.Владелец);
	
	ОписаниеФайла = ФайлОбменаДанными(КодРазрешения);
	
	Если ОписаниеФайла = Неопределено Тогда
		// Данных нет
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеФайла) = Тип("Строка") Тогда
		Результат.ОшибкаПолученияФайла = ОписаниеФайла;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ФайлПолучен        = Истина;
	КраткийТекстОшибкиОбработки  = "";
	ПолныйТекстОшибкиОбработки   = "";
	
	Попытка
		РезультатED = ИнтеграцияEnterpriseData.ЗагрузитьСообщениеEnterpriseData(
			ОписаниеФайла.АдресФайла,
			Истина,
			ОбменДаннымиСВнешнимиСистемамиБП.ИмяСобытияЖурналаРегистрации());
	Исключение
		Результат.ЕстьОшибкиОбработкиФайла = Истина;
		ИнформацияОбОшибке          = ИнформацияОбОшибке();
		КраткийТекстОшибкиОбработки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПолныйТекстОшибкиОбработки  = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	Если Результат.ЕстьОшибкиОбработкиФайла Тогда
		ЗагруженныеОбъекты = Новый Массив;
	Иначе
		Результат.ЕстьОшибкиОбработкиФайла = РезультатED.ЕстьОшибки;
		ЗагруженныеОбъекты                 = РезультатED.ЗагруженныеОбъекты;
		КраткийТекстОшибкиОбработки        = РезультатED.ТекстОшибки;
	КонецЕсли;
	
	Сеанс.ДатаЗавершения = ТекущаяУниверсальнаяДата();
	Сеанс.Записать();
	
	Если Результат.ЕстьОшибкиОбработкиФайла Тогда
		РегистрыСведений.ПропущенныеПакетыДанныхВнешнихСистем.Зарегистрировать(
			Сеанс.Ссылка,
			ОписаниеФайла.АдресФайла,
			КраткийТекстОшибкиОбработки,
			ОписаниеФайла.ИдентификаторФайла);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПолныйТекстОшибкиОбработки) Тогда
		ЗаписьЖурналаРегистрации(
			ОбменДаннымиСВнешнимиСистемамиБП.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Сеанс.Метаданные(),
			Сеанс.Ссылка,
			ПолныйТекстОшибкиОбработки);
	КонецЕсли;
	
	ОбменДаннымиСВнешнимиСистемамиБП.ПодтвердитьОбработкуФайлаОбменаДанными(КодРазрешения, ОписаниеФайла.ИдентификаторФайла);
	
	РегистрыСведений.ОбъектыВнешнихСистем.Зарегистрировать(ЗагруженныеОбъекты, Сеанс.Ссылка);
	Для Каждого ЗагруженныйОбъект Из ЗагруженныеОбъекты Цикл
		Результат.ТипыЗагруженныхОбъектов.Вставить(ТипЗнч(ЗагруженныйОбъект), Истина);
	КонецЦикла;
	
	Результат.ЕстьСледующий = ОписаниеФайла.ЕстьСледующий;
	
	Возврат Результат;
	
КонецФункции

Функция ФайлОбменаДанными(КодРазрешения)
	
	ОтветСервиса = ОбменДаннымиСВнешнимиСистемамиБП.ФайлОбменаДанными(КодРазрешения);
	
	ОбрабатываемыеОшибки = Новый Массив;
	ОбрабатываемыеОшибки.Добавить("НетИнтернетПоддержки");
	ОбрабатываемыеОшибки.Добавить("Отключено");
	ОбрабатываемыеОшибки.Добавить("НетФайловДляЗагрузки");
	Ошибка = ОшибкаИнтернетПоддержки(ОтветСервиса, ОбрабатываемыеОшибки);
	
	Если Ошибка = "НетФайловДляЗагрузки" Тогда
		// В виде кода ошибки подсистема ОбменДаннымиСВнешнимиСистемами может информировать о штатной ситуации.
		Возврат Неопределено;
	КонецЕсли;
	
	Если Ошибка <> "" Тогда
		Возврат Ошибка;
	КонецЕсли;
	
	Возврат ОтветСервиса.ОписаниеФайлаОбмена;
	
КонецФункции

Функция ВнешняяСистемаАктивнаЗапросСервиса(КодРазрешения)
	
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Возврат "НетИнтернетПоддержки";
	КонецЕсли;
	
	ОписаниеФайла = ФайлОбменаДанными(КодРазрешения);
	
	Если ТипЗнч(ОписаниеФайла) = Тип("Строка") Тогда
		// ошибка
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	// Систему считаем активной, как только она передаст тестовый файл
	Возврат ОписаниеФайла <> Неопределено;
	
КонецФункции

Процедура ЗарегистрироватьКрайнийЗапрос(Настройка)
	
	// Дата крайнего запроса хранится в объекте настройки,
	// прав на изменение которого может не быть у пользователя, выполняющего обмен.
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектНастройка = Настройка.ПолучитьОбъект();
	ОбъектНастройка.КрайнийЗапрос = ТекущаяУниверсальнаяДата();
	ОбъектНастройка.Записать();
	
КонецПроцедуры

#Область ТранспортИнтернетПоддержкаПользователей

// Описывает особенности протокола транспорта ИнтернетПоддержкаПользователей

Функция ОшибкаИнтернетПоддержки(ОтветСервиса, ОбрабатываемыеОшибки)
	
	Если ПустаяСтрока(ОтветСервиса.КодОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	ОбрабатываемыйКодОшибки = "";
	Если ОтветСервиса.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		ОбрабатываемыйКодОшибки = "НетИнтернетПоддержки";
	ИначеЕсли ОтветСервиса.КодОшибки = "НетФайловДляЗагрузки" Тогда
		// В виде кода ошибки подсистема ОбменДаннымиСВнешнимиСистемами может информировать о штатной ситуации.
		ОбрабатываемыйКодОшибки = ОтветСервиса.КодОшибки;
	ИначеЕсли ОтветСервиса.КодОшибки = "НеизвестныйИдентификатор" Тогда
		// Обмен отключен. Следует прекратить запросы интернет-поддержки
		ОбрабатываемыйКодОшибки = "Отключено";
	КонецЕсли;
	
	Если ОбрабатываемыеОшибки.Найти(ОбрабатываемыйКодОшибки) <> Неопределено Тогда
		Возврат ОбрабатываемыйКодОшибки;
	КонецЕсли;
	
	ВызватьИсключение ОтветСервиса.СообщениеОбОшибке;
	
КонецФункции

Функция ЛимитФайловЗаСеанс()
	
	Возврат 1000;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегламентноеЗадание

// См. РегламентныеЗаданияСервер.НайтиЗадания()
Функция РегламентныеЗаданияЗагрузкиДанныхВнешнихСистем(Использование = Истина)
	
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные",    Метаданные.РегламентныеЗадания.ЗагрузкаДанныхВнешнихСистем);
	Отбор.Вставить("Использование", Использование);
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Задания;
	
КонецФункции

Процедура ВключитьРегламентноеЗадание(Расписание)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Расписание",    Расписание);
	
	// Теоретически может оказаться, что заданий несколько.
	// Поэтому начнем с того, что приведем в детерминированное состояние - отключим все.
	ОтключитьРегламентноеЗадание();
	
	РанееСозданныеЗадания = РегламентныеЗаданияЗагрузкиДанныхВнешнихСистем(Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(РанееСозданныеЗадания) Тогда
		// Создадим новое
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗагрузкаДанныхВнешнихСистем); // параметр обязателен в ДобавитьЗадание(), но запрещен в ИзменитьЗадание()
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		// Включим ранее созданное
		//
		// Задание - это регламентное задание (в локальном режиме)
		// или элемент очереди заданий (в сервисе).
		// Вне зависимости от типа объекта у него есть свойство УникальныйИдентификатор со сходным смыслом.
		РегламентныеЗаданияСервер.ИзменитьЗадание(РанееСозданныеЗадания[0].УникальныйИдентификатор, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтключитьРегламентноеЗадание()
	
	ШаблонСообщения = НСтр(
		"ru = 'Отключено использование регламентного задания, так как обмен с внешней системой не настроен - см. %1'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ТекстСообщения = СтрШаблон(ШаблонСообщения, Метаданные.Справочники.НастройкиЗагрузкиДанныхВнешнихСистем);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Ложь);
	
	Для Каждого Задание Из РегламентныеЗаданияЗагрузкиДанныхВнешнихСистем() Цикл
		
		// Задание - это регламентное задание (в локальном режиме)
		// или элемент очереди заданий (в сервисе).
		
		Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
			Ссылка = Задание;
		Иначе
			Ссылка = Задание.УникальныйИдентификатор;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Ссылка, ПараметрыЗадания);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаписьЖурналаРегистрации(
			ОбменДаннымиСВнешнимиСистемамиБП.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.РегламентныеЗадания.ЗагрузкаДанныхВнешнихСистем,
			Ссылка,
			ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяВыполнениеРегламентногоЗаданияПослеОперативнойЗагрузки(ИнтервалПоследнегоЗапуска)
	
	ДатаДляПроверки       = ТекущаяДата();
	ДатаПоследнегоЗапуска = ДатаДляПроверки - ИнтервалПоследнегоЗапуска;
	
	Для Каждого Задание Из РегламентныеЗаданияЗагрузкиДанныхВнешнихСистем() Цикл
		
		// Задание - это регламентное задание (в локальном режиме)
		// или элемент очереди заданий (в сервисе).
		// Вне зависимости от типа объекта у него есть свойство Расписание с идентичным смыслом.
		
		ТребуетсяВыполнение = Задание.Расписание.ТребуетсяВыполнение(
			ДатаДляПроверки,
			ДатаПоследнегоЗапуска,
			ДатаПоследнегоЗапуска);
			
		Если ТребуетсяВыполнение Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ИзвестныеВнешниеСистемы

// Для некоторых внешних систем конфигурация может содержать дополнительные данные.
// Однако, в целом можно использовать и внешние системы, о которых в конфигурации никаких данных нет.

Процедура ДополнитьОписаниеВнешнейСистемыДаннымиКонфигурации(Описание)
	
	Если Описание.ИдентификаторСистемы = ОбменДаннымиСВнешнимиСистемамиБПКлиентСервер.ИдентификаторСистемыSmartway() Тогда
		
		Описание.ОписаниеЗагружаемыхДанных = НСтр("ru = 'данные о билетах'");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
