
#Область ОбработчикиСобытийФормы

&НаСервере
// Обработка события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыРегламентногоЗадания = ПолучитьПараметрыРегламентногоЗадания(Объект.РегламентноеЗадание);
	Объект.ВыполнятьОбменПоРасписанию = ПараметрыРегламентногоЗадания.Использование;
	РасписаниеРегламентногоЗадания  = ПараметрыРегламентногоЗадания.ТекстРасписания;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработка события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработка события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УстановитьПараметрыРегламентногоЗадания();
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовУправления

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля выбора организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" гиперссылки с расписанием регл. задания.
//
Процедура НастроитьРасписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(, "Перед редактированием настроек расписания необходимо записать элемент!", , "Внимание");
		Возврат;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписание());
	
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияНажатиеЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры // НастроитьРасписаниеНажатие()

&НаКлиенте
Процедура РасписаниеРегламентногоЗаданияНажатиеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
    Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда
        
        УстановитьРасписание(Объект.РегламентноеЗадание, Диалог.Расписание);
        
        ПараметрыРегламентногоЗадания  = ПолучитьПараметрыРегламентногоЗадания(Объект.РегламентноеЗадание);
        РасписаниеРегламентногоЗадания = ПараметрыРегламентногоЗадания.ТекстРасписания;
        
    КонецЕсли;

КонецПроцедуры // РасписаниеРегламентногоЗаданияНажатие()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" флага "Выполнять обмен по расписанию".
//
Процедура ВыполнятьОбменПоРасписаниюПриИзменении(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПоказатьПредупреждение(, "Перед редактированием настроек расписания необходимо записать элемент!", , "Внимание");
		Объект.ВыполнятьОбменПоРасписанию = Не Объект.ВыполнятьОбменПоРасписанию;
		Возврат;
		
	КонецЕсли;
	
	ОпределитьРегламентноеЗадание();
	
	УстановитьИспользованиеРегламентногоЗадания(Объект.РегламентноеЗадание, Объект.ВыполнятьОбменПоРасписанию);
	
	ПараметрыРегламентногоЗадания  = ПолучитьПараметрыРегламентногоЗадания(Объект.РегламентноеЗадание);
	РасписаниеРегламентногоЗадания = ПараметрыРегламентногоЗадания.ТекстРасписания;
	
	УправлениеФормой();
	
КонецПроцедуры // ВыполнитьОбменПоРасписаниюПриИзменении()

&НаКлиенте
// Процедура-обработчик события "Нажатие" ссылки на скачивание приложения.
//
Процедура СсылкаНаМаркетНажатие(Элемент)
	
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("https://play.google.com/store/apps/details?id=vdgb_soft_mobileapps.com.directorsmonitor");
		
КонецПроцедуры // СсылкаНаМаркетНажатие()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Выгружает данные на сервер.
//
Процедура ВыполнитьВыгрузку(Команда)
	
	УПЖКХ_ИнтеграцияСМобильнымПриложением.ВыполнитьВыгрузкуДанных(Объект.Ссылка);
	
КонецПроцедуры // ВыполнитьВыгрузку()

&НаКлиенте
// Генерирует ПИН и сохраняет новое значение.
//
Процедура СгенерироватьПИН(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СгенерироватьНовыйПИННажатие", ЭтотОбъект),
					"Для завершения операции необходимо выгрузить данные на сервер. Выполнить выгрузку?",
					РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // СгенерироватьПИН()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре-обработчике "СгенерироватьПИН()".
//
Процедура СгенерироватьНовыйПИННажатие(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйПИН  = Объект.ПИН;
	Объект.ПИН = ПолучитьПИН();
	
	УспешностьВыгрузки = Ложь;
	
	УПЖКХ_ИнтеграцияСМобильнымПриложением.ВыполнитьВыгрузкуДанных(Объект.Ссылка, УспешностьВыгрузки);
	
	Если Не УспешностьВыгрузки Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось выгрузить данные на сервер." + Символы.ПС + "ПИН не изменен.");
		Объект.ПИН = СтарыйПИН;
		
		Записать();
	КонецЕсли;
	
КонецПроцедуры // СгенерироватьНовыйПИННажатие()

&НаКлиенте
// Запускает регистрацию организации.
//
Процедура Зарегистрироваться(Команда) 
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Перед регистрацией необходимо записать элемент!", , "Внимание");
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьНаСервере();
	
	УправлениеФормой();
	
КонецПроцедуры // Зарегистрироваться()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСРегламентнымЗаданием

&НаСервереБезКонтекста
// Функция формирует текст расписания регламентного задания.
//
Функция ПолучитьПараметрыРегламентногоЗадания(ИдентификаторРегламентногоЗадания)
	
	Задание = Неопределено;
	
	Если Не ПустаяСтрока(ИдентификаторРегламентногоЗадания) Тогда
		Задание = ПолучитьРегламентноеЗадание(ИдентификаторРегламентногоЗадания);
	КонецЕсли;
	
	Использование   = Ложь;
	ТекстРасписания = "<Расписание не задано>";
	
	Если Не Задание = Неопределено Тогда
		
		Использование = Задание.Использование;
		
		Если Задание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(Задание.Расписание);
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Использование",   Использование);
	СтруктураПараметров.Вставить("ТекстРасписания", ТекстРасписания);
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыРегламентногоЗадания()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Процедура СоздатьРегламентноеЗадание()
	
	ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("УПЖКХ_ВыгрузкаДанныхДляМобильногоУстройства");
	Попытка
		// Запишем регламентное задание.
		ОбъектЗадания.Наименование = "Выгрузка для мобильного приложения: " + Объект.Наименование;
		ОбъектЗадания.Записать();
		Объект.РегламентноеЗадание = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
		// Запишем текущий элемент для сохранения данных о регламентном задании.
		Записать();
	Исключение
		ВызватьИсключение "Произошла ошибка при создании расписания.
		|" + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры // СоздатьРегламентноеЗадание()

&НаСервере
// Записывает в параметры регламетного задания данные для поиска элемента текущего
// справочника, соответствующего регламентному заданию.
// 
Процедура УстановитьПараметрыРегламентногоЗадания()
	
	Если Объект.РегламентноеЗадание = "" Тогда
		Возврат;
	КонецЕсли;
	
	мРегламентноеЗадание = ПолучитьРегламентноеЗадание(Объект.РегламентноеЗадание);
	
	Если мРегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив();
	Массив.Добавить(Объект.Код);
	
	мРегламентноеЗадание.Параметры = Массив;
	мРегламентноеЗадание.Ключ      = Объект.Код;
	мРегламентноеЗадание.Записать();
	
КонецПроцедуры // УстановитьПараметрыРегламентногоЗадания()

&НаСервереБезКонтекста
// Возвращает РегламентноеЗадание из информационной базы.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор регламентного задания.
//                - Строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание из которого нужно получить уникальный
//                  идентификатор для получения свежей копии регламентного задания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание, прочитанное из базы данных.
//
Функция ПолучитьРегламентноеЗадание(Знач Идентификатор)
	
	РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентноеЗадание = Неопределено;
	
	Если Не ПустаяСтрока(Идентификатор) Тогда
		Идентификатор = Новый УникальныйИдентификатор(Идентификатор);
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции // ПолучитьРегламентноеЗадание()

&НаСервере
// Процедура создает регламентное задание, если оно не определено.
//
Процедура ОпределитьРегламентноеЗадание()
	
	Задание = ПолучитьРегламентноеЗадание(Объект.РегламентноеЗадание);
	
	Если Задание = Неопределено Или ПустаяСтрока(Объект.РегламентноеЗадание) Тогда
		СоздатьРегламентноеЗадание();
	КонецЕсли;
	
КонецПроцедуры // ОпределитьРегламентноеЗадание()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписание()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОпределитьРегламентноеЗадание();
	
	Возврат РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(Объект.РегламентноеЗадание);
	
КонецФункции // ПолучитьРасписание()

&НаСервереБезКонтекста
// Процедура устанавливает расписание регламентного задания.
//
Процедура УстановитьРасписание(ИдентификаторРегламентногоЗадания, Знач Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		ИдентификаторРегламентногоЗадания,
		Расписание);
	
КонецПроцедуры // УстановитьРасписание()

&НаСервереБезКонтекста
// Устанавливает использование регламентного задания.
//  Перед вызовом требуется иметь право Администрирования
// или УстановитьПривилегированныйРежим.
//
// Параметры:
//  Идентификатор - ОбъектМетаданных регламентного задания для поиска
//                  предопределенного регламентного задания.
//                - УникальныйИдентификатор регламентного задания.
//                - Строка уникального идентификатора регламентного задания.
//                - РегламентноеЗадание.
//
// Использование  - Булево.
// 
Процедура УстановитьИспользованиеРегламентногоЗадания(Знач Идентификатор, Знач Использование)
	
	РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = ПолучитьРегламентноеЗадание(Идентификатор);
	
	Если Не Задание = Неопределено И Задание.Использование <> Использование Тогда
		Задание.Использование = Использование;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры // УстановитьИспользованиеРегламентногоЗадания()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Регистрирует организацию на сервере.
//
Процедура ЗарегистрироватьНаСервере()
	
	УспешностьРегистрации = Ложь;
	
	Попытка
		Объект.ИД  = ПолучитьИД();
		Объект.ПИН = ПолучитьПИН();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Организация успешно зарегистрирована!" + Символы.ПС + "ИД: " + Объект.ИД + Символы.ПС+ "ПИН: " + Объект.ПИН);
		
		УспешностьРегистрации = Истина;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось зарегистрировать организацию, проверьте подключение к интернету.");
	КонецПопытки;
	
	Если УспешностьРегистрации Тогда
		УПЖКХ_ИнтеграцияСМобильнымПриложением.ВыполнитьВыгрузкуДанных(Объект);
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Генерирует случайный ПИН.
//
Функция ПолучитьПИН()
	
	ПИНДляМобильногоПриложения = "";
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Для Сч = 1 по 6 Цикл
		
		Слч = ГСЧ.СлучайноеЧисло(97, 122);
		Если ((Слч % 2) = 0 ) Тогда
			Слч = ГСЧ.СлучайноеЧисло(0, 9);
			ПИНДляМобильногоПриложения = ПИНДляМобильногоПриложения + Слч;
			
			Продолжить;
		КонецЕсли;
		
		ПИНДляМобильногоПриложения = ПИНДляМобильногоПриложения + Символ(Слч);
	КонецЦикла;
	
	Возврат ПИНДляМобильногоПриложения;
	
КонецФункции // ПолучитьПИН()

&НаСервере
// Получет ИД организации с сервера.
//
Функция ПолучитьИД()
	
	ИНН = Объект.Организация.ИНН;
	
	ОтветСтрока = "";
	
	Попытка
		http = Новый HTTPСоединение("mm.vdgb-soft.ru", , , , , , Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		
		Возврат ОтветСтрока;
	КонецПопытки;
	
	Ответ =  ПолучитьИмяВременногоФайла("id");
	http.Получить("/?mode=init&org_hash=" + ИНН, Ответ);
	Текст = Новый ЧтениеТекста(Ответ);
	ОтветСтрока = Текст.ПрочитатьСтроку();
	
	Текст.Закрыть();
	
	УдалитьФайлы(Ответ);
	
	Возврат ОтветСтрока;
	
КонецФункции // ПолучитьИД()

&НаКлиенте
// Проверяет зарегистрирована ли организация на сервере.
//
Функция ОрганизацияЗарегистрирована()
	
	Возврат ?(ПустаяСтрока(Объект.ИД), Ложь, Истина);
	
КонецФункции // ОрганизацияЗарегистрирована()

&НаКлиенте
// Процедура управления видимостью.
//
Процедура УправлениеФормой()
	
	Если ОрганизацияЗарегистрирована() Тогда
		Элементы.Регистрация.Видимость                       = Ложь;
		Элементы.НадписьУспешнаяРегистрация.Видимость        = Истина;
		Элементы.НадписьНастройкиПриложения.Видимость        = Ложь;
		Элементы.НадписьПИНИД.Видимость                      = Истина;
		Элементы.ГруппаОбщаяИДИПИН.Видимость                 = Истина;
		Элементы.ДекорацияОтступ1.Видимость                  = Истина;
		Элементы.ГруппаНастройкиОбменаСПриложением.Видимость = Истина;
	Иначе
		Элементы.Регистрация.Видимость = Истина;
		Элементы.НадписьУспешнаяРегистрация.Видимость        = Ложь;
		Элементы.НадписьНастройкиПриложения.Видимость        = Истина;
		Элементы.НадписьПИНИД.Видимость                      = Ложь;
		Элементы.ГруппаОбщаяИДИПИН.Видимость                 = Ложь;
		Элементы.ДекорацияОтступ1.Видимость                  = Ложь;
		Элементы.ГруппаНастройкиОбменаСПриложением.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти
