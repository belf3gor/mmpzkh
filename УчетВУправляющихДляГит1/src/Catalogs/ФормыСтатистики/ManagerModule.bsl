#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммыйИнтерфейс

// Процедура заполняет справочник ФормыСтатистики и ПоляФормСтатистики.
// В качестве источника данных используется СхемаВыгрузкиXML регламентированного отчета.
//
// Параметры: 
// - РегламентированныйОтчет - СправочникСсылка.РегламентированныеОтчеты - Регламентированный отчет.
// - ИмяФормы 		         - Строка - Идентификатор формы регламентированного отчета, полями которой нужно заполнить справочники.
//
Процедура ЗаполнитьДаннымиФормы(РегламентированныйОтчет, ИмяФормы, ИмяСхемыВыгрузки) Экспорт
	
	ФормыСтатистики 		= Справочники.ФормыСтатистики;
	ПоляФормСтатистики 		= Справочники.ПоляФормСтатистики;	
	
	ИмяОтчета = РегламентированныйОтчет.ИсточникОтчета;
	
	ТаблицаФормОтчета = Отчеты[ИмяОтчета].ТаблицаФормОтчета();
	
	ПараметрыФормы = ТаблицаФормОтчета.Найти(ИмяФормы, "ФормаОтчета");
	
	Если ПараметрыФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МакетСтруктуры  = Метаданные.Отчеты[ИмяОтчета].Макеты.Найти(ИмяСхемыВыгрузки);
	
	Если МакетСтруктуры = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	НоваяФорма = ФормыСтатистики.СоздатьЭлемент();
	
	НоваяФорма.Владелец 						= РегламентированныйОтчет;
	НоваяФорма.Код 				                = СокрЛП(ИмяФормы);
	НоваяФорма.Наименование 					= РегламентированныйОтчет.Наименование 
		+ " (" + СтрЗаменить(ПараметрыФормы.ОписаниеОтчета, "Форма", "") + ")";
	
	НоваяФорма.Записать();
	
	СписокПоказателей = ИнтерфейсыВзаимодействияБРО.ПолучитьПоляФормыСтатистики(
		НоваяФорма.Владелец.ИсточникОтчета, 
		ИмяСхемыВыгрузки);
	СписокПоказателей.Колонки.Добавить("ЭлементСправочника");
	
	Для Каждого Показатель Из СписокПоказателей Цикл
		
		Если Показатель.ЭтоГруппа Тогда
			
			Если НЕ Показатель.ЕстьЭлементы Тогда
				
				Продолжить;
				
			КонецЕсли;	
			
			Запись = ПоляФормСтатистики.СоздатьГруппу();
			Запись.Владелец 			= НоваяФорма.Ссылка;
			Запись.Наименование 		= Показатель.Показатель;
			Запись.Код                  = Показатель.Показатель;
			
		Иначе
			
			Запись = ПоляФормСтатистики.СоздатьЭлемент();
			
			Запись.Владелец 			= НоваяФорма.Ссылка;
			Запись.Наименование 		= Показатель.Показатель;
			Запись.ИмяПоля 				= Показатель.ИмяПоля; 
			Запись.Код 				    = Показатель.ИмяПоля;
			Запись.НомерСтрокиОтчета 	= Показатель.НомерСтроки;
			Если ЗначениеЗаполнено(Показатель.Период) Тогда
				Запись.Период 			= Перечисления.ОтносительныеПериодыОтчетности[Показатель.Период];
			КонецЕсли;
			Запись.СНачалаГода 			= Показатель.СНачалаГода;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Показатель.Родитель) Тогда
			Запись.Родитель = Показатель.Родитель.ЭлементСправочника;		
		КонецЕсли;
		
		Запись.ОбменДанными.Загрузка = Истина;
		Запись.Записать();
		
		Показатель.ЭлементСправочника = Запись.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура сверяет состав справочника ПоляФормСтатистики с содержимым структуры выгрузки в XML
// для переданной формы статистики.
//
//Параметры:
// - ФормаСтатистики - СправочникСсылка.ФормыСтатистики - Форма для которой нужно провести проверку.
// - ИмяСхемыВыгрузки - Строка - Имя макета регламентированного отчета содержащего схему выгрузки XML.
//
// Возвращаемое значение:
// - ТаблицаЗначений, содержит ссылку на справочник ПоляФормСтатистики и код ошибки,
// 	Колонки:
// - Ссылка 					- Справочник.ПоляФормСтатистики;
// - Наименование 				- Строка;
// - СтатистическийПоказатель 	- Справочник.СтатистическиеПоказатели;
// - Период 					- Перечисление.ОтносительныеПериодыОтчетности;
// - ИмяПоля					- Строка;
// - НомерСтрокиОтчета	 		- Строка;
// - СНачалаГода 				- Булево;
// - ПоказательИзXML			- Строка;
// - НомерСтрокиИзXML			- Строка;
// - ИмяПоляИзXML				- Строка;
// - ПериодИзXML 				- Перечисление.ОтносительныеПериодыОтчетности;
// - СНачалаГодаИзXML			- Булево;
// - КодОшибки 					- Число, код ошибки принимает следующие значения:
// 		 -1 - Поле из справочника не найдено в структуре XML (Критично);
// 		 -2 - Номер строки отчета из справочника отличается от номера строки отчета из структуры XML (Критично);
// 		  0 - Ошибок нет;
//		  1 - Признак периода "С начала года" не совпадает в справочнике и структуре XML (Не критично);
// 		  2 - Период из справочника не совпадает с периодом из структуры XML (Не критично).
// 
Функция ПроверитьСоответствиеДанныхФормы(ФормаСтатистики, ИмяСхемыВыгрузки) Экспорт
	
	ТаблицаПоказателей = ИнтерфейсыВзаимодействияБРО.ПолучитьПоляФормыСтатистики(
		ФормаСтатистики.Владелец.ИсточникОтчета, 
		ИмяСхемыВыгрузки);

	ТаблицаПоказателей.Колонки.Добавить("ПериодСсылка", Тип("ПеречислениеСсылка.ОтносительныеПериодыОтчетности"));
	Для Каждого Показатель Из ТаблицаПоказателей Цикл
		Если ЗначениеЗаполнено(Показатель.Период) Тогда
			Показатель.ПериодСсылка = Перечисления.ОтносительныеПериодыОтчетности[Показатель.Период];
		КонецЕсли;
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("ФормаСтатистики", ФормаСтатистики);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоказателей.Показатель,
	|	ВЫРАЗИТЬ(ТаблицаПоказателей.НомерСтроки КАК СТРОКА(10)) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаПоказателей.ИмяПоля КАК СТРОКА(13)) КАК ИмяПоля,
	|	ТаблицаПоказателей.ПериодСсылка КАК Период,
	|	ТаблицаПоказателей.СНачалаГода
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	&ТаблицаПоказателей КАК ТаблицаПоказателей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяПоля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоляФормСтатистики.Ссылка,
	|	ПоляФормСтатистики.ВерсияДанных,
	|	ПоляФормСтатистики.ПометкаУдаления,
	|	ПоляФормСтатистики.Предопределенный,
	|	ПоляФормСтатистики.Владелец,
	|	ПоляФормСтатистики.Родитель,
	|	ПоляФормСтатистики.Наименование,
	|	ПоляФормСтатистики.СтатистическийПоказатель,
	|	ПоляФормСтатистики.Период,
	|	ПоляФормСтатистики.ИмяПоля,
	|	ПоляФормСтатистики.НомерСтрокиОтчета,
	|	ПоляФормСтатистики.СНачалаГода,
	|	ТаблицаПоказателей.Показатель КАК ПоказательИзXML,
	|	ТаблицаПоказателей.НомерСтроки КАК НомерСтрокиИзXML,
	|	ТаблицаПоказателей.ИмяПоля КАК ИмяПоляИзXML,
	|	ТаблицаПоказателей.Период КАК ПериодИзXML,
	|	ТаблицаПоказателей.СНачалаГода КАК СНачалаГодаИзXML,
	|	ВЫБОР
	|		КОГДА ТаблицаПоказателей.ИмяПоля ЕСТЬ NULL 
	|			ТОГДА -1
	|		КОГДА ТаблицаПоказателей.НомерСтроки <> ПоляФормСтатистики.НомерСтрокиОтчета
	|			ТОГДА -2
	|		КОГДА ТаблицаПоказателей.СНачалаГода <> ПоляФормСтатистики.СНачалаГода
	|			ТОГДА 1
	|		КОГДА ТаблицаПоказателей.Период <> ПоляФормСтатистики.Период
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодОшибки
	|ПОМЕСТИТЬ ТаблицаПоказателейИКодыОшибки
	|ИЗ
	|	Справочник.ПоляФормСтатистики КАК ПоляФормСтатистики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоказателей КАК ТаблицаПоказателей
	|		ПО ПоляФормСтатистики.ИмяПоля = ТаблицаПоказателей.ИмяПоля
	|ГДЕ
	|	ПоляФормСтатистики.Владелец = &ФормаСтатистики
	|	И НЕ ПоляФормСтатистики.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказателейИКодыОшибки.Ссылка,
	|	ТаблицаПоказателейИКодыОшибки.Наименование,
	|	ТаблицаПоказателейИКодыОшибки.СтатистическийПоказатель,
	|	ТаблицаПоказателейИКодыОшибки.Период,
	|	ТаблицаПоказателейИКодыОшибки.ИмяПоля,
	|	ТаблицаПоказателейИКодыОшибки.НомерСтрокиОтчета,
	|	ТаблицаПоказателейИКодыОшибки.СНачалаГода,
	|	ТаблицаПоказателейИКодыОшибки.ПоказательИзXML,
	|	ТаблицаПоказателейИКодыОшибки.НомерСтрокиИзXML,
	|	ТаблицаПоказателейИКодыОшибки.ИмяПоляИзXML,
	|	ТаблицаПоказателейИКодыОшибки.ПериодИзXML,
	|	ТаблицаПоказателейИКодыОшибки.СНачалаГодаИзXML,
	|	ТаблицаПоказателейИКодыОшибки.КодОшибки
	|ИЗ
	|	ТаблицаПоказателейИКодыОшибки КАК ТаблицаПоказателейИКодыОшибки
	|ГДЕ
	|	ТаблицаПоказателейИКодыОшибки.КодОшибки <> 0";
      
	Возврат Запрос.Выполнить().Выгрузить();			   
	
КонецФункции

// Получает ссылку на форму статистики по именам регламентированного отчета и формы.
// Параметры:
//	ИмяОтчета - Строка - Идентификатор регламентированного отчета (например: РегламентированныйОтчетСтатистикаФормаП1).
//	ИмяФормы - Строка- Идентификатор редакции регламентированного отчета отчета (например: ФормаОтчета2016Кв1).
// Возвращаемое значение:
//	СправочникСсылка.ФормыСтатистики - Форма статистики соответсвующаяя редакции регламентированного отчета.
//	В случае если подходящую форму найти не удалось, возвращается пустая ссылка.
//
Функция ПолучитьФормуСтатистики(ИмяОтчета, ИмяФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОтчета", ИмяОтчета);
	Запрос.УстановитьПараметр("ИмяФормы",  ИмяФормы);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФормыСтатистики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФормыСтатистики КАК ФормыСтатистики
	|ГДЕ
	|	ФормыСтатистики.Код = &ИмяФормы
	|	И ФормыСтатистики.Владелец.ИсточникОтчета = &ИмяОтчета
	|	И НЕ ФормыСтатистики.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ФормыСтатистики.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает краткое пользовательское представление формы.
// Параметры:
//	ФормаСтатистики - СправочникСсылка.ФормыСтатистики - Форма представление которой нужно получить.
// Возвращаемое значение:
//	Строка - Краткое представление формы.
//
Функция КраткоеПредставлениеФормы(ФормаСтатистики) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.КраткоеПредставлениеФормы(ФормаСтатистики.Владелец);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммыйИнтерфейс

// Возвращает реквизиты справочника, которые образуют естественный ключ
//  для элементов справочника.
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Владелец");
	Результат.Добавить("Код");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
