
#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура обновляет таблицу характеристик макета.
Процедура ОбновитьТаблицыНастроекМакета()
	
	НормаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.КВП_Услуги"));
	мТаблицаНастроекПостановленияИзМакета.Загрузить(НормаОбъект.ПолучитьТаблицуНастроекИзМакета());
	мТаблицаРеквизитовНастроекИзМакета.Загрузить(НормаОбъект.ПолучитьТаблицуРеквизитовИзМакета());
	
КонецПроцедуры // ОбновитьТаблицыНастроекМакета()

&НаКлиентеНаСервереБезКонтекста
// Процедура очищает настройки всех формул всех постановлений.
Процедура ОчиститьНастройкиФормул(Форма, мТаблицаРеквизитовНастроекИзМакета)
	
	Объект = Форма.Объект;
	Для Каждого ТекРеквизит Из мТаблицаРеквизитовНастроекИзМакета Цикл
		Если ТекРеквизит.Признак Тогда
			Объект[ТекРеквизит.ИмяРеквизита] = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНастройкиФормул()

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает надписи расчета по формулам в зависимости от выбранного постановления.
Процедура УстановитьЗаголовкиФормул(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.НадписьРасчетаПоФормуламВыбранногоПостановления.Видимость = ?(Объект.ВариантНачисленияПоПУ = "РучнаяНастройка", Ложь, Истина);
	Элементы.ГруппаФормул.Заголовок = ?(Объект.ВариантНачисленияПоПУ = "РучнаяНастройка",
										"Настройки формул для расчета",
										"Описание расчета по формулам выбранного постановления");
	
	Если Объект.ВариантНачисленияПоПУ = "307" Тогда
		
		Форма.НадписьРасчетаПоФормуламВыбранногоПостановления = 
		"Объем коммунальной услуги, предоставленный на общедомовые нужды, будет рассчитываться по формуле №9 постановления №307 от 23 мая 2006 г.";
		
	ИначеЕсли Объект.ВариантНачисленияПоПУ = "354" Тогда
		
		Форма.НадписьРасчетаПоФормуламВыбранногоПостановления = 
		"Расчет начислений за потребление коммунального ресурса, предоставленного за расчетный период на общедомовые нужды в многоквартирном доме, который оборудован коллективным прибором учета"
		+ " и в котором во всех жилых и нежилых помещениях отсутствуют индивидуальные приборы учета, будет выполняться по формулам №3 и №14 постановления №354 от 06 мая 2011 г."
		+ " и распределяться между всеми жилыми и нежилыми помещениями, не оборудованными индивидуальными приборами учета, пропорционально их общей площади."
		+ Символы.ПС + Символы.ПС
		+ "Расчет начислений за потребление коммунального ресурса, предоставленного за расчетный период на общедомовые нужды в многоквартирном доме, не оборудованном коллективным (общедомовым) прибором учета,"
		+ " будет выполняться по формуле №15 постановления №354 от 06 мая 2011 г. и распределяться между всеми жилыми и нежилыми помещениями пропорционально их общей площади."
		+ Символы.ПС + Символы.ПС
		+ "Для всех остальных ситуаций расчет начислений будет выполняться по произведенным выше настройкам распределения расхода коллективных приборов учета.";
	
	ИначеЕсли Объект.ВариантНачисленияПоПУ = "344" Тогда
		
		Форма.НадписьРасчетаПоФормуламВыбранногоПостановления = 
		"Расчет начислений за потребление коммунального ресурса, предоставленного за расчетный период на общедомовые нужды в многоквартирном доме, не оборудованном коллективным (общедомовым) прибором учета,"
		+ " будет выполняться по формуле №15 постановления №354 от 06 мая 2011 г. и распределяться между всеми жилыми и нежилыми помещениями пропорционально их общей площади."
		+ Символы.ПС + Символы.ПС
		+ "Расчет начислений за потребление коммунального ресурса, предоставленного за расчетный период на общедомовые нужды в многоквартирном доме, который оборудован коллективным (общедомовым) прибором учета"
		+ " и в котором не все жилые и нежилые помещения оборудованы индивидуальными приборами учета будет выполняться по формуле №3 постановления №344 от 16 апреля 2013 г."
		+ " и распределяться между всеми жилыми и нежилыми помещениями, не оборудованными индивидуальными приборами учета, пропорционально их общей площади."
		+ Символы.ПС + Символы.ПС
		+ "Расчет начислений за потребление коммунального ресурса, предоставленного за расчетный период на общедомовые нужды в многоквартирном доме, который оборудован коллективным (общедомовым) прибором учета"
		+ " и в котором все жилые и нежилые помещения оборудованы индивидуальными приборами учета будет выполняться по формуле №3(1) постановления №344 от 16 апреля 2013 г."
		+ " и распределяться между всеми жилыми и нежилыми помещениями, оборудованными индивидуальными приборами учета, пропорционально их общей площади."
		+ Символы.ПС + Символы.ПС
		+ "Для всех остальных ситуаций расчет начислений будет выполняться по произведенным выше настройкам распределения расхода коллективных приборов учета."
		+ Символы.ПС + Символы.ПС
		+ "Распределяемый между потребителями объем коммунальной услуги, предоставленный на общедомовые нужды, будет ограничиваться нормативом потребления услуги в соответствии с изменениями"
		+ " п.44 постановления №354 от 06 мая 2011 г., описанными в постановлении №344 от 16 апреля 2013 г. Для ограничения будет использоваться норматив потребления по текущей услуге,"
		+ " указанный в справочнике ""Здания, сооружения"".";
		
	Иначе
		
		Форма.НадписьРасчетаПоФормуламВыбранногоПостановления = "";
		
	КонецЕсли;

КонецПроцедуры // УстановитьЗаголовкиФормул()

&НаСервере
// Управляет видимостью и доступностью элементов формы.
//
Процедура УстановитьВидимостьИДоступностьРеквизитовФормы()
	
	// Раньше управление видимостью выполнялось как на клиента, так и на сервере.
	// На клиенте происходил многократный неявный вызов сервера, что замедляло работу и приводило
	// к медленной прорисовке формы. Теперь видимость элементов формы устанавливается только на сервере.
	
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
		
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельНастройки, Элементы.НовыйАлгоритмРасчетаПУ);
		
		// Если услуга не составная, то скрываем соответствующую настройку.
		ВидимостьНастроекСоставнойУслугиПоПоказаниямПУ = (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
		Элементы.НастройкиПоСоставнымУслугам.Видимость = ВидимостьНастроекСоставнойУслугиПоПоказаниямПУ;
		
		// Размер нормы для ограничения составных услуг для Нижегородской области отличен от размера нормы потребления 
		// услуги по лицевому счету и задается непосредственно в таблице составных услуг.
		Элементы.СоставныеУслугиНовыйАлгоритмРазмерОграничения.Видимость = 
				УПЖКХ_ОбщегоНазначенияСервер.ДоступнаНастройкаВыбораНормОграниченияДляСоставныхУслуг();
		
		// Настройки повышающих коэффициентов пока доступны только для услуг по показаниям счетчика.
		ВидимостьНастроекПовышающихКоэффициентов = (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
												  И Объект.СпособРасчетаПоПУБезДействующихПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоНормеПотребления"));
		
		Элементы.ПовышающиеКоэффициенты.Видимость = ВидимостьНастроекПовышающихКоэффициентов;
		
		// Управление оформлением настроек повышающих коэффициентов.
		Если ВидимостьНастроекПовышающихКоэффициентов Тогда
			ИспользоватьПовышающиеКоэффициенты = Константы.УПЖКХ_ИспользоватьПовышающиеКоэффициентыПриОтсутствииПУ.Получить();
			Элементы.ПерейтиКЗначениямПовышающихКоэффициентовДляНачисленияПоНормативу.Видимость = ИспользоватьПовышающиеКоэффициенты;
			Элементы.НадписьВключитьИспользованиеПовышающихКоэффициентов.Видимость              = Не ИспользоватьПовышающиеКоэффициенты;
		КонецЕсли;
		
	Иначе
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельНастройки, Элементы.ОсновнаяНастройка);
	КонецЕсли;
	
	// Настройки по показаниям ПУ.
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
		
		Элементы.ТабличнаяЧастьУслуги.Видимость = Ложь;
		Элементы.ПанельДопНастройки.Видимость   = Истина;
		
		ПоСреднемуБезПУ = (Объект.СпособРасчетаПоПУБезДействующихПУ 
									= ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению"));
		//Элементы.НадписьПериодРасчетаПоСреднемуБезДействующихПУ.Видимость  = ПоСреднемуБезПУ;
		Элементы.ПериодРасчетаПоСреднемуБезДействующихПУ.Видимость                   = ПоСреднемуБезПУ;
		Элементы.НадписьПериодРасчетаПоСреднемуБезДействующихПУ2.Видимость           = ПоСреднемуБезПУ;
		Элементы.МинимальныйПериодРасчетаПоСреднемуБезДействующихПУ.Видимость        = ПоСреднемуБезПУ;
		Элементы.НадписьМинимальныйПериодРасчетаПоСреднемуБезДействующихПУ.Видимость = ПоСреднемуБезПУ;
		Элементы.НадписьРасчетаПоСреднемуБезПУПримечание.Видимость                   = ПоСреднемуБезПУ;
		Элементы.НадписьСпособРасчетаПоСреднемуЗначению.Видимость                    = ПоСреднемуБезПУ;
		
		// Видимость настройки расчета при отключении ПУ по утере, поломке или поверке.
		Элементы.ГруппаНастройкиКоличестваМесяцевУчетаНастройкиПриОтключенииПУ.Видимость = Объект.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний;
		
		ПоСреднемуБезПоказаний = (Объект.СпособРасчетаПоПУБезПоказаний 
									= ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению"));
		//Элементы.НадписьПериодРасчетаПоСреднемуБезПоказаний.Видимость  = ПоСреднемуБезПоказаний;
		Элементы.ПериодРасчетаПоСреднемуБезПоказаний.Видимость                   = ПоСреднемуБезПоказаний;
		Элементы.НадписьРасчетаПоСреднемуБезПоказанийПримечание.Видимость        = ПоСреднемуБезПоказаний;
		Элементы.НадписьПериодРасчетаПоСреднемуБезПоказаний2.Видимость           = ПоСреднемуБезПоказаний;
		Элементы.МинимальныйПериодРасчетаПоСреднемуБезПоказаний.Видимость        = ПоСреднемуБезПоказаний;
		Элементы.НадписьМинимальныйПериодРасчетаПоСреднемуБезПоказаний.Видимость = ПоСреднемуБезПоказаний;
		Элементы.НастройкаНачисленияПоСреднему.Видимость                         = ПоСреднемуБезПоказаний;
		
		РасчетПоСреднемуПоПост354 = (Объект.НастройкаНачисленияПоСреднему = Истина);
		Элементы.ДлительностьРасчетаПоСреднемуБезПоказаний.Видимость         = РасчетПоСреднемуПоПост354 И ПоСреднемуБезПоказаний;
		Элементы.НадписьДлительностьРасчетаПоСреднемуБезПоказаний.Видимость  = РасчетПоСреднемуПоПост354 И ПоСреднемуБезПоказаний;
		Элементы.НадписьДлительностьРасчетаПоСреднемуБезПоказаний1.Видимость = РасчетПоСреднемуПоПост354 И ПоСреднемуБезПоказаний;
		Элементы.НадписьСпособРасчетаПоСреднемуЗначению1.Видимость        = НЕ РасчетПоСреднемуПоПост354 И ПоСреднемуБезПоказаний;
		
		НеПроизводитьРасчет = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.НеПроизводить");
		ВидимостьНастройкиОтсутствияПУ        = ?(Объект.СпособРасчетаПоПУБезДействующихПУ = НеПроизводитьРасчет, Ложь, Истина);
		ВидимостьНастройкиОтсутствияПоказаний = ?(Объект.СпособРасчетаПоПУБезПоказаний     = НеПроизводитьРасчет, Ложь, Истина);
		Элементы.НастройкаОтсутствияДействующегоПУ.Видимость = ВидимостьНастройкиОтсутствияПУ;
		Элементы.НастройкаОтсутствияПоказанийПУ.Видимость    = ВидимостьНастройкиОтсутствияПоказаний;
		
		// Запрет на редактирование настроек, если выбрано начисление по формуле 9 постановления №307:
		Элементы.СпособРаспределенияПоказанийНаЛицевыеСчета.Доступность             = НЕ Объект.ИспользоватьФормулу9;
		Элементы.ПриОтсутствииПоказанийСчетчикНеУстановлен.Доступность              = НЕ Объект.ИспользоватьФормулу9;
		Элементы.ГруппаСпособРаспределенияУслугиПоСчетчикуНовыйАлгоритм.Доступность = НЕ Объект.ИспользоватьФормулу9;
		Элементы.ВариантРаспределенияРасходаКПУПоТарифам.Доступность                = НЕ Объект.ИспользоватьФормулу9;
		Элементы.ВариантРаспределенияРасходаКПУПоТарифам1.Доступность               = НЕ Объект.ИспользоватьФормулу9;
		
		// Доступность настройки размеров площадей МОП для услуги.
		Элементы.УстановитьРазмерыПлощадейМОПНорматив.Доступность  = Объект.НастройкаОграниченияОДННормативом;
		Элементы.УстановитьРазмерыПлощадейМОПФормула15.Доступность = Объект.ИспользоватьФормулу15;
		
		// Запрет на редактирование и установка видимости настроек, если выбрано начисление по постановлению №1708:
		Постановление1708 = ?(Объект.ВариантыНачисленияУслуги = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708"), Истина, Ложь);
		Элементы.СоставСуммарногоРасходаИПУДляРаспределения.Доступность                = НЕ Постановление1708;
		Элементы.СпособРаспределенияПоказанийНаЛицевыеСчета.Доступность                = НЕ Постановление1708;
		Элементы.СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритм.Доступность          = НЕ Постановление1708;
		Элементы.ВидПлощадиНовыйАлгоритм.Доступность                                   = НЕ Постановление1708;
		Элементы.ВариантРаспределенияРасходаКПУПоТарифам.Доступность                   = НЕ Постановление1708;
		Элементы.ВариантРаспределенияРасходаКПУПоТарифам1.Доступность                  = НЕ Постановление1708;
		Элементы.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику.Доступность = НЕ Постановление1708;
		Элементы.ВидПлощадиНовыйАлгоритмОтрицательныхПоказаний.Доступность             = НЕ Постановление1708;
		Элементы.ГруппаФлагаСчетчика.Видимость                                     = НЕ Постановление1708;
		Элементы.НадписьКНастройкамРаспределения.Видимость                         = НЕ Постановление1708;
		Элементы.ГруппаРасчетНачисленийПриОтсутствииДействующегоСчетчика.Видимость = НЕ Постановление1708;
		Элементы.ГруппаНастроекРаспределенияЭкономииПоЖилымПомещениям.Видимость    = НЕ Постановление1708;
		Элементы.ГруппаОграничениеОДНПроцентом.Видимость                           = НЕ Постановление1708;
		Элементы.НадписьНастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода.Видимость = НЕ Постановление1708;
		
		// Настройка доступности формул:
		// Запрещено выбирать одновременно взаимоисключающие формулы в рамках разных постановлений.
		Элементы.ИспользоватьФормулу9.Доступность = НЕ Объект.ИспользоватьФормулу3    И НЕ Объект.ИспользоватьФормулу3_1 
												  И НЕ Объект.ИспользоватьФормулы3и14 И НЕ Объект.ИспользоватьФормулу15 
												  И НЕ Объект.НастройкаОграниченияОДННормативом
												  И НЕ Объект.НастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода;
		Элементы.ИспользоватьФормулы3и14.Доступность = НЕ Объект.ИспользоватьФормулу9   И НЕ Объект.ИспользоватьФормулу3 
												     И НЕ Объект.ИспользоватьФормулу3_1 И НЕ Объект.НастройкаОграниченияОДННормативом
												     И НЕ Объект.НастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода;
		Элементы.ИспользоватьФормулу15.Доступность   = НЕ Объект.ИспользоватьФормулу9;
		Элементы.ИспользоватьФормулу3.Доступность    = НЕ Объект.ИспользоватьФормулу9 И НЕ Объект.ИспользоватьФормулы3и14;
		Элементы.ИспользоватьФормулу3_1.Доступность  = НЕ Объект.ИспользоватьФормулу9 И НЕ Объект.ИспользоватьФормулы3и14;
		Элементы.НастройкаОграниченияОДННормативом.Доступность = НЕ Объект.ИспользоватьФормулу9 
															   И НЕ Объект.ИспользоватьФормулы3и14;
		Элементы.НастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода.Доступность = НЕ Объект.ИспользоватьФормулу9 
																								И НЕ Объект.ИспользоватьФормулы3и14;
		Элементы.ДекорацияРазмерыПроцентовДляОграничения.Доступность = Объект.НастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода;
		
		// Настройка видимости формул:
		// 1) При ручной настройке видны все формулы, 
		// 2) при выборе конкретного постановления все формулы "включаются" автоматически, при этом не видны на форме.
		Для Каждого ТекРеквизит Из мТаблицаРеквизитовНастроекИзМакета Цикл
			Элементы[ТекРеквизит.ИмяРеквизита].Видимость = ?(Объект.ВариантНачисленияПоПУ = "РучнаяНастройка", Истина, Ложь);
		КонецЦикла;
		
		Элементы.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ.Видимость = 
							(Объект.ВариантРаспределенияРасходаКПУПоТарифам = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа"));
		Элементы.СпособРаспределенияОграниченийПоВидамТарифовКПУ.Видимость = 
							(Объект.ВариантРаспределенияРасходаКПУПоТарифам = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа") 
								И Объект.НастройкаОграниченияОДННормативом);
		
		Если Объект.СпособРаспределенияУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов") Тогда
			Элементы.ПанельДопНастройкиНовыйАлгоритм.Видимость = Истина;
			УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройкиНовыйАлгоритм, Элементы.ПанельДопНастройкиРасчетПоЖильцам);
			
		ИначеЕсли Объект.СпособРаспределенияУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади") Тогда
			Элементы.ПанельДопНастройкиНовыйАлгоритм.Видимость = Истина;
			УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройкиНовыйАлгоритм, Элементы.ПанельДопНастройкиРасчетПоПлощади);
			
		Иначе
			Элементы.ПанельДопНастройкиНовыйАлгоритм.Видимость = Ложь;
			
		КонецЕсли;
		
		// Видимость настроек распределения отрицательного расхода.
		Элементы.РазрешитьРаспределениеОтрицательногоРасходаОПУ.Доступность = НЕ Объект.ИспользоватьФормулу9;
		Элементы.НастройкиРаспределенияОтрицательногоРасхода.Видимость = Объект.РазрешитьРаспределениеОтрицательногоРасходаОПУ;
		
		Если Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов") Тогда
			Элементы.ПанельДопНастройкиНовыйАлгоритмОтрицательныхПоказаний.Видимость = Истина;
			УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройкиНовыйАлгоритмОтрицательныхПоказаний, Элементы.ПанельДопНастройкиРасчетПоЖильцамОтрицательныхПоказаний);
		ИначеЕсли Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади") Тогда
			Элементы.ПанельДопНастройкиНовыйАлгоритмОтрицательныхПоказаний.Видимость = Истина;
			УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройкиНовыйАлгоритмОтрицательныхПоказаний, Элементы.ПанельДопНастройкиРасчетПоПлощадиОтрицательныхПоказаний);
		Иначе
			Элементы.ПанельДопНастройкиНовыйАлгоритмОтрицательныхПоказаний.Видимость = Ложь;
		КонецЕсли;
		
		НеобходимаСверткаФлажкаОтсутствияСч = Объект.СпособРаспределенияПоказанийНаЛицевыеСчета =
		                              ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ВсеЛицевыеСчета");
		Элементы.ГруппаФлагаСчетчика.Видимость = ?(НеобходимаСверткаФлажкаОтсутствияСч,
		                                              Ложь,
		                                              Истина);
		
	// Настройки по составным услугам.
	ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам") Тогда
		
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройки, Элементы.РасчетФиксированногоНачисления);
		
		Элементы.ТабличнаяЧастьУслуги.Видимость = Истина;
		Элементы.ПанельДопНастройки.Видимость   = Истина;
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ТабличнаяЧастьУслуги, Элементы.СтраницаСоставныеУслуги);
		
		// Размер нормы для ограничения составных услуг для Нижегородской области отличен от размера нормы потребления 
		// услуги по лицевому счету и задается непосредственно в таблице составных услуг.
		Элементы.СоставныеУслугиРазмерОграничения.Видимость = 
				УПЖКХ_ОбщегоНазначенияСервер.ДоступнаНастройкаВыбораНормОграниченияДляСоставныхУслуг();
		
	// Настройки комиссии банка.
	ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка") Тогда
		
		Элементы.ТабличнаяЧастьУслуги.Видимость = Истина;
		Элементы.ПанельДопНастройки.Видимость = Ложь;
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ТабличнаяЧастьУслуги, Элементы.СтраницаБазаКомиссии);
		
	// Настройки по площади.
	ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПлощади") Тогда
		
		Элементы.ТабличнаяЧастьУслуги.Видимость = Ложь;
		Элементы.ПанельДопНастройки.Видимость   = Истина;
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройки, Элементы.РасчетПоПлощади);
		
	// Настройки по количеству жильцов.
	ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов") Тогда
		
		Элементы.ТабличнаяЧастьУслуги.Видимость = Ложь;
		Элементы.ПанельДопНастройки.Видимость   = Истина;
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройки, Элементы.РасчетПоЖильцам);
		
	// Настройки фиксированного начисления.
	ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление") Тогда
		
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройки, Элементы.РаспределениеПоЛицевымСчетам);
		
		Элементы.ТабличнаяЧастьУслуги.Видимость = Истина;
		Элементы.ПанельДопНастройки.Видимость   = Истина;
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ТабличнаяЧастьУслуги, Элементы.СтраницаРасчетФиксированногоНачисления);
		
	Иначе
		
		Элементы.ТабличнаяЧастьУслуги.Видимость = Ложь;
		Элементы.ПанельДопНастройки.Видимость   = Истина;
		УстановитьТекущуюСтраницуПанели(Элементы, Элементы.ПанельДопНастройки, Элементы.РасчетФиксированногоНачисления);
		
	КонецЕсли;
	
	// Управление видимостью табличной части "ТаблицаИнформации" по тарифам.
	ЭтоСтраницаПоТарифам = (Элементы.Панель.ТекущаяСтраница = Элементы.Тарифы);
	Элементы.ВспомогательнаяНадписьТарифы.Видимость         = Не ЭтоСтраницаПоТарифам;
	Элементы.ТаблицаИнформации.Видимость                    = ЭтоСтраницаПоТарифам;
	
	Элементы.ЕдиницаИзмерения.Заголовок = Строка(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ВидУслуги, "ЕдиницаИзмерения"));
	
	// Добровольное страхование начисляем всегда за полный месяц.
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Объект.Ссылка = УслугаДобровольногоСтрахования Тогда
		Элементы.ФиксированныйРасчетБезУчетаПериода.Видимость = Ложь;
		Элементы.НадписьНеУчитыватьПериоды.Видимость          = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура управляет видимость.
//
Процедура УстановитьТекущуюСтраницуПанели(Элементы, Панель, СтраницаПанели)
	
	// Раньше управление видимостью выполнялось как на клиента, так и на сервере.
	// На клиенте происходил многократный неявный вызов сервера, что замедляло работу и приводило
	// к медленной проприсове формы. Теперь видимость элементов формы устанавливается только на сервере.
	
	Панель.ТекущаяСтраница = СтраницаПанели;
	
	Если Панель = Элементы.ПанельНастройки Тогда
		
		Элементы.НовыйАлгоритмРасчетаПУ.Видимость = ?(СтраницаПанели = Элементы.НовыйАлгоритмРасчетаПУ, Истина, Ложь);
		Элементы.ОсновнаяНастройка.Видимость      = ?(СтраницаПанели = Элементы.ОсновнаяНастройка,      Истина, Ложь);
		
	ИначеЕсли Панель = Элементы.ПанельДопНастройки Тогда
		
		Элементы.РасчетФиксированногоНачисления.Видимость = ?(СтраницаПанели = Элементы.РасчетФиксированногоНачисления, Истина, Ложь);
		Элементы.РасчетПоПлощади.Видимость                = ?(СтраницаПанели = Элементы.РасчетПоПлощади,                Истина, Ложь);
		Элементы.РасчетПоЖильцам.Видимость                = ?(СтраницаПанели = Элементы.РасчетПоЖильцам,                Истина, Ложь);
		Элементы.РаспределениеПоЛицевымСчетам.Видимость   = ?(СтраницаПанели = Элементы.РаспределениеПоЛицевымСчетам,   Истина, Ложь);
		Элементы.РасчетФиксированногоНачисления.Видимость = ?(СтраницаПанели = Элементы.РасчетФиксированногоНачисления, Истина, Ложь);
		
	ИначеЕсли Панель = Элементы.ТабличнаяЧастьУслуги Тогда
		
		Элементы.СтраницаСоставныеУслуги.Видимость                = ?(СтраницаПанели = Элементы.СтраницаСоставныеУслуги,                Истина, Ложь);
		Элементы.СтраницаБазаКомиссии.Видимость                   = ?(СтраницаПанели = Элементы.СтраницаБазаКомиссии,                   Истина, Ложь);
		Элементы.СтраницаРасчетФиксированногоНачисления.Видимость = ?(СтраницаПанели = Элементы.СтраницаРасчетФиксированногоНачисления, Истина, Ложь);
		
	ИначеЕсли Панель = Элементы.ПанельДопНастройкиНовыйАлгоритм Тогда
		
		Элементы.ПанельДопНастройкиРасчетПоЖильцам.Видимость = ?(СтраницаПанели = Элементы.ПанельДопНастройкиРасчетПоЖильцам, Истина, Ложь);
		Элементы.ПанельДопНастройкиРасчетПоПлощади.Видимость = ?(СтраницаПанели = Элементы.ПанельДопНастройкиРасчетПоПлощади, Истина, Ложь);
		
	ИначеЕсли Панель = Элементы.ПанельДопНастройкиНовыйАлгоритмОтрицательныхПоказаний Тогда
		
		Элементы.ПанельДопНастройкиРасчетПоЖильцамОтрицательныхПоказаний.Видимость = ?(СтраницаПанели = Элементы.ПанельДопНастройкиРасчетПоЖильцамОтрицательныхПоказаний, Истина, Ложь);
		Элементы.ПанельДопНастройкиРасчетПоПлощадиОтрицательныхПоказаний.Видимость = ?(СтраницаПанели = Элементы.ПанельДопНастройкиРасчетПоПлощадиОтрицательныхПоказаний, Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обновляет описание варианта распределения услуги по лицевым счетам.
Процедура ОбновитьОписаниеВариантаРаспределенияУслугиПоЛС()

	Если Объект.ВариантРаспределенияУслугиПоЛС = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияУслугиПоЛС.ПолностьюНаКаждыйЛицевойСчет") Тогда
		Элементы.ОписаниеРаспределениеПоЛС.Заголовок = " При начислении услуги на лицевые счета в документе ""Начисление услуг""
														| расчет будет производиться полностью на каждый лицевой счет";
	ИначеЕсли Объект.ВариантРаспределенияУслугиПоЛС = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияУслугиПоЛС.ПропорциональноДолямЛицевыхСчетов") Тогда
		Элементы.ОписаниеРаспределениеПоЛС.Заголовок = " При начислении услуги на лицевые счета в документе ""Начисление услуг""
														| расчет будет производиться пропорционально долям лицевых счетов";
	ИначеЕсли Объект.ВариантРаспределенияУслугиПоЛС = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияУслугиПоЛС.ПропорциональноКоличествуЛСВПомещении") Тогда
		Элементы.ОписаниеРаспределениеПоЛС.Заголовок = " При начислении услуги на лицевые счета в документе ""Начисление услуг""
														| расчет будет производиться пропорционально количеству л/с в помещении";
	Иначе
		Элементы.ОписаниеРаспределениеПоЛС.Заголовок = "";
	КонецЕсли;

КонецПроцедуры // ОбновитьОписаниеВариантаРаспределенияУслугиПоЛС()

&НаСервере
// Устанавливает список выбора видов ограничений составных услуг.
//
Процедура УстановитьСписокВыбораВидовОграничений()
	
	// Определим список выбора из значений перечисления.
	СписокВидовОграничений = Новый СписокЗначений;
	Для Каждого ЭлементЗаполнения ИЗ Метаданные.Перечисления.КВП_ВидыОграниченийСоставныхУслуг.ЗначенияПеречисления Цикл
		Если ЭлементЗаполнения.Имя = "СоцНорма" ИЛИ ЭлементЗаполнения.Имя = "Число" Тогда
			Продолжить;
		КонецЕсли;
		СписокВидовОграничений.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ВидыОграниченийСоставныхУслуг." + ЭлементЗаполнения.Имя), ЭлементЗаполнения.Синоним);
	КонецЦикла;
	
	// Список выбора поля вида ограничения составных услуг.
	СписокВыбораЭлемента = Элементы.СоставныеУслугиВидОграничения.СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	Для Каждого ТекЭлемент Из СписокВидовОграничений Цикл
		СписокВыбораЭлемента.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	// Список выбора поля вида ограничения составных услуг по ПУ.
	СписокВыбораЭлемента = Элементы.СоставныеУслугиНовыйАлгоритмВидОграничения.СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	Для Каждого ТекЭлемент Из СписокВидовОграничений Цикл
		СписокВыбораЭлемента.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // УстановитьСписокВыбораВидовОграничений()

&НаКлиенте
// Процедура устанавливает списки значений на поля выбора.
Процедура УстановкаСпискаЗначенийДляПолейВыбора()
	
	// Устанавливаем список значений жильцов.
	СпВидовОграниченийДляВидовЖильцов = Новый СписокЗначений();
	СпВидовОграниченийДляВидовЖильцов.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Проживающие"), ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Проживающие"));
	СпВидовОграниченийДляВидовЖильцов.Добавить(ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные"), ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные"));
	
	Элементы.ВидыЖильцов.СписокВыбора.Очистить();
	Элементы.ВидыЖильцовНовыйАлгоритм.СписокВыбора.Очистить();
	Элементы.ВидыЖильцовНовыйАлгоритмОтрицательныхПоказаний.СписокВыбора.Очистить();
	
	Для Каждого ТекЭлементСписка Из СпВидовОграниченийДляВидовЖильцов Цикл
		Элементы.ВидыЖильцов.СписокВыбора.Добавить(ТекЭлементСписка.Значение, ТекЭлементСписка.Представление);
		Элементы.ВидыЖильцовНовыйАлгоритм.СписокВыбора.Добавить(ТекЭлементСписка.Значение, ТекЭлементСписка.Представление);
		Элементы.ВидыЖильцовНовыйАлгоритмОтрицательныхПоказаний.СписокВыбора.Добавить(ТекЭлементСписка.Значение, ТекЭлементСписка.Представление);
	КонецЦикла;
	
	// Устанавливаем список значений способов распределения по счетчику.
	СпТиповРаспределения = Новый СписокЗначений;
	СпТиповРаспределения.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"),
								  ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"));
	СпТиповРаспределения.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуПомещенийВКвартире"),
								  ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуПомещенийВКвартире"));
	СпТиповРаспределения.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге"),
								  ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге"));
	СпТиповРаспределения.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов"),
								  ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов"));
	СпТиповРаспределения.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.Поровну"),
								  ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.Поровну"));
	
	Элементы.СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритм.СписокВыбора.Очистить();
	Для Каждого ТекЭлементСписка Из СпТиповРаспределения Цикл
		Элементы.СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритм.СписокВыбора.Добавить(ТекЭлементСписка.Значение, ТекЭлементСписка.Представление);
	КонецЦикла;
	
	// Список выбора способов распределения отрицательного расхода.
	СпТиповРаспределения = Новый СписокЗначений;
	СпТиповРаспределения.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"),
								  ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"));
	СпТиповРаспределения.Добавить(ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов"),
								  ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов"));
	
	Элементы.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику.СписокВыбора.Очистить();
	Для Каждого ТекЭлементСписка Из СпТиповРаспределения Цикл
		Элементы.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику.СписокВыбора.Добавить(ТекЭлементСписка.Значение, ТекЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры // УстановкаСпискаЗначенийДляПолейВыбора()

&НаКлиенте
Процедура ЗаполнитьРеквизитФормы(НазваниеРеквизита, ЗначениеРеквизита, ДопУсловие = Ложь)
	
	Если НЕ ЗначениеЗаполнено(НазваниеРеквизита) ИЛИ ДопУсловие Тогда
		НазваниеРеквизита = ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитФормы()

&НаКлиенте
// Процедура заполняет реквизиты формы.
Процедура ЗаполнитьРеквизитыФормы()
	
	Если НЕ Объект.ВариантНачисленияПоПУ = "РучнаяНастройка" Тогда
		
		// Если выбрано постановление, то:
		// 1) очищаем все настройки по др. постановлениям;
		Для Каждого ТекСтрока Из мТаблицаНастроекПостановленияИзМакета Цикл
			НайденныеРеквизиты = мТаблицаРеквизитовНастроекИзМакета.НайтиСтроки(Новый Структура("Настройка", ТекСтрока.Настройка));
			Для Каждого ТекРеквизит Из НайденныеРеквизиты Цикл
				Если ТекРеквизит.Признак И НЕ ТекСтрока.Постановление = Объект.ВариантНачисленияПоПУ Тогда
					Объект[ТекРеквизит.ИмяРеквизита] = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// 2) устанавливаем все настройки выбранного постановления по умолчанию.
		НайденныеНастройки = мТаблицаНастроекПостановленияИзМакета.НайтиСтроки(Новый Структура("Постановление", Объект.ВариантНачисленияПоПУ));
		Для Каждого ТекСтрока Из НайденныеНастройки Цикл
			НайденныеРеквизиты = мТаблицаРеквизитовНастроекИзМакета.НайтиСтроки(Новый Структура("Настройка", ТекСтрока.Настройка));
			Для Каждого ТекРеквизит Из НайденныеРеквизиты Цикл
				Если ТекРеквизит.Признак Тогда
					Объект[ТекРеквизит.ИмяРеквизита] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.ВариантНачисленияПоПУ = "307" ИЛИ Объект.ИспользоватьФормулу9 Тогда
		
		ЗаполнитьРеквизитФормы(Объект.СпособРаспределенияПоказанийНаЛицевыеСчета, ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ЛицевыеСчетаСИПУ"),    Истина);
		ЗаполнитьРеквизитФормы(Объект.СпособРаспределенияУслугиПоСчетчику,        ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге"),     Истина);
		ЗаполнитьРеквизитФормы(Объект.ВариантРаспределенияРасходаКПУПоТарифам,    ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеСуммарногоРасхода"), Истина);
		ЗаполнитьРеквизитФормы(Объект.СоставСуммарногоРасходаИПУДляРаспределения, ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу"), 
							   Объект.СоставСуммарногоРасходаИПУДляРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.ТолькоРасходПоПриборамУчета"));
		
		Объект.ПриОтсутствииПоказанийСчетчикНеУстановлен      = Истина;
		Объект.РазрешитьРаспределениеОтрицательногоРасходаОПУ = Ложь;
		
	ИначеЕсли Объект.ВариантНачисленияПоПУ = "354" ИЛИ Объект.ВариантНачисленияПоПУ = "344" Тогда
		
		ЗаполнитьРеквизитФормы(Объект.СпособРаспределенияПоказанийНаЛицевыеСчета, ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ВсеЛицевыеСчета"));
		ЗаполнитьРеквизитФормы(Объект.СпособРаспределенияУслугиПоСчетчику,        ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"),
							   Объект.СпособРаспределенияУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге"));
		
		ЗаполнитьРеквизитФормы(Объект.ВидПлощади, ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь"), 
							   Объект.СпособРаспределенияУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"));
		
		ЗаполнитьРеквизитФормы(Объект.ВариантРаспределенияРасходаКПУПоТарифам,    ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеСуммарногоРасхода"));
		ЗаполнитьРеквизитФормы(Объект.СоставСуммарногоРасходаИПУДляРаспределения, ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу"));
		
		ЗаполнитьРеквизитФормы(Объект.ПриОтсутствииПоказанийСчетчикНеУстановлен,      Ложь);
		ЗаполнитьРеквизитФормы(Объект.РазрешитьРаспределениеОтрицательногоРасходаОПУ, Истина);
		
	ИначеЕсли Объект.ВариантыНачисленияУслуги = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708") Тогда
		
		ЗаполнитьРеквизитФормы(Объект.СоставСуммарногоРасходаИПУДляРаспределения,                  ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему"), Истина);
		ЗаполнитьРеквизитФормы(Объект.СпособРаспределенияПоказанийНаЛицевыеСчета,                  ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ВсеЛицевыеСчета"),                      Истина);
		ЗаполнитьРеквизитФормы(Объект.СпособРаспределенияУслугиПоСчетчику,                         ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"),                                        Истина);
		ЗаполнитьРеквизитФормы(Объект.ВидПлощади,                                                  ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь"),                                                                  Истина);
		ЗаполнитьРеквизитФормы(Объект.ПриОтсутствииПоказанийСчетчикНеУстановлен,                   Ложь,                                                                                                                                    Истина);
		ЗаполнитьРеквизитФормы(Объект.ВариантРаспределенияРасходаКПУПоТарифам,                     ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеСуммарногоРасхода"),                  Истина);
		ЗаполнитьРеквизитФормы(Объект.РаспределятьТолькоНаЖилыеПомещения,                          Ложь,                                                                                                                                    Истина);
		ЗаполнитьРеквизитФормы(Объект.НастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода, Ложь,                                                                                                                             Истина);
		ЗаполнитьРеквизитФормы(Объект.РаспределятьТолькоНаЖилыеПомещения, Ложь, Истина);
		ЗаполнитьРеквизитФормы(Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику, ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"), Истина);
		ЗаполнитьРеквизитФормы(Объект.ВидПлощадиРаспределенияОтрицательныхПоказаний, ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь"), Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыФормы()

&НаСервере
// Процедура устанавливает параметры динамических списков.
Процедура УстановитьПараметрыДинамическихСписков()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаИнформации, "Период", 
																		УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаИнформации, "Услуга", Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функуия возвращает способ расчета услуги.
Функция ПолучитьРеквизитОбъекта(ОбъектИсточник, ИмяРеквизита)
	
	Возврат ОбъектИсточник[ИмяРеквизита];
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает количество способов расчета и видов плозадей для проверки
// таблицы составных услуг.
Функция ПолучитьКоличествоСпособовРасчетаИВидовПлощадейПроверкаСоставныхУслуг(Знач СоставныеУслуги)
	
	СписокВыбранныхСпособовРасчетаСоставныхУслуг = Новый ТаблицаЗначений;
	СписокВыбранныхСпособовРасчетаСоставныхУслуг.Колонки.Добавить("СпособРасчета");
	СписокВыбранныхСпособовРасчетаСоставныхУслуг.Колонки.Добавить("ВидПлощади");
	
	Для Каждого ТекУслуга Из СоставныеУслуги Цикл
		
		НоваяСтрока = СписокВыбранныхСпособовРасчетаСоставныхУслуг.Добавить();
		НоваяСтрока.СпособРасчета = ТекУслуга.Услуга.СпособРасчета;
		НоваяСтрока.ВидПлощади    = ТекУслуга.Услуга.ВидПлощади;
		
	КонецЦикла;
	
	СписокВыбранныхСпособовРасчетаСоставныхУслуг.Свернуть("СпособРасчета, ВидПлощади");
	
	Возврат СписокВыбранныхСпособовРасчетаСоставныхУслуг.Количество();
	
КонецФункции

&НаСервере
// Заполняет табличную часть "База комиссии".
Функция ЗаполнитьБазаКомиссииНаСервере()
	
	Объект.БазаКомиссии.Очистить();
	
	ЗапросУслуг = Новый Запрос;
	ЗапросУслуг.Текст = "ВЫБРАТЬ
	                    |	ИСТИНА КАК Использовать,
	                    |	КВП_Услуги.Ссылка КАК Услуга
	                    |ИЗ
	                    |	Справочник.КВП_Услуги КАК КВП_Услуги
	                    |ГДЕ
	                    |	(НЕ КВП_Услуги.Ссылка = &ЭтаУслуга)
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	КВП_Услуги.Ссылка.Наименование";
	
	ЗапросУслуг.УстановитьПараметр("ЭтаУслуга", Объект.Ссылка);
	ВыборкаУслуг = ЗапросУслуг.Выполнить().Выгрузить();
	Объект.БазаКомиссии.Загрузить(ВыборкаУслуг);
	
КонецФункции

&НаСервере
// Заполняет реквизиты формы значениями по умолчанию.
Процедура УстановитьЗначенияРеквизитовПоУмолчанию()
	
	Объект.ВариантНачисленияПоПУ                        = "РучнаяНастройка";
	Объект.СпособРасчетаПоПУБезДействующихПУ            = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.НеПроизводить");
	Объект.СпособРасчетаПоПУБезПоказаний                = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.НеПроизводить");
	Объект.ПериодРасчетаПоСреднемуБезДействующихПУ      = 12;
	Объект.ПериодРасчетаПоСреднемуБезПоказаний          = 12;
	Объект.НастройкаНачисленияПоСреднему                = Истина;
	Объект.ДлительностьРасчетаПоСреднемуБезПоказаний    = 3;
	Объект.НастройкаОтсутствияДействующегоПУ            = 1;
	Объект.НастройкаОтсутствияПоказанийПУ               = 1;
	
	Объект.СпособРаспределенияПоказанийНаЛицевыеСчета   = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ВсеЛицевыеСчета");
	Объект.СоставСуммарногоРасходаИПУДляРаспределения   = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.ТолькоРасходПоПриборамУчета");
	Объект.ВариантРаспределенияРасходаКПУПоТарифам      = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеСуммарногоРасхода");
	Объект.СпособРаспределенияУслугиПоСчетчику          = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.Поровну");
	Объект.СпособРаспределенияОграниченийПоВидамТарифов = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияОграниченийПоВидамТарифов.ПропорциональноФактическомуРасходу");
	
	Объект.ВидыЖильцов                                  = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцов.Проживающие");
	Объект.ВидПлощади                                   = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь");
	Объект.ВариантРаспределенияУслугиПоЛС               = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияУслугиПоЛС.ПолностьюНаКаждыйЛицевойСчет");
	
КонецПроцедуры

&НаСервереБезКонтекста
// Если услуга выбрана в качестве услуги добровольного страхования, нельзя
// позволять указывать способы расчета, отличные от доступных для таких услуг.
Функция ВыбранНеверныйСпособРасчетаДляУслугиДобровольногоСтрахования(СсылкаНаУслугу, СпособРасчета, УслугаДобровольногоСтрахования, ВестиУчетНачисленийПоДобровольномуСтрахованию)
	
	ДоступныеСпособыРасчета = Справочники.КВП_Услуги.ПолучитьДоступныеСпособыРасчетаДляУслугДобровольногоСтрахования();
	
	Если ВестиУчетНачисленийПоДобровольномуСтрахованию
	 И УслугаДобровольногоСтрахования = СсылкаНаУслугу
	 И ДоступныеСпособыРасчета.НайтиПоЗначению(СпособРасчета) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВыбранНеверныйСпособРасчетаДляУслугиДобровольногоСтрахования()

&НаСервере
// Возвращает "Истина", если по текущей услуге уже установлены приборы учета.
Функция УстановленыПриборыУчетаПоТекущейУслуге(Услуга)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&Период, Счетчик.ВидУслуги = &Услуга) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("Услуга", Услуга);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // УстановленыПриборыУчетаПоТекущейУслуге()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		УстановитьЗначенияРеквизитовПоУмолчанию();
	КонецЕсли;
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	ГруппыУслугПриСозданииНаСервере(ЭтотОбъект, "ГруппыУслуг");
	
	НастройкаОтсутствияДействующегоПУ = ?(Объект.НастройкаОтсутствияДействующегоПУ, 1, 0);
	НастройкаОтсутствияПоказанийПУ    = ?(Объект.НастройкаОтсутствияПоказанийПУ, 1, 0);
	
	УстановитьПараметрыДинамическихСписков();
	
	ОбновитьТаблицыНастроекМакета();
	УстановитьЗаголовкиФормул(ЭтаФорма);
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
	УстановитьСписокВыбораВидовОграничений();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Предупреждение при редактировании поля "КоммунальныйРесурс".
	Элементы.КоммунальныйРесурс.ПредупреждениеПриРедактировании = "Текущая услуга используется в других объектах, изменение ее парамеров может спровоцировать ошибки в учете";
	
	Если УстановленыПриборыУчетаПоТекущейУслуге(Объект.Ссылка) Тогда
		Элементы.КоммунальныйРесурс.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		Элементы.КоммунальныйРесурс.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ГруппыУслугПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	СпособРасчетаКомиссииПриИзменении(Элементы.СпособРасчетаКомиссии);
	ОбновитьОписаниеВариантаРаспределенияУслугиПоЛС();
	УстановкаСпискаЗначенийДляПолейВыбора();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ДЛЯ УСЛУГ, РАССЧИТЫВАЕМЫХ ПО ПРИБОРАМ УЧЕТА.
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
		
		// 1) ПРОВЕРКА НАСТРОЕК ДЛЯ РАСЧЕТА ИНДИВИДУЛЬНОГО ПОТРЕБЛЕНИЯ ПО ПРИБОРАМ УЧЕТА.
		Если ЗначениеЗаполнено(Объект.СпособРасчетаПоПУБезДействующихПУ) Тогда
			Если Объект.СпособРасчетаПоПУБезДействующихПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению") Тогда
				Если Объект.ПериодРасчетаПоСреднемуБезДействующихПУ = 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан период для расчета среднего потребления 
					                                                  |при отсутствии действующего счетчика!", , , ,Отказ);
				ИначеЕсли Объект.ПериодРасчетаПоСреднемуБезДействующихПУ < Объект.МинимальныйПериодРасчетаПоСреднемуБезДействующихПУ Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Минимальный период, при котором возможен расчет среднего 
					                                                  |потребления при отсутствии действующего счетчика, не может быть больше периода, 
					                                                  |за который берутся данные для расчета среднего потребления
					                                                  |при отсутствии действующего счетчика!", , , ,Отказ);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан способ расчета начислений при отсутствии действующего счетчика!", , , ,Отказ);
		КонецЕсли;
		
		// Проверка заполнения настроек расчета при отключении ПУ.
		Если Объект.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний Тогда
			Если Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано количество месяцев расчета по настройке при отключении ПУ для жилых помещений!", , , ,Отказ);
			КонецЕсли;
			Если Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано количество месяцев расчета по настройке при отключении ПУ для нежилых помещений!", , , ,Отказ);
			КонецЕсли;
		Иначе
			// Сбросим значения второстепенных настроек, если они не используются.
			Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений = 0;
			Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СпособРасчетаПоПУБезПоказаний) Тогда
			Если Объект.СпособРасчетаПоПУБезПоказаний = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРасчетаПоПриборамУчета.ПроизводитьПоСреднемуЗначению") Тогда
				Если Объект.ПериодРасчетаПоСреднемуБезПоказаний = 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан период для расчета среднего потребления
					                                                  |при отсутствии показаний счетчика!", , , ,Отказ);
				ИначеЕсли Объект.НастройкаНачисленияПоСреднему И Объект.ДлительностьРасчетаПоСреднемуБезПоказаний = 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана длительность расчета по среднему потреблению
					                                                  |при отсутствии показаний счетчика!", , , ,Отказ);
				ИначеЕсли Объект.ПериодРасчетаПоСреднемуБезПоказаний < Объект.МинимальныйПериодРасчетаПоСреднемуБезПоказаний Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Минимальный период, при котором возможен расчет среднего 
					                                                  |потребления при отсутствии показаний счетчика, не может быть больше периода, 
					                                                  |за который берутся данные для расчета среднего потребления
					                                                  |при отсутствии показаний счетчика!", , , ,Отказ);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан способ расчета начислений при отсутствии показаний счетчика!", , , ,Отказ);
		КонецЕсли;
		
		// 2) ПРОВЕРКА НАСТРОЕК ДЛЯ РАСЧЕТА КОЛЛЕКТИВНОГО ПОТРЕБЛЕНИЯ ПО ПРИБОРАМ УЧЕТА.
		Если Объект.СпособРаспределенияПоказанийНаЛицевыеСчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ПустаяСсылка") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан способ распределения показаний на лицевые счета!", , , ,Отказ);
		КонецЕсли;
		
		Если Объект.СоставСуммарногоРасходаИПУДляРаспределения.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан состав индивидуального расхода для распределения КПУ!", , , ,Отказ);
		КонецЕсли;
		
		Если Объект.ВариантРаспределенияРасходаКПУПоТарифам.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вариант распределения расхода КПУ по тарифам!", , , ,Отказ);
			
		ИначеЕсли Объект.ВариантРаспределенияРасходаКПУПоТарифам = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа")
				И Объект.ВариантРаспределенияПоТарифамНаЛСПриОтсутствииНачисленияПоИПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыНачисленияПоКоллективнымПУ.ПустаяСсылка") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вариант распределения по тарифам на л/с при отсутствии начисления по ИПУ!", , , ,Отказ);
				
		КонецЕсли;
		
		Если Объект.СпособРаспределенияУслугиПоСчетчику.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан способ распределения услуги по прибору учета!", , , ,Отказ);
		КонецЕсли;
		
		Если Объект.РазрешитьРаспределениеОтрицательногоРасходаОПУ Тогда
			
			Если Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику.Пустая() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан способ распределения отрицательного расхода по прибору учета!", , , ,Отказ);
			КонецЕсли;
			
			Если Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади")
			  И Объект.ВидПлощадиРаспределенияОтрицательныхПоказаний.Пустая() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид площади для распределения отрицательного расхода по прибору учета!", , , ,Отказ);
			КонецЕсли;
			
			Если Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов")
			  И Объект.ВидыЖильцовРаспределенияОтрицательныхПоказаний.Пустая() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид жильцов для распределения отрицательного расхода по прибору учета!", , , ,Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.СпособРаспределенияОграниченийПоВидамТарифов.Пустая() Тогда
			Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан способ распределения ограничений по видам тарифов!", , , ,Отказ);
			ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
			        И Объект.ВариантРаспределенияРасходаКПУПоТарифам = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеПоВидамТарифа")
			        И Объект.НастройкаОграниченияОДННормативом Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан способ распределения нормативов потребления по видам тарифов!", , , ,Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") 
	        И НЕ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика") Тогда
		Объект.СпособРаспределенияОграниченийПоВидамТарифов = ПредопределенноеЗначение("Перечисление.УПЖКХ_СпособыРаспределенияОграниченийПоВидамТарифов.ПропорциональноФактическомуРасходу");
	КонецЕсли;
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ДЛЯ УСЛУГ, РАССЧИТЫВАЕМЫХ ПО ПЛОЩАДИ.
	Если (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПлощади")
	 ИЛИ Объект.СпособРаспределенияУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади"))
	  И Объект.ВидПлощади.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан вид площади для расчета услуги!", , , ,Отказ);
	КонецЕсли;
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ДЛЯ УСЛУГ, РАССЧИТЫВАЕМЫХ ПО КОЛИЧЕСТВУ ЖИЛЬЦОВ.
	Если (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов") 
	 ИЛИ Объект.СпособРаспределенияУслугиПоСчетчику = ПредопределенноеЗначение("Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов"))
	   И Объект.ВидыЖильцов.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран вариант распределения услуги по видам количества жильцов!", , , ,Отказ);
	КонецЕсли;
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ДЛЯ РАССЧЕТА ФИКСИРОВАННЫХ УСЛУГ.
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ФиксированноеНачисление") 
	   И Объект.ВариантРаспределенияУслугиПоЛС.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран вариант распределения услуги по лицевым счетам!", , , ,Отказ);
	КонецЕсли;
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ДЛЯ УСЛУГ КОМИССИИ БАНКА.
	Если (НЕ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.КомиссияБанка")) И Объект.БазаКомиссии.Количество() > 0 Тогда
		Объект.БазаКомиссии.Очистить();
	КонецЕсли;
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ДЛЯ СОСТАВНЫХ УСЛУГ, в т.ч. рассчитываемых по приборам учета.
	Если (Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам") 
	 ИЛИ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"))
	   И Объект.СоставныеУслуги.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана ни одна составная услуга!", , , ,Отказ);
	ИначеЕсли (НЕ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам") 
	   И НЕ Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"))
	   И Объект.СоставныеУслуги.Количество() > 0 Тогда
		Объект.СоставныеУслуги.Очистить();
	КонецЕсли;
	
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам") Тогда
		
		Для каждого ТекУслуга Из Объект.СоставныеУслуги Цикл
			
			ВыбранноеЗначение = СписокСпособовРасчетаДляОтбораСоставныхУслуг.НайтиПоЗначению(ПолучитьРеквизитОбъекта(ТекУслуга.Услуга, "СпособРасчета")); 
			Если ВыбранноеЗначение = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Составная услуга (стр. "+ТекУслуга.НомерСтроки+") должна иметь способ расчета
				                                                  |""По количеству проживающих"" или ""По площади""!", , , , Отказ);
				Прервать;
			КонецЕсли;
			
			Если ТекУслуга.ВидОграничения.Пустая()
			 ИЛИ ТекУслуга.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поля ""услуга"" и ""вид ограничения"" в стр. "+ТекУслуга.НомерСтроки+" 
				                                                  |должны быть заполнены!", , , , Отказ);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоСпособовРасчетаИВидовПлощади = ПолучитьКоличествоСпособовРасчетаИВидовПлощадейПроверкаСоставныхУслуг(Объект.СоставныеУслуги);
		
		Если КоличествоСпособовРасчетаИВидовПлощади > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Составные услуги должны иметь одинаковый способ расчета и вид площади!", , , ,Отказ);
		КонецЕсли;
		
	ИначеЕсли Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
		
		Для Каждого ТекУслуга Из Объект.СоставныеУслуги Цикл
			
			Если НЕ (ПолучитьРеквизитОбъекта(ТекУслуга.Услуга, "СпособРасчета") = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Составная услуга (стр. " + ТекУслуга.НомерСтроки + ") должна иметь способ расчета
				                                                  |""По показаниям счетчика""!", , , , Отказ);
				Прервать;
			КонецЕсли;
			
			Если ТекУслуга.ВидОграничения.Пустая()
			 ИЛИ ТекУслуга.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поля ""услуга"" и ""вид ограничения"" в стр. " + ТекУслуга.НомерСтроки + "
				                                                  |должны быть заполнены!", , , , Отказ);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ДЛЯ УСЛУГ ДОБРОВОЛЬНОГО СТРАХОВАНИЯ.
	// (выбор услуги добровольного страхования осуществляется в Настройках параметров учета ЖКХ).
	Если Не Объект.Ссылка.Пустая() И ВыбранНеверныйСпособРасчетаДляУслугиДобровольногоСтрахования(Объект.Ссылка, Объект.СпособРасчета, УслугаДобровольногоСтрахования,
																								  ВестиУчетНачисленийПоДобровольномуСтрахованию) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В Настройках параметров учета (ЖКХ) текущая услуга выбрана услугой добровольного страхования.
														  |Она может иметь только следующие способы расчета: ""По площади"", ""Фиксированное начисление"".", , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ГруппыУслугПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" панели формы.
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// Если выбирается закладка "Информация", заполняем таблицу
	Если ТекущаяСтраница = Элементы.Тарифы Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ПанельПриСменеСтраницыЗавершение", ЭтотОбъект), 
								   "Сначала необходимо записать элемент справочника!");
			Возврат;
		Иначе
			УстановитьПараметрыДинамическихСписков();
			Элементы.ТаблицаИнформации.Обновить();
		КонецЕсли;
		
	// Если выбирается закладка "Группы услуг"
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппыУслуг Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ПанельПриСменеСтраницыЗавершение", ЭтотОбъект), 
								   "Сначала необходимо записать элемент справочника!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПанельПриСменеСтраницыПродолжение();
	
КонецПроцедуры // ПанельПриСменеСтраницы()

&НаКлиенте
// Процедура-обработчик при показе предупреждения, вызванной в процедуре "ПанельПриСменеСтраницы()".
Процедура ПанельПриСменеСтраницыЗавершение(ДополнительныеПараметры) Экспорт
	
	Элементы.Панель.ТекущаяСтраница = Элементы.Основная;
	
	ПанельПриСменеСтраницыПродолжение();

КонецПроцедуры // ПанельПриСменеСтраницыЗавершение()

&НаКлиенте
// Вызывает механизм настройки видимости и доступности элементов формы.
Процедура ПанельПриСменеСтраницыПродолжение()
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();

КонецПроцедуры // ПанельПриСменеСтраницыПродолжение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СоставСуммарногоРасходаИПУДляРаспределения".
Процедура СоставСуммарногоРасходаИПУДляРаспределенияПриИзменении(Элемент)
	
	Если Объект.ИспользоватьФормулу9
	   И Объект.СоставСуммарногоРасходаИПУДляРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.ТолькоРасходПоПриборамУчета") Тогда
		Объект.СоставСуммарногоРасходаИПУДляРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для формулы №9 начисления по нормативу должны включаться в индивидуальный расход при распределении!");
	КонецЕсли;
	
	Если УПЖКХ_РасчетНачисленийСервер.ОпределитьНаличиеКорректировкиОДНПриСторнированииНачислений(Новый Структура("Услуга", Объект.Ссылка)) Тогда
		ТекстПредупреждения = "Найдены данные по учету расхождений объемов потребления ПУ при сторнировании начислений по норме и среднему.
							  |При изменении состава суммарного расхода ИПУ может потребоваться перерасчет учтенных объемов!";
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры // СоставСуммарногоРасходаИПУДляРаспределенияПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВариантРаспределенияРасходаКПУПоТарифам".
Процедура ВариантРаспределенияРасходаКПУПоТарифамПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СпособРаспределенияПоказанийНаЛицевыеСчета".
Процедура СпособРаспределенияПоказанийНаЛицевыеСчетаПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" динамического списка "Тарифы".
Процедура ТаблицаИнформацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Регистратор);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода способа распределения показателей.
Процедура СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритмПриИзменении(Элемент)
	
	Объект.ВидПлощади = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка");
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода вида площади для распределения показателей.
Процедура ВидПлощадиНовыйАлгоритмПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля выбора "СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритм".
Процедура СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритмНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачальноеЗначение    = Элемент.СписокВыбора.НайтиПоЗначению(Объект.СпособРаспределенияУслугиПоСчетчику);
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СпособРаспрУслугиПоПУНовАлгоритмНачалоВыбора", ЭтотОбъект), Элемент.СписокВыбора, Элемент, НачальноеЗначение);
	
КонецПроцедуры // СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритмНачалоВыбора()

&НаКлиенте
// Процедура-обработчик выбора из списка, вызванного из процедуры "СпособРаспределенияУслугиПоСчетчикуНовыйАлгоритмНачалоВыбора()".
//
// Параметры:
//  ВыбранныйЭлемент		 - 	Элемент списка значений.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура СпособРаспрУслугиПоПУНовАлгоритмНачалоВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		Объект.СпособРаспределенияУслугиПоСчетчику = ВыбранныйЭлемент.Значение;
		УстановитьВидимостьИДоступностьРеквизитовФормы();
	КонецЕсли;

КонецПроцедуры // СпособРаспрУслугиПоПУНовАлгоритмНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора способа расчета комиссии банка.
Процедура СпособРасчетаКомиссииПриИзменении(Элемент)
	
	Если Объект.РасчетКомиссииСверху Тогда 
		Элементы.НадписьСпособРасчетКомиссииБанкаФормула.Заголовок = 
		"Начисление комиссии банка производится по формуле: 
		|Комиссия = S * St/100, где S - сумма начислений за месяц, St - процент банка.";
	Иначе
		Элементы.НадписьСпособРасчетКомиссииБанкаФормула.Заголовок = 
		"Начисление комиссии банка производится по формуле: 
		|S * St/(100-St), где S - сумма начислений за месяц, St - процент банка.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора варианта распределения услуги по л/с.
Процедура ВариантРаспределенияУслугиПоЛСПриИзменении(Элемент)
	
	ОбновитьОписаниеВариантаРаспределенияУслугиПоЛС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора вида жильцов.
//
Процедура ВидыЖильцовПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля выбора варианта начисления.
Процедура ВариантНачисленияПоПУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// При выборе любого постановления если установлены настройки формул - очищаем их.
	Если Объект.ВариантНачисленияПоПУ = "РучнаяНастройка" 
	   И НЕ Объект.ВариантНачисленияПоПУ = ВыбранноеЗначение Тогда
		
		ЗадаватьВопрос = Ложь;
		
		Для Каждого ТекРеквизит Из мТаблицаРеквизитовНастроекИзМакета Цикл
			Если ТекРеквизит.Признак И Объект[ТекРеквизит.ИмяРеквизита] Тогда
				ЗадаватьВопрос = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗадаватьВопрос Тогда
			
			ДопПараметры       = Новый Структура("ВыбранноеЗначение, СтандартнаяОбработка", ВыбранноеЗначение, СтандартнаяОбработка);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВариантНачисленияПоПУОбработкаВыбораЗавершение", ЭтотОбъект, ДопПараметры);
			ТекстВопроса       = "Настройки отдельных формул постановления " + Объект.ВариантНачисленияПоПУ + " будут очищены. Продолжить?";
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
		
	Иначе
		ОчиститьНастройкиФормул(ЭтаФорма, мТаблицаРеквизитовНастроекИзМакета);
	КонецЕсли;
	
	// Устанавливаем настройки формул только для выбранного постановления.
	ВариантНачисленияПоПУОбработкаВыбораФрагмент(ВыбранноеЗначение);
	
КонецПроцедуры // ВариантНачисленияПоПУОбработкаВыбора()

&НаКлиенте
// Процедура-обработка резульрата вопроса, вызванной в процедуре "ВариантНачисленияПоПУОбработкаВыбора()".
//
// Параметры:
//  РезультатВопроса		 - 	КодВозвратаДиалога - код ответа.
//  ДополнительныеПараметры	 - 	Структура.
//
Процедура ВариантНачисленияПоПУОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение    = ДополнительныеПараметры.ВыбранноеЗначение;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьНастройкиФормул(ЭтаФорма, мТаблицаРеквизитовНастроекИзМакета);
	Иначе
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ВариантНачисленияПоПУОбработкаВыбораФрагмент(ВыбранноеЗначение);
	
КонецПроцедуры // ВариантНачисленияПоПУОбработкаВыбораЗавершение()

&НаКлиенте
// Процедура устанавливает значения реквизитов объекта.
Процедура ВариантНачисленияПоПУОбработкаВыбораФрагмент(Знач ВыбранноеЗначение)
	
	Если НЕ ВыбранноеЗначение = "РучнаяНастройка" Тогда
		
		НайденныеНастройки = мТаблицаНастроекПостановленияИзМакета.НайтиСтроки(Новый Структура("Постановление", ВыбранноеЗначение));
		Для Каждого ТекСтрока Из НайденныеНастройки Цикл
			
			НайденныеРеквизиты = мТаблицаРеквизитовНастроекИзМакета.НайтиСтроки(Новый Структура("Настройка", ТекСтрока.Настройка));
			Для Каждого ТекРеквизит Из НайденныеРеквизиты Цикл
				Если ТекРеквизит.Признак Тогда
					Объект[ТекРеквизит.ИмяРеквизита] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВариантНачисленияПоПУОбработкаВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора варианта начисления.
Процедура ВариантНачисленияПоПУПриИзменении(Элемент)
	
	УстановитьЗаголовкиФормул(ЭтаФорма);
	ЗаполнитьРеквизитыФормы();
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля выбора вида услуги.
Процедура ВидУслугиПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "СпособРасчета".
&НаКлиенте
Процедура СпособРасчетаПриИзменении(Элемент)
	
	ОбновитьОписаниеВариантаРаспределенияУслугиПоЛС();
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиРаспределенияОтрицательногоРасхода

&НаКлиенте
// Обработчик события "ПриИзменении" поля флажка разрешения
// распределения отрицательного расхода.
Процедура РазрешитьРаспределениеОтрицательногоРасходаОПУПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику".
Процедура СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачальноеЗначение    = Элемент.СписокВыбора.НайтиПоЗначению(Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику);
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("СпособРаспрОтрицПоказанийУслугиПоПУЗавершение", ЭтотОбъект), Элемент.СписокВыбора, Элемент, НачальноеЗначение);
	
КонецПроцедуры // СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчикуНачалоВыбора()

&НаКлиенте
// Процедура- обработчик результат выбора из списка, вызванный в процедуре "СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчикуНачалоВыбора()".
//
// Параметры:
//  ВыбранныйЭлемент		 - 	Элемен списка значений.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура СпособРаспрОтрицПоказанийУслугиПоПУЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		Объект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = ВыбранныйЭлемент.Значение;
		УстановитьВидимостьИДоступностьРеквизитовФормы();
	КонецЕсли;

КонецПроцедуры //СпособРаспрОтрицПоказанийУслугиПоПУЗавершение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику".
Процедура СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчикуПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиИспользованияФормул

&НаКлиенте
// Обработчик события "ПриИзменении" флажков настройки формул.
//
Процедура ИспользоватьФормулуПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыФормы();
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры // ИспользоватьФормулуПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода способа расчета по ПУ
// при отсутствии показани / при отсутствии действующих ПУ.
Процедура СпособРасчетаПоПУПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкаОтсутствияДействующегоПУ".
Процедура НастройкаОтсутствияДействующегоПУПриИзменении(Элемент)
	
	Объект.НастройкаОтсутствияДействующегоПУ = (НастройкаОтсутствияДействующегоПУ = 1);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик перехода к настройкам параметров учета ЖКХ.
Процедура НадписьПовышающиеКоэффициентыНеИспользуютсяНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_НастройкаПараметровУчета", Новый Структура("ИмяНачальнойСтраницы", "ПриборыУчета") , , , , , Новый ОписаниеОповещения("ОкончаниеРедактированияНастроекПараметровУчетаЖКХ", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик окончания редактирования Настроек параметров учета ЖКХ.
//
Процедура ОкончаниеРедактированияНастроекПараметровУчетаЖКХ(Результат, ДопПараметры) Экспорт
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик перехода к списку регистра сведений "Значения повышающих коэффициентов для начисления по нормативу".
Процедура ПерейтиКЗначениямПовышающихКоэффициентовДляНачисленияПоНормативуНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Для перехода к значениям повышающих коэффициентов элемент должен быть записан!");
		Возврат;
	КонецЕсли;
	
	// Откроем список повышающих коэффициентов с отбором по текущей услуге.
	ОткрытьФорму("РегистрСведений.УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативу.ФормаСписка", Новый Структура("ОтборУслуга", Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкаОтсутствияПоказанийПУ".
Процедура НастройкаОтсутствияПоказанийПУПриИзменении(Элемент)
	
	Объект.НастройкаОтсутствияПоказанийПУ = (НастройкаОтсутствияПоказанийПУ = 1);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаНачисленияПоСреднемуПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры // НастройкаНачисленияПоСреднемуПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "ПриОтключенииПУРасчетПроизводитьКакПриОтсутствииПоказаний".
//
Процедура ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказанийПриИзменении(Элемент)
	
	// Установим значения по умолчанию.
	Если Объект.ПриОтключенииПУПоУтереПоломкеПоверкеРасчетПроизводитьКакПриОтсутствииПоказаний Тогда
		Если Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений = 0 Тогда
			Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляЖилыхПомещений = 3;
		КонецЕсли;
		Если Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений = 0 Тогда
			Объект.КоличествоМесяцевРасчетаПоНастройкеПриОтключенииПУДляНежилыхПомещений = 2;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьРеквизитовФормы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия на гиперссылку "Размеры процентов от суммарного индивидуального расхода для ограничения".
Процедура ДекорацияРазмерыПроцентовДляОграниченияНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Сначала необходимо записать элемент справочника!");
	Иначе
		СтруктураОтбора = Новый Структура("Услуга", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.УПЖКХ_РазмерыПроцентовОтИндивидуальногоРасходаДляОграниченияОДН.ФормаСписка", Новый Структура("Отбор", СтруктураОтбора), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ДекорацияРазмерыПроцентовОтСуммарногоИндивидуальногоРасходаДляОграниченияНажатие()

&НаКлиенте
// Обработчик команды "УстановитьРазмерыПлощадейМОП".
Процедура РазмерыПлощадейМОПНажатие(Элемент)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Сначала необходимо записать элемент справочника!");
	Иначе
		СтруктураОтбора = Новый Структура("Услуга", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиПлощадейМОП.ФормаСписка", Новый Структура("Отбор", СтруктураОтбора), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыСоставныеУслуги

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" табличного поля составные услуги.
Процедура СоставныеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидОграничения = ПредопределенноеЗначение("Перечисление.КВП_ВидыОграниченийСоставныхУслуг.БезОграничения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" табличного поля составные услуги.
Процедура СоставныеУслугиПередНачаломИзменения(Элемент, Отказ)
	
	Если Прав(Элемент.ТекущийЭлемент.Имя, 17) = "РазмерОграничения"
	   И НЕ Элемент.ТекущиеДанные.ВидОграничения = ПредопределенноеЗначение("Перечисление.КВП_ВидыОграниченийСоставныхУслуг.НормаПотребления") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Услуга" табличного поля составных услуг.
//
Процедура СоставныеУслугиУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТабличноеПолеСоставныхУслуг = Элементы.СоставныеУслуги;
	Если ТабличноеПолеСоставныхУслуг.ТекущиеДанные.НомерСтроки > 1 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "СпособРасчета", ПолучитьРеквизитОбъекта(Объект.СоставныеУслуги[0].Услуга, "СпособРасчета"),
										 ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "ВидПлощади", ПолучитьРеквизитОбъекта(Объект.СоставныеУслуги[0].Услуга, "ВидПлощади"),
										 ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		ВыбранноеЗначение = Форма.ОткрытьМодально();
		
		Если Не ВыбранноеЗначение = Неопределено Тогда
			СоставныеУслугиУслугаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
			ТабличноеПолеСоставныхУслуг.ТекущиеДанные.Услуга = ВыбранноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СоставныеУслугиУслугаНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля ввода Услуга табличного поля составные услуги.
Процедура СоставныеУслугиУслугаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
		Если НЕ (ПолучитьРеквизитОбъекта(ВыбранноеЗначение, "СпособРасчета") = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Составная услуга должна иметь способ расчета ""По показаниям счетчика""!");
		КонецЕсли;
	Иначе
		ВыбЗначение = СписокСпособовРасчетаДляОтбораСоставныхУслуг.НайтиПоЗначению(ПолучитьРеквизитОбъекта(ВыбранноеЗначение, "СпособРасчета"));
		Если ВыбЗначение = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Составная услуга должна иметь способ расчета 
															|     ""По количеству проживающих"" 
															|         или ""По площади""!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОграничения" таблицы "СоставныеУслуги".
Процедура СоставныеУслугиВидОграниченияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставныеУслуги.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ВидОграничения = ПредопределенноеЗначение("Перечисление.КВП_ВидыОграниченийСоставныхУслуг.НормаПотребления")
	   И ЗначениеЗаполнено(ТекущиеДанные.РазмерОграничения) Тогда
		ТекущиеДанные.РазмерОграничения = ПредопределенноеЗначение("Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РазмерОграничения" таблицы "СоставныеУслуги".
Процедура СоставныеУслугиРазмерОграниченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СоставныеУслуги.ТекущиеДанные;
	
	Форма = ПолучитьФорму("Справочник.КВП_НормыПотребленияУслуг.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекущиеДанные.Услуга));
	
	Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "НормаНаЛицевойСчет", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "Владелец",    Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	ВыбранноеЗначение = Форма.ОткрытьМодально();
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		ТекущиеДанные.РазмерОграничения = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры // СоставныеУслугиРазмерОграниченияНачалоВыбора()

#КонецОбласти

#Область ОбработчикиТаблицыСоставныеУслугиНовыйАлгоритм

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Услуга" табличного поля составных услуг (новый алгоритм).
//
Процедура СоставныеУслугиНовыйАлгоритмУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СоставныеУслугиНовыйАлгоритм.ТекущиеДанные;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекущиеДанные.Услуга));
	
	Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Форма.Параметры.ОтображатьСписком = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "ЭтоГруппа", Ложь,
									 ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "СпособРасчета", ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"),
									 ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ВыбранноеЗначение = Форма.ОткрытьМодально();
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		ТекущиеДанные.Услуга = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОграничения" таблицы "СоставныеУслуги - новый алгоритм".
Процедура СоставныеУслугиНовыйАлгоритмВидОграниченияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставныеУслугиНовыйАлгоритм.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ВидОграничения = ПредопределенноеЗначение("Перечисление.КВП_ВидыОграниченийСоставныхУслуг.НормаПотребления")
	   И ЗначениеЗаполнено(ТекущиеДанные.РазмерОграничения) Тогда
		ТекущиеДанные.РазмерОграничения = ПредопределенноеЗначение("Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "РазмерОграничения" таблицы "СоставныеУслуги - новый алгоритм".
Процедура СоставныеУслугиНовыйАлгоритмРазмерОграниченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СоставныеУслугиНовыйАлгоритм.ТекущиеДанные;
	
	Форма = ПолучитьФорму("Справочник.КВП_НормыПотребленияУслуг.Форма.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекущиеДанные.Услуга));
	
	Форма.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "НормаНаЛицевойСчет", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "Владелец",    Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	ВыбранноеЗначение = Форма.ОткрытьМодально();
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		ТекущиеДанные.РазмерОграничения = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСтраницыГруппыУслуг

&НаСервереБезКонтекста
// Процедура для каждого вида групп услуг динамически добавляет реквизиты и элементы на форму.
// Вызывается:
//  - при создании формы на сервере,
//  - при чтении формы на сервере после удаления ранее добавленных реквизитов.
Процедура ГруппыУслугПриСозданииНаСервере(Форма, ИмяЭлементаДляРазмещения = "")
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	// Получим список видов групп услуг для текушей услуги.
	ТаблицаВидовГруппУслуг = ПолучитьСписокВидовГруппУслуг(Форма.Объект.Ссылка);
	
	ТипРеквизита = Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_ГруппыУслуг");
	ПорядковыйНомер = 1;
	
	// Присвоим имена реквизитам для расположения на форме.
	Для Каждого ТекущийВидГруппУслуг Из ТаблицаВидовГруппУслуг Цикл
		
		ИмяРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1%2","ВидыГруппУслугПоле",ПорядковыйНомер);
		
		ТекущийВидГруппУслуг.ИмяРеквизита = ИмяРеквизита;
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ТекущийВидГруппУслуг.ИмяРеквизита, ТипРеквизита, , 
																 ТекущийВидГруппУслуг.Наименование, Истина));
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	
	// Добавим новые реквизиты на форму.
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	Форма.ПараметрыВидовГруппУслуг = Новый Структура;
	Форма.ПараметрыВидовГруппУслуг.Вставить("ГруппаДляРазмещения",        ИмяЭлементаДляРазмещения);
	Форма.ПараметрыВидовГруппУслуг.Вставить("ДобавленныеЭлементы",        Новый СписокЗначений);
	
	// Определим группу для добавления новых полей.
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	// Создадим элементы на форме и заполним значения реквизитов.
	Для Каждого ТекущийВидГруппУслуг Из ТаблицаВидовГруппУслуг Цикл
		
		ДобавитьРеквизитВОписание(Форма, ТекущийВидГруппУслуг);
		ДобавитьПолеВыбораГруппыУслуг(Форма, Родитель, ТекущийВидГруппУслуг);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура удаляет ранее добавленные элементы и реквизиты с формы.
// Вызывается:
//  - при чтении формы на сервере.
Процедура ГруппыУслугПриЧтенииНаСервере(Форма)
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПервыйЗапуск = Истина;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "ПараметрыВидовГруппУслуг" И ТипЗнч(Форма.ПараметрыВидовГруппУслуг) = Тип("Структура") Тогда
			ПервыйЗапуск = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПервыйЗапуск Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьКомандыИЭлементыФормы(Форма);
	
	Параметры = Форма.ПараметрыВидовГруппУслуг;
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Для Каждого РеквизитФормы Из Форма.ВидыГруппУслуг Цикл
		МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
	КонецЦикла;
	
	Форма.ВидыГруппУслуг.Очистить();
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
	
	ГруппыУслугПриСозданииНаСервере(Форма, Параметры.ГруппаДляРазмещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура для каждого вида групп услуг записывает информацию о группах, в которые включена услуга.
// Вызывается:
//  - перед записью на сервере.
Процедура ГруппыУслугПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь)
	
	// Запишем информацию о группировках услуги в регистр сведений.
	ГруппировкаУслуг = РегистрыСведений.УПЖКХ_ГруппировкиУслуг.СоздатьНаборЗаписей();
	ГруппировкаУслуг.Отбор.Услуга.Установить(Объект.Ссылка);
	КВП_ЗаписатьОбъект(ГруппировкаУслуг);
	
	Для Каждого СтрокаТаблицы Из Форма.ВидыГруппУслуг Цикл
		
		ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
		
		Если НЕ Форма.Элементы.Найти(СтрокаТаблицы.ИмяРеквизита) = Неопределено Тогда
			Элемент = Форма.Элементы[СтрокаТаблицы.ИмяРеквизита];
			Если НЕ Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьГруппировкиУслуг(Объект, СтрокаТаблицы, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает список видов групп услуг.
Функция ПолучитьСписокВидовГруппУслуг(Услуга)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Услуга", Услуга);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыГруппУслуг.Ссылка КАК ВидГруппУслуг,
	|	ВидыГруппУслуг.Наименование КАК Наименование,
	|	ВидыГруппУслуг.ОписаниеВидаГрупп КАК ОписаниеВидаГрупп,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)) КАК ИмяРеквизита,
	|	ЕСТЬNULL(ГруппировкаУслуг.ГруппаУслуг, ЗНАЧЕНИЕ(Справочник.УПЖКХ_ГруппыУслуг.ПустаяСсылка)) КАК ЗначениеПоля
	|ИЗ
	|	Справочник.УПЖКХ_ГруппыУслуг КАК ВидыГруппУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ГруппировкиУслуг КАК ГруппировкаУслуг
	|		ПО (ГруппировкаУслуг.ВидГруппУслуг = ВидыГруппУслуг.Ссылка)
	|			И (ГруппировкаУслуг.Услуга = &Услуга)
	|ГДЕ
	|	ВидыГруппУслуг.ЭтоГруппа
	|	И НЕ ВидыГруппУслуг.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
// Записывает информацию о группировках в регистр сведений "Группировки услуг".
Процедура ЗаписатьГруппировкиУслуг(Объект, СтрокаТаблицы, Отказ) 
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеПоля) Тогда
		Возврат;
	КонецЕсли;

	ГруппировкаУслуг = РегистрыСведений.УПЖКХ_ГруппировкиУслуг.СоздатьНаборЗаписей();
	ГруппировкаУслуг.Отбор.ВидГруппУслуг.Установить(СтрокаТаблицы.ВидГруппУслуг);
	ГруппировкаУслуг.Отбор.Услуга.Установить(Объект.Ссылка);
	
	НоваяЗапись = ГруппировкаУслуг.Добавить();
	НоваяЗапись.ВидГруппУслуг = СтрокаТаблицы.ВидГруппУслуг;
	НоваяЗапись.Услуга        = Объект.Ссылка;
	НоваяЗапись.ГруппаУслуг   = СтрокаТаблицы.ЗначениеПоля;
	
	Если НЕ КВП_ЗаписатьОбъект(ГруппировкаУслуг) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Удаляет все ранее добавленные элементы с формы.
Процедура УдалитьКомандыИЭлементыФормы(Форма)
	
	ДобавленныеЭлементы = Форма.ПараметрыВидовГруппУслуг.ДобавленныеЭлементы;
	ДобавленныеЭлементы.СортироватьПоПредставлению();
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.Значение]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Добавляет реквизит в таблицу "ВидыГруппУслуг".
Процедура ДобавитьРеквизитВОписание(Форма, Строка)
	
	НоваяСтрока = Форма.ВидыГруппУслуг.Добавить();
	НоваяСтрока.ИмяРеквизита  = Строка.ИмяРеквизита;
	НоваяСтрока.ЗначениеПоля  = Строка.ЗначениеПоля;
	НоваяСтрока.ВидГруппУслуг = Строка.ВидГруппУслуг;
	
	// Заполним значение реквизита.
	Форма[Строка.ИмяРеквизита] = Строка.ЗначениеПоля;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Добавляет поле ввода для выбора группы услуг и устанавливает обработчики действий.
//
// Параметры:
//  Форма        - управляемая форма.
//  ИмяРеквизита - строка - имя реквизита, соответствующее виду групп услуг.
//
// Возвращаемое значение:
//   Элемент - ссылка на поле формы.
//
Функция ДобавитьПолеВыбораГруппыУслуг(Форма, ГруппаРазмещения, ТекущийВидГруппУслуг)
	
	Элемент = Форма.Элементы.Добавить(ТекущийВидГруппУслуг.ИмяРеквизита, Тип("ПолеФормы"), ГруппаРазмещения);
	
	Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным               = ТекущийВидГруппУслуг.ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали  = Истина;
	Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элемент.ИсторияВыбораПриВводе     = ИсторияВыбораПриВводе.НеИспользовать;
	Элемент.БыстрыйВыбор              = Ложь;
	Элемент.РедактированиеТекста      = Ложь;
	Элемент.Высота                    = 1;
	Элемент.МногострочныйРежим        = Ложь;
	Элемент.РастягиватьПоВертикали    = Ложь;
	Элемент.АвтоОтметкаНезаполненного = Ложь;
	Элемент.КнопкаВыбора              = Истина;
	Элемент.КнопкаОткрытия            = Истина;
	Элемент.КнопкаОчистки             = Истина;
	Элемент.КнопкаСоздания            = Ложь;
	Элемент.КнопкаВыпадающегоСписка   = Ложь;
	Элемент.ОтображениеКнопкиВыбора   = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	
	// Добавление описания в подсказку поля ввода.
	Элемент.РасширеннаяПодсказка.Заголовок   = ТекущийВидГруппУслуг.ОписаниеВидаГрупп;
	Элемент.РасширеннаяПодсказка.ЦветТекста  = ЦветаСтиля.УПЖКХ_ТекстСправочнойНадписи;
	Элемент.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	Элемент.ОтображениеПодсказки             = ОтображениеПодсказки.ОтображатьСнизу;
	
	ЗаписатьЭлементВСписокДобавленныхЭлементов(Форма, ТекущийВидГруппУслуг.ИмяРеквизита, 2);
	
	Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ВидыГруппУслугНачалоВыбора");
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ВидыГруппУслугПриИзменении");
	Элемент.УстановитьДействие("Очистка",      "Подключаемый_ВидыГруппУслугОчистка");
	
	Возврат Элемент;
	
КонецФункции

&НаСервереБезКонтекста
// Записывает имя динамически добавленного элемента в список добавленных элементов 
// для возможности их автоматического удаления.
// Необходимость удаления возникает при повторном чтении формы.
//
// Параметры:
//  Форма           - управляемая форма.
//  ИмяЭлемента     - строка - имя добавленной группы, поля, надписи.
//  Приоритет       - Число - приоритет для динамического удаления элемента с формы
//                  - заголовок, поле ввода, описание имеют более высокий приоритет, группа - более низкий.
//
Процедура ЗаписатьЭлементВСписокДобавленныхЭлементов(Форма, ИмяЭлемента, Приоритет)
	
	Форма.ПараметрыВидовГруппУслуг.ДобавленныеЭлементы.Добавить(ИмяЭлемента, Приоритет);
	
КонецПроцедуры

&НаКлиенте
// Возвращает строку с данными вида групп услуг по имени реквизита.
//
// Параметры:
//    Форма   - УправляемаяФорма - передаваемая форма.
//    Элемент - ДанныеФормыСтруктураСКоллекцией - данные формы.
//
// Возвращаемое значение:
//    СтрокаКоллекции - найденные данные.
//    Неопределено    - при отсутствии данных.
//
Функция ПолучитьСтрокуСДаннымиВидаГруппУслугПоИмениРеквизита(Форма, Элемент)
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = Форма.ВидыГруппУслуг.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
// Обработчик события ПриИзменении поля групп услуг.
Процедура ГруппыУслугПриИзменении(Форма, Элемент) 
	
	ДанныеСтроки = ПолучитьСтрокуСДаннымиВидаГруппУслугПоИмениРеквизита(Форма, Элемент);
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ЗначениеПоля = Форма[Элемент.Имя];
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля групп услуг.
Процедура ГруппыУслугОчистка(Знач Форма, Знач ИмяРеквизита) 
	
	Результат = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = Форма.ВидыГруппУслуг.НайтиСтроки(Результат)[0];
	НайденнаяСтрока.ЗначениеПоля = ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.ПустаяСсылка");
	
	Форма[ИмяРеквизита] = ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.ПустаяСсылка");
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля групп услуг.
Процедура ГруппыУслугНачалоВыбора(Форма, Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПолучитьСтрокуСДаннымиВидаГруппУслугПоИмениРеквизита(Форма, Элемент);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Отбор", Новый Структура("Родитель", ДанныеСтроки.ВидГруппУслуг));
	
	ОткрытьФорму("Справочник.УПЖКХ_ГруппыУслуг.ФормаВыбора", ПараметрыОтбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Подключаемый обработчик события "ПриИзменении" поля ввода групп услуг.
Процедура Подключаемый_ВидыГруппУслугПриИзменении(Элемент)
	ГруппыУслугПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Подключаемый обработчик события "Очистка" поля ввода групп услуг.
Процедура Подключаемый_ВидыГруппУслугОчистка(Элемент, СтандартнаяОбработка)
	ГруппыУслугОчистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
// Подключаемый обработчик события "НачалоВыбора" поля ввода групп услуг.
Процедура Подключаемый_ВидыГруппУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ГруппыУслугНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "УстановкаТарифов".
Процедура УстановкаТарифов(Команда)
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		СписокДокументов = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьДокументыУстановкиТарифовПоУслуге(Объект.Ссылка);
		
		Если Не СписокДокументов = Неопределено Тогда
			
			Если СписокДокументов.Количество() > 0 Тогда
				// Откроем форму списка установки тарифов по текущей услуге.
				ФормаСписка = ПолучитьФорму("Документ.КВП_УстановкаТарифов.ФормаСписка");
				
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					ОтборУслуга = ФормаСписка.ДокументСписок.Отбор.Услуга;
					ОтборУслуга.ВидСравнения  = ВидСравнения.Равно;
					ОтборУслуга.Значение      = Объект.Ссылка;
					ОтборУслуга.Использование = Истина;
				#КонецЕсли
				
				#Если ТонкийКлиент Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФормаСписка.Список.Отбор, "Услуга", Объект.Ссылка,
									 ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
				#КонецЕсли
				
				ФормаСписка.Открыть();
			Иначе
				// Если документов нет, создадим новый.
				ФормаОбъекта = ПолучитьФорму("Документ.КВП_УстановкаТарифов.ФормаОбъекта", Новый Структура("Услуга", Объект.Ссылка));
				ФормаОбъекта.Открыть();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Установить все флажки в табличной части "База комиссии".
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.БазаКомиссии Цикл
		Строка.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Снимает все флажки в табличной части "База комиссии".
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из Объект.БазаКомиссии Цикл
		Строка.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Вызывается при нажатии кнопки "Заполнить".
Процедура БазаКомиссииЗаполнить(Команда)
	
	ЗаполнитьБазаКомиссииНаСервере();
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область РазделОсновнойПрограммы

СписокСпособовРасчетаДляОтбораСоставныхУслуг = Новый СписокЗначений;
СписокСпособовРасчетаДляОтбораСоставныхУслуг.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов"));
СписокСпособовРасчетаДляОтбораСоставныхУслуг.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПлощади"));

#КонецОбласти
