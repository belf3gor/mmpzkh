
////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ И ОБРАБОТКИ НАСТРОЕК

#Область ФункцииПолученияИОбработкиНастроек

// Проверяет заполнена ли настройка сбора данных.
//
Функция НастройкаСбораДанныхЗаполнена(НастройкаСбораДанных)
	
	Возврат ТипЗнч(НастройкаСбораДанных) = Тип("СправочникСсылка.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов")
			И НЕ НастройкаСбораДанных.Пустая();
	
КонецФункции

// Определяет исполнителя расчетов.
//
Функция ОпределитьИсполнителяРасчетов(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных И НастройкаСбораДанных.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного Тогда
		ИсполнительРасчетов = НастройкаСбораДанных.ИсполнительРасчетов;
	Иначе
		ИсполнительРасчетов = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ИсполнительРасчетов;
	
КонецФункции

// Определяет вариант сортировки.
//
Функция ОпределитьВариантСортировки(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВариантСортировки = НастройкаСбораДанных.ВариантСортировки;
	Иначе
		ВариантСортировки = "";
	КонецЕсли;
	
	Возврат ВариантСортировки;
	
КонецФункции

// Определяет вариант выбора услуг.
//
Функция ОпределитьВариантВыбораУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	ВыборУслуг = "Все услуги";
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		
		ВыборУслуг = НастройкаСбораДанных.ВыборУслуг;
		
		Если ВыборУслуг = "" ИЛИ (НЕ ВыборУслуг = "Все услуги, кроме выбранных" И НЕ ВыборУслуг = "Выбранные услуги") Тогда
			ВыборУслуг = "Все услуги";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыборУслуг;
	
КонецФункции

// Получает таблицу выбранных услуг.
//
Функция ПолучитьТаблицуВыбранныхУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ТаблицаУслуг = НастройкаСбораДанных.ВыбранныеУслуги.Выгрузить();
		
		Если НЕ ТаблицаУслуг.Количество() = 0 Тогда
			ТаблицаУслуг = ИсключитьУдаленныеУслуги(ТаблицаУслуг);
			
			Возврат ТаблицаУслуг;
		КонецЕсли;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	Возврат Таблица;
	
КонецФункции

// Получает таблицу услуг по типа из настроек сбора данных.
//
Функция ПолучитьТаблицуУслугПоТипамИзНастроек(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ТаблицаУслуг = НастройкаСбораДанных.УслугиПоТипам;
		
		Если Не ТаблицаУслуг.Количество() = 0 Тогда
			Возврат УПЖКХ_ПечатьКвитанцийСервер.АктуализироватьСписокУслуг(ТаблицаУслуг);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	ТаблицаУслуг.Колонки.Добавить("ВидУслуги", Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
	
	Возврат ТаблицаУслуг;
	
КонецФункции

// Определяет вариант учета оплат.
//
Функция ОпределитьВариантУчетаОплат(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		УчетОплат = НастройкаСбораДанных.УчетОплат;
	Иначе
		УчетОплат = "Конца отчетного месяца";
	КонецЕсли;
	
	Возврат УчетОплат;
	
КонецФункции

// Определяет необходимость вывода начального сальдо.
//
Функция ОпределитьНеобходимостьВыводаНачальногоСальдо(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВыводитьНачальноеСальдо = НастройкаСбораДанных.ВыводитьНачальноеСальдо;
	Иначе
		ВыводитьНачальноеСальдо = Истина;
	КонецЕсли;
	
	Возврат ВыводитьНачальноеСальдо;
	
КонецФункции

// Определяет необходимость включения начального сальдо в оплаты.
//
Функция ОпределитьНеобходимостьВключенияНачальногоСальдоВОплаты(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВключатьОплатыВНачальноеСальдо = НастройкаСбораДанных.ВключатьОплатыВНачальноеСальдо;
	Иначе
		ВключатьОплатыВНачальноеСальдо = Ложь;
	КонецЕсли;
	
	Возврат ВключатьОплатыВНачальноеСальдо;
	
КонецФункции

// Определяет использование отбора квитанций.
//
Функция ОпределитьИспользованиеОтбораКвитанций(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ОтборКвитанций = НастройкаСбораДанных.ОтборКвитанций;
	Иначе
		ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьВсеКвитанции;
	КонецЕсли;
	
	Возврат ОтборКвитанций;
	
КонецФункции

// Определяет границу отбора итоговой суммы "От".
//
Функция ОпределитьГраницуОтбораИтоговойСуммыОт(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ГраницаОтбораИтоговойСуммыОт = НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыОт;
	Иначе
		ГраницаОтбораИтоговойСуммыОт = 0;
	КонецЕсли;
	
	Возврат ГраницаОтбораИтоговойСуммыОт;
	
КонецФункции

// Определяет границу отбора итоговой суммы "До".
//
Функция ОпределитьГраницуОтбораИтоговойСуммыДо(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ГраницаОтбораИтоговойСуммыДо = НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыДо;
	Иначе
		ГраницаОтбораИтоговойСуммыДо = 0;
	КонецЕсли;
	
	Возврат ГраницаОтбораИтоговойСуммыДо;
	
КонецФункции

// Определяет границу отбора итоговой суммы "От (без ограничений)".
//
Функция ОпределитьГраницуОтбораИтоговойСуммыОтБезОграничений(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ГраницаОтбораИтоговойСуммыОтБезОграничений = НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыОтБезОграничений;
	Иначе
		ГраницаОтбораИтоговойСуммыОтБезОграничений = Истина;
	КонецЕсли;
	
	Возврат ГраницаОтбораИтоговойСуммыОтБезОграничений;
	
КонецФункции

// Определяет границу отбора итоговой суммы "До (без ограничений)".
//
Функция ОпределитьГраницуОтбораИтоговойСуммыДоБезОграничений(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ГраницаОтбораИтоговойСуммыДоБезОграничений = НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыДоБезОграничений;
	Иначе
		ГраницаОтбораИтоговойСуммыДоБезОграничений = Истина;
	КонецЕсли;
	
	Возврат ГраницаОтбораИтоговойСуммыДоБезОграничений;
	
КонецФункции

// Определяет услуги исполнителя.
//
Функция ОпределитьУслугиИсполнителя(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		УслугиИсполнителя = НастройкаСбораДанных.УслугиИсполнителя;
	Иначе
		УслугиИсполнителя = "Выводить список услуг";
	КонецЕсли;
	
	Возврат УслугиИсполнителя;
	
КонецФункции

// Определяет строку услуг.
//
Функция ОпределитьСтрокуУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		СтрокаУслуг = НастройкаСбораДанных.СтрокаУслуг;
	Иначе
		СтрокаУслуг = "";
	КонецЕсли;
	
	Возврат СтрокаУслуг;
	
КонецФункции

// Определяет включение начальной задолженности.
//
Функция ОпределитьВключениеНачальнойЗадолженности(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВключениеНачальнойЗадолженности = НастройкаСбораДанных.ВключениеНачальнойЗадолженности;
	Иначе
		ВключениеНачальнойЗадолженности = "ВключатьНачСальдо";
	КонецЕсли;
	
	Возврат ВключениеНачальнойЗадолженности;
	
КонецФункции

// Определяет использование штрихкодов.
//
Функция ОпределитьИспользованиеШК(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВыводитьШК = НастройкаСбораДанных.ВыводитьШК;
	Иначе
		ВыводитьШК = Истина;
	КонецЕсли;
	
	Возврат ВыводитьШК;
	
КонецФункции

// Определяет разделение услуг по типам.
//
Функция ОпределитьРазделениеУслугПоТипам(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		РазделятьУслугиПоТипам = НастройкаСбораДанных.РазделятьУслугиПоТипам;
	Иначе
		РазделятьУслугиПоТипам = Ложь;
	КонецЕсли;
	
	Возврат РазделятьУслугиПоТипам;
	
КонецФункции

// Определяет вывод индивидуального расхода для всех услуг.
//
Функция ОпределитьВыводИндРасходаДляВсехУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВыводитьИндРасходДляВсехУслуг = НастройкаСбораДанных.ВыводитьИндРасходДляВсехУслуг;
	Иначе
		ВыводитьИндРасходДляВсехУслуг = Истина;
	КонецЕсли;
	
	Возврат ВыводитьИндРасходДляВсехУслуг;
	
КонецФункции

// Определяет вариант учета комиссии банка.
//
Функция ОпределитьВариантУчетаКомиссииБанка(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВариантУчетаКомиссииБанка = НастройкаСбораДанных.ВариантУчетаКомиссииБанка;
	Иначе
		ВариантУчетаКомиссииБанка = "Не учитывать";
	КонецЕсли;
	
	Возврат ВариантУчетаКомиссииБанка;
	
КонецФункции

// Определяет размер комиссии банка.
//
Функция ОпределитьКомиссиюБанка(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		КомиссияБанка = НастройкаСбораДанных.КомиссияБанка;
	Иначе
		КомиссияБанка = 0;
	КонецЕсли;
	
	Возврат КомиссияБанка;
	
КонецФункции

// Определяет вывод расчетной площади.
//
Функция ОпределитьВыводРасчетнойПлощади(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВыводитьРасчетнуюПлощадь = НастройкаСбораДанных.ВыводитьРасчетнуюПлощадь;
	Иначе
		ВыводитьРасчетнуюПлощадь = Ложь;
	КонецЕсли;
	
	Возврат ВыводитьРасчетнуюПлощадь;
	
КонецФункции

// Определяет вид расчетной площади здания.
//
Функция ОпределитьРасчетнуюПлощадьЗдания(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		РасчетнаяПлощадьЗдания = НастройкаСбораДанных.РасчетнаяПлощадьЗдания;
	Иначе
		РасчетнаяПлощадьЗдания = ПредопределенноеЗначение("Справочник.КВП_ТипыПлощадейЗдания.ПустаяСсылка");
	КонецЕсли;
	
	Возврат РасчетнаяПлощадьЗдания;
	
КонецФункции

// Определяет вид расчетной площади помещения.
//
Функция ОпределитьРасчетнуюПлощадьПомещения(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		РасчетнаяПлощадьПомещения = НастройкаСбораДанных.РасчетнаяПлощадьПомещения;
	Иначе
		РасчетнаяПлощадьПомещения = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ПустаяСсылка");
	КонецЕсли;
	
	Возврат РасчетнаяПлощадьПомещения;
	
КонецФункции

// Определяет отказ от вывода показаний по счетчикам.
//
Функция ОпределитьНеВыводитьПоказанияПоПУ(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		НеВыводитьПоказанияПоПУ = НастройкаСбораДанных.НеВыводитьПоказанияПоПУ;
	Иначе
		НеВыводитьПоказанияПоПУ = Ложь;
	КонецЕсли;
	
	Возврат НеВыводитьПоказанияПоПУ;
	
КонецФункции

// Определяет необходимость вывода дополнительных областей.
//
Функция ОпределитьВсегдаВыводитьДополнительныеОбласти(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВсегдаВыводитьДополнительныеОбласти = НастройкаСбораДанных.ВсегдаВыводитьДополнительныеОбласти;
	Иначе
		ВсегдаВыводитьДополнительныеОбласти = Ложь;
	КонецЕсли;
	
	Возврат ВсегдаВыводитьДополнительныеОбласти;
	
КонецФункции

// Определяет необходимость вывода отрицательной суммы к оплате.
//
Функция ОпределитьВыводОтрицательнойСуммыКОплате(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВыводитьОтрицательнуюСуммуКОплате = НастройкаСбораДанных.ВыводитьОтрицательнуюСуммуКОплате;
	Иначе
		ВыводитьОтрицательнуюСуммуКОплате = Истина;
	КонецЕсли;
	
	Возврат ВыводитьОтрицательнуюСуммуКОплате;
	
КонецФункции

// Определяет использование двусторонней печати.
//
Функция ОпределитьИспользованиеДвустороннейПечати(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ДвусторонняяПечать = НастройкаСбораДанных.ДвусторонняяПечать;
	Иначе
		ДвусторонняяПечать = Ложь;
	КонецЕсли;
	
	Возврат ДвусторонняяПечать;
	
КонецФункции

// Определяет вывод отступа при двусторонней печати.
//
Функция ОпределитьВыводОтступаПриДвустороннейПечати(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ДвусторонняяПечатьВыводитьОтступ = НастройкаСбораДанных.ДвусторонняяПечатьВыводитьОтступ;
	Иначе
		ДвусторонняяПечатьВыводитьОтступ = Ложь;
	КонецЕсли;
	
	Возврат ДвусторонняяПечатьВыводитьОтступ;
	
КонецФункции

// Определяет необходимость учета пеней.
//
Функция ОпределитьНеобходимостьУчитыватьПени(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		УчитыватьПени = НастройкаСбораДанных.УчитыватьПени;
	Иначе
		УчитыватьПени = Истина;
	КонецЕсли;
	
	Возврат УчитыватьПени;
	
КонецФункции

// Определяет необходимость печати отдельной квитанции по пеням.
//
Функция ОпределитьНеобходимостьПечатиОтдельнойКвитанцииПоПеням(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Возврат ИспользоватьНастройкуСбораДанных И НастройкаСбораДанных.УчитыватьПени И НастройкаСбораДанных.СпособПечатиКвитанцииПоПеням = "в отдельной квитанции";
	
КонецФункции

// Определяет способ печати квитанции по пеням.
//
Функция ОпределитьСпособПечатиПечатиКвитанцииПоПеням(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	СпособПечатиКвитанцииПоПеням = "в квитанции с основными начислениями";
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		
		СпособПечатиКвитанцииПоПеням = НастройкаСбораДанных.СпособПечатиКвитанцииПоПеням;
		
		Если СпособПечатиКвитанцииПоПеням = "" ИЛИ НЕ СпособПечатиКвитанцииПоПеням = "в отдельной квитанции" Тогда
			
			СпособПечатиКвитанцииПоПеням = "в квитанции с основными начислениями";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СпособПечатиКвитанцииПоПеням;
	
КонецФункции

// Определяет таблицу услуг без ОДН.
//
Функция ОпределитьТаблицуУслугБезОДН(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ТаблицаУслуг = НастройкаСбораДанных.УслугиБезОДН.Выгрузить();
		
		Если НЕ ТаблицаУслуг.Количество() = 0 Тогда
			ТаблицаУслуг = ИсключитьУдаленныеУслуги(ТаблицаУслуг);
			
			Возврат ТаблицаУслуг;
		КонецЕсли;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	Возврат Таблица;
	
КонецФункции

// Определяет необходимость вывода объемов расхождения.
//
Функция ОпределитьНеобходимостьВыводаОбъемовРасхождения(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ВыводитьОбъемыРасхождения = НастройкаСбораДанных.ВыводитьОбъемыРасхождения;
	Иначе
		ВыводитьОбъемыРасхождения = Истина;
	КонецЕсли;
	
	Возврат ВыводитьОбъемыРасхождения;
	
КонецФункции

// Определяет способ печати квитанций на кап. ремонт.
//
Функция ОпределитьСпособПечатиКвитанцииКапРемонт(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		СпособПечатиКвитанцииКапРемонт = НастройкаСбораДанных.СпособПечатиКвитанцииКапРемонт;
	Иначе
		СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт";
	КонецЕсли;
	
	Возврат СпособПечатиКвитанцииКапРемонт;
	
КонецФункции

// Определяет .печать отрывного корешка.
//
Функция ОпределитьПечатьОтрывногоКорешка(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ПечататьОтрывнойКорешок = НастройкаСбораДанных.ПечататьОтрывнойКорешок;
	Иначе
		ПечататьОтрывнойКорешок = Ложь;
	КонецЕсли;
	
	Возврат ПечататьОтрывнойКорешок;
	
КонецФункции

// Определяет печать отрывного корешка внизу.
//
Функция ОпределитьПечатьОтрывногоКорешкаВнизу(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		ПечататьОтрывнойКорешокВнизу = НастройкаСбораДанных.ПечататьОтрывнойКорешокВнизу;
	Иначе
		ПечататьОтрывнойКорешокВнизу = Ложь;
	КонецЕсли;
	
	Возврат ПечататьОтрывнойКорешокВнизу;
	
КонецФункции

// Получает таблицу порядка услуг для вывода в квитанциях.
//
Функция ПолучитьТаблицуПорядкаУслугДляВыводаВКвитанциях(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	НастройкаДляПорядкаУслуг = ?(ИспользоватьНастройкуСбораДанных, НастройкаСбораДанных, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаСбораДанных.Установить(НастройкаДляПорядкаУслуг);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей.Выгрузить();
	
КонецФункции

// Исключает удаленные услуги из таблицы значений.
//
Функция ИсключитьУдаленныеУслуги(ТаблицаУслуг)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ ТЗ.Услуга ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТаблицаУслуг);
	Запрос.Выполнить();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
	|		ПО КВП_Услуги.Ссылка = ТЗ.Услуга";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ИсключитьУдаленныеУслуги

// Определяет кодировку файла обмена.
Функция ОпределитьКодировкуФайлаОбмена(Кодировка)
	
	Возврат ?(Кодировка = Неопределено, КодировкаТекста.ANSI, Кодировка);
	
КонецФункции

// Определяет факт вывода отрицательных сумм к оплате по услугам.
//
Функция ОпределитьНастройкуНеВыводитьОтрицательнуюСуммуКОплатеПоУслугам(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам = НастройкаСбораДанных.НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам;
	Иначе
		НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам = Ложь;
	КонецЕсли;
	
	Возврат НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам;
	
КонецФункции

// Определяет, отличается ли расчетный счет по основным услугам от основного.
//
Функция ОпределитьОтличаетсяЛиРасчетныйСчетПоОсновнымУслугамОтОсновного(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного = НастройкаСбораДанных.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного;
	Иначе
		РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного = Ложь;
	КонецЕсли;
	
	Возврат РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного;
	
КонецФункции

// Определяет, отличается ли расчетный счет по услугам капитального ремонта от основного.
//
Функция ОпределитьОтличаетсяЛиРасчетныйСчетПоУслугамКапРемонтаОтОсновного(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного = НастройкаСбораДанных.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного;
	Иначе
		РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного = Ложь;
	КонецЕсли;
	
	Возврат РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного;
	
КонецФункции

// Определяет расчетный счет для приема платежей по основным услугам.
//
Функция ОпределитьРасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам = НастройкаСбораДанных.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам;
	Иначе
		РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам = Ложь;
	КонецЕсли;
	
	Возврат РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам;
	
КонецФункции

// Определяет расчетный счет для приема платежей по услугам капитального ремонта.
//
Функция ОпределитьРасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных)
	
	Если ИспользоватьНастройкуСбораДанных Тогда
		РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта = НастройкаСбораДанных.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта;
	Иначе
		РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта = Ложь;
	КонецЕсли;
	
	Возврат РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта;
	
КонецФункции

// Получает список коммунальных ресурсов.
//
Функция ПолучитьСписокКоммунальныхРесурсов()
	
	СписокКоммунальныхРесурсов = Перечисления.УПЖКХ_ВидыРесурсов.ПолучитьСписокКоммунальныхРесурсов();
	
	Возврат СписокКоммунальныхРесурсов;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ЭЛЕМЕНТОВ СТРУКТУРЫ НАСТРОЕК

#Область ПроцедурыФормированияЭлементовСтруктурыНастроек

// Заполняет структуру настроек общими для всех организаций настройками.
//
Процедура ЗаполнитьОбщиеДляВсехОрганизацийНастройки(СтруктураНастроек, ПериодПросмотра, ВидМакета, НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных, КодировкаФайла = Неопределено)
	
	СтруктураНастроек.Вставить("ПериодПросмотра",                              ПериодПросмотра);
	СтруктураНастроек.Вставить("ВидМакета",                                    ВидМакета);
	СтруктураНастроек.Вставить("ТочностьОбъемаНачислений",                     Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить());
	СтруктураНастроек.Вставить("УказыватьКоличествоПрожИЗарегЧислами",         Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	СтруктураНастроек.Вставить("ИсполнительРасчетов",                          ОпределитьИсполнителяРасчетов(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВариантСортировки",                            ОпределитьВариантСортировки(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыборУслуг",                                   ОпределитьВариантВыбораУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыбранныеУслуги",                              ПолучитьТаблицуВыбранныхУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("УслугиПоТипам",                                ПолучитьТаблицуУслугПоТипамИзНастроек(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("УчетОплат",                                    ОпределитьВариантУчетаОплат(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыводитьНачальноеСальдо",                      ОпределитьНеобходимостьВыводаНачальногоСальдо(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВключатьОплатыВНачальноеСальдо",               ОпределитьНеобходимостьВключенияНачальногоСальдоВОплаты(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ОтборКвитанций",                               ОпределитьИспользованиеОтбораКвитанций(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыОт",                 ОпределитьГраницуОтбораИтоговойСуммыОт(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыДо",                 ОпределитьГраницуОтбораИтоговойСуммыДо(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыОтБезОграничений",   ОпределитьГраницуОтбораИтоговойСуммыОтБезОграничений(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ГраницаОтбораИтоговойСуммыДоБезОграничений",   ОпределитьГраницуОтбораИтоговойСуммыДоБезОграничений(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("УслугиИсполнителя",                            ОпределитьУслугиИсполнителя(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("СтрокаУслуг",                                  ОпределитьСтрокуУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВключениеНачальнойЗадолженности",              ОпределитьВключениеНачальнойЗадолженности(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыводитьШК",                                   ОпределитьИспользованиеШК(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("РазделятьУслугиПоТипам",                       ОпределитьРазделениеУслугПоТипам(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыводитьИндРасходДляВсехУслуг",                ОпределитьВыводИндРасходаДляВсехУслуг(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВариантУчетаКомиссииБанка",                    ОпределитьВариантУчетаКомиссииБанка(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("КомиссияБанка",                                ОпределитьКомиссиюБанка(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыводитьРасчетнуюПлощадь",                     ОпределитьВыводРасчетнойПлощади(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("РасчетнаяПлощадьЗдания",                       ОпределитьРасчетнуюПлощадьЗдания(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("РасчетнаяПлощадьПомещения",                    ОпределитьРасчетнуюПлощадьПомещения(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("НеВыводитьПоказанияПоПУ",                      ОпределитьНеВыводитьПоказанияПоПУ(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВсегдаВыводитьДополнительныеОбласти",          ОпределитьВсегдаВыводитьДополнительныеОбласти(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыводитьОтрицательнуюСуммуКОплате",            ОпределитьВыводОтрицательнойСуммыКОплате(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ДвусторонняяПечать",                           ОпределитьИспользованиеДвустороннейПечати(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ДвусторонняяПечатьВыводитьОтступ",             ОпределитьВыводОтступаПриДвустороннейПечати(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("УчитыватьПени",                                ОпределитьНеобходимостьУчитыватьПени(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ПечататьОтдельнуюКвитанциюПоПеням",            ОпределитьНеобходимостьПечатиОтдельнойКвитанцииПоПеням(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("СпособПечатиКвитанцииПоПеням",                 ОпределитьСпособПечатиПечатиКвитанцииПоПеням(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("УслугиБезОДН",                                 ОпределитьТаблицуУслугБезОДН(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ВыводитьОбъемыРасхождения",                    ОпределитьНеобходимостьВыводаОбъемовРасхождения(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("СпособПечатиКвитанцииКапРемонт",               ОпределитьСпособПечатиКвитанцииКапРемонт(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ПечататьОтрывнойКорешок",                      ОпределитьПечатьОтрывногоКорешка(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ПечататьОтрывнойКорешокВнизу",                 ОпределитьПечатьОтрывногоКорешкаВнизу(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("ТаблицаПорядкаУслугДляВыводаВКвитанции",       ПолучитьТаблицуПорядкаУслугДляВыводаВКвитанциях(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("КодировкаФайла",                               ОпределитьКодировкуФайлаОбмена(КодировкаФайла));
	СтруктураНастроек.Вставить("НеВыводитьОтрицательнуюСуммуКОплатеПоУслугам", ОпределитьНастройкуНеВыводитьОтрицательнуюСуммуКОплатеПоУслугам(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного",   ОпределитьОтличаетсяЛиРасчетныйСчетПоОсновнымУслугамОтОсновного(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам",                        ОпределитьРасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного", ОпределитьОтличаетсяЛиРасчетныйСчетПоУслугамКапРемонтаОтОсновного(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта",                      ОпределитьРасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта(НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных));
	СтруктураНастроек.Вставить("СписокКоммунальныхРесурсов",                                             ПолучитьСписокКоммунальныхРесурсов());
	СтруктураНастроек.Вставить("ВыгружатьУслугиСОИВОтдельнуюГруппу",                                     Ложь);
	
	ВидыПлатежныхДокументов = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	// Формируем параметры печати отрывного корешка исходя из настроек отчета.
	Если ВидМакета = ВидыПлатежныхДокументов.Москва
	 ИЛИ ВидМакета = ВидыПлатежныхДокументов.Москва679 Тогда
		СтруктураНастроек.Вставить("ПечататьОтрывнойКорешок",      Ложь);
		СтруктураНастроек.Вставить("ПечататьОтрывнойКорешокВнизу", Ложь);
	ИначеЕсли СтруктураНастроек.ПечататьОтрывнойКорешок Тогда
		СтруктураНастроек.Вставить("ПечататьОтрывнойКорешок",      Истина);
		СтруктураНастроек.Вставить("ПечататьОтрывнойКорешокВнизу", ?(СтруктураНастроек.ПечататьОтрывнойКорешокВнизу И Не СтруктураНастроек.ДвусторонняяПечать, Истина, Ложь));
	КонецЕсли;
	
	// Для вывода кодов видов начислений в макете "ПФ_MXL_МакетСтандартный".
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		Отбор = Новый Структура("Коммунальная", Истина);
		ТаблицаКоммунальныхВидовУслуг = СтруктураНастроек.УслугиПоТипам.Скопировать(Отбор);
		ТаблицаКоммунальныхВидовУслуг.Свернуть("ВидУслуги");
	Иначе
		ТаблицаКоммунальныхВидовУслуг = СтруктураНастроек.УслугиПоТипам.СкопироватьКолонки("ВидУслуги");
	КонецЕсли;
	СтруктураНастроек.Вставить("ТаблицаКоммунальныхВидовУслуг", ТаблицаКоммунальныхВидовУслуг);
	
	НастройкиУчетДобровольногоСтрахования = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	СтруктураНастроек.Вставить("ВестиУчетНачисленийПоДобровольномуСтрахованию", НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию);
	СтруктураНастроек.Вставить("УслугаДобровольногоСтрахования",                НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования);
	
	СтруктураНастроек.Вставить("КомпонентаQRКодаПодключена", УПЖКХ_ПечатьКвитанцийСервер.КомпонентаФормированияQRКодаПодключена());
	СтруктураНастроек.Вставить("КомпонентаШКПодключена",     УПЖКХ_ПечатьКвитанцийСервер.КомпонентаФормированияШтрихКодаПодключена());
	
	// МеханизмОтправкиКвитанцийНаЭлекторонныйЯщики
	СтруктураНастроек.Вставить("ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте", Константы.УПЖКХ_ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте.Получить());
	СтруктураНастроек.Вставить("ДанныеПоКвитанциям",                              УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ПолучитьПустуюТаблицуДляДанныхПоКвитанциям());
	// Конец МеханизмОтправкиКвитанцийНаЭлекторонныйЯщики
	
КонецПроцедуры

// Заполняет структуру настроек уникальными для каждой организации настройками.
//
Процедура ЗаполнитьИндивидуальныеНастройкиОрганизации(СтруктураНастроек, Организация, ПериодПросмотра, ВидМакета, ОбъектыОтчета = Неопределено, Отказ = Ложь)
	
	мНастройкиУчетнойПолитикиТСЖОтказ = Ложь;
	мНастройкиУчетнойПолитикиТСЖ      = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ПериодПросмотра,
																										Организация,
																										мНастройкиУчетнойПолитикиТСЖОтказ);
	
	мНастройкиФормированияПДЖКХОтказ = Ложь;
	мНастройкиФормированияПДЖКХ      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Организация, мНастройкиФормированияПДЖКХОтказ);
	
	// Здесь необходимо добавить параметр "ВедетсяРаздельныйУчетПоУслугамКапремонта".
	СтруктураНастроекПоКапремонту = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	
	СтруктураНастроек.Вставить("ПараметрыУП",                              мНастройкиУчетнойПолитикиТСЖ);
	СтруктураНастроек.Вставить("ПараметрыУПОтказ",                         мНастройкиУчетнойПолитикиТСЖОтказ);
	СтруктураНастроек.Вставить("ПараметрыФормированияПД",                  мНастройкиФормированияПДЖКХ);
	СтруктураНастроек.Вставить("ПараметрыФормированияПДОтказ",             мНастройкиФормированияПДЖКХОтказ);
	СтруктураНастроек.Вставить("НастройкиУчетаКапремонтаСсылка",           СтруктураНастроекПоКапремонту.НастройкиУчетаКапремонтаСсылка);
	СтруктураНастроек.Вставить("ВедетсяРаздельныйУчетПоУслугамКапремонта", СтруктураНастроекПоКапремонту.ВедетсяРаздельныйУчет);
	СтруктураНастроек.Вставить("СписокУслугКапРемонт",                     СтруктураНастроекПоКапремонту.СписокУслуг);
	СтруктураНастроек.Вставить("Организация",                              Организация);
	СтруктураНастроек.Вставить("ОбъектыОтчета",                            ОбъектыОтчета);
	
	СтруктураНастроек.Вставить("ЛьготыСправочно", ?(мНастройкиУчетнойПолитикиТСЖотказ,
													Ложь,
													мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах));
	
	СтруктураНастроек.Вставить("ВидШК", ?(мНастройкиФормированияПДЖКХОтказ,
										  Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный,
										  мНастройкиФормированияПДЖКХ.ВидШтрихкода));
	
	ВидыПлатежныхДокументов = Перечисления.УПЖКХ_ВидыПлатежныхДокументов;
	
	// Определение признака формирования отдельной квитанции по капремонту вынесено сюда
	// по причине того, что при инициализации начальных данных определяется список основных услуг
	// и услуг капремонта.
	Если ВидМакета = ВидыПлатежныхДокументов.СтандартныйКР Тогда
		
		СтруктураНастроек.Вставить("ПечататьКвитанциюКапРемонт",     Истина);
		СтруктураНастроек.Вставить("СпособПечатиКвитанцииКапРемонт", "основную квитанцию и квитанцию на кап. ремонт");
		
	Иначе
		
		СтруктураНастроек.Вставить("ПечататьКвитанциюКапРемонт", СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта
															И НЕ СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "только основную квитанцию");
		
	КонецЕсли;
	
	// Если объекты отчета не переданы, то не формируем сведения об объектах и считаем, что вместо стандартного механизма
	// будет использован сторонний.
	// Например, такой вариант используется при подготовке структуры настроек для обмена с моб. приложением "ЖКХ: Личный кабинет".
	// Это вызвано тем, что сбор сведений об объектах там осуществляется сразу для всех организаций в целях оптимизации сбора данных.
	//
	Если ОбъектыОтчета = Неопределено Тогда
		
		СтруктураНастроек.Вставить("ТаблицаОбъектов",     Новый ТаблицаЗначений);
		СтруктураНастроек.Вставить("СписокЛицевыхСчетов", Новый СписокЗначений);
		СтруктураНастроек.Вставить("СписокПомещений",     Новый СписокЗначений);
		СтруктураНастроек.Вставить("СписокПодъездов",     Новый СписокЗначений);
		СтруктураНастроек.Вставить("СписокЗданий",        Новый СписокЗначений);
		
	Иначе
		
		// Формируем таблицу со всеми объектами квитанции в разрезе помещений и зданий.
		СтруктураНастроек.Вставить("ТаблицаОбъектов",     УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуОбъектовКвитанции(СтруктураНастроек));
		
		// Формируем списки, необходимые для поиска данных.
		СтруктураНастроек.Вставить("СписокЛицевыхСчетов", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(СтруктураНастроек.ТаблицаОбъектов.Скопировать(), "ЛицевойСчет"));
		СтруктураНастроек.Вставить("СписокПомещений",     УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(СтруктураНастроек.ТаблицаОбъектов.Скопировать(), "Помещение"));
		СтруктураНастроек.Вставить("СписокПодъездов",     УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(СтруктураНастроек.ТаблицаОбъектов.Скопировать(), "Подъезд"));
		СтруктураНастроек.Вставить("СписокЗданий",        УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(СтруктураНастроек.ТаблицаОбъектов.Скопировать(), "Здание"));
		
	КонецЕсли;
	
	УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСпискиУслуг(СтруктураНастроек);
	
	Если СтруктураНастроек.СписокУслуг.Количество() = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Услуги не выбраны!" + Символы.ПС + "Проверьте настройки на закладке ""Выбор услуг"" формы настроек.";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	// Для вывода в платежных документах QR-ширихкода для оплаты в Ситикард.
	СтруктураНастроек.Вставить("ВыводитьQRштрихкодДляСитикардПоОсн", мНастройкиФормированияПДЖКХ.ВыводитьQRштрихкодДляСитикардПоОсн);
	СтруктураНастроек.Вставить("ВыводитьQRштрихкодДляСитикардПоКР",  мНастройкиФормированияПДЖКХ.ВыводитьQRштрихкодДляСитикардПоКР);
	СтруктураНастроек.Вставить("КодОрганизацииВСитикардПоОсн",       мНастройкиФормированияПДЖКХ.КодОрганизацииВСитикардПоОсн);
	СтруктураНастроек.Вставить("КодОрганизацииВСитикардПоКр",        мНастройкиФормированияПДЖКХ.КодОрганизацииВСитикардПоКр);
	
	// Проверка корректности настроек формирования штрихкодов.
	СтруктураНастроек.Вставить("НастройкиОдномерногоШКПоОснКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляОдномерногоШККорректны(СтруктураНастроек, Ложь));
	СтруктураНастроек.Вставить("НастройкиОдномерногоШКПоКРКорректны",  УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляОдномерногоШККорректны(СтруктураНастроек, Истина));
	СтруктураНастроек.Вставить("НастройкиQRПоОснКорректны",            УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляQRШККорректны(СтруктураНастроек, Ложь));
	СтруктураНастроек.Вставить("НастройкиQRПоКРКорректны",             УПЖКХ_ПечатьКвитанцийСервер.НастройкиДляQRШККорректны(СтруктураНастроек, Истина));
	СтруктураНастроек.Вставить("НастройкиQRДляСитикардПоОснКорректны", УПЖКХ_ПечатьКвитанцийСервер.НастройкиQRДляОнлайнОплатыКорректны(СтруктураНастроек, Ложь));
	СтруктураНастроек.Вставить("НастройкиQRДляСитикардПоКРКорректны",  УПЖКХ_ПечатьКвитанцийСервер.НастройкиQRДляОнлайнОплатыКорректны(СтруктураНастроек, Истина));
	
	// Присваиваем значения по умолчанию. Использовать различные виды ШК или нет, должны решать механизмы,
	// использующие настройки. По факту использования определяется, необходимо ли выводить сообщение о
	// некорректности настроек формирования ШК во время исполнения.
	СтруктураНастроек.Вставить("ОдномерныйШКПоОснИспользуется",  Ложь);
	СтруктураНастроек.Вставить("ОдномерныйШКПоКРИспользуется",   Ложь);
	СтруктураНастроек.Вставить("QRШКПоОснИспользуется",          Ложь);
	СтруктураНастроек.Вставить("QRШКПоКРИспользуется",           Ложь);
	СтруктураНастроек.Вставить("QRДляСитикардПоОснИспользуется", Ложь);
	СтруктураНастроек.Вставить("QRДляСитикардПоКРИспользуется",  Ложь);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ СТАНДАРТНОЙ СТРУКТУРЫ НАСТРОЕК

#Область ФункцииФормированияСтандартнойСтруктурыНастроек

// Формирует структуру настроек обычным образом - по выбранной организации.
// Используется при формировании платежных документов, выгрузке на сайт ЖКХ и выгрузке платежных документов в ГИС ЖКХ.
//
Функция ПолучитьСтруктуруНастроекСбораДанныхДляКвитанцийИОбменов(НастройкаСбораДанных, Организация, ПериодПросмотра, ВидМакета, ОбъектыОтчета = Неопределено, Отказ = Ложь) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	ИспользоватьНастройкуСбораДанных = НастройкаСбораДанныхЗаполнена(НастройкаСбораДанных);
	
	ЗаполнитьОбщиеДляВсехОрганизацийНастройки(СтруктураНастроек, ПериодПросмотра, ВидМакета, НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных);
	
	ЗаполнитьИндивидуальныеНастройкиОрганизации(СтруктураНастроек, Организация, ПериодПросмотра, ВидМакета, ОбъектыОтчета, Отказ);
	
	Возврат СтруктураНастроек;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ФОРМИРОВАНИЯ СТРУКТУРЫ НАСТРОЕК ДЛЯ ОБМЕНА С МОБ. ПРИЛОЖЕНИЕМ "ЖКХ: ЛИЧНЫЙ КАБИНЕТ"

#Область ФункцииФормированияСтруктурыНастроекДляЖКХЛичныйКабинет

// Формирует структуру настроек в виде, используемом при выгрузке на сервис моб. приложения "ЖКХ: Личный кабинет".
// Особенностью данного механизма является получение настроек для всех имеющихся в базе организаций.
//
Функция ПолучитьСтруктуруНастроекСбораДанныхДляОбменаСМобильнымПриложениемЖКХЛичныйКабинет(ПериодПросмотра, ВидМакета, ОбъектыОтчета, СведенияОбОшибке, КоличествоПопытокСбораДанных = 0) Экспорт
	
	//////////////////////////////////////////////////////////////////////
	// 1. Предварительная подготовка.
	
	СтруктураОбщихНастроек = Новый Структура;
	
	// Получаем таблицу объектов сразу по всем организациям.
	ТаблицаОбъектовВРазрезеОрганизацийОбщ = ПолучитьТаблицуОбъектовДляВыгрузкиНаСервисЖКХЛичныйКабинет(ОбъектыОтчета, СтруктураОбщихНастроек, ПериодПросмотра);
	
	// Проверяем, у всех ли л/с уже имеются идентификаторы для моб. приложения ЖКХ: Личный кабинет.
	// Если л/с без идентификаторов найдены, то выполняем получение идентификаторов и повторно формируем структуру настроек.
	Если НЕ СтруктураОбщихНастроек.ТаблицеЛСБезID.Количество() = 0 Тогда
		
		Если НЕ УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьТаблицуИдентификаторовЛицевыхСчетов(СтруктураОбщихНастроек.ТаблицеЛСБезID.ВыгрузитьКолонку("ЛицевойСчет"), СведенияОбОшибке) = Неопределено И КоличествоПопытокСбораДанных < 2 Тогда
			Возврат ПолучитьСтруктуруНастроекСбораДанныхДляОбменаСМобильнымПриложениемЖКХЛичныйКабинет(ПериодПросмотра, ВидМакета, ОбъектыОтчета, СведенияОбОшибке, КоличествоПопытокСбораДанных + 1);
		Иначе
			СведенияОбОшибке = "Не удалось записать идентификаторы лицевых счетов в базу.";
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определяем, используется ли настройка сбора данных.
	ИспользоватьНастройкуСбораДанных = Ложь;
	
	НастройкаСбораДанных = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка();
	
	// Получаем сохраненную настройку обмена данными с мобильным приложением.
	// Это нужно для получения настроек сбора данных.
	СтруктураОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	
	Если НЕ СтруктураОбмена.НастройкаФормированияДанных.Пустая() Тогда
		
		НастройкаСбораДанных = СтруктураОбмена.НастройкаФормированияДанных;
		
		ИспользоватьНастройкуСбораДанных = Истина;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////
	// 2. Заполнение общих настроек.
	
	// Заполняем общие для всех организаций настройки.
	ЗаполнитьОбщиеДляВсехОрганизацийНастройки(СтруктураОбщихНастроек, ?(ПериодПросмотра = Неопределено, ТекущаяДата(), ПериодПросмотра), ВидМакета, НастройкаСбораДанных, ИспользоватьНастройкуСбораДанных, КодировкаТекста.UTF8);
	
	//////////////////////////////////////////////////////////////////////
	// 3. Заполнение настроек, индивидуальных для каждой организации.
	
	// Так как настройки для каждой организации могут отличаться, то используем таблицу для соответствия организаций и настроек для каждой из них.
	ТаблицаНастроекКвитанций = Новый ТаблицаЗначений;
	ТаблицаНастроекКвитанций.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНастроекКвитанций.Колонки.Добавить("СтруктураНастроек",   Новый ОписаниеТипов("Структура"));
	ТаблицаНастроекКвитанций.Колонки.Добавить("СтруктураПараметров", Новый ОписаниеТипов("Структура"));
	
	ТаблицаОрганизаций = ТаблицаОбъектовВРазрезеОрганизацийОбщ.Скопировать(, "Организация");
	ТаблицаОрганизаций.Свернуть("Организация");
	
	СоответствиеОрганизацийИНастроекУпрощеннойАДС = РегистрыСведений.УПЖКХ_НастройкиУпрощеннойАДС.ПолучитьНастройкиДляОрганизаций(ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"));
	
	Для каждого ТекСтрокаОрганизации из ТаблицаОрганизаций Цикл
		
		НоваяСтрока = ТаблицаНастроекКвитанций.Добавить();
		НоваяСтрока.Организация       = ТекСтрокаОрганизации.Организация;
		НоваяСтрока.СтруктураНастроек = СкопироватьСтруктуру(СтруктураОбщихНастроек); // Для каждой организации копируем структуру общих настроек.
		
		ЗаполнитьИндивидуальныеНастройкиОрганизации(НоваяСтрока.СтруктураНастроек, НоваяСтрока.Организация, СтруктураОбщихНастроек.ПериодПросмотра, ВидМакета);
		
		НоваяСтрока.СтруктураНастроек.Вставить("ВидШК",                      Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный);
		НоваяСтрока.СтруктураНастроек.Вставить("ВыгружатьОбаВидаШтрихкодов", Ложь);
		
		НоваяСтрока.СтруктураНастроек.Вставить("НастройкиУпрощеннойАДС", СоответствиеОрганизацийИНастроекУпрощеннойАДС[НоваяСтрока.Организация]);
		
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////
	// 4. Внесение в общие настройки дополнительных данных.
	
	// Дополняем структуру общих настроек настройками, используемыми для обмена с моб.приложением ЖКХ: Личный кабинет.
	СтруктураОбщихНастроек.Вставить("ВыгружатьПерсональныеДанные", Ложь);
	СтруктураОбщихНастроек.Вставить("ТаблицаОбъектовОбщ", ТаблицаОбъектовВРазрезеОрганизацийОбщ);
	
	// Создадим структуру, содержащую сведения о файле.
	СведенияОФайле = Новый Структура("version, filetype, filedate, ready");
	СведенияОФайле.version  = XMLСтрока(4);
	СведенияОФайле.filetype = "calculations";
	СведенияОФайле.filedate = XMLСтрока(НачалоМесяца(СтруктураОбщихНастроек.ПериодПросмотра));
	СведенияОФайле.ready    = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.УстановитьФактПроведенияНачислений(СтруктураОбмена.ЧислоОкончанияПроведенияНачислений,
																											   СтруктураОбмена.МесяцОкончанияПроведенияНачислений,
																											   СтруктураОбщихНастроек.ПериодПросмотра);
	
	СтруктураОбщихНастроек.Вставить("СведенияОФайле", СведенияОФайле);
	
	// Добавим параметры-заглушки для корректного выполнения сбора данных о зданиях.
	// Заглушки нужны, чтобы можно было использовать общий с веб-интеграцией механизм
	// подготовки сведений о зданиях.
	// В веб-интеграции имеется возможность выгрузки сведений об электронных паспортах домов,
	// которая при обмене с моб.приложением не нужна, поэтому используем предустановленные значения
	// данных параметров.
	
	СтруктураОбщихНастроек.Вставить("ВыгрузкаЭлектронныхПаспортов", Ложь);
	СтруктураОбщихНастроек.Вставить("ВыгрузкаДанныхПоЛС",           Истина);
	
	//////////////////////////////////////////////////////////////////////
	// 4. Подготовка итоговой структуры настроек.
	
	// Формируем итоговую структуру.
	СтруктураНастроек = Новый Структура("СтруктураОбщихНастроек, ТаблицаИндивидуальныхНастроек", СтруктураОбщихНастроек, ТаблицаНастроекКвитанций);
	
	Возврат СтруктураНастроек;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ФОРМИРОВАНИЯ СТРУКТУРЫ НАСТРОЕК ДЛЯ "ЖКХ: ЛИЧНЫЙ КАБИНЕТ"

#Область ВспомогательныеФункцииФормированияСтруктурыНастроекДляЖКХЛичныйКабинет

// Выполняет копирование структуры, включая ее содержимое.
//
Функция СкопироватьСтруктуру(СтруктураДляКопирования)
	
	СтруктураИсходящая = Новый Структура;
	
	Если НЕ СтруктураДляКопирования = Неопределено Тогда
		
		Для каждого ТекПараметр из СтруктураДляКопирования Цикл
			
			СтруктураИсходящая.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураИсходящая;
	
КонецФункции

// Формирует таблицу объектов для выгрузки на сервис "ЖКХ: Личный кабинет".
//
Функция ПолучитьТаблицуОбъектовДляВыгрузкиНаСервисЖКХЛичныйКабинет(ТаблицаЛицевыхСчетов, СтруктураОбщихНастроек, Дата)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			НЕ ЛицевойСчет.ЭтоГруппа
	|				И ЛицевойСчет В (&МассивЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В(&МассивЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втИдентификаторыЛСЖКХЛичныйКабинет
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении КАК УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении
	|ГДЕ
	|	УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК втЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация КАК Организация,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Код КАК КодЛицевогоСчета,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛицевогоСчета,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Код КАК КодПомещения,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Наименование КАК НаименованиеПомещения,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Подъезд КАК Подъезд,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец.Код КАК КодЗдания,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.ВидПомещения.ЭтоЖилойФонд КАК ЖилойФондПомещения,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор КАК Договор,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.ЕдиныйЛицевойСчет КАК ЕЛСвГИСЖКХ,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.ЕдиныйЛицевойСчетКР КАК ЕЛСвГИСЖКХКапРемонт,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.ИдентификаторЖКУКР КАК ИдентификаторЖКУКапРемонт
	|ПОМЕСТИТЬ втСведенияДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ГДЕ
	|	(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия >= &ДатаНач)
	|	И НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияДляВзаиморасчетов.Организация КАК Организация,
	|	втСведенияДляВзаиморасчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	втСведенияДляВзаиморасчетов.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втСведенияДляВзаиморасчетов.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втСведенияДляВзаиморасчетов.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втСведенияДляВзаиморасчетов.Помещение КАК Помещение,
	|	втСведенияДляВзаиморасчетов.КодПомещения КАК КодПомещения,
	|	втСведенияДляВзаиморасчетов.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втСведенияДляВзаиморасчетов.Подъезд КАК Подъезд,
	|	втСведенияДляВзаиморасчетов.Здание КАК Здание,
	|	втСведенияДляВзаиморасчетов.КодЗдания КАК КодЗдания,
	|	втСведенияДляВзаиморасчетов.ТипПомещения КАК ТипПомещения,
	|	втСведенияДляВзаиморасчетов.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втСведенияДляВзаиморасчетов.Договор КАК Договор,
	|	втИдентификаторыЛСЖКХЛичныйКабинет.Идентификатор КАК ИдентификаторЖКХЛичныйКабинет,
	|	втСведенияДляВзаиморасчетов.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втСведенияДляВзаиморасчетов.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втСведенияДляВзаиморасчетов.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втСведенияДляВзаиморасчетов.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втСведенияДляВзаиморасчетов КАК втСведенияДляВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИдентификаторыЛСЖКХЛичныйКабинет КАК втИдентификаторыЛСЖКХЛичныйКабинет
	|		ПО втСведенияДляВзаиморасчетов.ЛицевойСчет = втИдентификаторыЛСЖКХЛичныйКабинет.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.ОсновнаяКвитанция)
	|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ИдентификаторПДОсн,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.КвитанцияНаКР)
	|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ИдентификаторПДКапРемонт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.ЕдинаяКвитанция)
	|				ТОГДА УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПД
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ИдентификаторПДЕдиный
	|ПОМЕСТИТЬ втПлатежныеДокументыВыгруженныеВГИС
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС КАК УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС
	|ГДЕ
	|	(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет, НАЧАЛОПЕРИОДА(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.Период, МЕСЯЦ)) В
	|			(ВЫБРАТЬ
	|				втИтоговая.ЛицевойСчет,
	|				НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ)
	|			ИЗ
	|				втИтоговая КАК втИтоговая)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИтоговая.Организация КАК Организация,
	|	втИтоговая.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговая.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втИтоговая.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втИтоговая.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втИтоговая.Помещение КАК Помещение,
	|	втИтоговая.КодПомещения КАК КодПомещения,
	|	втИтоговая.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втИтоговая.Подъезд КАК Подъезд,
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.КодЗдания КАК КодЗдания,
	|	втИтоговая.ТипПомещения КАК ТипПомещения,
	|	втИтоговая.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втИтоговая.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	втИтоговая.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втИтоговая.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втИтоговая.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втИтоговая.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДОсн, """") КАК ИдентификаторПДОсн,
	|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДКапРемонт, """") КАК ИдентификаторПДКапРемонт,
	|	ЕСТЬNULL(втПлатежныеДокументыВыгруженныеВГИС.ИдентификаторПДЕдиный, """") КАК ИдентификаторПДЕдиный
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлатежныеДокументыВыгруженныеВГИС КАК втПлатежныеДокументыВыгруженныеВГИС
	|		ПО втИтоговая.ЛицевойСчет = втПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИтоговая.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|ГДЕ
	|	втИтоговая.ИдентификаторЖКХЛичныйКабинет ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Дата));
	
	СтруктураОбщихНастроек.Вставить("ВыбранныеЛС", Неопределено);
	Если ТаблицаЛицевыхСчетов = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЛицевойСчет В (&МассивЛС)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И КВП_ЛицевыеСчета.ЛицевойСчет В(&МассивЛС)", "");
	Иначе
		МассивЛС = ПолучитьМассивВыбранныхЛицевыхСчетов(ТаблицаЛицевыхСчетов);
		СтруктураОбщихНастроек.Вставить("ВыбранныеЛС", МассивЛС);
		
		Запрос.УстановитьПараметр("МассивЛС", МассивЛС);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаИтог    = РезультатЗапроса[5].Выгрузить();
	ТаблицеЛСБезID = РезультатЗапроса[6].Выгрузить();
	
	СтруктураОбщихНастроек.Вставить("ТаблицеЛСБезID", ТаблицеЛСБезID);
	
	Возврат ТаблицаИтог;
	
КонецФункции

// Формирует массив выбранных лицевых счетов.
//
Функция ПолучитьМассивВыбранныхЛицевыхСчетов(ТаблицаЛицевыхСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка,
	|	КВП_ЛицевыеСчета.ЭтоГруппа
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&ЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЭлементы
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|ГДЕ
	|	НЕ втЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.Ссылка КАК Группа
	|ПОМЕСТИТЬ втГруппы
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|ГДЕ
	|	втЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЭлементыИзГрупп
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				втГруппы.Группа
	|			ИЗ
	|				втГруппы КАК втГруппы)
	|	И НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭлементы.ЛицевойСчет
	|ИЗ
	|	втЭлементы КАК втЭлементы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втЭлементыИзГрупп.ЛицевойСчет
	|ИЗ
	|	втЭлементыИзГрупп КАК втЭлементыИзГрупп";
	
	Запрос.УстановитьПараметр("ЛицевыеСчета", ТаблицаЛицевыхСчетов.ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
	
КонецФункции

#КонецОбласти

#КонецОбласти
