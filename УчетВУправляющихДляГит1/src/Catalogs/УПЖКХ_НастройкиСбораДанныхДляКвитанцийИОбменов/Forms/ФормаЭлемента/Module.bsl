

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСпискиВыбораНастроек();
	
	Если НЕ ЗначениеЗаполнено(Объект.ВыборУслуг) Тогда
		Объект.ВыборУслуг = мВыборУслуг.Получить(0).Значение;
	КонецЕсли;
	
	Если Объект.УслугиПоТипам.Количество() = 0 Тогда
		ЗагрузитьУслугиВТабличнуюЧастьРазделенияУслуг();
	Иначе
		АктуальнаяТаблицаУслуг = АктуализироватьСписокУслуг(Объект.УслугиПоТипам.Выгрузить());
		ЕстьИзменения = Ложь;
		Для Каждого ТекСтрока Из АктуальнаяТаблицаУслуг Цикл
			Если Объект.УслугиПоТипам.НайтиСтроки(Новый Структура("ВидУслуги", ТекСтрока.ВидУслуги)).Количество() = 0 Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Объект.УслугиПоТипам.Загрузить(АктуальнаяТаблицаУслуг);
		Если ЕстьИзменения ИЛИ Не АктуальнаяТаблицаУслуг.Количество() = Объект.УслугиПоТипам.Количество() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Изменился механизм разделения услуг по типам!" + Символы.ПС 
																+ "Проверьте настройки разделения, установленные на закладке ""Разделение услуг"" формы настроек.");
		КонецЕсли;
	КонецЕсли;
	
	Объект.ВключениеНачальнойЗадолженности = ?(ЗначениеЗаполнено(Объект.ВключениеНачальнойЗадолженности), Объект.ВключениеНачальнойЗадолженности, мДействияНачСальдо[0].Значение);
	Объект.УслугиИсполнителя               = ?(ЗначениеЗаполнено(Объект.УслугиИсполнителя), Объект.УслугиИсполнителя, мУслугиИсполнителя[0].Значение);
	Объект.ВыборУслуг                      = ?(ЗначениеЗаполнено(Объект.ВыборУслуг), Объект.ВыборУслуг, мВыборУслуг[0].Значение);
	Объект.ВариантУчетаКомиссииБанка       = ?(ЗначениеЗаполнено(Объект.ВариантУчетаКомиссииБанка), Объект.ВариантУчетаКомиссииБанка, мВариантУчетаКомиссииБанка[0].Значение);
	Объект.УчетОплат                       = ?(ЗначениеЗаполнено(Объект.УчетОплат), Объект.УчетОплат, мУчетОплат[0].Значение);
	Объект.ВариантСортировки               = ?(ЗначениеЗаполнено(Объект.ВариантСортировки), Объект.ВариантСортировки, мВариантСортировки[0].Значение);
	Объект.СпособПечатиКвитанцииКапРемонт  = ?(ЗначениеЗаполнено(Объект.СпособПечатиКвитанцииКапРемонт), Объект.СпособПечатиКвитанцииКапРемонт, мСпособПечатиКвитанцииКапРемонт[0].Значение);
	Объект.СпособПечатиКвитанцииПоПеням    = ?(ЗначениеЗаполнено(Объект.СпособПечатиКвитанцииПоПеням), Объект.СпособПечатиКвитанцииПоПеням, мСпособПечатиКвитанцииПоПеням[0].Значение);
	
	Если Объект.ОтборКвитанций.Пустая() Тогда
		Объект.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьВсеКвитанции;
	КонецЕсли;
	
	Если РеквизитФормыВЗначение("Объект").ЭтоНовый() Тогда
		ЗаполнитьРеквизитыПоУмолчанию();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ПорядокУслугВКвитанции.ВидУслуги,
	|	КВП_ПорядокУслугВКвитанции.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.КВП_ПорядокУслугВКвитанции КАК КВП_ПорядокУслугВКвитанции
	|ГДЕ
	|	КВП_ПорядокУслугВКвитанции.НастройкаСбораДанных = &НастройкаСбораДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("НастройкаСбораДанных", Объект.Ссылка);
	
	ВыборкаРегистраПорядкаУслуг = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРегистраПорядкаУслуг.Следующий() Цикл
		
		НоваяСтрока = ПорядокУслугВКвитанции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРегистраПорядкаУслуг);
		
	КонецЦикла;
	
	// Услуги по типам.
	Если Объект.УслугиПоТипам.Количество() = 0 Тогда
		ЗагрузитьУслугиВТабличнуюЧасть();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта) Тогда
		ВладелецСчетаКапРемонта = Объект.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта.Владелец;
	КонецЕсли;
	
	// СхемыУчета
	ОТР_СхемыУчетаСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СхемыУчета
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	ОбновитьГраницыОтбораИтоговойСуммы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного И Не ЗначениеЗаполнено(Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен расчетный счет для приема платежей по основным услугам.");
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного И Не ЗначениеЗаполнено(Объект.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен расчетный счет для приема платежей по услугам капитального ремонта.");
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПослеЗаписиНаСервере" формы.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаСбораДанных.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	ПорядковыйНомер = 0;
	
	Для каждого ТекСтрокаПорядкаУслуг из ПорядокУслугВКвитанции Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.НастройкаСбораДанных = Объект.Ссылка;
		НоваяЗапись.ВидУслуги       = ТекСтрокаПорядкаУслуг.ВидУслуги;
		НоваяЗапись.Порядок         = ПорядковыйНомер;
		
		ПорядковыйНомер = ПорядковыйНомер + 1;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик "ПриИзменении" настройки выбора услуг.
//
Процедура ВыборУслугПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РазделятьУслугиПоТипам".
//
Процедура РазделятьУслугиПоТипамПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" настройки выбора услуг.
//
Процедура ВариантУчетаКомиссииБанкаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" настройки выбора услуг.
//
Процедура УслугиИсполнителяПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" настройки выбора услуг.
//
Процедура ВыводитьРасчетнуюПлощадьПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" флага "Выводить начальное сальдо".
//
Процедура ВыводитьНачальноеСальдоПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" флага "Двусторонняя печать".
//
Процедура ДвустороняяПечатьПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" флага "Печатать отрывной корешок".
//
Процедура ПечататьОтрывнойКорешокПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" флага "Учитывать пени".
//
Процедура УчитыватьПениПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ОбработкаВыбора" услуги, добавляемой в таблицу порядка услуг.
//
Процедура ПорядокУслугВКвитанцииВидУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокиДубликаты = ПорядокУслугВКвитанции.НайтиСтроки(Новый Структура("ВидУслуги", ВыбранноеЗначение));
	
	Если НЕ СтрокиДубликаты.Количество() = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьПредупреждение(, "Запись с видом услуги """ + ВыбранноеЗначение.Наименование + """ уже существует.");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "Отбор квитанций".
//
Процедура ОтборКвитанцийПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	ОбновитьГраницыОтбораИтоговойСуммы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ИзменениеТекстаРедактирования" настройки "ГраницаОтбораИтоговойСуммыОт" и "ГраницаОтбораИтоговойСуммыДо".
//
Процедура ГраницаОтбораИтоговойСуммыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "Очистка" настройки "Отбор квитанций".
//
Процедура ОтборКвитанцийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ОбработкаВыбора" полей "ГраницаОтбораИтоговойСуммыОт" и "ГраницаОтбораИтоговойСуммыДо".
//
Процедура ГраницаОтбораИтоговойСуммыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбновитьГраницыОтбораИтоговойСуммы(Элемент.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "Коммунальная".
Процедура КоммунальнаяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоТипам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Коммунальная И ТекущиеДанные.СодержаниеИРемонт Тогда
		ТекущиеДанные.СодержаниеИРемонт = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "СодержаниеИРемонт".
Процедура СодержаниеИРемонтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.УслугиПоТипам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.СодержаниеИРемонт И ТекущиеДанные.Коммунальная Тогда
		ТекущиеДанные.Коммунальная = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "Очистка" полей "ГраницаОтбораИтоговойСуммыОт" и "ГраницаОтбораИтоговойСуммыДо".
Процедура ГраницаОтбораИтоговойСуммыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного".
Процедура РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновногоПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного".
Процедура РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновногоПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного".
Процедура ИсполнительРасчетовПриИзменении(Элемент)
	ИсполнительРасчетовПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам".
Процедура РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамПриИзменении(Элемент)
	РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" поля "РасчетныйСчетДляПриемаПлатежейПоУслугам".
Процедура РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаПриИзменении(Элемент)
	РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
// Обработчик "Нажатие" поля "ВладелецСчетаКапРемонта".
Процедура ВладелецСчетаКапРемонтаНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьЗначение(ВладелецСчетаКапРемонта);
	
КонецПроцедуры

// Процедура открывает статью по настройке штрихкодов в браузере.
//
&НаКлиенте
Процедура ИнструкцияПоНастройкеШтрихкодовНажатие(Элемент)
	
	ИнтернетАдрес = "https://vgkh.ru/faq-1s-zhkh/nastroyki_formirovaniya_shtrikhkoda_3_0/nastrojka-shtrihkoda/";
	ОТР_ЧастоЗадаваемыеВопросыПереопределяемый.ДополнитьИнтернетАдресСлужебнымПараметрами(ИнтернетАдрес);
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(ИнтернетАдрес);
	
КонецПроцедуры // ИнструкцияПоНастройкеШтрихкодовНажатие()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Процедура обновляет значения полей с границами отбора.
Процедура ОбновитьГраницыОтбораИтоговойСуммы(ИмяПоля = "", ЗначениеОтбора = Неопределено)
	
	мТипСтрока = Новый Массив;
	мТипСтрока.Добавить(Тип("Строка"));
	
	мТипыЧисло = Новый Массив;
	мТипыЧисло.Добавить(Тип("Число"));
	
	ОграничениеТипаСтрока = Новый ОписаниеТипов(мТипСтрока,,,, Новый КвалификаторыСтроки(20));
	ОграничениеТипаЧисло  = Новый ОписаниеТипов(мТипыЧисло,,, Новый КвалификаторыЧисла(10, 2));
	
	Если ПустаяСтрока(ИмяПоля) Тогда
		
		Если Объект.ГраницаОтбораИтоговойСуммыОтБезОграничений Тогда
			Элементы.ГраницаОтбораИтоговойСуммыОт.ОграничениеТипа      = ОграничениеТипаСтрока;
			Объект.ГраницаОтбораИтоговойСуммыОт                        = "без ограничений";
			Элементы.ГраницаОтбораИтоговойСуммыОт.РедактированиеТекста = Ложь;
		Иначе
			Элементы.ГраницаОтбораИтоговойСуммыОт.ОграничениеТипа      = ОграничениеТипаЧисло;
			Элементы.ГраницаОтбораИтоговойСуммыОт.РедактированиеТекста = Истина;
		КонецЕсли;
		
		Если Объект.ГраницаОтбораИтоговойСуммыДоБезОграничений Тогда
			Элементы.ГраницаОтбораИтоговойСуммыДо.ОграничениеТипа      = ОграничениеТипаСтрока;
			Элементы.ГраницаОтбораИтоговойСуммыДо.РедактированиеТекста = Ложь;
			Объект.ГраницаОтбораИтоговойСуммыДо                        = "без ограничений";
		Иначе
			Элементы.ГраницаОтбораИтоговойСуммыДо.ОграничениеТипа      = ОграничениеТипаЧисло;
			Элементы.ГраницаОтбораИтоговойСуммыДо.РедактированиеТекста = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеОтбора = ЗначенияВыбораТипаГраницОтбораКвитанций[0].Значение Тогда // "без ограничений"
			Элементы[ИмяПоля].ОграничениеТипа      = ОграничениеТипаСтрока;
			Элементы[ИмяПоля].РедактированиеТекста = Ложь;
			Объект[ИмяПоля]                        = "без ограничений";
			Объект[ИмяПоля + "БезОграничений"]     = Истина;
		Иначе // "значение"
			Элементы[ИмяПоля].ОграничениеТипа      = ОграничениеТипаЧисло;
			Элементы[ИмяПоля].РедактированиеТекста = Истина;
			Объект[ИмяПоля + "БезОграничений"]     = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы.
//
&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.СтрокаУслуг.Видимость                      = (Объект.УслугиИсполнителя = "Выводить произвольную строку");
	Элементы.ГруппаНачальноеСальдо.Видимость            = Объект.ВыводитьНачальноеСальдо;
	Элементы.ВыбранныеУслуги.Видимость                  = (НЕ Объект.ВыборУслуг = "Все услуги");
	Элементы.УслугиПоТипам.Видимость                    = Объект.РазделятьУслугиПоТипам;
	Элементы.КомиссияБанка.Видимость                    = (НЕ Объект.ВариантУчетаКомиссииБанка = "Не учитывать");
	Элементы.ГруппаРасчетнаяПлощадьЗдания.Видимость     = Объект.ВыводитьРасчетнуюПлощадь;
	Элементы.НадписьКапРемонт.Заголовок                 = "Настройки позволяют организовать отдельные сбор и компоновку данных для услуг капитального ремонта, в случае когда ведется раздельный учет по услугам капитального ремонта.
															|Не используется для платежного документа ""Плат. документ (пост. №679/30 для МО)"".";
	Элементы.СпособПечатиКвитанцииКапРемонт.Видимость   = Истина;
	Элементы.СпособПечатиКвитанцииПоПеням.Видимость     = Объект.УчитыватьПени;
	Элементы.ПечататьОтрывнойКорешокВнизу.Видимость     = Не Объект.ДвусторонняяПечать И Объект.ПечататьОтрывнойКорешок;
	Элементы.ДвусторонняяПечатьВыводитьОтступ.Видимость = Объект.ДвусторонняяПечать;
	Элементы.ГруппаПермскийКрай.Видимость               = Истина;
	Элементы.ГруппаГраницыОтбора.Видимость              = Объект.ОтборКвитанций = ПредопределенноеЗначение("Перечисление.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьКвитанцииСИтоговойСуммойВИнтервале");
	
	Элементы.ГруппаРасчетныйСчетПоОсновнымУслугам.Видимость   = Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного;
	Элементы.ГруппаРасчетныйСчетПоУслугамКапРемонта.Видимость = Объект.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного;
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
// Заполняет табличную часть "УслугиПоТипам" списком всех видов услуг, имеющихся в справочнике 
// "Виды услуг".
//
Процедура ЗагрузитьУслугиВТабличнуюЧастьРазделенияУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги,
	|	ЛОЖЬ КАК Коммунальная,
	|	ЛОЖЬ КАК СодержаниеИРемонт
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг
	|ГДЕ
	|	НЕ КВП_ВидыУслуг.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ВидыУслуг.Наименование";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Объект.УслугиПоТипам.Загрузить(Таблица);
	
КонецПроцедуры // ЗагрузитьУслугиВТабличнуюЧастьРазделенияУслуг()

&НаСервере
// Исключает из таблицы значений удаленные услуги и дополняет ее новыми услугами.
//
// Параметры:
//  ТаблицаУслуг - таблица с услугами
//  
// Возвращаемое значение:
//  ТаблицаЗначений - актуализированная таблица с услугами
//
Функция АктуализироватьСписокУслуг(ТаблицаУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслуг.ВидУслуги,
	|	ТаблицаУслуг.Коммунальная,
	|	ТаблицаУслуг.СодержаниеИРемонт
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги,
	|	ЕСТЬNULL(втУслуги.Коммунальная, ЛОЖЬ) КАК Коммунальная,
	|	ЕСТЬNULL(втУслуги.СодержаниеИРемонт, ЛОЖЬ) КАК СодержаниеИРемонт
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО КВП_ВидыУслуг.Ссылка = втУслуги.ВидУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ВидыУслуг.Наименование";
	
	Запрос.УстановитьПараметр("ТаблицаУслуг", ТаблицаУслуг);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Возврат Таблица;
	
КонецФункции // АктуализироватьСписокУслуг()

&НаСервере
// Процедура заполнения списков выбора настроек.
//
Процедура ЗаполнитьСпискиВыбораНастроек()
	
	ТекущийСписокУслуг = Новый СписокЗначений();
	СписокУслуг        = Новый СписокЗначений();
	
	// Заполнение список выбора настроек.
	мДействияНачСальдо.Добавить("ВключатьНачСальдо",     "Включать задолженность, аванс и оплаты");
	мДействияНачСальдо.Добавить("НеВыводить",            "Не включать начальное сальдо и оплаты");
	мДействияНачСальдо.Добавить("ВключатьЗадолженность", "Включать задолженность и оплаты");
	мДействияНачСальдо.Добавить("ВключатьАванс",         "Включать аванс и оплаты");
	Для Каждого ТекЭлемент Из мДействияНачСальдо Цикл
		Элементы.ВключениеНачальнойЗадолженности.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	мУслугиИсполнителя.Добавить("Выводить список услуг");
	мУслугиИсполнителя.Добавить("Выводить произвольную строку");
	Для Каждого ТекЭлемент Из мУслугиИсполнителя Цикл
		Элементы.УслугиИсполнителя.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	мВыборУслуг.Добавить("Все услуги");
	мВыборУслуг.Добавить("Выбранные услуги");
	мВыборУслуг.Добавить("Все услуги, кроме выбранных");
	Для Каждого ТекЭлемент Из мВыборУслуг Цикл
		Элементы.ВыборУслуг.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	мУчетОплат.Добавить("Конца отчетного месяца");
	мУчетОплат.Добавить("Текущего момента");
	Для Каждого ТекЭлемент Из мУчетОплат Цикл
		Элементы.УчетОплат.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	мВариантСортировки.Добавить("Адрес регистрации");
	мВариантСортировки.Добавить("Адрес доставки");
	мВариантСортировки.Добавить("Лицевой счет");
	Для Каждого ТекЭлемент Из мВариантСортировки Цикл
		Элементы.ВариантСортировки.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	мВариантУчетаКомиссииБанка.Добавить("Не учитывать");
	мВариантУчетаКомиссииБанка.Добавить("Сверх суммы к оплате");
	мВариантУчетаКомиссииБанка.Добавить("В сумме к оплате");
	Для Каждого ТекЭлемент Из мВариантУчетаКомиссииБанка Цикл
		Элементы.ВариантУчетаКомиссииБанка.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	мСпособПечатиКвитанцииКапРемонт = Новый СписокЗначений();
	мСпособПечатиКвитанцииКапРемонт.Добавить("основную квитанцию и квитанцию на кап. ремонт");
	мСпособПечатиКвитанцииКапРемонт.Добавить("только основную квитанцию");
	мСпособПечатиКвитанцииКапРемонт.Добавить("только квитанцию на кап. ремонт");
	мСпособПечатиКвитанцииКапРемонт.Добавить("единая квитанция на осн. услуги и кап. ремонт");
	
	Для Каждого ТекЭлемент Из мСпособПечатиКвитанцииКапРемонт Цикл
		Элементы.СпособПечатиКвитанцииКапРемонт.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	мСпособПечатиКвитанцииПоПеням = Новый СписокЗначений;
	мСпособПечатиКвитанцииПоПеням.Добавить("в квитанции с основными начислениями");
	мСпособПечатиКвитанцииПоПеням.Добавить("в отдельной квитанции");
	Для Каждого ТекЭлемент Из мСпособПечатиКвитанцииПоПеням Цикл
		Элементы.СпособПечатиКвитанцииПоПеням.СписокВыбора.Добавить(ТекЭлемент.Значение);
	КонецЦикла;
	
	ЗначенияВыбораТипаГраницОтбораКвитанций = Новый СписокЗначений;
	ЗначенияВыбораТипаГраницОтбораКвитанций.Добавить("без ограничений");
	ЗначенияВыбораТипаГраницОтбораКвитанций.Добавить("значение");
	Для Каждого ТекЭлемент Из ЗначенияВыбораТипаГраницОтбораКвитанций Цикл
		Элементы.ГраницаОтбораИтоговойСуммыОт.СписокВыбора.Добавить(ТекЭлемент.Значение);
		Элементы.ГраницаОтбораИтоговойСуммыДо.СписокВыбора.Добавить(ТекЭлемент.Значение);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпискиВыбораНастроек()

&НаСервере
// Заполняет табличную часть "УслугиПоТипам" списком всех видов услуг, имеющихся в справочнике 
// "Виды услуг".
//
Процедура ЗагрузитьУслугиВТабличнуюЧасть()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги,
	|	ЛОЖЬ КАК Коммунальная,
	|	ЛОЖЬ КАК СодержаниеИРемонт
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг
	|ГДЕ
	|	НЕ КВП_ВидыУслуг.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ВидыУслуг.Наименование";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Объект.УслугиПоТипам.Загрузить(Таблица);
	
КонецПроцедуры // ЗагрузитьУслугиВТабличнуюЧасть()

&НаСервере
// Обрабатывает изменение исполнителя расчетов.
//
Процедура ИсполнительРасчетовПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ИсполнительРасчетов) И (НЕ ЗначениеЗаполнено(Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам) ИЛИ НЕ Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам.Владелец = Объект.ИсполнительРасчетов) Тогда
		Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам = Объект.ИсполнительРасчетов.ОсновнойБанковскийСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обрабатывает изменение расчетного счета для приема платежей по основным услугам.
//
Процедура РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ИсполнительРасчетов) ИЛИ НЕ Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам.Владелец = Объект.ИсполнительРасчетов Тогда
		Объект.ИсполнительРасчетов = Объект.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам.Владелец;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обрабатывает изменение расчетного счета для приема платежей по услугам капитального ремонта.
//
Процедура РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта) Тогда
		ВладелецСчетаКапРемонта = Объект.РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта.Владелец;
	Иначе
		ВладелецСчетаКапРемонта = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для заполнения реквизитов формы по-умолчанию при создании новой записи регистра сведений.
//
&НаСервере
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	
	Объект.ГраницаОтбораИтоговойСуммыОт  = 0;
	Объект.ГраницаОтбораИтоговойСуммыДо  = 0;
	
	//Основные настройки
	Объект.ВыводитьШК                    = Истина;
	Объект.ВыводитьНачальноеСальдо       = Истина;
	Объект.ВыводитьИндРасходДляВсехУслуг = Истина;
	
	//Настройки вывода квитанции
	Объект.ПечататьОтрывнойКорешок       = Истина;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоУмолчанию()

#КонецОбласти


