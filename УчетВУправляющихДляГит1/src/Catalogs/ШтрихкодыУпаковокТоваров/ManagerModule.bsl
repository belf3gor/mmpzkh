#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("ЗначениеШтрихкода");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Данные.ЗначениеШтрихкода) Тогда
		Представление = Данные.ЗначениеШтрихкода;
	Иначе
		Представление = НСтр("ru = 'Штрихкод не указан'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СтруктураСозданияШтрихкодаУпаковки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипУпаковки");
	Результат.Вставить("ТипШтрихкода");
	Результат.Вставить("Штрихкод", "");
	Результат.Вставить("ХешСумма", "");
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Упаковка");
	Результат.Вставить("Серия");
	Результат.Вставить("Количество", 0);
	Результат.Вставить("ДатаУпаковки", '00010101');
	Результат.Вставить("Ответственный");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураЗаписиСтатусаУпаковки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияЕГАИС",     Неопределено);
	Результат.Вставить("АкцизнаяМарка",        Неопределено);
	Результат.Вставить("Статус",               Неопределено);
	Результат.Вставить("Справка2",             Неопределено);
	Результат.Вставить("АлкогольнаяПродукция", Неопределено);
	Результат.Вставить("Основание",            Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Создает элементы справочника Штрихкоды упаковок по данным дерева маркированной продукции, сформированного в форме проверки и подбора.
// 
// Параметры:
// 	ДеревоМаркированнойПродукции     - ДеревоЗначений  - дерево, содержащее результаты проверки и подбора в соответствующей форме.
// 	ТаблицаШтрихкодовВерхнегоУровня  - ТаблицаЗначений - в таблицу помещаются данные о содержимом верхнего уровня.
// 	ШтрихКодыУпаковок - ТаблицаЗначений, Неопределено  - в данную таблицу помещаются уже существующие в информациоонной базе упаковки.
// Возвращаемое значение:
// 	Структура - Описание:
// * ВложенныеШтрихкодыУпаковок - Массив - вложенные в текущую упаковку штриховые коды.
//
Функция РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(ДеревоМаркированнойПродукции,
	ТаблицаШтрихкодовВерхнегоУровня, ШтрихКодыУпаковок = Неопределено, КэшСтатусовУказанияСерий = Неопределено) Экспорт
	
	КоличествоПодчиненнойМаркированнойПродукции = 0;
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ВложенныеШтрихкодыУпаковок",     Новый Массив);
	
	Если ШтрихКодыУпаковок = Неопределено Тогда
		
		ШтрихКодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(
			ШтрихкодированиеИС.ЗначенияШтрихкодовВНаличииИзДереваМаркируемойПродукции(
				ДеревоМаркированнойПродукции, Неопределено));
		
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		
		Если СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			Продолжить;
		Иначе
			СтрокаДерева.КоличествоПодчиненныхПачек = 0;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Результат = Новый Структура;
			Результат.Вставить("ВложенныеШтрихкодыУпаковок", Новый Массив);
		Иначе
			Результат = РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(СтрокаДерева,
				ТаблицаШтрихкодовВерхнегоУровня, ШтрихкодыУпаковок, КэшСтатусовУказанияСерий);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		ПараметрыОтбора.Вставить("ХешСумма", СтрокаДерева.ХешСумма);
		НайденныеШтрихкодыУпаковок = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
		
		Если НайденныеШтрихкодыУпаковок.Количество() > 0 Тогда
			
			ШтрихкодУпаковки = НайденныеШтрихкодыУпаковок[0].Ссылка;
			
		Иначе
			
			ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
			ДанныеНовойУпаковки.Штрихкод     = СтрокаДерева.Штрихкод;
			ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
			ДанныеНовойУпаковки.ТипУпаковки  = СтрокаДерева.ТипУпаковки;
			
			ДанныеНовойУпаковки.Номенклатура   = СтрокаДерева.Номенклатура;
			ДанныеНовойУпаковки.Характеристика = СтрокаДерева.Характеристика;
			ДанныеНовойУпаковки.Серия          = СтрокаДерева.Серия;
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
				
				ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоПодчиненныхПачек;
				ДанныеНовойУпаковки.ХешСумма   = СтрокаДерева.ХешСумма;
				
			ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
				
				ДанныеНовойУпаковки.ХешСумма = СтрокаДерева.ХешСумма;
				
			КонецЕсли;
			
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
			ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму", Истина);
			
			ШтрихкодУпаковки = СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки, 
				Результат.ВложенныеШтрихкодыУпаковок, ПараметрыЗаписи, КэшСтатусовУказанияСерий);
			
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.Штрихкод = ДанныеНовойУпаковки.Штрихкод;
			НоваяСтрока.ХешСумма = ДанныеНовойУпаковки.ХешСумма;
			НоваяСтрока.Ссылка   = ШтрихкодУпаковки;
			
		КонецЕсли;
		
		СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки;
		
		Если ТипЗнч(ДеревоМаркированнойПродукции) = Тип("ДеревоЗначений")
			Или ДеревоМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока
			Или ДеревоМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки Тогда
			
			НоваяСтрокаШтрихкодыВерхнегоУровня = ТаблицаШтрихкодовВерхнегоУровня.Добавить();
			НоваяСтрокаШтрихкодыВерхнегоУровня.ШтрихкодУпаковки  = ШтрихкодУпаковки;
			НоваяСтрокаШтрихкодыВерхнегоУровня.Штрихкод = СтрокаДерева.Штрихкод;
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			КоличествоПодчиненнойМаркированнойПродукции = КоличествоПодчиненнойМаркированнойПродукции + 1;
		Иначе
			КоличествоПодчиненнойМаркированнойПродукции = КоличествоПодчиненнойМаркированнойПродукции + СтрокаДерева.КоличествоПодчиненныхПачек;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
		
	КонецЦикла;
	
	Если ТипЗнч(ДеревоМаркированнойПродукции) = Тип("СтрокаДереваЗначений") Тогда
		
		ДеревоМаркированнойПродукции.КоличествоПодчиненныхПачек = КоличествоПодчиненнойМаркированнойПродукции;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Создает элементы справочника ШтрихкодыУпаковокТоваров.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЧекЕГАИС - Чек ЕГАИС.
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  РассчитыватьДанные - Булево - выполнять расчет данных о товарах и справках 2 дерева упаковок.
//  Грузополучатель - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для записи статусов новых акцизных марок.
//
Функция СоздатьШтрихкодыУпаковок(ДеревоУпаковок, ШтрихкодыУпаковок = Неопределено,
	РассчитыватьДанные = Ложь, Грузополучатель = Неопределено, КэшСтатусовУказанияСерий = Неопределено) Экспорт
	
	КоличествоАкцизныхМарок = 0;
	
	Если ШтрихкодыУпаковок <> Неопределено Тогда
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("ВложенныеШтрихкодыУпаковок", Новый Массив);
		ВозвращаемоеЗначение.Вставить("ХешСумма",                   "");
	Иначе
		ВозвращаемоеЗначение = Неопределено;
	КонецЕсли;
	
	Если РассчитыватьДанные Тогда
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("АлкогольнаяПродукция",    NULL);
		ДанныеСтроки.Вставить("КодАлкогольнойПродукции", NULL);
		ДанныеСтроки.Вставить("Номенклатура",            NULL);
		ДанныеСтроки.Вставить("Характеристика",          NULL);
		ДанныеСтроки.Вставить("Серия",                   NULL);
		ДанныеСтроки.Вставить("Справка2",                NULL);
		ДанныеСтроки.Вставить("ВсеСправки2Указаны",      NULL);
		
	КонецЕсли;
	
	Если ШтрихкодыУпаковок <> Неопределено Тогда
		ДанныеДляРасчетаХешСуммы = Новый СписокЗначений;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Результат = Новый Структура;
			Результат.Вставить("ВложенныеШтрихкодыУпаковок", Новый Массив);
			Результат.Вставить("ХешСумма",                   "");
		Иначе
			Результат = СоздатьШтрихкодыУпаковок(СтрокаДерева, ШтрихкодыУпаковок,
				РассчитыватьДанные, Грузополучатель, КэшСтатусовУказанияСерий);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШтрихкодыУпаковок <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
				ПараметрыОтбора.Вставить("ХешСумма", Результат.ХешСумма);
				НайденныеШтрихкодыУпаковок = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеШтрихкодыУпаковок.Количество() > 0 Тогда
					
					ШтрихкодУпаковки = НайденныеШтрихкодыУпаковок[0].Ссылка;
					
				Иначе
					
					ДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки();
					ДанныеНовойУпаковки.Штрихкод     = СтрокаДерева.Штрихкод;
					ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
					ДанныеНовойУпаковки.ТипУпаковки  = СтрокаДерева.ТипУпаковки;
					
					ДанныеНовойУпаковки.Номенклатура   = СтрокаДерева.Номенклатура;
					ДанныеНовойУпаковки.Характеристика = СтрокаДерева.Характеристика;
					ДанныеНовойУпаковки.Серия          = СтрокаДерева.Серия;
					
					Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
						
						Если СтрДлина(СтрокаДерева.Штрихкод) = 150 Тогда
							ДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
						Иначе 
							ДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
						КонецЕсли;
						
					ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
						
						ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоАкцизныхМарок;
						ДанныеНовойУпаковки.ХешСумма   = Результат.ХешСумма;
						
					ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
						
						ДанныеНовойУпаковки.ХешСумма = Результат.ХешСумма;
						
					КонецЕсли;
					
					ПараметрыЗаписи = Новый Структура;
					ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
					ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму", Истина);
					
					ШтрихкодУпаковки = СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки,
						Результат.ВложенныеШтрихкодыУпаковок, ПараметрыЗаписи, КэшСтатусовУказанияСерий);
					
					НоваяСтрока = ШтрихкодыУпаковок.Добавить();
					НоваяСтрока.Штрихкод = ДанныеНовойУпаковки.Штрихкод;
					НоваяСтрока.ХешСумма = ДанныеНовойУпаковки.ХешСумма;
					НоваяСтрока.Ссылка   = ШтрихкодУпаковки;
					
				КонецЕсли;
				
				СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки;
				
			КонецЕсли;
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				ДанныеДляРасчетаХешСуммы.Добавить(СтрокаДерева.Штрихкод);
			Иначе
				ДанныеДляРасчетаХешСуммы.Добавить(Результат.ХешСумма);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Грузополучатель)
				И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				
				ДанныеЗаписиСтатуса = Справочники.ШтрихкодыУпаковокТоваров.СтруктураЗаписиСтатусаУпаковки();
				ДанныеЗаписиСтатуса.ОрганизацияЕГАИС     = Грузополучатель;
				ДанныеЗаписиСтатуса.АкцизнаяМарка        = ШтрихкодУпаковки;
				ДанныеЗаписиСтатуса.Статус               = Перечисления.СтатусыАкцизныхМарок.НеПодтверждена;
				ДанныеЗаписиСтатуса.Справка2             = СтрокаДерева.Справка2;
				ДанныеЗаписиСтатуса.АлкогольнаяПродукция = СтрокаДерева.АлкогольнаяПродукция;
				
				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
				
			КонецЕсли;
			
			ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + 1;
		Иначе
			КоличествоАкцизныхМарок = КоличествоАкцизныхМарок + СтрокаДерева.КоличествоАкцизныхМарок;
		КонецЕсли;
		
		Если РассчитыватьДанные Тогда
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				СтрокаДерева.ВсеСправки2Указаны = ЗначениеЗаполнено(СтрокаДерева.Справка2);
			КонецЕсли;
			
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "АлкогольнаяПродукция");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "КодАлкогольнойПродукции");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Номенклатура");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Характеристика");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Серия");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "Справка2");
			ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ВсеСправки2Указаны", Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗнч(ДеревоУпаковок) = Тип("СтрокаДереваЗначений") Тогда
		
		ДеревоУпаковок.КоличествоАкцизныхМарок = КоличествоАкцизныхМарок;
		
		Если РассчитыватьДанные Тогда
			Если ДеревоУпаковок.Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(ДеревоУпаковок, ДанныеСтроки);
			Иначе
				
				ДанныеСтроки.АлкогольнаяПродукция    = Неопределено;
				ДанныеСтроки.КодАлкогольнойПродукции = Неопределено;
				ДанныеСтроки.Номенклатура            = Неопределено;
				ДанныеСтроки.Характеристика          = Неопределено;
				ДанныеСтроки.Серия                   = Неопределено;
				ДанныеСтроки.Справка2                = Неопределено;
				ДанныеСтроки.ВсеСправки2Указаны      = Ложь;
				
				ЗаполнитьЗначенияСвойств(ДеревоУпаковок, ДанныеСтроки);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ШтрихкодыУпаковок <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДеревоУпаковок, "ХешСумма") Тогда
				ВозвращаемоеЗначение.ХешСумма = ДеревоУпаковок.ХешСумма;
			ИначеЕсли ДанныеДляРасчетаХешСуммы.Количество() <> 0 Тогда
				ВозвращаемоеЗначение.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, ИмяПоля, ТолькоЗаполненность = Ложь)
	
	Значение = ДанныеСтроки[ИмяПоля];
	ЗначениеДерева = СтрокаДерева[ИмяПоля];
	
	Если Значение = NULL Тогда
		Значение = ЗначениеДерева;
	ИначеЕсли Значение <> Неопределено
		И Значение <> ЗначениеДерева Тогда
		Значение = ?(ТолькоЗаполненность, Ложь, Неопределено);
	КонецЕсли;
	
	ДанныеСтроки[ИмяПоля] = Значение;
	
КонецПроцедуры

Функция ПолучитьСгенерироватьАкцизнуюМарку(КодАкцизнойМарки, Номенклатура, Характеристика, Серия = Неопределено, ЗаписьПриОбновленииИБ = ЛОЖЬ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &КодАкцизнойМарки
	|;
	|";
	Запрос.УстановитьПараметр("КодАкцизнойМарки", КодАкцизнойМарки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат СгенерироватьАкцизнуюМарку(КодАкцизнойМарки, Номенклатура, Характеристика, Серия, ЗаписьПриОбновленииИБ);
	КонецЕсли;
	
КонецФункции

Функция СгенерироватьАкцизнуюМарку(КодАкцизнойМарки, Номенклатура, Характеристика, Серия = Неопределено, ЗаписьПриОбновленииИБ = ЛОЖЬ) Экспорт
	
	СправочникОбъект = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	СправочникОбъект.Номенклатура = Номенклатура;
	СправочникОбъект.Характеристика = Характеристика;
	СправочникОбъект.Серия = Серия;
	СправочникОбъект.ЗначениеШтрихкода = КодАкцизнойМарки;
	
	Если СтрДлина(КодАкцизнойМарки) = 150 Тогда
		СправочникОбъект.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	Иначе
		СправочникОбъект.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
	КонецЕсли;
	
	СправочникОбъект.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Если ЗаписьПриОбновленииИБ Тогда
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		СправочникОбъект.Записать();
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание новой акцизной марки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			СправочникОбъект.Метаданные(),,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Функция ПолучитьАкцизнуюМаркуПоКоду(КодАкцизнойМарки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.ДатаУпаковки) КАК ДатаУпаковки
	|ПОМЕСТИТЬ МаксимальныеДатыУпаковки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = &КодАкцизнойМарки
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныеДатыУпаковки КАК МаксимальныеДатыУпаковки
	|		ПО ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода = МаксимальныеДатыУпаковки.ЗначениеШтрихкода
	|		И ШтрихкодыУпаковокТоваров.ДатаУпаковки = МаксимальныеДатыУпаковки.ДатаУпаковки";
	Запрос.УстановитьПараметр("КодАкцизнойМарки", КодАкцизнойМарки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьШтрихкодУпаковки(ДанныеШтрихкодаУпаковки, ВложенныеШтрихкоды = Неопределено, 
	ПараметрыЗаписи = Неопределено, КэшСтатусовУказанияСерий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйЭлемент = Справочники.ШтрихкодыУпаковокТоваров.СоздатьЭлемент();
	
	НовыйЭлемент.Номенклатура   = ДанныеШтрихкодаУпаковки.Номенклатура;
	НовыйЭлемент.Характеристика = ДанныеШтрихкодаУпаковки.Характеристика;
	
	Если КэшСтатусовУказанияСерий = Неопределено Тогда
		КэшСтатусовУказанияСерий = Новый Соответствие();
		СтатусУказанияСерий = Неопределено;
	Иначе
		СтатусУказанияСерий = КэшСтатусовУказанияСерий[ДанныеШтрихкодаУпаковки.Номенклатура];
	КонецЕсли;
	
	Если СтатусУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НовыйЭлемент, Справочники.ШтрихкодыУпаковокТоваров);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НовыйЭлемент, ПараметрыУказанияСерий);
		
		КэшСтатусовУказанияСерий.Вставить(ДанныеШтрихкодаУпаковки.Номенклатура, НовыйЭлемент.СтатусУказанияСерий);
	Иначе
		НовыйЭлемент.СтатусУказанияСерий = СтатусУказанияСерий;
	КонецЕсли;
	
	НовыйЭлемент.Серия = ДанныеШтрихкодаУпаковки.Серия;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДанныеШтрихкодаУпаковки,,"Номенклатура, Характеристика, Серия");
	
	НовыйЭлемент.ЗначениеШтрихкода = ДанныеШтрихкодаУпаковки.Штрихкод;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ТипШтрихкода) Тогда
		
		НовыйЭлемент.ТипШтрихкода = ШтрихкодированиеИС.ОпределитьТипШтрихкода(
			НовыйЭлемент.ЗначениеШтрихкода,
			Перечисления.ТипыУпаковок.МультитоварнаяУпаковка);
		
	КонецЕсли;
	
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		Для Каждого Штрихкод Из ВложенныеШтрихкоды Цикл
			СтрокаТЧ = НовыйЭлемент.ВложенныеШтрихкоды.Добавить();
			СтрокаТЧ.Штрихкод = Штрихкод;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ДатаУпаковки) Тогда
		НовыйЭлемент.ДатаУпаковки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура") Тогда
		
		Для Каждого ПараметрЗаписи Из ПараметрыЗаписи Цикл
			НовыйЭлемент.ДополнительныеСвойства.Вставить(ПараметрЗаписи.Ключ, ПараметрЗаписи.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Функция ХешСуммаСодержимогоУпаковки(ДанныеДляВычисления) Экспорт
	
	Если ДанныеДляВычисления.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеДляВычисления.СортироватьПоЗначению();
	СтрокаДляРасчетаХеша = СтрСоединить(ДанныеДляВычисления.ВыгрузитьЗначения());
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанныхОбъект.Добавить(СтрокаДляРасчетаХеша);
	Возврат Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	
КонецФункции

Функция ДанныеДляВычисленияХешСуммы(ШтрихкодУпаковкиТовара) Экспорт
	
	ДанныеДляВычисления = Новый СписокЗначений;
	
	Если ТипЗнч(ШтрихкодУпаковкиТовара) = Тип("СправочникСсылка.ШтрихкодыУпаковокТоваров") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
		|			ТОГДА ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|		ИНАЧЕ ШтрихкодыУпаковокТоваров.ХешСумма
		|	КОНЕЦ КАК УчитываемаяСтрока
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ШтрихкодыУпаковокТоваров.Ссылка
		|ГДЕ
		|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ШтрихкодУпаковкиТовара);
		
	ИначеЕсли ТипЗнч(ШтрихкодУпаковкиТовара) = Тип("СправочникОбъект.ШтрихкодыУпаковокТоваров") Тогда
		
		МассивВложенныхШтрихкодов = Новый Массив;
		
		Для Каждого СтрокаВложенныйШтрихкод Из ШтрихкодУпаковкиТовара.ВложенныеШтрихкоды Цикл
			
			МассивВложенныхШтрихкодов.Добавить(СтрокаВложенныйШтрихкод.Штрихкод);
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ШтрихкодыУпаковокТоваров.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар)
		|			ТОГДА ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|		ИНАЧЕ ШтрихкодыУпаковокТоваров.ХешСумма
		|	КОНЕЦ КАК УчитываемаяСтрока
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивВложенныхШтрихкодов)";
		
		Запрос.УстановитьПараметр("МассивВложенныхШтрихкодов", МассивВложенныхШтрихкодов);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляВычисления.Добавить(Выборка.УчитываемаяСтрока);
		
	КонецЦикла;
	
	Возврат ДанныеДляВычисления;
	
КонецФункции

// Возвращает параметры для заполнения свойств, связанных с номенклатурой по вложенным штрихкодам.
// Если объект не имеет вложенных штрихкодов, тогда структура заполняется текущими реквизитами объекта.
// Для проверки по вложенным штрихкодам достаточно брать непосредственно вложенные штрихкоды, без анализа
// вложенных уже в них штрихкодов 2ого уровня, т.к. они при записи также проверются по вложенным упаковкам.
// Если во вложенных упаковках упаковки с одной позицией номенклатуры и характеристики, то
// такая упаковка считается монотоварной.
// 
// Параметры:
// 	Объект - СправочникОбъект.ШтрихкодыУпаковокТоваров - объект со свойствами и вложенными товарами
// 	       - ДанныеФормыСтруктура                      - объект формы
//
// Возвращаемое значение:
// 	Структура со свойствами:
// 	 * ТипУпаковки    - ПеречислениеСсылка.ТипыУпаковок
// 	 * Номенклатура   - ОпределяемыйТип.Номенклатура
// 	 * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
// 	 * Упаковка       - ОпределяемыйТип.Упаковка
// 	 * Серия          - ОпределяемыйТип.СерияНоменклатуры
//
Функция ПараметрыНоменклатурыВложенныхШтрихкодов(Объект) Экспорт
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("ТипУпаковки",    Объект.ТипУпаковки);
	ПараметрыНоменклатуры.Вставить("Номенклатура",   Объект.Номенклатура);
	ПараметрыНоменклатуры.Вставить("Характеристика", Объект.Характеристика);
	ПараметрыНоменклатуры.Вставить("Упаковка",       Объект.Упаковка);
	ПараметрыНоменклатуры.Вставить("Серия",          Объект.Серия);
	
	Если Объект.ВложенныеШтрихкоды.Количество() > 0 Тогда
		
		// Получаем строки 1ого уровня для выполнения запроса
		СписокШтрихкодовУпаковок = Новый Массив;
		Для каждого Строка Из Объект.ВложенныеШтрихкоды Цикл
			СписокШтрихкодовУпаковок.Добавить(Строка.Штрихкод);
		КонецЦикла;
		
		МетаданныеСправочника = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокШтрихкодовУпаковок", СписокШтрихкодовУпаковок);
		Запрос.УстановитьПараметр("ПустоеЗначениеНоменклатуры",
			МетаданныеСправочника.Реквизиты.Номенклатура.Тип.ПривестиЗначение(Неопределено));
		Запрос.УстановитьПараметр("ПустоеЗначениеХарактеристики",
			МетаданныеСправочника.Реквизиты.Характеристика.Тип.ПривестиЗначение(Неопределено));
		Запрос.УстановитьПараметр("ПустоеЗначениеУпаковки",
			МетаданныеСправочника.Реквизиты.Упаковка.Тип.ПривестиЗначение(Неопределено));
		Запрос.УстановитьПараметр("ПустоеЗначениеСерии",
			МетаданныеСправочника.Реквизиты.Серия.Тип.ПривестиЗначение(Неопределено));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Номенклатура) КАК Номенклатура,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Номенклатура) КАК КоличествоПозицийНоменклатуры,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Характеристика) КАК Характеристика,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Характеристика) КАК КоличествоПозицийХарактеристик,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Упаковка) КАК Упаковка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Упаковка) КАК КоличествоПозицийУпаковок,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Серия) КАК Серия,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Серия) КАК КоличествоПозицийСерий
		|ПОМЕСТИТЬ СвернутыеЗначения
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&СписокШтрихкодовУпаковок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
		|	КОНЕЦ КАК ТипУпаковки,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|			ТОГДА СвернутыеЗначения.Номенклатура
		|		ИНАЧЕ &ПустоеЗначениеНоменклатуры
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|			ТОГДА СвернутыеЗначения.Характеристика
		|		ИНАЧЕ &ПустоеЗначениеХарактеристики
		|	КОНЕЦ КАК Характеристика,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийУпаковок = 1
		|			ТОГДА СвернутыеЗначения.Упаковка
		|		ИНАЧЕ &ПустоеЗначениеУпаковки
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийСерий = 1
		|			ТОГДА СвернутыеЗначения.Серия
		|		ИНАЧЕ &ПустоеЗначениеСерии
		|	КОНЕЦ КАК Серия
		|ИЗ
		|	СвернутыеЗначения КАК СвернутыеЗначения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыНоменклатуры, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыНоменклатуры;
	
КонецФункции

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - параметры указания серий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Штрихкоды упаковок
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ШтрихкодыУпаковок";
	КомандаПечати.Представление = НСтр("ru = 'Печать штрихкодов упаковок'");
	
	КомандаПечати.МенеджерПечати = "Справочник.ШтрихкодыУпаковокТоваров";
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ШтрихкодыУпаковок") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		                                                     "ШтрихкодыУпаковок",
		                                                     НСтр("ru='Штрихкоды упаковок'"),
		                                                     СформироватьПечатнуюФормуШтрихкодыУпаковок(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Формирует табличный документ "Акцизные марки".
//
Функция СформироватьПечатнуюФормуШтрихкодыУпаковок(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ШтрихкодыУпаковокТоваров_ШтрихкодыУпаковок";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Количество        КАК Количество,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка В(&МассивОбъектов)
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода В(&ДопустимыеТипыШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипШтрихкода");
	
	Запрос.УстановитьПараметр("МассивОбъектов",           МассивОбъектов);
	Запрос.УстановитьПараметр("ДопустимыеТипыШтрихкодов", ДопустимыеТипыШтрихкодовДляПечати());
	
	ПараметрыМакетов = ПараметрыМакетовДляПечати();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыШтрихкодовУпаковок = ПараметрыШтрихкодовУпаковокДляПечати();
		
		ЗаполнитьЗначенияСвойств(ПараметрыШтрихкодовУпаковок, Выборка);
		
		ТипУпаковки  = Перечисления.ТипыУпаковок.МаркированныйТовар;

		ТипШтрихкода = ШтрихкодированиеИС.ОпределитьТипШтрихкода(Выборка.Штрихкод, ТипУпаковки);
		
		Если ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			
			ПараметрыШтрихкодовУпаковок.СерияМарки = Сред(Выборка.Штрихкод, 4, 3);
			ПараметрыШтрихкодовУпаковок.НомерМарки = Сред(Выборка.Штрихкод, 7, 8);
			
		КонецЕсли;
		
		ДобавитьШтрихкодВТабличныйДокумент(ТабличныйДокумент, ПараметрыМакетов, ПараметрыШтрихкодовУпаковок);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДопустимыеТипыШтрихкодовДляПечати()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.Code128);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.PDF417);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
	
	Возврат МассивТипов;
	
КонецФункции

Функция ПараметрыШтрихкодовУпаковокДляПечати() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипШтрихкода",      Перечисления.ТипыШтрихкодов.ПустаяСсылка());
	Параметры.Вставить("Штрихкод", "");
	Параметры.Вставить("ДатаУпаковки",      '00010101');
	Параметры.Вставить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип.ПривестиЗначение());
	Параметры.Вставить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип.ПривестиЗначение());
	Параметры.Вставить("Упаковка",          Метаданные.ОпределяемыеТипы.Упаковка.Тип.ПривестиЗначение());
	Параметры.Вставить("Серия",             Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	Параметры.Вставить("Количество",        0);
	Параметры.Вставить("СерияМарки",        0);
	Параметры.Вставить("НомерМарки",        0);
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыМакетовДляПечати() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Макет_SSCC",           УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.SSCC"));
	Параметры.Вставить("Макет_Code128Формат1", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат1"));
	Параметры.Вставить("Макет_Code128Формат2", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат2"));
	Параметры.Вставить("Макет_Code128Формат3", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат3"));
	Параметры.Вставить("Макет_GS1_128",        УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.GS1_128"));
	Параметры.Вставить("Макет_DataBar",        УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.GS1DataBarExpandedStacked"));
	Параметры.Вставить("Макет_PDF417",         УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.PDF417"));
	Параметры.Вставить("Макет_QR",             УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.QR"));
	
	Эталон = УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Параметры.Вставить("КоличествоМиллиметровВПикселе", КоличествоМиллиметровВПикселе);
	
	Возврат Параметры;
	
КонецФункции

// Для использовании процедуры требуется добавить переопределить УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати
// Пример:
//  СтандартнаяОбработка = Ложь;
//  Справочники.ШтрихкодыУпаковокТоваров.ДобавитьКомандыПечати(КомандыПечати);
//  ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, "Справочник.ШтрихкодыУпаковокТоваров");
Процедура ДобавитьШтрихкодВТабличныйДокумент(ТабличныйДокумент, ПараметрыМакетовДляПечати, ПараметрыШтрихкодовУпаковокДляПечати) Экспорт
	
	ТипШтрихкодаУпаковки = ПараметрыШтрихкодовУпаковокДляПечати.ТипШтрихкода;
	Штрихкод             = ПараметрыШтрихкодовУпаковокДляПечати.Штрихкод;
	ДатаУпаковки         = ПараметрыШтрихкодовУпаковокДляПечати.ДатаУпаковки;
	Номенклатура         = ПараметрыШтрихкодовУпаковокДляПечати.Номенклатура;
	Характеристика       = ПараметрыШтрихкодовУпаковокДляПечати.Характеристика;
	Упаковка             = ПараметрыШтрихкодовУпаковокДляПечати.Упаковка;
	Серия                = ПараметрыШтрихкодовУпаковокДляПечати.Серия;
	Количество           = ПараметрыШтрихкодовУпаковокДляПечати.Количество;
	СерияМарки           = ПараметрыШтрихкодовУпаковокДляПечати.СерияМарки;
	НомерМарки           = ПараметрыШтрихкодовУпаковокДляПечати.НомерМарки;
	
	Если Не ЗначениеЗаполнено(ТипШтрихкодаУпаковки)
		Или Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ВозможныеПараметрыОбластиПечатиШтрихкодовПоТипуШтрихкода(ТипШтрихкодаУпаковки);
	ПараметрыОбласти.Вставить("ДатаУпаковки",   ДатаУпаковки);
	ПараметрыОбласти.Вставить("Номенклатура",   Номенклатура);
	ПараметрыОбласти.Вставить("Характеристика", Характеристика);
	ПараметрыОбласти.Вставить("Упаковка",       Упаковка);
	ПараметрыОбласти.Вставить("Серия",          Серия);
	ПараметрыОбласти.Вставить("Количество",     Количество);
	ПараметрыОбласти.Вставить("СерияМарки",     СерияМарки);
	ПараметрыОбласти.Вставить("НомерМарки",     НомерМарки);
	
	ШтрихкодДляКомпоненты = Штрихкод;
	
	ОтображатьТекст    = Истина;
	Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.SSCC Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_SSCC;
		ТипКода = 2;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(Штрихкод);
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШтрихкода.Результат);
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.Code128 Тогда
		
		НомерФорматаCode128 = ШтрихкодыУпаковокКлиентСервер.ФорматШтрихкодаCode128(Штрихкод);
		
		Если НомерФорматаCode128 = 1 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат1;
		ИначеЕсли НомерФорматаCode128 = 2 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат2;
		ИначеЕсли НомерФорматаCode128 = 3 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат3;
		Иначе
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат1;
		КонецЕсли;
		ТипКода = 4;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(Штрихкод);
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШтрихкода.Результат);
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_GS1_128;
		ТипКода = 2;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		Если СтрНайти(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
		Иначе
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(Штрихкод);
		КонецЕсли;
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			Для каждого СвойстваПараметра Из ПараметрыШтрихкода.Результат Цикл
				ИмяПараметра = "ИдентификаторПрименения_" + СвойстваПараметра.КлючИдентификатора;
				ПараметрыОбласти.Вставить(ИмяПараметра, СвойстваПараметра.Значение);
			КонецЦикла;
			
			ШтрихкодДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
				ПараметрыШтрихкода.Результат,
				Истина,
				ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины());
			
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_DataBar;
		ТипКода = 17;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		Если СтрНайти(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
		Иначе
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(Штрихкод);
		КонецЕсли;
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			Для каждого СвойстваПараметра Из ПараметрыШтрихкода.Результат Цикл
				ПараметрыОбласти.Вставить(СвойстваПараметра.ИмяИдентификатора, СвойстваПараметра.Значение);
			КонецЦикла;
			
			ШтрихкодДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
				ПараметрыШтрихкода.Результат,
				Истина,
				ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины());
			
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.PDF417 Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_PDF417;
		ТипКода = 6;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_QR;
		ТипКода = 16;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;
		
	КонецЕсли;
	
	ПараметрыОбласти.ПредставлениеНоменклатуры = ИнтеграцияИС.ПредставлениеНоменклатуры(
		Номенклатура,
		Характеристика,
		Упаковка);
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, ПараметрыОбласти);
	
	Рисунок = Область.Рисунки.ШтрихкодПечать;
	
	КоличествоМиллиметровВПикселе = ПараметрыМакетовДляПечати.КоличествоМиллиметровВПикселе;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",        СокрЛП(ШтрихкодДляКомпоненты));
	ПараметрыШтрихкода.Вставить("ТипКода",         ТипКода);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", ОтображатьТекст);
	
	Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", 2);
	КонецЕсли;
	
	Рисунок.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

Функция ВозможныеПараметрыОбластиПечатиШтрихкодовПоТипуШтрихкода(ТипШтрихкодаУпаковки)
	
	ПараметрыОбласти = Новый Структура;
	
	ПараметрыОбласти.Вставить("ПредставлениеНоменклатуры", "");
	
	КолонкиПечати = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ТипШтрихкодаУпаковки);
	Для каждого ИдентификаторИтипКолонки Из КолонкиПечати Цикл
		ИдентификаторКолонки = ИдентификаторИтипКолонки.Ключ;
		ТипКолонки = ИдентификаторИтипКолонки.Значение;
		ЗначениеПоУмолчанию = ТипКолонки.ПривестиЗначение(Неопределено);
		
		Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128
			ИЛИ ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
			ИмяКолонки = "ИдентификаторПрименения_" + ИдентификаторКолонки;
		Иначе
			ИмяКолонки = ИдентификаторКолонки;
		КонецЕсли;
		
		ПараметрыОбласти.Вставить(ИмяКолонки, ЗначениеПоУмолчанию);
	КонецЦикла;
	
	Возврат ПараметрыОбласти;
	
КонецФункции

#КонецОбласти

Функция СтрокаДереваВерхнегоУровня(СтрокаДерева, УпаковкиВерхнегоУровня)
	
	УпаковкаВерхнегоУровня = УпаковкиВерхнегоУровня.Получить(СтрокаДерева);
	Если УпаковкаВерхнегоУровня <> Неопределено Тогда
		Возврат УпаковкаВерхнегоУровня;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		
		УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева.Родитель, УпаковкиВерхнегоУровня);
		
		УпаковкиВерхнегоУровня.Вставить(СтрокаДерева, УпаковкаВерхнегоУровня);
		
		Возврат УпаковкаВерхнегоУровня;
		
	Иначе
		
		Возврат СтрокаДерева;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Устарело_ПеренесеноВШтрихкодировованиеИС

//см. ШтрихкодировованиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ
Функция ВложенныеШтрихкодыУпаковокПоДокументу(ВыборкаПерваяИтерация, МенеджерВременныхТаблиц) Экспорт
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("ОрганизацияЕГАИС");
	ДеревоУпаковок.Колонки.Добавить("ИдентификаторСтроки");
	ДеревоУпаковок.Колонки.Добавить("ШтрихкодУпаковки");
	ДеревоУпаковок.Колонки.Добавить("Штрихкод");
	ДеревоУпаковок.Колонки.Добавить("АлкогольнаяПродукция");
	ДеревоУпаковок.Колонки.Добавить("Номенклатура");
	ДеревоУпаковок.Колонки.Добавить("Характеристика");
	ДеревоУпаковок.Колонки.Добавить("Серия");
	ДеревоУпаковок.Колонки.Добавить("Справка2");
	ДеревоУпаковок.Колонки.Добавить("ВсеСправки2Указаны");
	ДеревоУпаковок.Колонки.Добавить("ТипУпаковки");
	ДеревоУпаковок.Колонки.Добавить("ТипШтрихкода");
	ДеревоУпаковок.Колонки.Добавить("Статус");
	ДеревоУпаковок.Колонки.Добавить("КодАлкогольнойПродукции");
	ДеревоУпаковок.Колонки.Добавить("ХешСумма");
	ДеревоУпаковок.Колонки.Добавить("КоличествоАкцизныхМарок");
	
	МаркированныеТовары = Новый ТаблицаЗначений;
	МаркированныеТовары.Колонки.Добавить("ОрганизацияЕГАИС");
	МаркированныеТовары.Колонки.Добавить("ИдентификаторСтроки");
	МаркированныеТовары.Колонки.Добавить("ШтрихкодУпаковки");
	МаркированныеТовары.Колонки.Добавить("СтрокаДерева");
	МаркированныеТовары.Колонки.Добавить("УпаковкаВерхнегоУровня");
	МаркированныеТовары.Колонки.Добавить("Штрихкод");
	МаркированныеТовары.Колонки.Добавить("Номенклатура");
	МаркированныеТовары.Колонки.Добавить("Характеристика");
	МаркированныеТовары.Колонки.Добавить("Серия");
	МаркированныеТовары.Колонки.Добавить("Статус");
	МаркированныеТовары.Колонки.Добавить("Справка2");
	МаркированныеТовары.Колонки.Добавить("АлкогольнаяПродукция");
	МаркированныеТовары.Колонки.Добавить("КодАлкогольнойПродукции");
	
	МаркированныеТовары.Индексы.Добавить("ШтрихкодУпаковки");
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодУпаковки",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ШтрихкодРодительскойУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодов.Колонки.Добавить("ИдентификаторСтроки",          Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	ТаблицаШтрихкодов.Колонки.Добавить("АлкогольнаяПродукция",         Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("Справка2",                     Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаШтрихкодов.Колонки.Добавить("ОрганизацияЕГАИС",             Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковкиВерхнегоУровня",       Новый Соответствие);
	ДополнительныеПараметры.Вставить("КэшКодовАлкогольнойПродукции", Новый Соответствие);
	
	НуженПоискВложенныхШтрихкодов = Истина;
	НомерИтерации = 1;
	Пока НуженПоискВложенныхШтрихкодов Цикл
		
		Если НомерИтерации = 1 Тогда
			
			Выборка = ВыборкаПерваяИтерация;
			
		Иначе
			
			ИмяВременнойТаблицы = "ВТВложенныеШтрихкодыИсходныеДанные2";
			
			ТекстыЗапроса = Новый СписокЗначений;
			ТекстыЗапроса.Добавить(
				СтрШаблон(
					"ВЫБРАТЬ
					|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
					|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
					|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
					|	ИсходныеДанные.Справка2                     КАК Справка2,
					|	ИсходныеДанные.ШтрихкодУпаковки             КАК ШтрихкодУпаковки,
					|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК ШтрихкодРодительскойУпаковки
					|ПОМЕСТИТЬ %1
					|ИЗ
					|	&ИсходныеДанные КАК ИсходныеДанные", ИмяВременнойТаблицы));
			
			ПараметрыФормированияТекстаЗапроса = ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
			ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
			ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
			ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы             = ИмяВременнойТаблицы;
			ТекстыЗапроса.Добавить(
				ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
				"ВложенныеШтрихкоды");
			Если НомерИтерации > 1 Тогда
				ТекстыЗапроса.Добавить(
					СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы));
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ИсходныеДанные", ТаблицаШтрихкодов);
			РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
			Выборка = РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать();
			
		КонецЕсли;
		
		ТаблицаШтрихкодов.Очистить();
		
		Пока Выборка.Следующий() Цикл
			
			Если СоответствиеСтрокДереваУпаковок[Выборка.Упаковка] = Неопределено Тогда
				СтрокаРодитель = ДеревоУпаковок.Строки.Добавить();
				ЗаполнитьСтрокуДереваУпаковок(СтрокаРодитель, Выборка, 0, МаркированныеТовары, ДополнительныеПараметры);
				СоответствиеСтрокДереваУпаковок.Вставить(Выборка.Упаковка, СтрокаРодитель);
			Иначе
				СтрокаРодитель = СоответствиеСтрокДереваУпаковок[Выборка.Упаковка];
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.УпаковкаУровень1) Тогда
				
				Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень1] = Неопределено Тогда
					СтрокаУпаковкиУровень1 = СтрокаРодитель.Строки.Добавить();
					ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень1, Выборка, 1, МаркированныеТовары, ДополнительныеПараметры);
					СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень1, СтрокаУпаковкиУровень1);
				Иначе
					СтрокаУпаковкиУровень1 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень1];
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.УпаковкаУровень2) Тогда
					
					Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень2] = Неопределено Тогда
						СтрокаУпаковкиУровень2 = СтрокаУпаковкиУровень1.Строки.Добавить();
						ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень2, Выборка, 2, МаркированныеТовары, ДополнительныеПараметры);
						СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень2, СтрокаУпаковкиУровень2);
					Иначе
						СтрокаУпаковкиУровень2 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень2];
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.УпаковкаУровень3) Тогда
						
						Если СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень3] = Неопределено Тогда
							СтрокаУпаковкиУровень3 = СтрокаУпаковкиУровень2.Строки.Добавить();
							ЗаполнитьСтрокуДереваУпаковок(СтрокаУпаковкиУровень3, Выборка, 3, МаркированныеТовары, ДополнительныеПараметры);
							СоответствиеСтрокДереваУпаковок.Вставить(Выборка.УпаковкаУровень3, СтрокаУпаковкиУровень3);
						Иначе
							СтрокаУпаковкиУровень3 = СоответствиеСтрокДереваУпаковок[Выборка.УпаковкаУровень3];
						КонецЕсли;
						
						НоваяСтрока = ТаблицаШтрихкодов.Добавить();
						НоваяСтрока.ШтрихкодУпаковки     = Выборка.УпаковкаУровень3;
						НоваяСтрока.ИдентификаторСтроки  = Выборка.УпаковкаУровень3ИдентификаторСтроки;
						НоваяСтрока.АлкогольнаяПродукция = Выборка.УпаковкаУровень3АлкогольнаяПродукция;
						НоваяСтрока.Справка2             = Выборка.УпаковкаУровень3Справка2;
						НоваяСтрока.ОрганизацияЕГАИС     = Выборка.ОрганизацияЕГАИС;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерИтерации = НомерИтерации + 1;
		НуженПоискВложенныхШтрихкодов = ТаблицаШтрихкодов.Количество() > 0;
		
	КонецЦикла;
	
	КэшКодовАлкогольнойПродукции = Новый Соответствие;
	КодыАлкогольнойПродукции     = Новый Массив;
	Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции) Тогда
			
			КодыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАлкогольнойПродукции);
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции)
			И АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(СтрокаТЧ.Штрихкод) Тогда
			
			СтрокаТЧ.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаТЧ.Штрихкод, КэшКодовАлкогольнойПродукции);
			Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаДерева) Тогда
				СтрокаТЧ.СтрокаДерева.КодАлкогольнойПродукции = СтрокаТЧ.КодАлкогольнойПродукции;
			КонецЕсли;
			
			КодыАлкогольнойПродукции.Добавить(СтрокаТЧ.КодАлкогольнойПродукции);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеАлкогольнойПродукции = ИнтеграцияЕГАИС.СоответствиеАлкогольнойПродукции(КодыАлкогольнойПродукции);
	
	Для Каждого СтрокаТЧ Из МаркированныеТовары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция)
			И ЗначениеЗаполнено(СтрокаТЧ.КодАлкогольнойПродукции) Тогда
			
			АлкогольнаяПродукция = СоответствиеАлкогольнойПродукции[СтрокаТЧ.КодАлкогольнойПродукции];
			Если ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
				СтрокаТЧ.АлкогольнаяПродукция = АлкогольнаяПродукция;
				Если ЗначениеЗаполнено(СтрокаТЧ.СтрокаДерева) Тогда
					СтрокаТЧ.СтрокаДерева.АлкогольнаяПродукция = АлкогольнаяПродукция;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковок(ДеревоУпаковок, Неопределено, Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ДеревоУпаковок",      ДеревоУпаковок);
	Результат.Вставить("МаркированныеТовары", МаркированныеТовары);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСтрокуДереваУпаковок(СтрокаДерева, Выборка, Уровень, МаркированныеТовары, ДополнительныеПараметры)
	
	ТекстУровень = ?(Уровень = 0, "", "Уровень" + Уровень);
	
	СтрокаДерева.ОрганизацияЕГАИС     = Выборка.ОрганизацияЕГАИС;
	СтрокаДерева.ШтрихкодУпаковки     = Выборка["Упаковка" + ТекстУровень];
	СтрокаДерева.ИдентификаторСтроки  = Выборка["Упаковка" + ТекстУровень + "ИдентификаторСтроки"];
	СтрокаДерева.ТипУпаковки          = Выборка["Упаковка" + ТекстУровень + "ТипУпаковки"];
	СтрокаДерева.ТипШтрихкода         = Выборка["Упаковка" + ТекстУровень + "ТипШтрихкода"];
	СтрокаДерева.Штрихкод             = Выборка["Упаковка" + ТекстУровень + "Штрихкод"];
	СтрокаДерева.Номенклатура         = Выборка["Упаковка" + ТекстУровень + "Номенклатура"];
	СтрокаДерева.Характеристика       = Выборка["Упаковка" + ТекстУровень + "Характеристика"];
	СтрокаДерева.Серия                = Выборка["Упаковка" + ТекстУровень + "Серия"];
	СтрокаДерева.ХешСумма             = Выборка["Упаковка" + ТекстУровень + "ХешСумма"];
	СтрокаДерева.Статус               = Выборка["Упаковка" + ТекстУровень + "Статус"];
	СтрокаДерева.Справка2             = Выборка["Упаковка" + ТекстУровень + "Справка2"];
	СтрокаДерева.АлкогольнаяПродукция = Выборка["Упаковка" + ТекстУровень + "АлкогольнаяПродукция"];
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.АлкогольнаяПродукция)
			И Не ЗначениеЗаполнено(СтрокаДерева.КодАлкогольнойПродукции)
			И АкцизныеМаркиВызовСервера.ЭтоШтрихкодАкцизнойМарки(СтрокаДерева.Штрихкод) Тогда
			СтрокаДерева.КодАлкогольнойПродукции = АкцизныеМаркиВызовСервера.КодКлассификатораНоменклатурыЕГАИС(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
		СтрокаТаблицы = МаркированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
		
		СтрокаТаблицы.СтрокаДерева           = СтрокаДерева;
		СтрокаТаблицы.УпаковкаВерхнегоУровня = СтрокаДереваВерхнегоУровня(СтрокаДерева, ДополнительныеПараметры.УпаковкиВерхнегоУровня);
		
	КонецЕсли;
	
КонецПроцедуры

//см. ШтрихкодировованиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу
Функция ШтрихкодыУпаковокПоДокументу(ПараметрыФормированияТекстаЗапроса) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыФормированияТекстаЗапроса.ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(
		ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	ВложенныеШтрихкодыУпаковок = ВложенныеШтрихкодыУпаковокПоДокументу(
		РезультатыЗапроса.ВложенныеШтрихкоды.Выбрать(), МенеджерВременныхТаблиц);
	
	Возврат ВложенныеШтрихкодыУпаковок;
	
КонецФункции

//см. ШтрихкодировованиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу
Функция ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса) Экспорт
	
	ДокументСсылка                  = ПараметрыФормированияТекстаЗапроса.ДокументСсылка;
	ИспользоватьИдентификаторСтроки = ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки;
	ИмяПоляОрганизацияЕГАИС         = ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС;
	ИмяПоляАлкогольнаяПродукция     = ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция;
	ИмяВременнойТаблицы             = ПараметрыФормированияТекстаЗапроса.ИмяВременнойТаблицы;
	ЗаполнитьСправки2ИзРегистра     = ПараметрыФормированияТекстаЗапроса.ЗаполнитьСправки2ИзРегистра;
	
	ТекстЗапроса = "";
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		МетаданныеДокумента = ДокументСсылка.Метаданные();
		РеквизитыТабличнойЧастиАкцизныеМарки = МетаданныеДокумента.ТабличныеЧасти.АкцизныеМарки.Реквизиты;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("ИдентификаторСтроки") <> Неопределено
			И ИспользоватьИдентификаторСтроки Тогда
			ЗначениеРеквизитаИдентификаторСтроки  = "ТабличнаяЧасть.ИдентификаторСтроки";
			ИспользоватьТабличнуюЧастьТовары      = Истина;
		Иначе
			ЗначениеРеквизитаИдентификаторСтроки  = "НЕОПРЕДЕЛЕНО";
			ИспользоватьТабличнуюЧастьТовары      = Ложь;
		КонецЕсли;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("Справка2") <> Неопределено Тогда
			
			ЗначениеРеквизитаСправка2 = "ТабличнаяЧасть.Справка2";
			
			Если ИспользоватьТабличнуюЧастьТовары Тогда
				ЗначениеРеквизитаАлкогольнаяПродукция =
				"ВЫБОР КОГДА ТабличнаяЧасть.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) ТОГДА
				|	ЕСТЬNULL(Товары.%ИмяПоляАлкогольнаяПродукция%, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|ИНАЧЕ
				|	ЕСТЬNULL(ТабличнаяЧасть.Справка2.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|КОНЕЦ
				|";
			Иначе
				ЗначениеРеквизитаАлкогольнаяПродукция =
				"ВЫБОР КОГДА ТабличнаяЧасть.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) ТОГДА
				|	ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
				|ИНАЧЕ
				|	ЕСТЬNULL(ТабличнаяЧасть.Справка2.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))
				|КОНЕЦ
				|";
			КонецЕсли;
			
		Иначе
			
			ЗначениеРеквизитаСправка2 = "ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)";
			
			Если ИспользоватьТабличнуюЧастьТовары Тогда
				ЗначениеРеквизитаАлкогольнаяПродукция = "ЕСТЬNULL(Товары.%ИмяПоляАлкогольнаяПродукция%, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка))";
			Иначе
				ЗначениеРеквизитаАлкогольнаяПродукция = "ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)";
			КонецЕсли;
			
		КонецЕсли;
		
		Если РеквизитыТабличнойЧастиАкцизныеМарки.Найти("ШтрихкодУпаковки") <> Неопределено Тогда
			ЗначениеРеквизитаШтрихкодРодительскойУпаковки = "ТабличнаяЧасть.ШтрихкодУпаковки";
		Иначе
			ЗначениеРеквизитаШтрихкодРодительскойУпаковки = "ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)";
		КонецЕсли;
		
		ЗначениеРеквизитаОрганизацияЕГАИС = "ТабличнаяЧасть.Ссылка." + ИмяПоляОрганизацияЕГАИС;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	%ОрганизацияЕГАИС%             КАК ОрганизацияЕГАИС,
		|	%ИдентификаторСтроки%          КАК ИдентификаторСтроки,
		|	%АлкогольнаяПродукция%         КАК АлкогольнаяПродукция,
		|	%Справка2%                     КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка   КАК ШтрихкодУпаковки,
		|	%ШтрихкодРодительскойУпаковки% КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	%ИмяТабличнойЧасти% КАК ТабличнаяЧасть
		|		%Соединения%
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТабличнойЧасти%",            МетаданныеДокумента.ПолноеИмя() + "." + МетаданныеДокумента.ТабличныеЧасти.АкцизныеМарки.Имя);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОрганизацияЕГАИС%",             ЗначениеРеквизитаОрганизацияЕГАИС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИдентификаторСтроки%",          ЗначениеРеквизитаИдентификаторСтроки);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%АлкогольнаяПродукция%",         СтрЗаменить(ЗначениеРеквизитаАлкогольнаяПродукция, "%ИмяПоляАлкогольнаяПродукция%", ИмяПоляАлкогольнаяПродукция));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Справка2%",                     ЗначениеРеквизитаСправка2);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШтрихкодРодительскойУпаковки%", ЗначениеРеквизитаШтрихкодРодительскойУпаковки);
		
		Если ИспользоватьТабличнуюЧастьТовары Тогда
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, "%Соединения%",
				СтрШаблон(
					"ЛЕВОЕ СОЕДИНЕНИЕ %1.%2 КАК Товары
					|ПО Товары.ИдентификаторСтроки = ТабличнаяЧасть.ИдентификаторСтроки
					|И Товары.ИдентификаторСтроки <> """"
					|",
					МетаданныеДокумента.ПолноеИмя(),
					МетаданныеДокумента.ТабличныеЧасти.Товары.Имя));
		Иначе
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса, "%Соединения%", "");
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ИсходныеДанные.ОрганизацияЕГАИС     КАК ОрганизацияЕГАИС,
	|	ИсходныеДанные.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2             КАК Справка2,
	|	ИсходныеДанные.ШтрихкодУпаковки     КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.ИдентификаторСтроки
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.АлкогольнаяПродукция
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ИсходныеДанные.Справка2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень1
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2                     КАК Справка2,
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК УпаковкаУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень1,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень1
	|ИЗ
	|	&ВТВложенныеШтрихкодыИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ИсходныеДанные.ШтрихкодРодительскойУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ГДЕ
	|	ИсходныеДанные.ШтрихкодРодительскойУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень1.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ВложенныеШтрихкодыУпаковокУровень1.Справка2                     КАК Справка2,
	|	ВложенныеШтрихкодыУпаковокУровень1.Упаковка                     КАК Упаковка,
	|	ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень1.Справка2Уровень1             КАК Справка2Уровень1,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.ИдентификаторСтрокиУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.АлкогольнаяПродукцияУровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень2,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень1.Справка2Уровень1
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень2
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень1 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныеШтрихкодыУпаковокУровень2.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2                     КАК Справка2,
	|	ВложенныеШтрихкодыУпаковокУровень2.Упаковка                     КАК Упаковка,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень1             КАК Справка2Уровень1,
	|	ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень2 КАК АлкогольнаяПродукцияУровень2,
	|	ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень2             КАК Справка2Уровень2,
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод             КАК УпаковкаУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.ИдентификаторСтроки ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.ИдентификаторСтрокиУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.ИдентификаторСтроки
	|	КОНЕЦ КАК ИдентификаторСтрокиУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.АлкогольнаяПродукция ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.АлкогольнаяПродукцияУровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.АлкогольнаяПродукция
	|	КОНЕЦ КАК АлкогольнаяПродукцияУровень3,
	|	ВЫБОР КОГДА ТаблицаИдентификаторов.Справка2 ЕСТЬ NULL ТОГДА
	|		ВложенныеШтрихкодыУпаковокУровень2.Справка2Уровень2
	|	ИНАЧЕ
	|		ТаблицаИдентификаторов.Справка2
	|	КОНЕЦ КАК Справка2Уровень3
	|ПОМЕСТИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень2 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ПО ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2 = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВложенныеШтрихкодыИсходныеДанные КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.ШтрихкодУпаковки = ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеДанные.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
	|	ИсходныеДанные.ИдентификаторСтроки          КАК ИдентификаторСтроки,
	|	ИсходныеДанные.АлкогольнаяПродукция         КАК АлкогольнаяПродукция,
	|	ИсходныеДанные.Справка2                     КАК Справка2,
	|	ИсходныеДанные.Упаковка                     КАК Упаковка,
	|	ИсходныеДанные.УпаковкаУровень1             КАК УпаковкаУровень1,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень1  КАК ИдентификаторСтрокиУровень1,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень1 КАК АлкогольнаяПродукцияУровень1,
	|	ИсходныеДанные.Справка2Уровень1             КАК Справка2Уровень1,
	|	ИсходныеДанные.УпаковкаУровень2             КАК УпаковкаУровень2,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень2  КАК ИдентификаторСтрокиУровень2,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень2 КАК АлкогольнаяПродукцияУровень2,
	|	ИсходныеДанные.Справка2Уровень2             КАК Справка2Уровень2,
	|	ИсходныеДанные.УпаковкаУровень3             КАК УпаковкаУровень3,
	|	ИсходныеДанные.ИдентификаторСтрокиУровень3  КАК ИдентификаторСтрокиУровень3,
	|	ИсходныеДанные.АлкогольнаяПродукцияУровень3 КАК АлкогольнаяПродукцияУровень3,
	|	ИсходныеДанные.Справка2Уровень3             КАК Справка2Уровень3
	|ПОМЕСТИТЬ ДанныеУпаковок
	|ИЗ
	|	ВложенныеШтрихкодыУпаковокУровень3 КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень1
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень1.УпаковкаУровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень2
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень2.УпаковкаУровень2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеШтрихкодыУпаковокУровень3 КАК ВложенныеШтрихкодыУпаковокУровень3
	|		ПО ИсходныеДанные.Упаковка = ВложенныеШтрихкодыУпаковокУровень3.УпаковкаУровень3
	|ГДЕ
	|	ВложенныеШтрихкодыУпаковокУровень1.Упаковка ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень2.Упаковка ЕСТЬ NULL
	|	И ВложенныеШтрихкодыУпаковокУровень3.Упаковка ЕСТЬ NULL
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУпаковок.ОрганизацияЕГАИС                                                         КАК ОрганизацияЕГАИС,
	|	ДанныеУпаковок.Упаковка                                                                 КАК Упаковка,
	|	ДанныеУпаковок.ИдентификаторСтроки                                                      КАК УпаковкаИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковки.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2
	|	КОНЕЦ КАК УпаковкаСправка2,
	|	ДанныеУпаковок.Упаковка.ТипШтрихкода                                                    КАК УпаковкаТипШтрихкода,
	|	ДанныеУпаковок.Упаковка.ТипУпаковки                                                     КАК УпаковкаТипУпаковки,
	|	ДанныеУпаковок.Упаковка.ЗначениеШтрихкода                                               КАК УпаковкаШтрихкод,
	|	ДанныеУпаковок.Упаковка.Номенклатура                                                    КАК УпаковкаНоменклатура,
	|	ДанныеУпаковок.Упаковка.Характеристика                                                  КАК УпаковкаХарактеристика,
	|	ДанныеУпаковок.Упаковка.Серия                                                           КАК УпаковкаСерия,
	|	ДанныеУпаковок.Упаковка.ХешСумма                                                        КАК УпаковкаХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковки.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковки.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковки.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаСтатус,
	|	ЕСТЬNULL(СтатусыУпаковки.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукция) КАК УпаковкаАлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень1                                                         КАК УпаковкаУровень1,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень1                                              КАК УпаковкаУровень1ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень1.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень1
	|	КОНЕЦ КАК УпаковкаУровень1Справка2,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипШтрихкода                                            КАК УпаковкаУровень1ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень1.ТипУпаковки                                             КАК УпаковкаУровень1ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень1.ЗначениеШтрихкода                                       КАК УпаковкаУровень1Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень1.Номенклатура                                            КАК УпаковкаУровень1Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень1.Характеристика                                          КАК УпаковкаУровень1Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень1.Серия                                                   КАК УпаковкаУровень1Серия,
	|	ДанныеУпаковок.УпаковкаУровень1.ХешСумма                                                КАК УпаковкаУровень1ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень1.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень1.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень1 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень1.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень1Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень1.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень1) КАК УпаковкаУровень1АлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень2                                                         КАК УпаковкаУровень2,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень2                                              КАК УпаковкаУровень2ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень2.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень2
	|	КОНЕЦ КАК УпаковкаУровень2Справка2,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипШтрихкода                                            КАК УпаковкаУровень2ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень2.ТипУпаковки                                             КАК УпаковкаУровень2ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень2.ЗначениеШтрихкода                                       КАК УпаковкаУровень2Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень2.Номенклатура                                            КАК УпаковкаУровень2Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень2.Характеристика                                          КАК УпаковкаУровень2Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень2.Серия                                                   КАК УпаковкаУровень2Серия,
	|	ДанныеУпаковок.УпаковкаУровень2.ХешСумма                                                КАК УпаковкаУровень2ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень2.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень2.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень2 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень2.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень2Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень2.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень2) КАК УпаковкаУровень2АлкогольнаяПродукция,
	|
	|	ДанныеУпаковок.УпаковкаУровень3                                                         КАК УпаковкаУровень3,
	|	ДанныеУпаковок.ИдентификаторСтрокиУровень3                                              КАК УпаковкаУровень3ИдентификаторСтроки,
	|	ВЫБОР КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|		ЕСТЬNULL(СтатусыУпаковкиУровень3.Справка2, &ПустаяСправка2)
	|	ИНАЧЕ
	|		ДанныеУпаковок.Справка2Уровень3
	|	КОНЕЦ КАК УпаковкаУровень3Справка2,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипШтрихкода                                            КАК УпаковкаУровень3ТипШтрихкода,
	|	ДанныеУпаковок.УпаковкаУровень3.ТипУпаковки                                             КАК УпаковкаУровень3ТипУпаковки,
	|	ДанныеУпаковок.УпаковкаУровень3.ЗначениеШтрихкода                                       КАК УпаковкаУровень3Штрихкод,
	|	ДанныеУпаковок.УпаковкаУровень3.Номенклатура                                            КАК УпаковкаУровень3Номенклатура,
	|	ДанныеУпаковок.УпаковкаУровень3.Характеристика                                          КАК УпаковкаУровень3Характеристика,
	|	ДанныеУпаковок.УпаковкаУровень3.Серия                                                   КАК УпаковкаУровень3Серия,
	|	ДанныеУпаковок.УпаковкаУровень3.ХешСумма                                                КАК УпаковкаУровень3ХешСумма,
	|	ВЫБОР
	|		КОГДА &ЗаполнитьСправки2ИзРегистра ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень3.Статус, &ПустойСтатус)
	|		КОГДА ЕСТЬNULL(СтатусыУпаковкиУровень3.Справка2, &ПустаяСправка2) = ДанныеУпаковок.Справка2Уровень3 ТОГДА
	|			ЕСТЬNULL(СтатусыУпаковкиУровень3.Статус, &ПустойСтатус)
	|		ИНАЧЕ
	|			&ОшибкаЧтенияСтатуса
	|	КОНЕЦ КАК УпаковкаУровень3Статус,
	|	ЕСТЬNULL(СтатусыУпаковкиУровень3.АлкогольнаяПродукция, ДанныеУпаковок.АлкогольнаяПродукцияУровень3) КАК УпаковкаУровень3АлкогольнаяПродукция
	|ИЗ
	|	ДанныеУпаковок КАК ДанныеУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковки
	|		ПО ДанныеУпаковок.Упаковка = СтатусыУпаковки.АкцизнаяМарка
	|			И (СтатусыУпаковки.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень1
	|		ПО ДанныеУпаковок.УпаковкаУровень1 = СтатусыУпаковкиУровень1.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень1.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень2
	|		ПО ДанныеУпаковок.УпаковкаУровень2 = СтатусыУпаковкиУровень2.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень2.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК СтатусыУпаковкиУровень3
	|		ПО ДанныеУпаковок.УпаковкаУровень3 = СтатусыУпаковкиУровень3.АкцизнаяМарка
	|			И (СтатусыУпаковкиУровень3.ОрганизацияЕГАИС = ДанныеУпаковок.ОрганизацияЕГАИС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеШтрихкодыУпаковокУровень3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеУпаковок
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТВложенныеШтрихкодыИсходныеДанные", ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаполнитьСправки2ИзРегистра",        Формат(ЗаполнитьСправки2ИзРегистра, "БЛ=ЛОЖЬ; БИ=ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустойСтатус",                       "ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОшибкаЧтенияСтатуса",                "ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ОшибкаЧтенияСтатуса)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустаяСправка2",                     "ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

//см. ШтрихкодировованиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов
Функция ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументСсылка",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьИдентификаторСтроки", Ложь);
	ВозвращаемоеЗначение.Вставить("ИмяПоляОрганизацияЕГАИС",         "ОрганизацияЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяПоляАлкогольнаяПродукция",     "АлкогольнаяПродукция");
	ВозвращаемоеЗначение.Вставить("ИмяВременнойТаблицы",             "ВТВложенныеШтрихкодыИсходныеДанные");
	ВозвращаемоеЗначение.Вставить("ЗаполнитьСправки2ИзРегистра",     Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецЕсли

