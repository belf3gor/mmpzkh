#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Включает функциональность билетов.
// 
// Возвращаемое значение:
//  Истина - функциональность включена в результате вызова.
//           Рекомендуется обновить пользовательский интерфейс.
//
Функция ВключитьИспользование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Константы.ИспользоватьБилеты.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Константы.ИспользоватьБилеты.Установить(Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

// Функция получает все операции по билету, включая помеченные на удаление
//
// Параметры:
//  Билет		 - СправочникСсылка.Билеты - билте, по которому нужно получить операции
//  Упорядочить	 - Булево - если Истина, то таблица операций упорядочивается в хронологическом 
//		и логическом порядке (естественный порядок видов операций см. в Перечисления.ВидыОперацийСБилетами.ПорядокОпераций())
// 
// Возвращаемое значение:
//   - Таблица значений - операции по билету
//
Функция ОперацииПоБилету(Билет, Упорядочить = Истина) Экспорт 

	// Ниже запрос редактируется через СхемаЗапроса
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОперацияСБилетом.Билет) КАК Билет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОперацияСБилетом.Билет) КАК КоличествоНайденных
	|ПОМЕСТИТЬ ВТ_БилетЗамена
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|ГДЕ
	|	ОперацияСБилетом.Проведен
	|	И ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат)
	|	И ОперацияСБилетом.БилетЗамена = &Билет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацияСБилетом.Ссылка КАК Ссылка,
	|	ОперацияСБилетом.ВерсияДанных КАК ВерсияДанных,
	|	ОперацияСБилетом.ПометкаУдаления КАК Отменена,
	|	ВЫБОР
	|		КОГДА ОперацияСБилетом.ПометкаУдаления
	|			ТОГДА 2
	|		КОГДА ОперацияСБилетом.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаПокупка)
	|				И ОперацияСБилетом.БилетЗамена = ЗНАЧЕНИЕ(Справочник.Билеты.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВТ_БилетЗамена.Билет, ЗНАЧЕНИЕ(Справочник.Билеты.ПустаяСсылка))
	|		ИНАЧЕ ОперацияСБилетом.БилетЗамена
	|	КОНЕЦ КАК БилетЗамена,
	|	999 КАК Порядок
	|ИЗ
	|	Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БилетЗамена КАК ВТ_БилетЗамена
	|		ПО (ВТ_БилетЗамена.КоличествоНайденных = 1)
	|ГДЕ
	|	ОперацияСБилетом.Билет = &Билет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОперацияСБилетом.Дата, ДЕНЬ),
	|	Порядок,
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Билет", Билет);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	// Добавим недостающие колонки в запрос
	ОбязательныеРеквизитыОперации = Документы.ОперацияСБилетом.РеквизитыВлияющиеНаОтражениеВУчете();
	ЗапросПоОперациям = СхемаЗапроса.ПакетЗапросов[1];
	
	Для каждого Реквизит Из ОбязательныеРеквизитыОперации Цикл
		Если ЗапросПоОперациям.Колонки.Найти(Реквизит.Ключ) = Неопределено Тогда
			ЗапросПоОперациям.Операторы[0].ВыбираемыеПоля.Добавить("ОперацияСБилетом."+Реквизит.Ключ);
		КонецЕсли;	
	КонецЦикла; 
	
	Если Упорядочить Тогда
		
		// Установим выражение для поля Порядок.	
		ВыражениеПоляПорядка = "ВЫБОР
			|";
		
		ШаблонУсловияПоляВыбора = "КОГДА ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.%1) ТОГДА %2";
		
		Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.ВидыОперацийСБилетами.ЗначенияПеречисления Цикл
			ВыражениеПоляПорядка = ВыражениеПоляПорядка +"
			|"+ СтрШаблон(ШаблонУсловияПоляВыбора,
					ЗначениеПеречисления.Имя,
					Перечисления.ВидыОперацийСБилетами.ПорядокОперации(Перечисления.ВидыОперацийСБилетами[ЗначениеПеречисления.Имя]));
		КонецЦикла; 
		
		// Порядок незаполненного значения
		ВыражениеПоляПорядка = ВыражениеПоляПорядка +"
			|ИНАЧЕ "+ Перечисления.ВидыОперацийСБилетами.ПорядокОперации(Перечисления.ВидыОперацийСБилетами.ПустаяСсылка());
		
		ВыражениеПоляПорядка = ВыражениеПоляПорядка +"
			|КОНЕЦ";
		
		// Подменяем выражение поля Порядок в запросе
		ПолеПорядка = ЗапросПоОперациям.Операторы[0].ВыбираемыеПоля.Найти("999");
		
		ЗапросПоОперациям.Операторы[0].ВыбираемыеПоля.Установить(
			ЗапросПоОперациям.Операторы[0].ВыбираемыеПоля.Индекс(ПолеПорядка),
			Новый ВыражениеСхемыЗапроса(ВыражениеПоляПорядка));
			
	Иначе
			
		ЗапросПоОперациям.Порядок.Очистить();	
			
	КонецЕсли;	
				
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();	
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РеквизитыВлияющиеНаОтражениеВУчете() Экспорт

	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("ПометкаУдаления");
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("ПодразделениеОрганизации");
	СтруктураРеквизитов.Вставить("Сотрудник");
	СтруктураРеквизитов.Вставить("Агент");
	СтруктураРеквизитов.Вставить("ДоговорАгента");
	СтруктураРеквизитов.Вставить("ПорядокПокупки");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция СуммыБилетов(Организация, ПериодНачало, ПериодОкончание, Билет = Неопределено, Сотрудник = Неопределено, ТекущийДокумент = Неопределено) Экспорт 
	
	// Запрос ниже модифицируется с помощью СхемаЗапроса
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Билеты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Билеты
	|ИЗ
	|	Справочник.Билеты КАК Билеты
	|ГДЕ
	|	Билеты.ДатаОтправления МЕЖДУ &ПериодНачало И &ПериодОкончание
	|	И Билеты.Организация = &Организация
	|	И Билеты.ДатаПокупки <= &ПериодОкончание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацииСБилетами.Билет КАК Билет,
	|	СУММА(ОперацииСБилетами.Сумма) КАК Сумма,
	|	СУММА(ОперацииСБилетами.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперацияСБилетом.Билет КАК Билет,
	|		ВЫБОР
	|			КОГДА ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)
	|				ТОГДА -ОперацияСБилетом.Сумма
	|			ИНАЧЕ ОперацияСБилетом.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.Возврат)
	|				ТОГДА -ОперацияСБилетом.СуммаНДС
	|			ИНАЧЕ ОперацияСБилетом.СуммаНДС
	|		КОНЕЦ КАК СуммаНДС,
	|		ОперацияСБилетом.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат) КАК Заменен
	|	ИЗ
	|		Документ.ОперацияСБилетом КАК ОперацияСБилетом
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Билеты КАК ВТ_Билеты
	|			ПО ОперацияСБилетом.Билет = ВТ_Билеты.Ссылка
	|	ГДЕ
	|		ОперацияСБилетом.Организация = &Организация
	|		И ОперацияСБилетом.Проведен
	|		И ОперацияСБилетом.Ссылка <> &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АвансовыйОтчетБилеты.Билет,
	|		-АвансовыйОтчетБилеты.Сумма,
	|		-АвансовыйОтчетБилеты.СуммаНДС,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.АвансовыйОтчет.Билеты КАК АвансовыйОтчетБилеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Билеты КАК ВТ_Билеты
	|			ПО АвансовыйОтчетБилеты.Билет = ВТ_Билеты.Ссылка
	|	ГДЕ
	|		АвансовыйОтчетБилеты.Ссылка.Организация = &Организация
	|		И АвансовыйОтчетБилеты.Ссылка.Проведен
	|		И АвансовыйОтчетБилеты.Ссылка <> &ТекущийДокумент) КАК ОперацииСБилетами
	|
	|СГРУППИРОВАТЬ ПО
	|	ОперацииСБилетами.Билет
	|
	|ИМЕЮЩИЕ
	|	НЕ ЕСТЬNULL(МАКСИМУМ(ОперацииСБилетами.Заменен), ЛОЖЬ) И
	|	СУММА(ОперацииСБилетами.Сумма) > 0";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодНачало", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодОкончание", ПериодОкончание);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	УсловиеГДЕТаблицыБилетов = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	
	Если ЗначениеЗаполнено(Билет) Тогда
		УсловиеГДЕТаблицыБилетов.Добавить(Новый ВыражениеСхемыЗапроса("Билеты.Ссылка = &Билет"));
		Запрос.УстановитьПараметр("Билет", Билет);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		УсловиеГДЕТаблицыБилетов.Добавить(Новый ВыражениеСхемыЗапроса("Билеты.Сотрудник = &Сотрудник"));
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;	
		
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ВидыДоговоровАгента() Экспорт 

 	ВидыДоговоров = Новый Массив;

    ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
    ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

    Возврат ВидыДоговоров;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли