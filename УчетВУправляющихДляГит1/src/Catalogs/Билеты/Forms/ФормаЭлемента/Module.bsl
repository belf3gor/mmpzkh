
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// При вводе билета на замену в параметрах формы: 
	//	- описана начальная операция
	//	- установлен параметр ЭтоБилетНаЗамену (используется для настройки доступности реквизитов билета)
	Параметры.Свойство("ЭтоБилетНаЗамену", ЭтоБилетНаЗамену);
	Если Параметры.ЗначенияЗаполнения.Свойство("ОписаниеОперации") Тогда
		ДобавитьНачальнуюОперацию(Параметры.ЗначенияЗаполнения.ОписаниеОперации);
	КонецЕсли;	
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
		
	УстановитьУсловноеОформление();
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом	
	
	ПодготовитьФормуНаСервере();
	
	// Дата запрета изменения данных
	ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
	
	Проверка = ДанныеДляПроверки.Добавить();
	Проверка.Дата 	= '00010101'; // не ограничиваем "снизу" поиск запрета
	Проверка.Объект = Объект.Организация;
	Проверка.Раздел = ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет().Ссылка;
	
	Результат = Новый Структура;
	ОписаниеДанных = Новый Структура("НоваяВерсия, Данные", Ложь, "");
	 
	НайденЗапрет = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ОписаниеДанных, Результат);
	 
	Если НайденЗапрет И Результат.Запреты.Количество() > 0 Тогда
		ДатаЗапретаИзменения = Результат.Запреты[0].ДатаЗапрета;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоДатеЗапретаИзменения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	Ошибки = Неопределено;
	
	СортировкаОпераций = Операции.Выгрузить(Новый Массив); // нужна для проверки корректности ввода операций - см ниже
	
	СортировкаОпераций.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	СортировкаОпераций.Колонки.Добавить("ИндексОперации");
	
	Для Каждого ОписаниеОперации Из Операции Цикл
		
		Если ОписаниеОперации.Отменена Тогда
			Продолжить;
		КонецЕсли;	
		
		ИндексОперации = Операции.Индекс(ОписаниеОперации);
		
		СтрокаСортировщика = СортировкаОпераций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСортировщика, ОписаниеОперации);
		СтрокаСортировщика.Порядок = Перечисления.ВидыОперацийСБилетами.ПорядокОперации(ОписаниеОперации.ВидОперации);
		СтрокаСортировщика.ИндексОперации = ИндексОперации;
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОперации.Дата) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].Дата",
				Нстр("ru='Не указана дата операции'"),
				"Операции",
				ИндексОперации,
				Нстр("ru='Не указана дата операции в строке %1'"),
				ИндексОперации);
				
		КонецЕсли;		
							
		Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат
			И НЕ ЗначениеЗаполнено(ОписаниеОперации.БилетЗамена) Тогда	
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки, 
					"Операции[%1].ОписаниеЗамены",
					Нстр("ru='Не указаны новые данные билета'"),
					"Операции",
					ИндексОперации,
					Нстр("ru='Не указаны новые данные билета в строке %1'"),
					ИндексОперации);
					
		КонецЕсли;		
			
		Если ОписаниеОперации.Сумма = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].Сумма",
				Нстр("ru='Не указана сумма операции'"),
				"Операции",
				ИндексОперации,
				Нстр("ru='Не указана сумма операции в строке %1'"),
				ИндексОперации);
			
		КонецЕсли;
		
		Если НЕ Объект.НДСНеВыделять И НЕ ЗначениеЗаполнено(ОписаниеОперации.СтавкаНДС) Тогда	
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].СтавкаНДС",
				Нстр("ru='Не указана ставка НДС'"),
				"Операции",
				ИндексОперации,
				Нстр("ru='Не указана ставка НДС в строке %1'"),
				ИндексОперации);
				
		КонецЕсли;
		
	КонецЦикла;	
		
	// ПРОВЕРКА КОРРЕКТНОСТИ ВВОДА ОПЕРАЦИЙ
			
	// Таблица операций не должна быть пустая
	Если СортировкаОпераций.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			"Операции",
			Нстр("ru='По билету должна быть хотя бы одна операция'"),
			Неопределено);
	КонецЕсли;	
	
	СортировкаОпераций.Сортировать("Дата, Порядок");
	
	ПерваяОперация = Истина;
	ОперацияПокупка = Неопределено;
	ОперацияЗамена = Неопределено;
	
	Суммы = Новый Структура;
	Суммы.Вставить("Сумма", 0);
	Суммы.Вставить("СуммаНеОблагаемаяНДС", 0);
	Суммы.Вставить("СуммаНДС", 0);
	
	Для каждого ОписаниеОперации Из СортировкаОпераций Цикл
						
		// Первой операцией должна быть Покупка или ЗаменаПокупка
		Если ПерваяОперация 
			И ОписаниеОперации.ВидОперации <> Перечисления.ВидыОперацийСБилетами.Покупка 
			И ОписаниеОперации.ВидОперации <> Перечисления.ВидыОперацийСБилетами.ЗаменаПокупка Тогда
		
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].ВидОперации",
				Нстр("ru='Первой (по дате) операцией должна быть ""Покупка"" или ""Внесение изменений""'"),
				Неопределено,                                                 
				ОписаниеОперации.ИндексОперации);
				
		КонецЕсли; 
		
		ПерваяОперация = Ложь;
		
		// Операция Покупка/ЗаменаПокупка может быть только одна
		Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.Покупка 
			ИЛИ ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаПокупка Тогда
		
			Если ОперацияПокупка = Неопределено Тогда
				ОперацияПокупка = ОписаниеОперации;	
			Иначе
				ТекстСообщения = Нстр("ru='Обнаружена лишняя операция ""%1""'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, ОписаниеОперации.ВидОперации);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки, 
					"Операции[%1].ВидОперации",
					ТекстСообщения,
					Неопределено,                                                 
					ОписаниеОперации.ИндексОперации);
			КонецЕсли;	
			
		КонецЕсли; 
		
		// После операции ЗаменаВозврат не может быть больше операций 
		Если ОперацияЗамена <> Неопределено Тогда
		
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].ВидОперации",
				Нстр("ru='После замены операции по билету невозможны'"),
				Неопределено,                                                 
				ОписаниеОперации.ИндексОперации);
			
		КонецЕсли; 
		
		Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат Тогда
			ОперацияЗамена = ОписаниеОперации;	
		КонецЕсли; 
		
		// Общие суммы билета не должны быть отрицательными (возврат не превышает покупка + доплата).
		УчестьОперациюВСуммеБилета(Суммы, ОписаниеОперации);
						
		Если Суммы.Сумма < 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].Сумма",
				Нстр("ru='Сумма возврата превышает стоимость билета'"),
				"Операции",
				ОписаниеОперации.ИндексОперации,
				Нстр("ru='Сумма возврата в строке %1 превышает стоимость билета'"),
				ОписаниеОперации.ИндексОперации);
		КонецЕсли;	
		
		Если Суммы.СуммаНеОблагаемаяНДС < 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].СуммаНеОблагаемаяНДС",
				Нстр("ru='Сумма возврата превышает стоимость билета'"),
				"Операции",
				ОписаниеОперации.ИндексОперации,
				Нстр("ru='Сумма возврата в строке %1 превышает стоимость билета'"),
				ОписаниеОперации.ИндексОперации);
		КонецЕсли;	
		
		Если Суммы.СуммаНДС < 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки, 
				"Операции[%1].СуммаНДС",
				Нстр("ru='Сумма возврата превышает стоимость билета'"),
				"Операции",
				ОписаниеОперации.ИндексОперации,
				Нстр("ru='Сумма возврата в строке %1 превышает стоимость билета'"),
				ОписаниеОперации.ИндексОперации);
		КонецЕсли;	
		
	КонецЦикла; 
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НовыеОперации", Операции.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Операции.Загрузить(ТекущийОбъект.ДополнительныеСвойства.НовыеОперации);
		
	Для каждого ОписаниеОперации Из Операции Цикл
		УстановитьСостояниеОперации(ОписаниеОперации);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// В режиме выбора вернем ссылку на элемент для обработки оповещения
	Если НЕ ЗавершениеРаботы И РежимВыбора Тогда
		РежимВыбора = Ложь;
		СтандартнаяОбработка = Ложь;
		Закрыть(Объект.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// При изменении организации даты запрета будут проверены при записи операций по билету
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ВыбранноеЗначение <> Объект.Организация Тогда
		ДатаЗапретаИзменения = Неопределено;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПокупкиПриИзменении(Элемент)
	
	ДатаПокупкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПокупкиПриИзменении(Элемент)
	
	УстановитьАгента();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	УстановитьАгента();
	
КонецПроцедуры

&НаКлиенте
Процедура АгентПриИзменении(Элемент)
	АгентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорАгентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорАгента) Тогда
		ПредлагатьНовыйДоговор = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорАгентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Агент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорАгентаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, ПредлагатьНовыйДоговор, СтандартнаяОбработка);
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыОпераций

&НаКлиенте
Процедура ОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.Дата = Макс(ЗначениеРабочейДаты, КонецДня(ДатаЗапретаИзменения)+1);
		ТекущиеДанные.Ссылка = Неопределено;
		ТекущиеДанные.Отменена = Ложь;
		УстановитьСостояниеОперации(ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Строка = Элемент.ТекущиеДанные;
		Строка.Дата = Макс(ЗначениеРабочейДаты, КонецДня(ДатаЗапретаИзменения)+1);
		Строка.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.Доплата");
		Строка.СтавкаНДС = УчетНДСКлиентСервер.ОсновнаяСтавкаНДСПоБилетам(НЕ Объект.НДСНеВыделять);
		УстановитьСостояниеОперации(Строка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НЕ ОтменаРедактирования Тогда
		РассчитатьИтогиБилета(ЭтотОбъект);
		Элементы.ОперацииОписаниеЗамены.Видимость = ЕстьОперацияЗамена;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "ОперацииОписаниеЗамены" Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Операции.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат")
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.БилетЗамена) Тогда
		
		// Открываем форму нового билета и передаем в нее значения заполнения
		ЗначенияЗаполнения = Новый Структура("
			|Организация,
			|ПодразделениеОрганизации,
			|ДатаПокупки,
			|Сотрудник,
			|Перевозчик,
			|Маршрут,
			|ДатаОтправления,
			|Агент,
			|ДоговорАгента,
			|СчетУчетаРасчетовСКонтрагентом,
			|ПорядокПокупкии,
			|ОписаниеОперации");
			
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Объект);
		
		ЗначенияЗаполнения.ДатаПокупки = ТекущиеДанные.Дата;
		
		СуммыБилета = Новый Структура();
		СуммыБилета.Вставить("Сумма",				0);
		СуммыБилета.Вставить("СуммаНДС",			0);
		СуммыБилета.Вставить("СуммаНеОблагаемаяНДС",0);
		
		РассчитатьСуммыБилетаБезУчетаТекущейОперации(ЭтотОбъект, СуммыБилета, ТекущиеДанные);
		
		ЗначенияЗаполнения.ОписаниеОперации = Новый Структура;
		ЗначенияЗаполнения.ОписаниеОперации.Вставить("ВидОперации", 		ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаПокупка"));
		ЗначенияЗаполнения.ОписаниеОперации.Вставить("Дата", 				ТекущиеДанные.Дата);
		ЗначенияЗаполнения.ОписаниеОперации.Вставить("БилетЗамена", 		Объект.Ссылка);
		ЗначенияЗаполнения.ОписаниеОперации.Вставить("Сумма", 				СуммыБилета.Сумма);
		ЗначенияЗаполнения.ОписаниеОперации.Вставить("СуммаНеОблагаемаяНДС",СуммыБилета.СуммаНеОблагаемаяНДС);
		ЗначенияЗаполнения.ОписаниеОперации.Вставить("СтавкаНДС", 			Объект.СтавкаНДС);
		ЗначенияЗаполнения.ОписаниеОперации.Вставить("СуммаНДС", 			СуммыБилета.СуммаНДС);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭтоБилетНаЗамену", Истина);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
					
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.БилетЗамена) Тогда
			
		// Открываем форму существующего билета	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.БилетЗамена);
					
	Иначе
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли; 
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборБилетаЗавершение", ЭтотОбъект, ВыбраннаяСтрока); 
	
	ОткрытьФорму("Справочник.Билеты.ФормаОбъекта",
		ПараметрыФормы,
		,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Операции.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		// Стандартная обработка - удаляем строку
		Возврат;
	КонецЕсли;	
	
	// Во всех остальных вариантах строку не удаляем
	Отказ = Истина;
	
	Если ТекущиеДанные.Дата <= ДатаЗапретаИзменения Тогда
		ТекстСообщения = НСтр("ru='Операция находится за границей даты запрета изменения данных.
		|Изменение невозможно.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	// Если операция уже создана, то строку не удаляем - только делаем пометку об отмене
	// (при записи билета операция будет помечена на удаление).
	// Если операция уже помечена на удаление, то снимаем пометку об отмене
	// (при записи билета операции будет вновь проведена).
	ТекущиеДанные.Отменена = НЕ ТекущиеДанные.Отменена;
	УстановитьСостояниеОперации(ТекущиеДанные);
	Модифицированность = Истина;
	
	РассчитатьИтогиБилета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПослеУдаления(Элемент)
	РассчитатьИтогиБилета(ЭтотОбъект);
	Элементы.ОперацииОписаниеЗамены.Видимость = ЕстьОперацияЗамена;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДатаОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <= ДатаЗапретаИзменения Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru='Изменение данных в выбранном периоде запрещено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииДатаОперацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВыбранноеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВДату(Текст);
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ВыбранноеЗначение <= ДатаЗапретаИзменения Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru='Изменение данных в выбранном периоде запрещено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВидОперацииПриИзменении(Элемент)
	СформироватьОписаниеЗамены(Элементы.Операции.ТекущиеДанные);  	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСуммаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	РассчитатьСуммыНДС(ТекущаяСтрока, Элемент.Имя, Объект.НДСНеВыделять);	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСуммаНеОблагаемаяНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	РассчитатьСуммыНДС(ТекущаяСтрока, Элемент.Имя, Объект.НДСНеВыделять);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСтавкаНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	РассчитатьСуммыНДС(ТекущаяСтрока, Элемент.Имя, Объект.НДСНеВыделять);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСуммаНДСПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Операции.ТекущиеДанные;
	ОбработатьИзменениеСуммыНДС(ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьДоплата(Команда)
	ДобавитьОперацию(ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.Доплата"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВозврат(Команда)
	ДобавитьОперацию(ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.Возврат"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗамена(Команда)
	ДобавитьОперацию(ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат"));
	ЕстьОперацияЗамена = Истина;
	Элементы.ОперацииОписаниеЗамены.Видимость = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗначениеРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	
	Если НЕ ЗначениеЗаполнено(ЗначениеРабочейДаты) Тогда
		ЗначениеРабочейДаты = ТекущаяДатаСеанса();
	КонецЕсли; 
	
	// При покупке билета у перевозчика агент == перевозчик
	Если Объект.ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.УПеревозчика И ЗначениеЗаполнено(Объект.Перевозчик) Тогда
		Объект.Агент = Объект.Перевозчик;
	КонецЕсли;	
	
	// Заполним договор у нового объекта
	ВидыДоговоровАгента = Справочники.Билеты.ВидыДоговоровАгента();
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорАгента) 
		И ЗначениеЗаполнено(Объект.Агент)
		И НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорАгента,
			Объект.Агент, Объект.Организация, ВидыДоговоровАгента);
	КонецЕсли;		
			
	ПредлагатьНовыйДоговор = ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(Объект.ДоговорАгента)
		И РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Агент);
				
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПрочитатьОперации();
	
	Если Операции.Количество() = 0 Тогда
		ДобавитьНачальнуюОперацию();
	КонецЕсли;	
	
	РассчитатьИтогиБилета(ЭтотОбъект);
	
	// Установим признак использования НДС
	Объект.НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.ДатаПокупки);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
		
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	ЭтоБилетНаЗамену = Форма.ЭтоБилетНаЗамену;
	
	Элементы.Организация.ТолькоПросмотр 			= ЭтоБилетНаЗамену;
	Элементы.ПорядокПокупки.ТолькоПросмотр 			= ЭтоБилетНаЗамену;
	Элементы.Агент.ТолькоПросмотр 					= ЭтоБилетНаЗамену;
	Элементы.ДоговорАгента.ТолькоПросмотр 			= ЭтоБилетНаЗамену;
	
	ПриобретенЧерезАгента = (Объект.ПорядокПокупки = ПредопределенноеЗначение("Перечисление.ПорядокПокупкиБилета.ЧерезАгента"));
			
	Элементы.Агент.Видимость 			= ПриобретенЧерезАгента;
		
	Элементы.ОперацииОписаниеЗамены.Видимость = Форма.ЕстьОперацияЗамена;
	
	// СКРЫТЬ НДС ПРИ ПРИМЕНЕНИИ УСН ДОХОДЫ
	ВидимостьНДС = НЕ Объект.НДСНеВыделять;
	
	Элементы.ОперацииСуммаНеОблагаемаяНДС.Видимость 
											= ВидимостьНДС;
	Элементы.ОперацииСтавкаНДС.Видимость 	= ВидимостьНДС;
	Элементы.ОперацииСуммаНДС.Видимость 	= ВидимостьНДС;
	Элементы.ИтогиВсегоНДС.Видимость		= ВидимостьНДС;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Объект.Организация, Объект.ДатаПокупки);
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Перевозчик
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Перевозчик");
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НДСНеВыделять", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Подразделение организации
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПодразделениеОрганизации");
		
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементУО.Отбор.Элементы, "ОтборПодразделениеОрганизации", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"ЭтоБилетНаЗамену", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ,
		"Объект.Организация", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// НАСТРОЙКА ТАБЛИЦЫ ОПЕРАЦИЙ
	
	// Вид операции = Покупка или ЗаменаПокупка (должна быть первой операцией)
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОперацииДатаОперации");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОперацииВидОперации");
	
	ВидыОпераций = Новый СписокЗначений;
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСБилетами.Покупка);
	ВидыОпераций.Добавить(Перечисления.ВидыОперацийСБилетами.ЗаменаПокупка);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Операции.ВидОперации", ВидСравненияКомпоновкиДанных.ВСписке, ВидыОпераций);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Вид операции = ЗаменаПокупка (должна быть первой операцией)	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОперацииВидОперации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Операции.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийСБилетами.ЗаменаПокупка);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Замена (вместо прежнего билета)'"));
		
	// Вид операции = ЗаменаВозврат
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОперацииВидОперации");	
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Операции.ВидОперации", ВидСравненияКомпоновкиДанных.Равно, Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Замена (на новый билет)'"));
			
	// Вид операции = Возврат
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОперацииНадписьШтраф");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Штраф:'"));
		
	// Вид операции <> Возврат
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОперацииШтраф");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОперацииНадписьШтраф");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Операции.ВидОперации", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.ВидыОперацийСБилетами.Возврат);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Все виды операций
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Операции");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Операции.Дата", ВидСравненияКомпоновкиДанных.Заполнено);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Операции.Дата", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ДатаЗапретаИзменения);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Операции");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Операции.Отменена", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЦвет);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоДатеЗапретаИзменения()
		
	ДоступностьЭлементовШапки = НЕ ЗначениеЗаполнено(ДатаЗапретаИзменения) 
									ИЛИ (ДатаЗапретаИзменения < НачалоДня(Объект.ДатаПокупки));
	
	ЭлементыШапки = Новый Массив;
	
	ЭлементыШапки.Добавить("Код");
	ЭлементыШапки.Добавить("ДатаПокупки");
	ЭлементыШапки.Добавить("Организация");
	ЭлементыШапки.Добавить("ПодразделениеОрганизации");
	ЭлементыШапки.Добавить("Сотрудник");
	ЭлементыШапки.Добавить("Перевозчик");
	ЭлементыШапки.Добавить("Агент");
	ЭлементыШапки.Добавить("ДоговорАгента");
	ЭлементыШапки.Добавить("СчетУчетаРасчетовСКонтрагентом");
	ЭлементыШапки.Добавить("ПорядокПокупки");
	
	Для каждого ЭлементШапки Из ЭлементыШапки Цикл
	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			ЭлементШапки,
			"ТолькоПросмотр",
			НЕ ДоступностьЭлементовШапки);
	
	КонецЦикла; 
		
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиБилета(Форма)
	
	Объект = Форма.Объект;
		
	Объект.Сумма = 0;
	Объект.СуммаНеОблагаемаяНДС = 0;
	Объект.СуммаНДС = 0;
	
	Форма.ЕстьОперацияЗамена = Ложь;

	Для Каждого ОписаниеОперации Из Форма.Операции Цикл
		
		УчестьОперациюВСуммеБилета(Объект, ОписаниеОперации);
		
		Форма.ЕстьОперацияЗамена = Форма.ЕстьОперацияЗамена 
			ИЛИ ОписаниеОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат")
			ИЛИ ОписаниеОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаПокупка");
						
	КонецЦикла;
		
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыБилетаБезУчетаТекущейОперации(Форма, Суммы, ТекущаяОперация)
			
	Для Каждого ОписаниеОперации Из Форма.Операции Цикл
		
		Если ОписаниеОперации = ТекущаяОперация Тогда
			Продолжить;
		КонецЕсли;	
		
		УчестьОперациюВСуммеБилета(Суммы, ОписаниеОперации);
								
	КонецЦикла;
		
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура РассчитатьНДС(Форма)
	
	Объект = Форма.Объект;
	
	НДСНеВыделять = Не УчетНДСБП.ВыделятьНДСприПоступленииТоваровУслуг(Объект.Организация, Объект.ДатаПокупки);
	
	Если Объект.НДСНеВыделять = НДСНеВыделять Тогда
		Возврат;	
	КонецЕсли;	
		
	Объект.НДСНеВыделять = НДСНеВыделять;
	
	Если Объект.НДСНеВыделять Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого ОписаниеОперации Из Форма.Операции Цикл
		Если НЕ ЗначениеЗаполнено(ОписаниеОперации.СтавкаНДС) Тогда
			ОписаниеОперации.СтавкаНДС = УчетНДСКлиентСервер.ОсновнаяСтавкаНДСПоБилетам();
		КонецЕсли;	
		РассчитатьСуммыНДС(ОписаниеОперации, "Сумма", Ложь);
	КонецЦикла;
	РассчитатьИтогиБилета(Форма);
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьНачальнуюОперацию(ОписаниеОперации = Неопределено)
	
	НачальнаяОперация = Операции.Добавить();
	
	Если ТипЗнч(ОписаниеОперации) = Тип("Структура") Тогда
		// заполняем первую операцию из данных, переданных в форму
		ЗаполнитьЗначенияСвойств(НачальнаяОперация, ОписаниеОперации);
		СформироватьОписаниеЗамены(НачальнаяОперация);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НачальнаяОперация, Объект); // суммы
	НачальнаяОперация.Дата 			= Объект.ДатаПокупки;
	НачальнаяОперация.ВидОперации 	= Перечисления.ВидыОперацийСБилетами.Покупка;
	
	Если НЕ ЗначениеЗаполнено(НачальнаяОперация.СтавкаНДС) Тогда
		НачальнаяОперация.СтавкаНДС = УчетНДСКлиентСервер.ОсновнаяСтавкаНДСПоБилетам(НЕ Объект.НДСНеВыделять);
	КонецЕсли;	
	
	РассчитатьСуммыНДС(НачальнаяОперация, "Сумма", Объект.НДСНеВыделять);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОперации()
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПрежниеОперации = Справочники.Билеты.ОперацииПоБилету(Объект.Ссылка);
		Для каждого ПрежняяОперация Из ПрежниеОперации Цикл
			ОписаниеОперации = Операции.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеОперации, ПрежняяОперация);
		    СформироватьОписаниеЗамены(ОписаниеОперации);
		КонецЦикла; 
	КонецЕсли;	
			
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УчестьОперациюВСуммеБилета(Суммы, ОписаниеОперации)

	Если ОписаниеОперации.Отменена Тогда
		Возврат;
	КонецЕсли;	
		
	// Возврат уменьшает стоимость билета
	Множитель = 1;
	Если ОписаниеОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.Возврат") 
		ИЛИ ОписаниеОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат") Тогда
		Множитель = -1;
	КонецЕсли; 

	Суммы.Сумма 				= Суммы.Сумма + Множитель * ОписаниеОперации.Сумма;
	Суммы.СуммаНеОблагаемаяНДС 	= Суммы.СуммаНеОблагаемаяНДС + Множитель * ОписаниеОперации.СуммаНеОблагаемаяНДС;
	Суммы.СуммаНДС 				= Суммы.СуммаНДС + Множитель * ОписаниеОперации.СуммаНДС;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеОбработчикиСобытий

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
		
	УстановитьФункциональныеОпцииФормы();
		
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
	КонецЕсли;
	
	РассчитатьНДС(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПокупкиПриИзмененииНаСервере()
	
	Если Операции.Количество() > 0 И Операции[0].ВидОперации = Перечисления.ВидыОперацийСБилетами.Покупка Тогда
		Операции[0].Дата = Объект.ДатаПокупки;
	КонецЕсли;	
	
	УстановитьФункциональныеОпцииФормы();
	
	РассчитатьНДС(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура АгентПриИзмененииНаСервере()
	
	Объект.ДоговорАгента = Неопределено;
	ВидыДоговоровАгента = Справочники.Билеты.ВидыДоговоровАгента();
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(Объект.ДоговорАгента,
		Объект.Агент, Объект.Организация, ВидыДоговоровАгента);
		
	ПредлагатьНовыйДоговор = ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(Объект.ДоговорАгента)
		И РаботаСДоговорамиКонтрагентовБП.ПредлагатьНовыйДоговор(Объект.Организация, Объект.Агент);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьАгента()
	
	// При покупке билета у перевозчика агент == перевозчик
	Если Объект.ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.УПеревозчика Тогда
		Объект.Агент = Объект.Перевозчик;
		АгентПриИзмененииНаСервере();
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыНДС(ДанныеФормы, ИмяЭлемента, НДСНеВыделять)
	
	Если НДСНеВыделять Тогда
		Возврат;
	КонецЕсли;	
	
	ОблагаемаяСумма = ДанныеФормы.Сумма - ДанныеФормы.СуммаНеОблагаемаяНДС;
	
	Если ОблагаемаяСумма = 0 Тогда
		ДанныеФормы.СуммаНДС = 0;
		Возврат;
	КонецЕсли;	
	
	Если ОблагаемаяСумма < 0 Тогда
		
		Если Найти(ИмяЭлемента, "СуммаНеОблагаемаяНДС") = 0 Тогда
			ДанныеФормы.СуммаНеОблагаемаяНДС = ДанныеФормы.Сумма;
		Иначе
			ДанныеФормы.Сумма = ДанныеФормы.СуммаНеОблагаемаяНДС;
		КонецЕсли;
		
		ДанныеФормы.СуммаНДС = 0;
		Возврат;
		
	КонецЕсли;	
		
	ДанныеФормы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
		ОблагаемаяСумма,
		Истина,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеФормы.СтавкаНДС, Ложь));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеСуммыНДС(ДанныеФормы)
	
	Если ДанныеФормы.СуммаНДС > ДанныеФормы.Сумма Тогда
		ДанныеФормы.Сумма = ДанныеФормы.СуммаНДС; 	
		ДанныеФормы.СуммаНеОблагаемаяНДС = 0; 	
		Возврат;
	КонецЕсли;	
	
	СтавкаНДСВПроцентах = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ДанныеФормы.СтавкаНДС, Ложь);
	
	Если СтавкаНДСВПроцентах = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОблагаемаяСумма = ДанныеФормы.СуммаНДС / СтавкаНДСВПроцентах * 100;
	
	ДанныеФормы.СуммаНеОблагаемаяНДС = ДанныеФормы.Сумма - ОблагаемаяСумма - ДанныеФормы.СуммаНДС; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперацию(ВидОперации)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	НоваяОперация = Операции.Добавить();
	
	НоваяОперация.Дата = Макс(ЗначениеРабочейДаты, КонецДня(ДатаЗапретаИзменения)+1);
	НоваяОперация.ВидОперации = ВидОперации;
		
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.Возврат") ИЛИ
		ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат") Тогда
		
		СуммыБилета = Новый Структура();
		СуммыБилета.Вставить("Сумма",				0);
		СуммыБилета.Вставить("СуммаНДС",			0);
		СуммыБилета.Вставить("СуммаНеОблагаемаяНДС",0);
		
		РассчитатьСуммыБилетаБезУчетаТекущейОперации(ЭтотОбъект, СуммыБилета, НоваяОперация);
		ЗаполнитьЗначенияСвойств(НоваяОперация, СуммыБилета);
		НоваяОперация.СтавкаНДС = Объект.СтавкаНДС;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(НоваяОперация.СтавкаНДС) Тогда
		НоваяОперация.СтавкаНДС = УчетНДСКлиентСервер.ОсновнаяСтавкаНДСПоБилетам(НЕ Объект.НДСНеВыделять);
		РассчитатьСуммыНДС(НоваяОперация, "Сумма", Объект.НДСНеВыделять);
	КонецЕсли; 
	
	СформироватьОписаниеЗамены(НоваяОперация);
	РассчитатьИтогиБилета(ЭтотОбъект);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеОперации(ОписаниеОперации)

	Если ОписаниеОперации.Отменена Тогда
		ОписаниеОперации.Состояние = 2;
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОперации.Ссылка) Тогда
		ОписаниеОперации.Состояние = 1;	
	Иначе
		ОписаниеОперации.Состояние = 0;		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьОписаниеЗамены(ОписаниеОперации)

	ОписаниеЗамены = "";
	
	Если ОписаниеОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаВозврат") Тогда
		
		Если ЗначениеЗаполнено(ОписаниеОперации.БилетЗамена) Тогда
			ОписаниеЗамены = НСтр("ru='%1'");
			ОписаниеЗамены = СтрШаблон(ОписаниеЗамены, ОписаниеОперации.БилетЗамена);
		Иначе
			ОписаниеЗамены = НСтр("ru='<Введите новый билет>'");
		КонецЕсли;
		
	ИначеЕсли ОписаниеОперации.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийСБилетами.ЗаменаПокупка") Тогда
		
		Если ЗначениеЗаполнено(ОписаниеОперации.БилетЗамена) Тогда
			ОписаниеЗамены = НСтр("ru='%1'");
			ОписаниеЗамены = СтрШаблон(ОписаниеЗамены, ОписаниеОперации.БилетЗамена);
		Иначе
			ОписаниеЗамены = НСтр("ru='<Не указан прежний билет>'");
		КонецЕсли;	
		
	КонецЕсли;	
	
	ОписаниеОперации.ОписаниеЗамены = ОписаниеЗамены;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборБилетаЗавершение(Билет, ИденитифкаторСтроки) Экспорт 
	
	Если ТипЗнч(Билет) <> Тип("СправочникСсылка.Билеты") Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Операции.НайтиПоИдентификатору(ИденитифкаторСтроки);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные.БилетЗамена = Билет;
	СформироватьОписаниеЗамены(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти
 
#КонецОбласти
