#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДатаПокупки = ОбщегоНазначения.РабочаяДатаПользователя();
	
	СвязанныеСвойства = Новый Структура("Дата, Агент, ПорядокПокупки, ДоговорАгента, Организация");
	ЗаполнитьЗначенияСвойств(СвязанныеСвойства, ЭтотОбъект);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		// Заполним зависимые свойства
		ЗаполнитьЗначенияСвойств(СвязанныеСвойства, ДанныеЗаполнения);
		ЗаполненыЗависимыеСвойства = Ложь;
		
		Если Не ЗначениеЗаполнено(СвязанныеСвойства.ПорядокПокупки) Тогда
			Если ЗначениеЗаполнено(СвязанныеСвойства.Агент) Тогда
				СвязанныеСвойства.ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.ЧерезАгента;
			Иначе
				СвязанныеСвойства.ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.УПеревозчика;
			КонецЕсли;
			ЗаполненыЗависимыеСвойства = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СвязанныеСвойства.ДоговорАгента)
			И ЗначениеЗаполнено(СвязанныеСвойства.Агент)
			И ЗначениеЗаполнено(СвязанныеСвойства.Организация)
			И СвязанныеСвойства.ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.ЧерезАгента Тогда
			
			РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
				СвязанныеСвойства.ДоговорАгента,
				СвязанныеСвойства.Агент,
				СвязанныеСвойства.Организация,
				Справочники.Билеты.ВидыДоговоровАгента());
				
			ЗаполненыЗависимыеСвойства = Истина;
		
		КонецЕсли;
		
		// Заполнение переданными данными
		ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ЭтотОбъект, ДанныеЗаполнения, Метаданные());
		Если ЗаполненыЗависимыеСвойства Тогда
			ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ЭтотОбъект, СвязанныеСвойства, Метаданные());
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьНДСНеВыделять(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.ЧерезАгента Тогда
				
		Если НДСНеВыделять Тогда	
			МассивНепроверяемыхРеквизитов.Добавить("Перевозчик");
		КонецЕсли;	
		
	ИначеЕсли ПорядокПокупки = Перечисления.ПорядокПокупкиБилета.УПеревозчика Тогда	
		
		МассивНепроверяемыхРеквизитов.Добавить("Агент");
		
	КонецЕсли; 
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Код = "";
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
		
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	Наименование = ПредставлениеБилета();
	
	// Заполним договор в том случае, если он скрыт на форме функциональной опцией
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
	
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("Организация", Организация);
		ПараметрыДоговора.Вставить("Контрагент", Агент);
		
		ДоговорАгента = РаботаСДоговорамиКонтрагентовБП.ДоговорКонтрагентаИзОбъекта(ПараметрыДоговора);
	
	КонецЕсли;

	ЭтоНовый = ЭтоНовый();
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
				
	Если НЕ ЭтоНовый Тогда
	
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка,
			Справочники.Билеты.РеквизитыВлияющиеНаОтражениеВУчете());
			
		ЗначенияРеквизитовНовые = Справочники.Билеты.РеквизитыВлияющиеНаОтражениеВУчете();	
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовНовые, ЭтотОбъект); 
		
		ДополнительныеСвойства.Вставить("ИзмененыРеквизитыБилета", 
			НЕ ОбщегоНазначения.ДанныеСовпадают(ЗначенияРеквизитов, ЗначенияРеквизитовНовые));	
			
	КонецЕсли;		
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоНовый = ДополнительныеСвойства.ЭтоНовый;
	
	Если НЕ ЭтоНовый Тогда
		// Блокируем операции по билету
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ОперацияСБилетом");
		ЭлементБлокировки.УстановитьЗначение("Билет", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
	КонецЕсли; 
	
	ПрежниеОперации = Неопределено;
	ИзмененыРеквизитыБилета = НЕ ЭтоНовый И ДополнительныеСвойства.ИзмененыРеквизитыБилета;
	
	// При редактировании билета из формы сюда передается таблица операций -
	// см. ПередЗаписьюНаСервере() в форме билета 
	ЕстьНовыеОперации = ДополнительныеСвойства.Свойство("НовыеОперации");	
		
	Если НЕ ЕстьНовыеОперации И НЕ ИзмененыРеквизитыБилета Тогда
		// Не нужно записывать операции
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЭтоНовый Тогда
		ПрежниеОперации = Справочники.Билеты.ОперацииПоБилету(Ссылка, Ложь);
	КонецЕсли;	
	
	РеквизитыОперацииНовые = Документы.ОперацияСБилетом.РеквизитыВлияющиеНаОтражениеВУчете();
	
	Если ИзмененыРеквизитыБилета Тогда
		// Очистим счета учета расчетов - будут перезаполнены при записи операций
		РеквизитыОперацииНовые.Вставить("СчетУчетаРасчетовСКонтрагентом");
		РеквизитыОперацииНовые.Вставить("СчетУчетаРасчетовПоАвансам");
	КонецЕсли; 
	
	Если ЕстьНовыеОперации Тогда	
		
		НовыеОперации = ДополнительныеСвойства.НовыеОперации;
		ЕстьПрежниеОперации = (ПрежниеОперации <> Неопределено И ПрежниеОперации.Количество() > 0);
				
		Если ЕстьПрежниеОперации Тогда
			
			НовыеОперации.Колонки.Добавить("ПрежняяОперация"); // ссылка на строку таблицы прежних операций	
			НовыеОперации.Индексы.Добавить("Ссылка");
			
			// Если не все операции по билету есть в таблице операций на форме, 
			// то, значит, "лишние" операции были записаны за время интерактивного редактирования билета.
			// Также убедимся, что прежние операции не были изменены программно за время редактирования формы билета
			// 	- для этого при чтении билета были сохранены версии документов операций
			// 	- а здесь проверим, изменились ли версии этих данных.
			// Если данные изменены, то вызываем ошибку - считаем, что билет изменен.	
			Для каждого ПрежняяОперация Из ПрежниеОперации Цикл
				ОписаниеОперации = НовыеОперации.Найти(ПрежняяОперация.Ссылка, "Ссылка");
				Если ОписаниеОперации = Неопределено ИЛИ ОписаниеОперации.ВерсияДанных <> ПрежняяОперация.ВерсияДанных Тогда
					ТекстСообщения = НСтр("ru='За время редактирования данные были изменены в другом сеансе.
						|Необходимо перечитать данные билета'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	
				ОписаниеОперации.ПрежняяОперация = ПрежняяОперация;
			КонецЦикла;
			
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(РеквизитыОперацииНовые, ЭтотОбъект);
		РеквизитыОперацииНовые.Билет = Ссылка;
						
		РеквизитыОперации = Документы.ОперацияСБилетом.РеквизитыВлияющиеНаОтражениеВУчете();
		
		Для каждого ОписаниеОперации Из НовыеОперации Цикл
			
			// Не создаем новые операции по билету, если он помечен на удаление
			Если ПометкаУдаления И НЕ ЗначениеЗаполнено(ОписаниеОперации.Ссылка) Тогда
				ОписаниеОперации.Отменена = Истина;
				Продолжить;
			КонецЕсли;	
			
			ЗаполнитьЗначенияСвойств(РеквизитыОперацииНовые, ОписаниеОперации);
			
			// Если билет не помечен на удаление, и операция не отменена, то операция должна быть проведена.
			// В ином случае операция помечается на удаление.
			РеквизитыОперацииНовые.Проведен = НЕ (ПометкаУдаления ИЛИ ОписаниеОперации.Отменена);
			РеквизитыОперацииНовые.ПометкаУдаления = НЕ РеквизитыОперацииНовые.Проведен;
			
			Если ИзмененыРеквизитыБилета ИЛИ НЕ ЗначениеЗаполнено(ОписаниеОперации.Ссылка) Тогда
				ЗаписатьОперацию(ОписаниеОперации, РеквизитыОперацииНовые);
			Иначе
				ЗаполнитьЗначенияСвойств(РеквизитыОперации, ОписаниеОперации.ПрежняяОперация);
				Если НЕ ОбщегоНазначения.ДанныеСовпадают(РеквизитыОперации, РеквизитыОперацииНовые) Тогда   
					// изменены реквизиты операции
					ЗаписатьОперацию(ОписаниеОперации, РеквизитыОперацииНовые);
				КонецЕсли;
			КонецЕсли;	
						
		КонецЦикла;
				
	Иначе
		// изменены реквизиты билета
		Для каждого ПрежняяОперация Из ПрежниеОперации Цикл
			ЗаполнитьЗначенияСвойств(РеквизитыОперацииНовые, ПрежняяОперация);
			ЗаполнитьЗначенияСвойств(РеквизитыОперацииНовые, ЭтотОбъект, "Организация, ПодразделениеОрганизации");
			РеквизитыОперацииНовые.Проведен = (НЕ ПометкаУдаления);
			РеквизитыОперацииНовые.ПометкаУдаления = ПометкаУдаления;
			ЗаписатьОперацию(ПрежняяОперация, РеквизитыОперацииНовые);
		КонецЦикла;
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает представление билета
// 
// Возвращаемое значение:
//   - строка
//
// Представление билета включает следующие поля (если заполнены, через запятую):
//	- Дата отправления
//	- Имя сотрудника (в формате Петров П.П.)
//	- Маршрут
//	- Номер билета (код)
Функция ПредставлениеБилета()

	// Представление билета включает следующие поля (если заполнены, через запятую):
	//	- Дата отправления
	//	- Имя сотрудника (в формате Петров П.П.)
	//	- Маршрут
	//	- Номер билета (код)
	ЧастиПредставления = Новый Массив;
	
	ЧастиПредставления.Добавить(Формат(ДатаОтправления, "ДЛФ=D"));
		
	Если ЗначениеЗаполнено(Сотрудник.ФИО) Тогда
		ЧастиПредставления.Добавить(ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Сотрудник.ФИО));
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(Маршрут) Тогда
		ЧастиПредставления.Добавить(Маршрут);
	КонецЕсли; 
	
	ЧастиПредставления.Добавить(Код);
	
	Представление = СтрСоединить(ЧастиПредставления, " ");
		
	Возврат Представление;

КонецФункции

// Заполняет значением по умолчанию реквизит НДСНеВыделять, если он не передан явно.
// См. также ЗаполнениеДокументов.Заполнить
//
Процедура ЗаполнитьНДСНеВыделять(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ДанныеЗаполнения.Свойство("НДСНеВыделять") Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ДатаПокупки) Тогда
		Возврат;
	КонецЕсли;
	
	НДСНеВыделять = УчетнаяПолитика.ПрименяетсяУСНДоходы(Организация, ДатаПокупки);
	
КонецПроцедуры

Функция ЗаписатьОперацию(ОписаниеОперации, ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(ОписаниеОперации.Ссылка) Тогда
		ОперацияСБилетом = ОписаниеОперации.Ссылка.ПолучитьОбъект();
	Иначе
		ОперацияСБилетом = Документы.ОперацияСБилетом.СоздатьДокумент();
	КонецЕсли;	
	
	ОперацияПроведена = ОперацияСБилетом.Проведен; // запомним значение, считанное из ИБ
	
	ЗаполнитьЗначенияСвойств(ОперацияСБилетом, ДанныеЗаполнения);
	ОперацияСБилетом.БилетЗамена = ОписаниеОперации.БилетЗамена;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	Если ОперацияСБилетом.ПометкаУдаления Тогда
		РежимЗаписи = ?(ОперацияПроведена, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
	КонецЕсли;
		
	Попытка
		ОперацияСБилетом.Записать(РежимЗаписи);
	Исключение
		
		Если ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаВозврат Тогда
			ТекстСообщения = НСтр("ru='При записи операции ""Замена (на новый билет)"" от %1 произошла ошибка: %4'");
			ТекстСообщения = СтрШаблон(
				ТекстСообщения,
				Формат(ОписаниеОперации.Дата, "ДЛФ=D"),
				ОписаниеОшибки());
		ИначеЕсли ОписаниеОперации.ВидОперации = Перечисления.ВидыОперацийСБилетами.ЗаменаПокупка Тогда		
			ТекстСообщения = НСтр("ru='При записи операции ""Замена (вместо прежнего билета)"" от %1 на сумму %2 произошла ошибка: %3'");
			ТекстСообщения = СтрШаблон(
				ТекстСообщения,
				Формат(ОписаниеОперации.Дата, "ДЛФ=D"),
				ОписаниеОперации.Сумма,
				ОписаниеОшибки());
		Иначе 	
			ТекстСообщения = НСтр("ru='При записи операции ""%1"" от %2 на сумму %3 произошла ошибка: %4'");
			ТекстСообщения = СтрШаблон(
				ТекстСообщения,
				ОписаниеОперации.ВидОперации,
				Формат(ОписаниеОперации.Дата, "ДЛФ=D"),
				ОписаниеОперации.Сумма,
				ОписаниеОшибки());
		КонецЕсли;	
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	ОписаниеОперации.Ссылка 		= ОперацияСБилетом.Ссылка;
	ОписаниеОперации.Отменена 		= ОперацияСБилетом.ПометкаУдаления;
	ОписаниеОперации.ВерсияДанных 	= ОперацияСБилетом.ВерсияДанных;

КонецФункции

#КонецОбласти

#КонецЕсли
