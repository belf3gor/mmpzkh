#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
Функция ПолучитьСтатьюДДСПоВидуОперации(ВидОперации) Экспорт
	
	ПредопределеннаяСтатья = ПредопределеннаяСтатьяДДСПоКонтексту(ВидОперации);
	Если ПредопределеннаяСтатья = Неопределено Тогда
		Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПредопределенныйЭлементПоИмени(ПредопределеннаяСтатья);
	
КонецФункции

Функция ПредопределеннаяСтатьяДДСПоКонтексту(КонтекстОперации) Экспорт
	Перем ПредопределеннаяСтатья;
	
	Если ТипЗнч(КонтекстОперации) = Тип("Строка") Тогда
		Если КонтекстОперации = "КомиссияБанка" Тогда
			ПредопределеннаяСтатья = "УслугиБанков";
		ИначеЕсли КонтекстОперации = "НалогНаПрибыль" Тогда
			ПредопределеннаяСтатья = "НалогНаПрибыль";
		ИначеЕсли КонтекстОперации = "УплатаПроцентов" Тогда
			ПредопределеннаяСтатья = "ВозвратПроцентовЗаймаПолученного";
		ИначеЕсли КонтекстОперации = "ПогашениеДолга" Тогда
			ПредопределеннаяСтатья = "ВозвратЗаймаПолученного";
		КонецЕсли;
	ИначеЕсли Типзнч(КонтекстОперации) = Тип("ПеречислениеСсылка.ВидыОперацийОтчетОРозничныхПродажах") Тогда
		ПредопределеннаяСтатья = "РозничнаяВыручка";
	Иначе
		СтатьиДДС = СоответствиеСтатьейДДСОперациям(КонтекстОперации);
		ПредопределеннаяСтатья = СтатьиДДС[КонтекстОперации];
	КонецЕсли;
	
	Возврат ПредопределеннаяСтатья;
	
КонецФункции

// Включает или выключает в информационной базе учет по статьям движения дененжных средств
//
// Параметры:
//  Включить - Булево - определяет действие для установки.
//
Процедура УстановитьУчетПоСтатьямДДС(Включить) Экспорт
	
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
	Если Включить <> (ПараметрыУчета.ВестиУчетПоСтатьямДДС ИЛИ Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить()) Тогда
		Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Установить(Включить);
		ПараметрыУчета.ВестиУчетПоСтатьямДДС = Включить;
		ОбщегоНазначенияБП.ПрименитьПараметрыУчета(ПараметрыУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыИСпользоватьСтатьиДДС() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиДвиженияДенежныхСредств.Ссылка
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	СтатьиДвиженияДенежныхСредств.ПометкаУдаления = ЛОЖЬ
	|	И НЕ(СтатьиДвиженияДенежныхСредств.ИмяПредопределенныхДанных = ""РозничнаяВыручка""
	|				ИЛИ СтатьиДвиженияДенежныхСредств.ИмяПредопределенныхДанных = ""ЛичныеСредстваПредпринимателя"")";
	
	Если Запрос.Выполнить().Пустой() Тогда
		СоздатьПредопределенныеЭлементыСтатьиДДС();
	Иначе
		ОбработатьСправочникСоздатьПредопределенныеЭлементы();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыИП() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить()
		И Константы.ВестиУчетИндивидуальногоПредпринимателя.Получить()) Тогда
		Возврат;
	КонецЕсли;
		
	Если ПредопределенныйЭлементПоИмени("ЛичныеСредстваПредпринимателя") = Неопределено Тогда
		
		ПредопределенноеЗначение = ТаблицаПредопределенныхЗначений().Найти("ЛичныеСредстваПредпринимателя", "ИмяПредопределенныхДанных");
		СтатьяДДС	= Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СтатьяДДС, ПредопределенноеЗначение);
		СтатьяДДС.Записать();
		
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыРозничнаяТорговля() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить()
		И Константы.ВедетсяРозничнаяТорговля.Получить()) Тогда
		Возврат;
	КонецЕсли;
		
	Если ПредопределенныйЭлементПоИмени("РозничнаяВыручка") = Неопределено Тогда
		
		ПредопределенноеЗначение = ТаблицаПредопределенныхЗначений().Найти("РозничнаяВыручка", "ИмяПредопределенныхДанных");
		СтатьяДДС	= Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СтатьяДДС, ПредопределенноеЗначение);
		СтатьяДДС.Записать();
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыФакторинг(ВыполняетсяОбработчикОбновления = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить()
		И Константы.ИспользоватьФакторинг.Получить()) Тогда
		Возврат;
	КонецЕсли;
		
	Если ПредопределенныйЭлементПоИмени("ОплатаОтФакторинговойКомпании") = Неопределено Тогда
		
		ПредопределенноеЗначение = ТаблицаПредопределенныхЗначений().Найти("ОплатаОтФакторинговойКомпании", "ИмяПредопределенныхДанных");
		СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СтатьяДДС, ПредопределенноеЗначение);
		// Запись может выполнятся либо в обработчике обновления при включении факторинга,
		// либо при интерактивном включении факторинга в функциональности.
		// Если элемент создается обработчиком обновления, то бизнес-логика должна быть отключена.
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтатьяДДС, Истина, НЕ ВыполняетсяОбработчикОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУстановитьПредопределенныеЭлементыДивиденды() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.ВестиУчетЮридическогоЛица.Получить() Тогда
		Возврат;
	КонецЕсли;
		
	Если ПредопределенныйЭлементПоИмени("ВыплатаДивидендов") = Неопределено Тогда
		
		ПредопределенноеЗначение = ТаблицаПредопределенныхЗначений().Найти("ВыплатаДивидендов", "ИмяПредопределенныхДанных");
		СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СтатьяДДС, ПредопределенноеЗначение);
		// Запись может выполнятся либо в обработчике обновления,
		// либо при интерактивном вводе данных в помощнике учета дивидендов.
		// Если элемент создается обработчиком обновления, то бизнес-логика должна быть отключена.
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтатьяДДС, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

//По виду ДДС устанавливает соответствие предопределенным статьям
Процедура ОбработатьСправочникСоздатьПредопределенныеЭлементы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.ИспользоватьСтатьиДвиженияДенежныхСредств.Получить() Тогда
		Возврат;
	КонецЕсли;

	ПредопределенныеСтатьи = ПредопределенныеСтатьиКОбновлению();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДвиженияДенежныхСредств
	|ПОМЕСТИТЬ УникальныеВидыДС
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств В(&ВидыДДС)
	|	И СтатьиДвиженияДенежныхСредств.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(СтатьиДвиженияДенежныхСредств.Ссылка) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДвиженияДенежныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиДвиженияДенежныхСредств.Ссылка,
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УникальныеВидыДС КАК УникальныеВидыДС
	|		ПО СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств = УникальныеВидыДС.ВидДвиженияДенежныхСредств
	|ГДЕ
	|	СтатьиДвиженияДенежныхСредств.ПометкаУдаления = ЛОЖЬ
	|	И СтатьиДвиженияДенежныхСредств.Предопределенный = ЛОЖЬ";
	Запрос.УстановитьПараметр("ВидыДДС", ПредопределенныеСтатьи.ВыгрузитьЗначения());
	СтатьяКобновлению = Запрос.Выполнить().Выбрать();
	
	Пока СтатьяКобновлению.Следующий() Цикл
		ЭлементСпискаСтатей = ПредопределенныеСтатьи.НайтиПоЗначению(СтатьяКобновлению.ВидДвиженияДенежныхСредств);
		ИмяПредопределеннойСтатьи = ЭлементСпискаСтатей.Представление;
		Если ПредопределенныйЭлементПоИмени(ИмяПредопределеннойСтатьи) = Неопределено Тогда
			ЭлементСправочника = СтатьяКобновлению.Ссылка.ПолучитьОбъект();
			ЭлементСправочника.ИмяПредопределенныхДанных = ИмяПредопределеннойСтатьи;
			ЭлементСправочника.Записать();
		КонецЕсли;
	КонецЦикла;
	
	СоздатьУстановитьПредопределенныеЭлементыФакторинг();
	СоздатьУстановитьПредопределенныеЭлементыДивиденды();
	
КонецПроцедуры

Процедура ОбработатьСтатьиДДСВНастройкахКлиентБанка() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбменСБанком", "НастройкиЗагрузки", Неопределено);;
	
	Если Настройки <> Неопределено И Настройки.Свойство("СтатьиДвиженияДенежныхСредств") Тогда
		СтатьяПоступление = Неопределено;
		СтатьяСписание = Неопределено;
		
		Если Настройки.СтатьиДвиженияДенежныхСредств.Свойство("Поступило", СтатьяПоступление)
			И ЗначениеЗаполнено(СтатьяПоступление) Тогда
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяПоступление, "ВидДвиженияДенежныхСредств, ПометкаУдаления");
			Если НЕ РеквизитыОбъекта.ПометкаУдаления
				И РеквизитыОбъекта.ВидДвиженияДенежныхСредств = Перечисления.ВидыДвиженийДенежныхСредств.СредстваПолученныеОтПокупателейИЗаказчиков 
				И НЕ ЗначениеЗаполнено(ПредопределенныйЭлементПоимени("ОплатаОтПокупателя")) Тогда
				
				СтатьяОплатаОтПокупателя = СтатьяПоступление.ПолучитьОбъект();
				СтатьяОплатаОтПокупателя.ИмяПредопределенныхДанных = "ОплатаОтПокупателя";
				СтатьяОплатаОтПокупателя.Записать();	
			КонецЕсли;
		КонецЕсли;

		Если Настройки.СтатьиДвиженияДенежныхСредств.Свойство("Списано", СтатьяСписание)
			И ЗначениеЗаполнено(СтатьяСписание) Тогда
			
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяСписание, "ВидДвиженияДенежныхСредств, ПометкаУдаления");
			Если НЕ РеквизитыОбъекта.ПометкаУдаления
				И РеквизитыОбъекта.ВидДвиженияДенежныхСредств = Перечисления.ВидыДвиженийДенежныхСредств.ОплатаОборотныхАктивов 
				И НЕ ЗначениеЗаполнено(ПредопределенныйЭлементПоимени("ОплатаПоставщику")) Тогда
				
				СтатьяОплатаПоставщику = СтатьяСписание.ПолучитьОбъект();
				СтатьяОплатаПоставщику.ИмяПредопределенныхДанных = "ОплатаПоставщику";
				СтатьяОплатаПоставщику.Записать();	
			КонецЕсли;
		КонецЕсли;
		
		Настройки.Удалить("СтатьиДвиженияДенежныхСредств");
		Обработки.КлиентБанк.ЗаписатьНастройкиЗагрузки(Настройки);
	КонецЕсли;

КонецПроцедуры

//Перевоначальное заполнение справочника
Процедура СоздатьПредопределенныеЭлементыСтатьиДДС() Экспорт
	
	ПредопределенныеЭлементы = ТаблицаПредопределенныхЗначений();
	Для Каждого Элемент из ПредопределенныеЭлементы Цикл
		Если НЕ Элемент.Доступность 
			ИЛИ ПредопределенныйЭлементПоимени(Элемент.ИмяПредопределенныхДанных) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СоздатьЭлемент();
		СтатьяДДС.Наименование               = Элемент.Наименование;
		СтатьяДДС.ВидДвиженияДенежныхСредств = Элемент.ВидДвиженияДенежныхСредств;
		СтатьяДДС.ИмяПредопределенныхДанных  = Элемент.ИмяПредопределенныхДанных;
		СтатьяДДС.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Возвращает таблицу кодов видов операций для указанной версии классификатора.
//
// Параметры:
//	ВерсияКлассификатора - Строка - Может принимать значения:
//		* "2015" - Версия кодов по Указанию ЦБ от 9 июля 2015 г. N 3719-У;
//		* "2017" - Версия кодов по Указанию ЦБ от 13 января 2017 г. N 4263-У.
//
Функция ДанныеВыбораВидаОперацииНФО(ВерсияКлассификатора) Экспорт

	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ЭтоГруппа",    Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Код",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(5)));
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)));
	
	Макет = Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьМакет("ВидыОперацийНФО");
	ОбластьВидыОпераций = Макет.ПолучитьОбласть("Классификатор" + ВерсияКлассификатора);
	ТекущийРодитель = Результат;
	Для НомерСтроки = 1 По ОбластьВидыОпераций.ВысотаТаблицы Цикл
		
		Код = ОбластьВидыОпераций.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		Наименование = ОбластьВидыОпераций.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		Если ПустаяСтрока(Код) И ПустаяСтрока(Наименование) Тогда
			ТекущийРодитель = Результат;
			Продолжить;
		КонецЕсли;
		
		ЭтоГруппа = ПустаяСтрока(Код);
		Если ЭтоГруппа Тогда
			НоваяСтрока = Результат.Строки.Добавить();
		Иначе
			НоваяСтрока = ТекущийРодитель.Строки.Добавить();
		КонецЕсли;
		НоваяСтрока.Код          = Код;
		НоваяСтрока.Наименование = Наименование;
		НоваяСтрока.ЭтоГруппа    = ЭтоГруппа;
		Если ЭтоГруппа Тогда
			ТекущийРодитель = НоваяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ТаблицаПредопределенныхЗначений() Экспорт
	
	ТаблицаИмен = Новый ТаблицаЗначений();
	ТаблицаИмен.Колонки.Добавить("ИмяПредопределенныхДанных",  Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("Наименование",               Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("ПредставлениеОперации",  Новый ОписаниеТипов("Строка"));
	ТаблицаИмен.Колонки.Добавить("ВидДвиженияДенежныхСредств", Новый ОписаниеТипов("Перечислениессылка.ВидыДвиженийДенежныхСредств"));
	ТаблицаИмен.Колонки.Добавить("Доступность",                Новый ОписаниеТипов("Булево"));
	
	ВидДДС = Перечисления.ВидыДвиженийДенежныхСредств;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВозвратЗаймаВыданного";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПоступленияОтПогашенияЗаймовПродажиДолговыхЦенныхБумаг;
	Строка.Наименование               = "Поступления от погашения займов";
	Строка.ПредставлениеОперации      = "Возврат выданных займов";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВозвратОтПоставщика";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПрочиеПоступленияПоТекущейДеятельности;
	Строка.Наименование               = "Возврат от поставщиков";
	Строка.ПредставлениеОперации      = "Возврат от поставщика";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВозвратОтПодотчетногоЛица";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПрочиеПоступленияПоТекущейДеятельности;
	Строка.Наименование               = "Возврат подотчетных сумм";
	Строка.ПредставлениеОперации      = "Возврат подотчетных сумм";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВозвратПокупателю";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПрочиеРасходыПоТекущейДеятельности;
	Строка.Наименование               = "Возврат покупателям";
	Строка.ПредставлениеОперации      = "Возврат покупателю";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ПеречислениеПодотчетномуЛицу";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ОплатаОборотныхАктивов;
	Строка.Наименование               = "Выдача подотчетных сумм";
	Строка.ПредставлениеОперации      = "Выдача подотчетных сумм";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ОплатаТруда";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ОплатаТруда;
	Строка.Наименование               = "Выплата заработной платы";
	Строка.ПредставлениеОперации      = "Выплата заработной платы";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВозвратПроцентовЗаймаПолученного";
	Строка.Наименование               = "Выплата процентов по кредитам и займам";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ВыплатаПроцентовПоДолговымОбязательствам;
	Строка.ПредставлениеОперации      = "Выплата процентов по кредитам и займам";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "УслугиБанков";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПрочиеРасходыПоТекущейДеятельности;
	Строка.Наименование               = "Расходы на услуги банков";
	Строка.ПредставлениеОперации      = "Оплата комиссии банка";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ОплатаПоставщику";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ОплатаОборотныхАктивов;
	Строка.Наименование               = "Оплата поставщикам (подрядчикам)";
	Строка.ПредставлениеОперации      = "Оплата поставщику (подрядчику)";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ЛичныеСредстваПредпринимателя";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПустаяСсылка();
	Строка.Наименование               = "Личные средства предпринимателя";
	Строка.ПредставлениеОперации      = "Перевод личных средств предпринимателя";
	Строка.Доступность                = ПолучитьФункциональнуюОпцию("ВестиУчетИндивидуальногоПредпринимателя");
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВнутреннееДвижениеДС";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПустаяСсылка();
	Строка.Наименование               = "Внутреннее перемещение денежных средств";
	Строка.ПредставлениеОперации      = "Перемещение денежных средств внутри организации";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВозвратЗаймаПолученного";
	Строка.Наименование               = "Погашение кредитов и займов";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПогашениеДолговыйЦенныхБумагВозвратКредитовИЗаймов;
	Строка.ПредставлениеОперации      = "Погашение кредитов и займов";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ПолучениеЗайма";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПоступленияОтЗаймовИКредитовПредоставленныхДругимиОрганизациями;
	Строка.Наименование               = "Получение кредитов и займов";
	Строка.ПредставлениеОперации      = "Получение кредитов и займов";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ОплатаОтПокупателя";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.СредстваПолученныеОтПокупателейИЗаказчиков;
	Строка.Наименование               = "Оплата от покупателей";
	Строка.ПредставлениеОперации      = "Получение оплаты от покупателя";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "РозничнаяВыручка";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.СредстваПолученныеОтПокупателейИЗаказчиков;
	Строка.Наименование               = "Розничная выручка";
	Строка.ПредставлениеОперации      = "Получение розничной выручки";
	Строка.Доступность                = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВыдачаЗайма";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПриобретениеДолговыхЦенныхБумагПредоставлениеЗаймов;
	Строка.Наименование               = "Предоставление займов";
	Строка.ПредставлениеОперации      = "Предоставление займов";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ПрочиеПоступления";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПрочиеПоступленияПоТекущейДеятельности;
	Строка.Наименование               = "Прочие поступления";
	Строка.ПредставлениеОперации      = "Прочие операции поступления";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ПрочиеРасходы";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПрочиеРасходыПоТекущейДеятельности;
	Строка.Наименование               = "Прочие расходы";
	Строка.ПредставлениеОперации      = "Прочие расходные операции";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "НалогНаПрибыль";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.НалогНаПрибыль;
	Строка.Наименование               = "Налог на прибыль";
	Строка.ПредставлениеОперации      = "Уплата налога на прибыль";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ПрочиеНалоги";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ПрочиеРасходыПоТекущейДеятельности;
	Строка.Наименование               = "Прочие налоги и сборы";
	Строка.ПредставлениеОперации      = "Уплата налогов и сборов, кроме налога на прибыль";
	Строка.Доступность                = Истина;
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ОплатаОтФакторинговойКомпании";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.СредстваПолученныеОтПокупателейИЗаказчиков;
	Строка.Наименование               = "Оплата от факторинговой компании";
	Строка.ПредставлениеОперации      = "Получение оплаты от факторинговой компании";
	Строка.Доступность                = ПолучитьФункциональнуюОпцию("ИспользоватьФакторинг");
	
	Строка                            = ТаблицаИмен.Добавить();
	Строка.ИмяПредопределенныхДанных  = "ВыплатаДивидендов";
	Строка.Наименование               = "Выплата дивидендов";
	Строка.ВидДвиженияДенежныхСредств = ВидДДС.ВыплатаДивидендов;
	Строка.ПредставлениеОперации      = "Выплата дивидендов";
	Строка.Доступность                = ПолучитьФункциональнуюОпцию("ВестиУчетЮридическогоЛица");
	
	Возврат ТаблицаИмен;
	
КонецФункции	

Функция ПредопределенныеСтатьиКОбновлению()
	
	Статьи = Новый СписокЗначений;
	
	Статьи.Добавить(Перечисления.ВидыДвиженийДенежныхСредств.ОплатаТруда,                                        "ОплатаТруда");
	Статьи.Добавить(Перечисления.ВидыДвиженийДенежныхСредств.НалогНаПрибыль,                                     "НалогНаПрибыль");
	Статьи.Добавить(Перечисления.ВидыДвиженийДенежныхСредств.ПустаяСсылка(),                                     "ВнутреннееДвижениеДС");
	Статьи.Добавить(Перечисления.ВидыДвиженийДенежныхСредств.ПрочиеРасходыПоТекущейДеятельности,                 "ПрочиеРасходы");
	Статьи.Добавить(Перечисления.ВидыДвиженийДенежныхСредств.ВыплатаПроцентовПоДолговымОбязательствам,           "ВозвратПроцентовЗаймаПолученного");
	Статьи.Добавить(Перечисления.ВидыДвиженийДенежныхСредств.ПогашениеДолговыйЦенныхБумагВозвратКредитовИЗаймов, "ВозвратЗаймаПолученного");
	
	Возврат Статьи;
КонецФункции

// Функция получения предопределнного элемента по имени
// Используется для исключения влияния повторного использования в стандартном механизме
Функция ПредопределенныйЭлементПоимени(ИмяПредопределенногоЭлемента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиДвиженияДенежныхСредств.Ссылка
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|ГДЕ
	|	СтатьиДвиженияДенежныхСредств.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенногоЭлемента);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Результат.Выгрузить()[0].Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция СоответствиеСтатьейДДСОперациям(ВидОперации) Экспорт
	
	Статьи = Новый Соответствие;
	
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств") Тогда
		
		Поступление = Перечисления.ВидыОперацийПоступлениеДенежныхСредств;
		Статьи.Вставить(Поступление.Инкассация,                            "ВнутреннееДвижениеДС");
		Статьи.Вставить(Поступление.ВзносНаличными,                        "ВнутреннееДвижениеДС");
		Статьи.Вставить(Поступление.ПереводСДругогоСчета,                  "ВнутреннееДвижениеДС");
		Статьи.Вставить(Поступление.ВозвратЗаймаКонтрагентом,              "ВозвратЗаймаВыданного");
		Статьи.Вставить(Поступление.ВозвратЗаймаРаботником,                "ВозвратЗаймаВыданного");
		Статьи.Вставить(Поступление.ВозвратОтПоставщика,                   "ВозвратОтПоставщика");
		Статьи.Вставить(Поступление.ЛичныеСредстваПредпринимателя,         "ЛичныеСредстваПредпринимателя");
		Статьи.Вставить(Поступление.ОплатаПокупателя,                      "ОплатаОтПокупателя");
		Статьи.Вставить(Поступление.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам, "ОплатаОтПокупателя");
		Статьи.Вставить(Поступление.ПолучениеЗайма,                        "ПолучениеЗайма");
		Статьи.Вставить(Поступление.ПолучениеКредита,                      "ПолучениеЗайма");
		Статьи.Вставить(Поступление.ПоступленияОтПродажиИностраннойВалюты, "ПрочиеПоступления");
		Статьи.Вставить(Поступление.ПриобретениеИностраннойВалюты,         "ПрочиеПоступления");
		Статьи.Вставить(Поступление.ПрочееПоступление,                     "ПрочиеПоступления");
		Статьи.Вставить(Поступление.ПрочиеРасчетыСКонтрагентами,           "ПрочиеПоступления");
		Статьи.Вставить(Поступление.ОплатаОтФакторинговойКомпании,         "ОплатаОтФакторинговойКомпании");
		
	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств") Тогда
		
		Списание = Перечисления.ВидыОперацийСписаниеДенежныхСредств;
		Статьи.Вставить(Списание.ВозвратЗайма,                            "ВозвратЗаймаПолученного");
		Статьи.Вставить(Списание.ВозвратКредита,                          "ВозвратЗаймаПолученного");
		Статьи.Вставить(Списание.ВыдачаЗаймаКонтрагенту,                  "ВыдачаЗайма");
		Статьи.Вставить(Списание.ВыдачаЗаймаРаботнику,                    "ВыдачаЗайма");
		Статьи.Вставить(Списание.ВозвратПокупателю,                       "ВозвратПокупателю");
		Статьи.Вставить(Списание.ЛичныеСредстваПредпринимателя,           "ЛичныеСредстваПредпринимателя");
		Статьи.Вставить(Списание.ОплатаПоставщику,                        "ОплатаПоставщику");
		Статьи.Вставить(Списание.ПереводНаДругойСчет,                     "ВнутреннееДвижениеДС");
		Статьи.Вставить(Списание.ПеречислениеДепонентов,                  "ОплатаТруда");
		Статьи.Вставить(Списание.ПеречислениеЗаработнойПлатыРаботнику,    "ОплатаТруда");
		Статьи.Вставить(Списание.ПеречислениеЗП,                          "ОплатаТруда");
		Статьи.Вставить(Списание.ПеречислениеНалога,                      "ПрочиеНалоги");
		Статьи.Вставить(Списание.ПеречислениеПодотчетномуЛицу,            "ПеречислениеПодотчетномуЛицу");
		Статьи.Вставить(Списание.ПеречислениеСотрудникуПоДоговоруПодряда, "ОплатаПоставщику");
		Статьи.Вставить(Списание.ПрочееСписание,                          "ПрочиеРасходы");
		Статьи.Вставить(Списание.ПрочиеРасчетыСКонтрагентами,             "ПрочиеРасходы");
		Статьи.Вставить(Списание.СнятиеНаличных,                          "ВнутреннееДвижениеДС");
		Статьи.Вставить(Списание.КомиссияБанка,                           "УслугиБанков");
		Статьи.Вставить(Списание.ПеречислениеДивидендов,                  "ВыплатаДивидендов");
		
	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПКО") Тогда
		
		ПоступлениеПКО = Перечисления.ВидыОперацийПКО;
		Статьи.Вставить(ПоступлениеПКО.ПолучениеНаличныхВБанке,            "ВнутреннееДвижениеДС");
		Статьи.Вставить(ПоступлениеПКО.ВозвратЗаймаКонтрагентом,           "ВозвратЗаймаВыданного");
		Статьи.Вставить(ПоступлениеПКО.ВозвратЗаймаРаботником,             "ВозвратЗаймаВыданного");
		Статьи.Вставить(ПоступлениеПКО.ВозвратОтПоставщика,                "ВозвратОтПоставщика");
		Статьи.Вставить(ПоступлениеПКО.ВозвратОтПодотчетногоЛица,          "ВозвратОтПодотчетногоЛица");
		Статьи.Вставить(ПоступлениеПКО.ЛичныеСредстваПредпринимателя,      "ЛичныеСредстваПредпринимателя");
		Статьи.Вставить(ПоступлениеПКО.ОплатаПокупателя,                   "ОплатаОтПокупателя");
		Статьи.Вставить(ПоступлениеПКО.ПолучениеЗайма,                     "ПолучениеЗайма");
		Статьи.Вставить(ПоступлениеПКО.ПолучениеКредита,                   "ПолучениеЗайма");
		Статьи.Вставить(ПоступлениеПКО.РозничнаяВыручка,                   "РозничнаяВыручка");
		Статьи.Вставить(ПоступлениеПКО.ПрочийПриход,                       "ПрочиеПоступления");
		
	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРКО") Тогда
		
		СписаниеРКО = Перечисления.ВидыОперацийРКО;
		Статьи.Вставить(СписаниеРКО.ВзносНаличнымиВБанк,                  "ВнутреннееДвижениеДС");
		Статьи.Вставить(СписаниеРКО.ВозвратЗайма,                         "ВозвратЗаймаПолученного");
		Статьи.Вставить(СписаниеРКО.ВозвратКредита,                       "ВозвратЗаймаПолученного");
		Статьи.Вставить(СписаниеРКО.ВыдачаЗаймаКонтрагенту,               "ВыдачаЗайма");
		Статьи.Вставить(СписаниеРКО.ВыдачаЗаймаРаботнику,                 "ВыдачаЗайма");
		Статьи.Вставить(СписаниеРКО.ВозвратПокупателю,                    "ВозвратПокупателю");
		Статьи.Вставить(СписаниеРКО.ВозвратРозничномуПокупателю,          "ВозвратПокупателю");
		Статьи.Вставить(СписаниеРКО.ЛичныеСредстваПредпринимателя,        "ЛичныеСредстваПредпринимателя");
		Статьи.Вставить(СписаниеРКО.ВыдачаПодотчетномуЛицу,               "ПеречислениеПодотчетномуЛицу");
		Статьи.Вставить(СписаниеРКО.ВыплатаДепонентов,                    "ОплатаТруда");
		Статьи.Вставить(СписаниеРКО.ВыплатаЗаработнойПлатыПоВедомостям,   "ОплатаТруда");
		Статьи.Вставить(СписаниеРКО.ВыплатаЗаработнойПлатыРаботнику,      "ОплатаТруда");
		Статьи.Вставить(СписаниеРКО.ВыплатаСотрудникуПоДоговоруПодряда,   "ОплатаПоставщику");
		Статьи.Вставить(СписаниеРКО.Инкассация,                           "ВнутреннееДвижениеДС");
		Статьи.Вставить(СписаниеРКО.ОплатаПоставщику,                     "ОплатаПоставщику");
		Статьи.Вставить(СписаниеРКО.ПрочийРасход,                         "ПрочиеРасходы");
		Статьи.Вставить(СписаниеРКО.УплатаНалога,                         "ПрочиеНалоги");
		Статьи.Вставить(СписаниеРКО.ВыплатаДивидендов,                    "ВыплатаДивидендов");
		
	КонецЕсли;
	
	Возврат Статьи;
	
КонецФункции

#КонецОбласти

#КонецЕсли
