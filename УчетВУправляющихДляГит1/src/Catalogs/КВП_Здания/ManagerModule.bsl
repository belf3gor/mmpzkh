
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Функция рассчитывает общие площади здания или подъезда по размерам 
// общих площадей помещений, входящих в состав здания или подъезда.
Функция РассчитатьПлощадиЗдания(Объект, СписокВидовПомещений = Неопределено) Экспорт
	
	ДанныеПоПлощадямЗдания = Новый Структура();
	
	ПлощадьЖилыхНежилыхПомещений = 0;
	ПлощадьМестОбщегоПользования = 0;
	ПлощадьОбщая                 = 0;
	ПлощадьЖилыхПомещений        = 0;
		
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения КАК ВидПомещения,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь
	|ПОМЕСТИТЬ ВрТаблицаПлощадей
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&Период,
	|			Объект.Владелец = &Объект
	|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних
	|ГДЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаПлощадей.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|					ИЛИ ТаблицаПлощадей.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Офис)
	|					ИЛИ ТаблицаПлощадей.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
	|					ИЛИ ТаблицаПлощадей.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|				ТОГДА ЕСТЬNULL(ТаблицаПлощадей.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьЖилыхНежилыхПомещений,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаПлощадей.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.МестоОбщегоПользования)
	|					ИЛИ ТаблицаПлощадей.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.ПодсобноеПомещение)
	|				ТОГДА ЕСТЬNULL(ТаблицаПлощадей.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьМестОбщегоПользования,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаПлощадей.ВидПомещения В (&СписокВидовПомещений)
	|				ТОГДА ЕСТЬNULL(ТаблицаПлощадей.Площадь, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлощадьЖилыхПомещений
	|ИЗ
	|	ВрТаблицаПлощадей КАК ТаблицаПлощадей";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст , "Объект.Владелец", "Объект.Подъезд");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Объект",     Объект);
	Запрос.УстановитьПараметр("Период",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("ВидПлощади", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	
	Если СписокВидовПомещений = Неопределено Тогда
		Запрос.УстановитьПараметр("СписокВидовПомещений", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("СписокВидовПомещений", СписокВидовПомещений);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПлощадьЖилыхНежилыхПомещений = ?(Выборка.ПлощадьЖилыхНежилыхПомещений = NULL, 0, Выборка.ПлощадьЖилыхНежилыхПомещений);
		ПлощадьМестОбщегоПользования = ?(Выборка.ПлощадьМестОбщегоПользования = NULL, 0, Выборка.ПлощадьМестОбщегоПользования);
		ПлощадьЖилыхПомещений        = ?(Выборка.ПлощадьЖилыхПомещений = NULL,        0, Выборка.ПлощадьЖилыхПомещений);
		
	КонецЕсли;
	
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьЖилыхНежилыхПомещений",     ПлощадьЖилыхНежилыхПомещений);
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьМестОбщегоПользования",     ПлощадьМестОбщегоПользования);
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьОбщая",                     ПлощадьЖилыхНежилыхПомещений +
																		ПлощадьМестОбщегоПользования);
	ДанныеПоПлощадямЗдания.Вставить("ПлощадьЖилыхПомещений",            ПлощадьЖилыхПомещений);
	
	
	Возврат ДанныеПоПлощадямЗдания;
	
КонецФункции //РассчитатьПлощадиЗдания()

// Функция определяет общую площадь всех помещений, включая помещения, входящие в состав общего имущества.
//
// Параметры:
//  Объект      - Ссылка на справочник - здание, подъезд.
//  ВидПлощади  - Строка - Возможные значения: 
//							"ПлощадьОбщая"                 – общая площадь всех помещений, в т.ч. входящих в состав общего имущества;
//							"ПлощадьЖилыхНежилыхПомещений" – общая площадь всех жилых и нежилых помещений;
//							"ПлощадьМестОбщегоПользования" - общая площадь помещений (мест общего пользования, подсобных помещений),
//																	входящих в состав общего имущества.
//
Функция ОпределитьОбщуюПлощадьПомещений(Объект, ВидПлощади) Экспорт

	ВидОбъекта = ТипЗнч(Объект);
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если ВидОбъекта = Тип("СправочникСсылка.КВП_Здания") Тогда
		
		// Данные о размере площади берем из реквизитов справочника.
		ИмяВидаПлощади = СтрЗаменить(ВидПлощади, "Площадь", "ПлощадьЗдания");
		Если НЕ МетаданныеОбъекта.Реквизиты.Найти(ИмяВидаПлощади) = Неопределено Тогда
			Возврат Объект[ИмяВидаПлощади];
		КонецЕсли;
		
	ИначеЕсли ВидОбъекта = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		
		// Данные о размере площади рассчитываем по размерам 
		// общих площадей помещений, входящих в состав подъезда.
		ДанныеПоПлощадямПодъезда = РассчитатьПлощадиЗдания(Объект);
		Возврат ДанныеПоПлощадямПодъезда[ВидПлощади];
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции  //ОпределитьОбщуюПлощадьВсехПомещений()

//////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ АВТОМАТИЧЕСКОГО ОБНОВЛЕНИЯ ОБЩИХ ПЛОЩАДЕЙ ЗДАНИЯ

// Функция возвращает значение настройки автоматического пересчета общих площадей здания.
//
Функция ПолучитьНастройкуАвтоматическогоПересчетаПлощадейЗданий() Экспорт
	
	Возврат Константы.УПЖКХ_АвтоматическиПересчитыватьПлощадиЗданий.Получить();
	
КонецФункции

// Функция определяет необходимость пересчета площадей помещения в случае изменения "Общей площади"
//
// Параметры:
//  Объект       - ссылка на объект проверки
//  ПлощадиПомещения - таблица значений площадей помещений
//
// Возвращаемое значение:
//  Истина       - установлена необходимость пересчета площадей помещений
//  Ложь         - не требуется пересчет площадей помещений 
//
Функция ПроверитьИзменениеОбщейПлощади(Объект, ПлощадиПомещения) Экспорт
	
	НеобходимоОбновитьДанныеПоПлощадямЗдания  = Ложь;
	
	// Проверяем, нужно ли обновлять площадь здания.
	НеобходимоПересчитыватьОбщиеПлощадиЗдания = ПолучитьНастройкуАвтоматическогоПересчетаПлощадейЗданий();
	Если НеобходимоПересчитыватьОбщиеПлощадиЗдания Тогда
		
		ТекущаяПлощадь  = 0;
		ИсходнаяПлощадь = 0;
		
		СтруктураПоискаОбщейПлощади = Новый Структура("ВидПлощади", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
		врОбщаяПлощадь = ПлощадиПомещения.Скопировать(ПлощадиПомещения.НайтиСтроки(СтруктураПоискаОбщейПлощади), "Период, Площадь");
		
		врОбщаяПлощадь.Сортировать("Период Убыв");
		
		Если врОбщаяПлощадь.Количество() > 0 Тогда
			ТекущаяПлощадь = врОбщаяПлощадь[0].Площадь;
		КонецЕсли;
		
		// Определим исходную площадь.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			,
		|			Объект = &Объект
		|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних";
		
		Запрос.УстановитьПараметр("Объект",     Объект.Ссылка);
		Запрос.УстановитьПараметр("ВидПлощади", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
		
		ВыборкаПлощади = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаПлощади.Следующий() Тогда
			ИсходнаяПлощадь = ВыборкаПлощади.Площадь;
		КонецЕсли;
		
		// Установим необходимость обновления площадей здания.
		НеобходимоОбновитьДанныеПоПлощадямЗдания = НЕ (ТекущаяПлощадь = ИсходнаяПлощадь);
		
	КонецЕсли;
	
	Возврат НеобходимоОбновитьДанныеПоПлощадямЗдания;
	
КонецФункции //ПроверитьИзменениеОбщейПлощади()

// Функция выполняет обновление общих площадей здания, если это необходимо.
//
// Параметр:
//  Здание - ссылка на здание.
//
// Возвращаемое значение:
//  ИСТИНА       - значение пересчитано
//  ЛОЖЬ         - значение не пересчитано
//
Функция ОбновитьОбщиеПлощадиЗданияПриНеобходимости(Здание) Экспорт
	
	ПлощадьПересчитана = Ложь;
	
	ДанныеПоПлощадям = РассчитатьПлощадиЗдания(Здание);
	
	ЗданиеОбъект = Здание.ПолучитьОбъект();
	
	Если НЕ ЗданиеОбъект.ПлощадьЗданияОбщая = ДанныеПоПлощадям.ПлощадьОбщая Тогда
		
		ЗданиеОбъект.ПлощадьЗданияОбщая                 = ДанныеПоПлощадям.ПлощадьОбщая;
		ЗданиеОбъект.ПлощадьЗданияЖилыхНежилыхПомещений = ДанныеПоПлощадям.ПлощадьЖилыхНежилыхПомещений;
		ЗданиеОбъект.ПлощадьЗданияМестОбщегоПользования = ДанныеПоПлощадям.ПлощадьМестОбщегоПользования;
		
		КВП_ЗаписатьОбъект(ЗданиеОбъект);
		
		ПлощадьПересчитана = Истина;
		
	КонецЕсли;
	
	Возврат ПлощадьПересчитана;
	
КонецФункции // ПроверитьИзменениеОбщейПлощади()

#КонецЕсли
Процедура печать_акт(ТабДок, Ссылка) Экспорт
	//{{_КОНСТРУКТОР_ПЕЧАТИ(печать акт)
	Макет = Справочники.КВП_Здания.ПолучитьМакет("Макет");
Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Здания.Этажей КАК Этажей,
	|	КВП_Здания.Подъездов КАК Подъездов,
	|	КВП_Здания.ГодПостройки КАК ГодПостройки,
	|	КВП_Здания.МатериалСтен КАК МатериалСтен,
	|	ПРЕДСТАВЛЕНИЕ(КВП_Здания.МатериалСтен) КАК МатериалСтенПредставление,
	|	КВП_Здания.ПлощадьЗданияОбщая КАК ПлощадьЗданияОбщая,
	|	КВП_Здания.ПлощадьЗданияЖилыхНежилыхПомещений КАК ПлощадьЗданияЖилыхНежилыхПомещений,
	|	КВП_Здания.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Объект,
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.Площадь,
	|	ВложенныйЗапрос2.Объект КАК Объект1,
	|	ВложенныйЗапрос2.Тип КАК Тип1,
	|	ВложенныйЗапрос2.Значение,
	|	ВложенныйЗапрос1.Объект КАК Объект2,
	|	ВложенныйЗапрос1.ВидМастера,
	|	ВложенныйЗапрос1.Мастер
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ПлощадиЗдания.Объект КАК Объект,
	|			КВП_ПлощадиЗдания.Тип КАК Тип,
	|			КВП_ПлощадиЗдания.Площадь КАК Площадь
	|		ИЗ
	|			РегистрСведений.КВП_ПлощадиЗдания КАК КВП_ПлощадиЗдания) КАК ВложенныйЗапрос
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ОбслуживающиеМастера.Объект КАК Объект,
	|			КВП_ОбслуживающиеМастера.ВидМастера КАК ВидМастера,
	|			КВП_ОбслуживающиеМастера.Мастер КАК Мастер
	|		ИЗ
	|			РегистрСведений.КВП_ОбслуживающиеМастера КАК КВП_ОбслуживающиеМастера) КАК ВложенныйЗапрос1
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос1.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ПрилегающаяТерриторияЗдания.Объект КАК Объект,
	|			КВП_ПрилегающаяТерриторияЗдания.Тип КАК Тип,
	|			КВП_ПрилегающаяТерриторияЗдания.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.КВП_ПрилегающаяТерриторияЗдания КАК КВП_ПрилегающаяТерриторияЗдания) КАК ВложенныйЗапрос2
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос2.Объект
	|ГДЕ
	|	КВП_Здания.Ссылка = &Ссылка";
	
		Запрос.Параметры.Вставить("Ссылка",Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьПодвалИнфа  = Макет.ПолучитьОбласть("ПодвалИнфа");
	ОбластьАдрес = Макет.ПолучитьОбласть("Адрес");
	ОбластьОбщиеСведения = Макет.ПолучитьОбласть("ОбщиеСведения");
	ОбластьШапкаКомиссии = Макет.ПолучитьОбласть("ШапкаКомиссии");
	ОбластьКомиссия = Макет.ПолучитьОбласть("ЧленыКомиссии");
	ОбластьПодвалКомисии = Макет.ПолучитьОбласть("ПодвалКомисии");
	ОбластьЗаголовокПодвал = Макет.ПолучитьОбласть("ЗаголовокПодвал"); 
	                                               
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьЗаголовок);	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	

	
	Выборка = новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Выборка.Вставить("ГодПостройки",ВыборкаДетальныеЗаписи.ГодПостройки);
		Выборка.Вставить("МатериалСтенПредставление",ВыборкаДетальныеЗаписи.МатериалСтенПредставление);
		Выборка.Вставить("Этажей",ВыборкаДетальныеЗаписи.Этажей);    
		имя = СтрЗаменить(строка(ВыборкаДетальныеЗаписи.Тип.Наименование)," ","");		
		имя1 = СтрЗаменить(строка(ВыборкаДетальныеЗаписи.Тип1.Наименование)," ","");		
		Выборка.Вставить(имя1,ВыборкаДетальныеЗаписи.Значение);
		Выборка.Вставить(имя ,ВыборкаДетальныеЗаписи.Площадь);
		Выборка.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);

		//адрес = СтрЗаменить(Выборка.Ссылка,"186220, Карелия Респ, Кондопожский р-н,","");
		Выборка.Вставить("Подъездов",ВыборкаДетальныеЗаписи.Подъездов); 
		//Выборка.Вставить("Ссылка",адрес); 

		Выборка.Вставить("ПлощадьЗданияОбщая",ВыборкаДетальныеЗаписи.ПлощадьЗданияОбщая); 
		Выборка.Вставить("Мастер",ВыборкаДетальныеЗаписи.Мастер); 
		Выборка.Вставить("ВидМастера",ВыборкаДетальныеЗаписи.ВидМастера); 
		//ОбластьОбщиеСведения.Параметры.ГодПостройки.Цвет = WebЦвета.Аквамарин; 
		
	КонецЦикла;
		
		ОбластьАдрес.Параметры.Заполнить(Выборка);
	    ТабДок.Вывести(ОбластьАдрес);
		ТабДок.Вывести(ОбластьШапкаКомиссии);
	//Для каждого стр из ЧленыКомиссии цикл
	//	ОбластьКомиссия.Параметры.Должность = стр.должность;
	//	ОбластьКомиссия.Параметры.ФИО = стр.ФИО;
		ТабДок.Вывести(ОбластьКомиссия);
	//КонецЦикла;
		табдок.Вывести(ОбластьПодвалКомисии);
		ОбластьОбщиеСведения.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьОбщиеСведения, ВыборкаДетальныеЗаписи.Уровень());
	

	//ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);

	   Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ДляУмдСрезПоследних.Период,
	              |	ДляУмдСрезПоследних.ОбъектУчета,
	              |	ДляУмдСрезПоследних.Элемент,
	              |	ДляУмдСрезПоследних.ЕдиницыИзмерения,
	              |	ДляУмдСрезПоследних.Оценка,
	              |	ДляУмдСрезПоследних.Количество,
	              |	ДляУмдСрезПоследних.РекомендуемыеРаботы,
	              |	ДляУмдСрезПоследних.Стоимость,
	              |	ДляУмдСрезПоследних.VРабот,
	              |	ДляУмдСрезПоследних.VПроцентОтРабот,
	              |	ДляУмдСрезПоследних.СсылкаНаСмету,
	              |	ДляУмдСрезПоследних.ИмяСмета,
	              |	ДляУмдСрезПоследних.Комментарий
	              |ИЗ
	              |	РегистрСведений.ДляУмд.СрезПоследних КАК ДляУмдСрезПоследних
	              |ГДЕ
	              |	ДляУмдСрезПоследних.ОбъектУчета = &ОбъектУчета" ;
	 
	 Запрос.Параметры.Вставить("ОбъектУчета",Ссылка);
		РезультатЗапроса = Запрос.Выполнить();

	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвалИнфа);
	ТабДок.Вывести(ОбластьЗаголовокПодвал);
	
		//Для каждого стр из ЧленыКомиссии цикл
		//ОбластьПодвал.Параметры.Должность = стр.должность;
		//ОбластьПодвал.Параметры.ФИО = стр.ФИО;
		ТабДок.Вывести(ОбластьПодвал);
	//КонецЦикла;

	  //элементы.группа4.ТекущаяСтраница = элементы.группа6;
	 
КонецПроцедуры

// Возвращает представление адреса здания.
//
// Параметры
//  Здание  – СправочникСсылка.КВП_Здания – здание, для которого ищется адрес.
//
// Возвращаемое значение:
//  Строка – наименование здания.
//
Функция ПолучитьПредставлениеЗдания(Здание) Экспорт
	
	// Важно: 
	//  Для зданий берется представление адреса из наименования самого здания. 
	//  Для каждого здания доступна установка произвольного наименования
	//  с возможностью его заполнения на основании введенного адреса по различным форматам.
	//
	// Для информации:
	//  Ранее адрес здания получали всегда из контактной информации,
	//  а формат представления (СоставПредставленияАдреса) получался из учетной политики.
	
	Возврат Здание.Наименование;
	
КонецФункции // ПолучитьПредставлениеЗдания()
