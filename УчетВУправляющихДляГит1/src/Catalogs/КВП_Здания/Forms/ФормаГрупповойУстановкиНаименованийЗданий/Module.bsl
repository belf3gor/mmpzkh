
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЕ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Процедура устанавливает видимость элементов формы.
Процедура УправлениеФормой()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Элементы.КомандаНазад.Доступность = Ложь;
		Элементы.КомандаДалее.Заголовок   = "Далее >>";
		Элементы.КомандаДалее.Доступность = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Элементы.КомандаНазад.Доступность       = Истина;
		Элементы.КомандаДалее.Заголовок         = "Далее >>";
		Элементы.КомандаДалее.Доступность       = Истина;
		Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап3 Тогда
		
		Элементы.КомандаНазад.Доступность = Истина;
		Элементы.КомандаДалее.Заголовок   = "Закрыть";
		
		// Скроем группу, отображающую прогресс переименования.
		Элементы.ГруппаПрогрессПереименованияЗданий.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет необходимые действия с формой после завершения процесса переименования.
Процедура ОбработатьДанныеФормы()
	
	// Скроем группу, отображающую прогресс переименования:
	Элементы.ГруппаПрогрессПереименованияЗданий.Видимость = Ложь;
	
	Элементы.КомандаДалее.Доступность       = Истина;
	Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
	
	ВывестиИнформациюПользователю();
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет переход к следующему этапу.
Процедура ПоказатьСледующийЭтап()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап2;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап3;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап3 Тогда
		
		Закрыть();
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет переход к предыдущему этапу.
Процедура ПоказатьПредыдущийЭтап()
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап1;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап3 Тогда
		
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.Этап2;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедура блокирует доступность некоторых кнопок формы после начала процесса переименования.
Процедура ЗаблокироватьДоступностьКнопокНаФорме()
	
	Элементы.КомандаНазад.Доступность  = Ложь;
	Элементы.Переименовать.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Процедура выводит пользователю информацию о затраченном на переименование зданий времени.
Процедура ВывестиИнформациюПользователю()
	
	ВремяОкончанияФормирования = ТекущаяДата();
	Сообщить("" + ВремяОкончанияФормирования + " - Процедура переименования зданий завершена.");
	ВремяФормирования = ВремяОкончанияФормирования - ВремяНачалаФормирования;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
// Функция проверяет наличие выбранного здания в таблице.
Функция ПроверитьНаличиеЗданияВСписке(ВыбранноеЗдание)
	
	ЗданиеУжеДобавлено = Ложь;
	
	НайденныеСтроки = Здания.НайтиСтроки(Новый Структура("Объект", ВыбранноеЗдание));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗданиеУжеДобавлено = Истина;
	КонецЕсли;
	
	Возврат ЗданиеУжеДобавлено;
	
КонецФункции

&НаСервере
// Функция получает здания из выбранной группы.
Функция ПолучитьЗданияИзГруппы(ЗданиеСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Ссылка В ИЕРАРХИИ(&ГруппаЗданий)
	|	И НЕ ЭтоГруппа
	|	И НЕ ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ГруппаЗданий", ЗданиеСсылка);
	
	ВыборкаЗданий = Запрос.Выполнить().Выбрать();
	
	СписокДобавляемыхЗданий = Новый СписокЗначений;
	
	ЗданияУжеДобавлены = Ложь;
	
	Пока ВыборкаЗданий.Следующий() Цикл
		
		НайденныеСтроки = Здания.НайтиСтроки(Новый Структура("Объект", ВыборкаЗданий.Ссылка));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СписокДобавляемыхЗданий.Добавить(ВыборкаЗданий.Ссылка);
		Иначе
			ЗданияУжеДобавлены = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗданияУжеДобавлены Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Некоторые здания данной группы уже добавлены в список зданий и не будут добавлены повторно.");
	КонецЕсли;
	
	Возврат СписокДобавляемыхЗданий;
	
КонецФункции

&НаСервере
// Процедура заполняет табличную часть "Здания" всеми зданиями из справочника.
Процедура ЗаполнитьТабличнуюЧастьЗдания()
	
	Здания.Очистить();
	Здания.Загрузить(ПолучитьСписокВсехЗданий());
	
КонецПроцедуры

&НаСервере
// Функция получает список всех элементов справочника "Здания".
Функция ПолучитьСписокВсехЗданий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка КАК Объект
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ЭтоГруппа
	|	И НЕ КВП_Здания.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_Здания.Наименование";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
// Возвращает структуру параметров для заполнения с отбором.
//
Функция ПолучитьСтруктуруПараметровДляЗаполненияСОтбором()
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	// Выбирать можно здания и паркинги.
	ТипЗначОбъекта = Новый СписокЗначений;
	ТипЗначОбъекта.Добавить("Здания");
	ТипЗначОбъекта.Добавить("Паркинги");
	СтруктураПараметров.Вставить("ТипЗначОбъекта" , ТипЗначОбъекта);
	
	// По умолчанию предоставляем заполнение по зданиям.
	СтруктураПараметров.Вставить("ТипОбъекта" , "Здания");
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВосстановитьНастройки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТаблицуПредставленияАдреса();
	ОбновитьПримерПредставленияАдреса();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Сохраним указанные пользователем настройки в хранилище.
	СохранитьНастройки();
	
	Если ЗакрытьФорму Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ПроцедураПереименованияЗавершена Тогда
		
		Отказ = Истина;
		
		Оповещение = Новый ОписаниеОповещения("ОбработчикПередЗакрытиемВоВремяПереименования", ЭтотОбъект);
		ТекстВопроса = "Процедура переименования зданий не завершена! Продолжить?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата ответа на вопрос при попытке закрыть форму обработки во время процесса переименования.
Процедура ОбработчикПередЗакрытиемВоВремяПереименования(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьФорму = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


/////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаДалее".
Процедура КомандаДалее(Команда)
	
	Отказ = ДанныеЗаполненыКорректно();
	
	Если Не Отказ Тогда
		ПоказатьСледующийЭтап();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаНазад".
Процедура КомандаНазад(Команда)
	
	ПоказатьПредыдущийЭтап();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Заполнить" командной панели табличного поля "Здания".
Процедура ЗаполнитьЗдания(Команда)
	
	Если Здания.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗдания", ЭтотОбъект);
		ТекстВопроса = "Перед заполнением табличное поле будет очищено. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьТабличнуюЧастьЗдания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Заполнить с отбором" командной панели табличного поля "Здания".
Процедура ЗаполнитьЗданияСОтбором(Команда)
	
	Если Здания.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗданияСОтбором", ЭтотОбъект);
		ТекстВопроса = "Перед заполнением табличное поле будет очищено. Продолжить?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗаполнитьЗданияСОтборомПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ЗаполнитьЗданияСОтбором".
Процедура ЗаполнитьЗданияСОтборомПродолжение()
	
	Здания.Очистить();
	
	СтруктураПараметров = ПолучитьСтруктуруПараметровДляЗаполненияСОтбором();
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьЗданияСОтборомОкончаниеВыбораПолучателейУслуг", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", СтруктураПараметров, ЭтотОбъект, , , , ОписаниеЗавершенияВыбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ЗаполнитьЗданияСОтборомПродолжение()".
Процедура ЗаполнитьЗданияСОтборомОкончаниеВыбораПолучателейУслуг(СписокДляВозврата, ДополнительныеПараметры) Экспорт
	
	СписокДобавляемыхЗданий = СписокДляВозврата;
	
	Если ТипЗнч(СписокДобавляемыхЗданий) = Тип("СписокЗначений") Тогда
		Для Каждого ТекЗдание Из СписокДобавляемыхЗданий Цикл
			СтрокаЗдания = Здания.Добавить();
			СтрокаЗдания.Объект = ТекЗдание.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного перед заполнением табличной части зданий (команда: "ЗаполнитьЗдания").
Процедура ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗдания(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТабличнуюЧастьЗдания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного перед заполнением табличной части зданий (команда: "ЗаполнитьЗдания").
Процедура ОбработатьРезультатВопросаЗаполнитьТабличнуюЧастьЗданияСОтбором(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьЗданияСОтборомПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПереименоватьЗдания".
Процедура КомандаПереименоватьЗдания(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатВопросаПереименоватьЗдания", ЭтотОбъект);
	ТекстВопроса = "Начать процедуру переименования?";
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного перед началом процедуры переименования (команда: "ПереименоватьЗдания").
Процедура ОбработатьРезультатВопросаПереименоватьЗдания(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПереименоватьЗданияПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "ПереименоватьЗдания".
Процедура ПереименоватьЗданияПродолжение()
	
	// Установим видимость группы, отображающей прогресс переименования.
	Элементы.ГруппаПрогрессПереименованияЗданий.Видимость = Истина;
	
	// Сохраним указанные пользователем настройки в хранилище.
	СохранитьНастройки();
	
	ВремяНачалаФормирования = ТекущаяДата();
	
	Сообщить("" + ВремяНачалаФормирования + " - Запущена процедура переименования зданий.");
	
	ПроцедураПереименованияЗавершена = Ложь;
	
	Отказ = Ложь;
	
	ЗаблокироватьДоступностьКнопокНаФорме();
	
	ПереименоватьЗданияНаСервере();
	
	ПроцедураПереименованияЗавершена = Истина;
	
	ОбработатьДанныеФормы();
	
КонецПроцедуры

#КонецОбласти


/////////////////////////////////////////////////////////////////////////////////
// ЭЛЕМЕНТЫ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик нажатия кнопки перемещения вверх таблицы представления адреса.
//
Процедура ПредставлениеАдресаПереместитьВверх(Команда)
	
	Если Не Элементы.ПредставлениеАдреса.ТекущиеДанные = Неопределено
	   И ПредставлениеАдреса.Индекс(Элементы.ПредставлениеАдреса.ТекущиеДанные) > 0 Тогда
		ПредставлениеАдреса.Сдвинуть(ПредставлениеАдреса.Индекс(Элементы.ПредставлениеАдреса.ТекущиеДанные), -1);
		
		ОбновитьСтрокуПредставленияАдреса();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки перемещения вниз таблицы представления адреса.
//
Процедура ПредставлениеАдресаПереместитьВниз(Команда)
	
	Если Не Элементы.ПредставлениеАдреса.ТекущиеДанные = Неопределено
	   И ПредставлениеАдреса.Индекс(Элементы.ПредставлениеАдреса.ТекущиеДанные) < ПредставлениеАдреса.Количество()-1 Тогда
		ПредставлениеАдреса.Сдвинуть(ПредставлениеАдреса.Индекс(Элементы.ПредставлениеАдреса.ТекущиеДанные), 1);
		
		ОбновитьСтрокуПредставленияАдреса();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода здания для примера.
//
Процедура ЗданиеДляПримераПриИзменении(Элемент)
	
	ОбновитьПримерПредставленияАдреса();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" строки таблицы представления адреса.
//
Процедура ПредставлениеАдресаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено И Не ОтменаРедактирования Тогда
		
		Если ПустаяСтрока(Элемент.ТекущиеДанные.Элемент) Тогда
			// Удаляем пустую строку.
			ПредставлениеАдреса.Удалить(ПредставлениеАдреса.Индекс(Элемент.ТекущиеДанные)); 
		Иначе
			ОбновитьСтрокуПредставленияАдреса();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПредставлениеАдресаПриОкончанииРедактирования()

&НаКлиенте
// Обработчик события "ПослеУдаления" строки таблицы представления адреса.
//
Процедура ПредставлениеАдресаПослеУдаления(Элемент)
	
	ОбновитьСтрокуПредставленияАдреса();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Здания".
Процедура ЗданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данное здание уже добавлено в список зданий! Выберите другое здание.", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента "Объект" табличного поля "Здания".
Процедура ЗданияОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отказ = Ложь;
	
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЭтоГруппа") Тогда
		
		СписокДобавляемыхЗданий = ПолучитьЗданияИзГруппы(ВыбранноеЗначение);
		Здания.Удалить(Элементы.Здания.ТекущиеДанные);
		
		Для Каждого ТекЗдание Из СписокДобавляемыхЗданий Цикл
			НоваяСтрокаЗдания = Здания.Добавить();
			НоваяСтрокаЗдания.Объект = ТекЗдание.Значение;
		КонецЦикла;
		
	Иначе
		
		Отказ = ПроверитьНаличиеЗданияВСписке(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данное здание уже добавлено в список зданий! Выберите другое здание.");
		ВыбранноеЗначение = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


/////////////////////////////////////////////////////////////////////////////////
// СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ НАСТРОЕК

#Область СохранениеИВосстановлениеНастроек

&НаСервере
// Процедура заполняет значения реквизитов из настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ФормаГрупповойУстановкиНаименованийЗданий");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("СоставПредставленияАдреса", СоставПредставленияАдреса);
		СтруктураПараметров.Свойство("ЗданиеДляПримера",          ЗданиеДляПримера);
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

&НаСервере
// Процедура сохраняет настройки мастера выгрузки.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СоставПредставленияАдреса", СоставПредставленияАдреса);
	СтруктураПараметров.Вставить("ЗданиеДляПримера",          ЗданиеДляПримера);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ФормаГрупповойУстановкиНаименованийЗданий",, СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура выполняет переименование выбранных зданий по настроенному шаблону.
Процедура ПереименоватьЗданияНаСервере();
	
	Для Каждого ТекЗдание ИЗ Здания Цикл
		
		ЗданиеСсылка = ТекЗдание.Объект;
		
		СтруктураАдреса           = ПолучитьАдрес(ЗданиеСсылка, Перечисления.КВП_ВидыАдресов.Здание);
		ПредставлениеНаименования = Справочники.КВП_Здания.ПолучитьПредставлениеАдресаЗданияПоСтруктуре(СтруктураАдреса, 
																								СоставПредставленияАдреса);
		Если НЕ ПредставлениеНаименования = "" Тогда 
			ЗданиеОбъект = ЗданиеСсылка.ПолучитьОбъект();
			
			ЗданиеОбъект.Наименование = ПредставлениеНаименования;
			Записан = КВП_ЗаписатьОбъект(ЗданиеОбъект);
			Если НЕ Записан Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось изменить наименование для здания: " + ЗданиеСсылка +
																 " по причине: " + ОписаниеОшибки());
			КонецЕсли;
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось изменить наименование для здания: " + ЗданиеСсылка + 
															 " по причине: не заполнен адрес здания!");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Проверяет заполненность требуемых реквизитов для перехода к следующему этапу.
Функция ДанныеЗаполненыКорректно()
	
	ОчиститьСообщения();
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	Отказ = Ложь;
	
	Если ТекущаяСтраница = Элементы.Этап1 Тогда
		
		Если ПредставлениеАдреса.Количество() = 0 Тогда
			НСтрока = НСтр("ru = 'Не заполнено представление адреса!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока,,,, Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.Этап2 Тогда
		
		Если Здания.Количество() = 0 Тогда
			НСтрока = НСтр("ru = 'Не указаны здания!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
// Обновляет таблицу представления адреса по строке.
//
Процедура ОбновитьТаблицуПредставленияАдреса()
	
	ПредставлениеАдреса.Очистить();
	
	Если ПустаяСтрока(СоставПредставленияАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	Список = СоставПредставленияАдреса;
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			НоваяСтрока = ПредставлениеАдреса.Добавить();
			НоваяСтрока.Элемент = ИмяПараметра;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьТаблицуПредставленияАдреса()

&НаКлиенте
// Обновляет строку представления адреса по таблице.
//
Процедура ОбновитьСтрокуПредставленияАдреса()
	
	СоставПредставленияАдреса = "";
	Для Каждого СтрокаПредставления Из ПредставлениеАдреса Цикл
		Если ЗначениеЗаполнено(СтрокаПредставления.Элемент) Тогда
			СоставПредставленияАдреса = СоставПредставленияАдреса + "," + СтрокаПредставления.Элемент;
		КонецЕсли;
	КонецЦикла;
	
	СоставПредставленияАдреса = Сред(СоставПредставленияАдреса, СтрДлина(",") + 1);
	
	ОбновитьПримерПредставленияАдреса();
	
КонецПроцедуры // ОбновитьСтрокуПредставленияАдреса()

&НаКлиенте
// Обновляет пример представления адреса согласно выбранным настройкам и зданию.
//
Процедура ОбновитьПримерПредставленияАдреса()
	
	ПримерПредставленияАдреса = ОбновитьПримерПредставленияАдресаНаСервере();
	
КонецПроцедуры

&НаСервере
// Обновляет пример представления адреса согласно выбранным настройкам и зданию.
//
Функция ОбновитьПримерПредставленияАдресаНаСервере()
	
	СтруктураАдреса          = ПолучитьАдрес(ЗданиеДляПримера, Перечисления.КВП_ВидыАдресов.Здание);
	ПредставлениеПоСтруктуре = Справочники.КВП_Здания.ПолучитьПредставлениеАдресаЗданияПоСтруктуре(СтруктураАдреса, 
																									СоставПредставленияАдреса);
	Возврат ПредставлениеПоСтруктуре;
	
КонецФункции

#КонецОбласти
