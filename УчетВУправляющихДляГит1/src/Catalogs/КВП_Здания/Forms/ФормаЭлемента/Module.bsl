
&НаКлиенте
Процедура ПротоколыСобранииПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПротоколыСобранииПриИзменении(Элемент)
//	ТекСтр = Элементы.ПроктополыСобрания.ТекущиеДанные;
//	ТекСтр.ДатаПроведения =  ТекущаяДата();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// Устанавливает отбор списка норм.
Процедура УстановитьОтборНормНаКлиенте(ОтборСтрок, ПоказатьВсе)
	
	Если ПоказатьВсе Тогда
		ОтборСтрок = Новый ФиксированнаяСтруктура("Актуальность", Истина);
	Иначе
		ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Копирует записи регистров сведений "Адреса" и "Благоустройство объектов".
//
// Параметры:
//  ОбъектКопирования - элемент справочника здания, c которого копируются данные.
//
Процедура СкопироватьЗаписиРегистров(ОбъектКопирования)
	
	// Копирование данных по благоустройству здания.
	НаборЗаписейИсточник = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.Объект.Установить(ОбъектКопирования.Ссылка);
	НаборЗаписейИсточник.Прочитать();
	
	Если Не НаборЗаписейИсточник.Количество() = 0 Тогда
		ТаблицаЗаписей = НаборЗаписейИсточник.Выгрузить();
		ТаблицаЗаписей.ЗаполнитьЗначения(Объект.Ссылка, "Объект");
		
		НаборЗаписейПриемник = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейПриемник.Отбор.Объект.Установить(Объект.Ссылка);
		НаборЗаписейПриемник.Загрузить(ТаблицаЗаписей);
		
		НаборЗаписейПриемник.Записать();
	КонецЕсли;
	
	ПрочитатьВидыБлагоустройства();
	
КонецПроцедуры // СкопироватьЗаписиРегистров()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость поля ввода "Количество подземных этажей".
//
// Параметры:
//  Форма - УправляемаяФорма - текущая форма
//
Процедура УстановитьВидимостьКоличестваПодземныхЭтажей(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.КоличествоПодземныхЭтажей.Видимость = Объект.Многоквартирное;
	
КонецПроцедуры // УстановитьВидимостьКоличестваПодземныхЭтажей()

////////////////////////////////
// Работа с площадями

&НаСервереБезКонтекста
// Функция рассчитывает площади здания на сервере.
Функция РассчитатьПлощадиЗданияНаСервере(Ссылка)
	
	Возврат Справочники.КВП_Здания.РассчитатьПлощадиЗдания(Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
// Функция считывает типы площадей из регистра сведений КВП_ПлощадиЗдания и возвращает ТЗ
Функция ПрочитатьНаборЗаписейПлощади(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.КВП_ПлощадиЗдания ГДЕ Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  //ПрочитатьНаборЗаписейПлощади()

&НаСервере
// Процедура заполняет табличное поле ПлощадиЗдания
Процедура ПрочитатьПлощади()
	
	НаборЗаписей = РегистрыСведений.КВП_ПлощадиЗдания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	//получим все типы площадей здания из справочника
	ЗапросПлощадейЗдания = Новый Запрос;
	ЗапросПлощадейЗдания.Текст =
	"ВЫБРАТЬ
	|	КВП_ТипыПлощадейЗдания.Ссылка КАК Тип
	|ИЗ
	|	Справочник.КВП_ТипыПлощадейЗдания КАК КВП_ТипыПлощадейЗдания
	|ГДЕ
	|	КВП_ТипыПлощадейЗдания.ПометкаУдаления = ЛОЖЬ";
	ТаблицаПлощадейЗдания = ЗапросПлощадейЗдания.Выполнить().Выгрузить();
	
	//добавим в табличное поле ПлощадиЗдания остальные типы площадей, полученные из справочника
	Для Каждого ТекСтрока Из ТаблицаПлощадейЗдания Цикл
		НайдСтрока = ТаблицаЗаписей.Найти(ТекСтрока.Тип, "Тип");
		Если НайдСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Объект = Объект.Ссылка;
			НоваяСтрока.Тип = ТекСтрока.Тип;
		КонецЕсли;
	КонецЦикла;
	
	ПлощадиЗдания.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры //ПрочитатьПлощади()

&НаСервере
// Процедура записывает данные в регистр сведений КВП_ПлощадиЗдания
Процедура ЗаписатьПлощади(Отказ)
	
	Если НЕ Отказ Тогда
		
		//отберем для записи в регистр только те данные, по которым заполнены значения
		ПервичныйНабор = ПлощадиЗдания.Выгрузить();
		КолЗаписей = ПлощадиЗдания.Количество();
		Для Индекс = 1 По КолЗаписей Цикл
			ТекЭлемент = ПлощадиЗдания[КолЗаписей-Индекс];
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.Площадь) Тогда
				ПлощадиЗдания.Удалить(ТекЭлемент);
			КонецЕсли;
			ТекЭлемент.Объект = Объект.Ссылка;
		КонецЦикла;
		
		ПлощадиЗдания.Отбор.Объект.Значение      = Объект.Ссылка;
		ПлощадиЗдания.Отбор.Объект.ВидСравнения  = ВидСравнения.Равно;
		ПлощадиЗдания.Отбор.Объект.Использование = Истина;
		
		ТаблицаПлощадей = ПлощадиЗдания.Выгрузить();
		Если Не ТаблицаПлощадей.Колонки.Найти("ИсходныйНомерСтроки") = Неопределено Тогда
			ТаблицаПлощадей.Колонки.Удалить("ИсходныйНомерСтроки");
		КонецЕсли;
		
		Если Не УПЖКХ_ОбщегоНазначенияСервер.СравнитьТаблицыНаборовЗаписей(
					ПрочитатьНаборЗаписейПлощади(Объект.Ссылка), ТаблицаПлощадей) Тогда
			Попытка
				Набор = ДанныеФормыВЗначение(ПлощадиЗдания, Тип("РегистрСведенийНаборЗаписей.КВП_ПлощадиЗдания"));
				Набор.Записать();
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Элемент """ + СокрЛП(Объект.Ссылка)
																+ """ не записан. Не записана площадь здания: " + Символы.ПС + ОписаниеОшибки(), Отказ);
				// возвратим обратно данные набора
				ПлощадиЗдания.Загрузить(ПервичныйНабор);
				Возврат;
			КонецПопытки;
			ПрочитатьПлощади();
		Иначе
			ПлощадиЗдания.Загрузить(ПервичныйНабор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  //ЗаписатьПлощади()

////////////////////////////////
// Работа с благоустройством

&НаСервереБезКонтекста
// Функция считывает данные  по благоустройству из регистра сведений КВП_БлагоустройствоОбъектов и возвращает ТЗ.
Функция ПрочитатьНаборЗаписейВидыБлагоустройства(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.КВП_БлагоустройствоОбъектов ГДЕ Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  //ПрочитатьНаборЗаписейВидыБлагоустройства()

&НаСервере
// Процедура заполняет табличное поле БлагоустройствоЗдания
Процедура ПрочитатьВидыБлагоустройства()

	НаборЗаписей = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	//получим все виды благоустройства здания из справочника
	ЗапросВидовБлагоустройства = Новый Запрос;
	ЗапросВидовБлагоустройства.Текст =
	"ВЫБРАТЬ
	|	КВП_ВидыБлагоустройстваОбъектов.Ссылка КАК ВидБлагоустройства
	|ИЗ
	|	Справочник.КВП_ВидыБлагоустройстваОбъектов КАК КВП_ВидыБлагоустройстваОбъектов
	|ГДЕ
	|	КВП_ВидыБлагоустройстваОбъектов.ПометкаУдаления = ЛОЖЬ";
	ТаблицаВидовБлагоустройства = ЗапросВидовБлагоустройства.Выполнить().Выгрузить();
	
	//добавим в табличное поле БлагоустройствоЗдания остальные виды благоустройства, полученные из справочника
	Для Каждого ТекСтрока Из ТаблицаВидовБлагоустройства Цикл
		НайдСтрока = ТаблицаЗаписей.Найти(ТекСтрока.ВидБлагоустройства, "ВидБлагоустройства");
		Если НайдСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Объект = Объект.Ссылка;
			НоваяСтрока.ВидБлагоустройства = ТекСтрока.ВидБлагоустройства;
		КонецЕсли;
	КонецЦикла;
	
	БлагоустройствоЗдания.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры  //ПрочитатьВидыБлагоустройства()

&НаСервере
// Процедура записывает данные в регистр сведений КВП_БлагоустройствоОбъектов
Процедура ЗаписатьВидыБлагоустройства(Отказ)
	
	Если НЕ Отказ Тогда
		
		//отберем для записи в регистр только те данные, по которым заполнены значения
		ПервичныйНабор = БлагоустройствоЗдания.Выгрузить();
		КолЗаписей = БлагоустройствоЗдания.Количество();
		Для Индекс = 1 По КолЗаписей Цикл
			ТекЭлемент = БлагоустройствоЗдания[КолЗаписей-Индекс];
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.Значение) Тогда
				БлагоустройствоЗдания.Удалить(ТекЭлемент);
			КонецЕсли;
			ТекЭлемент.Объект = Объект.Ссылка;
		КонецЦикла;
		
		БлагоустройствоЗдания.Отбор.Объект.Значение      = Объект.Ссылка;
		БлагоустройствоЗдания.Отбор.Объект.ВидСравнения  = ВидСравнения.Равно;
		БлагоустройствоЗдания.Отбор.Объект.Использование = Истина;
		
		ТаблицаБлагоустройств = БлагоустройствоЗдания.Выгрузить();
		Если Не ТаблицаБлагоустройств.Колонки.Найти("ИсходныйНомерСтроки") = Неопределено Тогда
			ТаблицаБлагоустройств.Колонки.Удалить("ИсходныйНомерСтроки");
		КонецЕсли;
		
		Если Не УПЖКХ_ОбщегоНазначенияСервер.СравнитьТаблицыНаборовЗаписей(
					ПрочитатьНаборЗаписейВидыБлагоустройства(Объект.Ссылка), ТаблицаБлагоустройств) Тогда
			Попытка
				Набор = 
					ДанныеФормыВЗначение(БлагоустройствоЗдания, Тип("РегистрСведенийНаборЗаписей.КВП_БлагоустройствоОбъектов"));
				Набор.Записать();
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Элемент """ + СокрЛП(Объект.Ссылка)
																+ """ не записан. Не записан вид благоустройства здания: " + Символы.ПС + ОписаниеОшибки(), Отказ);
				// возвратим обратно данные набора
				БлагоустройствоЗдания.Загрузить(ПервичныйНабор);
				Возврат;
			КонецПопытки;
			ПрочитатьВидыБлагоустройства();
		Иначе
			БлагоустройствоЗдания.Загрузить(ПервичныйНабор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  //ЗаписатьВидыБлагоустройства()

////////////////////////////////
// Работа с прилегающей
// территорией

&НаСервереБезКонтекста
// Функция считывает данные по прилегающей территории из регистра 
//сведений КВП_ПрилегающаяТерриторияЗдания и возвращает ТЗ
Функция ПрочитатьНаборЗаписейПрилегающаяТерритория(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.КВП_ПрилегающаяТерриторияЗдания ГДЕ Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  //ПрочитатьНаборЗаписейПрилегающаяТерритория()

&НаСервере
// Процедура заполняет табличное поле ПрилегающаяТерритория
Процедура ПрочитатьПрилегающаяТерритория()
	
	НаборЗаписей = РегистрыСведений.КВП_ПрилегающаяТерриторияЗдания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	//получим все виды характеристик прилегающей территории здания из справочника
	ЗапросПрилегающейТерритории = Новый Запрос;
	ЗапросПрилегающейТерритории.Текст =
	"ВЫБРАТЬ
	|	КВП_ПрилегающаяТерритория.Ссылка КАК Тип
	|ИЗ
	|	Справочник.КВП_ПрилегающаяТерритория КАК КВП_ПрилегающаяТерритория
	|ГДЕ
	|	КВП_ПрилегающаяТерритория.ПометкаУдаления = ЛОЖЬ";
	ТаблицаПрилегающейТерритории = ЗапросПрилегающейТерритории.Выполнить().Выгрузить();
	
	//добавим в табличное поле ПрилегающаяТерритория остальные виды 
	//характеристик прилегающей территории, полученные из справочника
	Для Каждого ТекСтрока Из ТаблицаПрилегающейТерритории Цикл
		НайдСтрока = ТаблицаЗаписей.Найти(ТекСтрока.Тип, "Тип");
		Если НайдСтрока = Неопределено Тогда
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Объект = Объект.Ссылка;
			НоваяСтрока.Тип = ТекСтрока.Тип;
		КонецЕсли;
	КонецЦикла;
	
	ПрилегающаяТерритория.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры //ПрочитатьПрилегающаяТерритория()

&НаСервере
// Процедура записывает данные в регистр сведений КВП_ПрилегающаяТерриторияЗдания
Процедура ЗаписатьПрилегающаяТерритория(Отказ)
	
	Если НЕ Отказ Тогда
		
		//отберем для записи в регистр только те данные, по которым заполнены значения
		ПервичныйНабор = ПрилегающаяТерритория.Выгрузить();
		КолЗаписей = ПрилегающаяТерритория.Количество();
		Для Индекс = 1 По КолЗаписей Цикл
			ТекЭлемент = ПрилегающаяТерритория[КолЗаписей-Индекс];
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.Значение) Тогда
				ПрилегающаяТерритория.Удалить(ТекЭлемент);
			КонецЕсли;
			ТекЭлемент.Объект = Объект.Ссылка;
		КонецЦикла;
		
		ПрилегающаяТерритория.Отбор.Объект.Значение      = Объект.Ссылка;
		ПрилегающаяТерритория.Отбор.Объект.ВидСравнения  = ВидСравнения.Равно;
		ПрилегающаяТерритория.Отбор.Объект.Использование = Истина;
		
		ТаблицаТерриторий = ПрилегающаяТерритория.Выгрузить();
		Если Не ТаблицаТерриторий.Колонки.Найти("ИсходныйНомерСтроки") = Неопределено Тогда
			ТаблицаТерриторий.Колонки.Удалить("ИсходныйНомерСтроки");
		КонецЕсли;
		
		Если Не УПЖКХ_ОбщегоНазначенияСервер.СравнитьТаблицыНаборовЗаписей(
					ПрочитатьНаборЗаписейПрилегающаяТерритория(Объект.Ссылка), ТаблицаТерриторий) Тогда
			Попытка
				Набор = 
					ДанныеФормыВЗначение(ПрилегающаяТерритория, Тип("РегистрСведенийНаборЗаписей.КВП_ПрилегающаяТерриторияЗдания"));
				Набор.Записать();
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
					"Элемент """ + СокрЛП(Объект.Ссылка)
					+ """ не записан. Не записана характеристика прилегающей территории здания: "
					+ Символы.ПС + ОписаниеОшибки(), Отказ);
				// возвратим обратно данные набора
				ПрилегающаяТерритория.Загрузить(ПервичныйНабор);
				Возврат;
			КонецПопытки;
			ПрочитатьПрилегающаяТерритория();
		Иначе
			ПрилегающаяТерритория.Загрузить(ПервичныйНабор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  //ЗаписатьПрилегающаяТерритория()

////////////////////////////////
// Работа с обслуживающими
// мастерами

&НаСервереБезКонтекста
// Функция считывает данные о мастерах из регистра сведений КВП_ОбслуживающиеМастера и возвращает ТЗ.
Функция ПрочитатьНаборЗаписейОбслуживающиеМастера(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.КВП_ОбслуживающиеМастера ГДЕ Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции  //ПрочитатьНаборЗаписейОбслуживающиеМастера()

&НаСервере
// Процедура заполняет табличное поле ОбслуживающиеМастера
Процедура ПрочитатьОбслуживающиеМастера()
	
	НаборЗаписей = РегистрыСведений.КВП_ОбслуживающиеМастера.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Прочитать();
	ОбслуживающиеМастера.Загрузить(НаборЗаписей.Выгрузить());
	
КонецПроцедуры  //ПрочитатьОбслуживающиеМастера()

&НаСервере
// Процедура записывает данные в регистр сведений КВП_ОбслуживающиеМастера
Процедура ЗаписатьОбслуживающиеМастера(Отказ)
	
	Если НЕ Отказ Тогда
		
		//отберем для записи в регистр только те данные, по которым заполнены значения
		ПервичныйНабор = ОбслуживающиеМастера.Выгрузить();
		КолЗаписей = ОбслуживающиеМастера.Количество();
		Для Индекс = 1 По КолЗаписей Цикл
			ТекЭлемент = ОбслуживающиеМастера[КолЗаписей-Индекс];
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.Мастер) Тогда
				ОбслуживающиеМастера.Удалить(ТекЭлемент);
			КонецЕсли;
			ТекЭлемент.Объект = Объект.Ссылка;
		КонецЦикла;
		
		ОбслуживающиеМастера.Отбор.Объект.Значение      = Объект.Ссылка;
		ОбслуживающиеМастера.Отбор.Объект.ВидСравнения  = ВидСравнения.Равно;
		ОбслуживающиеМастера.Отбор.Объект.Использование = Истина;
		
		ТаблицаМастеров = ОбслуживающиеМастера.Выгрузить();
		Если Не ТаблицаМастеров.Колонки.Найти("ИсходныйНомерСтроки") = Неопределено Тогда
			ТаблицаМастеров.Колонки.Удалить("ИсходныйНомерСтроки");
		КонецЕсли;
		
		Если Не УПЖКХ_ОбщегоНазначенияСервер.СравнитьТаблицыНаборовЗаписей(
					ПрочитатьНаборЗаписейОбслуживающиеМастера(Объект.Ссылка), ТаблицаМастеров) Тогда
			Попытка
				Набор = ДанныеФормыВЗначение(ОбслуживающиеМастера, Тип("РегистрСведенийНаборЗаписей.КВП_ОбслуживающиеМастера"));
				Набор.Записать();
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Элемент """ + СокрЛП(Объект.Ссылка)
																+ """ не записан. Не записан обслуживающий мастер здания: " + Символы.ПС + ОписаниеОшибки(), Отказ);
				// возвратим обратно данные набора
				ОбслуживающиеМастера.Загрузить(ПервичныйНабор);
				Возврат;
			КонецПопытки;
			ПрочитатьОбслуживающиеМастера();
		Иначе
			ОбслуживающиеМастера.Загрузить(ПервичныйНабор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры  //ЗаписатьОбслуживающиеМастера()

////////////////////////////////
// Работа со установленным
// оборудованием

&НаСервереБезКонтекста
// Функция возвращает ключ записи регистра сведений по структуре ключа.
//
Функция ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча)
	
	Возврат РегистрыСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.СоздатьКлючЗаписи(СтруктураКлюча);
	
КонецФункции

&НаСервере
// Процедура обновляет список связанного оборудования / объектов учета для текущего здания.
Процедура ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()
	
	УстановленноеОборудование.Загрузить(УПЖКХ_УчетОборудованияНаОбъектахУчетаСервер.ПолучитьОборудованиеУстановленноеНаОбъектУчета(Объект.Ссылка));
	
КонецПроцедуры // ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МЕТОДАМИ МОДУЛЯ ОБЪЕКТА

&НаСервере
// Процедура записывает нормы потребления на сервере.
Функция ЗаписатьНормыПотребленияНаСервере()
	
	ОбработкаНормПотребленияУслуг = 
		РеквизитФормыВЗначение("НормыПотребленияУслуг", Тип("ОбработкаОбъект.КВП_ЗаполнениеНормПотребленияУслуг"));
	Возврат ОбработкаНормПотребленияУслуг.ЗаписатьНормуПотребленияВРегистрСведений(Объект.Ссылка);
	
КонецФункции

&НаСервере
// Сменяет актуальность норм на сервере.
Процедура СменитьАктуальностьНормНаСервере()
	
	ОбработкаНормПотребленияУслуг = 
		РеквизитФормыВЗначение("НормыПотребленияУслуг", Тип("ОбработкаОбъект.КВП_ЗаполнениеНормПотребленияУслуг"));
	ОбработкаНормПотребленияУслуг.СменитьАктуальность();
	ЗначениеВРеквизитФормы(ОбработкаНормПотребленияУслуг, "НормыПотребленияУслуг");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		ДатаПроверки = ТекущаяДата();	
		МакетПаспорта = "МакетПаспорт";
	если Объект.Родитель.Родитель.наименование = "1 Кондопога" тогда
		Объект.ОКТМО = 86615101001;
	КонецЕсли;

	
	объект.ЧасоваяЗонаПоOslon = справочники.УПЖКХ_ЧасовыеЗоныПоOslon.Москва;		
	
	Параметры.Свойство("ЗначениеКопирования", ОбъектКопирования);
	
	НеобходимаПроверкаНаименования = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Многоквартирное = Истина;
		Объект.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Здание;
		
	Иначе
		ВидСобственности = ПолучитьДанныеОСобственностиЗдания(Объект.Ссылка);
	КонецЕсли;
	
	ПрочитатьПлощади();
	ПрочитатьВидыБлагоустройства();
	ПрочитатьПрилегающаяТерритория();
	ПрочитатьОбслуживающиеМастера();
	
	УстановитьВидимостьКоличестваПодземныхЭтажей(ЭтаФорма);
	
	// Устанавливаем отбор по зданию для сведений об обслуживающих организациях.
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(СведенияОбОбслуживающихЗданияОрганизациях.Отбор, "Здание", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
	
	ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
	
	//ОбработкаЗаполнениеНорм = РеквизитФормыВЗначение("НормыПотребленияУслуг",
	//													Тип("ОбработкаОбъект.КВП_ЗаполнениеНормПотребленияУслуг"));
	//ОбработкаЗаполнениеНорм.ЗаполнитьТаблицуНормативовУслуг(Объект.Ссылка);
	//ЗначениеВРеквизитФормы(ОбработкаЗаполнениеНорм, "НормыПотребленияУслуг");
	
	// Обработчик подсистемы "Контактная информация"
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформацияАдрес");
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЧтенииНаСервере" формы.
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	ОбновитьТабОсмотров();
	ОбновитьТабАкт();
	ОбновитьУмдПланРабот();
	посчитатьПредварительнуюСтоимость();
	ДатаПланРаботы=ТекущаяДата();
	Осмотр = '20170912';
	ДатаЗаполненияАкта='20170912';
	УстановитьОтборНормНаКлиенте(Элементы.НормыПотребленияУслугУслуги.ОтборСтрок,
	Не Элементы.КнопкаПоказатьВсеНормы.Пометка);
	
	// Если это новый элемент
	Если Объект.Ссылка.Пустая() Тогда
		// Скопируем записи регистров, если элемент был скопирован.
		Если Не ОбъектКопирования.Пустая() Тогда
			
			Оповещение   = Новый ОписаниеОповещения("ВопросСкопироватьЗаписиРегистров", ЭтаФорма);
			ТекстВопроса = "Скопировать данные по адресам и благоустройству объекта? Для этого элемент будет записан.";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьЧленовКомиссии();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСведенияОбУстановленномОборудовании" Тогда
		Если Источник = Объект.Ссылка Тогда
			ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПустаяСтрока(Объект.Наименование) И НеобходимаПроверкаНаименования Тогда
		Элементы.ПанельИнформации.ТекущаяСтраница = Элементы.АдресаИКонтакты;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнен почтовый адрес здания!", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Контактная информация"
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	//Егор для умд++	
					ТЗХд = ТЗ.Выгрузить();

		ТекущийОбъект.ФайлДоговора = Новый ХранилищеЗначения (ТЗХд, Новый СжатиеДанных(9));
		ТекущийОбъект.ИмяФайлаДоговора = ИмяФайлаДоговора;
		//Егор для умд--
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЗаписиНаСервере" формы.
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Отказ Тогда
		Если мБылиИзмененияНорм = Истина Тогда
			мБылиИзмененияНорм = НЕ ЗаписатьНормыПотребленияНаСервере();
			Отказ = мБылиИзмененияНорм;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьПлощади(Отказ);
	ЗаписатьВидыБлагоустройства(Отказ);
	ЗаписатьПрилегающаяТерритория(Отказ);
	ЗаписатьОбслуживающиеМастера(Отказ);
	
	// Устанавливаем отбор по зданию для сведений об обслуживающих организациях.
	Если Объект.Ссылка.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(СведенияОбОбслуживающихЗданияОрганизациях.Отбор, "Здание", ТекущийОбъект.Ссылка, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	//Егор для умд ++
	Если ЭтоАдресВременногоХранилища (СсылкаНаФайлВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища (СсылкаНаФайлВоВременномХранилище);
		
	КонецЕсли;
	
	//	для каждого стр из таблица Цикл
	//	Если стр.Изм тогда		
	//		МенеджерЗаписи = РегистрыСведений.ДляУмд.СоздатьМенеджерЗаписи(); 
	//		МенеджерЗаписи.ОбъектУчета   = Объект.Ссылка; 
	//		МенеджерЗаписи.элемент = стр.Элемент; 
	//		МенеджерЗаписи.Оценка = стр.Оценка; 
	//		МенеджерЗаписи.ЕдиницыИзмерения = стр.ЕдиницыИзмерения; 
	//		МенеджерЗаписи.РекомендуемыеРаботы = стр.РекомендуемыеРаботы; 
	//		МенеджерЗаписи.количество = стр.Количество; 
	//		МенеджерЗаписи.Период = ДатаПроверки;
	//		МенеджерЗаписи.Стоимость = стр.Стоимость;
	//		МенеджерЗаписи.VРабот = стр.VРабот;
	//		МенеджерЗаписи.VПроцентОтРабот = стр.VОтОбщего;
	//		МенеджерЗаписи.СсылкаНаСмету = стр.СсылкаНаСмету;
	//		МенеджерЗаписи.ИмяСмета = стр.ПрикрепленнаяСмета;
	//		МенеджерЗаписи.Комментарий = стр.Комментарий;
	//		МенеджерЗаписи.Выполнено = стр.Выполнено;
	//		МенеджерЗаписи.ИсточникФинансирования = стр.ИсточникФинансирования;

	//	
	//		МенеджерЗаписи.Записать(); 
	//		Если   ЗначениеЗаполнено(стр.НачислениеПоКапРемонту) или ЗначениеЗаполнено(стр.ПрогнозПоТекущимРаботам) тогда
	//		МенеджерЗаписи = РегистрыСведений.ДляУмдРаботыТаб.СоздатьМенеджерЗаписи(); 
	//		МенеджерЗаписи.ОбъектУчета   = Объект.Ссылка; 
	//		МенеджерЗаписи.элемент = стр.Элемент; 
	//		МенеджерЗаписи.Период = ДатаПроверки;
	//		МенеджерЗаписи.НачислениеПоКапРемонту = стр.НачислениеПоКапРемонту;
	//		МенеджерЗаписи.ПрогнозПоТекущимРаботам = стр.ПрогнозПоТекущимРаботам;
	//		МенеджерЗаписи.Исполнитель = стр.Исполнитель;
	//		МенеджерЗаписи.Записать();
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;

	//Егор для умд --

КонецПроцедуры

&НаСервере
// Обработка проверки заполнения формы на сервере.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" поля "ОбслуживающиеМастера".
Процедура ОбслуживающиеМастераПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка норм потребления услуг.
Процедура НормыПотребленияУслугУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаписатьЭлемент", ЭтаФорма),
					   "Перед добавлением норм потребления элемент необходимо записать. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // НормыПотребленияУслугУслугиПередНачаломДобавления()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "НормыПотребленияУслугУслугиПередНачаломДобавления()".
Процедура ОбработатьРезультатВопросаЗаписатьЭлемент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаписатьЭлемент()

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" списка норм потребления услуг.
Процедура НормыПотребленияУслугУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Период = НачалоМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередОкончаниемРедактирования" списка норм потребления услуг.
Процедура НормыПотребленияУслугУслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.НормыПотребленияУслугУслуги.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено значение в колонке ""Период""", Отказ);
			мБылиИзмененияНорм = Истина;
			Возврат;
		КонецЕсли;
		Если ТекущиеДанные.Услуга.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено значение в колонке ""Услуга""", Отказ);
			мБылиИзмененияНорм = Истина;
			Возврат;
		КонецЕсли;
		Если ТекущиеДанные.НормаПотребления.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено значение в колонке ""Норма""", Отказ);
			мБылиИзмененияНорм = Истина;
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Период = НачалоМесяца(ТекущиеДанные.Период);
		ТекущиеДанные.Размер = УПЖКХ_РаботаСОбъектамиУчетаСервер.УстановитьРазмерНормы(ТекущиеДанные.НормаПотребления);
		
		НайденнаяСтрокаВТаблице = НормыПотребленияУслуг.Услуги.НайтиСтроки(Новый Структура("Период, Услуга", 
												НачалоМесяца(ТекущиеДанные.Период), ТекущиеДанные.Услуга));
		
		Если НайденнаяСтрокаВТаблице.Количество() > 1 Тогда
			мБылиИзмененияНорм = Истина;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Запись для услуги """ + ТекущиеДанные.Услуга + """ на """ 
					+ Формат(ТекущиеДанные.Период, "ДЛФ=ДД; ДФ=""ММММ гггг""") + " г."" уже существует", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" списка норм потребления услуг.
Процедура НормыПотребленияУслугУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		СменитьАктуальностьНормНаСервере();
		мБылиИзмененияНорм = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" колонки "НормаПотребления" списка норм потребления услуг.
Процедура НормыПотребленияУслугУслугиПослеУдаления(Элемент)
	
	мБылиИзмененияНорм = Истина;
	СменитьАктуальностьНормНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" колонки "НормаПотребления" списка норм потребления услуг.
Процедура НормыПотребленияУслугУслугиНормаПотребленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не Элементы.НормыПотребленияУслугУслуги.ТекущиеДанные = Неопределено Тогда
		
		УслугаВладелец = Элементы.НормыПотребленияУслугУслуги.ТекущиеДанные.Услуга;
		КВП_РаботаСДиалогамиКлиент.ВыбратьНормуПотребления(Элемент, СтандартнаяОбработка, УслугаВладелец, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения копирования данных регистров "Адреса" и "Благоустройство объектов".
//
Процедура ВопросСкопироватьЗаписиРегистров(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			Если Записать() Тогда
				СкопироватьЗаписиРегистров(ОбъектКопирования);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ВопросСкопироватьЗаписиРегистров()

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Многоквартирное".
Процедура МногоквартирноеПриИзменении(Элемент)
	
	УстановитьВидимостьКоличестваПодземныхЭтажей(ЭтаФорма);
	
КонецПроцедуры // МногоквартирноеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "РассчитатьПлощадиЗдания".
Процедура РассчитатьПлощадиЗдания(Команда)
	
	ДанныеПоПлощадямЗдания = РассчитатьПлощадиЗданияНаСервере(Объект.Ссылка);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьЖилыхНежилыхПомещений",     Объект.ПлощадьЗданияЖилыхНежилыхПомещений);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьМестОбщегоПользования",     Объект.ПлощадьЗданияМестОбщегоПользования);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьСИндивидуальнымОтоплением", Объект.ПлощадьЗданияСИндивидуальнымОтоплением);
	ДанныеПоПлощадямЗдания.Свойство("ПлощадьОбщая",                     Объект.ПлощадьЗданияОбщая);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПоказатьВсеНормы".
Процедура ПоказатьВсеНормы(Команда)
	
	Кнопка = Элементы.КнопкаПоказатьВсеНормы;
	Кнопка.Пометка = Не Кнопка.Пометка;
	
	УстановитьОтборНормНаКлиенте(Элементы.НормыПотребленияУслугУслуги.ОтборСтрок, Не Кнопка.Пометка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьНормы".
Процедура ОбновитьНормы(Команда)
	
	СменитьАктуальностьНормНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьПлощади".
Процедура ОбновитьПлощади(Команда)
	
	ПрочитатьПлощади();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьБлагоустройство".
Процедура ОбновитьБлагоустройство(Команда)
	
	ПрочитатьВидыБлагоустройства();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьПрилегающиеТерритории".
Процедура ОбновитьПрилегающиеТерритории(Команда)
	
	ПрочитатьПрилегающаяТерритория();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьОборудования".
//
Процедура УстановитьОборудования(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
	СтруктураЗаполнения.Вставить("Установлено",     Истина);
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ВвестиАктуальныеСведения".
//
Процедура ВвестиАктуальныеСведения(Команда)
	
	ТекущиеДанные = Элементы.УстановленноеОборудование.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураЗаполнения.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		СтруктураЗаполнения.Вставить("Количество",      ТекущиеДанные.Количество);
		СтруктураЗаполнения.Вставить("Установлено",     Истина);
		
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СхемыУчета

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#Область ПроцедурыПодсистемыКонтактнаяИнформация

&НаКлиенте
// Обработчик события ПриИзменении поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриНажатии поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		ДополнительныеПараметры = Новый Структура("Элемент", Элемент);
		ОписаниеОповещения      = Новый ОписаниеОповещения("ОбработатьОтветПользователя", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса            = "Перед изменением адресных данных необходимо записать элемент.
								  |Записать?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , "Сохранить изменения");
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтаФорма, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события Очистка поля формы контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияОчистка(ЭтаФорма, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
//
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияВыполнитьКоманду(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные контактной информации.
//
Функция Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбновитьКонтактнуюИнформацию(ЭтаФорма, Объект, Результат);
	
	Если Не Результат = Неопределено Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("ИмяРеквизита", ЭтаФорма.ТекущийЭлемент.Имя);
		СтрокиДопРеквизитовЭлемента = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если СтрокиДопРеквизитовЭлемента.Количество() > 0 Тогда
			ВидАдреса = СтрокиДопРеквизитовЭлемента[0].Вид;
			Если ВидАдреса = Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания Тогда
				ЗначенияПолейXML = СтрокиДопРеквизитовЭлемента[0].Значение;
				
				СтруктАдрес = ПолучитьАдрес(Объект.Ссылка, Перечисления.КВП_ВидыАдресов.Здание, , , , ЗначенияПолейXML);
				УПЖКХ_ТиповыеМетодыКлиентСервер.СформироватьПредставлениеАдреса(СтруктАдрес, Объект.Наименование);
				Объект.НомерДома    = СтруктАдрес.Дом + ?(ПустаяСтрока(СтруктАдрес.Корпус), "", "/" + СтруктАдрес.Корпус);
				Модифицированность = Истина;
				объект.Наименование = СтрокиДопРеквизитовЭлемента[0].Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // Подключаемый_ОбновитьКонтактнуюИнформацию()


&НаКлиенте
// Процедура-обработчик событий после ответа пользователем на вопрос, вызванный
// из процедуры "ДобавитьНовыйАдрес()".
// При положительном результате вопроса процедура записывает элемент справочника.
//
// Параметры:
//  РезультатВопроса		 - 	КодВозвратаДиалога - результат ответа пользователя.
//  ДополнительныеПараметры	 - 	Структура - дополнительные данные.
//
Процедура ОбработатьОтветПользователя(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимаПроверкаНаименования = Ложь;
	Записать();
	НеобходимаПроверкаНаименования = Истина;
	
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтаФорма, ДополнительныеПараметры.Элемент);
	
КонецПроцедуры // ОбработатьОтветПользователя()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СТРАНИЦЫ "ОБСЛУЖИВАЮЩИЕ ОРГАНИЗАЦИИ"

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления" таблицы "СведенияОбОбслуживающихЗданияОрганизациях".
//
Процедура СведенияОбОбслуживающихЗданияОрганизацияхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаписатьЭлемент", ЭтаФорма),
					   "Перед добавлением норм потребления элемент необходимо записать. Продолжить?",
					   РежимДиалогаВопрос.ДаНет);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СТРАНИЦЫ "ОБЪЕКТЫ УЧЕТА И ОБОРУДОВАНИЕ"

&НаКлиенте
// Обработчик события "Выбор" поля "УстановленноеОборудование".
//
Процедура УстановленноеОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Период",          ТекущиеДанные.Период);
		СтруктураКлюча.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураКлюча.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		
		СтруктураПараметров = Новый Структура("Ключ", ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча));
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

//Егор для затратУмд
#Область  затратУмд
&НаКлиенте
Процедура РасходыНаРемонтПриИзменении(Элемент)
	ТеЭл = элементы.РасходыНаРемонт.ТекущиеДанные;
	ТеЭл.Год = Год(ТеЭл.дата);
КонецПроцедуры


&НаКлиенте
Процедура РасходыНаРемонтПрикрепитьФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
			АдресВХранилище = "";
	ВыбранноеИмяФайла = "";
	
	Если ПоместитьФайл (АдресВХранилище, , ВыбранноеИмяФайла, , УникальныйИдентификатор) Тогда
		Файл = Новый Файл (ВыбранноеИмяФайла);
		ТеЭл = элементы.РасходыНаРемонт.ТекущиеДанные;
		ТеЭл.ПрикрепитьФайл = Файл.Имя;
		Объект.ИмяФайлаДоговора = Файл.Имя;
		ТеЭл.СсылкаНаФайлВоВременномхранилище = АдресВХранилище;
		СсылкаНаФайлВоВременномхранилище = АдресВХранилище;
		Модифицированность = истина ;
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
		//МойФайл = Новый ДвоичныеДанные(СсылкаНаФайлВоВременномХранилище);

		//сохранитьФайл(ДвоичныеДанные);
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.имя = Файл.Имя;		
		НоваяСтрока.данные = ДвоичныеДанные;
		НоваяСтрока.урл = ТеЭл.СсылкаНаФайлВоВременномхранилище;
	КонецЕсли;
		
	
КонецПроцедуры

Процедура сохранитьФайл(МойФайл) 
	  	ФайлДоговора = Новый ХранилищеЗначения(МойФайл);

КонецПроцедуры

Функция ПолучитьТЗ(урл)
	ТабЗнч = новый ТаблицаЗначений;
	табЗнч.Колонки.Добавить("Имя");
	табЗнч.Колонки.Добавить("Данные");
	табЗнч.Колонки.Добавить("урл");


	
	
	

	Для каждого Стр из ТЗ цикл
		ТЗдобавить 				= ТабЗнч.Добавить();
		ТЗдобавить.Имя  = Стр.Имя;
		ТЗдобавить.Данные  = Стр.Данные;
		ТЗдобавить.урл  = Стр.урл;

	КонецЦикла;
		
		
		ссыль = табЗнч.найти(урл,"урл");
	     СсылкаД = ссыль.данные;
	возврат СсылкаД;	
КонецФункции

&НаКлиенте
Процедура РасходыНаРемонтПрикрепитьФайлОткрытие(Элемент, СтандартнаяОбработка)
		СтандартнаяОбработка = ложь;
	ТеЭл = элементы.РасходыНаРемонт.ТекущиеДанные;

  Если ТеЭл.ПрикрепитьФайл = "" Тогда
	  	Предупреждение ("НЕТ сохраненого в базе документа");
	Иначе
		СсылкаНаФайлВИБ =  ПоместитьВоВременноеХранилище(ПолучитьТЗ(ТеЭл.СсылкаНаФайлВоВременномхранилище));
		  ПолучитьФайл(СсылкаНаФайлВИБ, ТеЭл.ПрикрепитьФайл);
	  КонецЕсли;

КонецПроцедуры


#КонецОбласти


//егор осмотрУдм

#Область осмотрУмд
	&НаСервере
Процедура ОбновитьТабОсмотров()
		 таблица.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДляЖЭУСрезПоследних.Оценка КАК Оценка,
		|	ДляЖЭУСрезПоследних.РекомендуемыеРаботы КАК РекомендуемыеРаботы,
		|	ДляЖЭУСрезПоследних.Элемент КАК Элемент,
		|	ДляЖЭУСрезПоследних.ОбъектУчета КАК ОбъектУчета,
		|	ДляЖЭУСрезПоследних.Количество КАК Количество,
		|	ДляЖЭУСрезПоследних.ЕдиницыИзмерения КАК ЕдиницыИзмерения,
		|	ДляЖЭУСрезПоследних.Стоимость КАК Стоимость,
		|	ДляЖЭУСрезПоследних.VРабот КАК VРабот,
		|	ДляЖЭУСрезПоследних.VПроцентОтРабот КАК VПроцентОтРабот,
		|	ДляЖЭУСрезПоследних.СсылкаНаСмету КАК СсылкаНаСмету,
		|	ДляЖЭУСрезПоследних.ИмяСмета КАК ИмяСмета,
		|	ДляЖЭУСрезПоследних.Комментарий КАК Комментарий,
		|	ДляЖЭУСрезПоследних.Цена КАК Цена,
		|	ДляЖЭУСрезПоследних.Выполнено КАК Выполнено,
		|	ДляЖЭУСрезПоследних.Период КАК Период,
		|	ДляУмдРаботыТабСрезПоследних.НачислениеПоКапРемонту КАК НачислениеПоКапРемонту,
		|	ДляУмдРаботыТабСрезПоследних.ПрогнозПоТекущимРаботам КАК ПрогнозПоТекущимРаботам,
		|	ДляУмдРаботыТабСрезПоследних.Исполнитель КАК Исполнитель,
		|	ДляЖЭУСрезПоследних.ИсточникФинансирования
		|ИЗ
		|	РегистрСведений.ДляЖЭУ.СрезПоследних(&Период, ОбъектУчета = &ОбъектУчета) КАК ДляЖЭУСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДляУмдРаботыТаб.СрезПоследних КАК ДляУмдРаботыТабСрезПоследних
		|		ПО ДляЖЭУСрезПоследних.ОбъектУчета = ДляУмдРаботыТабСрезПоследних.ОбъектУчета
		|			И ДляЖЭУСрезПоследних.Элемент = ДляУмдРаботыТабСрезПоследних.Элемент";
	
	Запрос.УстановитьПараметр("Период", ДатаПроверки);
	Запрос.УстановитьПараметр("ОбъектУчета", объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		новаяСтр = таблица.Добавить();
		новаяСтр.Период = ВыборкаДетальныеЗаписи.Период;
		новаяСтр.элемент = ВыборкаДетальныеЗаписи.элемент;
		новаяСтр.Количество = ВыборкаДетальныеЗаписи.количество;
		новаяСтр.ЕдиницыИзмерения = ВыборкаДетальныеЗаписи.ЕдиницыИзмерения;
		новаяСтр.Оценка = ВыборкаДетальныеЗаписи.Оценка;
		новаяСтр.РекомендуемыеРаботы = ВыборкаДетальныеЗаписи.РекомендуемыеРаботы;
		новаяСтр.Стоимость = ВыборкаДетальныеЗаписи.Стоимость;
		новаяСтр.Vработ = ВыборкаДетальныеЗаписи.Vработ;
		новаяСтр.VОтОбщего = ВыборкаДетальныеЗаписи.VПроцентОтРабот;
		новаяСтр.ПрикрепленнаяСмета =ВыборкаДетальныеЗаписи.ИмяСмета;
		новаяСтр.СсылкаНаСмету =ВыборкаДетальныеЗаписи.СсылкаНаСмету;
		новаяСтр.Комментарий =ВыборкаДетальныеЗаписи.Комментарий;
		новаяСтр.ЦенаЗаЕдИзм =ВыборкаДетальныеЗаписи.Цена;
		новаяСтр.Выполнено =ВыборкаДетальныеЗаписи.Выполнено;
		новаяСтр.НачислениеПоКапРемонту =ВыборкаДетальныеЗаписи.НачислениеПоКапРемонту;
		новаяСтр.ПрогнозПоТекущимРаботам =ВыборкаДетальныеЗаписи.ПрогнозПоТекущимРаботам;
		новаяСтр.Исполнитель =ВыборкаДетальныеЗаписи.Исполнитель;
		новаяСтр.ИсточникФинансирования =ВыборкаДетальныеЗаписи.ИсточникФинансирования;


	КонецЦикла;

КонецПроцедуры


Процедура ОбновитьТабАкт()
		 таблицаАкт.Очистить();
		 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДляЖЭУ.Оценка КАК Оценка,
		|	ДляЖЭУ.РекомендуемыеРаботы КАК РекомендуемыеРаботы,
		|	ДляЖЭУ.Элемент КАК Элемент,
		|	ДляЖЭУ.ОбъектУчета КАК ОбъектУчета,
		|	ДляЖЭУ.Количество КАК Количество,
		|	ДляЖЭУ.ЕдиницыИзмерения КАК ЕдиницыИзмерения,
		|	ДляЖЭУ.Стоимость КАК Стоимость,
		|	ДляЖЭУ.VРабот КАК VРабот,
		|	ДляЖЭУ.VПроцентОтРабот КАК VПроцентОтРабот,
		|	ДляЖЭУ.СсылкаНаСмету КАК СсылкаНаСмету,
		|	ДляЖЭУ.ИмяСмета КАК ИмяСмета,
		|	ДляЖЭУ.Комментарий КАК Комментарий,
		|	ДляЖЭУ.Цена КАК Цена,
		|	ДляЖЭУ.Выполнено КАК Выполнено,
		|	ДляЖЭУ.Период КАК Период,
		|	ДляЖЭУ.ИсточникФинансирования КАК ИсточникФинансирования
		|ИЗ
		|	РегистрСведений.ДляЖЭУ КАК ДляЖЭУ
		|ГДЕ
		|	ДляЖЭУ.ОбъектУчета = &ОбъектУчета
		|	И ДляЖЭУ.Период МЕЖДУ &dt1 И &dt2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	//Запрос.УстановитьПараметр("ДатаНач", '20131231');
	Запрос.УстановитьПараметр("dt1", НачалоДня(ДатаЗаполненияАкта));
	Запрос.УстановитьПараметр("dt2", КонецДня(ДатаЗаполненияАкта));

	Запрос.УстановитьПараметр("ОбъектУчета", объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		новаяСтр = таблицаАкт.Добавить();
		новаяСтр.Период = ВыборкаДетальныеЗаписи.Период;
		новаяСтр.элемент = ВыборкаДетальныеЗаписи.элемент;
		новаяСтр.Количество = ВыборкаДетальныеЗаписи.количество;
		новаяСтр.ЕдиницыИзмерения = ВыборкаДетальныеЗаписи.ЕдиницыИзмерения;
		новаяСтр.Оценка = ВыборкаДетальныеЗаписи.Оценка;
		новаяСтр.РекомендуемыеРаботы = ВыборкаДетальныеЗаписи.РекомендуемыеРаботы;
		новаяСтр.Стоимость = ВыборкаДетальныеЗаписи.Стоимость;
		новаяСтр.Vработ = ВыборкаДетальныеЗаписи.Vработ;
		новаяСтр.VОтОбщего = ВыборкаДетальныеЗаписи.VПроцентОтРабот;
		новаяСтр.ПрикрепленнаяСмета =ВыборкаДетальныеЗаписи.ИмяСмета;
		новаяСтр.СсылкаНаСмету =ВыборкаДетальныеЗаписи.СсылкаНаСмету;
		новаяСтр.Комментарий =ВыборкаДетальныеЗаписи.Комментарий;
		новаяСтр.ЦенаЗаЕдИзм =ВыборкаДетальныеЗаписи.Цена;
		новаяСтр.Выполнено =ВыборкаДетальныеЗаписи.Выполнено;
		//новаяСтр.НачислениеПоКапРемонту =ВыборкаДетальныеЗаписи.НачислениеПоКапРемонту;
		//новаяСтр.ПрогнозПоТекущимРаботам =ВыборкаДетальныеЗаписи.ПрогнозПоТекущимРаботам;
		//новаяСтр.Исполнитель =ВыборкаДетальныеЗаписи.Исполнитель;
		//новаяСтр.ИсточникФинансирования =ВыборкаДетальныеЗаписи.ИсточникФинансирования;


	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПроверкиПриИзменении(Элемент)
	ОбновитьТабОсмотров();
КонецПроцедуры

&НаКлиенте
Процедура таблицаПриИзменении(Элемент)
		ТекДанные = элементы.таблица.ТекущиеДанные;
	ТекДанные.Изм = истина;

КонецПроцедуры

&НаКлиенте
Процедура таблицаVработПриИзменении(Элемент)
	ТекДанные = элементы.таблица.ТекущиеДанные;
	ТекДанные.VОтОбщего = (ТекДанные.Vработ /  ТекДанные.Количество) * 100 ;
	посчитатьСтоимость();

КонецПроцедуры

&НаКлиенте
Процедура таблицаПрикрепленнаяСметаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	  Перем НовыйФайл;
	  
	  ТекДанные = элементы.таблица.ТекущиеДанные;
    Наименование  = объект.Наименование + "_" + ТекДанные.Элемент + "_" +Формат(ТекущаяДата(), "ДЛФ=ДДВ");
	//объект.ПослФотка = ПослФотка;
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Файл", 	Новый ДвоичныеДанные(ПутьКФайлу));
		ПараметрыЗаписи.Вставить("ИмяФайла",СтрЗаменить(ДиалогОткрытияФайла.ПолноеИмяФайла, ДиалогОткрытияФайла.Каталог, ""));
		//ЗаписатьДанные(ПараметрыЗаписи);
		НовыйФайл = Новый Структура("Наименование, ИмяФайла, Файл");
        НовыйФайл.Наименование = Наименование;
        НовыйФайл.ИмяФайла = ПараметрыЗаписи.ИмяФайла; 
        НовыйФайл.Файл =  ПараметрыЗаписи.Файл;
	
       ТекДанные.ПрикрепленнаяСмета =ПараметрыЗаписи.ИмяФайла; 
       ТекДанные.СсылкаНаСмету = СоздатьНовыйФайл(НовыйФайл);
	    
        	Иначе
		Текст = "ru = ""Файл не выбран!""; en = ""File not selected!""";
		Предупреждение(НСтр(Текст));
	КонецЕсли; 

КонецПроцедуры


	&НаСервере
Функция СоздатьНовыйФайл(СтруктураСправочника)

        Перем НовыйФайл,СпрПользователи;
		
		
        УмдФайлы = Справочники.ФайлыДляУмд;
		НовыйФайл = УмдФайлы.СоздатьЭлемент();
		НовыйФайл.Наименование = СтруктураСправочника.Наименование;
		НовыйФайл.ИмяФайла = СтруктураСправочника.ИмяФайла; 
		НовыйФайл.файл = Новый ХранилищеЗначения(СтруктураСправочника.Файл);
		Попытка
		        НовыйФайл.Записать();
		        Возврат НовыйФайл.Код;
		Исключение
		        Возврат 0;
		КонецПопытки;

	КонецФункции 


&НаКлиенте
	Процедура таблицаПрикрепленнаяСметаОткрытие(Элемент, СтандартнаяОбработка)
		ТекДанные = элементы.таблица.ТекущиеДанные;
		ОбъектЭлемента=открытьФайл(ТекДанные.СсылкаНаСмету);
		ПутьФайл = ПоместитьВоВременноеХранилище(ОбъектЭлемента, 
												   УникальныйИдентификатор);

		ПолучитьФайл(ПутьФайл,ТекДанные.ПрикрепленнаяСмета);

	КонецПроцедуры
	
	Функция открытьФайл(СсылкаНаСмету)
		
		ОбъектЭлемента = справочники.ФайлыДляУмд.НайтиПоКоду(СсылкаНаСмету);
		 
		возврат ОбъектЭлемента.файл.Получить();

		
	КонецФункции
	
	&НаСервере
Функция ПолучитьДанные(ОбъектЭлемента)
	
	ОбъектЭлемент = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектЭлемент.Файл.Получить();
	
КонецФункции

&НаКлиенте
Процедура таблицаПрикрепленнаяСметаПриИзменении(Элемент)
	ТекДанные = элементы.таблица.ТекущиеДанные;
	ТекДанные.Изм = истина;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАкт(Команда)
	ПечатьАктНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПечатьАктНаСервере()
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Здания.Этажей КАК Этажей,
	|	КВП_Здания.Подъездов КАК Подъездов,
	|	КВП_Здания.ГодПостройки КАК ГодПостройки,
	|	КВП_Здания.МатериалСтен КАК МатериалСтен,
	|	ПРЕДСТАВЛЕНИЕ(КВП_Здания.МатериалСтен) КАК МатериалСтенПредставление,
	|	КВП_Здания.ПлощадьЗданияОбщая КАК ПлощадьЗданияОбщая,
	|	КВП_Здания.ПлощадьЗданияЖилыхНежилыхПомещений КАК ПлощадьЗданияЖилыхНежилыхПомещений,
	|	КВП_Здания.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Объект,
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.Площадь,
	|	ВложенныйЗапрос2.Объект КАК Объект1,
	|	ВложенныйЗапрос2.Тип КАК Тип1,
	|	ВложенныйЗапрос2.Значение,
	|	ВложенныйЗапрос1.Объект КАК Объект2,
	|	ВложенныйЗапрос1.ВидМастера,
	|	ВложенныйЗапрос1.Мастер,
	|	КВП_Здания.ОбщаяПлощадьЗданияПоПаспорту как ОбщаяПлощадьЗданияПоПаспорту,
	|	КВП_Здания.ОбщаяПлощадьЖилыхПомещенийПоПаспорту как ОбщаяПлощадьЖилыхПомещенийПоПаспорту,
	|	КВП_Здания.ОбщаяПлощадьНежилыхПомещенийПоПаспорту как ОбщаяПлощадьНежилыхПомещенийПоПаспорту
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ПлощадиЗдания.Объект КАК Объект,
	|			КВП_ПлощадиЗдания.Тип КАК Тип,
	|			КВП_ПлощадиЗдания.Площадь КАК Площадь
	|		ИЗ
	|			РегистрСведений.КВП_ПлощадиЗдания КАК КВП_ПлощадиЗдания) КАК ВложенныйЗапрос
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ОбслуживающиеМастера.Объект КАК Объект,
	|			КВП_ОбслуживающиеМастера.ВидМастера КАК ВидМастера,
	|			КВП_ОбслуживающиеМастера.Мастер КАК Мастер
	|		ИЗ
	|			РегистрСведений.КВП_ОбслуживающиеМастера КАК КВП_ОбслуживающиеМастера) КАК ВложенныйЗапрос1
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос1.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ПрилегающаяТерриторияЗдания.Объект КАК Объект,
	|			КВП_ПрилегающаяТерриторияЗдания.Тип КАК Тип,
	|			КВП_ПрилегающаяТерриторияЗдания.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.КВП_ПрилегающаяТерриторияЗдания КАК КВП_ПрилегающаяТерриторияЗдания) КАК ВложенныйЗапрос2
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос2.Объект
	|ГДЕ
	|	КВП_Здания.Ссылка = &Ссылка";
	
		Запрос.Параметры.Вставить("Ссылка",объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьПодвалИнфа  = Макет.ПолучитьОбласть("ПодвалИнфа");
	ОбластьАдрес = Макет.ПолучитьОбласть("Адрес");
	ОбластьОбщиеСведения = Макет.ПолучитьОбласть("ОбщиеСведения");
	ОбластьШапкаКомиссии = Макет.ПолучитьОбласть("ШапкаКомиссии");
	ОбластьКомиссия = Макет.ПолучитьОбласть("ЧленыКомиссии");
	ОбластьПодвалКомисии = Макет.ПолучитьОбласть("ПодвалКомисии");
	ОбластьЗаголовокПодвал = Макет.ПолучитьОбласть("ЗаголовокПодвал"); 
	                                               
	ТабДок.Очистить();
	
	ОбластьЗаголовок.параметры.ШапкаДата = формат(ДатаЗаполненияАкта,"ДФ='ММММ yyyy'");
	Если ДатаЗаполненияАкта='20160912' или ДатаЗаполненияАкта= '20170912' тогда
		ОбластьЗаголовок.параметры.ПериодШапка = "ОСЕННЕГО ОСМОТРА МНОГОКВАРТИРНОГО ДОМА" ;
	ИначеЕсли ДатаЗаполненияАкта = '20170512' тогда
		ОбластьЗаголовок.параметры.ПериодШапка = "ВЕСЕНЕГО ОСМОТРА МНОГОКВАРТИРНОГО ДОМА" ;
	ИначеЕсли ДатаЗаполненияАкта = '20180507' тогда
		ОбластьЗаголовок.параметры.ПериодШапка = "ВЕСЕНЕГО ОСМОТРА МНОГОКВАРТИРНОГО ДОМА" ;

	КонецЕсли;
	
	ТабДок.Вывести(ОбластьЗаголовок);	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	

	
	Выборка = новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Выборка.Вставить("ГодПостройки",ВыборкаДетальныеЗаписи.ГодПостройки);
		Выборка.Вставить("МатериалСтенПредставление",ВыборкаДетальныеЗаписи.МатериалСтенПредставление);
		Выборка.Вставить("Этажей",ВыборкаДетальныеЗаписи.Этажей);    
		имя = СтрЗаменить(строка(ВыборкаДетальныеЗаписи.Тип.Наименование)," ","");		
		имя1 = СтрЗаменить(строка(ВыборкаДетальныеЗаписи.Тип1.Наименование)," ","");		
		Выборка.Вставить(имя1,ВыборкаДетальныеЗаписи.Значение);
		Выборка.Вставить(имя ,ВыборкаДетальныеЗаписи.Площадь);
		Выборка.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);

		//адрес = СтрЗаменить(Выборка.Ссылка,"186220, Карелия Респ, Кондопожский р-н,","");
		Выборка.Вставить("Подъездов",ВыборкаДетальныеЗаписи.Подъездов); 
		//Выборка.Вставить("Ссылка",адрес); 

		Выборка.Вставить("ОбщаяПлощадьЗданияПоПаспорту",ВыборкаДетальныеЗаписи.ОбщаяПлощадьЗданияПоПаспорту);
		Выборка.Вставить("ОбщаяПлощадьНежилыхПомещенийПоПаспорту",ВыборкаДетальныеЗаписи.ОбщаяПлощадьНежилыхПомещенийПоПаспорту);
		Выборка.Вставить("Мастер",ВыборкаДетальныеЗаписи.Мастер); 
		Выборка.Вставить("ВидМастера",ВыборкаДетальныеЗаписи.ВидМастера); 
		//ОбластьОбщиеСведения.Параметры.ГодПостройки.Цвет = WebЦвета.Аквамарин; 
		
	КонецЦикла;
		
		ОбластьАдрес.Параметры.Заполнить(Выборка);
	    ТабДок.Вывести(ОбластьАдрес);
		ТабДок.Вывести(ОбластьШапкаКомиссии);
	Для каждого стр из объект.ЧленыКомиссии цикл
		ОбластьКомиссия.Параметры.Должность = стр.должность;
		ОбластьКомиссия.Параметры.ФИО = стр.ФИО;
		ТабДок.Вывести(ОбластьКомиссия);
	КонецЦикла;
		табдок.Вывести(ОбластьПодвалКомисии);
		ОбластьОбщиеСведения.Параметры.Заполнить(Выборка);
		ТабДок.Вывести(ОбластьОбщиеСведения, ВыборкаДетальныеЗаписи.Уровень());
	

	//ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДляЖЭУ.Оценка КАК Оценка,
		|	ДляЖЭУ.РекомендуемыеРаботы КАК РекомендуемыеРаботы,
		|	ДляЖЭУ.Элемент КАК Элемент,
		|	ДляЖЭУ.ОбъектУчета КАК ОбъектУчета,
		|	ДляЖЭУ.Количество КАК Количество,
		|	ДляЖЭУ.ЕдиницыИзмерения КАК ЕдиницыИзмерения,
		|	ДляЖЭУ.Стоимость КАК Стоимость,
		|	ДляЖЭУ.VРабот КАК VРабот,
		|	ДляЖЭУ.VПроцентОтРабот КАК VПроцентОтРабот,
		|	ДляЖЭУ.СсылкаНаСмету КАК СсылкаНаСмету,
		|	ДляЖЭУ.ИмяСмета КАК ИмяСмета,
		|	ДляЖЭУ.Комментарий КАК Комментарий,
		|	ДляЖЭУ.Цена КАК Цена,
		|	ДляЖЭУ.Выполнено КАК Выполнено,
		|	ДляЖЭУ.Период КАК Период,
		|	ДляЖЭУ.ИсточникФинансирования КАК ИсточникФинансирования
		|ИЗ
		|	РегистрСведений.ДляЖЭУ КАК ДляЖЭУ
		|ГДЕ
		|	ДляЖЭУ.ОбъектУчета = &ОбъектУчета
		|	И ДляЖЭУ.Период МЕЖДУ &dt1 И &dt2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("ДатаНач", '20131231');
	Запрос.УстановитьПараметр("dt1", НачалоДня(ДатаЗаполненияАкта));
	Запрос.УстановитьПараметр("dt2", КонецДня(ДатаЗаполненияАкта));

	Запрос.УстановитьПараметр("ОбъектУчета", объект.Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 пп=1;
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		 ОбластьДетальныхЗаписей.Параметры.НомерСтроки = ПП;
		 Если ВыборкаДетальныеЗаписи.Элемент.наименование = "Наличие следов жизнедеятельности грызунов" тогда
			 ОбластьДетальныхЗаписей.Параметры.Оценка = "Нет";
		 Иначе  
			 
			 ОбластьДетальныхЗаписей.Параметры.Оценка = "Уд.";
			 
			 //	ОбластьДетальныхЗаписей.Параметры.Оценка = "Плохо";
			 //Иначе
			 //	ОбластьДетальныхЗаписей.Параметры.Оценка = "Хор.";
		 КонецЕсли;
		 ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
		 ПП=ПП+1;

	КонецЦикла;
	
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвалИнфа);
	ТабДок.Вывести(ОбластьЗаголовокПодвал);
	
		Для каждого стр из объект.ЧленыКомиссии цикл
		ОбластьПодвал.Параметры.Должность = стр.должность;
		ОбластьПодвал.Параметры.ФИО = стр.ФИО;
		ТабДок.Вывести(ОбластьПодвал);
	КонецЦикла;

	  элементы.группа10.ТекущаяСтраница = элементы.группа6;
	 
КонецПроцедуры


процедура ОбновитьЧленовКомиссии()
	объект.ЧленыКомиссии.Очистить();
	запрос = новый Запрос;
	 запрос.Текст=
	   "ВЫБРАТЬ
	 |	КВП_ОбслуживающиеМастера.Объект,
	 |	КВП_ОбслуживающиеМастера.ВидМастера,
	 |	КВП_ОбслуживающиеМастера.Мастер
	 |ИЗ
	 |	РегистрСведений.КВП_ОбслуживающиеМастера КАК КВП_ОбслуживающиеМастера
	 |ГДЕ
	 |	КВП_ОбслуживающиеМастера.Объект = &Объект";
	 Запрос.Параметры.Вставить("Объект",Объект.Ссылка);
	 выборка = запрос.Выполнить().Выбрать();
	 
	 пока выборка.Следующий() цикл
		фио = выборка.мастер;	 
	 КонецЦикла;
	
	
	членыКом = новый Соответствие;
		 членыКом.Вставить("Начальник ЖЭУ","Костюкевич Ольга Владимировна.");
		 членыКом.Вставить("Мастер ЖЭУ",фио);
		 членыКом.Вставить("Инженер ЖЭУ","Таничева Наталья Сергеевна");
		 членыКом.Вставить("Начальник АРС","Егоров Анатолий Сергеевич");
		 членыКом.Вставить("Начальник УБ","Станкевич Светлана Иосифовна");

		Для каждого стр из членыКом цикл
			новаястрока = Объект.ЧленыКомиссии.Добавить();
			новаястрока.ФИО = Справочники.ФизическиеЛица.НайтиПоНаименованию(стр.значение);
			новаястрока.Должность = стр.ключ;
		КонецЦикла;

КонецПроцедуры

Функция получитьЦенуНаРаботу(ВидРаботы)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыНаРаботыСрезПоследних.Период,
		|	ТарифыНаРаботыСрезПоследних.ВидРаботы,
		|	ТарифыНаРаботыСрезПоследних.ЦенаНаЕдИзм
		|ИЗ
		|	РегистрСведений.ТарифыНаРаботы.СрезПоследних(&Дата, ВидРаботы = &ВидРаботы) КАК ТарифыНаРаботыСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	 Запрос.УстановитьПараметр("ВидРаботы", ВидРаботы);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Цена =  ВыборкаДетальныеЗаписи.ЦенаНаЕдИзм;
	КонецЦикла;
	
возврат Цена;

КонецФункции

&НаКлиенте
Процедура посчитатьПредварительнуюСтоимость()
	ПредварительнаяСтоимость = 0;
	Для каждого стр из таблица цикл
		ПредварительнаяСтоимость = ПредварительнаяСтоимость + стр.Стоимость;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПаспортГотовности(Команда)
	СформироватьПаспортНаСервере();
КонецПроцедуры

процедура СформироватьПаспортНаСервере()
	 Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет(МакетПаспорта);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Здания.Этажей КАК Этажей,
	|	КВП_Здания.Подъездов КАК Подъездов,
	|	КВП_Здания.ГодПостройки КАК ГодПостройки,
	|	КВП_Здания.МатериалСтен КАК МатериалСтен,
	|	ПРЕДСТАВЛЕНИЕ(КВП_Здания.МатериалСтен) КАК МатериалСтенПредставление,
	|	КВП_Здания.ПлощадьЗданияОбщая КАК ПлощадьЗданияОбщая,
	|	КВП_Здания.ПлощадьЗданияЖилыхНежилыхПомещений КАК ПлощадьЗданияЖилыхНежилыхПомещений,
	|	КВП_Здания.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Объект,
	|	ВложенныйЗапрос.Тип,
	|	ВложенныйЗапрос.Площадь,
	|	ВложенныйЗапрос2.Объект КАК Объект1,
	|	ВложенныйЗапрос2.Тип КАК Тип1,
	|	ВложенныйЗапрос2.Значение,
	|	ВложенныйЗапрос1.Объект КАК Объект2,
	|	ВложенныйЗапрос1.ВидМастера,
	|	ВложенныйЗапрос1.Мастер,
	|	КВП_Здания.КолличествоКвартир
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ПлощадиЗдания.Объект КАК Объект,
	|			КВП_ПлощадиЗдания.Тип КАК Тип,
	|			КВП_ПлощадиЗдания.Площадь КАК Площадь
	|		ИЗ
	|			РегистрСведений.КВП_ПлощадиЗдания КАК КВП_ПлощадиЗдания) КАК ВложенныйЗапрос
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ОбслуживающиеМастера.Объект КАК Объект,
	|			КВП_ОбслуживающиеМастера.ВидМастера КАК ВидМастера,
	|			КВП_ОбслуживающиеМастера.Мастер КАК Мастер
	|		ИЗ
	|			РегистрСведений.КВП_ОбслуживающиеМастера КАК КВП_ОбслуживающиеМастера) КАК ВложенныйЗапрос1
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос1.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КВП_ПрилегающаяТерриторияЗдания.Объект КАК Объект,
	|			КВП_ПрилегающаяТерриторияЗдания.Тип КАК Тип,
	|			КВП_ПрилегающаяТерриторияЗдания.Значение КАК Значение
	|		ИЗ
	|			РегистрСведений.КВП_ПрилегающаяТерриторияЗдания КАК КВП_ПрилегающаяТерриторияЗдания) КАК ВложенныйЗапрос2
	|		ПО КВП_Здания.Ссылка = ВложенныйЗапрос2.Объект
	|ГДЕ
	|	КВП_Здания.Ссылка = &Ссылка";
	
		Запрос.Параметры.Вставить("Ссылка",объект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	ОбластьПодвалИнфа  = Макет.ПолучитьОбласть("ПодвалИнфа");
	ОбластьАдрес = Макет.ПолучитьОбласть("Адрес");
	ОбластьОбщиеСведения = Макет.ПолучитьОбласть("ОбщиеСведения");
	ОбластьШапкаКомиссии = Макет.ПолучитьОбласть("ШапкаКомиссии");
	ОбластьКомиссия = Макет.ПолучитьОбласть("ЧленыКомиссии");
	ОбластьПодвалКомисии = Макет.ПолучитьОбласть("ПодвалКомисии");
	ОбластьЗаголовокПодвал = Макет.ПолучитьОбласть("ЗаголовокПодвал"); 
	                                               
	ТабДок1.Очистить();
	табдок1.ПолеСверху=2;
	табдок1.ПолеСнизу =2;
	ТабДок1.Вывести(ОбластьЗаголовок);	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	

	
	Выборка = новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Выборка.Вставить("ГодПостройки",ВыборкаДетальныеЗаписи.ГодПостройки);
		Выборка.Вставить("МатериалСтенПредставление",ВыборкаДетальныеЗаписи.МатериалСтенПредставление);
		Выборка.Вставить("Этажей",ВыборкаДетальныеЗаписи.Этажей);    
		имя = СтрЗаменить(строка(ВыборкаДетальныеЗаписи.Тип.Наименование)," ","");		
		имя1 = СтрЗаменить(строка(ВыборкаДетальныеЗаписи.Тип1.Наименование)," ","");		
		Выборка.Вставить(имя1,ВыборкаДетальныеЗаписи.Значение);
		Выборка.Вставить(имя ,ВыборкаДетальныеЗаписи.Площадь);
		Выборка.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);

		//адрес = СтрЗаменить(Выборка.Ссылка,"186220, Карелия Респ, Кондопожский р-н,","");
		Выборка.Вставить("Подъездов",ВыборкаДетальныеЗаписи.Подъездов); 
		Выборка.Вставить("КолличествоКвартир",ВыборкаДетальныеЗаписи.КолличествоКвартир); 
		//Выборка.Вставить("Ссылка",адрес); 

		Выборка.Вставить("ПлощадьЗданияОбщая",ВыборкаДетальныеЗаписи.ПлощадьЗданияОбщая); 
		Выборка.Вставить("Мастер",ВыборкаДетальныеЗаписи.Мастер); 
		Выборка.Вставить("ВидМастера",ВыборкаДетальныеЗаписи.ВидМастера); 
		//ОбластьОбщиеСведения.Параметры.ГодПостройки.Цвет = WebЦвета.Аквамарин; 
		
	КонецЦикла;
		
		ОбластьАдрес.Параметры.Заполнить(Выборка);
	    ТабДок1.Вывести(ОбластьАдрес);
		//ТабДок1.Вывести(ОбластьШапкаКомиссии);
		
		//Если МакетПаспорта = "макетПаспорт" тогда
		//	Для каждого стр из объект.ЧленыКомиссии цикл
		//		ОбластьКомиссия.Параметры.Должность = стр.должность;
		//		ОбластьКомиссия.Параметры.ФИО = стр.ФИО;
		//		ТабДок1.Вывести(ОбластьКомиссия);
		//		
		//	КонецЦикла;
		//Иначе
		//	ТабДок1.Вывести(ОбластьКомиссия);
		//	
		//КонецЕсли;
		//ТабДок1.Вывести(ОбластьПодвалКомисии);
		ОбластьОбщиеСведения.Параметры.Заполнить(Выборка);
		ТабДок1.Вывести(ОбластьОбщиеСведения, ВыборкаДетальныеЗаписи.Уровень());
	

	//ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок1.Вывести(ОбластьШапкаТаблицы);

	   Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ДляЖЭУ.Оценка КАК Оценка,
	              |	ДляЖЭУ.РекомендуемыеРаботы КАК РекомендуемыеРаботы,
	              |	ДляЖЭУ.Элемент КАК Элемент,
	              |	ДляЖЭУ.ОбъектУчета КАК ОбъектУчета,
	              |	ДляЖЭУ.Количество КАК Количество,
	              |	ДляЖЭУ.ЕдиницыИзмерения КАК ЕдиницыИзмерения,
	              |	ДляЖЭУ.Стоимость КАК Стоимость,
	              |	ДляЖЭУ.VРабот КАК VРабот,
	              |	ДляЖЭУ.VПроцентОтРабот КАК VПроцентОтРабот,
	              |	ДляЖЭУ.СсылкаНаСмету КАК СсылкаНаСмету,
	              |	ДляЖЭУ.ИмяСмета КАК ИмяСмета,
	              |	ДляЖЭУ.Комментарий КАК Комментарий,
	              |	ДляЖЭУ.Цена КАК Цена,
	              |	ДляЖЭУ.Выполнено КАК Выполнено,
	              |	ДляЖЭУ.Период КАК Период,
	              |	ДляЖЭУ.ИсточникФинансирования КАК ИсточникФинансирования
	              |ИЗ
	              |	РегистрСведений.ДляЖЭУ КАК ДляЖЭУ
	              |ГДЕ
	              |	ДляЖЭУ.ОбъектУчета = &ОбъектУчета
	              |	И ДляЖЭУ.Период МЕЖДУ &dt1 И &dt2
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Период" ;
	
	Запрос.Параметры.Вставить("ОбъектУчета",Объект.Ссылка);
	Запрос.Параметры.Вставить("dt1",НачалоДня('20190901'));
	Запрос.Параметры.Вставить("dt2",КонецДня(ДатаПроверки));

		РезультатЗапроса = Запрос.Выполнить();

	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 Если ВыборкаДетальныеЗаписи.Выполнено тогда
		 //ОбластьДетальныхЗаписей.Параметры.ВыполненыеРаботы = ВыборкаДетальныеЗаписи.РекомендуемыеРаботы.Наименование + " (" + ВыборкаДетальныеЗаписи.VРабот +")";
		 ОбластьДетальныхЗаписей.Параметры.ВыполненыеРаботы ="Выполнено."
	 Иначе
		 ОбластьДетальныхЗаписей.Параметры.ВыполненыеРаботы = "";
		 КонецЕсли;
		ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		ТабДок1.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
	КонецЦикла;
	
	ТабДок1.Вывести(ОбластьПодвалТаблицы);
	//ТабДок1.Вывести(ОбластьПодвалИнфа);
	ТабДок1.Вывести(ОбластьЗаголовокПодвал);
	
	//Если МакетПаспорта = "макетПаспорт" тогда
		Для каждого стр из объект.ЧленыКомиссии цикл
			ОбластьПодвал.Параметры.Должность = стр.должность;
			ОбластьПодвал.Параметры.ФИО = стр.ФИО;
			ТабДок1.Вывести(ОбластьПодвал);
		КонецЦикла;
	//Иначе
	//	ТабДок1.Вывести(ОбластьПодвал);
	//	
	//КонецЕсли;
	  элементы.группа4.ТекущаяСтраница = элементы.группа9;

КонецПроцедуры

&НаКлиенте
Процедура таблицаПередУдалением(Элемент, Отказ)
	ТекСтрока = элементы.таблица.ТекущиеДанные;
	УдалитьЗаписьРегистра(объект.Ссылка,ДатаПроверки,ТекСтрока.Элемент);

КонецПроцедуры

Процедура УдалитьЗаписьРегистра(ОбъектУчета,Период,Элемент)
	МенеджерЗаписи = РегистрыСведений.ДляУмд.СоздатьМенеджерЗаписи();

	 МенеджерЗаписи.ОбъектУчета = ОбъектУчета;
	 МенеджерЗаписи.Элемент = Элемент;

		 МенеджерЗаписи.Период = Период;
   		 МенеджерЗаписи.Прочитать();
		 МенеджерЗаписи.Удалить();
КонецПроцедуры
	 


Процедура УдалитьЗаписьРегистраЖЭУ(ОбъектУчета,Период,Элемент)
	МенеджерЗаписи = РегистрыСведений.ДляЖЭУ.СоздатьМенеджерЗаписи();

	 МенеджерЗаписи.ОбъектУчета = ОбъектУчета;
	 МенеджерЗаписи.Элемент = Элемент;

		 МенеджерЗаписи.Период = Период;
   		 МенеджерЗаписи.Прочитать();
		 МенеджерЗаписи.Удалить();

КонецПроцедуры

	 
	 

&НаКлиенте
Процедура ТаблицаПланРаботПриИзменении(Элемент)
	ТекСтр=элементы.ТаблицаПланРабот.ТекущиеДанные;
	ТекСтр.Период = ДатаПланРаботы;
	записатьВРегистр();
КонецПроцедуры


процедура записатьВРегистр()
		
	 МенеджерЗаписи = РегистрыСведений.УмдПланРаботы.СоздатьМенеджерЗаписи();
   	
	
		Для Каждого СтрокаТаблицы Из ТаблицаПланРабот Цикл 
		
		 МенеджерЗаписи.ОбъектУчета = объект.Ссылка;
		 МенеджерЗаписи.РекомендуемыеРаботы = СтрокаТаблицы.РекомендуемыеРаботы;
		 МенеджерЗаписи.Период = СтрокаТаблицы.Период;
		

   		 МенеджерЗаписи.Прочитать();

		
		МенеджерЗаписи.РекомендуемыеРаботы = СтрокаТаблицы.РекомендуемыеРаботы; 
		МенеджерЗаписи.ЕдиницыИзмерения = СтрокаТаблицы.ЕдиницыИзмерения; 
		МенеджерЗаписи.Период = СтрокаТаблицы.Период;
		МенеджерЗаписи.Количество = СтрокаТаблицы.Количество; 
		МенеджерЗаписи.КоличествоПоПлану = СтрокаТаблицы.КоличествоПоПлану; 
		МенеджерЗаписи.СтоимостьРабот = СтрокаТаблицы.СтоимостьРабот;
		МенеджерЗаписи.ВыполненоПоПлану = СтрокаТаблицы.ВыполненоПоПлану; 
		МенеджерЗаписи.ВыполненоОтОбщего = СтрокаТаблицы.ВыполненоОтОбщего; 
		МенеджерЗаписи.Исполнитель = СтрокаТаблицы.Исполнитель;
		МенеджерЗаписи.ОбъектУчета = объект.Ссылка;
		
		
		
		//
		Если СтрокаТаблицы.Период <>  Дата(1,1,1) и ЗначениеЗаполнено(СтрокаТаблицы.РекомендуемыеРаботы) тогда
		//	//Если тогда
		//	//Иначе
		//	//КонецЕсли;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла; 

   
КонецПроцедуры


	&НаСервере
Процедура ОбновитьУмдПланРабот()
		 ТаблицаПланРабот.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УмдПланРаботыСрезПоследних.Период,
		|	УмдПланРаботыСрезПоследних.ОбъектУчета,
		|	УмдПланРаботыСрезПоследних.РекомендуемыеРаботы,
		|	УмдПланРаботыСрезПоследних.Количество,
		|	УмдПланРаботыСрезПоследних.СтоимостьРабот,
		|	УмдПланРаботыСрезПоследних.КоличествоПоПлану,
		|	УмдПланРаботыСрезПоследних.ЕдиницыИзмерения,
		|	УмдПланРаботыСрезПоследних.ВыполненоОтОбщего,
		|	УмдПланРаботыСрезПоследних.ВыполненоПоПлану,
		|	УмдПланРаботыСрезПоследних.Исполнитель
		|ИЗ
		|	РегистрСведений.УмдПланРаботы.СрезПоследних КАК УмдПланРаботыСрезПоследних
		|ГДЕ
		|	УмдПланРаботыСрезПоследних.Период = &Период
		|	И УмдПланРаботыСрезПоследних.ОбъектУчета = &ОбъектУчета";
	
	Запрос.УстановитьПараметр("Период", ДатаПланРаботы);
	Запрос.УстановитьПараметр("ОбъектУчета", объект.Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		новаяСтр = ТаблицаПланРабот.Добавить();
		новаяСтр.Период = ВыборкаДетальныеЗаписи.Период;
		новаяСтр.РекомендуемыеРаботы = ВыборкаДетальныеЗаписи.РекомендуемыеРаботы;
		новаяСтр.ЕдиницыИзмерения = ВыборкаДетальныеЗаписи.ЕдиницыИзмерения;
		новаяСтр.Количество = ВыборкаДетальныеЗаписи.Количество;
		новаяСтр.СтоимостьРабот = ВыборкаДетальныеЗаписи.СтоимостьРабот;
		//новаяСтр.Стоимость = ВыборкаДетальныеЗаписи.Стоимость;
		новаяСтр.КоличествоПоПлану = ВыборкаДетальныеЗаписи.КоличествоПоПлану;
		новаяСтр.ВыполненоОтОбщего = ВыборкаДетальныеЗаписи.ВыполненоОтОбщего;
		новаяСтр.ВыполненоПоПлану =ВыборкаДетальныеЗаписи.ВыполненоПоПлану;
		новаяСтр.Исполнитель =ВыборкаДетальныеЗаписи.Исполнитель;
	



	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРаботПередУдалением(Элемент, Отказ)
	ТекСтр=элементы.ТаблицаПланРабот.ТекущиеДанные;
	ТаблицаУдалитьЗапись(ТекСтр.Период,текстр.РекомендуемыеРаботы);

КонецПроцедуры

процедура ТаблицаУдалитьЗапись(Период,РекомендуемыеРаботы)
	     	МенеджерЗаписи = РегистрыСведений.УмдПланРаботы.СоздатьМенеджерЗаписи();

	 МенеджерЗаписи.ОбъектУчета = объект.Ссылка;
	 МенеджерЗаписи.РекомендуемыеРаботы = РекомендуемыеРаботы;

		 МенеджерЗаписи.Период = Период;
   		 МенеджерЗаписи.Прочитать();
		 МенеджерЗаписи.Удалить()
		 

КонецПроцедуры


&НаКлиенте
Процедура ДатаПланРаботыПриИзменении(Элемент)
	ОбновитьУмдПланРабот();
КонецПроцедуры


&НаКлиенте
Процедура таблицаРекомендуемыеРаботыПриИзменении(Элемент)
	посчитатьСтоимость();

КонецПроцедуры


&НаКлиенте
Процедура таблицаЦенаЗаЕдИзмПриИзменении(Элемент)
	посчитатьСтоимость();
КонецПроцедуры

&НаКлиенте
процедура посчитатьСтоимость()
		ТекДанные = элементы.таблица.ТекущиеДанные;
	ТекДанные.Изм = Истина;
	Цена = получитьЦенуНаРаботу(ТекДанные.РекомендуемыеРаботы);
	Если Цена = неопределено тогда
		
	Иначе
		ТекДанные.ЦенаЗаЕдИзм = получитьЦенуНаРаботу(ТекДанные.РекомендуемыеРаботы);
	КонецЕсли;
	ТекДанные.Стоимость = ТекДанные.Vработ * ТекДанные.ЦенаЗаЕдИзм;
	посчитатьПредварительнуюСтоимость();

КонецПроцедуры


&НаКлиенте
Процедура ДатаЗаполненияАктаПриИзменении(Элемент)
	 ОбновитьТабАкт();
КонецПроцедуры


&НаСервере
Процедура ЗаписатьАктНаСервере()
		для каждого стр из таблица Цикл
		Если стр.Изм тогда		
			МенеджерЗаписи = РегистрыСведений.ДляУмд.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.ОбъектУчета   = Объект.Ссылка; 
			МенеджерЗаписи.элемент = стр.Элемент; 
			МенеджерЗаписи.Оценка = стр.Оценка; 
			МенеджерЗаписи.ЕдиницыИзмерения = стр.ЕдиницыИзмерения; 
			МенеджерЗаписи.РекомендуемыеРаботы = стр.РекомендуемыеРаботы; 
			МенеджерЗаписи.количество = стр.Количество; 
			МенеджерЗаписи.Период = ДатаПроверки;
			МенеджерЗаписи.Стоимость = стр.Стоимость;
			МенеджерЗаписи.VРабот = стр.VРабот;
			МенеджерЗаписи.VПроцентОтРабот = стр.VОтОбщего;
			МенеджерЗаписи.СсылкаНаСмету = стр.СсылкаНаСмету;
			МенеджерЗаписи.ИмяСмета = стр.ПрикрепленнаяСмета;
			МенеджерЗаписи.Комментарий = стр.Комментарий;
			МенеджерЗаписи.Выполнено = стр.Выполнено;
			МенеджерЗаписи.ИсточникФинансирования = стр.ИсточникФинансирования;

		
			МенеджерЗаписи.Записать(); 
			Если   ЗначениеЗаполнено(стр.НачислениеПоКапРемонту) или ЗначениеЗаполнено(стр.ПрогнозПоТекущимРаботам) тогда
			МенеджерЗаписи = РегистрыСведений.ДляУмдРаботыТаб.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.ОбъектУчета   = Объект.Ссылка; 
			МенеджерЗаписи.элемент = стр.Элемент; 
			МенеджерЗаписи.Период = ДатаПроверки;
			МенеджерЗаписи.НачислениеПоКапРемонту = стр.НачислениеПоКапРемонту;
			МенеджерЗаписи.ПрогнозПоТекущимРаботам = стр.ПрогнозПоТекущимРаботам;
			МенеджерЗаписи.Исполнитель = стр.Исполнитель;
			МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьАкт(Команда)
	ЗаписатьАктНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗаписатьПаспортНаСервере()
		для каждого стр из таблицаАкт Цикл
		Если стр.Изм тогда		
			МенеджерЗаписи = РегистрыСведений.ДляЖЭУ.СоздатьМенеджерЗаписи(); 
			МенеджерЗаписи.ОбъектУчета   = Объект.Ссылка; 
			МенеджерЗаписи.элемент = стр.Элемент; 
			МенеджерЗаписи.Оценка = стр.Оценка; 
			МенеджерЗаписи.ЕдиницыИзмерения = стр.ЕдиницыИзмерения; 
			МенеджерЗаписи.РекомендуемыеРаботы = стр.РекомендуемыеРаботы; 
			МенеджерЗаписи.количество = стр.Количество; 
			МенеджерЗаписи.Период = стр.Период;
			МенеджерЗаписи.Стоимость = стр.Стоимость;
			МенеджерЗаписи.VРабот = стр.VРабот;
			МенеджерЗаписи.VПроцентОтРабот = стр.VОтОбщего;
			МенеджерЗаписи.СсылкаНаСмету = стр.СсылкаНаСмету;
			МенеджерЗаписи.ИмяСмета = стр.ПрикрепленнаяСмета;
			МенеджерЗаписи.Комментарий = стр.Комментарий;
			МенеджерЗаписи.Выполнено = стр.Выполнено;
			МенеджерЗаписи.ИсточникФинансирования = стр.ИсточникФинансирования;

		
			МенеджерЗаписи.Записать(); 
			//Если   ЗначениеЗаполнено(стр.НачислениеПоКапРемонту) или ЗначениеЗаполнено(стр.ПрогнозПоТекущимРаботам) тогда
			//МенеджерЗаписи = РегистрыСведений.ДляУмдРаботыТаб.СоздатьМенеджерЗаписи(); 
			//МенеджерЗаписи.ОбъектУчета   = Объект.Ссылка; 
			//МенеджерЗаписи.элемент = стр.Элемент; 
			//МенеджерЗаписи.Период = ДатаЗаполненияАкта;
			//МенеджерЗаписи.НачислениеПоКапРемонту = стр.НачислениеПоКапРемонту;
			//МенеджерЗаписи.ПрогнозПоТекущимРаботам = стр.ПрогнозПоТекущимРаботам;
			//МенеджерЗаписи.Исполнитель = стр.Исполнитель;
			//МенеджерЗаписи.Записать();
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьПаспорт(Команда)
	ЗаписатьПаспортНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОсмотрПриИзменении(Элемент)
	
		 		 ДатаЗаполненияАкта=Осмотр;
				 ОбновитьТабАкт();
КонецПроцедуры


&НаКлиенте
Процедура таблицаАктПриИзменении(Элемент)
		ТекДанные = элементы.таблицаАкт.ТекущиеДанные;
	ТекДанные.Изм = истина;
КонецПроцедуры


&НаКлиенте
Процедура таблицаАктПередУдалением(Элемент, Отказ)
	ТекСтрока = элементы.таблицаАкт.ТекущиеДанные;
	УдалитьЗаписьРегистраЖЭУ(объект.Ссылка,ТекСтрока.Период,ТекСтрока.Элемент);

КонецПроцедуры


&НаСервере
Процедура Приложение3НаСервере()
		Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Приложение3");
	

	ОбластьСтр1 = Макет.ПолучитьОбласть("Стр1");
	ОбластьШапка2стр = Макет.ПолучитьОбласть("Шапка2стр");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Таблица");
	                                               
	ТабДок.Очистить();
	ТабДок.Вывести(ОбластьСтр1);
	ОбластьШапка2стр.параметры.адрес = объект.Наименование;
	ТабДок.Вывести(ОбластьШапка2стр);	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДляЖЭУ.Оценка КАК Оценка,
		|	ДляЖЭУ.РекомендуемыеРаботы КАК РекомендуемыеРаботы,
		|	ДляЖЭУ.Элемент КАК Элемент,
		|	ДляЖЭУ.ОбъектУчета КАК ОбъектУчета,
		|	ДляЖЭУ.Количество КАК Количество,
		|	ДляЖЭУ.ЕдиницыИзмерения КАК ЕдиницыИзмерения,
		|	ДляЖЭУ.Стоимость КАК Стоимость,
		|	ДляЖЭУ.VРабот КАК VРабот,
		|	ДляЖЭУ.VПроцентОтРабот КАК VПроцентОтРабот,
		|	ДляЖЭУ.СсылкаНаСмету КАК СсылкаНаСмету,
		|	ДляЖЭУ.ИмяСмета КАК ИмяСмета,
		|	ДляЖЭУ.Комментарий КАК Комментарий,
		|	ДляЖЭУ.Цена КАК Цена,
		|	ДляЖЭУ.Выполнено КАК Выполнено,
		|	ДляЖЭУ.Период КАК Период,
		|	ДляЖЭУ.ИсточникФинансирования КАК ИсточникФинансирования
		|ИЗ
		|	РегистрСведений.ДляЖЭУ КАК ДляЖЭУ
		|ГДЕ
		|	ДляЖЭУ.ОбъектУчета = &ОбъектУчета
		|	И ДляЖЭУ.Период МЕЖДУ &dt1 И &dt2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("dt1", НачалоДня(ДатаЗаполненияАкта));
	Запрос.УстановитьПараметр("dt2", КонецДня(ДатаЗаполненияАкта));
	
	Запрос.УстановитьПараметр("ОбъектУчета", объект.Ссылка);

		РезультатЗапроса = Запрос.Выполнить();

	 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	 пп=1;
	 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		 ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		 ОбластьДетальныхЗаписей.Параметры.НомерСтроки = ПП;
		 Если ВыборкаДетальныеЗаписи.Элемент.наименование = "Наличие следов жизнедеятельности грызунов" тогда
			 ОбластьДетальныхЗаписей.Параметры.Оценка = "Нет";
		 Иначе  
			 
			 ОбластьДетальныхЗаписей.Параметры.Оценка = "Уд.";
			 
			 //	ОбластьДетальныхЗаписей.Параметры.Оценка = "Плохо";
			 //Иначе
			 //	ОбластьДетальныхЗаписей.Параметры.Оценка = "Хор.";
		 КонецЕсли;
		 ТабДок.Вывести(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи.Уровень());
		 ПП=ПП+1;

	КонецЦикла;
	

	ТабДок.Вывести(ОбластьПодвал);
	

	  элементы.группа10.ТекущаяСтраница = элементы.стрПриложение3;

КонецПроцедуры


&НаКлиенте
Процедура Приложение3(Команда)
	Приложение3НаСервере();
КонецПроцедуры
#КонецОбласти
#КонецОбласти