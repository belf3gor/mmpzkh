
#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьСпискиВыбораПолейФормы();
	
	Если Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Наименование = "";
		Иначе
			ЗаполнитьЗначенияРеквизитовПоУмолчанию();
		КонецЕсли;
	Иначе
		Кодировка = ?(Объект.Кодировка = "DOS", 1, 0);
	КонецЕсли;
	
	ЗначениеПереключателяПоляВыбораВидаИНоменклатурыУслуги = ?(Объект.ПолеВыбораВидаИНоменклатурыУслуги, 1, 0);
	
	ОбновитьОбщиеПараметры();
	
	УстановитьОграничениеТипаПараметраДляЗагрузкиПлатежей();
	
	Если Объект.Удалить_НастройкаСоответствияПолей.Количество() > 0 Тогда
		Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
			Если РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
				ЗагрузитьНастройкиСоответствияПолейВДерево();
			Иначе
				Если Объект.ШаблонРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
					ЗагрузитьНастройкиСоответствияПолейВДерево_ПоФорматуВыгрузкиВСистемуГородВариант8();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
			ЗагрузитьНастройкиСоответствияПолейВТаблицуВыгрузки();
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	УстановитьДополнительныеНастройкиДляРежимаОтладки();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура УстановитьДополнительныеНастройкиДляРежимаОтладки()
	
	ИспользуетсяРежимОтладки = Константы.УПЖКХ_ИспользоватьРежимОтладки.Получить();
	
	Если ИспользуетсяРежимОтладки Тогда
		Элементы.ТаблицаПараметровВыгрузкиДополнительно.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ВыдаватьВопросПриРегулированииКоличестваПУВДеревеПриУдалении = Истина;
	
	ОпределениеВидимостиВидаИНоменклатурыУслуги();
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = ПроверкаЗаполненияТЧНастройкаСоответствияПолей();
	
	Если Отказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Настройка """ + ТекущийОбъект.Наименование + """  не записана!");
	КонецЕсли;
	
	Если Кодировка Тогда
		ТекущийОбъект.Кодировка = "DOS";
	Иначе
		ТекущийОбъект.Кодировка = "Windows";
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Объект.Удалить_НастройкаСоответствияПолей.Очистить();
		
		ДеревоНастроек = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы();
		
		Если ДеревоНастроек.Количество() > 0 Тогда
			Для Каждого СтрокаДерева Из ДеревоНастроек Цикл
				НоваяСтрока = Объект.Удалить_НастройкаСоответствияПолей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
				Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
					НоваяСтрока = Объект.Удалить_НастройкаСоответствияПолей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Объект.Удалить_НастройкаСоответствияПолей.Очистить();
		
		Если ТаблицаПараметровВыгрузки.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаПараметровВыгрузки Цикл
				НоваяСтрока = Объект.Удалить_НастройкаСоответствияПолей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				Если СтрокаТаблицы.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Площадь") Тогда
					СтрокаТаблицы.УчитыватьДолюЛицевогоСчета = УчитыватьДолюЛицевогоСчета;
				ИначеЕсли СтрокаТаблицы.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты") Тогда
					ЗагрузитьНастройкиДаты(СтрокаТаблицы, "НастройкаПериода");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		// Ничего не делаем.
		
	КонецЕсли;
	
	// Если это не загрузка показаний ПУ по шаблону реестра, то проверяем значение поля "Символ-разделитель колонок".
	Если НЕ (ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И НЕ РучнойВариантНастройкиФорматаРеестраПоказаний) Тогда
		
		Если ЭтоЗагрузкаИзСистемПриемаПлатежей ИЛИ ЭтоУниверсальнаяВыгрузкаДанных Тогда
			Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.ПустаяСсылка");
		КонецЕсли;
		
		Объект.ШаблонРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПустаяСсылка");
		
		Если Объект.ФорматФайла = "TXT" ИЛИ Объект.ФорматФайла = "CSV" Тогда
			Если ПустаяСтрока(Объект.РазделительКолонок) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Разделитель колонок не указан.",,,, Отказ);
			ИначеЕсли ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета
					И Объект.РазделительКолонок = "Пробел" Тогда
				ПроверитьНастройкиПараметровПриРазделителеКолонокПробел();
			КонецЕсли;
		КонецЕсли;
		УдалитьПустыеСтрокиТаблицыНастройкаСоответствияПолей();
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипПериодаДолга".
Процедура ТипПериодаДолгаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПараметровВыгрузки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ТипПериодаДолга = ТипПериодаДолга;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Выгрузка_УчитыватьЛьготы".
Процедура Выгрузка_УчитыватьЛьготыПриИзменении(Элемент)
	
	ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ВидОперации".
Процедура ВидОперацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ВидОперации".
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации <> ВыбранноеЗначение Тогда
		
		Если (ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Количество() > 0)
		 ИЛИ Объект.Удалить_НастройкаСоответствияПолей.Количество() > 0 Тогда
			ПоказатьВопрос(	Новый ОписаниеОповещения("ОбоработатьРезультатВопросаВидОперацииПриИзменении", ЭтотОбъект, ВыбранноеЗначение),
							"Будет произведена очистка настроек соответствия полей. Продолжить?",
							РежимДиалогаВопрос.ДаНет,,
							КодВозвратаДиалога.Нет);
		Иначе
			ВидОперацииПриИзмененииПродолжение(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииОбработкаВыбора()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванной из процедуры "ВидОперацииПриИзменении()".
// При положительном ответе очищается таблица "НастройкаСоответствияПолей" и вызывается механизм
// подготовки к перерисовке схемы.
//
// Параметры:
//  РезультатВопроса		 - 	КодВозвратаДиалога - код ответа.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура ОбоработатьРезультатВопросаВидОперацииПриИзменении(РезультатВопроса, ВыбранноеЗначение) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Удалить_НастройкаСоответствияПолей.Очистить();
	ТаблицаПараметровВыгрузки.Очистить();
	
	ВидОперацииПриИзмененииПродолжение(ВыбранноеЗначение);
	
КонецПроцедуры // ОбоработатьРезультатВопросаВидОперацииПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" поля "Вариант настройки формата реестра".
Процедура ВариантНастройкиФорматаРеестраПоказанийПриборовУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Вариант настройки формата реестра".
Процедура ВариантНастройкиФорматаРеестраПоказанийПриборовУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета <> ВыбранноеЗначение Тогда
		Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ВыбранноеЗначение;
		
		ОбновитьОбщиеПараметры();
		ЗаполнитьСписокВыбораФорматаФайла();
		ЗаполнитьСписокВыбораПоляИдентификацииЛицевогоСчета();
		ЗаполнитьДеревоСтрокамиПоУмолчанию();
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Шаблон реестра показаний приборов учета".
Процедура ШаблонРеестраПоказанийПриборовУчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Шаблон реестра показаний приборов учета".
Процедура ШаблонРеестраПоказанийПриборовУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ШаблонРеестраПоказанийПриборовУчета <> ВыбранноеЗначение Тогда
		Объект.ШаблонРеестраПоказанийПриборовУчета = ВыбранноеЗначение;
		
		ОбновитьОбщиеПараметры();
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выводит описание шабллона реестра показаний приборов учета.
Процедура ШаблонРеестраПоказанийОписаниеНажатие(Элемент)
	
	ОписаниеВарианта = ПолучитьОписаниеШаблонаРеестраДанныхСПоказаниями();
	
	Если НЕ ПустаяСтрока(ОписаниеВарианта) Тогда
		ПоказатьПредупреждение(Неопределено, ОписаниеВарианта, , "Описание реестра показаний: " + Объект.ШаблонРеестраПоказанийПриборовУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает описание шаблона реестра показаний.
//
// Параметры:
// 
// Возвращаемое значение:
//  Строка - описание шаблона реестра показаний.
//
Функция ПолучитьОписаниеШаблонаРеестраДанныхСПоказаниями()
	
	Описание = "";
	
	Если Объект.ШаблонРеестраПоказанийПриборовУчета
	   = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8") Тогда
		Описание =  "# <Номер реестра>
					|# <Сумма реестра>
					|# <В том числе пеня>
					|# <Удержанная сумма>
					|# <Сумма к перечислению>
					|# <Число записей>
					|# <Код агента>
					|# <Номер услуги>
					|# <Дата формирования реестра>
					|# <Начало диапазона дат документов, входящих в реестр>
					|# <Конец диапазона дат документов, входящих в реестр>
					|#<Итоговые данные по реестру>" + Символы.ПС
					// Далее идут строки со сведениями по лицевым счетам в формате:
					+ "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма задолженности>;;;;"
					+ "<Номер экранной формы>:<Штрих код>:<Месяц расчетного периода>:<Год расчетного периода>:<Сумма пени>:"
					+ "<Номер счетчика 1>:<Тип счетчика 1>:<Показание счетчика 1>:::::::::::::::::::"
					+ "<Номер счетчика 8>:<Тип счетчика 8>:<Показание счетчика 8>;<Номер документа>;<Дата документа>";
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции // ПолучитьОписаниеШаблонаРеестраДанныхСПоказаниями()

&НаКлиенте
// Обработчик события "Очистка" поля "ФорматФайла".
Процедура ФорматФайлаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФорматФайла".
Процедура ФорматФайлаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ФорматФайла <> ВыбранноеЗначение Тогда
		Объект.ФорматФайла = ВыбранноеЗначение;
		
		УправлениеФормой();
		ПерерисовкаСхемы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьЗаголовок".
Процедура ВыводитьЗаголовокПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Символ-разделитель колонок".
Процедура РазделительКолонокОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Символ-разделитель колонок".
Процедура РазделительКолонокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = (Объект.РазделительКолонок <> ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Тип атрибута".
Процедура ВложенныеУзлыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Тип атрибута".
Процедура ВложенныеУзлыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВложенныеУзлы <> ВыбранноеЗначение Тогда
		Объект.ВложенныеУзлы = ВыбранноеЗначение;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "НастройкаСоответствияПолей".
Процедура НастройкаСоответствияПолейПриАктивизацииСтроки(Элемент)
	
	ПерерисовкаСхемы();
	
КонецПроцедуры // НастройкаСоответствияПолейПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "НастройкаСоответствияПолей".
Процедура НастройкаСоответствияПолейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.НастройкаСоответствияПолей.ТекущиеДанные;
		ТекущиеДанные.НомерКолонки = ПолучитьНомерКолонки();
	КонецЕсли;
	
КонецПроцедуры // НастройкаСоответствияПолейПриНачалеРедактирования()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкаСоответствияПолейПараметр".
Процедура НастройкаСоответствияПолейПараметрПриИзменении(Элемент)
	
	ТекущиеДанные = ПолучитьТекущиеДаныеТаблицПараметров();
	
	Если ТекущиеДанные <> Неопределено Тогда
		// При изменении параметра обнуляем значение НомерСвязаннойКолонки и Услуга
		ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
	ПерерисовкаСхемы(ТекущиеДанные);
	
КонецПроцедуры // НастройкаСоответствияПолейПараметрПриИзменении()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ЗначениеПереключателяПоляВыбораВидаИНоменклатурыУслуги".
Процедура ЗначениеПереключателяПоляВыбораВидаИНоменклатурыУслугиПриИзменении(Элемент)
	
	Объект.ПолеВыбораВидаИНоменклатурыУслуги = (ЗначениеПереключателяПоляВыбораВидаИНоменклатурыУслуги = 1);
	
КонецПроцедуры // ЗначениеПереключателяПоляВыбораВидаИНоменклатурыУслугиПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПолеИдентификацииУслуги".
Процедура ПолеИдентификацииУслугиПриИзменении(Элемент)
	
	ОпределениеВидимостиВидаИНоменклатурыУслуги();
	
КонецПроцедуры // ПолеИдентификацииУслугиПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПолеИдентификацииУслуги".
Процедура ПолеИдентификацииУслугиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Code", "код");
	СписокВыбора.Добавить("Name", "наименование");
	Если ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		СписокВыбора.Добавить("Vid",  "вид услуги");
		СписокВыбора.Добавить("Nom",  "номенклатура услуги");
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого ТекЭлемент Из СписокВыбора Цикл
		Элемент.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ПолеИдентификацииУслугиНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы формы "ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний".
Процедура ДеревоНастройкаСоответствияПолейЗагрузкаПоказанийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = ПолучитьТекущиеДаныеТаблицПараметров();
	
	ЗаполнитьНастройкиПоТекущейСтрокеДереваПоказаний(ТекущиеДанные);
	ПерерисовкаСхемы(ТекущиеДанные);
	
КонецПроцедуры // ДеревоНастройкаСоответствияПолейЗагрузкаПоказанийПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "Очистка" поля "Показания_СпособОпределенияПУ".
Процедура Показания_СпособОпределенияПУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Показания_СпособОпределенияПУ".
Процедура Показания_СпособОпределенияПУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Показания_СпособОпределенияПУ <> ВыбранноеЗначение Тогда
		
		Показания_СпособОпределенияПУ = ВыбранноеЗначение;
		
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.СпособОпределенияПУ = Показания_СпособОпределенияПУ;
		КонецЕсли;
		
		Показания_ОпределениеВидимостиСпособаОпределенияПУ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Показания_ИдентификацияПУ".
Процедура Показания_ИдентификацияПУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Показания_ИдентификацияПУ".
Процедура Показания_ИдентификацияПУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Показания_ИдентификацияПУ <> ВыбранноеЗначение Тогда
		
		Показания_ИдентификацияПУ = ВыбранноеЗначение;
		
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.ИдентификацияПУ = Показания_ИдентификацияПУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "РазделительДробнойЧасти".
Процедура РазделительДробнойЧастиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "РазделительДробнойЧасти".
Процедура РазделительДробнойЧастиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.РазделительДробнойЧасти <> ВыбранноеЗначение Тогда
		Объект.РазделительДробнойЧасти = ВыбранноеЗначение;
		ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Показания_СпособОпределенияУслуги".
Процедура Показания_СпособОпределенияУслугиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Показания_СпособОпределенияУслуги".
Процедура Показания_СпособОпределенияУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Показания_СпособОпределенияУслуги <> ВыбранноеЗначение Тогда
		Показания_СпособОпределенияУслуги = ВыбранноеЗначение;
		
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.СпособОпределенияУслуги = Показания_СпособОпределенияУслуги;
		КонецЕсли;
		
		Показания_ОпределениеВидимостиСпособаОпределенияПУ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Показания_ИдентификацияУслуги".
Процедура Показания_ИдентификацияУслугиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Показания_ИдентификацияУслуги".
Процедура Показания_ИдентификацияУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Показания_ИдентификацияУслуги <> ВыбранноеЗначение Тогда
		Показания_ИдентификацияУслуги = ВыбранноеЗначение;
		
		ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
		
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.ИдентификацияУслуги = Показания_ИдентификацияУслуги;
		КонецЕсли;
		
		Показания_ОпределениеВидимостиСпособаОпределенияПУ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "РазделительДаты".
Процедура РазделительДатыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "РазделительДаты".
Процедура РазделительДатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.РазделительДаты <> ВыбранноеЗначение Тогда
		Объект.РазделительДаты = ВыбранноеЗначение;
		ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкаДаты".
Процедура НастройкаДатыПриИзменении(Элемент)
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		ИдентификаторСтрокиДерева = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущаяСтрока;
		ЗагрузитьНастройкиСоставаДатыВСтрокуДерева(ИдентификаторСтрокиДерева);
	КонецЕсли;
	
КонецПроцедуры // НастройкаДатыПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Показания_ПорядковыйНомерПУ".
Процедура Показания_ПорядковыйНомерПУПриИзменении(Элемент)
	
	Если Показания_ПорядковыйНомерПУ = 0 Тогда
		Показания_ПорядковыйНомерПУ = 1;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ПорядковыйНомерПУ = Показания_ПорядковыйНомерПУ;
	КонецЕсли;
	
КонецПроцедуры // Показания_ПорядковыйНомерПУПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Показания_УслугаПУ".
Процедура Показания_УслугаПУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Показания_УслугаПУ));
	
	ФормаВыбора.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Параметры.ОтображатьСписком = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "ЭтоГруппа", Ложь,
								 ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ССпРасчета = Новый СписокЗначений;
	ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
	ССпРасчета.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "СпособРасчета", ССпРасчета,
								 ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораУслуги", ЭтаФорма);
	ФормаВыбора.Открыть();
	
КонецПроцедуры // Показания_УслугаПУНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Показания_УслугаПУ".
Процедура Показания_УслугаПУПриИзменении(Элемент)
	
	Если НЕ Показания_УслугаПУ.Пустая() Тогда
		ТекущиеДанныеДерева = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			СпособРасчета = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Показания_УслугаПУ, "СпособРасчета");
			Если СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика")
			 ИЛИ СпособРасчета = ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме") Тогда
				ТекущиеДанныеДерева.Услуга = Показания_УслугаПУ;
			Иначе
				ТекущиеДанныеДерева.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
				Показания_УслугаПУ         = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Необходимо выбрать услугу со способами расчета ""По показаниям счетчика"", ""По показаниям счетчика и норме"".");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Показания_УслугаПУПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КоличествоСчетчиковВОднойСтрокеТеге".
Процедура КоличествоСчетчиковВОднойСтрокеТегеПриИзменении(Элемент)
	
	Если НЕ ИмеетсяПУВНастройках() Тогда
		КоличествоСчетчиковВОднойСтрокеТеге = 1;
	КонецЕсли;
	
КонецПроцедуры // КоличествоСчетчиковВОднойСтрокеТегеПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" поля "КоличествоСчетчиковВОднойСтрокеТеге".
Процедура КоличествоСчетчиковВОднойСтрокеТегеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КоличествоПУ         = ОпределитьКоличествоПУПриОчистке();
	
	Если ЗадатьВопросПередОчисткойВсехПУ И КоличествоПУ > 1 Тогда
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьПУ", ЭтаФорма),
						"При очистке в настройках соответствия будут удалены все приборы учета кроме первого. Продолжить?",
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // КоличествоСчетчиковВОднойСтрокеТегеОчистка()

&НаКлиенте
// Обработчик события "Очистка" поля "Показания_УслугаПУ".
Процедура Показания_УслугаПУОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанныеДерева = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		ТекущиеДанныеДерева.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры // Показания_УслугаПУОчистка()

&НаКлиенте
// Обработчик события "Регулирование" поля "КоличествоСчетчиковВОднойСтрокеТеге".
Процедура КоличествоСчетчиковВОднойСтрокеТегеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 Тогда
		
		Если НЕ ИмеетсяПУВНастройках(Истина) Тогда
			Объект.КоличествоСчетчиковВОднойСтрокеТеге = 1;
		Иначе
			// Удаляем ПУ с конца, при этом выдаем вопрос 1 раз.
			Если ВыдаватьВопросПриРегулированииКоличестваПУВДеревеПриУдалении Тогда
				ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаПриРегулированииКоличестваПУВДереве", ЭтаФорма),
								"Будут удалены строки, соответствующие последнему прибору учета. Продолжить?",
								РежимДиалогаВопрос.ДаНет,,
								КодВозвратаДиалога.Нет);
				ВыдаватьВопросПриРегулированииКоличестваПУВДеревеПриУдалении = Ложь;
				Возврат;
			КонецЕсли;
			
			КоличествоСчетчиковВОднойСтрокеТегеРегулированиеФрагмент();
			
		КонецЕсли;
		
	ИначеЕсли Направление = 1 Тогда
		ДобавитьНовыйПриборУчетаСПараметрамиВДерево();
	КонецЕсли;
	
КонецПроцедуры // КоличествоСчетчиковВОднойСтрокеТегеРегулирование()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФорматДатыБезДней" и "ФорматПериодаБезДней".
Процедура ФорматДняИПериодаБезДнейПриИзменении(Элемент)
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Неопределено;
	
	Если Элемент.Имя = "ФорматДатыБезДней" Тогда
		Таблица = Объект.НастройкаДаты;
	ИначеЕсли Элемент.Имя = "ФорматПериодаБезДней" Тогда
		Таблица = Объект.НастройкаПериода;
	Иначе
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("ПараметрДаты", "День"));
	Если НайденныеСтроки.Количество() = 1 И (Объект.ФорматДатыБезДней ИЛИ Объект.ФорматПериодаБезДней) Тогда
		Таблица.Удалить(НайденныеСтроки[0]);
	ИначеЕсли НайденныеСтроки.Количество() = 0 И (НЕ Объект.ФорматДатыБезДней ИЛИ НЕ Объект.ФорматПериодаБезДней) Тогда
		Таблица.Добавить().ПараметрДаты = "День";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" поля "ТаблицаПараметровВыгрузки".
Процедура ТаблицаПараметровВыгрузкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ТаблицаПараметровВыгрузки.ТекущиеДанные;
		ТекущиеДанные.НомерКолонки = ПолучитьНомерКолонки();
	КонецЕсли;
	
КонецПроцедуры // НастройкаСоответствияПолейПриНачалеРедактирования()

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ТаблицаПараметровВыгрузки".
Процедура ТаблицаПараметровВыгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы "ТаблицаПараметровВыгрузки".
Процедура ТаблицаПараметровВыгрузкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И ТекущиеДанные.Параметр <> Неопределено
	   И НЕ ТекущиеДанные.Параметр.Пустая() Тогда
		
		Если ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Площадь") Тогда
			УчитыватьДолюЛицевогоСчета = ТекущиеДанные.УчитыватьДолюЛицевогоСчета;
			Если ТекущиеДанные.ВидПлощади.Пустая() Тогда
				ТекущиеДанные.ВидПлощади = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь");
			КонецЕсли;
			ВидПлощади = ТекущиеДанные.ВидПлощади;
		ИначеЕсли ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга")
			  ИЛИ ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений") Тогда
			Если ПустаяСтрока(ТекущиеДанные.СимволРазделительДробнойЧасти) Тогда
				ТекущиеДанные.СимволРазделительДробнойЧасти = СпискиВыбораПолей["СпРазделителейДробнойЧасти"][0].Значение;
				Объект.РазделительДробнойЧасти = ТекущиеДанные.СимволРазделительДробнойЧасти;
			Иначе
				Объект.РазделительДробнойЧасти = ТекущиеДанные.СимволРазделительДробнойЧасти;
			КонецЕсли;
			Если ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга") Тогда
				ТипПериодаДолга = ТекущиеДанные.ТипПериодаДолга;
			ИначеЕсли ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений") Тогда
				Выгрузка_УчитыватьЛьготы = ТекущиеДанные.УчитыватьЛьготы;
			КонецЕсли;
		ИначеЕсли ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты") Тогда
			ЗагрузитьНастройкиДаты(ТекущиеДанные, "НастройкаПериода");
		ИначеЕсли ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание") Тогда
			Выгрузка_ИдентификацияПУ = ТекущиеДанные.ИдентификацияПУ;
			Если Объект.ФорматФайла = "TXT" Тогда
				РазделительПарыПУПоказание = ТекущиеДанные.РазделительПарыПУПоказание;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПерерисовкаСхемы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Параметр" в таблице "ТаблицаПараметровВыгрузки".
Процедура ТаблицаПараметровВыгрузкиПараметрПриИзменении(Элемент)
	
	ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	ПерерисовкаСхемы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ВидПлощади".
Процедура ВидПлощадиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидПлощади".
Процедура ВидПлощадиПриИзменении(Элемент)
	
	ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "УчитыватьДолюЛицевогоСчета".
Процедура УчитыватьДолюЛицевогоСчетаПриИзменении(Элемент)
	
	ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Выгрузка_ИдентификацияПУ".
Процедура Выгрузка_ИдентификацияПУПриИзменении(Элемент)
	
	ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РазделительПарыПУПоказание".
Процедура РазделительПарыПУПоказаниеПриИзменении(Элемент)
	
	ЗаполнитьЗначениеНастройкиСтрокиПараметра(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Выгрузка_Идентификация".
Процедура Выгрузка_ИдентификацияПУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "РазделительПарыПУПоказание".
Процедура РазделительПарыПУПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкаПериода".
Процедура НастройкаПериодаПриИзменении(Элемент)
	
	ИдентификаторТекущейСтроки = ПолучитьИдентификаторТекущейСтроки();
	ТекущиеДанные = ПолучитьТекущиеДанныеПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если ТекущиеДанные <> Неопределено
	   И ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты") Тогда
		Для Каждого ТекущаяСтрокапериод Из Объект.НастройкаПериода Цикл
			Если ТекущаяСтрокапериод.ПараметрДаты = "Месяц" Тогда
				ТекущиеДанные.ПорядокМесяц = ТекущаяСтрокапериод.НомерСтроки;
			ИначеЕсли ТекущаяСтрокапериод.ПараметрДаты = "Год" Тогда
				ТекущиеДанные.ПорядокГод = ТекущаяСтрокапериод.НомерСтроки;
			ИначеЕсли ТекущаяСтрокапериод.ПараметрДаты = "День" Тогда
				Объект.НастройкаПериода.Удалить(ТекущаяСтрокапериод);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ДобавитьПриборУчетаЗагрузкаПоказаний".
Процедура ДобавитьПриборУчетаЗагрузкаПоказаний(Команда)
	
	ДобавитьНовыйПриборУчетаСПараметрамиВДерево();
	
КонецПроцедуры // ДобавитьПриборУчетаЗагрузкаПоказаний()

&НаКлиенте
// Обработчик команды "УдалитьПриборУчетаЗагрузкаПоказаний".
Процедура УдалитьПриборУчетаЗагрузкаПоказаний(Команда)
	
	ИдентификаторСтроки = ПолучитьИдентификаторТекущейСтроки();
	
	Если НЕ ИдентификаторСтроки = Неопределено Тогда
		УдалитьПриборУчетаИзДерева(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПриборУчетаЗагрузкаПоказаний()

&НаКлиенте
// Обработчик команды "ВыбратьПараметрЗаголовка".
Процедура ВыбратьПараметрЗаголовка(Команда)
	
	НачалоСтроки  = 0;
	НачалоКолонки = 0;
	КонецСтроки   = 0;
	КонецКолонки  = 0;
	Элементы.ТекстЗаголовкаВТекстовомФайле.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	Если НачалоСтроки <> КонецСтроки ИЛИ НачалоКолонки <> КонецКолонки Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Необходимо установить курсор. В данный момент в поле ""Текст заголовка"" выделена часть текста.");
		Возврат;
	КонецЕсли;
	
	СписокПараметров   = ПолучитьСписокПараметровДляЗаголовкаВТекстовомФайлеНаСервере();
	ПозицияКурсора     = Новый Структура("ИндексСтроки, ПозицияВСтроке", НачалоСтроки - 1, НачалоКолонки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПараметра", ЭтаФорма, ПозицияКурсора);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокПараметров, Элементы.ТекстЗаголовкаВТекстовомФайле);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Возвращает текущие данные таблиц с параметрами загрузки/выгрузки формы.
Функция ПолучитьТекущиеДаныеТаблицПараметров()
	
	ТекущиеДанные = Неопределено;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		ТекущиеДанные = Элементы.ТаблицаПараметровВыгрузки.ТекущиеДанные;
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		ТекущиеДанные = Элементы.НастройкаСоответствияПолей.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции // ПолучитьТекущиеДаныеТаблицПараметров()

&НаКлиенте
// Подготавливает список параметров
Функция УстановитьОграничениеТипаИСписокВыбораКолонокиПараметр()
	
	Если ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		Элементы.НастройкаСоответствияПолейПараметр.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ПараметрыСистемыЗагрузкиПлатежей");
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Элементы.ТаблицаПараметровВыгрузкиПараметр.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных");
		
	КонецЕсли;
	
КонецФункции // УстановитьОграничениеТипаИСписокВыбораКолонокиПараметр()

&НаКлиенте
// Процедура подготавливает параметры к перерисовки схемы и запускает механизм перерисовки.
Процедура ВидОперацииПриИзмененииПродолжение(ВыбранноеЗначение)
	
	Объект.ВидОперации = ВыбранноеЗначение;
	
	ОбновитьОбщиеПараметры();
	
	УправлениеФормой();
	
	ЗаполнитьСписокВыбораФорматаФайла();
	
	ЗаполнитьСписокВыбораПоляИдентификацииЛицевогоСчета();
	
	УстановитьОграничениеТипаИСписокВыбораКолонокиПараметр();
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		ЗаполнитьДеревоСтрокамиПоУмолчанию();
	Иначе
		Объект.ПолеИдентификацииСчетчика = "Name";
	КонецЕсли;
	
	ПерерисовкаСхемы();
	
КонецПроцедуры // ВидОперацииПриИзмененииПродолжение()

&НаКлиенте
// Заполняет дерево параметрами.
Процедура ЗаполнитьДеревоСтрокамиПоУмолчанию()
	
	ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Очистить();
	
	Если РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
		// Объязательная строка с параметром "Лицевой счет".
		ДобавитьСтрокуЛицевойСчетВДерево();
		ДобавитьНовыйПриборУчетаСПараметрамиВДерево();
	Иначе
		Если Объект.ШаблонРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8") Тогда
			ДобавитьСтрокуЛицевойСчетВДерево_ПоФорматуВыгрузкиВСистемуГородВариант8();
			ДобавитьНовыйПриборУчетаСПараметрамиВДерево_ПоФорматуВыгрузкиВСистемуГородВариант8();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеревоСтрокамиПоУмолчанию()

&НаКлиенте
// Добавляет строку параметра "Лицевой счет" в дерево.
Процедура ДобавитьСтрокуЛицевойСчетВДерево()
	
	НоваяСтрока = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр     = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет");
	НоваяСтрока.ИмяПараметра = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.НомерКолонки = 1;
	
	Объект.ПолеИдентификацииЛС = "Name";
	
КонецПроцедуры // ДобавитьСтрокуЛицевойСчетВДерево()

&НаКлиенте
// Добавляет новый прибор учета с настройками в дерево.
Процедура ДобавитьНовыйПриборУчетаСПараметрамиВДерево()
	
	ДеревоЗагрузкаПоказаний = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы();
	
	МаксимальныйПорядокПУВДереве = ПолучитьМаксимальныйПорядокПУВДереве(ДеревоЗагрузкаПоказаний);
	ПорядокПУ                    = МаксимальныйПорядокПУВДереве + 1;
	
	СтруктураНастроекПУ = Новый Структура;
	СтруктураНастроекПУ.Вставить("ПорядокПУ", ПорядокПУ);
	
	Если ПолучитьСтрокиПУВДереве().Количество() > 0 Тогда
		ЗаполнитьСтруктуруНастройкамиПредыдущегоПУ(СтруктураНастроекПУ, МаксимальныйПорядокПУВДереве);
	Иначе
		ЗаполнитьСтруктуруНастройкамиПоУмолчанию(СтруктураНастроекПУ);
	КонецЕсли;
	
	// Строка-родитель - прибор учета:
	НоваяСтрокаСчетчик = ДеревоЗагрузкаПоказаний.Добавить();
	НоваяСтрокаСчетчик.Параметр               = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика");
	ЗаполнитьЗначенияСвойств(НоваяСтрокаСчетчик, СтруктураНастроекПУ, "ПорядокПУ, СпособОпределенияПУ, ИдентификацияПУ, ПорядковыйНомерПУ, СпособОпределенияУслуги, ИдентификацияУслуги, Услуга");
	
	// Подчиненные строки:
	НоваяСтрока = НоваяСтрокаСчетчик.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр                      = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата");
	НоваяСтрока.ИмяПараметра                  = Строка(НоваяСтрока.Параметр);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекПУ, "ПорядокПУ, ПорядокДень, ПорядокМесяц, ПорядокГод, СимволРазделительДаты");
	
	НоваяСтрока = НоваяСтрокаСчетчик.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр                      = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное");
	НоваяСтрока.ИмяПараметра                  = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.СимволРазделительДробнойЧасти = СтруктураНастроекПУ.СимволРазделительДробнойЧастиДн;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекПУ, "ПорядокПУ");
	
	НоваяСтрока = НоваяСтрокаСчетчик.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр                      = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное");
	НоваяСтрока.ИмяПараметра                  = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.СимволРазделительДробнойЧасти = СтруктураНастроекПУ.СимволРазделительДробнойЧастиНч;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекПУ, "ПорядокПУ");
	
	НоваяСтрока = НоваяСтрокаСчетчик.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр                      = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое");
	НоваяСтрока.ИмяПараметра                  = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.СимволРазделительДробнойЧасти = СтруктураНастроекПУ.СимволРазделительДробнойЧастиПк;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекПУ, "ПорядокПУ");
	
	Объект.КоличествоСчетчиковВОднойСтрокеТеге = ПолучитьСтрокиПУВДереве().Количество();
	
	ОбновитьИменаИПорядковыеНомераПУ();
	
КонецПроцедуры // ДобавитьНовыйПриборУчетаСПараметрамиВДерево()

&НаКлиенте
// Добавляет строку параметра "Лицевой счет" в дерево.
Процедура ДобавитьСтрокуЛицевойСчетВДерево_ПоФорматуВыгрузкиВСистемуГородВариант8()
	
	НоваяСтрока = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр     = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет");
	НоваяСтрока.ИмяПараметра = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.НомерКолонки = 3;
	
	Объект.ПолеИдентификацииЛС = "ID";
	
КонецПроцедуры // ДобавитьСтрокуЛицевойСчетВДерево()

&НаКлиенте
// Добавляет новый прибор учета с настройками в дерево.
Процедура ДобавитьНовыйПриборУчетаСПараметрамиВДерево_ПоФорматуВыгрузкиВСистемуГородВариант8()
	
	ДеревоЗагрузкаПоказаний = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы();
	
	НоваяСтрока = ДеревоЗагрузкаПоказаний.Добавить();
	НоваяСтрока.Параметр              = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата");
	НоваяСтрока.ИмяПараметра          = "Дата показания";
	НоваяСтрока.НомерКолонки          = 10;
	НоваяСтрока.СимволРазделительДаты = "/";
	НоваяСтрока.ПорядокДень           = 1;
	НоваяСтрока.ПорядокМесяц          = 2;
	НоваяСтрока.ПорядокГод            = 3;
	
	// Строка-родитель - прибор учета:
	НоваяСтрокаСчетчик = ДеревоЗагрузкаПоказаний.Добавить();
	НоваяСтрокаСчетчик.Параметр            = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика");
	НоваяСтрокаСчетчик.ИмяПараметра        = "Приборы учета";
	НоваяСтрокаСчетчик.НомерКолонки        = 8;
	НоваяСтрокаСчетчик.СпособОпределенияПУ = "по значению поля реестра";
	НоваяСтрокаСчетчик.ИдентификацияПУ     = "коду";
	
	// Подчиненные строки:
	
	НоваяСтрока = НоваяСтрокаСчетчик.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр                      = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное");
	НоваяСтрока.ИмяПараметра                  = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.СимволРазделительДробнойЧасти = ".";
	
	НоваяСтрока = НоваяСтрокаСчетчик.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр                      = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное");
	НоваяСтрока.ИмяПараметра                  = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.СимволРазделительДробнойЧасти = ".";
	
	НоваяСтрока = НоваяСтрокаСчетчик.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Параметр                      = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое");
	НоваяСтрока.ИмяПараметра                  = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.СимволРазделительДробнойЧасти = ".";
	
КонецПроцедуры // ДобавитьНовыйПриборУчетаСПараметрамиВДерево()

&НаКлиенте
// Заполняет параметры для загрузки платежей из текущей строки дерева.
Процедура ЗаполнитьНастройкиПоТекущейСтрокеДереваПоказаний(ТекущиеДанные)
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Параметр = ТекущиеДанные.Параметр;
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			
			Показания_СпособОпределенияПУ     = ?(ПустаяСтрока(ТекущиеДанные.СпособОпределенияПУ), СпискиВыбораПолей.СпСпособыОпределенияПУ[0].Значение,
																										 ТекущиеДанные.СпособОпределенияПУ);
			
			Показания_ИдентификацияПУ         = ?(ПустаяСтрока(ТекущиеДанные.ИдентификацияПУ), СпискиВыбораПолей.СпИдентификацияПУ[0].Значение,
																									 ТекущиеДанные.ИдентификацияПУ);
			
			Показания_СпособОпределенияУслуги = ?(ПустаяСтрока(ТекущиеДанные.СпособОпределенияУслуги), СпискиВыбораПолей.СпСпособыОпределенияУслуги[0].Значение,
																									   ТекущиеДанные.СпособОпределенияУслуги);
			
			Показания_ИдентификацияУслуги     = ?(ПустаяСтрока(ТекущиеДанные.ИдентификацияУслуги), СпискиВыбораПолей.СпИдентификацияУслуги[0].Значение,
																										 ТекущиеДанные.ИдентификацияУслуги);
			
			Если НЕ ТекущиеДанные.Услуга.Пустая() Тогда
				Показания_УслугаПУ = ТекущиеДанные.Услуга;
			КонецЕсли;
			
			Если ТекущиеДанные.ПорядковыйНомерПУ = 0 Тогда
				Показания_ПорядковыйНомерПУ     = 1;
				ТекущиеДанные.ПорядковыйНомерПУ = Показания_ПорядковыйНомерПУ;
			Иначе
				Показания_ПорядковыйНомерПУ = ТекущиеДанные.ПорядковыйНомерПУ;
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное") Тогда
			
			Объект.РазделительДробнойЧасти = ?(ПустаяСтрока(ТекущиеДанные.СимволРазделительДробнойЧасти),
														СпискиВыбораПолей.СпРазделителейДробнойЧасти[0].Значение,
														ТекущиеДанные.СимволРазделительДробнойЧасти);
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное") Тогда
			
			Объект.РазделительДробнойЧасти = ?(ПустаяСтрока(ТекущиеДанные.СимволРазделительДробнойЧасти),
														СпискиВыбораПолей.СпРазделителейДробнойЧасти[0].Значение,
														ТекущиеДанные.СимволРазделительДробнойЧасти);
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое") Тогда
			
			Объект.РазделительДробнойЧасти = ?(ПустаяСтрока(ТекущиеДанные.СимволРазделительДробнойЧасти),
														СпискиВыбораПолей.СпРазделителейДробнойЧасти[0].Значение,
														ТекущиеДанные.СимволРазделительДробнойЧасти);
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата") Тогда
			
			Объект.РазделительДаты = ?(ПустаяСтрока(ТекущиеДанные.СимволРазделительДаты), СпискиВыбораПолей.СпРазделителейДаты[0].Значение,
																									 ТекущиеДанные.СимволРазделительДаты);
			
			Отбор = Новый Структура("ПараметрДаты");
			
			Отбор.ПараметрДаты = "День";
			СтрокиДата = Объект.НастройкаДаты.НайтиСтроки(Отбор);
			Если СтрокиДата.Количество() = 0 Тогда
				НоваяСтрока = Объект.НастройкаДаты.Вставить(ТекущиеДанные.ПорядокДень);
				НоваяСтрока.ПараметрДаты = "День";
			КонецЕсли;
			
			Отбор.ПараметрДаты = "Месяц";
			СтрокиМесяц = Объект.НастройкаДаты.НайтиСтроки(Отбор);
			Если СтрокиМесяц.Количество() = 0 Тогда
				НоваяСтрока = Объект.НастройкаДаты.Вставить(ТекущиеДанные.ПорядокМесяц);
				НоваяСтрока.ПараметрДаты = "Месяц";
			КонецЕсли;
			
			Отбор.ПараметрДаты = "Год";
			СтрокиГод = Объект.НастройкаДаты.НайтиСтроки(Отбор);
			Если СтрокиГод.Количество() = 0 Тогда
				НоваяСтрока = Объект.НастройкаДаты.Вставить(ТекущиеДанные.ПорядокГод);
				НоваяСтрока.ПараметрДаты = "Год";
			КонецЕсли;
			
			Объект.НастройкаДаты.Сортировать("НомерСтроки Возр");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиПоТекущейСтрокеДереваПоказаний()

&НаКлиентеНаСервереБезКонтекста
// Возвращает тип параметра "Лицевой счет".
Функция ЭтоДатаПоказанияПУ(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата"));
	
КонецФункции // ЭтоДатаПоказанияПУ()

&НаКлиентеНаСервереБезКонтекста
// Возвращает тип параметра "Лицевой счет".
Функция ЭтоЛицевойСчет(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет"));
	
КонецФункции // ЭтоЛицевойСчет()

&НаКлиентеНаСервереБезКонтекста
// Проверяет тип параметра "Номер счетчика".
Функция ЭтоПриборУчета(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика"));
	
КонецФункции // ЭтоПриборУчета()

&НаКлиентеНаСервереБезКонтекста
// Проверяет тип параметра "Показание дневное".
Функция ЭтоПоказаниеДневное(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное"));
	
КонецФункции // ЭтоПоказаниеДневное()

&НаКлиентеНаСервереБезКонтекста
// Проверяет тип параметра "Показание ночное".
Функция ЭтоПоказаниеНочное(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное"));
	
КонецФункции // ЭтоПоказаниеНочное()

&НаКлиентеНаСервереБезКонтекста
// Проверяет тип параметра "Показание пиковое".
Функция ЭтоПоказаниеПиковое(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое"));
	
КонецФункции // ЭтоПоказаниеПиковое()

&НаКлиенте
// Получает максимальный порядок ПУ в дереве.
Функция ПолучитьМаксимальныйПорядокПУВДереве(ДеревоЗагрузкаПоказаний)
	
	мСтрокиПУ = ПолучитьСтрокиПУВДереве();
	
	МаксимальныйПорядок = 0;
	
	Для Каждого ТекСтрока Из мСтрокиПУ Цикл
		МаксимальныйПорядок = Макс(МаксимальныйПорядок, ТекСтрока.ПорядокПУ);
	КонецЦикла;
	
	Возврат МаксимальныйПорядок;
	
КонецФункции // ПолучитьМаксимальныйПорядокПУВДереве()

&НаКлиенте
// Обновляет порядковые номера ПУ и имя параметра ПУ.
Процедура ОбновитьИменаИПорядковыеНомераПУ()
	
	СортироватьПараметрыПУВДеревеНаСервере();
	
	ДеревоЗагрузкаПоказаний = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы();
	
	НомерТекущегоПУ = 1;
	Для Каждого ТекущаяСтрока Из ДеревоЗагрузкаПоказаний Цикл
		
		Если ЭтоПриборУчета(ТекущаяСтрока.Параметр) Тогда
			
			ТекущаяСтрока.ПорядокПУ    = НомерТекущегоПУ;
			ТекущаяСтрока.ИмяПараметра = "Прибор учета " + НомерТекущегоПУ;
			
			Для Каждого ПодСтрокаПУ Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				ПодСтрокаПУ.ПорядокПУ = НомерТекущегоПУ;
			КонецЦикла;
			
			НомерТекущегоПУ = НомерТекущегоПУ + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьИменаИПорядковыеНомераПУ()

&НаКлиенте
// Удаляет строки в дереве, соответствующие текущему ПУ.
Процедура УдалитьПриборУчетаИзДерева(ИдентификаторСтроки)
	
	ТекущиеДанные = ПолучитьТекущиеДанныеПоИдентификатору(ИдентификаторСтроки);
	
	Если ЭтоЛицевойСчет(ТекущиеДанные.Параметр) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Установите курсор на строку, соответствующую прибору учета.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмеетсяПУВНастройках(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	СтрокаУдалена = Ложь;
	
	Если СтрокаРодитель = Неопределено Тогда
		Если ЭтоПриборУчета(ТекущиеДанные.Параметр) Тогда
			УдалитьСтрокуДерева(ТекущиеДанные);
			СтрокаУдалена = Истина;
		КонецЕсли;
	Иначе
		Если ЭтоПриборУчета(СтрокаРодитель.Параметр) Тогда
			СтрокаРодитель.ПолучитьЭлементы().Очистить();
			УдалитьСтрокуДерева(СтрокаРодитель);
			СтрокаУдалена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаУдалена Тогда
		Объект.КоличествоСчетчиковВОднойСтрокеТеге = ПолучитьСтрокиПУВДереве().Количество();
		ОбновитьИменаИПорядковыеНомераПУ();
	КонецЕсли;
	
КонецПроцедуры // УдалитьПриборУчетаИзДерева()

&НаКлиенте
// Процедура удаляет строку дерева значений по переданной строке.
Процедура УдалитьСтрокуДерева(СтрокаДерева)
	
	ИндексСтроки = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Индекс(СтрокаДерева);
	ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Удалить(ИндексСтроки);
	
КонецПроцедуры // УдалитьСтрокуДерева()

&НаКлиенте
// Проверяет существование параметра ПУ.
Функция ИмеетсяПУВНастройках(ПроверкаПриУдалении = Ложь, ВыводитьСообщение = Истина)
	
	мСтрокиПУВДереве = ПолучитьСтрокиПУВДереве();
	времКоличество   = мСтрокиПУВДереве.Количество();
	
	Если ПроверкаПриУдалении Тогда
		времКоличество = времКоличество - 1;
	КонецЕсли;
	
	Если времКоличество < 1 Тогда
		Если ВыводитьСообщение Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В настройках соответствия полей должен быть хотя бы один прибор учета.");
		КонецЕсли;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ИмеетсяПУВНастройках()

&НаКлиенте
// Возвращает массив строк ПУ в дереве.
Функция ПолучитьСтрокиПУВДереве()
	
	МассивСтрок = Новый Массив;
	ДеревоПоказанияПУ = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из ДеревоПоказанияПУ Цикл
		Если ЭтоПриборУчета(ТекСтрока.Параметр) Тогда
			МассивСтрок.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции // ПолучитьСтрокиПУВДереве()

&НаКлиенте
// Обработчик результата выбора услуги, вызванной в процедуре "Показания_УслугаПУНачалоВыбора()".
Процедура ОбработатьРезультатВыбораУслуги(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		// Заполним реквизит формы.
		Показания_УслугаПУ = Результат;
		// Заполним поле строки дерева.
		ТекущиеДанныеДерева = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			ТекущиеДанныеДерева.Услуга = Показания_УслугаПУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораУслуги()

&НаКлиенте
// Обработчик результата вопроса, вызванной в процедуре "КоличествоСчетчиковВОднойСтрокеТегеОчистка()".
Процедура ОбработатьРезультатВопросаУдалитьПУ(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьПараметрыПУ();
		Объект.КоличествоСчетчиковВОднойСтрокеТеге = ПолучитьСтрокиПУВДереве().Количество();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьПУ()

&НаКлиенте
// Процедура удаляет строки параметра прибора учета.
Процедура ОчиститьПараметрыПУ()
	
	СтрокиПУДерева = ПолучитьСтрокиПУВДереве();
	
	// Удаляем с конца дерева.
	мПоследнийИндекс = СтрокиПУДерева.ВГраница();
	
	Пока ИмеетсяПУВНастройках(Истина, Ложь) Цикл
		УдалитьСтрокуДерева(СтрокиПУДерева[мПоследнийИндекс]);
		мПоследнийИндекс = мПоследнийИндекс - 1;
	КонецЦикла;
	
	ОбновитьИменаИПорядковыеНомераПУ();
	
КонецПроцедуры // ОчиститьПараметрыПУ()

&НаКлиенте
// Функция возвращает количество параметров прибора учета в дереве.
Функция ОпределитьКоличествоПУПриОчистке()
	
	КоличествоПУ = ПолучитьСтрокиПУВДереве().Количество();
	
	Если КоличествоПУ = 1 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В настройках соответствия полей должен быть хотя бы один прибор учета.");
	ИначеЕсли КоличествоПУ > 1 Тогда
		ЗадатьВопросПередОчисткойВсехПУ = Истина;
	КонецЕсли;
	
	Возврат КоличествоПУ;
	
КонецФункции // ОпределитьКоличествоПУПриОчистке()

&НаКлиенте
// Обработчик результата вопроса, вызванной в процедуре "КоличествоСчетчиковВОднойСтрокеТегеРегулирование()".
Процедура ОбработатьРезультатВопросаПриРегулированииКоличестваПУВДереве(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСчетчиковВОднойСтрокеТегеРегулированиеФрагмент();
	
КонецПроцедуры // ОбработатьРезультатВопросаПриРегулированииКоличестваПУВДереве()

&НаКлиенте
// Процедура вызывает механизм удаления строки параметра прибора учета.
Процедура КоличествоСчетчиковВОднойСтрокеТегеРегулированиеФрагмент()
	
	СтрокиПУДерева  = ПолучитьСтрокиПУВДереве();
	ПоследняяСтрока = СтрокиПУДерева.Получить(СтрокиПУДерева.ВГраница());
	Идентификатор   = ПоследняяСтрока.ПолучитьИдентификатор();
	
	УдалитьПриборУчетаИзДерева(Идентификатор);
	
КонецПроцедуры // КоличествоСчетчиковВОднойСтрокеТегеРегулированиеФрагмент()

&НаКлиенте
// Процедура выводит сообщение о возможности наличи пробела в наименовании услуги, лицевого счета,
// в заводском номере, наименовании и идентификаторе счетчика для разделителя колонок "пробел".
Процедура ПроверитьНастройкиПараметровПриРазделителеКолонокПробел()
	
	ДеревоНастроек = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы();
	
	ВозможностьНаличияПробела = Ложь;
	
	ПоляСтрокой = "";
	Если Объект.ПолеИдентификацииЛС = "Name" Тогда
		ВозможностьНаличияПробела = Истина;
		ПоляСтрокой = ПоляСтрокой + """Лицевой счет""";
	КонецЕсли;
	
	Отбор = Новый Структура("Параметр", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика"));
	СтрокиПУ = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(Отбор);
	
	ЕстьВозможностьНаличияПробелаДляПУ = Ложь;
	Для Каждого ТекСтрока Из СтрокиПУ Цикл
		Если ТекСтрока.СпособОпределенияПУ = "по значению поля реестра" Тогда
			Если ТекСтрока.ИдентификацияПУ = "наименованию"
			 ИЛИ ТекСтрока.ИдентификацияПУ = "идентификатору"
			 ИЛИ ТекСтрока.ИдентификацияПУ = "заводскому номеру" Тогда
				ВозможностьНаличияПробела          = Истина;
				ЕстьВозможностьНаличияПробелаДляПУ = Истина;
			КонецЕсли;
		ИначеЕсли ТекСтрока.СпособОпределенияПУ = "по услуге" Тогда
			Если ТекСтрока.СпособОпределенияУслуги = "по значению поля реестра"
			   И ТекСтрока.ИдентификацияУслуги = "по наименованию" Тогда
				ВозможностьНаличияПробела          = Истина;
				ЕстьВозможностьНаличияПробелаДляПУ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВозможностьНаличияПробелаДляПУ Тогда
		ПоляСтрокой = ПоляСтрокой + ?(ПустаяСтрока(ПоляСтрокой), "", ",") + " ""Прибор учета""";
	КонецЕсли;
	
	Если ВозможностьНаличияПробела Тогда
		Если СтрНайти(ПоляСтрокой, ",") > 0 Тогда
			Текст = "При установке разделителя колонок ""Пробел"" значения полей "
				  + ПоляСтрокой
				  + " в файле реестра показаний могут быть неверно идентифицированы.";
		Иначе
			Текст = "При установке разделителя колонок ""Пробел"" значение поля "
				  + ПоляСтрокой
				  + " в файле реестра показаний может быть неверно идентифицировано.";
		КонецЕсли;
		ПоказатьПредупреждение(,Текст);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНастройкиПараметровПриРазделителеКолонокПробел()

&НаКлиенте
// Функция возвращает идентификатор текущей строки дерева значений.
Функция ПолучитьИдентификаторТекущейСтроки()
	
	Идентификатор = Неопределено;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		Идентификатор = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущаяСтрока;
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		Идентификатор = Элементы.ТаблицаПараметровВыгрузки.ТекущаяСтрока;
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		Идентификатор = Элементы.НастройкаСоответствияПолей.ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции // ПолучитьИдентификаторТекущейСтроки()

&НаКлиенте
// Функция возвращает текущие данные строки дерева по идентификатору строки.
Функция ПолучитьТекущиеДанныеПоИдентификатору(ИдентификаторСтроки)
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		Возврат ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИначеЕсли ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		Возврат Объект.Удалить_НастройкаСоответствияПолей.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		Возврат ТаблицаПараметровВыгрузки.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
КонецФункции // ПолучитьТекущиеДанныеПоИдентификатору()

&НаКлиенте
// Процедура перерисовки схемы.
Процедура ПерерисовкаСхемы(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = ПолучитьТекущиеДаныеТаблицПараметров();
	КонецЕсли;
	
	Параметр = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Параметр);
	
	Если (ЭтоУниверсальнаяВыгрузкаДанных И Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ЛицевойСчет"))
	 ИЛИ (ЭтоЗагрузкаИзСистемПриемаПлатежей И Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.ЛицевойСчет"))
	 ИЛИ (ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет")) Тогда
		Элементы.ПолеИдентификацииЛС.Заголовок = ?(ЭтоУниверсальнаяВыгрузкаДанных, "Поле идентификации л/с", "Лицевой счет определять по");
	КонецЕсли;
	
	ОтобразитьНастройкуПараметра(ТекущиеДанные);
	
	Если НЕ ЭтоУниверсальнаяВыгрузкаДанных Тогда
		ПодключитьОбработчикОжидания("СформироватьСхему", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры // ПерерисовкаСхемы()

&НаКлиенте
// Процедура формирует схему на форме.
Процедура СформироватьСхему()
	
	ТекущиеДанные = ПолучитьТекущиеДаныеТаблицПараметров();
	
	Параметр = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Параметр);
	
	ПланВыполненияСхема = СформироватьСхемуНаСервере(Параметр, ЭтоЗагрузкаИзСистемПриемаПлатежей, ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция формирует табличный документ схемы на сервере.
Функция СформироватьСхемуНаСервере(Параметр, ЭтоЗагрузкаИзСистемПриемаПлатежей, ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета)
	
	Если НЕ Параметр = Неопределено
	   И ЗначениеЗаполнено(Параметр) Тогда
		Параметр = СтрЗаменить(СокрЛП(Параметр), " ", "_");
		Если ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
			Параметр = Параметр + "_Платежи";
		ИначеЕсли ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
			Параметр = Параметр + "_Сч";
		КонецЕсли;
	Иначе
		Параметр = "НеВыбран";
	КонецЕсли;
	
	Макет = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПолучитьМакет("МакетФормДокументов");
	
	Попытка
		ОбластьСхема = Макет.ПолучитьОбласть("Область_" + Параметр);
	Исключение
		Параметр = "НеВыбран";
		ОбластьСхема = Макет.ПолучитьОбласть("Область_" + Параметр);
	КонецПопытки;
	
	ДокументСхема = Новый ТабличныйДокумент;
	ДокументСхема.Вывести(ОбластьСхема);
	
	Возврат ДокументСхема;
	
КонецФункции // СформироватьСхемуНаСервере()

&НаКлиенте
// Процедура отображение настройки параметра.
Процедура ОтобразитьНастройкуПараметра(ТекущиеДанныеДерева)
	
	// Для установки текущей страницы в Панели настроек.
	СтраницаНастроек = Неопределено;
	
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		
		Параметр = ТекущиеДанныеДерева.Параметр;
		
		Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
			
			Родитель = ТекущиеДанныеДерева.ПолучитьРодителя();
			
			Если Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет") Тогда
				
				СтраницаНастроек = Элементы.Найти("ЛицевойСчет");
				
			ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
				
				СтраницаНастроек = Элементы.Найти("НомерСчетчика");
				Элементы.НадписьПриборУчетаГруппаНомерСчетчика.Видимость = Истина;
				Элементы.НадписьПриборУчетаГруппаНомерСчетчика.Заголовок = ?(Родитель = Неопределено, 
																				  ТекущиеДанныеДерева.ИмяПараметра,
																				  Родитель.ИмяПараметра);
				// Для строки параметра ПУ определим видимости элементов на строанице панели настроек.
				Показания_ОпределениеВидимостиСпособаОпределенияПУ();
				
			ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата") Тогда
				
				СтраницаНастроек = Элементы.Найти("Дата");
				Элементы.НадписьПриборУчетаГруппаДата.Видимость = Истина;
				Элементы.НадписьПриборУчетаГруппаДата.Заголовок = ?(Родитель = Неопределено, 
																	   ТекущиеДанныеДерева.ИмяПараметра + " >> " + "Дата",
																	   Родитель.ИмяПараметра + " >> " + "Дата");
					
				Элементы.ФорматДатыБезДней.Видимость    = Ложь;
				Элементы.ФорматПериодаБезДней.Видимость = Ложь;
				
			ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное")
			   ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное")
			   ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое") Тогда
				
				СтраницаНастроек = Элементы.Найти("Сумма");
				// Определяем значение части заголовка названия ПУ в Панели настроек.
				Если ЭтоПоказаниеДневное(Параметр) Тогда
					СтрокаВложение = "Показание Дневное";
				ИначеЕсли ЭтоПоказаниеНочное(Параметр) Тогда
					СтрокаВложение = "Показание Ночное";
				ИначеЕсли ЭтоПоказаниеПиковое(Параметр) Тогда
					СтрокаВложение = "Показание Пиковое";
				КонецЕсли;
				
				Элементы.НадписьПриборУчетаГруппаСумма.Видимость = Истина;
				Элементы.НадписьПриборУчетаГруппаСумма.Заголовок = ?(Родитель = Неопределено, 
																		ТекущиеДанныеДерева.ИмяПараметра + " >> " + СтрокаВложение,
																		Родитель.ИмяПараметра + " >> " + СтрокаВложение);
				
				Элементы.Выгрузка_УчитыватьЛьготы.Видимость = Ложь;
			КонецЕсли;
		Иначе
			
			Если Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты")
			 ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Дата")
			 ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.ПериодОплаты") Тогда
				Элементы.ФорматДатыБезДней.Видимость    = Истина;
				Элементы.ФорматПериодаБезДней.Видимость = ЭтоЗагрузкаИзСистемПриемаПлатежей;
			КонецЕсли;
			
			ЭтоСуммаНачислений = Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений");
			ЭтоСуммаДолга      = Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга");
			
			Элементы.СуммаНачисленийПодсказка.Видимость = ЭтоСуммаНачислений;
			Элементы.Выгрузка_УчитыватьЛьготы.Видимость = ЭтоСуммаНачислений;
			Элементы.ТипПериодаДолга.Видимость          = ЭтоСуммаДолга;
			
			Элементы.Выгрузка_УчитыватьЛьготы.Видимость = Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений");
			
			Если ЭтоСуммаНачислений ИЛИ ЭтоСуммаДолга Тогда
				
				Параметр = "Сумма";
				
			ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Фамилия") Тогда
				
				Параметр = "Фамилия";
				
			КонецЕсли;
			
			СтраницаНастроек = Элементы.Найти("" + СтрЗаменить(Параметр, " ", ""));
			Элементы.НадписьПриборУчетаГруппаСумма.Видимость         = Ложь;
			Элементы.НадписьПриборУчетаГруппаДата.Видимость          = Ложь;
			Элементы.НадписьПриборУчетаГруппаНомерСчетчика.Видимость = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПанельНастройки.ТекущаяСтраница <> СтраницаНастроек Тогда
		Элементы.ПанельНастройки.ТекущаяСтраница = ?(СтраницаНастроек = Неопределено, Элементы.Пустая, СтраницаНастроек);
	КонецЕсли;
	
КонецПроцедуры // ОтобразитьНастройкуПараметра()

&НаКлиенте
// Функция возвращает номер колонки.
Функция ПолучитьНомерКолонки()
	
	Таблица = Неопределено;
	
	Если ЭтоУниверсальнаяВыгрузкаДанных Тогда
		Таблица = ТаблицаПараметровВыгрузки;
	Иначе
		Таблица = Объект.Удалить_НастройкаСоответствияПолей;
	КонецЕсли;
	
	МаксимальныйНомер = 0;
	
	Если Таблица <> Неопределено Тогда
		Для Каждого ТекущаяСтрока Из Таблица Цикл
			МаксимальныйНомер = Макс(МаксимальныйНомер, ТекущаяСтрока.НомерКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МаксимальныйНомер + 1;
	
КонецФункции // ПолучитьНомерКолонки()

&НаКлиенте
// Процедура удаляет строки таблицы "НастройкаСоответствияПолей", в которых номер колонки и параметр не заполнены.
Процедура УдалитьПустыеСтрокиТаблицыНастройкаСоответствияПолей()
	
	Отбор = Новый Структура("НомерКолонки, Параметр", 0);
	СтрокиСПустойСсылкойПараметраДляУдаления = Новый Массив;
	СтрокиСПараметромНеопределеноДляУдаления = Новый Массив;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		Отбор.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПустаяСсылка");
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		Отбор.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.ПустаяСсылка");
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		Отбор.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПустаяСсылка");
	КонецЕсли;
	
	СтрокиСПустойСсылкойПараметраДляУдаления = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(Отбор);
	
	Отбор.Параметр = Неопределено;
	СтрокиСПараметромНеопределеноДляУдаления = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(Отбор);
	
	Если СтрокиСПустойСсылкойПараметраДляУдаления.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из СтрокиСПустойСсылкойПараметраДляУдаления Цикл
			Объект.Удалить_НастройкаСоответствияПолей.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиСПараметромНеопределеноДляУдаления.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из СтрокиСПараметромНеопределеноДляУдаления Цикл
			Объект.Удалить_НастройкаСоответствияПолей.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // УдалитьПустыеСтрокиТаблицыНастройкаСоответствияПолей()

&НаКлиенте
// Процедура заполняет настройки выгрузки для текущего параметра.
Процедура ЗаполнитьЗначениеНастройкиСтрокиПараметра(ИмяНастройки)
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ИмяНастройки = "РазделительДробнойЧасти" Тогда
				ТекущиеДанные.СимволРазделительДробнойЧасти = Объект.РазделительДробнойЧасти; 
			ИначеЕсли ИмяНастройки = "РазделительДаты" Тогда
				ТекущиеДанные.СимволРазделительДаты = Объект.РазделительДаты; 
			ИначеЕсли ИмяНастройки = "ИдентификацияУслуги" Тогда
				ТекущиеДанные.СимволРазделительДаты = Объект.РазделительДаты;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		ТекущиеДанные = Элементы.ТаблицаПараметровВыгрузки.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ИмяНастройки = "РазделительДробнойЧасти" Тогда
				ТекущиеДанные.СимволРазделительДробнойЧасти = Объект.РазделительДробнойЧасти;
			ИначеЕсли ИмяНастройки = "ВидПлощади" Тогда
				ТекущиеДанные.ВидПлощади = ВидПлощади;
			ИначеЕсли ИмяНастройки = "УчитыватьДолюЛицевогоСчета" Тогда
				ТекущиеДанные.УчитыватьДолюЛицевогоСчета = УчитыватьДолюЛицевогоСчета;
			ИначеЕсли ИмяНастройки = "ТаблицаПараметровВыгрузкиПараметр" Тогда
				Если ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга")
				 ИЛИ ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений") Тогда
					ТекущиеДанные.СимволРазделительДробнойЧасти = Объект.РазделительДробнойЧасти;
				ИначеЕсли ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Площадь") Тогда
					ТекущиеДанные.ВидПлощади                 = ВидПлощади;
					ТекущиеДанные.УчитыватьДолюЛицевогоСчета = УчитыватьДолюЛицевогоСчета;
				ИначеЕсли ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты") Тогда
					ЗаполнитьТаблицуНастройкаДатыПериодаПоТекущейСтроке(ТекущиеДанные, "НастройкаПериода");
				КонецЕсли;
			ИначеЕсли ИмяНастройки = "Выгрузка_ИдентификацияПУ" Тогда
				ТекущиеДанные.ИдентификацияПУ = Выгрузка_ИдентификацияПУ;
			ИначеЕсли ИмяНастройки = "РазделительПарыПУПоказание" Тогда
				ТекущиеДанные.РазделительПарыПУПоказание = РазделительПарыПУПоказание;
			ИначеЕсли ИмяНастройки = "Выгрузка_УчитыватьЛьготы" Тогда
				ТекущиеДанные.УчитыватьЛьготы = Выгрузка_УчитыватьЛьготы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Заполняет список выбора у поля "Формат файла".
Процедура ЗаполнитьСписокВыбораФорматаФайла()
	
	СписокФорматов = Новый СписокЗначений;
	
	Если ЭтоУниверсальнаяВыгрузкаДанных Тогда
		СписокФорматов.Добавить("TXT", "Файл в формате (*.txt)");
		СписокФорматов.Добавить("XLS", "Файл в формате (*.xls, *.xlsx)");
		Если СтрНайти("XLS, TXT", Объект.ФорматФайла) = 0 Тогда
			Объект.ФорматФайла = "TXT";
		КонецЕсли;
	Иначе
		Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета
		   И НЕ РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
			СписокФорматов.Добавить("TXT", "Файл в формате (*.txt)");
		Иначе
			СписокФорматов.Добавить("TXT", "Файл в формате (*.txt)");
			СписокФорматов.Добавить("CSV", "Файл в формате (*.csv)");
			СписокФорматов.Добавить("XLS", "Файл в формате (*.xls, *.xlsx)");
			СписокФорматов.Добавить("DBF", "Файл в формате (*.dbf)");
			СписокФорматов.Добавить("XML", "Файл в формате (*.xml)");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ФорматФайла.СписокВыбора.Очистить();
	
	Для Каждого ТекущийФормат Из СписокФорматов Цикл
		Элементы.ФорматФайла.СписокВыбора.Добавить(ТекущийФормат.Значение, ТекущийФормат.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Заполняет список выбора у поля "ПоляИдентификацииЛицевогоСчета".
Процедура ЗаполнитьСписокВыбораПоляИдентификацииЛицевогоСчета()
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ЭтоУниверсальнаяВыгрузкаДанных Тогда
		СписокВыбора.Добавить("Code", "код");
		СписокВыбора.Добавить("Name", "наименование");
		СписокВыбора.Добавить("ID",   "идентификатор");
	ИначеЕсли ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И НЕ РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
		СписокВыбора.Добавить("Code",    "код");
		СписокВыбора.Добавить("Name",    "наименование");
		СписокВыбора.Добавить("ID",      "идентификатор");
	Иначе
		СписокВыбора.Добавить("Code",    "коду");
		СписокВыбора.Добавить("Name",    "наименованию");
		СписокВыбора.Добавить("ID",      "идентификатору");
		СписокВыбора.Добавить("BarCode", "штрихкоду");
	КонецЕсли;
	
	Элементы.ПолеИдентификацииЛС.СписокВыбора.Очистить();
	Для Каждого ТекущийЭлементСписка Из СписокВыбора Цикл
		Элементы.ПолеИдентификацииЛС.СписокВыбора.Добавить(ТекущийЭлементСписка.Значение, ТекущийЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Обновяет значения некоторых реквизитов формы, которые необходимы для упрощения кода
// при проверках значения Вида операции и др.
//
Процедура ОбновитьОбщиеПараметры()
	
	ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета = (Объект.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета);
	ЭтоЗагрузкаИзСистемПриемаПлатежей              = (Объект.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей);
	ЭтоУниверсальнаяВыгрузкаДанных                 = (Объект.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.УниверсальнаяВыгрузкаДанных);
	
	Если Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета.Пустая() Тогда
		Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную;
	КонецЕсли;
	
	Если Объект.ШаблонРеестраПоказанийПриборовУчета.Пустая() Тогда
		Объект.ШаблонРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8;
	КонецЕсли;
	
	РучнойВариантНастройкиФорматаРеестраПоказаний = (ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета
													И Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета
														= Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную);
	
	ЗаполнитьСписокВыбораФорматаФайла();
	
	ОбновитьЗначениеФорматаФайла();
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		Если ПустаяСтрока(Объект.ВариантЗагрузкиНулевыхПоказаний) Тогда
			Объект.ВариантЗагрузкиНулевыхПоказаний = СпискиВыбораПолей.СпВариантЗагрузкиНулевыхПоказаний[0].Значение; // "Загружать нулевые как 0"
			Модифицированность = Истина;
		КонецЕсли;
		Если РучнойВариантНастройкиФорматаРеестраПоказаний
		   И Объект.ШаблонРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
			Показания_СпособОпределенияПУ = "по значению поля реестра";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьОбщиеПараметры()

&НаСервере
// Устанавливает значение формата файла.
Процедура ОбновитьЗначениеФорматаФайла()
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Если НЕ РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
			
			Если Объект.ШаблонРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
				
				Объект.ФорматФайла = "TXT";
				Если Объект.НомерСтроки = 0 Тогда
					Объект.НомерСтроки = 1;
				КонецЕсли;
				Объект.РазделительКолонок = ";";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу параметров выгрузки на форме из табличной части "НастройкаСоответствияПолей".
Процедура ЗагрузитьНастройкиСоответствияПолейВТаблицуВыгрузки()
	
	Если ТаблицаПараметровВыгрузки.Количество() > 0 Тогда
		ТаблицаПараметровВыгрузки.Очистить();
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока ИЗ Объект.Удалить_НастройкаСоответствияПолей Цикл
		НоваяСтрока = ТаблицаПараметровВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Если ТекущаяСтрока.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга") Тогда
			РазделительДробнойЧасти = ТекущаяСтрока.СимволРазделительДробнойЧасти;
		КонецЕсли;
		Если ТекущаяСтрока.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений") Тогда
			РазделительДробнойЧасти = ТекущаяСтрока.СимволРазделительДробнойЧасти;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет значения реквизитов формы значениями по умолчанию.
Процедура ЗаполнитьЗначенияРеквизитовПоУмолчанию()
	
	Если Параметры.Свойство("ПараметрыВыбора")
	   И Параметры.ПараметрыВыбора.Свойство("ВидОперации")
	   И НЕ Параметры.ПараметрыВыбора.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ПустаяСсылка() Тогда
		Объект.ВидОперации = Параметры.ПараметрыВыбора.ВидОперации;
	Иначе
		Объект.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей;
	КонецЕсли;
	
	Объект.ПолеИдентификацииЛС                      = "Name";
	Объект.ПолеИдентификацииСчетчика                = "Name";
	Объект.ПолеИдентификацииУслуги                  = "Name";
	Объект.ПолеИдентификацииВидаИНоменклатурыУслуги = "Name";
	Объект.ПолеВыбораВидаИНоменклатурыУслуги        = Истина;
	Объект.ФорматФайла                              = "TXT";
	Объект.НомерСтроки                              = 1;
	Объект.РазделительКолонок                       = ";";
	Объект.РазделительДробнойЧасти                  = ",";
	Объект.РазделительДаты                          = ".";
	Объект.РазделительПериода                       = ".";
	
	Объект.ВариантЗагрузкиНулевыхПоказаний = СпискиВыбораПолей.СпВариантЗагрузкиНулевыхПоказаний[0].Значение; // "Загружать нулевые как 0"
	
	Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную;
	
	ЗначенияСоставаДаты = Новый СписокЗначений();
	ЗначенияСоставаДаты.Вставить(0, "День");
	ЗначенияСоставаДаты.Вставить(1, "Месяц");
	ЗначенияСоставаДаты.Вставить(2, "Год");
	
	врТаблицаДаты = Объект.НастройкаДаты.Выгрузить().СкопироватьКолонки();
	Для КолВоСтрок = 1 По ЗначенияСоставаДаты.Количество() Цикл
		врТаблицаДаты.Добавить();
	КонецЦикла;
	врТаблицаДаты.ЗагрузитьКолонку(ЗначенияСоставаДаты.ВыгрузитьЗначения(), "ПараметрДаты");
	
	Объект.НастройкаДаты.Загрузить(врТаблицаДаты);
	Объект.НастройкаПериода.Загрузить(врТаблицаДаты);
	
	Кодировка = 1;
	
КонецПроцедуры // ЗаполнитьЗначенияРеквизитовПоУмолчанию()

&НаСервере
// Заполняет реквизит "СпискиВыбораПолей" формы.
Процедура ПодговитьСпискиВыбораДляПолейФормы()
	
	СпискиВыбораПолей = Новый Структура;
	
	СпРазделителейКолонок = Новый СписокЗначений;
	СпРазделителейКолонок.Добавить(";",   ";   (точка с запятой)");
	СпРазделителейКолонок.Добавить(".",   ".   (точка)");
	СпРазделителейКолонок.Добавить(",",   ",   (запятая)");
	СпРазделителейКолонок.Добавить(":",   ":   (двоеточие)");
	СпРазделителейКолонок.Добавить("-",   "-   (тире)");
	СпРазделителейКолонок.Добавить("|",   "|   (слэш вертикальный)");
	СпРазделителейКолонок.Добавить("Таб", "Таб (табуляция)");
	СпРазделителейКолонок.Добавить("Пробел", "Пробел (пробел)");
	СпискиВыбораПолей.Вставить("СпРазделителейКолонок", СпРазделителейКолонок);
	
	СпРазделителейДробнойЧасти = Новый СписокЗначений;
	СпРазделителейДробнойЧасти.Добавить(",", ", (запятая)");
	СпРазделителейДробнойЧасти.Добавить(".", ". (точка)");
	СпРазделителейДробнойЧасти.Добавить("-", "- (тире)");
	СпРазделителейДробнойЧасти.Добавить("Без разделителя", "Без разделителя");
	СпискиВыбораПолей.Вставить("СпРазделителейДробнойЧасти", СпРазделителейДробнойЧасти);
	
	СпРазделителейДаты = Новый СписокЗначений;
	СпРазделителейДаты.Добавить(".", ". (точка)");
	СпРазделителейДаты.Добавить(",", ", (запятая)");
	СпРазделителейДаты.Добавить(";", "; (точка с запятой)");
	СпРазделителейДаты.Добавить("-", "- (тире)");
	СпРазделителейДаты.Добавить("/", "/ (слэш)");
	СпРазделителейДаты.Добавить("Без разделителя", "Без разделителя");
	СпискиВыбораПолей.Вставить("СпРазделителейДаты", СпРазделителейДаты);
	
	СпСпособыОпределенияПУ = Новый СписокЗначений;
	СпСпособыОпределенияПУ.Добавить("по значению поля реестра", "по значению поля реестра");
	СпСпособыОпределенияПУ.Добавить("по услуге",                "по услуге");
	СпискиВыбораПолей.Вставить("СпСпособыОпределенияПУ", СпСпособыОпределенияПУ);
	
	СпИдентификацияПУ = Новый СписокЗначений;
	СпИдентификацияПУ.Добавить("коду",              "коду");
	СпИдентификацияПУ.Добавить("наименованию",      "наименованию");
	СпИдентификацияПУ.Добавить("идентификатору",    "идентификатору");
	СпИдентификацияПУ.Добавить("заводскому номеру", "заводскому номеру");
	СпИдентификацияПУ.Добавить("номеру в ГИС ЖКХ",  "номеру в ГИС ЖКХ");
	СпискиВыбораПолей.Вставить("СпИдентификацияПУ", СпИдентификацияПУ);
	
	СпВыгрузка_ИдентификацияПУ = Новый СписокЗначений;
	СпВыгрузка_ИдентификацияПУ.Добавить("наименование",    "наименование");
	СпВыгрузка_ИдентификацияПУ.Добавить("код",             "код");
	СпВыгрузка_ИдентификацияПУ.Добавить("идентификатор",   "идентификатор");
	СпВыгрузка_ИдентификацияПУ.Добавить("заводской номер", "заводской номер");
	СпискиВыбораПолей.Вставить("СпВыгрузка_ИдентификацияПУ", СпВыгрузка_ИдентификацияПУ);
	
	СпРазделителейПарыПУПоказание = Новый СписокЗначений;
	СпРазделителейПарыПУПоказание.Добавить(":", ": (двоеточие)");
	СпРазделителейПарыПУПоказание.Добавить(";", "; (точка с запятой)");
	СпРазделителейПарыПУПоказание.Добавить("-", "- (тире)");
	СпРазделителейПарыПУПоказание.Добавить("/", "/ (слэш)");
	СпискиВыбораПолей.Вставить("СпРазделителейПарыПУПоказание", СпРазделителейПарыПУПоказание);
	
	СпТипыАтрибута = Новый СписокЗначений;
	СпТипыАтрибута.Добавить(Истина, "Вложенный узел");
	СпТипыАтрибута.Добавить(Ложь,   "Атрибут узла");
	СпискиВыбораПолей.Вставить("СпТипыАтрибута", СпТипыАтрибута);
	
	СпСпособыОпределенияУслуги = Новый СписокЗначений;
	СпСпособыОпределенияУслуги.Добавить("по значению поля реестра", "по значению поля реестра");
	СпСпособыОпределенияУслуги.Добавить("по ссылке на услугу",      "по ссылке на услугу");
	СпискиВыбораПолей.Вставить("СпСпособыОпределенияУслуги", СпСпособыОпределенияУслуги);
	
	СпИдентификацияУслуги = Новый СписокЗначений;
	СпИдентификацияУслуги.Добавить("по наименованию", "по наименованию");
	СпИдентификацияУслуги.Добавить("по коду",         "по коду");
	СпискиВыбораПолей.Вставить("СпИдентификацияУслуги", СпИдентификацияУслуги);
	
	СпВариантЗагрузкиНулевыхПоказаний = Новый СписокЗначений;
	СпВариантЗагрузкиНулевыхПоказаний.Добавить("Загружать нулевые как 0",              "Загружать нулевые как 0");
	СпВариантЗагрузкиНулевыхПоказаний.Добавить("Загружать нулевые как ""Не введено""", "Загружать нулевые как ""Не введено""");
	СпискиВыбораПолей.Вставить("СпВариантЗагрузкиНулевыхПоказаний", СпВариантЗагрузкиНулевыхПоказаний);
	
КонецПроцедуры // ПодговитьСпискиВыбораДляПолейФормы()

&НаСервере
// Процедура заполняет списки выбора полей формы.
Процедура УстановитьСпискиВыбораПолейФормы()
	
	ПодговитьСпискиВыбораДляПолейФормы();
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпТипыАтрибута Цикл
		Элементы.ВложенныеУзлы.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпРазделителейКолонок Цикл
		Элементы.РазделительКолонок.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпРазделителейДробнойЧасти Цикл
		Элементы.РазделительДробнойЧасти.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпРазделителейДаты Цикл
		Элементы.РазделительДаты.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
		Элементы.РазделительПериода.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпСпособыОпределенияПУ Цикл
		Элементы.Показания_СпособОпределенияПУ.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпИдентификацияПУ Цикл
		Элементы.Показания_ИдентификацияПУ.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпСпособыОпределенияУслуги Цикл
		Элементы.Показания_СпособОпределенияУслуги.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпИдентификацияУслуги Цикл
		Элементы.Показания_ИдентификацияУслуги.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпВыгрузка_ИдентификацияПУ Цикл
		Элементы.Выгрузка_ИдентификацияПУ.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпРазделителейПарыПУПоказание Цикл
		Элементы.РазделительПарыПУПоказание.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СпискиВыбораПолей.СпВариантЗагрузкиНулевыхПоказаний Цикл
		Элементы.ВариантЗагрузкиНулевыхПоказаний.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	ЗаполнитьСписокВыбораПоляИдентификацииЛицевогоСчета();
	
КонецПроцедуры // УстановитьСпискиВыбораПолейФормы()

&НаСервере
// Процедура подготавливает данные ТЧ "НастройкиСоответствияПолей" и загружает
// в дерево значений "ДеревоНастройкаСоответствияПолей" формы.
// Заполняет дерево согласно схеме:
//  +Лицевой счет.
//  +Прибор учёта 1.
//		Дата показаний     1.
//		Показание дневное  1.
//		Показание ночное   1.
//		Показание пиковое  1.
//	+Прибор учёта 2.
//		Дата показаний     2.
//		Показание дневное  2.
//		Показание ночное   2.
//		Показание пиковое  2.
//	...			...			...
//	+Прибор учета N.
//		Дата показаний     N.
//		Показание дневное  N.
//		Показание ночное   N.
//		Показание пиковое  N.
//
// где "+" - обозначает верхний уровень иерархии в дереве;
//     "Прибор учёта 1, Прибор учёта 2..." - действующие ПУ, закрепленные на текущем лицевом счете ("Лицевой счет"),
//                                           название вормируется как: [Прибор учета] + [Порядковый номер];
//     "1,1,1,1...2,2,2,2...N,N,N,N" - порядковые номера ПУ, к оторому относятся параметры.
//
Процедура ЗагрузитьНастройкиСоответствияПолейВДерево()
	
	// Для настроек с одним ПУ настроим порядок строк в ТЧ "НастройкаСоответствияПолей".
	ПараметрыПоиска = Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика);
	мСтрокиПУвТЧ    = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
	КоличествоПУ    = мСтрокиПУвТЧ.Количество();
	Если КоличествоПУ = 1 Тогда
		НастроитьПорядокНастроекИЗаполнитьПорядокПУ();
	КонецЕсли;
	
	ФрагментСообщения = "Не удалось загрузить настройки параметра ";
	
	// Создаем и заполняем основной уровень "Лицевой счет".
	Отбор = Новый Структура("Параметр", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет"));
	СтрокиЛС = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(Отбор);
	Если СтрокиЛС.Количество() <> 0 Тогда
		СтрокаЛС = СтрокиЛС[0];
		НовыйУровеньЛС = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУровеньЛС, СтрокаЛС);
		НовыйУровеньЛС.ИмяПараметра = Строка(НовыйУровеньЛС.Параметр);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ФрагментСообщения + """Лицевой счет"".");
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Параметр, ПорядокПУ");
	
	// Поиск ПУ:
	Для врПорядковыйНомерСчетчика = 1 По КоличествоПУ Цикл
		
		ПорядковыйНомерСчетчика = врПорядковыйНомерСчетчика;
		
		// Для поиска строки с параметром "Прибор учета" используем ранее инициализитованную структуру "ПараметрыПоиска".
		ПараметрыПоиска.ПорядокПУ = ПорядковыйНомерСчетчика;
		
		ПараметрыПоиска.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика");
		мСтрокиПУ                = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
		
		Если мСтрокиПУ.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ФрагментСообщения + """Прибор учета"".");
			Продолжить;
		КонецЕсли;
		
		СтрокаПУ = мСтрокиПУ[0];
		
		НовыйУровеньПУ = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйУровеньПУ, СтрокаПУ);
		
		НовыйУровеньПУ.ИмяПараметра = "Прибор учета " + ПорядковыйНомерСчетчика;
		
		// Поиск строки параметра "Дата".
		ПараметрыПоиска.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата");
		мСтрокиПУДата            = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
		Если мСтрокиПУДата.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ФрагментСообщения + """Дата"" для ""Прибора учета " + ПорядковыйНомерСчетчика + """.");
		Иначе
			СтрокаПУДата = мСтрокиПУДата[0];
			ПодУровеньПУ = НовыйУровеньПУ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ПодУровеньПУ, СтрокаПУДата);
			ПодУровеньПУ.ИмяПараметра = Строка(СтрокаПУДата.Параметр);
		КонецЕсли;
		
		// Поиск строки параметра "ПоказаниеДневное".
		ПараметрыПоиска.Параметр  = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное");
		мСтрокиПУПоказаниеДневное = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
		Если мСтрокиПУПоказаниеДневное.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ФрагментСообщения + """Показание дневное"" для ""Прибора учета " + ПорядковыйНомерСчетчика + """.");
		Иначе
			СтрокаПУПоказаниеДневное = мСтрокиПУПоказаниеДневное[0];
			ПодУровеньПУ             = НовыйУровеньПУ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ПодУровеньПУ, СтрокаПУПоказаниеДневное);
			ПодУровеньПУ.ИмяПараметра = Строка(СтрокаПУПоказаниеДневное.Параметр);
		КонецЕсли;
		
		// Поиск строки параметра "ПоказаниеДневное".
		ПараметрыПоиска.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное");
		мСтрокиПУПоказаниеНочное = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
		Если мСтрокиПУПоказаниеНочное.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ФрагментСообщения + """Показание ночное"" для ""Прибора учета " + ПорядковыйНомерСчетчика + """.");
		Иначе
			СтрокаПУПоказаниеНочное = мСтрокиПУПоказаниеНочное[0];
			ПодУровеньПУ            = НовыйУровеньПУ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ПодУровеньПУ, СтрокаПУПоказаниеНочное);
			ПодУровеньПУ.ИмяПараметра = Строка(СтрокаПУПоказаниеНочное.Параметр);
		КонецЕсли;
		
		// Поиск строки параметра "ПоказаниеДневное".
		ПараметрыПоиска.Параметр  = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое");
		мСтрокиПУПоказаниеПиковое = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
		Если мСтрокиПУПоказаниеПиковое.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ФрагментСообщения + """Показание пиковое"" для ""Прибора учета " + ПорядковыйНомерСчетчика + """.");
		Иначе
			СтрокаПУПоказаниеПиковое = мСтрокиПУПоказаниеПиковое[0];
			ПодУровеньПУ             = НовыйУровеньПУ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ПодУровеньПУ, СтрокаПУПоказаниеПиковое);
			ПодУровеньПУ.ИмяПараметра = Строка(СтрокаПУПоказаниеПиковое.Параметр);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если значение реквизита "Количество счетчиков в одной строке/теге" не совпадает с количеством счетчиков
	// в таблице настроек соответствий, то корректируем значение реквизита.
	Если Объект.КоличествоСчетчиковВОднойСтрокеТеге <> КоличествоПУ Тогда
		Объект.КоличествоСчетчиковВОднойСтрокеТеге = КоличествоПУ;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьНастройкиСоответствияПолейВДерево()

&НаСервере
// Процедура подготавливает данные ТЧ "НастройкиСоответствияПолей" и загружает
// в дерево значений "ДеревоНастройкаСоответствияПолей" формы.
// Заполняет дерево согласно схеме:
//  +Лицевой счет.
//  +Прибор учёта 1.
//		Дата показаний     1.
//		Показание дневное  1.
//		Показание ночное   1.
//		Показание пиковое  1.
//	+Прибор учёта 2.
//		Дата показаний     2.
//		Показание дневное  2.
//		Показание ночное   2.
//		Показание пиковое  2.
//	...			...			...
//	+Прибор учета N.
//		Дата показаний     N.
//		Показание дневное  N.
//		Показание ночное   N.
//		Показание пиковое  N.
//
// где "+" - обозначает верхний уровень иерархии в дереве;
//     "Прибор учёта 1, Прибор учёта 2..." - действующие ПУ, закрепленные на текущем лицевом счете ("Лицевой счет"),
//                                           название вормируется как: [Прибор учета] + [Порядковый номер];
//     "1,1,1,1...2,2,2,2...N,N,N,N" - порядковые номера ПУ, к оторому относятся параметры.
//
Процедура ЗагрузитьНастройкиСоответствияПолейВДерево_ПоФорматуВыгрузкиВСистемуГородВариант8()
	
	ПараметрыПоиска = Новый Структура("Параметр");
	
	// Поиск строки необязательного параметра "Лицевой счет".
	ПараметрыПоиска.Параметр   = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет;
	СтрокиПараметраЛицевойСчет = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
	НовыйУровеньЛС             = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Добавить();
	Если СтрокиПараметраЛицевойСчет.Количество() = 0 Тогда
		НовыйУровеньЛС.Параметр     = ПараметрыПоиска.Параметр;
		НовыйУровеньЛС.НомерКолонки = 3;
	Иначе
		ЗаполнитьЗначенияСвойств(НовыйУровеньЛС, СтрокиПараметраЛицевойСчет[0]);
	КонецЕсли;
	НовыйУровеньЛС.ИмяПараметра = Строка(НовыйУровеньЛС.Параметр);
	
	// Поиск строки необязательного параметра "Дата".
	ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата;
	СтрокиПараметраДата      = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
	УровеньПУДата            = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Добавить();
	Если СтрокиПараметраДата.Количество() = 0 Тогда
		УровеньПУДата.Параметр              = ПараметрыПоиска.Параметр;
		УровеньПУДата.НомерКолонки          = 10;
		УровеньПУДата.СимволРазделительДаты = "/";
	Иначе
		ЗаполнитьЗначенияСвойств(УровеньПУДата, СтрокиПараметраДата[0]);
	КонецЕсли;
	УровеньПУДата.ИмяПараметра = "Дата показания";
	
	// Поиск настроек обязательного параметра "Приборы учета".
	ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика;
	СтрокиПараметраПоказания = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
	НовыйУровеньПУ           = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.ПолучитьЭлементы().Добавить();
	Если СтрокиПараметраПоказания.Количество() = 0 Тогда
		НовыйУровеньПУ.Параметр        = ПараметрыПоиска.Параметр;
		НовыйУровеньПУ.НомерКолонки    = 8;
		НовыйУровеньПУ.ИдентификацияПУ = "коду";
	Иначе
		ЗаполнитьЗначенияСвойств(НовыйУровеньПУ, СтрокиПараметраПоказания[0]);
	КонецЕсли;
	НовыйУровеньПУ.ИмяПараметра        = "Приборы учета";
	НовыйУровеньПУ.СпособОпределенияПУ = "по значению поля реестра";
	
	// Поиск строки параметра "Показание дневное".
	ПараметрыПоиска.Параметр        = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное;
	СтрокиПараметраПоказаниеДневное = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
	ПодУровеньПУПоказаниеДневное    = НовыйУровеньПУ.ПолучитьЭлементы().Добавить();
	Если СтрокиПараметраПоказаниеДневное.Количество() = 0 Тогда
		ПодУровеньПУПоказаниеДневное.Параметр = ПараметрыПоиска.Параметр;
	Иначе
		ЗаполнитьЗначенияСвойств(ПодУровеньПУПоказаниеДневное, СтрокиПараметраПоказаниеДневное[0]);
	КонецЕсли;
	ПодУровеньПУПоказаниеДневное.ИмяПараметра = Строка(ПодУровеньПУПоказаниеДневное.Параметр);
	ПодУровеньПУПоказаниеДневное.НомерКолонки = 0;
	
	// Поиск строки параметра "Показание ночное".
	ПараметрыПоиска.Параметр        = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное;
	СтрокиПараметраПоказаниеНочное = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
	ПодУровеньПУПоказаниеНочное    = НовыйУровеньПУ.ПолучитьЭлементы().Добавить();
	Если СтрокиПараметраПоказаниеНочное.Количество() = 0 Тогда
		ПодУровеньПУПоказаниеНочное.Параметр = ПараметрыПоиска.Параметр;
	Иначе
		ЗаполнитьЗначенияСвойств(ПодУровеньПУПоказаниеНочное, СтрокиПараметраПоказаниеНочное[0]);
	КонецЕсли;
	ПодУровеньПУПоказаниеНочное.ИмяПараметра = Строка(ПодУровеньПУПоказаниеНочное.Параметр);
	ПодУровеньПУПоказаниеНочное.НомерКолонки = 0;
	
	// Поиск строки параметра "Показание пиковое".
	ПараметрыПоиска.Параметр        = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое;
	СтрокиПараметраПоказаниеПиковое = Объект.Удалить_НастройкаСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
	ПодУровеньПУПоказаниеПиковое    = НовыйУровеньПУ.ПолучитьЭлементы().Добавить();
	Если СтрокиПараметраПоказаниеПиковое.Количество() = 0 Тогда
		ПодУровеньПУПоказаниеПиковое.Параметр = ПараметрыПоиска.Параметр;
	Иначе
		ЗаполнитьЗначенияСвойств(ПодУровеньПУПоказаниеПиковое, СтрокиПараметраПоказаниеПиковое[0]);
	КонецЕсли;
	ПодУровеньПУПоказаниеПиковое.ИмяПараметра = Строка(ПодУровеньПУПоказаниеПиковое.Параметр);
	ПодУровеньПУПоказаниеПиковое.НомерКолонки = 0;
	
КонецПроцедуры // ЗагрузитьНастройкиСоответствияПолейВДерево()

&НаСервере
// Процедура настраивает порядок строк ТЧ "НастройкаСоответствияПолей" с одним ПУ
// в виде:
//		Лицевой счет.
//		Прибор учёта.
//		Дата показаний.
//		Показание дневное.
//		Показание ночное.
//		Показание пиковое.
//
Процедура НастроитьПорядокНастроекИЗаполнитьПорядокПУ()
	
	МаксимальныйИндекс = Объект.Удалить_НастройкаСоответствияПолей.Количество() - 1;
	
	врНастройкаСоответствияПолей = Объект.Удалить_НастройкаСоответствияПолей.Выгрузить();
	
	ЗначениеПараметраЛС = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет");
	ПараметрЛС          = врНастройкаСоответствияПолей.Найти(ЗначениеПараметраЛС, "Параметр");
	Если НЕ ПараметрЛС = Неопределено Тогда
		ИндексСтроки = врНастройкаСоответствияПолей.Индекс(ПараметрЛС);
		Если ИндексСтроки > 0 Тогда
			Смещение = (-1) * ИндексСтроки;
			врНастройкаСоответствияПолей.Сдвинуть(ПараметрЛС, Смещение);
		КонецЕсли;
	Иначе
		НоваяСтрока          = врНастройкаСоответствияПолей.Добавить();
		НоваяСтрока.Параметр = ЗначениеПараметраЛС;
	КонецЕсли;
	
	ЗначениеПараметраПУ   = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика");
	ПараметрНомерСчетчика = врНастройкаСоответствияПолей.Найти(ЗначениеПараметраПУ, "Параметр");
	Если НЕ ПараметрНомерСчетчика = Неопределено Тогда
		ПараметрНомерСчетчика.ПорядокПУ = 1;
		ИндексСтроки = врНастройкаСоответствияПолей.Индекс(ПараметрНомерСчетчика);
		Если ИндексСтроки <> 1 Тогда
			Смещение = ((-1) * ИндексСтроки) + 1;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрНомерСчетчика, (-1) * ИндексСтроки);
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрНомерСчетчика, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока           = врНастройкаСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПУ;
		НоваяСтрока.ПорядокПУ = 1;
	КонецЕсли;
	
	ЗначениеПараметраДата = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата");
	ПараметрДата          = врНастройкаСоответствияПолей.Найти(ЗначениеПараметраДата, "Параметр");
	Если НЕ ПараметрДата = Неопределено Тогда
		ПараметрДата.ПорядокПУ = 1;
		ИндексСтроки = врНастройкаСоответствияПолей.Индекс(ПараметрДата);
		Если ИндексСтроки <> 2 Тогда
			Смещение = ((-1) * ИндексСтроки) + 2;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрДата, (-1) * ИндексСтроки);
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрДата, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока           = врНастройкаСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраДата;
		НоваяСтрока.ПорядокПУ = 1;
	КонецЕсли;
	
	ЗначениеПараметраПоказаниеДн = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное");
	ПараметрПоказаниеДневное     = врНастройкаСоответствияПолей.Найти(ЗначениеПараметраПоказаниеДн, "Параметр");
	Если НЕ ПараметрПоказаниеДневное = Неопределено Тогда
		ПараметрПоказаниеДневное.ПорядокПУ = 1;
		ИндексСтроки = врНастройкаСоответствияПолей.Индекс(ПараметрПоказаниеДневное);
		Если ИндексСтроки <> 3 Тогда
			Смещение = ((-1) * ИндексСтроки) + 3;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрПоказаниеДневное, (-1) * ИндексСтроки);
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрПоказаниеДневное, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока = врНастройкаСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПоказаниеДн;
		НоваяСтрока.ПорядокПУ = 1;
	КонецЕсли;
	
	ЗначениеПараметраПоказаниеНч = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное");
	ПараметрПоказаниеНочное      = врНастройкаСоответствияПолей.Найти(ЗначениеПараметраПоказаниеНч, "Параметр");
	Если НЕ ПараметрПоказаниеНочное = Неопределено Тогда
		ПараметрПоказаниеНочное.ПорядокПУ = 1;
		ИндексСтроки = врНастройкаСоответствияПолей.Индекс(ПараметрПоказаниеНочное);
		Если ИндексСтроки <> 4 Тогда
			Смещение = ((-1) * ИндексСтроки) + 4;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрПоказаниеНочное, (-1) * ИндексСтроки);
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрПоказаниеНочное, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока = врНастройкаСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПоказаниеНч;
		НоваяСтрока.ПорядокПУ = 1;
	КонецЕсли;
	
	ЗначениеПараметраПоказаниеПк = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое");
	ПараметрПоказаниеПиковое     = врНастройкаСоответствияПолей.Найти(ЗначениеПараметраПоказаниеПк, "Параметр");
	Если НЕ ПараметрПоказаниеПиковое = Неопределено Тогда
		ПараметрПоказаниеПиковое.ПорядокПУ = 1;
		ИндексСтроки = врНастройкаСоответствияПолей.Индекс(ПараметрПоказаниеПиковое);
		Если ИндексСтроки <> 5 Тогда
			Смещение = ((-1) * ИндексСтроки) + 5;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрПоказаниеПиковое, (-1) * ИндексСтроки);
				врНастройкаСоответствияПолей.Сдвинуть(ПараметрПоказаниеПиковое, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока           = врНастройкаСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПоказаниеПк;
		НоваяСтрока.ПорядокПУ = 1;
	КонецЕсли;
	
	Объект.Удалить_НастройкаСоответствияПолей.Загрузить(врНастройкаСоответствияПолей);
	
КонецПроцедуры // НастроитьПорядокНастроекИЗаполнитьПорядокПУ()

&НаКлиенте
// Процедура заполняет настройки даты по данным текущей строки таблицы параметров.
Процедура ЗагрузитьНастройкиДаты(ДанныеСтроки, ИмяТаблицы)
	
	Если ПустаяСтрока(ДанныеСтроки.СимволРазделительДаты) Тогда
		ДанныеСтроки.СимволРазделительДаты = СпискиВыбораПолей.СпРазделителейДаты[0].Значение;
	КонецЕсли;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета
		И Объект.РазделительДаты <> ДанныеСтроки.СимволРазделительДаты Тогда
		Объект.РазделительДаты = ДанныеСтроки.СимволРазделительДаты
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных
		И Объект.РазделительПериода <> ДанныеСтроки.СимволРазделительДаты Тогда
		Объект.РазделительПериода = ДанныеСтроки.СимволРазделительДаты;
	КонецЕсли;
	
	ЗаполнитьТаблицуНастройкаДатыПериодаПоТекущейСтроке(ДанныеСтроки, ИмяТаблицы);
	
КонецПроцедуры

&НаКлиенте
// Заполняет таблицу настройки даты или периода.
Процедура ЗаполнитьТаблицуНастройкаДатыПериодаПоТекущейСтроке(ДанныеСтроки, ИмяТаблицы)
	
	ТабличнаяЧасть = Объект[ИмяТаблицы];
	
	НайденныеСтрокиДень = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ПараметрДаты", "День"));
	КоличествоНайденныхСтрок = НайденныеСтрокиДень.Количество();
	Если КоличествоНайденныхСтрок > 0 И ЭтоУниверсальнаяВыгрузкаДанных Тогда
		ТабличнаяЧасть.Удалить(НайденныеСтрокиДень[0]);
	ИначеЕсли КоличествоНайденныхСтрок = 0 И НЕ ЭтоУниверсальнаяВыгрузкаДанных Тогда
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ПараметрДаты = "День";
		ДанныеСтроки.ПорядокДень = НоваяСтрока.НомерСтроки;
	КонецЕсли;
	
	НайденныеСтрокиМесяц = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ПараметрДаты", "Месяц"));
	КоличествоНайденныхСтрок = НайденныеСтрокиМесяц.Количество();
	Если КоличествоНайденныхСтрок = 0 Тогда
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ПараметрДаты = "Месяц";
		ДанныеСтроки.ПорядокМесяц = НоваяСтрока.НомерСтроки;
	Иначе
		НомерСтрокиМесяц = НайденныеСтрокиМесяц[0].НомерСтроки;
		Если ДанныеСтроки.ПорядокМесяц <> НомерСтрокиМесяц Тогда
			ДанныеСтроки.ПорядокМесяц = НомерСтрокиМесяц;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтрокиГод = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ПараметрДаты", "Год"));
	КоличествоНайденныхСтрок = НайденныеСтрокиГод.Количество();
	Если КоличествоНайденныхСтрок = 0 Тогда
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ПараметрДаты = "Год";
		ДанныеСтроки.ПорядокГод = НоваяСтрока.НомерСтроки;
	Иначе
		НомерСтрокиГод = НайденныеСтрокиГод[0].НомерСтроки;
		Если ДанныеСтроки.ПорядокГод <> НомерСтрокиГод Тогда
			ДанныеСтроки.ПорядокГод = НомерСтрокиГод;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет структуру настроек нового прибора учета.
Процедура ЗаполнитьСтруктуруНастройкамиПредыдущегоПУ(СтруктураНастроекПУ, МаксимальныйПорядокПУВДереве)
	
	ДеревоЗагрузкаПоказаний = ДанныеФормыВЗначение(ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний, Тип("ДеревоЗначений"));
	
	// Настройки предыдущего ПУ:
	Отбор = Новый Структура("Параметр, ПорядокПУ", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика"), МаксимальныйПорядокПУВДереве);
	СтрокиДерева = ДеревоЗагрузкаПоказаний.Строки.НайтиСтроки(Отбор);
	
	Строка = СтрокиДерева.Получить(СтрокиДерева.ВГраница());
	
	// Настройки ПУ:
	СтруктураНастроекПУ.Вставить("СпособОпределенияПУ",           Строка.СпособОпределенияПУ);
	СтруктураНастроекПУ.Вставить("ПорядковыйНомерПУ",             Строка.ПорядковыйНомерПУ);
	СтруктураНастроекПУ.Вставить("ИдентификацияПУ",               Строка.ИдентификацияПУ);
	СтруктураНастроекПУ.Вставить("СпособОпределенияУслуги",       Строка.СпособОпределенияУслуги);
	СтруктураНастроекПУ.Вставить("ИдентификацияУслуги",           Строка.ИдентификацияУслуги);
	СтруктураНастроекПУ.Вставить("Услуга",                        Строка.Услуга);
	
	// Настройки подчиненных строк:
	ПодСтрокаПУ = Строка.Строки;
	
	Отбор = Новый Структура("Параметр, ПорядокПУ", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиДата = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("ПорядокДень",                   ПодСтрокиДата[0].ПорядокДень);
	СтруктураНастроекПУ.Вставить("ПорядокМесяц",                  ПодСтрокиДата[0].ПорядокМесяц);
	СтруктураНастроекПУ.Вставить("ПорядокГод",                    ПодСтрокиДата[0].ПорядокГод);
	СтруктураНастроекПУ.Вставить("СимволРазделительДаты",         ПодСтрокиДата[0].СимволРазделительДаты);
	
	Отбор = Новый Структура("Параметр, ПорядокПУ", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиПоказанияДн = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиДн", ПодСтрокиПоказанияДн[0].СимволРазделительДробнойЧасти);
	
	Отбор = Новый Структура("Параметр, ПорядокПУ", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиПоказанияНч = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиНч", ПодСтрокиПоказанияНч[0].СимволРазделительДробнойЧасти);
	
	Отбор = Новый Структура("Параметр, ПорядокПУ", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиПоказанияПк = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиПк", ПодСтрокиПоказанияПк[0].СимволРазделительДробнойЧасти);
	
КонецПроцедуры // ЗаполнитьСтруктуруНастройкамиПредыдущегоПУ()

&НаСервере
// Процедура заполняет структуру настроек нового прибора учета значениями по умолчанию.
Процедура ЗаполнитьСтруктуруНастройкамиПоУмолчанию(СтруктураНастроекПУ)
	
	СтруктураНастроекПУ.Вставить("СпособОпределенияПУ",             СпискиВыбораПолей.СпСпособыОпределенияПУ[0].Представление);
	СтруктураНастроекПУ.Вставить("ПорядковыйНомерПУ",               1);
	СтруктураНастроекПУ.Вставить("ИдентификацияПУ",                 СпискиВыбораПолей.СпИдентификацияПУ[0].Представление);
	СтруктураНастроекПУ.Вставить("СпособОпределенияУслуги",         СпискиВыбораПолей.СпСпособыОпределенияУслуги[0].Представление);
	СтруктураНастроекПУ.Вставить("ИдентификацияУслуги",             СпискиВыбораПолей.СпИдентификацияУслуги[0].Представление);
	СтруктураНастроекПУ.Вставить("ПорядокДень",                     1);
	СтруктураНастроекПУ.Вставить("ПорядокМесяц",                    2);
	СтруктураНастроекПУ.Вставить("ПорядокГод",                      3);
	СтруктураНастроекПУ.Вставить("СимволРазделительДаты",           СпискиВыбораПолей.СпРазделителейДаты[0].Представление);
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиДн", СпискиВыбораПолей.СпРазделителейДробнойЧасти[0].Представление);
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиНч", СпискиВыбораПолей.СпРазделителейДробнойЧасти[0].Представление);
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиПк", СпискиВыбораПолей.СпРазделителейДробнойЧасти[0].Представление);
	СтруктураНастроекПУ.Вставить("Услуга",                          ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка"));
	
КонецПроцедуры // ЗаполнитьСтруктуруНастройкамиПоУмолчанию()

&НаСервере
// Процедура сортирует строки в дереве по "ПорядокПУ".
Процедура СортироватьПараметрыПУВДеревеНаСервере()
	
	ДеревоЗагрузкаПоказаний = ДанныеФормыВЗначение(ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний, Тип("ДеревоЗначений"));
	ДеревоЗагрузкаПоказаний.Строки.Сортировать("ПорядокПУ Возр");
	ЗначениеВДанныеФормы(ДеревоЗагрузкаПоказаний, ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний);
	
КонецПроцедуры // СортироватьПараметрыПУВДеревеНаСервере()

&НаСервере
// Процедура записывает значения прорядка элементов даты в строку дерева.
Процедура ЗагрузитьНастройкиСоставаДатыВСтрокуДерева(ИдентификаторСтрокиДерева)
	
	ОбъектФормы  = РеквизитФормыВЗначение("Объект");
	ТаблицаДаты  = ОбъектФормы.НастройкаДаты.Выгрузить();
	СтрокаДерева = ДеревоНастройкаСоответствияПолейЗагрузкаПоказаний.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	
	СтрокаДерева.ПорядокДень  = ТаблицаДаты.Найти("День",  "ПараметрДаты").НомерСтроки;
	СтрокаДерева.ПорядокМесяц = ТаблицаДаты.Найти("Месяц", "ПараметрДаты").НомерСтроки;
	СтрокаДерева.ПорядокГод   = ТаблицаДаты.Найти("Год",   "ПараметрДаты").НомерСтроки;
	
КонецПроцедуры // ЗагрузитьНастройкиСоставаДатыВСтрокуДерева()

&НаСервере
// Подготавливает список параметров
Функция УстановитьОграничениеТипаПараметраДляЗагрузкиПлатежей()
	
	Если ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		м_Типов = Новый Массив;
		м_Типов.Добавить(Тип("ПеречислениеСсылка.КВП_ПараметрыСистемыЗагрузкиПлатежей"));
		
		Элементы.НастройкаСоответствияПолейПараметр.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ПараметрыСистемыЗагрузкиПлатежей");
		
	КонецЕсли;
	
КонецФункции // УстановитьОграничениеТипаПараметраДляЗагрузкиПлатежей()

&НаСервере
// Функция проверяет корректность заполнения табличной части "НастройкаСоответствияПолей".
// При наличие ошибки выводит сообщение об ошибке и возвращает Истина, для отказа записи.
Функция ПроверкаЗаполненияТЧНастройкаСоответствияПолей()
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И НЕ РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	
	НастройкаСоответствияПолей = Объект.Удалить_НастройкаСоответствияПолей.Выгрузить();
	
	// Для загрузки из систем сбора показаний приборов учета
	// в таблице параметров должна быть хотя бы одна строка с показаниями.
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
		
		// Проверим на существование в настройках ПУ.
		ПараметрПУ = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика");
		Если НастройкаСоответствияПолей.Найти(ПараметрПУ, "Параметр") = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В настройках соответствия полей должен быть хотя бы один прибор учета.");
			Возврат Истина;
		КонецЕсли;
		
		ЕстьСтрокаПоказаний = Ложь;
		стрПоказаниеДневное = НастройкаСоответствияПолей.Найти(ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное"), "Параметр");
		стрПоказаниеНочное  = НастройкаСоответствияПолей.Найти(ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное"),  "Параметр");
		стрПоказаниеПиковое = НастройкаСоответствияПолей.Найти(ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое"), "Параметр");
		ЕстьСтрокаПоказаний = (стрПоказаниеДневное <> Неопределено)
							ИЛИ (стрПоказаниеНочное <> Неопределено)
							ИЛИ (стрПоказаниеПиковое <> Неопределено);
		Если Не ЕстьСтрокаПоказаний Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров должна быть хотя бы одна строка с показаниями.");
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		НайденнаяСтрокаЛицевойСчет = НастройкаСоответствияПолей.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ЛицевойСчет, "Параметр");
		НайденнаяСтрокаАдрес       = НастройкаСоответствияПолей.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Адрес, "Параметр");
		Если НайденнаяСтрокаЛицевойСчет = Неопределено И НайденнаяСтрокаАдрес = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров выгрузки должна быть хотя бы одна строка с параметром ""Лицевой счет"" или ""Адрес"".");
			Возврат Истина;
		ИначеЕсли НайденнаяСтрокаЛицевойСчет = Неопределено И НайденнаяСтрокаАдрес <> Неопределено И НайденнаяСтрокаАдрес.НомерКолонки = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров выгрузки должен быть указан номер колонки для параметра ""Адрес"".");
			Возврат Истина;
		ИначеЕсли НайденнаяСтрокаЛицевойСчет <> Неопределено И НайденнаяСтрокаАдрес = Неопределено И НайденнаяСтрокаЛицевойСчет.НомерКолонки = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров выгрузки должен быть указан номер колонки для параметра ""Лицевой счет"".");
			Возврат Истина;
		КонецЕсли;
		
		НайденнаяСтрокаПлощадь = НастройкаСоответствияПолей.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Площадь, "Параметр");
		Если НайденнаяСтрокаПлощадь <> Неопределено И НайденнаяСтрокаПлощадь.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ПустаяСсылка() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров выгрузки для параметра ""Площадь"" должен быть указан вид Площади.");
			Возврат Истина;
		КонецЕсли;
		
		НайденнаяСтрокаСчетчикИПоказание = НастройкаСоответствияПолей.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание, "Параметр");
		Если НайденнаяСтрокаСчетчикИПоказание <> Неопределено Тогда
			Если ПустаяСтрока(НайденнаяСтрокаСчетчикИПоказание.ИдентификацияПУ) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров выгрузки для параметра ""Счетчик и показание"" должна быть указана "
																	+ "настройка ""В качестве ПУ выгружать.""");
				Возврат Истина;
			КонецЕсли;
			Если Объект.ФорматФайла = "TXT"
			   И ПустаяСтрока(НайденнаяСтрокаСчетчикИПоказание.РазделительПарыПУПоказание) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров выгрузки для параметра ""Счетчик и показание"" должна быть указана "
																	+ "настройка ""Разделитель между ПУ и Показанием.""");
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.ФорматФайла = "XML" Тогда
		
		// В таблице параметров не должно быть различных соответствий параметров для одних и тех же номеров колонок.
		СписокНомеров = Новый ТаблицаЗначений;
		СписокНомеров.Колонки.Добавить("НомерКолонки");
		Для Каждого ТекСтрока Из НастройкаСоответствияПолей Цикл
			Если ЗначениеЗаполнено(ТекСтрока.НомерКолонки)
			   И ЗначениеЗаполнено(ТекСтрока.Параметр)
			   И НЕ ЭтоДатаПоказанияПУ(ТекСтрока.Параметр) Тогда
				НоваяСтрока = СписокНомеров.Добавить();
				НоваяСтрока.НомерКолонки = ТекСтрока.НомерКолонки;
			КонецЕсли;
		КонецЦикла;
		
		СписокНомеров_Копия = СписокНомеров.Скопировать();
		СписокНомеров_Копия.Свернуть("НомерКолонки");
		Если НЕ СписокНомеров.Количество() = СписокНомеров_Копия.Количество() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Имеются различные соответствия для одних и тех же номеров колонок.");
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	
	// Проверяем на корректность заполнения каждую строку табличной части "НастройкаСоответствияПолей".
	Для Каждого ТекНастройка Из НастройкаСоответствияПолей Цикл
		
		ТекКолонка = "Колонка " + ТекНастройка.НомерКолонки;
		
		Ошибка = ПроверкаЗаполненияПараметров(ТекНастройка, НастройкаСоответствияПолей);
		Если НЕ ПустаяСтрока(Ошибка) Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
		Если НЕ ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
			ТекЗначение       = ТекНастройка.Параметр;
			НайденноеЗначение = СписокЗначений.НайтиПоЗначению(ТекЗначение);
			Если НайденноеЗначение = Неопределено Тогда
				СписокЗначений.Добавить(ТекЗначение, ТекКолонка);
			Иначе
				Отказ = Истина;
				Ошибка = "Выбранные значения в колонках """+ НайденноеЗначение.Представление + """ и """ + ТекКолонка + """ совпадают.";
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Ошибка);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ПроверкаЗаполненияТЧНастройкаСоответствияПолей()

&НаСервере
// Функция проверяет корректность заполнения параметров.
// Возвращает сообщение об ошибке, если параметры заполнены некорректно.
Функция ПроверкаЗаполненияПараметров(ТекНастройка, НастройкаСоответствияПолей)
	
	Ошибка = "";
	
	// Не должно быть строк в таблице параметров с указанным номером и незаполненным параметром.
	Если Не ЗначениеЗаполнено(ТекНастройка.Параметр) И ЗначениеЗаполнено(ТекНастройка.НомерКолонки) Тогда
		Возврат "Не указан параметр для колонки """ + ТекНастройка.НомерКолонки + """.";
	КонецЕсли;
	
	// Для загрузки из систем сбора показаний приборов учета
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		ПроверкаXML   = (Объект.ФорматФайла = "XML" И (НЕ ЗначениеЗаполнено(ТекНастройка.ИмяУзла) ИЛИ НЕ ЗначениеЗаполнено(ТекНастройка.ИмяАтрибута)));
		ПроверкаНеXML = (НЕ Объект.ФорматФайла = "XML" И Не ЗначениеЗаполнено(ТекНастройка.НомерКолонки));
		
		Если ПроверкаXML ИЛИ ПроверкаНеXML Тогда
			
			Если ЭтоЛицевойСчет(ТекНастройка.Параметр) Тогда
				
				СтрокиПУ = НастройкаСоответствияПолей.НайтиСтроки(Новый Структура("Параметр", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика")));
				КолонкаЛСПуста = Ложь;
				Для Каждого ТекСтрока Из СтрокиПУ Цикл
					Если ТекСтрока.СпособОпределенияПУ = "по услуге" И ТекСтрока.СпособОпределенияУслуги = "по ссылке на услугу" Тогда
						КолонкаЛСПуста = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если КолонкаЛСПуста Тогда
					ТекстСообщения = "У параметра ""Лицевой счет"" не указан";
					Если ПроверкаНеXML Тогда
						ТекстСообщения = ТекстСообщения + " номер колонки.";
					ИначеЕсли ПроверкаXML Тогда
						ТекстСообщения = ТекстСообщения + "о имя узла или имя атрибута.";
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Возврат ТекстСообщения;
				КонецЕсли;
				
			ИначеЕсли ЭтоПриборУчета(ТекНастройка.Параметр) Тогда
				
				Если ТекНастройка.СпособОпределенияПУ = "по услуге"
				   И ТекНастройка.СпособОпределенияУслуги = "по ссылке на услугу" Тогда
				Иначе
					ТекстСообщения = "У параметра ""Прибор учета " + ТекНастройка.ПорядокПУ + """ не указан";
					Если ПроверкаНеXML Тогда
						ТекстСообщения = ТекстСообщения + " номер колонки.";
					ИначеЕсли ПроверкаXML Тогда
						ТекстСообщения = ТекстСообщения + "о имя узла или имя атрибута.";
					Иначе
						ТекстСообщения = "";
					КонецЕсли;
					Возврат ТекстСообщения;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Ошибка = ПроверкаЗаполненияНомеровКолонокПараметровДляЗагрузкиПоказанийПУ(НастройкаСоответствияПолей);
		Если Не ПустаяСтрока(Ошибка) тогда
			Возврат Ошибка;
		КонецЕсли;
		
		// Проверка настроек ПУ.
		
		Если НЕ ТекНастройка.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			Возврат "";
		КонецЕсли;
		
		Если ТекНастройка.СпособОпределенияПУ = "по услуге" Тогда
			
			Если ТекНастройка.СпособОпределенияУслуги = "по ссылке на услугу" Тогда
				Если ТекНастройка.Услуга.Пустая() Тогда
					Возврат "Для параметра ""Прибор учета " + ТекНастройка.ПорядокПУ + """" + ?(ТекНастройка.НомерКолонки = 0,"", " с № колонки" + ТекНастройка.НомерКолонки)
						  + " не указана услуга.";
				Иначе
					ПараметрыОтбора = Новый Структура("Параметр, Услуга, СпособОпределенияУслуги, ПорядковыйНомерПУ",
													  ТекНастройка.Параметр, ТекНастройка.Услуга, ТекНастройка.СпособОпределенияУслуги, ТекНастройка.ПорядковыйНомерПУ);
					мСтрокиПУ = НастройкаСоответствияПолей.НайтиСтроки(ПараметрыОтбора);
					
					Если мСтрокиПУ.Количество() > 1 Тогда
						
						СтрокаПУ = "";
						Для Каждого ТекПУ Из мСтрокиПУ Цикл
							СтрокаПУ = СтрокаПУ + ?(ПустаяСтрока(СтрокаПУ), "", ", ") + ТекПУ.ПорядокПУ;
						КонецЦикла;
						
						Возврат "В настройках приборы учета: " + СтрокаПУ + " - не должны иметь одну и ту же услугу """ + ТекНастройка.Услуга + """.";
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции // ПроверкаЗаполненияПараметров()

&НаСервере
// Функция возвращает Истина, если имеются ошибки заполнения номеров колонок параметров.
Функция ПроверкаЗаполненияНомеровКолонокПараметровДляЗагрузкиПоказанийПУ(НастройкаСоответствияПолей)
	
	Ошибка = "";
	
	КоличествоНЕЗаполненныхНомеровКолонок = 0;
	Сч           = 0;
	ИмяПУ        = "";
	ПриборыУчета = Новый Структура;
	
	Для Каждого ТекНастройка Из НастройкаСоответствияПолей Цикл
		
		ПроверкаXML   = (Объект.ФорматФайла = "XML" И (НЕ ЗначениеЗаполнено(ТекНастройка.ИмяУзла) ИЛИ НЕ ЗначениеЗаполнено(ТекНастройка.ИмяАтрибута)));
		ПроверкаНеXML = (НЕ Объект.ФорматФайла = "XML" И Не ЗначениеЗаполнено(ТекНастройка.НомерКолонки));
		
		Если ЗначениеЗаполнено(ТекНастройка.Параметр)
		   И ТекНастройка.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			Сч = Сч + 1;
			ИмяПУ = "ПУ" + Сч;
			ПриборыУчета.Вставить(ИмяПУ, 0);
			КоличествоНЕЗаполненныхНомеровКолонок = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекНастройка.Параметр)
		   И (ТекНастройка.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное")
			  ИЛИ ТекНастройка.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное")
			  ИЛИ ТекНастройка.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое"))
		   И (ПроверкаНеXML ИЛИ ПроверкаXML) Тогда
			
			КоличествоНЕЗаполненныхНомеровКолонок = КоличествоНЕЗаполненныхНомеровКолонок + 1;
			
			Если ПриборыУчета.Свойство(ИмяПУ) Тогда
				ПриборыУчета[ИмяПУ] = КоличествоНЕЗаполненныхНомеровКолонок;
			Иначе
				ПриборыУчета.Вставить(ИмяПУ, КоличествоНЕЗаполненныхНомеровКолонок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПУДляВывода = "";
	Для Каждого Элемент Из ПриборыУчета Цикл
		Если ПриборыУчета[Элемент.Ключ] = 3 Тогда
			ПорядковыйНомерСчетчика = СтрЗаменить(Элемент.Ключ, "ПУ", "");
			СтрокаПУДляВывода = СтрокаПУДляВывода
							  + ?(НЕ ПустаяСтрока(СтрокаПУДляВывода), ", ", "")
							  + """Прибор учета "
							  + ПорядковыйНомерСчетчика
							  + """";
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаПУДляВывода) Тогда
		Ошибка = "Для параметр"
				+ ?(Найти(СтрокаПУДляВывода, ",") = 0, "а: ", "ов: ")
				+ СтрокаПУДляВывода
				+ " - не указан";
		Если ПроверкаНеXML Тогда
			Ошибка = Ошибка + " номер колонки";
		ИначеЕсли ПроверкаXML Тогда
			Ошибка = Ошибка + "о имя узла или имя атрибута";
		Иначе
			Ошибка = "";
		КонецЕсли;
		Ошибка = Ошибка + " как минимум для одного показания.";
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции // ПроверкаЗаполненияНомеровКолонокПараметровДляЗагрузкиПоказанийПУ()

&НаСервере
// Функция получает список параметров для текста заголовка файла.
Функция ПолучитьСписокПараметровДляЗаголовкаВТекстовомФайлеНаСервере()
	
	Возврат Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПолучитьСписокПараметровДляЗаголовкаВТекстовомФайле();
	
КонецФункции

&НаКлиенте
// Процедура-обработчик события "ПоказатьВыборИзМеню" в обработчике команды "ВыбратьПараметрЗаголовка".
Процедура ОбработатьВыборПараметра(РезультатВыбора, ПозицияКурсора) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ИндексСтроки        = ПозицияКурсора.ИндексСтроки;
		ПозицияВСтроке      = ПозицияКурсора.ПозицияВСтроке;
		ТекстПараметра      = "[" + РезультатВыбора.Значение + "]";
		МассивСтрок         = СтрРазделить(Объект.ТекстЗаголовкаВТекстовомФайле, Символы.ПС);
		РедактируемаяСтрока = МассивСтрок[ИндексСтроки];
		ЛеваяЧасть          = Лев(РедактируемаяСтрока, ПозицияВСтроке - 1);
		ПраваяЧасть         = Сред(РедактируемаяСтрока, ПозицияВСтроке);
		ПолученнаяСтрока    = ЛеваяЧасть + ТекстПараметра + ПраваяЧасть;
		
		МассивСтрок.Удалить(ИндексСтроки);
		МассивСтрок.Вставить(ИндексСтроки, ПолученнаяСтрока);
		
		Объект.ТекстЗаголовкаВТекстовомФайле = СтрСоединить(МассивСтрок, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой()
	
	ЭтоXML = (Объект.ФорматФайла = "XML");
	ЭтоCSV = (Объект.ФорматФайла = "CSV");
	ЭтоTXT = (Объект.ФорматФайла = "TXT");
	ЭтоXLS = (Объект.ФорматФайла = "XLS");
	
	ЭтоCSVилиTXT = ЭтоCSV ИЛИ ЭтоTXT;
	
	Элементы.Кодировка.Видимость               = ?(ЭтоXLS ИЛИ ЭтоXML, Ложь, Истина);
	Элементы.РазделительКолонок.ТолькоПросмотр = Ложь;
	
	// Загрузка реестра показаний приборов учета.
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Элементы.НомерСтроки.Видимость                                          = Истина;
		Элементы.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета.Видимость = Истина;
		Элементы.ГруппаНастройкиСоответствия.ТекущаяСтраница                    = Элементы.ГруппаНастройкиСоответствияЗагрузкаПоказаний;
		Элементы.ПризнакИтоговойСтроки.Видимость                                = ЭтоCSVилиTXT;
		Элементы.КоличествоСчетчиковВОднойСтрокеТеге.Видимость                  = РучнойВариантНастройкиФорматаРеестраПоказаний;
		Элементы.КонтрольДублированияОплат.Видимость                            = Ложь;
		Элементы.ПланВыполненияСхема.Видимость                                  = Истина;
		Элементы.ВыводитьЗаголовок.Видимость                                    = Ложь;
		Элементы.ДекорацияТекстЗаголовка.Видимость                              = Ложь;
		Элементы.ТекстЗаголовкаВТекстовомФайле.Видимость                        = Ложь;
		Элементы.СуммаНачисленийПодсказка.Видимость                             = Ложь;
		Элементы.ЛицевойСчетПодсказка.Видимость                                 = Ложь;
		Элементы.ТипПериодаДолга.Видимость                                      = Ложь;
		Элементы.ПериодОплатыПодсказка.Видимость                                = Ложь;
		
		Элементы.ВариантЗагрузкиНулевыхПоказаний.Видимость = Истина;
		
		Если РучнойВариантНастройкиФорматаРеестраПоказаний Тогда
			Элементы.ШаблонРеестраПоказанийПриборовУчета.Видимость                                                   = Ложь;
			Элементы.ШаблонРеестраПоказанийОписание.Видимость                                                        = Ложь;
			Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказанийДобавитьПриборУчетаЗагрузкаПоказаний.Видимость = Истина;
			Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказанийУдалитьПриборУчетаЗагрузкаПоказаний.Видимость  = Истина;
			Элементы.ФорматФайла.ТолькоПросмотр                                                                      = Ложь;
			Элементы.ПанельНастройкиФормата.Видимость                                                                = Истина;
			Элементы.РазделительКолонок.Видимость                                                                    = ЭтоCSVилиTXT;
			Элементы.ДеревоЗагрузкаПоказанийНомерКолонки.Видимость                                                   = НЕ ЭтоXML;
			Элементы.ДеревоЗагрузкаПоказанийИмяУзла.Видимость                                                        = ЭтоXML;
			Элементы.ДеревоЗагрузкаПоказанийИмяАтрибута.Видимость                                                    = ЭтоXML;
			
			Если ЭтоXML Тогда
				Элементы.ПанельНастройкиФормата.ТекущаяСтраница = Элементы.СтраницаВложенныеУзлы;
				Элементы.СтраницаВложенныеУзлы.Видимость = Истина;
				Элементы.СтраницаНастройки.Видимость     = Ложь;
			Иначе
				Элементы.ПанельНастройкиФормата.ТекущаяСтраница = Элементы.СтраницаНастройки;
				Элементы.СтраницаВложенныеУзлы.Видимость = Ложь;
				Элементы.СтраницаНастройки.Видимость     = Истина;
			КонецЕсли;
			
			Если Объект.ВложенныеУзлы Тогда
				Элементы.ДеревоЗагрузкаПоказанийИмяАтрибута.Заголовок = "Вложенный узел";
				Элементы.ДеревоЗагрузкаПоказанийИмяУзла.Заголовок     = "Основной узел";
			Иначе
				Элементы.ДеревоЗагрузкаПоказанийИмяАтрибута.Заголовок = "Имя атрибута";
				Элементы.ДеревоЗагрузкаПоказанийИмяУзла.Заголовок     = "Имя узла";
			КонецЕсли;
			
			Элементы.Показания_СпособОпределенияПУ.Видимость = Истина;
			
		Иначе
			Элементы.ШаблонРеестраПоказанийПриборовУчета.Видимость                                                   = Истина;
			Элементы.ШаблонРеестраПоказанийОписание.Видимость                                                        = Истина;
			Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказанийДобавитьПриборУчетаЗагрузкаПоказаний.Видимость = Ложь;
			Элементы.ДеревоНастройкаСоответствияПолейЗагрузкаПоказанийУдалитьПриборУчетаЗагрузкаПоказаний.Видимость  = Ложь;
			Элементы.Показания_СпособОпределенияПУ.Видимость                                                         = Ложь;
			
			Если Объект.ШаблонРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
				Элементы.ФорматФайла.ТолькоПросмотр                   = Истина;
				Элементы.ПанельНастройкиФормата.ТекущаяСтраница       = Элементы.СтраницаНастройки;
				Элементы.ПанельНастройкиФормата.Видимость             = Истина;
				Элементы.РазделительКолонок.Видимость                 = Истина;
				Элементы.РазделительКолонок.ТолькоПросмотр            = Истина;
				Элементы.ДеревоЗагрузкаПоказанийИмяУзла.Видимость     = Ложь;
				Элементы.ДеревоЗагрузкаПоказанийИмяАтрибута.Видимость = Ложь;
			Иначе
				Элементы.ФорматФайла.ТолькоПросмотр                   = Ложь;
				Элементы.ПанельНастройкиФормата.Видимость             = Ложь;
				Элементы.РазделительКолонок.Видимость                 = ЭтоCSVилиTXT;
				Элементы.ДеревоЗагрузкаПоказанийИмяУзла.Видимость     = ЭтоXML;
				Элементы.ДеревоЗагрузкаПоказанийИмяАтрибута.Видимость = ЭтоXML;
			КонецЕсли;
			
			Элементы.ПанельНастройки.ТекущаяСтраница = Элементы.ЛицевойСчет;
			
		КонецЕсли;
		
	// Загрузка реестра платежей.
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		Элементы.НомерСтроки.Видимость                                          = Истина;
		Элементы.ФорматФайла.ТолькоПросмотр                                     = Ложь;
		Элементы.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета.Видимость = Ложь;
		Элементы.ШаблонРеестраПоказанийПриборовУчета.Видимость                  = Ложь;
		Элементы.ШаблонРеестраПоказанийОписание.Видимость                       = Ложь;
		Элементы.ВыводитьЗаголовок.Видимость                                    = Ложь;
		Элементы.ДекорацияТекстЗаголовка.Видимость                              = Ложь;
		Элементы.ТекстЗаголовкаВТекстовомФайле.Видимость                        = Ложь;
		Элементы.ПанельНастройкиФормата.Видимость                               = Истина;
		Элементы.РазделительКолонок.Видимость                                   = ЭтоCSVилиTXT;
		Элементы.ПризнакИтоговойСтроки.Видимость                                = ЭтоCSVилиTXT;
		Элементы.НастройкаСоответствияПолейИмяУзла.Видимость                    = ЭтоXML;
		Элементы.НастройкаСоответствияПолейИмяАтрибута.Видимость                = ЭтоXML;
		Элементы.СуммаНачисленийПодсказка.Видимость                             = Ложь;
		Элементы.ЛицевойСчетПодсказка.Видимость                                 = Ложь;
		Элементы.ТипПериодаДолга.Видимость                                      = Ложь;
		Элементы.ПериодОплатыПодсказка.Видимость                                = Ложь;
		Элементы.КонтрольДублированияОплат.Видимость                            = Истина;
		Элементы.ПланВыполненияСхема.Видимость                                  = Истина;
		
		Если ЭтоXML Тогда
			Элементы.ПанельНастройкиФормата.ТекущаяСтраница = Элементы.СтраницаВложенныеУзлы;
			Элементы.СтраницаВложенныеУзлы.Видимость = Истина;
			Элементы.СтраницаНастройки.Видимость     = Ложь;
		Иначе
			Элементы.ПанельНастройкиФормата.ТекущаяСтраница = Элементы.СтраницаНастройки;
			Элементы.СтраницаВложенныеУзлы.Видимость = Ложь;
			Элементы.СтраницаНастройки.Видимость     = Истина;
		КонецЕсли;
		
		Если ЭтоXML И Объект.ВложенныеУзлы Тогда
			Элементы.НастройкаСоответствияПолейИмяАтрибута.Заголовок = "Вложенный узел";
			Элементы.НастройкаСоответствияПолейИмяУзла.Заголовок     = "Основной узел";
		Иначе
			Элементы.НастройкаСоответствияПолейИмяАтрибута.Заголовок = "Имя атрибута";
			Элементы.НастройкаСоответствияПолейИмяУзла.Заголовок     = "Имя узла";
		КонецЕсли;
		
		Элементы.ВариантЗагрузкиНулевыхПоказаний.Видимость = Ложь;
		
		Элементы.ГруппаНастройкиСоответствия.ТекущаяСтраница = Элементы.ГруппаНастройкиСоответствияЗагрузкаПлатежей;
		
	// Универсальная выгрузка данных.
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Элементы.НомерСтроки.Видимость                                          = Ложь;
		Элементы.ФорматФайла.ТолькоПросмотр                                     = Ложь;
		Элементы.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета.Видимость = Ложь;
		Элементы.ШаблонРеестраПоказанийПриборовУчета.Видимость                  = Ложь;
		Элементы.ШаблонРеестраПоказанийОписание.Видимость                       = Ложь;
		Элементы.РазделительКолонок.Видимость                                   = ЭтоTXT;
		Элементы.ПризнакИтоговойСтроки.Видимость                                = Ложь;
		Элементы.СуммаНачисленийПодсказка.Видимость                             = Истина;
		Элементы.ЛицевойСчетПодсказка.Видимость                                 = Истина;
		Элементы.ТипПериодаДолга.Видимость                                      = Истина;
		Элементы.ПериодОплатыПодсказка.Видимость                                = Истина;
		Элементы.РазделительПарыПУПоказание.Видимость                           = ЭтоTXT;
		Элементы.КонтрольДублированияОплат.Видимость                            = Ложь;
		Элементы.ПланВыполненияСхема.Видимость                                  = Ложь;
		Элементы.ВыводитьЗаголовок.Видимость                                    = ЭтоTXT;
		
		ВыводитьЗаголовокВФайле = ЭтоTXT И Объект.ВыводитьЗаголовок;
		
		Элементы.ДекорацияТекстЗаголовка.Видимость       = ВыводитьЗаголовокВФайле;
		Элементы.ТекстЗаголовкаВТекстовомФайле.Видимость = ВыводитьЗаголовокВФайле;
		
		Если ЭтоTXT Тогда
			Элементы.ПанельНастройкиФормата.ТекущаяСтраница = Элементы.СтраницаНастройки;
			Элементы.ПанельНастройкиФормата.Видимость       = Истина;
			Элементы.СтраницаНастройки.Видимость            = Истина;
		Иначе
			Элементы.ПанельНастройкиФормата.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаНастройкиСоответствия.ТекущаяСтраница = Элементы.ГруппаПараметрыУниверсальнойВыгрузки;
		
		Элементы.ВариантЗагрузкиНулевыхПоказаний.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры //УправлениеФормой()

&НаКлиенте
// Определение видимости вида и номенклатуры услуги.
Процедура ОпределениеВидимостиВидаИНоменклатурыУслуги()
	
	Если ПустаяСтрока(Объект.ПолеИдентификацииУслуги) Тогда
		Объект.ПолеИдентификацииУслуги = "Name";
	КонецЕсли;
	
	ОпределениеУслуги = Объект.ПолеИдентификацииУслуги;
	
	Если (ОпределениеУслуги = "Vid" ИЛИ ОпределениеУслуги = "Nom") И ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		Элементы.ПолеИдентификацииВидаИНоменклатурыУслуги.Видимость               = Истина;
		Элементы.ЗначениеПереключателяПоляВыбораВидаИНоменклатурыУслуги.Видимость = Истина;
		Элементы.ПолеИдентификацииВидаИНоменклатурыУслуги.Заголовок                = 
																					?(ОпределениеУслуги = "Vid", "Вид услуги определять по", "Номенклатуру услуги определять по");
		
	Иначе
		
		Элементы.ПолеИдентификацииВидаИНоменклатурыУслуги.Видимость               = Ложь;
		Элементы.ЗначениеПереключателяПоляВыбораВидаИНоменклатурыУслуги.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры //ОпределениеВидимостиВидаИНоменклатурыУслуги()

&НаКлиенте
// Устанавливает видимость элемента Способ определения ПУ и подчиненных ему элементов.
// Параметры:
// ВидимостьСпособаОпределенияПУ - параметр указывает отображать или нет элемент Способ определения ПУ
// и подчиненные ему элементы.
Процедура Показания_ОпределениеВидимостиСпособаОпределенияПУ()
	
	Если Показания_СпособОпределенияПУ = "по значению поля реестра" Тогда
		
		Элементы.Показания_ИдентификацияПУ.Видимость           = Истина;
		Элементы.Показания_СпособОпределенияУслуги.Видимость   = Ложь;
		Элементы.Показания_ИдентификацияУслуги.Видимость       = Ложь;
		Элементы.Показания_УслугаПУ.Видимость                  = Ложь;
		Элементы.Показания_ПорядковыйНомерПУ.Видимость         = Ложь;
		Элементы.ГруппаПорядковыйНомерПУ.Видимость             = Ложь;
		
	ИначеЕсли Показания_СпособОпределенияПУ = "по услуге" Тогда
		
		Элементы.Показания_ИдентификацияПУ.Видимость           = Ложь;
		Элементы.Показания_СпособОпределенияУслуги.Видимость   = Истина;
		Элементы.Показания_ПорядковыйНомерПУ.Видимость         = Истина;
		Элементы.ГруппаПорядковыйНомерПУ.Видимость             = Истина;
		
		Если Показания_СпособОпределенияУслуги = "по значению поля реестра" Тогда
			Элементы.Показания_ИдентификацияУслуги.Видимость   = Истина;
			Элементы.Показания_УслугаПУ.Видимость              = Ложь
		ИначеЕсли Показания_СпособОпределенияУслуги = "по ссылке на услугу" Тогда
			Элементы.Показания_ИдентификацияУслуги.Видимость   = Ложь;
			Элементы.Показания_УслугаПУ.Видимость              = Истина
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Показания_ОпределениеВидимостиСпособаОпределенияПУ()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "РазделительПериода".
Процедура РазделительПериодаПриИзменении(Элемент)
	
	ИдентификаторСтроки = ПолучитьИдентификаторТекущейСтроки();
	ТекущиеДанные = ПолучитьТекущиеДанныеПоИдентификатору(ИдентификаторСтроки);
	
	Если ЭтоУниверсальнаяВыгрузкаДанных
	   И Объект.РазделительПериода <> ТекущиеДанные.СимволРазделительДаты Тогда
		ТекущиеДанные.СимволРазделительДаты = Объект.РазделительПериода;
	ИначеЕсли ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета
			И Объект.РазделительПериода <> ТекущиеДанные.СимволРазделительДаты Тогда
		ТекущиеДанные.СимволРазделительДаты = Объект.РазделительПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "РазделительПериода".
Процедура РазделительПериодаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти