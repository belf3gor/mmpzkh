
#Область Переменные_формы

&НаКлиенте
Перем ТекущаяСтрокаПараметра; // Хранит номер строки текущей строки параметра таблицы "НастройкиСоответствияПолей".

#КонецОбласти // Переменные_формы

#Область Обработчики_событий_формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОграничитьВыборРеквизитов();
	
	// При создании новой записи устанавливаем вид операции значением по умолчанию.
	Если НЕ Параметры.Свойство("ТипОбъектаОткрытияФормы") И Объект.Ссылка.Пустая()
	   И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Объект.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиПараметра.Видимость = Ложь;
	
	ЗаполнитьСпискиВыбораПолейФормы();
	
	ОбновитьЗначенияОбщихРеквизитов();
	
	ЗагрузитьНастройкиСоответствияПолейВДерево();
	
	УстановитьДополнительныеНастройкиДляРежимаОтладки();
	
	// ЧастоЗадаваемыеВопросы
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ЧастоЗадаваемыеВопросы
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыдаватьВопросПриРегулированииКоличестваПУВДеревеПриУдалении = Истина;
	
	ИзменитьСоставСписковВыбораПолейПоВидуОперации();
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновленыНастройкиЗагрузкиВыгрузки", Новый Структура("Ключ", Объект.Ссылка), ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьНастройкиВДереве(Отказ);
	
	Если НЕ Отказ Тогда
		
		ТекущийОбъект.НастройкиСоответствияПолей.Очистить();
		
		ДеревоНастроек = ПолучитьКоллекциюСтрокДереваНаСервере();
		
		Если ДеревоНастроек.Количество() > 0 Тогда
			
			Для Каждого СтрокаДерева Из ДеревоНастроек Цикл
				
				НоваяСтрока = ТекущийОбъект.НастройкиСоответствияПолей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
				
				КоллекцияПодстрок = СтрокаДерева.ПолучитьЭлементы();
				
				Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И НЕ КоллекцияПодстрок.Количество() = 0 Тогда
					
					// Заполняем настройки загрузки реестра показаний приборов учета.
					Для Каждого ТекСтрока Из КоллекцияПодстрок Цикл
						НоваяСтрока = ТекущийОбъект.НастройкиСоответствияПолей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					КонецЦикла;
					
				ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
					
					СтруктураПолейDBF = СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузки(СтрокаДерева.Параметр);
					ЗаполнитьЗначенияСвойств(СтруктураПолейDBF, СтрокаДерева);
					ЗначениеХранилища = Новый ХранилищеЗначения(СтруктураПолейDBF, Новый СжатиеДанных(9));
					НоваяСтрока.НастройкиПоляDBF = ЗначениеХранилища;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обработчики_событий_формы

#Область Обработчики_событий_элементов_формы

&НаКлиенте
Процедура ОтменитьОчистку(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматФайлаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ФорматФайла <> ВыбранноеЗначение Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Модифицированность = Истина;
		
		Объект.ФорматФайла = ВыбранноеЗначение;
		
		ОбновитьЗначенияОбщихРеквизитов();
		
		ИзменитьСоставСписковВыбораПолейПоВидуОперации();
		
		УправлениеФормой();
		
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			
			ОбновитьЗначенияНастроекПараметра(ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации <> ВыбранноеЗначение Тогда
		
		Если ПолучитьКоллекциюСтрокДереваНаКлиенте().Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбоработатьРезультатВопросаВидОперацииПриИзменении", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(	ОписаниеОповещения,
							"Будет произведена очистка таблицы состава параметров. Продолжить?",
							РежимДиалогаВопрос.ДаНет,,
							КодВозвратаДиалога.Нет);
		Иначе
			
			ВидОперацииПриИзмененииПродолжение(ВыбранноеЗначение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииОбработкаВыбора()

&НаКлиенте
Процедура ДеревоНастройкаСоответствияПолейПриАктивизацииСтроки(Элемент)
	
	врТекущаяСтрока = Элементы.ДеревоНастройкаСоответствияПолей.ТекущаяСтрока;
	
	Если НЕ ТекущаяСтрокаПараметра = врТекущаяСтрока Тогда
		
		ПодключитьОбработчикОжидания("ОтобразитьСтраницуНастроекПараметра", 0.1, Истина);
		
	КонецЕсли;
	
	ТекущаяСтрокаПараметра = врТекущаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкаСоответствияПолейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
		
		Если ЭтоTXT ИЛИ ЭтоCSV ИЛИ ЭтоXLS Тогда
			ТекущиеДанные.НомерКолонки = ПолучитьНомерКолонки();
		КонецЕсли;
		
		Если НЕ ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
			
			ДобавитьСтрокуДереваВКореньДерева(Элементы.ДеревоНастройкаСоответствияПолей.ТекущаяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкаСоответствияПолейПараметрПриИзменении(Элемент)
	
	ОтобразитьСтраницуНастроекПараметра();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастройкаСоответствияПолейПараметрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено
	   И НЕ ТекущиеДанные.Параметр = ВыбранноеЗначение Тогда
		
		ТекущиеДанные.Параметр = ВыбранноеЗначение;
		
		ОчиститьНастройкиПередИзменениемПараметраНаСервере(Элементы.ДеревоНастройкаСоответствияПолей.ТекущаяСтрока);
		
		ОтобразитьСтраницуНастроекПараметра();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНастройкиФорматаРеестраПоказанийПриборовУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ВыбранноеЗначение Тогда
		
		Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ВыбранноеЗначение;
		
		ОбновитьЗначенияОбщихРеквизитов();
		
		ИзменитьСоставСписковВыбораПолейПоВидуОперации();
		
		УправлениеФормой();
		
		Объект.НастройкиСоответствияПолей.Очистить();
		
		ЗагрузитьНастройкиСоответствияПолейВДерево();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРеестраПоказанийПриборовУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Объект.ШаблонРеестраПоказанийПриборовУчета = ВыбранноеЗначение Тогда
		
		Объект.ШаблонРеестраПоказанийПриборовУчета = ВыбранноеЗначение;
		
		ОбновитьЗначенияОбщихРеквизитов();
		
		ИзменитьСоставСписковВыбораПолейПоВидуОперации();
		
		УправлениеФормой();
		
		Объект.НастройкиСоответствияПолей.Очистить();
		
		ЗагрузитьНастройкиСоответствияПолейВДерево();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРеестраПоказанийОписаниеНажатие(Элемент)
	
	ОписаниеВарианта = ПолучитьОписаниеШаблонаРеестраДанныхСПоказаниями();
	
	Если НЕ ПустаяСтрока(ОписаниеВарианта) Тогда
		ПоказатьПредупреждение(Неопределено, ОписаниеВарианта, , "Описание реестра показаний: " + Объект.ШаблонРеестраПоказанийПриборовУчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЗаголовокВТекстовомФайлеПриИзменении(Элемент)
	
	ИзменитьВидимостьНастройкиВыводитьЗаголовокУниверсальнойВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ИзменитьСоставПараметровПериода(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенныеУзлыПриИзменении(Элемент)
	
	УстановитьНаименованияКолонокДляФорматаФайлаXML();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматПериодаБезДнейПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ИзменитьСоставПараметровПериода(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификацияУслугиОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ИзменитьВидимостьНастроекПараметраУслуга(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьВидимостьНастроекПрибораУчета(Элемент.Имя, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПУВБазеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		
		ОбновитьЗначенияНастроекПараметра(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСчетчиковВОднойСтрокеТегеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 Тогда
		
		Если НЕ ИмеетсяПУВСоставеПараметров(Истина) Тогда
			Объект.КоличествоСчетчиковВОднойСтрокеТеге = 1;
		Иначе
			// Удаляем ПУ с конца, при этом выдаем вопрос 1 раз.
			Если ВыдаватьВопросПриРегулированииКоличестваПУВДеревеПриУдалении Тогда
				ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаПриРегулированииКоличестваПУВДереве", ЭтаФорма),
								"Будут удалены строки, соответствующие последнему прибору учета. Продолжить?",
								РежимДиалогаВопрос.ДаНет,,
								КодВозвратаДиалога.Нет);
				ВыдаватьВопросПриРегулированииКоличестваПУВДеревеПриУдалении = Ложь;
				Возврат;
			КонецЕсли;
			
			УдалитьПриборУчетаИзДереваФрагмент();
			
		КонецЕсли;
		
	ИначеЕсли Направление = 1 Тогда
		
		ДобавитьНовыйПриборУчетаСПараметрамиВДерево();
		
	КонецЕсли;
	
КонецПроцедуры // КоличествоСчетчиковВОднойСтрокеТегеРегулирование()

&НаКлиенте
Процедура КоличествоСчетчиковВОднойСтрокеТегеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КоличествоПУ         = ОпределитьКоличествоПУПриОчистке();
	
	Если КоличествоПУ > 1 Тогда
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаУдалитьПУ", ЭтаФорма),
						"При очистке в настройках соответствия будут удалены все приборы учета кроме первого. Продолжить?",
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // КоличествоСчетчиковВОднойСтрокеТегеОчистка()

&НаКлиенте
Процедура УдалитьПробелыВСтрокеДляИмениПоляDBF(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено
	   И ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание") Тогда
		
		Если Элемент.Имя = "ДеревоНастройкаСоответствияПолейИмяПоляDBF" Тогда
			ТекущиеДанные.ИмяПоляDBF = СтрЗаменить(ТекущиеДанные.ИмяПоляDBF, " ", "");
		ИначеЕсли Элемент.Имя = "ДеревоНастройкаСоответствияПолейИмяПоляDBFСчетчик" Тогда
			ТекущиеДанные.ИмяПоляDBFСчетчик = СтрЗаменить(ТекущиеДанные.ИмяПоляDBFСчетчик, " ", "");
		ИначеЕсли Элемент.Имя = "ДеревоНастройкаСоответствияПолейИмяПоляDBFСПоказание" Тогда
			ТекущиеДанные.ИмяПоляDBFПоказание = СтрЗаменить(ТекущиеДанные.ИмяПоляDBFПоказание, " ", "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПанелиНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "ГруппаСоставФайла" Тогда
		Элементы.ГруппаСхема.Видимость = НЕ ЭтоУниверсальнаяВыгрузкаДанных;
	Иначе
		Элементы.ГруппаСхема.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Обработчики_событий_элементов_формы

#Область Обработчики_команд_Формы

&НаКлиенте
// Обработчик команды "ВыбратьПараметрЗаголовка".
Процедура ВыбратьПараметрЗаголовка(Команда)
	
	НачалоСтроки  = 0;
	НачалоКолонки = 0;
	КонецСтроки   = 0;
	КонецКолонки  = 0;
	Элементы.ТекстЗаголовкаВТекстовомФайле.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	Если НачалоСтроки <> КонецСтроки ИЛИ НачалоКолонки <> КонецКолонки Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо установить курсор. В данный момент в поле ""Текст заголовка"" выделена часть текста.");
		Возврат;
	КонецЕсли;
	
	СписокПараметров   = ПолучитьСписокПараметровДляЗаголовкаВТекстовомФайлеНаСервере();
	ПозицияКурсора     = Новый Структура("ИндексСтроки, ПозицияВСтроке", НачалоСтроки - 1, НачалоКолонки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПараметра", ЭтаФорма, ПозицияКурсора);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокПараметров, Элементы.ДекорацияТекстЗаголовка);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
//Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

&НаКлиенте
// Обработчик команды "ДобавитьПриборУчетаЗагрузкаПоказаний".
Процедура ДобавитьПриборУчетаЗагрузкаПоказаний(Команда)
	
	ДобавитьНовыйПриборУчетаСПараметрамиВДерево();
	
КонецПроцедуры // ДобавитьПриборУчетаЗагрузкаПоказаний()

&НаКлиенте
// Обработчик команды "УдалитьПриборУчетаЗагрузкаПоказаний".
Процедура УдалитьПриборУчетаЗагрузкаПоказаний(Команда)
	
	ИдентификаторСтроки = Элементы.ДеревоНастройкаСоответствияПолей.ТекущаяСтрока;
	
	Если НЕ ИдентификаторСтроки = Неопределено Тогда
		
		УдалитьПриборУчетаИзДерева(ИдентификаторСтроки);
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьПриборУчетаЗагрузкаПоказаний()

#КонецОбласти // Обработчики_команд_Формы

#Область Вспомогательные_процедуры_и_функции

&НаСервере
Процедура УстановитьДополнительныеНастройкиДляРежимаОтладки()
	
	ИспользуетсяРежимОтладки = Константы.УПЖКХ_ИспользоватьРежимОтладки.Получить();
	
	Если ИспользуетсяРежимОтладки Тогда
		Элементы.ДеревоНастройкаСоответствияПолейГруппаДополнительно.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиВДереве(Отказ)
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета И НЕ ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСтрокДерева = РеквизитФормыВЗначение("ДеревоНастройкаСоответствияПолей", Тип("ДеревоЗначений")).Строки;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Если НЕ ЭтоXML Тогда
			
			ПустойНомерКолонкиЛицевогоСчета = (КоллекцияСтрокДерева.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет, "Параметр").НомерКолонки = 0);
			
			СтрокиПУ = КоллекцияСтрокДерева.НайтиСтроки(Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика));
			
			Для Каждого ТекущаяСтрока Из СтрокиПУ Цикл
				
				ПодСтрокиПУ = ТекущаяСтрока.Строки;
				
				Если ТекущаяСтрока.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[1].Значение // "по услуге"
				   И ТекущаяСтрока.СпособОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
					Если ПустойНомерКолонкиЛицевогоСчета Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан номер колонки Лицевого счета, так как прибор учета " + ТекущаяСтрока.ИмяПараметра + """ определяется по ссылке на услугу.",,,,Отказ);
					КонецЕсли;
					Если ТекущаяСтрока.Услуга = Справочники.КВП_Услуги.ПустаяСсылка() Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указана услуга из справочника ""Услуги"" прибора учета """ + ТекущаяСтрока.ИмяПараметра + """.",,,,Отказ);
					КонецЕсли;
				КонецЕсли;
				
				НайденныеПодСтрокиБезНомераКолонки = ПодСтрокиПУ.НайтиСтроки(Новый Структура("НомерКолонки", 0));
				КоличествоСтрокПоказанийБезНомераКолонки = 0;
				Для Каждого ТекущаяПодСтрока Из НайденныеПодСтрокиБезНомераКолонки Цикл
					Если НЕ ТекущаяПодСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата Тогда
						КоличествоСтрокПоказанийБезНомераКолонки = КоличествоСтрокПоказанийБезНомераКолонки + 1;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоСтрокПоказанийБезНомераКолонки = 3 Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан ""Номер колонки"" для показаний прибора учета """ + ТекущаяСтрока.ИмяПараметра + """.",,,,Отказ);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЭтоDBF И Не ЗначениеЗаполнено(Объект.РазделительКолонок) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан символ-разделитель колоонок.",,"Объект.РазделительКолонок",,Отказ);
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		//
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		НайденнаяСтрокаЛицевойСчет = КоллекцияСтрокДерева.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ЛицевойСчет, "Параметр");
		НайденнаяСтрокаАдрес       = КоллекцияСтрокДерева.Найти(Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Адрес, "Параметр");
		Если НайденнаяСтрокаЛицевойСчет = Неопределено И НайденнаяСтрокаАдрес = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице параметров выгрузки должна быть хотя бы одна строка с параметром ""Лицевой счет"" или ""Адрес"".",,,, Отказ);
		КонецЕсли;
		
		Для Каждого ТекущаяСтрока Из КоллекцияСтрокДерева Цикл
			
			Если ЭтоDBF Тогда
				
				Если ТекущаяСтрока.Параметр = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание Тогда
					
					Если ПустаяСтрока(ТекущаяСтрока.ИмяПоляDBFСчетчик) Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не задано имя поля Счетчика для файла DBF параметра """ + ТекущаяСтрока.Параметр +  """.",,,, Отказ);
					КонецЕсли;
					
					Если ПустаяСтрока(ТекущаяСтрока.ИмяПоляDBFПоказание) Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не задано имя поля Показания для файла DBF параметра """ + ТекущаяСтрока.Параметр +  """.",,,, Отказ);
					КонецЕсли;
					
				Иначе
					
					Если ПустаяСтрока(ТекущаяСтрока.ИмяПоляDBF) Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не задано имя поля для файла DBF параметра """ + ТекущаяСтрока.Параметр +  """.",,,, Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВыборРеквизитов()
	
	Если Параметры.Свойство("ТипОбъектаОткрытияФормы") Тогда
		
		Если Параметры.Свойство("ЗначенияЗаполнения")
		   И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
		   И Параметры.ЗначенияЗаполнения.Свойство("ВидОперации")
		   И НЕ Параметры.ЗначенияЗаполнения.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ПустаяСсылка()
		   И НЕ Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации Тогда
			Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ТипОбъектаОткрытияФормы) Тогда
			
			Элементы.ВидОперации.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванной в процедуре "КоличествоСчетчиковВОднойСтрокеТегеРегулирование()".
Процедура ОбработатьРезультатВопросаПриРегулированииКоличестваПУВДереве(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПриборУчетаИзДереваФрагмент();
	
КонецПроцедуры // ОбработатьРезультатВопросаПриРегулированииКоличестваПУВДереве()

&НаКлиенте
// Процедура вызывает механизм удаления строки параметра прибора учета.
Процедура УдалитьПриборУчетаИзДереваФрагмент()
	
	СтрокиПУДерева  = ПолучитьМассивСтрокПУВДереве();
	ПоследняяСтрока = СтрокиПУДерева.Получить(СтрокиПУДерева.ВГраница());
	Идентификатор   = ПоследняяСтрока.ПолучитьИдентификатор();
	
	УдалитьПриборУчетаИзДерева(Идентификатор);
	
КонецПроцедуры // УдалитьПриборУчетаИзДереваФрагмент()

&НаКлиенте
// Удаляет строки в дереве, соответствующие текущему ПУ.
Процедура УдалитьПриборУчетаИзДерева(ИдентификаторСтроки)
	
	ТекущиеДанные = ДеревоНастройкаСоответствияПолей.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Установите курсор на строку, соответствующую прибору учета.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ИмеетсяПУВСоставеПараметров(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	СтрокаУдалена = Ложь;
	
	Если СтрокаРодитель = Неопределено Тогда
		Если ТекущиеДанные.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			УдалитьСтрокуДерева(ТекущиеДанные);
			СтрокаУдалена = Истина;
		КонецЕсли;
	Иначе
		Если СтрокаРодитель.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			СтрокаРодитель.ПолучитьЭлементы().Очистить();
			УдалитьСтрокуДерева(СтрокаРодитель);
			СтрокаУдалена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаУдалена Тогда
		Объект.КоличествоСчетчиковВОднойСтрокеТеге = ПолучитьМассивСтрокПУВДереве().Количество();
		ОбновитьИменаИПорядковыеНомераПУ();
	КонецЕсли;
	
КонецПроцедуры // УдалитьПриборУчетаИзДерева()

&НаКлиенте
// Функция возвращает количество параметров прибора учета в дереве.
Функция ОпределитьКоличествоПУПриОчистке()
	
	КоличествоПУ = ПолучитьМассивСтрокПУВДереве().Количество();
	
	Если КоличествоПУ = 1 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В настройках соответствия полей должен быть хотя бы один прибор учета.");
	ИначеЕсли КоличествоПУ > 1 Тогда
		ЗадатьВопросПередОчисткойВсехПУ = Истина;
	КонецЕсли;
	
	Возврат КоличествоПУ;
	
КонецФункции // ОпределитьКоличествоПУПриОчистке()

&НаКлиенте
// Возвращает массив строк ПУ в дереве.
Функция ПолучитьМассивСтрокПУВДереве()
	
	МассивСтрок       = Новый Массив;
	ДеревоПоказанияПУ = ПолучитьКоллекциюСтрокДереваНаКлиенте();
	
	Для Каждого ТекСтрока Из ДеревоПоказанияПУ Цикл
		
		Если ТекСтрока.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			
			МассивСтрок.Добавить(ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции // ПолучитьМассивСтрокПУВДереве()

&НаКлиенте
// Обработчик результата вопроса, вызванной в процедуре "КоличествоСчетчиковВОднойСтрокеТегеОчистка()".
Процедура ОбработатьРезультатВопросаУдалитьПУ(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьПараметрыПУ();
		
		Объект.КоличествоСчетчиковВОднойСтрокеТеге = ПолучитьМассивСтрокПУВДереве().Количество();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаУдалитьПУ()

&НаКлиенте
// Процедура удаляет строки параметра прибора учета.
Процедура ОчиститьПараметрыПУ()
	
	СтрокиПУДерева = ПолучитьМассивСтрокПУВДереве();
	
	// Удаляем с конца дерева.
	мПоследнийИндекс = СтрокиПУДерева.ВГраница();
	
	Пока ИмеетсяПУВСоставеПараметров(Истина, Ложь) Цикл
		
		УдалитьСтрокуДерева(СтрокиПУДерева[мПоследнийИндекс]);
		
		мПоследнийИндекс = мПоследнийИндекс - 1;
		
	КонецЦикла;
	
	ОбновитьИменаИПорядковыеНомераПУ();
	
КонецПроцедуры // ОчиститьПараметрыПУ()

&НаСервере
// Обновляет порядковые номера ПУ и имя параметра ПУ.
Процедура ОбновитьИменаИПорядковыеНомераПУ()
	
	СортироватьПараметрыПУВДеревеНаСервере();
	
	ДеревоЗагрузкаПоказаний = ПолучитьКоллекциюСтрокДереваНаСервере();
	
	НомерТекущегоПУ = 1;
	Для Каждого ТекущаяСтрока Из ДеревоЗагрузкаПоказаний Цикл
		
		Если ТекущаяСтрока.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			
			ТекущаяСтрока.ПорядковыйНомерПУВСоставеПараметров = НомерТекущегоПУ;
			ТекущаяСтрока.ИмяПараметра                        = "Прибор учета " + НомерТекущегоПУ;
			
			Для Каждого ПодСтрокаПУ Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				ПодСтрокаПУ.ПорядковыйНомерПУВСоставеПараметров = НомерТекущегоПУ;
			КонецЦикла;
			
			НомерТекущегоПУ = НомерТекущегоПУ + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьИменаИПорядковыеНомераПУ()

&НаСервере
// Процедура сортирует строки в дереве по "ПорядокПУ".
Процедура СортироватьПараметрыПУВДеревеНаСервере()
	
	ДеревоЗагрузкаПоказаний = ДанныеФормыВЗначение(ДеревоНастройкаСоответствияПолей, Тип("ДеревоЗначений"));
	
	ДеревоЗагрузкаПоказаний.Строки.Сортировать("ПорядковыйНомерПУВСоставеПараметров Возр");
	
	ЗначениеВДанныеФормы(ДеревоЗагрузкаПоказаний, ДеревоНастройкаСоответствияПолей);
	
КонецПроцедуры // СортироватьПараметрыПУВДеревеНаСервере()

&НаКлиенте
// Процедура удаляет строку дерева значений по переданной строке.
Процедура УдалитьСтрокуДерева(СтрокаДерева)
	
	КоллекцияСтрокДерева = ПолучитьКоллекциюСтрокДереваНаКлиенте();
	
	КоллекцияСтрокДерева.Удалить(КоллекцияСтрокДерева.Индекс(СтрокаДерева));
	
КонецПроцедуры // УдалитьСтрокуДерева()

&НаКлиенте
// Проверяет существование параметра ПУ.
Функция ИмеетсяПУВСоставеПараметров(ПроверкаПриУдалении = Ложь, ВыводитьСообщение = Истина)
	
	мСтрокиПУВДереве = ПолучитьМассивСтрокПУВДереве();
	времКоличество   = мСтрокиПУВДереве.Количество();
	
	Если ПроверкаПриУдалении Тогда
		времКоличество = времКоличество - 1;
	КонецЕсли;
	
	Если ПроверкаПриУдалении И времКоличество < 1 Тогда
		Если ВыводитьСообщение Тогда
			ПоказатьПредупреждение(Неопределено, "В настройках соответствия полей должен быть хотя бы один прибор учета.");
		КонецЕсли;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ИмеетсяПУВСоставеПараметров()

&НаКлиенте
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой()
	
	// По формату файла.
	
	Элементы.ГруппаНастройкиЧтенияДанныхНеXML.Видимость             = НЕ ЭтоXML;
	Элементы.ГруппаВложенныеУзлы.Видимость                          = ЭтоXML;
	Элементы.РазделительКолонок.Видимость                           = ЭтоTXT ИЛИ ЭтоCSV;
	Элементы.ДеревоНастройкаСоответствияПолейГруппаXML.Видимость    = ЭтоXML;
	Элементы.ДеревоНастройкаСоответствияПолейГруппаDBF.Видимость    = ЭтоDBF И ЭтоУниверсальнаяВыгрузкаДанных;
	Элементы.ДеревоНастройкаСоответствияПолейНомерКолонки.Видимость = НЕ ЭтоXML;
	
	// Отдельные группы элементов и элементы настроек по виду операции.
	
	Элементы.НомерСтрокиДанных.Видимость     = НЕ ЭтоУниверсальнаяВыгрузкаДанных;
	Элементы.ПризнакИтоговойСтроки.Видимость = НЕ ЭтоУниверсальнаяВыгрузкаДанных;
	
	Элементы.ГруппаНастройкиЗагрузкиПоказанийПУ.Видимость   = ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета;
	Элементы.ГруппаНастройкиЗагрузкиПлатежей.Видимость      = ЭтоЗагрузкаИзСистемПриемаПлатежей;
	Элементы.ГруппаНастройкиУниверсальнойВыгрузки.Видимость = ЭтоУниверсальнаяВыгрузкаДанных;
	
	Элементы.ДеревоНастройкаСоответствияПолейПараметр.Видимость     = НЕ ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета;
	Элементы.ДеревоНастройкаСоответствияПолейИмяПараметра.Видимость = ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета;
	Элементы.ГруппаКнопкиНастроекДерева.Видимость                   = НЕ ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета;
	Элементы.ГруппаНастройкиДереваДляЗагрузкиПоказаний.Видимость    = ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета;
	Элементы.ДеревоНастройкаСоответствияПолей.ИзменятьСоставСтрок   = НЕ ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета;
	Элементы.ДеревоНастройкаСоответствияПолей.ИзменятьПорядокСтрок  = НЕ ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета;
	
	// Детально по виду операции.
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Элементы.ДеревоНастройкаСоответствияПолейПараметр.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ПараметрыСистемыЗагрузкиПоказаний");
		
		ИзменитьВидимостьНастройкиШаблонаРеестраПоказанийПриборовУчета();
		
		Если НЕ ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний Тогда
			
			Элементы.ГруппаНастройкиДереваДляЗагрузкиПоказаний.Видимость = НЕ Объект.ШаблонРеестраПоказанийПриборовУчета =
										ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8");
			
		КонецЕсли;
		
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		Элементы.ДеревоНастройкаСоответствияПолейПараметр.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ПараметрыСистемыЗагрузкиПлатежей");
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Элементы.ДеревоНастройкаСоответствияПолейПараметр.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных");
		
		ИзменитьВидимостьНастройкиВыводитьЗаголовокУниверсальнойВыгрузки();
		
		Элементы.СчетчикИПоказаниеГруппаDBF.Видимость = ЭтоDBF;
		
		Элементы.РазделительПарыПУПоказание.Видимость = НЕ ЭтоDBF И НЕ ЭтоXLS;
		
		Элементы.ДеревоНастройкаСоответствияПолейНомерКолонки.Видимость = НЕ ЭтоDBF;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УстановитьВидимостьНастроекПрибораУчета(ИмяНастройки, ВыбранноеЗначение)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено
	   И НЕ ТекущиеДанные[ИмяНастройки] = ВыбранноеЗначение Тогда
		
		ТекущиеДанные[ИмяНастройки] = ВыбранноеЗначение;
		
		УстановкаВидимостиСпособаОпределенияПУ(ТекущиеДанные);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоллекциюСтрокДереваНаКлиенте()
	
	Возврат ДеревоНастройкаСоответствияПолей.ПолучитьЭлементы();
	
КонецФункции

&НаСервере
Функция ПолучитьКоллекциюСтрокДереваНаСервере()
	
	Возврат ДеревоНастройкаСоответствияПолей.ПолучитьЭлементы();
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиСоответствияПолейВДерево()
	
	КоллекцияСтрокДерева = ПолучитьКоллекциюСтрокДереваНаСервере();
	
	КоллекцияСтрокДерева.Очистить();
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию = ПолучитьСтруктуруНастроекДляЗагрузкиПоказанийПоУмолчанию();
		
		Если Объект.НастройкиСоответствияПолей.Количество() = 0 Тогда
			ЗаполнитьНастройкиСоответствияПолейСтрокамиПоУмолчаниюДляЗагрузкиПоказаний(СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию);
		КонецЕсли;
		
		Если ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний Тогда
			
			// Для настроек с одним ПУ настроим порядок строк в ТЧ "НастройкиСоответствияПолей".
			ПараметрыПоиска = Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика);
			
			КоличествоПУ = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска).Количество();
			
			Если КоличествоПУ = 0 Тогда
				
				ДобавитьНовыйПриборУчетаСПараметрамиВДерево(СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию);
				
			ИначеЕсли КоличествоПУ = 1 Тогда
				
				НастроитьПорядокНастроекИЗаполнитьПорядокПУ();
				
			КонецЕсли;
			
			// Создаем и заполняем основной уровень "Лицевой счет".
			ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет;
			НовыйУровеньЛС           = КоллекцияСтрокДерева.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовыйУровеньЛС, Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска)[0]);
			
			НовыйУровеньЛС.ИмяПараметра = Строка(НовыйУровеньЛС.Параметр);
			
			ПараметрыПоиска.Вставить("ПорядковыйНомерПУВСоставеПараметров");
			
			// Создаем и заполняем основные уровени и подуровни параметра "Прибор учета".
			Для ПорядковыйНомерСчетчика = 1 По КоличествоПУ Цикл
				
				// Для поиска строки с параметром "Прибор учета" используем ранее инициализитованную структуру "ПараметрыПоиска".
				ПараметрыПоиска.ПорядковыйНомерПУВСоставеПараметров = ПорядковыйНомерСчетчика;
				
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ПорядковыйНомерПУВСоставеПараметров = ПорядковыйНомерСчетчика;
				
				ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика;
				СтрокаПУ                 = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска)[0];
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.НомерКолонкиПУ = СтрокаПУ.НомерКолонки;
				Если ЭтоXML Тогда
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяАтрибутаПУ = СтрокаПУ.ИмяАтрибута;
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяУзлаПУ     = СтрокаПУ.ИмяУзла;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию,
										 СтрокаПУ,
										 "ПорядковыйНомерПУВСоставеПараметров, СпособОпределенияПУ, ИдентификацияПУ,
										 |ПорядковыйНомерПУВБазе, СпособОпределенияУслуги, ИдентификацияУслуги, Услуга");
				
				ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата;
				СтрокаДата               = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска)[0];
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.НомерКолонкиДата = СтрокаДата.НомерКолонки;
				Если ЭтоXML Тогда
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяАтрибутаДата = СтрокаДата.ИмяАтрибута;
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяУзлаДата     = СтрокаДата.ИмяУзла;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию,
										 СтрокаДата,
										 "ПорядокДень, ПорядокМесяц, ПорядокГод, СимволРазделительПериода");
				
				ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное;
				СтрокаПоказанияДн        = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска)[0];
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.СимволРазделительДробнойЧастиДн = СтрокаПоказанияДн.СимволРазделительДробнойЧасти;
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.НомерКолонкиПоказаниеДн         = СтрокаПоказанияДн.НомерКолонки;
				Если ЭтоXML Тогда
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяАтрибутаДн = СтрокаПоказанияДн.ИмяАтрибута;
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяУзлаДн     = СтрокаПоказанияДн.ИмяУзла;
				КонецЕсли;
				
				ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное;
				СтрокаПоказанияНч        = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска)[0];
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.СимволРазделительДробнойЧастиНч = СтрокаПоказанияНч.СимволРазделительДробнойЧасти;
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.НомерКолонкиПоказаниеНч         = СтрокаПоказанияНч.НомерКолонки;
				Если ЭтоXML Тогда
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяАтрибутаНч = СтрокаПоказанияНч.ИмяАтрибута;
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяУзлаНч     = СтрокаПоказанияНч.ИмяУзла;
				КонецЕсли;
				
				ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое;
				СтрокаПоказанияПк        = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска)[0];
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.СимволРазделительДробнойЧастиПк = СтрокаПоказанияПк.СимволРазделительДробнойЧасти;
				СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.НомерКолонкиПоказаниеПк         = СтрокаПоказанияПк.НомерКолонки;
				Если ЭтоXML Тогда
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяАтрибутаПк = СтрокаПоказанияПк.ИмяАтрибута;
					СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию.ИмяУзлаПк     = СтрокаПоказанияПк.ИмяУзла;
				КонецЕсли;
				
				ДобавитьНовыйПриборУчетаСПараметрамиВДерево(СтруктураНастроекДляЗагрузкиПоказанийПоУмолчанию);
				
			КонецЦикла;
			
			// Если значение реквизита "Количество счетчиков в одной строке/теге" не совпадает с количеством счетчиков
			// в таблице настроек соответствий, то корректируем значение реквизита.
			Если Объект.КоличествоСчетчиковВОднойСтрокеТеге <> КоличествоПУ Тогда
				Объект.КоличествоСчетчиковВОднойСтрокеТеге = КоличествоПУ;
			КонецЕсли;
			
		Иначе
			
			Если Объект.ШаблонРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
				
				ПараметрыПоиска = Новый Структура("Параметр");
				
				// Поиск строки необязательного параметра "Лицевой счет".
				ПараметрыПоиска.Параметр   = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет;
				СтрокиПараметраЛицевойСчет = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
				НовыйУровеньЛС             = КоллекцияСтрокДерева.Добавить();
				Если СтрокиПараметраЛицевойСчет.Количество() = 0 Тогда
					НовыйУровеньЛС.Параметр     = ПараметрыПоиска.Параметр;
					НовыйУровеньЛС.НомерКолонки = 3;
				Иначе
					ЗаполнитьЗначенияСвойств(НовыйУровеньЛС, СтрокиПараметраЛицевойСчет[0]);
				КонецЕсли;
				НовыйУровеньЛС.ИмяПараметра = Строка(НовыйУровеньЛС.Параметр);
				
				// Поиск строки необязательного параметра "Дата".
				ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата;
				СтрокиПараметраДата      = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
				УровеньПУДата            = КоллекцияСтрокДерева.Добавить();
				Если СтрокиПараметраДата.Количество() = 0 Тогда
					УровеньПУДата.Параметр              = ПараметрыПоиска.Параметр;
					УровеньПУДата.НомерКолонки          = 10;
					УровеньПУДата.СимволРазделительПериода = "/";
				Иначе
					ЗаполнитьЗначенияСвойств(УровеньПУДата, СтрокиПараметраДата[0]);
				КонецЕсли;
				УровеньПУДата.ИмяПараметра = "Дата показания";
				
				// Поиск настроек обязательного параметра "Приборы учета".
				ПараметрыПоиска.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика;
				СтрокиПараметраПоказания = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
				НовыйУровеньПУ           = КоллекцияСтрокДерева.Добавить();
				Если СтрокиПараметраПоказания.Количество() = 0 Тогда
					НовыйУровеньПУ.Параметр        = ПараметрыПоиска.Параметр;
					НовыйУровеньПУ.НомерКолонки    = 8;
					НовыйУровеньПУ.ИдентификацияПУ = СтруктураЗначенийПолей.СпИдентификацияПУ[0].Значение; // "код"
				Иначе
					ЗаполнитьЗначенияСвойств(НовыйУровеньПУ, СтрокиПараметраПоказания[0]);
				КонецЕсли;
				НовыйУровеньПУ.ИмяПараметра        = "Приборы учета";
				НовыйУровеньПУ.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[0].Значение; // "по значению поля реестра"
				
				КоллекцияПодСтрокДерева = НовыйУровеньПУ.ПолучитьЭлементы();
				
				// Поиск строки параметра "Показание дневное".
				ПараметрыПоиска.Параметр        = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное;
				СтрокиПараметраПоказаниеДневное = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
				ПодУровеньПУПоказаниеДневное    = КоллекцияПодСтрокДерева.Добавить();
				Если СтрокиПараметраПоказаниеДневное.Количество() = 0 Тогда
					ПодУровеньПУПоказаниеДневное.Параметр = ПараметрыПоиска.Параметр;
				Иначе
					ЗаполнитьЗначенияСвойств(ПодУровеньПУПоказаниеДневное, СтрокиПараметраПоказаниеДневное[0]);
				КонецЕсли;
				ПодУровеньПУПоказаниеДневное.ИмяПараметра = Строка(ПодУровеньПУПоказаниеДневное.Параметр);
				ПодУровеньПУПоказаниеДневное.НомерКолонки = 0;
				
				// Поиск строки параметра "Показание ночное".
				ПараметрыПоиска.Параметр        = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное;
				СтрокиПараметраПоказаниеНочное = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
				ПодУровеньПУПоказаниеНочное    = КоллекцияПодСтрокДерева.Добавить();
				Если СтрокиПараметраПоказаниеНочное.Количество() = 0 Тогда
					ПодУровеньПУПоказаниеНочное.Параметр = ПараметрыПоиска.Параметр;
				Иначе
					ЗаполнитьЗначенияСвойств(ПодУровеньПУПоказаниеНочное, СтрокиПараметраПоказаниеНочное[0]);
				КонецЕсли;
				ПодУровеньПУПоказаниеНочное.ИмяПараметра = Строка(ПодУровеньПУПоказаниеНочное.Параметр);
				ПодУровеньПУПоказаниеНочное.НомерКолонки = 0;
				
				// Поиск строки параметра "Показание пиковое".
				ПараметрыПоиска.Параметр        = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое;
				СтрокиПараметраПоказаниеПиковое = Объект.НастройкиСоответствияПолей.НайтиСтроки(ПараметрыПоиска);
				ПодУровеньПУПоказаниеПиковое    = КоллекцияПодСтрокДерева.Добавить();
				Если СтрокиПараметраПоказаниеПиковое.Количество() = 0 Тогда
					ПодУровеньПУПоказаниеПиковое.Параметр = ПараметрыПоиска.Параметр;
				Иначе
					ЗаполнитьЗначенияСвойств(ПодУровеньПУПоказаниеПиковое, СтрокиПараметраПоказаниеПиковое[0]);
				КонецЕсли;
				ПодУровеньПУПоказаниеПиковое.ИмяПараметра = Строка(ПодУровеньПУПоказаниеПиковое.Параметр);
				ПодУровеньПУПоказаниеПиковое.НомерКолонки = 0;
				
			Иначе
				
				// На развитие.
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		ОбъектСправочника = РеквизитФормыВЗначение("Объект");
		
		Для Каждого ТекущаяСтрока Из ОбъектСправочника.НастройкиСоответствияПолей Цикл
			
			НоваяСтрока = КоллекцияСтрокДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			Если ЭтоDBF Тогда
				СтруктураНастроекDBF = ТекущаяСтрока.НастройкиПоляDBF.Получить();
				
				Если СтруктураНастроекDBF = Неопределено Тогда
					СтруктураНастроекDBF = СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузки(ТекущаяСтрока.Параметр);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекDBF);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекущаяСтрока Из Объект.НастройкиСоответствияПолей Цикл
			
			ЗаполнитьЗначенияСвойств(КоллекцияСтрокДерева.Добавить(), ТекущаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузки(Параметр)
	
	Возврат Справочники.КВП_НастройкиЗагрузкиВыгрузки.СформироватьСтруктуруПоляDBFДляУниверсальнойВыгрузкиДанных(Параметр);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиСоответствияПолейСтрокамиПоУмолчаниюДляЗагрузкиПоказаний(СтруктураНастроекДляЗагрузкиПоказаний)
	
	Если Объект.ШаблонРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
		
		// Поиск строки необязательного параметра "Лицевой счет".
		СтрокаПараметраЛС = Объект.НастройкиСоответствияПолей.Добавить();
		СтрокаПараметраЛС.Параметр     = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет;
		СтрокаПараметраЛС.НомерКолонки = 3;
		
		// Поиск строки необязательного параметра "Дата".
		СтрокаПараметраДата = Объект.НастройкиСоответствияПолей.Добавить();
		СтрокаПараметраДата.Параметр                 = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата;
		СтрокаПараметраДата.НомерКолонки             = 10;
		СтрокаПараметраДата.СимволРазделительПериода = СтруктураЗначенийПолей.СпРазделителиПериода[4].Значение; // "/"
		
		// Поиск настроек обязательного параметра "Приборы учета".
		СтрокаПараметраПУ = Объект.НастройкиСоответствияПолей.Добавить();
		СтрокаПараметраПУ.Параметр            = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика;
		СтрокаПараметраПУ.НомерКолонки        = 8;
		СтрокаПараметраПУ.ИдентификацияПУ     = СтруктураЗначенийПолей.СпИдентификацияПУ[0].Значение; // "код"
		СтрокаПараметраПУ.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[0].Значение; // "по значению поля реестра"
		
		// Поиск строки параметра "Показание дневное".
		СтрокаПараметраПоказаниеДневное              = Объект.НастройкиСоответствияПолей.Добавить();
		СтрокаПараметраПоказаниеДневное.Параметр     = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное;
		СтрокаПараметраПоказаниеДневное.НомерКолонки = 0;
		
		// Поиск строки параметра "Показание ночное".
		СтрокаПараметраПоказаниеНочное              = Объект.НастройкиСоответствияПолей.Добавить();
		СтрокаПараметраПоказаниеНочное.Параметр     = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное;
		СтрокаПараметраПоказаниеНочное.НомерКолонки = 0;
		
		// Поиск строки параметра "Показание пиковое".
		СтрокаПараметраПоказаниеПиковое              = Объект.НастройкиСоответствияПолей.Добавить();
		СтрокаПараметраПоказаниеПиковое.Параметр     = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое;
		СтрокаПараметраПоказаниеПиковое.НомерКолонки = 0;
		
	Иначе
		
		// Основная строка параметра "Лицевой счет":
		
		НоваяСтрока = Объект.НастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекДляЗагрузкиПоказаний, "ИдентификацияЛС");
		
		// Основная строка параметра "Прибор учета":
		
		НоваяСтрока          = Объект.НастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекДляЗагрузкиПоказаний, "ПорядковыйНомерПУВСоставеПараметров, СпособОпределенияПУ, ИдентификацияПУ");
		
		// Основная строка параметра "Дата" - подстрока параметра "Прибор учета":
		
		НоваяСтрока          = Объект.НастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекДляЗагрузкиПоказаний, "ПорядковыйНомерПУВСоставеПараметров, СимволРазделительПериода, ПорядокДень, ПорядокМесяц, ПорядокГод");
		
		// Основная строка параметра "Показание дневное" - подстрока параметра "Прибор учета":
		
		НоваяСтрока                                     = Объект.НастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр                            = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = СтруктураНастроекДляЗагрузкиПоказаний.ПорядковыйНомерПУВСоставеПараметров;
		НоваяСтрока.СимволРазделительДробнойЧасти       = СтруктураНастроекДляЗагрузкиПоказаний.СимволРазделительДробнойЧастиДн;
		
		// Основная строка параметра "Показание ночное" - подстрока параметра "Прибор учета":
		
		НоваяСтрока                                     = Объект.НастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр                            = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = СтруктураНастроекДляЗагрузкиПоказаний.ПорядковыйНомерПУВСоставеПараметров;
		НоваяСтрока.СимволРазделительДробнойЧасти       = СтруктураНастроекДляЗагрузкиПоказаний.СимволРазделительДробнойЧастиНч;
		
		// Основная строка параметра "Показание пиковое" - подстрока параметра "Прибор учета":
		
		НоваяСтрока                                     = Объект.НастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр                            = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = СтруктураНастроекДляЗагрузкиПоказаний.ПорядковыйНомерПУВСоставеПараметров;
		НоваяСтрока.СимволРазделительДробнойЧасти       = СтруктураНастроекДляЗагрузкиПоказаний.СимволРазделительДробнойЧастиПк;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Получает максимальный порядок ПУ в дереве.
Функция ПолучитьМаксимальныйПорядокПУВДереве()
	
	МассивСтрок       = Новый Массив;
	ДеревоПоказанияПУ = ПолучитьКоллекциюСтрокДереваНаСервере();
	
	Для Каждого ТекСтрока Из ДеревоПоказанияПУ Цикл
		
		Если ТекСтрока.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			
			МассивСтрок.Добавить(ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МаксимальныйПорядок = 0;
	
	Для Каждого ТекСтрока Из МассивСтрок Цикл
		МаксимальныйПорядок = Макс(МаксимальныйПорядок, ТекСтрока.ПорядковыйНомерПУВСоставеПараметров);
	КонецЦикла;
	
	Возврат МаксимальныйПорядок;
	
КонецФункции

&НаСервере
// Добавляет новый прибор учета с настройками в дерево.
Процедура ДобавитьНовыйПриборУчетаСПараметрамиВДерево(СтруктураНастроекПУ = Неопределено)
	
	ЗаполнятьПараметрыИзПредыдущейСтроки = (СтруктураНастроекПУ = Неопределено);
	
	Если ЗаполнятьПараметрыИзПредыдущейСтроки Тогда
		СтруктураНастроекПУ = ПолучитьСтруктуруНастроекДляЗагрузкиПоказанийПоУмолчанию();
	КонецЕсли;
	
	КоллекцияСтрокДерева                = ПолучитьКоллекциюСтрокДереваНаСервере();
	МаксимальныйПорядокПУВДереве        = ПолучитьМаксимальныйПорядокПУВДереве();
	
	Если ЗаполнятьПараметрыИзПредыдущейСтроки
	   И МаксимальныйПорядокПУВДереве > 0 И КоллекцияСтрокДерева.Количество() > 0 Тогда
		ЗаполнитьСтруктуруНастройкамиПредыдущегоПУ(СтруктураНастроекПУ, МаксимальныйПорядокПУВДереве);
	КонецЕсли;
	
	Если МаксимальныйПорядокПУВДереве >= СтруктураНастроекПУ.ПорядковыйНомерПУВСоставеПараметров Тогда
		ПорядковыйНомерПУВСоставеПараметров = МаксимальныйПорядокПУВДереве + 1;
	Иначе
		ПорядковыйНомерПУВСоставеПараметров = СтруктураНастроекПУ.ПорядковыйНомерПУВСоставеПараметров;
	КонецЕсли;
	
	// Строка-родитель - прибор учета:
	НоваяСтрокаСчетчик = КоллекцияСтрокДерева.Добавить();
	НоваяСтрокаСчетчик.Параметр     = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика;
	НоваяСтрокаСчетчик.ИмяПараметра = "Прибор учета " + ПорядковыйНомерПУВСоставеПараметров;
	НоваяСтрокаСчетчик.НомерКолонки = СтруктураНастроекПУ.НомерКолонкиПУ;
	Если ЭтоXML Тогда
		НоваяСтрокаСчетчик.ИмяАтрибута = СтруктураНастроекПУ.ИмяАтрибутаПУ;
		НоваяСтрокаСчетчик.ИмяУзла     = СтруктураНастроекПУ.ИмяУзлаПУ;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(	НоваяСтрокаСчетчик,
								СтруктураНастроекПУ,
								"ПорядковыйНомерПУВСоставеПараметров, СпособОпределенияПУ, ИдентификацияПУ,
								|ПорядковыйНомерПУВБазе, СпособОпределенияУслуги, ИдентификацияУслуги, Услуга");
	
	КоллекцияСтрокПУ = НоваяСтрокаСчетчик.ПолучитьЭлементы();
	
	// Подчиненные строки:
	НоваяСтрока              = КоллекцияСтрокПУ.Добавить();
	НоваяСтрока.Параметр     = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата;
	НоваяСтрока.ИмяПараметра = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.НомерКолонки = СтруктураНастроекПУ.НомерКолонкиДата;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураНастроекПУ, "ПорядковыйНомерПУВСоставеПараметров, ПорядокДень, ПорядокМесяц, ПорядокГод, СимволРазделительПериода");
	Если ЭтоXML Тогда
		НоваяСтрока.ИмяАтрибута = СтруктураНастроекПУ.ИмяАтрибутаДата;
		НоваяСтрока.ИмяУзла     = СтруктураНастроекПУ.ИмяУзлаДата;
	КонецЕсли;
	
	НоваяСтрока = КоллекцияСтрокПУ.Добавить();
	НоваяСтрока.Параметр                            = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное;
	НоваяСтрока.ИмяПараметра                        = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = ПорядковыйНомерПУВСоставеПараметров;
	НоваяСтрока.СимволРазделительДробнойЧасти       = СтруктураНастроекПУ.СимволРазделительДробнойЧастиДн;
	НоваяСтрока.НомерКолонки                        = СтруктураНастроекПУ.НомерКолонкиПоказаниеДн;
	Если ЭтоXML Тогда
		НоваяСтрока.ИмяАтрибута = СтруктураНастроекПУ.ИмяАтрибутаДн;
		НоваяСтрока.ИмяУзла     = СтруктураНастроекПУ.ИмяУзлаДн;
	КонецЕсли;
	
	НоваяСтрока                                     = КоллекцияСтрокПУ.Добавить();
	НоваяСтрока.Параметр                            = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное;
	НоваяСтрока.ИмяПараметра                        = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = ПорядковыйНомерПУВСоставеПараметров;
	НоваяСтрока.СимволРазделительДробнойЧасти       = СтруктураНастроекПУ.СимволРазделительДробнойЧастиНч;
	НоваяСтрока.НомерКолонки                        = СтруктураНастроекПУ.НомерКолонкиПоказаниеНч;
	Если ЭтоXML Тогда
		НоваяСтрока.ИмяАтрибута = СтруктураНастроекПУ.ИмяАтрибутаНч;
		НоваяСтрока.ИмяУзла     = СтруктураНастроекПУ.ИмяУзлаНч;
	КонецЕсли;
	
	НоваяСтрока                                     = КоллекцияСтрокПУ.Добавить();
	НоваяСтрока.Параметр                            = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое;
	НоваяСтрока.ИмяПараметра                        = Строка(НоваяСтрока.Параметр);
	НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = ПорядковыйНомерПУВСоставеПараметров;
	НоваяСтрока.СимволРазделительДробнойЧасти       = СтруктураНастроекПУ.СимволРазделительДробнойЧастиПк;
	НоваяСтрока.НомерКолонки                        = СтруктураНастроекПУ.НомерКолонкиПоказаниеПк;
	Если ЭтоXML Тогда
		НоваяСтрока.ИмяАтрибута = СтруктураНастроекПУ.ИмяАтрибутаПк;
		НоваяСтрока.ИмяУзла     = СтруктураНастроекПУ.ИмяУзлаПк;
	КонецЕсли;
	
	Объект.КоличествоСчетчиковВОднойСтрокеТеге = ПорядковыйНомерПУВСоставеПараметров;
	
	ОбновитьИменаИПорядковыеНомераПУ();
	
КонецПроцедуры

&НаСервере
// Процедура заполняет структуру настроек нового прибора учета.
Процедура ЗаполнитьСтруктуруНастройкамиПредыдущегоПУ(СтруктураНастроекПУ, МаксимальныйПорядокПУВДереве)
	
	ДеревоЗагрузкаПоказаний = ДанныеФормыВЗначение(ДеревоНастройкаСоответствияПолей, Тип("ДеревоЗначений"));
	
	// Настройки предыдущего ПУ:
	Отбор = Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика"), МаксимальныйПорядокПУВДереве);
	СтрокиДерева = ДеревоЗагрузкаПоказаний.Строки.НайтиСтроки(Отбор);
	
	Строка = СтрокиДерева.Получить(СтрокиДерева.ВГраница());
	
	// Настройки ПУ:
	СтруктураНастроекПУ.Вставить("СпособОпределенияПУ",           Строка.СпособОпределенияПУ);
	СтруктураНастроекПУ.Вставить("ПорядковыйНомерПУВБазе",        Строка.ПорядковыйНомерПУВБазе);
	СтруктураНастроекПУ.Вставить("ИдентификацияПУ",               Строка.ИдентификацияПУ);
	СтруктураНастроекПУ.Вставить("СпособОпределенияУслуги",       Строка.СпособОпределенияУслуги);
	СтруктураНастроекПУ.Вставить("ИдентификацияУслуги",           Строка.ИдентификацияУслуги);
	СтруктураНастроекПУ.Вставить("Услуга",                        Строка.Услуга);
	
	// Настройки подчиненных строк:
	ПодСтрокаПУ = Строка.Строки;
	
	Отбор = Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиДата = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("ПорядокДень",                   ПодСтрокиДата[0].ПорядокДень);
	СтруктураНастроекПУ.Вставить("ПорядокМесяц",                  ПодСтрокиДата[0].ПорядокМесяц);
	СтруктураНастроекПУ.Вставить("ПорядокГод",                    ПодСтрокиДата[0].ПорядокГод);
	СтруктураНастроекПУ.Вставить("СимволРазделительПериода",      ПодСтрокиДата[0].СимволРазделительПериода);
	
	Отбор = Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиПоказанияДн = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиДн", ПодСтрокиПоказанияДн[0].СимволРазделительДробнойЧасти);
	
	Отбор = Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиПоказанияНч = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиНч", ПодСтрокиПоказанияНч[0].СимволРазделительДробнойЧасти);
	
	Отбор = Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое"), МаксимальныйПорядокПУВДереве);
	ПодСтрокиПоказанияПк = ПодСтрокаПУ.НайтиСтроки(Отбор);
	
	СтруктураНастроекПУ.Вставить("СимволРазделительДробнойЧастиПк", ПодСтрокиПоказанияПк[0].СимволРазделительДробнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроекДляЗагрузкиПоказанийПоУмолчанию()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ПорядковыйНомерПУВБазе",              1);
	СтруктураНастроек.Вставить("ПорядковыйНомерПУВСоставеПараметров", 1);
	СтруктураНастроек.Вставить("ИдентификацияЛС",                     СтруктураЗначенийПолей.СпИдентификацияЛС[0].Значение);			// "наименование"
	СтруктураНастроек.Вставить("СпособОпределенияПУ",                 СтруктураЗначенийПолей.СпСпособыОпределенияПУ[0].Значение);		// "по значению поля реестра"
	СтруктураНастроек.Вставить("ИдентификацияПУ",                     СтруктураЗначенийПолей.СпИдентификацияПУ[0].Значение);			// "код"
	СтруктураНастроек.Вставить("СпособОпределенияУслуги",             СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[0].Значение);	// "по значению поля реестра"
	СтруктураНастроек.Вставить("ИдентификацияУслуги",                 СтруктураЗначенийПолей.СпИдентификацияУслуги[0].Значение);		// "по наименованию"
	СтруктураНастроек.Вставить("ПорядокДень",                         1);
	СтруктураНастроек.Вставить("ПорядокМесяц",                        2);
	СтруктураНастроек.Вставить("ПорядокГод",                          3);
	СтруктураНастроек.Вставить("СимволРазделительПериода",            СтруктураЗначенийПолей.СпРазделителиПериода[0].Значение);		// "."
	СтруктураНастроек.Вставить("СимволРазделительДробнойЧастиДн",     СтруктураЗначенийПолей.СпРазделителейДробнойЧасти[0].Значение);	// ","
	СтруктураНастроек.Вставить("СимволРазделительДробнойЧастиНч",     СтруктураНастроек.СимволРазделительДробнойЧастиДн);				// ","
	СтруктураНастроек.Вставить("СимволРазделительДробнойЧастиПк",     СтруктураНастроек.СимволРазделительДробнойЧастиДн);				// ","
	СтруктураНастроек.Вставить("Услуга",                              ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка"));
	СтруктураНастроек.Вставить("НомерКолонкиПУ",                      0);
	СтруктураНастроек.Вставить("НомерКолонкиДата",                    0);
	СтруктураНастроек.Вставить("НомерКолонкиПоказаниеДн",             0);
	СтруктураНастроек.Вставить("НомерКолонкиПоказаниеНч",             0);
	СтруктураНастроек.Вставить("НомерКолонкиПоказаниеПк",             0);
	СтруктураНастроек.Вставить("ИмяАтрибутаПУ",                       "");
	СтруктураНастроек.Вставить("ИмяУзлаПУ",                           "");
	СтруктураНастроек.Вставить("ИмяАтрибутаДата",                     "");
	СтруктураНастроек.Вставить("ИмяУзлаДата",                         "");
	СтруктураНастроек.Вставить("ИмяАтрибутаДн",                       "");
	СтруктураНастроек.Вставить("ИмяУзлаДн",                           "");
	СтруктураНастроек.Вставить("ИмяАтрибутаНч",                       "");
	СтруктураНастроек.Вставить("ИмяУзлаНч",                           "");
	СтруктураНастроек.Вставить("ИмяАтрибутаПк",                       "");
	СтруктураНастроек.Вставить("ИмяУзлаПк",                           "");
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
// Процедура настраивает порядок строк ТЧ "НастройкиСоответствияПолей" с одним ПУ
// в виде:
//		Лицевой счет.
//		Прибор учёта.
//		Дата показаний.
//		Показание дневное.
//		Показание ночное.
//		Показание пиковое.
//
Процедура НастроитьПорядокНастроекИЗаполнитьПорядокПУ()
	
	МаксимальныйИндекс = Объект.НастройкиСоответствияПолей.Количество() - 1;
	
	врНастройкиСоответствияПолей = Объект.НастройкиСоответствияПолей.Выгрузить();
	
	ЗначениеПараметраЛС = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет");
	ПараметрЛС          = врНастройкиСоответствияПолей.Найти(ЗначениеПараметраЛС, "Параметр");
	Если НЕ ПараметрЛС = Неопределено Тогда
		ИндексСтроки = врНастройкиСоответствияПолей.Индекс(ПараметрЛС);
		Если ИндексСтроки > 0 Тогда
			Смещение = (-1) * ИндексСтроки;
			врНастройкиСоответствияПолей.Сдвинуть(ПараметрЛС, Смещение);
		КонецЕсли;
	Иначе
		НоваяСтрока          = врНастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр = ЗначениеПараметраЛС;
	КонецЕсли;
	
	ЗначениеПараметраПУ   = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика");
	ПараметрНомерСчетчика = врНастройкиСоответствияПолей.Найти(ЗначениеПараметраПУ, "Параметр");
	Если НЕ ПараметрНомерСчетчика = Неопределено Тогда
		ПараметрНомерСчетчика.ПорядковыйНомерПУВСоставеПараметров = 1;
		ИндексСтроки = врНастройкиСоответствияПолей.Индекс(ПараметрНомерСчетчика);
		Если ИндексСтроки <> 1 Тогда
			Смещение = ((-1) * ИндексСтроки) + 1;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрНомерСчетчика, (-1) * ИндексСтроки);
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрНомерСчетчика, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока           = врНастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПУ;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = 1;
	КонецЕсли;
	
	ЗначениеПараметраДата = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата");
	ПараметрДата          = врНастройкиСоответствияПолей.Найти(ЗначениеПараметраДата, "Параметр");
	Если НЕ ПараметрДата = Неопределено Тогда
		ПараметрДата.ПорядковыйНомерПУВСоставеПараметров = 1;
		ИндексСтроки = врНастройкиСоответствияПолей.Индекс(ПараметрДата);
		Если ИндексСтроки <> 2 Тогда
			Смещение = ((-1) * ИндексСтроки) + 2;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрДата, (-1) * ИндексСтроки);
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрДата, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока           = врНастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраДата;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = 1;
	КонецЕсли;
	
	ЗначениеПараметраПоказаниеДн = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное");
	ПараметрПоказаниеДневное     = врНастройкиСоответствияПолей.Найти(ЗначениеПараметраПоказаниеДн, "Параметр");
	Если НЕ ПараметрПоказаниеДневное = Неопределено Тогда
		ПараметрПоказаниеДневное.ПорядковыйНомерПУВСоставеПараметров = 1;
		ИндексСтроки = врНастройкиСоответствияПолей.Индекс(ПараметрПоказаниеДневное);
		Если ИндексСтроки <> 3 Тогда
			Смещение = ((-1) * ИндексСтроки) + 3;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрПоказаниеДневное, (-1) * ИндексСтроки);
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрПоказаниеДневное, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока = врНастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПоказаниеДн;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = 1;
	КонецЕсли;
	
	ЗначениеПараметраПоказаниеНч = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное");
	ПараметрПоказаниеНочное      = врНастройкиСоответствияПолей.Найти(ЗначениеПараметраПоказаниеНч, "Параметр");
	Если НЕ ПараметрПоказаниеНочное = Неопределено Тогда
		ПараметрПоказаниеНочное.ПорядковыйНомерПУВСоставеПараметров = 1;
		ИндексСтроки = врНастройкиСоответствияПолей.Индекс(ПараметрПоказаниеНочное);
		Если ИндексСтроки <> 4 Тогда
			Смещение = ((-1) * ИндексСтроки) + 4;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрПоказаниеНочное, (-1) * ИндексСтроки);
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрПоказаниеНочное, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока = врНастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПоказаниеНч;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = 1;
	КонецЕсли;
	
	ЗначениеПараметраПоказаниеПк = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое");
	ПараметрПоказаниеПиковое     = врНастройкиСоответствияПолей.Найти(ЗначениеПараметраПоказаниеПк, "Параметр");
	Если НЕ ПараметрПоказаниеПиковое = Неопределено Тогда
		ПараметрПоказаниеПиковое.ПорядковыйНомерПУВСоставеПараметров = 1;
		ИндексСтроки = врНастройкиСоответствияПолей.Индекс(ПараметрПоказаниеПиковое);
		Если ИндексСтроки <> 5 Тогда
			Смещение = ((-1) * ИндексСтроки) + 5;
			Если Смещение > МаксимальныйИндекс Тогда
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрПоказаниеПиковое, (-1) * ИндексСтроки);
				врНастройкиСоответствияПолей.Сдвинуть(ПараметрПоказаниеПиковое, МаксимальныйИндекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		НоваяСтрока           = врНастройкиСоответствияПолей.Добавить();
		НоваяСтрока.Параметр  = ЗначениеПараметраПоказаниеПк;
		НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = 1;
	КонецЕсли;
	
	Объект.НастройкиСоответствияПолей.Загрузить(врНастройкиСоответствияПолей);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиПередИзменениемПараметраНаСервере(НомерСтроки)
	
	ТекущиеДанныеФормы = ДеревоНастройкаСоответствияПолей.НайтиПоИдентификатору(НомерСтроки);
	
	Если НЕ ТекущиеДанныеФормы = Неопределено Тогда
		
		ОбъектСправочника = РеквизитФормыВЗначение("Объект");
		
		врНастройкиСоответствияПолей = ОбъектСправочника.НастройкиСоответствияПолей.Выгрузить();
		
		КолонкиТаблицы = врНастройкиСоответствияПолей.Колонки;
		
		Для Каждого ТекущаяКолонка Из КолонкиТаблицы Цикл
			
			ИмяКолонки = ТекущаяКолонка.Имя;
			
			Если НЕ ИмяКолонки = "Параметр"
			   И НЕ ИмяКолонки = "НомерСтроки"
			   И НЕ ИмяКолонки = "НомерКолонки"
			   И НЕ ИмяКолонки = "ИмяАтрибута"
			   И НЕ ИмяКолонки = "ИмяУзла"
			   И НЕ ИмяКолонки = "НастройкиПоляDBF" Тогда
				
				ТекущиеДанныеФормы[ИмяКолонки] = "";
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектСправочника.НастройкиСоответствияПолей.Загрузить(врНастройкиСоответствияПолей);
		
		ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает номер колонки.
Функция ПолучитьНомерКолонки()
	
	МаксимальныйНомер = 0;
	
	КоллекцияСтрок = ПолучитьКоллекциюСтрокДереваНаКлиенте();
	
	Для Каждого ТекущаяСтрока Из КоллекцияСтрок Цикл
		МаксимальныйНомер = Макс(МаксимальныйНомер, ТекущаяСтрока.НомерКолонки);
	КонецЦикла;
	
	Возврат МаксимальныйНомер + 1;
	
КонецФункции // ПолучитьНомерКолонки()

&НаСервере
// Функция получает список параметров для текста заголовка файла.
Функция ПолучитьСписокПараметровДляЗаголовкаВТекстовомФайлеНаСервере()
	
	Возврат Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПолучитьСписокПараметровДляЗаголовкаВТекстовомФайле();
	
КонецФункции

&НаКлиенте
// Процедура-обработчик события "ПоказатьВыборИзМеню" в обработчике команды "ВыбратьПараметрЗаголовка".
Процедура ОбработатьВыборПараметра(РезультатВыбора, ПозицияКурсора) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ИндексСтроки        = ПозицияКурсора.ИндексСтроки;
		ПозицияВСтроке      = ПозицияКурсора.ПозицияВСтроке;
		ТекстПараметра      = "[" + РезультатВыбора.Значение + "]";
		МассивСтрок         = СтрРазделить(Объект.ТекстЗаголовкаВТекстовомФайле, Символы.ПС);
		РедактируемаяСтрока = МассивСтрок[ИндексСтроки];
		ЛеваяЧасть          = Лев(РедактируемаяСтрока, ПозицияВСтроке - 1);
		ПраваяЧасть         = Сред(РедактируемаяСтрока, ПозицияВСтроке);
		ПолученнаяСтрока    = ЛеваяЧасть + ТекстПараметра + ПраваяЧасть;
		
		МассивСтрок.Удалить(ИндексСтроки);
		МассивСтрок.Вставить(ИндексСтроки, ПолученнаяСтрока);
		
		Объект.ТекстЗаголовкаВТекстовомФайле = СтрСоединить(МассивСтрок, Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает описание шаблона реестра показаний.
//
// Параметры:
// 
// Возвращаемое значение:
//  Строка - описание шаблона реестра показаний.
//
Функция ПолучитьОписаниеШаблонаРеестраДанныхСПоказаниями()
	
	Описание = "";
	
	Если Объект.ШаблонРеестраПоказанийПриборовУчета
	   = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8") Тогда
		Описание =  "# <Номер реестра>
					|# <Сумма реестра>
					|# <В том числе пеня>
					|# <Удержанная сумма>
					|# <Сумма к перечислению>
					|# <Число записей>
					|# <Код агента>
					|# <Номер услуги>
					|# <Дата формирования реестра>
					|# <Начало диапазона дат документов, входящих в реестр>
					|# <Конец диапазона дат документов, входящих в реестр>
					|#<Итоговые данные по реестру>" + Символы.ПС
					// Далее идут строки со сведениями по лицевым счетам в формате:
					+ "<Владелец ЛС>;<Адрес>;<Лицевой счет>;<Сумма задолженности>;;;;"
					+ "<Номер экранной формы>:<Штрих код>:<Месяц расчетного периода>:<Год расчетного периода>:<Сумма пени>:"
					+ "<Номер счетчика 1>:<Тип счетчика 1>:<Показание счетчика 1>:::::::::::::::::::"
					+ "<Номер счетчика 8>:<Тип счетчика 8>:<Показание счетчика 8>;<Номер документа>;<Дата документа>";
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции // ПолучитьОписаниеШаблонаРеестраДанныхСПоказаниями()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванной из процедуры "ВидОперацииПриИзменении()".
// При положительном ответе очищается таблица "НастройкиСоответствияПолей" и вызывается механизм
// подготовки к перерисовке схемы.
//
// Параметры:
//  РезультатВопроса		 - 	КодВозвратаДиалога - код ответа.
//  ДополнительныеПараметры	 - 	Структура - дополнительные параметры.
//
Процедура ОбоработатьРезультатВопросаВидОперацииПриИзменении(РезультатВопроса, ВыбранноеЗначение) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НастройкиСоответствияПолей.Очистить();
	
	ВидОперацииПриИзмененииПродолжение(ВыбранноеЗначение);
	
КонецПроцедуры // ОбоработатьРезультатВопросаВидОперацииПриИзменении()

&НаКлиенте
// Процедура подготавливает параметры к перерисовки схемы и запускает механизм перерисовки.
Процедура ВидОперацииПриИзмененииПродолжение(ВыбранноеЗначение)
	
	Модифицированность = Истина;
	
	Объект.ВидОперации = ВыбранноеЗначение;
	
	ОбновитьЗначенияОбщихРеквизитов();
	
	ИзменитьСоставСписковВыбораПолейПоВидуОперации();
	
	УправлениеФормой();
	
	ЗагрузитьНастройкиСоответствияПолейВДерево();
	
КонецПроцедуры // ВидОперацииПриИзмененииПродолжение()

&НаКлиенте
Процедура ИзменитьСоставСписковВыбораПолейПоВидуОперации()
	
	Элементы.ФорматФайла.СписокВыбора.Очистить();
	Элементы.РазделительКолонок.СписокВыбора.Очистить();
	Элементы.РазделительПарыПУПоказание.СписокВыбора.Очистить();
	
	СпФорматовФайла               = СтруктураЗначенийПолей.СпФорматовФайла;
	СпРазделителейКолонок         = СтруктураЗначенийПолей.СпРазделителейКолонок;
	СпРазделителейПарыПУПоказание = СтруктураЗначенийПолей.СпРазделителейПарыПУПоказание;
	
	СписокФорматовФайла               = Новый СписокЗначений;
	СписокРазделителейКолонок         = Новый СписокЗначений;
	СписокРазделителейПарыПУПоказание = Новый СписокЗначений;
	
	ЭтоШаблонРеестраПоказанийПоФорматуВыгрузкиВСистемуГородВариант8 = ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета
																	И НЕ ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний
																	И Объект.ШаблонРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8");
	
	Если ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		// TXT
		ФорматTXT = СпФорматовФайла[0];
		СписокФорматовФайла.Добавить(ФорматTXT.Значение, ФорматTXT.Представление);
		
		// XLS
		ФорматXLS = СпФорматовФайла[1];
		СписокФорматовФайла.Добавить(ФорматXLS.Значение, ФорматXLS.Представление);
		
		// CSV
		ФорматCSV = СпФорматовФайла[2];
		СписокФорматовФайла.Добавить(ФорматCSV.Значение, ФорматCSV.Представление);
		
		// DBF
		ФорматDBF = СпФорматовФайла[4];
		СписокФорматовФайла.Добавить(ФорматDBF.Значение, ФорматDBF.Представление);
		
		Если ЭтоCSV Тогда
			РазделительТочкаСЗапятой = СпРазделителейПарыПУПоказание[1]; // ";"
			СписокРазделителейПарыПУПоказание.Добавить(РазделительТочкаСЗапятой.Значение, РазделительТочкаСЗапятой.Представление);
		КонецЕсли;
		
	ИначеЕсли ЭтоШаблонРеестраПоказанийПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
		
		// TXT
		ФорматTXT = СпФорматовФайла[0];
		СписокФорматовФайла.Добавить(ФорматTXT.Значение, ФорматTXT.Представление);
		
	КонецЕсли;
	
	Если ЭтоCSV ИЛИ ЭтоШаблонРеестраПоказанийПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
		
		РазделительТочкаСЗапятой = СпРазделителейКолонок[0]; // ";"
		СписокРазделителейКолонок.Добавить(РазделительТочкаСЗапятой.Значение, РазделительТочкаСЗапятой.Представление);
		
	КонецЕсли;
	
	Если ЭтоCSV Тогда
		
		СимволТочкаСЗапятой = СтруктураЗначенийПолей.СпРазделителейКолонок[0].Значение; // ";"
		
		Если НЕ Объект.РазделительКолонок = СимволТочкаСЗапятой Тогда
			Объект.РазделительКолонок = СимволТочкаСЗапятой;
		КонецЕсли;
		
		Если ЭтоУниверсальнаяВыгрузкаДанных Тогда
			КоллекцияСтрокДерева = ПолучитьКоллекциюСтрокДереваНаКлиенте();
			
			Для Каждого ТекущаяСтрока Из КоллекцияСтрокДерева Цикл
				Если ТекущаяСтрока.Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание") Тогда
					ТекущаяСтрока.РазделительПарыПУПоказание = СимволТочкаСЗапятой;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение списков выбора полей:
	
	Если СписокФорматовФайла.Количество() = 0 Тогда
		СписокФорматовФайла = СпФорматовФайла;
	КонецЕсли;
	Для Каждого ТекЭлемент Из СписокФорматовФайла Цикл
		Элементы.ФорматФайла.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Если СписокРазделителейКолонок.Количество() = 0 Тогда
		СписокРазделителейКолонок = СпРазделителейКолонок;
	КонецЕсли;
	Для Каждого ТекЭлемент Из СписокРазделителейКолонок Цикл
		Элементы.РазделительКолонок.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Если СписокРазделителейПарыПУПоказание.Количество() = 0 Тогда
		СписокРазделителейПарыПУПоказание = СпРазделителейПарыПУПоказание;
	КонецЕсли;
	Для Каждого ТекЭлемент Из СписокРазделителейПарыПУПоказание Цикл
		Элементы.РазделительПарыПУПоказание.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораПолейФормы()
	
	СтруктураЗначенийПолей = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПодговитьСтруктуруЗначенийПолей();
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпФорматовФайла Цикл
		Элементы.ФорматФайла.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпРазделителейКолонок Цикл
		Элементы.РазделительКолонок.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпСпособыОпределенияПУ Цикл
		Элементы.СпособОпределенияПУ.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпИдентификацияПУ Цикл
		Элементы.ИдентификацияПУ.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
		Элементы.ИдентификацияПУСчетчикИПоказание.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпСпособыОпределенияУслуги Цикл
		Элементы.СпособОпределенияУслуги.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпИдентификацияУслуги Цикл
		Элементы.ИдентификацияУслуги.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпРазделителейДробнойЧасти Цикл
		Элементы.СимволРазделительДробнойЧасти.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпИдентификацияЛС Цикл
		Элементы.ПолеИдентификацииЛС.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпРазделителиПериода Цикл
		Элементы.СимволРазделительПериода.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпРазделителейПарыПУПоказание Цикл
		Элементы.РазделительПарыПУПоказание.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпИдентификацияВидаИНоменклатурыУслуги Цикл
		Элементы.ПолеИдентификацииВидаИНоменклатурыУслуги.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураЗначенийПолей.СпИдентификацияУслугиОплаты Цикл
		Элементы.ИдентификацияУслугиОплаты.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Устанавливает значения реквизитов значениями по умолчанию.
Процедура ОбновитьЗначенияОбщихРеквизитов()
	
	// ЗНАЧЕНИЯ ОБЩИХ РЕКВИЗИТОВ.
	
	Если ПустаяСтрока(Объект.ФорматФайла) Тогда
		Объект.ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[0].Значение; // "TXT"
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Кодировка) Тогда
		Объект.Кодировка = СтруктураЗначенийПолей.СпКодировки[0].Значение; // "DOS"
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.РазделительКолонок) ИЛИ Объект.ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[2].Значение Тогда // "CSV"
		Объект.РазделительКолонок = СтруктураЗначенийПолей.СпРазделителейКолонок[0].Значение; // ";"
	КонецЕсли;
	
	ВидОперации = Объект.ВидОперации;
	
	ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета = ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета");
	ЭтоЗагрузкаИзСистемПриемаПлатежей              = ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей");
	ЭтоУниверсальнаяВыгрузкаДанных                 = ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.УниверсальнаяВыгрузкаДанных");
	
	ОбновитьПараметрыПоФорматуФайла();
	
	// ЗАПОЛНИМ ЗНАЧЕНИЯ РЕКВИЗИТОВ ПО ВИДУ ОПЕРАЦИИ:
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Если ПустаяСтрока(Объект.ВариантЗагрузкиНулевыхПоказаний) Тогда
			Объект.ВариантЗагрузкиНулевыхПоказаний = СтруктураЗначенийПолей.СпВариантЗагрузкиНулевыхПоказаний[0].Значение; // "Загружать нулевые как 0"
		КонецЕсли;
		
		Если Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета.Пустая() Тогда
			Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную");
		КонецЕсли;
		
		ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний = ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета
														 И Объект.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную");
		
		Если НЕ ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний
		   И Объект.ШаблонРеестраПоказанийПриборовУчета.Пустая() Тогда
			Объект.ШаблонРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8");
		ИначеЕсли ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний Тогда
			Объект.ШаблонРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПустаяСсылка");
		КонецЕсли;
		
		Если Объект.ШаблонРеестраПоказанийПриборовУчета = ПредопределенноеЗначение("Перечисление.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8")
		   И НЕ ЭтоTXT Тогда
			Объект.ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[0].Значение; // "TXT"
			ОбновитьПараметрыПоФорматуФайла();
		КонецЕсли;
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Если ЭтоXML Тогда
			Объект.ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[0].Значение; // "TXT"
			ОбновитьПараметрыПоФорматуФайла();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает значения реквизитов значениями по умолчанию.
Процедура ОбновитьПараметрыПоФорматуФайла()
	
	СпФорматовФайла = СтруктураЗначенийПолей.СпФорматовФайла;
	ФорматФайла     = Объект.ФорматФайла;
	
	ЭтоTXT = ФорматФайла = СпФорматовФайла[0].Значение; // "TXT"
	ЭтоXLS = ФорматФайла = СпФорматовФайла[1].Значение; // "XLS"
	ЭтоCSV = ФорматФайла = СпФорматовФайла[2].Значение; // "CSV"
	ЭтоXML = ФорматФайла = СпФорматовФайла[3].Значение; // "XML"
	ЭтоDBF = ФорматФайла = СпФорматовФайла[4].Значение; // "DBF"
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияНастроекПараметра(ТекущиеДанные)
	
	Параметр = ТекущиеДанные.Параметр;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.ИдентификацияЛС)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияЛС.НайтиПоЗначению(ТекущиеДанные.ИдентификацияЛС) = Неопределено Тогда
				ТекущиеДанные.ИдентификацияЛС = СтруктураЗначенийПолей.СпИдентификацияЛС[0].Значение; // "наименование"
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.СпособОпределенияПУ)
			 ИЛИ СтруктураЗначенийПолей.СпСпособыОпределенияПУ.НайтиПоЗначению(ТекущиеДанные.СпособОпределенияПУ) = Неопределено Тогда
				ТекущиеДанные.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[0].Значение; // "по значению поля реестра"
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущиеДанные.ИдентификацияПУ)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияПУ.НайтиПоЗначению(ТекущиеДанные.ИдентификацияПУ) = Неопределено Тогда
				ТекущиеДанные.ИдентификацияПУ = СтруктураЗначенийПолей.СпИдентификацияПУ[0].Значение; // "код"
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущиеДанные.СпособОпределенияУслуги)
			 ИЛИ СтруктураЗначенийПолей.СпСпособыОпределенияУслуги.НайтиПоЗначению(ТекущиеДанные.СпособОпределенияУслуги) = Неопределено Тогда
				ТекущиеДанные.СпособОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[0].Значение; // "по значению поля реестра"
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущиеДанные.ИдентификацияУслуги)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияУслуги.НайтиПоЗначению(ТекущиеДанные.ИдентификацияУслуги) = Неопределено Тогда
				ТекущиеДанные.ИдентификацияУслуги = СтруктураЗначенийПолей.СпИдентификацияУслуги[0].Значение; // "по наименованию"
			КонецЕсли;
			
			Если ТекущиеДанные.ПорядковыйНомерПУВБазе = 0 Тогда
				ТекущиеДанные.ПорядковыйНомерПУВБазе = 1;
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное")
			  ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное")
			  ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.СимволРазделительДробнойЧасти)
			 ИЛИ СтруктураЗначенийПолей.СпРазделителейДробнойЧасти.НайтиПоЗначению(ТекущиеДанные.СимволРазделительДробнойЧасти) = Неопределено Тогда
				ТекущиеДанные.СимволРазделительДробнойЧасти = СтруктураЗначенийПолей.СпРазделителейДробнойЧасти[0].Значение; // ","
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.СимволРазделительПериода)
			 ИЛИ СтруктураЗначенийПолей.СпРазделителиПериода.НайтиПоЗначению(ТекущиеДанные.СимволРазделительПериода) = Неопределено Тогда
				ТекущиеДанные.СимволРазделительПериода = СтруктураЗначенийПолей.СпРазделителиПериода[0].Значение; // "."
			КонецЕсли;
			
			ЗаполнитьТаблицуНастройкаПериодаПоТекущейСтроке(ТекущиеДанные);
			
		КонецЕсли;
		
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.ЛицевойСчет") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.ИдентификацияЛС)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияЛС.НайтиПоЗначению(ТекущиеДанные.ИдентификацияЛС) = Неопределено Тогда
				ТекущиеДанные.ИдентификацияЛС = СтруктураЗначенийПолей.СпИдентификацияЛС[0].Значение; // "наименование"
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.ПериодОплаты")
			  ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Дата") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.СимволРазделительПериода)
			 ИЛИ СтруктураЗначенийПолей.СпРазделителиПериода.НайтиПоЗначению(ТекущиеДанные.СимволРазделительПериода) = Неопределено Тогда
				ТекущиеДанные.СимволРазделительПериода = СтруктураЗначенийПолей.СпРазделителиПериода[0].Значение; // "."
			КонецЕсли;
			
			ЗаполнитьТаблицуНастройкаПериодаПоТекущейСтроке(ТекущиеДанные);
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Сумма") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.СимволРазделительДробнойЧасти)
			 ИЛИ СтруктураЗначенийПолей.СпРазделителейДробнойЧасти.НайтиПоЗначению(ТекущиеДанные.СимволРазделительДробнойЧасти) = Неопределено Тогда
				ТекущиеДанные.СимволРазделительДробнойЧасти = СтруктураЗначенийПолей.СпРазделителейДробнойЧасти[0].Значение; // ","
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Услуга") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.ИдентификацияУслуги)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияУслугиОплаты.НайтиПоЗначению(ТекущиеДанные.ИдентификацияУслуги) = Неопределено Тогда
				ТекущиеДанные.ИдентификацияУслуги = СтруктураЗначенийПолей.СпИдентификацияУслугиОплаты[0].Значение; // "по наименованию"
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущиеДанные.ПолеИдентификацииВидаИНоменклатурыУслуги)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияВидаИНоменклатурыУслуги.НайтиПоЗначению(ТекущиеДанные.ПолеИдентификацииВидаИНоменклатурыУслуги) = Неопределено Тогда
				ТекущиеДанные.ПолеИдентификацииВидаИНоменклатурыУслуги = СтруктураЗначенийПолей.СпИдентификацияВидаИНоменклатурыУслуги[0].Значение; // "наименование"
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ЛицевойСчет") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.ИдентификацияЛС)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияЛС.НайтиПоЗначению(ТекущиеДанные.ИдентификацияЛС) = Неопределено Тогда
				ТекущиеДанные.ИдентификацияЛС = СтруктураЗначенийПолей.СпИдентификацияЛС[0].Значение; // "наименование"
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.СимволРазделительПериода)
			 ИЛИ СтруктураЗначенийПолей.СпРазделителиПериода.НайтиПоЗначению(ТекущиеДанные.СимволРазделительПериода) = Неопределено Тогда
				ТекущиеДанные.СимволРазделительПериода = СтруктураЗначенийПолей.СпРазделителиПериода[0].Значение; // "."
			КонецЕсли;
			
			ЗаполнитьТаблицуНастройкаПериодаПоТекущейСтроке(ТекущиеДанные);
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.Площадь") Тогда
			
			Если ТекущиеДанные.ВидПлощади.Пустая() Тогда
				ТекущиеДанные.ВидПлощади = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь");
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга")
			  ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.СимволРазделительДробнойЧасти)
			 ИЛИ СтруктураЗначенийПолей.СпРазделителейДробнойЧасти.НайтиПоЗначению(ТекущиеДанные.СимволРазделительДробнойЧасти) = Неопределено Тогда
				ТекущиеДанные.СимволРазделительДробнойЧасти = СтруктураЗначенийПолей.СпРазделителейДробнойЧасти[0].Значение; // ","
			КонецЕсли;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание") Тогда
			
			Если ПустаяСтрока(ТекущиеДанные.ИдентификацияПУ)
			 ИЛИ СтруктураЗначенийПолей.СпИдентификацияПУ.НайтиПоЗначению(ТекущиеДанные.ИдентификацияПУ) = Неопределено Тогда
				ТекущиеДанные.ИдентификацияПУ = СтруктураЗначенийПолей.СпИдентификацияПУ[0].Значение; // "код"
			КонецЕсли;
			
			Если ПустаяСтрока(ТекущиеДанные.РазделительПарыПУПоказание)
			 ИЛИ СтруктураЗначенийПолей.СпРазделителейПарыПУПоказание.НайтиПоЗначению(ТекущиеДанные.РазделительПарыПУПоказание) = Неопределено Тогда
				ТекущиеДанные.РазделительПарыПУПоказание = СтруктураЗначенийПолей.СпРазделителейПарыПУПоказание[0].Значение; // ":"
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Заполняет таблицу настройки даты или периода.
Процедура ЗаполнитьТаблицуНастройкаПериодаПоТекущейСтроке(ТекущиеДанные)
	
	ФорматПериодаБезДней = ТекущиеДанные.ФорматПериодаБезДней;
	
	Объект.НастройкаПериода.Очистить();
	
	СписокЧастейДаты = Новый СписокЗначений;
	
	Если НЕ ЭтоУниверсальнаяВыгрузкаДанных И НЕ ФорматПериодаБезДней Тогда
		СписокЧастейДаты.Добавить(ТекущиеДанные.ПорядокДень,  "День");
	КонецЕсли;
	
	СписокЧастейДаты.Добавить(ТекущиеДанные.ПорядокМесяц, "Месяц");
	СписокЧастейДаты.Добавить(ТекущиеДанные.ПорядокГод,   "Год");
	
	СписокЧастейДаты.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	
	КоличествоЧастей = СписокЧастейДаты.Количество();
	
	Для Сч = 1 По КоличествоЧастей Цикл
		
		ПредставлениеПериода = СписокЧастейДаты[Сч - 1].Представление;
		
		Объект.НастройкаПериода.Вставить(Сч - 1).ПараметрДаты = ПредставлениеПериода;
		
		Если ПредставлениеПериода = "День" Тогда
			Если ФорматПериодаБезДней Тогда
				ТекущиеДанные.ПорядокДень = 0;
			Иначе
				ТекущиеДанные.ПорядокДень = Сч;
			КонецЕсли;
		КонецЕсли;
		
		Если ПредставлениеПериода = "Месяц" Тогда
			ТекущиеДанные.ПорядокМесяц = Сч;
		КонецЕсли;
		
		Если ПредставлениеПериода = "Год" Тогда
			ТекущиеДанные.ПорядокГод = Сч;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтраницуНастроекПараметра()
	
	Элементы.ГруппаСхема.Видимость              = Ложь;
	Элементы.ГруппаНастройкиПараметра.Видимость = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоНастройкаСоответствияПолей.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Параметр        = ТекущиеДанные.Параметр;
	ПараметрСтрокой = Строка(Параметр);
	
	СоответствияСтраницыНастроекТекущемуПараметру = Новый Соответствие;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Дата",              Элементы.НастройкиДатыПериода);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Лицевой счет",      Элементы.ЛицевойСчет);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Номер счетчика",    Элементы.ПриборУчета);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Показание дневное", Элементы.Сумма);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Показание ночное",  Элементы.Сумма);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Показание пиковое", Элементы.Сумма);
		
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Дата",          Элементы.НастройкиДатыПериода);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Лицевой счет",  Элементы.ЛицевойСчет);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Услуга",        Элементы.Услуга);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Сумма",         Элементы.Сумма);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Период оплаты", Элементы.НастройкиДатыПериода);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Штрихкод",      Элементы.Штрихкод);
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Адрес",                                  Элементы.Адрес);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Дата операции",                          Элементы.ДатаОперации);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Лицевой счет",                           Элементы.ЛицевойСчет);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Номер телефона",                         Элементы.НомерТелефона);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Период оплаты",                          Элементы.НастройкиДатыПериода);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Площадь",                                Элементы.Площадь);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Сумма долга",                            Элементы.Сумма);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Сумма начислений",                       Элементы.Сумма);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Счетчик и показание",                    Элементы.СчетчикИПоказание);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("ФИО ответственного",                     Элементы.ФИОответственного);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Расчетный счет организации",             Элементы.РасчетныйСчетОрганизации);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Фамилия жильца / Наименование юр. лица", Элементы.Фамилия);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Имя",                                    Элементы.Имя);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("Отчество",                               Элементы.Отчество);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("КБК",                                    Элементы.КБК);
		СоответствияСтраницыНастроекТекущемуПараметру.Вставить("ОКТМО",                                  Элементы.ОКТМО);
		
	КонецЕсли;
	
	СтраницаНастроек = СоответствияСтраницыНастроекТекущемуПараметру.Получить(ПараметрСтрокой);
	
	Если СтраницаНастроек = Неопределено Тогда
		
		Элементы.ГруппаНастройкиПараметра.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаНастройкиПараметра.Видимость = Истина;
		Элементы.ГруппаНастройкиПараметра.Заголовок = "Настройки параметра """ + ПараметрСтрокой + """:";
		
		Элементы.ПанельНастройки.ТекущаяСтраница = СтраницаНастроек;
		
		Для Каждого ТекущаяСтраница Из Элементы.ПанельНастройки.ПодчиненныеЭлементы Цикл
			Если ТекущаяСтраница = СтраницаНастроек Тогда
				ТекущаяСтраница.Видимость = Истина;
			Иначе
				ТекущаяСтраница.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьЗначенияНастроекПараметра(ТекущиеДанные);
		
		ОтобразитьНастройкиНаСтраницеНастроекПараметра(ТекущиеДанные);
		
		СформироватьСхему(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура формирует схему на форме.
Процедура СформироватьСхему(Параметр)
	
	Если ЭтоЗагрузкаИзСистемПриемаПлатежей ИЛИ ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Элементы.ГруппаСхема.Видимость = Истина;
		ПланВыполненияСхема = СформироватьСхемуНаСервере(Параметр, ЭтоЗагрузкаИзСистемПриемаПлатежей, ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция формирует табличный документ схемы на сервере.
Функция СформироватьСхемуНаСервере(Параметр, ЭтоЗагрузкаИзСистемПриемаПлатежей, ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета)
	
	Если НЕ Параметр = Неопределено
	   И ЗначениеЗаполнено(Параметр) Тогда
		Параметр = СтрЗаменить(СокрЛП(Параметр), " ", "_");
		Если ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
			Параметр = Параметр + "_Платежи";
		ИначеЕсли ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
			Параметр = Параметр + "_Сч";
		КонецЕсли;
	Иначе
		Параметр = "НеВыбран";
	КонецЕсли;
	
	Макет = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПолучитьМакет("МакетФормДокументов");
	
	Попытка
		ОбластьСхема = Макет.ПолучитьОбласть("Область_" + Параметр);
	Исключение
		Параметр = "НеВыбран";
		ОбластьСхема = Макет.ПолучитьОбласть("Область_" + Параметр);
	КонецПопытки;
	
	ДокументСхема = Новый ТабличныйДокумент;
	ДокументСхема.Вывести(ОбластьСхема);
	
	Возврат ДокументСхема;
	
КонецФункции // СформироватьСхемуНаСервере()

&НаКлиенте
Процедура ОтобразитьНастройкиНаСтраницеНастроекПараметра(ТекущиеДанные)
	
	Параметр = ТекущиеДанные.Параметр;
	
	Элементы.ПодсказкаПериодОплатыДляУниверсальнойВыгрузки.Видимость = Ложь;
	Элементы.ФорматПериодаБезДней.Видимость                          = Ложь;
	
	Если ЭтоЗагрузкаИзСистемСбораПоказанийПриборовУчета Тогда
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет") Тогда
			
			СтраницаНастроек = Элементы.Найти("ЛицевойСчет");
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика") Тогда
			
			СтраницаНастроек = Элементы.Найти("НомерСчетчика");
			
			// Для строки параметра ПУ определим видимости элементов на строанице панели настроек.
			УстановкаВидимостиСпособаОпределенияПУ(ТекущиеДанные);
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата") Тогда
			
			СтраницаНастроек = Элементы.Найти("Дата");
			
			Элементы.ФорматПериодаБезДней.Видимость = Ложь;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное")
		   ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное")
		   ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое") Тогда
			
			Элементы.СуммаНачисленийПодсказка.Видимость = Ложь;
			Элементы.УчитыватьЛьготы.Видимость          = Ложь;
			Элементы.ТипПериодаДолга.Видимость          = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоЗагрузкаИзСистемПриемаПлатежей Тогда
		
		Если Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.ЛицевойСчет") Тогда
			
			
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Дата")
			  ИЛИ Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.ПериодОплаты") Тогда
			
			Элементы.ФорматПериодаБезДней.Видимость = Истина;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Сумма") Тогда
			
			Элементы.СуммаНачисленийПодсказка.Видимость = Ложь;
			Элементы.ТипПериодаДолга.Видимость          = Ложь;
			Элементы.УчитыватьЛьготы.Видимость          = Ложь;
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Услуга") Тогда
			
			ИзменитьВидимостьНастроекПараметраУслуга(ТекущиеДанные);
			
		ИначеЕсли Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Штрихкод") Тогда
			
			
			
		КонецЕсли;
		
	ИначеЕсли ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Элементы.ПодсказкаПериодОплатыДляУниверсальнойВыгрузки.Видимость = Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.ПериодОплаты");
		
		ЭтоСуммаНачислений = Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаНачислений");
		ЭтоСуммаДолга      = Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СуммаДолга");
		
		Элементы.СуммаНачисленийПодсказка.Видимость = ЭтоСуммаНачислений;
		Элементы.УчитыватьЛьготы.Видимость          = ЭтоСуммаНачислений;
		Элементы.ТипПериодаДолга.Видимость          = ЭтоСуммаДолга;
		
		Элементы.ДеревоНастройкаСоответствияПолейГруппаDBF.Доступность = НЕ Параметр = ПредопределенноеЗначение("Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикИПоказание");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает видимость элемента Способ определения ПУ и подчиненных ему элементов.
// Параметры:
// ВидимостьСпособаОпределенияПУ - параметр указывает отображать или нет элемент Способ определения ПУ
// и подчиненные ему элементы.
Процедура УстановкаВидимостиСпособаОпределенияПУ(ТекущиеДанные)
	
	СпособОпределенияПУ = ТекущиеДанные.СпособОпределенияПУ;
	
	СпСпособыОпределенияПУ     = СтруктураЗначенийПолей.СпСпособыОпределенияПУ;
	СпСпособыОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги;
	
	Если СпособОпределенияПУ = СпСпособыОпределенияПУ[0].Значение Тогда // "по значению поля реестра"
		
		Элементы.ИдентификацияПУ.Видимость         = Истина;
		Элементы.СпособОпределенияУслуги.Видимость = Ложь;
		Элементы.ИдентификацияУслуги.Видимость   = Ложь;
		Элементы.СсылкаНаУслугу.Видимость          = Ложь;
		Элементы.ПорядковыйНомерПУВБазе.Видимость  = Ложь;
		
	ИначеЕсли СпособОпределенияПУ = СпСпособыОпределенияПУ[1].Значение Тогда // "по услуге"
		
		СпособОпределенияУслуги = ТекущиеДанные.СпособОпределенияУслуги;
		
		Элементы.ИдентификацияПУ.Видимость         = Ложь;
		Элементы.СпособОпределенияУслуги.Видимость = Истина;
		Элементы.ПорядковыйНомерПУВБазе.Видимость  = Истина;
		
		Если СпособОпределенияУслуги = СпСпособыОпределенияУслуги[0].Значение Тогда // "по значению поля реестра"
			Элементы.ИдентификацияУслуги.Видимость = Истина;
			Элементы.СсылкаНаУслугу.Видимость = Ложь
		ИначеЕсли СпособОпределенияУслуги = СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
			Элементы.ИдентификацияУслуги.Видимость = Ложь;
			Элементы.СсылкаНаУслугу.Видимость        = Истина
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьНастроекПараметраУслуга(ТекущиеДанные)
	
	// Для справки:
	// Значения элементов списка идентификации услуги оплаты:
	//	СпИдентификацияУслугиОплаты.Добавить("наименование", "по наименованию");
	//	СпИдентификацияУслугиОплаты.Добавить("код",          "по коду");
	//	СпИдентификацияУслугиОплаты.Добавить("вид услуги",   "по виду услуги");
	//	СпИдентификацияУслугиОплаты.Добавить("номенклатура", "по номенклатуре");
	
	Если ПустаяСтрока(ТекущиеДанные.ИдентификацияУслуги) Тогда
		ТекущиеДанные.ИдентификацияУслуги = СтруктураЗначенийПолей.СпИдентификацияУслугиОплаты[0].Значение; // "по наименованию";
	КонецЕсли;
	
	ИдентификацияУслугиОплаты = ТекущиеДанные.ИдентификацияУслуги;
	
	Если ЭтоЗагрузкаИзСистемПриемаПлатежей И (ИдентификацияУслугиОплаты = "по виду услуги" ИЛИ ИдентификацияУслугиОплаты = "по номенклатуре") Тогда
		
		Элементы.ГруппаПолеИдентификацииВидаИНоменклатурыУслуги.Видимость = Истина;
		
		Если ИдентификацияУслугиОплаты = "по виду услуги" Тогда
			ЗаголовокПолеИдентификацииВидаИНоменклатурыУслуги = "Вид услуги определять по";
		Иначе
			ЗаголовокПолеИдентификацииВидаИНоменклатурыУслуги = "Номенклатуру услуги определять по";
		КонецЕсли;
		
		Элементы.ПолеИдентификацииВидаИНоменклатурыУслуги.Заголовок = ЗаголовокПолеИдентификацииВидаИНоменклатурыУслуги;
		
	Иначе
		
		Элементы.ГруппаПолеИдентификацииВидаИНоменклатурыУслуги.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьНастройкиШаблонаРеестраПоказанийПриборовУчета()
	
	Элементы.НастройкаШаблонаРеестраПоказанийПриборовУчета.Видимость = НЕ ЭтоРучнойВариантНастройкиФорматаРеестраПоказаний;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьНастройкиВыводитьЗаголовокУниверсальнойВыгрузки()
	
	Элементы.ГруппаВыгружатьЗаголовокВТекстовомФайле.Видимость = Ложь;
	Элементы.ГруппаВыводитьЗаголовок.Видимость                 = Ложь;
	
	Если ЭтоTXT Тогда
		
		Элементы.ГруппаВыгружатьЗаголовокВТекстовомФайле.Видимость = Истина;
		Элементы.ГруппаВыводитьЗаголовок.Видимость                 = Объект.ВыводитьЗаголовок;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаименованияКолонокДляФорматаФайлаXML()
	
	Если НЕ ЭтоУниверсальнаяВыгрузкаДанных Тогда
		
		Если Объект.ВложенныеУзлы Тогда
			Элементы.ДеревоНастройкаСоответствияПолейИмяАтрибута.Заголовок = "Вложенный узел";
			Элементы.ДеревоНастройкаСоответствияПолейИмяУзла.Заголовок     = "Основной узел";
		Иначе
			Элементы.ДеревоНастройкаСоответствияПолейИмяАтрибута.Заголовок = "Имя атрибута";
			Элементы.ДеревоНастройкаСоответствияПолейИмяУзла.Заголовок     = "Имя узла";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСоставПараметровПериода(ТекущиеДанные)
	
	НайденныеСтроки = Объект.НастройкаПериода.НайтиСтроки(Новый Структура("ПараметрДаты", "День"));
	
	Если ТекущиеДанные.ФорматПериодаБезДней И НайденныеСтроки.Количество() = 1 Тогда
		
		Объект.НастройкаПериода.Удалить(НайденныеСтроки[0]);
		ТекущиеДанные.ПорядокДень = 0;
		
	ИначеЕсли НЕ ТекущиеДанные.ФорматПериодаБезДней И НайденныеСтроки.Количество() = 0 Тогда
		
		Объект.НастройкаПериода.Добавить().ПараметрДаты = "День";
		ТекущиеДанные.ПорядокДень = 3;
		
	КонецЕсли;
	
	НайденныеСтрокиДень      = Объект.НастройкаПериода.НайтиСтроки(Новый Структура("ПараметрДаты", "День"));
	КоличествоНайденныхСтрок = НайденныеСтрокиДень.Количество();
	
	Если КоличествоНайденныхСтрок = 0 И НЕ ТекущиеДанные.ФорматПериодаБезДней Тогда
		
		НоваяСтрока = Объект.НастройкаПериода.Добавить();
		НоваяСтрока.ПараметрДаты = "День";
		
		ТекущиеДанные.ПорядокДень = НоваяСтрока.НомерСтроки;
		
	Иначе
		
		Если ТекущиеДанные.ФорматПериодаБезДней Тогда
			НомерСтрокиДень = 0;
		Иначе
			НомерСтрокиДень = НайденныеСтрокиДень[0].НомерСтроки;
		КонецЕсли;
		
		Если ТекущиеДанные.ПорядокДень <> НомерСтрокиДень Тогда
			ТекущиеДанные.ПорядокДень = НомерСтрокиДень;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтрокиМесяц     = Объект.НастройкаПериода.НайтиСтроки(Новый Структура("ПараметрДаты", "Месяц"));
	КоличествоНайденныхСтрок = НайденныеСтрокиМесяц.Количество();
	
	Если КоличествоНайденныхСтрок = 0 Тогда
		НоваяСтрока = Объект.НастройкаПериода.Добавить();
		НоваяСтрока.ПараметрДаты = "Месяц";
		
		ТекущиеДанные.ПорядокМесяц = НоваяСтрока.НомерСтроки;
	Иначе
		НомерСтрокиМесяц = НайденныеСтрокиМесяц[0].НомерСтроки;
		
		Если ТекущиеДанные.ПорядокМесяц <> НомерСтрокиМесяц Тогда
			ТекущиеДанные.ПорядокМесяц = НомерСтрокиМесяц;
		КонецЕсли;
	КонецЕсли;
	
	НайденныеСтрокиГод       = Объект.НастройкаПериода.НайтиСтроки(Новый Структура("ПараметрДаты", "Год"));
	КоличествоНайденныхСтрок = НайденныеСтрокиГод.Количество();
	
	Если КоличествоНайденныхСтрок = 0 Тогда
		НоваяСтрока = Объект.НастройкаПериода.Добавить();
		НоваяСтрока.ПараметрДаты = "Год";
		
		ТекущиеДанные.ПорядокГод = НоваяСтрока.НомерСтроки;
	Иначе
		НомерСтрокиГод = НайденныеСтрокиГод[0].НомерСтроки;
		
		Если ТекущиеДанные.ПорядокГод <> НомерСтрокиГод Тогда
			ТекущиеДанные.ПорядокГод = НомерСтрокиГод;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуДереваВКореньДерева(ИдентификаторСтроки)
	
	СтрокаДобавления = ДеревоНастройкаСоответствияПолей.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Родитель = СтрокаДобавления.ПолучитьРодителя();
	
	Если НЕ Родитель = Неопределено Тогда
		
		КоллекцияСтрокДерева = ПолучитьКоллекциюСтрокДереваНаСервере();
		
		ЗаполнитьЗначенияСвойств(КоллекцияСтрокДерева.Добавить(), СтрокаДобавления);
		
		КоллекцияСтрокРодителя = Родитель.ПолучитьЭлементы();
		
		КоллекцияСтрокРодителя.Удалить(КоллекцияСтрокРодителя.Индекс(СтрокаДобавления));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Вспомогательные_процедуры_и_функции
