
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область СлужебныеПроцедурыИФункции

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция КомплектСодержащийРСВ_1(РСВ_1, ИсключаемыеИзПоискаКомплекты = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РСВ_1", РСВ_1);
	
	Если ИсключаемыеИзПоискаКомплекты = Неопределено Тогда
		Запрос.УстановитьПараметр("ИсключаемыеКомплекты", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("ИсключаемыеКомплекты", ИсключаемыеИзПоискаКомплекты);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектыОтчетностиПерсучета.Ссылка
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.РСВ_1 = &РСВ_1
	|	И НЕ КомплектыОтчетностиПерсучета.Ссылка В (&ИсключаемыеКомплекты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

Функция ПорядокСортировкиПачекКомплекта(СписокПачек, ИсходныеСведенияВНачало = Истина) Экспорт  
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСЗВ", СписокПачек);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.НомерПачки КАК НомерПачки,
	|	ДанныеПачки.ТипСведенийСЗВ КАК ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод КАК КорректируемыйПериод,
	|	&ПорядокСортировки КАК ПорядокСортировки
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1 КАК ДанныеПачки
	|ГДЕ
	|	ДанныеПачки.Ссылка В(&СписокСЗВ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод,
	|	ДанныеПачки.НомерПачки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.НомерПачки,
	|	ДанныеПачки.ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод,
	|	&ПорядокСортировки
	|ИЗ
	|	Документ.РеестрСЗВ_6_2 КАК ДанныеПачки
	|ГДЕ
	|	ДанныеПачки.Ссылка В(&СписокСЗВ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод,
	|	ДанныеПачки.НомерПачки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.НомерПачки,
	|	ДанныеПачки.ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод,
	|	&ПорядокСортировки
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4 КАК ДанныеПачки
	|ГДЕ
	|	ДанныеПачки.Ссылка В(&СписокСЗВ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод,
	|	ДанныеПачки.НомерПачки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.НомерПачки,
	|	ДанныеПачки.ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод,
	|	&ПорядокСортировки
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ДанныеПачки
	|ГДЕ
	|	ДанныеПачки.Ссылка В(&СписокСЗВ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПачки.Ссылка,
	|	ДанныеПачки.ТипСведенийСЗВ,
	|	ДанныеПачки.КорректируемыйПериод,
	|	ДанныеПачки.НомерПачки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСортировки,
	|	КорректируемыйПериод УБЫВ,
	|	ТипСведенийСЗВ,
	|	НомерПачки";
	
	Если ИсходныеСведенияВНачало Тогда
		ТекстПоляПорядокСортировки = 
		"	ВЫБОР
		|		КОГДА ДанныеПачки.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ ";	
	Иначе
		ТекстПоляПорядокСортировки = 
		"	ВЫБОР
		|		КОГДА ДанныеПачки.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ ";		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КорректируемыйПериод УБЫВ", "КорректируемыйПериод");
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПорядокСортировки", ТекстПоляПорядокСортировки);
	
	ПорядокСортировки = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПорядокСортировки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ПорядокСортировки;
	
КонецФункции	

#Область ФормированиеСведенийКвартальнойОтчетности

Функция АктивныйОтчетныйПериод(Организация, ИсходныеСведения = Истина) Экспорт
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ТекущийОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ПолучитьНачалоОтчетногоПериода(ТекущаяДатаСеанса);
	ПредыдущийОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ПредшествующийОтчетныйПериодПерсУчета(ТекущийОтчетныйПериод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ПредыдущийОтчетныйПериод);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектыОтчетностиПерсучета.СостояниеКомплекта,
	|	ВЫБОР
	|		КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И КомплектыОтчетностиПерсучета.СостояниеКомплекта <> ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияНеСформированы)
	|	И КомплектыОтчетностиПерсучета.СостояниеКомплекта <> ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться)
	|	И (НЕ КомплектыОтчетностиПерсучета.КорректирующаяФормаРСВ_1
	|			ИЛИ НЕ КомплектыОтчетностиПерсучета.СодержитТолькоКорректирующиеФормы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
   	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Приоритет = 1 Тогда
			АктивныйОтчетныйПериод = ТекущийОтчетныйПериод;
		Иначе
			АктивныйОтчетныйПериод = ПредыдущийОтчетныйПериод;
		КонецЕсли;
	Иначе
		Если Месяц(ТекущаяДатаСеанса) - Месяц(НачалоКвартала(ТекущаяДатаСеанса)) + 1 >= 2
			И День(ТекущаяДатаСеанса) >= 15 Тогда
			
			АктивныйОтчетныйПериод = ТекущийОтчетныйПериод
		Иначе
			АктивныйОтчетныйПериод = ПредыдущийОтчетныйПериод;
		КонецЕсли;
	КонецЕсли;
	
	Возврат АктивныйОтчетныйПериод;
			
КонецФункции	
	
Функция ПараметрыФормированияСведенийКвартальнойОтчетности() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("ОтчетныйПериод");
	СтруктураПараметров.Вставить("УчитыватьИсправления", Ложь);
	СтруктураПараметров.Вставить("СостояниеКомплекта", Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияСформированы);
	СтруктураПараметров.Вставить("ОписьПачекСЗВ");
	СтруктураПараметров.Вставить("ВедомостьУплатыАДВ11");
	СтруктураПараметров.Вставить("РСВ_1");
	СтруктураПараметров.Вставить("СписокПачекСЗВ");
	СтруктураПараметров.Вставить("СписокПачекСЗВ6_3");
	СтруктураПараметров.Вставить("КорректируемыеПериоды");
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("ОбновлятьКорректирующиеСведения", Истина);
	СтруктураПараметров.Вставить("КорректирующаяФормаРСВ_1", Ложь);
	СтруктураПараметров.Вставить("ФормироватьИсходныеСведенияВКорректирующейФорме", Истина);
	СтруктураПараметров.Вставить("СпециальныйДокумент2015Года", Ложь);

	
	Возврат СтруктураПараметров;
КонецФункции

Процедура ЗаполнитьПараметрыФормированияКомплектаСведений(СтруктураПараметров, Организация, ОтчетныйПериод, ДанныеТекущегоКомплекта = Неопределено) Экспорт
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ОтчетныйПериод = ОтчетныйПериод;
	
	Если ДанныеТекущегоКомплекта = Неопределено  
		Или ДанныеТекущегоКомплекта.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться Тогда
		
		СтруктураПараметров.Ссылка = Справочники.КомплектыОтчетностиПерсучета.ПустаяСсылка();
		
		Если ДанныеТекущегоКомплекта <> Неопределено Тогда
			СтруктураПараметров.РСВ_1 = ДанныеТекущегоКомплекта.РСВ_1;	
		КонецЕсли;	
		
		СтруктураПараметров.СписокПачекСЗВ = Новый ТаблицаЗначений;
		СтруктураПараметров.СписокПачекСЗВ.Колонки.Добавить("ПачкаДокументов");
		
		СтруктураПараметров.СписокПачекСЗВ6_3 = Новый ТаблицаЗначений;
		СтруктураПараметров.СписокПачекСЗВ6_3.Колонки.Добавить("ПачкаДокументов");
		
	Иначе
		СтруктураПараметров.Ссылка = ДанныеТекущегоКомплекта.Ссылка;
		СтруктураПараметров.ОписьПачекСЗВ = ДанныеТекущегоКомплекта.ОписьПачекСЗВ;
		СтруктураПараметров.ВедомостьУплатыАДВ11 = ДанныеТекущегоКомплекта.ВедомостьУплатыАДВ11;
		СтруктураПараметров.СписокПачекСЗВ = ДанныеТекущегоКомплекта.СписокПачекСЗВ.Выгрузить();
		СтруктураПараметров.СписокПачекСЗВ6_3 = ДанныеТекущегоКомплекта.СписокПачекСЗВ6_3.Выгрузить();
		СтруктураПараметров.РСВ_1 = ДанныеТекущегоКомплекта.РСВ_1;
		СтруктураПараметров.КорректируемыеПериоды = ДанныеТекущегоКомплекта.КорректируемыеПериоды.Выгрузить();
		СтруктураПараметров.НулевыеСведения = ДанныеТекущегоКомплекта.НулевойКомплект;
		СтруктураПараметров.СпециальныйДокумент2015Года = ДанныеТекущегоКомплекта.СпециальныйДокумент2015Года;
	КонецЕсли;	
КонецПроцедуры	

Процедура СформироватьСведенияКвартальнойОтчетности(СтруктураПараметров, АдресХранилища) Экспорт
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ПерсонифицированныйУчет.ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ПерсонифицированныйУчет.ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСведенийОЗаработке();
	
	ДанныеКомплекта = СтруктураДанныхКомплекта();
	
	ПредыдущийОтчетныйПериод = ПерсонифицированныйУчетКлиентСервер.ПредшествующийОтчетныйПериодПерсУчета(СтруктураПараметров.ОтчетныйПериод);
	
	Если НЕ СтруктураПараметров.КорректирующаяФормаРСВ_1
		И ЕстьКомплектыНеопределенногоСтатуса(СтруктураПараметров.Организация, ПредыдущийОтчетныйПериод) Тогда
		
		ТекстИсключения = НСтр("ru = 'В предыдущем отчетном периоде ни одному из комплектов не установлено состояние ""Сведения отправлены"". 
	                                    |Установите принятому в ПФР комплекту состояние ""Сведения отправлены"". 
	                                    |Либо укажите для всех комплектов  состояние ""Сведения не будут передаваться"".'");
										
		ВызватьИсключение ТекстИсключения;									
		Возврат;
	КонецЕсли;
	
	ДанныеКомплекта.Ссылка = СтруктураПараметров.Ссылка;
	ДанныеКомплекта.Организация = СтруктураПараметров.Организация;
	ДанныеКомплекта.ОтчетныйПериод = СтруктураПараметров.ОтчетныйПериод;
	ДанныеКомплекта.СостояниеКомплекта = СтруктураПараметров.СостояниеКомплекта;
	ДанныеКомплекта.ОписьПачекСЗВ = СтруктураПараметров.ОписьПачекСЗВ;
	ДанныеКомплекта.ВедомостьУплатыАДВ11 = СтруктураПараметров.ВедомостьУплатыАДВ11;
	ДанныеКомплекта.РСВ_1 = СтруктураПараметров.РСВ_1;
	ДанныеКомплекта.КорректирующаяФормаРСВ_1 = СтруктураПараметров.КорректирующаяФормаРСВ_1;
	ДанныеКомплекта.СпециальныйДокумент2015года = СтруктураПараметров.СпециальныйДокумент2015года;
	
	Если ДанныеКомплекта.КорректирующаяФормаРСВ_1 Тогда
		ЗаполнитьПараметрыФормированияКорректирующейФормы(СтруктураПараметров);
	КонецЕсли;	
	
	ЗаполнитьДанныеРСВ_1(ДанныеКомплекта);
	
	Если ДанныеКомплекта.ОтчетныйПериод >= '20140101' Тогда
		ОписьПачекСЗВОбъект = Неопределено;		
		ДанныеКомплекта.ОписьПачекСЗВ = Документы.ОписьПачекСЗВ_6.ПустаяСсылка();
	ИначеЕсли ЗначениеЗаполнено(ДанныеКомплекта.ОписьПачекСЗВ) Тогда
		ОписьПачекСЗВОбъект = ДанныеКомплекта.ОписьПачекСЗВ.ПолучитьОбъект();
	Иначе
		ОписьПачекСЗВОбъект = Документы.ОписьПачекСЗВ_6.НовыйОписьАДВ(
								СтруктураПараметров.Организация,
								СтруктураПараметров.ОтчетныйПериод);							
	КонецЕсли;	
	
	ПараметрыФормированияДокументов = ПерсонифицированныйУчет.ПараметрыФормированияДокументовКвартальнойОтчетности();	
		
	ДокументыКомплекта = СтруктураПараметров.СписокПачекСЗВ.ВыгрузитьКолонку("ПачкаДокументов");
	
	Если СтруктураПараметров.ОбновлятьКорректирующиеСведения Тогда
		// Обновим сведения за корректируемые периоды.
		КорректирующиеДокументы = СоздатьКорректирующиеПачкиСЗВЗаПериоды(
											СтруктураПараметров.Организация, 
											СтруктураПараметров.ОтчетныйПериод, 
											СтруктураПараметров.КорректируемыеПериоды,
											ДокументыКомплекта,
											СтруктураПараметров.УчитыватьИсправления);		
	Иначе
		КорректирующиеДокументы = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ);
		ОтменяющиеДокументы = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорректирующиеДокументы, ОтменяющиеДокументы);
	КонецЕсли;	
	
	// получим исходные документы
	ИсходныеДокументы = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	
	// Если формируется исходная форма или нужно формировать исходные сведения в корректирующей форме.
	Если НЕ СтруктураПараметров.КорректирующаяФормаРСВ_1
		Или ИсходныеДокументы.Количество() > 0
		Или СтруктураПараметров.ФормироватьИсходныеСведенияВКорректирующейФорме Тогда
	 
		УчитываемыеДокументы = ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеДокументы);
		
		// Данные исходных документов будем заменять обновленными данными.
		ПараметрыФормированияДокументов.ЗамещаемыеДокументы = ИсходныеДокументы;	
		
		// Также при формировании сведений будем учитывать данные корректирующих сведений.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УчитываемыеДокументы, КорректирующиеДокументы);
		
		ПараметрыФормированияДокументов.УчитываемыеДокументы = УчитываемыеДокументы;
		ПараметрыФормированияДокументов.НулевыеСведения = СтруктураПараметров.НулевыеСведения;
		
		Если СтруктураПараметров.УчитыватьИсправления Тогда
			ПараметрыФормированияДокументов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ПараметрыФормированияДокументов.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ПараметрыФормированияДокументов.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;
		    ПараметрыФормированияДокументов.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе
			ПараметрыФормированияДокументов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
			ПараметрыФормированияДокументов.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета;
			ПараметрыФормированияДокументов.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
		    ПараметрыФормированияДокументов.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;	
		КонецЕсли;	
		
		ПараметрыФормированияДокументов.СпециальныйДокумент2015года = ДанныеКомплекта.СпециальныйДокумент2015года;
		
		СозданныеСЗВ = ПерсонифицированныйУчет.СоздатьДокументыКвартальнойОтчетности(
								СтруктураПараметров.Организация, 
								СтруктураПараметров.ОтчетныйПериод,
								ПараметрыФормированияДокументов); 
								
	Иначе
		СозданныеСЗВ = Новый Массив;
	КонецЕсли;	

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СозданныеСЗВ, КорректирующиеДокументы);	
	
	Если СтруктураПараметров.ОтчетныйПериод >= '20140101' 
		И СтруктураПараметров.ОбновлятьКорректирующиеСведения Тогда
		
		ДополнитьИсходныеСведенияЗастрахованнымиЛицамиИзКоррСведений(
			СтруктураПараметров.Организация,
			СтруктураПараметров.ОтчетныйПериод,
			СозданныеСЗВ);
		
	КонецЕсли;
	
	Если ДанныеКомплекта.ОтчетныйПериод < '20140101' Тогда
		Если СозданныеСЗВ.Количество() > 0 Тогда
			ОписьПачекСЗВОбъект.ПачкиДокументов.Очистить();
			Для Каждого ПачкаДокументов Из СозданныеСЗВ Цикл 
				СтрокаСпискаДокументов = ОписьПачекСЗВОбъект.ПачкиДокументов.Добавить();
				СтрокаСпискаДокументов.ПачкаДокументов = ПачкаДокументов;
			КонецЦикла;	
			
			ПерсонифицированныйУчет.ДокументыКвартальнойОтчетностиЗаполнитьОтветственныхЛиц(ОписьПачекСЗВОбъект);
			
			ОписьПачекСЗВОбъект.Записать(РежимЗаписиДокумента.Запись);		
		
			ДанныеКомплекта.ОписьПачекСЗВ = ОписьПачекСЗВОбъект.Ссылка;
		ИначеЕсли ЗначениеЗаполнено(ДанныеКомплекта.ОписьПачекСЗВ) Тогда 
			ОписьПачекСЗВОбъект = ДанныеКомплекта.ОписьПачекСЗВ.ПолучитьОбъект();
			ОписьПачекСЗВОбъект.ПачкиДокументов.Очистить();	
			ДанныеКомплекта.ОписьПачекСЗВ = Документы.ОписьПачекСЗВ_6.ПустаяСсылка();
			ОписьПачекСЗВОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДанныеКомплекта.ОписьПачекСЗВ = Документы.ОписьПачекСЗВ_6.ПустаяСсылка();	
		КонецЕсли;	
	КонецЕсли;	
					
	Если Месяц(СтруктураПараметров.ОтчетныйПериод) = 10 
		И Год(СтруктураПараметров.ОтчетныйПериод) < 2013 Тогда
		
		ПачкиСЗВ63 = СтруктураПараметров.СписокПачекСЗВ6_3.ВыгрузитьКолонку("ПачкаДокументов");	
		
		СформированныеПачкиСЗВ63 = Документы.ПачкаДокументовСЗВ_6_3.СформироватьПачкиСЗВ_6_3(
										СтруктураПараметров.Организация, 
										Год(СтруктураПараметров.ОтчетныйПериод),
										Ложь, 
										СтруктураПараметров.УчитыватьИсправления, 
										,
										ПачкиСЗВ63);	
																				
		Для Каждого ПачкаСЗВ6_3 Из СформированныеПачкиСЗВ63 Цикл
			ПачкаКомплекта = ДанныеКомплекта.СписокПачекСЗВ6_3.Добавить();
			ПачкаКомплекта.ПачкаДокументов = ПачкаСЗВ6_3;
		КонецЦикла;	
																			
	КонецЕсли;	
																					
	Для Каждого ПачкаСЗВ Из СозданныеСЗВ Цикл
		ПачкаКомплекта = ДанныеКомплекта.СписокПачекСЗВ.Добавить();
		ПачкаКомплекта.ПачкаДокументов = ПачкаСЗВ;
	КонецЦикла;	
	
	ДанныеКомплекта.ПериодФормирования = ДанныеКомплекта.ОтчетныйПериод;
	
	ПоместитьВоВременноеХранилище(ДанныеКомплекта, АдресХранилища);
	
КонецПроцедуры	

Процедура ЗаполнитьПараметрыФормированияКорректирующейФормы(СтруктураПараметров)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", СтруктураПараметров.ОтчетныйПериод);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектыОтчетностиПерсучета.Ссылка
	|ПОМЕСТИТЬ ВТПереданныеКомплекты
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектыОтчетностиПерсучетаСписокПачекСЗВ.ПачкаДокументов,
	|	КомплектыОтчетностиПерсучетаСписокПачекСЗВ.ПачкаДокументов.КорректируемыйПериод КАК КорректируемыйПериод
	|ИЗ
	|	ВТПереданныеКомплекты КАК ПереданныеКомплекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомплектыОтчетностиПерсучета.СписокПачекСЗВ КАК КомплектыОтчетностиПерсучетаСписокПачекСЗВ
	|		ПО ПереданныеКомплекты.Ссылка = КомплектыОтчетностиПерсучетаСписокПачекСЗВ.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	НомерПачки = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(СтруктураПараметров.Организация, Год(СтруктураПараметров.ОтчетныйПериод));
	
	КорректируемыеПериоды = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СкопированныйДокумент = Выборка.ПачкаДокументов.ПолучитьОбъект().Скопировать();	
		СкопированныйДокумент.НомерПачки = НомерПачки;
		СкопированныйДокумент.Дата = ТекущаяДатаСеанса();
		НомерПачки = НомерПачки + 1;
		СкопированныйДокумент.Записать();
		
		СтрокаТаблицы = СтруктураПараметров.СписокПачекСЗВ.Добавить();
		СтрокаТаблицы.ПачкаДокументов = СкопированныйДокумент.Ссылка;
		
		Если СкопированныйДокумент.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			КорректируемыеПериоды.Вставить(Выборка.КорректируемыйПериод);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого Период Из КорректируемыеПериоды Цикл
		СтрокаТаблицы = СтруктураПараметров.КорректируемыеПериоды.Добавить();
		СтрокаТаблицы.Период = Период.Ключ;
		СтрокаТаблицы.ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.РучнойВводДокументов;
	КонецЦикла;	
	
	СтруктураПараметров.УчитыватьИсправления = Истина;
	СтруктураПараметров.ФормироватьИсходныеСведенияВКорректирующейФорме = Истина;
КонецПроцедуры	

Функция ПараметрыФормированияКорректирующихСведений() Экспорт
	КорректируемыеПериоды = Новый ТаблицаЗначений;  
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументыКомплекта", Новый Массив);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("ОтчетныйПериод");
	СтруктураПараметров.Вставить("КорректируемыйПериод");
	СтруктураПараметров.Вставить("СписокФизическихЛиц");
	СтруктураПараметров.Вставить("ВариантФормирования");
	СтруктураПараметров.Вставить("КорректируемыеПериодыКомплекта");
	СтруктураПараметров.Вставить("ФормироватьКорректирующуюФормуРСВ", Ложь);
	
	Возврат СтруктураПараметров;
КонецФункции

Процедура СформироватьКорректирующиеСведения(СтруктураПараметров, АдресХранилища) Экспорт
	
	КорректируемыеПериоды = Новый Массив;
	КорректируемыеПериоды.Добавить(СтруктураПараметров.КорректируемыйПериод);
		
	ДокументыКомплекта = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров.ДокументыКомплекта);
	
	СозданныеДокументы = Новый Массив;
	
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ПерсонифицированныйУчет.ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ПерсонифицированныйУчет.ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСведенийОЗаработке();
	
	// Получим массив документов данные которых необходимо корректировать.
	КорректируемыеДокументы = КорректируемыеДокументы(
									СтруктураПараметров.Организация, 
									СтруктураПараметров.ОтчетныйПериод, 
									СтруктураПараметров.КорректируемыйПериод);
									
	ОтменяющиеДокументы = Новый Массив;
	
	ОтменяющиеДокументыКомплекта = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ, КорректируемыеПериоды); 
	
	Для Каждого ОтменяющийДокумент Из ОтменяющиеДокументыКомплекта Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ДокументыКомплекта, ОтменяющийДокумент);		
	КонецЦикла;
	
	// Если мы корректируем целиком сведения по ошибочно переданной категории категорию, то создадим "нулевой" комплект за
	// корректируемый период.
	Если СтруктураПараметров.ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаКатегорииПоЗастрахованномуЛицу
		Или СтруктураПараметров.ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаКатегорииПоОрганизации Тогда
		
		НулевойКомплект = НулевойКомплектСведений(
							СтруктураПараметров.Организация, 
							СтруктураПараметров.КорректируемыйПериод, 
							КорректируемыеДокументы,
							СтруктураПараметров.ОтчетныйПериод,
							СтруктураПараметров.СписокФизическихЛиц);
							
		// Добавим созданные нулевые пачки в список корректируемых документов.
		Для Каждого ПачкаСЗВ Из НулевойКомплект.СписокПачекСЗВ Цикл 
			КорректируемыеДокументы.Добавить(ПачкаСЗВ.ПачкаДокументов);
		КонецЦикла;	
																	
		// Создадим отменяющие документы.
		ПараметрыФормированияСведений = ПерсонифицированныйУчет.ПараметрыФормированияДокументовКвартальнойОтчетности();
	
		ПараметрыФормированияСведений.КорректируемыеДокументы = КорректируемыеДокументы;	
		
		ПараметрыФормированияСведений.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ;
		ПараметрыФормированияСведений.КорректируемыйПериод = СтруктураПараметров.КорректируемыйПериод;
		
		// Найдем среди документов комплекта отменяющие документы за корректируемый период 
		// и укажем, что эти документы мы будем замещать новыми данными.
		ПараметрыФормированияСведений.ЗамещаемыеДокументы = ОтменяющиеДокументыКомплекта;
				
		ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
		ПараметрыОтбора.СписокФизическихЛиц = СтруктураПараметров.СписокФизическихЛиц;
		
		ОтменяющиеДокументы = СоздатьКорректирующиеПачкиСЗВ(
								СтруктураПараметров.Организация, 
								СтруктураПараметров.ОтчетныйПериод, 
								ПараметрыФормированияСведений, 
								ПараметрыОтбора);
								
		// Добавим созданные отменяющие пачки в список корректируемых документов.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорректируемыеДокументы, ОтменяющиеДокументы);						
		
		// Дополним документы комплекта созданными отменяющими документами.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыКомплекта, ОтменяющиеДокументы);						
	КонецЕсли;							
		
	ПараметрыФормированияСведений = ПерсонифицированныйУчет.ПараметрыФормированияДокументовКвартальнойОтчетности();
																
	// Получим алгоритмы формирования сведений по варианту формирования корректирующих сведений.
	ИсточникиДанных = ПерсонифицированныйУчет.ИсточникиДанныхКвартальнойОтчетностиПоВариантуФормирования(
						СтруктураПараметров.ВариантФормирования,
						КорректируемыеДокументы,
						Истина);
						
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияСведений, ИсточникиДанных);					
			
	ПараметрыФормированияСведений.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ;
	ПараметрыФормированияСведений.КорректируемыйПериод = СтруктураПараметров.КорректируемыйПериод;
					
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	
	ОбновлятьСтажПослеФормированияСведений = Ложь;
	
	// Если необходимо распределять уплаченные взносы по данным учета
	// то корректируемые документы будем создавать по всем сотрудникам.
	Если (ПараметрыФормированияСведений.ИсточникДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета
		Или ПараметрыФормированияСведений.ИсточникДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов)
		И СтруктураПараметров.СписокФизическихЛиц <> Неопределено 
		И КорректируемыеДокументы.Количество() > 0 Тогда
		
		ПараметрыОтбора.СписокФизическихЛиц = Неопределено;
		
		// Если при этом еще требуется обновлять стаж, то будем учитывать фиксированные данные корректирующих документов
		// что бы не затереть изменения. А стаж по тем сотрудникам, по которым было "заказано" обновление, обновим после
		// формирования сведений.
		Если ПараметрыФормированияСведений.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета
			Или  ПараметрыФормированияСведений.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов Тогда 
			
			ПараметрыФормированияСведений.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеКорректируемыхДокументов;
			
			ОбновлятьСтажПослеФормированияСведений = Истина;
		КонецЕсли;	
	Иначе
		ПараметрыОтбора.СписокФизическихЛиц = СтруктураПараметров.СписокФизическихЛиц;	
	КонецЕсли;	
	
	УчитываемыеПериоды = Новый Массив;
	СледующийПериод = '00010101';

	Если КорректируемыеПериоды = Неопределено Тогда
		// Получим корректируемые документы предыдущих периодов которые есть в комплекте и 
		// и данные которых мы будем учитывать при формировании корр. сведений.
		
		СтруктураПараметров.КорректируемыеПериодыКомплекта.Сортировать("Период");
			
			Для Каждого ОписаниеКорректируемогоПериоды Из СтруктураПараметров.КорректируемыеПериодыКомплекта Цикл	
			Если ОписаниеКорректируемогоПериоды.Период <= СтруктураПараметров.КорректируемыйПериод Тогда
				УчитываемыеПериоды.Добавить(ОписаниеКорректируемогоПериоды.Период);
			ИначеЕсли ОписаниеКорректируемогоПериоды.Период > СтруктураПараметров.КорректируемыйПериод	
				И СледующийПериод <> '00010101' Тогда 
				
				СледующийПериод = ОписаниеКорректируемогоПериоды.Период;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	Если СледующийПериод = '00010101' Тогда
		СледующийПериод = СтруктураПараметров.ОтчетныйПериод;
	КонецЕсли;	
	
	ПараметрыФормированияСведений.КорректируемыеДокументы = КорректируемыеДокументы;
	
	// Будем учитывать данные из корректирующих (отменяющих) пачек предыдущих периодов.
	ПараметрыФормированияСведений.УчитываемыеДокументы = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, ,УчитываемыеПериоды);
	
	// А также созданных ранее отменяющих пачек корректируемого периода.
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыФормированияСведений.УчитываемыеДокументы, ОтменяющиеДокументы);
	
	// Получим документы из комплекта за корректируемый период
	// в зависимости от алгоритмов получения данных. Если такие документы есть,
	// то данные этих документов будут замещены.
	ПараметрыФормированияСведений.ЗамещаемыеДокументы = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ ,КорректируемыеПериоды); 
	
	Для Каждого ЗамещаемыйДокумент Из ПараметрыФормированияСведений.ЗамещаемыеДокументы Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ДокументыКомплекта, ЗамещаемыйДокумент);		
	КонецЦикла;	
	
	КорректирующиеПачки = СоздатьКорректирующиеПачкиСЗВ(
								СтруктураПараметров.Организация, 
								СтруктураПараметров.ОтчетныйПериод, 
								ПараметрыФормированияСведений, 
								ПараметрыОтбора);							
								
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыКомплекта, КорректирующиеПачки);							
	
	Если ОбновлятьСтажПослеФормированияСведений
		И СтруктураПараметров.СписокФизическихЛиц <> Неопределено Тогда
		ОбновитьДанныеСтажа(
			СтруктураПараметров.СписокФизическихЛиц, 
			СтруктураПараметров.Организация, 
			СтруктураПараметров.КорректируемыйПериод, 
			Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ, 
			ДокументыКомплекта);		
	КонецЕсли;	
	
	ПерераспределитьВзносыВКомплекте(ДокументыКомплекта, СтруктураПараметров.Организация, СледующийПериод);				
	
	Если СтруктураПараметров.ОтчетныйПериод >= '20140101' Тогда
		ДополнитьИсходныеСведенияЗастрахованнымиЛицамиИзКоррСведений(
			СтруктураПараметров.Организация,
			СтруктураПараметров.ОтчетныйПериод,
			ДокументыКомплекта);
		
	КонецЕсли;	
	
	Результат = Новый Структура("Организация, ОтчетныйПериод, ДокументыКомплекта, КорректируемыйПериод, ВариантФормирования, НулевойКомплект", 
	                    СтруктураПараметров.Организация,
						СтруктураПараметров.ОтчетныйПериод,
						ДокументыКомплекта, 
						СтруктураПараметров.КорректируемыйПериод,
						СтруктураПараметров.ВариантФормирования,
						?(НулевойКомплект = Неопределено, Справочники.КомплектыОтчетностиПерсучета.ПустаяСсылка(), НулевойКомплект.Ссылка));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры

Процедура ДополнитьИсходныеСведенияЗастрахованнымиЛицамиИзКоррСведений(Организация, ОтчетныйПериод, ДокументыКомплекта)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТипыКорректирующихДокументов = Новый Массив;
	ТипыКорректирующихДокументов.Добавить(Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ);
	ТипыКорректирующихДокументов.Добавить(Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ);
	
	КорректирующиеДокументы = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, ТипыКорректирующихДокументов);
	
	СформироватьВТСДаннымиДокументовКомплекта(
		Запрос.МенеджерВременныхТаблиц,
		КорректирующиеДокументы, ,
		"ВТДанныеКорректирующихДокументов");
		
	ИсходныеДокументы = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);	
		
	СформироватьВТСДаннымиДокументовКомплекта(
		Запрос.МенеджерВременныхТаблиц,
		ИсходныеДокументы, ,
		"ВТДанныеИсходныхДокументов");
		
	Запрос.УстановитьПараметр("ДокументыКомплекта", ДокументыКомплекта);
	Запрос.УстановитьПараметр("Период", ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКорректирующихДокументов.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиСКорректированнымиВзносами
	|ИЗ
	|	ВТДанныеКорректирующихДокументов КАК ДанныеКорректирующихДокументов
	|ГДЕ
	|	(ДанныеКорректирующихДокументов.ДоначисленоСтраховая <> 0
	|			ИЛИ ДанныеКорректирующихДокументов.ДоначисленоНакопительная <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКорректирующихДокументов.Сотрудник,
	|	ДанныеКорректирующихДокументов.КорректируемыйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиСКорректированнымиВзносами.Сотрудник КАК ФизическоеЛицо,
	|	&Период
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТСотрудникиСКорректированнымиВзносами КАК СотрудникиСКорректированнымиВзносами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеИсходныхДокументов КАК ДанныеИсходныхДокументов
	|		ПО СотрудникиСКорректированнымиВзносами.Сотрудник = ДанныеИсходныхДокументов.Сотрудник
	|ГДЕ
	|	ДанныеИсходныхДокументов.Сотрудник ЕСТЬ NULL ";
	
	Запрос.Выполнить();
	
	МассивНеобходимыхКадровыхДанных = Новый Массив();
	МассивНеобходимыхКадровыхДанных.Добавить("Наименование");
	МассивНеобходимыхКадровыхДанных.Добавить("Фамилия");
	МассивНеобходимыхКадровыхДанных.Добавить("Имя");
	МассивНеобходимыхКадровыхДанных.Добавить("Отчество"); 
    МассивНеобходимыхКадровыхДанных.Добавить("СтраховойНомерПФР");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
									Запрос.МенеджерВременныхТаблиц,
									"ВТФизическиеЛица");
			
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, МассивНеобходимыхКадровыхДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ФизическиеЛица";
		
	СписокФизическихЛиц = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);			
	КонецЦикла;	
	
	ПараметрыПолученияСведенийОЗаработке = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТСведенияОЗаработке();
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокФизическихЛиц;
	
	ПерсонифицированныйУчет.СоздатьВТСведенияОЗаработке2014(
		Запрос.МенеджерВременныхТаблиц,
		Организация,
		ОтчетныйПериод,
		ПараметрыПолученияСведенийОЗаработке,
		ПараметрыОтбора);
		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачалаПериода,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТДанныеСтажаПФР";
	
	Запрос.Выполнить();
		
	
	ПерсонифицированныйУчет.СоздатьВТНулевыеИтоговыеСведенияОЗаработке(
		Запрос.МенеджерВременныхТаблиц,
		Организация,
		ОтчетныйПериод,
		"ВТКадровыеДанныеФизическихЛиц");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо КАК Сотрудник,
	|	КадровыеДанныеФизическихЛиц.Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество,
	|	КадровыеДанныеФизическихЛиц.СтраховойНомерПФР,
	|	""Сотрудники"" КАК ИмяТаблицы,
	|	NULL КАК КатегорияЗастрахованныхЛиц,
	|	NULL КАК Месяц,
	|	NULL КАК Заработок,
	|	NULL КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	NULL КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	NULL КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	NULL КАК ФиксЗаработок,
	|	КадровыеДанныеФизическихЛиц.Наименование КАК Наименование,
	|	NULL КАК КлассУсловийТруда,
	|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	""СведенияОЗаработке"",
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.Месяц,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработке.ФиксЗаработок,
	|	КадровыеДанныеФизическихЛиц.Наименование,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО КадровыеДанныеФизическихЛиц.ФизическоеЛицо = СведенияОЗаработке.ФизическоеЛицо
	|			И (СведенияОЗаработке.Месяц = 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	""СведенияОЗаработке"",
	|	НулевыеИтоговыеСведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	НулевыеИтоговыеСведенияОЗаработке.Месяц,
	|	НулевыеИтоговыеСведенияОЗаработке.Заработок,
	|	НулевыеИтоговыеСведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	НулевыеИтоговыеСведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	НулевыеИтоговыеСведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	НулевыеИтоговыеСведенияОЗаработке.ФиксЗаработок,
	|	КадровыеДанныеФизическихЛиц.Наименование,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО КадровыеДанныеФизическихЛиц.ФизическоеЛицо = СведенияОЗаработке.ФизическоеЛицо
	|			И (СведенияОЗаработке.Месяц = 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНулевыеИтоговыеСведенияОЗаработке КАК НулевыеИтоговыеСведенияОЗаработке
	|		ПО КадровыеДанныеФизическихЛиц.ФизическоеЛицо = НулевыеИтоговыеСведенияОЗаработке.ФизическоеЛицо
	|ГДЕ
	|	СведенияОЗаработке.ФизическоеЛицо ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	""СведенияОЗаработкеНаВредныхИТяжелыхРаботах"",
	|	NULL,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Месяц,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	КадровыеДанныеФизическихЛиц.Наименование,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|		ПО КадровыеДанныеФизическихЛиц.ФизическоеЛицо = СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо
	|			И (СведенияОЗаработкеПоКлассамУсловийТруда.Месяц = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование,
	|	Сотрудник,
	|	ИмяТаблицы";
		
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	
	НомерПачки = ПерсонифицированныйУчет.ПолучитьСледующийНомерПачки(Организация, ОтчетныйПериод);	
	
	КоличествоСотрудниковВПачке = 0;
	
	ПараметрыФормированияДокументов = ПерсонифицированныйУчет.ПараметрыФормированияДокументовКвартальнойОтчетности();
	
	ЗамещаемыеДокументы = Новый Массив;
	
	ПачкаРазделов6 = Неопределено;
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		Если КоличествоСотрудниковВПачке = 0 
			Или КоличествоСотрудниковВПачке = 200 Тогда
			
			Если ПачкаРазделов6 <> Неопределено Тогда
				ПачкаРазделов6.Записать();
				КоличествоСотрудниковВПачке = 0;
			КонецЕсли;	

			ПачкаРазделов6 = ПерсонифицированныйУчет.ПачкаРазделов6(ЗамещаемыеДокументы, Организация, ОтчетныйПериод, НомерПачки, ПараметрыФормированияДокументов, "");
			НомерПачки = НомерПачки + 1;
			
			ПачкаРазделов6.УстановитьСсылкуНового(Документы.ПачкаРазделов6РасчетаРСВ_1.ПолучитьСсылку());
			
			ДокументыКомплекта.Добавить(ПачкаРазделов6.ПолучитьСсылкуНового());
			
		КонецЕсли;	
		КоличествоСотрудниковВПачке = КоличествоСотрудниковВПачке + 1;

		Пока Выборка.Следующий() Цикл 
			СтрокаПоСотруднику = ПачкаРазделов6[Выборка.ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоСотруднику, Выборка);
		КонецЦикла;
		
	КонецЦикла;	
	
	ПачкаРазделов6.Записать();
	
КонецПроцедуры	

Функция НулевойКомплектСведений(Организация, ОтчетныйПериод, КорректируемыеДокументы, ПериодФормирования, СписокФизическихЛиц = Неопределено)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектыОтчетностиПерсучета.Ссылка
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И КомплектыОтчетностиПерсучета.НулевойКомплект
	|	И КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСформированы)";
	
	ВыборкаНулевыхКомплектов = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаНулевыхКомплектов.Следующий() Тогда
		Комплект = ВыборкаНулевыхКомплектов.Ссылка.ПолучитьОбъект();		
		Комплект.СписокПачекСЗВ.Очистить();
	Иначе 	
		Комплект = НовыйКомплектСведений(Организация, ОтчетныйПериод);
		Комплект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияСформированы;
		Комплект.НулевойКомплект = Истина;
	КонецЕсли;	
		
	ПараметрыФормированияСведений = ПерсонифицированныйУчет.ПараметрыФормированияДокументовКвартальнойОтчетности();
	ПараметрыФормированияСведений.НулевыеСведения = Истина;
	
	ПараметрыФормированияСведений.КорректируемыеДокументы = КорректируемыеДокументы;								
								
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	
	ПараметрыОтбора.СписокФизическихЛиц = СписокФизическихЛиц;
			
	ДокументыКомплекта = СоздатьКорректирующиеПачкиСЗВ(
								Организация, 
								ОтчетныйПериод, 
								ПараметрыФормированияСведений, 
								ПараметрыОтбора);
									
	Для Каждого ПачкаДокументов Из ДокументыКомплекта Цикл
		ПачкаКомплекта = Комплект.СписокПачекСЗВ.Добавить();		
		ПачкаКомплекта.ПачкаДокументов = ПачкаДокументов;
	КонецЦикла;	
	
	Комплект.ПериодФормирования = ПериодФормирования;
	
	Если ДокументыКомплекта.Количество() > 0
		Или Не Комплект.Ссылка.Пустая() Тогда
	
		Комплект.Записать();
	КонецЕсли;	
	
	Возврат Комплект;
КонецФункции	

Функция СоздатьКорректирующиеПачкиСЗВЗаПериоды(Организация, ОтчетныйПериод, КорректируемыеПериоды, ДокументыКомплекта, УчитыватьИсправления = Ложь)
	
	СозданныеДокументы = Новый Массив;
	
	Если КорректируемыеПериоды = Неопределено Тогда
		Возврат СозданныеДокументы;
	КонецЕсли;	
	
	КорректируемыеПериоды.Сортировать("Период");
		
	УчитываемыеДокументы = Новый Массив;
	
	ПараметрыФормированияДокументов = ПерсонифицированныйУчет.ПараметрыФормированияДокументовКвартальнойОтчетности();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТЗарегистрированныеКорректировкиВзносов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод);
	ПерсонифицированныйУчетВнутренний.СоздатьВТЗарегистрированныеКорректировкиСтажа(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод);
	
	ДополнитьОписаниеКорректируемыхПериодов(МенеджерВременныхТаблиц, КорректируемыеПериоды);
	Для Каждого ОписаниеКорректируемогоПериода Из КорректируемыеПериоды Цикл
		
		// Получим те документы данные которых необходимо корректировать.
		ПараметрыФормированияДокументов.КорректируемыеДокументы = КорректируемыеДокументы(Организация, ОтчетныйПериод, ОписаниеКорректируемогоПериода.Период);	
		
		// Установим корректируемый период.
		ПараметрыФормированияДокументов.КорректируемыйПериод = ОписаниеКорректируемогоПериода.Период;
		
		УчитываемыеПериоды = Новый Массив;
		УчитываемыеПериоды.Добавить(ОписаниеКорректируемогоПериода.Период);
		
		// Получим отменяющие документы за период из исходного комплекта.
		ОтменяющиеДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ, УчитываемыеПериоды);
		
		// Если за корректируемый период в комплекте есть отменяющие сведения обновим данные в них.
		Если ОтменяющиеДокументыПериода.Количество() > 0 Тогда
			ПараметрыФормированияДокументов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ;
			
			УчитываемыеДокументыПериода = ОбщегоНазначения.СкопироватьРекурсивно(УчитываемыеДокументы);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УчитываемыеДокументыПериода, ОтменяющиеДокументыПериода);
			
			// Для заполнения отменяющих сведений мы не учитываем корректируемые текущего комплекта, созданные за предыдущие
			// периоды.
			ПараметрыФормированияДокументов.УчитываемыеДокументы = УчитываемыеДокументыПериода;
			
			// Обновлять будем только по физ. лицам, категориям застрахованных лиц и типам договоров,
			// из отменяющих документов исходного комплекта.
			ПараметрыФормированияДокументов.ОбновляемыеДокументы = ОтменяющиеДокументыПериода;
			
			// Обновленные сведения будут записаны в отменяющие документы исходного комплекта.
			ПараметрыФормированияДокументов.ЗамещаемыеДокументы = ОтменяющиеДокументыПериода;
			
			// Получим алгоритмы получения данных для отменяющих сведений.
			ИсточникиДанныхОтменяющихСведений = ПерсонифицированныйУчет.ИсточникиДанныхОтменяющихСведенийКвартальнойОтчетности();
			
			ЗаполнитьЗначенияСвойств(ПараметрыФормированияДокументов, ИсточникиДанныхОтменяющихСведений);
			
			Если ОписаниеКорректируемогоПериода.Период >= '20140101' Тогда 
				ПараметрыФормированияДокументов.КорректируемыеДокументы = КорректируемыеДокументы(Организация, ОтчетныйПериод, ОписаниеКорректируемогоПериода.Период);
				ВариантыИсточниковДанныхСведенийОЗаработке = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСведенийОЗаработке();
				Если ПараметрыФормированияДокументов.КорректируемыеДокументы.Количество() > 0 Тогда
					ПараметрыФормированияДокументов.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеКорректируемыхДокументовОтменяемые;	
				Иначе
					ПараметрыФормированияДокументов.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаОтменяемые;	
				КонецЕсли;	
			КонецЕсли;	
						
			СозданныеОтменяющиеДокументыПериода = СоздатьКорректирующиеПачкиСЗВ(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов);
			
			// Данные обновленных отменяющих документов мы будем учитывать при получении данных для корректирующих документов.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УчитываемыеДокументы, СозданныеОтменяющиеДокументыПериода);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СозданныеДокументы, СозданныеОтменяющиеДокументыПериода);
			
		КонецЕсли;	
		
		ПараметрыФормированияДокументов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ;
		
		// Получим алгоритмы получения данных для корректирующих сведений в зависимости от варианта формирования корр.
		// сведений.
		ИсточникиДанных = ПерсонифицированныйУчет.ИсточникиДанныхКвартальнойОтчетностиПоВариантуФормирования(
							Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.РучнойВводДокументов,
							ПараметрыФормированияДокументов.КорректируемыеДокументы,
							УчитыватьИсправления);
							
		ЗаполнитьЗначенияСвойств(ПараметрыФормированияДокументов, ИсточникиДанных);					
		
		// Скопируем массив содержащий ранее созданные документы, которые мы будем использовать при формировании
		// корретирующих сведений.
		УчитываемыеДокументыПериода = ОбщегоНазначения.СкопироватьРекурсивно(УчитываемыеДокументы);
				
		// Получим корректирующие документы периода из комплекта.
		КорректирующиеДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ, УчитываемыеПериоды);
		
		// Укажем что обновленные данные мы будем записывать в корректирующие документы исходного комплекта.
		ПараметрыФормированияДокументов.ЗамещаемыеДокументы = КорректирующиеДокументыПериода;
		
		// Обновлять будем только по физ. лицам, категориям застрахованных лиц и типам договоров,
		// из корректирующих документов исходного комплекта.
		ПараметрыФормированияДокументов.ОбновляемыеДокументы = КорректирующиеДокументыПериода;
		
		// Дополним массив учитываемых при формировании сведений документов, корректирующими документа из комплекта, 
		// данные которых мы будем обновлять.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УчитываемыеДокументыПериода, КорректирующиеДокументыПериода);
		
		ПараметрыФормированияДокументов.УчитываемыеДокументы = УчитываемыеДокументыПериода; 
		
		СозданныеДокументыПериода = СоздатьКорректирующиеПачкиСЗВ(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов, ,МенеджерВременныхТаблиц);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СозданныеДокументы, СозданныеДокументыПериода);
	КонецЦикла;	
	
	Возврат СозданныеДокументы;	
КонецФункции	

Процедура ДополнитьОписаниеКорректируемыхПериодов(МенеджерВременныхТаблиц, КорректируемыеПериоды)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарегистрированныеКорректировкиВзносов.КорректируемыйПериод
	|ИЗ
	|	ВТЗарегистрированныеКорректировкиВзносов КАК ЗарегистрированныеКорректировкиВзносов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарегистрированныеКорректировкиСтажа.КорректируемыйПериод
	|ИЗ
	|	ВТЗарегистрированныеКорректировкиСтажа КАК ЗарегистрированныеКорректировкиСтажа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Период", Выборка.КорректируемыйПериод);
		
		НайденныеСтроки = КорректируемыеПериоды.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ОписаниеПериода = КорректируемыеПериоды.Добавить();
			ОписаниеПериода.Период = Выборка.КорректируемыйПериод;
			ОписаниеПериода.ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.РучнойВводДокументов;
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СоздатьВТЗарегистрированныеКорректировкиВзносов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод)
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	
	УстановитьПривилегированныйРежим(Истина);
	УчетСтраховыхВзносов.СформироватьВТИсправленияВзносовПрошлыхПериодов(ОтчетныйПериод, ОкончаниеПериода, Организация, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсправленияВзносовПрошлыхПериодов.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ИсправленияВзносовПрошлыхПериодов.ИсправленныйПериод >= ДАТАВРЕМЯ(2011, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ИсправленияВзносовПрошлыхПериодов.ИсправленныйПериод, КВАРТАЛ)
	|		КОГДА ИсправленияВзносовПрошлыхПериодов.ИсправленныйПериод >= ДАТАВРЕМЯ(2010, 7, 1)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(2010, 1, 1)
	|	КОНЕЦ КАК КорректируемыйПериод
	|ПОМЕСТИТЬ ВТЗарегистрированныеКорректировкиВзносов
	|ИЗ
	|	ВТИсправленияВзносовПрошлыхПериодов КАК ИсправленияВзносовПрошлыхПериодов";
	
	Запрос.Выполнить()	
КонецПроцедуры	

Функция СписокФизическихЛицСЗарегистрированнымиКорректировками(МенеджерВременныхТаблиц, КорректируемыйПериод)
	СписокФизическихЛиц = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КорректируемыйПериод", КорректируемыйПериод);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарегистрированныеКорректировкиВзносов.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТЗарегистрированныеКорректировкиВзносов КАК ЗарегистрированныеКорректировкиВзносов
	|ГДЕ
	|	ЗарегистрированныеКорректировкиВзносов.КорректируемыйПериод = &КорректируемыйПериод
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарегистрированныеКорректировкиСтажа.ФизическоеЛицо
	|ИЗ
	|	ВТЗарегистрированныеКорректировкиСтажа КАК ЗарегистрированныеКорректировкиСтажа
	|ГДЕ
	|	ЗарегистрированныеКорректировкиСтажа.КорректируемыйПериод = &КорректируемыйПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);		
	КонецЦикла;	
	
	Возврат СписокФизическихЛиц;
	
КонецФункции	

Функция СоздатьКорректирующиеПачкиСЗВ(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов, ПараметрыОтбора = Неопределено, МенеджерВременныхТаблиц = Неопределено)	
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	КонецЕсли;	
	
	// Если не задан список физических лиц по которым надо получать данные
	// то заполним его.
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда   
		Если ПараметрыФормированияДокументов.ОбновляемыеДокументы <> Неопределено Тогда
			// Если указаны документы, данные которых надо обновить, то заполним список физических лиц из этих документов.
			ПараметрыОтбора.СписокФизическихЛиц = ФизическиеЛицаИзДокументовСЗВ(ПараметрыФормированияДокументов.ОбновляемыеДокументы);	
		ИначеЕсли ПараметрыФормированияДокументов.КорректируемыеДокументы.Количество() > 0 Тогда
			// Если мы формируем новые корректирующие документы, а не обновляем старые, 
			// тогда заполним список физических лиц из корректируемых документов.
			ПараметрыОтбора.СписокФизическихЛиц = ФизическиеЛицаИзДокументовСЗВ(ПараметрыФормированияДокументов.КорректируемыеДокументы);	
		КонецЕсли;
		
		Если МенеджерВременныхТаблиц <> Неопределено Тогда
			ФизическиеЛицаСЗарегистрированнымиКорректировками = СписокФизическихЛицСЗарегистрированнымиКорректировками(МенеджерВременныхТаблиц, ПараметрыФормированияДокументов.КорректируемыйПериод);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПараметрыОтбора.СписокФизическихЛиц, ФизическиеЛицаСЗарегистрированнымиКорректировками);
			ПараметрыОтбора.СписокФизическихЛицДляАвтоКорректировки = ФизическиеЛицаСЗарегистрированнымиКорректировками;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат ПерсонифицированныйУчет.СоздатьДокументыКвартальнойОтчетности(
				Организация, 
				ОтчетныйПериод, 
				ПараметрыФормированияДокументов,
				ПараметрыОтбора);
	
КонецФункции	

Процедура ОбновитьУплаченныеВзносыВКомплекте(СтруктураПараметров, АдресХранилища) Экспорт
	ДокументыКомплекта = СтруктураПараметров.СписокПачекСЗВ.ВыгрузитьКолонку("ПачкаДокументов");
	
	Если ЗначениеЗаполнено(СтруктураПараметров.РСВ_1) Тогда
		ИнтерфейсыВзаимодействияБРО.ОбновитьДанныеРеглОтчета(
				"РегламентированныйОтчетРСВ1", 
				СтруктураПараметров.Организация, 
				СтруктураПараметров.ПериодРасчета,
				ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(СтруктураПараметров.ПериодРасчета),
				СтруктураПараметров.РСВ_1);
	КонецЕсли;			
			
	ПерераспределитьВзносыВКомплекте(ДокументыКомплекта,
						СтруктураПараметров.Организация,
						СтруктураПараметров.ПериодРасчета);
КонецПроцедуры	

Функция СтруктураПараметровОбновленияВзносов() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокПачекСЗВ");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("ПериодРасчета");
	СтруктураПараметров.Вставить("РСВ_1");
	
	Возврат СтруктураПараметров;	
КонецФункции	

Функция НовыйКомплектСведений(Организация, ОтчетныйПериод, РСВКомплекта = Неопределено) Экспорт
	Комплект = СоздатьЭлемент();
	Комплект.Организация = Организация;
	Комплект.ОтчетныйПериод = ОтчетныйПериод;
	Комплект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияНеСформированы;
	Комплект.РСВ_1 = РСВКомплекта;
	
	Возврат Комплект;
КонецФункции	

Функция ОписаниеАктивногоКомплектаПериода(Организация, ОтчетныйПериод, УчитыватьНулевыеКомплекты = Истина, УчитыватьКорректирующиеКомплекты = Ложь) Экспорт
	Периоды = Новый Массив;
	Периоды.Добавить(ОтчетныйПериод);
	
	ОписаниеКомплектов = ОписаниеАктивныхКомплектовЗаПериоды(Организация, Периоды, УчитыватьНулевыеКомплекты, УчитыватьКорректирующиеКомплекты);	
	
	Возврат ОписаниеКомплектов.Получить(ОтчетныйПериод);
КонецФункции

Функция ОписаниеАктивныхКомплектовЗаПериоды(Организация, Периоды, УчитыватьНулевыеКомплекты = Истина, УчитыватьКорректирующиеКомплекты = Ложь) Экспорт
	ОписаниеКомплектов = Новый Соответствие;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Периоды", Периоды);
	Запрос.УстановитьПараметр("УчитыватьНулевыеКомплекты", УчитыватьНулевыеКомплекты);
	Запрос.УстановитьПараметр("УчитыватьКорректирующиеКомплекты", УчитыватьКорректирующиеКомплекты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектыОтчетностиПерсучета.Ссылка,
	|	ВЫБОР
	|		КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
	|				И НЕ КомплектыОтчетностиПерсучета.НулевойКомплект
	|			ТОГДА 1
	|		КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
	|			ТОГДА 2
	|		КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы)
	|			ТОГДА 3
	|		КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСформированы)
	|			ТОГДА 4
	|		КОГДА КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ КАК Приоритет,
	|	КомплектыОтчетностиПерсучета.СостояниеКомплекта,
	|	КомплектыОтчетностиПерсучета.НулевойКомплект,
	|	КомплектыОтчетностиПерсучета.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТКомплектыОтчетности
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И КомплектыОтчетностиПерсучета.ОтчетныйПериод В(&Периоды)
	|	И ВЫБОР
	|			КОГДА КомплектыОтчетностиПерсучета.НулевойКомплект
	|				ТОГДА &УчитыватьНулевыеКомплекты
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА КомплектыОтчетностиПерсучета.КорректирующаяФормаРСВ_1
	|				ТОГДА &УчитыватьКорректирующиеКомплекты
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И (НЕ КомплектыОтчетностиПерсучета.СодержитТолькоКорректирующиеФормы
	|			ИЛИ НЕ КомплектыОтчетностиПерсучета.КорректирующаяФормаРСВ_1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектыОтчетности.ОтчетныйПериод,
	|	МИНИМУМ(КомплектыОтчетности.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТПриоритеты
	|ИЗ
	|	ВТКомплектыОтчетности КАК КомплектыОтчетности
	|
	|СГРУППИРОВАТЬ ПО
	|	КомплектыОтчетности.ОтчетныйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектыОтчетности.Ссылка,
	|	КомплектыОтчетности.Приоритет,
	|	КомплектыОтчетности.СостояниеКомплекта,
	|	КомплектыОтчетности.НулевойКомплект,
	|	КомплектыОтчетности.ОтчетныйПериод
	|ИЗ
	|	ВТПриоритеты КАК Приоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКомплектыОтчетности КАК КомплектыОтчетности
	|		ПО Приоритеты.ОтчетныйПериод = КомплектыОтчетности.ОтчетныйПериод
	|			И Приоритеты.Приоритет = КомплектыОтчетности.Приоритет";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Описание = Новый Структура("Ссылка, СостояниеКомплекта, НулевойКомплект");
		
		ЗаполнитьЗначенияСвойств(Описание, Выборка);
		
		ОписаниеКомплектов.Вставить(Выборка.ОтчетныйПериод, Описание);
	КонецЦикла;	
	
	Возврат ОписаниеКомплектов;
КонецФункции	

Функция ОписаниеКорректирующейФормыРСВ_1(Организация, ПериодФормирования, ОтчетныйПериод) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодФормирования", ПериодФормирования);
	Запрос.УстановитьПараметр("КорректируемыйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректирующиеФормыРСВ_1.ОтчетРСВ_1 КАК Ссылка,
	|	КорректирующиеФормыРСВ_1.Состояние
	|ИЗ
	|	РегистрСведений.КорректирующиеФормыРСВ_1 КАК КорректирующиеФормыРСВ_1
	|ГДЕ
	|	КорректирующиеФормыРСВ_1.ПериодФормирования = &ПериодФормирования
	|	И КорректирующиеФормыРСВ_1.КорректируемыйПериод = &КорректируемыйПериод
	|	И КорректирующиеФормыРСВ_1.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОписаниеРСВ = Новый Структура("Ссылка, Состояние");
		ЗаполнитьЗначенияСвойств(ОписаниеРСВ, Выборка);
		
		Возврат ОписаниеРСВ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

Процедура УстановитьСостояниеКорректирующейФормыРСВ_1(РСВ_1, Организация, ПериодФормирования, КорректируемыйПериод, Состояние) Экспорт
	СостояниеКорректирующейРСВ = РегистрыСведений.КорректирующиеФормыРСВ_1.СоздатьМенеджерЗаписи();
	
	СостояниеКорректирующейРСВ.Организация = Организация;
	СостояниеКорректирующейРСВ.ПериодФормирования = ПериодФормирования;
	СостояниеКорректирующейРСВ.КорректируемыйПериод = КорректируемыйПериод;
	
	СостояниеКорректирующейРСВ.ОтчетРСВ_1 = РСВ_1;
	СостояниеКорректирующейРСВ.Состояние = Состояние;
	
	Если Состояние = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться Тогда
		СостояниеКорректирующейРСВ.Удалить();
	Иначе
		СостояниеКорректирующейРСВ.Записать();
	КонецЕсли;	
КонецПроцедуры	

Функция КорректируемыеДокументы(Организация, ОтчетныйПериод, КорректируемыйПериод) Экспорт 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("КорректируемыйПериод", КорректируемыйПериод);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаСЗВ.Ссылка
	|ПОМЕСТИТЬ ВТПачкиСЗВ
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1 КАК ПачкаСЗВ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПачкаСЗВ.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|				ТОГДА ПачкаСЗВ.ОтчетныйПериод = &КорректируемыйПериод
	|			ИНАЧЕ ПачкаСЗВ.КорректируемыйПериод = &КорректируемыйПериод
	|		КОНЕЦ
	|	И ПачкаСЗВ.ОтчетныйПериод <= &ОтчетныйПериод
	|	И ПачкаСЗВ.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаСЗВ.Ссылка
	|ИЗ
	|	Документ.РеестрСЗВ_6_2 КАК ПачкаСЗВ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПачкаСЗВ.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|				ТОГДА ПачкаСЗВ.ОтчетныйПериод = &КорректируемыйПериод
	|			ИНАЧЕ ПачкаСЗВ.КорректируемыйПериод = &КорректируемыйПериод
	|		КОНЕЦ
	|	И ПачкаСЗВ.ОтчетныйПериод < &ОтчетныйПериод
	|	И ПачкаСЗВ.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаСЗВ.Ссылка
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаСЗВ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПачкаСЗВ.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|				ТОГДА ПачкаСЗВ.ОтчетныйПериод = &КорректируемыйПериод
	|			ИНАЧЕ ПачкаСЗВ.КорректируемыйПериод = &КорректируемыйПериод
	|		КОНЕЦ
	|	И ПачкаСЗВ.ОтчетныйПериод < &ОтчетныйПериод
	|	И ПачкаСЗВ.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаСЗВ.Ссылка
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаСЗВ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПачкаСЗВ.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|				ТОГДА ПачкаСЗВ.ОтчетныйПериод = &КорректируемыйПериод
	|			ИНАЧЕ ПачкаСЗВ.КорректируемыйПериод = &КорректируемыйПериод
	|		КОНЕЦ
	|	И ПачкаСЗВ.ОтчетныйПериод < &ОтчетныйПериод
	|	И ПачкаСЗВ.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПачкиСЗВ.Ссылка
	|ИЗ
	|	ВТПачкиСЗВ КАК ПачкиСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомплектыОтчетностиПерсучета.СписокПачекСЗВ КАК КомплектыОтчетностиПерсучетаСписокПачекСЗВ
	|		ПО ПачкиСЗВ.Ссылка = КомплектыОтчетностиПерсучетаСписокПачекСЗВ.ПачкаДокументов
	|			И (КомплектыОтчетностиПерсучетаСписокПачекСЗВ.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены))";
	
	Результат = Запрос.Выполнить();
	
	КорректируемыеДокументы = Новый Массив;

	Если Результат.Пустой() Тогда
		Возврат КорректируемыеДокументы;
	КонецЕсли;	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КорректируемыеДокументы.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат КорректируемыеДокументы;
		
КонецФункции	

Функция СтруктураДанныхКомплекта()
	СтруктураДанныхКомплекта = Новый Структура;
	СтруктураДанныхКомплекта.Вставить("Ссылка");
	СтруктураДанныхКомплекта.Вставить("Организация");
	СтруктураДанныхКомплекта.Вставить("ОтчетныйПериод");
	СтруктураДанныхКомплекта.Вставить("ПериодФормирования");
	СтруктураДанныхКомплекта.Вставить("НомерКомплекта");
	СтруктураДанныхКомплекта.Вставить("СостояниеКомплекта");
	СтруктураДанныхКомплекта.Вставить("ОписьПачекСЗВ");
	СтруктураДанныхКомплекта.Вставить("ВедомостьУплатыАДВ11");
	СтруктураДанныхКомплекта.Вставить("РСВ_1");
	СтруктураДанныхКомплекта.Вставить("КорректирующаяФормаРСВ_1");
	СтруктураДанныхКомплекта.Вставить("СпециальныйДокумент2015года", Ложь);
	СтруктураДанныхКомплекта.Вставить("СписокПачекСЗВ", Новый ТаблицаЗначений);
	СтруктураДанныхКомплекта.Вставить("СписокПачекСЗВ6_3", Новый ТаблицаЗначений);
	
	СтруктураДанныхКомплекта.СписокПачекСЗВ.Колонки.Добавить("ПачкаДокументов");
	СтруктураДанныхКомплекта.СписокПачекСЗВ6_3.Колонки.Добавить("ПачкаДокументов");
	
	Возврат СтруктураДанныхКомплекта;
КонецФункции	

Функция ЕстьКомплектыНеопределенногоСтатуса(Организация, ОтчетныйПериод) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КомплектыОтчетностиПерсучета.Организация,
	|	КомплектыОтчетностиПерсучета.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТПринятыеКомплекты
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомплектыОтчетностиПерсучета.Ссылка
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятыеКомплекты КАК ПринятыеКомплекты
	|		ПО КомплектыОтчетностиПерсучета.Организация = ПринятыеКомплекты.Организация
	|			И КомплектыОтчетностиПерсучета.ОтчетныйПериод = ПринятыеКомплекты.ОтчетныйПериод
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И ПринятыеКомплекты.Организация ЕСТЬ NULL 
	|	И КомплектыОтчетностиПерсучета.СостояниеКомплекта <> ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться)";
	
	Возврат Не Запрос.Выполнить().Пустой();	
КонецФункции

Процедура ПроверитьЗаполнениеКомплекта(СтруктураПараметров, АдресХранилища) Экспорт
	
	КомплектОбъект = СтруктураПараметров.Ссылка.ПолучитьОбъект();
	
	Ошибки = СтруктураПараметров.Ошибки;
	Отказ = СтруктураПараметров.Отказ;
	
	КомплектОбъект.ПроверитьДанныеКомплекта(Ошибки, Отказ);
	
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	
	РезультатПроверки = Новый Структура("Ошибки, Отказ, СообщенияПользователю", Ошибки, Отказ, СообщенияПользователю);
		
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

Функция СтруктураПараметровДляЗагрузитьКомплектыСведений() Экспорт
	Возврат Новый Структура("СоответствиеИмпортируемыхФайлов");	
КонецФункции	

Процедура ЗагрузитьКомплектыСведений(СтруктураПараметров, АдресХранилища) Экспорт 
	СоответствиеИмпортируемыхФайлов = СтруктураПараметров.СоответствиеИмпортируемыхФайлов;
	
	Для Каждого ОписаниеФайлаОписи Из СоответствиеИмпортируемыхФайлов Цикл
		МассивИменПачек = Новый Массив;
		ИмяФайлаАДВ = ОписаниеФайлаОписи.Ключ;
		СоответствиеИменФайлов = Новый Соответствие;
		Для Каждого ОписаниеПомещенногоФайла Из ОписаниеФайлаОписи.Значение.МассивВыбранныхФайлов Цикл
			Если ОписаниеПомещенногоФайла.Имя <> ИмяФайлаАДВ Тогда
				МассивИменПачек.Добавить(ОписаниеПомещенногоФайла.Имя);
			КонецЕсли; 
			СоответствиеИменФайлов.Вставить(ОписаниеПомещенногоФайла.Имя, ОписаниеПомещенногоФайла.Хранение);
		КонецЦикла;	
		
		Если ОписаниеФайлаОписи.Значение.Комплект = Неопределено Тогда
			КомплектОбъект = НовыйКомплектСведений(ОписаниеФайлаОписи.Значение.Организация, ОписаниеФайлаОписи.Значение.Период);			
		Иначе
			КомплектОбъект = ОписаниеФайлаОписи.Значение.Комплект.ПолучитьОбъект();	
		КонецЕсли;	
		
		КомплектОбъект.ЗагрузитьКомплектСведений(ОписаниеФайлаОписи.Значение, ИмяФайлаАДВ, МассивИменПачек, СоответствиеИменФайлов);
	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьДанныеРСВ_1(ДанныеКомплекта)
	
	ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ДанныеКомплекта.ОтчетныйПериод);
	
	Если ДанныеКомплекта.ОтчетныйПериод < '20140101' 
		И (Не ЗначениеЗаполнено(ДанныеКомплекта.РСВ_1) 
		Или Не ФормаРСВАктуальна(ДанныеКомплекта.РСВ_1)) Тогда
		
		ДанныеКомплекта.РСВ_1 = СсылкаНаРеглОтчет(ДанныеКомплекта.Организация, ОкончаниеОтчетногоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКомплекта.РСВ_1)
		И ФормаРСВАктуальна(ДанныеКомплекта.РСВ_1)Тогда
		
		ИнтерфейсыВзаимодействияБРО.ОбновитьДанныеРеглОтчета(
				"РегламентированныйОтчетРСВ1", 
				ДанныеКомплекта.Организация, 
				ДанныеКомплекта.ОтчетныйПериод,
				ОкончаниеОтчетногоПериода,
				ДанныеКомплекта.РСВ_1);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКомплекта.РСВ_1)
		Или Не ФормаРСВАктуальна(ДанныеКомплекта.РСВ_1) Тогда
		
		КорректирующаяФорма = ДанныеКомплекта.КорректирующаяФормаРСВ_1;
		
		ДанныеКомплекта.РСВ_1 = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
				"РегламентированныйОтчетРСВ1", 
				ДанныеКомплекта.Организация, 
				ДанныеКомплекта.ОтчетныйПериод,
				ОкончаниеОтчетногоПериода,
				КорректирующаяФорма);
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаРеглОтчет(Организация, ОкончаниеОтчетногоПериода)
	МассивСсылок = РегламентированнаяОтчетность.ПолучитьСсылкуНаРеглОтчет("РегламентированныйОтчетРСВ1", Организация, ОкончаниеОтчетногоПериода);	
	
	Если МассивСсылок.Количество() > 0 
		И ФормаРСВАктуальна(МассивСсылок[0]) Тогда
		
		Возврат МассивСсылок[0];
	КонецЕсли;	
	
КонецФункции

Процедура ДокументыСЗВПередЗаписью(ДокументОбъект, РежимЗаписи) Экспорт
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения 
		И  ПерсонифицированныйУчет.СведенияДокументаРазнесеныПоЛицевымСчетам(ДокументОбъект.Ссылка) 
		И Не ДокументОбъект.ДополнительныеСвойства.Свойство("УдалениеИзКомплекта") Тогда 
		
		ТекстИсключения = НСтр("ru = 'Документ входит в комплект отчетности, сведения которого разнесены по лицевым счетам. Отмена проведения запрещена.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область ОтменаИсправлений

Функция ПараметрыОтменыИсправленийПоВзносам() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Комплект");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("ОтчетныйПериод");
	СтруктураПараметров.Вставить("Сотрудник");
	СтруктураПараметров.Вставить("ДокументыКомплекта", Новый Массив);
	СтруктураПараметров.Вставить("КатегорияЗастрахованныхЛиц");
	СтруктураПараметров.Вставить("ТипСведенийСЗВ");
    СтруктураПараметров.Вставить("ПериодРасчета");
    СтруктураПараметров.Вставить("ТипДоговора");
	
	Возврат СтруктураПараметров;
		
КонецФункции	

Процедура ОтменитьИсправленияВзносовИЗаработка(СтруктураПараметров, АдресХранилища) Экспорт
		
	СписокФизическихЛиц = Новый Массив;
	СписокФизическихЛиц.Добавить(СтруктураПараметров.Сотрудник);
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.ТипДоговора = СтруктураПараметров.ТипДоговора;
	ПараметрыОтбора.КатегорияЗастрахованныхЛиц = СтруктураПараметров.КатегорияЗастрахованныхЛиц;
	ПараметрыОтбора.СписокФизическихЛиц = СписокФизическихЛиц;
		
	ОтменитьИсправленияВзносов(
		СтруктураПараметров.Комплект,
		СтруктураПараметров.Организация, 
		СтруктураПараметров.ОтчетныйПериод, 
		СтруктураПараметров.ТипСведенийСЗВ,
		СтруктураПараметров.ДокументыКомплекта,
		ПараметрыОтбора);		
		
	Если СтруктураПараметров.ОтчетныйПериод >= '20140101' Тогда
		ОтменитьИсправленияЗаработка2014(
			СтруктураПараметров.Организация, 
			СтруктураПараметров.ОтчетныйПериод, 
			СтруктураПараметров.ТипСведенийСЗВ, 
			СтруктураПараметров.ДокументыКомплекта, 
			ПараметрыОтбора);	
			
	ИначеЕсли СтруктураПараметров.ОтчетныйПериод >= '20130101' Тогда 		
		ОтменитьИсправленияЗаработка2013(
		СтруктураПараметров.Организация, 
		СтруктураПараметров.ОтчетныйПериод, 
		СтруктураПараметров.ТипСведенийСЗВ, 
		СтруктураПараметров.ДокументыКомплекта, 
		ПараметрыОтбора);	
	КонецЕсли;	
	
	Результат = Новый Структура("Сотрудник", СтруктураПараметров.Сотрудник);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецПроцедуры	

Процедура ОтменитьИсправленияВзносов(Комплект, Организация, ОтчетныйПериод, ТипСведенийСЗВ, ДокументыКомплекта, ПараметрыОтбора)
	ВариантыИсточниковДанныхНачисленныхВзносов = ПерсонифицированныйУчет.ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ПерсонифицированныйУчет.ВариантыИсточниковДанныхУплаченныхВзносов();

	ПараметрыДляСоздатьВТВзносыВПФР = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТВзносыВПФР();
	
	ПараметрыДляСоздатьВТВзносыВПФР.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
	ПараметрыДляСоздатьВТВзносыВПФР.ИсточникДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета;
	ПараметрыДляСоздатьВТВзносыВПФР.ТипСведенийСЗВ = ТипСведенийСЗВ;
	ПараметрыДляСоздатьВТВзносыВПФР.УчитываемыеДокументы = ДокументыКомплекта;
		
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	ПерсонифицированныйУчет.СоздатьВТВзносыВПФР(
		МенеджерВТ, 
		Организация,
		ОтчетныйПериод,
		ПараметрыДляСоздатьВТВзносыВПФР,
		ПараметрыОтбора);		
						
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда	
		КорректируемыйПериод = '00010101';
		КорректирующиеСведения = Ложь;
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	Иначе	
		Периоды = Новый Массив;
		Периоды.Добавить(ОтчетныйПериод);
		КорректирующиеСведения = Истина;
		КорректируемыйПериод = ОтчетныйПериод;
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, ТипСведенийСЗВ, Периоды);
	КонецЕсли;		
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	СформироватьВТССотрудникамиКомплектаПоКатегориям(МенеджерВТ, ДокументыПериода, ПараметрыОтбора.СписокФизическихЛиц);
	 
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ?(ПараметрыОтбора.ТипДоговора = Неопределено, Перечисления.ТипыДоговоровСЗВ63.ПустаяСсылка(), ПараметрыОтбора.ТипДоговора));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиСотрудниковПоКатегориям.Ссылка КАК Ссылка,
	|	СтрокиСотрудниковПоКатегориям.Сотрудник,
	|	СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц,
	|	СтрокиСотрудниковПоКатегориям.НомерСтроки,
	|	ДанныеОВзносахВПФР.УплаченоНакопительная,
	|	ДанныеОВзносахВПФР.УплаченоСтраховая,
	|	ДанныеОВзносахВПФР.НачисленоСтраховая,
	|	ДанныеОВзносахВПФР.НачисленоНакопительная,
	|	ДанныеОВзносахВПФР.ДоначисленоСтраховая,
	|	ДанныеОВзносахВПФР.ДоначисленоНакопительная,
	|	ДанныеОВзносахВПФР.ДоуплаченоСтраховая,
	|	ДанныеОВзносахВПФР.ДоуплаченоНакопительная
	|ИЗ
	|	ВТСтрокиСотрудниковПоКатегориям КАК СтрокиСотрудниковПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыВПФР КАК ДанныеОВзносахВПФР
	|		ПО СтрокиСотрудниковПоКатегориям.Сотрудник = ДанныеОВзносахВПФР.ФизическоеЛицо
	|			И СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц = ДанныеОВзносахВПФР.КатегорияЗастрахованныхЛиц
	|			И СтрокиСотрудниковПоКатегориям.ТипДоговора = ДанныеОВзносахВПФР.ТипДоговора
	|ГДЕ
	|	СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СтрокиСотрудниковПоКатегориям.ТипДоговора = &ТипДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДублиСотрудниковПоКатегориям.Ссылка,
	|	ДублиСотрудниковПоКатегориям.Сотрудник,
	|	ДублиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц,
	|	ДублиСотрудниковПоКатегориям.НомерСтроки,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	ВТДублиСотрудниковПоКатегориям КАК ДублиСотрудниковПоКатегориям
	|ГДЕ
	|	ДублиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И ДублиСотрудниковПоКатегориям.ТипДоговора = &ТипДоговора
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			СтрокаСотрудник = ДокументОбъект.Сотрудники.Найти(Выборка.НомерСтроки, "НомерСтроки");
					
			ЗаполнитьЗначенияСвойств(СтрокаСотрудник, Выборка);
			СтрокаСотрудник.ФиксНачисленныеВзносы = Ложь;
			
			Если Не ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
				СтрокаСотрудник.ФиксУплаченныеВзносы = Ложь; 
			КонецЕсли;	
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;	
		
	Если ОтчетныйПериод < '20140101' Тогда
		ПерераспределитьВзносыВКомплекте(ДокументыКомплекта, Организация, ОтчетныйПериод);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтменитьИсправленияЗаработка2013(Организация, ОтчетныйПериод, ТипСведенийСЗВ, ДокументыКомплекта, ПараметрыОтбора)
	ВариантыИсточниковДанныхСведенийОЗаработке = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСведенийОЗаработке();
		
	ПараметрыДляСоздатьВТСведенияОЗаработке = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТСведенияОЗаработке();	
	
	ПараметрыДляСоздатьВТСведенияОЗаработке.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
	ПараметрыДляСоздатьВТСведенияОЗаработке.УчитываемыеДокументы = ДокументыКомплекта;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ПерсонифицированныйУчет.СоздатьВТСведенияОЗаработке2013(
		МенеджерВТ, 
		Организация,
		ОтчетныйПериод,
		ПараметрыДляСоздатьВТСведенияОЗаработке,
		ПараметрыОтбора);		
		
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда	
		КорректируемыйПериод = '00010101';
		КорректирующиеСведения = Ложь;
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	Иначе	
		Периоды = Новый Массив;
		Периоды.Добавить(ОтчетныйПериод);
		КорректирующиеСведения = Истина;
		КорректируемыйПериод = ОтчетныйПериод;
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, ТипСведенийСЗВ, Периоды);
	КонецЕсли;		
		
	СформироватьВТССотрудникамиКомплектаПоКатегориям(МенеджерВТ, ДокументыПериода, ПараметрыОтбора.СписокФизическихЛиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ?(ПараметрыОтбора.ТипДоговора = Неопределено, Перечисления.ТипыДоговоровСЗВ63.ПустаяСсылка(), ПараметрыОтбора.ТипДоговора));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиСотрудниковПоКатегориям.Ссылка КАК Ссылка,
	|	СтрокиСотрудниковПоКатегориям.Сотрудник КАК Сотрудник,
	|	СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц,
	|	СтрокиСотрудниковПоКатегориям.НомерСтроки КАК НомерСтроки,
	|	СведенияОЗаработке.Месяц КАК Месяц,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносами,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СведенияЗаполнены
	|ИЗ
	|	ВТСтрокиСотрудниковПоКатегориям КАК СтрокиСотрудниковПоКатегориям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО СтрокиСотрудниковПоКатегориям.Сотрудник = СведенияОЗаработке.ФизическоеЛицо
	|			И СтрокиСотрудниковПоКатегориям.ТипДоговора = СведенияОЗаработке.ТипДоговора
	|			И СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц = СведенияОЗаработке.КатегорияЗастрахованныхЛиц
	|ГДЕ
	|	СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СтрокиСотрудниковПоКатегориям.ТипДоговора = &ТипДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДублиСотрудниковПоКатегориям.Ссылка,
	|	ДублиСотрудниковПоКатегориям.Сотрудник,
	|	ДублиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц,
	|	ДублиСотрудниковПоКатегориям.НомерСтроки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЛОЖЬ
	|ИЗ
	|	ВТДублиСотрудниковПоКатегориям КАК ДублиСотрудниковПоКатегориям
	|ГДЕ
	|	ДублиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И ДублиСотрудниковПоКатегориям.ТипДоговора = &ТипДоговора
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	НомерСтроки,
	|	Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			СтрокиЗаработкаПоСотруднику = ДокументОбъект.СведенияОЗаработке.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			
			Для Каждого УдаляемаяСтрока Из СтрокиЗаработкаПоСотруднику Цикл
				ДокументОбъект.СведенияОЗаработке.Удалить(УдаляемаяСтрока);	
			КонецЦикла;	
			
			Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				СтрокаСотрудник = ДокументОбъект.Сотрудники.Найти(Выборка.НомерСтроки, "НомерСтроки");
				
				СтрокаСотрудник.ФиксЗаработок = Ложь;

				Пока Выборка.Следующий() Цикл 
					Если Выборка.СведенияЗаполнены Тогда
						СтрокаЗаработок =  ДокументОбъект.СведенияОЗаработке.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаработок, Выборка);		
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОтменитьИсправленияЗаработка2014(Организация, ОтчетныйПериод, ТипСведенийСЗВ, ДокументыКомплекта, ПараметрыОтбора)
	ВариантыИсточниковДанныхСведенийОЗаработке = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСведенийОЗаработке();
		
	ПараметрыДляСоздатьВТСведенияОЗаработке = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТСведенияОЗаработке();	
	
	ПараметрыДляСоздатьВТСведенияОЗаработке.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
	ПараметрыДляСоздатьВТСведенияОЗаработке.УчитываемыеДокументы = ДокументыКомплекта;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ПерсонифицированныйУчет.СоздатьВТСведенияОЗаработке2014(
		МенеджерВТ, 
		Организация,
		ОтчетныйПериод,
		ПараметрыДляСоздатьВТСведенияОЗаработке,
		ПараметрыОтбора);		
		
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда	
		КорректируемыйПериод = '00010101';
		КорректирующиеСведения = Ложь;
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	Иначе	
		Периоды = Новый Массив;
		Периоды.Добавить(ОтчетныйПериод);
		КорректирующиеСведения = Истина;
		КорректируемыйПериод = ОтчетныйПериод;
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, ТипСведенийСЗВ, Периоды);
	КонецЕсли;		
		
	СформироватьВТССотрудникамиКомплектаПоКатегориям(МенеджерВТ, ДокументыПериода, ПараметрыОтбора.СписокФизическихЛиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ДокументыПериода", ДокументыПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаНачалаПериода,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТДанныеСтажаПФР
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка В(&ДокументыПериода)
	|	И ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Сотрудник В(&СписокФизическихЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В(&ДокументыПериода)
	|	И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник В(&СписокФизическихЛиц)";
	
	Запрос.Выполнить();
	
	ПерсонифицированныйУчет.СоздатьВТНулевыеИтоговыеСведенияОЗаработке(Запрос.МенеджерВременныхТаблиц, Организация, ОтчетныйПериод);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиСотрудниковПоКатегориям.Ссылка КАК Ссылка,
	|	СтрокиСотрудниковПоКатегориям.Сотрудник КАК Сотрудник,
	|	СтрокиСотрудниковПоКатегориям.НомерСтроки КАК НомерСтроки,
	|	СведенияОЗаработке.Месяц КАК Месяц,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СведенияЗаполнены
	|ИЗ
	|	ВТСтрокиСотрудниковПоКатегориям КАК СтрокиСотрудниковПоКатегориям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО СтрокиСотрудниковПоКатегориям.Сотрудник = СведенияОЗаработке.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтрокиСотрудниковПоКатегориям.Ссылка,
	|	СтрокиСотрудниковПоКатегориям.Сотрудник,
	|	СтрокиСотрудниковПоКатегориям.НомерСтроки,
	|	СведенияОЗаработке.Месяц,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработке.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	ВТСтрокиСотрудниковПоКатегориям КАК СтрокиСотрудниковПоКатегориям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНулевыеИтоговыеСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО СтрокиСотрудниковПоКатегориям.Сотрудник = СведенияОЗаработке.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	НомерСтроки,
	|	КатегорияЗастрахованныхЛиц,
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо КАК Сотрудник,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Месяц КАК Месяц,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда КАК КлассУсловийТруда,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ВЫБОР
	|		КОГДА СведенияОЗаработкеПоКлассамУсловийТруда.Месяц ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СведенияЗаполнены
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	КлассУсловийТруда,
	|	Месяц";

	Результаты = Запрос.ВыполнитьПакет();

	ВредныйЗаработокСотрудников = Новый Соответствие;
	
	ВредныйЗаработокПоСотрудникам = Результаты[1].Выгрузить();
	
	ВыборкаПоЗаработку = Результаты[0].Выбрать();
	
	Пока ВыборкаПоЗаработку.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = ВыборкаПоЗаработку.Ссылка.ПолучитьОбъект();
		
		Пока ВыборкаПоЗаработку.СледующийПоЗначениюПоля("Сотрудник") Цикл
			СтруктураПоиска = Новый Структура("Сотрудник", ВыборкаПоЗаработку.Сотрудник);
			
			СтрокиЗаработкаПоСотруднику = ДокументОбъект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
						
			Для Каждого УдаляемаяСтрока Из СтрокиЗаработкаПоСотруднику Цикл
				ДокументОбъект.СведенияОЗаработке.Удалить(УдаляемаяСтрока);	
			КонецЦикла;	
			
			СтрокиВредногоЗаработкаПоСотруднику = ДокументОбъект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого УдаляемаяСтрока Из СтрокиВредногоЗаработкаПоСотруднику Цикл
				ДокументОбъект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Удалить(УдаляемаяСтрока);	
			КонецЦикла;	
			
			СтрокиВредногоЗаработкаИзУчета = ВредныйЗаработокПоСотрудникам.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ДанныеВредногоЗаработкаИзУчета Из СтрокиВредногоЗаработкаИзУчета Цикл
				СтрокаТаблицы =  ДокументОбъект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеВредногоЗаработкаИзУчета);
			КонецЦикла;	
			
			Пока ВыборкаПоЗаработку.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				СтрокаСотрудник = ДокументОбъект.Сотрудники.Найти(ВыборкаПоЗаработку.НомерСтроки, "НомерСтроки");
				
				СтрокаСотрудник.ФиксЗаработок = Ложь;

				Пока ВыборкаПоЗаработку.Следующий() Цикл 
					Если ВыборкаПоЗаработку.СведенияЗаполнены Тогда
						СтрокаЗаработок =  ДокументОбъект.СведенияОЗаработке.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗаработок, ВыборкаПоЗаработку);		
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;		
КонецПроцедуры	

Функция ПараметрыОтменыИсправленийПоСтажу() Экспорт
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("ОтчетныйПериод");
	СтруктураПараметров.Вставить("Комплект");
	СтруктураПараметров.Вставить("Сотрудник");
	СтруктураПараметров.Вставить("ДокументыКомплекта", Новый Массив);
	СтруктураПараметров.Вставить("ТипСведенийСЗВ");
    СтруктураПараметров.Вставить("ПериодРасчета");
	
	Возврат СтруктураПараметров;
		
КонецФункции

Функция ОтменитьИсправленияСтажа(СтруктураПараметров, АдресХранилища) Экспорт
			
	Результат = Новый Структура("Сотрудник", СтруктураПараметров.Сотрудник);
	
	СписокФизическихЛиц = Новый Массив;
	СписокФизическихЛиц.Добавить(СтруктураПараметров.Сотрудник);
	
	ОбновитьДанныеСтажа(
		СписокФизическихЛиц, 
		СтруктураПараметров.Организация, 
		СтруктураПараметров.ПериодРасчета, 
		СтруктураПараметров.ТипСведенийСЗВ, 
		СтруктураПараметров.ДокументыКомплекта);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
КонецФункции	

Функция ОбновитьДанныеСтажа(СписокФизическихЛиц, Организация, ОтчетныйПериод, ТипСведенийСЗВ, ДокументыКомплекта)
	ВариантыИсточниковДанныхСтажа = ПерсонифицированныйУчет.ВариантыИсточниковДанныхСтажа();
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
			
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ); 	
		КорректируемыйПериод = '00010101';
		КорректирующиеСведения = Ложь;
	Иначе	
		Периоды = Новый Массив;
		Периоды.Добавить(ОтчетныйПериод);
		ДокументыПериода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ, Периоды);
		КорректирующиеСведения = Истина;
		КорректируемыйПериод = ОтчетныйПериод;
	КонецЕсли;	
	
	СформироватьВТССотрудникамиКомплектаПоКатегориям(МенеджерВТ, ДокументыПериода, СписокФизическихЛиц);
	
	ПараметрыДляСоздатьВТДанныеСтажаПФР = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТДанныеСтажаПФР();
	
	Если ОтчетныйПериод >= '20140101' Тогда 
		ПараметрыДляСоздатьВТДанныеСтажаПФР.ВыделятьСтажПоДоговорамГПХ = Истина;	
	КонецЕсли;	
	
	ПараметрыДляСоздатьВТДанныеСтажаПФР.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
	ПараметрыДляСоздатьВТДанныеСтажаПФР.УчитываемыеДокументы = ДокументыПериода;
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокФизическихЛиц;
	
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаПФР(
		МенеджерВТ, 
		Организация, 
		ОтчетныйПериод, 
		ПараметрыДляСоздатьВТДанныеСтажаПФР,
		ПараметрыОтбора);
		
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиСотрудниковПоКатегориям.Ссылка КАК Ссылка,
	|	СтрокиСотрудниковПоКатегориям.НомерСтроки КАК НомерСтроки,
	|	СтрокиСотрудниковПоКатегориям.Сотрудник КАК Сотрудник,
	|	ДанныеОСтажеПФР.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ДанныеОСтажеПФР.ДатаОкончанияПериода,
	|	ДанныеОСтажеПФР.ОсобыеУсловияТруда,
	|	ДанныеОСтажеПФР.КодПозицииСписка,
	|	ДанныеОСтажеПФР.ОснованиеИсчисляемогоСтажа,
	|	ДанныеОСтажеПФР.ПервыйПараметрИсчисляемогоСтажа,
	|	ДанныеОСтажеПФР.ВторойПараметрИсчисляемогоСтажа,
	|	ДанныеОСтажеПФР.ТретийПараметрИсчисляемогоСтажа,
	|	ДанныеОСтажеПФР.ОснованиеВыслугиЛет,
	|	ДанныеОСтажеПФР.ПервыйПараметрВыслугиЛет,
	|	ДанныеОСтажеПФР.ВторойПараметрВыслугиЛет,
	|	ДанныеОСтажеПФР.ТретийПараметрВыслугиЛет,
	|	ДанныеОСтажеПФР.ТерриториальныеУсловия
	|ИЗ
	|	ВТСтрокиСотрудниковПоКатегориям КАК СтрокиСотрудниковПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСтажаПФР КАК ДанныеОСтажеПФР
	|		ПО СтрокиСотрудниковПоКатегориям.Сотрудник = ДанныеОСтажеПФР.ФизическоеЛицо
	|			И СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц = ДанныеОСтажеПФР.КатегорияЗастрахованныхЛиц
	|			И СтрокиСотрудниковПоКатегориям.ТипДоговора = ДанныеОСтажеПФР.ТипДоговора
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки,
	|	ДатаНачалаПериода";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл			
			СтрокаСотрудник = ДокументОбъект.Сотрудники.Найти(Выборка.НомерСтроки, "НомерСтроки");
			
			СтрокаСотрудник.ФиксСтаж = Ложь;
			
			СтрокиСтажаПоСотруднику = ДокументОбъект.ЗаписиОСтаже.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			
			Для Каждого УдаляемаяСтрока Из СтрокиСтажаПоСотруднику Цикл
				ДокументОбъект.ЗаписиОСтаже.Удалить(УдаляемаяСтрока);					
			КонецЦикла;	
			
			СтрокиСтажаДляНумерования = Новый Массив;
			Пока Выборка.Следующий() Цикл
				Если Выборка.ДатаНачалаПериода <> Null Тогда 
					СтрокаСтажа = ДокументОбъект.ЗаписиОСтаже.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСтажа, Выборка);
					СтрокиСтажаДляНумерования.Добавить(СтрокаСтажа);
				КонецЕсли;	
			КонецЦикла;	
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")
				Или ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4")
				Или ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
				
				ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаДляНумерования);
			КонецЕсли;	
			
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;	
	
КонецФункции	

Функция ФизическиеЛицаИзДокументовСЗВ(СписокДокументов)
	ФизическиеЛицаДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаДокументов.Добавить(Выборка.Сотрудник);	
	КонецЦикла;	
	
	Возврат ФизическиеЛицаДокументов;
	
КонецФункции	

Функция ДокументыСЗВ6Комплекта(Ссылка, ТипСведенийСЗВ = Неопределено, СписокКорректируемыхПериодов = Неопределено) Экспорт
	СписокПачекСЗВ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СписокПачекСЗВ").Выгрузить().ВыгрузитьКолонку("ПачкаДокументов");
		
	Возврат ДокументыСЗВ6ПоПараметрам(СписокПачекСЗВ, ТипСведенийСЗВ, СписокКорректируемыхПериодов);
		
КонецФункции

Функция ДокументыСЗВ6ПоПараметрам(СписокДокументов, ТипСведенийСЗВ = Неопределено, СписокКорректируемыхПериодов = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("ТипСведений", ТипСведенийСЗВ);
	Запрос.УстановитьПараметр("СписокКорректируемыхПериодов", СписокКорректируемыхПериодов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1 КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&СписокДокументов)
	|	И &Условие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4 КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&СписокДокументов)
	|	И &Условие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1 КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&СписокДокументов)
	|	И &Условие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.РеестрСЗВ_6_2 КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&СписокДокументов)
	|	И &Условие";
	
	СтрокаУсловие = "";
	Если ТипСведенийСЗВ <> Неопределено Тогда
		Если ТипЗнч(ТипСведенийСЗВ) = Тип("Массив") Тогда
			СтрокаУсловие = СтрокаУсловие + " И Документ.ТипСведенийСЗВ В (&ТипСведений)";	
		Иначе	
			СтрокаУсловие = СтрокаУсловие + " И Документ.ТипСведенийСЗВ = &ТипСведений";
		КонецЕсли;	
	КонецЕсли;
	
	Если СписокКорректируемыхПериодов <> Неопределено Тогда 
		СтрокаУсловие = СтрокаУсловие + " И Документ.КорректируемыйПериод В (&СписокКорректируемыхПериодов)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Условие", СтрокаУсловие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивСсылок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивСсылок.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат МассивСсылок;

КонецФункции	

Процедура ПерераспределитьВзносыВКомплекте(ДокументыКомплекта, Организация, ПериодРасчета)		
	
	КорректируемыеПериоды = КорректируемыеПериоды(ДокументыКомплекта);	
	Для Каждого Период Из КорректируемыеПериоды Цикл
		Если Период >= ПериодРасчета Тогда
			ПерераспределитьВзносыЗаПериод(ДокументыКомплекта, Организация, Период, Истина);	
		КонецЕсли;	
	КонецЦикла;	
	ПерераспределитьВзносыЗаПериод(ДокументыКомплекта, Организация, ПериодРасчета, Ложь);
	
КонецПроцедуры

Процедура ПерераспределитьВзносыЗаПериод(ДокументыКомплекта, Организация, ПериодРасчета, КорректирующиеСведения)	
	Если ПериодРасчета >= '20140101' Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
	ПараметрыФормированияСведений = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТВзносыВПФР();
	
	ВариантыИсточниковДанныхНачисленныхВзносов = ПерсонифицированныйУчет.ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов  = ПерсонифицированныйУчет.ВариантыИсточниковДанныхУплаченныхВзносов();
	
	ПараметрыФормированияСведений.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеДокументов;
	ПараметрыФормированияСведений.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
	ПараметрыФормированияСведений.ТипСведенийСЗВ = ?(КорректирующиеСведения, Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	ПараметрыФормированияСведений.УчитываемыеДокументы = ДокументыКомплекта;
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	
	ПерсонифицированныйУчет.СоздатьВТВзносыВПФР(
		МенеджерВТ,
		Организация, 
		ПериодРасчета, 
		ПараметрыФормированияСведений,
		ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Если КорректирующиеСведения Тогда
		Периоды = Новый Массив;
		Периоды.Добавить(ПериодРасчета);
		ПачкиСЗВ6Периода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ, Периоды);
	Иначе
		ПачкиСЗВ6Периода = ДокументыСЗВ6ПоПараметрам(ДокументыКомплекта, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);	
	КонецЕсли;	
	
	СформироватьВТССотрудникамиКомплектаПоКатегориям(МенеджерВТ, ПачкиСЗВ6Периода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиСотрудниковПоКатегориям.Сотрудник КАК ФизическоеЛицо,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.УплаченоНакопительная, 0) КАК УплаченоНакопительная,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.УплаченоСтраховая, 0) КАК УплаченоСтраховая,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.НачисленоСтраховая, 0) КАК НачисленоСтраховая,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.НачисленоНакопительная, 0) КАК НачисленоНакопительная,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.ДоначисленоСтраховая, 0) КАК ДоначисленоСтраховая,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.ДоначисленоНакопительная, 0) КАК ДоначисленоНакопительная,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.ДоуплаченоСтраховая, 0) КАК ДоуплаченоСтраховая,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.ДоуплаченоНакопительная, 0) КАК ДоуплаченоНакопительная,
	|	СтрокиСотрудниковПоКатегориям.Ссылка КАК Ссылка,
	|	СтрокиСотрудниковПоКатегориям.НомерСтроки,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.ФиксУплаченныеВзносы, ЛОЖЬ) КАК ФиксУплаченныеВзносы,
	|	ЕСТЬNULL(ДанныеОВзносахВПФР.ФиксНачисленныеВзносы, ЛОЖЬ) КАК ФиксНачисленныеВзносы 
	|ИЗ
	|	ВТСтрокиСотрудниковПоКатегориям КАК СтрокиСотрудниковПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыВПФР КАК ДанныеОВзносахВПФР 
	|		ПО ДанныеОВзносахВПФР.ФизическоеЛицо = СтрокиСотрудниковПоКатегориям.Сотрудник
	|			И ДанныеОВзносахВПФР.КатегорияЗастрахованныхЛиц = СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц
	|			И ДанныеОВзносахВПФР.ТипДоговора = СтрокиСотрудниковПоКатегориям.ТипДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДублиСотрудниковПоКатегориям.Сотрудник,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ДублиСотрудниковПоКатегориям.Ссылка,
	|	ДублиСотрудниковПоКатегориям.НомерСтроки,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	ВТДублиСотрудниковПоКатегориям КАК ДублиСотрудниковПоКатегориям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			СтрокаСотрудник = ДокументОбъект.Сотрудники.Найти(Выборка.НомерСтроки, "НомерСтроки");
			ЗаполнитьЗначенияСвойств(СтрокаСотрудник, Выборка);
		КонецЦикла;
		
		ДокументОбъект.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура СформироватьВТССотрудникамиКомплектаПоКатегориям(МенеджерВременныхТаблиц, СписокПачек, МассивФизЛиц = Неопределено)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	СформироватьВТСДаннымиДокументовКомплекта(МенеджерВременныхТаблиц, СписокПачек, МассивФизЛиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеДокументов.ТипДоговора,
	|	МАКСИМУМ(ДанныеДокументов.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыПоКатегориямСотрудников
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеДокументов.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеДокументов.ТипДоговора,
	|	МИНИМУМ(ДанныеДокументов.НомерСтроки) КАК НомерСтроки,
	|	СУММА(ДанныеДокументов.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(ДанныеДокументов.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	СУММА(ДанныеДокументов.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(ДанныеДокументов.УплаченоНакопительная) КАК УплаченоНакопительная
	|ПОМЕСТИТЬ ВТСтрокиСотрудниковПоКатегориям
	|ИЗ
	|	ВТДокументыПоКатегориямСотрудников КАК ДокументыПоКатегориямСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
	|		ПО ДокументыПоКатегориямСотрудников.Сотрудник = ДанныеДокументов.Сотрудник
	|			И ДокументыПоКатегориямСотрудников.КатегорияЗастрахованныхЛиц = ДанныеДокументов.КатегорияЗастрахованныхЛиц
	|			И ДокументыПоКатегориямСотрудников.ТипДоговора = ДанныеДокументов.ТипДоговора
	|			И ДокументыПоКатегориямСотрудников.Ссылка = ДанныеДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеДокументов.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.НомерСтроки,
	|	ДанныеДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеДокументов.ТипДоговора
	|ПОМЕСТИТЬ ВТДублиСотрудниковПоКатегориям
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиСотрудниковПоКатегориям КАК СтрокиСотрудниковПоКатегориям
	|		ПО ДанныеДокументов.Сотрудник = СтрокиСотрудниковПоКатегориям.Сотрудник
	|			И ДанныеДокументов.КатегорияЗастрахованныхЛиц = СтрокиСотрудниковПоКатегориям.КатегорияЗастрахованныхЛиц
	|			И ДанныеДокументов.ТипДоговора = СтрокиСотрудниковПоКатегориям.ТипДоговора
	|			И (ВЫБОР
	|				КОГДА ДанныеДокументов.Ссылка = СтрокиСотрудниковПоКатегориям.Ссылка
	|					ТОГДА ДанныеДокументов.НомерСтроки <> СтрокиСотрудниковПоКатегориям.НомерСтроки
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СформироватьВТСДаннымиДокументовКомплекта(МенеджерВременныхТаблиц, СписокПачек, МассивФизЛиц = Неопределено, ИмяВТРезультат = "ВТДанныеДокументов") Экспорт 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокПачек", СписокПачек);
	Запрос.УстановитьПараметр("МассивФизЛиц", МассивФизЛиц);
	Запрос.УстановитьПараметр("НеОтбиратьПоСотрудникам", МассивФизЛиц = Неопределено);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Сотрудник,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка КАК Ссылка,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.НомерСтроки,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.НачисленоСтраховая,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.УплаченоСтраховая,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.НачисленоНакопительная,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.УплаченоНакопительная,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ФиксСтаж,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ФиксНачисленныеВзносы,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ФиксУплаченныеВзносы,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ДоУплаченоНакопительная,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ДоУплаченоСтраховая,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ДоначисленоСтраховая,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ДоначисленоНакопительная,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Фамилия,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Имя,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Отчество,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.СтраховойНомерПФР,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.АдресДляИнформирования,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.АдресДляИнформированияПредставление,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.КорректируемыйПериод
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ПачкаДокументовСЗВ_6_1Сотрудники
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка В(&СписокПачек)
	|	И (ПачкаДокументовСЗВ_6_1Сотрудники.Сотрудник В (&МассивФизЛиц)
	|			ИЛИ &НеОтбиратьПоСотрудникам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрСЗВ_6_2Сотрудники.Сотрудник,
	|	РеестрСЗВ_6_2Сотрудники.Ссылка,
	|	РеестрСЗВ_6_2Сотрудники.НомерСтроки,
	|	РеестрСЗВ_6_2Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|	РеестрСЗВ_6_2Сотрудники.НачисленоСтраховая,
	|	РеестрСЗВ_6_2Сотрудники.УплаченоСтраховая,
	|	РеестрСЗВ_6_2Сотрудники.НачисленоНакопительная,
	|	РеестрСЗВ_6_2Сотрудники.УплаченоНакопительная,
	|	РеестрСЗВ_6_2Сотрудники.ФиксСтаж,
	|	РеестрСЗВ_6_2Сотрудники.ФиксНачисленныеВзносы,
	|	РеестрСЗВ_6_2Сотрудники.ФиксУплаченныеВзносы,
	|	РеестрСЗВ_6_2Сотрудники.ДоУплаченоНакопительная,
	|	РеестрСЗВ_6_2Сотрудники.ДоУплаченоСтраховая,
	|	РеестрСЗВ_6_2Сотрудники.ДоначисленоСтраховая,
	|	РеестрСЗВ_6_2Сотрудники.ДоначисленоНакопительная,
	|	РеестрСЗВ_6_2Сотрудники.Фамилия,
	|	РеестрСЗВ_6_2Сотрудники.Имя,
	|	РеестрСЗВ_6_2Сотрудники.Отчество,
	|	РеестрСЗВ_6_2Сотрудники.СтраховойНомерПФР,
	|	РеестрСЗВ_6_2Сотрудники.АдресДляИнформирования,
	|	РеестрСЗВ_6_2Сотрудники.АдресДляИнформированияПредставление,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	РеестрСЗВ_6_2Сотрудники.Ссылка.КорректируемыйПериод
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК РеестрСЗВ_6_2Сотрудники
	|ГДЕ
	|	РеестрСЗВ_6_2Сотрудники.Ссылка В(&СписокПачек)
	|	И (РеестрСЗВ_6_2Сотрудники.Сотрудник В (&МассивФизЛиц)
	|			ИЛИ &НеОтбиратьПоСотрудникам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.НомерСтроки,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.НачисленоСтраховая,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.УплаченоСтраховая,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.НачисленоНакопительная,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.УплаченоНакопительная,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ФиксСтаж,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ФиксНачисленныеВзносы,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ФиксУплаченныеВзносы,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ДоУплаченоНакопительная,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ДоУплаченоСтраховая,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ДоначисленоСтраховая,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ДоначисленоНакопительная,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Фамилия,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Имя,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Отчество,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.СтраховойНомерПФР,
	|	"""",
	|	"""",
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипДоговора,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КорректируемыйПериод
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ПачкаДокументовСЗВ_6_4Сотрудники
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка В(&СписокПачек)
	|	И (ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник В (&МассивФизЛиц)
	|			ИЛИ &НеОтбиратьПоСотрудникам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НомерСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.НачисленоСтраховая,
	|	0,
	|	0,
	|	0,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксСтаж,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксНачисленныеВзносы,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ДоначисленоСтраховая,
	|	0,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Фамилия,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Имя,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Отчество,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.СтраховойНомерПФР,
	|	"""",
	|	"""",
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.КорректируемыйПериод
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В(&СписокПачек)
	|	И (ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник В (&МассивФизЛиц)
	|			ИЛИ &НеОтбиратьПоСотрудникам)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеДокументов", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция КорректируемыеПериоды(СписокДокументов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПачкаДокументовСЗВ_6_1.КорректируемыйПериод
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1 КАК ПачкаДокументовСЗВ_6_1
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_1.Ссылка В(&МассивСсылок)
	|	И ПачкаДокументовСЗВ_6_1.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеестрСЗВ_6_2.КорректируемыйПериод
	|ИЗ
	|	Документ.РеестрСЗВ_6_2 КАК РеестрСЗВ_6_2
	|ГДЕ
	|	РеестрСЗВ_6_2.Ссылка В(&МассивСсылок)
	|	И РеестрСЗВ_6_2.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПачкаДокументовСЗВ_6_4.КорректируемыйПериод
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4.Ссылка В(&МассивСсылок)
	|	И ПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПачкаРазделов6РасчетаРСВ_1.КорректируемыйПериод
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаРазделов6РасчетаРСВ_1
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1.Ссылка В(&МассивСсылок)
	|	И ПачкаРазделов6РасчетаРСВ_1.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПериодов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		МассивПериодов.Добавить(Выборка.КорректируемыйПериод);		
	КонецЦикла;	
	
	Возврат МассивПериодов;
	
КонецФункции

Функция ФормаРСВАктуальна(РСВСсылка) Экспорт
	ДанныеРСВ1 = РегламентированнаяОтчетность.ПолучитьДанныеРеглОтчета(РСВСсылка);
	
	Возврат ДанныеРСВ1.ФормаРеглОтчетаДействуетВТекущемОтчетномПериоде
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РСВСсылка, "ПометкаУдаления");	
КонецФункции	

Процедура УстановитьСостояниеПредыдущегоПринятогоКомплекта(Организация, ОтчетныйПериод, ТекущийКомплект, КорректирующаяФормаРСВ_1) Экспорт 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущийКомплект", ТекущийКомплект);
	Запрос.Текст = "ВЫБРАТЬ
	               |	КомплектыОтчетностиПерсучета.Ссылка
	               |ИЗ
	               |	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	               |ГДЕ
	               |	КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
	               |	И КомплектыОтчетностиПерсучета.Организация = &Организация
	               |	И КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	               |	И КомплектыОтчетностиПерсучета.Ссылка <> &ТекущийКомплект";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КомплектОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если КорректирующаяФормаРСВ_1 Тогда
			КомплектОбъект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы;	
		Иначе	
			КомплектОбъект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться;
		КонецЕсли;	
		КомплектОбъект.Записать();
	КонецЦикла;	
КонецПроцедуры	

Процедура УстановитьСостояниеНеОтправленныхКомплектов(Организация, ОтчетныйПериод, КорректирующаяФормаРСВ_1 = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("КорректирующаяФормаРСВ_1", КорректирующаяФормаРСВ_1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектыОтчетностиПерсучета.Ссылка
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
	|ГДЕ
	|	КомплектыОтчетностиПерсучета.Организация = &Организация
	|	И КомплектыОтчетностиПерсучета.ОтчетныйПериод = &ОтчетныйПериод
	|	И (КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСформированы)
	|			ИЛИ НЕ &КорректирующаяФормаРСВ_1
	|				И КомплектыОтчетностиПерсучета.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы))
	|	И (НЕ КомплектыОтчетностиПерсучета.КорректирующаяФормаРСВ_1 = &КорректирующаяФормаРСВ_1
	|			ИЛИ НЕ КомплектыОтчетностиПерсучета.СодержитТолькоКорректирующиеФормы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КомплектОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КомплектОбъект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться;
		КомплектОбъект.Записать();
	КонецЦикла;	
КонецПроцедуры

Функция ВыгрузитьФайлыВоВременноеХранилище(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт  
	
	ВыгруженныеФайлы = Новый Массив;
	
	ПолучаемыеРеквизиты = 
		"РСВ_1, 
		|ОписьПачекСЗВ, 
		|ВедомостьУплатыАДВ11, 
		|СписокПачекСЗВ, 
		|СписокПачекСЗВ6_3, 
		|АдресФайлаВыгрузкиРСВ, 
		|ИмяФайлаВыгрузкиРСВ, 
		|НулевойКомплект, 
		|ОтчетныйПериод";
		
	ДанныеКомплекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ПолучаемыеРеквизиты);   
	
	ПроверятьПрограммойCheckXML = ДанныеКомплекта.ОтчетныйПериод < '20140101';
	
	// ОписьПачекСЗВ_6
	
	Если ЗначениеЗаполнено(ДанныеКомплекта.ОписьПачекСЗВ) Тогда
		ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(ДанныеКомплекта.ОписьПачекСЗВ, УникальныйИдентификатор);
		
		ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
		
		ОписаниеВыгруженногоФайла.Владелец = ДанныеКомплекта.ОписьПачекСЗВ;
		ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
		ОписаниеВыгруженногоФайла.ФайлВСоставеКомплекта = Не ДанныеКомплекта.НулевойКомплект;
		ОписаниеВыгруженногоФайла.ПроверяемыйФайлКомплекта = Не ДанныеКомплекта.НулевойКомплект;
		ОписаниеВыгруженногоФайла.ПроверятьCheckXML = ПроверятьПрограммойCheckXML;
		ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
		
		ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
	КонецЕсли;	
		
	// ВедомостьУплатыАДВ_11
	
	Если ЗначениеЗаполнено(ДанныеКомплекта.ВедомостьУплатыАДВ11) Тогда
		ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(ДанныеКомплекта.ВедомостьУплатыАДВ11, УникальныйИдентификатор);
		
		ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
		
		ОписаниеВыгруженногоФайла.Владелец = ДанныеКомплекта.ВедомостьУплатыАДВ11;
		ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
		ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
		ОписаниеВыгруженногоФайла.ФайлВСоставеКомплекта = Не ДанныеКомплекта.НулевойКомплект;
		ОписаниеВыгруженногоФайла.ПроверяемыйФайлКомплекта = Ложь;
		ОписаниеВыгруженногоФайла.ПроверятьCheckXML = ПроверятьПрограммойCheckXML;
		ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
		
		ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);	
	КонецЕсли;	
	
	// ПачкаДокументовСЗВ_6_1, РеестрСЗВ_6_2, ПачкаДокументовСЗВ_6_4 
	
	СписокПачекСЗВ = ДанныеКомплекта.СписокПачекСЗВ.Выгрузить();
	
	Для Каждого ПачкаСЗВ Из СписокПачекСЗВ Цикл
		Если ЗначениеЗаполнено(ПачкаСЗВ.ПачкаДокументов) Тогда
			ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(ПачкаСЗВ.ПачкаДокументов, УникальныйИдентификатор);
		
			ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
			
			ОписаниеВыгруженногоФайла.Владелец = ПачкаСЗВ.ПачкаДокументов;
			ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
			ОписаниеВыгруженногоФайла.ФайлВСоставеКомплекта = Не ДанныеКомплекта.НулевойКомплект;
			ОписаниеВыгруженногоФайла.ПроверяемыйФайлКомплекта = Ложь;
			ОписаниеВыгруженногоФайла.ПроверятьCheckXML = ПроверятьПрограммойCheckXML;
			ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
			
			ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);	
		КонецЕсли;	
	КонецЦикла;	
	
	// ПачкаДокументовСЗВ_6_3 
	
	СписокПачекСЗВ = ДанныеКомплекта.СписокПачекСЗВ6_3.Выгрузить();
	
	Для Каждого ПачкаСЗВ Из СписокПачекСЗВ Цикл
		Если ЗначениеЗаполнено(ПачкаСЗВ.ПачкаДокументов) Тогда 
			ДанныеФайла = ЗарплатаКадры.ПолучитьДанныеФайла(ПачкаСЗВ.ПачкаДокументов, УникальныйИдентификатор);
		
			ОписаниеВыгруженногоФайла = ПерсонифицированныйУчет.ОписаниеВыгруженногоФайлаОтчетности();
			
			ОписаниеВыгруженногоФайла.Владелец = ПачкаСЗВ.ПачкаДокументов;
			ОписаниеВыгруженногоФайла.АдресВоВременномХранилище = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
			ОписаниеВыгруженногоФайла.ИмяФайла = ДанныеФайла.ИмяФайла;
			ОписаниеВыгруженногоФайла.ФайлВСоставеКомплекта = Не ДанныеКомплекта.НулевойКомплект;
			ОписаниеВыгруженногоФайла.ПроверяемыйФайлКомплекта = Ложь;
			ОписаниеВыгруженногоФайла.ПроверятьCheckXML = ПроверятьПрограммойCheckXML;
			ОписаниеВыгруженногоФайла.ПроверятьCheckUFA = Истина;
			
			ВыгруженныеФайлы.Добавить(ОписаниеВыгруженногоФайла);
		КонецЕсли;	
	КонецЦикла;	

	Возврат ВыгруженныеФайлы;	
КонецФункции

#КонецОбласти

#Область ПечатьКомплекта2014Г

// Процедура заполняет данные для выгрузки раздела 2.5 формы РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на регламентированный отчет;
//  ДанныеРаздела25       - структура с ключами "Таблица_2_5_1" и "Таблица_2_5_2":
//    "Таблица_2_5_1"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.1 по колонкам 2 - 5:
//      "П000251000102"   - Число (15, 2);
//      "П000251000103"   - Число (15, 2);
//      "П000251000104"   - Число ( 3, 0);
//      "П000251000105"   - Строка  (100);
//    "Таблица_2_5_2"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.2 по колонкам 2 - 8:
//      "П000252000102"   - Число ( 1, 0);
//      "П000252000103"   - Число ( 4, 0);
//      "П000252000104"   - Число (15, 2);
//      "П000252000105"   - Число (15, 2);
//      "П000252000106"   - Число (15, 2);
//      "П000252000107"   - Число ( 3, 0);
//      "П000252000108"   - Строка  (100).
//
Процедура ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25) Экспорт
	КомплектСодержащийРСВ_1 = КомплектСодержащийРСВ_1(СсылкаНаСохрРеглОтчет);
	
	Если КомплектСодержащийРСВ_1 = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ВыборкаПоИсходнымПачкам = СформироватьЗапросПоИсходнымПачкам2014(КомплектСодержащийРСВ_1).Выбрать();
	
	ВыборкаПоКорректирующимПачкам = СформироватьЗапросПоКорректирующимПачкам2014(КомплектСодержащийРСВ_1).Выбрать();
		
	Пока ВыборкаПоИсходнымПачкам.Следующий() Цикл
		СтрокаРаздела_2_5_1 = ДанныеРаздела25.Таблица_2_5_1.Добавить();
		
		СтрокаРаздела_2_5_1.П000251000102 = ВыборкаПоИсходнымПачкам.ОблагаетсяВзносамиДоПредельнойВеличины;
		СтрокаРаздела_2_5_1.П000251000103 = ВыборкаПоИсходнымПачкам.НачисленоСтраховая;
		СтрокаРаздела_2_5_1.П000251000104 = ВыборкаПоИсходнымПачкам.КоличествоЗЛ;
		СтрокаРаздела_2_5_1.П000251000105 = ВыборкаПоИсходнымПачкам.ИмяФайлаДляПФР;
	КонецЦикла;	
	
	Пока ВыборкаПоКорректирующимПачкам.Следующий() Цикл
		СтрокаРаздела_2_5_2 = ДанныеРаздела25.Таблица_2_5_2.Добавить();
		
		СтрокаРаздела_2_5_2.П000252000102 = ПерсонифицированныйУчет.ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоКорректирующимПачкам.КорректируемыйПериод).Квартал;
		СтрокаРаздела_2_5_2.П000252000103 =  ВыборкаПоКорректирующимПачкам.КорректируемыйГод;
		СтрокаРаздела_2_5_2.П000252000104 = ВыборкаПоКорректирующимПачкам.ДоначисленоНаОПС;
		СтрокаРаздела_2_5_2.П000252000105 = ВыборкаПоКорректирующимПачкам.ДоначисленоСтраховая;
		СтрокаРаздела_2_5_2.П000252000106 = ВыборкаПоКорректирующимПачкам.ДоначисленоНакопительная;
		СтрокаРаздела_2_5_2.П000252000107 = ВыборкаПоКорректирующимПачкам.КоличествоЗЛ;
		СтрокаРаздела_2_5_2.П000252000108 = ВыборкаПоКорректирующимПачкам.ИмяФайлаДляПФР;
	КонецЦикла;	
	
КонецПроцедуры

Функция ОбъединитьТабличныеДокументы(ПечатаемыеОбъекты) Экспорт
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Для Каждого ПечатаемыйОбъект Из ПечатаемыеОбъекты Цикл
		ДокументРезультат.Вывести(ПечатаемыйОбъект.ТабличныйДокумент);
	КонецЦикла;	
	
	Возврат ДокументРезультат;
КонецФункции	

Процедура ДобавитьТабличныйДокументВКоллекциюПечатаемыхОбъектов(КоллекцияПечатаемыхОбъектов, ТабличныйДокумент, ОписаниеПечатаемогоОбъекта = Неопределено) Экспорт
	ПечатаемыйОбъект = РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1();
	
	Если ТипЗнч(ОписаниеПечатаемогоОбъекта) = Тип("Строка") Тогда
		ПечатаемыйОбъект.Описание = ОписаниеПечатаемогоОбъекта;
	Иначе	
		ПечатаемыйОбъект.Описание = ТекстОписанияДокументаРаздела6(ОписаниеПечатаемогоОбъекта);
		
		Если ОписаниеПечатаемогоОбъекта <> Неопределено Тогда
			ПечатаемыйОбъект.Идентификатор = ОписаниеПечатаемогоОбъекта.Ссылка;
		КонецЕсли;	
	КонецЕсли;	

	ПечатаемыйОбъект.ТабличныйДокумент = ТабличныйДокумент;
		
	КоллекцияПечатаемыхОбъектов.Добавить(ПечатаемыйОбъект);	
КонецПроцедуры	

Функция ТекстОписанияДокументаРаздела6(ОписаниеПечатаемогоОбъекта)
		
	ТекстОписания = "";
	
	Если ОписаниеПечатаемогоОбъекта <> Неопределено Тогда 
		Если ТипЗнч(ОписаниеПечатаемогоОбъекта.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда
			ТекстОписания = НСтр("ru = 'Форма СЗВ-6-1'");		
		ИначеЕсли ТипЗнч(ОписаниеПечатаемогоОбъекта.Ссылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			ТекстОписания = НСтр("ru = 'Форма СЗВ-6-2'");	
		ИначеЕсли ТипЗнч(ОписаниеПечатаемогоОбъекта.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
			ТекстОписания = НСтр("ru = 'Форма СЗВ-6-4'");	
		ИначеЕсли ТипЗнч(ОписаниеПечатаемогоОбъекта.Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
			ТекстОписания = НСтр("ru = 'Пачка разделов 6'");	
		КонецЕсли;	
		
		ТекстОписания = ТекстОписания + " №" + Формат(ОписаниеПечатаемогоОбъекта.НомерПачки, "ЧГ=");
		
		Если ОписаниеПечатаемогоОбъекта.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			ТекстОписания = ТекстОписания + " (ИСХ.)";
		ИначеЕсли ОписаниеПечатаемогоОбъекта.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
			ТекстОписания = ТекстОписания + " (КОРР.)";
		ИначеЕсли ОписаниеПечатаемогоОбъекта.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
			ТекстОписания = ТекстОписания + " (ОТМ.)";
		КонецЕсли;	
	
	КонецЕсли;	
	
	Возврат ТекстОписания;
КонецФункции	

Функция ПараметрыФормированияПечатныхФормКомплекта() Экспорт
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ФормироватьПечатныеФормыРаздел25", Ложь);
	ПараметрыФормирования.Вставить("ФормироватьСтруктуруРаздел25", Ложь);
	ПараметрыФормирования.Вставить("ФормироватьСтруктуруРаздел6", Ложь);
	ПараметрыФормирования.Вставить("ФормироватьПечатныеФормыРаздел6", Ложь);
	ПараметрыФормирования.Вставить("ПечатаемыеДокументы");

	Возврат ПараметрыФормирования;		
КонецФункции	

Функция ПечатныеФормыКомплекта2014Года(Ссылка, ПараметрыФормированияПечатныхФорм, НумероватьСтраницы = Истина, НомерПервойСтраницыРаздела25 = 0, НомерПоследнейСтраницыРаздела25 = 1, НомерПервойСтраницыРаздела6 = 0, ОбщееКоличествоСтраницРаздела6 = 0) Экспорт
	ПечатныеФормыКомплекта = Новый Структура("Раздел25, Раздел6");
	
	ДокументыКомплекта = ДокументыСЗВ6Комплекта(Ссылка);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(РегламентированныйОтчет.ДатаПодписи, &ТекущаяДата) КАК ДатаПодписи
		|ИЗ
		|	Справочник.КомплектыОтчетностиПерсучета КАК КомплектыОтчетностиПерсучета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|		ПО КомплектыОтчетностиПерсучета.РСВ_1 = РегламентированныйОтчет.Ссылка
		|ГДЕ
		|	КомплектыОтчетностиПерсучета.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДатаПодписи = Выборка.ДатаПодписи;
		Иначе
			ДатаПодписи = ТекущаяДатаСеанса();
		КонецЕсли;	
	Иначе
		ДатаПодписи = ТекущаяДатаСеанса();	
	КонецЕсли;	
	
	Если ПараметрыФормированияПечатныхФорм.ФормироватьПечатныеФормыРаздел25 Тогда
		ПечатныеФормыКомплекта.Раздел25 = Раздел25РасчетаРСВ1(Ссылка, ДатаПодписи, НумероватьСтраницы, НомерПервойСтраницыРаздела25, НомерПоследнейСтраницыРаздела25);
	ИначеЕсли ПараметрыФормированияПечатныхФорм.ФормироватьСтруктуруРаздел25 Тогда 
		СтруктураРаздела25 = Новый Массив;
		
		ДобавитьТабличныйДокументВКоллекциюПечатаемыхОбъектов(СтруктураРаздела25, Неопределено, "Раздел 2.5");
		
		ПечатныеФормыКомплекта.Раздел25 = СтруктураРаздела25;
	КонецЕсли;	
		
	Если ПараметрыФормированияПечатныхФорм.ФормироватьСтруктуруРаздел6 Тогда 
		ПечатаемыеДокументы = ДокументыКомплекта;
	Иначе
		ПечатаемыеДокументы = ПараметрыФормированияПечатныхФорм.ПечатаемыеДокументы;	
	КонецЕсли;	
	
	ОписаниеДокументовРаздела6 = ОписаниеДокументовРаздела6(ПечатаемыеДокументы);
	
	Если ПараметрыФормированияПечатныхФорм.ФормироватьПечатныеФормыРаздел6 Тогда
		ДокументыРаздела6 = Новый Соответствие;
		
		ПечатныеФормыСЗВ61 = Документы.ПачкаДокументовСЗВ_6_1.ТабличныеДокументыФормСЗВ_6_1(ПечатаемыеДокументы, , Истина, ДатаПодписи);
		
		Для Каждого ПечатнаяФорма Из ПечатныеФормыСЗВ61 Цикл
			ДокументыРаздела6.Вставить(ПечатнаяФорма.Идентификатор, ПечатнаяФорма.ТабличныйДокумент);
		КонецЦикла;	
			
		ПечатныеФормыСЗВ62 = Документы.РеестрСЗВ_6_2.ТабличныеДокументыФормСЗВ_6_2(ПечатаемыеДокументы, , ДатаПодписи);
		
		Для Каждого ПечатнаяФорма Из ПечатныеФормыСЗВ62 Цикл
			ДокументыРаздела6.Вставить(ПечатнаяФорма.Идентификатор, ПечатнаяФорма.ТабличныйДокумент);
		КонецЦикла;	
		
		ПечатныеФормыСЗВ64 = Документы.ПачкаДокументовСЗВ_6_4.ТабличныеДокументыФормыСЗВ_6_4(ПечатаемыеДокументы, , Истина, ДатаПодписи);
		
		Для Каждого ПечатнаяФорма Из ПечатныеФормыСЗВ64 Цикл
			ДокументыРаздела6.Вставить(ПечатнаяФорма.Идентификатор, ПечатнаяФорма.ТабличныйДокумент);
		КонецЦикла;	

		НомерПоследнейСтраницыРаздела6 = 0;
		
		НомерПервойСтраницы = НомерПервойСтраницыРаздела6 + (НомерПоследнейСтраницыРаздела25 - НомерПервойСтраницыРаздела25 + 1);
	 
		ПечатныеФормыРаздела6 = Документы.ПачкаРазделов6РасчетаРСВ_1.ТабличныеДокументыРаздела6РСВ_1(
									ПечатаемыеДокументы, 
									ДокументыКомплекта, ,
									НумероватьСтраницы, 
									НомерПервойСтраницы, 
									НомерПоследнейСтраницыРаздела6, 
									ДатаПодписи);
		
		Для Каждого ПечатнаяФорма Из ПечатныеФормыРаздела6 Цикл
			ДокументыРаздела6.Вставить(ПечатнаяФорма.Идентификатор, ПечатнаяФорма.ТабличныйДокумент);
		КонецЦикла;	
		
		Для Каждого ОписаниеДокументаРаздела6 Из ОписаниеДокументовРаздела6 Цикл
			ОписаниеДокументаРаздела6.ТабличныйДокумент = ДокументыРаздела6[ОписаниеДокументаРаздела6.Идентификатор];
		КонецЦикла;	
			
		ОбщееКоличествоСтраницРаздела6 = НомерПоследнейСтраницыРаздела6 - НомерПервойСтраницы + 1 + ОбщееКоличествоСтраницКорректирующихФормСЗВ(ДокументыКомплекта);

	КонецЕсли;	
	
	ПечатныеФормыКомплекта.Раздел6 = ОписаниеДокументовРаздела6;
		
	Возврат ПечатныеФормыКомплекта; 	
КонецФункции	

Функция ОписаниеДокументовРаздела6(ДокументыРаздела6)
	ПорядокСортировки = ПорядокСортировкиПачекКомплекта(ДокументыРаздела6, Истина);	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыРаздела6", ДокументыРаздела6);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_1.Ссылка,
	|	ПачкаДокументовСЗВ_6_1.ТипСведенийСЗВ,
	|	ПачкаДокументовСЗВ_6_1.НомерПачки
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1 КАК ПачкаДокументовСЗВ_6_1
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_1.Ссылка В(&ДокументыРаздела6)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4.Ссылка,
	|	ПачкаДокументовСЗВ_6_4.ТипСведенийСЗВ,
	|	ПачкаДокументовСЗВ_6_4.НомерПачки
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4 КАК ПачкаДокументовСЗВ_6_4
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4.Ссылка В(&ДокументыРаздела6)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1.Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1.ТипСведенийСЗВ,
	|	ПачкаРазделов6РасчетаРСВ_1.НомерПачки
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1 КАК ПачкаРазделов6РасчетаРСВ_1
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1.Ссылка В(&ДокументыРаздела6)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрСЗВ_6_2.Ссылка,
	|	РеестрСЗВ_6_2.ТипСведенийСЗВ,
	|	РеестрСЗВ_6_2.НомерПачки
	|ИЗ
	|	Документ.РеестрСЗВ_6_2 КАК РеестрСЗВ_6_2
	|ГДЕ
	|	РеестрСЗВ_6_2.Ссылка В(&ДокументыРаздела6)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		ОписаниеРаздела6 = Новый Массив;
	Иначе	
		ОписаниеРаздела6 = Новый Массив(ПорядокСортировки.Количество());
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ТекстОписания = ТекстОписанияДокументаРаздела6(Выборка);
		
		ОписаниеДокумента = РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1();
		ОписаниеДокумента.Идентификатор = Выборка.Ссылка;
		ОписаниеДокумента.Описание = ТекстОписания;
			
		Индекс = ПорядокСортировки.Найти(Выборка.Ссылка);
		
		ОписаниеРаздела6[Индекс] = ОписаниеДокумента;
	КонецЦикла;
	
	Возврат ОписаниеРаздела6;
	
КонецФункции	

Функция Раздел25РасчетаРСВ1(Ссылка, ДатаПодписи, НумероватьСтраницы = Истина, НомерПервойСтраницы = 1, НомерПоследнейСтраницы = 0) Экспорт
	
	Результат = Новый Массив;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке2014(Ссылка).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	Макет = ПолучитьМакет(?(ВыборкаПоШапкеДокумента.ОтчетныйПериод < '20150401', "ФормаРаздел25", "ФормаРаздел25_2015"));
		
	ОбластьВерхнийКолонтитул	= Макет.ПолучитьОбласть("ВерхнийКолонтитул");
	ОбластьНижнийКолонтитул		= Макет.ПолучитьОбласть("НижнийКолонтитул");
	ОбластьПустаяСтрока	= Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьИсходныеПачкиНачало = Макет.ПолучитьОбласть("ИсходныеПачкиНачало");
	ОбластьИсходныеПачкиИтого = Макет.ПолучитьОбласть("ИсходныеПачкиИтого");
	ОбластьИсходныеПачкиСтрока = Макет.ПолучитьОбласть("ИсходныеПачкиСтрока");
	ОбластьКорректирующиеПачкиНачало = Макет.ПолучитьОбласть("КорректирующиеПачкиНачало");
	ОбластьКорректирующиеПачкиИтого = Макет.ПолучитьОбласть("КорректирующиеПачкиИтого");
	ОбластьКорректирующиеПачкиСтрока = Макет.ПолучитьОбласть("КорректирующиеПачкиСтрока");
	
	ТекущийНомерСтраницы = НомерПервойСтраницы;
	ОтчетныйГод = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);

	РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР," ","");
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьВерхнийКолонтитул, "НомРег", 12);
	ОбластьНижнийКолонтитул.Параметры.ДатаПодписиПолная = Формат(ДатаПодписи, "ДФ=dd.MM.yyyy; ДП=' '");
	
	ПерсонифицированныйУчет.ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, ТекущийНомерСтраницы, ОбластьВерхнийКолонтитул);
		
	ДокументРезультат = НовыйЛистРаздела25(НумероватьСтраницы, ТекущийНомерСтраницы, НомерПервойСтраницы, ОбластьВерхнийКолонтитул);
	
	ДобавитьТабличныйДокументВКоллекциюПечатаемыхОбъектов(Результат, ДокументРезультат, "Раздел 2.5");
		
	ДокументРезультат.Вывести(ОбластьИсходныеПачкиНачало);
	
	Если ВыборкаПоШапкеДокумента.КолЗЛИсходных = 0 Тогда
		Для Сч = 1 По 6 Цикл
			ДокументРезультат.Вывести(ОбластьИсходныеПачкиСтрока);
		КонецЦикла; 
	Иначе
		
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьИсходныеПачкиСтрока);
		ВыводимыеОбласти.Добавить(ОбластьИсходныеПачкиИтого);
		ВыводимыеОбласти.Добавить(ОбластьНижнийКолонтитул);
		
		ОбластьИсходныеПачкиИтого.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ВыборкаПоПачкам = СформироватьЗапросПоИсходнымПачкам2014(Ссылка).Выбрать();
		НомерПП = 1;
		Пока ВыборкаПоПачкам.Следующий() Цикл
			ОбластьИсходныеПачкиСтрока.Параметры.Заполнить(ВыборкаПоПачкам);
			ОбластьИсходныеПачкиСтрока.Параметры.НомерПП = НомерПП;
			ОбластьИсходныеПачкиСтрока.Параметры.ИмяФайла = ВыборкаПоПачкам.ИмяФайлаДляПФР;
			Если Не ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Тогда
				ДокументРезультат.Вывести(ОбластьПустаяСтрока);
				ДокументРезультат.Вывести(ОбластьНижнийКолонтитул);
				ДокументРезультат = НовыйЛистРаздела25(НумероватьСтраницы, ТекущийНомерСтраницы, НомерПервойСтраницы, ОбластьВерхнийКолонтитул);
				ДобавитьТабличныйДокументВКоллекциюПечатаемыхОбъектов(Результат, ДокументРезультат, "Раздел 2.5");
				
				ДокументРезультат.Вывести(ОбластьИсходныеПачкиНачало);
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьИсходныеПачкиСтрока);
			НомерПП = НомерПП + 1;
		КонецЦикла;
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьИсходныеПачкиИтого);
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьКорректирующиеПачкиНачало);
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
	ВыводимыеОбласти.Добавить(ОбластьКорректирующиеПачкиИтого);
	ВыводимыеОбласти.Добавить(ОбластьНижнийКолонтитул);
	
	Если Не ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Тогда
		ДокументРезультат.Вывести(ОбластьПустаяСтрока);
		ДокументРезультат.Вывести(ОбластьНижнийКолонтитул);
		ДокументРезультат = НовыйЛистРаздела25(НумероватьСтраницы, ТекущийНомерСтраницы, НомерПервойСтраницы, ОбластьВерхнийКолонтитул);
		ДобавитьТабличныйДокументВКоллекциюПечатаемыхОбъектов(Результат, ДокументРезультат, "Раздел 2.5");
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиНачало);
	
	Если ВыборкаПоШапкеДокумента.КолЗЛКорректирующих = 0 Тогда
		
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьКорректирующиеПачкиСтрока);
		ВыводимыеОбласти.Добавить(ОбластьКорректирующиеПачкиИтого);
		ВыводимыеОбласти.Добавить(ОбластьНижнийКолонтитул);
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		
		Для Сч = 1 По 4 Цикл
			ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиСтрока);
			Если Не ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьКорректирующиеПачкиСтрока);
		ВыводимыеОбласти.Добавить(ОбластьКорректирующиеПачкиИтого);
		ВыводимыеОбласти.Добавить(ОбластьНижнийКолонтитул);
		
		ОбластьКорректирующиеПачкиИтого.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ВыборкаПоПачкам = СформироватьЗапросПоКорректирующимПачкам2014(Ссылка).Выбрать();
		НомерПП = 1;
		Пока ВыборкаПоПачкам.Следующий() Цикл
			ОбластьКорректирующиеПачкиСтрока.Параметры.Заполнить(ВыборкаПоПачкам);   
			ОбластьКорректирующиеПачкиСтрока.Параметры.НомерПП = НомерПП;
			ОбластьКорректирующиеПачкиСтрока.Параметры.КодКорректируемогоПериода = ПерсонифицированныйУчет.КодПериодаДляРасчетаРСВ1(ВыборкаПоПачкам.КорректируемыйПериод);
			ОбластьКорректирующиеПачкиСтрока.Параметры.ИмяФайла = ВыборкаПоПачкам.ИмяФайлаДляПФР;
			Если Не ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Тогда
				ДокументРезультат.Вывести(ОбластьПустаяСтрока);
				ДокументРезультат.Вывести(ОбластьНижнийКолонтитул);
				ДокументРезультат = НовыйЛистРаздела25( НумероватьСтраницы, ТекущийНомерСтраницы, НомерПервойСтраницы, ОбластьВерхнийКолонтитул);
				ДобавитьТабличныйДокументВКоллекциюПечатаемыхОбъектов(Результат, ДокументРезультат, "Раздел 2.5");
				ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиНачало);
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиСтрока);
			НомерПП = НомерПП + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиИтого);
	
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
	ВыводимыеОбласти.Добавить(ОбластьНижнийКолонтитул);
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
	
	Пока ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Цикл
		ДокументРезультат.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	ДокументРезультат.Вывести(ОбластьНижнийКолонтитул);
	
	НомерПоследнейСтраницы = ТекущийНомерСтраницы - 1;
	
	Возврат Результат;
КонецФункции

Функция ПустойРаздел25РасчетаРСВ1(Организация, ДатаПодписи, НумероватьСтраницы = Истина, НомерСтраницы = 1, ОтчетныйПериод = '20150101') Экспорт

	Макет = ПолучитьМакет(?(ОтчетныйПериод < '20150401', "ФормаРаздел25", "ФормаРаздел25_2015"));
	
	ОбластьВерхнийКолонтитул	= Макет.ПолучитьОбласть("ВерхнийКолонтитул");
	ОбластьНижнийКолонтитул		= Макет.ПолучитьОбласть("НижнийКолонтитул");
	ОбластьПустаяСтрока	= Макет.ПолучитьОбласть("ПустаяСтрока");
	ОбластьИсходныеПачкиНачало = Макет.ПолучитьОбласть("ИсходныеПачкиНачало");
	ОбластьИсходныеПачкиИтого = Макет.ПолучитьОбласть("ИсходныеПачкиИтого");
	ОбластьИсходныеПачкиСтрока = Макет.ПолучитьОбласть("ИсходныеПачкиСтрока");
	ОбластьКорректирующиеПачкиНачало = Макет.ПолучитьОбласть("КорректирующиеПачкиНачало");
	ОбластьКорректирующиеПачкиИтого = Макет.ПолучитьОбласть("КорректирующиеПачкиИтого");
	ОбластьКорректирующиеПачкиСтрока = Макет.ПолучитьОбласть("КорректирующиеПачкиСтрока");

	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
	ВыводимыеОбласти.Добавить(ОбластьНижнийКолонтитул);
	ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Раздел25РасчетаРСВ_1";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	РегистрационныйНомерПФР = ПерсонифицированныйУчет.РегистрационныйНомерПФР(Организация, ДатаПодписи);
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерПФР) Тогда
		РегистрационныйНомерПФР = "";
	КонецЕсли;	
	
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР," ","");
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
	ПерсонифицированныйУчет.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьВерхнийКолонтитул, "НомРег", 12);
	ПерсонифицированныйУчет.ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, НомерСтраницы, ОбластьВерхнийКолонтитул);
	ОбластьНижнийКолонтитул.Параметры.ДатаПодписиПолная = Формат(ДатаПодписи, "ДФ=dd.MM.yyyy; ДП=' '");
	
	ДокументРезультат.Вывести(ОбластьВерхнийКолонтитул);
	ДокументРезультат.Вывести(ОбластьИсходныеПачкиНачало);
	Для Сч = 1 По 6 Цикл
		ДокументРезультат.Вывести(ОбластьИсходныеПачкиСтрока);
	КонецЦикла; 
	ДокументРезультат.Вывести(ОбластьИсходныеПачкиИтого);
	ДокументРезультат.Вывести(ОбластьПустаяСтрока);
	ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиНачало);
	Для Сч = 1 По 4 Цикл
		ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиСтрока);
	КонецЦикла; 
	ДокументРезультат.Вывести(ОбластьКорректирующиеПачкиИтого);
	Пока ДокументРезультат.ПроверитьВывод(ВыводимыеОбласти) Цикл
		ДокументРезультат.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	ДокументРезультат.Вывести(ОбластьНижнийКолонтитул);
	
	Возврат ДокументРезультат
	
КонецФункции 

Функция НовыйЛистРаздела25(НумероватьСтраницы, ТекущийНомерСтраницы, НомерПервойСтраницы, ОбластьВерхнийКолонтитул)

	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Раздел25РасчетаРСВ_1";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
	ПерсонифицированныйУчет.ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, ТекущийНомерСтраницы, ОбластьВерхнийКолонтитул);
	ДокументРезультат.Вывести(ОбластьВерхнийКолонтитул);
	ТекущийНомерСтраницы = ТекущийНомерСтраницы + 1;
	
	Возврат ДокументРезультат

КонецФункции

Функция СформироватьЗапросПоШапке2014(Ссылка) Экспорт 
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Организация,ОтчетныйПериод");
	
	РегНомер = ПерсонифицированныйУчет.РегистрационныйНомерПФР(ЗначенияРеквизитов.Организация, ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ЗначенияРеквизитов.ОтчетныйПериод));	
	
	Если Не ЗначениеЗаполнено(РегНомер) Тогда
		РегНомер = "";
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегНомер", РегНомер);
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пачки.ПачкаДокументов КАК ДокументПачка
	|ПОМЕСТИТЬ ВТПачки
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета.СписокПачекСЗВ КАК Пачки
	|ГДЕ
	|	Пачки.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеПачек.КоличествоИсходных) КАК КоличествоИсходных,
	|	СУММА(ДанныеПачек.КоличествоКорректирующих) КАК КоличествоКорректирующих,
	|	СУММА(ДанныеПачек.НачисленоСтраховаяИсходных) КАК НачисленоСтраховая,
	|	СУММА(ДанныеПачек.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(ДанныеПачек.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	СУММА(ДанныеПачек.ДоначисленоНаОПС) КАК ДоначисленоНаОПС
	|ПОМЕСТИТЬ ВТКоличествоФизлиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФормыСЗВ_6_1.Сотрудник КАК КоличествоФизлиц,
	|		0 КАК КоличествоИсходных,
	|		1 КАК КоличествоКорректирующих,
	|		0 КАК НачисленоСтраховаяИсходных,
	|		ФормыСЗВ_6_1.ДоначисленоСтраховая КАК ДоначисленоСтраховая,
	|		ФормыСЗВ_6_1.ДоначисленоНакопительная КАК ДоначисленоНакопительная,
	|		0 КАК ДоначисленоНаОПС
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ФормыСЗВ_6_1
	|	ГДЕ
	|		ФормыСЗВ_6_1.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)
	|		И ФормыСЗВ_6_1.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФормыСЗВ_6_2.Сотрудник,
	|		0,
	|		1,
	|		0,
	|		ФормыСЗВ_6_2.ДоначисленоСтраховая,
	|		ФормыСЗВ_6_2.ДоначисленоНакопительная,
	|		0
	|	ИЗ
	|		Документ.РеестрСЗВ_6_2.Сотрудники КАК ФормыСЗВ_6_2
	|	ГДЕ
	|		ФормыСЗВ_6_2.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)
	|		И ФормыСЗВ_6_2.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФормыСЗВ_6_4.Сотрудник,
	|		0,
	|		1,
	|		0,
	|		ФормыСЗВ_6_4.ДоначисленоСтраховая,
	|		ФормыСЗВ_6_4.ДоначисленоНакопительная,
	|		0
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ФормыСЗВ_6_4
	|	ГДЕ
	|		ФормыСЗВ_6_4.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)
	|		И ФормыСЗВ_6_4.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Разделы6РасчетаРСВ_1.Сотрудник,
	|		ВЫБОР
	|			КОГДА Разделы6РасчетаРСВ_1.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Разделы6РасчетаРСВ_1.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Разделы6РасчетаРСВ_1.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА Разделы6РасчетаРСВ_1.НачисленоСтраховая
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА Разделы6РасчетаРСВ_1.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА 0
	|			ИНАЧЕ Разделы6РасчетаРСВ_1.ДоначисленоСтраховая
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК Разделы6РасчетаРСВ_1
	|	ГДЕ
	|		Разделы6РасчетаРСВ_1.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)) КАК ДанныеПачек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработке КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка В
	|			(ВЫБРАТЬ
	|				Пачки.ДокументПачка
	|			ИЗ
	|				ВТПачки КАК Пачки)
	|	И ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	И ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Док.Организация,
	|	Док.ОтчетныйПериод КАК ОтчетныйПериод,
	|	&РегНомер КАК ОрганизацияРегистрационныйНомерПФР,
	|	ЕСТЬNULL(ДанныеПоФизлицам.КоличествоИсходных, 0) КАК КолЗЛИсходных,
	|	ЕСТЬNULL(ДанныеПоФизлицам.КоличествоКорректирующих, 0) КАК КолЗЛКорректирующих,
	|	ЕСТЬNULL(ДанныеПоФизлицам.ДоначисленоСтраховая, 0) КАК ДоначисленоСтраховая,
	|	ЕСТЬNULL(ДанныеПоФизлицам.ДоначисленоНакопительная, 0) КАК ДоначисленоНакопительная,
	|	ЕСТЬNULL(ДанныеПоФизлицам.НачисленоСтраховая, 0) КАК НачисленоСтраховая,
	|	ЕСТЬNULL(ДанныеПоФизлицам.ДоначисленоНаОПС, 0) КАК ДоначисленоНаОПС,
	|	ЕСТЬNULL(Доходы.ОблагаетсяВзносамиДоПредельнойВеличины, 0) КАК ОблагаетсяВзносамиДоПредельнойВеличины
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоФизлиц КАК ДанныеПоФизлицам
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходы КАК Доходы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции 

Функция СформироватьЗапросПоИсходнымПачкам2014(Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.ПачкаДокументов КАК ДокументПачка,
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.ПачкаДокументов.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР,
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТПачки
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета.СписокПачекСЗВ КАК ПередачаСЗВ4вПФРПачкиДокументов2014
	|ГДЕ
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка = &Ссылка
	|	И ПередачаСЗВ4вПФРПачкиДокументов2014.ПачкаДокументов.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Сотрудник) КАК КоличествоЗЛ,
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка В
	|			(ВЫБРАТЬ
	|				Пачки.ДокументПачка
	|			ИЗ
	|				ВТПачки КАК Пачки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаРазделов6РасчетаРСВ_1РаботникиОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработке КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка В
	|			(ВЫБРАТЬ
	|				Пачки.ДокументПачка
	|			ИЗ
	|				ВТПачки КАК Пачки)
	|	И ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пачки.НомерСтроки КАК НомерСтроки,
	|	Взносы.КоличествоЗЛ,
	|	Взносы.НачисленоСтраховая,
	|	Доходы.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	Пачки.ИмяФайлаДляПФР
	|ИЗ
	|	ВТПачки КАК Пачки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Взносы
	|		ПО Пачки.ДокументПачка = Взносы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходы КАК Доходы
	|		ПО Пачки.ДокументПачка = Доходы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции 

Функция СформироватьЗапросПоКорректирующимПачкам2014(Ссылка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка" , Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.ПачкаДокументов КАК ДокументПачка,
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.ПачкаДокументов.ИмяФайлаДляПФР,
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТПачки
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсучета.СписокПачекСЗВ КАК ПередачаСЗВ4вПФРПачкиДокументов2014
	|ГДЕ
	|	ПередачаСЗВ4вПФРПачкиДокументов2014.Ссылка = &Ссылка
	|	И ПередачаСЗВ4вПФРПачкиДокументов2014.ПачкаДокументов.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеПачек.КоличествоКорректирующих) КАК КоличествоЗЛ,
	|	СУММА(ДанныеПачек.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(ДанныеПачек.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	СУММА(ДанныеПачек.ДоначисленоНаОПС) КАК ДоначисленоНаОПС,
	|	ДанныеПачек.Ссылка,
	|	ДанныеПачек.КорректируемыйПериод,
	|	ДанныеПачек.НомерПачки
	|ПОМЕСТИТЬ ВТСведенияОПачках
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК КоличествоКорректирующих,
	|		ФормыСЗВ_6_1и2.ДоначисленоСтраховая КАК ДоначисленоСтраховая,
	|		ФормыСЗВ_6_1и2.ДоначисленоНакопительная КАК ДоначисленоНакопительная,
	|		0 КАК ДоначисленоНаОПС,
	|		ФормыСЗВ_6_1и2.Ссылка КАК Ссылка,
	|		ФормыСЗВ_6_1и2.Ссылка.КорректируемыйПериод КАК КорректируемыйПериод,
	|		ФормыСЗВ_6_1и2.Ссылка.НомерПачки КАК НомерПачки
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ФормыСЗВ_6_1и2
	|	ГДЕ
	|		ФормыСЗВ_6_1и2.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		ФормыСЗВ_6_1и2.ДоначисленоСтраховая,
	|		ФормыСЗВ_6_1и2.ДоначисленоНакопительная,
	|		0,
	|		ФормыСЗВ_6_1и2.Ссылка,
	|		ФормыСЗВ_6_1и2.Ссылка.КорректируемыйПериод,
	|		ФормыСЗВ_6_1и2.Ссылка.НомерПачки
	|	ИЗ
	|		Документ.РеестрСЗВ_6_2.Сотрудники КАК ФормыСЗВ_6_1и2
	|	ГДЕ
	|		ФормыСЗВ_6_1и2.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		ФормыСЗВ_6_4.ДоначисленоСтраховая,
	|		ФормыСЗВ_6_4.ДоначисленоНакопительная,
	|		0,
	|		ФормыСЗВ_6_4.Ссылка,
	|		ФормыСЗВ_6_4.Ссылка.КорректируемыйПериод,
	|		ФормыСЗВ_6_4.Ссылка.НомерПачки
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ФормыСЗВ_6_4
	|	ГДЕ
	|		ФормыСЗВ_6_4.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)
	|		И ФормыСЗВ_6_4.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		0,
	|		0,
	|		Разделы6РасчетаРСВ_1.ДоначисленоСтраховая,
	|		Разделы6РасчетаРСВ_1.Ссылка,
	|		Разделы6РасчетаРСВ_1.Ссылка.КорректируемыйПериод,
	|		Разделы6РасчетаРСВ_1.Ссылка.НомерПачки
	|	ИЗ
	|		Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК Разделы6РасчетаРСВ_1
	|	ГДЕ
	|		Разделы6РасчетаРСВ_1.Ссылка В
	|				(ВЫБРАТЬ
	|					Ссылки.ДокументПачка
	|				ИЗ
	|					ВТПачки КАК Ссылки)) КАК ДанныеПачек
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПачек.Ссылка,
	|	ДанныеПачек.КорректируемыйПериод,
	|	ДанныеПачек.НомерПачки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пачки.НомерСтроки КАК НомерСтроки,
	|	ГОД(СведенияОПачках.КорректируемыйПериод) КАК КорректируемыйГод,
	|	СведенияОПачках.КорректируемыйПериод,
	|	СведенияОПачках.КоличествоЗЛ,
	|	СведенияОПачках.ДоначисленоСтраховая,
	|	СведенияОПачках.ДоначисленоНакопительная,
	|	СведенияОПачках.ДоначисленоНаОПС,
	|	Пачки.ПачкаДокументовИмяФайлаДляПФР КАК ИмяФайлаДляПФР
	|ИЗ
	|	ВТПачки КАК Пачки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОПачках КАК СведенияОПачках
	|		ПО Пачки.ДокументПачка = СведенияОПачках.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции 

Функция ОбщееКоличествоСтраницКорректирующихФормСЗВ(ДокументыКомплекта)
	ОбщееКоличествоСтраниц = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", ДокументыКомплекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник) КАК КоличествоЗЛ
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ПачкаДокументовСЗВ_6_4Сотрудники
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПачкаДокументовСЗВ_6_1Сотрудники.Сотрудник)
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ПачкаДокументовСЗВ_6_1Сотрудники
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ОбщееКоличествоСтраниц = ОбщееКоличествоСтраниц + Выборка.КоличествоЗЛ + 1;
	КонецЦикла;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(РеестрСЗВ_6_2Сотрудники.Сотрудник, 0)) КАК КоличествоЗЛ,
	|	РеестрСЗВ_6_2Сотрудники.Ссылка
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК РеестрСЗВ_6_2Сотрудники
	|ГДЕ
	|	РеестрСЗВ_6_2Сотрудники.Ссылка В(&СписокДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрСЗВ_6_2Сотрудники.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если Выборка.КоличествоЗЛ <> 0 Тогда
			ОбщееКоличествоСтраниц = ОбщееКоличествоСтраниц + ?(Выборка.КоличествоЗЛ < 15, 1, Окр((Выборка.КоличествоЗЛ - 14) / 14, 0));
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат  ОбщееКоличествоСтраниц;
КонецФункции	

#КонецОбласти

#КонецЕсли

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы = "ФормаОбъекта" Тогда
		Ссылка = Неопределено;
		Параметры.Свойство("Ключ", Ссылка);
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.Форма";
			Параметры.Вставить("Комплект", Ссылка);
			Параметры.Удалить("Ключ");
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

