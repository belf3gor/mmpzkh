
#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервереБезКонтекста
// Функция возвращает имя объекта по ссылке.
Функция ПолучитьНаименованиеОбъектаМетаданныхПоСсылке(Ссылка)
	
	Возврат Ссылка.Метаданные().Имя;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает уровень объекта в иерархии.
Функция ПолучитьУровеньОбъекта(Ссылка)
	
	Если Ссылка.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	Попытка
		Возврат Ссылка.Уровень();
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает доступные типы помещений на сервере.
Функция ПолучитьДоступныеТипыПомещенийНаСервере(Знач Объект)
	
	Возврат Справочники.УПЖКХ_Помещения.ПолучитьДоступныеТипыПомещенияДляОбъекта(Объект);
	
КонецФункции

&НаКлиенте
// Производится открытие формы элемента либо формы выбора справочника "Виды помещений" с определенными отборами 
// зависимости от передаваемого имени формы.
//
// Параметры:
//  ИмяФормы  - Строка - Имя открываемой формы.
//
Процедура ОткрытьФормуСправочникаВидыПомещений(ИмяФормы)
	
	Если Не ТипЗнч(ИмяФормы) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТипыПомещений = ПолучитьДоступныеТипыПомещенийНаСервере(Объект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить(?(ИмяФормы = "ФормаЭлемента", "Ключ", "ТекущаяСтрока"), Объект.ВидПомещения);
	
	Если ИмяФормы = "ФормаЭлемента" Тогда
		
		// Создание и заполнение отбора компоновки данных, содержащего доступные типы помещений
		// для последующего вывода этих типов в поле "Типы помещений" формы элемента справочника
		// "Виды помещений".
		СписокОтборов = Новый ОтборКомпоновкиДанных;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(СписокОтборов, "ТипПомещения",
																ТипыПомещений, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
		
		ПараметрыОткрытия.Вставить("СписокОтборов", СписокОтборов);
		
		ОткрытьФорму("Справочник.УПЖКХ_ВидыПомещений.Форма." + ИмяФормы, ПараметрыОткрытия, Элементы.ВидПомещения);
		
	ИначеЕсли ИмяФормы = "ФормаВыбора" Тогда
		
		// Для формы выбора алгоритм несколько другой: сначала получаем форму выбора с отбором по текущему виду помещения.
		// Затем накладываем отбор на список в полученной форме и открываем форму.
		ФормаВыбораОбъекта = ПолучитьФорму("Справочник.УПЖКХ_ВидыПомещений." + ИмяФормы, ПараметрыОткрытия, Элементы.ВидПомещения);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбораОбъекта.Список.Отбор, "ТипПомещения",
																ТипыПомещений, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
		
		ФормаВыбораОбъекта.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуСправочникаВидыПомещений()

&НаСервереБезКонтекста
// Проверяет, существуют помещения для указанного владельца.
Функция ПроверитьСушествованиеПомещений(Родитель, ТекущееЗдание, ТекущееПомещение)
	
	ЕстьДругиеПомещенияВДоме = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Родитель) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Помещения.Ссылка
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|ГДЕ
		|	УПЖКХ_Помещения.Владелец = &ТекущееЗдание
		|	И НЕ УПЖКХ_Помещения.Ссылка = &ТекущееПомещение
		|	И УПЖКХ_Помещения.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)";
		
		Запрос.УстановитьПараметр("ТекущееЗдание",    ТекущееЗдание);
		Запрос.УстановитьПараметр("ТекущееПомещение", ТекущееПомещение);
		
		ВыборкаКвартир = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаКвартир.Следующий() Тогда
			ЕстьДругиеПомещенияВДоме = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьДругиеПомещенияВДоме;
	
КонецФункции  //ПроверитьСушествованиеПомещений()

&НаСервереБезКонтекста
// Функция возвращает вид помещения по типу помещения.
//
Функция ПолучитьВидПомещенияПоТипуПомещенияНаСервере(ТипПомещения)
	
	Возврат ПолучитьВидПомещенияПоТипуПомещения(ТипПомещения);
	
КонецФункции

&НаСервере
// Обновляет подъезд на найденный для указанного здания и номера помещения.
Процедура ОбновитьПодъездПоНомеруПомещения()

	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		УПЖКХ_ОбщегоНазначенияСервер.УстановитьНовоеЗначение(Объект.Подъезд,
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Родитель, "Подъезд"));
	Иначе

		НовоеЗначение = Справочники.КВП_Подъезды.ПустаяСсылка();

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_Подъезды.Ссылка КАК Подъезд
		|ИЗ
		|	Справочник.КВП_Подъезды КАК КВП_Подъезды
		|ГДЕ
		|	КВП_Подъезды.Владелец = &Здание
		|	И КВП_Подъезды.НомерПервойКвартиры <= &НомерПомещения
		|	И КВП_Подъезды.НомерПоследнейКвартиры >= &НомерПомещения
		|	И КВП_Подъезды.ПометкаУдаления = ЛОЖЬ";

		Запрос.УстановитьПараметр("Здание",         Объект.Владелец);
		Запрос.УстановитьПараметр("НомерПомещения", Объект.Код);
		ВыборкаПодъездов = Запрос.Выполнить().Выбрать();

		Если ВыборкаПодъездов.Следующий() Тогда
			НовоеЗначение = ВыборкаПодъездов.Подъезд;
		КонецЕсли;

		УПЖКХ_ОбщегоНазначенияСервер.УстановитьНовоеЗначение(Объект.Подъезд, НовоеЗначение);

	КонецЕсли;

КонецПроцедуры //ОбновитьПодъездПоНомеруПомещения()

&НаСервере
// Обновляет информацию о виде собственности и о собственниках помещения.
Процедура ОбновитьДанныеОСобственности()
	
	Собственники.Загрузить(ПолучитьДанныеОСобственностиПомещения(Объект.Ссылка));
	Для Каждого ТекСтр Из Собственники Цикл
		ТекСтр.Доля = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтр.ДоляСобственникаЧислитель,
																					ТекСтр.ДоляСобственникаЗнаменатель);
	КонецЦикла;
	
	Если Собственники.Количество() > 0 Тогда
		ВидСобственности = Собственники[0].ВидСобственности;
	КонецЕсли;
	
	//Собственники.Очистить();
	//Для Каждого ТекСтр Из ДанныеОСобственности Цикл
	//	СтрТаб = Собственники.Добавить();
	//	СтрТаб.Собственник                 = ТекСтр.Собственник;
	//	СтрТаб.ДоляСобственникаЧислитель   = ТекСтр.ДоляСобственникаЧислитель;
	//	СтрТаб.ДоляСобственникаЗнаменатель = ТекСтр.ДоляСобственникаЗнаменатель;
	//	СтрТаб.Доля                        = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтр.ДоляСобственникаЧислитель, ТекСтр.ДоляСобственникаЗнаменатель)
	//КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает суммарную долю собственников.
Функция ПолучитьСуммарнуюДолюСобственников(Знач Собственники)
	
	Возврат Собственники.Выгрузить().Итог("ДоляСобственникаЧислитель");
	
КонецФункции

&НаСервере
// Копирует записи регистров по основанию.
//
// Параметры:
//  ОбъектКопирования - элемент справочника квартиры, c которого копируются данные.
//
Процедура СкопироватьЗаписиРегистров(ОбъектКопирования)

	// Копирование записей регистра состояния квартиры.
	НаборЗаписейИсточник = РегистрыСведений.КВП_СостояниеПомещения.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.Объект.Установить(ОбъектКопирования);
	НаборЗаписейИсточник.Прочитать();

	Если Не НаборЗаписейИсточник.Количество() = 0 Тогда
		ТаблицаЗаписей = НаборЗаписейИсточник.Выгрузить();
		ТаблицаЗаписей.ЗаполнитьЗначения(Объект.Ссылка, "Объект");

		НаборЗаписейПриемник = РегистрыСведений.КВП_СостояниеПомещения.СоздатьНаборЗаписей();
		НаборЗаписейПриемник.Отбор.Объект.Установить(Объект.Ссылка);
		НаборЗаписейПриемник.Загрузить(ТаблицаЗаписей);

		НаборЗаписейПриемник.Записать();
	КонецЕсли;
	
	// Копирование последних записей регистра площади квартиры.
	ЗапросПлощадейПомещения = Новый Запрос;
	ЗапросПлощадейПомещения.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Период,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь,
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Дата, Объект = &Объект) КАК КВП_ПлощадьПомещенияСрезПоследних";
	
	ЗапросПлощадейПомещения.УстановитьПараметр("Объект", ОбъектКопирования);
	ЗапросПлощадейПомещения.УстановитьПараметр("Дата",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	ТаблицаЗаписей = ЗапросПлощадейПомещения.Выполнить().Выгрузить();
	
	Если Не ТаблицаЗаписей.Количество() = 0 Тогда
		ТаблицаЗаписей.ЗаполнитьЗначения(Объект.Ссылка, "Объект");

		НаборЗаписейПриемник = РегистрыСведений.КВП_ПлощадьПомещения.СоздатьНаборЗаписей();
		НаборЗаписейПриемник.Отбор.Объект.Установить(Объект.Ссылка);
		НаборЗаписейПриемник.Загрузить(ТаблицаЗаписей);

		НаборЗаписейПриемник.Записать();
	КонецЕсли;
	
	// Копирование данных по благоустройству квартиры.
	НаборЗаписейИсточник = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.Объект.Установить(ОбъектКопирования);
	НаборЗаписейИсточник.Прочитать();

	Если Не НаборЗаписейИсточник.Количество() = 0 Тогда
		ТаблицаЗаписей = НаборЗаписейИсточник.Выгрузить();
		ТаблицаЗаписей.ЗаполнитьЗначения(Объект.Ссылка, "Объект");

		НаборЗаписейПриемник = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
		НаборЗаписейПриемник.Отбор.Объект.Установить(Объект.Ссылка);
		НаборЗаписейПриемник.Загрузить(ТаблицаЗаписей);

		НаборЗаписейПриемник.Записать();
	КонецЕсли;
	
	ОбновитьДанныеПоСостоянию();
	ОбновитьТаблицуПлощадейПомещения();
	ЗаполнитьБлагоустройстваПомещения();
	
КонецПроцедуры // СкопироватьЗаписиРегистров()

&НаСервере
// Процедура записывает элемент справочника на сервере.
//
Функция ЗаписатьОбъектНаСервере()
	
	СпрОбъект = РеквизитФормыВЗначение("Объект");
	Записан = КВП_ЗаписатьОбъект(СпрОбъект);
	ЗначениеВРеквизитФормы(СпрОбъект, "Объект");
	
	Возврат Записан;
	
КонецФункции // ЗаписатьОбъектНаСервере()

&НаКлиенте
// Процедура открывает форму списка лицевых счетов с отбором.
//
Процедура ОткрытьФормуСпискаЛС(Элемент)
	
	Если Не СписокЛицевыхСчетов.Количество() = 0 Тогда
		ФормаСпискаЛС = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаСписка");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаСпискаЛС.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокЛицевыхСчетов, ВидСравненияКомпоновкиДанных.ВСписке);
		ФормаСпискаЛС.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		ФормаСпискаЛС.Открыть();
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыОткрытьФормуСпискаЛС()

&НаКлиенте
// Процедура обновляет данные о лицевых счетах.
Процедура ОбновитьДанныеОЛицевыхСчетах(Элемент = Неопределено)
	
	ВывестиТекстОткрыть = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		ВывестиТекстОткрыть = Истина;
	Иначе
		ПолучитьСписокЛС();
		КоличествоЛС = СписокЛицевыхСчетов.Количество();
		Если КоличествоЛС > 0 Тогда
			Если КоличествоЛС = 1 Тогда
				Элементы.ГиперссылкаЛицевыеСчета.Заголовок = Строка(СписокЛицевыхСчетов[0]);
			Иначе
				Элементы.ГиперссылкаЛицевыеСчета.Заголовок = "Список лицевых счетов (" + КоличествоЛС + " шт.)";
			КонецЕсли;
		Иначе
			ВывестиТекстОткрыть = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВывестиТекстОткрыть Тогда
		Элементы.ГиперссылкаЛицевыеСчета.Заголовок = "Открыть лицевой счет";
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеОЛицевыхСчетах()

&НаСервере
// Функция получает список л/с по помещению.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица лицевых счетов, открытых на данном помещении.
//
Процедура ПолучитьСписокЛС()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК СсылкаЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Дата,
	|			Объект = &Помещение
	|				И Действует) КАК КВП_ЛицевыеСчетаСрезПоследних";
	
	Запрос.УстановитьПараметр("Помещение", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата",      КонецДня(ТекущаяДата()));
	
	МассивЛС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаЛС");
	
	СписокЛицевыхСчетов.ЗагрузитьЗначения(МассивЛС);
	
КонецПроцедуры // ПолучитьСписокЛС()

&НаСервере
// Определяет тип здания (МКД или ЖД), которому принадлежит помещение.
Процедура ОпределитьТипЗдания()
	
	НаходитсяВМКД = Объект.Владелец.Многоквартирное;
	ЖилойДомБлокированнойЗастройки = Объект.Владелец.ЖилойДомБлокированнойЗастройки;
	
КонецПроцедуры // ОпределитьТипЗдания()

&НаСервере
// Определяет, является ли текущее помещение комнатой.
Процедура ОпределитьЯвляетсяЛиКомнатой()
	
	ЯвляетсяКомнатой = (Не Объект.Родитель = Справочники.УПЖКХ_Помещения.ПустаяСсылка())
	
КонецПроцедуры // ОпределитьЯвляетсяЛиКомнатой()

////////////////////////////////////////
// Работа с площадями

&НаСервере
// Формирует таблицу площадей помещения.
Процедура ОбновитьТаблицуПлощадейПомещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Период КАК Период,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади КАК ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь,
	|	""История"" КАК История
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, Объект = &Объект) КАК КВП_ПлощадьПомещенияСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	ПлощадиПомещения.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
// Обновляет данные по площадям здания, если это необходимо.
Процедура ОбновитьДанныеПоПлощадямЗдания();
	
	ТаблицаТекущихПлощадейПомещения = ПлощадиПомещения.Выгрузить();
	
	// Выполним проверку необходимости обновления площади здания.
	НеобходимоОбновитьДанныеПоПлощадямЗдания = Справочники.КВП_Здания.ПроверитьИзменениеОбщейПлощади(Объект.Ссылка, ТаблицаТекущихПлощадейПомещения);
	
	// При необходимости обновим площади здания.
	Если НеобходимоОбновитьДанныеПоПлощадямЗдания Тогда
		
		ОповеститьОПерерасчетеПлощадиЗдания = Справочники.КВП_Здания.ОбновитьОбщиеПлощадиЗданияПриНеобходимости(Объект.Владелец);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выводит оповещение пользователю о перерасчете площадей здания.
//
Процедура ОповеститьОПересчетеПлощадейЗдания()
	
	ПоказатьОповещениеПользователя("Выполнен пересчет площадей здания:",
								   ПолучитьНавигационнуюСсылку(Объект.Владелец),
								   Строка(Объект.Владелец),
								   БиблиотекаКартинок.Информация32);
	
	ОповеститьОПерерасчетеПлощадиЗдания = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Возвращает ключ записи регистра "КВП_ПлощадьПомещения" по переданному периоду, объекту и виду площади.
Функция ПолучитьКлюч(Период, Объект, ВидПлощади)
	
	Возврат РегистрыСведений.КВП_ПлощадьПомещения.СоздатьКлючЗаписи(Новый Структура("Период, Объект, ВидПлощади", Период, Объект, ВидПлощади));
	
КонецФункции

////////////////////////////////////////
// Работа с благоустройством

&НаСервере
// Заполняет список благоустройств помещения.
//
// Параметры
//  нет.
//
Процедура ЗаполнитьБлагоустройстваПомещения()
	
	мБлагоустройствоПомещения = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	мБлагоустройствоПомещения.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	мБлагоустройствоПомещения.Прочитать();
	
	БлагоустройствоПомещения.Загрузить(мБлагоустройствоПомещения.Выгрузить());
	
КонецПроцедуры // ЗаполнитьБлагоустройстваПомещения()

&НаСервере
// Записывает благоустройства помещения в регистр.
//
// Параметры
//  нет.
//
Функция ЗаписатьБлагоустройстваПомещения()
	
	ТаблицаЗаписей = БлагоустройствоПомещения.Выгрузить();
	
	НаборЗаписей = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		ТекЗапись.Объект = Объект.Ссылка;
	КонецЦикла;
	
	Возврат КВП_ЗаписатьОбъект(НаборЗаписей);
	
КонецФункции // ЗаписатьБлагоустройстваПомещения()

////////////////////////////////////////
// Работа с состоянием

&НаСервере
// Обновляет сведения о состоянии помещения в элементах формы.
Процедура ОбновитьДанныеПоСостоянию()

	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = РегистрыСведений.КВП_СостояниеПомещения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();

	Если Не НаборЗаписей.Количество() = 0 Тогда
		Состояние         = НаборЗаписей[0].Состояние;
		КатегорияКвартиры = НаборЗаписей[0].КатегорияКвартиры;
	КонецЕсли;

КонецПроцедуры // ОбновитьДанныеПоСостоянию()

&НаСервере
// Записывает данные по состоянию помещения.
Процедура ЗаписатьДанныеПоСостоянию()

	// Записываем данные о состоянии помещения.
	НаборЗаписей = РегистрыСведений.КВП_СостояниеПомещения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Объект.Ссылка);
	Если Не Объект.Ссылка.Пустая()
		И (Не Состояние.Пустая() 
	   ИЛИ Не КатегорияКвартиры.Пустая()) Тогда
		ЗаписьВНаборе = НаборЗаписей.Добавить();
		ЗаписьВНаборе.Объект            = Объект.Ссылка;
		ЗаписьВНаборе.Состояние         = Состояние;
		ЗаписьВНаборе.КатегорияКвартиры = КатегорияКвартиры;
	КонецЕсли;
	НаборЗаписей.Записать();

КонецПроцедуры // ОбновитьДанныеПоСостоянию()

////////////////////////////////
// Работа со установленным
// оборудованием

&НаСервереБезКонтекста
// Функция возвращает ключ записи регистра сведений по структуре ключа.
//
Функция ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча)
	
	Возврат РегистрыСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.СоздатьКлючЗаписи(СтруктураКлюча);
	
КонецФункции

&НаСервере
// Процедура обновляет список связанного оборудования / объектов учета для текущего здания.
Процедура ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()
	
	УстановленноеОборудование.Загрузить(УПЖКХ_УчетОборудованияНаОбъектахУчетаСервер.ПолучитьОборудованиеУстановленноеНаОбъектУчета(Объект.Ссылка));
	
КонецПроцедуры // ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере()

#КонецОбласти

#Область ПроцедурыРаботыСметодамиМодуляОбъекта

&НаСервере
// Процедура устанавливает номер квартиры на сервере.
Процедура УстановитьНомерКвартирыНаСервере();
	
	ПомещениеОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.УПЖКХ_Помещения"));
	ПомещениеОбъект.УстановитьНомерКвартиры();
	ЗначениеВРеквизитФормы(ПомещениеОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает номер квартиры на сервере.
Процедура ОбновитьНаименованиеКвартирыНаСервере();
	
	ПомещениеОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.УПЖКХ_Помещения"));
	ПомещениеОбъект.ОбновитьНаименованиеКвартиры();
	ЗначениеВРеквизитФормы(ПомещениеОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура обновляет актуальность строительного адреса на сервере.
Процедура ОбновитьАктуальностьСтроительногоАдресаНаСервере(ПроверятьЗаполненность = Истина);
	
	ПомещениеОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.УПЖКХ_Помещения"));
	ПомещениеОбъект.ОбновитьАктуальностьСтроительногоАдреса(ПроверятьЗаполненность);
	ЗначениеВРеквизитФормы(ПомещениеОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
// Процедура выполняет проверку заполнения реквизитов при записи.
Функция НельзяЗаписатьЭлементНаСервере()
	
	ПомещениеОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.УПЖКХ_Помещения"));
	Возврат ПомещениеОбъект.НельзяЗаписатьЭлемент();
	
КонецФункции

#КонецОбласти

#Область ПроцедурыУправленияВидимостью

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекущийТипПомещения  = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ВидПомещения, "ТипПомещения");
	ПризнакОтношенияКМОП = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ВидПомещения, "ОтноситсяКМОП");
	
	Элементы.Суффикс.Видимость = 
		Не (ТекущийТипПомещения = ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Дом"));
	
	Элементы.ХарактеристикиКомнаты.Видимость = (ПолучитьУровеньОбъекта(Объект.Ссылка) = 1);
	
	Элементы.ПлощадьБалкона.Видимость = Объект.ЕстьБалкон;
	Элементы.ПлощадьЛоджии.Видимость  = Объект.ЕстьЛоджия;
	
	ОтображатьДопЭлементы = НЕ ЗначениеЗаполнено(Объект.Родитель)
								И НЕ ТекущийТипПомещения = ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Автоместо");
	
	Элементы.ГруппаСписокКомнат.Видимость      = ОтображатьДопЭлементы;
	// Для типа помещения Автоместо есть возможность открытия лицевого счета, в таком случае,
	// имеет смысл отображать на форме элемента данного типа ссылку для перехода на соответствующий лицевой счет.
	// Но для помещений, у которых есть элемент-родитель (например, комнаты), оставим данное поле скрытым.
	Элементы.НадписьЛицевыеСчета.Видимость     = НЕ ЗначениеЗаполнено(Объект.Родитель);
	Элементы.ГиперссылкаЛицевыеСчета.Видимость = НЕ ЗначениеЗаполнено(Объект.Родитель);
	
	Элементы.СобственникиДоля.Видимость = (ПолучитьСуммарнуюДолюСобственников(Форма.Собственники) > 0);
	
	// Описание видимости флага-настройки "Составляет общее имущество в МКД":
	// Данный флаг доступен:
	// 1. Только для помещений в многоквартирных домах;
	// во-вторых, помещение должно быть нежилым; в-третьих, места общественного пользования в МКД
	// не могут составлять общее имущество в МКД
	Если Форма.ЯвляетсяКомнатой Тогда
		Элементы.НазначениеПомещения.Видимость          = Ложь;
		Элементы.РасположениеПомещения.Видимость        = Ложь;
		Элементы.ХарактеристикаПомещения.Видимость      = Ложь;
		// Комната - это часть жилого помещения - флаг недоступен.
		Элементы.СоставляетОбщееИмуществоВМКД.Видимость = Ложь;
	Иначе
		
		// Для жилых домов блокированной застройки отображается номер блока, в котором находится помещение.
		// Для МКД и жилых домов НЕблокированной застройки поле недоступно (не отображается на форме).
		Элементы.НомерБлока.Видимость = Форма.ЖилойДомБлокированнойЗастройки;
		
		Если Форма.НаходитсяВМКД Тогда
			// Определяет принадлежность помещения к жилому/нежилому фонду по реквизиту Вида помещения "ЭтоЖилойФонд".
			Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ВидПомещения, "ЭтоЖилойФонд") Тогда
				Элементы.НазначениеПомещения.Видимость          = Ложь;
				Элементы.РасположениеПомещения.Видимость        = Ложь;
				Элементы.ХарактеристикаПомещения.Видимость      = Истина;
				// Помещение относится к жилому фонду - флаг недоступен.
				Элементы.СоставляетОбщееИмуществоВМКД.Видимость = Ложь;
			Иначе
				Элементы.НазначениеПомещения.Видимость          = Истина;
				Элементы.РасположениеПомещения.Видимость        = Истина;
				Элементы.ХарактеристикаПомещения.Видимость      = Ложь;
				// Помещение относится к МОП - флаг недоступен, для остальных типов нежилых помещений - флаг доступен.
				Элементы.СоставляетОбщееИмуществоВМКД.Видимость = НЕ ПризнакОтношенияКМОП;
			КонецЕсли;
		Иначе
			Элементы.НазначениеПомещения.Видимость          = Ложь;
			Элементы.РасположениеПомещения.Видимость        = Ложь;
			Элементы.ХарактеристикаПомещения.Видимость      = Ложь;
			// Помещение находится НЕ в МКД - флаг недоступен.
			Элементы.СоставляетОбщееИмуществоВМКД.Видимость = Ложь;
			
			// У ЖД не может быть подъезда. Подъезд может быть только у МКД.
			Элементы.Подъезд.Видимость                      = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	// Устанавливает видимость кнопки "Получить кадастровый номер".
	Элементы.ПолучитьКадастровыйНомер.Видимость = УПЖКХ_ОбщегоНазначенияСервер.ОпределитьНаличиеПравНаРедактированиеОбъектовЖКХ();
	
КонецПроцедуры  //УправлениеФормой()

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ЗначениеКопирования", ОбъектКопирования);
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("Владелец") Тогда
			Параметры.Свойство("Владелец", Объект.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьАктуальностьСтроительногоАдресаНаСервере();
	
	// Если открывается записанный элемент.
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ОбновитьДанныеОСобственности();
		
	// Если создается новый элемент без использования копирования.
	ИначеЕсли ОбъектКопирования.Пустая() Тогда
		
		ТипПомещения = "";
		Если Не Объект.Владелец.Пустая()
		   И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "Многоквартирное")
		   И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "ЖилойДомБлокированнойЗастройки")
		   И Объект.Родитель.Пустая() Тогда
			// Указано здание-владелец и это не многоквартирный дом.
			ТипПомещения = Перечисления.КВП_ТипыПомещений.Дом;
		ИначеЕсли Не Объект.Владелец.Пустая() 
		  И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "ТипСооружения") = 
		  		Перечисления.УПЖКХ_ТипСооружения.Паркинг Тогда
			// Указано здание-владелец и это паркинг.
			ТипПомещения = Перечисления.КВП_ТипыПомещений.Автоместо;
		ИначеЕсли Не Объект.Родитель.Пустая() Тогда
			// Это элемент второго уровня иерархии.
			ТипПомещения = Перечисления.КВП_ТипыПомещений.Комната;
		Иначе
			ТипПомещения = Перечисления.КВП_ТипыПомещений.Квартира;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипПомещения) Тогда
			Объект.ВидПомещения = ПолучитьВидПомещенияПоТипуПомещенияНаСервере(ТипПомещения);
		КонецЕсли;
		
		Если Не Объект.Владелец.Пустая() Тогда
			УстановитьНомерКвартирыНаСервере();
		КонецЕсли;
		
		ОбновитьПодъездПоНомеруПомещения();
		ОбновитьНаименованиеКвартирыНаСервере();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		Элементы.Владелец.ТолькоПросмотр = Истина;
		Элементы.Подъезд.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ОбновитьДанныеПоСостоянию();
	ОбновитьТаблицуПлощадейПомещения();
	ЗаполнитьБлагоустройстваПомещения();
	
	ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
	
	ОпределитьТипЗдания();
	
	ОпределитьЯвляетсяЛиКомнатой();
	
	УправлениеФормой(ЭтаФорма);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	Элементы.Вход.СписокВыбора.Добавить(Перечисления.КВП_ТипыПомещений.Комната);
	Элементы.Вход.СписокВыбора.Добавить(Перечисления.КВП_ТипыПомещений.Коридор);
	Элементы.Вход.СписокВыбора.Добавить(Перечисления.КВП_ТипыПомещений.Кухня);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	// Если это новый элемент.
	Если Объект.Ссылка.Пустая() Тогда
		
		// И скопируем записи регистров, если элемент был скопирован.
		Если Не ОбъектКопирования.Пустая() Тогда
			УстановитьНомерКвартирыНаСервере();
			ОбновитьНаименованиеКвартирыНаСервере();
			
			ТекстВопроса = "Скопировать записи из регистров? Для этого элемент будет записан.";
			ПоказатьВопрос(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДанныеОЛицевыхСчетах();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСведенияОбУстановленномОборудовании" Тогда
		Если Источник = Объект.Ссылка Тогда
			ОбновитьТаблицуСвязанныхОбъектовУчетаНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьСведенияОКадастровыхНомерах" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьПредставлениеПлощадей" Тогда
		ОбновитьТаблицуПлощадейПомещения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПриОткрытииЗавершение()".
Процедура ПриОткрытииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			СкопироватьЗаписиРегистров(ОбъектКопирования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытииЗавершение()

&НаКлиенте
// Обработчик события "ПередЗаписью" формы.
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверим, единственное ли это помещение в индивидуальном доме.
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "ТипСооружения") = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипСооружения.Здание")
	  //И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "ВидСооружения") =         //ТТ
	  И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "ЖилойДомБлокированнойЗастройки")
	  И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ВидПомещения, "ТипПомещения") = ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Дом") Тогда
		//Если ПроверитьСушествованиеПомещений(Объект.Родитель, Объект.Владелец, Объект.Ссылка) Тогда
		//	ПоказатьПредупреждение(, "Для указанного здания уже существует помещение. 
		//| необходимо установить для здания признак многоквартирности.");
		//	//Отказ = Истина;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПередЗаписьюНаСервере" формы.
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = НельзяЗаписатьЭлементНаСервере();
	
	Если Объект.ВидПомещения.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле ""Вид помещения"" не заполнено", Отказ);
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	УПЖКХ_ТиповыеМетодыСервер.ДополнительныйРеквизитПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПриЗаписиНаСервере" формы.
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Отказ И Не ЗаписатьБлагоустройстваПомещения() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбновитьДанныеПоПлощадямЗдания();
	
КонецПроцедуры

&НаСервере
// Обработчик события "ПослеЗаписиНаСервере" формы.
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "После записи" формы.
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОповеститьОПерерасчетеПлощадиЗдания Тогда
		ПодключитьОбработчикОжидания("ОповеститьОПересчетеПлощадейЗдания", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Перед закрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОповеститьОПерерасчетеПлощадиЗдания Тогда
		ОповеститьОПересчетеПлощадейЗдания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "При закрытии" формы.
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОповеститьОПерерасчетеПлощадиЗдания Тогда
		ОповеститьОПересчетеПлощадейЗдания();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

//////////////////////////////////////
// Закладка "Общие данные"

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода типа помещения.
Процедура ВидПомещенияПриИзменении(Элемент)
	
	// Проверка установленного вида помещения по списку допустимых типов помещений.
	ВыбранныйТипПомещения = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ВидПомещения, "ТипПомещения");
	ТипыПомещений = ПолучитьДоступныеТипыПомещенийНаСервере(Объект);
	Если ЗначениеЗаполнено(Объект.ВидПомещения) И ТипыПомещений.НайтиПоЗначению(ВыбранныйТипПомещения) = Неопределено Тогда
		ПоказатьПредупреждение(, "Вид помещения """ + Объект.ВидПомещения + """ недоступен для данного здания!");
		Объект.ВидПомещения = ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПомещений.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	// При заведении новых помещений (записей справочника), и в случаях, когда пользователь меняет вид помещения,
	// помещению присваивается номер, следующий за последним имеющимся номером помещения такого типа в указанном
	// здании.
	Если Объект.Ссылка.Пустая() ИЛИ Объект.ВидПомещения <> Объект.ВидПомещенияПредыдущий Тогда
		
		УстановитьНомерКвартирыНаСервере();
		
	КонецЕсли;
	
	ОбновитьНаименованиеКвартирыНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода вида помещения.
Процедура ВидПомещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ВидПомещенияПредыдущий = Объект.ВидПомещения;
	
	ОткрытьФормуСправочникаВидыПомещений("ФормаВыбора");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля ввода вида помещения.
Процедура ВидПомещенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСправочникаВидыПомещений("ФормаЭлемента");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода кода-номера квартиры.
Процедура КодПриИзменении(Элемент)
	
	ОбновитьПодъездПоНомеруПомещения();
	ОбновитьНаименованиеКвартирыНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода суффикса в номере квартиры.
Процедура СуффиксПриИзменении(Элемент)
	
	ОбновитьНаименованиеКвартирыНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "Строительный номер".
Процедура СтроительныйНомерПриИзменении(Элемент)
	
	ОбновитьНаименованиеКвартирыНаСервере();
	
КонецПроцедуры

&НаКлиенте
// При изменении владельца квартиры предлагается автоматический подбор ее номера.
Процедура ВладелецПриИзменении(Элемент)
	
	ОбновитьАктуальностьСтроительногоАдресаНаСервере(Ложь);
	
	// Индивидуальное жилье.
	Если ЗначениеЗаполнено(Объект.Владелец)
	  И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "ТипСооружения") = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипСооружения.Здание")
	  И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "Многоквартирное")
	  И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ВидПомещения, "ТипПомещения") = ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Дом") Тогда
		
		Если ПроверитьСушествованиеПомещений(Объект.Родитель, Объект.Владелец, Объект.Ссылка) Тогда
			ТекстПредупреждения = "Для указанного здания уже существует помещение. 
								  |Чтобы создать новое помещение, необходимо установить для здания признак многоквартирности.";
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ОбработатьПриПредупрежденииВладелецПриИзменении", ЭтотОбъект), ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Объект.ВидПомещения = ПолучитьВидПомещенияПоТипуПомещенияНаСервере(ПредопределенноеЗначение(
																			"Перечисление.КВП_ТипыПомещений.Дом"));
		
	// Паркинг
	ИначеЕсли ЗначениеЗаполнено(Объект.Владелец)
	  И УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "ТипСооружения") = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипСооружения.Паркинг") Тогда
		
		Объект.ВидПомещения = ПолучитьВидПомещенияПоТипуПомещенияНаСервере(ПредопределенноеЗначение(
																			"Перечисление.КВП_ТипыПомещений.Автоместо"));
		
	// Многоквартирый дом.
	Иначе
		
		Объект.ВидПомещения = ПолучитьВидПомещенияПоТипуПомещенияНаСервере(ПредопределенноеЗначение(
																			"Перечисление.КВП_ТипыПомещений.Квартира"));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПроектПомещения)
	   И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ПроектПомещения, "Владелец") = Объект.Владелец Тогда
		Объект.ПроектПомещения = ПредопределенноеЗначение("Справочник.УПЖКХ_ПроектыПомещений.ПустаяСсылка");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Очищен проект помещения. Установите принадлежность к новому проекту помещения!");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = "Подобрать номер помещения для нового дома?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаВладелецПриИзменении", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВладелецПриИзмененииПродолжение();
	
КонецПроцедуры // ВладелецПриИзменении()

&НаКлиенте
// Процедура-обработчик при выводе предупреждения в процедуре "ВладелецПриИзменении()".
Процедура ОбработатьПриПредупрежденииВладелецПриИзменении(ДополнительныеПараметры) Экспорт
	
	Владелец = ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка");
	
КонецПроцедуры // ОбработатьПриПредупрежденииВладелецПриИзменении()

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ВладелецПриИзменении()".
Процедура ОбработатьРезультатВопросаВладелецПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УстановитьНомерКвартирыНаСервере();
		ОбновитьПодъездПоНомеруПомещения();
	КонецЕсли;
	
	ВладелецПриИзмененииПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаВладелецПриИзменении()

&НаКлиенте
// Вызывает механизм обновления наименования квартиры.
Процедура ВладелецПриИзмененииПродолжение()
	
	ОбновитьНаименованиеКвартирыНаСервере();
	
КонецПроцедуры // ВладелецПриИзмененииПродолжение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода подъезда.
Процедура ПодъездПриИзменении(Элемент)
	
	// !!! Нет реквизита на клиенте
	//Если мАктуаленСтроительныйАдрес Тогда
		ОбновитьНаименованиеКвартирыНаСервере();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля ввода подъезда.
Процедура ПодъездОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// !!! Нет реквизита на клиенте
	//Если мАктуаленСтроительныйАдрес Тогда
	//	Возврат;
	//КонецЕсли;

	КодПомещения = ?(ЗначениеЗаполнено(Объект.Родитель),
						УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Родитель, "Код"), Объект.Код);
	// Проверка по номеру квартиры.
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "НомерПервойКвартиры") > КодПомещения 
	  ИЛИ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение,
	  																"НомерПоследнейКвартиры") < КодПомещения Тогда

		ТекстВопроса = "В выбранном подъезде нет указанного номера квартиры. Установить подъезд?";
		ДопПараметрыВопроса = Новый Структура;
		ДопПараметрыВопроса.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодъездОбработкаВыбораЗавершение", ЭтотОбъект, ДопПараметрыВопроса), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		СтандартнаяОбработка = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПодъездОбработкаВыбора()".
Процедура ПодъездОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.КВП_Подъезды.ПустаяСсылка");
	Если ДополнительныеПараметры.Свойство("ВыбранноеЗначение") Тогда
		ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Подъезд = ВыбранноеЗначение;
	Иначе
		ОбновитьПодъездПоНомеруПомещения();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаВладелецПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода "Этаж".
//
//
Процедура ЭтажПриИзменении(Элемент)
	
	// Определим этажность подъезда.
	ЭтажностьПодъезда = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подъезд, "Этажность");
	Если ЭтажностьПодъезда = 0 Тогда
		ЭтажностьПодъезда = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Владелец, "Этажей");
	КонецЕсли;
	
	Если ЭтажностьПодъезда > 0 И Объект.Этаж > ЭтажностьПодъезда Тогда
		ОписаниеОповещения  = Новый ОписаниеОповещения("ЭтажПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ЭтажностьПодъезда", ЭтажностьПодъезда));
		ТекстПредупреждения = "Номер этажа не может превышать количество этажей в подъезде";
		
		ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры // ЭтажПриИзменении()

&НаКлиенте
// Процедура-обработчик при выводе предупреждения в процедуре "ЭтажПриИзменении()".
Процедура ЭтажПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ЭтажностьПодъезда = ДополнительныеПараметры.ЭтажностьПодъезда;
	Объект.Этаж       = ЭтажностьПодъезда;
	
КонецПроцедуры // ЭтажПриИзмененииЗавершение()

//////////////////////////////////////
// Закладка "Собственность"

&НаКлиенте
// Обработчик события "Открытие" поля вида собственности.
Процедура ВидСобственностиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Собственники.Количество() > 0 Тогда
		ДокументИзмененияСобственности = Собственники[0].ДокументИзмененияСобственности;
		Если ЗначениеЗаполнено(ДокументИзмененияСобственности) Тогда
			ФормаДок = ПолучитьФорму("Документ."
									 + ПолучитьНаименованиеОбъектаМетаданныхПоСсылке(ДокументИзмененияСобственности)
									 + ".ФормаОбъекта", Новый Структура("Ключ", ДокументИзмененияСобственности), ЭтаФорма);
			Если Не ФормаДок = Неопределено Тогда
				ФормаДок.Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "СОБСТВЕННИКИ"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления".
Процедура СобственникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением".
Процедура СобственникиПослеУдаления(Элемент)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ПЛОЩАДИ ПОМЕЩЕНИЯ"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка площадей помещения.
Процедура ПлощадиПомещенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПлощадиПомещенияПередНачаломДобавленияЗавершение", ЭтотОбъект), "Перед добавлением площадей элемент необходимо записать. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	Иначе
		ОткрытьФорму("РегистрСведений.КВП_ПлощадьПомещения.ФормаЗаписи", Новый Структура("ОтборОбъект", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ПлощадиПомещенияПередНачаломДобавления()".
Процедура ПлощадиПомещенияПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Записать() Тогда
		ОткрытьФорму("РегистрСведений.КВП_ПлощадьПомещения.ФормаЗаписи", Новый Структура("ОтборОбъект", Объект.Ссылка));
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаВладелецПриИзменении()

&НаКлиенте
// Обработчик события "ПередУдалением" списка площадей помещения.
Процедура ПлощадиПомещенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // ПлощадиПомещенияПередУдалением()

&НаКлиенте
// Обработчик события "Выбор" списка площадей помещения.
Процедура ПлощадиПомещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = Элементы.ПлощадиПомещенияИстория.Имя Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОтборОбъект", Объект.Ссылка);
		ПараметрыФормы.Вставить("ВидПлощади",  Элемент.ТекущиеДанные.ВидПлощади);
		
		ОткрытьФорму("РегистрСведений.КВП_ПлощадьПомещения.ФормаСписка", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ПараметрыФормы = Новый Структура("Ключ", ПолучитьКлюч(Элемент.ТекущиеДанные.Период, Объект.Ссылка, Элемент.ТекущиеДанные.ВидПлощади));
		
		ОткрытьФорму("РегистрСведений.КВП_ПлощадьПомещения.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Характеристики комнаты"

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флажка "ЕстьБалкон".
Процедура ЕстьБалконПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флажка "ЕстьЛоджия".
Процедура ЕстьЛоджияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ "ОБЪЕКТЫ УЧЕТА И ОБОРУДОВАНИЕ"

&НаКлиенте
// Обработчик события "Выбор" поля "УстановленноеОборудование".
//
Процедура УстановленноеОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураКлюча = Новый Структура;
		СтруктураКлюча.Вставить("Период",          ТекущиеДанные.Период);
		СтруктураКлюча.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураКлюча.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		
		СтруктураПараметров = Новый Структура("Ключ", ПолучитьКлючЗаписиРегистраВзаимосвязиОбъектовУчетаИОборудования(СтруктураКлюча));
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Вызывается при нажатии по кнопке "Помещения".
Процедура ОткрытьПомещения(Команда)
	
	// откроем подчиненный справочник
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ФормаПомещений = ПолучитьФорму("Справочник.УПЖКХ_Помещения.Форма.ФормаСписка",
										Новый Структура("ПараметрВладелец, ПараметрРодитель", Объект.Владелец, Объект.Ссылка),
										ЭтаФорма, "СписокКомнат");
		
		ФормаПомещений.Открыть();
	
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сначала необходимо записать элемент справочника!");
	КонецЕсли;
	
КонецПроцедуры // ОткрытьПомещения()

&НаКлиенте
// Обработчик команды "ОбновитьСобственность".
Процедура ОбновитьСобственность(Команда)
	
	ОбновитьДанныеОСобственности();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьЛС".
//
Процедура ОткрытьЛС(Команда)
	
	ВывестиТекстОбновить = Ложь;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		УПЖКХ_РаботаСЛицевымиСчетамиКлиент.ОткрытиеЛицевогоСчета(Новый Структура("Здание, Помещение", Объект.Владелец, Объект.Ссылка), Этаформа);
		ВывестиТекстОбновить = Истина;
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьЛСЗавершение", ЭтотОбъект), "Необходимо записать новый элемент справочника!", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Если ВывестиТекстОбновить Тогда
		Элементы.ГиперссылкаЛицевыеСчета.Заголовок = "Обновить";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик результата вопроса, вызванного в процедуре "ОткрытьЛС()".
Процедура ОткрытьЛСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВывестиТекстОбновить = Ложь;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И ЗаписатьОбъектНаСервере() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Создано новое помещение: " + Строка(Объект.Ссылка));
		УПЖКХ_РаботаСЛицевымиСчетамиКлиент.ОткрытиеЛицевогоСчета(Новый Структура("Здание, Помещение", Объект.Владелец, Объект.Ссылка), ЭтаФорма);
		ВывестиТекстОбновить = Истина;
	КонецЕсли;
	
	Если ВывестиТекстОбновить Тогда
		Элементы.ГиперссылкаЛицевыеСчета.Заголовок = "Обновить";
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаВладелецПриИзменении()

&НаКлиенте
// Обработчик команды "ГиперссылкаЛицевыеСчета".
//
Процедура ГиперссылкаЛицевыеСчета(Команда)
	
	Если Элементы.ГиперссылкаЛицевыеСчета.Заголовок = "Обновить" Тогда
		ОбновитьДанныеОЛицевыхСчетах();
	Иначе
		Если СписокЛицевыхСчетов.Количество() = 0 Тогда
			ОбновитьДанныеОЛицевыхСчетах();
			ОткрытьЛС("ОткрытьЛС");
		Иначе
			ОткрытьФормуСпискаЛС(Элементы.ГиперссылкаЛицевыеСчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьОборудования".
//
Процедура УстановитьОборудования(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
	СтруктураЗаполнения.Вставить("Установлено",     Истина);
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ВвестиАктуальныеСведения".
//
Процедура ВвестиАктуальныеСведения(Команда)
	
	ТекущиеДанные = Элементы.УстановленноеОборудование.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("Период",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		СтруктураЗаполнения.Вставить("ОбъектУстановки", Объект.Ссылка);
		СтруктураЗаполнения.Вставить("Оборудование",    ТекущиеДанные.Оборудование);
		СтруктураЗаполнения.Вставить("Количество",      ТекущиеДанные.Количество);
		СтруктураЗаполнения.Вставить("Установлено",     Истина);
		
		ОткрытьФорму("РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ФормаЗаписи", Новый Структура("ЗначенияЗаполнения", СтруктураЗаполнения));
		
	КонецЕсли;
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

&НаКлиенте
// Обработчик команды  "ПолучитьКадастровыйНомер".
//
Процедура ПолучитьКадастровыйНомер(Команда)
	
	Если ПустаяСтрока(Объект.КадастровыйНомер) Тогда
		
		ПолучитьКадастровыйНомерНаКлиенте();
		
	Иначе
		
		ТекстВопроса = "Кадастровый номер уже заполнен. Продолжить получение кадастрового номера?";
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветОбОбновленииКадастровогоНомера", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыСтраницы_СведенияДляГИСЖКХ

&НаКлиенте
// Обрабатывает ответ на вопрос об обновлении имеющегося кадастрового номера.
//
Процедура ОбработатьОтветОбОбновленииКадастровогоНомера(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьКадастровыйНомерНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Управляет получением кадастрового номера с сервиса Росреестра.
//
Процедура ПолучитьКадастровыйНомерНаКлиенте()
	
	СсылкаНаОбъект      = Объект.Ссылка;
	СтруктураРезультата = ПолучитьКадастровыйНомерНаСервере(СсылкаНаОбъект);
	
	Если СтруктураРезультата.ВыполненоУспешно Тогда
		
		Объект.КадастровыйНомер = СтруктураРезультата.КадастровыйНомер;
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Объект", СсылкаНаОбъект);
		
		ОткрытьФорму("Обработка.УПЖКХ_ЗагрузкаКадастровыхНомеров.Форма", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет получение кадастрового номера с сервиса Росреестра.
//
Функция ПолучитьКадастровыйНомерНаСервере(СсылкаНаОбъект)
	
	Возврат Обработки.УПЖКХ_ЗагрузкаКадастровыхНомеров.ПолучитьКадастровыйНомерПоОбъекту(Объект.Ссылка);
	
КонецФункции

#КонецОбласти
