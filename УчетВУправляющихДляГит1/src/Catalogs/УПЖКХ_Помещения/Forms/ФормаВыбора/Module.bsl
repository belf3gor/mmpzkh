
#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура устанавливает отбор по помещениям.
Процедура УстановитьОтборПоПомещениям(УровеньСправочника = 1)
	
	Если УровеньСправочника = 1 Тогда
		ЗначениеОтбора = Справочники.УПЖКХ_Помещения.ПустаяСсылка();
		ОбъектОтбора   = Список;
		
	ИначеЕсли УровеньСправочника = 2 Тогда
		ЗначениеОтбора = Элементы.Список.ТекущаяСтрока;
		ОбъектОтбора   = ПомещенияКвартиры;
		
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ОбъектОтбора.Отбор, "Родитель", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает отбор по типу помещения.
Процедура УстановитьОтборПоТипуПомещения()
	
	Если ЗначениеЗаполнено(Параметры.ПараметрОтборТипПомещения) Тогда
		
		СписокВидовПомещений = ПолучитьСписокВидыПомещенийПоСпискуТиповПомещений(Параметры.ПараметрОтборТипПомещения);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ВидПомещения", СписокВидовПомещений,
																ВидСравненияКомпоновкиДанных.ВСписке);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ПомещенияКвартиры.Отбор, "ВидПомещения",
																СписокВидовПомещений, ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция определяет, доступен ли выбор помещения с указанным уровнем иерархии.
//
// Параметры:
//  УровеньСправочника - Число - уровень иерархии элемента справочника.
//
// Возвращаемое значение:
//  Булево - доступен ли выбор помещения с указанным уровнем иерархии.
//
Функция ДоступенВыборПомещения(УровеньСправочника)
	
	Возврат (Не ЗначениеЗаполнено(ОрганичениеПоУровнюИерархии)
	     Или УровеньСправочника = ОрганичениеПоУровнюИерархии);
	
КонецФункции // ДоступенВыборПомещения()

&НаКлиенте
// Процедура обрабатывает выбор элемента справочника: если выбор доступен, то
// оповещает о сделанном выборе, если нет - открывает форму элемента.
//
// Параметры:
//  ВыбраннаяСтрока - ссылка на выбранный элемент справочника.
//  УровеньСправочника - Число - уровень иерархии элемента справочника.
//  ОткрыватьЭлемент - Булево - открывать ли выбранный элемент в случае
//                 недоступности его выбора.
//
Процедура ОбработатьВыборПомещения(ВыбраннаяСтрока, УровеньСправочника, ОткрыватьЭлемент = Истина)
	
	Если ДоступенВыборПомещения(УровеньСправочника) Тогда
		ОповеститьОВыборе(ВыбраннаяСтрока);
		
	Иначе
		Если ОткрыватьЭлемент Тогда
			ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборПомещения()

&НаКлиенте
// Обработчик завершения выбора здания.
//
Процедура ЗавершенияВыбораЗдания(ВыбранноеЗдание, ДопПараметры) Экспорт
	
	Если ВыбранноеЗдание = Неопределено Тогда
		// Если здание не выборано, то закрываем форму и прекращаем выбор помещения.
		Закрыть();
	Иначе
		
		// Устанавливаем отбор по выбранному зданию.
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Владелец", ВыбранноеЗдание, ВидСравненияКомпоновкиДанных.Равно);
		
		// Установим текущую строку списка помещений.
		УстановитьТекущуюСтрокуВСпискеПомещений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает текущую строку в списке помещений.
//
Процедура УстановитьТекущуюСтрокуВСпискеПомещений()
	
	Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		Если УровеньТекущейСтроки = 1 Тогда
			// Если в качестве начального значения выбора указано помещение второго
			// уровня, установим курсор на родительское помещение, установим отбор.
			Элементы.Список.ТекущаяСтрока = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока, "Родитель");
			УстановитьОтборПоПомещениям(2);
			Элементы.ПомещенияКвартиры.ТекущаяСтрока = ТекущаяСтрока;
			ТекущийЭлемент = Элементы.ПомещенияКвартиры;
		Иначе
			Элементы.Список.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним параметры текущей строки для использовании при открытии.
	Если Параметры.Свойство("ПараметрТекущаяСтрока", ТекущаяСтрока) И ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		УровеньТекущейСтроки = ТекущаяСтрока.Уровень();
	КонецЕсли;
	
	Параметры.Свойство("ОрганичениеПоУровнюИерархии", ОрганичениеПоУровнюИерархии);
	
	// Установим отбор по зданию, если он задан.
	Здание = Неопределено;
	Если Не Параметры.ПараметрВладелец.Пустая() Тогда
		Здание = Параметры.ПараметрВладелец;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
		Здание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Параметры.ТекущаяСтрока, "Владелец");
	ИначеЕсли Параметры.Отбор.Свойство("Владелец") Тогда
		Здание = Параметры.Отбор.Владелец;
	КонецЕсли;
	Если ЗначениеЗаполнено(Здание) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Владелец", Здание,
																ВидСравненияКомпоновкиДанных.Равно);
		ОтборПоВладельцуУстановлен = Истина;
	КонецЕсли;
	
	// Установим сортировку в списке.
	Список.Порядок.Элементы.Очистить();
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементПорядка(Список.Порядок, "Владелец");
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементПорядка(Список.Порядок, "Код");
	
	// Установим отбор по помещениям.
	УстановитьОтборПоПомещениям(1);
	
	// Установим отбор по типу помещения.
	УстановитьОтборПоТипуПомещения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если ОтборПоВладельцуУстановлен Тогда
		// Установим текущую строку списка помещений.
		УстановитьТекущуюСтрокуВСпискеПомещений();
	Иначе
		// Если отбора по зданию нет, тогда откроем форму выбора здания,
		// а текущую строку установим после выбора здания.
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершенияВыбораЗдания", ЭтотОбъект);
		ОткрытьФорму("Справочник.КВП_Здания.ФормаВыбора",, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" табличного поля.
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборПоПомещениям(2);
	
КонецПроцедуры

&НаКлиенте
// Обработчик двойного щелчка мыши или нажатия Enter строки табличного поля.
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборПомещения(ВыбраннаяСтрока, 1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаЗаписиНовогоОбъекта" табличной части СправочникСписок.
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	УстановитьОтборПоПомещениям(1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик двойного щелчка мыши или нажатия Enter строки табличного поля.
Процедура ПомещенияКвартирыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборПомещения(ВыбраннаяСтрока, 2);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Выбрать".
Процедура Выбрать(Команда)
	
	Если ЭтаФорма.ТекущийЭлемент.Имя = "Список" Тогда
		ВыбраннаяСтрока    = Элементы.Список.ТекущаяСтрока;
		УровеньСправочника = 1;
		
	ИначеЕсли ТекущийЭлемент.Имя = "ПомещенияКвартиры" Тогда
		ВыбраннаяСтрока    = Элементы.ПомещенияКвартиры.ТекущаяСтрока;
		УровеньСправочника = 2;
		
	КонецЕсли;
	
	ОбработатьВыборПомещения(ВыбраннаяСтрока, УровеньСправочника, Ложь);
	
КонецПроцедуры

#КонецОбласти