#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НовыйЭлемент = Справочники.ОсновныеСредства.СоздатьЭлемент();
	
	НовыйЭлемент.УстановитьНовыйКод();
	
	НачальныйКод = НовыйЭлемент.Код;
	
	УстановитьКонечныйКод(ЭтаФорма, Количество);
	
	Если ЗначениеЗаполнено(Параметры.НачальныйРодитель) Тогда
		
		Группа = Параметры.НачальныйРодитель;
		
	КонецЕсли;
	
	ФормироватьНаименованиеПолноеАвтоматически = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборАмортизационнойГруппыОС" И Источник = ЭтаФорма.УникальныйИдентификатор Тогда
		ОбработатьВыборКодаПоОКОФ(Параметр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	НедвижимоеИмущество = УправлениеВнеоборотнымиАктивамиКлиентСервер.ЭтоНедвижимоеИмущество(ГруппаОС);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		ПолноеНаименование = Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеНаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПолноеНаименование) ИЛИ ПолноеНаименование = Наименование Тогда
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальныйКодПриИзменении(Элемент)
	
	УстановитьКонечныйКод(ЭтаФорма, Количество);
	
КонецПроцедуры

&НаКлиенте
Процедура НачальныйКодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 И НЕ ЗначениеЗаполнено(НачальныйКод) Тогда // если в поле ввода ничего нет
		
		НачальныйКод = 1;
		
	Иначе
	
		НачальныйКод = УвеличитьКод(НачальныйКод, Направление);
		
	КонецЕсли;
	
	УстановитьКонечныйКод(ЭтаФорма, Количество);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	УстановитьКонечныйКод(ЭтаФорма, Количество);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	НовоеЗначение = Количество + Направление;

	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(НачальныйКод);
	
	Если ЗначениеЗаполнено(ЧисловаяЧасть) И Направление = 1 Тогда
		
		СтандартнаяОбработка = (НовоеЗначение <= МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КодПоОКОФ",             КодПоОКОФ);
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа", АмортизационнаяГруппа);

	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораАмортизационнойГруппы", ПараметрыОткрытия, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФПриИзменении(Элемент)
	
	ЗаполнитьПолеНаименованияКода("КодПо", "ОКОФ");
	АмортизационнаяГруппа = ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецПроцедуры

&НаКлиенте
Процедура ШифрПоЕНАОФПриИзменении(Элемент)
	
	ЗаполнитьПолеНаименованияКода("ШифрПо", "ЕНАОФ");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Создать(Команда)
	
	ОчиститьСообщения();
	
	ЕстьОшибкиЗаполнения = Ложь;
	Если НЕ ЗначениеЗаполнено(НачальныйКод) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Присваивать коды с'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НачальныйКод");
		ЕстьОшибкиЗаполнения = Истина;
	Иначе
		ЧисловаяЧасть = ПолучитьЧисловуюЧасть(НачальныйКод);
		
		Если НЕ ЗначениеЗаполнено(ЧисловаяЧасть) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "КОРРЕКТНОСТЬ", НСтр("ru = 'Присваивать коды с'"),,,
				НСтр("ru = 'Указанный в поле код не содержит числовой части.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НачальныйКод");
			ЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Количество) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Количество элементов'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Количество");
		ЕстьОшибкиЗаполнения = Истина;
	Иначе
		
		Если ЗначениеЗаполнено(ЧисловаяЧасть) И Количество > МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "КОРРЕКТНОСТЬ", НСтр("ru = 'Количество элементов'"),,,
				НСтр("ru = 'Введенное количество объектов превышает допустимое исходя из разрядности начального кода.'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Количество");
			ЕстьОшибкиЗаполнения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Наименование'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Наименование");
		ЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ГруппаОС) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Группа ОС'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Группа ОС");
		ЕстьОшибкиЗаполнения = Истина;
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	Если СоздатьЭлементыСправочника() Тогда
		ШаблонСообщения = НСтр("ru = 'Созданы элементы справочника ""Основные средства"": %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
			Формат(Количество, "ЧГ="));
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.ОсновныеСредства"));
	Иначе
		ТекстСообщенияОбОшибке = НСтр("ru = 'Групповое добавление элементов справочника не выполнено.'");
		ПоказатьПредупреждение( , ТекстСообщенияОбОшибке, , НСтр("ru = 'Ошибка'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает числовую часть строки.
//
//  Применяется для выделения числовой части инвентарного номера.
//
// Параметр:
//  ИсходнаяСтрока - Строка - Строка, в которой следует выделить числовую часть
// 
// Возвращаемое значение:
//  Строка         - числовая часть
//  Неопределено   - возвращается, если ИсходнаяСтрока не содержит числовой части
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЧисловуюЧасть(ИсходнаяСтрока)
	
	ЧисловаяЧасть = "";
	
	ПредыдущиеНеЦифры = Истина;
	
	// Поиск числовой части кода
	Для Позиция = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		
		Символ = Сред(ИсходнаяСтрока, Позиция, 1);
		
		// Если символ = цифра, включить его в числовую часть
		Если СтрНайти("0123456789", Символ) > 0 Тогда
			
			Если ПредыдущиеНеЦифры Тогда // Будем считать только смаую правую числовую часть
				ЧисловаяЧасть = "";
				ПредыдущиеНеЦифры = Ложь;
			КонецЕсли;
			
			ЧисловаяЧасть = ЧисловаяЧасть + Символ;
			
		Иначе
			
			ПредыдущиеНеЦифры = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка, существует ли числовая часть
	Если СтрДлина(ЧисловаяЧасть) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЧисловаяЧасть;
	
КонецФункции

// Функция увеличивает (уменьшает) код на заданный шаг (по умолчанию 1).
//
//  Применяется для установки кода с заданным шагом.
//
//  При этом код задается в строковом формате и может содержать прочие символы
// как до, так и после числовой части.
//
// Параметры:
//  ИсходныйКод    - Строка - Исходный код, который следует увеличить
//  Шаг            - Число - Числовое значение, на которое увеличивается Исходный код.
//                   Указание отрицательного значения приводит к уменьшению кода.
//                   Если значение не указано, Шаг по умолчанию устанавливается равным 1.
// 
// Возвращаемое значение:
//  Строка         - Код, увеличенный (уменьшенный) на заданный Шаг
//
&НаКлиентеНаСервереБезКонтекста
Функция УвеличитьКод(ИсходныйКод, Шаг = 1)
	
	СтроковаяЧасть1 = ""; // строковая часть, располагающаяся перед числовой частью кода
	ЧисловаяЧасть   = ""; // числовая часть кода, которая, собственно, и увеличивается
	СтроковаяЧасть2 = ""; // строковая часть, располагающаяся после числовой части кода
	
	// Получение числовой части исходного кода
	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(ИсходныйКод);
	
	Если НЕ ЗначениеЗаполнено(ЧисловаяЧасть) Тогда
		Возврат "";
	КонецЕсли;
	
	// Поиск позиций начала и окончания числовой части
	НачалоЧисловойЧасти    = СтрНайти(ИсходныйКод, ЧисловаяЧасть);
	ОкончаниеЧисловойЧасти = НачалоЧисловойЧасти + СтрДлина(ЧисловаяЧасть) - 1;
	
	// Выделение строковых частей
	Если НачалоЧисловойЧасти > 1 Тогда // числовая часть начинается не с первого символа исходного кода
		СтроковаяЧасть1 = Лев(ИсходныйКод, НачалоЧисловойЧасти - 1);
	КонецЕсли;
	
	Если ОкончаниеЧисловойЧасти < СтрДлина(ИсходныйКод) Тогда // числовая часть заканчивается не на последнем символе исходного кода
		СтроковаяЧасть2 = Сред(ИсходныйКод, ОкончаниеЧисловойЧасти + 1);
	КонецЕсли;

	// Формирование новой числовой части
	НоваяЧисловаяЧасть = Формат(Макс(1, Число(ЧисловаяЧасть) + Шаг), "ЧЦ=" + СокрЛП(СтрДлина(ЧисловаяЧасть)) + "; ЧВН=; ЧДЦ=0; ЧГ=0");
	
	// Сборка нового кода
	НовыйКод = СтроковаяЧасть1 + НоваяЧисловаяЧасть + СтроковаяЧасть2;
	
	Возврат НовыйКод;
	
КонецФункции

// Функция вычисляет максимум объектов, которые возможно создать
// исходя из разрядности и значения числовой части начального кода.
//
//  Применяется для контроля возможности создания заданного количества объектов
// в заданной разрядности кода.
//
// Параметры:
//  ЧисловаяЧасть  - Строка - Числовая часть начального кода.
// 
// Возвращаемое значение:
//  Число          - Число - Вычисленный максимум.
//
&НаКлиентеНаСервереБезКонтекста
Функция МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть)
	
	Если ЗначениеЗаполнено(ЧисловаяЧасть) Тогда
	
		Возврат Pow(10, СтрДлина(ЧисловаяЧасть)) - Число(ЧисловаяЧасть);
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает значение конечного кода
// исходя из заданного начального кода и количества создаваемых объектов
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКонечныйКод(Форма, КоличествоОбъектов)
	
	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(Форма.НачальныйКод);
	
	Если НЕ ЗначениеЗаполнено(Форма.НачальныйКод) 
	 ИЛИ НЕ ЗначениеЗаполнено(ЧисловаяЧасть)
	 ИЛИ КоличествоОбъектов <= 0 
	 ИЛИ КоличествоОбъектов > МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть) Тогда
		
		Форма.КонечныйКод = "";
		Возврат;
		
	КонецЕсли;
	
	Форма.КонечныйКод = УвеличитьКод(Форма.НачальныйКод, КоличествоОбъектов - 1);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАмортизационнуюГруппу(КодПоОКОФ)
	
	Возврат РегистрыСведений.АмортизационныеГруппыОКОФ.ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецФункции

&НаСервере
Функция СоздатьЭлементыСправочника()
	
	НачатьТранзакцию();
	
	ОшибкаТранзакции = Ложь;
	
	Для НомерЭлемента = 1 По Количество Цикл
		
		НовыйКод = УвеличитьКод(НачальныйКод, НомерЭлемента - 1);
		НомерЭлементаВН = НомерЭлемента;
		Пока ЗначениеЗаполнено(Справочники.ОсновныеСредства.НайтиПоКоду(НовыйКод)) Цикл 
			НовыйКод = УвеличитьКод(НачальныйКод, НомерЭлементаВН - 1);
			НомерЭлементаВН = НомерЭлементаВН + 1;
		КонецЦикла;
		
		НовыйЭлемент = Справочники.ОсновныеСредства.СоздатьЭлемент();
		
		НовыйЭлемент.Код                   = НовыйКод;
		НовыйЭлемент.Родитель              = Группа;
		НовыйЭлемент.Наименование          = Наименование;
		НовыйЭлемент.НаименованиеПолное    = ПолноеНаименование;
		НовыйЭлемент.Изготовитель          = Изготовитель;
		НовыйЭлемент.ЗаводскойНомер        = ЗаводскойНомер;
		НовыйЭлемент.НомерПаспорта         = НомерПаспорта;
		НовыйЭлемент.ДатаВыпуска           = ДатаВыпуска;
		НовыйЭлемент.КодПоОКОФ             = КодПоОКОФ;
		НовыйЭлемент.ГруппаОС              = ГруппаОС;
		НовыйЭлемент.НедвижимоеИмущество   = НедвижимоеИмущество;
		НовыйЭлемент.АмортизационнаяГруппа = АмортизационнаяГруппа;
		НовыйЭлемент.ШифрПоЕНАОФ           = ШифрПоЕНАОФ;
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать элемент справочника с кодом %1
			                             |%2'");
			СтруктураОшибки = ИнформацияОбОшибке();
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НовыйКод,
				КраткоеПредставлениеОшибки(СтруктураОшибки));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(СтруктураОшибки));
			
			ОшибкаТранзакции = Истина;
			Прервать;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОшибкаТранзакции Тогда // при наличии ошибок отменяем транзакцию
		
		ОтменитьТранзакцию();
		
		Возврат Ложь;
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПолеНаименованияКода(Префикс, ИмяКлассификатора)

	Классификатор = ЭтаФорма[Префикс + ИмяКлассификатора];
	ЭтаФорма[ИмяКлассификатора+"Наименование"] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Классификатор, "Наименование");

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКодаПоОКОФ(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	КодПоОКОФ             = ВыбранноеЗначение.ОКОФ;
	АмортизационнаяГруппа = ВыбранноеЗначение.АмортизационнаяГруппа;
	
	ЗаполнитьПолеНаименованияКода("КодПо", "ОКОФ");

КонецПроцедуры

#КонецОбласти


