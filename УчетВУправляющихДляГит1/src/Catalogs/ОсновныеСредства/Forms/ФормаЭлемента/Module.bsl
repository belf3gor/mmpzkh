
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ВыполнитьИнициализацию();
		ОбновитьСведения();
		ФормироватьНаименованиеПолноеАвтоматически = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив;
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВиды;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	СпрОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ОсновныеСредства"));
	
	ЗаполнитьПодсказкуКода("КодОКВЭД", "Наименование");
	ЗаполнитьПодсказкуКода("КодОКВЭД2", "Наименование");
	ЗаполнитьПодсказкуКода("КодПоОКОФ", "НаименованиеГруппировки");
	ЗаполнитьПодсказкуКода("ШифрПоЕНАОФ", "Наименование");
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Справочник.ОсновныеСредства",
		"ФормаЭлемента",
		НСтр("ru='Новости: Основное средство'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененаИнформацияОС" 
		ИЛИ ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		
		ОбновитьСведения();
		
	ИначеЕсли ИмяСобытия = "ВыборАмортизационнойГруппыОС" И Источник = ЭтотОбъект.УникальныйИдентификатор Тогда
		
		ОбработатьВыборКодаПоОКОФ(Параметр);
		Если ЭтоЮрЛицо Тогда
			ОбновитьСведенияНалогНаИмущество();
		КонецЕсли;
		
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ВыполнитьИнициализацию();
	ОбновитьСведения();
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Новый Структура("Ссылка", Объект.Ссылка);
	
	Оповестить("ИзмененОбъектОС", ПараметрОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаСведенийПриИзменении(Элемент)

	ОбновитьСведения();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	Объект.НедвижимоеИмущество = УправлениеВнеоборотнымиАктивамиКлиентСервер.ЭтоНедвижимоеИмущество(Объект.ГруппаОС);
	
	Если ЭтоЮрЛицо Тогда
		ОбновитьСведенияИмущественныеНалоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НедвижимоеИмуществоПриИзменении(Элемент)
	
	Если ЭтоЮрЛицо Тогда
		ОбновитьСведенияНалогНаИмущество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФПриИзменении(Элемент)
	
	ЗаполнитьПодсказкуКода("КодПоОКОФ", "НаименованиеГруппировки");
	
	Если Не ЗначениеЗаполнено(Объект.АмортизационнаяГруппа) Тогда
		Объект.АмортизационнаяГруппа = КодПоОКОФПриИзмененииНаСервере(Объект.КодПоОКОФ);
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		ОбновитьСведенияНалогНаИмущество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКОФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КодПоОКОФ", 			Объект.КодПоОКОФ);
	ПараметрыОткрытия.Вставить("АмортизационнаяГруппа", Объект.АмортизационнаяГруппа);

	ОткрытьФорму("Справочник.ОсновныеСредства.Форма.ФормаВыбораАмортизационнойГруппы", ПараметрыОткрытия, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ШифрПоЕНАОФПриИзменении(Элемент)
	
	ЗаполнитьПодсказкуКода("ШифрПоЕНАОФ", "Наименование");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКВЭДКодПриИзменении(Элемент)
	
	ЗаполнитьПодсказкуКода("КодОКВЭД", "Наименование");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКВЭД2КодПриИзменении(Элемент)
	
	ЗаполнитьПодсказкуКода("КодОКВЭД2", "Наименование");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументПринятияКУчетуБУПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Ввод документа принятия к учету возможен только после записи.
			|Данные будут записаны.'");
		Оповещение = Новый ОписаниеОповещения("ВопросВводПринятияКУчетуПослеЗаписиЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуПринятиеКУчетуОС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументСнятияСУчетаБУПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Ввод документа снятия с учета возможен только после записи.
			|Данные будут записаны.'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросВводСнятиеСУчетаОСПослеЗаписиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуСписаниеОС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТранспортныйНалогНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоставитьНаУчет Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Период", ДатаСведений);
		ЗначенияЗаполнения.Вставить("Организация", Организация);
		ЗначенияЗаполнения.Вставить("ОсновноеСредство", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ВидЗаписи", ПредопределенноеЗначение("Перечисление.ВидЗаписиОРегистрации.Регистрация"));
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("РегистрСведений.РегистрацияТранспортныхСредств.ФормаЗаписи", СтруктураПараметров, ЭтотОбъект);
		
	Иначе
		
		Отбор = Новый Структура;
		Если ЗначениеЗаполнено(Организация) Тогда
			Отбор.Вставить("Организация", Организация);
		КонецЕсли;
		Отбор.Вставить("ОсновноеСредство", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.РегистрацияТранспортныхСредств.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизационнаяГруппаПриИзменении(Элемент)
	
	Если ЭтоЮрЛицо Тогда
		ОбновитьСведенияНалогНаИмущество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалогНаИмуществоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ОсновноеСредство", Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗемельныйНалогНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоставитьНаУчет Тогда
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Период", ДатаСведений);
		ЗначенияЗаполнения.Вставить("Организация", Организация);
		ЗначенияЗаполнения.Вставить("ОсновноеСредство", Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ВидЗаписи", ПредопределенноеЗначение("Перечисление.ВидЗаписиОРегистрации.Регистрация"));
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("РегистрСведений.РегистрацияЗемельныхУчастков.ФормаЗаписи", СтруктураПараметров, ЭтотОбъект);
		
	Иначе
		
		Отбор = Новый Структура;
		Если ЗначениеЗаполнено(Организация) Тогда
			Отбор.Вставить("Организация", Организация);
		КонецЕсли;
		Отбор.Вставить("ОсновноеСредство", Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("РегистрСведений.РегистрацияЗемельныхУчастков.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьИнициализацию()
	
	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияВыполнена = Истина;
	
	ДатаСведений = ОбщегоНазначения.ТекущаяДатаПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписания()
	
	// Определим организацию, в которой ОС стоит на учете, по регистру сведений "Состояния ОС организаций"
	Запрос = Новый Запрос();
	ДатаВремяНаКонецДня = Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаВремяНаКонецДня);
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Организация = РезультатЗапроса.Выгрузить()[0].Организация;
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	// Данные для заполнения закладки "Бухгалтерский учет"
	Запрос = Новый Запрос;
	
	ВидСубконтоОС = Новый Массив();
	ВидСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ВидСубконтоОС",    ВидСубконтоОС);

	Запрос.Текст =
	"////////////////////////////////////////////////////////////////////////////////
	|// 0 - ПервоначальныеСведенияОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления КАК СпособПоступленияБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Контрагент КАК Контрагент,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработкиБУ,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 1 - МестонахождениеОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 2 - ПараметрыАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемРаботБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК ПроцентГодовойАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 3 - ГрафикиАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГодовойГрафикБУ
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 4 - СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизацииБУ
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//	5 - СчетаБухгалтерскогоУчетаОС
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&ДатаСведений,
	|			Организация = &Организация
	|				И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних";

	МассивРезультатов = Запрос.ВыполнитьПакет();
	СчетУчетаБУ                 = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	СчетНачисленияАмортизацииБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось = МассивРезультатов[0].Пустой();
	
	Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	// Стоимостные показатели
	Если ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		
		Запрос.УстановитьПараметр("СчетУчетаБУ", СчетУчетаБУ);
		Запрос.УстановитьПараметр("СчетНачисленияАмортизацииБУ", СчетНачисленияАмортизацииБУ);
		
		ТекстЗапросаСтоимость = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиСтоимость.СуммаОстатокДт КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстаткиСтоимость.СуммаНУОстатокДт КАК ТекущаяСтоимостьНУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет = &СчетУчетаБУ,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСтоимость";
		
		ТекстЗапросаАмортизация = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокКт КАК ТекАмортизацияБУ,
		|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокДт КАК ТекИзносБУ,
		|	ХозрасчетныйОстаткиАмортизация.СуммаНУОстатокКт КАК ТекАмортизацияНУ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаСведений,
		|			Счет = &СчетНачисленияАмортизацииБУ,
		|			&ВидСубконтоОС,
		|			Организация = &Организация
		|				И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиАмортизация";
		
		Запрос.Текст = ТекстЗапросаСтоимость;
		Если ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ) Тогда
			Запрос.Текст = Запрос.Текст 
				+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
				+ ТекстЗапросаАмортизация;
		КонецЕсли;
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

	РасшифровкаСрокаПолезногоИспользованияБУ = СтрШаблон(НСтр("ru = 'мес. %1'"),
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ));

	УчетОС.ПолучитьДокументБухСостоянияОС(
		Объект.Ссылка,
		Организация,
		Перечисления.СостоянияОС.ПринятоКУчету,
		ДокументПринятияКУчетуБУ,
		ПринятоКУчетуБУ);
		
	УчетОС.ПолучитьДокументБухСостоянияОС(
		Объект.Ссылка,
		Организация,
		Перечисления.СостоянияОС.СнятоСУчета,
		ДокументСнятияСУчетаБУ,
		СнятоСУчетаБУ);

	Если НЕ ПрименяетсяУСН Тогда

		// Данные для заполнения закладки "Налоговый учет".
		// Стоимостные показатели текущей стоимости и амортизации по НУ заполнены вместе с БУ.
		Запрос.Текст =
		"////////////////////////////////////////////////////////////////////////////////
		|// 0 - ПервоначальныеСведенияОСНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации КАК МетодНачисленияАмортизацииНУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// 1 - ПараметрыАмортизацииОСНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокИспользованияНУ
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// 2 - НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпецКоэффициентНУ
		|ИЗ
		|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних";

		МассивРезультатов = Запрос.ВыполнитьПакет();

		ОсновноеСредствоВНалоговомУчетеНеОтражалось = МассивРезультатов[0].Пустой();
		
		Для Каждого РезультатЗапроса Из МассивРезультатов Цикл
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
			КонецЕсли;
		КонецЦикла;
		
		РасшифровкаСрокаПолезногоИспользованияНУ = СтрШаблон(НСтр("ru = 'мес. %1'"),
			УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияНУ));

	Иначе

		// Данные для заполнения закладки "Сведения НУ (УСН)"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", Новый Граница(КонецДня(ДатаСведений), ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьУСН, 0) КАК ПервоначальнаяСтоимостьУСН,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияУСН,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ДатаПриобретения КАК ДатаПриобретения,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|			И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|";

		РезультатЗапроса = Запрос.Выполнить();
		ОсновноеСредствоВНалоговомУчетеУСННеОтражалось = РезультатЗапроса.Пустой();
		Если Не РезультатЗапроса.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатЗапроса.Выгрузить()[0]);
		КонецЕсли;

		РасшифровкаСрокаПолезногоИспользованияУСН = СтрШаблон(НСтр("ru = 'мес. %1'"),
			УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияУСН));

	КонецЕсли;

	ЗаполнитьТекстПроДокументы();
	
	Если ЭтоЮрЛицо Тогда
		ЗаполнитьТекстПроИмущественныеНалоги();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтотОбъект, Организация, ДатаСведений);
	
	ПрименяетсяУСН                   = УчетнаяПолитика.ПрименяетсяУСН(Организация, ДатаСведений);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, ДатаСведений);
	ЭтоЮрЛицо                        = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектНалогообложенияНалогомНаИмуществоОрганизаций(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ Форма.ЭтоЮрЛицо Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Форма.ПрименяетсяУСН Тогда
		Возврат (Форма.ДатаСведений >= '20150101') И Объект.НедвижимоеИмущество;
	КонецЕсли;
	
	ОбъектыПриродопользования = Новый Массив;
	ОбъектыПриродопользования.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки"));
	ОбъектыПриродопользования.Добавить(ПредопределенноеЗначение("Перечисление.ГруппыОС.ОбъектыПриродопользования"));
	
	Если ОбъектыПриродопользования.Найти(Объект.ГруппаОС) <> Неопределено Тогда
		Возврат Ложь;
	Иначе
		Если Форма.ДатаСведений < '20130101' Тогда
			Возврат Истина;
		ИначеЕсли Форма.ДатаСведений < '20150101' Тогда
			Если НЕ Объект.НедвижимоеИмущество И Форма.ПринятоКУчетуБУ >= Дата('20130101') Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Форма.ДатаСведений < '20190101' Тогда
			ПерваяВтораяАмортизационныеГруппы = Новый Массив;
			ПерваяВтораяАмортизационныеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ПерваяГруппа"));
			ПерваяВтораяАмортизационныеГруппы.Добавить(ПредопределенноеЗначение("Перечисление.АмортизационныеГруппы.ВтораяГруппа"));
			
			Если ПерваяВтораяАмортизационныеГруппы.Найти(Объект.АмортизационнаяГруппа) <> Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли НЕ Объект.НедвижимоеИмущество Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТекстПроДокументы()

	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ДокументПринятияКУчетуБУПредставление = НСтр("ru = 'Ввести документ принятия к учету'");
		ПринятоКУчетуБУ = '00010101';
	Иначе
		ДокументПринятияКУчетуБУПредставление = Строка(ДокументПринятияКУчетуБУ);
		ИмяТипаДокументаПринятияКУчету = ДокументПринятияКУчетуБУ.Метаданные().Имя;
	КонецЕсли;
	
	Если ДокументСнятияСУчетаБУ = Неопределено Тогда
		ДокументСнятияСУчетаБУПредставление = НСтр("ru = 'Ввести документ списания'");
		СнятоСУчетаБУ = '00010101';
	Иначе
		ДокументСнятияСУчетаБУПредставление = Строка(ДокументСнятияСУчетаБУ);
		ИмяТипаДокументаСнятияСУчета = ДокументСнятияСУчетаБУ.Метаданные().Имя;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстПроИмущественныеНалоги()
	
	ЗаполнитьТекстПроНалогНаИмущество();
	
	Если Объект.ГруппаОС = Перечисления.ГруппыОС.ТранспортныеСредства Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", КонецДня(ДатаСведений));
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияТранспортныхСредствСрезПоследних.Период КАК Период,
		|	РегистрацияТранспортныхСредствСрезПоследних.ВключатьВНалоговуюБазу КАК ВключатьВНалоговуюБазу
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК РегистрацияТранспортныхСредствСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ВключатьВНалоговуюБазу Тогда
				ТранспортныйНалог = СтрШаблон(НСтр("ru = 'Поставлено на учет %1'"), Формат(Выборка.Период, "ДЛФ=D"));
			Иначе
				ТранспортныйНалог = СтрШаблон(НСтр("ru = 'Снято с учета %1'"), Формат(Выборка.Период, "ДЛФ=D"));
			КонецЕсли;
			ПоставитьНаУчет = Ложь;
		Иначе
			ТранспортныйНалог = НСтр("ru = 'Поставить на учет'");
			ПоставитьНаУчет = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ГруппаОС = Перечисления.ГруппыОС.ЗемельныеУчастки Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений", КонецДня(ДатаСведений));
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияЗемельныхУчастковСрезПоследних.Период КАК Период,
		|	РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу КАК ВключатьВНалоговуюБазу
		|ИЗ
		|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК РегистрацияЗемельныхУчастковСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ВключатьВНалоговуюБазу Тогда
				ЗемельныйНалог = СтрШаблон(НСтр("ru = 'Поставлено на учет %1'"), Формат(Выборка.Период, "ДЛФ=D"));
			Иначе
				ЗемельныйНалог = СтрШаблон(НСтр("ru = 'Снято с учета %1'"), Формат(Выборка.Период, "ДЛФ=D"));
			КонецЕсли;
			ПоставитьНаУчет = Ложь;
		Иначе
			ЗемельныйНалог = НСтр("ru = 'Поставить на учет'");
			ПоставитьНаУчет = Истина;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстПроНалогНаИмущество()
	
	НалогНаИмущество = "";
	
	Если ОбъектНалогообложенияНалогомНаИмуществоОрганизаций(ЭтотОбъект) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Объект.Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений",     КонецДня(ДатаСведений));
		Запрос.УстановитьПараметр("Организация",      Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.ДвижимоеИмуществоПодлежащееНалогообложению КАК ДвижимоеИмуществоПодлежащееНалогообложению,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.ПорядокНалогообложения КАК ПорядокНалогообложения,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.ПостановкаНаУчетВНалоговомОргане КАК ПостановкаНаУчетВНалоговомОргане,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.СниженнаяНалоговаяСтавка КАК СниженнаяНалоговаяСтавка,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.НалоговаяБаза КАК НалоговаяБаза,
		|	ПРЕДСТАВЛЕНИЕ(СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.НалоговыйОрган) КАК НалоговыйОрган,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.КодВидаИмущества КАК КодВидаИмущества,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.КодПоОКТМО КАК КодПоОКТМО,
		|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка, 2.2) КАК ОбщаяНалоговаяСтавка,
		|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних.НалоговаяСтавка КАК НалоговаяСтавка
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(
		|			&ДатаСведений,
		|			Организация = &Организация
		|				И ОсновноеСредство = &ОсновноеСредство) КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствамСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&ДатаСведений, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних
		|		ПО (ИСТИНА)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ПорядокНалогообложения = Перечисления.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению Тогда
				НалогНаИмущество = НСтр("ru = 'Не признается объектом налогообложения'");
			Иначе
				Если Выборка.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО Тогда
					НалогНаИмущество = СтрШаблон(НСтр("ru = 'Постановка на учет по месту нахождения организации с другим кодом по ОКТМО (%1)'"),
						СокрЛП(Выборка.КодПоОКТМО));
				ИначеЕсли Выборка.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане Тогда
					НалогНаИмущество = СтрШаблон(НСтр("ru = 'Постановка на учет в другом налоговом органе (%1)'"),
						СокрЛП(Выборка.НалоговыйОрган));
				КонецЕсли;
				Если Выборка.НалоговаяБаза = Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость Тогда
					НалогНаИмущество = НалогНаИмущество + НСтр("ru = ', облагается по кадастровой стоимости'");
				КонецЕсли;
				Если Выборка.НалоговаяБаза = Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость 
					ИЛИ Выборка.КодВидаИмущества <> "03" Тогда
					НалогНаИмущество = НалогНаИмущество + СтрШаблон(НСтр("ru = ', код вида имущества %1'"), Выборка.КодВидаИмущества);
				КонецЕсли;
				Если Выборка.ДвижимоеИмуществоПодлежащееНалогообложению Тогда
					НалогНаИмущество = НалогНаИмущество + СтрШаблон(НСтр("ru = ', движимое имущество, облагаемое по общей ставке %1'"),
				                                                    СокрЛП(Выборка.ОбщаяНалоговаяСтавка)) + "%";
				КонецЕсли;
				Если Выборка.ПорядокНалогообложения = Перечисления.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения Тогда
					НалогНаИмущество = НалогНаИмущество + СтрШаблон(НСтр("ru = ', освобождается от налогообложения, код льготы %1'"),
				                                                    Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
				ИначеЕсли Выборка.ПорядокНалогообложения = Перечисления.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке Тогда
					НалогНаИмущество = НалогНаИмущество + СтрШаблон(НСтр("ru = ', облагается по сниженной ставке %1'"), 
				                                                    СокрЛП(Выборка.СниженнаяНалоговаяСтавка)) + "%";
				ИначеЕсли (Выборка.НалоговаяБаза = Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость
				      ИЛИ Выборка.ПостановкаНаУчетВНалоговомОргане = Перечисления.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				      И НЕ Выборка.ДвижимоеИмуществоПодлежащееНалогообложению Тогда
					НалогНаИмущество = НалогНаИмущество + СтрШаблон(НСтр("ru = ', ставка %1'"), 
				                                                    СокрЛП(Выборка.НалоговаяСтавка)) + "%";
				КонецЕсли;
				
				Если Лев(НалогНаИмущество, 2) = ", " Тогда
					НалогНаИмущество = ВРег(Сред(НалогНаИмущество, 3,1)) + Сред(НалогНаИмущество, 4);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(НалогНаИмущество) Тогда
			
			НалогНаИмущество = НСтр("ru = 'Особенности не установлены'");
			
			Если ПрименяетсяУСН Тогда
				НалогНаИмущество = НалогНаИмущество + НСтр("ru = ', не признается объектом налогообложения'");
			Иначе
				Если ДатаСведений >= '20150101' И ДатаСведений < '20180101'
				   И НЕ Объект.НедвижимоеИмущество И ПринятоКУчетуБУ >= Дата('20130101') Тогда
					
					НалогНаИмущество = НалогНаИмущество + НСтр("ru = ', освобождается от налогообложения, код льготы 2010257'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		НалогНаИмущество = НСтр("ru = 'Не признается объектом налогообложения'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы       = Форма.Элементы;
	ПрименяетсяУСН = Форма.ПрименяетсяУСН;
	ЭтоЮрЛицо      = Форма.ЭтоЮрЛицо;

	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	Элементы.ГруппаСведенияБУ.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.ГруппаСведенияНУ.Видимость = ПользовательУправляетСчетамиУчета;
	Элементы.ГруппаСведенияУСН.Видимость = ПользовательУправляетСчетамиУчета;
	
	ОбъектНалогообложенияНалогомНаИмуществоОрганизаций = ОбъектНалогообложенияНалогомНаИмуществоОрганизаций(Форма);
	Элементы.НалогНаИмуществоГиперссылка.Видимость = ЭтоЮрЛицо И ОбъектНалогообложенияНалогомНаИмуществоОрганизаций;
	Элементы.НалогНаИмуществоНадпись.Видимость = ЭтоЮрЛицо И Не ОбъектНалогообложенияНалогомНаИмуществоОрганизаций;
	
	Элементы.ТранспортныйНалог.Видимость = ЭтоЮрЛицо
		И Форма.Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ТранспортныеСредства");
	
	Элементы.ЗемельныйНалог.Видимость = ЭтоЮрЛицо
		И Форма.Объект.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки");
	
	НачислениеАмортизации = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
	
	Элементы.ГруппаСпособОтраженияРасходовПоАмортизации.Видимость = ПользовательУправляетСчетамиУчета И НачислениеАмортизации;
	
	КлассификацияУстановитьЗаголовок(Форма);
	
	Если НЕ ПользовательУправляетСчетамиУчета Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОтражениеВБУ.Видимость = НЕ Форма.ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось;
	Элементы.ДекорацияОсновноеСредствоВБухгалтерскомУчетеНеОтражалось.Видимость = Форма.ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось;

	СтоимостьНеПогашается = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается");
	НачислениеИзноса = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса");
	НачислениеИзносаПоЕНАОФ = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ");
	СписаниеПриПринятииКУчету = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету");
	ПорядокПогашенияСтоимостиОСНеУказан = Форма.ПорядокПогашенияСтоимостиБУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.ПустаяСсылка");
		
	Линейный = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
	ПоЕНАОФ = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ");
	ПоЕНАОФНа1000кмПробега = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега");
	ПоСуммеЧиселЛетИспользования = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования");
	ПропорциональноОбъемуПродукции = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции");
	УменьшаемогоОстатка = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
	СпособНачисленияАмортизацииБУНеУказан = Форма.СпособНачисленияАмортизацииБУ 
		= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка");
		
	Элементы.СчетНачисленияАмортизацииБУ.Видимость = НачислениеАмортизации;
	Элементы.ТекАмортизацияБУ.Видимость = НачислениеАмортизации;
	Элементы.СпособНачисленияАмортизацииБУ.Видимость = НачислениеАмортизации;
	Элементы.ГруппаСрокИспользованияБУ.Видимость = НачислениеАмортизации И НЕ СпособНачисленияАмортизацииБУНеУказан;
	Элементы.ГруппаКоэффициентУскоренияБУ.Видимость = НачислениеАмортизации И УменьшаемогоОстатка;
	Элементы.ГруппаПроцентГодовойАмортизацииБУ.Видимость = НачислениеАмортизации И (ПоЕНАОФ ИЛИ ПоЕНАОФНа1000кмПробега);
	Элементы.ГруппаГодовойГрафик.Видимость = НачислениеАмортизации 
		И (Линейный ИЛИ УменьшаемогоОстатка ИЛИ ПоСуммеЧиселЛетИспользования ИЛИ ПоЕНАОФ);
	Элементы.ПараметрВыработкиБУ.Видимость = НачислениеАмортизации И (ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега);
	Элементы.ГруппаОбъемРаботБУ.Видимость = НачислениеАмортизации И (ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега);
	
	Элементы.СчетНачисленияИзноса.Видимость = НачислениеИзноса ИЛИ НачислениеИзносаПоЕНАОФ;
	Элементы.ТекИзносБУ.Видимость = НачислениеИзноса ИЛИ НачислениеИзносаПоЕНАОФ;
	
	Элементы.ГруппаСведенияНУ.Видимость = НЕ ПрименяетсяУСН;
	Если Не ПрименяетсяУСН Тогда
		Элементы.ГруппаОтражениеВНУ.Видимость = НЕ Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось;
		Элементы.ДекорацияОсновноеСредствоВНалоговомУчетеНеОтражалось.Видимость = Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось;
	КонецЕсли;
	
	Элементы.ГруппаАмортизацияНУ.Видимость = НЕ ПрименяетсяУСН И НЕ Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось;
	Если Не ПрименяетсяУСН Тогда
		НачислениеАмортизации = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		ВключениеВРасходыПриПринятииКУчету = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
		СтоимостьНеВключаетсяВРасходы = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
			= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
			
		Элементы.ГруппаНачислениеАмортизацииНУ.Видимость = НачислениеАмортизации;
	КонецЕсли;
	
	ПрименяетсяУСНДоходыМинусРасходы = Форма.ПрименяетсяУСНДоходыМинусРасходы;
	
	Элементы.ГруппаСведенияУСН.Видимость = ПрименяетсяУСНДоходыМинусРасходы;
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		Элементы.ГруппаОтражениеВУСН.Видимость = НЕ Форма.ОсновноеСредствоВНалоговомУчетеУСННеОтражалось;
		Элементы.ДекорацияОсновноеСредствоВНалоговомУчетеУСННеОтражалось.Видимость = Форма.ОсновноеСредствоВНалоговомУчетеУСННеОтражалось;
		
		Элементы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость = Форма.ДатаСведений >= '20060101';
	КонецЕсли;
	
	БухгалтерскийУчетУстановитьЗаголовок(Форма);
	НалоговыйУчетУстановитьЗаголовок(Форма);
	НалоговыйУчетУСНУстановитьЗаголовок(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодсказкуКода(Код, Наименование)

	Элементы[Код].РасширеннаяПодсказка.Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект[Код], Наименование);

КонецПроцедуры

&НаСервере
Процедура ОбновитьСведения()
	
	ЗаполнитьОписания();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияИмущественныеНалоги()
	
	ЗаполнитьТекстПроИмущественныеНалоги();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияНалогНаИмущество()
	
	ЗаполнитьТекстПроНалогНаИмущество();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически(Форма)

	Если ПустаяСтрока(Форма.Объект.НаименованиеПолное)
	 ИЛИ Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование Тогда
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		Форма.ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросВводПринятияКУчетуПослеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда // Записать новый объект, чтобы его можно было поместить в документ
			ОткрытьФормуПринятиеКУчетуОС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПринятиеКУчетуОС()

	ПараметрыОткрытия = Новый Структура;
	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ПараметрыОткрытия.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.ПринятиеКУчетуОС.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
	Иначе
		ПараметрыОткрытия.Вставить("Ключ", ДокументПринятияКУчетуБУ);
		ОткрытьФорму("Документ." + ИмяТипаДокументаПринятияКУчету + ".ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;

	ОбновитьСведения();

КонецПроцедуры

&НаКлиенте
Процедура ВопросВводСнятиеСУчетаОСПослеЗаписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуСписаниеОС();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписаниеОС()

	ПараметрыФормы = Новый Структура;
	Если ДокументСнятияСУчетаБУ = Неопределено Тогда
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.СписаниеОС.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ПараметрыФормы.Вставить("Ключ", ДокументСнятияСУчетаБУ);
		ОткрытьФорму("Документ." + ИмяТипаДокументаСнятияСУчета +".ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

	ОбновитьСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборКодаПоОКОФ(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СтарыйОКОФ 					= Объект.КодПоОКОФ;
	СтараяАмортизационнаяГруппа = Объект.АмортизационнаяГруппа;
	
	КодОКОФ 				= ВыбранноеЗначение.ОКОФ;
	АмортизационнаяГруппа 	= ВыбранноеЗначение.АмортизационнаяГруппа;
	
	Объект.КодПоОКОФ = КодОКОФ;
	Объект.АмортизационнаяГруппа = АмортизационнаяГруппа;
	
	Модифицированность = Модифицированность
		ИЛИ СтарыйОКОФ <> КодОКОФ
		ИЛИ СтараяАмортизационнаяГруппа <> АмортизационнаяГруппа;
		
	ЗаполнитьПодсказкуКода("КодПоОКОФ", "НаименованиеГруппировки");

КонецПроцедуры

&НаСервереБезКонтекста
Функция КодПоОКОФПриИзмененииНаСервере(КодПоОКОФ)
	
	Возврат РегистрыСведений.АмортизационныеГруппыОКОФ.ПолучитьАмортизационнуюГруппу(КодПоОКОФ);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КлассификацияУстановитьЗаголовок(Форма)
	
	КлассификацияЗаголовок = НСтр("ru='Классификация'");
	Если ЗначениеЗаполнено(Форма.Объект.КодПоОКОФ) ИЛИ ЗначениеЗаполнено(Форма.Объект.АмортизационнаяГруппа)
		ИЛИ ЗначениеЗаполнено(Форма.Объект.ШифрПоЕНАОФ) ИЛИ ЗначениеЗаполнено(Форма.Объект.КодОКВЭД) ИЛИ ЗначениеЗаполнено(Форма.Объект.КодОКВЭД2) Тогда
		КлассификацияЗаголовок = КлассификацияЗаголовок + ": ";
		Если ЗначениеЗаполнено(Форма.Объект.КодПоОКОФ) Тогда
			КлассификацияЗаголовок = КлассификацияЗаголовок + НСтр("ru='ОКОФ '") + СокрЛП(Форма.Объект.КодПоОКОФ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.АмортизационнаяГруппа) Тогда
			КлассификацияЗаголовок = КлассификацияЗаголовок + НСтр("ru=', '") + СокрЛП(Форма.Объект.АмортизационнаяГруппа);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.ШифрПоЕНАОФ) Тогда
			КлассификацияЗаголовок = КлассификацияЗаголовок + НСтр("ru=', ЕНАОФ '") + СокрЛП(Форма.Объект.ШифрПоЕНАОФ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодОКВЭД) Тогда
			КлассификацияЗаголовок = КлассификацияЗаголовок + НСтр("ru=', ОКВЭД '")  + СокрЛП(Форма.Объект.КодОКВЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодОКВЭД2) Тогда
			КлассификацияЗаголовок = КлассификацияЗаголовок + НСтр("ru=', ОКВЭД2 '")  + СокрЛП(Форма.Объект.КодОКВЭД2);
		КонецЕсли;
		КлассификацияЗаголовок = СтрЗаменить(КлассификацияЗаголовок, ": ,", ":");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаКлассификация", КлассификацияЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура БухгалтерскийУчетУстановитьЗаголовок(Форма)
	
	БухгалтерскийУчетЗаголовок = НСтр("ru='Бухгалтерский учет'");
	
	Если Форма.ОсновноеСредствоВБухгалтерскомУчетеНеОтражалось Тогда
		БухгалтерскийУчетЗаголовок = БухгалтерскийУчетЗаголовок + НСтр("ru=': Основное средство в бухгалтерском учете не отражалось'");
	ИначеЕсли ЗначениеЗаполнено(Форма.СчетУчетаБУ) ИЛИ ЗначениеЗаполнено(Форма.СчетНачисленияАмортизацииБУ)
		ИЛИ ЗначениеЗаполнено(Форма.ПорядокПогашенияСтоимостиБУ) ИЛИ ЗначениеЗаполнено(Форма.СпособНачисленияАмортизацииБУ)
		ИЛИ ЗначениеЗаполнено(Форма.РасшифровкаСрокаПолезногоИспользованияБУ) Тогда
		БухгалтерскийУчетЗаголовок = БухгалтерскийУчетЗаголовок + ": ";
		Если ЗначениеЗаполнено(Форма.СчетУчетаБУ) Тогда
			БухгалтерскийУчетЗаголовок = БухгалтерскийУчетЗаголовок + НСтр("ru=', счет учета '") + СокрЛП(Форма.СчетУчетаБУ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.СчетНачисленияАмортизацииБУ) Тогда
			БухгалтерскийУчетЗаголовок = БухгалтерскийУчетЗаголовок + НСтр("ru=', счет амортизации '") + СокрЛП(Форма.СчетНачисленияАмортизацииБУ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.ПорядокПогашенияСтоимостиБУ) Тогда
			БухгалтерскийУчетЗаголовок = БухгалтерскийУчетЗаголовок + НСтр("ru=', '") + НРег(СокрЛП(Форма.ПорядокПогашенияСтоимостиБУ));
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.СпособНачисленияАмортизацииБУ) Тогда
			БухгалтерскийУчетЗаголовок = БухгалтерскийУчетЗаголовок + НСтр("ru=', '")  + НРег(СокрЛП(Форма.СпособНачисленияАмортизацииБУ));
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.СрокИспользованияБУ) Тогда
			БухгалтерскийУчетЗаголовок = БухгалтерскийУчетЗаголовок + НСтр("ru=', СПИ '")  + Форма.РасшифровкаСрокаПолезногоИспользованияБУ;
		КонецЕсли;
		БухгалтерскийУчетЗаголовок = СтрЗаменить(БухгалтерскийУчетЗаголовок, "мес. (", "");
		БухгалтерскийУчетЗаголовок = СтрЗаменить(БухгалтерскийУчетЗаголовок, ")", "");
		БухгалтерскийУчетЗаголовок = СтрЗаменить(БухгалтерскийУчетЗаголовок, ": ,", ":");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаСведенияБУ", БухгалтерскийУчетЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НалоговыйУчетУстановитьЗаголовок(Форма)
	
	НалоговыйУчетЗаголовок = НСтр("ru='Налоговый учет'");
	Если Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось Тогда
		НалоговыйУчетЗаголовок = НалоговыйУчетЗаголовок + НСтр("ru=': Основное средство в налоговом учете не отражалось'");
	ИначеЕсли ЗначениеЗаполнено(Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ) ИЛИ ЗначениеЗаполнено(Форма.РасшифровкаСрокаПолезногоИспользованияНУ)
		ИЛИ ЗначениеЗаполнено(Форма.СпецКоэффициентНУ) Тогда
		НалоговыйУчетЗаголовок = НалоговыйУчетЗаголовок + ": ";
		Если ЗначениеЗаполнено(Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
			НалоговыйУчетЗаголовок = НалоговыйУчетЗаголовок + НРег(СокрЛП(Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ));
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.СрокИспользованияНУ) Тогда
			НалоговыйУчетЗаголовок = НалоговыйУчетЗаголовок + НСтр("ru=', СПИ '") + СокрЛП(Форма.РасшифровкаСрокаПолезногоИспользованияНУ);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.СпецКоэффициентНУ) Тогда
			НалоговыйУчетЗаголовок = НалоговыйУчетЗаголовок + НСтр("ru=', специальный коэффициент '") + СокрЛП(Форма.СпецКоэффициентНУ);
		КонецЕсли;
		НалоговыйУчетЗаголовок = СтрЗаменить(НалоговыйУчетЗаголовок, "мес. (", "");
		НалоговыйУчетЗаголовок = СтрЗаменить(НалоговыйУчетЗаголовок, ")", "");
		НалоговыйУчетЗаголовок = СтрЗаменить(НалоговыйУчетЗаголовок, ": ,", ":");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаСведенияНУ", НалоговыйУчетЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НалоговыйУчетУСНУстановитьЗаголовок(Форма)
	
	НалоговыйУчетУСНЗаголовок = НСтр("ru='Налоговый учет'");
	Если Форма.ОсновноеСредствоВНалоговомУчетеНеОтражалось Тогда
		НалоговыйУчетУСНЗаголовок = НалоговыйУчетУСНЗаголовок + НСтр("ru=': Основное средство в налоговом учете (УСН) не отражалось'");
	ИначеЕсли ЗначениеЗаполнено(Форма.ПорядокВключенияСтоимостиВСоставРасходовУСН) ИЛИ ЗначениеЗаполнено(Форма.РасшифровкаСрокаПолезногоИспользованияУСН)
		ИЛИ ЗначениеЗаполнено(Форма.ДатаПриобретения) Тогда
		НалоговыйУчетУСНЗаголовок = НалоговыйУчетУСНЗаголовок + ": ";
		Если ЗначениеЗаполнено(Форма.ПорядокВключенияСтоимостиВСоставРасходовУСН) Тогда
			НалоговыйУчетУСНЗаголовок = НалоговыйУчетУСНЗаголовок + НРег(СокрЛП(Форма.ПорядокВключенияСтоимостиВСоставРасходовУСН));
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.ДатаПриобретения) Тогда
			НалоговыйУчетУСНЗаголовок = НалоговыйУчетУСНЗаголовок + НСтр("ru=', дата приобретения '") + СокрЛП(Форма.ДатаПриобретения);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.СрокИспользованияУСН) Тогда
			НалоговыйУчетУСНЗаголовок = НалоговыйУчетУСНЗаголовок + НСтр("ru=', СПИ '") + СокрЛП(Форма.РасшифровкаСрокаПолезногоИспользованияУСН);
		КонецЕсли;
		НалоговыйУчетУСНЗаголовок = СтрЗаменить(НалоговыйУчетУСНЗаголовок, "мес. (", "");
		НалоговыйУчетУСНЗаголовок = СтрЗаменить(НалоговыйУчетУСНЗаголовок, ")", "");
		НалоговыйУчетУСНЗаголовок = СтрЗаменить(НалоговыйУчетУСНЗаголовок, ": ,", ":");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаСведенияУСН", НалоговыйУчетУСНЗаголовок);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти