#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает вид регистра по имени объекта и по варианту отчета.
//
// Параметры:
//   ПолноеИмяОбъектаМетаданных - Строка - например, "Отчет.КарточкаСчета".
//   ВариантОтчета              - Строка - имя варианта.
//
// Возвращаемое значение:
//   СправочникСсылка.ВидыРегистровУчета - вид регистра.
//
Функция ПолучитьВидРегистраБухгалтерскогоУчетаДляОтчета(ПолноеИмяОбъектаМетаданных, ВариантОтчета = "") Экспорт
	
	Если ВариантОтчета = Неопределено Тогда
		ВариантОтчета = "";
	КонецЕсли;
	
	ИдентификаторОтчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъектаМетаданных);
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Отчет", ИдентификаторОтчета);
	Запрос.Параметры.Вставить("ВариантОтчета", ВариантОтчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРегистровУчета.Ссылка
	|ИЗ
	|	Справочник.ВидыРегистровУчета КАК ВидыРегистровУчета
	|ГДЕ
	|	ВидыРегистровУчета.Отчет = &Отчет
	|	И ВидыРегистровУчета.ВариантОтчета = &ВариантОтчета
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ВидыРегистровУчета.ПустаяСсылка();
	
КонецФункции

// Заполняет виды регистров учета при обновлении конфигурации.
//
Процедура ЗаполнитьВидыРегистровУчета() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Стандартные отчеты
	ВидРегистра = Справочники.ВидыРегистровУчета.АнализСубконто.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.АнализСубконто);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "АнализСубконто";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.АнализСчета.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.АнализСчета);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "АнализСчета";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.ГлавнаяКнига.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ГлавнаяКнига);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.КарточкаСубконто.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.КарточкаСубконто);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "КарточкаСубконто";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.КарточкаСчета.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.КарточкаСчета);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "КарточкаСчета";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.ОборотноСальдоваяВедомость.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ОборотноСальдоваяВедомость);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "ОборотноСальдоваяВедомость";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.ОборотноСальдоваяВедомостьПоСчету.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ОборотноСальдоваяВедомостьПоСчету);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "ОборотноСальдоваяВедомостьПоСчету";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.ОборотыМеждуСубконто.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ОборотыМеждуСубконто);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "ОборотыМеждуСубконто";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.ОборотыСчета.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ОборотыСчета);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "ОборотыСчета";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.ОтчетПоПроводкам.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ОтчетПоПроводкам);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "ОтчетПоПроводкам";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СводныеПроводки.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СводныеПроводки);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "СводныеПроводки";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.ШахматнаяВедомость.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.ШахматнаяВедомость);
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ВидРегистра.ВариантОтчета = "ШахматнаяВедомость";
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	// Регистры учета малых предприятий
	Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.РегистрыБУСубъектовМалогоПредпринимательства);
	ВариантыНастроек = Отчеты.РегистрыБУСубъектовМалогоПредпринимательства.ВариантыНастроек();
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Родитель", Справочники.ВидыРегистровУчета.РегистрыБУСубъектовМалогоПредпринимательства);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРегистровУчета.ИмяПредопределенныхДанных,
	|	ВидыРегистровУчета.Ссылка
	|ИЗ
	|	Справочник.ВидыРегистровУчета КАК ВидыРегистровУчета
	|ГДЕ
	|	ВидыРегистровУчета.Родитель = &Родитель";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВидРегистра = Выборка.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИмяПредопределенныхДанных) Тогда
			ВидРегистра.ПометкаУдаления = Истина;
			ВидРегистра.Отчет = Отчет;
			Если СокрЛП(ВидРегистра.ВариантОтчета) = "" Тогда
				ВидРегистра.ВариантОтчета   = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			Если СокрЛП(ВидРегистра.Наименование) = "" Тогда
				ВидРегистра.Наименование = ВидРегистра.ВариантОтчета;
			КонецЕсли;
			
		Иначе
			ВидРегистра.Отчет = Отчет;
			ВидРегистра.ВариантОтчета = ВидРегистра.ИмяПредопределенныхДанных;
			НаименованиеВарианта = ПолучитьНаименованиеПоВарианту(ВидРегистра.ИмяПредопределенныхДанных, ВариантыНастроек);
			Если НаименованиеВарианта <> "" Тогда
				ВидРегистра.Наименование  = НаименованиеВарианта;
			КонецЕсли;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
		
	КонецЦикла;
	
	// Справки расчеты
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетАмортизации.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетАмортизации);
	ВидРегистра.ВариантОтчета = "Амортизация";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетПризнаниеРасходовПоОСПоступившимВЛизинг.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетПризнаниеРасходовПоОСПоступившимВЛизинг);
	ВидРегистра.ВариантОтчета = "ПризнаниеРасходовПоОСПоступившимВЛизинг";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетКалькуляцияСебестоимости.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетКалькуляцияСебестоимости);
	ВидРегистра.ВариантОтчета = "КалькуляцияСебестоимости";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетНалогаНаПрибыль.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетНалогаНаПрибыль);
	ВидРегистра.ВариантОтчета = "РасчетНалогаНаПрибыль";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетПереоценкаВалютныхСредств.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетПереоценкаВалютныхСредств);
	ВидРегистра.ВариантОтчета = "ПереоценкаВалютныхСредств";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетПересчетСтоимостиОтложенныхНалоговыхАктивовИОбязательств);
	ВидРегистра.ВариантОтчета = "СправкаРасчетПостоянныхИВременныхРазниц";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетПостоянныхИВременныхРазниц.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетПостоянныхИВременныхРазниц);
	ВидРегистра.ВариантОтчета = "СправкаРасчетПостоянныхИВременныхРазниц";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетРаспределенияКосвенныхРасходов.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетРаспределенияКосвенныхРасходов);
	ВидРегистра.ВариантОтчета = "СправкаРасчетРаспределенияКосвенныхРасходов";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетРезервыПоСомнительнымДолгам.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетРезервыПоСомнительнымДолгам);
	ВидРегистра.ВариантОтчета = "СомнительныеДолги";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетСебестоимостиПродукции.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетСебестоимостиПродукции);
	ВидРегистра.ВариантОтчета = "СебестоимостьВыпущеннойПродукцииИОказанныхУслугПроизводственногоХарактера";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетСписаниеРБП.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетСписаниеРБП);
	ВидРегистра.ВариантОтчета = "ВариантНастройкиРБП";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетСписанияКосвенныхРасходов.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетСписанияКосвенныхРасходов);
	ВидРегистра.ВариантОтчета = "СправкаРасчетСписанияКосвенныхРасходов";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетТранспортныхРасходов.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетТранспортныхРасходов);
	ВидРегистра.ВариантОтчета = "ТранспортныеРасходы";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетТорговойНаценки.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетТорговойНаценки);
	ВидРегистра.ВариантОтчета = "СправкаРасчетТорговойНаценки";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетНалогаНаИмущество.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетНалогаНаИмущество);
	ВидРегистра.ВариантОтчета = "РасчетНалогаНаИмущество";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетТранспортногоНалога.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетТранспортногоНалога);
	ВидРегистра.ВариантОтчета = "РасчетТранспортногоНалога";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетЗемельногоНалога.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетЗемельногоНалога);
	ВидРегистра.ВариантОтчета = "РасчетЗемельногоНалога";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетТорговогоСбора.ПолучитьОбъект();
	ВидРегистра.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СправкаРасчетТорговогоСбора);
	ВидРегистра.ВариантОтчета = "РасчетТорговогоСбора";
	ВидРегистра.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидРегистра.Отчет, "Синоним");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидРегистра, Истина);
	
КонецПроцедуры

// Возвращает поля естественного ключа.
//
// Возвращаемое значение:
//   ПоляЕстественногоКлюча - Массив - содержит поля:
//     * Отчет         - Строка - имя отчета.
//     * ВариантОтчета - Строка - имя варианта.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("Отчет");
	Результат.Добавить("ВариантОтчета");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНаименованиеПоВарианту(ИмяВарианта, ВариантыНастроек)
	
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Если Вариант.Имя = ИмяВарианта Тогда
			Возврат Вариант.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецЕсли
