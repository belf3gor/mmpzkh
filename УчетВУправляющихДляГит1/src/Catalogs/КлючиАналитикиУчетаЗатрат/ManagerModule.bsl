#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция получает ключ аналитики учета затрат для текущего документа.
//
// Параметры:
//	РеквизитыДокумента - Структура или ВыборкаИзРезультатаЗапроса - Данные документа
//
// Возвращаемое значение:
//	СправочникСсылка.КлючиАналитикиУчетаЗатрат - Найденный ключ аналитики учета затрат
//
Функция КлючиАналитикиУчетаЗатратДокумента(РеквизитыДокумента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураКлючейАналитикЗатрат = СтруктураАналитикУчетаЗатрат(РеквизитыДокумента);
	
	МенеджерЗаписи = РегистрыСведений.АналитикаУчетаЗатрат.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураКлючейАналитикЗатрат);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Результат = МенеджерЗаписи.КлючАналитики;
	Иначе
		Результат = СоздатьКлючАналитики(СтруктураКлючейАналитикЗатрат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция формирует строку наименования ключа аналитики учета затрат.
//
// Параметры:
//	СправочникОбъект - Ключ аналитики учета затрат, для которой необходимо определить наименовние
//
// Возвращаемое значение:
//	Строка - Наименование ключа аналитики учета затрат
//
Функция ПолучитьНаименованиеКлючаАналитикиУчетаЗатрат(СправочникОбъект) Экспорт
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(СправочникОбъект.СчетЗатрат) Тогда
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СправочникОбъект.СчетЗатрат);
		
		Наименование = Наименование + СвойстваСчета.Код;
		
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Если ЗначениеЗаполнено(СправочникОбъект.Подразделение) Тогда
				ТекстСтроки		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.Подразделение, "Наименование");
				Наименование	= Наименование + ", " + ТекстСтроки;
			Иначе
				Наименование 	= Наименование + ", <...>";
			КонецЕсли;
		КонецЕсли;
		
		Для Н = 1 По СвойстваСчета.КоличествоСубконто Цикл
			ЗначениеСубконто = СправочникОбъект["Субконто" + Н];
			Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
				ПредставлениеСубконто = "";
				ТипСубконто = ТипЗнч(ЗначениеСубконто);
				Если Справочники.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипСубконто) Тогда
					ПредставлениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеСубконто, "Представление");
				Иначе
					ПредставлениеСубконто = Строка(ЗначениеСубконто);
				КонецЕсли;
				
				Наименование = Наименование + ", " + ПредставлениеСубконто;
			Иначе
				Наименование = Наименование + ", <...>";
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Наименование = Наименование + "<...>";
	КонецЕсли;
	
	Возврат Наименование;

КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Прочее

Функция СтруктураАналитикУчетаЗатрат(РеквизитыДокумента)
	
	СтруктураАналитикУчетаЗатрат = Новый Структура("
		|Организация,
		|СчетЗатрат,
		|Подразделение,
		|Субконто1,
		|Субконто2,
		|Субконто3,
		|");
	СтруктураАналитикУчетаЗатрат.Организация 	= РеквизитыДокумента.Организация;	
	СтруктураАналитикУчетаЗатрат.СчетЗатрат 	= РеквизитыДокумента.СчетЗатрат;
	СтруктураАналитикУчетаЗатрат.Подразделение 	= РеквизитыДокумента.Подразделение;
	СтруктураАналитикУчетаЗатрат.Субконто1 		= ?(ЗначениеЗаполнено(РеквизитыДокумента.Субконто1), РеквизитыДокумента.Субконто1, Неопределено);
    СтруктураАналитикУчетаЗатрат.Субконто2 		= ?(ЗначениеЗаполнено(РеквизитыДокумента.Субконто2), РеквизитыДокумента.Субконто2, Неопределено);
	СтруктураАналитикУчетаЗатрат.Субконто3 		= ?(ЗначениеЗаполнено(РеквизитыДокумента.Субконто3), РеквизитыДокумента.Субконто3, Неопределено);
		
	Возврат СтруктураАналитикУчетаЗатрат;
	
КонецФункции

Функция НайтиАналитикуУчетаЗатрат(СтруктураАналитикУчетаЗатрат)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ключ.Организация	КАК Организация,
	|	Ключ.СчетЗатрат		КАК СчетЗатрат,
	|	Ключ.Подразделение	КАК Подразделение,
	|	Ключ.Субконто1		КАК Субконто1,
	|	Ключ.Субконто2		КАК Субконто2,
	|	Ключ.Субконто3		КАК Субконто3,
	|	Ключ.Наименование	КАК Наименование,
	|	Ключ.Ссылка 		КАК Ссылка
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаЗатрат КАК Ключ
	|ГДЕ
	|	Ключ.Организация		= &Организация
	|	И Ключ.СчетЗатрат		= &СчетЗатрат
	|	И Ключ.Подразделение	= &Подразделение
	|	И Ключ.Субконто1 		= &Субконто1
	|	И Ключ.Субконто2 		= &Субконто2
	|	И Ключ.Субконто3 		= &Субконто3
	|	И НЕ Ключ.ПометкаУдаления
	|");
	
	Запрос.УстановитьПараметр("Организация",	СтруктураАналитикУчетаЗатрат.Организация);
	Запрос.УстановитьПараметр("СчетЗатрат",		СтруктураАналитикУчетаЗатрат.СчетЗатрат);
	Запрос.УстановитьПараметр("Подразделение",	СтруктураАналитикУчетаЗатрат.Подразделение);
	Запрос.УстановитьПараметр("Субконто1",		СтруктураАналитикУчетаЗатрат.Субконто1);
	Запрос.УстановитьПараметр("Субконто2",		СтруктураАналитикУчетаЗатрат.Субконто2);
	Запрос.УстановитьПараметр("Субконто3",		СтруктураАналитикУчетаЗатрат.Субконто3);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	Иначе
		Результат = Справочники.КлючиАналитикиУчетаЗатрат.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция СоздатьКлючАналитики(ПараметрыАналитики)

	МенеджерЗаписи = РегистрыСведений.АналитикаУчетаЗатрат.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыАналитики);
		
	Результат = НайтиАналитикуУчетаЗатрат(ПараметрыАналитики);
	
	// Создание нового ключа аналитики.
	Если Не ЗначениеЗаполнено(Результат) Тогда
		СправочникОбъект = Справочники.КлючиАналитикиУчетаЗатрат.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыАналитики);
		СправочникОбъект.Наименование = ПолучитьНаименованиеКлючаАналитикиУчетаЗатрат(СправочникОбъект);
		СправочникОбъект.Записать();

		Результат = СправочникОбъект.Ссылка;
	КонецЕсли;

	МенеджерЗаписи.КлючАналитики = Результат;
	МенеджерЗаписи.Записать(Ложь);

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Замена дублей ключей аналитики

Процедура ЗаменитьДублиКлючейАналитики() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка 			КАК Ссылка,
	|	ДанныеСправочника.ПометкаУдаления 	КАК ПометкаУдаления,
	|	Аналитика.КлючАналитики 			КАК КлючАналитики
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаЗатрат КАК ДанныеСправочника
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК ДанныеРегистра
	|	ПО
	|		ДанныеСправочника.Ссылка = ДанныеРегистра.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК Аналитика
	|	ПО
	|		ДанныеСправочника.Организация		= Аналитика.Организация
	|		И ДанныеСправочника.СчетЗатрат		= Аналитика.СчетЗатрат
	|		И ДанныеСправочника.Подразделение	= Аналитика.Подразделение
	|		И ДанныеСправочника.Субконто1		= Аналитика.Субконто1
	|		И ДанныеСправочника.Субконто2		= Аналитика.Субконто2
	|		И ДанныеСправочника.Субконто3		= Аналитика.Субконто3
	|ГДЕ
	|	ДанныеРегистра.КлючАналитики ЕСТЬ NULL
	|");
	
	// Сформируем соответствие ключей аналитики.
	СоответствиеАналитик = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеАналитик.Вставить(Выборка.Ссылка, Выборка.КлючАналитики);
			
			Если Не Выборка.ПометкаУдаления Тогда
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					СправочникОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				Исключение
				КонецПопытки;
			КонецЕсли;

		КонецЦикла;
		
		ОбщегоНазначенияБП.ЗаменитьСсылки(СоответствиеАналитик);
	КонецЕсли;
		
КонецПроцедуры



#КонецЕсли