#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПечататьКарточкуЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаЭД");
	Если ПечататьКарточкуЭД Тогда
		СинонимМакета = НСтр("ru = 'Карточка электронного документа'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КарточкаЭД",
			СинонимМакета,
			ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, "КарточкаЭД"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщийМакет.ПФ_MXL_КарточкаЭД_%1",
				ОбщегоНазначения.КодОсновногоЯзыка()), СинонимМакета);
	КонецЕсли;
	
	ПечататьЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭД");
	Если ПечататьЭД Тогда
		ТабДок = ПечатьЭД(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
		СинонимМакета = НСтр("ru = 'Электронный документ'");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭД", СинонимМакета, ТабДок,,,
			СинонимМакета);
		Если ТипЗнч(ТабДок) = Тип("Строка") Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ТабДок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик обновления БЭД 1.1.13.4
// Заполняет дату окончания действия сертификата.
//
Процедура ЗаполнитьНаименованиеФайла() Экспорт
	
	ЭлементСсылка = Справочники.ЭДПрисоединенныеФайлы.Выбрать();
	
	Пока ЭлементСсылка.Следующий() Цикл
		
		Попытка
			ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
			Если ЭлементОбъект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОбъект.ВладелецФайла,"ВидЭД") 
					= Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
				СтрокаУИД = ЭлементОбъект.УникальныйИД;
				Наименование = ЭлементОбъект.Наименование;
				ПозицияУИД = СтрНайти(Наименование, "_" + Лев(СтрокаУИД, 35));
				Если ПозицияУИД > 0 Тогда
					ЭлементОбъект.НаименованиеФайла = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
				КонецЕсли;
			Иначе
				ЭлементОбъект.НаименованиеФайла = ЭлементОбъект.Наименование;
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЭлементОбъект);
		Исключение
			Операция = НСтр("ru = 'Запись присоединенного файла'");
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				Операция, ТекстОшибки, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления БЭД 1.2.4.4
// Меняет текущий статус Произвольного ЭД с НеОтправлен на Сформирован.
//
Процедура ИзменитьСтатусыПроизвольныхЭДСНеОтправленНаСформирован() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусНеОтправлен
		|	И ЭДПрисоединенныеФайлы.УдалитьВидЭД = &ВидПроизвольныйЭД";
	
	Запрос.УстановитьПараметр("ВидПроизвольныйЭД", Перечисления.ВидыЭД.ПроизвольныйЭД);
	Запрос.УстановитьПараметр("СтатусНеОтправлен", Перечисления.СтатусыЭД.УдалитьНеОтправлен);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если МонопольныйРежим() Тогда
		СнятьМонопольныйРежим = Ложь;
	Иначе
		СнятьМонопольныйРежим = Истина;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СообщитьОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	Если СнятьМонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	РезультатЗапроса = ЗапросДанныхКОбработке();
	ВыгрузкаРезультата = РезультатЗапроса.Выгрузить();
	МассивСсылок = ВыгрузкаРезультата.ВыгрузитьКолонку("СсылкаНаЭД");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТаблицаЭДДляДопОбработки = Новый ТаблицаЗначений;
	ТаблицаЭДДляДопОбработки.Колонки.Добавить("СсылкаНаЭД");
	ТаблицаЭДДляДопОбработки.Колонки.Добавить("ВидЭД");
	ТаблицаЭДДляДопОбработки.Колонки.Добавить("НаправлениеЭД");
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
		Параметры.Очередь, "Справочник.ЭДПрисоединенныеФайлы");
	
	МассивСсылокДляОбработки = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивСсылокДляОбработки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	// Пока не перенесен владелец, нельзя обрабатывать документы (штатные алгоритмы обработки не рассчитывают на пустое значение).
	ОбработкаВладельцаВыполнена = ВладелецУстановленПоВсемФайлам();
	
	РезультатЗапроса = ЗапросДанныхКОбработке(МассивСсылокДляОбработки);
	ВыборкаВладельцевЭД = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВладельцевЭД.Следующий() Цикл
		НастройкаОбработана = ЗначениеЗаполнено(ВыборкаВладельцевЭД.УдалитьНастройкаЭДО)
			И ОбновлениеИнформационнойБазы.ОбъектОбработан(ВыборкаВладельцевЭД.УдалитьНастройкаЭДО).Обработан;
		
		// Если обработали еще не всех владельцев, а в текущем документе все заполнено, пропускаем его.
		Если Не ОбработкаВладельцаВыполнена И Не ВыборкаВладельцевЭД.ОбработатьВладельца Тогда
			Продолжить;
		КонецЕсли;
		
		ТребуетсяОбработкаРегистраСостояний = ВыборкаВладельцевЭД.ОбработатьТаблицуПодписания;
		
		НачатьТранзакцию();
		
		Попытка
			ТаблицаЭДДляДопОбработки.Очистить();
			НовоеСостояниеЭДО = Неопределено;
			
			ВыборкаФайлов = ВыборкаВладельцевЭД.Выбрать();
			Пока ВыборкаФайлов.Следующий() Цикл
				// Если обработали еще не всех владельцев, а в текущем документе все заполнено, пропускаем его.
				Если Не ОбработкаВладельцаВыполнена И Не ВыборкаФайлов.ОбработатьВладельца Тогда
					Продолжить;
				КонецЕсли;
				
				ЭДОбъект = Неопределено;
				ОбработатьТаблицуПодписания = ВыборкаФайлов.ОбработатьТаблицуПодписания;
				
				ЭДОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(ВыборкаФайлов.СсылкаНаЭД);
				Если ЭДОбъект.ВладелецФайла = Неопределено Тогда
					ЭДОбъект.ВладелецФайла = ЭДОбъект.УдалитьВладелецФайла;
					ЭДОбъект.ОбменДанными.Загрузка = Истина;
					ЭДОбъект.Записать();
				КонецЕсли;
				
				Если НастройкаОбработана И ОбработкаВладельцаВыполнена Тогда
					Если ВыборкаФайлов.ОбработатьУтверждение Тогда
						// Если документ успели только сформировать, то надо получить следующий статус
						Если ВыборкаФайлов.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаУтверждении Тогда
							// Это состояние будет установлено электронному документу
							НовоеСостояниеЭДО = ОбменСКонтрагентамиСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ВыборкаФайлов.СсылкаНаЭД);
							Если НовоеСостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи Тогда
								ОбработатьТаблицуПодписания = Истина;
								ТребуетсяОбработкаРегистраСостояний = Истина;
							КонецЕсли;
							
							// Запомним электронный документ и обработаем после цикла
							НоваяСтрокаДляДопОбработки = ТаблицаЭДДляДопОбработки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрокаДляДопОбработки, ВыборкаФайлов);
							
							// Вызовем переопределяемый обработчик, который должен был вызываться для этих документов при формировании.
							ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументСформирован(ВыборкаФайлов.СсылкаНаЭД);
						Иначе 
							// Если документ уже утвержден, то нужно окатить статус у файлов на "Сформирован"
							Если ЭДОбъект = Неопределено Тогда
								ЭДОбъект = ВыборкаФайлов.СсылкаНаЭД.ПолучитьОбъект();
							КонецЕсли;
							ЭДОбъект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован;
						КонецЕсли;
					КонецЕсли;
					
					Если ОбработатьТаблицуПодписания Тогда
						Если ЭДОбъект = Неопределено Тогда
							ЭДОбъект = ВыборкаФайлов.СсылкаНаЭД.ПолучитьОбъект();
						КонецЕсли;
						
						ОбменСКонтрагентамиСлужебный.ВыполнитьДействияСМаршрутамиПриОтправкеНаПодпись(ЭДОбъект);
					КонецЕсли;
					
					Если ЭДОбъект <> Неопределено Тогда
						ЭДОбъект.ОбменДанными.Загрузка = Истина;
						ЭДОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
				// Отмечаем файл как обработанный, если все владельцы уже обработаны, либо по файлу нужно было только проставить владельца.
				Если (ОбработкаВладельцаВыполнена И НастройкаОбработана)
					ИЛИ (Не ОбработатьТаблицуПодписания И Не ВыборкаФайлов.ОбработатьУтверждение)
					ИЛИ (Не ЗначениеЗаполнено(ВыборкаФайлов.НастройкаЭДО) И ОбработкаВладельцаВыполнена
						И (ВыборкаФайлов.ОбработатьТаблицуПодписания ИЛИ ВыборкаФайлов.ОбработатьУтверждение)) Тогда
					
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ВыборкаФайлов.СсылкаНаЭД);
				КонецЕсли;
			КонецЦикла;
			
			// Выполним дополнительные действия по статусам, которые раньше выполнялись при утверждении, а теперь
			// выполняются при формировании.
			Если ОбработкаВладельцаВыполнена И НастройкаОбработана Тогда
				Если ВыборкаВладельцевЭД.ОбработатьУтверждение Тогда
					ОбменСКонтрагентамиСлужебный.ВыполнитьДействияПоСтатусамПриФормированииИлиУтверждении(
						ТаблицаЭДДляДопОбработки, Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовоеСостояниеЭДО) И НовоеСостояниеЭДО <> ВыборкаВладельцевЭД.СостояниеЭДО Тогда
					ВладелецЭДОбъект = ВыборкаВладельцевЭД.ВладелецЭД.ПолучитьОбъект();
					ВладелецЭДОбъект.СостояниеЭДО = НовоеСостояниеЭДО;
					ВладелецЭДОбъект.ОбменДанными.Загрузка = Истина;
					ВладелецЭДОбъект.Записать();
				КонецЕсли;
				
				Если ТребуетсяОбработкаРегистраСостояний Тогда
					ОбменСКонтрагентамиСлужебный.ОбновитьВерсиюЭДВРегистре(ВыборкаВладельцевЭД.ВладелецЭД, 
						ЭДОбъект.ВладелецФайла.СостояниеЭДО, Новый Структура("ПредставлениеСостояния", "1"));
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать документ: %1 по причине: %2'"), 
				ВыборкаВладельцевЭД.ВладелецЭД, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Документы.ЭлектронныйДокументИсходящий, ВыборкаВладельцевЭД.ВладелецЭД, ТекстСообщения);
			
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.ЭДПрисоединенныеФайлы");
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы.
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Результат = Ложь;
	
	Если МетаданныеИОтбор.ПолноеИмя = "Справочник.ЭДПрисоединенныеФайлы" Тогда
		Результат = ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
	ИначеЕсли МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументИсходящий" 
		ИЛИ МетаданныеИОтбор.ПолноеИмя = "Документ.ЭлектронныйДокументВходящий" Тогда
		ВыборкаФайлов = ОбменСКонтрагентамиСлужебный.ПолучитьВыборкуЭДПоОтбору(
			Новый Структура("ВладелецФайла", МетаданныеИОтбор.Отбор));
			
		// Проверим по каждому присоединенному файлу, закончена ли по нему обработка.
		Пока ВыборкаФайлов.Следующий() Цикл	
			МетаданныеИОтборЭД = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(ВыборкаФайлов.Ссылка);
			Результат = ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтборЭД);
			
			Если Не Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(ВладелецФайла)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(ВладелецФайла)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Перем ВидЭД;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Не Параметры.Свойство("ТолькоПросмотр") Тогда
			Параметры.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		
		Если ТипЗнч(Параметры.Ключ.ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			ВыбраннаяФорма = "Документ.ЭлектронныйДокументВходящий.Форма.ФормаПросмотраЭД";
		Иначе
			ВыбраннаяФорма = "Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД";
		КонецЕсли;
		Параметры.Ключ = Параметры.Ключ.ВладелецФайла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииОбработчиковОбновления

Функция ЗапросДанныхКОбработке(МассивСсылокДляОбработки = Неопределено)

	Запрос = Новый Запрос;
	
	// Общие параметры
	ОсновныеТипыЭлементов = ОбменСКонтрагентамиСлужебный.ОсновныеТипыЭД();
	Запрос.УстановитьПараметр("ОсновныеТипыЭлементов", ОсновныеТипыЭлементов);
	Запрос.УстановитьПараметр("СтатусЭДУтвержден", Перечисления.СтатусыЭД.Утвержден);
	
	// Параметры для исключения статуса "Утвержден"
	СтатусыДляИсключенияУтвержденных = Новый Массив;
	СтатусыДляИсключенияУтвержденных.Добавить(Перечисления.СтатусыЭД.Сформирован);
	СтатусыДляИсключенияУтвержденных.Добавить(Перечисления.СтатусыЭД.Утвержден);
	Запрос.УстановитьПараметр("СтатусыДляИсключенияУтверждения", СтатусыДляИсключенияУтвержденных);
	Запрос.УстановитьПараметр("СостояниеВерсииЭДНаУтверждении", Перечисления.СостоянияВерсийЭД.НаУтверждении);
	
	// Параметры для заполнения таблицы подписания
	ЗавершенныеСостоянияЭДО = Новый Массив;
	ЗавершенныеСостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	ЗавершенныеСостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	ЗавершенныеСостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	ЗавершенныеСостоянияЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента);
	Запрос.УстановитьПараметр("ЗавершенныеСостоянияЭДО", ЗавершенныеСостоянияЭДО);
	
	Извещения = Новый Массив;
	Извещения.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	Извещения.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	Извещения.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	Извещения.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	Извещения.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	Извещения.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	Извещения.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД);
	Запрос.УстановитьПараметр("Извещения", Извещения);
	
	УведомленияОбУточнении = Новый Массив;
	УведомленияОбУточнении.Добавить(Перечисления.ТипыЭлементовВерсииЭД.УОУ);
	УведомленияОбУточнении.Добавить(Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ);
	Запрос.УстановитьПараметр("УведомленияОбУточнении", УведомленияОбУточнении);
	
	ОтветныеТитулы = Новый Массив;
	ОтветныеТитулы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ОтветныеТитулы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	ОтветныеТитулы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ОтветныеТитулы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ОтветныеТитулы.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Запрос.УстановитьПараметр("ОтветныеТитулы", ОтветныеТитулы);
	
	ВидыЭДБезОтветногоТитула = Новый Массив;
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.АктВыполненныхРабот);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	ВидыЭДБезОтветногоТитула.Добавить(Перечисления.ВидыЭД.ТОРГ12);
	Запрос.УстановитьПараметр("ВидыЭДБезОтветногоТитула", ВидыЭДБезОтветногоТитула);
	
	Запрос.УстановитьПараметр("ПредложениеОбАннулировании", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
	Запрос.УстановитьПараметр("СостояниеНаПодписи", Перечисления.СостоянияВерсийЭД.НаПодписи);
	Запрос.УстановитьПараметр("СостояниеЗакрытПринудительно", Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	Запрос.УстановитьПараметр("ТипПервичныйЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК СсылкаНаЭД,
	|	ИСТИНА КАК ОбработатьУтверждение,
	|	ЛОЖЬ КАК ОбработатьТаблицуПодписания,
	|	ЭлектронныйДокументИсходящий.СостояниеЭДО КАК СостояниеЭДО,
	|	ЭлектронныйДокументИсходящий.Ссылка КАК ВладелецЭД,
	|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД,
	|	Файлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭлектронныйДокументИсходящий.УдалитьНастройкаЭДО КАК НастройкаЭДО
	|ПОМЕСТИТЬ ЭДДляИсключенияУтверждения
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|		ПО Файлы.УдалитьВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка
	|ГДЕ
	|	&УсловиеНаОбъекты
	|	И Файлы.ТипЭлементаВерсииЭД В(&ОсновныеТипыЭлементов)
	|	И (Файлы.СтатусЭД = &СтатусЭДУтвержден
	|			ИЛИ ЭлектронныйДокументИсходящий.СостояниеЭДО = &СостояниеВерсииЭДНаУтверждении)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ЭтоИсходящийЭД,
	|	ЛОЖЬ КАК ЭтоВходящийЭД,
	|	ЭлектронныйДокументИсходящий.СостояниеЭДО КАК СостояниеЭДО,
	|	ЭлектронныйДокументИсходящий.ВидЭД КАК ВидЭД,
	|	ЭлектронныйДокументИсходящий.УдалитьНастройкаЭДО КАК НастройкаЭДО
	|ПОМЕСТИТЬ НеЗавершенныеЭлектронныеДокументы
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	НЕ ЭлектронныйДокументИсходящий.СостояниеЭДО В (&ЗавершенныеСостоянияЭДО)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящий.Ссылка,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЭлектронныйДокументВходящий.СостояниеЭДО,
	|	ЭлектронныйДокументВходящий.ВидЭД,
	|	ЭлектронныйДокументВходящий.УдалитьНастройкаЭДО КАК НастройкаЭДО
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	НЕ ЭлектронныйДокументВходящий.СостояниеЭДО В (&ЗавершенныеСостоянияЭДО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка КАК СсылкаНаЭД,
	|	ЛОЖЬ КАК ОбработатьУтверждение,
	|	ИСТИНА КАК ОбработатьТаблицуПодписания,
	|	ЭлектронныеДокументы.СостояниеЭДО КАК СостояниеЭДО,
	|	ЭлектронныеДокументы.Ссылка КАК ВладелецЭД,
	|	Файлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭлектронныеДокументы.ВидЭД КАК ВидЭД,
	|	ЭлектронныеДокументы.НастройкаЭДО КАК НастройкаЭДО
	|ПОМЕСТИТЬ ЭДДляЗаполненияТаблицыПодписания
	|ИЗ
	|	НеЗавершенныеЭлектронныеДокументы КАК ЭлектронныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|		ПО ЭлектронныеДокументы.Ссылка = Файлы.УдалитьВладелецФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|		ПО Файлы.Ссылка = СостояниеПодписанияЭД.Объект
	|ГДЕ
	|	&УсловиеНаОбъекты
	|	И (ЭлектронныеДокументы.ЭтоИсходящийЭД
	|				И Файлы.ТипЭлементаВерсииЭД В (&ОсновныеТипыЭлементов)
	|				И ЭлектронныеДокументы.СостояниеЭДО = &СостояниеНаПодписи
	|			ИЛИ ЭлектронныеДокументы.ЭтоИсходящийЭД
	|				И (Файлы.ТипЭлементаВерсииЭД В (&Извещения)
	|					ИЛИ Файлы.ТипЭлементаВерсииЭД В (&УведомленияОбУточнении)
	|					ИЛИ Файлы.ТипЭлементаВерсииЭД = &ПредложениеОбАннулировании)
	|				И Файлы.СтатусЭД = &СтатусЭДУтвержден
	|				И НЕ ЭлектронныеДокументы.СостояниеЭДО = &СостояниеЗакрытПринудительно
	|			ИЛИ ЭлектронныеДокументы.ЭтоВходящийЭД
	|				И (Файлы.ТипЭлементаВерсииЭД В (&ОтветныеТитулы)
	|					ИЛИ Файлы.ТипЭлементаВерсииЭД = &ТипПервичныйЭД И ЭлектронныеДокументы.ВидЭД В (&ВидыЭДБезОтветногоТитула))
	|				И ЭлектронныеДокументы.СостояниеЭДО = &СостояниеНаПодписи
	|				И Файлы.СтатусЭД = &СтатусЭДУтвержден
	|			ИЛИ ЭлектронныеДокументы.ЭтоВходящийЭД
	|				И (Файлы.ТипЭлементаВерсииЭД В (&Извещения)
	|					ИЛИ Файлы.ТипЭлементаВерсииЭД В (&УведомленияОбУточнении)
	|					ИЛИ Файлы.ТипЭлементаВерсииЭД = &ПредложениеОбАннулировании)
	|				И Файлы.СтатусЭД = &СтатусЭДУтвержден
	|				И НЕ ЭлектронныеДокументы.СостояниеЭДО = &СостояниеЗакрытПринудительно)
	|	И СостояниеПодписанияЭД.Объект ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.СсылкаНаЭД КАК СсылкаНаЭД,
	|	МАКСИМУМ(ВложенныйЗапрос.ОбработатьУтверждение) КАК ОбработатьУтверждение,
	|	МАКСИМУМ(ВложенныйЗапрос.ОбработатьТаблицуПодписания) КАК ОбработатьТаблицуПодписания,
	|	МАКСИМУМ(ВложенныйЗапрос.ОбработатьВладельца) КАК ОбработатьВладельца,
	|	МАКСИМУМ(ВложенныйЗапрос.СостояниеЭДО) КАК СостояниеЭДО,
	|	МАКСИМУМ(ВложенныйЗапрос.НастройкаЭДО) КАК НастройкаЭДО,
	|	ВложенныйЗапрос.ВладелецЭД КАК ВладелецЭД,
	|	ВложенныйЗапрос.ВидЭД КАК ВидЭД,
	|	ВложенныйЗапрос.НаправлениеЭД КАК НаправлениеЭД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭДДляИсключенияУтверждения.СсылкаНаЭД КАК СсылкаНаЭД,
	|		ЭДДляИсключенияУтверждения.ОбработатьУтверждение КАК ОбработатьУтверждение,
	|		ЭДДляИсключенияУтверждения.ОбработатьТаблицуПодписания КАК ОбработатьТаблицуПодписания,
	|		ЛОЖЬ КАК ОбработатьВладельца,
	|		ЭДДляИсключенияУтверждения.СостояниеЭДО КАК СостояниеЭДО,
	|		ЭДДляИсключенияУтверждения.ВладелецЭД КАК ВладелецЭД,
	|		ЭДДляИсключенияУтверждения.ВидЭД КАК ВидЭД,
	|		ЭДДляИсключенияУтверждения.НаправлениеЭД КАК НаправлениеЭД,
	|		ЭДДляИсключенияУтверждения.НастройкаЭДО КАК НастройкаЭДО
	|	ИЗ
	|		ЭДДляИсключенияУтверждения КАК ЭДДляИсключенияУтверждения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭДДляЗаполненияТаблицыПодписания.СсылкаНаЭД,
	|		ЭДДляЗаполненияТаблицыПодписания.ОбработатьУтверждение,
	|		ЭДДляЗаполненияТаблицыПодписания.ОбработатьТаблицуПодписания,
	|		ЛОЖЬ КАК ОбработатьВладельца,
	|		ЭДДляЗаполненияТаблицыПодписания.СостояниеЭДО,
	|		ЭДДляЗаполненияТаблицыПодписания.ВладелецЭД,
	|		ЭДДляЗаполненияТаблицыПодписания.ВидЭД,
	|		ЭДДляЗаполненияТаблицыПодписания.НаправлениеЭД,
	|		ЭДДляЗаполненияТаблицыПодписания.НастройкаЭДО КАК НастройкаЭДО
	|	ИЗ
	|		ЭДДляЗаполненияТаблицыПодписания КАК ЭДДляЗаполненияТаблицыПодписания
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Файлы.Ссылка КАК Ссылка,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		Файлы.УдалитьВладелецФайла.СостояниеЭДО,
	|		Файлы.УдалитьВладелецФайла,
	|		Файлы.УдалитьВладелецФайла.ВидЭД,
	|		Файлы.НаправлениеЭД,
	|		ЗНАЧЕНИЕ(Справочник.УдалитьСоглашенияОбИспользованииЭД.ПустаяСсылка) КАК НастройкаЭДО
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК Файлы
	|	ГДЕ
	|		&УсловиеНаОбъекты
	|		И Файлы.ВладелецФайла = НЕОПРЕДЕЛЕНО
	|		И (Файлы.УдалитьВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
	|			ИЛИ Файлы.УдалитьВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
	|			ИЛИ Файлы.УдалитьВладелецФайла ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД)
	|) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.СсылкаНаЭД,
	|	ВложенныйЗапрос.ВладелецЭД,
	|	ВложенныйЗапрос.ВидЭД,
	|	ВложенныйЗапрос.НаправлениеЭД";
	Если МассивСсылокДляОбработки <> Неопределено Тогда
		Запрос.УстановитьПараметр("МассивСсылокДляОбработки", МассивСсылокДляОбработки);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъекты", "Файлы.Ссылка В (&МассивСсылокДляОбработки)");
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ИТОГИ
		|	МАКСИМУМ(СостояниеЭДО),
		|	МАКСИМУМ(ОбработатьУтверждение),
		|	МАКСИМУМ(ОбработатьТаблицуПодписания),
		|	МАКСИМУМ(ОбработатьВладельца),
		|	МАКСИМУМ(НастройкаЭДО)
		|ПО
		|	ВладелецЭД";
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъекты", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ВладелецУстановленПоВсемФайлам()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = НЕОПРЕДЕЛЕНО
	|	И (ЭДПрисоединенныеФайлы.УдалитьВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументВходящий
	|		ИЛИ ЭДПрисоединенныеФайлы.УдалитьВладелецФайла ССЫЛКА Документ.ЭлектронныйДокументИсходящий
	|		ИЛИ ЭДПрисоединенныеФайлы.УдалитьВладелецФайла ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД)";
	Возврат Запрос.Выполнить().Пустой();

КонецФункции

#КонецОбласти

// Процедура из универсальной обработки ПоискИЗаменаЗначений
// Изменения:
// - заменен метод Сообщить(...) на ЗаписьЖурналаРегистрации(...).
//
Процедура СообщитьОбОшибке(Знач Описание)
	
	Если ТипЗнч(Описание) = Тип("ИнформацияОбОшибке") Тогда
		Описание = ?(Описание.Причина = Неопределено, Описание, Описание.Причина).Описание;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Сертификаты электронной подписи.Перенос настроек в новый объект метаданных'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Описание,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

Функция ПечатьЭД(СсылкаНаЭД, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТабДок = ПечатнаяФормаЭД(СсылкаНаЭД,, ПараметрыПечати);
	
	Возврат ТабДок;
	
КонецФункции

Функция ПечатьКарточкиЭД(МассивОбъектов, ОбъектыПечати, ИмяМакета = "КарточкаЭД")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК НаименованиеФайла,
	|	ЭДПрисоединенныеФайлы.ОтправительЭД КАК Отправитель,
	|	ЭДПрисоединенныеФайлы.ПолучательЭД КАК Получатель,
	|	ЭДПрисоединенныеФайлы.НомерЭД КАК Идентификатор,
	|	ЭДПрисоединенныеФайлы.ДополнительнаяИнформация КАК СопроводительнаяЗаписка,
	|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ втЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивОбъектов)
	|	И НЕ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&СлужебныеЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящий.ВидЭД КАК ВидЭД,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящий.ВидЭД) КАК ВидЭДПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументВходящий.ТипДокумента) КАК ТипДокументаПредставление,
	|	ЭлектронныйДокументВходящий.Организация КАК Организация,
	|	ЭлектронныйДокументВходящий.Контрагент КАК Контрагент,
	|	ЭлектронныйДокументВходящий.Дата КАК Дата,
	|	ЭлектронныйДокументВходящий.Номер КАК Номер,
	|	ЭлектронныйДокументВходящий.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				втЭД.ВладелецФайла
	|			ИЗ
	|				втЭД КАК втЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка,
	|	ЭлектронныйДокументИсходящий.ВидЭД,
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументИсходящий.ВидЭД),
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументИсходящий.ТипДокумента),
	|	ЭлектронныйДокументИсходящий.Организация,
	|	ЭлектронныйДокументИсходящий.Контрагент,
	|	ЭлектронныйДокументИсходящий.Дата,
	|	ЭлектронныйДокументИсходящий.Номер,
	|	ЭлектронныйДокументИсходящий.ТребуетсяПодтверждение
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.Ссылка В
	|			(ВЫБРАТЬ
	|				втЭД.ВладелецФайла
	|			ИЗ
	|				втЭД КАК втЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументы.ВидЭД КАК ВидЭДСсылка,
	|	втДокументы.ВидЭДПредставление КАК ВидДокумента,
	|	втДокументы.ТипДокументаПредставление КАК ТипДокумента,
	|	втДокументы.Контрагент КАК Контрагент,
	|	втДокументы.Организация КАК Организация,
	|	втЭД.Ссылка КАК Ссылка,
	|	втЭД.НаименованиеФайла КАК НаименованиеФайла,
	|	втЭД.Отправитель КАК Отправитель,
	|	втЭД.Получатель КАК Получатель,
	|	втДокументы.Дата КАК ДатаЭД,
	|	втДокументы.Номер КАК НомерЭД,
	|	втЭД.СопроводительнаяЗаписка КАК СопроводительнаяЗаписка,
	|	втЭД.Расширение КАК Расширение,
	|	втЭД.НаправлениеЭД КАК НаправлениеЭД,
	|	втЭД.ВладелецФайла КАК ВладелецФайла,
	|	втЭД.Идентификатор КАК Идентификатор,
	|	втДокументы.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	втЭД.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ втЭДО
	|ИЗ
	|	втЭД КАК втЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументы КАК втДокументы
	|		ПО втЭД.ВладелецФайла = втДокументы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток КАК Отпечаток,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна КАК ПодписьВерна,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписанныйОбъект КАК Ссылка,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ ВтОтпечатки
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписанныйОбъект В
	|			(ВЫБРАТЬ
	|				втЭД.Ссылка
	|			ИЗ
	|				втЭД)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписьВерна,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ДатаПроверкиПодписи,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.КомуВыданСертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписанныйОбъект.ЭлектронныйДокументВладелец,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписанныйОбъект.ЭлектронныйДокументВладелец В
	|			(ВЫБРАТЬ
	|				втЭД.Ссылка
	|			ИЗ
	|				втЭД)
	|	И ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.ПодписанныйОбъект.ТипЭлементаВерсииЭД В(&ТитулыПокупателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК ТребуетсяПодпись,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК ПодписьОрганизации,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК ПодписьКонтрагента,
	|	втЭДО.Ссылка КАК Ссылка,
	|	втЭДО.ВидЭДСсылка КАК ВидЭДСсылка,
	|	втЭДО.НаправлениеЭД КАК НаправлениеЭД,
	|	ЛОЖЬ КАК ПроизвольныйЭД,
	|	втЭДО.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение
	|ИЗ
	|	втЭДО КАК втЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|		ПО (НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = втЭДО.Организация)
	|			И (НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = втЭДО.Контрагент)
	|			И (НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = втЭДО.ВидЭДСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ДополнительныеНастройки.Отправитель,
	|	ДополнительныеНастройки.Получатель,
	|	втЭДО.Ссылка,
	|	втЭДО.ВидЭДСсылка,
	|	втЭДО.НаправлениеЭД,
	|	ЛОЖЬ,
	|	втЭДО.ТребуетсяПодтверждение
	|ИЗ
	|	втЭДО КАК втЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДополнительныеНастройки КАК ДополнительныеНастройки
	|		ПО (ДополнительныеНастройки.Отправитель = втЭДО.Организация)
	|			И (ДополнительныеНастройки.Получатель = втЭДО.Контрагент)
	|			И (ДополнительныеНастройки.ВидДокумента = втЭДО.ВидЭДСсылка)
	|ГДЕ
	|	втЭДО.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЭДО.НаименованиеФайла КАК НаименованиеФайла,
	|	втЭДО.Отправитель КАК Отправитель,
	|	втЭДО.Получатель КАК Получатель,
	|	втЭДО.ВидДокумента КАК ВидДокумента,
	|	втЭДО.ВидЭДСсылка КАК ВидЭДСсылка,
	|	втЭДО.ТипДокумента КАК ТипДокумента,
	|	втЭДО.Идентификатор КАК Идентификатор,
	|	втЭДО.НомерЭД КАК НомерЭД,
	|	втЭДО.ДатаЭД КАК ДатаЭД,
	|	втЭДО.СопроводительнаяЗаписка КАК СопроводительнаяЗаписка,
	|	втЭДО.Расширение КАК Расширение,
	|	втЭДО.Контрагент КАК Контрагент,
	|	втЭДО.Организация КАК Организация,
	|	втЭДО.НаправлениеЭД КАК НаправлениеЭД,
	|	втЭДО.Ссылка КАК Ссылка,
	|	втЭДО.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ИЗ
	|	втЭДО КАК втЭДО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОтпечатки.ПодписьВерна КАК ПодписьВерна,
	|	ВтОтпечатки.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
	|	ВтОтпечатки.КомуВыданСертификат КАК КомуВыданСертификат,
	|	ВтОтпечатки.Ссылка КАК Ссылка
	|ИЗ
	|	ВтОтпечатки КАК ВтОтпечатки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТитулыПокупателя", ТипыЭлементаВерсииЭДТитулаПокупателя());
	
	СлужебныеЭД = Новый Массив;
	СлужебныеЭД.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
	СлужебныеЭД.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	Запрос.УстановитьПараметр("СлужебныеЭД", СлужебныеЭД);
	
	ОбменСКонтрагентамиСлужебный.ДобавитьНастройкиПоУмолчаниюДляНеактуальныхВидовЭД(Запрос); 
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	МассивДанныхПечати = Новый Массив;
	
	ЗаполнитьДанныеПечатнойФормы(МассивРезультатов, МассивДанныхПечати);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ОбщийМакет.ПФ_MXL_КарточкаЭД_%1", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ТабДок = Новый ТабличныйДокумент;
	
	Для каждого ДанныеПечатнойФормы Из МассивДанныхПечати Цикл
		
		Если ТабДок.ВысотаТаблицы > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.Заполнить(ДанныеПечатнойФормы);
		ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабДок, ОбластьШапка, "Шапка");
		
		Если ДанныеПечатнойФормы.Свойство("НомерЭД") Тогда
			ОбластьПроизвольныйЭД = Макет.ПолучитьОбласть("ПроизвольныйЭД");
			ОбластьПроизвольныйЭД.Параметры.Заполнить(ДанныеПечатнойФормы);
			ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабДок, ОбластьПроизвольныйЭД, "ПроизвольныйЭД");
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("СопроводительнаяЗаписка") Тогда
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("СопроводительнаяЗаписка");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(ДанныеПечатнойФормы);
			ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабДок, ОбластьСопроводительнаяЗаписка, "СопроводительнаяЗаписка");
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Подписи") Тогда
			
			ОбластьСопроводительнаяЗаписка = Макет.ПолучитьОбласть("ТребуемыеПодписи");
			ОбластьСопроводительнаяЗаписка.Параметры.Заполнить(ДанныеПечатнойФормы.Подписи);
			ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабДок, ОбластьСопроводительнаяЗаписка, "ТребуемыеПодписи");
		КонецЕсли;
		
		Если ДанныеПечатнойФормы.Свойство("Сертификаты") Тогда
			
			ОбластьСертификаты = Макет.ПолучитьОбласть("Сертификаты");
			ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабДок, ОбластьСертификаты, "Сертификаты");
			
			ОбластьСертификатыСтрока = Макет.ПолучитьОбласть("СертификатыСтрока");
			НомерСтроки = 1;
			Для Каждого ТекСтрока Из ДанныеПечатнойФормы.Сертификаты Цикл
				ОбластьСертификатыСтрока.Параметры.Заполнить(ТекСтрока);
				ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабДок, ОбластьСертификатыСтрока, "СертификатыСтрока",
					НомерСтроки);
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Подпись");
		ОбластьПодпись.Параметры.Заполнить(ДанныеПечатнойФормы);
		ЭлектронноеВзаимодействиеСлужебный.ВывестиОбластьВТабличныйДокумент(ТабДок, ОбластьПодпись, "Подпись");
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечатнойФормы.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ЗаполнитьДанныеПечатнойФормы(МассивРезультатовЗапроса, МассивДанныхПечати)
	
	НеобходимыеПодписи = МассивРезультатовЗапроса[4].Выгрузить();
	ДанныеЭД = МассивРезультатовЗапроса[5].Выгрузить();
	СертификатыЭД = МассивРезультатовЗапроса[6].Выгрузить();
	
	МассивЭД = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭД, ДанныеЭД.ВыгрузитьКолонку("Ссылка"), Истина);
	
	Для Каждого ЭлементМассива Из МассивЭД Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", ЭлементМассива);
		
		МассивСтрокЭД = ДанныеЭД.НайтиСтроки(Отбор);
		СтрокаДанныхЭД = МассивСтрокЭД[0];
		
		ДанныеПечатнойФормы = Новый Структура;
		ДанныеПечатнойФормы.Вставить("Ссылка", ЭлементМассива);
		
		ИмяФайла = СтрокаДанныхЭД.НаименованиеФайла +"." + СтрокаДанныхЭД.Расширение;
		ДанныеПечатнойФормы.Вставить("ИмяФайла", ИмяФайла);
		
		Если СтрокаДанныхЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			
		Иначе
			Отправитель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Контрагент);
			Получатель = ПредставлениеЮрФизЛицо(СтрокаДанныхЭД.Организация);
			
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("Отправитель", Отправитель);
		ДанныеПечатнойФормы.Вставить("Получатель", Получатель);
		
		ОписаниеДокумента = Новый Структура;
		ОписаниеДокумента.Вставить("ИмяДокумента", СокрЛП(СтрокаДанныхЭД.ВидДокумента + " " + СтрокаДанныхЭД.ТипДокумента));
		Если СтрокаДанныхЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
			ТипДокументаШаблон = НСтр("ru = '[ИмяДокумента] и передаточный документ'");
		Иначе
			ТипДокументаШаблон = НСтр("ru = '[ИмяДокумента]'");
		КонецЕсли;
		ТипДокумента = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТипДокументаШаблон, ОписаниеДокумента);
		ДанныеПечатнойФормы.Вставить("ТипДокумента", ТипДокумента);
		
		Если ОбменСКонтрагентамиСлужебный.ЭтоФНС(СтрокаДанныхЭД.ВидЭДСсылка)Тогда
			Идентификатор = СтрокаДанныхЭД.НаименованиеФайла;
		Иначе
			Идентификатор = СтрокаДанныхЭД.Идентификатор;
		КонецЕсли;
		ДанныеПечатнойФормы.Вставить("Идентификатор", Идентификатор );
		
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.НомерЭД) Тогда
			
			ДанныеПечатнойФормы.Вставить("НомерЭД", СтрокаДанныхЭД.НомерЭД);
			ДанныеПечатнойФормы.Вставить("ДатаЭД", СтрокаДанныхЭД.ДатаЭД);
			
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанныхЭД.СопроводительнаяЗаписка) Тогда
			ДанныеПечатнойФормы.Вставить("СопроводительнаяЗаписка", СтрокаДанныхЭД.СопроводительнаяЗаписка);
		КонецЕсли;
		
		ДанныеПечатнойФормы.Вставить("ТекущаяДата", Формат(ТекущаяДатаСеанса(), "ДЛФ=D"));
		
		// заполняем требуемые подписи
		МассивНеобходимыеПодписи = НеобходимыеПодписи.НайтиСтроки(Отбор);
		ТребуемыеПодписи = Неопределено;
		
		ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи);
		Если ЗначениеЗаполнено(ТребуемыеПодписи) Тогда
			ДанныеПечатнойФормы.Вставить("Подписи", ТребуемыеПодписи);
		КонецЕсли;
		
		// заполняем таблицу сертификатов ЭД
		
		МассивСертификатовЭД = СертификатыЭД.НайтиСтроки(Отбор);
		
		ТаблицаСертификатов = Новый ТаблицаЗначений;
		ИнициализацияТаблицыСертификатов(ТаблицаСертификатов);

		Для Каждого СтрокаМассива Из МассивСертификатовЭД Цикл
			
			НоваяСтрока = ТаблицаСертификатов.Добавить();
			НоваяСтрока.КомуВыдан = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Сертификат = СтрокаМассива.КомуВыданСертификат;
			НоваяСтрока.Статус = СтатусПодписи(СтрокаМассива);
		КонецЦикла;

		ДанныеПечатнойФормы.Вставить("Сертификаты", ТаблицаСертификатов);
		
		МассивДанныхПечати.Добавить(ДанныеПечатнойФормы);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТребуемыеПодписи(ТребуемыеПодписи, МассивНеобходимыеПодписи)
	
	Если МассивНеобходимыеПодписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТребуемыеПодписи = Новый Структура;
	ТребуемыеПодписи.Вставить("ПредставлениеОтправителя");
	ТребуемыеПодписи.Вставить("ПредставлениеПолучателя");
	
	Для Каждого СтрокаМассива Из МассивНеобходимыеПодписи Цикл
		
		ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеПодписантов(СтрокаМассива, ТребуемыеПодписи)
	
	Если СтрокаМассива.ПроизвольныйЭД Тогда
		
		Если СтрокаМассива.ТребуетсяПодпись Тогда
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				
			КонецЕсли;
		Иначе
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			Иначе
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаМассива.ТребуетсяПодпись Тогда
			
			Если СтрокаМассива.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации);
				ТребуемыеПодписи.ПредставлениеПолучателя = ?(СтрокаМассива.ТребуетсяПодтверждение, 
					ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента), НСтр("ru = 'Не требуется'"));
				
			Иначе
				
				ТребуемыеПодписи.ПредставлениеОтправителя = ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьКонтрагента);
				ТребуемыеПодписи.ПредставлениеПолучателя = ?(СтрокаМассива.ТребуетсяПодтверждение,
					ПредставлениеЮрФизЛицо(СтрокаМассива.ПодписьОрганизации), НСтр("ru = 'Не требуется'"));
				
			КонецЕсли;
			
		Иначе
			
			ТребуемыеПодписи.ПредставлениеОтправителя = НСтр("ru = 'Не требуется'");
			ТребуемыеПодписи.ПредставлениеПолучателя = НСтр("ru = 'Не требуется'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеЮрФизЛицо(ЮрФизЛицо)
	
	ДанныеЮрФизЛицо = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДанныеЮрФизЛицо);
	ПредставлениеЮрФизЛицо = ""; 
	
	ЭлектронноеВзаимодействиеПереопределяемый.ОписаниеОрганизации(
		ДанныеЮрФизЛицо,
		ПредставлениеЮрФизЛицо,
		"ПолноеНаименование,ИНН,КПП");
	
	Возврат ПредставлениеЮрФизЛицо;
	
КонецФункции

Функция СтатусПодписи(ВыборкаЭД)
	
	Если ВыборкаЭД.ПодписьВерна Тогда
		СтатусПодписи = "Верна ("+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	Иначе
		СтатусПодписи = "Неверна ( "+Формат(ВыборкаЭД.ДатаПроверкиПодписи,"ДЛФ=DT") + ")";
	КонецЕсли;
	
	Возврат СтатусПодписи;
	
КонецФункции

Процедура ИнициализацияТаблицыСертификатов(ТаблицаСертификатов)
	
	ТаблицаСертификатов.Колонки.Добавить("КомуВыдан");
	ТаблицаСертификатов.Колонки.Добавить("Сертификат");
	ТаблицаСертификатов.Колонки.Добавить("Статус");
	
КонецПроцедуры

Функция ПечатнаяФормаЭД(ФайлЭлектронногоДокумента, Идентификатор = Неопределено, ПараметрыПечати = Неопределено)
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("ПечатьЭД", Истина);
	Если ПараметрыПечати <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыПечати Цикл
			ПараметрыПросмотра.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ПараметрыПросмотра.Вставить("ВыводитьПостраничныйРазделитель", Истина);
	
	СтруктураПодписей = ОбменСКонтрагентамиСлужебный.ПодписиЭДДляВыводаНаПечать(ФайлЭлектронногоДокумента);
	ПараметрыПросмотра.Вставить("СтруктураПодписей", СтруктураПодписей);
	
	ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(ФайлЭлектронногоДокумента, ПараметрыПросмотра);
	
	ОбъектыПечати = Новый СписокЗначений;
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, ФайлЭлектронногоДокумента);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТипыЭлементаВерсииЭДТитулаПокупателя() 

	ТитулыПокупателя = Новый Массив;
	
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ТитулыПокупателя.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	Возврат ТитулыПокупателя;

КонецФункции

#КонецОбласти

#КонецЕсли