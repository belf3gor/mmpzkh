
#Область ОписаниеПеременных

&НаКлиенте
Перем ОткрытыеФормы Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаВажныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Сотрудник);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, ФизическоеЛицо.ФИО, "ФизическоеЛицо");
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	СотрудникиФормы.СотрудникиПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПослеОткрытияФормы", 0.1, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИзмененЗаголовокФормыСотрудника" Тогда
		
		// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		СклонениеПредставленийОбъектовКлиент.ПриИзмененииПредставления(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

	КонецЕсли;

	СотрудникиКлиент.СотрудникиОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ОтредактированаИстория" И ФизическоеЛицоСсылка = Источник Тогда
		Если Параметр.ИмяРегистра = "ДокументыФизическихЛиц" Тогда
			Если ДокументыФизическихЛицНаборЗаписейПрочитан Тогда
				СотрудникиКлиентБазовый.ОбработкаОповещенияОтредактированаИсторияДокументыФизическихЛиц(
					ЭтотОбъект,
					ФизическоеЛицоСсылка,
					ИмяСобытия,
					Параметр,
					Источник);
				СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(
					ДокументыФизическихЛиц.ВидДокумента,
					ДокументыФизическихЛиц.Серия,
					Элементы.ДокументыФизическихЛицСерия, ЭтотОбъект);
				СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(
					ДокументыФизическихЛиц.ВидДокумента,
					ДокументыФизическихЛиц.Номер,
					Элементы.ДокументыФизическихЛицНомер,
					ЭтотОбъект);
				СерияНомерПаспорта = ПредставлениеДокументаУдостоверяющегоЛичность(ДокументыФизическихЛиц, ПаспортРФ);
				ОтобразитьПаспортныеДанные(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеДанныхМестаРаботы" И Параметр.Сотрудник = СотрудникСсылка Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыВычеты" И Параметр = ФизическоеЛицоСсылка Тогда
		ОбновитьПредставлениеНалогаНаДоходы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СотрудникиФормы.СотрудникиПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Сотрудник);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	Если Модифицированность Тогда
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
	Иначе
		СотрудникиКлиент.ПроверитьНеобходимостьЗаписи(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиКлиент.СотрудникиПриЗакрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ Отказ И НЕ ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда 
		ЗаписатьНаКлиенте(Ложь, , Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Контактная информация
	Если КонтактнаяИнформацияФизическогоЛица <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(КонтактнаяИнформацияФизическогоЛица, ФизическоеЛицо);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Контактная информация
	
	СотрудникиФормы.СотрудникиПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если НЕ ЭтотОбъект.ИспользоватьКадровыйУчет Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
			МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
			МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗапомнитьТекущееКоличествоСотрудников(ЭтотОбъект, ТекущаяОрганизация);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СотрудникиФормы.СотрудникиПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриЗаписиНаСервере(ЭтотОбъект, ФизическоеЛицо.ФИО, ФизическоеЛицо.Ссылка, Истина, 
		?(ЗначениеЗаполнено(ФизическоеЛицо.Пол), ?(ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской, 1, 2), Неопределено));	
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		Если ДокументыФизическихЛиц.Период = '00010101' Тогда
			СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(ЭтотОбъект);
		КонецЕсли;
		
		СотрудникиФормыБазовый.ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(
			ЭтотОбъект,
			ЭтотОбъект.ФизическоеЛицоСсылка);
			
		ЗаписатьМестоВыплатыЗарплатыСотрудника();
		ЗаписатьОсновнойБанковскийСчет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СотрудникиФормы.СотрудникиПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		УчетЗарплаты.ПроверитьПоддержкуСовместительства(ТекущийВидЗанятости);
		УчетЗарплаты.ОбновитьИЗаполнитьРегулярныеЗадачи(УникальныйИдентификатор, ТекущийОбъект.ГоловнаяОрганизация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СотрудникиКлиент.СотрудникиПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	Если НЕ ПредупреждениеПоказано Тогда
		Если НЕ ЭтотОбъект.ИспользоватьКадровыйУчет Тогда
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
				МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийКлиент");
				ПредупреждениеПоказано = МодульРасчетЗарплатыДляНебольшихОрганизацийКлиент.ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(
					ЭтотОбъект, ТекущаяОрганизация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ПредупреждениеПоказано Тогда
		ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Фамилия) И НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Имя) Тогда
		ТекстСообщения = НСтр("ru='Не заполнены фамилия, имя сотрудника'")
	ИначеЕсли НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Фамилия) Тогда
		ТекстСообщения = НСтр("ru='Не заполнена фамилия сотрудника'")
	ИначеЕсли НЕ ЗначениеЗаполнено(ФИОФизическихЛиц.Имя) Тогда
		ТекстСообщения = НСтр("ru='Не заполнено имя сотрудника'")
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФИО", "ФизическоеЛицо", Отказ);
	КонецЕсли;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Если ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента)
			ИЛИ НЕ Элементы.ДокументыФизическихЛицВидДокумента.Видимость Тогда
			Если ЗначениеЗаполнено(ДокументыФизическихЛиц.Серия)
				ИЛИ ЗначениеЗаполнено(ДокументыФизическихЛиц.Номер)
				ИЛИ ЗначениеЗаполнено(ДокументыФизическихЛиц.КемВыдан)
				ИЛИ ЗначениеЗаполнено(ДокументыФизическихЛиц.ДатаВыдачи) Тогда
			
				Если НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.Серия) ИЛИ НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.Номер) Тогда
					Если (НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента)
						ИЛИ ДокументыФизическихЛиц.ВидДокумента = ПаспортРФ)
						И ГражданинРФ Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru='Не указаны серия и номер паспорта'"),
							,
							"СерияНомерПаспорта",
							,
							Отказ);
					Иначе
						Если НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.Серия) 
							И ДокументыФизическихЛиц.ВидДокумента = ПаспортРФ Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru='Не указана серия документа, удостоверяющего личность'"),
								,
								"ДокументыФизическихЛиц.Серия",
								,
								Отказ);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.Номер) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru='Не указан номер документа, удостоверяющего личность'"),
								,
								"ДокументыФизическихЛиц.Номер",
								,
								Отказ);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.ДатаВыдачи) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Не указана дата выдачи %1'"),
						?(ДокументыФизическихЛиц.ВидДокумента = ПаспортРФ,
						НСтр("ru='паспорта'"),
						НСтр("ru='документа, удостоверяющего личность'"))),
					,
					"ДокументыФизическихЛиц.ДатаВыдачи",
					,
					Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если МестаВыплатыЗарплатыСотрудников.Вид = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.ОсновнойБанковскийСчет) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнен банковский счет'"),
					,
					"ОсновнойБанковскийСчетПредставление",
					,
					Отказ);
			КонецЕсли;
		ИначеЕсли МестаВыплатыЗарплатыСотрудников.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
			Если НЕ ЛицевойСчетЗаполнен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнен лицевой счет'"),
					,
					"ЛицевойСчетСотрудникаПредставление",
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, Сотрудник);
		// Конец СтандартныеПодсистемы.Свойства
		
		СотрудникиФормы.СотрудникиОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// При изменении данных физлица / сотрудника.

&НаКлиенте
Процедура ДатаПриемаПриИзменении(Элемент)
	
	ПроверитьОрганизациюИПодразделениеСотрудника();
	ПроверитьВидЗанятостиСотрудника();
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоИННПриИзменении(Элемент)
	
	СотрудникиКлиент.СотрудникиИННПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоСтраховойНомерПФРПриИзменении(Элемент)
	
	СотрудникиКлиент.СотрудникиСтраховойНомерПФРПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольненияПриИзменении(Элемент)
	
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	Если НЕ ЗначениеЗаполнено(ДатаУвольнения) Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяОрганизацияПриИзменении(Элемент)
	
	ТекущаяОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗанятостиПриИзменении(Элемент)
	
	СотрудникиКлиент.ПроверитьКонфликтыВидаЗанятостиССуществующимиСотрудниками(
		Сотрудник.Ссылка,
		Сотрудник.ФизическоеЛицо,
		ТекущаяОрганизация,
		ТекущийВидЗанятости,
		ДатаПриема);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяТарифнаяСтавкаПриИзменении(Элемент)
	
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ВАрхивеПриИзменении(Элемент)
	
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(ЭтотОбъект, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПредставлениеПриИзменении(Элемент)
	
	СотрудникиКлиент.ДополнитьПредставлениеСотрудникаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеНаименованияПриИзменении(Элемент)
	
	СотрудникиКлиент.СформироватьНаименованиеСотрудника(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоПолПриИзменении(Элемент)
	
	СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	Если ТекущийСпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		ТекущийАванс = РазмерАвансаВПроцентахПоУмолчанию;
	Иначе
		ТекущийАванс = 0;
	КонецЕсли; 
	
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(ЭтотОбъект, "ТекущийСпособРасчетаАванса");
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникИзменилФИОНажатие(Элемент)

	СотрудникиКлиент.СотрудникИзменилФИОНажатие(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	
	СотрудникиКлиент.ПриИзмененииФИОСотрудника(ЭтотОбъект);
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПриИзмененииПредставления(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоДатаРожденияПриИзменении(Элемент)
	
	СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоступаПриИзменении(Элемент)
	
	СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНомерПаспортаПриИзменении(Элемент)
	
	МассивПодстрок = СтрРазделить(СерияНомерПаспорта, " ", Истина);
	
	Если МассивПодстрок.Количество() = 3 Тогда
		ДокументыФизическихЛиц.Номер = МассивПодстрок[2];
		МассивПодстрок.Удалить(2);
	Иначе
		ДокументыФизическихЛиц.Номер = "";
	КонецЕсли;
	
	ДокументыФизическихЛиц.Серия = СтрСоединить(МассивПодстрок, " ");
	
	Если ДокументыФизическихЛиц.ВидДокумента <> ПаспортРФ Тогда
		ДокументыФизическихЛиц.ВидДокумента = ПаспортРФ;
	КонецЕсли;
	
	СотрудникиКлиент.ДокументыФизическихЛицВидДокументаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Элемент)
	
	СотрудникиКлиент.ДокументыФизическихЛицВидДокументаПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицСерияПриИзменении(Элемент)
	
	СерияНомерПаспорта = ПредставлениеДокументаУдостоверяющегоЛичность(ДокументыФизическихЛиц, ПаспортРФ);
	СотрудникиКлиент.ДокументыФизическихЛицСерияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицНомерПриИзменении(Элемент)
	
	СерияНомерПаспорта = ПредставлениеДокументаУдостоверяющегоЛичность(ДокументыФизическихЛиц, ПаспортРФ);
	СотрудникиКлиент.ДокументыФизическихЛицНомерПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СотрудникиКлиент.ДокументыФизическихЛицВидДокументаНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицДатаВыдачиПриИзменении(Элемент)
	
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКемВыданПриИзменении(Элемент)
	
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицКодПодразделенияПриИзменении(Элемент)
	
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица");
	КонтактнаяИнформацияМассив = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидКонтактнойИнформации));
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           ?(КонтактнаяИнформацияМассив.Количество() = 0, Неопределено, КонтактнаяИнформацияМассив[0].ЗначенияПолей));
	ПараметрыОткрытия.Вставить("Представление",           ?(КонтактнаяИнформацияМассив.Количество() = 0, Неопределено, КонтактнаяИнформацияМассив[0].Представление));
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",          ЭтотОбъект.ТолькоПросмотр);
	Если ЗначениеЗаполнено(Сотрудник.Наименование) Тогда
		ПараметрыОткрытия.Вставить("Заголовок", СтрШаблон(НСтр("ru='%1: Адрес по прописке'"), Сотрудник.Наименование));
	Иначе
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru=' Адрес по прописке'"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("АдресПоПропискеРедактированиеЗавершение", ЭтотОбъект);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МестаВыплатыПриИзменении(Элемент)
	
	ОтобразитьМестоВыплаты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Сотрудник);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Сотрудник, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Сотрудник);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуСотрудника(Команда)

	СотрудникиКлиент.ОткрытьФормуСотрудника(ЭтотОбъект, Команда);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДругиеМестаРаботы(Команда)
	
	СотрудникиКлиент.ОткрытьФормуСпискаМестРаботыФизическогоЛица(ФизическоеЛицоСсылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОформитьНаОсновании(Команда)
	
	СотрудникиКлиент.ОформитьНаОсновании(ЭтотОбъект, СотрудникСсылка, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриемНаРаботу(Команда)
	
	СотрудникиКлиент.ОформитьНаОсновании(ЭтотОбъект, СотрудникСсылка, "Документы.ПриемНаРаботу");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ЗаписатьНаКлиенте(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОклад(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ИзменитьНачисления", Истина);
	ПараметрыОткрытияФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	СотрудникиКлиент.ОформитьНаОсновании(ЭтотОбъект, СотрудникСсылка, "Документы.КадровыйПеревод", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОФизическихЛицИстория(Команда)
	
	СотрудникиКлиент.СотрудникиОткрытьФормуРедактированияИстории("ФИОФизическихЛиц", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КадровыеДокументы(Команда)
	
	СотрудникиКлиент.ОткрытьДополнительнуюФорму(
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("ЖурналДокументов.КадровыеДокументы.ФормаСписка"), ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныеДанные(Команда)
	
	ОписаниеДополнительнойФормы = СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.Сотрудники.Форма.ЛичныеДанные");
	ОткрытьДополнительнуюФорму(ОписаниеДополнительнойФормы, ЭтотОбъект,,"ЛичныеДанные", НСтр("ru = 'Личные данные и контактная информация'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Склонения(Команда)
	
	СклонениеПредставленийОбъектовКлиент.ОбработатьКомандуСклонения(ЭтотОбъект, ФизическоеЛицо.ФИО, Истина, 
		?(ЗначениеЗаполнено(ФизическоеЛицо.Пол), ?(ФизическоеЛицо.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"), 1, 2), Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура Уволить(Команда)
	
	Если ИспользоватьКадровыйУчет Тогда
		СотрудникиКлиент.ОформитьНаОсновании(ЭтотОбъект, СотрудникСсылка, "Документы.Увольнение");
	Иначе
		Оповещение = Новый ОписаниеОповещения("ВводДатыУвольненияЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(Оповещение, ТекущаяДата(), НСтр("ru = 'Дата увольнения'"), ЧастиДаты.Дата) 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицевойСчетСотрудникаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеДополнительнойФормы = СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.Сотрудники.Форма.ВыплатаЗарплаты");
	ОткрытьДополнительнуюФорму(ОписаниеДополнительнойФормы, ЭтотОбъект,,"ВыплатаЗарплаты", НСтр("ru = 'Карта зарплатного проекта'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НалогНаДоходыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДополнительнуюФорму(
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.Сотрудники.Форма.НалогНаДоходы"), ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура УсловияСтрахованияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДополнительнуюФорму(
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.ФизическиеЛица.Форма.Страхование"), ЭтотОбъект, , "УсловияСтрахования");
		
КонецПроцедуры

&НаКлиенте
Процедура ДругаяКонтактнаяИнформация(Команда)
	
	ОписаниеДополнительнойФормы = СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.Сотрудники.Форма.ЛичныеДанные");
	ОткрытьДополнительнуюФорму(ОписаниеДополнительнойФормы, ЭтотОбъект,,"КонтактнаяИнформация", НСтр("ru = 'Вся контактная информация'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданствоПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеДополнительнойФормы = СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.Сотрудники.Форма.ЛичныеДанные");
	ОткрытьДополнительнуюФорму(ОписаниеДополнительнойФормы, ЭтотОбъект,,"Гражданство", НСтр("ru = 'Гражданство'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицИстория(Команда)
	
	СотрудникиКлиент.ОткрытьФормуРедактированияИстории("ДокументыФизическихЛиц", ФизическоеЛицоСсылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БухучетЗарплатыСотрудниковПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеДополнительнойФормы = СотрудникиКлиентСервер.ОписаниеДополнительнойФормы("Справочник.Сотрудники.Форма.ВыплатаЗарплаты");
	ОткрытьДополнительнуюФорму(ОписаниеДополнительнойФормы, ЭтотОбъект, , "УчетЗатрат", НСтр("ru = 'Учет расходов'"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Сотрудник"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, Сотрудник);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПрочитатьДанныеСвязанныеСФизлицом() Экспорт

	СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаИзмененияДанныхОРабочемМестеНаСервере(ПараметрСотрудник) Экспорт
	
	СотрудникиФормы.ОбработкаИзмененияДанныхОРабочемМесте(ЭтотОбъект, ПараметрСотрудник, "ДругиеРабочиеМеста");
	
КонецПроцедуры

&НаСервере
Процедура ТекущаяОрганизацияПриИзмененииНаСервере() Экспорт
	
	СотрудникиФормы.ПриИзмененииОрганизации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФизическогоЛицаНаСервере() Экспорт
	
	СотрудникиФормы.ОбновитьДанныеФизическогоЛица(ЭтотОбъект);
	ОписаниеВспомогательныхРеквизитовПриЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтотОбъект, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры


#Область ЗаписьЭлемента

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ОповещениеЗавершения = Неопределено, Отказ = Ложь) Экспорт 
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ЗаписьЭлементаСправочникаСотрудники");
	
	СотрудникиКлиент.СохранитьДанныеФорм(ЭтотОбъект, Отказ, ЗакрытьПослеЗаписи);
	Если НЕ ПроверяютсяОднофамильцы Тогда
		ПараметрыЗаписи = Новый Структура;
		СотрудникиКлиент.СотрудникиПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Работа с дополнительными формами.

&НаСервере
Функция АдресДанныхДополнительнойФормыНаСервере(ОписаниеДополнительнойФормы) Экспорт
	Возврат СотрудникиФормы.АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, ЭтотОбъект);
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеИзХранилищаВФормуНаСервере(Параметр) Экспорт
	
	СотрудникиФормы.ПрочитатьДанныеИзХранилищаВФорму(
		ЭтотОбъект,
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(Параметр.ИмяФормы),
		Параметр.АдресВХранилище);
		
	ОбновитьОписанияРеквизитов(Параметр.ИмяФормы);
	УстановитьПараметрыИностранногоГражданина();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеДополнительнойФормы(ИмяФормы, Отказ) Экспорт
	
	СотрудникиФормы.СохранитьДанныеДополнительнойФормы(ЭтотОбъект, ИмяФормы, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредупреждениеОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизацийЗавершение(ОписаниеОповещения = Неопределено) Экспорт
	
	Если ЗакрытьПослеЗаписи И Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов

&НаКлиенте 
Процедура Подключаемый_ПросклонятьПредставлениеПоВсемПадежам()
	
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставлениеПоВсемПадежам(ЭтотОбъект, ФизическоеЛицо.ФИО, Истина, 
		?(ЗначениеЗаполнено(ФизическоеЛицо.Пол), ?(ФизическоеЛицо.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской"), 1, 2), Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимТолькоПросмотраЛичныхДанных() Экспорт
	
	СотрудникиКлиентСервер.УстановитьРежимТолькоПросмотраЛичныхДанныхВФормеСотрудника(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЦветСтиляЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	ОписаниеВспомогательныхРеквизитовПриЧтенииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	УчетЗарплатыИКадровСредствамиБухгалтерии = Форма.УчетЗарплатыИКадровСредствамиБухгалтерии;
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		Принят = ЗначениеЗаполнено(Форма.ДатаПриема);
		Уволен = ЗначениеЗаполнено(Форма.ДатаУвольнения);
		ИспользоватьКадровыйУчет = Форма.ИспользоватьКадровыйУчет;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУвольнение",
			"Доступность",
			Принят И НЕ Форма.Параметры.Ключ.Пустая());
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КнопкаНовогоОформитьПриемНаРаботу",
			"Видимость",
			НЕ Принят);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаПриема",
			"Видимость",
			Принят ИЛИ НЕ ИспользоватьКадровыйУчет);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУвольнение",
			"Видимость",
			Принят ИЛИ НЕ ИспользоватьКадровыйУчет);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Уволить",
			"Видимость",
			НЕ ИспользоватьКадровыйУчет);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Уволить",
			"Доступность",
			Принят И НЕ Уволен И НЕ Форма.Параметры.Ключ.Пустая());
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИзменитьОклад",
			"Доступность",
			Принят И НЕ Уволен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИзменитьОклад",
			"Видимость",
			НЕ Уволен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатаУвольнения",
			"Видимость",
			Уволен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВАрхиве",
			"Видимость",
			Уволен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаБухгалтерскийУчетЗарплаты",
			"Видимость",
			Форма.ПользовательУправляетСчетамиУчета);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаАвансСотрудника",
			"Видимость",
			Форма.АвансРедактируется);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЛичныеДанные",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВыплатаЗарплаты",
			"ТолькоПросмотр",
			(НЕ Принят ИЛИ Уволен) И ИспользоватьКадровыйУчет);
			
		ОтобразитьМестоВыплаты(Форма);
		ОтобразитьПаспортныеДанные(Форма);
	Иначе
		
		Элементы.ГруппаЗарплатаИКадры.Заголовок = НСтр("ru = 'Кадровые данные'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФизлицоДатаРождения",
			"АвтоОтметкаНезаполненного",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДатыПриемаУвольнения",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВыплатаЗарплаты",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНалогиИВзносы",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаБухгалтерскийУчетЗарплаты",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОформитьДокумент",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПаспортныеДанные",
			"Видимость",
			Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЛичныеДанные",
			"Видимость",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьПаспортныеДанные(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ДокументыФизическихЛицВидДокумента.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента = Форма.ДокументыФизическихЛиц.ВидДокумента;
	ЭтоПаспортРФ = (ЗначениеЗаполнено(ВидДокумента) И ВидДокумента = Форма.ПаспортРФ)
		ИЛИ (НЕ ЗначениеЗаполнено(ВидДокумента) И Форма.ГражданинРФ);
		
	Элементы.ДокументыФизическихЛицВидДокумента.Видимость = НЕ ЭтоПаспортРФ ИЛИ НЕ Форма.ГражданинРФ;
	Элементы.ГруппаСерияНомерРаздельно.Видимость          = НЕ ЭтоПаспортРФ ИЛИ НЕ Форма.ГражданинРФ;
	Элементы.СерияНомерПаспорта.Видимость                 = ЭтоПаспортРФ И Форма.ГражданинРФ;
	
	Элементы.ДокументыФизическихЛицСерия.АвтоОтметкаНезаполненного = ЭтоПаспортРФ;
	
	СотрудникиКлиентСервер.УстановитьВидимостьСтраныВыдачиДокумента(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОткрытияФормы()
	
	СотрудникиКлиент.СотрудникиПриОткрытии(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаписатьНаКлиенте(Истина);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

&НаСервере
Процедура ОбновитьОписанияРеквизитов(ИмяФормы = Неопределено)
	
	Если ИмяФормы = Неопределено ИЛИ ИмяФормы = "Справочник.Сотрудники.Форма.НалогНаДоходы" Тогда
		ОбновитьПредставлениеНалогаНаДоходы();
	КонецЕсли;
	
	Если ИмяФормы = Неопределено ИЛИ ИмяФормы = "Справочник.ФизическиеЛица.Форма.Страхование" Тогда
		ОбновитьПредставлениеУсловийСтрахования();
	КонецЕсли;
	
	Если ИмяФормы = Неопределено ИЛИ ИмяФормы = "Справочник.Сотрудники.Форма.ЛичныеДанные" Тогда
		ОбновитьПредставлениеГражданства();
		ОбновитьПредставлениеАдресаПоПрописке();
	КонецЕсли;
	
	Если ИмяФормы = Неопределено ИЛИ ИмяФормы = "Справочник.Сотрудники.Форма.ВыплатаЗарплаты" Тогда
		ОбновитьПредставлениеВыплатыЗарплаты();
		ОбновитьПредставлениеУчетаРасходов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеГражданства(ИсточникДанных = Неопределено)
	
	Если ИсточникДанных = Неопределено
		ИЛИ ИсточникДанных.Количество() = 0 Тогда
		Источник = ГражданствоФизическихЛиц;
	Иначе
		Источник = ИсточникДанных[0];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Период) Тогда
		ГражданствоПредставление = Строка(СтранаРоссия);
		ГражданинРФ = Истина;
	Иначе
		Если НЕ ЗначениеЗаполнено(Источник.Страна) Тогда
			ГражданствоПредставление = НСтр("ru = 'Лицо без гражданства'");
		Иначе
			ГражданствоПредставление = Строка(Источник.Страна);
			Если ЗначениеЗаполнено(Источник.ИНН) Тогда
				ГражданствоПредставление = СтрШаблон(НСтр("ru = '%1 (ИНН: %2)'"),ГражданствоПредставление, Источник.ИНН);
			КонецЕсли;
		КонецЕсли;
		ГражданинРФ = Источник.Страна = СтранаРоссия;
	КонецЕсли;
	
	ОтобразитьПаспортныеДанные(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеНалогаНаДоходы(ИсточникДанных = Неопределено, Знач СтруктураВычетов = Неопределено)
	
	Если ИсточникДанных = Неопределено
		ИЛИ ИсточникДанных.Количество() = 0 Тогда
		Источник = СтатусФизическихЛицКакНалогоплательщиковНДФЛ;
	Иначе
		Источник = ИсточникДанных[0];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Период)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.Статус)
		ИЛИ Источник.Статус = Резидент Тогда
		
		Если СтруктураВычетов = Неопределено Тогда
			СтруктураВычетов = ПредоставленныеВычетыПоНДФЛ();
		КонецЕсли;
		
		ВычетыПредставление = НСтр("ru = 'Предоставляются %1 вычеты'");
		
		ОписаниеВычетов = НСтр("ru = ''");
		Если СтруктураВычетов.ЕстьСтандартыеВычеты
			И СтруктураВычетов.ЕстьИмущественныеВычеты Тогда
			ОписаниеВычетов = НСтр("ru = 'стандартные и имущественные'");
		ИначеЕсли СтруктураВычетов.ЕстьСтандартыеВычеты Тогда
			ОписаниеВычетов = НСтр("ru = 'стандартные'");
		ИначеЕсли СтруктураВычетов.ЕстьИмущественныеВычеты Тогда
			ОписаниеВычетов = НСтр("ru = 'имущественные'");
		КонецЕсли;
		
		Если СтруктураВычетов.ЕстьСтандартыеВычеты
			ИЛИ СтруктураВычетов.ЕстьИмущественныеВычеты Тогда
			ВычетыПредставление = СтрШаблон(ВычетыПредставление, ОписаниеВычетов);
		Иначе
			ВычетыПредставление = НСтр("ru = 'Вычеты не предоставляются'");
		КонецЕсли;
		
		НалогНаДоходыПредставление = СтрШаблон(НСтр("ru = '%1, ставка 13%% (%2)'"), ВычетыПредставление, НРег(Строка(Резидент)));
	ИначеЕсли Источник.Статус = Нерезидент Тогда
		НалогНаДоходыПредставление = СтрШаблон(НСтр("ru = 'Ставка 30%% (%1)'"), НРег(Строка(Источник.Статус)));
	Иначе
		Статус = Строка(Источник.Статус);
		НалогНаДоходыПредставление = СтрШаблон(НСтр("ru = 'Ставка 13%% (%1%2)'"), НРег(Лев(Статус,1)), Сред(Статус,2));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеУсловийСтрахования(ИсточникДанных = Неопределено, ИсточникДанныхДоп = Неопределено)
	
	Если ИсточникДанных = Неопределено
		ИЛИ ИсточникДанных.Количество() = 0 Тогда
		Источник = СтатусыЗастрахованныхФизическихЛиц;
	Иначе
		Источник = ИсточникДанных[0];
	КонецЕсли;
	
	Если ИсточникДанныхДоп = Неопределено
		ИЛИ ИсточникДанныхДоп.Количество() = 0 Тогда
		ИсточникДоп = СведенияОбИнвалидностиФизическихЛиц;
	Иначе
		ИсточникДоп = ИсточникДанныхДоп[0];
	КонецЕсли;
	
	СтатусПредставление = НСтр("ru = 'Стандартные'");
	Если Источник.ВидЗастрахованногоЛица <> СтатусГражданинаРФ Тогда
		СтатусПредставление = Строка(Источник.ВидЗастрахованногоЛица);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Период)
		ИЛИ НЕ ЗначениеЗаполнено(Источник.ВидЗастрахованногоЛица)
		ИЛИ Источник.ВидЗастрахованногоЛица = СтатусГражданинаРФ Тогда
		
		СтатусПредставление = Строка(СтатусГражданинаРФ);
		
		Если Год(ТекущаяДатаСеанса()) < 2018 Тогда
			Если ФизическоеЛицо.ПостоянноПроживалВКрыму18Марта2014Года Тогда
				СтатусПредставление = СтрШаблон(НСтр("ru = '%1, проживал в Крыму 18 марта 2014 г.'"), СтатусПредставление);
			КонецЕсли;
		КонецЕсли;
		
		Если ИсточникДоп.Инвалидность Тогда
			СтатусПредставление = СтрШаблон(НСтр("ru = '%1, установлена инвалидность с %2'"),
				СтатусПредставление,
				Формат(?(ЗначениеЗаполнено(ИсточникДоп.ДатаВыдачи),
					ИсточникДоп.ДатаВыдачи, 
					ИсточникДоп.ДатаРегистрацииИзменений),
					"ДФ=dd.MM.yyyy"));
			Если ЗначениеЗаполнено(СведенияОбИнвалидностиФизическихЛиц.ДействуетДо) Тогда
				СтатусПредставление = СтрШаблон(НСтр("ru = '%1 по %2'"),
					СтатусПредставление,
					Формат(ИсточникДоп.ДействуетДо, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		Иначе
			СтатусПредставление = СтрШаблон(НСтр("ru = '%1, инвалидность не установлена'"), СтатусПредставление);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФизическоеЛицо.ЛьготаПриНачисленииПособий) Тогда
			Если ФизическоеЛицо.ЛьготаПриНачисленииПособий = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов Тогда
				СтатусПредставление = СтрШаблон(НСтр("ru = '%1, учитываются периоды военной службы'"), СтатусПредставление);
			Иначе
				СтатусПредставление = СтрШаблон(НСтр("ru = '%1, подвергся воздействию радиации (%2)'"), СтатусПредставление, ФизическоеЛицо.ЛьготаПриНачисленииПособий);
			КонецЕсли;
		КонецЕсли;
		
		УсловияСтрахованияПредставление = СтатусПредставление;
		
	Иначе
		УсловияСтрахованияПредставление = Строка(Источник.ВидЗастрахованногоЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеАдресаПоПрописке(ИсточникДанных = Неопределено)
	
	Если ИсточникДанных = Неопределено Тогда
		ВидИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица");
		МассивДанных = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ВидИнформации));
		Источник = ?(МассивДанных.Количество()<> 0, МассивДанных[0], Неопределено);
	Иначе
		Источник = ИсточникДанных;
	КонецЕсли;
	КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = ?(Источник = Неопределено, "", Источник.Представление);
	
	Если НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица) Тогда
		КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеВыплатыЗарплаты(ИсточникДанных = Неопределено)
	
	Если ИсточникДанных = Неопределено
		ИЛИ ИсточникДанных.Количество() = 0 Тогда
		Источник = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам;
	Иначе
		Источник = ИсточникДанных[0];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.ЗарплатныйПроект)
			И НЕ ЗначениеЗаполнено(Источник.НомерЛицевогоСчета) Тогда
		ЛицевойСчетСотрудникаПредставление = НСтр("ru = 'Заполнить лицевой счет'");
		Элементы.ЛицевойСчетСотрудникаПредставление.ЦветТекста = ЦветСтиляПоясняющийОшибкуТекст;
		ЛицевойСчетЗаполнен = Ложь;
	Иначе
		ЛицевойСчетСотрудникаПредставление = СтрШаблон(НСтр("ru = '%1, %2'"),
			Источник.НомерЛицевогоСчета,
			Источник.ЗарплатныйПроект);
		Элементы.ЛицевойСчетСотрудникаПредставление.ЦветТекста = ЦветСтиляЦветГиперссылки;
		ЛицевойСчетЗаполнен = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетПредставление = НСтр("ru = 'Заполнить банковский счет'");
		Элементы.ОсновнойБанковскийСчетПредставление.ЦветТекста = ЦветСтиляПоясняющийОшибкуТекст;
	Иначе
		ОсновнойБанковскийСчетПредставление = Строка(ОсновнойБанковскийСчет.Наименование);
		Элементы.ОсновнойБанковскийСчетПредставление.ЦветТекста = ЦветСтиляЦветГиперссылки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеУчетаРасходов(ИсточникДанных = Неопределено)
	
	Если НЕ ПользовательУправляетСчетамиУчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсточникДанных = Неопределено
		ИЛИ ИсточникДанных.Количество() = 0 Тогда
		Источник = БухучетЗарплатыСотрудников;
	Иначе
		Источник = ИсточникДанных[0];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.Период) Тогда
		БухучетЗарплатыСотрудниковПредставление = НСтр("ru = '<Авто>'");
	ИначеЕсли НЕ ЗначениеЗаполнено(Источник.СпособОтраженияЗарплатыВБухучете)
		И НЕ ЗначениеЗаполнено(Источник.ОтношениеКЕНВД) Тогда
		БухучетЗарплатыСотрудниковПредставление = НСтр("ru = '<Авто>'");
	Иначе
		Если ЗначениеЗаполнено(Источник.СпособОтраженияЗарплатыВБухучете) Тогда
			БухучетЗарплатыСотрудниковПредставление = Строка(Источник.СпособОтраженияЗарплатыВБухучете);
		Иначе
			БухучетЗарплатыСотрудниковПредставление = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ОтношениеКЕНВД) Тогда
			ШаблонЕНВД = ?(ЗначениеЗаполнено(БухучетЗарплатыСотрудниковПредставление), НСтр("ru = ' ;%1'"),НСтр("ru = '%1'"));
			ОтношениеКЕНВД = СтрШаблон(ШаблонЕНВД ,Источник.ОтношениеКЕНВД);
		Иначе
			ОтношениеКЕНВД = "";
		КонецЕсли;
		БухучетЗарплатыСотрудниковПредставление = СтрШаблон(НСтр("ru = '%1%2'"),БухучетЗарплатыСотрудниковПредставление, ОтношениеКЕНВД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеДокументаУдостоверяющегоЛичность(ДокументыФизическихЛиц, ПаспортРФ)
	
	Если ДокументыФизическихЛиц.ВидДокумента = ПаспортРФ Тогда
		СерияНомер = СтрШаблон(НСтр("ru='%1 %2'"), ДокументыФизическихЛиц.Серия, ДокументыФизическихЛиц.Номер);
	Иначе
		СерияНомер = "";
	КонецЕсли;
	
	Возврат СерияНомер;
	
КонецФункции

&НаКлиенте
Процедура АдресПоПропискеРедактированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаписатьКонтактнуюИнформацию(Результат);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонтактнуюИнформацию(ИсточникДанных)
	
	КонтактнаяИнформацияМассив = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ИсточникДанных.Вид));
	Если КонтактнаяИнформацияМассив.Количество() <> 0 Тогда
		ФизическоеЛицо.КонтактнаяИнформация.Удалить(ФизическоеЛицо.КонтактнаяИнформация.Индекс(КонтактнаяИнформацияМассив[0]));
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ФизическоеЛицо,
		ИсточникДанных.КонтактнаяИнформация,
		ИсточникДанных.Вид,
		ИсточникДанных.Тип);
	
	КонтактнаяИнформацияМассив = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ИсточникДанных.Вид));
	Если КонтактнаяИнформацияМассив.Количество() <> 0 Тогда
		ОбновитьПредставлениеАдресаПоПрописке(КонтактнаяИнформацияМассив[0]);
		ЗаполнитьЗависимыеАдреса(КонтактнаяИнформацияМассив[0], ИсточникДанных.Вид);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьМестоВыплаты(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЛицевойСчетСотрудникаПредставление",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОсновнойБанковскийСчетПредставление",
			"Видимость",
			Истина);
		
	ИначеЕсли Форма.МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЛицевойСчетСотрудникаПредставление",
			"Видимость",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОсновнойБанковскийСчетПредставление",
			"Видимость",
			Ложь);
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Форма.МестаВыплатыЗарплатыСотрудников.Вид) Тогда
			Форма.МестаВыплатыЗарплатыСотрудников.Вид = ПредопределенноеЗначение("Перечисление.ВидыМестВыплатыЗарплаты.Касса");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ЛицевойСчетСотрудникаПредставление",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОсновнойБанковскийСчетПредставление",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьМестоВыплатыЗарплатыСотрудника()
	
	МестаВыплатыЗарплатыСотрудниковНаборЗаписей = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МестаВыплатыЗарплатыСотрудниковНаборЗаписей, МестаВыплатыЗарплатыСотрудников);
	МестаВыплатыЗарплатыСотрудниковНаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновнойБанковскийСчет();
	
	Если МестаВыплатыЗарплатыСотрудников.Вид = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		ОсновнойБанковскийСчетОбъект = РеквизитФормыВЗначение("ОсновнойБанковскийСчет", Тип("СправочникОбъект.БанковскиеСчета"));
		Если НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчетОбъект.Ссылка) Тогда
			ОсновнойБанковскийСчетОбъект.УстановитьСсылкуНового(ОсновнойБанковскийСчетСсылка);
		КонецЕсли;
		ОсновнойБанковскийСчетОбъект.Записать();
		ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "ОсновнойБанковскийСчет");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредоставленныеВычетыПоНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ЭтотОбъект.ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("Организация",    ЭтотОбъект.ТекущаяОрганизация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
	|ГДЕ
	|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
	|ГДЕ
	|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
	|ГДЕ
	|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
	|	И ИмущественныеВычетыНДФЛ.Организация = &Организация";
	
	Результат = Запрос.ВыполнитьПакет();
	СтандартыеВычеты    = Результат[0].Выгрузить();
	ИмущественныеВычеты = Результат[1].Выгрузить();
	
	СтруктураВычетов = Новый Структура;
	СтруктураВычетов.Вставить("ЕстьСтандартыеВычеты",    СтандартыеВычеты.Количество()>0);
	СтруктураВычетов.Вставить("ЕстьИмущественныеВычеты", ИмущественныеВычеты.Количество()>0);
	
	Возврат СтруктураВычетов;
	
КонецФункции

&НаСервере
Процедура ОписаниеВспомогательныхРеквизитовПриЧтенииНаСервере()
	
	УчетЗарплатыИКадровСредствамиБухгалтерии = ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии");
	ИспользоватьКадровыйУчет                 = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ИспользоватьНесколькоОрганизаций         = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизацийЗарплатаКадрыБазовая");
	ПоддержкаСовместительства                = ПолучитьФункциональнуюОпцию("ПоддержкаСовместительства");
	
	Если УчетЗарплатыИКадровСредствамиБухгалтерии Тогда
		
		ПользовательУправляетСчетамиУчета =
			СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
		ПаспортРФ =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
		Резидент =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент");
		Нерезидент =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент");
		СтатусГражданинаРФ =
			Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ;
		СтатусИностранногоГражданина =
			Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы;
		СтранаРоссия =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтраныМира.Россия");
		ИностранныйПаспорт =
			Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", "10");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизическоеЛицо",     ФизическоеЛицоСсылка);
		Запрос.УстановитьПараметр("Сотрудник",          СотрудникСсылка);
		Запрос.УстановитьПараметр("Организация",        ТекущаяОрганизация);
		Запрос.УстановитьПараметр("Период",             ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("СтранаРоссия",       СтранаРоссия);
		Запрос.УстановитьПараметр("Резидент",           Резидент);
		Запрос.УстановитьПараметр("Нерезидент",         Нерезидент);
		Запрос.УстановитьПараметр("СтатусГражданинаРФ", СтатусГражданинаРФ);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГражданствоФизическихЛицСрезПоследних.Период КАК Период,
		|	ГражданствоФизическихЛицСрезПоследних.Страна КАК Страна,
		|	ГражданствоФизическихЛицСрезПоследних.ИНН КАК ИНН
		|ИЗ
		|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК ГражданствоФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусФизическихЛицКакНалогоплательщиковНДФЛСрезПоследних.Период КАК Период,
		|	СтатусФизическихЛицКакНалогоплательщиковНДФЛСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
		|ГДЕ
		|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
		|ГДЕ
		|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрНакопления.ИмущественныеВычетыНДФЛ КАК ИмущественныеВычетыНДФЛ
		|ГДЕ
		|	ИмущественныеВычетыНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
		|	И ИмущественныеВычетыНДФЛ.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыЗастрахованныхФизическихЛицСрезПоследних.Период КАК Период,
		|	СтатусыЗастрахованныхФизическихЛицСрезПоследних.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица
		|ИЗ
		|	РегистрСведений.СтатусыЗастрахованныхФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК СтатусыЗастрахованныхФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОбИнвалидностиФизическихЛицСрезПоследних.Период КАК Период,
		|	СведенияОбИнвалидностиФизическихЛицСрезПоследних.Инвалидность КАК Инвалидность,
		|	СведенияОбИнвалидностиФизическихЛицСрезПоследних.ДействуетДо КАК ДействуетДо,
		|	СведенияОбИнвалидностиФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|	СведенияОбИнвалидностиФизическихЛицСрезПоследних.ДатаРегистрацииИзменений КАК ДатаРегистрацииИзменений
		|ИЗ
		|	РегистрСведений.СведенияОбИнвалидностиФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК СведенияОбИнвалидностиФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БухучетЗарплатыСотрудниковСрезПоследних.Период КАК Период,
		|	БухучетЗарплатыСотрудниковСрезПоследних.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
		|	БухучетЗарплатыСотрудниковСрезПоследних.ОтношениеКЕНВД КАК ОтношениеКЕНВД
		|ИЗ
		|	РегистрСведений.БухучетЗарплатыСотрудников.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК БухучетЗарплатыСотрудниковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ДатаОткрытияЛицевогоСчета КАК ДатаОткрытияЛицевогоСчета,
		|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект КАК ЗарплатныйПроект
		|ИЗ
		|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
		|ГДЕ
		|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация = &Организация
		|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо = &ФизическоеЛицо
		|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ДатаОткрытияЛицевогоСчета <= &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОткрытияЛицевогоСчета УБЫВ";
		
		Результат = Запрос.ВыполнитьПакет();
		
		ОбновитьПредставлениеГражданства(Результат[0].Выгрузить());
		
		ОбновитьПредставлениеНалогаНаДоходы(
			Результат[1].Выгрузить(),
			Новый Структура("ЕстьСтандартыеВычеты, ЕстьИмущественныеВычеты",
				НЕ Результат[2].Пустой(), НЕ Результат[3].Пустой()));
				
		ОбновитьПредставлениеУсловийСтрахования(Результат[4].Выгрузить(), Результат[5].Выгрузить());
		
		ОбновитьПредставлениеУчетаРасходов(Результат[6].Выгрузить());

		ОпределитьПорядокРасчетаАванса();
		ПрочитатьЗаписьОМестеВыплатыЗарплатыСотрудниковДляРедактированияВФорме();
		
		Если ЗначениеЗаполнено(ФизическоеЛицо.ОсновнойБанковскийСчет) Тогда
			ЗначениеВРеквизитФормы(ФизическоеЛицо.ОсновнойБанковскийСчет.ПолучитьОбъект(), "ОсновнойБанковскийСчет");
		Иначе
			Если ПравоДоступа("Изменение", Метаданные.Справочники.БанковскиеСчета) Тогда
				ОсновнойБанковскийСчетСсылка = Справочники.БанковскиеСчета.ПолучитьСсылку();
				ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ОсновнойБанковскийСчетОбъект.Владелец = ФизическоеЛицоСсылка;
				ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "ОсновнойБанковскийСчет");
			КонецЕсли;
		КонецЕсли;
		ОбновитьПредставлениеВыплатыЗарплаты(Результат[7].Выгрузить());
		
	КонецЕсли;
	
	СерияНомерПаспорта = ПредставлениеДокументаУдостоверяющегоЛичность(ДокументыФизическихЛиц, ПаспортРФ);
	ОбновитьПредставлениеАдресаПоПрописке();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПорядокРасчетаАванса()
	
	АвансРедактируется = ПолучитьФункциональнуюОпцию("ИндивидуальныйАванс", Новый Структура("Организация", ТекущаяОрганизация));
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаписьОМестеВыплатыЗарплатыСотрудниковДляРедактированияВФорме() Экспорт
	
	МенеджерЗаписи = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сотрудник           = СотрудникСсылка;
	МенеджерЗаписи.ФизическоеЛицо      = ФизическоеЛицоСсылка;
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Сотрудник           = СотрудникСсылка;
		МенеджерЗаписи.ФизическоеЛицо      = ФизическоеЛицоСсылка;
		МенеджерЗаписи.Вид                 = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	КонецЕсли;
	ЗначениеВРеквизитФормы(МенеджерЗаписи, "МестаВыплатыЗарплатыСотрудников");
	
КонецПроцедуры

&НаКлиенте
Процедура ВводДатыУвольненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДатаУвольнения = Результат;
		Записать();
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеАдреса(АдресПоПрописке, ВидКонтактнойИнформации)
	
	ЗависимостиВидовАдресов = СотрудникиКлиентСервер.ЗависимостиВидовАдресов();
	
	Если ЗависимостиВидовАдресов <> Неопределено И ЗначениеЗаполнено(АдресПоПрописке.Представление) Тогда
		
		ЗависимыеВидыКонтактнойИнформации = ЗависимостиВидовАдресов[ВидКонтактнойИнформации];
		Если ЗависимыеВидыКонтактнойИнформации <> Неопределено Тогда
			Для Каждого ЗависимыйВидКонтактнойИнформации Из ЗависимыеВидыКонтактнойИнформации Цикл
				КонтактнаяИнформацияМассив = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ЗависимыйВидКонтактнойИнформации));
				Если КонтактнаяИнформацияМассив.Количество() = 0 Тогда
					СтрокаАдреса = ФизическоеЛицо.КонтактнаяИнформация.Добавить();
				Иначе
					СтрокаАдреса = КонтактнаяИнформацияМассив[0];
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаАдреса.Представление) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаАдреса, АдресПоПрописке);
					СтрокаАдреса.Вид = ЗависимыйВидКонтактнойИнформации;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыИностранногоГражданина()
	
	Если НЕ ГражданинРФ Тогда
		Если ДокументыФизическихЛиц.ВидДокумента = ПаспортРФ
			ИЛИ НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента) Тогда
			ДокументыФизическихЛиц.ВидДокумента = ИностранныйПаспорт;
		КонецЕсли;
	Иначе
		Если ДокументыФизическихЛиц.ВидДокумента = ИностранныйПаспорт
			ИЛИ НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента) Тогда
			ДокументыФизическихЛиц.ВидДокумента = ПаспортРФ;
		КонецЕсли;
	КонецЕсли;
	
	СотрудникиКлиентСервер.УстановитьВидимостьСтраныВыдачиДокумента(ЭтотОбъект);
	
	Если НЕ ГражданинРФ Тогда
		Если СтатусыЗастрахованныхФизическихЛиц.ВидЗастрахованногоЛица = СтатусГражданинаРФ
			ИЛИ НЕ ЗначениеЗаполнено(СтатусыЗастрахованныхФизическихЛиц.Период) Тогда
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
				ЭтотОбъект, "СтатусыЗастрахованныхФизическихЛиц", ФизическоеЛицоСсылка);
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
				ЭтотОбъект, "СведенияОбИнвалидностиФизическихЛиц", ФизическоеЛицоСсылка);
			Если СтатусыЗастрахованныхФизическихЛиц.ВидЗастрахованногоЛица = СтатусГражданинаРФ Тогда
				СтатусыЗастрахованныхФизическихЛиц.ВидЗастрахованногоЛица = СтатусИностранногоГражданина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтатусыЗастрахованныхФизическихЛиц.Период) Тогда
				СтатусыЗастрахованныхФизическихЛиц.Период = ?(ЗначениеЗаполнено(ДатаПриема), ДатаПриема, ТекущаяДатаСеанса());
			КонецЕсли;
			УстановитьПризнакРедактированияДанныхВДополнительнойФорме("Справочник.ФизическиеЛица.Форма.Страхование", ЭтотОбъект);
			ОбновитьПредставлениеУсловийСтрахования();
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтатусыЗастрахованныхФизическихЛиц.Период) Тогда
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
				ЭтотОбъект, "СтатусыЗастрахованныхФизическихЛиц", ФизическоеЛицоСсылка);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СведенияОбИнвалидностиФизическихЛиц.Период) Тогда
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(
				ЭтотОбъект, "СведенияОбИнвалидностиФизическихЛиц", ФизическоеЛицоСсылка);
		КонецЕсли;
		Если СтатусыЗастрахованныхФизическихЛиц.ВидЗастрахованногоЛица <> СтатусГражданинаРФ Тогда
			СтатусыЗастрахованныхФизическихЛиц.ВидЗастрахованногоЛица = СтатусГражданинаРФ;
		КонецЕсли;
		УстановитьПризнакРедактированияДанныхВДополнительнойФорме("Справочник.ФизическиеЛица.Форма.Страхование", ЭтотОбъект);
		ОбновитьПредставлениеУсловийСтрахования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойБанковскийСчетПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтотОбъект);
	
	Оповещение = Новый ОписаниеОповещения("БанковскийСчетРедактированиеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект",         ОсновнойБанковскийСчет);
	ПараметрыФормы.Вставить("ОписаниеДанных", ФизическоеЛицо.ФИО);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "Сотрудник");
	ОткрытьФорму(
		"Справочник.Сотрудники.Форма.БанковскийСчет",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор,
		,
		,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетРедактированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОсновнойБанковскийСчет, Результат);
		Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.ОсновнойБанковскийСчет) Тогда
			ФизическоеЛицо.ОсновнойБанковскийСчет = ОсновнойБанковскийСчетСсылка;
		КонецЕсли;
		ОбновитьПредставлениеВыплатыЗарплаты();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрганизациюИПодразделениеСотрудника()
	
	Если НЕ ИспользоватьКадровыйУчет И НЕ ИспользоватьНесколькоОрганизаций Тогда
		Если НЕ ЗначениеЗаполнено(Сотрудник.ГоловнаяОрганизация)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущаяОрганизация)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущееПодразделение) Тогда
			ЗаполнитьОрганизациюПодразделение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюПодразделение()
	
	ЗначенияПоУмолчанию = Новый Структура("Организация, Подразделение");
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗначенияПоУмолчанию);
	
	Если НЕ ЗначениеЗаполнено(Сотрудник.ГоловнаяОрганизация)
		ИЛИ НЕ ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ТекущаяОрганизация = ЗначенияПоУмолчанию.Организация;
		Сотрудник.ГоловнаяОрганизация = ТекущаяОрганизация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущееПодразделение) Тогда
		ТекущееПодразделение = ЗначенияПоУмолчанию.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВидЗанятостиСотрудника()
	
	Если НЕ ИспользоватьКадровыйУчет И НЕ ИспользоватьНесколькоОрганизаций Тогда
		Если НЕ ЗначениеЗаполнено(ТекущийВидЗанятости) Тогда
			ТекущийВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаблокироватьОбъектВФормеВладельце() Экспорт
	
	ОбъектЗаблокирован = Истина;
	
	Если Не СотрудникиКлиент.ЗаблокироватьСотрудникаПриРедактировании(ЭтотОбъект) Тогда
		
		СотрудникиКлиент.УстановитьРежимТолькоПросмотраДополнительнойФормы(ЭтотОбъект);
		ЭтотОбъект.Модифицированность = Ложь;
		
		ОбъектЗаблокирован = Ложь;
		
	КонецЕсли;

	
	Если ОбъектЗаблокирован
		И Не СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ЭтотОбъект, , Истина) Тогда
		
		СотрудникиКлиент.УстановитьРежимТолькоПросмотраДополнительнойФормы(ЭтотОбъект);
		ЭтотОбъект.Модифицированность = Ложь;
		
		ОбъектЗаблокирован = Ложь;
		
	КонецЕсли;
	
	Возврат ОбъектЗаблокирован;
	
КонецФункции

#Область РаботаСДополнительнымиФормами

&НаКлиенте
Процедура ОткрытьДополнительнуюФорму(ОписаниеДополнительнойФормы, Форма, ОписаниеОповещения = Неопределено, КлючНазначенияИспользования = "", ОписаниеДанных= "") Экспорт
	
	ПараметрыФормы = СотрудникиКлиент.ПараметрыДополнительнойФормы(ОписаниеДополнительнойФормы, Форма, Истина);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("ОписаниеДанных",              ОписаниеДанных);
	ОткрытьФорму(
		ОписаниеДополнительнойФормы.ИмяФормы,
		ПараметрыФормы,
		Форма,
		Истина,
		,
		,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПризнакРедактированияДанныхВДополнительнойФорме(ИмяДополнительнойФормы, Форма) Экспорт
	
	ПрочитанныеДанные = Новый Соответствие;
	
	Если ТипЗнч(Форма.ПрочитанныеДанныеФорм) = Тип("ФиксированноеСоответствие") Тогда
		
		Для каждого ЭлементСтруктуры Из Форма.ПрочитанныеДанныеФорм Цикл
			ПрочитанныеДанные.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ПрочитанныеДанные.Вставить(ИмяДополнительнойФормы, Истина);
	
	Форма.ПрочитанныеДанныеФорм = Новый ФиксированноеСоответствие(ПрочитанныеДанные);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
