// Квартплата +
////////////////////////////////////////////////////////////////////////////////
// Изменения в форме:
//  - Добавлена кнопка "Настройка..." для открытия формы "Настройки отчета".
//  - Добавлена кнопка "Заполнить" для автоматического заполнения отчета данными
//    из базы.
// Изменения в модуле:
//  - Добавлены обработчики нажатия для кнопок "Настройка..." и "Заполнить".
//  - Добавлена инициализация настроек заполнения.
//  - Добавлены процедуры, предназначенные для автоматического заполнения формы.
//  - При создании формы добавляется кнопка "Часто задаваемые вопросы".
//  - Добавлен обработчик подключаемой команды "Часто задаваемые вопросы".
// Квартплата -

&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ПолеТабличногоДокументаФормаОтчета.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "31/10/2016";
	// Код отчета, равен коду по ОКУД
	СтруктураРеквизитовФормы.мКодОтчета   = "0609203";
	
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2017Кв1_ФормаОтчета"));

	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	// Квартплата +
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Квартплата -
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы.Вставить("мТаблицаСоответствияУслуг");
	СтруктураРеквизитовФормы.Вставить("мТаблицаСоответствияУслугЖилищные");
	СтруктураРеквизитовФормы.Вставить("мСоциальнаяНормаНаЧеловека");
	СтруктураРеквизитовФормы.Вставить("мВидОбслуживаемойПлощадиПомещений");	
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	РегламентированнаяОтчетность.ЗапомнитьИменаСправочниковОбособленныхПодразделений(ЭтаФорма);
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;

	КонецЕсли;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НомерКорректировки = 0;
	Иначе
		НомерКорректировки = СтруктураРеквизитовФормы.мСохраненныйДок.Вид;
	КонецЕсли;
	
	ТекТабличноеПоле.Области.НомерКорректировки.Значение = НомерКорректировки;
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = ДатаПодписи;
	
	ПоказатьПериод();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ФСГС");
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	Элементы.ФормаПроверкаКСШаблоном.Видимость = (Метаданные.Отчеты.Найти("РегламентированныйОтчетСтатистикаПрочиеФормы") <> Неопределено);
	
КонецПроцедуры

// Процедура управляет показом в форме периода построения отчета.
//
&НаСервере
Процедура ПоказатьПериод()
	
	// Период в шапке и заголовке отчета.
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = "за январь - "
		+ НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'")) + " г.";
	СтруктураРеквизитовФормы.СтрПериодОтчета = "январь - "
		+ НРег(Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'")) + " г.";
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ОбособПодразделение;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                    = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// восстанавливаем флаг исключения данных обособленных подразделений
	СписокСохранения.Свойство("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	
	// восстанавливаем выбранное значение обособленного подразделения
	Если Не СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		Если СписокСохранения.Свойство("ОбособленноеПодразделение", ОбособПодразделение) Тогда
			ОбособленноеПодразделение = ОбособПодразделение;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) И ДанныеМногострочныхРазделов <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
				ВывестиРазделВТабличныйДокументНаСервере(НайденноеЗначение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	ВосстановитьДанныеОтчетаСтарогоОбразца(ПоказателиОтчета);
	
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;
			РегламентированнаяОтчетность.УстановитьЗначениеИФорматВПоле(ТекТабличноеПоле, ИмяПоказателя, ЗначениеПоказателя);
		КонецЦикла;
	КонецЦикла;

	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		Если Не (НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета
			И КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			Для НомСтр = 37 По 38 Цикл
				Для НомКол = 3 По 8 Цикл 
					Если НомСтр = 38 И НомКол = 3 Тогда
						Продолжить;
					КонецЕсли;
					Обл = ПолеТабличногоДокументаФормаОтчета.Области.Найти("П000002" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="));
					Если Обл <> Неопределено Тогда 
						Обл.Значение = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Для НомСтр = 61 По 66 Цикл
				Для НомКол = 3 По 8 Цикл 
					Обл = ПолеТабличногоДокументаФормаОтчета.Области.Найти("П000004" + Формат(НомСтр, "ЧЦ=4; ЧВН=; ЧГ=") + Формат(НомКол, "ЧЦ=2; ЧВН=; ЧГ="));
					Если Обл <> Неопределено Тогда 
						Обл.Значение = 0;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность   = Ложь;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеОтчетаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаФормаОтчета"];
	
	// Если это показатели отчета нового образца, тогда выход из процедуры
	Если ПоказателиТаблПоле.Свойство("П000202101_1") Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПоказателей = Новый Соответствие;
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		ПрефиксИмениПоказателя = "";
		ИмяПоказателяБезПрефикса = ИмяПоказателя;
		Если ВРег(Лев(ИмяПоказателя,2)) = "ЧН" Тогда
			ПрефиксИмениПоказателя = "ЧН";
			ИмяПоказателяБезПрефикса = Сред(ИмяПоказателя, 3);
		КонецЕсли;
		ЧастьПоказателя1 = Лев(ИмяПоказателяБезПрефикса, 6);
		ЧастьПоказателя2 = Сред(ИмяПоказателяБезПрефикса, 7, 2);
		ЧастьПоказателя3 = Сред(ИмяПоказателяБезПрефикса, 9);
		
		ИмяНовогоПоказателя = ИмяПоказателя;
		Если (ЧастьПоказателя1 = "П00020") И (ЧастьПоказателя2 >= "01" И ЧастьПоказателя2 <= "12") И (ЧастьПоказателя3 >= "01" И ЧастьПоказателя3 <= "06") Тогда
			ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0002021" + ЧастьПоказателя3 + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
		ИначеЕсли (ЧастьПоказателя1 = "П00050") И (ЧастьПоказателя2 >= "01" И ЧастьПоказателя2 <= "11") Тогда
			Если ЧастьПоказателя3 >= "01" И ЧастьПоказателя3 <= "05" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + ЧастьПоказателя3 + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			ИначеЕсли ЧастьПоказателя3 >= "06_1" И ЧастьПоказателя3 <= "06_3" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + Формат(Число(Прав(ЧастьПоказателя3, 1)) + 5, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			ИначеЕсли ЧастьПоказателя3 >= "07" И ЧастьПоказателя3 <= "10" Тогда
				ИмяНовогоПоказателя = ПрефиксИмениПоказателя + "П0005001" + Формат(Число(ЧастьПоказателя3) + 2, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + Формат(Число(ЧастьПоказателя2), "ЧГ=");
			КонецЕсли
		КонецЕсли;
		
		Если ИмяНовогоПоказателя = ИмяПоказателя Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеПоказателей.Вставить(ИмяПоказателя, ИмяНовогоПоказателя);
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из СоответствиеПоказателей Цикл
		
		ПоказателиТаблПоле.Вставить(ЭлементСоответствия.Значение, ПоказателиТаблПоле[ЭлементСоответствия.Ключ]);
		ПоказателиТаблПоле.Удалить(ЭлементСоответствия.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьСведенияОбОрганизацииДляОтчетаСтатистики(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует="", Вариант="", ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки="", Автосохранение="", ПоказателиОтчета="")
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
		
КонецФункции

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант = Неопределено, ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = Неопределено;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;	
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);	
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	
	СтруктураРеквизитовФормы.мВариант = Вариант;

	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	ДанныеМногострочныхРазделов = Новый Структура;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вставляем флаг исключения данных обособленных подразделений
	СписокСохранения.Вставить("ИсключитьДанныеОбособленныхПодразделений", ИсключитьДанныеОбособленныхПодразделений);
	
	// вставляем выбранное значение обособленного подразделения
	СписокСохранения.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
				
		КонецЕсли;
		
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиентСервер.СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	           	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	РегламентированнаяОтчетностьКлиентСервер.ЗаполнитьПоказателиОтчета(ЭтаФорма, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, ИмяЛиста, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп = Неопределено)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "ФормаОтчета" Тогда
		
		ИмяГруппы = РегламентированнаяОтчетностьКлиентСервер.РазделТекущейОбласти(Форма, Форма.Элементы.ПолеТабличногоДокументаФормаОтчета.ТекущаяОбласть);
		
	КонецЕсли;

	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ПолеТабличногоДокументаФормаОтчета";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
			
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
						
		РегламентированнаяОтчетностьКлиентСервер.ДобавитьНеобходимоеКоличествоДопСтрок(Форма, ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					// устанавливаем порядковый номер строки
					Если ИмяЯчейки = "П000202102_1" Тогда
						ОбластьЯчейкиТаблицы.Текст    = "21";
					Иначе
						ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
    
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ОбработкаВыбораПоляОбособленныхПодразделений(ЭтаФорма, Область, СтандартнаяОбработка);
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьДанныеОбособленныхПодразделенийПриИзменении(Элемент) Экспорт 
	
	НачЗначениеОбособленногоПодразделения = ОбособленноеПодразделение;
	
	УстановитьДоступностьЭУВыбораОбособленныхПодразделений(ЭтаФорма);
	
	Если ИсключитьДанныеОбособленныхПодразделений Тогда
		Если НачЗначениеОбособленногоПодразделения <> ОбособленноеПодразделение Тогда
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент) Экспорт 
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭУВыбораОбособленныхПодразделений(Форма)
	Форма.ОбособленноеПодразделение = ?(НЕ Форма.ИсключитьДанныеОбособленныхПодразделений, Форма.ОбособленноеПодразделение, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.Имя = "ДатаСоставленияОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда 
		Если Область.Значение = 0 Тогда 
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			НомерКорректировки = 0;
		Иначе 
			СтруктураРеквизитовФормы.ВидДокумента = 1;
			НомерКорректировки = Область.Значение;
		КонецЕсли;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0 Тогда
			
			ФорматПредставленияНуля = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля), ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент); 
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
						
			// обход ошибок платформы: в тонком клиенте не работает ПоказатьВыборИзСписка (ПоказатьВыборИзМеню не работает в веб-клиенте 
			// и в событии ПриИзмененииСодержимогоОбласти табличного документа - где мы его и хотим использовать прежде всего)
			# Если ВебКлиент Тогда
			
				Если НайденнаяСтрока = Неопределено Тогда
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
				Иначе
					ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НайденнаяСтрока);
				КонецЕсли;
				
			#Иначе
				
				Список.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выберите значение", Элемент);
					
			#КонецЕсли
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;

	РасчетНаКлиенте("", ОбластьИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Формат = РегламентированнаяОтчетностьКлиентСервер.ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, СписокЭлемент.Значение);
		
	КонецЕсли;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	
	РасчетНаКлиенте("", ОбластьИмя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт	

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", ОбластьИмя = "")
	
	Области = Форма.ПолеТабличногоДокументаФормаОтчета.Области;
	
	Для Стр = 33 По 51 Цикл 
		Префикс = "П03" + Стр + "0";
		
		Тот = 0;
		Для Гр = 4 По 6 Цикл 
			Обл = Области.Найти(Префикс + Гр);
			Если Обл <> Неопределено Тогда 
				Тот = Тот + Обл.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Области.Найти(Префикс + "9").Значение = Тот;
	КонецЦикла;
	
	СуммаИнфо = Новый Соответствие;
	СуммаИнфо.Вставить("32", "33,34,37");
	СуммаИнфо.Вставить("38", "39,40,41,42,43,46,47,49,50,51");
	
	Для Гр = 3 По 9 Цикл 
		Постфикс = "0" + Гр;
		Для Каждого Элт Из СуммаИнфо Цикл 
			ДляСтр = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт.Значение, ",");
			Тот = 0;
			Для Каждого Строка Из ДляСтр Цикл 
				Обл = Области.Найти("П03"+Строка+Постфикс);
				Если Обл <> Неопределено Тогда 
					Тот = Тот + Обл.Значение;
				КонецЕсли;
			КонецЦикла;
			Области.Найти("П03" + Элт.Ключ + Постфикс).Значение = Тот;
		КонецЦикла;
		
		Области.Найти("П0352" + Постфикс).Значение = Области.Найти("П0332" + Постфикс).Значение + Области.Найти("П0338" + Постфикс).Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда        
		Возврат;       
	Иначе        
		Очистить();       
	КонецЕсли;
	
КонецПроцедуры // ОчиститьОтчет()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить() Экспорт
		
	ОчиститьТабличноеПолеНаСервере();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере()
	
	// Список ячеек, которые очищать не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	ВыбТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ПериодОтчета"].Значение,          "ПериодОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ДатаСоставленияОтчета"].Значение, "ДатаСоставленияОтчета");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргНазв"].Значение,               "ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдрес"].Значение,              "ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодОКПО"].Значение,            "ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв"].Значение,                  "ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач"].Значение,                  "ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодНазв1"].Значение,                  "ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргКодЗнач1"].Значение,                  "ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргДолжностьИсп"].Значение,       "ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргТелефонИсп"].Значение,         "ОргТелефонИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргИсполнитель"].Значение,        "ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["НомерКорректировки"].Значение,       "НомерКорректировки");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОргАдресЭлектроннойПочты"].Значение,       "ОргАдресЭлектроннойПочты");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ОбособленноеПодразделение"].Значение,       "ОбособленноеПодразделение");
	СписокПоказателейНеПодлежащихОчистке.Добавить(ВыбТабличноеПоле.Области["ИсключитьДанныеОбособленныхПодразделений"].Значение,       "ИсключитьДанныеОбособленныхПодразделений");

	ВыбТабличноеПоле.Очистить();
	ВыбТабличноеПоле.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаОтчета2017Кв1_ФормаОтчета"));
	
	ПолеТабличногоДокументаФормаОтчета = ВыбТабличноеПоле;
	
	Для каждого ЭлементСписка Из СписокПоказателейНеПодлежащихОчистке Цикл
	
		ВыбТабличноеПоле.Области[ЭлементСписка.Представление].Значение = ЭлементСписка.Значение;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	ИмяПоляТабличногоДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки);
	
	Если НЕ НайденнаяОбласть = Неопределено Тогда
		
		Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
		
	ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "1");
		
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			
			Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
			
		Иначе
			
			НайденнаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Области.Найти(Ячейка.ИмяЯчейки + "_1");
			
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = НайденнаяОбласть;
				
			Иначе
				
				Элементы[ИмяПоляТабличногоДокумента].ТекущаяОбласть = ЭтаФорма[ИмяПоляТабличногоДокумента].Область(Ячейка.ИмяЯчейки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, Неопределено, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Области = ПолеТабличногоДокументаФормаОтчета.Области;
	ТабДок = ПолеТабличногоДокументаФормаОтчета;
	
	ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
	ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть1а"));
	ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть1б"));
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 22-ЖКХ (сводная)");
	
	Для Инд = 2 По 5 Цикл 
		ПечатнаяФорма = РегламентированнаяОтчетность.НоваяСтраница();
		ПечатнаяФорма.Вывести(ТабДок.ПолучитьОбласть("ОсновнаяЧасть"+Инд));
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 22-ЖКХ (сводная)");
	КонецЦикла;

	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2017Кв1");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2017Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КоллекцияСписковВыбора = "";
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущийФорматВыгрузки(Организация)
	
	Возврат РегламентированнаяОтчетность.ФорматВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(Организация);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если ТекущийФорматВыгрузки(СтруктураРеквизитовФормы.Организация) = Неопределено Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьФормуНастроекФорматаВыгрузкиСтатистическойОтчетностиВЭлектронномВиде(
			СтруктураРеквизитовФормы.Организация, Ложь, Истина);
			
		Возврат "НеВыбранФормат";
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки);
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаНаСервере(ВыгружатьСОшибками, ТекстВыгрузки, ПараметрыВыгрузки, ИмяФайлаВыгрузки)
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2017Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	Если ПараметрыВыгрузки = Неопределено Тогда 
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КонецЕсли;
	ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(ЭтаФорма, "СхемаВыгрузкиXML2017Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ПолеТабличногоДокументаФормаОтчета";
	
	// проверка показателей раздела
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не задан код ОКПО организации!",
			ИмяПоляТаблДокумента, "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргНазв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не задано наименование организации!",
			ИмяПоляТаблДокумента, "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргИсполнитель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указаны Ф.И.О. должностного лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргИсполнитель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргДолжностьИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указана должность лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргДолжностьИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОргТелефонИсп) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма,
			"Не указан телефон должностного лица, ответственного за предоставление статистической информации!",
			ИмяПоляТаблДокумента, "ОргТелефонИсп");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки) Экспорт 
	
	РегламентированнаяОтчетность.ОбработатьУсловныеЭлементы(ЭтаФорма, ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	РегламентированнаяОтчетность.ОтсечьНезаполненныеНеобязательныеУзлыСтатистики(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты)
	
	Перем ПолученноеЗначение;
	
	КодОКУД        = ДопАтрибуты.OKUD;
	КодФормы       = ДопАтрибуты.idf;
	Периодичность  = ДопАтрибуты.idp;
	КодОКПО        = ПараметрыВыгрузки.ОКПО;
	РасчетныйГод   = ПараметрыВыгрузки.РасчПериод;
	ОтчетныйПериод = ПараметрыВыгрузки.ОтчПериод;
	
	ПараметрыВыгрузки.Свойство("ОКФС", ПолученноеЗначение);
	КодОКФС = ПолученноеЗначение;
	ПараметрыВыгрузки.Свойство("ОКВЭД", ПолученноеЗначение);
	КодОКВЭД = СтрЗаменить(ПолученноеЗначение, ".", "-");
	
	// Преобразование кодов - составляющих имени файла.
	КодыИФ = Новый Структура;
	КодыИФ.Вставить("Документ",       СтруктураРеквизитовФормы.мСохраненныйДок);
	КодыИФ.Вставить("КодФормы",       КодФормы);
	КодыИФ.Вставить("Периодичность",  Периодичность);
	КодыИФ.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	КодыИФ.Вставить("ДатаВыгрузки",   "");
	
	РегламентированнаяОтчетность.КодыДляИмениФайлаВФорматеВыгрузки(КодыИФ);
	
	// Формирование имени файла, в зависимости
	// от формата выгрузки статотчетности.
	Если ПустаяСтрока(КодыИФ.ДатаВыгрузки) Тогда // "старый" формат
		ИмяФайлаXML = КодОКУД + "_"
					+ КодФормы + "_"
					+ Периодичность + "_"
					+ КодОКПО + "_"
					+ РасчетныйГод + "_"
					+ ОтчетныйПериод
					+ ?(ПустаяСтрока(КодОКФС), "", "_" + КодОКФС)
					+ ?(ПустаяСтрока(КодОКВЭД), "", "_" + КодОКВЭД) + ".xml";
	Иначе										 // "новый" формат
		ИмяФайлаXML = КодОКУД + "_"
					+ КодыИФ.КодФормы + "_"
					+ КодыИФ.Периодичность + "_"
					+ КодОКПО + "_"
					+ РасчетныйГод + "_"
					+ КодыИФ.ОтчетныйПериод + "__"
					+ КодыИФ.ДатаВыгрузки + ".xml";
	КонецЕсли;
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров() Экспорт 
	
	Перем ПолученноеЗначение;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(ЭтаФорма);
	ТабДокумент = мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета;
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ЭтаФорма.ИмяФормы, "АтрибВыгрузкиXML2017Кв1");
	
	СтрокаСведений = "ФИОРук";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ДопАтрибуты.Свойство("code", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("idf", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("shifr", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ШифрФормы", ПолученноеЗначение);
	ДопАтрибуты.Свойство("version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияШаблона", ПолученноеЗначение);
	ДопАтрибуты.Свойство("format_version", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("ВерсияФормата", ПолученноеЗначение);
	
	// Возможные значения отчетного периода, согласно шаблону Росстата: 3, 6, 9, 12.
	ОтчПериод  = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания);
	РасчПериод = Формат(Год(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания),"ЧГ=0");
	
	ПараметрыВыгрузки.Вставить("ОКПО", СокрЛП(ТабДокумент.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОтчПериод", СокрЛП(ОтчПериод));
	ПараметрыВыгрузки.Вставить("РасчПериод", СокрЛП(РасчПериод));
	ПараметрыВыгрузки.Вставить("ОргНазв", СокрЛП(ТабДокумент.ОргНазв));
	ПараметрыВыгрузки.Вставить("ОргДиректор", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ОргДолжностьИсп", СокрЛП(ТабДокумент.ОргДолжностьИсп));
	ПараметрыВыгрузки.Вставить("ОргИсполнитель", СокрЛП(ТабДокумент.ОргИсполнитель));
	ПараметрыВыгрузки.Вставить("ОргТелефонИсп", СокрЛП(ТабДокумент.ОргТелефонИсп));
	
	// Преобразование выгружаемых атрибутов, в соответствии
	// с форматом выгрузки статотчетности.
	ДопАтрибуты.Свойство("idp", ПолученноеЗначение);
	ПараметрыВыгрузки.Вставить("КодПериодичности", Число(СокрЛП(ПолученноеЗначение)));
	ПараметрыВыгрузки.Вставить("Документ", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.АтрибутыВФорматеВыгрузки(ПараметрыВыгрузки);
	
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки, ДопАтрибуты));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "row");
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСГС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФСГС");
	
КонецПроцедуры

&НаКлиенте
Процедура  ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#Область ПроверкаКСИзШаблона
&НаСервере
Функция ПолучитьПараметрыИнициализацииУниверсальногоОтчета()
	Возврат УниверсальныйОтчетСтатистики.ПолучитьПараметрыИнициализацииУниверсальногоОтчета(ЭтаФорма, "АтрибВыгрузкиXML2017Кв1", "ШаблонРосстата2017Кв1", "СхемаВыгрузкиXML2017Кв1", Ложь, Ложь);
КонецФункции

&НаКлиенте
Процедура ПроверкаКСШаблоном(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаКСШаблономПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКСШаблономПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ОбработкаКС) = Тип("УправляемаяФорма") Тогда 
		Если ОбработкаКС.Окно <> Неопределено Тогда 
			ОбработкаКС.Закрыть();
		КонецЕсли;
		ОбработкаКС = Неопределено;
	КонецЕсли;
	ПараметрыИнициализации = ПолучитьПараметрыИнициализацииУниверсальногоОтчета();
	СтруктураДляИнициализацииФормы = Новый Структура("АдресВозвращаемыхПараметровДляПроверкиВФоне, ДляПроверкиКС",
									ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор),
									ПараметрыИнициализации);
	УниверсальныйОтчет = ПолучитьФорму("Отчет.РегламентированныйОтчетСтатистикаПрочиеФормы.Форма.ФормаОтчета", СтруктураДляИнициализацииФормы);
	
	ПроверкаКСШаблономВФоне(СтруктураДляИнициализацииФормы.АдресВозвращаемыхПараметровДляПроверкиВФоне);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКСШаблономВФоне(АдресВозвращаемыхПараметровДляПроверкиВФоне)
	РезультатВыполнения = РегламентированнаяОтчетностьВызовСервера.ПроверитьКСНаСервере(УникальныйИдентификатор, АдресХранилища, ИдентификаторЗадания, РезультатПроверкиКС, АдресВозвращаемыхПараметровДляПроверкиВФоне);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		РегламентированнаяОтчетностьКлиент.ВывестиКонтрольныеСоотношенияПоШаблону(РезультатПроверкиКС, ОбработкаКС, ЭтаФорма);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "ФормированиеОтчета");
		Элементы.ПолеТабличногоДокументаФормаОтчета.ОтображениеСостояния.Текст = НСтр("ru = 'Выполняется проверка контрольных соотношений...'");
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиКС", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеПроверкиКС()
	
	Попытка
		Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ЭтаФорма.Доступность = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ИначеЕсли ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЭтаФорма.Доступность = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
			РегламентированнаяОтчетностьКлиент.ВывестиКонтрольныеСоотношенияПоШаблону(ПолучитьИзВременногоХранилища(АдресХранилища), ОбработкаКС, ЭтаФорма);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "ФормированиеОтчета");
			Элементы.ПолеТабличногоДокументаФормаОтчета.ОтображениеСостояния.Текст = НСтр("ru = 'Выполняется проверка контрольных соотношений...'");
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеПроверкиКС", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ЭтаФорма.Доступность = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеТабличногоДокументаФормаОтчета, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредидущийПериод() Экспорт 
	Результат = Новый Структура("ИсточникОтчета, Организация, мДатаНачалаПериодаОтчета, мДатаКонцаПериодаОтчета",
								Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
								СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), ТекущаяДатаСеанса());
								
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) <> 3 Тогда 
		Результат.мДатаНачалаПериодаОтчета = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		Результат.мДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -3));
		Возврат Результат;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

#Область ПроцедурыПодсистемыКвартплаты

// + Квартплата

&НаСервере
// Процедура проверяет заполнение настройки соответствия услуг.
//
Процедура ПроверитьНастройкиСоответствия(УслугиНастройкиУказаны, УслугиЖилищныеНастройкиУказаны)
	
	КоличествоСтрок = СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия услуг!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		
	Иначе
		
		Для Каждого СтрокаСоответствия ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
			
			Если НЕ СтрокаСоответствия.СписокУслуг.Количество() = 0 Тогда
				
				УслугиНастройкиУказаны = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ УслугиНастройкиУказаны Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В настройках соответствия для видов услуг не указан состав услуг, входящих в эти виды!");
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоСтрок = СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия жилищных услуг!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		
	Иначе
		
		Для Каждого СтрокаСоответствия ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные Цикл
			
			Если НЕ СтрокаСоответствия.СписокУслуг.Количество() = 0 Тогда
				
				УслугиЖилищныеНастройкиУказаны = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ УслугиЖилищныеНастройкиУказаны Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В настройках соответствия для жилищных видов услуг не указан состав услуг, входящих в эти виды!");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНастройкиСоответствия()

&НаСервере
// Процедура производит автозаполнение формы регламентированного отчета.
//
Процедура ЗаполнитьАвто(Отказ)
	
	СтруктураПараметров = 
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СтатистикаФорма22Сводная_НастройкиОтчета");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг = 
			УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(СтруктураПараметров.ТаблицаСоответствияУслуг);
		СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные = 
			УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(СтруктураПараметров.ТаблицаСоответствияУслугЖилищные);
		СтруктураПараметров.Свойство("СоциальнаяНормаНаЧеловека", СтруктураРеквизитовФормы.мСоциальнаяНормаНаЧеловека);
		СтруктураПараметров.Свойство("мВидОбслуживаемойПлощадиПомещений", СтруктураРеквизитовФормы.мВидОбслуживаемойПлощадиПомещений);
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОтчетностьЗаГод = (КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 
						КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	УслугиНастройкиУказаны         = Ложь;
	УслугиЖилищныеНастройкиУказаны = Ложь;
	ПроверитьНастройкиСоответствия(УслугиНастройкиУказаны, УслугиЖилищныеНастройкиУказаны);
	
	// список разделов учета начислений
	РазделыУчетаНачислений = Новый СписокЗначений;
	РазделыУчетаНачислений.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
	РазделыУчетаНачислений.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
	
	// список видов начислений
	ВидыНачислений = Новый СписокЗначений;
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Корректировка);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ПерерасчетНачисления);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ФактическиеЗатраты);
	
	ЗапросОбъемов  = Новый Запрос;
	ЗапросОстатков = Новый Запрос;
	ЗапросСведений = Новый Запрос;
	
	ТекстВидыУслуг       = "ВЫБОР";
	ТекстВидыУслугОбъемы = "ВЫБОР";
	
	СписокУслугОбщий = Новый СписокЗначений;
	
	Для Каждого СтрокаВидаУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
		
		Если СтрокаВидаУслуги.СписокУслуг.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВидыУслуг = ТекстВидыУслуг + "
		|		КОГДА ТаблицаУслуг.Услуга В (&" + СтрокаВидаУслуги.ВидУслуги + ")
		|			ТОГДА """ + СтрокаВидаУслуги.ВидУслуги + """";
		
		ЗапросОстатков.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		ЗапросСведений.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		
		Для Каждого СтрокаУслуги ИЗ СтрокаВидаУслуги.СписокУслуг Цикл
			СписокУслугОбщий.Добавить(СтрокаУслуги.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаВидаУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные Цикл
		
		Если СтрокаВидаУслуги.СписокУслуг.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВидыУслуг = ТекстВидыУслуг + "
		|		КОГДА ТаблицаУслуг.Услуга В (&" + СтрокаВидаУслуги.ВидУслуги + ")
		|			ТОГДА """ + СтрокаВидаУслуги.ВидУслуги + """";
		
		ЗапросОстатков.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		ЗапросСведений.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		
		Для Каждого СтрокаУслуги ИЗ СтрокаВидаУслуги.СписокУслуг Цикл
			СписокУслугОбщий.Добавить(СтрокаУслуги.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстВидыУслуг = ТекстВидыУслуг + "
	|	КОНЕЦ";
	
	
	ТекстВидыУслугОбъемы = "ВЫБОР";
	
	СписокУслугОбъемы = Новый СписокЗначений;
	
	Для Каждого СтрокаВидаУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
		
		Если СтрокаВидаУслуги.СписокУслуг.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВидыУслугОбъемы = ТекстВидыУслугОбъемы + "
		|		КОГДА ТаблицаУслуг.Услуга В (&" + СтрокаВидаУслуги.ВидУслуги + ")
		|			ТОГДА """ + СтрокаВидаУслуги.ВидУслуги + """";
		
		ЗапросОбъемов.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		
		Для Каждого СтрокаУслуги ИЗ СтрокаВидаУслуги.СписокУслуг Цикл
			СписокУслугОбъемы.Добавить(СтрокаУслуги.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстВидыУслугОбъемы = ТекстВидыУслугОбъемы + "
	|	КОНЕЦ";
	
	ТабДокумент = ПолеТабличногоДокументаФормаОтчета;
	
	///////////////////////////////////////////////
	// РАЗДЕЛ 1.
	
	Если УслугиНастройкиУказаны Тогда
		
		// Состояние("Заполнение раздела 1...");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ УПЖКХ_НачисленияОбороты.Количество
		|		КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоОПУ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.ЛицевойСчет ССЫЛКА Справочник.КВП_ЛицевыеСчета
		|			ТОГДА УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец.Многоквартирное
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Многоквартирное
		|ПОМЕСТИТЬ ТаблицаУслуг
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбъемы)
		|				И РазделУчета В (&РазделыУчета)
		|				И ВидНачисления В (&ВидыНачислений)) КАК УПЖКХ_НачисленияОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.ЛицевойСчет ССЫЛКА Справочник.КВП_ЛицевыеСчета
		|			ТОГДА УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец.Многоквартирное
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаУслуг.Количество) КАК Количество,
		|	ТаблицаУслуг.КоличествоОПУ,
		|	ТаблицаУслуг.ВидУслуги,
		|	ТаблицаУслуг.Многоквартирное
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаУслуг.Количество КАК Количество,
		|		ТаблицаУслуг.КоличествоОПУ КАК КоличествоОПУ,
		|		&ТекстВидыУслугОбъемы КАК ВидУслуги,
		|		ТаблицаУслуг.Многоквартирное КАК Многоквартирное
		|	ИЗ
		|		ТаблицаУслуг КАК ТаблицаУслуг) КАК ТаблицаУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуг.ВидУслуги,
		|	ТаблицаУслуг.Многоквартирное,
		|	ТаблицаУслуг.КоличествоОПУ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидыУслугОбъемы", ТекстВидыУслугОбъемы);
		
		ЗапросОбъемов.Текст = ТекстЗапроса;
		ЗапросОбъемов.УстановитьПараметр("НачалоПериода",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросОбъемов.УстановитьПараметр("КонецПериода",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросОбъемов.УстановитьПараметр("Организация",       СтруктураРеквизитовФормы.Организация);
		ЗапросОбъемов.УстановитьПараметр("СписокУслугОбъемы", СписокУслугОбъемы);
		ЗапросОбъемов.УстановитьПараметр("РазделыУчета",      РазделыУчетаНачислений);
		ЗапросОбъемов.УстановитьПараметр("ВидыНачислений",    ВидыНачислений);
		
		ТаблицаОбъемов = ЗапросОбъемов.Выполнить().Выгрузить();
		
		Для Каждого СтрокаОбъема ИЗ ТаблицаОбъемов Цикл
			
			Если СтрокаОбъема.ВидУслуги = "ХолоднаяВода" Тогда
				
				// раздел 1, строки 01-02, графа 03
				ТабДокумент.Области["П010103"].Значение = ТабДокумент.Области["П010103"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П010203"].Значение = ТабДокумент.Области["П010203"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// Справочная информация, строки 55, графа 03 и 04.
					ТабДокумент.Области["П045503"].Значение = ТабДокумент.Области["П045503"].Значение + СтрокаОбъема.Количество;
					ТабДокумент.Области["П045504"].Значение = ТабДокумент.Области["П045504"].Значение + СтрокаОбъема.КоличествоОПУ;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "ГорячаяВода" Тогда
				
				// раздел 1, строки 01-02, графа 04
				ТабДокумент.Области["П010104"].Значение = ТабДокумент.Области["П010104"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П010204"].Значение = ТабДокумент.Области["П010204"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// Справочная информация, строки 56, графа 03 и 04.
					ТабДокумент.Области["П045603"].Значение = ТабДокумент.Области["П045603"].Значение + СтрокаОбъема.Количество;
					ТабДокумент.Области["П045604"].Значение = ТабДокумент.Области["П045604"].Значение + СтрокаОбъема.КоличествоОПУ;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "Водоотведение" Тогда
				
				// раздел 1, строки 01-02, графа 05
				ТабДокумент.Области["П010105"].Значение = ТабДокумент.Области["П010105"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П010205"].Значение = ТабДокумент.Области["П010205"].Значение + СтрокаОбъема.Количество;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "Отопление" Тогда
				
				// раздел 1, строки 01-02, графа 06
				ТабДокумент.Области["П010106"].Значение = ТабДокумент.Области["П010106"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П010206"].Значение = ТабДокумент.Области["П010206"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// Справочная информация, строки 54, графа 03
					ТабДокумент.Области["П045403"].Значение = ТабДокумент.Области["П045403"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "Электроэнергия" Тогда
				
				// раздел 1, строки 01-02, графа 08
				ТабДокумент.Области["П010108"].Значение = ТабДокумент.Области["П010108"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П010208"].Значение = ТабДокумент.Области["П010208"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// Справочная информация, строки 53, графа 03
					ТабДокумент.Области["П045303"].Значение = ТабДокумент.Области["П045303"].Значение + СтрокаОбъема.Количество;
					
					// Справочная информация, строка 53, графа 04
					ТабДокумент.Области["П045304"].Значение = ТабДокумент.Области["П045304"].Значение + СтрокаОбъема.КоличествоОПУ;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "СетевойГаз" Тогда
				
				// раздел 1, строки 01-02, графа 09
				ТабДокумент.Области["П010109"].Значение = ТабДокумент.Области["П010109"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П010209"].Значение = ТабДокумент.Области["П010209"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// Справочная информация, строки 57, графа 03
					ТабДокумент.Области["П045703"].Значение = ТабДокумент.Области["П045703"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "СжиженныйГаз" Тогда
				
				// раздел 1, строки 01-02, графа 10
				ТабДокумент.Области["П010110"].Значение = ТабДокумент.Области["П010110"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П010210"].Значение = ТабДокумент.Области["П010210"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// раздел 3, строки 64, графа 03
					ТабДокумент.Области["П045803"].Значение = ТабДокумент.Области["П045803"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // РАЗДЕЛ 1
	
	
	///////////////////////////////////////////////
	// РАЗДЕЛ 2.
	
	Если УслугиНастройкиУказаны ИЛИ УслугиЖилищныеНастройкиУказаны Тогда
		
		// Состояние("Заполнение раздела 2...");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
		|ПОМЕСТИТЬ ТаблицаУслуг
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбщий)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаУслуг.СуммаДолга) КАК СуммаДолга,
		|	ТаблицаУслуг.ВидУслуги
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаУслуг.СуммаНачисленияОстаток КАК СуммаДолга,
		|		&ТекстВидыУслуг КАК ВидУслуги
		|	ИЗ
		|		ТаблицаУслуг КАК ТаблицаУслуг) КАК ТаблицаУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуг.ВидУслуги";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидыУслуг", ТекстВидыУслуг);
		
		ЗапросОстатков.Текст = ТекстЗапроса;
		ЗапросОстатков.УстановитьПараметр("КонецПериода",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросОстатков.УстановитьПараметр("Организация",      СтруктураРеквизитовФормы.Организация);
		ЗапросОстатков.УстановитьПараметр("СписокУслугОбщий", СписокУслугОбщий);
		
		ТаблицаОстатков = ЗапросОстатков.Выполнить().Выгрузить();
		
		// раздел 2, строки 18,19,22, графа 03
		СуммаДолгаЖилищные = 0;
		Для Каждого СтрокаВидуУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные Цикл
			НайденнаяСтрока = ТаблицаОстатков.Найти(СтрокаВидуУслуги.ВидУслуги, "ВидУслуги");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				СуммаДолгаЖилищные = СуммаДолгаЖилищные + НайденнаяСтрока.СуммаДолга;
			КонецЕсли;
		КонецЦикла;
		
		// Округление
		СуммаДолгаЖилищные = ПеревестиВТысячи(СуммаДолгаЖилищные);
		
		ТабДокумент.Области["П021803"].Значение = СуммаДолгаЖилищные;
		ТабДокумент.Области["П021903"].Значение = СуммаДолгаЖилищные;
		ТабДокумент.Области["П022203"].Значение = СуммаДолгаЖилищные;
		
		// раздел 2, строки 18,19,22, графа 04
		СуммаДолгаВодоснабжение = 0;
		НайденнаяСтрока = ТаблицаОстатков.Найти("ХолоднаяВода", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолгаВодоснабжение = СуммаДолгаВодоснабжение + НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаОстатков.Найти("ГорячаяВода", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолгаВодоснабжение = СуммаДолгаВодоснабжение + НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		// Округление
		СуммаДолгаВодоснабжение = ПеревестиВТысячи(СуммаДолгаВодоснабжение);
		
		ТабДокумент.Области["П021804"].Значение = СуммаДолгаВодоснабжение;
		ТабДокумент.Области["П021904"].Значение = СуммаДолгаВодоснабжение;
		ТабДокумент.Области["П022204"].Значение = СуммаДолгаВодоснабжение;
		
		// раздел 2, строки 18,19,22, графа 05
		НайденнаяСтрока = ТаблицаОстатков.Найти("Водоотведение", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолга = ПеревестиВТысячи(НайденнаяСтрока.СуммаДолга);
			
			ТабДокумент.Области["П021805"].Значение = СуммаДолга;
			ТабДокумент.Области["П021905"].Значение = СуммаДолга;
			ТабДокумент.Области["П022205"].Значение = СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 18,19,22, графа 06
		НайденнаяСтрока = ТаблицаОстатков.Найти("Отопление", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолга = ПеревестиВТысячи(НайденнаяСтрока.СуммаДолга);
			
			ТабДокумент.Области["П021806"].Значение = СуммаДолга;
			ТабДокумент.Области["П021906"].Значение = СуммаДолга;
			ТабДокумент.Области["П022206"].Значение = СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 18,19,22, графа 07
		НайденнаяСтрока = ТаблицаОстатков.Найти("Электроэнергия", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолга = ПеревестиВТысячи(НайденнаяСтрока.СуммаДолга);
			
			ТабДокумент.Области["П021807"].Значение = СуммаДолга;
			ТабДокумент.Области["П021907"].Значение = СуммаДолга;
			ТабДокумент.Области["П022207"].Значение = СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 18,19,22, графа 08
		НайденнаяСтрока = ТаблицаОстатков.Найти("СетевойГаз", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолга = ПеревестиВТысячи(НайденнаяСтрока.СуммаДолга);
			
			ТабДокумент.Области["П021808"].Значение = СуммаДолга;
			ТабДокумент.Области["П021908"].Значение = СуммаДолга;
			ТабДокумент.Области["П022208"].Значение = СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 18,19,22, графа 09
		НайденнаяСтрока = ТаблицаОстатков.Найти("СжиженныйГаз", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолга = ПеревестиВТысячи(НайденнаяСтрока.СуммаДолга);
			
			ТабДокумент.Области["П021809"].Значение = СуммаДолга;
			ТабДокумент.Области["П021909"].Значение = СуммаДолга;
			ТабДокумент.Области["П022209"].Значение = СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 10
		НайденнаяСтрока = ТаблицаОстатков.Найти("ЗахоронениеТБО", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолга = ПеревестиВТысячи(НайденнаяСтрока.СуммаДолга);
			
			ТабДокумент.Области["П021810"].Значение = СуммаДолга;
			ТабДокумент.Области["П021910"].Значение = СуммаДолга;
			ТабДокумент.Области["П022210"].Значение = СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 11
		НайденнаяСтрока = ТаблицаОстатков.Найти("ПрочиеУслуги", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолга = ПеревестиВТысячи(НайденнаяСтрока.СуммаДолга);
			
			ТабДокумент.Области["П021811"].Значение = СуммаДолга;
			ТабДокумент.Области["П021911"].Значение = СуммаДолга;
			ТабДокумент.Области["П022211"].Значение = СуммаДолга;
		КонецЕсли;
		
	КонецЕсли; // РАЗДЕЛ 2
	
	///////////////////////////////////////////////
	// РАЗДЕЛ 3.
	
	Если УслугиНастройкиУказаны ИЛИ УслугиЖилищныеНастройкиУказаны Тогда
		
		// Состояние("Заполнение раздела 3...");
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаОплаты
		|ПОМЕСТИТЬ втОплаты
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбщий)
		|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И РазделУчета В (&РазделыУчета)) КАК УПЖКХ_НачисленияОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачисления
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбщий)
		|				И РазделУчета В (&РазделыУчета)
		|				И ВидНачисления В (&ВидыНачислений)) КАК УПЖКХ_НачисленияОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втНачисления.Услуга, втОплаты.Услуга) КАК Услуга,
		|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втОплаты.ЛицевойСчет) КАК ЛицевойСчет,
		|	ЕСТЬNULL(втНачисления.Здание, втОплаты.Здание) КАК Здание,
		|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисления, 0)) КАК СуммаНачисления,
		|	СУММА(ЕСТЬNULL(втОплаты.СуммаОплаты, 0)) КАК СуммаОплаты
		|ПОМЕСТИТЬ втОплатыНачисления
		|ИЗ
		|	втНачисления КАК втНачисления
		|		ПОЛНОЕ СОЕДИНЕНИЕ втОплаты КАК втОплаты
		|		ПО втНачисления.ЛицевойСчет = втОплаты.ЛицевойСчет
		|			И втНачисления.Услуга = втОплаты.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(втНачисления.Услуга, втОплаты.Услуга),
		|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втОплаты.ЛицевойСчет),
		|	ЕСТЬNULL(втНачисления.Здание, втОплаты.Здание)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуг.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаУслуг.Здание КАК Здание,
		|	СУММА(ТаблицаУслуг.СуммаНачисления) КАК СуммаНачисления,
		|	СУММА(ТаблицаУслуг.СуммаОплаты) КАК СуммаОплаты,
		|	ТаблицаУслуг.ВидУслуги КАК ВидУслуги
		|ПОМЕСТИТЬ втНачисленияОплатыПоВидамУслуг
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаУслуг.ЛицевойСчет КАК ЛицевойСчет,
		|		ТаблицаУслуг.Здание КАК Здание,
		|		ТаблицаУслуг.СуммаНачисления КАК СуммаНачисления,
		|		ТаблицаУслуг.СуммаОплаты КАК СуммаОплаты,
		|		&ТекстВидыУслуг КАК ВидУслуги
		|	ИЗ
		|		втОплатыНачисления КАК ТаблицаУслуг) КАК ТаблицаУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуг.ЛицевойСчет,
		|	ТаблицаУслуг.Здание,
		|	ТаблицаУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втОплатыНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение
		|ПОМЕСТИТЬ втЛС
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&КонецПериода, ) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК Количество
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&КонецПериода, ) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Количество,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ КоличествоПроживающихИзСведений
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(&КонецПериода, ДатаИзменения <= &КонецПериода) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛС.Помещение КАК Помещение,
		|	ВЫБОР
		|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
		|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
		|		ИНАЧЕ ЕСТЬNULL(КоличествоПроживающихИзСведений.Количество, 0)
		|	КОНЕЦ КАК КоличествоПроживающих
		|ПОМЕСТИТЬ втДействующиеЛицевыеСчета
		|ИЗ
		|	втЛС КАК втЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПроживающихИзСведений КАК КоличествоПроживающихИзСведений
		|		ПО (КоличествоПроживающихИзСведений.ЛицевойСчет = втЛС.ЛицевойСчет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
		|		ПО (втУчетКоличестваЖильцов.ЛицевойСчет = втЛС.ЛицевойСчет)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Помещение,
		|	ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
		|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ОбщаяПлощадь,
		|	ВЫБОР
		|		КОГДА КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения В (&ВидыЖилыхПомещений)
		|			ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ЖилаяПлощадь,
		|	ВЫБОР
		|		КОГДА КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения В (&ВидыПомещенийМестОбщегоПользования)
		|			ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПлощадьПомещенийОбщегоПользования
		|ПОМЕСТИТЬ втПлощадиПомещений
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			&КонецПериода,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втДействующиеЛицевыеСчета.Помещение
		|					ИЗ
		|						втДействующиеЛицевыеСчета)
		|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_РазмерыДолейСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_РазмерыДолейСрезПоследних.Объект КАК Помещение,
		|	ВЫБОР
		|		КОГДА КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_РазмерыДолейСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель
		|	КОНЕЦ КАК Доля
		|ПОМЕСТИТЬ втДолиЛицевыхСчетов
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&КонецПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втДействующиеЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втДействующиеЛицевыеСчета)) КАК КВП_РазмерыДолейСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДействующиеЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	втДействующиеЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	втДействующиеЛицевыеСчета.КоличествоПроживающих КАК КоличествоПроживающих,
		|	ЕСТЬNULL(втПлощадиПомещений.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
		|	ЕСТЬNULL(втПлощадиПомещений.ЖилаяПлощадь, 0) * втДолиЛицевыхСчетов.Доля КАК ЖилаяПлощадь,
		|	ЕСТЬNULL(втПлощадиПомещений.ПлощадьПомещенийОбщегоПользования, 0) КАК ПлощадьМестОбщегоПользования
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	втДействующиеЛицевыеСчета КАК втДействующиеЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛицевыхСчетов КАК втДолиЛицевыхСчетов
		|		ПО втДействующиеЛицевыеСчета.ЛицевойСчет = втДолиЛицевыхСчетов.ЛицевойСчет
		|			И втДействующиеЛицевыеСчета.Помещение = втДолиЛицевыхСчетов.Помещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
		|		ПО втДействующиеЛицевыеСчета.Помещение = втПлощадиПомещений.Помещение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Здание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДействующиеЛицевыеСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДолиЛицевыхСчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втПлощадиПомещений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втЛицевыеСчета.Здание КАК Здание
		|ПОМЕСТИТЬ втЗдания
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втНачисленияОплатыПоВидамУслуг.Здание
		|ИЗ
		|	втНачисленияОплатыПоВидамУслуг КАК втНачисленияОплатыПоВидамУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_БлагоустройствоОбъектов.Объект КАК Здание,
		|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства КАК ВидБлагоустройства,
		|	КВП_БлагоустройствоОбъектов.Значение КАК Значение
		|ПОМЕСТИТЬ втЗданияСБлагоустройствами
		|ИЗ
		|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
		|ГДЕ
		|	КВП_БлагоустройствоОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				втЗдания.Здание
		|			ИЗ
		|				втЗдания)
		|	И (КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
		|			ИЛИ КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод)
		|			ИЛИ КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗданияСБлагоустройствами.Здание КАК Здание,
		|	ИСТИНА КАК ЕстьЛифт
		|ПОМЕСТИТЬ втЗданияСЛифтами
		|ИЗ
		|	втЗданияСБлагоустройствами КАК втЗданияСБлагоустройствами
		|ГДЕ
		|	втЗданияСБлагоустройствами.Значение = ИСТИНА
		|	И втЗданияСБлагоустройствами.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗданияСБлагоустройствами.Здание КАК Здание,
		|	ИСТИНА КАК ЕстьМусоропровод
		|ПОМЕСТИТЬ втЗданияСМусоропроводом
		|ИЗ
		|	втЗданияСБлагоустройствами КАК втЗданияСБлагоустройствами
		|ГДЕ
		|	втЗданияСБлагоустройствами.Значение = ИСТИНА
		|	И втЗданияСБлагоустройствами.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗданияСБлагоустройствами.Здание КАК Здание,
		|	втЗданияСБлагоустройствами.Значение КАК ТипПлиты
		|ПОМЕСТИТЬ втЗданияСПлитами
		|ИЗ
		|	втЗданияСБлагоустройствами КАК втЗданияСБлагоустройствами
		|ГДЕ
		|	втЗданияСБлагоустройствами.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЗдания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЗданияСБлагоустройствами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
		|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет
		|ПОМЕСТИТЬ втНазначенныеНачисления
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Объект В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета)
		|				И Услуга В (&СписокУслугОбщий)) КАК КВП_НазначенныеНачисленияСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Действует
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
		|	КВП_НазначенныеНачисленияСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУслуг.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаУслуг.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	&ТекстВидыУслуг КАК ВидУслуги
		|ПОМЕСТИТЬ втНазначенныеВидыУслуг
		|ИЗ
		|	втНазначенныеНачисления КАК ТаблицаУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ЛицевойСчет, втНачисленияОплатыПоВидамУслуг.ЛицевойСчет) КАК ЛицевойСчет,
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.Здание, втНачисленияОплатыПоВидамУслуг.Здание) КАК Здание,
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ВидУслуги, втНачисленияОплатыПоВидамУслуг.ВидУслуги) КАК ВидУслуги,
		|	СУММА(ЕСТЬNULL(втНачисленияОплатыПоВидамУслуг.СуммаНачисления, 0)) КАК СуммаНачисления,
		|	СУММА(ЕСТЬNULL(втНачисленияОплатыПоВидамУслуг.СуммаОплаты, 0)) КАК СуммаОплаты
		|ПОМЕСТИТЬ втНазначенияНачисления
		|ИЗ
		|	втНачисленияОплатыПоВидамУслуг КАК втНачисленияОплатыПоВидамУслуг
		|		ПОЛНОЕ СОЕДИНЕНИЕ втНазначенныеВидыУслуг КАК втНазначенныеВидыУслуг
		|		ПО втНачисленияОплатыПоВидамУслуг.ЛицевойСчет = втНазначенныеВидыУслуг.ЛицевойСчет
		|			И втНачисленияОплатыПоВидамУслуг.ВидУслуги = втНазначенныеВидыУслуг.ВидУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ЛицевойСчет, втНачисленияОплатыПоВидамУслуг.ЛицевойСчет),
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.Здание, втНачисленияОплатыПоВидамУслуг.Здание),
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ВидУслуги, втНачисленияОплатыПоВидамУслуг.ВидУслуги)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНазначенныеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНазначенныеВидыУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНачисленияОплатыПоВидамУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНазначенияНачисления.ВидУслуги КАК ВидУслуги,
		|	СУММА(ЕСТЬNULL(втЛицевыеСчета.КоличествоПроживающих, 0)) КАК КоличествоПроживающих,
		|	СУММА(ЕСТЬNULL(втЛицевыеСчета.ЖилаяПлощадь, 0)) КАК Площадь,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втЗданияСЛифтами.ЕстьЛифт, ЛОЖЬ)
		|				И ЕСТЬNULL(втЗданияСМусоропроводом.ЕстьМусоропровод, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБлагоустройства,
		|	втЗданияСПлитами.ТипПлиты КАК ТипПлиты,
		|	СУММА(втНазначенияНачисления.СуммаНачисления) КАК СуммаНачисления,
		|	СУММА(втНазначенияНачисления.СуммаОплаты) КАК СуммаОплаты,
		|	ЕСТЬNULL(втНазначенияНачисления.Здание.Многоквартирное, ЛОЖЬ) КАК Многоквартирное,
		|	СУММА(ЕСТЬNULL(втЛицевыеСчета.ОбщаяПлощадь, 0)) КАК ОбщаяПлощадь,
		|	СУММА(ЕСТЬNULL(втЛицевыеСчета.ПлощадьМестОбщегоПользования, 0)) КАК ПлощадьМестОбщегоПользования
		|ИЗ
		|	втНазначенияНачисления КАК втНазначенияНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
		|		ПО втНазначенияНачисления.ЛицевойСчет = втЛицевыеСчета.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗданияСЛифтами КАК втЗданияСЛифтами
		|		ПО втНазначенияНачисления.Здание = втЗданияСЛифтами.Здание
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗданияСМусоропроводом КАК втЗданияСМусоропроводом
		|		ПО втНазначенияНачисления.Здание = втЗданияСМусоропроводом.Здание
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗданияСПлитами КАК втЗданияСПлитами
		|		ПО втНазначенияНачисления.Здание = втЗданияСПлитами.Здание
		|
		|СГРУППИРОВАТЬ ПО
		|	втНазначенияНачисления.ВидУслуги,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втЗданияСЛифтами.ЕстьЛифт, ЛОЖЬ)
		|				И ЕСТЬNULL(втЗданияСМусоропроводом.ЕстьМусоропровод, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	втЗданияСПлитами.ТипПлиты,
		|	ЕСТЬNULL(втНазначенияНачисления.Здание.Многоквартирное, ЛОЖЬ)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидыУслуг", ТекстВидыУслуг);
		
		ЗапросСведений.Текст = ТекстЗапроса;
		ЗапросСведений.УстановитьПараметр("НачалоПериода",      СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросСведений.УстановитьПараметр("КонецПериода",       СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросСведений.УстановитьПараметр("Организация",        СтруктураРеквизитовФормы.Организация);
		ЗапросСведений.УстановитьПараметр("СписокУслугОбщий",   СписокУслугОбщий);
		ЗапросСведений.УстановитьПараметр("ВидПлощади",         СтруктураПараметров.мВидОбслуживаемойПлощадиПомещений);
		ЗапросСведений.УстановитьПараметр("РазделыУчета",       РазделыУчетаНачислений);
		ЗапросСведений.УстановитьПараметр("ВидыНачислений",     ВидыНачислений);
		
		ЗапросСведений.УстановитьПараметр("ВидыЖилыхПомещений",                   Справочники.УПЖКХ_ВидыПомещений.ПолучитьСписокВидовПомещений(Истина));
		ЗапросСведений.УстановитьПараметр("ВидыПомещенийМестОбщегоПользования",   ПолучитьСписокВидовПомещенийМестОбщегоПользования());
		ЗапросСведений.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
		
		ТаблицаСведений = ЗапросСведений.Выполнить().Выгрузить();
		
		// Необходимо суммировать значения по услугам "Содержание и ремонт" (для домов с благоустройствами и без), 
		//"Вывоз ТБО" и "Кап. ремонт" для заполнения строки 32.
		СтруктураПараметровСодержаниеИРемонт = Новый Структура;
		СтруктураПараметровСодержаниеИРемонт.Вставить("Начисление",  0);
		СтруктураПараметровСодержаниеИРемонт.Вставить("Оплата",      0);
		СтруктураПараметровСодержаниеИРемонт.Вставить("Площадь",     0);
		СтруктураПараметровСодержаниеИРемонт.Вставить("Проживающие", 0);
		
		Для Каждого СтрокаСведений ИЗ ТаблицаСведений Цикл
			
			Если СтрокаСведений.ВидУслуги = "Наем" Тогда
				
				// раздел 3, строка 33, графы 3, 4, 10, 11
				ТабДокумент.Области["П033303"].Значение = ТабДокумент.Области["П033303"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П033304"].Значение = ТабДокумент.Области["П033304"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П033310"].Значение = ТабДокумент.Области["П033310"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П033311"].Значение = ТабДокумент.Области["П033311"].Значение + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "СодержаниеИРемонт" Тогда
				
				СуммироватьСтрокиСодержаниеИРемонт(СтруктураПараметровСодержаниеИРемонт, СтрокаСведений);
				
				Если СтрокаСведений.ЕстьБлагоустройства Тогда
					
					// раздел 3, строка 35, графы 3, 4, 10, 11
					ТабДокумент.Области["П033503"].Значение = ТабДокумент.Области["П033503"].Значение + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П033504"].Значение = ТабДокумент.Области["П033504"].Значение + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П033510"].Значение = ТабДокумент.Области["П033510"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П033511"].Значение = ТабДокумент.Области["П033511"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				Иначе
					
					// раздел 3, строка 36, графы 3, 4, 10, 11
					ТабДокумент.Области["П033603"].Значение = ТабДокумент.Области["П033603"].Значение + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П033604"].Значение = ТабДокумент.Области["П033604"].Значение + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П033610"].Значение = ТабДокумент.Области["П033610"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П033611"].Значение = ТабДокумент.Области["П033611"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "ВывозТО" Тогда
				
				// раздел 3, строка 51, графы 3, 4, 10, 11
				ТабДокумент.Области["П035103"].Значение = ТабДокумент.Области["П035103"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П035104"].Значение = ТабДокумент.Области["П035104"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П035110"].Значение = ТабДокумент.Области["П035110"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П035111"].Значение = ТабДокумент.Области["П035111"].Значение + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "КапитальныйРемонт" Тогда
				
				// раздел 3, строка 37, графы 3, 4, 10, 11
				ТабДокумент.Области["П033703"].Значение = ТабДокумент.Области["П033703"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П033704"].Значение = ТабДокумент.Области["П033704"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П033710"].Значение = ТабДокумент.Области["П033710"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П033711"].Значение = ТабДокумент.Области["П033711"].Значение + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "ХолоднаяВода" Тогда
				
				// раздел 3, строка 39, графы 3, 4, 10, 11
				ТабДокумент.Области["П033903"].Значение = ТабДокумент.Области["П033903"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П033904"].Значение = ТабДокумент.Области["П033904"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П033910"].Значение = ТабДокумент.Области["П033910"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П033911"].Значение = ТабДокумент.Области["П033911"].Значение + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// Справочная информация, строки 55, графы 4, 5
					ТабДокумент.Области["П045508"].Значение = ТабДокумент.Области["П045508"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "Водоотведение" Тогда
				
				// раздел 3, строка 40, графы 3, 4, 10, 11
				ТабДокумент.Области["П034003"].Значение = ТабДокумент.Области["П034003"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П034004"].Значение = ТабДокумент.Области["П034004"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П034010"].Значение = ТабДокумент.Области["П034010"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П034011"].Значение = ТабДокумент.Области["П034011"].Значение + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "ГорячаяВода" Тогда
				
				// раздел 3, строка 41, графы 3, 4, 10, 11
				ТабДокумент.Области["П034103"].Значение = ТабДокумент.Области["П034103"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П034104"].Значение = ТабДокумент.Области["П034104"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П034110"].Значение = ТабДокумент.Области["П034110"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П034111"].Значение = ТабДокумент.Области["П034111"].Значение + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// Справочная информация, строки 56, графа 8
					ТабДокумент.Области["П045608"].Значение = ТабДокумент.Области["П045608"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "Отопление" Тогда
				
				// раздел 3, строка 42, графы 3, 4, 10, 11
				ТабДокумент.Области["П034203"].Значение = ТабДокумент.Области["П034203"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П034204"].Значение = ТабДокумент.Области["П034204"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П034210"].Значение = ТабДокумент.Области["П034210"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П034211"].Значение = ТабДокумент.Области["П034211"].Значение + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// Справочная информация, строки 54, графа 5
					ТабДокумент.Области["П045405"].Значение = ТабДокумент.Области["П045405"].Значение + СтрокаСведений.Площадь;
					
					// Справочная информация, строка 54, графа 7
					ТабДокумент.Области["П045407"].Значение = ТабДокумент.Области["П045407"].Значение + СтрокаСведений.ОбщаяПлощадь;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "Электроэнергия" Тогда
				
				// раздел 3, строка 43, графы 3, 4, 10, 11
				ТабДокумент.Области["П034303"].Значение = ТабДокумент.Области["П034303"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П034304"].Значение = ТабДокумент.Области["П034304"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П034310"].Значение = ТабДокумент.Области["П034310"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П034311"].Значение = ТабДокумент.Области["П034311"].Значение + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// Справочная информация, строка 53, графы 6, 7
					ТабДокумент.Области["П045306"].Значение = ТабДокумент.Области["П045306"].Значение + СтрокаСведений.ПлощадьМестОбщегоПользования;
					ТабДокумент.Области["П045307"].Значение = ТабДокумент.Области["П045307"].Значение + СтрокаСведений.ОбщаяПлощадь;
					
					// Справочная информация, строки 53, графа 8
					ТабДокумент.Области["П045308"].Значение = ТабДокумент.Области["П045308"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
				Если СтрокаСведений.ТипПлиты = Перечисления.КВП_Плита.Газовая Тогда
					
					// раздел 3, строка 44, графы 3, 4, 10, 11
					ТабДокумент.Области["П034403"].Значение = ТабДокумент.Области["П034403"].Значение + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П034404"].Значение = ТабДокумент.Области["П034404"].Значение + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П034410"].Значение = ТабДокумент.Области["П034410"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П034411"].Значение = ТабДокумент.Области["П034411"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				ИначеЕсли СтрокаСведений.ТипПлиты = Перечисления.КВП_Плита.Электрическая Тогда
					
					// Раздел 3, строка 45, графы 3, 4, 10, 11.
					ТабДокумент.Области["П034503"].Значение = ТабДокумент.Области["П034503"].Значение + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П034504"].Значение = ТабДокумент.Области["П034504"].Значение + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П034510"].Значение = ТабДокумент.Области["П034510"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П034511"].Значение = ТабДокумент.Области["П034511"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "СетевойГаз" Тогда
				
				// Раздел 3, строка 46, графы 3, 4, 10, 11.
				ТабДокумент.Области["П034603"].Значение = ТабДокумент.Области["П034603"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П034604"].Значение = ТабДокумент.Области["П034604"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П034610"].Значение = ТабДокумент.Области["П034610"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П034611"].Значение = ТабДокумент.Области["П034611"].Значение + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// Справочная информация, строки 57, графа 8.
					ТабДокумент.Области["П045708"].Значение = ТабДокумент.Области["П045708"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "СжиженныйГаз" Тогда
				
				// Раздел 3, строка 47, графы 3, 4, 10, 11.
				ТабДокумент.Области["П034703"].Значение = ТабДокумент.Области["П034703"].Значение + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П034704"].Значение = ТабДокумент.Области["П034704"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П034710"].Значение = ТабДокумент.Области["П034710"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П034711"].Значение = ТабДокумент.Области["П034711"].Значение + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// Справочная информация, строки 58, графа 8.
					ТабДокумент.Области["П045808"].Значение = ТабДокумент.Области["П045808"].Значение + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Раздел 3, строка 34, графы 3, 4, 10, 11.
		ТабДокумент.Области["П033403"].Значение = СтруктураПараметровСодержаниеИРемонт.Начисление;
		ТабДокумент.Области["П033404"].Значение = СтруктураПараметровСодержаниеИРемонт.Оплата;
		ТабДокумент.Области["П033410"].Значение = СтруктураПараметровСодержаниеИРемонт.Площадь;
		ТабДокумент.Области["П033411"].Значение = СтруктураПараметровСодержаниеИРемонт.Проживающие;
		
		// Округление
		ТабДокумент.Области["П033303"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033303"].Значение);
		ТабДокумент.Области["П033304"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033304"].Значение);
		
		ТабДокумент.Области["П033503"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033503"].Значение);
		ТабДокумент.Области["П033504"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033504"].Значение );
		
		ТабДокумент.Области["П033603"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033603"].Значение);
		ТабДокумент.Области["П033604"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033604"].Значение);
		
		ТабДокумент.Области["П035103"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П035103"].Значение);
		ТабДокумент.Области["П035104"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П035104"].Значение);
		
		ТабДокумент.Области["П033703"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033703"].Значение);
		ТабДокумент.Области["П033704"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033704"].Значение);
		
		ТабДокумент.Области["П033903"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033903"].Значение);
		ТабДокумент.Области["П033904"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П033904"].Значение);
		
		ТабДокумент.Области["П034003"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034003"].Значение);
		ТабДокумент.Области["П034004"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034004"].Значение);
		
		ТабДокумент.Области["П034103"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034103"].Значение);
		ТабДокумент.Области["П034104"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034104"].Значение);
		
		ТабДокумент.Области["П034203"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034203"].Значение);
		ТабДокумент.Области["П034204"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034204"].Значение);
		
		ТабДокумент.Области["П034303"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034303"].Значение);
		ТабДокумент.Области["П034304"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034304"].Значение);
		
		ТабДокумент.Области["П034403"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034403"].Значение);
		ТабДокумент.Области["П034404"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034404"].Значение);
		
		ТабДокумент.Области["П034503"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034503"].Значение);
		ТабДокумент.Области["П034504"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034504"].Значение);
		
		ТабДокумент.Области["П034603"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034603"].Значение);
		ТабДокумент.Области["П034604"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034604"].Значение);
		
		ТабДокумент.Области["П034703"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034703"].Значение);
		ТабДокумент.Области["П034704"].Значение = ПеревестиВТысячи(ТабДокумент.Области["П034704"].Значение);
		
	КонецЕсли; // РАЗДЕЛ 3
	
	// СОЦИАЛЬНАЯ НОРМА НА 1 ЧЕЛОВЕКА
	// ТабДокумент.Области["П000003006001"].Значение = СтруктураРеквизитовФормы.мСоциальнаяНормаНаЧеловека;
	
	Расчет(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()

&НаКлиенте
// Процедура - обработчик команды "Заполнить отчет".
//
Процедура ЗаполнитьОтчет(Команда)
	
	ТекстВопроса = "Перед автозаполнением произойдет очистка отчета. Продолжить?";
	ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяПриПерезаполнении", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя. В случае утвердительного ответа производит заполнение.
//
Процедура ОбработатьОтветПользователяПриПерезаполнении(РезультатОтвета, ДопПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Очистить();
		Отказ = Ложь;
		ЗаполнитьАвто(Отказ);
		Если Отказ Тогда
			ПоказатьПредупреждение(Неопределено, "Не указаны настройки отчета!
												 |Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		КонецЕсли;
		Расчет(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяПриПерезаполнении()

&НаКлиенте
// Процедура - обработчик команды "Открыть форму настроек".
//
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФорму("Отчет.РегламентированныйОтчетСтатистикаФорма22ЖКХсв.Форма.НастройкиОтчета");
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция переводит единицы в тысячи и округляет до десятых.
//
Функция ПеревестиВТысячи(Сумма)
	
	Возврат Окр(Сумма / 1000, 1, РежимОкругления.Окр15как20);
	
КонецФункции

&НаСервере
// Процедура производит суммирование строк 42, 43 по графам 3, 4, 10, 11 для включения в 
// сумму строки 39.
Процедура СуммироватьСтрокиСодержаниеИРемонт(СтруктураПараметров, СтрокаУслуги)
	
	Начисление  = СтруктураПараметров.Начисление;
	Оплата      = СтруктураПараметров.Оплата;
	Площадь     = СтруктураПараметров.Площадь;
	Проживающие = СтруктураПараметров.Проживающие;
	
	СтруктураПараметров.Вставить("Начисление",  Начисление  + ПеревестиВТысячи(СтрокаУслуги.СуммаНачисления));
	СтруктураПараметров.Вставить("Оплата",      Оплата      + ПеревестиВТысячи(СтрокаУслуги.СуммаОплаты));
	СтруктураПараметров.Вставить("Площадь",     Площадь     + СтрокаУслуги.Площадь);
	СтруктураПараметров.Вставить("Проживающие", Проживающие + СтрокаУслуги.КоличествоПроживающих);
	
КонецПроцедуры // СуммироватьСтрокиСодержаниеИРемонт()

&НаСервере
// Функция получает виды помещения с установленным типом "Место общего пользования" или "Подсобное помещение".
//
Функция ПолучитьСписокВидовПомещенийМестОбщегоПользования()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПомещений.Ссылка КАК ВидПомещения
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК УПЖКХ_ВидыПомещений
	|ГДЕ
	|	УПЖКХ_ВидыПомещений.ОтноситсяКМОП";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидПомещения");
	
КонецФункции // ПолучитьСписокВидовПомещенийМестОбщегоПользования()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
//Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// - Квартплата

#КонецОбласти
