#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ТекстШтрихКода;        // Хранит текст одномерного штрихкода текущей квитанции.
Перем ТекстШтрихКодаПоКР;    // Хранит текст одномерного штрихкода текущей квитанции по услугам капитального ремонта.
Перем ТекстШКСоСтрахованием; // Хранит текст одномерного штрихкода текущей квитанции с учетом добровольного страхования.

#Область Механизм_Подключения_Дополнительного_Отчета

// Для внутреннего использования. Сведения для регистрации отчета.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",             "ДополнительныйОтчет"); // Варианты: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
																			 // "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов" 
	
	ПараметрыРегистрации.Вставить("Наименование",    "Внешний отчет: " + Метаданные().Синоним);
	ПараметрыРегистрации.Вставить("Версия",          "<Версия>");     // версия внешнего тчета.
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);           // если ИСТИНА, то выводится конфигураторская ошибка в типовой реализации,
																	  // связанная с ограничениями при использовании компоненты в механизмах внешних отчетов и обработок.
	ПараметрыРегистрации.Вставить("Информация",      "<Информация>");
	ПараметрыРегистрации.Вставить("ВерсияБСП",       "2.4.6.62");     // не ниже какой версии БСП подерживается обработка
	
	// Команды формирования отчета:
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление",         Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("Идентификатор",         Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("Использование",         Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение",  Новый ОписаниеТипов("Булево"));
	ТаблицаКоманд.Колонки.Добавить("Модификатор",           Новый ОписаниеТипов("Строка"));
	
	// для Платежных документов:
	ДобавитьКоманду(ТаблицаКоманд,
					"Открыть " + ПараметрыРегистрации.Наименование,
					"Открыть " + ПараметрыРегистрации.Наименование,
					"ОткрытиеФормы",	//Использование.  Варианты: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода".
					Ложь,				//Показывать оповещение. Варианты Истина, Ложь.
					"");				//Модификатор.
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()

// Добавляет команды в таблицу.
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление        = Представление;
	НоваяКоманда.Идентификатор        = Идентификатор;
	НоваяКоманда.Использование        = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор          = Модификатор;

КонецПроцедуры // ДобавитьКоманду()

// Выполнение команд для нефайловой базы.
// ИдентификаторКоманды - вызываемая команда: "СформироватьОтчет".
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	Выполнить(ИдентификаторКоманды + "(ПараметрыКоманды.ПараметрыОтчета, ПараметрыКоманды.АдресХранилища)");
	
	ПараметрыКоманды.Вставить("ЗаданиеВыполнено",     Истина);
	ПараметрыКоманды.Вставить("ИдентификаторЗадания", Неопределено);
	
КонецПроцедуры

#КонецОбласти // Механизм_Подключения_Дополнительного_Отчета

////////////////////////////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА

#Область ПостроениеОтчета

// Выполняет запрос и формирует табличный документ-результат отчета.
//
// Параметры:
//  СтруктураНастроек - Структура - настройки отчета.
//  АдресХранилища - Уникальный идентификатор - адрес хранилища на сервере.
//
Процедура СформироватьОтчет(СтруктураНастроек, АдресХранилища) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	УстановитьПараметрыПечати(ДокументРезультат, СтруктураНастроек.ВидМакета);
	
	// Многопоточность.
	НастройкиМногопоточности = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьНастройкиМногопоточности();
	
	ИспользоватьМногопоточность = НастройкиМногопоточности.ИспользоватьМногопоточность;
	КоличествоПотоков           = НастройкиМногопоточности.КоличествоПотоков;
	
	// Если база клиент-серверная, то уменьшаем количество потоков на 1,
	// так как формирование квитанций уже выполняется в фоновом задании.
	Если НЕ УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая() Тогда
		КоличествоПотоков = КоличествоПотоков - 1;
	КонецЕсли;
	
	// Многопоточный сбор данных.
	Если ИспользоватьМногопоточность И КоличествоПотоков > 1 Тогда
		
		// Массив результатов.
		МассивГотовыхСтруктурДанных = Новый Массив;
		
		ИмяМетода                         = "УПЖКХ_МногопоточнаяОбработкаДанных.ВыполнитьСборДанныхДляПлатежныхДокументовВФоновомЗадании";
		НаименованиеЗадания               = "Фоновая подготовка платежных документов.";
		МассивНаборовДанныхФоновыхЗаданий = ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныйДокумент(СтруктураНастроек, МассивГотовыхСтруктурДанных, КоличествоПотоков);
		
		УПЖКХ_МногопоточнаяОбработкаДанных.ОбработатьМассивНаборовДанныхМногопоточно(ИмяМетода, НаименованиеЗадания, МассивНаборовДанныхФоновыхЗаданий);
		
		//////////////////////////////////////////////////////////////////////////
		// Формирование табличных документов на основании собранных данных.
		
		МассивГотовыхДокументов = Новый Массив;
		
		ИмяМетода           = "УПЖКХ_МногопоточнаяОбработкаДанных.ВыполнитьФормированиеПлатежныхДокументовВФоновомЗадании";
		НаименованиеЗадания = "Фоновая подготовка платежных документов.";
		
		// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
		ИспользоватьРассылкуКвитанций = СтруктураНастроек.ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте;
		
		Если ИспользоватьРассылкуКвитанций Тогда
			
			МассивОбработанныхДанных = Новый Массив;
			
			МассивНаборовДанныхФоновыхЗаданий = ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныйДокументФормирование(МассивГотовыхДокументов, МассивГотовыхСтруктурДанных, МассивОбработанныхДанных);
			
			// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
		Иначе
			МассивНаборовДанныхФоновыхЗаданий = ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныйДокументФормирование(МассивГотовыхДокументов, МассивГотовыхСтруктурДанных);
		КонецЕсли;
		
		// Запускаем фоновые задания и ожидаем их завершения.
		УПЖКХ_МногопоточнаяОбработкаДанных.ОбработатьМассивНаборовДанныхМногопоточно(ИмяМетода, НаименованиеЗадания, МассивНаборовДанныхФоновыхЗаданий);
		
		МаксимальныйИндекс = МассивГотовыхДокументов.ВГраница();
		
		НомерСтроки = 1;
		
		Для Сч = 0 По МаксимальныйИндекс Цикл
			
			Результат = ПолучитьИзВременногоХранилища(МассивГотовыхДокументов[Сч]);
			
			Если НЕ Результат = Неопределено Тогда
				ДокументРезультат.Вывести(Результат);
				Если Сч <> МаксимальныйИндекс Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
			КонецЕсли;
			
			// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
			Если ИспользоватьРассылкуКвитанций Тогда
				
				ДанныеПоКвитанциям = СтруктураНастроек.ДанныеПоКвитанциям;
				
				Для Каждого ТекСтр Из ПолучитьИзВременногоХранилища(МассивОбработанныхДанных[Сч])Цикл
					
					НоваяСтр = ДанныеПоКвитанциям.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтр, ТекСтр);
					
					НоваяСтр.НомерСтроки = НомерСтроки;
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла;
			КонецЕсли;
			// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
			
		КонецЦикла;
		
	Иначе
		
		СтруктураГотовыхДанных = ПолучитьДанныеДляФормированияПлатежныхДокументов(СтруктураНастроек);
		
		СформироватьПлатежныйДокументНаОснованииГотовыхДанных(ДокументРезультат, СтруктураГотовыхДанных);
		
	КонецЕсли;
	
	РезультатыФормированияОтчета = Новый Структура("ДокументРезультат, ДанныеПоКвитанциям", ДокументРезультат);
	
	// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ДополнитьСтруктуруРезультатовОтчетаДаннымиПоКвитанциям(РезультатыФормированияОтчета, СтруктураНастроек.ДанныеПоКвитанциям);
	// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	
	ПоместитьВоВременноеХранилище(РезультатыФормированияОтчета, АдресХранилища);
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ФормированиеКвитанцийЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры // СформироватьОтчет()

// Подготавливает данные для формирования платежных документов.
//
Функция ПолучитьДанныеДляФормированияПлатежныхДокументов(СтруктураНастроек) Экспорт
	
	// Подготовливаем структуру, в которой будут храниться общие параметры отчета
	// и сведения о плательщике.
	ОбщиеДанные = Новый Структура;
	
	// Записываем в структуру сведения об основной организации и об исполнителе расчетов.
	УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьСведенияОбОрганизациях(ОбщиеДанные, СтруктураНастроек);
	
	// Подготавливаем структуру с таблицами данных о наслениях по всем л/с.
	СтруктураОбщихТаблиц = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблиц(СтруктураНастроек);
	
	// Подготавливаем структуру с таблицами данных о лицевых счетах.
	СтруктураПлательщиков = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруСДаннымиОПлательщиках(СтруктураНастроек);
	
	Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		// (ПЕНИ) // Дополняем структуру общих таблиц таблицами начисления пени.
		УПЖКХ_ПечатьКвитанцийСервер.ДополнитьСтруктуруОбщихТаблицТаблицамиПоПеням(СтруктураОбщихТаблиц, СтруктураНастроек);
	КонецЕсли;
	
	Если СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		Если НЕ СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
			Если СтруктураНастроек.ПечататьКвитанциюКапРемонт Тогда
				Если СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
					СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.ТекущийСписокУслуг);
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
					СтруктураОбщихТаблицКапРемонт = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.СписокУслугКапРемонт);
				Иначе
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
					СтруктураОбщихТаблицКапРемонт = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.СписокУслугКапРемонт);
				КонецЕсли;
			Иначе
				// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
				СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.ТекущийСписокУслуг);
			КонецЕсли;
		Иначе
			// Для печати единой квитанции программно меняем в структуре настроек отчета методику ведения учета по услугам кап. ремонта.
			СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта = Ложь;
		КонецЕсли; 
	ИначеЕсли СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		
		// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
		СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, СтруктураНастроек.ТекущийСписокУслуг);
		// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
		СтруктураОбщихТаблицКапРемонт = Неопределено;
		
	КонецЕсли;
	
	Возврат Новый Структура("СтруктураНастроек, ОбщиеДанные, СтруктураПлательщиков, СтруктураОбщихТаблиц, СтруктураОбщихТаблицОсновная, СтруктураОбщихТаблицКапРемонт",
							 СтруктураНастроек, ОбщиеДанные, СтруктураПлательщиков, СтруктураОбщихТаблиц, СтруктураОбщихТаблицОсновная, СтруктураОбщихТаблицКапРемонт);
	
КонецФункции

// Формирует платежный документ на основании подготовленных данных.
//
Процедура СформироватьПлатежныйДокументНаОснованииГотовыхДанных(ДокументРезультат, СтруктураГотовыхДанных) Экспорт
	
	СтруктураНастроек = СтруктураГотовыхДанных.СтруктураНастроек;
	
	ОбщиеДанные                   = СтруктураГотовыхДанных.ОбщиеДанные;
	СтруктураПлательщиков         = СтруктураГотовыхДанных.СтруктураПлательщиков;
	СтруктураОбщихТаблиц          = СтруктураГотовыхДанных.СтруктураОбщихТаблиц;
	СтруктураОбщихТаблицОсновная  = СтруктураГотовыхДанных.СтруктураОбщихТаблицОсновная;
	СтруктураОбщихТаблицКапРемонт = СтруктураГотовыхДанных.СтруктураОбщихТаблицКапРемонт;
	
	врТабличныйДокумент = Новый ТабличныйДокумент;
	УстановитьПараметрыПечати(врТабличныйДокумент, СтруктураНастроек.ВидМакета);
	
	ЭтоПервая = Истина;
	
	// Выводим в табличный документ квитанцию для каждого объекта отчета.
	Для Каждого СтрокаОбъекта Из СтруктураНастроек.ТаблицаОбъектов Цикл
		
		врТабличныйДокумент.Очистить();
		
		// Квитанцию для каждого объекта отчета выводим с новой страницы.
		Если ЭтоПервая Тогда
			ЭтоПервая = Ложь;
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Записываем в структуру сведения о плательщике.
		УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьСведенияОПлательщике(ОбщиеДанные, СтруктураНастроек, СтруктураПлательщиков, СтрокаОбъекта, СтруктураОбщихТаблиц);
		
		Если СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта ИЛИ СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
			Если СтруктураНастроек.ПечататьКвитанциюКапРемонт Тогда
				Если СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
					Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
						
						СтруктураОбщихТаблицОсновнаяИКапРемонт = Новый Структура("СтруктураОбщихТаблицОсновная, СтруктураОбщихТаблицКапРемонт, СтруктураОбщихТаблицДляСтандартныйКР",
																					СтруктураОбщихТаблицОсновная, СтруктураОбщихТаблицКапРемонт, СтруктураОбщихТаблиц);
						СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицОсновнаяИКапРемонт, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент);
						
					Иначе
						СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицОсновная, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент);
						
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						
						СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент, Истина);
					КонецЕсли;
				Иначе // СпособПечатиКвитанцииКапРемонт = мСпособПечатиКвитанцииКапРемонт[2].Значение
					
					СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицКапРемонт, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент, Истина);
					
				КонецЕсли;
			Иначе // СпособПечатиКвитанцииКапРемонт = мСпособПечатиКвитанцииКапРемонт[1].Значение
				
				СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицОсновная, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент);
				
			КонецЕсли;
		Иначе
			
			// Данная проверка нужна для формирования ПД согласно настройке "СпособПечатиКвитанцииКапРемонт", так как
			// - Для формы "Плат. документ (пост. №679/30 для МО)" данная настройка не должна влиять, если не ведется 
			//   раздельный учет по услугам кап.ремонта.
			// - Для формы "Плат. документ (приказ №924/пр)" факт ведения раздельного учета по услугам кап.ремонта обязателен.
			// - Для остальных форм ПД данная настройка "СпособПечатиКвитанцииКапРемонт" должна всегда учитываться.
			Если (СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта И СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "только квитанцию на кап. ремонт")
			 ИЛИ СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "только основную квитанцию"
			 ИЛИ СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт"
			 ИЛИ СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
				
				СформироватьТекущуюКвитанцию(СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает данные и выводит на печать квитанцию.
//
// Параметры:
//  СтруктураОбщихТаблиц - Структура - структура с общими таблицами.
//  СтруктураНастроек    - Структура - структура с настройками пользователя.
//  ОбщиеДанные          - Структура - структура с общими данными по квитанции.
//  ДокументРезультат    - ТабличныйДокумент - основной табличный документ.
//  врТабличныйДокумент  - ТабличныйДокумент - дополнительный табличный документ.
//  КвитанцияНаКР        - Булево - признак того, что текущая квитанция является квитанцией на кап. ремонт.
//
Процедура СформироватьТекущуюКвитанцию(СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент, КвитанцияНаКР = Ложь)
	
	врТабличныйДокумент.Очистить();
	
	Если ОбщиеДанные.Свойство("КвитанцияНаКР") Тогда
		ОбщиеДанные.КвитанцияНаКР = КвитанцияНаКР;
	Иначе
		ОбщиеДанные.Вставить("КвитанцияНаКР", КвитанцияНаКР);
	КонецЕсли;
	
	Если ОбщиеДанные.Свойство("КвитанцияПоПени") И ОбщиеДанные.КвитанцияПоПени = Истина Тогда
		ОбщиеДанные.КвитанцияПоПени = Ложь;
	Иначе
		ОбщиеДанные.Вставить("КвитанцияПоПени", Ложь);
	КонецЕсли;
	
	Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		
		СтруктураТекущихИОбщихДанных = ПолучитьТекущиеИОбщиеДанныеПоОбъекту924(СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек);
		
		Если СтруктураТекущихИОбщихДанных.ПечататьКвитанцию Тогда
		
			// Текст для одномерного штрихкода.
			ПолучитьТекстОдномерногоШтрихКода(СтруктураНастроек, СтруктураТекущихИОбщихДанных.ОбщиеДанные);
			
			// Выводим в табличный документ квитанцию по текущему объекту отчета.
			СформироватьКвитанцию(врТабличныйДокумент, СтруктураНастроек, СтруктураТекущихИОбщихДанных.ТекущиеДанные,
								  СтруктураТекущихИОбщихДанных.ОбщиеДанные);
			
			СформироватьШтрихкоды(врТабличныйДокумент, СтруктураНастроек, СтруктураТекущихИОбщихДанных.ОбщиеДанные);
			
			// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
			Если СтруктураНастроек.ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте Тогда
				УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ЗаполнитьДанныеПоКвитанциям(врТабличныйДокумент,
																										 СтруктураНастроек.ДанныеПоКвитанциям,
																										 ПериодПросмотра,
																										 ОбщиеДанные);
			КонецЕсли;
			// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
			
			// Выводим квитанцию в общий документ-результат.
			ВывестиОбласть(ДокументРезультат, врТабличныйДокумент);
			
		КонецЕсли;
		
	Иначе
		
		Если ОбщиеДанные.Свойство("КвитанцияНаКР") Тогда
			ОбщиеДанные.КвитанцияНаКР = КвитанцияНаКР;
		Иначе
			ОбщиеДанные.Вставить("КвитанцияНаКР", КвитанцияНаКР);
		КонецЕсли;
		
		Если (НЕ ОбщиеДанные.КвитанцияНаКР И СтруктураНастроек.ВыводитьQRштрихкодДляСитикардПоОсн)
		 ИЛИ (ОбщиеДанные.КвитанцияНаКР И СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта И СтруктураНастроек.ВыводитьQRштрихкодДляСитикардПоКР) Тогда
			ОбщиеДанные.Вставить("ВыводитьQRштрихкодДляСитикард", Истина);
		Иначе
			ОбщиеДанные.Вставить("ВыводитьQRштрихкодДляСитикард", Ложь);
		КонецЕсли;
		
		// Подготавливаем структуру с таблицами по текущему объекту отчета.
		ТекущиеДанные = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек);
		
		// Записываем в структуру суммовые показатели по текущему объекту отчета.
		УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек);
		
		ПечататьКвитанцию = УПЖКХ_ПечатьКвитанцийСервер.ПечататьКвитанцииПоОтбору(СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек, Ложь);
		
		Если ПечататьКвитанцию Тогда
			
			// Текст для одномерного штрихкода.
			ПолучитьТекстОдномерногоШтрихКода(СтруктураНастроек, ОбщиеДанные);
			
			// Выводим в табличный документ квитанцию по текущему объекту отчета.
			СформироватьКвитанцию(врТабличныйДокумент, СтруктураНастроек, ТекущиеДанные, ОбщиеДанные);
			
			СформироватьШтрихкоды(врТабличныйДокумент, СтруктураНастроек, ОбщиеДанные);
			
			// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
			Если СтруктураНастроек.ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте Тогда
				УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ЗаполнитьДанныеПоКвитанциям(врТабличныйДокумент,
																										 СтруктураНастроек.ДанныеПоКвитанциям,
																										 ПериодПросмотра,
																										 ОбщиеДанные);
			КонецЕсли;
			// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
			
			// Выводим квитанцию в общий документ-результат.
			ВывестиОбласть(ДокументРезультат, врТабличныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		
		// (ПЕНИ) // Производим формирование квитанции по пеням.
		Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
			СформироватьТекущуюКвитанциюПоПеням(СтруктураТекущихИОбщихДанных.ТекущиеДанные, СтруктураОбщихТаблиц, СтруктураНастроек,
												СтруктураТекущихИОбщихДанных.ОбщиеДанные, ДокументРезультат, врТабличныйДокумент);
		Иначе
			СформироватьТекущуюКвитанциюПоПеням(ТекущиеДанные, СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, врТабличныйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТекущуюКвитанцию()

// Формирует квитанцию на основе макета, выбранного пользователем.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводим квитанцию.
//  СтруктураНастроек - Структура - настройки отчета.
//  ТекущиеДанные - структура с суммовыми показатели по текущему объекту.
//  ОбщиеДанные - структура с данными о лицевом счете.
//
Процедура СформироватьКвитанцию(ДокументРезультат, СтруктураНастроек, ТекущиеДанные, ОбщиеДанные)
	
	// Подготавливаем показатели для вывода.
	ВидМакета = СтруктураНастроек.ВидМакета;
	
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		Если СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			ОбщиеДанные.ОбщиеДанныеПоКР.Вставить("ТаблицаИПУ", ТекущиеДанные.ТаблицаИндСчетчиков);
		КонецЕсли;
		
		ОбщиеДанные.ОбщиеДанныеНеКР.Вставить("ТаблицаИПУ", ТекущиеДанные.ТаблицаИндСчетчиков);
		ЛицевойСчет = ОбщиеДанные.ОбщиеДанныеНеКР.ЛицевойСчет;
		
		ОбщиеДанные.Вставить("Заголовок", ПолучитьТекстЗаголовкаКвитанции(СтруктураНастроек, ОбщиеДанные.ОбщиеДанныеНеКР));
	Иначе
		
		ТаблицаСчетчиков                = ТекущиеДанные.ТаблицаСчетчиков;
		ТаблицаНачисления               = ТекущиеДанные.ТаблицаНачисления;
		ЛицевойСчет                     = ОбщиеДанные.ЛицевойСчет;
		ТаблицаПерерасчетов             = ТекущиеДанные.ТаблицаПерерасчетов;
		ТаблицаРассрочки                = ТекущиеДанные.ТаблицаРассрочки;
		ТаблицаОПУ                      = ТекущиеДанные.ТаблицаОбщихСчетчиков;
		ТаблицаСведений                 = ОбщиеДанные.ТаблицаСведений;
		ТаблицаДобровольногоСтрахования = ТекущиеДанные.ТаблицаДобровольногоСтрахования;
		ТаблицаПоставщиков              = ТекущиеДанные.ТаблицаПоставщиков;
		
		ОбщиеДанные.Вставить("ТаблицаСчетчиков", ТаблицаСчетчиков);
		ОбщиеДанные.Вставить("ТаблицаОПУ",       ТаблицаОПУ);
		ОбщиеДанные.Вставить("Заголовок",        ПолучитьТекстЗаголовкаКвитанции(СтруктураНастроек, ОбщиеДанные));
	КонецЕсли;
	
	ТаблицаИПУ = ТекущиеДанные.ТаблицаИндСчетчиков;
	ОбщиеДанные.Вставить("ТаблицаИПУ", ТаблицаИПУ);
	
	// Содержит области отрывного корешка и извещения для вывода на оборотной стороне.
	ОбластьИзвещениеДляОборотнойСтороны = Новый ТабличныйДокумент;
	
	Попытка
		
		ИмяМакета = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета);
		
		// Форма "Плат. документ (приказ №454 в соответ. с пост. №354)".
		Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И Не СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздел1и2Приказ454(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздел3и4НачисленияПриказ454(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздел5и6Приказ454(Макет, ТаблицаПерерасчетов, ТаблицаРассрочки, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Если СтруктураНастроек.ДвусторонняяПечать Тогда
				// Пустая оборотная (четная) страница.
				ВыводПустойСтраницы(ДокументРезультат);
			КонецЕсли;
			
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			// ОТРЫВНОЙ КОРЕШОК.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И Не СтруктураНастроек.ПечататьОтрывнойКорешокВнизу Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные.ОбщиеДанныеНеКР, ОбщиеДанные.ОбщиеДанныеНеКР.ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);;
			КонецЕсли;
			
			// ЗАГОЛОВОК
			Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// РАЗДЕЛ 1 и 2.
			Область = ПолучитьОбластьРаздел1и2Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек, ТекущиеДанные.ТаблицаПоставщиковНеКР);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// РАЗДЕЛ 3 и 4.
			Область = ПолучитьОбластьРаздел3и4НачисленияПриказ924пр(Макет, ОбщиеДанные.ОбщиеДанныеНеКР, СтруктураНастроек, ТекущиеДанные.ТаблицаНачисленияНеКР, ТекущиеДанные.ТаблицаДобровольногоСтрахования);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			ОбластьНижеРаздела3 = Новый ТабличныйДокумент;
			
			ДокументСлева = Новый ТабличныйДокумент;
			
			// РАЗДЕЛ 5.
			Область = ПолучитьОбластьРаздел5ПерерасчетыПриказ924пр(Макет, ТекущиеДанные.ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ДокументСлева, Область, Истина);
			
			// РАЗДЕЛ 6.
			Область = ПолучитьОбластьРаздел6РассрочкиПриказ924пр(Макет, ТекущиеДанные.ТаблицаРассрочки, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ДокументСлева, Область, Истина);
			
			// РАЗДЕЛ 7.
			Область = ПолучитьОбластьРаздел7НачисленияПоКРПриказ924пр(Макет, ТекущиеДанные.ТаблицаНачисленияПоКР, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ДокументСлева, Область, Истина);
			
			ВывестиОбласть(ОбластьНижеРаздела3, ДокументСлева, Истина, "Присоединить");
			
			// РАЗДЕЛ 8.
			Область = ПолучитьОбластьРаздел8Приказ924пр(Макет, ОбщиеДанные.ОбщиеДанныеПоКР, СтруктураНастроек, ТекущиеДанные.ТаблицаПоставщиковПоКР);
			ВывестиОбласть(ОбластьНижеРаздела3, Область, Истина, "Присоединить");
			
			ВывестиОбласть(ДокументРезультат, ОбластьНижеРаздела3, Истина);
			
			// ПРИМЕЧАНИЕ.
			ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
			
			// ОТРЫВНОЙ КОРЕШОК.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И СтруктураНастроек.ПечататьОтрывнойКорешокВнизу Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные.ОбщиеДанныеНеКР, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Если СтруктураНастроек.ДвусторонняяПечать Тогда
				// Пустая оборотная (четная) страница.
				ВыводПустойСтраницы(ДокументРезультат);
			КонецЕсли;
		
		// Форма "Плат. документ (с полями для отметки банка №1)".
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1 Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И Не СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбластьИзвещениеРаздел1СПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// Запоминаем область извещение для двусторонней печати.
			ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
			
			Область = ПолучитьОбластьКвитанцияРаздел2СПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздел3СНачислениямиСПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования);
			ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, Область, 8, 7);
			
			// Вывод областей дополнительных сведений.
			// Справочную информацию в квитанции на кап. ремонт не выводим.
			Если Не ОбщиеДанные.КвитанцияНаКР Тогда
				ОбластьДопСведения = ПолучитьОбластьРаздел4СправкиСПолямиБанка1(Макет, ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные);
			Иначе
				ОбластьДопСведения = Новый ТабличныйДокумент;
			КонецЕсли;
			
			Если Не ТаблицаПерерасчетов.Количество() = 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
				ОбластьПерерасчет = ПолучитьОбластьРаздел5ПерерасчетыСПолямиБанка1(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ОбластьДопСведения, ОбластьПерерасчет, Истина);
			КонецЕсли;
			
			ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
			
			Область = ПолучитьОбласть(Макет, "ПустаяСтрока", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьДопСведения, Область, Истина);
			
			ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, Строка(ОбщиеДанные.ЛицевойСчет));
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
		// Форма "Плат. документ (с полями для отметки банка №2)".
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2 Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И Не СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбластьИзвещенияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьИзвещенияПоказанияСчетчиковСПолямиБанка2(Макет, ТаблицаИПУ, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// Запоминаем область извещение для двусторонней печати.
			ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
			
			Область = ПолучитьОбластьКвитанцияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			ОбластьНачисления = ПолучитьОбластьНачисленияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования);
			ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисления, 2, 2);
			
			ОбластьНачисленияПУ = ПолучитьОбластьНачисленияПУСполямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования);
			ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисленияПУ, 4, 3);
			
			// Вывод областей дополнительных сведений.
			// Справочную информацию в квитанции на кап. ремонт не выводим.
			Если Не ОбщиеДанные.КвитанцияНаКР Тогда
				ОбластьДопСведения = ПолучитьОбластьСправкиСПолямиБанка2(Макет, ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные);
			Иначе
				ОбластьДопСведения = Новый ТабличныйДокумент;
			КонецЕсли;
			Область = ПолучитьОбласть(Макет, "Разделитель", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьДопСведения, Область);
			
			ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
			
			ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
		// Форма "Плат. документ (Пермский край)".
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И Не СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбластьИзвещениеПермь(Макет, ОбщиеДанные, СтруктураНастроек, Ложь, ТаблицаНачисления, ТаблицаСчетчиков, 
													ТекущиеДанные.ТаблицаУслугКПУ, ТекущиеДанные.БазаРаспределенияПоУслугам,
													ТекущиеДанные.ТаблицаУслугДляПерми);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьКвитанцияПермь(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТекущиеДанные.ТаблицаПерерасчетов, ТекущиеДанные.ТаблицаУслугДляПерми);
			ВывестиОбласть(ДокументРезультат, Область, Истина, "Присоединить");
			
			ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Если СтруктураНастроек.ДвусторонняяПечать Тогда
				// Пустая оборотная (четная) страница.
				ВыводПустойСтраницы(ДокументРезультат);
			КонецЕсли;
			
		// Форма "Плат. документ (Чувашская республика)".
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И Не СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбластьИзвещениеЧебоксары(Макет, ОбщиеДанные, СтруктураНастроек, ДокументРезультат);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// Запоминаем область извещение для двусторонней печати.
			ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
			
			Область = ПолучитьОбластьКвитанцияЧебоксары(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек);
			ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, Область, 4, 3);
			
			// Вывод областей дополнительных сведений.
			УчитыватьПениВОсновнойКвитанции = (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням);
			ОбластьДопСведения = ПолучитьОбластьПодвалКвитанцииЧебоксары(Макет, ТаблицаПерерасчетов, ОбщиеДанные, СтруктураНастроек, Ложь,
																		УчитыватьПениВОсновнойКвитанции, ТаблицаИПУ, ТаблицаОПУ, ТаблицаРассрочки);
			
			Область = ПолучитьОбласть(Макет, "Разделитель", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьДопСведения, Область, Истина);
			
			ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
			
			ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
		// Форма "Плат. документ (Московская область пост. №1161/57 для МО)".
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			// Заполняем структуру символов итоговой суммы и наименования лицевого счета.
			СтруктураСимволовСуммыИЛицевогоСчета = Новый Структура;
			УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыСуммыВсего(Область, ОбщиеДанные.ВсегоКОплате, СтруктураСимволовСуммыИЛицевогоСчета);
			УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыСуммыВсего(Область, ОбщиеДанные.ВсегоКОплатеСДобровольнымСтрахованием, СтруктураСимволовСуммыИЛицевогоСчета, Истина);
			УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыЛицевогоСчета(ОбщиеДанные.НаименованиеЛицевогоСчета, СтруктураСимволовСуммыИЛицевогоСчета);
			
			Область = ПолучитьОбластьБланкПоказанийСчетчиковМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета, ТаблицаСчетчиков);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьИзвещениеМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// Запоминаем область извещение для двусторонней печати.
			ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
			
			Область = ПолучитьОбластьКвитанцияМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета, ТекущиеДанные.КоличествоЛьготников);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// Формируем таблицу соответствий видов услуг и порядковых номеров поставщиков.
			ОбластьНачисления = ПолучитьОбластьНачисленияМосква(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования);
			ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисления, 10, 3);
			
			// Вывод областей дополнительных сведений.
			ОбластьДопСведения = ПолучитьОбластьПерерасчетыМосква(Макет, СтруктураНастроек, ТаблицаПерерасчетов, ТаблицаПоставщиков, ОбщиеДанные);
			ОбластьРассрочка   = ПолучитьОбластьРассрочкаМосква(Макет, СтруктураНастроек, ТаблицаРассрочки, ТаблицаПоставщиков, ОбщиеДанные);
			ВывестиОбласть(ОбластьДопСведения, ОбластьРассрочка, Истина, "Присоединить");
			
			Область = ПолучитьОбластьПоставщикиМосква(Макет, СтруктураНастроек, ТаблицаПоставщиков, ОбщиеДанные);
			ВывестиОбласть(ОбластьДопСведения, Область, Истина);
			
			// Справочную информацию в квитанции на кап. ремонт не выводим.
			Если Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьСправочнаяИнформацияМосква(Макет, СтруктураНастроек, ТаблицаСчетчиков, ТаблицаНачисления, ТаблицаПоставщиков, ОбщиеДанные);
				ВывестиОбласть(ОбластьДопСведения, Область, Истина);
			КонецЕсли;
			
			ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет);
			
		// Форма "Плат. документ (Московская область пост. №679/30 для МО)".
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679 Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			СтруктураСимволовСуммыИЛицевогоСчета = Новый Структура;
			УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыЛицевогоСчета(ОбщиеДанные.НаименованиеЛицевогоСчета, СтруктураСимволовСуммыИЛицевогоСчета);
			
			Область = ПолучитьОбластьЗаголовкаПДИРаздела1Москва679(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаИПУ.Скопировать());
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			// Запоминаем область извещение для двусторонней печати.
			ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
			
			Область = ПолучитьОбластьРаздела2Москва679(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздела2КвитанцияМосква679(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздела3Москва679(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления.Скопировать(), ТаблицаДобровольногоСтрахования);
			ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, Область, 10, 3);
			
			врТабличныйДокумент = Новый ТабличныйДокумент;
			
			Если Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьРаздела4Москва679(Макет, ТаблицаНачисления, ТаблицаСчетчиков, СтруктураНастроек, ОбщиеДанные, ТаблицаПерерасчетов.Количество() > 0);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			врТабличныйДокументРаздел5иРаздел6 = Новый ТабличныйДокумент;
			
			Область = ПолучитьОбластьРаздела5Москва679(Макет, СтруктураНастроек, ТаблицаПерерасчетов, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокументРаздел5иРаздел6, Область, Истина, "Присоединить");
			
			Если врТабличныйДокументРаздел5иРаздел6.ШиринаТаблицы > 0 Тогда
				Область = ПолучитьОбласть(Макет, "РазделительРаздел5и6", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокументРаздел5иРаздел6, Область, Истина, "Присоединить");
			КонецЕсли;
			
			Область = ПолучитьОбластьРаздела6Москва679(Макет, СтруктураНастроек, ТаблицаРассрочки, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокументРаздел5иРаздел6, Область, Истина, "Присоединить");
			
			ВывестиОбласть(врТабличныйДокумент, врТабличныйДокументРаздел5иРаздел6, Истина);
			
			ВывестиПримечание(врТабличныйДокумент, Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, врТабличныйДокумент, ЛицевойСчет);
			
		// Форма "Плат. документ (приказ №43/пр)".
		ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр Тогда
			
			Макет = ПолучитьМакетПлатежногоДокумента(ИмяМакета, ОбщиеДанные);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И Не СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьИдентификаторыПДСтандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздел1и2Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаИПУ);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			Область = ПолучитьОбластьРаздел3Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаПоставщиков);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
			
			втТабличныйДокумент = Новый ТабличныйДокумент;
			
			Область = ПолучитьОбластьРаздел4Стандартный43Пр(Макет, ТаблицаНачисления, ТаблицаСчетчиков, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(втТабличныйДокумент, Область, Истина, "Присоединить");
			
			врТабличныйДокументРаздел5иРаздел6 = Новый ТабличныйДокумент;
			
			Область = ПолучитьОбластьРаздел5Стандартный43Пр(Макет, СтруктураНастроек, ТаблицаРассрочки, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокументРаздел5иРаздел6, Область, Истина);
			
			Область = ПолучитьОбластьРаздел6Стандартный43Пр(Макет, СтруктураНастроек, ТаблицаПерерасчетов, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокументРаздел5иРаздел6, Область, Истина);
			
			ВывестиОбласть(втТабличныйДокумент, врТабличныйДокументРаздел5иРаздел6, Истина, "Присоединить");
			ВывестиОбласть(ДокументРезультат, втТабличныйДокумент, Истина);
			
			ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
			
			// Отрывной корешок печатаем, если установлена соответствующая настройка.
			// В квитанция кап. ремонта корешок не печатаем.
			Если СтруктураНастроек.ПечататьОтрывнойКорешок
			   И СтруктураНастроек.ПечататьОтрывнойКорешокВнизу
			   И Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, ТаблицаИПУ);
				ВывестиОбласть(ДокументРезультат, Область, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Отчет.УПЖКХ_ПлатежныйДокумент", ИмяМакета) Тогда
			ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось сформировать квитанцию. Возможно, ошибка связана с использованием измененного макета квитанции. Рекомендуем ознакомиться с <div>инструкцией<ref>https://vgkh.ru/faq/faq_tsj_3_0/oshibka_formirovaniya_kvitancii/<div>.", ОписаниеОшибки());
		Иначе
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры // СформироватьКвитанцию()

#КонецОбласти

#Область ПЕНИ

////////////////////////////////////////////////////////////////////////////////
// (ПЕНИ) ПЕЧАТЬ ОТДЕЛЬНОЙ КВИТАНЦИИ ПО ПЕНЯМ.

// Подготавливает данные и выводит на печать квитанцию.
//
// Параметры:
//  ТекущиеДанные        - Структура - структура с данными о начислениях.
//  СтруктураОбщихТаблиц - Структура - структура с общими таблицами.
//  СтруктураНастроек    - Структура - структура с настройками отчета.
//  ОбщиеДанные          - Структура - структура с общими данными по квитанции.
//  ДокументРезультат    - ТабличныйДокумент - основной табличный документ.
//  ТабличныйДокумент    - ТабличныйДокумент - дополнительный табличный документ.
//
Процедура СформироватьТекущуюКвитанциюПоПеням(ТекущиеДанные, СтруктураОбщихТаблиц, СтруктураНастроек, ОбщиеДанные, ДокументРезультат, ТабличныйДокумент)
	
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ТабличныйДокумент.Очистить();
	
	Если ОбщиеДанные.Свойство("КвитанцияПоПени") И ОбщиеДанные.КвитанцияПоПени = Ложь Тогда
		ОбщиеДанные.КвитанцияПоПени = Истина;
	Иначе
		ОбщиеДанные.Вставить("КвитанцияПоПени", Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПенямПриказ924пр(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек);
		
		Если ОбщиеДанные.ОбщиеДанныеНеКР.Свойство("КвитанцияПоПени")
		   И ОбщиеДанные.ОбщиеДанныеНеКР.КвитанцияПоПени = Ложь Тогда
			ОбщиеДанные.ОбщиеДанныеНеКР.КвитанцияПоПени = Истина;
		Иначе
			ОбщиеДанные.ОбщиеДанныеНеКР.Вставить("КвитанцияПоПени", Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ОбщиеДанныеПоКР.Свойство("КвитанцияПоПени")
		   И ОбщиеДанные.ОбщиеДанныеПоКР.КвитанцияПоПени = Ложь Тогда
			ОбщиеДанные.ОбщиеДанныеПоКР.КвитанцияПоПени = Истина;
		Иначе
			ОбщиеДанные.ОбщиеДанныеПоКР.Вставить("КвитанцияПоПени", Истина);
		КонецЕсли;
		
	Иначе
		// Заменяем в "ТекущихДанных" таблицы начислений, оплат, начального сальдо, поставщиков и перерасчетов
		// соответствующими таблицами по пеням из "СтруктураОбщихТаблиц" по текущему объекту отчета.
		УПЖКХ_ПечатьКвитанцийСервер.ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПеням(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек);
		// Записываем в структуру суммовые показатели по текущему объекту отчета.
		УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанные, ТекущиеДанные, СтруктураНастроек);
	КонецЕсли;
	
	ПечататьКвитанциюПоПеням = УПЖКХ_ПечатьКвитанцийСервер.ПечататьКвитанцииПоОтбору(СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек, Истина);
	
	Если ПечататьКвитанциюПоПеням Тогда
		
		// Текст для одномерного штрихкода.
		ПолучитьТекстОдномерногоШтрихКода(СтруктураНастроек, ОбщиеДанные);
		
		// Выводим в табличный документ квитанцию по текущему объекту отчета.
		СформироватьКвитанциюПоПеням(ТабличныйДокумент, ТекущиеДанные, ОбщиеДанные, СтруктураНастроек);
		
		СформироватьШтрихкоды(ТабличныйДокумент, СтруктураНастроек, ОбщиеДанные);
		
		// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
		Если СтруктураНастроек.ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте Тогда
			УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ЗаполнитьДанныеПоКвитанциям(ТабличныйДокумент,
																									СтруктураНастроек.ДанныеПоКвитанциям,
																									ПериодПросмотра,
																									ОбщиеДанные);
		КонецЕсли;
		// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
		
		// Выводим квитанцию в общий документ-результат.
		ВывестиОбласть(ДокументРезультат, ТабличныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТекущуюКвитанциюПоПеням()

// Формирует квитанцию по пеням.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводим квитанцию.
//  ТекущиеДанные     - структура с суммовыми показатели по текущему объекту.
//  ОбщиеДанные       - структура с общими данными по квитанции.
//  СтруктураНастроек - структура с настройками отчета.
//
Процедура СформироватьКвитанциюПоПеням(ДокументРезультат, ТекущиеДанные, ОбщиеДанные, СтруктураНастроек)
	
	// Подготавливаем показатели для вывода.
	ВидМакета = СтруктураНастроек.ВидМакета;
	
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		
		Если СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			ОбщиеДанные.ОбщиеДанныеПоКР.Вставить("ТаблицаИПУ", ТекущиеДанные.ТаблицаИндСчетчиков);
		КонецЕсли;
		ОбщиеДанные.ОбщиеДанныеНеКР.Вставить("ТаблицаИПУ", ТекущиеДанные.ТаблицаИндСчетчиков);
		
		ЛицевойСчет = ОбщиеДанные.ОбщиеДанныеНеКР.ЛицевойСчет;
		
		ОбщиеДанные.Вставить("Заголовок", ПолучитьТекстЗаголовкаКвитанции(СтруктураНастроек, ОбщиеДанные.ОбщиеДанныеНеКР));
	Иначе
		
		ЛицевойСчет                     = ОбщиеДанные.ЛицевойСчет;
		ТаблицаНачисления               = ТекущиеДанные.ТаблицаНачисления;
		ТаблицаПерерасчетов             = ТекущиеДанные.ТаблицаПерерасчетов;
		ТаблицаДобровольногоСтрахования = ТекущиеДанные.ТаблицаДобровольногоСтрахования;
		ТаблицаПоставщиков              = ТекущиеДанные.ТаблицаПоставщиков;
		
		ОбщиеДанные.Вставить("Заголовок", ПолучитьТекстЗаголовкаКвитанции(СтруктураНастроек, ОбщиеДанные));
		
	КонецЕсли;
	
	// Содержит область извещения для вывода на оборотной стороне.
	ОбластьИзвещениеДляОборотнойСтороны = Новый ТабличныйДокумент;
	
	// ВЫВОД ИНФОРМАЦИИ.
	// Форма "Плат. документ (приказ №924/пр)".
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		// ЗАГОЛОВОК
		Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		// РАЗДЕЛ 1 и 2.
		Область = ПолучитьОбластьРаздел1и2Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек, ТекущиеДанные.ТаблицаПоставщиковНеКР);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		// РАЗДЕЛ 3.
		Область = ПолучитьОбластьРаздел3НачисленияПриказ924прПени(Макет, ОбщиеДанные.ОбщиеДанныеНеКР, ТекущиеДанные.ТаблицаНачисленияНеКР, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		// РАЗДЕЛ 4.
		// Для квитанции по пени не выводим.
		
		ОбластьНижеРаздела3 = Новый ТабличныйДокумент;
		
		ДокументСлева = Новый ТабличныйДокумент;
		
		// РАЗДЕЛ 5.
		Область = ПолучитьОбластьРаздел5ПерерасчетыПриказ924пр(Макет, ТекущиеДанные.ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ДокументСлева, Область, Истина);
		
		// РАЗДЕЛ 6.
		// Для квитанции область рассрочки по пени не выводим.
		
		// РАЗДЕЛ 7.
		Область = ПолучитьОбластьРаздел7НачисленияПоКРПриказ924пр(Макет, ТекущиеДанные.ТаблицаНачисленияПоКР, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ДокументСлева, Область, Истина);
		
		ВывестиОбласть(ОбластьНижеРаздела3, ДокументСлева, Истина, "Присоединить");
		
		// РАЗДЕЛ 8.
		Область = ПолучитьОбластьРаздел8Приказ924пр(Макет, ОбщиеДанные.ОбщиеДанныеПоКР, СтруктураНастроек, ТекущиеДанные.ТаблицаПоставщиковПоКР);
		ВывестиОбласть(ОбластьНижеРаздела3, Область, Истина, "Присоединить");
		
		ВывестиОбласть(ДокументРезультат, ОбластьНижеРаздела3, Истина);
		
		// ПРИМЕЧАНИЕ.
		ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
		
		Если СтруктураНастроек.ДвусторонняяПечать Тогда
			// Пустая оборотная (четная) страница.
			ВыводПустойСтраницы(ДокументРезультат);
		КонецЕсли;
		
		// Форма "Плат. документ (приказ №454 в соответ. с пост. №354)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьРаздел1и2Приказ454(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьРаздел3НачисленияПриказ454Пени(Макет, ОбщиеДанные, ТаблицаНачисления, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьРаздел5ПерерасчетыПриказ454(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ДокументРезультат, Область, Истина, "Присоединить");
		
		ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
		
		Если СтруктураНастроек.ДвусторонняяПечать Тогда
			// Пустая оборотная (четная) страница.
			ВыводПустойСтраницы(ДокументРезультат);
		КонецЕсли;
		
	// Форма "Плат. документ (с полями для отметки банка №1)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1 Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		Область = ПолучитьОбластьИзвещениеРаздел1СПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		// Запоминаем область извещение для двусторонней печати.
		ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
		
		Область = ПолучитьОбластьКвитанцияРаздел2СПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		ОбластьНачисления = ПолучитьОбластьРаздел3СНачислениямиСПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования);
		ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисления, 8, 7);
		
		// Вывод областей дополнительных сведений.
		ОбластьДопСведения = Новый ТабличныйДокумент;
		
		Если НЕ ТаблицаПерерасчетов.Количество() = 0 Тогда
			Область = ПолучитьОбластьРаздел5ПерерасчетыСПолямиБанка1(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьДопСведения, Область, Истина);
		КонецЕсли;
		
		ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
		
		Область = ПолучитьОбласть(Макет, "ПустаяСтрока", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьДопСведения, Область, Истина);
		
		ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет);
		
	// Форма "Плат. документ (с полями для отметки банка №2)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2 Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		Область = ПолучитьОбластьИзвещенияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "ПодвалИзвещения", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьКвитанцияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		ОбластьНачисления = ПолучитьОбластьНачисленияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования);
		ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисления, 2, 2);
		
		ОбластьНачисленияПУ = ПолучитьОбластьНачисленияПУСполямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования);
		ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисленияПУ, 4, 3);
		
		Область = ПолучитьОбласть(Макет, "Разделитель", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
		
		// Для этой формы в квитанции по пеням нет доп.областей, однако она учавствует в механизме двусторонней печати.
		// Поэтому принудитительно выводим пустую оборотную страницу.
		Если СтруктураНастроек.ДвусторонняяПечать Тогда
			ВыводПустойСтраницы(ДокументРезультат);
		КонецЕсли;
		
	// Форма "Плат. документ (Пермский край)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		Область = ПолучитьОбластьИзвещениеПермь(Макет, ОбщиеДанные, СтруктураНастроек, Истина,,,, ТекущиеДанные.БазаРаспределенияПоУслугам);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		КолонкаНачислено = ТаблицаНачисления.ВыгрузитьКолонку("Начислено");
		ТаблицаНачисления.ЗагрузитьКолонку(КолонкаНачислено, "НачисленоИПУ");
		
		Область = ПолучитьОбластьКвитанцияПермь(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТекущиеДанные.ТаблицаПерерасчетов);
		ВывестиОбласть(ДокументРезультат, Область, Истина, "Присоединить");
		
		ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
		
		Если СтруктураНастроек.ДвусторонняяПечать Тогда
			// Пустая оборотная (четная) страница.
			ВыводПустойСтраницы(ДокументРезультат);
		КонецЕсли;
		
	// Форма "Плат. документ (Чувашская республика)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		Область = ПолучитьОбластьИзвещениеЧебоксары(Макет, ОбщиеДанные, СтруктураНастроек, ДокументРезультат);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		// Запоминаем область извещение для двусторонней печати.
		ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
		
		Область = ПолучитьОбластьКвитанцияЧебоксары(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек);
		ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, Область, 4, 3);
		
		// Вывод областей дополнительных сведений.
		ОбластьДопСведения = ПолучитьОбластьПодвалКвитанцииЧебоксарыПени(Макет, ТаблицаПерерасчетов, ОбщиеДанные, СтруктураНастроек);
		
		ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
		
		ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет);
		
	// Форма "Плат. документ (Московская область)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		// Заполняем структуру символов итоговой суммы и наименования лицевого счета.
		СтруктураСимволовСуммыИЛицевогоСчета = Новый Структура;
		УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыСуммыВсего(Область, ОбщиеДанные.ВсегоКОплате, СтруктураСимволовСуммыИЛицевогоСчета);
		УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыЛицевогоСчета(ОбщиеДанные.НаименованиеЛицевогоСчета, СтруктураСимволовСуммыИЛицевогоСчета);
		
		Область = ПолучитьОбласть(Макет, "Заголовок", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьИзвещениеМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		// Запоминаем область извещение для двусторонней печати.
		ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
		
		Область = ПолучитьОбластьКвитанцияМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета, ТекущиеДанные.КоличествоЛьготников);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПорядковыеНомераПоставщиков(ТаблицаПоставщиков);
		
		// Формируем таблицу соответствий видов услуг и порядковых номеров поставщиков.
		ОбластьНачисления = ПолучитьОбластьНачисленияМосква(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования);
		ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисления, 10, 3);
		
		// Вывод областей дополнительных сведений.
		ОбластьДопСведения = ПолучитьОбластьПерерасчетыМосква(Макет, СтруктураНастроек, ТаблицаПерерасчетов, ТаблицаПоставщиков, ОбщиеДанные);
		
		Область = ПолучитьОбластьПоставщикиМосква(Макет, СтруктураНастроек, ТаблицаПоставщиков, ОбщиеДанные);
		ВывестиОбласть(ОбластьДопСведения, Область, Истина);
		
		ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
		
		ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет);
		
	// Форма "Плат. документ (Московская область пост. №679/30 для МО)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679 Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		СтруктураСимволовСуммыИЛицевогоСчета = Новый Структура;
		УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыЛицевогоСчета(ОбщиеДанные.НаименованиеЛицевогоСчета, СтруктураСимволовСуммыИЛицевогоСчета);
		
		Область = ПолучитьОбластьЗаголовкаПДИРаздела1Москва679(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		// Запоминаем область извещение для двусторонней печати.
		ВывестиОбласть(ОбластьИзвещениеДляОборотнойСтороны, ДокументРезультат);
		
		Область = ПолучитьОбластьРаздела2Москва679(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьРаздела2КвитанцияМосква679(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьРаздела3Москва679(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления.Скопировать(), ТаблицаДобровольногоСтрахования);
		ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, Область, 10, 3);
		
		ОбластьДопСведения = Новый ТабличныйДокумент;
		ВывестиПримечание(ОбластьДопСведения, Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет);
		
		СформироватьШтрихкоды(ДокументРезультат, СтруктураНастроек, ОбщиеДанные);
		
	// Форма "Плат. документ (приказ №43/пр)".
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр Тогда
		
		Макет = ПолучитьМакетПлатежногоДокумента(УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета), ОбщиеДанные);
		
		Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьИдентификаторыПДСтандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьРаздел1Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		Область = ПолучитьОбластьРаздел3Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаПоставщиков);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
		
		ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьКвитанциюПоПеням()

////////////////////////////////////////////////////////////////////////////////
// (ПЕНИ) ФОРМА "ПЛАТ. ДОКУМЕНТ (ПРИКАЗ №924/пр)".

// Процедура подготавливает таблицы в текущих данных.
//
// Параметры:
//  ТекущиеДанные        - структура с суммовыми показатели по текущему объекту.
//  СтруктураОбщихТаблиц - структура общих таблиц с данными.
//  ОбщиеДанные          - структура с общими данными по квитанции.
//  СтруктураНастроек    - структура с настройками отчета.
//
Процедура ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПенямПриказ924пр(ТекущиеДанные, СтруктураОбщихТаблиц, ОбщиеДанные, СтруктураНастроек)
	
	ОбщиеДанные.ОбщиеДанныеНеКР.Вставить("КвитанцияПоПени", ОбщиеДанные.КвитанцияПоПени);
	ОбщиеДанные.ОбщиеДанныеПоКР.Вставить("КвитанцияПоПени", ОбщиеДанные.КвитанцияПоПени);
	
	СтруктураОбщихТаблицОсновная  = СтруктураОбщихТаблиц.СтруктураОбщихТаблицОсновная;
	СтруктураОбщихТаблицКапРемонт = СтруктураОбщихТаблиц.СтруктураОбщихТаблицКапРемонт;
	
	// ПО ОСНОВНЫМ УСЛУГАМ.
	ТекущиеОсновныеДанные = Новый Структура;
	
	ТекущиеОсновныеДанные.Вставить("ТаблицаОплат",                    ТекущиеДанные.ТаблицаОплатНеКР);
	ТекущиеОсновныеДанные.Вставить("СтруктураНачСальдо",              ТекущиеДанные.СтруктураНачСальдоНеКР);
	ТекущиеОсновныеДанные.Вставить("ТаблицаНачисления",               ТекущиеДанные.ТаблицаНачисленияНеКР);
	ТекущиеОсновныеДанные.Вставить("ТаблицаПоставщиков",              ТекущиеДанные.ТаблицаПоставщиковНеКР);
	ТекущиеОсновныеДанные.Вставить("ТаблицаСНачислениями",            ТекущиеДанные.ТаблицаСНачислениямиНеКР);
	ТекущиеОсновныеДанные.Вставить("ТаблицаПерерасчетов",             ТекущиеДанные.ТаблицаПерерасчетов);
	ТекущиеОсновныеДанные.Вставить("ТаблицаЛьготСправочно",           ТекущиеДанные.ТаблицаЛьготСправочно);
	ТекущиеОсновныеДанные.Вставить("ТаблицаНорм",                     ТекущиеДанные.ТаблицаНорм);
	ТекущиеОсновныеДанные.Вставить("ТаблицаДатыПоследнихОплат",       ТекущиеДанные.ТаблицаДатыПоследнихОплат);
	ТекущиеОсновныеДанные.Вставить("СуммаПени",                       ТекущиеДанные.СуммаПениНеКР);
	ТекущиеОсновныеДанные.Вставить("СуммаОплатыПени",                 ТекущиеДанные.СуммаОплатыПени);
	ТекущиеОсновныеДанные.Вставить("ТаблицаДобровольногоСтрахования", ТекущиеДанные.ТаблицаДобровольногоСтрахования);
	
	УПЖКХ_ПечатьКвитанцийСервер.ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПеням(ТекущиеОсновныеДанные, СтруктураОбщихТаблицОсновная, ОбщиеДанные.ОбщиеДанныеНеКР, СтруктураНастроек);
	УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанные.ОбщиеДанныеНеКР, ТекущиеОсновныеДанные, СтруктураНастроек);
	
	ТекущиеДанные.ТаблицаОплатНеКР         = ТекущиеОсновныеДанные.ТаблицаОплат;
	ТекущиеДанные.СтруктураНачСальдоНеКР   = ТекущиеОсновныеДанные.СтруктураНачСальдо;
	ТекущиеДанные.ТаблицаНачисленияНеКР    = ТекущиеОсновныеДанные.ТаблицаНачисления;
	ТекущиеДанные.ТаблицаПоставщиковНеКР   = ТекущиеОсновныеДанные.ТаблицаПоставщиков;
	ТекущиеДанные.ТаблицаСНачислениямиНеКР = ТекущиеОсновныеДанные.ТаблицаСНачислениями;
	ТекущиеДанные.СуммаПениНеКР            = ТекущиеОсновныеДанные.СуммаПени;
	ТекущиеДанные.ТаблицаПерерасчетов      = ТекущиеОсновныеДанные.ТаблицаПерерасчетов;
	ТекущиеДанные.ТаблицаЛьготСправочно    = ТекущиеОсновныеДанные.ТаблицаЛьготСправочно;
	ТекущиеДанные.ТаблицаНорм              = ТекущиеОсновныеДанные.ТаблицаНорм;
	
	// ПО УСЛУГАМ КАП.РЕМОНТА.
	Если СтруктураНастроек.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		
		ТекущиеОсновныеДанные.Вставить("ТаблицаОплат",              ТекущиеДанные.ТаблицаОплатПоКР);
		ТекущиеОсновныеДанные.Вставить("СтруктураНачСальдо",        ТекущиеДанные.СтруктураНачСальдоПоКР);
		ТекущиеОсновныеДанные.Вставить("ТаблицаНачисления",         ТекущиеДанные.ТаблицаНачисленияПоКР);
		ТекущиеОсновныеДанные.Вставить("ТаблицаПоставщиков",        ТекущиеДанные.ТаблицаПоставщиковПоКР);
		ТекущиеОсновныеДанные.Вставить("ТаблицаСНачислениями",      ТекущиеДанные.ТаблицаСНачислениямиПоКР);
		ТекущиеОсновныеДанные.Вставить("ТаблицаПерерасчетов",       ТекущиеДанные.ТаблицаПерерасчетов);
		ТекущиеОсновныеДанные.Вставить("ТаблицаЛьготСправочно",     ТекущиеДанные.ТаблицаЛьготСправочно);
		ТекущиеОсновныеДанные.Вставить("ТаблицаНорм",               ТекущиеДанные.ТаблицаНорм);
		ТекущиеОсновныеДанные.Вставить("ТаблицаДатыПоследнихОплат", ТекущиеДанные.ТаблицаДатыПоследнихОплат);
		ТекущиеОсновныеДанные.Вставить("СуммаПени",                 ТекущиеДанные.СуммаПениПоКР);
		
		УПЖКХ_ПечатьКвитанцийСервер.ЗаменитьТаблицыВТекущихДанныхНаТаблицыПоПеням(ТекущиеОсновныеДанные, СтруктураОбщихТаблицКапРемонт, ОбщиеДанные.ОбщиеДанныеПоКР, СтруктураНастроек);
		УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанные.ОбщиеДанныеПоКР, ТекущиеОсновныеДанные, СтруктураНастроек);
		
		ТекущиеДанные.ТаблицаОплатПоКР         = ТекущиеОсновныеДанные.ТаблицаОплат;
		ТекущиеДанные.СтруктураНачСальдоПоКР   = ТекущиеОсновныеДанные.СтруктураНачСальдо;
		ТекущиеДанные.ТаблицаНачисленияПоКР    = ТекущиеОсновныеДанные.ТаблицаНачисления;
		ТекущиеДанные.ТаблицаПоставщиковПоКР   = ТекущиеОсновныеДанные.ТаблицаПоставщиков;
		ТекущиеДанные.ТаблицаСНачислениямиПоКР = ТекущиеОсновныеДанные.ТаблицаСНачислениями;
		ТекущиеДанные.СуммаПениПоКР            = ТекущиеОсновныеДанные.СуммаПени;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует табличный документ и выводит в него область, соответствующую начислениям.
//
// Параметры:
//  Макет             - макет платежного документа.
//  ОбщиеДанные       - структура с общими данными по квитанции.
//  ТаблицаНачисления - таблица начисления по текущему лицевому счету.
//  СтруктураНастроек - структура с настройками отчета.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью начисления.
//
Функция ПолучитьОбластьРаздел3НачисленияПриказ924прПени(Макет, ОбщиеДанные, ТаблицаНачисления, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияШапка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		ТаблицаКоммунальныхУслуг  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная",      Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		ТаблицаПрочихУслуг        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь), СтруктураНастроек);
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаКоммунальные", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаКоммунальныхУслуг, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСодержаниеИРемонт", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаСодержанияИРемонта, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаПрочихУслуг, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаНачисления, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
	КонецЕсли;
	
	// Заполняем параметры получеными значениями итоговой строки.
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
	
	СтруктураПараметровПодвалНачисления = Новый Структура("КОплате, Начислено, Перерасчет", 0, 0, 0);
	Если ТаблицаНачисления.Количество() > 0 Тогда
		СтруктураПараметровПодвалНачисления.КОплате      = ТаблицаНачисления.Получить(0).КОплате;
		СтруктураПараметровПодвалНачисления.Начислено    = ТаблицаНачисления.Получить(0).Начислено;
		СтруктураПараметровПодвалНачисления.Перерасчет   = ТаблицаНачисления.Получить(0).Перерасчет;
	КонецЕсли;
	
	Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел3НачисленияПриказ924прПени()

////////////////////////////////////////////////////////////////////////////////
// (ПЕНИ) ФОРМА "ПЛАТ. ДОКУМЕНТ (ПРИКАЗ №454 В СООТВЕТ. С ПОСТ. №354)".

// Формирует табличный документ и выводит в него область, соответствующую начислениям.
//
// Параметры:
//  Макет             - макет платежного документа.
//  ОбщиеДанные       - структура с общими данными по квитанции.
//  ТаблицаНачисления - таблица начисления по текущему лицевому счету.
//  СтруктураНастроек - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью начисления.
//
Функция ПолучитьОбластьРаздел3НачисленияПриказ454Пени(Макет, ОбщиеДанные, ТаблицаНачисления, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбласть(Макет, "ПениНаименованиеРаздела3НачисленияКапРемонтШапка", СтруктураНастроек, ОбщиеДанные);
	Иначе
		Область = ПолучитьОбласть(Макет, "ПениНаименованиеРаздела3НачисленияШапка", СтруктураНастроек, ОбщиеДанные);
	КонецЕсли;
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияШапка", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		ТаблицаКоммунальныхУслуг  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная",      Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		ТаблицаПрочихУслуг        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь), СтруктураНастроек);
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаКоммунальные", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаКоммунальныхУслуг, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСодержаниеИРемонт", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаСодержанияИРемонта, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаПрочихУслуг, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаНачисления, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек);
	КонецЕсли;
	
	// Заполняем параметры получеными значениями итоговой строки.
	
	СтруктураПараметровПодвалНачисления = Новый Структура("КОплате, Начислено, Перерасчет");
	
	ИтоговаяСтрокаНачисления = Неопределено;
	Если ТаблицаНачисления.Количество() > 0 Тогда
		ИтоговаяСтрокаНачисления = ТаблицаНачисления[0];
	КонецЕсли;
	
	ИтоговаяСуммаПерерасчет = 0;
	ИтоговаяСуммаКОплате    = 0;
	ИтоговаяСуммаНачислено  = 0;
	Если ИтоговаяСтрокаНачисления <> Неопределено Тогда
		ИтоговаяСуммаПерерасчет = ИтоговаяСтрокаНачисления.Перерасчет;
		ИтоговаяСуммаКОплате    = ИтоговаяСтрокаНачисления.КОплате;
		ИтоговаяСуммаНачислено  = ИтоговаяСтрокаНачисления.Начислено;
	КонецЕсли;
	
	СтруктураПараметровПодвалНачисления.КОплате    = ИтоговаяСуммаКОплате;
	СтруктураПараметровПодвалНачисления.Начислено  = ИтоговаяСуммаНачислено;
	СтруктураПараметровПодвалНачисления.Перерасчет = ИтоговаяСуммаПерерасчет;
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияСправка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел3НачисленияПриказ454Пени()

// Выводить таблицу с начислениями в табличный документ.
//
// Параметры:
//  Макет             - макет табличного документа.
//  ТаблицаНачисления - таблица начисления по текущему лицевому счету.
//  ОбщиеДанные       - структура с общими данными по квитанции.
//  ТабличныйДокумент - табличный документ с областью начисления.
//  СтруктураНастроек - структура с настройками формирования квитанций.
//
Процедура ВывестиТаблицуНачисленияПриказ454Пени(Макет, ТаблицаНачисления, ОбщиеДанные, ТабличныйДокумент, СтруктураНастроек)
	
	Для Каждого Строка ИЗ ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) Тогда
			
			Область = ПолучитьОбласть(Макет, "Раздел3НачисленияСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			
			СтруктураПараметровСтрокиНачисления = Новый Структура();
			
			// Для строк детализации по видам тарифа и для итоговой строки детализации
			// по составляющим услугам единицы измерения не выводим.
			Если НЕ ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ЕдИзм", "Х");
			КонецЕсли;
			
			// Для строк детализации по составляющим услугам итоговую сумму начисления не выводим.
			Если Строка.СтрокаДетализацииСост Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате", "Х");
			КонецЕсли;
			
			// Для строк детализации по видам тарифа итоговые колонки не заполняем.
			Если Строка.СтрокаДетализацииТариф Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("Перерасчет", "Х");
			КонецЕсли;
			
			СтруктураПараметровСтрокиНачисления.Вставить("Льгота",     "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("КОплатеИПУ", "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("КОплатеОПУ", "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("ТарифДляВывода", "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("КоличествоОПУ", "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("КоличествоИПУ", "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("НачисленоИПУ",  "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("НачисленоОПУ",  "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("КОплатеИПУ",    "Х");
			СтруктураПараметровСтрокиНачисления.Вставить("КОплатеОПУ",    "Х");
			
			Область.Параметры.Заполнить(СтруктураПараметровСтрокиНачисления);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачисленияПриказ454Пени()

////////////////////////////////////////////////////////////////////////////////
// (ПЕНИ) ФОРМА "ПЛАТ. ДОКУМЕНТ (ЧУВАШСКАЯ РЕСПУБЛИКА)".

// Получает область доп.сведений с заменой параметров, выводимых в строке итогов "Пени", на параметры строки "ЖКУ".
//
// Параметры:
//  Макет               - ТабличныйДокумент - используемый макет в текущем отчете.
//  ТаблицаПерерасчетов - ТаблицаЗначений   - таблица перерасчетов по текущей квитанции.
//  ОбщиеДанные         - Структура         - общие данные по текущей квитанции.
//  СтруктураНастроек   - Структура         - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - область доп.сведений для текущей квитанции.
//
Функция ПолучитьОбластьПодвалКвитанцииЧебоксарыПени(Макет, ТаблицаПерерасчетов, ОбщиеДанные, СтруктураНастроек)
	
	// Производим копирование параметра "НачисленоБезПени" строки ЖКУ в параметр строки Пени "Пени".
	// Первый получаются из таблицы начислений, которая обрабатывается в режиме "учитываем пени как начисления" и, соответственно, расчет
	// итоговых значений здесь производится по "начислениям ЖКУ", хотя по факту это Пени. Такое положение вещей подходит для
	// всех квитанций, кроме данной.
	Если ОбщиеДанные.Свойство("Пени") Тогда
		ОбщиеДанные.Пени = ОбщиеДанные.НачисленоБезПени;
	Иначе
		ОбщиеДанные.Вставить("Пени", ОбщиеДанные.НачисленоБезПени) 
	КонецЕсли;
	
	// Зануляем параметры строки ЖКУ.
	ОбщиеДанные.НачисленоБезПени = 0;
	
	// Вывод областей дополнительных сведений.
	ОбластьДопСведения = ПолучитьОбластьПодвалКвитанцииЧебоксары(Макет, ТаблицаПерерасчетов, ОбщиеДанные, СтруктураНастроек, Истина);
	
	// Зануляем записи о пенях в общих данных.
	ОбщиеДанные.Пени        = 0;
	
	Возврат ОбластьДопСведения;
	
КонецФункции // ПолучитьОбластьПодвалКвитанцииЧебоксарыПени()

#КонецОбласти // ПЕНИ

#Область ФормаПлатДокументПриказ43пр

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (ПРИКАЗ №43/пр)".

// Функция получает область идентификаторов платежного документа.
Функция ПолучитьОбластьИдентификаторыПДСтандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Вывод Идентификатора платежного документа ГИС ЖКХ.
	
	СтруктураЗаполнения = Новый Структура("ИдентификаторПД");
	Если СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		СтруктураЗаполнения.ИдентификаторПД = ОбщиеДанные.ИдентификаторПДЕдиный;
	ИначеЕсли ОбщиеДанные.КвитанцияНаКР Тогда
		СтруктураЗаполнения.ИдентификаторПД = ОбщиеДанные.ИдентификаторПДКапРемонт;
	Иначе
		СтруктураЗаполнения.ИдентификаторПД = ОбщиеДанные.ИдентификаторПДОсн;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураЗаполнения.ИдентификаторПД) Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьИдентификаторПД", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураЗаполнения);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	КонецЕсли;
	
	// Вывод ЕЛС - единый лицевой счет ГИС ЖКХ.
	
	СтруктураЗаполнения = Новый Структура("ЕЛСвГИСЖКХ");
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		СтруктураЗаполнения.ЕЛСвГИСЖКХ = ОбщиеДанные.ЕЛСвГИСЖКХКапРемонт;
	Иначе
		СтруктураЗаполнения.ЕЛСвГИСЖКХ = ОбщиеДанные.ЕЛСвГИСЖКХОсн;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтруктураЗаполнения.ЕЛСвГИСЖКХ) Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьЕЛСВГИСЖКХ", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураЗаполнения);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьИдентификаторыПДСтандартный43Пр()

// Функция получает область Раздела 1 и 2.
Функция ПолучитьОбластьРаздел1и2Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаИПУ)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьРаздел1 = ПолучитьОбластьРаздел1Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек);
	ВывестиОбласть(ТабличныйДокумент, ОбластьРаздел1, Истина, "Присоединить");
	
	Если Не ОбщиеДанные.КвитанцияНаКР Тогда
		
		ОбластьРаздел2 = ПолучитьОбластьРаздел2Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаИПУ);
		ВывестиОбласть(ТабличныйДокумент, ОбластьРаздел2, Истина, "Присоединить");
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел1и2Стандартный43Пр()

// Функция получает область Раздела 1.
Функция ПолучитьОбластьРаздел1Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ОбластьРаздел1", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные); // для механизма выбора параметров вручную в пользовательских макетах печати.
	
	// Переопределим значения некоторых параметров и заполним их в соответствии с настройками квитанции.
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ДопИнформация", ОбщиеДанные.ДопИнформация);
	
	ПараметрыЗаполнения.Вставить("Адрес1", "");
	ПараметрыЗаполнения.Вставить("Адрес2", "");
	
	РазделитьТекстНаДвеСтроки(ОбщиеДанные.Адрес, 50, ПараметрыЗаполнения.Адрес1, ПараметрыЗаполнения.Адрес2);
	
	Область.Параметры.Заполнить(ПараметрыЗаполнения);
	
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) И НЕ ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбластьРаздел1ИсполнительРасчетовПриказ454(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел1Стандартный43Пр()

// Функция получает область Раздела 2.
Функция ПолучитьОбластьРаздел2Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаИПУ)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Отрывной корешок печатаем, если установлена соответствующая настройка.
	// В квитанция кап. ремонта корешок не печатаем.
	
	НайденныеСтроки  = ТаблицаИПУ.НайтиСтроки(Новый Структура("Отключен", Ложь));
	ТаблицаСчетчиков = ТаблицаИПУ.Скопировать(НайденныеСтроки);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьПоказаний = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ОбластьРаздел2Шапка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьПоказаний, Область, Истина);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		
		СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧН=-; ЧГ=0";
		
		врСтруктураПараметров         = Новый Структура("ПредПредыдущееПоказание, ПредыдущееПоказание", 0, 0);
		СписокФорматируемыхПараметров = Новый Структура("ПредПредыдущееПоказание, ПредыдущееПоказание");
		
		Для Каждого ТекущаяКолонка Из ТаблицаСчетчиков.Колонки Цикл
			Если НЕ врСтруктураПараметров.Свойство(ТекущаяКолонка.Имя) Тогда
				врСтруктураПараметров.Вставить(ТекущаяКолонка.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Область = ПолучитьОбласть(Макет, "ОбластьРаздел2СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
		КоординатыПолейДляОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область, 2);
		
		Для Каждого Строка Из ТаблицаСчетчиков Цикл
			
			ЗаполнитьЗначенияСвойств(врСтруктураПараметров, Строка);
			
			// Выводим дневное показание, само значение показания выводим согласно настройке "НеВыводитьПоказанияПоПУ".
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел2СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
			
			врСтруктураПараметров.ПредыдущееПоказание     = Строка.ПредыдущееПоказаниеДн;
			врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредПредыдущееПоказаниеДн;
			Область.Параметры.Заполнить(врСтруктураПараметров);
			
			Постфикс = ?(Строка.Тарифность <> "1", " (дн.)", "");
			ЗаполнитьПараметрИндивидуальногоСчетчика(Область, Постфикс, Строка);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			Область = КорректироватьВыводСтрокОбъединением(Макет, "ОбластьРаздел2СтрокаТаблицы", Область, КоординатыПолейДляОбъединения, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьПоказаний, Область, Истина);
			
			// Выводим ночное показание, само значение показания выводим согласно настройке "НеВыводитьПоказанияПоПУ".
			Если Строка.Тарифность <> "1" Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьРаздел2СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
				
				врСтруктураПараметров.ПредыдущееПоказание     = Строка.ПредыдущееПоказаниеНч;
				врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредПредыдущееПоказаниеНч;
				Область.Параметры.Заполнить(врСтруктураПараметров);
				
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (нч.)", Строка);
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				Область = КорректироватьВыводСтрокОбъединением(Макет, "ОбластьРаздел2СтрокаТаблицы", Область, КоординатыПолейДляОбъединения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ОбластьПоказаний, Область, Истина);
				
				// Выводим пиковое показание, само значение показания выводим согласно настройке "НеВыводитьПоказанияПоПУ".
				Если Строка.Тарифность = "3" Тогда
					Область = ПолучитьОбласть(Макет, "ОбластьРаздел2СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
					
					врСтруктураПараметров.ПредыдущееПоказание     = Строка.ПредыдущееПоказаниеПк;
					врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредПредыдущееПоказаниеПк;
					Область.Параметры.Заполнить(врСтруктураПараметров);
					
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (пик.)", Строка);
					ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
					Область = КорректироватьВыводСтрокОбъединением(Макет, "ОбластьРаздел2СтрокаТаблицы", Область, КоординатыПолейДляОбъединения, СтруктураНастроек, ОбщиеДанные);
					ВывестиОбласть(ОбластьПоказаний, Область, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		СчетчикПустыхСтрок = 0;
		
		Область = ПолучитьОбласть(Макет, "ОбластьРаздел2СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
		Пока НЕ СчетчикПустыхСтрок = 4 Цикл
			ЗаполнитьПараметрИндивидуальногоСчетчика(Область, "", Новый Структура);
			ВывестиОбласть(ОбластьПоказаний, Область);
			СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиОбласть(ТабличныйДокумент, ОбластьПоказаний, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция получает область Раздела 3.
Функция ПолучитьОбластьРаздел3Стандартный43Пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаПоставщиков)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ОбластьРаздел3ШапкаТаблицыНачисления", СтруктураНастроек, ОбщиеДанные); // Шапка таблицы в Разделе3.
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		врТаблицаНачисления = ТаблицаНачисления.Скопировать();
		
		ТаблицаУслугиКапитальногоРемонта = врТаблицаНачисления.СкопироватьКолонки();
		Для Каждого ТекущийЭлементСписка Из СтруктураНастроек.СписокУслугКапРемонт Цикл
			НайденныеСтроки = врТаблицаНачисления.НайтиСтроки(Новый Структура("Услуга", ТекущийЭлементСписка.Значение));
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаУслугиКапитальногоРемонта.Добавить(), ТекущаяСтрока);
				врТаблицаНачисления.Удалить(ТекущаяСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаКоммунальныхУслуг         = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(врТаблицаНачисления, Новый Структура("Коммунальная",      Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(врТаблицаНачисления, Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		ТаблицаУслугСОИ                  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(врТаблицаНачисления, СтруктураНастроек);
		ТаблицаПрочихУслуг               = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(врТаблицаНачисления, Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь), СтруктураНастроек);
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 ИЛИ Не ТаблицаУслугСОИ.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3РазделительСодержаниеПомещения", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			ВывестиТаблицуНачисленияСтандартный43Пр(Макет, ТаблицаСодержанияИРемонта, ТаблицаПоставщиков, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаУслугСОИ.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3РазделительСодержаниеПомещенияСОИ", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияСтандартный43Пр(Макет, ТаблицаУслугСОИ, ТаблицаПоставщиков, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент, "    ", Истина);
		КонецЕсли;
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3РазделительКоммунальныеУслуги", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияСтандартный43Пр(Макет, ТаблицаКоммунальныхУслуг, ТаблицаПоставщиков, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3РазделительПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияСтандартный43Пр(Макет, ТаблицаПрочихУслуг, ТаблицаПоставщиков, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаУслугиКапитальногоРемонта.Количество() = 0 Тогда
			ВывестиТаблицуНачисленияСтандартный43Пр(Макет, ТаблицаУслугиКапитальногоРемонта, ТаблицаПоставщиков, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент, "");
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияСтандартный43Пр(Макет, ТаблицаНачисления, ТаблицаПоставщиков, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент, "");
	КонецЕсли;
	
	СтруктураИтоговойСтроки = Новый Структура;
	
	Если ТаблицаНачисления.Количество() = 0 Тогда
		СтруктураИтоговойСтроки.Вставить("КОплате",         0);
		СтруктураИтоговойСтроки.Вставить("НачальноеСальдо", 0);
		СтруктураИтоговойСтроки.Вставить("Пени",            0);
		СтруктураИтоговойСтроки.Вставить("ИтогоКОплате",    0);
		СтруктураИтоговойСтроки.Вставить("Начислено",       0);
		СтруктураИтоговойСтроки.Вставить("СуммаПовышения",  0);
		СтруктураИтоговойСтроки.Вставить("Перерасчет",      0);
		СтруктураИтоговойСтроки.Вставить("Льгота",          0);
	Иначе
		СтрокаИтогов = ТаблицаНачисления[0];
		СтруктураИтоговойСтроки.Вставить("КОплате",         СтрокаИтогов.КОплате);
		СтруктураИтоговойСтроки.Вставить("Пени",            СтрокаИтогов.Пени);
		СтруктураИтоговойСтроки.Вставить("ИтогоКОплате",    СтрокаИтогов.ИтогоКОплате);
		СтруктураИтоговойСтроки.Вставить("Начислено",       СтрокаИтогов.Начислено);
		СтруктураИтоговойСтроки.Вставить("СуммаПовышения",  СтрокаИтогов.СуммаПовышения);
		СтруктураИтоговойСтроки.Вставить("Перерасчет",      СтрокаИтогов.Перерасчет);
		СтруктураИтоговойСтроки.Вставить("Льгота",          СтрокаИтогов.Льгота);
		
		Если СтруктураНастроек.ВыводитьНачальноеСальдоСРазбивкой Тогда
			СтруктураИтоговойСтроки.Вставить("НачальноеСальдо", ТаблицаНачисления[0].НачальноеСальдоСРазбивкой);
		Иначе
			СтруктураИтоговойСтроки.Вставить("НачальноеСальдо", ТаблицаНачисления[0].НачальноеСальдо);
		КонецЕсли;
		
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "ОбластьРаздел3ИтоговаяСтрокаТаблицыНачисления", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураИтоговойСтроки);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	// Оплаты.
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Если НЕ СтруктураНастроек.ВключатьОплатыВНачальноеСальдо
		   И ОбщиеДанные.ВнесеноОплат > 0
		   И НЕ СтруктураНастроек.ВключениеНачальнойЗадолженности = "НеВыводить" Тогда
			
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3СтрокаОплаты", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Новый Структура("ВнесеноОплат, ТекстОплаты, ДатаОплаты", ОбщиеДанные.ВнесеноОплат, ОбщиеДанные.ТекстОплаты, ОбщиеДанные.ДатаОплаты));
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьРаздел3ПредоплатаРассрочки", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(Новый Структура("ВнесеноОплатНаПогашениеРассрочки", ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки));
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
		ИначеЕсли НЕ ПустаяСтрока(ОбщиеДанные.ДатаОплаты) Тогда
			// Дата последней оплаты.
			
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3СтрокаДатаПоследнейОплаты", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Новый Структура("ДатаОплаты", ОбщиеДанные.ДатаОплаты));
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Комиссия.
	
	Если НЕ СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать" Тогда
		СуммаКомиссии = ОбщиеДанные.СуммаКомиссии;
	Иначе
		СуммаКомиссии = 0;
	КонецЕсли;
	
	Если СуммаКомиссии > 0 Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьРаздел3СтрокаСуммаКомиссии", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Новый Структура("СуммаКомиссии", СуммаКомиссии));
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	// Итого к оплате.
	
	Область = ПолучитьОбласть(Макет, "ОбластьРаздел3СтрокаИтогоКОплате", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(Новый Структура("ВсегоКОплате", ОбщиеДанные.ВсегоКОплате));
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбластьПоставщикиСтандартный43Пр(Макет, СтруктураНастроек, ТаблицаПоставщиков, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел3Стандартный43Пр()

// Формирует табличный документ и выводит в него область сведений о поставщиках.
//
// Параметры:
//  Макет                             - Табличный документ - макет платежного документа.
//  СтруктураНастроек                 - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиковССоответствиями - Таблица значений   - сведения о соответствии услуг.
//  ОбщиеДанные                       - Структура          - общие данные по текущей квитанции.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью со сведениями о поставщиках.
//
Функция ПолучитьОбластьПоставщикиСтандартный43Пр(Макет, СтруктураНастроек, ТаблицаПоставщиковССоответствиями, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если (Не ТаблицаПоставщиковССоответствиями.Количество() = 0 Или СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти) Тогда
		
		Если СтруктураНастроек.ВыводитьШК Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3ШапкаТаблицыПолучателейПлатежа", СтруктураНастроек, ОбщиеДанные);
		Иначе
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел3ШапкаТаблицыПолучателейПлатежаБезШК", СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СтруктураЗаполнения = Новый Структура("НаименованиеЛицевогоСчета", ОбщиеДанные.НаименованиеЛицевогоСчета);
		
		Для Каждого ТекущаяСтрока Из ТаблицаПоставщиковССоответствиями Цикл
			Если ЗначениеЗаполнено(ТекущаяСтрока.Поставщик) Тогда
				
				Если СтруктураНастроек.ВыводитьШК Тогда
					Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
						Область = Макет.ПолучитьОбласть("ОбластьРаздел3СтрокаТаблицыПолучателейПлатежаQR");
					Иначе
						Область = Макет.ПолучитьОбласть("ОбластьРаздел3СтрокаТаблицыПолучателейПлатежаШК");
					КонецЕсли;
				Иначе
					Область = Макет.ПолучитьОбласть("ОбластьРаздел3СтрокаТаблицыПолучателейПлатежаБезШК");
				КонецЕсли;
				
				Область.Параметры.Заполнить(ТекущаяСтрока);
				
				СтруктураЗаполнения.Вставить("ИдентификаторЛС",            ОбщиеДанные.ИдентификаторЛС);
				СтруктураЗаполнения.Вставить("НомерПолучателяПлатежа",     ТекущаяСтрока.ПорядковыйНомерПоставщика);
				СтруктураЗаполнения.Вставить("ПолучательПлатежа",          ТекущаяСтрока.НаименованиеПоставщика);
				СтруктураЗаполнения.Вставить("ВсегоКОплате",               ТекущаяСтрока.ВсегоКОплате);
				
				Если ТекущаяСтрока.ЭтоСведенияПоКапРемонту ИЛИ ОбщиеДанные.КвитанцияНаКР Тогда
					СтруктураЗаполнения.Вставить("ИдентификаторЖКУ", ОбщиеДанные.ИдентификаторЖКУКапРемонт);
				Иначе
					СтруктураЗаполнения.Вставить("ИдентификаторЖКУ", ОбщиеДанные.ИдентификаторЖКУОсн);
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтруктураЗаполнения.ИдентификаторЖКУ) Тогда
					СтруктураЗаполнения.ИдентификаторЖКУ = "/ " + СтруктураЗаполнения.ИдентификаторЖКУ;
				КонецЕсли;
				
				Область.Параметры.Заполнить(СтруктураЗаполнения);
				
				Если СтруктураНастроек.ВыводитьШК Тогда
					СформироватьШтрихкодыСтандартный43Пр(СтруктураНастроек, ОбщиеДанные, ТекущаяСтрока, Область);
				КонецЕсли;
				
				ВывестиОбласть(ТабличныйДокумент, Область);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьПоставщикиСтандартный43Пр()

// Заполняет картинки штрихкодов.
//
Функция СформироватьШтрихкодыСтандартный43Пр(СтруктураНастроек, ОбщиеДанные, СтрокаПоставщика, Область)
	
	СформироватьШтрихкоды(Область, СтруктураНастроек, ОбщиеДанные, СтрокаПоставщика);
	
КонецФункции

// Выводить таблицу с начислениями в табличный документ.
//
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТабличныйДокумент  - Табличный документ - табличный документ для вывода строк начислений.
//
Процедура ВывестиТаблицуНачисленияСтандартный43Пр(Макет, ТаблицаНачисления, ТаблицаПоставщиков, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент, ОтступДляВидаУслуги = "  ", ОчищатьИндРасход = Ложь)
	
	ПредставлениеНуля = "ЧН=0,";
	Для Итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
		ПредставлениеНуля = ПредставлениеНуля + "0";
	КонецЦикла;
	
	СтрокаФорматаРасхода                 = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ПредставлениеНуля + "; ЧГ=0";
	СписокФорматируемыхПараметровРасхода = Новый Структура("КоличествоИПУ, КоличествоОПУ");
	
	Для Каждого ТекущаяСтрока Из ТаблицаНачисления Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидУслуги) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьНачисленияСтрока = ПолучитьОбласть(Макет, "ОбластьРаздел3СтрокаТаблицыНачисления", СтруктураНастроек, ОбщиеДанные);
		ОбластьНачисленияСтрока.Параметры.Заполнить(ТекущаяСтрока);
		
		СтруктураЗаполнения = Новый Структура;
		
		// Выводим порядковый номер поставщика, если вид услуги найден в таблице соответствий.
		Если Не ТекущаяСтрока.СтрокаДетализацииСост И Не ТекущаяСтрока.СтрокаДетализацииТариф Тогда
			СтруктураЗаполнения.Вставить("НомерПолучателяПлатежа", ПолучитьНомерПолучателяПлатежа(Строка(ТекущаяСтрока.ВидУслуги), ТаблицаПоставщиков));
		КонецЕсли;
		
		Если НЕ ТекущаяСтрока.УслугаПоСчетчикам И НЕ ТекущаяСтрока.УслугаСоставнаяПоСчетчикам Тогда
			СтруктураЗаполнения.Вставить("КоличествоОПУ", "Х");
			
			КоличествоИПУ = ТекущаяСтрока.КоличествоИПУ;
			
			Если ТекущаяСтрока.ИмеетсяСоставнойИндивидуальныйРасход Тогда
				КоличествоИПУ = ?(ПустаяСтрока(ТекущаяСтрока.СоставноеКоличествоИнд), "Х", ТекущаяСтрока.СоставноеКоличествоИнд);
			КонецЕсли;
			
			СтруктураЗаполнения.Вставить("КоличествоИПУ", КоличествоИПУ);
			СтруктураЗаполнения.Вставить("НачисленоИПУ",  "Х");
			СтруктураЗаполнения.Вставить("НачисленоОПУ",  "Х");
			СтруктураЗаполнения.Вставить("КОплатеИПУ",    "Х");
			СтруктураЗаполнения.Вставить("КОплатеОПУ",    "Х");
		ИначеЕсли ТекущаяСтрока.УслугаСоставнаяПоСчетчикам Тогда
			СтруктураЗаполнения.Вставить("КОплатеИПУ",    "Х");
			СтруктураЗаполнения.Вставить("КОплатеОПУ",    "Х");
		КонецЕсли;
		
		Если СтрНайти(ТекущаяСтрока.ВидДляВывода, "(ОДН)") = 0
		   И НЕ ТекущаяСтрока.СтрокаДляОбщегоИмущества
		   И ТекущаяСтрока.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое Тогда
			ТекущаяСтрока.ВидДляВывода = ТекущаяСтрока.ВидДляВывода + " (ОДН)";
			
			Отбор = Новый Структура("ВидУслуги, ТипНачисления, СтрокаДляОбщегоИмущества",
									ТекущаяСтрока.ВидУслуги, Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, Ложь);
			Если ТаблицаНачисления.НайтиСтроки(Отбор).Количество() > 0 Тогда
				СтруктураЗаполнения.Вставить("ИтогоКОплате", "Х");
				СтруктураЗаполнения.Вставить("КОплате",      "Х");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяСтрока.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое ИЛИ ТекущаяСтрока.СтрокаДляОбщегоИмущества Тогда
			СтруктураЗаполнения.Вставить("ПовышающийКоэффициент", "Х");
			СтруктураЗаполнения.Вставить("СуммаПовышения",        "Х");
			СтруктураЗаполнения.Вставить("КоличествоИПУ",         "Х");
		КонецЕсли;
		
		Если Не ОтступДляВидаУслуги = "" Тогда
			ТекущаяСтрока.ВидДляВывода = ОтступДляВидаУслуги + ТекущаяСтрока.ВидДляВывода;
		КонецЕсли;
		
		СтруктураЗаполнения.Вставить("ВидДляВывода", ОтступДляВидаУслуги + ТекущаяСтрока.ВидДляВывода);
		
		// Для строк детализации по видам тарифа и для итоговой строки детализации
		// по составляющим услугам единицы измерения не выводим.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдИзм) Тогда
			СтруктураЗаполнения.Вставить("ЕдИзм", "Х");
		КонецЕсли;
		
		// Для итоговых строк детализации тариф не выводим.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТарифДляВывода) Тогда
			СтруктураЗаполнения.Вставить("ТарифДляВывода", "Х");
		КонецЕсли;
		
		// Для строк детализации по видам тарифа итоговые колонки не заполняем.
		Если ТекущаяСтрока.СтрокаДетализацииТариф Тогда
			СтруктураЗаполнения.Вставить("Перерасчет",      "Х");
			СтруктураЗаполнения.Вставить("Льгота",          "Х");
			СтруктураЗаполнения.Вставить("КОплате",         "Х");
			СтруктураЗаполнения.Вставить("КОплатеИПУ",      "Х");
			СтруктураЗаполнения.Вставить("КОплатеОПУ",      "Х");
			СтруктураЗаполнения.Вставить("НачальноеСальдо", "Х");
			СтруктураЗаполнения.Вставить("Пени",            "Х");
			СтруктураЗаполнения.Вставить("ИтогоКОплате",    "Х");
		КонецЕсли;
		
		// Для строк детализации по составляющим услугам итоговую сумму начисления не выводим.
		Если ТекущаяСтрока.СтрокаДетализацииСост Тогда
			СтруктураЗаполнения.Вставить("КОплате", "Х");
		КонецЕсли;
		
		Если ОчищатьИндРасход Тогда
			СтруктураЗаполнения.Вставить("КоличествоИПУ", "Х");
		КонецЕсли;
		
		ОбластьНачисленияСтрока.Параметры.Заполнить(СтруктураЗаполнения);
		
		ОтформатироватьПараметрыОбласти(ОбластьНачисленияСтрока, СписокФорматируемыхПараметровРасхода, СтрокаФорматаРасхода);
		
		ВывестиОбласть(ТабличныйДокумент, ОбластьНачисленияСтрока, Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачисленияСтандартный43Пр()

// Процедура выводит таблицу Справочная информация.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ТаблицаНачисления - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ТаблицаСчетчиков  - Таблица значений   - таблица с ПУ.
//
// Возвращаемое значение:
//  Табличный документ - табличный документ с Разделом 4.
//
Функция ПолучитьОбластьРаздел4Стандартный43Пр(Макет, ТаблицаНачисления, ТаблицаСчетчиков, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ТаблицаСчетчиков.Количество() = 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		ИмяОбластиСтрокиТаблицы = "ОбластьРаздел4СтрокаТаблицы";
		
		Область = ПолучитьОбласть(Макет, "ОбластьРаздел4ШапкаТаблицы", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		ЧН = "ЧН=0,";
		Для итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
			ЧН = ЧН + "0";
		КонецЦикла;
		СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ЧН + "; ЧГ=0";
		
		СписокФорматируемыхПараметров = Новый Структура("Количество, ОбщРасходИнд, ОбщРасходОбщ");
		
		Для Каждого ТекущаяСтрока Из ТаблицаСчетчиков Цикл
			
			СтруктураЗаполнения = Новый Структура;
			
			ТипНачисления = ?(ТекущаяСтрока.ЯвляетсяОПУ, Перечисления.УПЖКХ_ТипНачисления.Общедомовое, Перечисления.УПЖКХ_ТипНачисления.Индивидуальное);
			
			Если ТекущаяСтрока.Тарифность = "1" Тогда
				УслугаДляВывода = "" + ТекущаяСтрока.ВидУслуги;
			Иначе
				УслугаДляВывода = "" + ТекущаяСтрока.ВидУслуги + "(дн.)";
			КонецЕсли;
			
			Если ТекущаяСтрока.ЯвляетсяОПУ Тогда
				ТипНачисленияПредставление = "ОДПУ";
				СтруктураЗаполнения.Вставить("ТекПоказанияОбщ", Формат(ТекущаяСтрока.ПредыдущееПоказаниеДн, СтрокаФормата));
				СтруктураЗаполнения.Вставить("ТекПоказанияИнд", "Х");
			Иначе
				ТипНачисленияПредставление = "Инд.";
				СтруктураЗаполнения.Вставить("ТекПоказанияИнд", Формат(ТекущаяСтрока.ПредыдущееПоказаниеДн, СтрокаФормата));
				СтруктураЗаполнения.Вставить("ТекПоказанияОбщ", "Х");
			КонецЕсли;
			
			СтруктураЗаполнения.Вставить("УслугаДляВывода", УслугаДляВывода + " " + ТипНачисленияПредставление);
			
			СтруктураЗаполнения.Вставить("ЕдИзм", ТекущаяСтрока.ЕдИзм);
			
			Если ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое Тогда
				ОбщРасходИндДн  = "Х";
				ОбщРасходИндНч  = "Х";
				ОбщРасходИндПик = "Х";
			Иначе
				ОбщРасходИндДн  = 0;
				ОбщРасходИндНч  = 0;
				ОбщРасходИндПик = 0;
			КонецЕсли;
			
			Если ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное Тогда
				ОбщРасходОбщДн  = "Х";
				ОбщРасходОбщНч  = "Х";
				ОбщРасходОбщПик = "Х";
			Иначе
				ОбщРасходОбщДн  = 0;
				ОбщРасходОбщНч  = 0;
				ОбщРасходОбщПик = 0;
			КонецЕсли;
			
			ДанныеИзНачисленийБезСвертки = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги, Услуга, ТипНачисления", ТекущаяСтрока.ВидУслуги, ТекущаяСтрока.Услуга, ТипНачисления));
			ДанныеИзНачисленийСоСверткой = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги, ТипНачисления", ТекущаяСтрока.ВидУслуги, ТипНачисления));
			
			Если ДанныеИзНачисленийБезСвертки.Количество() > 0 Тогда
				ДанныеИзНачислений = ДанныеИзНачисленийБезСвертки;
			ИначеЕсли ДанныеИзНачисленийСоСверткой.Количество() = 1 Тогда
				ДанныеИзНачислений = ДанныеИзНачисленийСоСверткой;
			Иначе
				ДанныеИзНачислений = Неопределено;
			КонецЕсли;
			
			Если НЕ ДанныеИзНачислений = Неопределено Тогда
				// Если начисления детализированы по видам тарифов, то сведения о нормах находятся в первой строке.
				СтруктураЗаполнения.Вставить("РазмерНормы",    ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеИзНачислений[0].РазмерНормы));
				СтруктураЗаполнения.Вставить("РазмерНормыОбщ", ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеИзНачислений[0].РазмерНормыОбщ));
				
				Если ДанныеИзНачислений.Количество() = 1 Тогда
					// Если начисления не детализированы.
					ОбщРасходИндДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеИзНачислений[0].ОбщРасходИнд);
					ОбщРасходОбщДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеИзНачислений[0].ОбщРасходОбщ);
				Иначе
					ТаблицаДанныхИзНачислений = ТаблицаНачисления.Скопировать(ДанныеИзНачислений);
					
					ДанныеДн = ТаблицаДанныхИзНачислений.Найти(Перечисления.КВП_ВидыТарифов.Дневной, "ВидТарифа");
					Если Не ДанныеДн = Неопределено Тогда
						ОбщРасходИндДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеДн.ОбщРасходИнд);
						ОбщРасходОбщДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеДн.ОбщРасходОбщ);
					КонецЕсли;
					
					ДанныеНч = ТаблицаДанныхИзНачислений.Найти(Перечисления.КВП_ВидыТарифов.Ночной, "ВидТарифа");
					Если Не ДанныеНч = Неопределено Тогда
						ОбщРасходИндНч = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеНч.ОбщРасходИнд);
						ОбщРасходОбщНч = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеНч.ОбщРасходОбщ);
					КонецЕсли;
					
					ДанныеПик = ТаблицаДанныхИзНачислений.Найти(Перечисления.КВП_ВидыТарифов.Пиковый, "ВидТарифа");
					Если Не ДанныеПик = Неопределено Тогда
						ОбщРасходИндПик = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеПик.ОбщРасходИнд);
						ОбщРасходОбщПик = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеПик.ОбщРасходОбщ);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				СтруктураЗаполнения.Вставить("РазмерНормы",    ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", 0));
				СтруктураЗаполнения.Вставить("РазмерНормыОбщ", ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", 0));
			КонецЕсли;
			
			Если НЕ (ТекущаяСтрока.ПредыдущееПоказаниеДн = 0
			   И (СтруктураЗаполнения.РазмерНормы = 0 ИЛИ СтруктураЗаполнения.РазмерНормы = "Х")
			   И (СтруктураЗаполнения.РазмерНормыОбщ = 0 ИЛИ СтруктураЗаполнения.РазмерНормыОбщ = "Х"))
			 ИЛИ (НЕ ОбщРасходИндДн = "Х" И НЕ ОбщРасходИндДн = 0)
			 ИЛИ (НЕ ОбщРасходОбщДн = "Х" И НЕ ОбщРасходОбщДн = 0)Тогда
				
				СтруктураЗаполнения.Вставить("ОбщРасходИнд", ОбщРасходИндДн);
				СтруктураЗаполнения.Вставить("ОбщРасходОбщ", ОбщРасходОбщДн);
				
				Область = ПолучитьОбласть(Макет, ИмяОбластиСтрокиТаблицы, СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(СтруктураЗаполнения);
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			Если ТекущаяСтрока.Тарифность = "2" ИЛИ ТекущаяСтрока.Тарифность = "3" Тогда
				
				СтруктураЗаполнения.Вставить("УслугаДляВывода", "" + ТекущаяСтрока.ВидУслуги + "(нч.)" + " " + ТипНачисленияПредставление);
				
				Если ТекущаяСтрока.ЯвляетсяОПУ Тогда
					СтруктураЗаполнения.Вставить("ТекПоказанияОбщ", Формат(ТекущаяСтрока.ПредыдущееПоказаниеНч, СтрокаФормата));
				Иначе
					СтруктураЗаполнения.Вставить("ТекПоказанияИнд", Формат(ТекущаяСтрока.ПредыдущееПоказаниеНч, СтрокаФормата));
				КонецЕсли;
				
				СтруктураЗаполнения.Вставить("ОбщРасходИнд", ОбщРасходИндНч);
				СтруктураЗаполнения.Вставить("ОбщРасходОбщ", ОбщРасходОбщНч);
				
				Область = ПолучитьОбласть(Макет, ИмяОбластиСтрокиТаблицы, СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(СтруктураЗаполнения);
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				
				Если ТекущаяСтрока.Тарифность = "3" Тогда
					
					СтруктураЗаполнения.Вставить("УслугаДляВывода", "" + ТекущаяСтрока.ВидУслуги + "(пк.)" + " " + ТипНачисленияПредставление);
					
					Если ТекущаяСтрока.ЯвляетсяОПУ Тогда
						СтруктураЗаполнения.Вставить("ТекПоказанияОбщ", Формат(ТекущаяСтрока.ПредыдущееПоказаниеПк, СтрокаФормата));
					Иначе
						СтруктураЗаполнения.Вставить("ТекПоказанияИнд", Формат(ТекущаяСтрока.ПредыдущееПоказаниеПк, СтрокаФормата));
					КонецЕсли;
					
					СтруктураЗаполнения.Вставить("ОбщРасходИнд", ОбщРасходИндПик);
					СтруктураЗаполнения.Вставить("ОбщРасходОбщ", ОбщРасходОбщПик);
					
					Область = ПолучитьОбласть(Макет, ИмяОбластиСтрокиТаблицы, СтруктураНастроек, ОбщиеДанные);
					Область.Параметры.Заполнить(СтруктураЗаполнения);
					ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
					ВывестиОбласть(ТабличныйДокумент, Область, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел4Стандартный43Пр()

// Процедура выводит таблицу рассрочки.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ТаблицаРассрочки  - Таблица значений   - сведения о рассрочках.
//
// Возвращаемое значение:
//  Табличный документ - табличный документ с Разделом 6.
//
Функция ПолучитьОбластьРаздел5Стандартный43Пр(Макет, СтруктураНастроек, ТаблицаРассрочки, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаРассрочки.Количество() <> 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		Область = ПолучитьОбласть(Макет, "ОбластьРаздел5ШапкаТаблицы", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		КОплате = 0;
		
		Если ТаблицаРассрочки.Количество() <> 0 Тогда
			
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел5СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
			КоординатыПолейДляОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область, 1);
			Для Каждого ТекущаяСтрока Из ТаблицаРассрочки Цикл
				Область = ПолучитьОбласть(Макет, "ОбластьРаздел5СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ТекущаяСтрока);
				Область = КорректироватьВыводСтрокОбъединением(Макет, "ОбластьРаздел5СтрокаТаблицы", Область, КоординатыПолейДляОбъединения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЦикла;
			
			КОплате = ТаблицаРассрочки.Итог("КОплате");
			
		Иначе
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел5СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "ОбластьРаздел5ИтоговаяСтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Новый Структура("КОплате", КОплате));
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел5Стандартный43Пр()

// Процедура выводит таблицу перерасчетов.
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПерерасчетов - Таблица значений   - сведения о перерасчетах.
//
// Возвращаемое значение:
//  Табличный документ - табличный документ с Разделом 5.
//
Функция ПолучитьОбластьРаздел6Стандартный43Пр(Макет, СтруктураНастроек, ТаблицаПерерасчетов, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаПерерасчетов.Количество() <> 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		Область = ПолучитьОбласть(Макет, "ОбластьРаздел6ШапкаТаблицы", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Если ТаблицаПерерасчетов.Количество() <> 0 Тогда
			
			СтрокаФорматаСуммы = "ЧДЦ=2; ЧН=";
			
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел6СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
			КоординатыПолейДляОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область, 1);
			Для Каждого ТекущаяСтрока Из ТаблицаПерерасчетов Цикл
				Область = ПолучитьОбласть(Макет, "ОбластьРаздел6СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ТекущаяСтрока);
				ОтформатироватьПараметрыОбласти(Область, Новый Структура("Перерасчет"), СтрокаФорматаСуммы);
				Область = КорректироватьВыводСтрокОбъединением(Макет, "ОбластьРаздел6СтрокаТаблицы", Область, КоординатыПолейДляОбъединения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЦикла;
			
		Иначе
			Область = ПолучитьОбласть(Макет, "ОбластьРаздел6СтрокаТаблицы", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел6Стандартный43Пр()
// Получает порядковый номер получателя платежа.
Функция ПолучитьНомерПолучателяПлатежа(ВидУслуги, ТаблицаСоответствийУслуг)
	
	ПорядковыйНомер = "";
	
	Для Каждого ТекущаяСтрока Из ТаблицаСоответствийУслуг Цикл
		
		МассивВидовУслуг = ТекущаяСтрока.ВидыУслуг;
		
		Если МассивВидовУслуг.Найти(ВидУслуги) = Неопределено Тогда
			
			Продолжить;
			
		Иначе
			
			Возврат ТекущаяСтрока.ПорядковыйНомерПоставщика;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПорядковыйНомер;
	
КонецФункции

#КонецОбласти

#Область ФормаПлатДокументПриказ924пр

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (ПРИКАЗ №924/пр)".

// Подготавливаем текущие данные по объекту.
//
// Параметры:
//  СтруктураОбщихТаблиц - Структура - структура общих таблиц с данными.
//  ОбщиеДанные          - Структура - общие данные по текущей квитанции.
//  СтруктураНастроек    - Структура - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  Структура - структура данных.
//
Функция ПолучитьТекущиеИОбщиеДанныеПоОбъекту924(Знач СтруктураОбщихТаблиц, Знач ОбщиеДанные, Знач СтруктураНастроек)
	
	// Структура для возврата.
	СтруктураДанных = Новый Структура("ПечататьКвитанцию", Истина);
	ТекущиеДанные   = Новый Структура;
	
	СтруктураОбщихТаблицОсновная  = СтруктураОбщихТаблиц.СтруктураОбщихТаблицОсновная;
	СтруктураОбщихТаблицКапРемонт = СтруктураОбщихТаблиц.СтруктураОбщихТаблицКапРемонт;
	
	Если ОбщиеДанные.Свойство("КвитанцияНаКР") Тогда
		ОбщиеДанные.КвитанцияНаКР = Ложь;
	Иначе
		ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	КонецЕсли;
	
	// ПО ОСНОВНЫМ УСЛУГАМ.
	ОбщиеДанныеНеКР = Новый Структура;
	Для Каждого ТекЭлемент Из ОбщиеДанные Цикл
		ОбщиеДанныеНеКР.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если СтруктураНастроек.ВыводитьQRштрихкодДляСитикардПоОсн Тогда
		ОбщиеДанныеНеКР.Вставить("ВыводитьQRштрихкодДляСитикард", Истина);
	Иначе
		ОбщиеДанныеНеКР.Вставить("ВыводитьQRштрихкодДляСитикард", Ложь);
	КонецЕсли;
	
	// Для получения сведений по основным услугам.
	ОбщиеДанныеНеКР.КвитанцияНаКР = Ложь;
	
	ТекущиеДанныеОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблицОсновная, ОбщиеДанныеНеКР, СтруктураНастроек);
	УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанныеНеКР, ТекущиеДанныеОсновная, СтруктураНастроек);
	
	// Таблицы не по услугам кап.ремонта.
	ТекущиеДанные.Вставить("СтруктураНачСальдоНеКР",        ТекущиеДанныеОсновная.СтруктураНачСальдо);
	ТекущиеДанные.Вставить("СуммаПениНеКР",                 ТекущиеДанныеОсновная.СуммаПени);
	ТекущиеДанные.Вставить("СуммаОплатыПени",               ТекущиеДанныеОсновная.СуммаОплатыПени);
	ТекущиеДанные.Вставить("ТаблицаНачисленияНеКР",         ТекущиеДанныеОсновная.ТаблицаНачисления);
	ТекущиеДанные.Вставить("ТаблицаОбщихСчетчиковНеКР",     ТекущиеДанныеОсновная.ТаблицаОбщихСчетчиков);
	ТекущиеДанные.Вставить("ТаблицаОплатНеКР",              ТекущиеДанныеОсновная.ТаблицаОплат);
	ТекущиеДанные.Вставить("ТаблицаОплатПоУслугамНеКР",     ТекущиеДанныеОсновная.ТаблицаОплатПоУслугам);
	ТекущиеДанные.Вставить("ТаблицаПоставщиковНеКР",        ТекущиеДанныеОсновная.ТаблицаПоставщиков);
	ТекущиеДанные.Вставить("ТаблицаРасходаПоСчетчикамНеКР", ТекущиеДанныеОсновная.ТаблицаРасходаПоСчетчикам);
	ТекущиеДанные.Вставить("ТаблицаСНачислениямиНеКР",      ТекущиеДанныеОсновная.ТаблицаСНачислениями);
	ТекущиеДанные.Вставить("ТаблицаСчетчиковНеКР",          ТекущиеДанныеОсновная.ТаблицаСчетчиков);
	
	// Общие таблицы.
	ТекущиеДанные.Вставить("ТаблицаДатыПоследнихОплат",       ТекущиеДанныеОсновная.ТаблицаДатыПоследнихОплат);
	ТекущиеДанные.Вставить("ТаблицаИндСчетчиков",             ТекущиеДанныеОсновная.ТаблицаИндСчетчиков);
	ТекущиеДанные.Вставить("ТаблицаЛьготСправочно",           ТекущиеДанныеОсновная.ТаблицаЛьготСправочно);
	ТекущиеДанные.Вставить("ТаблицаНорм",                     ТекущиеДанныеОсновная.ТаблицаНорм);
	ТекущиеДанные.Вставить("ТаблицаУслугКПУ",                 ТекущиеДанныеОсновная.ТаблицаУслугКПУ);
	ТекущиеДанные.Вставить("ТаблицаПерерасчетов",             ТекущиеДанныеОсновная.ТаблицаПерерасчетов);
	ТекущиеДанные.Вставить("ТаблицаРассрочки",                ТекущиеДанныеОсновная.ТаблицаРассрочки);
	ТекущиеДанные.Вставить("ТаблицаДобровольногоСтрахования", ТекущиеДанныеОсновная.ТаблицаДобровольногоСтрахования);
	
	// ПО УСЛУГАМ КАП.РЕМОНТА.
	
	ОбщиеДанныеПоКР = Новый Структура;
	Для Каждого ТекЭлемент Из ОбщиеДанные Цикл
		ОбщиеДанныеПоКР.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если СтруктураНастроек.ВыводитьQRштрихкодДляСитикардПоКР Тогда
		ОбщиеДанныеПоКР.Вставить("ВыводитьQRштрихкодДляСитикард", Истина);
	Иначе
		ОбщиеДанныеПоКР.Вставить("ВыводитьQRштрихкодДляСитикард", Ложь);
	КонецЕсли;
	
	// Для получения сведений по услугам кап.ремонта.
	ОбщиеДанныеПоКР.КвитанцияНаКР = Истина;
	
	ТекущиеДанныеКапРемонт    = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблицКапРемонт, ОбщиеДанныеПоКР, СтруктураНастроек);
	УПЖКХ_ПечатьКвитанцийСервер.ПолучитьИтоговыеПоказателиПоТекущемуОбъекту(ОбщиеДанныеПоКР, ТекущиеДанныеКапРемонт, СтруктураНастроек);
	
	// Таблицы по услугам кап.ремонта.
	ТекущиеДанные.Вставить("СтруктураНачСальдоПоКР",        ТекущиеДанныеКапРемонт.СтруктураНачСальдо);
	ТекущиеДанные.Вставить("СуммаПениПоКР",                 ТекущиеДанныеКапРемонт.СуммаПени);
	ТекущиеДанные.Вставить("ТаблицаНачисленияПоКР",         ТекущиеДанныеКапРемонт.ТаблицаНачисления);
	ТекущиеДанные.Вставить("ТаблицаОбщихСчетчиковПоКР",     ТекущиеДанныеКапРемонт.ТаблицаОбщихСчетчиков);
	ТекущиеДанные.Вставить("ТаблицаОплатПоКР",              ТекущиеДанныеКапРемонт.ТаблицаОплат);
	ТекущиеДанные.Вставить("ТаблицаОплатПоУслугамПоКР",     ТекущиеДанныеКапРемонт.ТаблицаОплатПоУслугам);
	ТекущиеДанные.Вставить("ТаблицаПоставщиковПоКР",        ТекущиеДанныеКапРемонт.ТаблицаПоставщиков);
	ТекущиеДанные.Вставить("ТаблицаРасходаПоСчетчикамПоКР", ТекущиеДанныеКапРемонт.ТаблицаРасходаПоСчетчикам);
	ТекущиеДанные.Вставить("ТаблицаСНачислениямиПоКР",      ТекущиеДанныеКапРемонт.ТаблицаСНачислениями);
	ТекущиеДанные.Вставить("ТаблицаСчетчиковПоКР",          ТекущиеДанныеКапРемонт.ТаблицаСчетчиков);
	
	// ОБЩИЕ ДАННЫЕ.
	врОбщиеДанные = Новый Структура;
	
	врОбщиеДанные.Вставить("ЛицевойСчет",                              ОбщиеДанные.ЛицевойСчет);
	врОбщиеДанные.Вставить("ОбщиеДанныеНеКР",                          ОбщиеДанныеНеКР);
	врОбщиеДанные.Вставить("ОбщиеДанныеПоКР",                          ОбщиеДанныеПоКР);
	врОбщиеДанные.Вставить("КвитанцияНаКР",                            Ложь);
	врОбщиеДанные.Вставить("ДатаОплатыУслуг",                          ОбщиеДанныеНеКр.ДатаОплатыУслуг);
	врОбщиеДанные.Вставить("ВладелецЖилец",                            ОбщиеДанные.ВладелецЖилец);
	врОбщиеДанные.Вставить("ОтветственныйКонтрагентФизЛицо",           ОбщиеДанные.ОтветственныйКонтрагентФизЛицо);
	врОбщиеДанные.Вставить("ЕстьНачисленияПоДобровольномуСтрахованию", ОбщиеДанныеНеКР.ЕстьНачисленияПоДобровольномуСтрахованию);
	врОбщиеДанные.Вставить("ПримечаниеКвитанцииОсн",                   ОбщиеДанные.ПримечаниеКвитанцииОсн);
	
	Если врОбщиеДанные.ОтветственныйКонтрагентФизЛицо Тогда
		ФИОСтруктура = РазделитьФИО(СокрЛП(ОбщиеДанные.ФИО));
		врОбщиеДанные.Вставить("ФамилияОтветственного",  ФИОСтруктура.Фамилия);
		врОбщиеДанные.Вставить("ИмяОтветственного",      ФИОСтруктура.Имя);
		врОбщиеДанные.Вставить("ОтчествоОтветственного", ФИОСтруктура.Отчество);
	ИначеЕсли врОбщиеДанные.ВладелецЖилец Тогда
		врОбщиеДанные.Вставить("ФамилияОтветственного",  ОбщиеДанные.ФамилияОтветственного);
		врОбщиеДанные.Вставить("ИмяОтветственного",      ОбщиеДанные.ИмяОтветственного);
		врОбщиеДанные.Вставить("ОтчествоОтветственного", ОбщиеДанные.ОтчествоОтветственного);
	КонецЕсли;
	
	врОбщиеДанные.Вставить("ЕЛСвГИСЖКХОсн",             ОбщиеДанные.ЕЛСвГИСЖКХОсн);
	врОбщиеДанные.Вставить("ЕЛСвГИСЖКХКапРемонт",       ОбщиеДанные.ЕЛСвГИСЖКХКапРемонт);
	врОбщиеДанные.Вставить("ИдентификаторЖКУОсн",       ОбщиеДанные.ИдентификаторЖКУОсн);
	врОбщиеДанные.Вставить("ИдентификаторЖКУКапРемонт", ОбщиеДанные.ИдентификаторЖКУКапРемонт);
	врОбщиеДанные.Вставить("ОрганизацияОбъект",         ОбщиеДанные.ОрганизацияОбъект);
	врОбщиеДанные.Вставить("Здание",                    ОбщиеДанные.Здание);
	врОбщиеДанные.Вставить("АдресЭлектроннойПочты",     ОбщиеДанные.АдресЭлектроннойПочты);
	врОбщиеДанные.Вставить("КвитанцияПоПени",           ОбщиеДанные.КвитанцияПоПени);
	врОбщиеДанные.Вставить("ИдентификаторЛС",           ОбщиеДанные.ИдентификаторЛС);
	
	СтруктураДанных.Вставить("ОбщиеДанные",   врОбщиеДанные);
	СтруктураДанных.Вставить("ТекущиеДанные", ТекущиеДанные);
	СтруктураДанных.Вставить("ЛицевойСчет",   ОбщиеДанные.ЛицевойСчет);
	
	ПечататьКвитанцию = УПЖКХ_ПечатьКвитанцийСервер.ПечататьКвитанцииПоОтбору(СтруктураОбщихТаблиц, СтруктураДанных, СтруктураНастроек, Ложь);
	
	Если НЕ ПечататьКвитанцию Тогда
		СтруктураДанных.ПечататьКвитанцию = Ложь;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьТекущиеИОбщиеДанныеПоОбъекту924()

// Формирует табличный документ и выводит в него область Раздел1 и Раздел2.
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиков - Таблица значений   - таблица с данными о поставщиках услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями Раздел1 и Раздел2.
//
Функция ПолучитьОбластьРаздел1и2Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиковНеКР)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьРаздел1 = ПолучитьОбластьРаздел1Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек);
	ВывестиОбласть(ТабличныйДокумент, ОбластьРаздел1, Истина, "Присоединить");
	
	ОбластьРаздел2 = ПолучитьОбластьРаздел2Приказ924пр(Макет, ОбщиеДанные.ОбщиеДанныеНеКР, СтруктураНастроек, ТаблицаПоставщиковНеКР);
	ВывестиОбласть(ТабличныйДокумент, ОбластьРаздел2, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел1и2Приказ924пр()

// Формирует табличный документ и выводит в него область Раздел1.
// 
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ОбщиеДанные       - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с Разделом 2.
//
Функция ПолучитьОбластьРаздел1Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьИсполнительПлательщик = ПолучитьОбласть(Макет, "ИсполнительПлательщик", СтруктураНастроек, ОбщиеДанные);
	ОбластьИсполнительПлательщик.Параметры.Заполнить(ОбщиеДанные.ОбщиеДанныеНеКР);
	
	// Данные по организации.
	ОбщиеДанные.Вставить("ЗаголовокОбластиОрганизация", "Наименование организации");
	ОбластьИсполнительПлательщик.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, ОбластьИсполнительПлательщик, Истина);
	
	// Данные по исполнителю услуг.
	Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		ОбластьИсполнительРасчетов = ПолучитьОбластьРаздел1ИсполнительРасчетовПриказ924пр(Макет, ОбщиеДанные.ОбщиеДанныеНеКР, СтруктураНастроек);
		ВывестиОбласть(ТабличныйДокумент, ОбластьИсполнительРасчетов, Истина);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует табличный документ и выводит в него область "ОбластьИсполнитель".
// 
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ОбщиеДанные       - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "ОбластьИсполнитель".
//
Функция ПолучитьОбластьРаздел1ИсполнительРасчетовПриказ924пр(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	СтруктураДанныхИсполнителя = Новый Структура;
	СтруктураДанныхИсполнителя.Вставить("ДопИнформация",               ОбщиеДанные.ДопИнформацияИсполнителя);
	СтруктураДанныхИсполнителя.Вставить("ЗаголовокОбластиОрганизация", "Наименование организации-исполнителя");
	СтруктураДанныхИсполнителя.Вставить("ИННОрганизации",              ОбщиеДанные.ИННИсполнителя);
	СтруктураДанныхИсполнителя.Вставить("Организация",                 ОбщиеДанные.ИсполнительУслуг);
	СтруктураДанныхИсполнителя.Вставить("Телефон",                     ОбщиеДанные.ТелефонИсполнителя);
	СтруктураДанныхИсполнителя.Вставить("ЮрАдресОрганизации",          ОбщиеДанные.АдресИсполнителя);
	
	Область = ПолучитьОбласть(Макет, "ОбластьИсполнитель", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураДанныхИсполнителя);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел1ИсполнительРасчетовПриказ924пр()

// Формирует табличный документ и выводит в него область Раздел2.
// Данная функция используется также и для вывода "Раздела 8" формы "Плат. документ (приказ №924/пр)".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиков - Таблица значений   - таблица с данными о поставщиках услуг
//  ДанныеПоКапРемонту - Булево             - определяет, что данные выводятся по услугам кап.ремонта.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями "Счета" и "СправочнаяИнформация".
//
Функция ПолучитьОбластьРаздел2Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков, ДанныеПоКапРемонту = Ложь)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ВыводитьQRштрихкодДляСитикард = ОбщиеДанные.ВыводитьQRштрихкодДляСитикард;
	
	// 1. Вывод таблицы поставщиков.
	
	Область = ПолучитьОбласть(Макет, "Раздел2ЗаголовокШапкаТаблицы", СтруктураНастроек, ОбщиеДанные);
	Если ДанныеПоКапРемонту Тогда
		Область.Параметры.Заполнить(Новый Структура("НомерРаздела, ЗаголовокРаздела", "Раздел 8.", "Информация для внесения взноса на капитальный ремонт"));
	Иначе
		Область.Параметры.Заполнить(Новый Структура("НомерРаздела, ЗаголовокРаздела", "Раздел 2.", "Информация для внесения платы получателю платежа (получателям платежей)"));
	КонецЕсли;
	ВывестиОбласть(ДокументРезультат, Область, Истина);
	
	// Подготовим данные для объединения строк таблицы, чтобы подогонать высоту строк справа в Разделе 1 и слева в Разделе 2.
	// Эта необходимость обусловлена особенностью вывода областей на одном уровне, а именно тем, что если в таблице Раздела 1
	// строки разной высоты из-за количества информации в колонках (текст в поле таблицы при этом может переноситься на другую
	// строку, поэтому высота строки таблицы увеличивается), то в Разделе 2 высота строк также будет увеличиватся.
	Область = ПолучитьОбласть(Макет, "Раздел2СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
	КоординатыПолейОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область);
	
	Если ТаблицаПоставщиков.Количество() = 0 Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		
		врСтруктураПараметровИсполнителя = Новый Структура("НаименованиеПоставщика, ИНН, РасчетныйСчет, Банк, КоррСчет, БИК");
		
		Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
			врСтруктураПараметровИсполнителя.НаименованиеПоставщика = ОбщиеДанные.ИсполнительУслуг;
			врСтруктураПараметровИсполнителя.ИНН                    = ОбщиеДанные.ИННИсполнителя;
			врСтруктураПараметровИсполнителя.РасчетныйСчет          = ОбщиеДанные.РасчетныйСчетИсполнителя;
			врСтруктураПараметровИсполнителя.Банк                   = ОбщиеДанные.БанкИсполнителя;
			врСтруктураПараметровИсполнителя.КоррСчет               = ОбщиеДанные.КоррСчетБанкаИсполнителя;
			врСтруктураПараметровИсполнителя.БИК                    = ОбщиеДанные.БИКБанкаИсполнителя;
		Иначе
			врСтруктураПараметровИсполнителя.НаименованиеПоставщика = ОбщиеДанные.Организация;
			врСтруктураПараметровИсполнителя.ИНН                    = ОбщиеДанные.ИННОрганизации;
			врСтруктураПараметровИсполнителя.РасчетныйСчет          = ОбщиеДанные.РасчетныйСчет;
			врСтруктураПараметровИсполнителя.Банк                   = ОбщиеДанные.Банк;
			врСтруктураПараметровИсполнителя.КоррСчет               = ОбщиеДанные.КоррСчет;
			врСтруктураПараметровИсполнителя.БИК                    = ОбщиеДанные.БИК;
		КонецЕсли;
		врСтруктураПараметровИсполнителя.Вставить("ВсегоКОплате", 0);
		
		Область.Параметры.Заполнить(врСтруктураПараметровИсполнителя);
		
		Область = КорректироватьВыводСтрокОбъединением(Макет, "Раздел2СчетаСтрока", Область, КоординатыПолейОбъединения, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
	Иначе
		ИндексПоследнейСтроки = ТаблицаПоставщиков.Количество() - 1;
		Для Сч = 0 По ИндексПоследнейСтроки Цикл
			ТекущаяСтрока = ТаблицаПоставщиков[Сч];
			
			Область = ПолучитьОбласть(Макет, "Раздел2СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			Область.Параметры.Заполнить(ТекущаяСтрока);
			Область.Параметры.Заполнить(Новый Структура("ВидыУслугСтрокой",
							?(СтруктураНастроек.УслугиИсполнителя = "Выводить список услуг",
								СтрСоединить(ТекущаяСтрока.ВидыУслуг, ", "),
								СтруктураНастроек.СтрокаУслуг)));
			
			Область = КорректироватьВыводСтрокОбъединением(Макет, "Раздел2СчетаСтрока", Область, КоординатыПолейОбъединения, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ДокументРезультат, Область, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// 2. Вывод данных после таблицы поставщиков: "Справочно" и штрихкоды согласно настройкам квитанции.
	
	// Левая и правая часть области "Справочно" Раздела 2.
	
	ОбластьСправочноПоказатели = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Раздел2СправочноЗаголовок", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина, "Присоединить");
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноЗадолженностьАванс", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноОплаты", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноПредоплатаРассрочки", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноОплатаДобровольногоСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате = Ложь;
	
	Если (НЕ ВыводитьQRштрихкодДляСитикард
	   И СтруктураНастроек.ВыводитьШК
	   И СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный
	   И НЕ ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию)
	 ИЛИ (НЕ ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК) Тогда
		
		ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате = Истина;
		
	ИначеЕсли НЕ СтруктураНастроек.ВыводитьНачальноеСальдо
	   И НЕ ВыводитьQRштрихкодДляСитикард
	   И СтруктураНастроек.ВыводитьШК
	   И СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
		
		ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате = Ложь;
		
	КонецЕсли;
	
	// Области с Датой оплаты, Пени, Комиссия выводим друг за другом, когда не выводится основной QR и QR для онлайн-оплаты.
	Если НЕ ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноДатаОплаты", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		Если СтруктураНастроек.УчитыватьПени И НЕ СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноПени", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
		
		Если НЕ СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать" Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноКомиссия", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСправочноШтрихкоды = Новый ТабличныйДокумент;
	
	КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = 0;
	ДобавитьПустыеСтрокиВОбластьСправочноПоказатели       = Ложь;
	ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Ложь;
	
	Если ВыводитьQRштрихкодДляСитикард И СтруктураНастроек.ВыводитьШК Тогда
		
		// Вывод QR для онлайн-оплаты.
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Вывод основного ШК.
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRСоСтрахованием", "ОбластьQR"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		Иначе
			
			врТабличныйДокументШтрихкоды = Новый ТабличныйДокумент;
			
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноШКСоСтрахованием", "Раздел2СправочноШК"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокументШтрихкоды, Область);
			
			Если Не ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
				Если ДанныеПоКапРемонту Тогда
					ИмяОбласти = "Раздел2СправочноТекстШККР";
				Иначе
					ИмяОбласти = "Раздел2СправочноТекстШКОсн";
				КонецЕсли;
				
				Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокументШтрихкоды, Область);
			КонецЕсли;
			
			КоличествоДобавляемыхСтрок = ОбластьСправочноШтрихкоды.ВысотаТаблицы - врТабличныйДокументШтрихкоды.ВысотаТаблицы;
			Если КоличествоДобавляемыхСтрок > 0 Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
				Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
					Если Сч < КоличествоДобавляемыхСтрок Тогда
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область);
					Иначе
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область, Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ВывестиОбласть(ОбластьСправочноШтрихкоды, врТабличныйДокументШтрихкоды, Истина, "Присоединить");
			
		КонецЕсли;
		
		ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
		КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = ОбластьСправочноШтрихкоды.ВысотаТаблицы - ОбластьСправочноПоказатели.ВысотаТаблицы - 1;
		Если КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
			ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
		КонецЕсли;
		
	ИначеЕсли НЕ ВыводитьQRштрихкодДляСитикард И СтруктураНастроек.ВыводитьШК Тогда
		
		// Вывод пустой области QR для онлайн-оплаты.
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
		Область.Области.ОбластьQRОнлайнПустая.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Вывод основного ШК.
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRСоСтрахованием", "ОбластьQR"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
			
			ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
			КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = ОбластьСправочноШтрихкоды.ВысотаТаблицы - ОбластьСправочноПоказатели.ВысотаТаблицы - 1;
			Если КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
				ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
			КонецЕсли;
			
		Иначе
			
			врТабличныйДокументШтрихкоды = Новый ТабличныйДокумент;
			Область                      = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноШКСоСтрахованием", "Раздел2СправочноШК"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокументШтрихкоды, Область, Истина);
			
			Если Не ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
				Если ДанныеПоКапРемонту Тогда
					ИмяОбласти = "Раздел2СправочноТекстШККР";
				Иначе
					ИмяОбласти = "Раздел2СправочноТекстШКОсн";
				КонецЕсли;
				Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокументШтрихкоды, Область, Истина);
			КонецЕсли;
			ВывестиОбласть(ОбластьСправочноШтрихкоды, врТабличныйДокументШтрихкоды, Истина, "Присоединить");
			
			// Выводим пустые строки в области "Справочно" для выравнивания справа или слева.
			врТабличныйДокументШтрихкоды = Новый ТабличныйДокумент;
			КоличествоДобавляемыхСтрок   = ОбластьСправочноПоказатели.ВысотаТаблицы - ОбластьСправочноШтрихкоды.ВысотаТаблицы;
			Если КоличествоДобавляемыхСтрок > 0 Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
				Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
					Если Сч < КоличествоДобавляемыхСтрок Тогда
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область);
					Иначе
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область, Истина);
					КонецЕсли;
				КонецЦикла;
				ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Ложь;
			ИначеЕсли КоличествоДобавляемыхСтрок < 0 Тогда
				ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
				Если НЕ ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате Тогда
					ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
					КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = -КоличествоДобавляемыхСтрок - 1;
				Иначе
					КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = -КоличествоДобавляемыхСтрок;
				КонецЕсли;
			КонецЕсли;
			ВывестиОбласть(ОбластьСправочноШтрихкоды, врТабличныйДокументШтрихкоды, Истина, "Присоединить");
			
		КонецЕсли;
		
	ИначеЕсли НЕ ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК Тогда
		
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Выводим пустые строки для выравнивания.
		врТабличныйДокумент = Новый ТабличныйДокумент;
		Область             = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
		Для Сч = 1 По ОбластьСправочноПоказатели.ВысотаТаблицы Цикл
			Если Сч < ОбластьСправочноПоказатели.ВысотаТаблицы Тогда
				ВывестиОбласть(врТабличныйДокумент, Область);
			Иначе
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			КонецЕсли;
		КонецЦикла;
		ВывестиОбласть(ОбластьСправочноШтрихкоды, врТабличныйДокумент, Истина, "Присоединить");
		
	ИначеЕсли НЕ ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК Тогда
		
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
	ИначеЕсли ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК Тогда
		
		// Сперва присоединяем пустую строку для выравнивания.
		Область = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
		Область.Области.ОбластьОсновныеQRШКПустая.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Вывод QR для онлайн-оплаты.
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		Область.Области.ОбластьQRОнлайн.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, , "Присоединить");
		
		ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
		КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = ОбластьСправочноШтрихкоды.ВысотаТаблицы - ОбластьСправочноПоказатели.ВысотаТаблицы - 1;
		Если КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
			ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим пустые строки слева в области Справочно для выравнивания.
	Если ДобавитьПустыеСтрокиВОбластьСправочноПоказатели
	   И КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноПустаяСтрока", СтруктураНастроек, ОбщиеДанные);
		Для Сч = 1 По КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели Цикл
			Если Сч < КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели Тогда
				ВывестиОбласть(ОбластьСправочноПоказатели, Область);
			Иначе
				ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбластьСправочноИтогоКОплате = Новый ТабличныйДокумент;
	// Выводим строку Итого к оплате слева в области Справочно.
	Если ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели Тогда
		Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноИтогоКОплатеСоСтрахованием", "Раздел2СправочноИтогоКОплате"), СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноИтогоКОплате, Область, Истина);
	КонецЕсли;
	
	Если ДанныеПоКапРемонту Тогда
		Постфикс = "_КР_";
	Иначе
		Постфикс = "_Осн_";
	КонецЕсли;
	Для Каждого ТекущаяОбласть Из ОбластьСправочноШтрихкоды.Рисунки Цикл
		Если Найти(ТекущаяОбласть.Имя, "QRШК") > 0
		 ИЛИ Найти(ТекущаяОбласть.Имя, "ШтрихКод") > 0
		 ИЛИ Найти(ТекущаяОбласть.Имя, "QRОнлайн") > 0 Тогда
			ТекущаяОбласть.Имя = ТекущаяОбласть.Имя + Постфикс;
		КонецЕсли;
	КонецЦикла;
	
	// 4. Собираем область "Справочно" Раздела 2 из левой, правой частей и строки с итоговой суммой к оплате.
	ОбластьСправочно = Новый ТабличныйДокумент;
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноПустаяСтрока", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноПоказатели, Истина, "Присоединить");
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноШтрихкоды, Истина, "Присоединить");
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноИтогоКОплате, Истина);
	Иначе
		
		ВывестиОбласть(ОбластьСправочноПоказатели, ОбластьСправочноИтогоКОплате, Истина);
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноПоказатели, Истина, "Присоединить");
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноШтрихкоды, Истина, "Присоединить");
	КонецЕсли;
	
	Если НЕ ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели
	   И ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате Тогда
		Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноДатаОплатыПениКомиссияИтогоКОплатеСоСтрахованием",
										 "Раздел2СправочноДатаОплатыПениКомиссияИтогоКОплате"), СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочно, Область, Истина);
	КонецЕсли;
	
	// Выводим область с верхней границей для закрытия таблицы "Справочно".
	Область = ПолучитьОбласть(Макет, "Раздел2ГраницаСницу", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьСправочно, Область, Истина);
	
	ВывестиОбласть(ДокументРезультат, ОбластьСправочно, Истина);
	
	Возврат ДокументРезультат;
	
КонецФункции // ПолучитьОбластьРаздел2Приказ924пр()

// Формирует табличный документ и выводит в него область, соответствующую начислениям.
//
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью начисления.
//
Функция ПолучитьОбластьРаздел3и4НачисленияПриказ924пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияШапка", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
		ИмяОбласти = "Раздел4СправочнаяИнформацияСУчетнымОбъемомШапка";
	Иначе
		ИмяОбласти = "Раздел4СправочнаяИнформацияБезУчетногоОбъемаШапка";
	КонецЕсли;
	Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		ТаблицаКоммунальныхУслуг  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная",      Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		ТаблицаУслугСОИ           = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек);
		ТаблицаПрочихУслуг        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь), СтруктураНастроек);
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаКоммунальные", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаКоммунальныхУслуг, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСодержаниеИРемонт", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаСодержанияИРемонта, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаУслугСОИ.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСОИ", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаУслугСОИ, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаПрочихУслуг, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
	КонецЕсли;
	
	// Вводим переменные итоговых сумм начислений по ИПУ и ОПУ.
	ИтоговаяСуммаИПУ = 0;
	ИтоговаяСуммаОПУ = 0;
	
	// Суммируем начисления по услугам, рассчитываемым по ПУ.
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) ИЛИ ЗначениеЗаполнено(Строка.Услуга) Тогда
			Если НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост Тогда
				Если Строка.УслугаПоСчетчикам = Истина ИЛИ Строка.УслугаСоставнаяПоСчетчикам = Истина Тогда
					ИтоговаяСуммаИПУ = ИтоговаяСуммаИПУ + Строка.НачисленоИПУ;
					ИтоговаяСуммаОПУ = ИтоговаяСуммаОПУ + Строка.НачисленоОПУ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИтоговаяСтрока = Неопределено;
	Если ТаблицаНачисления.Количество() > 0 Тогда
		ИтоговаяСтрока = ТаблицаНачисления[0];
	КонецЕсли;
	
	Если ИтоговаяСтрока <> Неопределено
	   И ИтоговаяСтрока.Льгота = 0 Тогда
		ИтоговаяСтрока.Льгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	// Заполняем параметры получеными значениями итоговой строки.
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
	
	СтруктураПараметровПодвалНачисления = Новый Структура("КОплате, Начислено, Льгота, Перерасчет, НачисленоИПУ, НачисленоОПУ, СуммаПовышения, ТекстПодвалаСтрахование", 0, 0, 0, 0, 0, 0, 0, "");
	
	СтруктураПараметровПодвалНачисления.НачисленоИПУ = ИтоговаяСуммаИПУ;
	СтруктураПараметровПодвалНачисления.НачисленоОПУ = ИтоговаяСуммаОПУ;
	
	Если ИтоговаяСтрока <> Неопределено Тогда
		СтруктураПараметровПодвалНачисления.КОплате        = ИтоговаяСтрока.КОплате;
		СтруктураПараметровПодвалНачисления.Начислено      = ИтоговаяСтрока.Начислено;
		СтруктураПараметровПодвалНачисления.Льгота         = ИтоговаяСтрока.Льгота;
		СтруктураПараметровПодвалНачисления.Перерасчет     = ИтоговаяСтрока.Перерасчет;
		СтруктураПараметровПодвалНачисления.СуммаПовышения = ИтоговаяСтрока.СуммаПовышения;
	КонецЕсли;
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		СтруктураПараметровПодвалНачисления.ТекстПодвалаСтрахование = "без учета добр. страхования";
	КонецЕсли;
	
	Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Для Каждого Строка Из ТаблицаДобровольногоСтрахования Цикл
			Область = ПолучитьОбласть(Макет, "СтрокаДобровольногоСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
		СтруктураПараметровПодвалНачисления.НачисленоИПУ            = СтруктураПараметровПодвалНачисления.НачисленоИПУ + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураПараметровПодвалНачисления.Начислено               = СтруктураПараметровПодвалНачисления.Начислено + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураПараметровПодвалНачисления.КОплате                 = ?(СтруктураПараметровПодвалНачисления.КОплате < 0, 0, СтруктураПараметровПодвалНачисления.КОплате) + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураПараметровПодвалНачисления.ТекстПодвалаСтрахование = "с учетом добр. страхования";
		
		Область = ПолучитьОбласть(Макет, "Раздел3НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияСправка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел3и4НачисленияПриказ454()

// Формирует табличный документ и выводит в него область "Перерасчеты".
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПерерасчетов - Таблица значений   - таблица с перерасчетами по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "Перерасчеты".
//
Функция ПолучитьОбластьРаздел5ПерерасчетыПриказ924пр(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбластьРаздел5ПерерасчетыПриказ454(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел5ПерерасчетыПриказ924пр()

// Формирует табличный документ и выводит в него область с таблицей рассрочки платежа.
// 
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТаблицаРассрочки    - Таблица значений   - таблица рассрочки по текущему лицевому счету.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с таблицей рассрочки платежа.
//
Функция ПолучитьОбластьРаздел6РассрочкиПриказ924пр(Макет, ТаблицаРассрочки, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаРассрочки.Количество() = 0 Тогда
		Если СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
			Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаШапка", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
		Иначе
			Возврат ТабличныйДокумент;
		КонецЕсли;
	ИначеЕсли ТаблицаРассрочки.Количество() > 0 Тогда
		ПервыйОбход = Истина;
		Для Каждого ТекущаяСтрока Из ТаблицаРассрочки Цикл
			Если ПервыйОбход Тогда
				ПервыйОбход = Ложь;
				Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаШапка", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ТекущаяСтрока);
			ВывестиОбласть(ТабличныйДокумент, Область);
		КонецЦикла;
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаПодвал", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(Новый Структура("КОплате", ТаблицаРассрочки.Итог("КОплате")));
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел6РассрочкиПриказ924пр()

// Формирует табличный документ и выводит в него таблицу начисления по кап.ремонту Раздела 7.
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью начисления по услугам кап.ремонта.
//
Функция ПолучитьОбластьРаздел7НачисленияПоКРПриказ924пр(Макет, ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "НачисленияШапкаКР", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Для Каждого ТекущаяСтрока Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидУслуги) Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаНачисленияКР", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ТекущаяСтрока);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел7НачисленияПоКРПриказ924пр()

// Формирует табличный документ и выводит в него область Раздел 8.
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиков - Таблица значений   - таблица с данными о поставщиках услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями "Счета" и "СправочнаяИнформация".
//
Функция ПолучитьОбластьРаздел8Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбластьРаздел2Приказ924пр(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков, Истина);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент
	
КонецФункции // ПолучитьОбластьРаздел8Приказ924пр()

#КонецОбласти

#Область ФормаПлатДокументПриказ454ВСоответСПост354

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (ПРИКАЗ №454 В СООТВЕТ. С ПОСТ. №354)".

// Формирует табличный документ и выводит в него область Раздел1 и Раздел2.
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиков - Таблица значений   - таблица с данными о поставщиках услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями Раздел1 и Раздел2.
//
Функция ПолучитьОбластьРаздел1и2Приказ454(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьРаздел1 = ПолучитьОбластьРаздел1Приказ454(Макет, ОбщиеДанные, СтруктураНастроек);
	ВывестиОбласть(ТабличныйДокумент, ОбластьРаздел1, Истина, "Присоединить");
	
	ОбластьРаздел2 = ПолучитьОбластьРаздел2Приказ454(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков);
	ВывестиОбласть(ТабличныйДокумент, ОбластьРаздел2, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел1и2Приказ454()

// Формирует табличный документ и выводит в него область Раздела1.
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями Раздела 1.
//
Функция ПолучитьОбластьРаздел1Приказ454(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Раздел1ИсполнительПлательщик", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные); // для механизма выбора параметров вручную в пользовательских макетах печати.
	
	// Переопределим значения некоторых параметров и заполним их в соответствии с настройками квитанции.
	ПараметрыЗаполнения = Новый Структура;
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		ПараметрыЗаполнения.Вставить("Организация",        ОбщиеДанные.ВладелецСчетаКР);
		ПараметрыЗаполнения.Вставить("ИННОрганизации",     ОбщиеДанные.ИННВладельцаСчетаКР);
		ПараметрыЗаполнения.Вставить("ЮрАдресОрганизации", ОбщиеДанные.ЮрАдресИсполнителяКР);
		ПараметрыЗаполнения.Вставить("Телефон",            ОбщиеДанные.ТелефонИсполнителяКР);
		ПараметрыЗаполнения.Вставить("ДопИнформация",      );
		
		Если ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрыЗаполнения.Вставить("ДопИнформация", ОбщиеДанные.ДопИнформацияИсполнителяКР);
		ИначеЕсли ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Организации") Тогда
			ПараметрыЗаполнения.Вставить("ДопИнформация", ОбщиеДанные.ДопИнформацияКР);
		КонецЕсли;
	Иначе
		ПараметрыЗаполнения.Вставить("ДопИнформация", ОбщиеДанные.ДопИнформация);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыЗаполнения);
	
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) И НЕ ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбластьРаздел1ИсполнительРасчетовПриказ454(Макет, ОбщиеДанные, СтруктураНастроек);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел1Приказ454()

// Формирует табличный документ и выводит в него область "ОбластьИсполнитель".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "ОбластьИсполнитель".
//
Функция ПолучитьОбластьРаздел1ИсполнительРасчетовПриказ454(Макет, ОбщиеДанные, СтруктураНастроек)
	
	Область = ПолучитьОбласть(Макет, "Раздел1ОбластьИсполнительРасчетов", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	Возврат Область;
	
КонецФункции // ПолучитьОбластьРаздел1ИсполнительРасчетовПриказ454()

// Формирует табличный документ и выводит в него области "Счета" и "СправочнаяИнформация".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиков - Таблица значений   - таблица с данными о поставщиках услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями Раздела 2.
//
Функция ПолучитьОбластьРаздел2Приказ454(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВыводитьQRштрихкодДляСитикард = ОбщиеДанные.ВыводитьQRштрихкодДляСитикард;
	
	// 1. Вывод таблицы поставщиков.
	
	Область = ПолучитьОбласть(Макет, "Раздел2ЗаголовокШапкаТаблицы", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные); // для механизма выбора параметров вручную в пользовательских макетах печати.
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	// Данная структура сведений о расчетном счете нужна для заполнения таблицы поставщиков в квитанции для кап. ремонта.
	врСтруктураКР = Новый Структура("РасчетныйСчет, Банк, БИК, КоррСчет, НаименованиеПоставщика");
	врСтруктураКР.РасчетныйСчет = ОбщиеДанные.РасчетныйСчетКР;
	врСтруктураКР.Банк          = ОбщиеДанные.БанкКР;
	врСтруктураКР.БИК           = ОбщиеДанные.БИККР;
	врСтруктураКР.КоррСчет      = ОбщиеДанные.КоррСчетКР;
	врСтруктураКР.НаименованиеПоставщика = ОбщиеДанные.ВладелецСчетаКР;
	
	// Подготовим данные для объединения строк таблицы, чтобы подогонать высоту строк справа в Разделе 1 и слева в Разделе 2.
	// Эта необходимость обусловлена особенностью вывода областей на одном уровне, а именно тем, что если в таблице Раздела 1
	// строки разной высоты из-за количества информации в колонках (текст в поле таблицы при этом может переноситься на другую
	// строку, поэтому высота строки таблицы увеличивается), то в Разделе 2 высота строк также будет увеличиватся.
	Область = ПолучитьОбласть(Макет, "Раздел2СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
	КоординатыПолейОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область);
	
	Если ТаблицаПоставщиков.Количество() = 0 Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		
		ПараметрыИсполнителя = Новый Структура("НаименованиеПоставщика, ИНН, РасчетныйСчет, Банк, КоррСчет, БИК, ВидыУслуг");
		Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
			ПараметрыИсполнителя.НаименованиеПоставщика    = ОбщиеДанные.ИсполнительУслуг;
			ПараметрыИсполнителя.ИНН            = ОбщиеДанные.ИННИсполнителя;
			ПараметрыИсполнителя.РасчетныйСчет  = ОбщиеДанные.РасчетныйСчетИсполнителя;
			ПараметрыИсполнителя.Банк           = ОбщиеДанные.БанкИсполнителя;
			ПараметрыИсполнителя.КоррСчет       = ОбщиеДанные.КоррСчетБанкаИсполнителя;
			ПараметрыИсполнителя.БИК            = ОбщиеДанные.БИКБанкаИсполнителя;
		Иначе
			ПараметрыИсполнителя.НаименованиеПоставщика    = ОбщиеДанные.Организация;
			ПараметрыИсполнителя.ИНН            = ОбщиеДанные.ИННОрганизации;
			ПараметрыИсполнителя.РасчетныйСчет  = ОбщиеДанные.РасчетныйСчет;
			ПараметрыИсполнителя.Банк           = ОбщиеДанные.Банк;
			ПараметрыИсполнителя.КоррСчет       = ОбщиеДанные.КоррСчет;
			ПараметрыИсполнителя.БИК            = ОбщиеДанные.БИК;
		КонецЕсли;
		ПараметрыИсполнителя.Вставить("ВсегоКОплате", 0);
		
		Если НЕ СтруктураНастроек.УслугиИсполнителя = "Выводить список услуг" Тогда
			ПараметрыИсполнителя.ВидыУслуг = СтруктураНастроек.СтрокаУслуг;
		КонецЕсли;
		
		Область.Параметры.Заполнить(ПараметрыИсполнителя);
		
		Если ОбщиеДанные.КвитанцияНаКР Тогда
			Область.Параметры.Заполнить(врСтруктураКР);
		КонецЕсли;
		
		Область = КорректироватьВыводСтрокОбъединением(Макет, "Раздел2СчетаСтрока", Область, КоординатыПолейОбъединения, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	Иначе
		ИндексПоследнейСтроки = ТаблицаПоставщиков.Количество() - 1;
		Для Сч = 0 По ИндексПоследнейСтроки Цикл
			ТекущаяСтрока = ТаблицаПоставщиков[Сч];
			
			Если ТаблицаПоставщиков.Количество() = 1 ИЛИ НЕ ТекущаяСтрока.ВсегоКОплате = 0 Тогда
				
				Область = ПолучитьОбласть(Макет, "Раздел2СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				Область.Параметры.Заполнить(ТекущаяСтрока);
				Область.Параметры.Заполнить(Новый Структура("ВидыУслугСтрокой",
							?(СтруктураНастроек.УслугиИсполнителя = "Выводить список услуг",
								СтрСоединить(ТекущаяСтрока.ВидыУслуг, ", "),
								СтруктураНастроек.СтрокаУслуг)));
				
				Если ОбщиеДанные.КвитанцияНаКР Тогда
					Область.Параметры.Заполнить(врСтруктураКР);
				КонецЕсли;
				
				Область = КорректироватьВыводСтрокОбъединением(Макет, "Раздел2СчетаСтрока", Область, КоординатыПолейОбъединения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 2. Вывод данных после таблицы поставщиков: "Справочно" и штрихкоды согласно настройкам квитанции.
	
	// Левая и правая часть области "Справочно" Раздела 2.
	
	ОбластьСправочноПоказатели = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Раздел2СправочноЗаголовок", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина, "Присоединить");
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноЗадолженностьАванс", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноОплаты", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноПредоплатаРассрочки", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноОплатаДобровольногоСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате = Ложь;
	
	Если (НЕ ВыводитьQRштрихкодДляСитикард
	   И СтруктураНастроек.ВыводитьШК
	   И СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный
	   И НЕ ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию)
	   ИЛИ (НЕ ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК) Тогда
		
		ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате = Истина;
		
	ИначеЕсли НЕ СтруктураНастроек.ВыводитьНачальноеСальдо
	   И НЕ ВыводитьQRштрихкодДляСитикард
	   И СтруктураНастроек.ВыводитьШК
	   И СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
		
		ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате = Ложь;
		
	КонецЕсли;
	
	// Области с Датой оплаты, Пени, Комиссия выводим друг за другом, когда не выводится основной QR и QR для онлайн-оплаты.
	Если НЕ ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноДатаОплаты", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		Если СтруктураНастроек.УчитыватьПени И НЕ СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноПени", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
		
		Если НЕ СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать" Тогда
			Область = ПолучитьОбласть(Макет, "Раздел2СправочноКомиссия", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСправочноШтрихкоды = Новый ТабличныйДокумент;
	
	КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = 0;
	ДобавитьПустыеСтрокиВОбластьСправочноПоказатели       = Ложь;
	ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Ложь;
	
	Если ВыводитьQRштрихкодДляСитикард И СтруктураНастроек.ВыводитьШК Тогда
		
		// Вывод QR для онлайн-оплаты.
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Вывод основного ШК.
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRСоСтрахованием", "ОбластьQR"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		Иначе
			
			врТабличныйДокументШтрихкоды = Новый ТабличныйДокумент;
			
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноШКСоСтрахованием", "Раздел2СправочноШК"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокументШтрихкоды, Область);
			
			КоличествоДобавляемыхСтрок = ОбластьСправочноШтрихкоды.ВысотаТаблицы - Область.ВысотаТаблицы;
			Если КоличествоДобавляемыхСтрок > 0 Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
				Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
					Если Сч < КоличествоДобавляемыхСтрок Тогда
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область);
					Иначе
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область, Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ВывестиОбласть(ОбластьСправочноШтрихкоды, врТабличныйДокументШтрихкоды, Истина, "Присоединить");
			
		КонецЕсли;
		
		ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
		КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = ОбластьСправочноШтрихкоды.ВысотаТаблицы - ОбластьСправочноПоказатели.ВысотаТаблицы - 1;
		Если КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
			ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
		КонецЕсли;
		
	ИначеЕсли НЕ ВыводитьQRштрихкодДляСитикард И СтруктураНастроек.ВыводитьШК Тогда
		
		// Вывод пустой области QR для онлайн-оплаты.
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
		Область.Области.ОбластьQRОнлайнПустая.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Вывод основного ШК.
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRСоСтрахованием", "ОбластьQR"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
			
			ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
			КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = ОбластьСправочноШтрихкоды.ВысотаТаблицы - ОбластьСправочноПоказатели.ВысотаТаблицы - 1;
			Если КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
				ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
			КонецЕсли;
			
		Иначе
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноШКСоСтрахованием", "Раздел2СправочноШК"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
			
			// Выводим пустые строки в области "Справочно" для выравнивания справа или слева.
			врТабличныйДокументШтрихкоды = Новый ТабличныйДокумент;
			КоличествоДобавляемыхСтрок   = ОбластьСправочноПоказатели.ВысотаТаблицы - ОбластьСправочноШтрихкоды.ВысотаТаблицы;
			Если КоличествоДобавляемыхСтрок > 0 Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
				Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
					Если Сч < КоличествоДобавляемыхСтрок Тогда
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область);
					Иначе
						ВывестиОбласть(врТабличныйДокументШтрихкоды, Область, Истина);
					КонецЕсли;
				КонецЦикла;
				ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Ложь;
			ИначеЕсли КоличествоДобавляемыхСтрок < 0 Тогда
				ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
				Если НЕ ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате Тогда
					ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
					КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = -КоличествоДобавляемыхСтрок - 1;
				Иначе
					КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = -КоличествоДобавляемыхСтрок;
				КонецЕсли;
			КонецЕсли;
			ВывестиОбласть(ОбластьСправочноШтрихкоды, врТабличныйДокументШтрихкоды, Истина, "Присоединить");
			
		КонецЕсли;
		
	ИначеЕсли НЕ ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК Тогда
		
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Выводим пустые строки для выравнивания.
		врТабличныйДокумент = Новый ТабличныйДокумент;
		Область             = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
		Для Сч = 1 По ОбластьСправочноПоказатели.ВысотаТаблицы Цикл
			Если Сч < ОбластьСправочноПоказатели.ВысотаТаблицы Тогда
				ВывестиОбласть(врТабличныйДокумент, Область);
			Иначе
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			КонецЕсли;
		КонецЦикла;
		ВывестиОбласть(ОбластьСправочноШтрихкоды, врТабличныйДокумент, Истина, "Присоединить");
		
	ИначеЕсли НЕ ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК Тогда
		
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
	ИначеЕсли ВыводитьQRштрихкодДляСитикард И НЕ СтруктураНастроек.ВыводитьШК Тогда
		
		// Сперва присоединяем пустую строку для выравнивания.
		Область = ПолучитьОбласть(Макет, "ОбластьОсновныеQRШКПустая", СтруктураНастроек, ОбщиеДанные);
		Область.Области.ОбластьОсновныеQRШКПустая.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, Истина, "Присоединить");
		
		// Вывод QR для онлайн-оплаты.
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		Область.Области.ОбластьQRОнлайн.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		ВывестиОбласть(ОбластьСправочноШтрихкоды, Область, , "Присоединить");
		
		ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели = Истина;
		КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели = ОбластьСправочноШтрихкоды.ВысотаТаблицы - ОбластьСправочноПоказатели.ВысотаТаблицы - 1;
		Если КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
			ДобавитьПустыеСтрокиВОбластьСправочноПоказатели = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим пустые строки слева в области Справочно для выравнивания.
	Если ДобавитьПустыеСтрокиВОбластьСправочноПоказатели
	   И КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели > 0 Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноПустаяСтрока", СтруктураНастроек, ОбщиеДанные);
		Для Сч = 1 По КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели Цикл
			Если Сч < КоличествоДобавляемыхСтрокВОбластьСправочноПоказатели Тогда
				ВывестиОбласть(ОбластьСправочноПоказатели, Область);
			Иначе
				ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбластьСправочноИтогоКОплате = Новый ТабличныйДокумент;
	// Выводим строку Итого к оплате слева в области Справочно.
	Если ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели Тогда
		Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноИтогоКОплатеСоСтрахованием", "Раздел2СправочноИтогоКОплате"), СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноИтогоКОплате, Область, Истина);
	КонецЕсли;
	
	// 4. Собираем область "Справочно" Раздела 2 из левой, правой частей и строки с итоговой суммой к оплате.
	ОбластьСправочно = Новый ТабличныйДокумент;
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Область = ПолучитьОбласть(Макет, "Раздел2СправочноПустаяСтрока", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочноПоказатели, Область, Истина);
		
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноПоказатели, Истина, "Присоединить");
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноШтрихкоды, Истина, "Присоединить");
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноИтогоКОплате, Истина);
	Иначе
		
		ВывестиОбласть(ОбластьСправочноПоказатели, ОбластьСправочноИтогоКОплате, Истина);
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноПоказатели, Истина, "Присоединить");
		ВывестиОбласть(ОбластьСправочно, ОбластьСправочноШтрихкоды, Истина, "Присоединить");
	КонецЕсли;
	
	Если НЕ ДобавитьСтрокуИтогоКОплатеВОбластьСправочноПоказатели
	   И ВывестиОбластьРаздел2СправочноДатаОплатыПениКомиссияИтогоКОплате Тогда
		Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел2СправочноДатаОплатыПениКомиссияИтогоКОплатеСоСтрахованием",
										 "Раздел2СправочноДатаОплатыПениКомиссияИтогоКОплате"), СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправочно, Область, Истина);
	КонецЕсли;
	
	// Выводим область с верхней границей для закрытия таблицы "Справочно".
	Область = ПолучитьОбласть(Макет, "Раздел2ГраницаСницу", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьСправочно, Область, Истина);
	
	ВывестиОбласть(ТабличныйДокумент, ОбластьСправочно, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел2Приказ454()

// Формирует табличный документ и выводит в него область, соответствующую начислениям.
//
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью начисления.
//
Функция ПолучитьОбластьРаздел3и4НачисленияПриказ454(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИмяОбластиШапкиРаздела3и4 = ?(ОбщиеДанные.КвитанцияНаКР, "НаименованиеРаздела3НачисленияКапРемонтШапка", "НаименованиеРаздела3и4Шапка");
	
	Область = ПолучитьОбласть(Макет, ИмяОбластиШапкиРаздела3и4, СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияШапка", СтруктураНастроек, ОбщиеДанные); // Шапка таблицы в Разделе3.
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	// Справочную информацию (Раздел4) в квитанции на кап. ремонт не выводим.
	Если Не ОбщиеДанные.КвитанцияНаКР Тогда
		ИмяОбластиШапкиРаздел4 = ?(СтруктураНастроек.ВыводитьОбъемыРасхождения, "Раздел4СправочнаяИнформацияСУчетнымОбъемомШапка", "Раздел4СправочнаяИнформацияБезУчетногоОбъемаШапка");
		
		Область = ПолучитьОбласть(Макет, ИмяОбластиШапкиРаздел4, СтруктураНастроек, ОбщиеДанные); // Шапка таблицы в Разделе4.
		ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	КонецЕсли;
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		ТаблицаКоммунальныхУслуг  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная",      Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		ТаблицаУслугСОИ           = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек);
		ТаблицаПрочихУслуг        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь), СтруктураНастроек);
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаКоммунальные", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаКоммунальныхУслуг, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСодержаниеИРемонт", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаСодержанияИРемонта, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаУслугСОИ.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСОИ", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаУслугСОИ, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаПрочихУслуг, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		КонецЕсли;
	Иначе
		
		ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент);
		
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("КОплате, Начислено, СуммаПовышения, Льгота, Перерасчет, НачисленоИПУ, НачисленоОПУ, ТекстПодвалаСтрахование");
	
	// Получаем итоговые суммы начислений по ИПУ и ОПУ для итоговой строки в подвале таблицы начислений.
	ИтоговаяСуммаИПУ       = 0;
	ИтоговаяСуммаОПУ       = 0;
	ИтоговаяСуммаПовышения = 0;
	
	// Суммируем начисления по услугам, рассчитываемым по ПУ.
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если (ЗначениеЗаполнено(Строка.ВидУслуги) ИЛИ ЗначениеЗаполнено(Строка.Услуга))
		   И (НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост)
		   И (Строка.УслугаПоСчетчикам = Истина ИЛИ Строка.УслугаСоставнаяПоСчетчикам = Истина) Тогда
			ИтоговаяСуммаИПУ       = ИтоговаяСуммаИПУ + Строка.НачисленоИПУ;
			ИтоговаяСуммаОПУ       = ИтоговаяСуммаОПУ + Строка.НачисленоОПУ;
			ИтоговаяСуммаПовышения = ИтоговаяСуммаПовышения + Строка.СуммаПовышения;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураЗаполнения.НачисленоИПУ   = ИтоговаяСуммаИПУ;
	СтруктураЗаполнения.НачисленоОПУ   = ИтоговаяСуммаОПУ;
	СтруктураЗаполнения.СуммаПовышения = ИтоговаяСуммаПовышения;
	
	ИтоговаяСтрокаНачисления = Неопределено;
	Если ТаблицаНачисления.Количество() > 0 Тогда
		ИтоговаяСтрокаНачисления = ТаблицаНачисления[0];
	КонецЕсли;

	ИтоговаяСуммаЛьгота     = 0;
	ИтоговаяСуммаПерерасчет = 0;
	ИтоговаяСуммаКОплате    = 0;
	ИтоговаяСуммаНачислено  = 0;
	Если ИтоговаяСтрокаНачисления <> Неопределено Тогда
		ИтоговаяСуммаЛьгота     = ?(ИтоговаяСтрокаНачисления.Льгота = 0, ТаблицаНачисления.Итог("Льгота"), ИтоговаяСтрокаНачисления.Льгота);
		ИтоговаяСуммаПерерасчет = ИтоговаяСтрокаНачисления.Перерасчет;
		ИтоговаяСуммаКОплате    = ИтоговаяСтрокаНачисления.КОплате;
		ИтоговаяСуммаНачислено  = ИтоговаяСтрокаНачисления.Начислено;
	КонецЕсли;
	
	СтруктураЗаполнения.КОплате    = ИтоговаяСуммаКОплате;
	СтруктураЗаполнения.Начислено  = ИтоговаяСуммаНачислено;
	СтруктураЗаполнения.Льгота     = ИтоговаяСуммаЛьгота;
	СтруктураЗаполнения.Перерасчет = ИтоговаяСуммаПерерасчет;
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		СтруктураЗаполнения.ТекстПодвалаСтрахование = "без учета добр. страхования";
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураЗаполнения);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Для Каждого Строка Из ТаблицаДобровольногоСтрахования Цикл
			Область = ПолучитьОбласть(Макет, "СтрокаДобровольногоСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
		СтруктураЗаполнения.НачисленоИПУ            = СтруктураЗаполнения.НачисленоИПУ + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураЗаполнения.Начислено               = СтруктураЗаполнения.Начислено + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураЗаполнения.КОплате                 = ?(СтруктураЗаполнения.КОплате < 0, 0, СтруктураЗаполнения.КОплате) + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураЗаполнения.ТекстПодвалаСтрахование = "с учетом добр. страхования";
		
		Область = ПолучитьОбласть(Макет, "Раздел3НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураЗаполнения);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "Раздел3НачисленияСправка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел3и4НачисленияПриказ454()

// Выводить таблицу с начислениями в табличный документ.
//
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТабличныйДокумент  - Табличный документ - табличный документ для вывода строк начислений.
//
Процедура ВывестиТаблицуНачисленияПриказ454(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент)
	
	ПредставлениеНуля = "ЧН=0,";
	Для Итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
		ПредставлениеНуля = ПредставлениеНуля + "0";
	КонецЦикла;
	
	СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ПредставлениеНуля + "; ЧГ=0";
	
	Если Не ОбщиеДанные.КвитанцияНаКР Тогда
		Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
			ИмяОбластиСтрокиРаздел4 = "Раздел4СУчетнымОбъемомНачисленияСтрока";
		Иначе
			ИмяОбластиСтрокиРаздел4 = "Раздел4БезУчетногоОбъемаНачисленияСтрока";
		КонецЕсли;
	КонецЕсли;
	
	СписокФорматируемыхПараметров = Новый Структура("КоличествоИПУ, КоличествоОПУ, РазмерНормы, РазмерНормыОбщ,
													|ТекПоказанияИнд, ТекПоказанияОбщ, ОбщРасходИнд, ОбщРасходОбщ");
	
	Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
		СписокФорматируемыхПараметров.Вставить("ОбщУчетныйРасход");
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ТаблицаНачисления Цикл
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидУслуги) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтрокиДляВывода = Новый ТабличныйДокумент; // Общая строка Раздела3 и Раздела4 для вывода в квитанции.
		
		ОбластьНачисленияСтрока = ПолучитьОбласть(Макет, "Раздел3НачисленияСтрока", СтруктураНастроек, ОбщиеДанные);
		ОбластьНачисленияСтрока.Параметры.Заполнить(ТекущаяСтрока);
		
		СтруктураЗаполнения = Новый Структура();
		
		// Для строк детализации по видам тарифа и для итоговой строки детализации
		// по составляющим услугам единицы измерения не выводим.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдИзм) Тогда
			СтруктураЗаполнения.Вставить("ЕдИзм", "Х");
		КонецЕсли;
		
		// Для итоговых строк детализации тариф не выводим.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ТарифДляВывода) Тогда
			СтруктураЗаполнения.Вставить("ТарифДляВывода", "Х");
		КонецЕсли;
		
		// Для строк детализации по видам тарифа итоговые колонки не заполняем.
		Если ТекущаяСтрока.СтрокаДетализацииТариф Тогда
			СтруктураЗаполнения.Вставить("Перерасчет", "Х");
			СтруктураЗаполнения.Вставить("Льгота",     "Х");
			СтруктураЗаполнения.Вставить("КОплате",    "Х");
			СтруктураЗаполнения.Вставить("КОплатеИПУ", "Х");
			СтруктураЗаполнения.Вставить("КОплатеОПУ", "Х");
		КонецЕсли;
		
		// Для строк детализации по составляющим услугам итоговую сумму начисления не выводим.
		Если ТекущаяСтрока.СтрокаДетализацииСост Тогда
			СтруктураЗаполнения.Вставить("КОплате", "Х");
		КонецЕсли;
		
		Если НЕ ТекущаяСтрока.УслугаПоСчетчикам И НЕ ТекущаяСтрока.УслугаСоставнаяПоСчетчикам Тогда
			СтруктураЗаполнения.Вставить("КоличествоОПУ", "Х");
			СтруктураЗаполнения.Вставить("КоличествоИПУ", ?(СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг, ТекущаяСтрока.КоличествоИПУ, "Х"));
			СтруктураЗаполнения.Вставить("НачисленоИПУ",  "Х");
			СтруктураЗаполнения.Вставить("НачисленоОПУ",  "Х");
			СтруктураЗаполнения.Вставить("КОплатеИПУ",    "Х");
			СтруктураЗаполнения.Вставить("КОплатеОПУ",    "Х");
			
			Если СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг Тогда
				КоличествоИПУ = Неопределено;
				Если ТекущаяСтрока.ИмеетсяСоставнойИндивидуальныйРасход Тогда
					КоличествоИПУ = ?(ПустаяСтрока(ТекущаяСтрока.СоставноеКоличествоИнд), "Х", ТекущаяСтрока.СоставноеКоличествоИнд);
				КонецЕсли;
				Если КоличествоИПУ <> Неопределено Тогда
					СтруктураЗаполнения.Вставить("КоличествоИПУ", КоличествоИПУ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтрока.УслугаСоставнаяПоСчетчикам Тогда
			СтруктураЗаполнения.Вставить("КОплатеИПУ",    "Х");
			СтруктураЗаполнения.Вставить("КОплатеОПУ",    "Х");
		КонецЕсли;
		
		// Для услуг не по ПУ проверяем настройку "Заполнять настройку инд. потребления":
		Если НЕ ТекущаяСтрока.УслугаПоСчетчикам И НЕ СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг Тогда
			СтруктураЗаполнения.Вставить("КоличествоИПУ", 0);
		КонецЕсли;
		
		ОбластьНачисленияСтрока.Параметры.Заполнить(СтруктураЗаполнения);
		
		ОтформатироватьПараметрыОбласти(ОбластьНачисленияСтрока, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ВывестиОбласть(ОбластьСтрокиДляВывода, ОбластьНачисленияСтрока, Истина, "Присоединить");
		
		// Справочную информацию в квитанции на кап. ремонт не выводим.
		Если Не ОбщиеДанные.КвитанцияНаКР Тогда
			ОбластьСтрокаРаздел4 = ПолучитьОбласть(Макет, ИмяОбластиСтрокиРаздел4, СтруктураНастроек, ОбщиеДанные);
			ОбластьСтрокаРаздел4.Параметры.Заполнить(ТекущаяСтрока);
			
			// Для услуг не по ПУ проверяем настройку "Заполнять настройку инд. потребления":
			Если НЕ ТекущаяСтрока.УслугаПоСчетчикам И НЕ СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг Тогда
				ОбластьСтрокаРаздел4.Параметры.Заполнить(Новый Структура("РазмерНормы, ОбщРасходИнд", 0, 0));
			КонецЕсли;
			
			ОтформатироватьПараметрыОбласти(ОбластьСтрокаРаздел4, СписокФорматируемыхПараметров, СтрокаФормата);
			ВывестиОбласть(ОбластьСтрокиДляВывода, ОбластьСтрокаРаздел4, Истина, "Присоединить");
		КонецЕсли;
		
		ВывестиОбласть(ТабличныйДокумент, ОбластьСтрокиДляВывода, Истина);
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачисленияПриказ454()

// Формирует табличный документ и выводит в него область Раздел5 и Раздел6.
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТаблицаПерерасчетов - Таблица значений   - таблица с перерасчетами по текущему лицевому счету.
//  ТаблицаРассрочки    - Таблица значений   - таблица рассрочки по текущему лицевому счету.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областями Раздел5 и Раздел6.
//
Функция ПолучитьОбластьРаздел5и6Приказ454(Макет, ТаблицаПерерасчетов, ТаблицаРассрочки, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбластьРаздел5ПерерасчетыПриказ454(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	
	Область = ПолучитьОбластьРаздел6РассрочкиПриказ454(Макет, ТаблицаРассрочки, СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует табличный документ и выводит в него область "Перерасчеты".
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТаблицаПерерасчетов - Таблица значений   - таблица с перерасчетами по текущему лицевому счету.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "Перерасчеты".
//
Функция ПолучитьОбластьРаздел5ПерерасчетыПриказ454(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаПерерасчетов.Количество() = 0 Тогда
		Если СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
			Область = ПолучитьОбласть(Макет, "Раздел5ПерерасчетыШапка", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
		Иначе
			Возврат ТабличныйДокумент;
		КонецЕсли;
	ИначеЕсли ТаблицаПерерасчетов.Количество() > 0 Тогда
		ПервыйОбход = Истина;
		Для Каждого ТекущаяСтрока Из ТаблицаПерерасчетов Цикл
			Если ЗначениеЗаполнено(ТекущаяСтрока.Перерасчет) Тогда
				Если ПервыйОбход Тогда
					ПервыйОбход = Ложь;
					Область = ПолучитьОбласть(Макет, "Раздел5ПерерасчетыШапка", СтруктураНастроек, ОбщиеДанные);
					ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				КонецЕсли;
				
				Область = ПолучитьОбласть(Макет, "Раздел5ПерерасчетыСтрока", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ТекущаяСтрока);
				ВывестиОбласть(ТабличныйДокумент, Область);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел5ПерерасчетыПриказ454()

// Формирует табличный документ и выводит в него область с таблицей рассрочки платежа.
// 
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТаблицаРассрочки    - Таблица значений   - таблица рассрочки по текущему лицевому счету.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с таблицей рассрочки платежа.
//
Функция ПолучитьОбластьРаздел6РассрочкиПриказ454(Макет, ТаблицаРассрочки, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаРассрочки.Количество() = 0 Тогда
		Если СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
			Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаШапка", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
		Иначе
			Возврат ТабличныйДокумент;
		КонецЕсли;
	ИначеЕсли ТаблицаРассрочки.Количество() > 0 Тогда
		ПервыйОбход = Истина;
		Для Каждого ТекущаяСтрока Из ТаблицаРассрочки Цикл
			Если ПервыйОбход Тогда
				ПервыйОбход = Ложь;
				Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаШапка", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ТекущаяСтрока);
			ВывестиОбласть(ТабличныйДокумент, Область);
		КонецЦикла;
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "Раздел6РассрочкаПодвал", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(Новый Структура("КОплате", ТаблицаРассрочки.Итог("КОплате")));
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел6РассрочкиПриказ454()

#КонецОбласти

#Область ФормаПлатДокументСПолямиДляОтметкиБанка1

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (С ПОЛЯМИ ДЛЯ ОТМЕТКИ БАНКА №1)".

// Формирует табличный документ и выводит в него блок "Извещение".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиков - Таблица значений   - таблица с данными о поставщиках услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьИзвещениеРаздел1СПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаПоставщиков)
	
	ОбластьИзвещение = Новый ТабличныйДокумент;
	
	ОбластьСлева = Новый ТабличныйДокумент;
	Область = ПолучитьОбласть(Макет, "ШапкаИзвещения", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьСлева, Область, Истина);
	
	Если ОбщиеДанные.ВыводитьQRштрихкодДляСитикард Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСлева, Область, Истина);
	КонецЕсли;
	
	ВывестиОбласть(ОбластьИзвещение, ОбластьСлева, Истина, "Присоединить");
	
	ОбластьСправа = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
	ВывестиОбласть(ОбластьСправа, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "Раздел1ШапкаСчета", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьСправа, Область, Истина);
	
	врСтруктураПараметров = Новый Структура("ЛицевойСчет, ИдентификаторЛС, КодЛС");
	врСтруктураПараметров.ЛицевойСчет     = ОбщиеДанные.ЛицевойСчет;
	врСтруктураПараметров.ИдентификаторЛС = ОбщиеДанные.ИдентификаторЛС;
	врСтруктураПараметров.КодЛС           = ОбщиеДанные.КодЛС;
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураКР = Новый Структура("РасчетныйСчет, Банк, БИК, КоррСчет, Исполнитель, ИНН");
		врСтруктураКР.РасчетныйСчет  = ОбщиеДанные.РасчетныйСчетКР;
		врСтруктураКР.Банк           = ОбщиеДанные.БанкКР;
		врСтруктураКР.БИК            = ОбщиеДанные.БИККР;
		врСтруктураКР.КоррСчет       = ОбщиеДанные.КоррСчетКР;
		врСтруктураКР.Исполнитель    = ОбщиеДанные.ВладелецСчетаКР;
		врСтруктураКР.ИНН            = ОбщиеДанные.ИННВладельцаСчетаКР;
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "Раздел1СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
	КоординатыПолейОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область, 2);
	
	Если ТаблицаПоставщиков.Количество() = 0 Тогда
		
		Область = ПолучитьОбласть(Макет, "Раздел1СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(врСтруктураПараметров);
		
		врСтруктураПараметровИсполнителя = Новый Структура("НаименованиеПоставщика, ИНН, РасчетныйСчет, Банк, КоррСчет, БИК");
		врСтруктураПараметровИсполнителя.Вставить("ВсегоКОплате", 0);
		
		Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
			врСтруктураПараметровИсполнителя.НаименованиеПоставщика    = ОбщиеДанные.ИсполнительУслуг;
			врСтруктураПараметровИсполнителя.ИНН            = ОбщиеДанные.ИННИсполнителя;
			врСтруктураПараметровИсполнителя.РасчетныйСчет  = ОбщиеДанные.РасчетныйСчетИсполнителя;
			врСтруктураПараметровИсполнителя.Банк           = ОбщиеДанные.БанкИсполнителя;
			врСтруктураПараметровИсполнителя.КоррСчет       = ОбщиеДанные.КоррСчетБанкаИсполнителя;
			врСтруктураПараметровИсполнителя.БИК            = ОбщиеДанные.БИКБанкаИсполнителя;
		Иначе
			врСтруктураПараметровИсполнителя.НаименованиеПоставщика    = ОбщиеДанные.Организация;
			врСтруктураПараметровИсполнителя.ИНН            = ОбщиеДанные.ИННОрганизации;
			врСтруктураПараметровИсполнителя.РасчетныйСчет  = ОбщиеДанные.РасчетныйСчет;
			врСтруктураПараметровИсполнителя.Банк           = ОбщиеДанные.Банк;
			врСтруктураПараметровИсполнителя.КоррСчет       = ОбщиеДанные.КоррСчет;
			врСтруктураПараметровИсполнителя.БИК            = ОбщиеДанные.БИК;
		КонецЕсли;
		
		Область.Параметры.Заполнить(врСтруктураПараметровИсполнителя);
		
		Если ОбщиеДанные.КвитанцияНаКР Тогда
			Область.Параметры.Заполнить(врСтруктураКР);
		КонецЕсли;
		
		ВремТабДок = КорректироватьВыводСтрокОбъединением(Макет, "Раздел1СчетаСтрока", Область, КоординатыПолейОбъединения, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправа, ВремТабДок, Истина);
		
	Иначе
		Область = ПолучитьОбласть(Макет, "Раздел1СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
		КоординатыПолейОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область, 2);
		Для Каждого ТекущаяСтрока Из ТаблицаПоставщиков Цикл
			Область = ПолучитьОбласть(Макет, "Раздел1СчетаСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ТекущаяСтрока);
			Область.Параметры.Заполнить(врСтруктураПараметров);
			Область.Параметры.Заполнить(Новый Структура("ВидыУслугСтрокой",
							?(СтруктураНастроек.УслугиИсполнителя = "Выводить список услуг",
								СтрСоединить(ТекущаяСтрока.ВидыУслуг, ", "),
								СтруктураНастроек.СтрокаУслуг)));
			Если ОбщиеДанные.КвитанцияНаКР Тогда
				Область.Параметры.Заполнить(врСтруктураКР);
			КонецЕсли;
			ВремТабДок = КорректироватьВыводСтрокОбъединением(Макет, "Раздел1СчетаСтрока", Область, КоординатыПолейОбъединения, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправа, ВремТабДок, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "Раздел1ПодвалСчета", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьСправа, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьШК Тогда
		
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел1ПодвалКвитанцииШКСоСтрахованием", "Раздел1ПодвалКвитанцииШК"), СтруктураНастроек, ОбщиеДанные);
		Иначе
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "Раздел1ПодвалКвитанцииQRШКСоСтрахованием", "Раздел1ПодвалКвитанцииQRШК"), СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
		
		// Производится заполнение стандартных параметров области штрихкода для формы платежного документа "ПЛАТ. ДОКУМЕНТ (С ПОЛЯМИ ДЛЯ ОТМЕТКИ БАНКА №1)",
		// а также стандартных параметров из других форм платежных документов, 
		// которые могут быть добавлены в область вывода штрихкода в пользовательском макете печати.
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправа, Область, Истина);
		
		Если ТаблицаПоставщиков.Количество() > 4 Или ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Или СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
			Область = ПолучитьОбласть(Макет, "Раздел1ПодвалИзвещенияПустаяУзкая", СтруктураНастроек, ОбщиеДанные);
		Иначе
			Область = ПолучитьОбласть(Макет, "Раздел1ПодвалИзвещенияПустаяБольшая", СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
		ВывестиОбласть(ОбластьСправа, Область, Истина);
	Иначе
		Область = ПолучитьОбласть(Макет, "Раздел1ПодвалСчетаЗакрытиеСнизу", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправа, Область, Истина);
		Область = ПолучитьОбласть(Макет, "Раздел1ПодвалИзвещенияПустаяБольшая", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправа, Область, Истина);
	КонецЕсли;
	
	ВывестиОбласть(ОбластьИзвещение, ОбластьСправа, Истина, "Присоединить");
	
	Возврат ОбластьИзвещение;
	
КонецФункции // ПолучитьОбластьИзвещениеРаздел1СПолямиБанка1()

// Формирует табличный документ и выводит в него блок "Квитанция".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьКвитанцияРаздел2СПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "КвитанцияШапкаРаздел2", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров = Новый Структура;
		врСтруктураПараметров.Вставить("РасчетныйСчет",      ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("Банк",               ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("КоррСчет",           ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("БИК",                ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("Организация",        ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("ЮрАдресОрганизации", ОбщиеДанные.ЮрАдресИсполнителяКР);
		врСтруктураПараметров.Вставить("ИННОрганизации",     ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("Телефон",            ОбщиеДанные.ТелефонИсполнителяКР);
		
		Если ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Контрагенты") Тогда
			врСтруктураПараметров.Вставить("ДопИнформация",          ОбщиеДанные.ДопИнформацияИсполнителяКР);
		ИначеЕсли ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Организации") Тогда
			врСтруктураПараметров.Вставить("ДопИнформация",          ОбщиеДанные.ДопИнформацияКР);
		КонецЕсли;
		
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации", "");
		
		Область.Параметры.Заполнить(врСтруктураПараметров);
	Иначе
		Область.Параметры.Заполнить(Новый Структура("ДопИнформация", ОбщиеДанные.ДопИнформация));
	КонецЕсли;
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) И НЕ ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияИсполнительРаздел2", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
	Иначе
		Область = ПолучитьОбласть(Макет, "КвитанцияПодвалРаздел2", СтруктураНастроек, ОбщиеДанные);
	КонецЕсли;
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьКвитанцияРаздел2СПолямиБанка1()

// Формирует табличный документ и выводит в него таблицу начисления.
//
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табичный документ с таблицей начисления.
//
Функция ПолучитьОбластьРаздел3СНачислениямиСПолямиБанка1(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования)
	
	ОбластьНачисления = Новый ТабличныйДокумент;
	
	Если ОбщиеДанные.КвитанцияПоПени Тогда
		Если ОбщиеДанные.КвитанцияНаКР Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3ПениШапкаНаименованиеРазделаНачисленияКапРемонт", СтруктураНастроек, ОбщиеДанные);
		Иначе
			Область = ПолучитьОбласть(Макет, "Раздел3ПениШапкаНаименованиеРазделаНачисления", СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
	Иначе
		Если ОбщиеДанные.КвитанцияНаКР Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3ШапкаНаименованиеРазделаНачисленияКапРемонт", СтруктураНастроек, ОбщиеДанные);
		Иначе
			Область = ПолучитьОбласть(Макет, "Раздел3ШапкаНаименованиеРазделаНачисления", СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
	КонецЕсли;
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьНачисления, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "Раздел3ШапкаНачисления", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьНачисления, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "Раздел3СтрокаНачСальдо", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
		Если СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаОплатыВключенныеВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
			
			Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
				Область = ПолучитьОбласть(Макет, "Раздел3СтрокаРассрочкаВключеннаяВНачСальдо", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				ВывестиОбласть(ОбластьНачисления, Область, Истина);
			КонецЕсли;
			
			Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
				Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСтрахованиеВключенноеВНачСальдо", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				ВывестиОбласть(ОбластьНачисления, Область, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		ТаблицаКоммунальныхУслуг  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления,
																					Новый Структура("Коммунальная", Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления,
																					Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		
		ТаблицаУслугСОИ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Коммунальная",      Ложь);
		Отбор.Вставить("СодержаниеИРемонт", Ложь);
		
		ТаблицаПрочихУслуг = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления,
																				Отбор, СтруктураНастроек);
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаКоммунальные", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
			
			ВывестиТаблицуНачисленияПДСПолямиБанка1(Макет, ТаблицаКоммунальныхУслуг, ОбщиеДанные, СтруктураНастроек, ОбластьНачисления);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСодержаниеИРемонт", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
			
			ВывестиТаблицуНачисленияПДСПолямиБанка1(Макет, ТаблицаСодержанияИРемонта, ОбщиеДанные, СтруктураНастроек, ОбластьНачисления);
		КонецЕсли;
		
		Если Не ТаблицаУслугСОИ.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаСОИ", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
			
			ВывестиТаблицуНачисленияПДСПолямиБанка1(Макет, ТаблицаУслугСОИ, ОбщиеДанные, СтруктураНастроек, ОбластьНачисления);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
			
			ВывестиТаблицуНачисленияПДСПолямиБанка1(Макет, ТаблицаПрочихУслуг, ОбщиеДанные, СтруктураНастроек, ОбластьНачисления);
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияПДСПолямиБанка1(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, ОбластьНачисления);
	КонецЕсли;
	
	// Находим итоговые суммы начислений по ИПУ и ОПУ.
	ИтоговаяСуммаИПУ = 0;
	ИтоговаяСуммаОПУ = 0;
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) ИЛИ ЗначениеЗаполнено(Строка.Услуга) Тогда
			Если НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост Тогда
				Если Строка.УслугаПоСчетчикам = Истина ИЛИ Строка.УслугаСоставнаяПоСчетчикам = Истина Тогда
					ИтоговаяСуммаИПУ = ИтоговаяСуммаИПУ + Строка.НачисленоИПУ;
					ИтоговаяСуммаОПУ = ИтоговаяСуммаОПУ + Строка.НачисленоОПУ;
				Иначе
					ИтоговаяСуммаИПУ = ИтоговаяСуммаИПУ + Строка.Начислено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем параметры получеными значениями итоговой строки.
	Область = ПолучитьОбласть(Макет, "Раздел3ПодвалНачисления", СтруктураНастроек, ОбщиеДанные);
	
	СтруктураПараметровПодвалНачисления = Новый Структура("КОплате, Льгота, Перерасчет, НачисленоИПУ, НачисленоОПУ, СуммаПовышения, ТекстПодвалаСтрахование");
	
	Если НЕ ТаблицаНачисления.Количество() = 0
	   И ТаблицаНачисления.Получить(0).Льгота = 0 Тогда
		ТаблицаНачисления.Получить(0).Льгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	СтруктураПараметровПодвалНачисления.КОплате        = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).КОплате);
	СтруктураПараметровПодвалНачисления.Льгота         = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).Льгота);
	СтруктураПараметровПодвалНачисления.Перерасчет     = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).Перерасчет);
	СтруктураПараметровПодвалНачисления.НачисленоИПУ   = ИтоговаяСуммаИПУ;
	СтруктураПараметровПодвалНачисления.НачисленоОПУ   = ИтоговаяСуммаОПУ;
	СтруктураПараметровПодвалНачисления.СуммаПовышения = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).СуммаПовышения);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		СтруктураПараметровПодвалНачисления.ТекстПодвалаСтрахование = " без учета добровольного страхования";
	КонецЕсли;
	
	Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
	ВывестиОбласть(ОбластьНачисления, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Для Каждого Строка Из ТаблицаДобровольногоСтрахования Цикл
			Область = ПолучитьОбласть(Макет, "СтрокаДобровольногоСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
		КонецЦикла;
		
		СтруктураПараметровПодвалНачисления.НачисленоИПУ            = СтруктураПараметровПодвалНачисления.НачисленоИПУ + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураПараметровПодвалНачисления.КОплате                 = ?(СтруктураПараметровПодвалНачисления.КОплате < 0, 0, СтруктураПараметровПодвалНачисления.КОплате) + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураПараметровПодвалНачисления.ТекстПодвалаСтрахование = " с учетом добровольного страхования";
		
		Область = ПолучитьОбласть(Макет, "Раздел3ПодвалНачисления", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		Область = ПолучитьОбласть(Макет, "Раздел3СтрокаПени", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо И Не СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "Раздел3СтрокаОплаты", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
			
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаОстаткаПоРассрочке", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаОстаткаПоСтрахованию", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не (СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать") Тогда
		Область = ПолучитьОбласть(Макет, "Раздел3СтрокаКомиссииБанка", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
	КонецЕсли;
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Область = ПолучитьОбласть(Макет, "Раздел3ПодвалБезСтрахования", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "Раздел3ПодвалСоСтрахованием", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
	Иначе
		Область = ПолучитьОбласть(Макет, "Раздел3Подвал", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьНачисления, Область, Истина);
	КонецЕсли;
	
	Возврат ОбластьНачисления;
	
КонецФункции // ПолучитьОбластьРаздел3СНачислениямиСПолямиБанка1()

// Выводить таблицу с начислениями в табличный документ.
//
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ОбластьНачисления  - Табличный документ - область для вывода таблицы начислений.
//
Процедура ВывестиТаблицуНачисленияПДСПолямиБанка1(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, ОбластьНачисления)
	
	СтрокаФормата                 = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧГ=0";
	СписокФорматируемыхПараметров = Новый Структура("КоличествоИПУ, КоличествоОПУ");
	
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) И Строка.УслугаСНачислениями = Истина Тогда
			
			Область = ПолучитьОбласть(Макет, "Раздел3СтрокаНачисления", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			
			СтруктураПараметровСтрокиНачисления = Новый Структура();
			
			// Для строк детализации по видам тарифа и для итоговой строки детализации
			// по составляющим услугам единицы измерения не выводим.
			Если Не ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ЕдИзм", "Х");
			КонецЕсли;
			
			// Для итоговых строк детализации тариф не выводим.
			Если Не ЗначениеЗаполнено(Строка.ТарифДляВывода) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ТарифДляВывода", "Х");
			КонецЕсли;
			
			// Для строк детализации по видам тарифа итоговые колонки не заполняем.
			Если Строка.СтрокаДетализацииТариф Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("Перерасчет", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Льгота",     "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате",    "Х");
			КонецЕсли;
			
			Если Строка.СтрокаДетализацииСост Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате", "Х");
			КонецЕсли;
			
			Если НЕ Строка.УслугаПоСчетчикам И НЕ Строка.УслугаСоставнаяПоСчетчикам Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КоличествоОПУ", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КоличествоИПУ", ?(СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг, Строка.КоличествоИПУ, "Х"));
				СтруктураПараметровСтрокиНачисления.Вставить("НачисленоОПУ",  "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("НачисленоИПУ",  Строка.Начислено);
				
				Если СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг И Строка.ИмеетсяСоставнойИндивидуальныйРасход Тогда
					СтруктураПараметровСтрокиНачисления.Вставить("КоличествоИПУ", ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "Х", Строка.СоставноеКоличествоИнд));
				КонецЕсли;
				
			КонецЕсли;
			
			Область.Параметры.Заполнить(СтруктураПараметровСтрокиНачисления);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ВывестиОбласть(ОбластьНачисления, Область, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачисленияПДСПолямиБанка1()

// Формирует табличный документ и выводить в него таблицу справочной информации.
//
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ТаблицаНачисления  - Таблица значений   - таблица начисления по текущему лицевому счету.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с таблицей справки.
//
Функция ПолучитьОбластьРаздел4СправкиСПолямиБанка1(Макет, ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
		Область = ПолучитьОбласть(Макет, "Раздел4ШапкаСправкиСУчетнымОбъемом", СтруктураНастроек, ОбщиеДанные);
	Иначе
		Область = ПолучитьОбласть(Макет, "Раздел4ШапкаСправкиБезУчетногоОбъема", СтруктураНастроек, ОбщиеДанные);
	КонецЕсли;
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧГ=0";
	
	СписокФорматируемыхПараметров = Новый Структура("РазмерНормы, РазмерНормыОбщ, ПредПоказанияИнд, ПредПоказанияОбщ,
													|ТекПоказанияИнд, ТекПоказанияОбщ, ОбщРасходИнд, ОбщРасходОбщ");
	
	Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
		СписокФорматируемыхПараметров.Вставить("ОбщУчетныйРасход");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) И (Строка.УслугаПоСчетчикам Или (ЗначениеЗаполнено(Строка.УслугаСоставнаяПоСчетчикам)
		   И Строка.УслугаСоставнаяПоСчетчикам) Или ЗначениеЗаполнено(Строка.РазмерНормы)
		   ИЛИ (Строка.ЭтоКоммунальнаяУслуга И (НЕ Строка.ОбщРасходИнд = 0 ИЛИ НЕ Строка.ОбщРасходОбщ = 0))) Тогда
			// Если услуга составляющая и рассчитывается по счетчикам, то показания вводятся по счетчику, который установлен на составную услугу.
			// Т.е. по составляющим услугам показаний быть не может.
			Если Строка.СтрокаДетализацииСост Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
				Область = ПолучитьОбласть(Макет, "Раздел4СтрокаСправкиСУчетнымОбъемом", СтруктураНастроек, ОбщиеДанные);
			Иначе
				Область = ПолучитьОбласть(Макет, "Раздел4СтрокаСправкиБезУчетногоОбъема", СтруктураНастроек, ОбщиеДанные);
			КонецЕсли;
			
			Область.Параметры.Заполнить(Строка);
			
			Если ЗначениеЗаполнено(Строка.УслугаСоставнаяПоСчетчикам) И Строка.УслугаСоставнаяПоСчетчикам Тогда
				Область.Параметры.Заполнить(Новый Структура("ВидДляВывода", Строка(Строка.ВидУслуги)));
			КонецЕсли;
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел4СправкиСПолямиБанка1()

// Формирует табличный документ и выводить в него таблицу перерасчетов.
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТаблицаПерерасчетов - Таблица значений   - таблица с перерасчетами по текущему лицевому счету.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с таблицей перерасчетов.
//
Функция ПолучитьОбластьРаздел5ПерерасчетыСПолямиБанка1(Макет, ТаблицаПерерасчетов, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Раздел5ШапкаПерерасчетов", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Для Каждого Строка Из ТаблицаПерерасчетов Цикл
		Область = ПолучитьОбласть(Макет, "Раздел5СтрокаПерерасчетов", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Строка);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздел5ПерерасчетыСПолямиБанка1()

#КонецОбласти

#Область ФормаПлатДокументСПолямиДляОтметкиБанка2

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (С ПОЛЯМИ ДЛЯ ОТМЕТКИ БАНКА №2)".

// Формирует табличный документ и выводит в него блок "Извещение".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьИзвещенияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ОбластьИзвещение = Новый ТабличныйДокумент;
	
	ОбластьСлева = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ШапкаИзвещения", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьСлева, Область, Истина);
	
	Если ОбщиеДанные.ВыводитьQRштрихкодДляСитикард Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСлева, Область, Истина);
	КонецЕсли;
	
	ВывестиОбласть(ОбластьИзвещение, ОбластьСлева, Истина, "Присоединить");
	
	ОбластьСправа = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ОбластьИзвещенияПлатежныеРеквизиты", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	врСтруктураПараметров = Новый Структура;
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("ПолучательПлатежа",  ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("АдресПолучателя",    ОбщиеДанные.ЮрАдресИсполнителяКР);
		врСтруктураПараметров.Вставить("ЭлЯщикПолучателя",   ОбщиеДанные.ЭлЯщикПолучателяКР);
		врСтруктураПараметров.Вставить("ИННПолучателя",      ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("КПППолучателя",      ОбщиеДанные.КППВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("СайтОрганизации",    "");
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчетИсполнителя);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.БанкИсполнителя);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИКБанкаИсполнителя);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчетБанкаИсполнителя);
		врСтруктураПараметров.Вставить("СайтОрганизации",    "");
	Иначе
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчет);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.Банк);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИК);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчет);
	КонецЕсли;
	
	Область.Параметры.Заполнить(врСтруктураПараметров);
	ВывестиОбласть(ОбластьСправа, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьВсегоКОплатеСоСтрахованием", СтруктураНастроек, ОбщиеДанные);
	Иначе
		Область = ПолучитьОбласть(Макет, "ОбластьВсегоКОплате", СтруктураНастроек, ОбщиеДанные);
	КонецЕсли;
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	ВывестиОбласть(ОбластьСправа, Область, Истина);
	ВывестиОбласть(ОбластьИзвещение, ОбластьСправа, Истина, "Присоединить");
	
	Если СтруктураНастроек.ВыводитьШК Тогда
		
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
			ИмяОбласти = ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьШКСоСтрахованием", "ОбластьШК");
		Иначе
			ИмяОбласти = ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRШКСоСтрахованием", "ОбластьQRШК");
		КонецЕсли;
		Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
		
		// Производится заполнение стандартных параметров области штрихкода для формы платежного документа "ПЛАТ. ДОКУМЕНТ (С ПОЛЯМИ ДЛЯ ОТМЕТКИ БАНКА №2)",
		// а также стандартных параметров из других форм платежных документов,
		// которые могут быть добавлены в область вывода штрихкода в пользовательском макете печати.
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьИзвещение, Область, Истина);
		
	Иначе
		Область = ПолучитьОбласть(Макет, "СтрокаРазделитель", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьИзвещение, Область, Истина);
	КонецЕсли;
	
	Возврат ОбластьИзвещение;
	
КонецФункции // ПолучитьОбластьИзвещенияСПолямиБанка2()

// Формирует таблицу показаний счетчиков и выводит в него блок "Извещение".
// 
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ТаблицаСчетчиков  - Таблица значений   - таблица со счетчиками.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с таблицей показаний счетчиков блока "Извещение".
//
Функция ПолучитьОбластьИзвещенияПоказанияСчетчиковСПолямиБанка2(Макет, ТаблицаСчетчиков, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЕстьСчетчики = ?(ТаблицаСчетчиков.Количество() = 0, Ложь, Истина);
	
	Если ЕстьСчетчики Тогда
		Область = ПолучитьОбласть(Макет, "ШапкаСчетчиков", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СтрокаФорматаПоказания        = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧГ=0";
		СписокФорматируемыхПараметров = Новый Структура("ПредыдущееПоказание");
		
		Для Каждого СтрокаСчетчиков Из ТаблицаСчетчиков Цикл
			Область = ПолучитьОбласть(Макет, "СтрокаСчетчиков", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Новый Структура("ПредыдущееПоказание", СтрокаСчетчиков.ПредыдущееПоказаниеДн));
			
			Постфикс = ?(СтрокаСчетчиков.Тарифность <> "1", " (дн.)", "");
			ЗаполнитьПараметрИндивидуальногоСчетчика(Область, Постфикс, СтрокаСчетчиков);
			
			Область.Параметры.Заполнить(Новый Структура("ЗаводскойНомер", СтрокаСчетчиков.ЗаводскойНомер));
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФорматаПоказания);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			Если СтрокаСчетчиков.Тарифность <> "1" Тогда
				Область = ПолучитьОбласть(Макет, "СтрокаСчетчиков", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(Новый Структура("ПредыдущееПоказание", СтрокаСчетчиков.ПредыдущееПоказаниеНч));
				
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (нч.)", СтрокаСчетчиков);
				
				Область.Параметры.Заполнить(Новый Структура("ЗаводскойНомер", СтрокаСчетчиков.ЗаводскойНомер));
				
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФорматаПоказания);
				
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			Если СтрокаСчетчиков.Тарифность = "3" Тогда
				Область = ПолучитьОбласть(Макет, "СтрокаСчетчиков", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(Новый Структура("ПредыдущееПоказание", СтрокаСчетчиков.ПредыдущееПоказаниеПк));
				
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (пик.)", СтрокаСчетчиков);
				
				Область.Параметры.Заполнить(Новый Структура("ЗаводскойНомер", СтрокаСчетчиков.ЗаводскойНомер));
				
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФорматаПоказания);
				
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "ПодвалИзвещения", СтруктураНастроек, ОбщиеДанные);
	Если ЕстьСчетчики Тогда
		Область.Параметры.Заполнить(Новый Структура("ДатаСнятияПоказаний", "Дата снятия показаний _____________________"));
	КонецЕсли;
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьИзвещенияПоказанияСчетчиковСПолямиБанка2()

// Формирует табличный документ и выводит в него блок "Квитанция".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьКвитанцияСПолямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЗаполнитьШаблонПлощадиПомещенияВМакете(ОбщиеДанные, СтруктураНастроек);
	
	Область = ПолучитьОбласть(Макет, "ШапкаКвитанции", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	врСтруктураПараметров = Новый Структура;
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("ПолучательПлатежа",  ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("АдресПолучателя",    ОбщиеДанные.ЮрАдресИсполнителяКР);
		врСтруктураПараметров.Вставить("ЭлЯщикПолучателя",   ОбщиеДанные.ЭлЯщикПолучателяКР);
		врСтруктураПараметров.Вставить("ИННПолучателя",      ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("КПППолучателя",      ОбщиеДанные.КППВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("СайтОрганизации",    "");
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчетИсполнителя);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.БанкИсполнителя);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИКБанкаИсполнителя);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчетБанкаИсполнителя);
		врСтруктураПараметров.Вставить("СайтОрганизации",    "");
	Иначе
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчет);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.Банк);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИК);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчет);
	КонецЕсли;
	
	Область.Параметры.Заполнить(врСтруктураПараметров);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаНачальногоСальдо", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Если СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОплатыВключенныеВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
				Область = ПолучитьОбласть(Макет, "СтрокаОстаткаПоРассрочке", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
				Область = ПолучитьОбласть(Макет, "СтрокаОплатаПоСтрахованию", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "СтрокаИтогаНачисления", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо И Не СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаОплаты", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОстаткаПоРассрочке", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОплатаПоСтрахованию", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не (СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать") Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаКомиссииБанка", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ПодвалКвитанцииСоСтрахованием", "ПодвалКвитанции"), СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьКвитанцияСПолямиБанка2()

// Формирует табличный документ и выводит в него блок с таблицами начислений.
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления  - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьНачисленияСполямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТаблицаЖилищные = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления, СтруктураНастроек, Новый Структура("УслугаПоСчетчикам", Ложь));
	
	Если Не ТаблицаЖилищные.Количество() = 0 Или Не ТаблицаДобровольногоСтрахования.Количество() = 0 Тогда
		Область = ПолучитьОбласть(Макет, "ШапкаНачисленияБезСчетчиков", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Для Каждого СтрокаНачисления Из ТаблицаЖилищные Цикл
			// Итоговую строку из ТЗ начислений не выводим.
			Если Не ЗначениеЗаполнено(СтрокаНачисления.ВидУслуги) Тогда
				Продолжить;
			КонецЕсли;
			Область = ПолучитьОбласть(Макет, "СтрокаНачисленияБезСчетчиков", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(СтрокаНачисления);
			
			СтруктураПараметровСтрокиНачисления = Новый Структура();
			
			Если СтрокаНачисления.СтрокаДетализацииСост Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате", "Х");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаНачисления.ЕдИзм) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ТарифДляВывода", "Х");
			КонецЕсли;
			
			Область.Параметры.Заполнить(СтруктураПараметровСтрокиНачисления);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
		СтруктураПараметровПодвала = Новый Структура("КОплате, ТекстПодвалаСтрахование", 0, "");
		СтруктураПараметровПодвала.КОплате = ?(ТаблицаЖилищные.Количество() = 0, 0, ТаблицаЖилищные[0].Коплате);
		
		Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
			СтруктураПараметровПодвала.ТекстПодвалаСтрахование = "без учета добровольного страхования";
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "ПодвалНачисленияБезСчетчиков", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураПараметровПодвала);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
			Для Каждого Строка Из ТаблицаДобровольногоСтрахования Цикл
				Область = ПолучитьОбласть(Макет, "СтрокаДобровольногоСтрахования", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				Область.Параметры.Заполнить(Строка);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЦикла;
			
			СтруктураПараметровПодвала.ТекстПодвалаСтрахование = "с учетом добровольного страхования";
			СтруктураПараметровПодвала.КОплате                 = ?(СтруктураПараметровПодвала.КОплате < 0, 0, СтруктураПараметровПодвала.КОплате) + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
			
			Область = ПолучитьОбласть(Макет, "ПодвалНачисленияБезСчетчиков", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(СтруктураПараметровПодвала);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьНачисленияСполямиБанка2()

// Формирует табличный документ и выводит в него блок с таблицами начислений.
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ОбщиеДанные        - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления  - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьНачисленияПУСполямиБанка2(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТаблицаКоммунальные = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления, СтруктураНастроек, Новый Структура("УслугаПоСчетчикам", Истина), Истина);
	
	Если Не ТаблицаКоммунальные.Количество() = 0 Тогда
		Область = ПолучитьОбласть(Макет, "ШапкаНачисленияСоСчетчиками", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СтрокаФормата                 = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧГ=0";
		СписокФорматируемыхПараметров = Новый Структура("КоличествоИПУ, КоличествоОПУ, ПредПоказанияИнд, ТекПоказанияИнд");
		
		Для Каждого СтрокаНачисления Из ТаблицаКоммунальные Цикл 
			// Итоговую строку из ТЗ начислений не выводим.
			Если Не ЗначениеЗаполнено(СтрокаНачисления.ВидУслуги) 
			 ИЛИ (СтрокаНачисления.Льгота = 0 И СтрокаНачисления.Перерасчет = 0 И СтрокаНачисления.НачисленоИПУ = 0 И СтрокаНачисления.НачисленоОПУ = 0
			 И Не ЗначениеЗаполнено(СтрокаНачисления.ПредПоказанияИнд) И Не ЗначениеЗаполнено(СтрокаНачисления.ТекПоказанияИнд)) Тогда
				Продолжить;
			КонецЕсли;
			
			Область = ПолучитьОбласть(Макет, "СтрокаНачисленияСоСчетчиками", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(СтрокаНачисления);
			
			СтруктураПараметровСтрокиНачисления = Новый Структура();
			
			Если СтрокаНачисления.СтрокаДетализацииТариф Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("Льгота",     "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Перерасчет", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате",    "Х");
			КонецЕсли;
			
			Если СтрокаНачисления.СтрокаДетализацииСост Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате", "Х");
			КонецЕсли;
			
			Область.Параметры.Заполнить(СтруктураПараметровСтрокиНачисления);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
		Область = ПолучитьОбласть(Макет, "ПодвалНачисленияСоСчетчиками", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ТаблицаКоммунальные.Получить(0));
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	СтруктураПараметровПодвала = Новый Структура("ИтогоНачислено, ТекстПодвалаСтрахование", 0, "");
	Попытка
		СтруктураПараметровПодвала.ИтогоНачислено = Число(ОбщиеДанные.ИтогоНачислено);
	Исключение
		СтруктураПараметровПодвала.ИтогоНачислено = 0;
	КонецПопытки;
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		СтруктураПараметровПодвала.ТекстПодвалаСтрахование = "без учета добровольного страхования";
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "ПодвалНачисления", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураПараметровПодвала);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		СтруктураПараметровПодвала.ТекстПодвалаСтрахование = "с учетом добровольного страхования";
		СтруктураПараметровПодвала.ИтогоНачислено = СтруктураПараметровПодвала.ИтогоНачислено + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		
		Область = ПолучитьОбласть(Макет, "ПодвалНачисления", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураПараметровПодвала);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьНачисленияСполямиБанка2()

// Формирует табличный документ и выводит в него блок с таблицей "Справочная информация".
// 
// Параметры:
//  Макет              - Табличный документ - макет платежного документа.
//  ТаблицаНачисления  - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  СтруктураНастроек  - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьСправкиСПолямиБанка2(Макет, ТаблицаНачисления, СтруктураНастроек, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТаблицаСправки = ТаблицаНачисления.СкопироватьКолонки();
	
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(СтрокаНачисления.ВидУслуги)
		   И (СтрокаНачисления.УслугаПоСчетчикам 
		 Или (ЗначениеЗаполнено(СтрокаНачисления.УслугаСоставнаяПоСчетчикам)
		   И СтрокаНачисления.УслугаСоставнаяПоСчетчикам) 
		 Или ЗначениеЗаполнено(СтрокаНачисления.РазмерНормы)
		 ИЛИ (СтрокаНачисления.ЭтоКоммунальнаяУслуга И (НЕ СтрокаНачисления.ОбщРасходИнд = 0 ИЛИ НЕ СтрокаНачисления.ОбщРасходОбщ = 0))) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСправки.Добавить(), СтрокаНачисления);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСправки.Количество() > 0 Тогда
		
		Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
			ИмяОбласти = "ШапкаСправочнойИнформацииСУчетнымОбъемом";
		Иначе
			ИмяОбласти = "ШапкаСправочнойИнформацииБезУчетногоОбъема";
		КонецЕсли;
		Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧГ=0";
		
		СписокФорматируемыхПараметров = Новый Структура("РазмерНормы, РазмерНормыОбщ, ОбъемПотребленияИПУ,
														|ОбъемПотребленияОПУ, ОбщРасходИнд, ОбщРасходОбщ");
		
		Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
			СписокФорматируемыхПараметров.Вставить("ОбщУчетныйРасход");
		КонецЕсли;
		
		Для Каждого СтрокаСправки Из ТаблицаСправки Цикл
			
			Если СтрокаСправки.СтрокаДетализацииСост Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
				ИмяОбласти = "СтрокаСправочнойИнформацииСУчетнымОбъемом";
			Иначе
				ИмяОбласти = "СтрокаСправочнойИнформацииБезУчетногоОбъема";
			КонецЕсли;
			Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(СтрокаСправки);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьСправкиСПолямиБанка2()

#КонецОбласти

#Область ФормаПлатДокументПермскийКрай

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (ПЕРМСКИЙ КРАЙ)".

// Формирует табличный документ и выводить в него область "Извещение".
//
// Параметры:
//  Макет                      - Табличный документ - макет платежного документа.
//  ОбщиеДанные                - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек          - Структура          - структура с настройками формирования квитанций.
//  ТекущаяКвитанцияПоПеням    - Булево             - признак квитанции по пеням.
//  ТаблицаВсехНачислений      - Таблица значений   - таблица начисления по текущему лицевому счету.
//  ТаблицаВсехСчетчиков       - Таблица значений   - таблица с информацией о счетчиках по текущему лицевому счету.
//  ТаблицаСведений            - Таблица значений   - таблица с информацией о лицевых счетах с итогами по зданиям.
//  ТаблицаУслугКПУ            - Таблица значений   - таблица с общедомовыми услугами.
//  БазаРаспределенияПоУслугам - Таблица значений   - таблица с распределениями по услугам.
//  ТаблицаУслугДляПерми       - Таблица значений   - таблица со сведениями об услугах.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "Извещение".
//
Функция ПолучитьОбластьИзвещениеПермь(Макет, ОбщиеДанные, СтруктураНастроек,
									  ТекущаяКвитанцияПоПеням = Ложь,
									  ТаблицаВсехНачислений = Неопределено,
									  ТаблицаВсехСчетчиков = Неопределено,
									  ТаблицаУслугКПУ = Неопределено,
									  БазаРаспределенияПоУслугам,
									  ТаблицаУслугДляПерми = Неопределено)
	
	ОбластьИзвещение = Новый ТабличныйДокумент;
	
	ТаблицаКоэффициентов = Новый ТаблицаЗначений;
	ТаблицаКоэффициентов.Колонки.Добавить("Услуга",                            Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаКоэффициентов.Колонки.Добавить("ВидТарифа",                         Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	ТаблицаКоэффициентов.Колонки.Добавить("НастройкаОграниченияОДННормативом", Новый ОписаниеТипов("Булево"));
	ТаблицаКоэффициентов.Колонки.Добавить("Коэффициент",                       Новый ОписаниеТипов("Число"));
	
	ОбластьСлева = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ИзвещениеШапка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьСлева, Область, Истина);
	
	Если ОбщиеДанные.ВыводитьQRштрихкодДляСитикард Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСлева, Область, Истина);
	КонецЕсли;
	
	врСтруктураПараметров = Новый Структура;
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров.Вставить("РасчетныйСчет",          ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("Банк",                   ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("БИК",                    ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("КоррСчет",               ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("Организация",            ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("ИННОрганизации",         ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("КППОрганизации",         ОбщиеДанные.КППВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("Телефон",                ОбщиеДанные.ТелефонИсполнителяКР);
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации", "");
		врСтруктураПараметров.Вставить("ДопИнформация",          ОбщиеДанные.ДопИнформацияКР);
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		врСтруктураПараметров.Вставить("РасчетныйСчет",      ОбщиеДанные.РасчетныйСчетИсполнителя);
		врСтруктураПараметров.Вставить("Банк",               ОбщиеДанные.БанкИсполнителя);
		врСтруктураПараметров.Вставить("БИК",                ОбщиеДанные.БИКБанкаИсполнителя);
		врСтруктураПараметров.Вставить("КоррСчет",           ОбщиеДанные.КоррСчетБанкаИсполнителя);
		врСтруктураПараметров.Вставить("Организация",        ОбщиеДанные.ИсполнительУслуг);
		врСтруктураПараметров.Вставить("ИННОрганизации",     ОбщиеДанные.ИННИсполнителя);
		врСтруктураПараметров.Вставить("КППОрганизации",     ОбщиеДанные.КППИсполнителя);
		врСтруктураПараметров.Вставить("Телефон",            ОбщиеДанные.ТелефонИсполнителя);
		врСтруктураПараметров.Вставить("СайтОрганизации",    "");
		врСтруктураПараметров.Вставить("ДопИнформация",      ОбщиеДанные.ДопИнформация);
	Иначе
		врСтруктураПараметров.Вставить("РасчетныйСчет",      ОбщиеДанные.РасчетныйСчет);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.Банк);
		врСтруктураПараметров.Вставить("БИК",                ОбщиеДанные.БИК);
		врСтруктураПараметров.Вставить("КоррСчет",           ОбщиеДанные.КоррСчет);
		врСтруктураПараметров.Вставить("ДопИнформация",      ОбщиеДанные.ДопИнформация);
	КонецЕсли;
	
	// Для вывода общих сведений в области Счет-извещение.
	ОбластьСправа = Новый ТабличныйДокумент;
	
	Если СтруктураНастроек.ВыводитьШК
	   И СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьQRШК", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		Область.Параметры.Заполнить(врСтруктураПараметров);
		ВывестиОбласть(ОбластьСправа, Область, Истина);
	Иначе
		Область = ПолучитьОбласть(Макет, ?(СтруктураНастроек.ВыводитьШК, "ОбластьСоШтрихкодом", "ОбластьБезШтрихкода"), СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьСправа, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "ИзвещениеИнф", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ОбластьСправа, Область, Истина, "Присоединить");
		
		Область = ПолучитьОбласть(Макет, "ИзвещениеПолучатель", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		Область.Параметры.Заполнить(врСтруктураПараметров);
		ВывестиОбласть(ОбластьСправа, Область, Истина);
	КонецЕсли;
	
	Если Не ТекущаяКвитанцияПоПеням Тогда
		
		СтрокаФорматаТочностьОбъемаНачислений = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений);
		
		// Для вывода сведений о показаниях ИПУ.
		ОбластьТаблицаИПУ  = Новый ТабличныйДокумент;
		СтрокиИндСчетчиков = ТаблицаВсехСчетчиков.НайтиСтроки(Новый Структура("ЯвляетсяОПУ", Ложь));
		ТаблицаСчетчиков   = ТаблицаВсехСчетчиков.Скопировать(СтрокиИндСчетчиков);
		
		Если ТаблицаСчетчиков.Количество() = 0 Тогда
			
			Область = ПолучитьОбласть(Макет, "ПустаяСтрокаСчетчикиИПУ", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьТаблицаИПУ, Область, Истина);
			
		Иначе
			
			Область = ПолучитьОбласть(Макет, "ШапкаСчетчиковИнд", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьТаблицаИПУ, Область, Истина);
			
			СтрокаФорматаДляПоказаний = СтрокаФорматаТочностьОбъемаНачислений + "; ЧН=-; ЧГ=0";
			СтрокаФорматаДляРасхода   = СтрокаФорматаТочностьОбъемаНачислений + "; ЧН=0; ЧГ=0";
			
			Для Каждого Строка Из ТаблицаСчетчиков Цикл
				
				ВидУслуги = Строка(Строка.ВидУслуги);
				
				врСтруктураПараметров = Новый Структура("ПредПредыдущееПоказание, ПредыдущееПоказание, Расход");
				
				Область = ПолучитьОбласть(Макет, "СтрокаСчетчиковИнд", СтруктураНастроек, ОбщиеДанные);
				
				Если СтруктураНастроек.НеВыводитьПоказанияПоПУ Тогда
					врСтруктураПараметров.ПредыдущееПоказание     = 0;
					врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредыдущееПоказаниеДн;
					врСтруктураПараметров.Расход                  = 0;
				Иначе
					//Область.Параметры.Заполнить(Строка);
					врСтруктураПараметров.ПредыдущееПоказание     = Строка.ПредыдущееПоказаниеДн;
					врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредПредыдущееПоказаниеДн;
					врСтруктураПараметров.Расход                  = Строка.РасходДн;
				КонецЕсли;
				Область.Параметры.Заполнить(врСтруктураПараметров);
				
				Постфикс = ?(Строка.Тарифность <> "1", " (дн.)", "");
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, Постфикс, Строка);
				
				Если СтруктураНастроек.НеВыводитьПоказанияПоПУ Тогда
					ОтформатироватьПараметрыОбласти(Область, Новый Структура("ПредПредыдущееПоказание"), СтрокаФорматаДляПоказаний);
				Иначе
					ОтформатироватьПараметрыОбласти(Область, Новый Структура("Расход"), СтрокаФорматаДляРасхода);
					ОтформатироватьПараметрыОбласти(Область, Новый Структура("ПредПредыдущееПоказание, ПредыдущееПоказание"), СтрокаФорматаДляПоказаний);
				КонецЕсли;
				
				ВывестиОбласть(ОбластьТаблицаИПУ, Область, Истина);
				
				Если Строка.Тарифность <> "1" Тогда
					Область = ПолучитьОбласть(Макет, "СтрокаСчетчиковИнд", СтруктураНастроек, ОбщиеДанные);
					
					Если СтруктураНастроек.НеВыводитьПоказанияПоПУ Тогда
						врСтруктураПараметров.ПредыдущееПоказание     = 0;
						врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредыдущееПоказаниеНч;
						врСтруктураПараметров.Расход                  = 0;
					Иначе
						врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредПредыдущееПоказаниеНч;
						врСтруктураПараметров.ПредыдущееПоказание     = Строка.ПредыдущееПоказаниеНч;
						врСтруктураПараметров.Расход                  = Строка.РасходНч;
					КонецЕсли;
					Область.Параметры.Заполнить(врСтруктураПараметров);
					
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (нч.)", Строка);
					
					Если СтруктураНастроек.НеВыводитьПоказанияПоПУ Тогда
						ОтформатироватьПараметрыОбласти(Область, Новый Структура("ПредПредыдущееПоказание"), СтрокаФорматаДляПоказаний);
					Иначе
						ОтформатироватьПараметрыОбласти(Область, Новый Структура("Расход"), СтрокаФорматаДляРасхода);
						ОтформатироватьПараметрыОбласти(Область, Новый Структура("ПредПредыдущееПоказание, ПредыдущееПоказание"), СтрокаФорматаДляПоказаний);
					КонецЕсли;
					
					ВывестиОбласть(ОбластьТаблицаИПУ, Область, Истина);
					
				КонецЕсли;
				
				Если Строка.Тарифность = "3" Тогда
					Область = ПолучитьОбласть(Макет, "СтрокаСчетчиковИнд", СтруктураНастроек, ОбщиеДанные);
					
					Если СтруктураНастроек.НеВыводитьПоказанияПоПУ Тогда
						врСтруктураПараметров.ПредыдущееПоказание     = 0;
						врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредыдущееПоказаниеПк;
						врСтруктураПараметров.Расход                  = 0;
					Иначе
						врСтруктураПараметров.ПредПредыдущееПоказание = Строка.ПредПредыдущееПоказаниеПк;
						врСтруктураПараметров.ПредыдущееПоказание     = Строка.ПредыдущееПоказаниеПк;
						врСтруктураПараметров.Расход                  = Строка.РасходПк;
					КонецЕсли;
					Область.Параметры.Заполнить(врСтруктураПараметров);
					
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (пик.)", Строка);
					
					Если СтруктураНастроек.НеВыводитьПоказанияПоПУ Тогда
						ОтформатироватьПараметрыОбласти(Область, Новый Структура("ПредПредыдущееПоказание"), СтрокаФорматаДляПоказаний);
					Иначе
						ОтформатироватьПараметрыОбласти(Область, Новый Структура("Расход"), СтрокаФорматаДляРасхода);
						ОтформатироватьПараметрыОбласти(Область, Новый Структура("ПредПредыдущееПоказание, ПредыдущееПоказание"), СтрокаФорматаДляПоказаний);
					КонецЕсли;
					
					ВывестиОбласть(ОбластьТаблицаИПУ, Область, Истина);
					
				КонецЕсли;
			КонецЦикла;
			
			Если СтруктураНастроек.НеВыводитьПоказанияПоПУ Тогда
				Область = ПолучитьОбласть(Макет, "ПодвалСчетчиковИндПодпись", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ОбластьТаблицаИПУ, Область, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		// Для вывода сведений о показаниях ОПУ.
		ОбластьТаблицаОПУ   = Новый ТабличныйДокумент;
		ТаблицаНачисленияСч = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуНачисленияПоСчетчикам(ТаблицаВсехНачислений, СтруктураНастроек);
		
		Если ТаблицаНачисленияСч.Количество() > 0 Тогда
			
			ИмяОбласти = ?(СтруктураНастроек.ВыводитьОбъемыРасхождения, "ШапкаСчетчиковОбщСРасхождением", "ШапкаСчетчиковОбщБезРасхождения");
			Область    = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьТаблицаОПУ, Область, Истина);
			
			СписокФорматируемыхПараметров = Новый Структура("ОбщРасходПоОПУ, ОбщРасходИндПУ, ОбщРасходИндНорма, СостНормНаОДН, ОбъемРаспределения");
			Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
				СписокФорматируемыхПараметров.Вставить("ОбщРасходРасхождение");
			КонецЕсли;
			
			СтрокаФормата = СтрокаФорматаТочностьОбъемаНачислений + "; ЧГ=0";
			
			Для Каждого Строка Из ТаблицаНачисленияСч Цикл
				
				ИмяОбласти = ?(СтруктураНастроек.ВыводитьОбъемыРасхождения, "СтрокаСчетчиковОбщСРасхождением", "СтрокаСчетчиковОбщБезРасхождения");
				Область    = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(Строка);
				
				врСтруктураПараметров = Новый Структура("ОбщРасходПоОПУ, ВидДляВывода, СостНормНаОДН, ОбъемНаОДН, ОбщБазаРаспредПлощадь, ОбщБазаРаспредЖильцы, ОбъемРаспределения");
				
				врСтруктураПараметров.ВидДляВывода = Строка.ВидДляВывода;
				
				врСтруктураПараметров.ОбщРасходПоОПУ = ?(Строка.ОбщРасходПоОПУ = 0, Строка.ОбщРасходОбщ, Строка.ОбщРасходПоОПУ);
				
				ОбъемРаспределенияОПУ = ?(врСтруктураПараметров.ОбщРасходПоОПУ = 0, 0, Строка.ОбщРасходОбщ);
				
				врСтруктураПараметров.ОбъемНаОДН = ОбъемРаспределенияОПУ;
				
				Услуга               = ?(ЗначениеЗаполнено(Строка.Услуга), Строка.Услуга, Строка.МассивУслуг.Получить(0));
				СтрокаСведенийУслуги = ?(ТаблицаУслугДляПерми = Неопределено, Неопределено, ТаблицаУслугДляПерми.Найти(Услуга, "Услуга"));
				
				СтрокаКоэффициентов = ТаблицаКоэффициентов.Добавить();
				СтрокаКоэффициентов.Услуга                            = Услуга;
				СтрокаКоэффициентов.НастройкаОграниченияОДННормативом = ?(СтрокаСведенийУслуги = Неопределено, Услуга.НастройкаОграниченияОДННормативом, СтрокаСведенийУслуги.НастройкаОграниченияОДННормативом);
				СтрокаКоэффициентов.ВидТарифа                         = Строка.ВидТарифа;
				
				Если СтрокаКоэффициентов.НастройкаОграниченияОДННормативом Тогда
					врСтруктураПараметров.СостНормНаОДН = Строка.РазмерНормыОбщ;
				КонецЕсли;
				
				ТекущаяБазаРаспредПлощадь = 0;
				ТекущаяБазаРаспредЖильцы  = 0;
				ЭтоЗависимаяУслуга        = Ложь;
				
				Если БазаРаспределенияПоУслугам.Количество() > 0 Тогда
					СтрокаОбщБазаРаспределения = БазаРаспределенияПоУслугам.Найти(Строка.Услуга, "Услуга");
					Если НЕ СтрокаОбщБазаРаспределения = Неопределено Тогда
						ТекущаяБазаРаспредПлощадь = СтрокаОбщБазаРаспределения.БазаРаспределенияОДНПоПлощади;
						ТекущаяБазаРаспредЖильцы  = СтрокаОбщБазаРаспределения.БазаРаспределенияОДНПоЖильцам;
						ЭтоЗависимаяУслуга        = СтрокаОбщБазаРаспределения.ЭтоЗависимаяУслуга;
						
					КонецЕсли;
				КонецЕсли;
				врСтруктураПараметров.ОбщБазаРаспредПлощадь = Формат(ТекущаяБазаРаспредПлощадь, "ЧДЦ=2");
				врСтруктураПараметров.ОбщБазаРаспредЖильцы  = Формат(ТекущаяБазаРаспредЖильцы,  "ЧДЦ=2");
				
				Коэффициент = 0;
				
				СтрокиУслугаСчетчикаОПУ = ТаблицаВсехСчетчиков.НайтиСтроки(Новый Структура("Услуга, ЯвляетсяОПУ", Строка.Услуга, Истина));
				Если СтрокиУслугаСчетчикаОПУ.Количество() > 0 Тогда
					
					СтрокиУслугПоОПУ = ТаблицаУслугКПУ.НайтиСтроки(Новый Структура("УслугаОбщедомовогоСчетчика", Строка.Услуга));
					Если Не СтрокиУслугПоОПУ.Количество() = 0 Тогда
						
						СтрокиНачисленияСчПоОПУ = ТаблицаНачисленияСч.НайтиСтроки(Новый Структура("Услуга", Строка.Услуга));
						врНачисленияСчПоОПУ     = ТаблицаНачисленияСч.Скопировать(СтрокиНачисленияСчПоОПУ);
						
						врСтруктураПараметров.Вставить("ОбщРасходИндНорма",    врНачисленияСчПоОПУ.Итог("ОбщРасходИндНорма"));
						врСтруктураПараметров.Вставить("ОбщРасходРасхождение", врНачисленияСчПоОПУ.Итог("ОбщРасходРасхождение"));
						
						// Если по текущей услуге объем учитывается при распределении показаний общедомовых приборов учета, то:
						// 1. Найдем в таблице "ТаблицаУслугКПУ" (содержит сведения о соответствии текущей услуги в качестве "Услуги общедомового счетчика"
						// и услуги в качестве "Услуги - базы расчета") все общедомовые услуги, по которым необходимо расчитать общий объем расхода по ИПУ.
						// 2. Определим общий индивидуальный расход по текущей услуге из таблицы с расходами по счетчикам.
						// 3. Рассчитаем объем расхода по общедомовым приборам учета с учетом индивидуального расхода.
						
						// 1.
						ТаблицаУслугИПУ = ТаблицаУслугКПУ.Скопировать(СтрокиУслугПоОПУ);
						МассивУслугИПУ  = ТаблицаУслугИПУ.ВыгрузитьКолонку("Услуга");
						
						// 2.
						ОбщРасходИндПУ = Строка.ОбщРасходИндПУ;
						Для Каждого ТекущаяУслуга Из МассивУслугИПУ Цикл
							СтрокаПоказаний = ТаблицаНачисленияСч.Найти(ТекущаяУслуга, "Услуга");
							ОбщРасходИндПУ  = ОбщРасходИндПУ + ?(СтрокаПоказаний = Неопределено, 0, СтрокаПоказаний.ОбщРасходИндПУ);
						КонецЦикла;
						врСтруктураПараметров.Вставить("ОбщРасходИндПУ", ОбщРасходИндПУ);
						
						// 3.
						
						Если врСтруктураПараметров.ОбщРасходПоОПУ = 0 Тогда
							
							ОбъемНаОДН = 0;
							
						ИначеЕсли СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
							ОбъемНаОДН = врСтруктураПараметров.ОбщРасходПоОПУ
									   - врСтруктураПараметров.ОбщРасходИндПУ
									   - врСтруктураПараметров.ОбщРасходИндНорма
									   - врСтруктураПараметров.ОбщРасходРасхождение;
						Иначе
							ОбъемНаОДН = врСтруктураПараметров.ОбщРасходПоОПУ
									   - врСтруктураПараметров.ОбщРасходИндПУ
									   - врСтруктураПараметров.ОбщРасходИндНорма;
						КонецЕсли;
						
						врСтруктураПараметров.ОбъемНаОДН = ОбъемНаОДН;
						
					КонецЕсли;
				КонецЕсли;
				
				Если Услуга.СпособРаспределенияУслугиПоСчетчику = Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади
				 ИЛИ НЕ ТекущаяБазаРаспредПлощадь = 0 Тогда
					
					Коэффициент = ?(ТекущаяБазаРаспредПлощадь = 0, 0, ОбъемРаспределенияОПУ / ТекущаяБазаРаспредПлощадь);
					
				ИначеЕсли Услуга.СпособРаспределенияУслугиПоСчетчику = Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов
				 ИЛИ НЕ ТекущаяБазаРаспредЖильцы = 0 Тогда
					
					Коэффициент = ?(ТекущаяБазаРаспредЖильцы = 0, 0, ОбъемРаспределенияОПУ / ТекущаяБазаРаспредЖильцы);
					
				ИначеЕсли Услуга.СпособРаспределенияУслугиПоСчетчику = Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуРасходаПоУслуге
				 ИЛИ НЕ Строка.ОбщРасходИнд = 0 Тогда
					
					Коэффициент = ?(Строка.ОбщРасходИнд = 0, 0, ОбъемРаспределенияОПУ / Строка.ОбщРасходИнд);
					
				КонецЕсли;
				
				СтрокаКоэффициентов.Коэффициент = Коэффициент;
				
				врСтруктураПараметров.ОбъемРаспределения = Коэффициент;
				
				Если ЭтоЗависимаяУслуга Тогда
					врСтруктураПараметров.ОбщРасходПоОПУ = "";
				КонецЕсли;
				
				Область.Параметры.Заполнить(врСтруктураПараметров);
				
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ВывестиОбласть(ОбластьТаблицаОПУ, Область, Истина);
			КонецЦикла;
			
		КонецЕсли;
		
		ОбщиеДанные.Вставить("ТаблицаКоэффициентов", ТаблицаКоэффициентов);
		
		КоличествоДобавляемыхСтрок = ОбластьТаблицаИПУ.ВысотаТаблицы - ОбластьТаблицаОПУ.ВысотаТаблицы;
		Если КоличествоДобавляемыхСтрок > 0 Тогда
			// Добавляем стоку-заполнитель ниже области "ОбластьТаблицаОПУ".
			Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
				Область = ПолучитьОбласть(Макет, "ПустаяСтрокаСчетчикиОбщ", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ОбластьТаблицаОПУ, Область, Истина);
			КонецЦикла;
		ИначеЕсли КоличествоДобавляемыхСтрок < 0 Тогда
			// Добавляем стоку-заполнитель ниже области "ОбластьТаблицаИПУ".
			Для Сч = 1 По -КоличествоДобавляемыхСтрок Цикл
				Область = ПолучитьОбласть(Макет, "ПустаяСтрокаСчетчикиИПУ", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ОбластьТаблицаИПУ, Область, Истина);
			КонецЦикла;
		КонецЕсли;
		
		// Для вывода сведений о показаниях ИПУ и ОПУ.
		ОбластьТаблицы = Новый ТабличныйДокумент;
		
		ВывестиОбласть(ОбластьТаблицы, ОбластьТаблицаИПУ, Истина, "Присоединить");
		ВывестиОбласть(ОбластьТаблицы, ОбластьТаблицаОПУ, Истина, "Присоединить");
		
		ВывестиОбласть(ОбластьСправа, ОбластьТаблицы, Истина);
	КонецЕсли;
	
	// Добавляем строки-заполнители для выравнивания областей.
	КоличествоДобавляемыхСтрок = ОбластьСправа.ВысотаТаблицы - ОбластьСлева.ВысотаТаблицы;
	Если КоличествоДобавляемыхСтрок > 0 Тогда
		Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
			Область = ПолучитьОбласть(Макет, "ИзвещениеШапкаДоп", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСлева, Область, Истина);
		КонецЦикла;
	ИначеЕсли КоличествоДобавляемыхСтрок < 0 Тогда
		Для Сч = 1 По -КоличествоДобавляемыхСтрок Цикл
			Область = ПолучитьОбласть(Макет, "ПустаяСтрокаСчетчики", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправа, Область, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиОбласть(ОбластьИзвещение, ОбластьСлева, Истина, "Присоединить");
	ВывестиОбласть(ОбластьИзвещение, ОбластьСправа, Истина, "Присоединить");
	
	Область = ПолучитьОбласть(Макет, "ПодвалИзвещения", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьИзвещение, Область, Истина);
	
	Возврат ОбластьИзвещение;
	
КонецФункции // ПолучитьОбластьИзвещениеПермь()

// Формирует табличный документ и выводить в него область "Квитанция".
//
// Параметры:
//  Макет                - Табличный документ - макет платежного документа.
//  ОбщиеДанные          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек    - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления    - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  ТаблицаПерерасчетов  - Таблица значений   - таблица с перерасчетами по текущему лицевому счету.
//  ТаблицаУслугДляПерми - Таблица значений   - таблица со сведениями об услугах.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "Квитанция".
//
Функция ПолучитьОбластьКвитанцияПермь(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаПерерасчетов, ТаблицаУслугДляПерми = Неопределено)
	
	ОбластьКвитанция = Новый ТабличныйДокумент;
	
	врТаблДок = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "КвитанцияШапка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(врТаблДок, Область, Истина);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) И НЕ ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияИсполнитель", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТаблДок, Область, Истина);
	КонецЕсли;
	
	ВывестиОбласть(ОбластьКвитанция, врТаблДок, Истина, "Присоединить");
	
	// Используем временный табличный документ для заполнения области Квитанция.
	врТаблДок = Новый ТабличныйДокумент;
	
	ЗаполнитьШаблонПлощадиПомещенияВМакете(ОбщиеДанные, СтруктураНастроек);
	
	Область = ПолучитьОбласть(Макет, "КвитанцияИнф", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(врТаблДок, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "ШапкаНачисления", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(врТаблДок, Область, Истина);
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		ТаблицаКоммунальныхУслуг  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления,
																					Новый Структура("Коммунальная", Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления,
																					Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		
		ТаблицаУслугСОИ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Коммунальная",      Ложь);
		Отбор.Вставить("СодержаниеИРемонт", Ложь);
		
		ТаблицаПрочихУслуг = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления,
																				Отбор, СтруктураНастроек);
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаКоммунальные", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
			
			ВывестиТаблицуНачисленияПДПермскийКрай(Макет, ТаблицаКоммунальныхУслуг, ОбщиеДанные, СтруктураНастроек, врТаблДок, ТаблицаПерерасчетов, ТаблицаУслугДляПерми);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаСодержаниеИРемонт", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
			
			ВывестиТаблицуНачисленияПДПермскийКрай(Макет, ТаблицаСодержанияИРемонта, ОбщиеДанные, СтруктураНастроек, врТаблДок, ТаблицаПерерасчетов, ТаблицаУслугДляПерми);
		КонецЕсли;
		
		Если Не ТаблицаУслугСОИ.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаСОИ", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
			
			ВывестиТаблицуНачисленияПДПермскийКрай(Макет, ТаблицаУслугСОИ, ОбщиеДанные, СтруктураНастроек, врТаблДок, ТаблицаПерерасчетов, ТаблицаУслугДляПерми);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
			
			ВывестиТаблицуНачисленияПДПермскийКрай(Макет, ТаблицаПрочихУслуг, ОбщиеДанные, СтруктураНастроек, врТаблДок, ТаблицаПерерасчетов, ТаблицаУслугДляПерми);
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияПДПермскийКрай(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, врТаблДок, ТаблицаПерерасчетов, ТаблицаУслугДляПерми);
	КонецЕсли;
		
	Если ТаблицаНачисления.Количество() = 0 Тогда
		СтрокаИтогов = ТаблицаНачисления.Добавить();
		СтрокаИтогов.Начислено      = 0;
		СтрокаИтогов.СуммаПовышения = 0;
		СтрокаИтогов.Перерасчет     = 0;
		СтрокаИтогов.Льгота         = 0;
		СтрокаИтогов.КОплате        = 0;
	Иначе
		СтрокаИтогов = ТаблицаНачисления[0];
	КонецЕсли;
	
	Если СтрокаИтогов.Льгота = 0 Тогда
		СтрокаИтогов.Льгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "ИтогНачисления", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтрокаИтогов);
	ВывестиОбласть(врТаблДок, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаНачальногоСальдо", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТаблДок, Область, Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Если СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОплатыВключенныеВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
		Иначе
			Область = ПолучитьОбласть(Макет, "СтрокаОплаты", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОстаткаПоРассрочке", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОплатаСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТаблДок, Область, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаПени", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТаблДок, Область, Истина);
	КонецЕсли;
	
	Если Не (СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать") Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаКомиссииБанка", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		врСтруктураПараметров = Новый Структура();
		врСтруктураПараметров.Вставить("КомиссияБанка", СтруктураНастроек.КомиссияБанка);
		Область.Параметры.Заполнить(врСтруктураПараметров);
		ВывестиОбласть(врТаблДок, Область, Истина);
	КонецЕсли;
	
	ВывестиОбласть(ОбластьКвитанция, врТаблДок, Истина, "Присоединить");
	
	Область = ПолучитьОбласть(Макет, "ПодвалКвитанции", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтрокаИтогов);
	Область.Параметры.Заполнить(Новый Структура("ВсегоКОплате", ОбщиеДанные.ВсегоКОплате));
	ВывестиОбласть(ОбластьКвитанция, Область, Истина);
	
	Возврат ОбластьКвитанция;
	
КонецФункции // ПолучитьОбластьКвитанцияПермь()

// Выводить таблицу с начислениями в табличный документ.
//
// Параметры:
//  Макет                - Табличный документ - макет платежного документа.
//  ТаблицаНачисления    - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  ОбщиеДанные          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек    - Структура          - структура с настройками формирования квитанций.
//  ТабличныйДокумент    - Табличный документ - табличный документ для вывода сведений.
//  ТаблицаПерерасчетов  - Таблица значений   - таблица с перерасчетами по текущему лицевому счету.
//  ТаблицаУслугДляПерми - Таблица значений   - таблица со сведениями об услугах.
//
Процедура ВывестиТаблицуНачисленияПДПермскийКрай(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек, ТабличныйДокумент, ТаблицаПерерасчетов, ТаблицаУслугДляПерми)
	
	ЧН = "ЧН=0,";
	Для Итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
		ЧН = ЧН + "0";
	КонецЦикла;
	
	СтрокаФорматаРасхода = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ЧН + "; ЧГ=0";
	СтрокаФорматаНормы   = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧГ=0";
	
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) И Строка.УслугаСНачислениями = Истина Тогда
			
			Услуга = ?(ЗначениеЗаполнено(Строка.Услуга), Строка.Услуга, Строка.МассивУслуг.Получить(0));
			
			СтрокиКоэффициента = ОбщиеДанные.ТаблицаКоэффициентов.НайтиСтроки(Новый Структура("Услуга, ВидТарифа", Услуга, Строка.ВидТарифа));
			
			Область = ПолучитьОбласть(Макет, "СтрокаНачисления", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			
			Если НЕ СтрокиКоэффициента.Количество() = 0 Тогда
				СтрокаКоэффициента = СтрокиКоэффициента.Получить(0);
				врСтруктураПараметров = Новый Структура;
				
				// Если при расчете начислений по услуге используется формула 15 (ОДН рассчитывается по нормативу), то необходимо вывести размер норматива на ОДН.
				// В методических рекомендациях к форме ПД соответствующих пояснений нет. Реализовано по просьбам пользователей.
				СтрокаСведенийУслуги  = ?(ТаблицаУслугДляПерми = Неопределено, Неопределено, ТаблицаУслугДляПерми.Найти(СтрокаКоэффициента.Услуга, "Услуга"));
				ИспользуетсяФормула15 = ?(СтрокаСведенийУслуги = Неопределено, Ложь, СтрокаСведенийУслуги.ИспользоватьФормулу15);
				Если СтрокаКоэффициента.НастройкаОграниченияОДННормативом Или ИспользуетсяФормула15 Тогда
					врСтруктураПараметров.Вставить("Коэффициент", Строка.РазмерНормыОбщ);
				Иначе
					врСтруктураПараметров.Вставить("Коэффициент", СтрокаКоэффициента.Коэффициент);
				КонецЕсли;
				Область.Параметры.Заполнить(врСтруктураПараметров);
			КонецЕсли;
			
			Если Строка.УслугаПоСчетчикам И Строка.ВидТарифа = Неопределено Тогда
				СтрокиКоэффициентаИтоги = ОбщиеДанные.ТаблицаКоэффициентов.НайтиСтроки(Новый Структура("Услуга", Услуга));
				Если НЕ СтрокиКоэффициентаИтоги.Количество() = 0 Тогда
					ТаблицаИтогаКоэффициентов = ОбщиеДанные.ТаблицаКоэффициентов.Скопировать(СтрокиКоэффициентаИтоги);
					врСтруктураПараметров = Новый Структура;
					врСтруктураПараметров.Вставить("Коэффициент", ТаблицаИтогаКоэффициентов.Итог("Коэффициент"));
					Область.Параметры.Заполнить(врСтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПараметровСтрокиНачисления = Новый Структура();
			
			// Код перерасчета
			СтруктураПараметровСтрокиНачисления.Вставить("КодПерерасчета", ПолучитьКодыПерерасчетов(Строка.ВидУслуги, ТаблицаПерерасчетов));
			
			// Для строк детализации по видам тарифа и для итоговой строки детализации
			// по составляющим услугам единицы измерения не выводим.
			Если Не ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ЕдИзм", "Х");
			КонецЕсли;
			
			// Для итоговых строк детализации тариф не выводим.
			Если Не ЗначениеЗаполнено(Строка.ТарифДляВывода) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ТарифДляВывода", "Х");
			КонецЕсли;
			
			// Для строк детализации по видам тарифа итоговые колонки не заполняем.
			Если Строка.СтрокаДетализацииТариф Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("Перерасчет", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Льгота",     "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате",    "Х");
			КонецЕсли;
			
			Если Строка.СтрокаДетализацииСост Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате", "Х");
			КонецЕсли;
			
			Если НЕ Строка.УслугаПоСчетчикам И НЕ Строка.УслугаСоставнаяПоСчетчикам Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КоличествоОПУ", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КоличествоИПУ", ?(СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг, Строка.КоличествоИПУ, "Х"));
				
				Если СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг И Строка.ИмеетсяСоставнойИндивидуальныйРасход Тогда
					СтруктураПараметровСтрокиНачисления.Вставить("КоличествоИПУ", ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "Х", Строка.СоставноеКоличествоИнд));
				КонецЕсли;
			КонецЕсли;
			
			Область.Параметры.Заполнить(СтруктураПараметровСтрокиНачисления);
			
			ОтформатироватьПараметрыОбласти(Область, Новый Структура("КоличествоИПУ, КоличествоОПУ"), СтрокаФорматаРасхода);
			ОтформатироватьПараметрыОбласти(Область, Новый Структура("РазмерНормы, РазмерНормыОбщ"), СтрокаФорматаНормы);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачисленияПДПермскийКрай()

// Функция возвращает строку с кодами перерасчетов.
//
// Параметры:
//  ВидУслуги           - Вид услуги       - вид услуги для поиска.
//  ТаблицаПерерасчетов - Таблица значений - таблица с перерасчетами по текущему лицевому счету.
//
// Возвращаемое значение:
//  Строка - строка с кодами перерасчетов.
//
Функция ПолучитьКодыПерерасчетов(ВидУслуги, ТаблицаПерерасчетов)
	
	НайденныеСтроки  = ТаблицаПерерасчетов.НайтиСтроки(Новый Структура("ВидУслуги", ВидУслуги));
	КодыПерерасчетов = "";
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			КодыПерерасчетов = КодыПерерасчетов
							 + ?(Не ПустаяСтрока(КодыПерерасчетов), ",", "")
							 + ТекСтрока.КодПерерасчета;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КодыПерерасчетов;
	
КонецФункции // ПолучитьКодыПерерасчетов()

#КонецОбласти

#Область ФормаПлатДокументЧувашскаяРеспублика

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (ЧУВАШСКАЯ РЕСПУБЛИКА)".

// Формирует табличный документ и выводит в него блок "Извещение".
//
// Параметры:
//  Макет                - Табличный документ - макет платежного документа.
//  ОбщиеДанные          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек    - Структура          - структура с настройками формирования квитанций.
//  ДокументРезультат    - Табличный документ - табличный документ для вывода сведений.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Извещение".
//
Функция ПолучитьОбластьИзвещениеЧебоксары(Макет, ОбщиеДанные, СтруктураНастроек, ДокументРезультат)
	
	ОбластьИзвещение = Новый ТабличныйДокумент;
	
	// Для вывода области "ШапкаИзвещения" и QR для онлайн-оплаты.
	ОбластьШапкаИзвещения = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ШапкаИзвещения", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьШапкаИзвещения, Область, Истина);
	
	Если ОбщиеДанные.ВыводитьQRштрихкодДляСитикард Тогда
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ОбластьШапкаИзвещения, Область, Истина);
	КонецЕсли;
	
	// Для вывода области с платежными реквизитами и основными штрихкодами.
	ОбластьПлатежныеРеквизиты = Новый ТабличныйДокумент;
	
	врСтруктураПараметров = Новый Структура;
	врСтруктураПараметров.Вставить("ВсегоКОплате", ОбщиеДанные.ВсегоКОплате);
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("ПолучательПлатежа",       ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("ИННПолучателя",           ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("АдресПолучателя",         ОбщиеДанные.ЮрАдресИсполнителяКР);
		врСтруктураПараметров.Вставить("ТелефонПолучателя",       ОбщиеДанные.ТелефонИсполнителяКР);
		
		Если ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Контрагенты") Тогда
			врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияИсполнителяКР);
		ИначеЕсли ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Организации") Тогда
			врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияКР);
		КонецЕсли;
		
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации",  "");
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчетИсполнителя);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.БанкИсполнителя);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИКБанкаИсполнителя);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчетБанкаИсполнителя);
		врСтруктураПараметров.Вставить("ПолучательПлатежа",       ОбщиеДанные.ИсполнительУслуг);
		врСтруктураПараметров.Вставить("ИННПолучателя",           ОбщиеДанные.ИННИсполнителя);
		врСтруктураПараметров.Вставить("КПППолучателя",           ОбщиеДанные.КППИсполнителя);
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации",  "");
		врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияПолучателя);
	Иначе
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчет);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.Банк);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИК);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчет);
		врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияПолучателя);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "ШапкаИзвещенияПлатежныеРеквизиты", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	Область.Параметры.Заполнить(врСтруктураПараметров);
	ВывестиОбласть(ОбластьПлатежныеРеквизиты, Область, Истина);
	
	ОбластьСлева = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Плательщик", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьСлева, Область, Истина);
	
	ОбластьСправа = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ИнфОбОплате", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ОбластьСправа, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьШК Тогда
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьQRШК", СтруктураНастроек, ОбщиеДанные);
		Иначе
			Область = ПолучитьОбласть(Макет, "ОбластьСШК", СтруктураНастроек, ОбщиеДанные);
		КонецЕсли;
		ВывестиОбласть(ОбластьСправа, Область, Истина);
	КонецЕсли;
	
	КоличествоДобавляемыхСтрок = ОбластьСлева.ВысотаТаблицы - ОбластьСправа.ВысотаТаблицы;
	Если КоличествоДобавляемыхСтрок > 0 Тогда
		Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
			Область = ПолучитьОбласть(Макет, "ОбластьШКЗаполнитель", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСправа, Область, Истина);
		КонецЦикла;
	ИначеЕсли КоличествоДобавляемыхСтрок < 0 Тогда
		Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
			Область = ПолучитьОбласть(Макет, "ОбластьПлательщикЗаполнитель", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьСлева, Область, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиОбласть(ОбластьСлева, ОбластьСправа, Истина, "Присоединить");
	ВывестиОбласть(ОбластьПлатежныеРеквизиты, ОбластьСлева, Истина);
	
	КоличествоДобавляемыхСтрок = ОбластьШапкаИзвещения.ВысотаТаблицы - ОбластьПлатежныеРеквизиты.ВысотаТаблицы;
	Если КоличествоДобавляемыхСтрок > 0 Тогда
		Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
			Область = ПолучитьОбласть(Макет, "ШапкаИзвещенияПлатежныеРеквизитыЗаполнитель", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьПлатежныеРеквизиты, Область, Истина);
		КонецЦикла;
	ИначеЕсли КоличествоДобавляемыхСтрок < 0 Тогда
		Для Сч = 1 По -КоличествоДобавляемыхСтрок Цикл
			Область = ПолучитьОбласть(Макет, "ШапкаИзвещенияЗаполнитель", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ОбластьШапкаИзвещения, Область, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиОбласть(ОбластьИзвещение, ОбластьШапкаИзвещения, Истина, "Присоединить");
	ВывестиОбласть(ОбластьИзвещение, ОбластьПлатежныеРеквизиты, Истина, "Присоединить");
	
	Область = ПолучитьОбласть(Макет, "ПодвалИзвещения", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьИзвещение, Область, Истина);
	
	Возврат ОбластьИзвещение;
	
КонецФункции // ПолучитьОбластьИзвещениеЧебоксары()

// Формирует табличный документ и выводит в него блок "Квитанция".
//
// Параметры:
//  Макет                - Табличный документ - макет платежного документа.
//  ТаблицаНачисления    - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  ОбщиеДанные          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек    - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с блоком "Квитанция".
//
Функция ПолучитьОбластьКвитанцияЧебоксары(Макет, ТаблицаНачисления, ОбщиеДанные, СтруктураНастроек)
	
	ОбластьКвитанция = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ШапкаКвитанции", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	врСтруктураПараметров = Новый Структура;
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("ПолучательПлатежа",       ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("ИННПолучателя",           ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("АдресПолучателя",         ОбщиеДанные.ЮрАдресИсполнителяКР);
		врСтруктураПараметров.Вставить("ТелефонПолучателя",       ОбщиеДанные.ТелефонИсполнителяКР);
		
		Если ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Контрагенты") Тогда
			врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияИсполнителяКР);
		ИначеЕсли ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Организации") Тогда
			врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияКР);
		КонецЕсли;
		
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации",  "");
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчетИсполнителя);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.БанкИсполнителя);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИКБанкаИсполнителя);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчетБанкаИсполнителя);
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации",  "");
		врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияПолучателя);
	Иначе
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчет);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.Банк);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИК);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчет);
		врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияПолучателя);
	КонецЕсли;
	
	Область.Параметры.Заполнить(врСтруктураПараметров);
	ВывестиОбласть(ОбластьКвитанция, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "ПустаяОбласть", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьКвитанция, Область, Истина);
	
	СчетчикСтрок = 2;
	
	врТаблДок = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ШапкаНачисления", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(врТаблДок, Область, Истина);
	
	ТаблицаКоммунальные = Новый ТаблицаЗначений;
	
	Отбор = Новый Структура;
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		// УСЛУГИ БЕЗ ПУ.
		ТаблицаЖилищные = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления,
																					СтруктураНастроек,
																					Новый Структура("СодержаниеИРемонт", Истина),
																					,СтруктураНастроек.РазделятьУслугиПоТипам);
		
		Если Не ТаблицаЖилищные.Количество() = 0 Тогда
			ВывестиДанныеПоЖилищнымУслугамЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаЖилищные, 
													СчетчикСтрок, СтруктураНастроек);
		КонецЕсли;
		
		ТаблицаСОИ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек);
		
		Если Не ТаблицаСОИ.Количество() = 0 Тогда
			ВывестиВТаблицуНачисленияДанныеПоСОИЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаСОИ, СчетчикСтрок, СтруктураНастроек);
		КонецЕсли;
		
		// УСЛУГИ С ПУ.
		ТаблицаКоммунальные = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления,
																						СтруктураНастроек,
																						Новый Структура("Коммунальная", Истина),
																						Истина,
																						СтруктураНастроек.РазделятьУслугиПоТипам);
		
		Если Не ТаблицаКоммунальные.Количество() = 0 Тогда
			ВывестиДанныеПоКоммунальнымУслугамЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаКоммунальные,
														СчетчикСтрок, СтруктураНастроек);
		КонецЕсли;
		
		// ПРОЧИЕ УСЛУГИ.
		Отбор = Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь);
		ТаблицаПрочие = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления,
																		 СтруктураНастроек,
																		 Отбор,
																		 ,СтруктураНастроек.РазделятьУслугиПоТипам);
		
		Если Не ТаблицаПрочие.Количество() = 0 Тогда
			ВывестиДанныеПоПрочимУслугамЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаПрочие, 
												  СчетчикСтрок, СтруктураНастроек);
		КонецЕсли;
		
	Иначе
		
		// 1.Сначала выводим данные о начислениях по коммунальным услугам.
		ТаблицаКоммунальные = ТаблицаНачисления.СкопироватьКолонки();
		
		// 1.1. Отбираем данные о начислениях. Для этого из таблицы начисления отбираем строки, в которых либо признак "УслугаПоСчетчикам", либо признак "УслугаСоставнаяПоСчетчикам" принимает значение "Истина".
		ТаблицаУслугПоСчетчикам          = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления,
																												СтруктураНастроек,
																												Новый Структура("УслугаПоСчетчикам, СтрокаДляОбщегоИмущества", Истина, Ложь),
																												Истина,
																												СтруктураНастроек.РазделятьУслугиПоТипам);
		
		ТаблицаУслугСоставнаяПоСчетчикам = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления,
																												СтруктураНастроек,
																												Новый Структура("УслугаСоставнаяПоСчетчикам, СтрокаДляОбщегоИмущества", Истина, Ложь),
																												Истина,
																												СтруктураНастроек.РазделятьУслугиПоТипам);
		
		// 1.2. Получаем итоговую сумму к оплате из двух таблиц.
		// Полученная сумма будет выведена в заголовке строк по коммунальным услугам.
		КОплате      = ?(ТаблицаУслугПоСчетчикам.Количество() > 0, ТаблицаУслугПоСчетчикам[0].КОплате, 0)
					 + ?(ТаблицаУслугСоставнаяПоСчетчикам.Количество() > 0, ТаблицаУслугСоставнаяПоСчетчикам[0].КОплате, 0);
		
		// 1.3. Из каждой вспомогательной таблицы, перед копирование данных в основную таблицу "ТаблицаКоммунальные", удаляем строки с итогами.
		Если ТаблицаУслугПоСчетчикам.Количество() > 0 Тогда
			ТаблицаУслугПоСчетчикам.Удалить(0);
		КонецЕсли;
		Если ТаблицаУслугСоставнаяПоСчетчикам.Количество() > 0 Тогда
			ТаблицаУслугСоставнаяПоСчетчикам.Удалить(0);
		КонецЕсли;
		
		ТаблицаКоммунальные = ТаблицаУслугПоСчетчикам.Скопировать();
		Для Каждого ТекСтрока Из ТаблицаУслугСоставнаяПоСчетчикам Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаКоммунальные.Добавить(), ТекСтрока);
		КонецЦикла;
		
		ТаблицаСОИ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек);
		
		Если Не ТаблицаСОИ.Количество() = 0 Тогда
			ВывестиВТаблицуНачисленияДанныеПоСОИЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаСОИ, СчетчикСтрок, СтруктураНастроек);
		КонецЕсли;
		
		Если Не ТаблицаКоммунальные.Количество() = 0 Тогда
			
			УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаКоммунальные, СтруктураНастроек);
			
			СтрокаИтогов = ТаблицаКоммунальные.Вставить(0);
			СтрокаИтогов.КОплате      = КОплате;
			
			ВывестиДанныеПоКоммунальнымУслугамЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаКоммунальные, 
																 СчетчикСтрок, СтруктураНастроек);
			
		КонецЕсли;
		
		// 2.Затем выводим данные о начислениях по прочим услугам.
		Отбор.Вставить("УслугаПоСчетчикам",          Ложь);
		Отбор.Вставить("УслугаСоставнаяПоСчетчикам", Ложь);
		
		ТаблицаПрочие = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСИтогамиДляКвитанции(ТаблицаНачисления, СтруктураНастроек, Отбор,
																							 Ложь, СтруктураНастроек.РазделятьУслугиПоТипам);
		
		// 2.1. Выводим данные о начислениях по всем услугам, отличным от отобранных в п.1.1.
		Если Не ТаблицаПрочие.Количество() = 0 Тогда
			ВывестиДанныеПоПрочимУслугамЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаПрочие, 
														   СчетчикСтрок, СтруктураНастроек);
		КонецЕсли;
	КонецЕсли;
	
	// УСЛУГИ С ПУ, ПО КОТОРЫМ ИМЕЮТСЯ ОДН.
	ТаблицаОДН = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуОДН(ТаблицаНачисления, ТаблицаКоммунальные);
	
	Если Не ТаблицаОДН.Количество() = 1 Тогда
		ВывестиВТаблицуНачисленийДанныеПоОДНЧебоксары(Макет, врТаблДок, ОбщиеДанные, ТаблицаОДН, СчетчикСтрок, СтруктураНастроек);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "ПодвалНачисления", СтруктураНастроек, ОбщиеДанные);
	Если ТаблицаНачисления.Количество() = 0 Тогда
		врСтруктураПараметров = Новый Структура("Начислено, СуммаПовышения, Перерасчет, КОплате");
		врСтруктураПараметров.Начислено      = 0;
		врСтруктураПараметров.СуммаПовышения = 0;
		врСтруктураПараметров.Перерасчет     = 0;
		врСтруктураПараметров.КОплате        = 0;
		Область.Параметры.Заполнить(врСтруктураПараметров);
	Иначе
		СтрокаИтогов = ТаблицаНачисления.Получить(0);
		Область.Параметры.Заполнить(СтрокаИтогов);
	КонецЕсли;
	ВывестиОбласть(врТаблДок, Область, Истина);
	
	СчетчикСтрок = СчетчикСтрок + 1;
	
	// Подгоняем высоту "левой" части блока к высоте "правой части".
	ОбластьИнформации = Новый ТабличныйДокумент;
	Счетчик           = 0;
	Область           = ПолучитьОбласть(Макет, "СтрокаЗаполнитель", СтруктураНастроек, ОбщиеДанные);
	Пока Счетчик < СчетчикСтрок - 6 Цикл
		ВывестиОбласть(ОбластьИнформации, Область);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Область = ПолучитьОбласть(Макет, "ОбластьИнф", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьИнформации, Область, Истина);
	
	ВывестиОбласть(ОбластьКвитанция, ОбластьИнформации, Истина, "Присоединить");
	ВывестиОбласть(ОбластьКвитанция, врТаблДок, Истина, "Присоединить");
	
	Возврат ОбластьКвитанция;
	
КонецФункции // ПолучитьОбластьКвитанцияЧебоксары()

// Выводит в таблицу начисдения сведения о начислениях, которые в соответствии с постановлением №1498
// должны относиться к содержанию общего имущества.
//
// Параметры:
//  Макет                - Табличный документ - макет платежного документа.
//  ТабличныйДокумент    - Табличный документ - табличный документ для вывода сведений.
//  ОбщиеДанные          - Структура          - общие данные по текущей квитанции.
//  ТаблицаСОИ           - Таблица значений   - таблица с начислениями по услугам СОИ.
//  СчетчикСтрок         - Число              - количество добавленных строк.
//  СтруктураНастроек    - Структура          - структура с настройками формирования квитанций.
//
Процедура ВывестиВТаблицуНачисленияДанныеПоСОИЧебоксары(Макет, ТабличныйДокумент, ОбщиеДанные, ТаблицаСОИ, СчетчикСтрок, СтруктураНастроек)
	
	Область = ПолучитьОбласть(Макет, "СОИЗаголовок", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(Новый Структура("ИтогоСОИ", ТаблицаСОИ.Итог("КОплате")));
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	СчетчикСтрок = СчетчикСтрок + 1;
	
	СтрокаФормата                 = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧГ=0";
	СписокФорматируемыхПараметров = Новый Структура("КоличествоОПУ, ОбщРасходОбщ");
	
	Для Каждого Строка Из ТаблицаСОИ Цикл
		Если Не ЗначениеЗаполнено(Строка.ВидУслуги) И Не ЗначениеЗаполнено(Строка.КОплате) И Не ЗначениеЗаполнено(Строка.Перерасчет)
		 И Не ЗначениеЗаполнено(Строка.ОбщРасходОбщ) Тогда
			// Не выводим строку.
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "СОИСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Строка);
		
		врСтруктураПараметров = Новый Структура();
		Если ЗначениеЗаполнено(Строка.РазмерНормыОбщ) И ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
			врСтруктураПараметров.Вставить("Норма", "" + Строка.РазмерНормыОбщ + " " + Строка.ЕдИзм);
		КонецЕсли;
		Область.Параметры.Заполнить(врСтруктураПараметров);
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиВТаблицуНачисленияДанныеПоСОИЧебоксары()

// Формирует табличный документ и выводит в него подвал квитанции.
//
// Параметры:
//  Макет                           - Табличный документ - макет платежного документа.
//  ТаблицаПерерасчетов             - Таблица значений   - таблица с показаниями счетчиков по текущему л/с и зданию.
//  ОбщиеДанные                     - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек               - Структура          - структура с настройками формирования квитанций.
//  ТекущаяКвитанцияПоПеням         - Булево             - определяет, что квитанция по пеням.
//  УчитыватьПениВОсновнойКвитанции - Булево             - определяет, что пени учитываются в квитанции.
//  ТаблицаИПУ                      - Таблица значений   - таблица с информацией о ИПУ.
//  ТаблицаОПУ                      - Таблица значений   - таблица с информацией о ОПУ.
//  ТаблицаРассрочки                - Таблица значений   - таблица с информацией о рассрочках.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с подвалом квитанции.
//
Функция ПолучитьОбластьПодвалКвитанцииЧебоксары(Макет, ТаблицаПерерасчетов, ОбщиеДанные, СтруктураНастроек, ТекущаяКвитанцияПоПеням = Ложь,
												УчитыватьПениВОсновнойКвитанции = Ложь, ТаблицаИПУ = Неопределено, 
												ТаблицаОПУ = Неопределено, ТаблицаРассрочки = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ПустаяОбласть", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	врТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТекущаяКвитанцияПоПеням Тогда
		// Выводим пустую облать, к которой будем присоединять таблицу перерасчетов.
		Область = ПолучитьОбласть(Макет, "ПустаяОбластьСчетчиковПени", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	Иначе
		
		// В квитанции на кап. ремонт таблицу с показаниями счетчиков не выводим.
		Если Не ОбщиеДанные.КвитанцияНаКР Тогда
			
			Если ТаблицаИПУ.Количество() > 0
			 ИЛИ ТаблицаОПУ.Количество() > 0
			 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
				Область = ПолучитьОбласть(Макет, "ШапкаСчетчиков", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			Если ТаблицаИПУ.Количество() > 0 Тогда
				Область = ПолучитьОбласть(Макет, "ИндСчетчикиЗаголовок", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
				
				ВывестиПоказанияСчетчиковЧебоксары(Макет, врТабличныйДокумент, ТаблицаИПУ, СтруктураНастроек, ОбщиеДанные);
			КонецЕсли;
			
			Если ТаблицаОПУ.Количество() > 0 Тогда
				Область = ПолучитьОбласть(Макет, "ОбщСчетчикиЗаголовок", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
				
				ВывестиПоказанияСчетчиковЧебоксары(Макет, врТабличныйДокумент, ТаблицаОПУ, СтруктураНастроек, ОбщиеДанные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТаблицаИПУ.Количество() = 0
		   И ТаблицаОПУ.Количество() = 0
		   И НЕ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
			Область = ПолучитьОбласть(Макет, "ПустаяОбластьСчетчиковПени", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если НЕ ТаблицаРассрочки.Количество() = 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
			Область = ПолучитьОбласть(Макет, "ШапкаРассрочки", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			
			Для Каждого СтрокаРассрочик ИЗ ТаблицаРассрочки Цикл
				Область = ПолучитьОбласть(Макет, "СтрокаРассрочки", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(СтрокаРассрочик);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина, "Присоединить");
	
	врТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ТаблицаПерерасчетов.Количество() = 0 Тогда
		Область = ПолучитьОбласть(Макет, "ШапкаПерерасчетов", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "СтрокаПерерасчетов", СтруктураНастроек, ОбщиеДанные);
		КоординатыОбластиДляОбъекдинения = ПолучитьКоординатыПолейДляОбъединения(Область, 2);
		Для Каждого Строка Из ТаблицаПерерасчетов Цикл
			Область = ПолучитьОбласть(Макет, "СтрокаПерерасчетов", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			Область = КорректироватьВыводСтрокОбъединением(Макет, "СтрокаПерерасчетов", Область, КоординатыОбластиДляОбъекдинения, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
		Область = ПолучитьОбласть(Макет, "СтрокаЗаполнитель1", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
		
		Область = ПолучитьОбласть(Макет, "БлокИтогиШапкаВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Если Не ТекущаяКвитанцияПоПеням Тогда
			Область = ПолучитьОбласть(Макет, "БлокИтогиЖКУВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);;
		КонецЕсли;
		
		Если ТекущаяКвитанцияПоПеням Или УчитыватьПениВОсновнойКвитанции Тогда
			Область = ПолучитьОбласть(Макет, "БлокИтогиПениВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если Не (СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать") Тогда
			Область = ПолучитьОбласть(Макет, "БлокИтогиКомиссияВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "БлокИтогиПодвал1ВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "БлокРассрочкаПодвал1ВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "БлокСтрахованиеПодвал1ВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "БлокИтогиПодвал2ВключатьОплатыВНачСальдо", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина, "Присоединить");
		
	Иначе
		
		Область = ПолучитьОбласть(Макет, "БлокИтогиШапка", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Если Не ТекущаяКвитанцияПоПеням Тогда
			Область = ПолучитьОбласть(Макет, "БлокИтогиЖКУ", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если ТекущаяКвитанцияПоПеням Или УчитыватьПениВОсновнойКвитанции Тогда
			Область = ПолучитьОбласть(Макет, "БлокИтогиПени", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если Не (СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать") Тогда
			Область = ПолучитьОбласть(Макет, "БлокИтогиКомиссия", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "БлокИтогиПодвал1", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОстаткаПоРассрочке", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаОплатаСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "БлокИтогиПодвал2", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.ДатаОплаты = ОбщиеДанные.ДатаОплаты;
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина, "Присоединить");
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьПодвалКвитанцииЧебоксары()

// Выводить в табличный документ показания счетчиков.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ТабличныйДокумент - Табличный документ - табличный документ для вывода сведений.
//  ТаблицаСчетчиков  - Таблица значений   - таблица с показаниями счетчиков.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//
Процедура ВывестиПоказанияСчетчиковЧебоксары(Макет, ТабличныйДокумент, ТаблицаСчетчиков, СтруктураНастроек, ОбщиеДанные)
	
	Область = ПолучитьОбласть(Макет, "СчетчикиСтрока", СтруктураНастроек, ОбщиеДанные);
	КоординатыОбластиДляОбъекдинения = ПолучитьКоординатыПолейДляОбъединения(Область);
	
	СтрокаФормата                 = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧН=0; ЧГ=0";
	СписокФорматируемыхПараметров = Новый Структура("ПредПоказания, ТекПоказания, Расход");
	
	Для Каждого Строка Из ТаблицаСчетчиков Цикл
		
		врСтруктураПараметров = Новый Структура("ВидУслуги, Услуга, НаименованиеСчетчика, ЗаводскойНомер, КодСчетчика, ПредПоказания, ДатаПредПоказания, ТекПоказания, ДатаТекПоказания, Расход, ДатаПоверки");
		
		Если УПЖКХ_ПечатьКвитанцийСервер.СчетчикМноготарифный(Строка) Тогда
			
			Если ЗначениеЗаполнено(Строка.ПредыдущееПоказаниеДн) Тогда
				
				Область = ПолучитьОбласть(Макет, "СчетчикиСтрока", СтруктураНастроек, ОбщиеДанные);
				
				врСтруктураПараметров.ВидУслуги            = Строка(Строка.ВидУслуги) + " (дн.)";
				врСтруктураПараметров.Услуга               = Строка(Строка.Услуга) + " (дн.)";
				врСтруктураПараметров.НаименованиеСчетчика = Строка.НаименованиеСчетчика + " (дн.)";
				врСтруктураПараметров.ЗаводскойНомер       = Строка.ЗаводскойНомер + " (дн.)";
				врСтруктураПараметров.КодСчетчика          = Строка.КодСчетчика + " (дн.)";
				
				врСтруктураПараметров.ПредПоказания     = Строка.ПредПредыдущееПоказаниеДн;
				врСтруктураПараметров.ДатаПредПоказания = Формат(Строка.ПредПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
				врСтруктураПараметров.ТекПоказания      = Строка.ПредыдущееПоказаниеДн;
				врСтруктураПараметров.ДатаТекПоказания  = Формат(Строка.ПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
				врСтруктураПараметров.Расход            = Строка.РасходДн;
				врСтруктураПараметров.ДатаПоверки       = Формат(Строка.ДатаПоверки, "ДФ=dd.MM.yyyy");
				
				Область.Параметры.Заполнить(врСтруктураПараметров);
				
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				Область = КорректироватьВыводСтрокОбъединением(Макет, "СчетчикиСтрока", Область, КоординатыОбластиДляОбъекдинения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ПредыдущееПоказаниеНч) Тогда
				
				Область = ПолучитьОбласть(Макет, "СчетчикиСтрока", СтруктураНастроек, ОбщиеДанные);
				
				врСтруктураПараметров.ВидУслуги            = Строка(Строка.ВидУслуги) + " (нч.)";
				врСтруктураПараметров.Услуга               = Строка(Строка.Услуга) + " (нч.)";
				врСтруктураПараметров.НаименованиеСчетчика = Строка.НаименованиеСчетчика + " (нч.)";
				врСтруктураПараметров.ЗаводскойНомер       = Строка.ЗаводскойНомер + " (нч.)";
				врСтруктураПараметров.КодСчетчика          = Строка.КодСчетчика + " (нч.)";
				
				врСтруктураПараметров.ПредПоказания     = Строка.ПредПредыдущееПоказаниеНч;
				врСтруктураПараметров.ДатаПредПоказания = Формат(Строка.ПредПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
				врСтруктураПараметров.ТекПоказания      = Строка.ПредыдущееПоказаниеНч;
				врСтруктураПараметров.ДатаТекПоказания  = Формат(Строка.ПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
				врСтруктураПараметров.Расход            = Строка.РасходНч;
				врСтруктураПараметров.ДатаПоверки       = Формат(Строка.ДатаПоверки, "ДФ=dd.MM.yyyy");
				
				Область.Параметры.Заполнить(врСтруктураПараметров);
				
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				Область = КорректироватьВыводСтрокОбъединением(Макет, "СчетчикиСтрока", Область, КоординатыОбластиДляОбъекдинения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ПредыдущееПоказаниеПк) Тогда
				
				Область = ПолучитьОбласть(Макет, "СчетчикиСтрока", СтруктураНастроек, ОбщиеДанные);
				
				врСтруктураПараметров.ВидУслуги            = Строка(Строка.ВидУслуги) + " (пик.)";
				врСтруктураПараметров.Услуга               = Строка(Строка.Услуга) + " (пик.)";
				врСтруктураПараметров.НаименованиеСчетчика = Строка.НаименованиеСчетчика + " (пик.)";
				врСтруктураПараметров.ЗаводскойНомер       = Строка.ЗаводскойНомер + " (пик.)";
				врСтруктураПараметров.КодСчетчика          = Строка.КодСчетчика + " (пик.)";
				
				врСтруктураПараметров.ПредПоказания     = Строка.ПредПредыдущееПоказаниеПк;
				врСтруктураПараметров.ДатаПредПоказания = Формат(Строка.ПредПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
				врСтруктураПараметров.ТекПоказания      = Строка.ПредыдущееПоказаниеПк;
				врСтруктураПараметров.ДатаТекПоказания  = Формат(Строка.ПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
				врСтруктураПараметров.Расход            = Строка.РасходПк;
				врСтруктураПараметров.ДатаПоверки       = Формат(Строка.ДатаПоверки, "ДФ=dd.MM.yyyy");
				
				Область.Параметры.Заполнить(врСтруктураПараметров);
				
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				Область = КорректироватьВыводСтрокОбъединением(Макет, "СчетчикиСтрока", Область, КоординатыОбластиДляОбъекдинения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				
			КонецЕсли;
			
		Иначе
			
			Область = ПолучитьОбласть(Макет, "СчетчикиСтрока", СтруктураНастроек, ОбщиеДанные);
			
			врСтруктураПараметров.ВидУслуги            = Строка(Строка.ВидУслуги);
			врСтруктураПараметров.Услуга               = Строка(Строка.Услуга);
			врСтруктураПараметров.НаименованиеСчетчика = Строка.НаименованиеСчетчика;
			врСтруктураПараметров.ЗаводскойНомер       = Строка.ЗаводскойНомер;
			врСтруктураПараметров.КодСчетчика          = Строка.КодСчетчика;
			
			врСтруктураПараметров.ПредПоказания     = Строка.ПредПредыдущееПоказаниеДн;
			врСтруктураПараметров.ДатаПредПоказания = Формат(Строка.ПредПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
			врСтруктураПараметров.ТекПоказания      = Строка.ПредыдущееПоказаниеДн;
			врСтруктураПараметров.ДатаТекПоказания  = Формат(Строка.ПредыдущееПоказаниеПериод, "ДФ=dd.MM.yyyy");
			врСтруктураПараметров.Расход            = Строка.РасходДн;
			врСтруктураПараметров.ДатаПоверки       = Формат(Строка.ДатаПоверки, "ДФ=dd.MM.yyyy");
			
			Область.Параметры.Заполнить(врСтруктураПараметров);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			Область = КорректироватьВыводСтрокОбъединением(Макет, "СчетчикиСтрока", Область, КоординатыОбластиДляОбъекдинения, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиПоказанияСчетчиковЧебоксары()

// Выводит в таблицу начислений сведения о начислениях по "жилищным" услугам.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ТабличныйДокумент - Табличный документ - табличный документ для вывода сведений.
//  ОбщиеДанные       - Структура          - общие данные по текущей квитанции.
//  ТаблицаЖилищные   - Таблица значений   - таблица с начислениями по "жилищным" услугам.
//  СчетчикСтрок      - Число              - количество выводимых строк.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//
Процедура ВывестиДанныеПоЖилищнымУслугамЧебоксары(Макет, ТабличныйДокумент, ОбщиеДанные, ТаблицаЖилищные, СчетчикСтрок, СтруктураНастроек)
	
	ТочностьОбъемаНачислений = СтруктураНастроек.ТочностьОбъемаНачислений;
	
	Область = ПолучитьОбласть(Макет, "ЖилищныеЗаголовок", СтруктураНастроек, ОбщиеДанные);
	
	Область.Параметры.Заполнить(Новый Структура("ИтогоЖилищные", ?(ТаблицаЖилищные.Количество() = 0, 0, ТаблицаЖилищные[0].КОплате)));
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	СчетчикСтрок = СчетчикСтрок + 1;
	
	СтрокаФормата                 = "ЧДЦ=" + Строка(ТочностьОбъемаНачислений) + "; ЧГ=0";
	СписокФорматируемыхПараметров = Новый Структура("КоличествоИПУ");
	
	Для Каждого Строка Из ТаблицаЖилищные Цикл
		Если Не ЗначениеЗаполнено(Строка.ВидУслуги) Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "ЖилищныеСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Строка);
		
		врСтруктураПараметров = Новый Структура();
		
		Если Не Строка.Начислено = Неопределено И ЗначениеЗаполнено(Строка.Тариф) И Не ЗначениеЗаполнено(Строка.КоличествоИПУ) Тогда
			Если ЗначениеЗаполнено(Строка.Услуга.ВидПлощади) И Строка.Услуга.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь Тогда
				врСтруктураПараметров.Вставить("КоличествоИПУ", ЧИСЛО(ОбщиеДанные.ОбщаяПлощадь));
			ИначеЕсли ЗначениеЗаполнено(Строка.Услуга.ВидПлощади) И Строка.Услуга.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь Тогда
				врСтруктураПараметров.Вставить("КоличествоИПУ", ЧИСЛО(ОбщиеДанные.ЖилаяПлощадь));
			Иначе
				врСтруктураПараметров.Вставить("КоличествоИПУ", Строка.Начислено / Строка.Тариф);
			КонецЕсли;
		КонецЕсли;
		
		врСтруктураПараметров.Вставить("КодВидаНачислений", "" + Строка.КодВидаНачисленийИПУ + ?(Не ПустаяСтрока(Строка.КодВидаНачисленийОПУ),
															"," + Строка.КодВидаНачисленийОПУ,
															""));
		
		Если Строка.СтрокаДетализацииСост ИЛИ Строка.СтрокаДетализацииТариф Тогда
			врСтруктураПараметров.Вставить("КОплате", 0);
		КонецЕсли;
		
		Если Строка.ИмеетсяСоставнойИндивидуальныйРасход Тогда
			врСтруктураПараметров.Вставить("КоличествоИПУ", ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "Х", Строка.СоставноеКоличествоИнд));
		КонецЕсли;
		
		Область.Параметры.Заполнить(врСтруктураПараметров);
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиДанныеПоЖилищнымУслугамЧебоксары()

// Выводит в таблицу начислений сведения о начислениях по коммунальным услугам.
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТабличныйДокумент   - Табличный документ - табличный документ для вывода сведений.
//  ОбщиеДанные         - Структура          - общие данные по текущей квитанции.
//  ТаблицаКоммунальные - Таблица значений   - таблица с начислениями по коммунальным услугам.
//  СчетчикСтрок        - Число              - количество выводимых строк.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//
Процедура ВывестиДанныеПоКоммунальнымУслугамЧебоксары(Макет, ТабличныйДокумент, ОбщиеДанные, ТаблицаКоммунальные, СчетчикСтрок, СтруктураНастроек)
	
	ТочностьОбъемаНачислений = СтруктураНастроек.ТочностьОбъемаНачислений;
	
	СчетчикСтрок = СчетчикСтрок + 1;
	ПервыйОбход  = Истина;
	
	СтрокаФормата                 = "ЧДЦ=" + Строка(ТочностьОбъемаНачислений) + "; ЧГ=0";
	СписокФорматируемыхПараметров = Новый Структура("КоличествоИПУ, Норма, ОбщРасходИнд, ОбщУчетныйРасход");
	
	Для Каждого Строка Из ТаблицаКоммунальные Цикл
		Если Не ЗначениеЗаполнено(Строка.ВидУслуги) Или (Не ЗначениеЗаполнено(Строка.НачисленоИПУ)
			И Не ЗначениеЗаполнено(Строка.Перерасчет) И Не ЗначениеЗаполнено(Строка.Льгота) И Строка.УслугаПоСчетчикам) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПервыйОбход Тогда
			ПервыйОбход = Ложь;
			
			Область = ПолучитьОбласть(Макет, "КоммунальныеЗаголовок", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Новый Структура("ИтогоКоммунальные", ТаблицаКоммунальные[0].КОплате));
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "КоммунальныеСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Строка);
		
		врСтруктураПараметров = Новый Структура();
		
		// Если пользователь пытается вывести услугу без ПУ в списке коммунальных услуг.
		Если Не Строка.УслугаПоСчетчикам И Не Строка.УслугаСоставнаяПоСчетчикам Тогда
			врСтруктураПараметров.Вставить("КоличествоИПУ", Строка.КоличествоИПУ);
			врСтруктураПараметров.Вставить("НачисленоИПУ",  Строка.Начислено);
			врСтруктураПараметров.Вставить("КОплатеИПУ",    Строка.КОплатеИПУ);
			
			Если Строка.ИмеетсяСоставнойИндивидуальныйРасход Тогда
				врСтруктураПараметров.Вставить("КоличествоИПУ", ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "Х", Строка.СоставноеКоличествоИнд));
			КонецЕсли;
			
		КонецЕсли;
		
		врСтруктураПараметров.Вставить("КодВидаНачислений", "" + Строка.КодВидаНачисленийИПУ);
		
		Если ЗначениеЗаполнено(Строка.РазмерНормы) И ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
			врСтруктураПараметров.Вставить("Норма", "" + Строка.РазмерНормы + " " + Строка.ЕдИзм);
		КонецЕсли;
		Область.Параметры.Заполнить(врСтруктураПараметров);
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиДанныеПоКоммунальнымУслугамЧебоксары()

// Выводит в таблицу начислений сведения о начислениях по прочим услугам.
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТабличныйДокумент   - Табличный документ - табличный документ для вывода сведений.
//  ОбщиеДанные         - Структура          - общие данные по текущей квитанции.
//  ТаблицаПрочие       - Таблица значений   - таблица с начислениями по прочим услугам.
//  СчетчикСтрок        - Число              - количество выводимых строк.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//
Процедура ВывестиДанныеПоПрочимУслугамЧебоксары(Макет, ТабличныйДокумент, ОбщиеДанные, ТаблицаПрочие, СчетчикСтрок, СтруктураНастроек)
	
	ТочностьОбъемаНачислений = СтруктураНастроек.ТочностьОбъемаНачислений;
	
	Область = ПолучитьОбласть(Макет, "ПрочиеЗаголовок", СтруктураНастроек, ОбщиеДанные);
	
	врСтруктураПараметров = Новый Структура("ИтогоПрочие", ?(ТаблицаПрочие.Количество() = 0, 0, ТаблицаПрочие.Получить(0).КОплате));
	Область.Параметры.Заполнить(врСтруктураПараметров);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	СчетчикСтрок = СчетчикСтрок + 1;
	
	СтрокаФормата                 = "ЧДЦ=" + Строка(ТочностьОбъемаНачислений) + "; ЧГ=0";
	СписокФорматируемыхПараметров = Новый Структура("КоличествоИПУ");
	
	Для Каждого Строка Из ТаблицаПрочие Цикл
		Если Не ЗначениеЗаполнено(Строка.ВидУслуги) Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "ЖилищныеСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Строка);
		
		врСтруктураПараметров = Новый Структура();
		Если Не Строка.Начислено = Неопределено И ЗначениеЗаполнено(Строка.Тариф) И Не ЗначениеЗаполнено(Строка.КоличествоИПУ) И Не Строка.УслугаПоСчетчикам Тогда
			Если ЗначениеЗаполнено(Строка.Услуга.ВидПлощади) И Строка.Услуга.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь Тогда
				врСтруктураПараметров.Вставить("КоличествоИПУ", ЧИСЛО(ОбщиеДанные.ОбщаяПлощадь));
			ИначеЕсли ЗначениеЗаполнено(Строка.Услуга.ВидПлощади) И Строка.Услуга.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь Тогда
				врСтруктураПараметров.Вставить("КоличествоИПУ", ЧИСЛО(ОбщиеДанные.ЖилаяПлощадь));
			Иначе
				врСтруктураПараметров.Вставить("КоличествоИПУ", Строка.Начислено / Строка.Тариф);
			КонецЕсли;
		КонецЕсли;
		
		врСтруктураПараметров.Вставить("КодВидаНачислений", "" + Строка.КодВидаНачисленийИПУ + ?(Не ПустаяСтрока(Строка.КодВидаНачисленийОПУ),
										"," + Строка.КодВидаНачисленийОПУ,
										""));
		Если Строка.ИмеетсяСоставнойИндивидуальныйРасход     = Истина Тогда
			врСтруктураПараметров.Вставить("КоличествоИПУ", ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "Х", Строка.СоставноеКоличествоИнд));
		КонецЕсли;
		
		Область.Параметры.Заполнить(врСтруктураПараметров);
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиДанныеПоПрочимУслугамЧебоксары()

// Выводит в таблицу начислений сведения о начислениях на ОДН.
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  ТабличныйДокумент   - Табличный документ - табличный документ для вывода сведений.
//  ОбщиеДанные         - Структура          - общие данные по текущей квитанции.
//  ТаблицаОДН          - Таблица значений   - таблица с начислениями по ОДН.
//  СчетчикСтрок        - Число              - количество выводимых строк.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//
Процедура ВывестиВТаблицуНачисленийДанныеПоОДНЧебоксары(Макет, ТабличныйДокумент, ОбщиеДанные, ТаблицаОДН, СчетчикСтрок, СтруктураНастроек)
	
	ТочностьОбъемаНачислений = СтруктураНастроек.ТочностьОбъемаНачислений;
	
	Область = ПолучитьОбласть(Макет, "ОПУЗаголовок", СтруктураНастроек, ОбщиеДанные);
	
	Область.Параметры.Заполнить(Новый Структура("ИтогоОДН", ТаблицаОДН[0].КОплате));
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	СчетчикСтрок = СчетчикСтрок + 1;
	
	СтрокаФормата = "ЧДЦ=" + Строка(ТочностьОбъемаНачислений) + "; ЧГ=0";
	
	СписокФорматируемыхПараметров = Новый Структура("КоличествоОПУ, Норма, ОбщРасходОбщ");
	
	Для Каждого Строка Из ТаблицаОДН Цикл
		Если Не ЗначениеЗаполнено(Строка.ВидУслуги) Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "ОПУСтрока", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Строка);
		
		врСтруктураПараметров = Новый Структура();
		Если ЗначениеЗаполнено(Строка.РазмерНормыОбщ) И ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
			врСтруктураПараметров.Вставить("Норма", "" + Строка.РазмерНормыОбщ + " " + Строка.ЕдИзм);
		КонецЕсли;
		
		Если НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост Тогда
			врСтруктураПараметров.Вставить("НачисленоОПУИтог", Строка.НачисленоОПУ + Строка.ПерерасчетОДН);
		КонецЕсли;
		
		Область.Параметры.Заполнить(врСтруктураПараметров);
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиВТаблицуНачисленийДанныеПоОДНЧебоксары()

#КонецОбласти

#Область ФормаПлатДокументМосковскаяОбласть //(пост. №1161/57 для МО)

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (МОСКОВСКАЯ ОБЛАСТЬ по пост. №1161/57 для МО)".

// Формирует табличный документ и выводит в него область бланка показаний счетчиков.
//
// Параметры:
//  Макет                                - Табличный документ - макет платежного документа.
//  ОбщиеДанные                          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек                    - Структура          - структура с настройками формирования квитанций.
//  СтруктураСимволовСуммыИЛицевогоСчета - Структура          - структура с итоговой суммой к оплате и номером л/с.
//  ТаблицаСчетчиков                     - Таблица значений   - таблица с информацией о ПУ.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с Бланком показаний.
//
Функция ПолучитьОбластьБланкПоказанийСчетчиковМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета, ТаблицаСчетчиков)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "Заголовок", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	// В квитанции на кап. ремонт бланк для передачи показаний ПУ не выводим.
	Если Не ОбщиеДанные.КвитанцияНаКР Тогда
		
		Область = ПолучитьОбласть(Макет, "БланкПередачиПоказанийШапка", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		// Для вывода л/с, показаний ПУ, штрихкодов.
		врТабличныйДокумент = Новый ТабличныйДокумент;
		
		// Для вывода л/с, показаний ПУ
		ОбластьПоказания = Новый ТабличныйДокумент;
		
		Область = ПолучитьОбласть(Макет, "ОбластьЛицевогоСчета", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураСимволовСуммыИЛицевогоСчета);
		ВывестиОбласть(ОбластьПоказания, Область, Истина);
		
		Первая = Истина;
		Для Каждого Строка Из ТаблицаСчетчиков Цикл
			Если Не Строка.ЯвляетсяОПУ Тогда
				Если Первая Тогда
					Первая = Ложь;
					Область = ПолучитьОбласть(Макет, "ТаблицаСчетчиковШапка", СтруктураНастроек, ОбщиеДанные);
					ВывестиОбласть(ОбластьПоказания, Область, Истина);
				КонецЕсли;
				Область = ПолучитьОбласть(Макет, "ТаблицаСчетчиковСтрока", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(Строка);
				СтрокаПоказаний = УПЖКХ_ПечатьКвитанцийСервер.СформироватьСтрокуПоказаний(Строка.ПредыдущееПоказаниеДн,
																						  Строка.ПредыдущееПоказаниеНч,
																						  Строка.ПредыдущееПоказаниеПк,
																						  Строка.Тарифность);
				Область.Параметры.Заполнить(Новый Структура("СтрокаПоказаний", СтрокаПоказаний));
				
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, "", Строка);
				
				ВывестиОбласть(ОбластьПоказания, Область, Истина);
			КонецЕсли;
		КонецЦикла;
		
		ВывестиОбласть(врТабличныйДокумент, ОбластьПоказания, Истина, "Присоединить");
		
		// Для вывода штрихкодов.
		ОбластьШтихкоды = Новый ТабличныйДокумент;
		Если СтруктураНастроек.ВыводитьШК Тогда
			Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
				Если Не ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
					Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
					ВывестиОбласть(ОбластьШтихкоды, Область, Истина, "Присоединить");
				КонецЕсли;
				
				Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRШКСоСтрахованием", "ОбластьQRШК"), СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ОбластьШтихкоды, Область, Истина, "Присоединить");
			Иначе
				Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьШКСоСтрахованием", "ОбластьШК"), СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ОбластьШтихкоды, Область, Истина);
			КонецЕсли;
		КонецЕсли;
		
		// В последующем будут выведены те же самые штрихкоды. При этом платформа автоматически поменяет имена текущих штрихкодов
		// на имена по умолчанию. Это приведет к тому, что будет неверно сформирован текст штрихкода по добровольному страхованию.
		// Чтобы избежать этой проблемы, поменяем имена вручную на те, которые нам нужны.
		Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
			ПоменятьИмяШтрихкодаСоСтрахованием(ОбластьШтихкоды);
		КонецЕсли;
		
		ВывестиОбласть(врТабличныйДокумент, ОбластьШтихкоды, Истина, "Присоединить");
		
		ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина);
		
		Область = ПолучитьОбласть(Макет, "БланкПередачиПоказанийПодвал", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "РазделительБланкПередачиПоказаний", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьБланкПоказанийСчетчиковМосква()

// Формирует табличный документ и выводит в него блок "Извещение".
//
// Параметры:
//  Макет                                - Табличный документ - макет платежного документа.
//  ОбщиеДанные                          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек                    - Структура          - структура с настройками формирования квитанций.
//  СтруктураСимволовСуммыИЛицевогоСчета - Структура          - структура с итоговой суммой к оплате и номером л/с.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью Извещение.
//
Функция ПолучитьОбластьИзвещениеМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Выводим области штрихкодов.
	Если ОбщиеДанные.ВыводитьQRштрихкодДляСитикард Тогда
		
		врТабличныйДокумент = Новый ТабличныйДокумент;
		
		// Сначала выводим области для заполнения пустого места слева.
		Если СтруктураНастроек.ВыводитьШК Тогда
			Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
				Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьБезШтрихкодаДляШКиQRОнлайн", "ОбластьБезШтрихКода"), СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			Иначе
				Область = ПолучитьОбласть(Макет, "ОбластьБезШтрихкодаДляШКиQRОнлайн", СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			КонецЕсли;
		Иначе
			Область = ПолучитьОбласть(Макет, "ОбластьБезШтрихКода", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
			
			Область = ПолучитьОбласть(Макет, "ОбластьQRШКПустая", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
		КонецЕсли;
		
		// Присоединяем область основного штрихкода.
		Если СтруктураНастроек.ВыводитьШК Тогда
			Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
				Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRШКСоСтрахованием", "ОбластьQRШК"), СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
			Иначе
				Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьШКСоСтрахованием", "ОбластьШК"), СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
			КонецЕсли;
		КонецЕсли;
		
		// Присоединяем область QR-штрихкода для онлайн-оплаты.
		Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
		
		ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина);
		
	ИначеЕсли СтруктураНастроек.ВыводитьШК Тогда
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR Тогда
			
			// Сначала выводим и присоединяем области для заполнения пустого места слева.
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьБезШтрихкодаДляШКиQRОнлайн", "ОбластьБезШтрихкода"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайнПустая", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
			
			// Присоединяем область QR-штрихкода.
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRШКСоСтрахованием", "ОбластьQRШК"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
		Иначе
			// Сначала выводим области для заполнения пустого места слева.
			Область = ПолучитьОбласть(Макет, "ОбластьБезШтрихкода", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			// Присоединяем область одномерного штрихкода.
			Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьШКСоСтрахованием", "ОбластьШК"), СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
		КонецЕсли;
	Иначе
		Область = ПолучитьОбласть(Макет, "ОбластьБезШтрихкода", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ИзвещениеСоСтрахованием", "Извещение"), СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	врСтруктураПараметров = Новый Структура;
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("ПолучательПлатежа",       ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("АдресПолучателя",         ОбщиеДанные.ЮрАдресИсполнителяКР);
		врСтруктураПараметров.Вставить("ИННПолучателя",           ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("КПППолучателя",           ОбщиеДанные.КППВладельцаСчетаКР);
		
		Если ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Контрагенты") Тогда
			врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияИсполнителяКР);
		ИначеЕсли ТипЗнч(ОбщиеДанные.ВладелецСчетаКР) = Тип("СправочникСсылка.Организации") Тогда
			врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияКР);
		КонецЕсли;
		
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации",  "");
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчетИсполнителя);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.БанкИсполнителя);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИКБанкаИсполнителя);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчетБанкаИсполнителя);
		врСтруктураПараметров.Вставить("ЗапятаяСайтОрганизации",  "");
		врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияПолучателя);
	Иначе
		врСтруктураПараметров.Вставить("РасчСчетПолучателя",      ОбщиеДанные.РасчетныйСчет);
		врСтруктураПараметров.Вставить("БанкПолучателя",          ОбщиеДанные.Банк);
		врСтруктураПараметров.Вставить("БИКПолучателя",           ОбщиеДанные.БИК);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя",      ОбщиеДанные.КоррСчет);
		врСтруктураПараметров.Вставить("ДопИнформацияПолучателя", ОбщиеДанные.ДопИнформацияПолучателя);
	КонецЕсли;
	Область.Параметры.Заполнить(врСтруктураПараметров);
	
	СтруктураПараметровМакета = Новый Структура("МесяцСтрокой, ГодСтрокой");
	УПЖКХ_ПечатьКвитанцийСервер.РазложитьПериодРасчета(СтруктураПараметровМакета, Формат(СтруктураНастроек.ПериодПросмотра, "ДФ='ММММ гггг'"));
	
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	
	Область.Параметры.Заполнить(СтруктураСимволовСуммыИЛицевогоСчета);
	
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "РазделительИзвещение", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьИзвещениеМосква()

// Формирует табличный документ и выводит в него блок "Квитанция".
//
// Параметры:
//  Макет                                - Табличный документ - макет платежного документа.
//  ОбщиеДанные                          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек                    - Структура          - структура с настройками формирования квитанций.
//  СтруктураСимволовСуммыИЛицевогоСчета - Структура          - структура с итоговой суммой к оплате и номером л/с.
//  КоличествоЛьготников                 - Число              - количество льготников.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "Квитанция".
//
Функция ПолучитьОбластьКвитанцияМосква(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета, КоличествоЛьготников)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	СтруктураПараметровМакета = Новый Структура("МесяцСтрокой, ГодСтрокой");
	УПЖКХ_ПечатьКвитанцийСервер.РазложитьПериодРасчета(СтруктураПараметровМакета, Формат(СтруктураНастроек.ПериодПросмотра, "ДФ='ММММ гггг'"));
	
	Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ШапкаКвитанцияСоСтрахованием", "ШапкаКвитанция"), СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураСимволовСуммыИЛицевогоСчета);
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	
	врСтруктураПараметров = Новый Структура;
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчетКР);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.БанкКР);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИККР);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчетКР);
		врСтруктураПараметров.Вставить("ПолучательПлатежа",  ОбщиеДанные.ВладелецСчетаКР);
		врСтруктураПараметров.Вставить("ИННПолучателя",      ОбщиеДанные.ИННВладельцаСчетаКР);
		врСтруктураПараметров.Вставить("КПППолучателя",      ОбщиеДанные.КППВладельцаСчетаКР);
	ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчетИсполнителя);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.БанкИсполнителя);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИКБанкаИсполнителя);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчетБанкаИсполнителя);
	Иначе
		врСтруктураПараметров.Вставить("РасчСчетПолучателя", ОбщиеДанные.РасчетныйСчет);
		врСтруктураПараметров.Вставить("БанкПолучателя",     ОбщиеДанные.Банк);
		врСтруктураПараметров.Вставить("БИКПолучателя",      ОбщиеДанные.БИК);
		врСтруктураПараметров.Вставить("КоррСчетПолучателя", ОбщиеДанные.КоррСчет);
	КонецЕсли;
	
	Область.Параметры.Заполнить(врСтруктураПараметров);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбластьДанныхПоЗданиюИПлательщикамМосква(Макет, ОбщиеДанные, СтруктураНастроек, КоличествоЛьготников);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "РазделительКвитанция", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьКвитанцияМосква()

// Формирует табличный документ и выводит в него блоки сведений по зданиям и итогам.
//
// Параметры:
//  Макет                - Табличный документ - макет платежного документа.
//  ОбщиеДанные          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек    - Структура          - структура с настройками формирования квитанций.
//  КоличествоЛьготников - Число              - количество льготников.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ со сведениями по зданиям и итогам.
//
Функция ПолучитьОбластьДанныхПоЗданиюИПлательщикамМосква(Макет, ОбщиеДанные, СтруктураНастроек, КоличествоЛьготников)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "КвитанцияСведенияПоЗданию", СтруктураНастроек, ОбщиеДанные);
	
	СтруктураПараметровМакета = Новый Структура();
	Если Не КоличествоЛьготников.Количество() = 0 Тогда
		СтруктураПараметровМакета.Вставить("КоличествоЛьготников", КоличествоЛьготников[0].КоличествоЛьготников);
	Иначе
		СтруктураПараметровМакета.Вставить("КоличествоЛьготников", 0);
	КонецЕсли;
	
	ЗаполнитьШаблонПлощадиПомещенияВМакете(ОбщиеДанные, СтруктураНастроек);
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	врТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Выравниваем область относительно левой области сведений  по зданию/помещению - 
	// уменьшаем отступ от верхней области, если одна из настроек не учитывается.
	Если (Не СтруктураНастроек.УчитыватьПени
	 ИЛИ (СтруктураНастроек.УчитыватьПени И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням) 
	 ИЛИ Не СтруктураНастроек.ВыводитьНачальноеСальдо ИЛИ (СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать")) Тогда
		Область = ПолучитьОбласть(Макет, "ПустаяОбластьИтогов", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "КвитанцияНачислено", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияСальдоВнесеноОплат", СтруктураНастроек, ОбщиеДанные);
		
		СтруктураЗаполнения = Новый Структура("ТекстОплата");
		Если СтруктураНастроек.ВключатьОплатыВНачальноеСальдо Тогда
			СтруктураЗаполнения.ТекстОплата = "в т.ч. оплаты за период";
		Иначе
			СтруктураЗаполнения.ТекстОплата = "Поступило за период:";
		КонецЕсли;
		Область.Параметры.Заполнить(СтруктураЗаполнения);
		
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Если ОбщиеДанные.ВнесеноОплатНаПогашениеРассрочки > 0 Тогда
			Область = ПолучитьОбласть(Макет, "КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Если ОбщиеДанные.ВнесеноНаДобровольноеСтрахование > 0 Тогда
			Область = ПолучитьОбласть(Макет, "КвитанцияСальдоВнесеноОплатНаСтрахование", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураНастроек.УчитыватьПени
	   И Не СтруктураНастроек.ПечататьОтдельнуюКвитанциюПоПеням Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияПени", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Если Не (СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать") Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияКомиссияБанка", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Если СтруктураНастроек.ВыводитьНачальноеСальдо Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияДатаОплаты", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "КвитанцияИтогСрокОплатыСоСтрахованием", "КвитанцияИтогСрокОплаты"), СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(врТабличныйДокумент, Область, Истина);
	
	ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьДанныхПоЗданиюИПлательщикамМосква()

// Формирует табличный документ и выводит в него область, соответствующую начислениям.
//
// Параметры:
//  Макет                    - Табличный документ - макет платежного документа.
//  ОбщиеДанные              - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек        - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления        - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  ТаблицаСоответствийУслуг - Таблица значений   - сведения о соответствии услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью начисления.
//
Функция ПолучитьОбластьНачисленияМосква(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаПоставщиков, ТаблицаДобровольногоСтрахования)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "НачисленияШапка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		ТаблицаКоммунальныхУслуг  = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная",      Истина), СтруктураНастроек);
		ТаблицаСодержанияИРемонта = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("СодержаниеИРемонт", Истина), СтруктураНастроек);
		ТаблицаУслугСОИ           = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугСОИ(ТаблицаНачисления, СтруктураНастроек);
		ТаблицаПрочихУслуг        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуУслугДляКвитанции(ТаблицаНачисления, Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь), СтруктураНастроек);
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаКоммунальные", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияМосква(Макет, СтруктураНастроек, ТаблицаКоммунальныхУслуг, ОбщиеДанные, ТабличныйДокумент, ТаблицаПоставщиков);
		КонецЕсли;
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаСодержаниеИРемонт", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияМосква(Макет, СтруктураНастроек, ТаблицаСодержанияИРемонта, ОбщиеДанные, ТабличныйДокумент, ТаблицаПоставщиков);
		КонецЕсли;
		
		Если Не ТаблицаУслугСОИ.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаСОИ", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияМосква(Макет, СтруктураНастроек, ТаблицаУслугСОИ, ОбщиеДанные, ТабличныйДокумент, ТаблицаПоставщиков);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаПрочие", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияМосква(Макет, СтруктураНастроек, ТаблицаПрочихУслуг, ОбщиеДанные, ТабличныйДокумент, ТаблицаПоставщиков);
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияМосква(Макет, СтруктураНастроек, ТаблицаНачисления, ОбщиеДанные, ТабличныйДокумент, ТаблицаПоставщиков);
	КонецЕсли;
	
	// Вводим переменные итоговых сумм начислений по ИПУ и ОПУ.
	ИтоговаяСуммаИПУ = 0;
	ИтоговаяСуммаОПУ = 0;
	
	// Суммируем начисления по услугам, рассчитываемым по ПУ.
	Для Каждого Строка Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) ИЛИ ЗначениеЗаполнено(Строка.Услуга) Тогда
			Если НЕ Строка.СтрокаДетализацииТариф И НЕ Строка.СтрокаДетализацииСост Тогда
				Если Строка.УслугаПоСчетчикам = Истина ИЛИ Строка.УслугаСоставнаяПоСчетчикам = Истина Тогда
					ИтоговаяСуммаИПУ = ИтоговаяСуммаИПУ + Строка.НачисленоИПУ;
					ИтоговаяСуммаОПУ = ИтоговаяСуммаОПУ + Строка.НачисленоОПУ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем параметры получеными значениями итоговой строки.
	Область = ПолучитьОбласть(Макет, "НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
	
	СтруктураПараметровПодвалНачисления = Новый Структура("КОплате, Начислено, СуммаПовышения, Льгота, Перерасчет, НачисленоИПУ, НачисленоОПУ, ТекстПодвалаСтрахование");
	
	Если НЕ ТаблицаНачисления.Количество() = 0
	   И ТаблицаНачисления.Получить(0).Льгота = 0 Тогда
		ТаблицаНачисления.Получить(0).Льгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	СтруктураПараметровПодвалНачисления.КОплате        = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).КОплате);
	СтруктураПараметровПодвалНачисления.Начислено      = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).Начислено);
	СтруктураПараметровПодвалНачисления.СуммаПовышения = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).СуммаПовышения);
	СтруктураПараметровПодвалНачисления.Льгота         = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).Льгота);
	СтруктураПараметровПодвалНачисления.Перерасчет     = ?(ТаблицаНачисления.Количество() = 0, 0, ТаблицаНачисления.Получить(0).Перерасчет);
	СтруктураПараметровПодвалНачисления.НачисленоИПУ   = ИтоговаяСуммаИПУ;
	СтруктураПараметровПодвалНачисления.НачисленоОПУ   = ИтоговаяСуммаОПУ;
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		СтруктураПараметровПодвалНачисления.ТекстПодвалаСтрахование = "без учета добр. страхования";
	КонецЕсли;
	
	Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Для Каждого Строка Из ТаблицаДобровольногоСтрахования Цикл
			Область = ПолучитьОбласть(Макет, "СтрокаДобровольногоСтрахования", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
		СтруктураПараметровПодвалНачисления.ТекстПодвалаСтрахование = "с учетом добр. страхования";
		СтруктураПараметровПодвалНачисления.КОплате                 = ?(СтруктураПараметровПодвалНачисления.КОплате < 0, 0, СтруктураПараметровПодвалНачисления.КОплате) 
																		+ ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураПараметровПодвалНачисления.Начислено               = СтруктураПараметровПодвалНачисления.Начислено + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураПараметровПодвалНачисления.НачисленоИПУ            = СтруктураПараметровПодвалНачисления.НачисленоИПУ + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		
		Область = ПолучитьОбласть(Макет, "НачисленияПодвал", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураПараметровПодвалНачисления);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, "РазделительНачисления", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьНачисленияМосква()

// Формирует табличный документ и выводит в него область сведений о перерасчетах и рассрочке.
//
// Параметры:
//  Макет                    - Табличный документ - макет платежного документа.
//  СтруктураНастроек        - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПерерасчетов      - Таблица значений   - сведения о перерасчетах по текущему л/с.
//  ТаблицаСоответствийУслуг - Таблица значений   - сведения о соответствии услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью перерасчеты.
//
Функция ПолучитьОбластьПерерасчетыМосква(Макет, СтруктураНастроек, ТаблицаПерерасчетов, ТаблицаПоставщиков, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПустаяОбласть = ПолучитьОбласть(Макет, "ПустаяОбласть", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, ПустаяОбласть, Истина);
	
	врТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаПерерасчетов.Количество() > 0
	 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		Область = ПолучитьОбласть(Макет, "ПерерасчетыШапка", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Для Каждого Строка Из ТаблицаПерерасчетов Цикл
			
			Область = ПолучитьОбласть(Макет, "ПерерасчетыСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			
			// Выводим порядковый номер поставщика, если вид услуги найден в таблице соответствий.
			Область.Параметры.Заполнить(Новый Структура("НомПоставщика", ПолучитьНомерПолучателяПлатежа(Строка(Строка.ВидУслуги), ТаблицаПоставщиков)));
			
			ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
	// Если перерасчетов нет, то выводим пустую область, по равную области перерасчетов
	// для того, чтобы таблица рассрочки (при её наличии) выводилась на своем месте.
	Иначе
		
		Область = ПолучитьОбласть(Макет, "ПерерасчетыПустаяОбл", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
	КонецЕсли;
	
	ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьПерерасчетыМосква()

// Формирует табличный документ и выводит в него область сведений о рассрочке.
//
// Параметры:
//  Макет                    - Табличный документ - макет платежного документа.
//  СтруктураНастроек        - Структура          - структура с настройками формирования квитанций.
//  ТаблицаРассрочки         - Таблица значений   - сведения о рассрочках по текущему л/с.
//  ТаблицаСоответствийУслуг - Таблица значений   - сведения о соответствии услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью перерасчеты.
//
Функция ПолучитьОбластьРассрочкаМосква(Макет, СтруктураНастроек, ТаблицаРассрочки, ТаблицаПоставщиков, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ТаблицаРассрочки.Количество() = 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		Область = ПолучитьОбласть(Макет, "РассрочкаШапка", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Для Каждого Строка Из ТаблицаРассрочки Цикл
			Область = ПолучитьОбласть(Макет, "РассрочкаСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			
			// Выводим порядковый номер поставщика, если вид услуги найден в таблице соответствий.
			Область.Параметры.Заполнить(Новый Структура("НомПоставщика", ПолучитьНомерПолучателяПлатежа(Строка(Строка.ВидУслуги), ТаблицаПоставщиков)));
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРассрочкаМосква()

// Формирует табличный документ и выводит в него область сведений о поставщиках.
//
// Параметры:
//  Макет                             - Табличный документ - макет платежного документа.
//  СтруктураНастроек                 - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПоставщиковССоответствиями - Таблица значений   - сведения о соответствии услуг.
//  ОбщиеДанные                       - Структура          - общие данные по текущей квитанции.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью со сведениями о поставщиках.
//
Функция ПолучитьОбластьПоставщикиМосква(Макет, СтруктураНастроек, ТаблицаПоставщиков, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	врТаблицаПоставщиков = ТаблицаПоставщиков.Скопировать(, "Поставщик, Адрес, Телефон, ПорядковыйНомерПоставщика, СуммаНачисления, СуммаПени, НачальноеСальдо, ВсегоОплат, ВсегоКОплате");
	врТаблицаПоставщиков.Свернуть("Поставщик, Адрес, Телефон, ПорядковыйНомерПоставщика", "СуммаНачисления, СуммаПени, НачальноеСальдо, ВсегоОплат, ВсегоКОплате");
	
	Если (Не врТаблицаПоставщиков.Количество() = 0 Или СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти) И НЕ ОбщиеДанные.КвитанцияНаКР Тогда
		
		Область = ПолучитьОбласть(Макет, "ПоставщикиШапка", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Для Каждого Строка Из врТаблицаПоставщиков Цикл
			
			Если ЗначениеЗаполнено(Строка.Поставщик) Тогда
				Область = ПолучитьОбласть(Макет, "ПоставщикиСтрока", СтруктураНастроек, ОбщиеДанные);
				
				Область.Параметры.Заполнить(Строка);
				Область.Параметры.Заполнить(Новый Структура("КонтактнаяИнформация", "" + Строка.Адрес + ?(Строка.Телефон = "", "", ", " + Строка.Телефон)));
				
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьПоставщикиМосква()

// Формирует табличный документ и выводит в него область справочной информации.
//
// Параметры:
//  Макет                    - Табличный документ - макет платежного документа.
//  СтруктураНастроек        - Структура          - структура с настройками формирования квитанций.
//  ТаблицаСчетчиков         - Таблица значений   - сведения о ПУ.
//  ТаблицаНачисления        - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  ТаблицаСоответствийУслуг - Таблица значений   - сведения о соответствии услуг.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью справочной информации.
//
Функция ПолучитьОбластьСправочнаяИнформацияМосква(Макет, СтруктураНастроек, ТаблицаСчетчиков, ТаблицаНачисления, ТаблицаПоставщиков, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТаблицаНачисленийСч = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуНачисленияПоСчетчикам(ТаблицаНачисления, СтруктураНастроек);
	
	Если Не ТаблицаНачисленийСч.Количество() = 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
			ИмяОбласти = "СправочнаяИнформацияШапкаСРасхождением";
		Иначе
			ИмяОбласти = "СправочнаяИнформацияШапкаБезРасхождений";
		КонецЕсли;
		Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		ЧН = "ЧН=0,";
		Для Итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
			ЧН = ЧН + "0";
		КонецЦикла;
		
		СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ЧН + "; ЧГ=0";
		
		СписокФорматируемыхПараметров = Новый Структура("ТекПоказанияИнд, ОбщРасходИндПУ, ОбщРасходИндНорма, ОбщРасходОбщ");
		
		Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
			СписокФорматируемыхПараметров.Вставить("ОбщРасходРасхождение");
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаНачисленийСч Цикл
			
			Если СтруктураНастроек.ВыводитьОбъемыРасхождения Тогда
				ИмяОбласти = "СправочнаяИнформацияСтрокаСРасхождением";
				Строка.ОбщРасходРасхождение = - Строка.ОбщРасходРасхождение;
			Иначе
				ИмяОбласти = "СправочнаяИнформацияСтрокаБезРасхождений";
			КонецЕсли;
			Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			// Выводим порядковый номер поставщика, если вид услуги найден в таблице соответствий.
			Область.Параметры.Заполнить(Новый Структура("НомПоставщика", ПолучитьНомерПолучателяПлатежа(Строка(Строка.ВидУслуги), ТаблицаПоставщиков)));
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьСправочнаяИнформацияМосква()

// Процедура выводит таблицу с начислениями.
//
// Параметры:
//  Макет                    - Табличный документ - макет платежного документа.
//  СтруктураНастроек        - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления        - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  ОбщиеДанные              - Структура          - общие данные по текущей квитанции.
//  ТабличныйДокумент        - Табличный документ - табличный документ для вывода сведений.
//  ТаблицаСоответствийУслуг - Таблица значений   - сведения о соответствии услуг.
//
Процедура ВывестиТаблицуНачисленияМосква(Макет, СтруктураНастроек, ТаблицаНачисления, ОбщиеДанные, ТабличныйДокумент, ТаблицаПоставщиков)
	
	ЧН = "ЧН=0,";
	Для итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
		ЧН = ЧН + "0";
	КонецЦикла;
	СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ЧН + "; ЧГ=0";
	
	СписокФорматируемыхПараметров = Новый Структура("КоличествоИПУ, КоличествоОПУ");
	
	Для Каждого Строка ИЗ ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги) И Строка.УслугаСНачислениями = Истина Тогда
			
			Область = ПолучитьОбласть(Макет, "НачисленияСтрока", СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			
			СтруктураПараметровСтрокиНачисления = Новый Структура();
			
			// Выводим порядковый номер поставщика, если вид услуги найден в таблице соответствий.
			Если Не Строка.СтрокаДетализацииСост И Не Строка.СтрокаДетализацииТариф Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("НомПоставщика", ПолучитьНомерПолучателяПлатежа(Строка(Строка.ВидУслуги), ТаблицаПоставщиков));
			КонецЕсли;
			
			// Для строк детализации по видам тарифа и для итоговой строки детализации
			// по составляющим услугам единицы измерения не выводим.
			Если НЕ ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ЕдИзм", "Х");
			КонецЕсли;
			
			// Для итоговых строк детализации тариф не выводим.
			Если НЕ ЗначениеЗаполнено(Строка.ТарифДляВывода) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ТарифДляВывода", "Х");
			КонецЕсли;
			
			// Для строк детализации по видам тарифа итоговые колонки не заполняем.
			Если Строка.СтрокаДетализацииТариф Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("Перерасчет", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Льгота",     "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате",    "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплатеИПУ", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплатеОПУ", "Х");
			КонецЕсли;
			
			// Для строк детализации по составляющим услугам итоговую сумму начисления не выводим.
			Если Строка.СтрокаДетализацииСост Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате", "Х");
			КонецЕсли;
			
			Если НЕ Строка.УслугаПоСчетчикам И НЕ Строка.УслугаСоставнаяПоСчетчикам Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КоличествоОПУ", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КоличествоИПУ", ?(СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг, Строка.КоличествоИПУ, "Х"));
				СтруктураПараметровСтрокиНачисления.Вставить("НачисленоИПУ",  "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("НачисленоОПУ",  "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплатеИПУ",    "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплатеОПУ",    "Х");
				
				Если СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг И Строка.ИмеетсяСоставнойИндивидуальныйРасход Тогда
					СтруктураПараметровСтрокиНачисления.Вставить("КоличествоИПУ", ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "Х", Строка.СоставноеКоличествоИнд));
				КонецЕсли;
				
			ИначеЕсли Строка.УслугаСоставнаяПоСчетчикам Тогда 
				
				Если (Строка.ПерерасчетИнд = 0 И НЕ Строка.СтрокаДетализацииСост)
				 ИЛИ Строка.СтрокаДетализацииСост Тогда
					СтруктураПараметровСтрокиНачисления.Вставить("КОплатеИПУ", "Х");
				КонецЕсли;
				
				Если (Строка.ПерерасчетОДН = 0 И НЕ Строка.СтрокаДетализацииСост)
				 ИЛИ Строка.СтрокаДетализацииСост Тогда
					СтруктураПараметровСтрокиНачисления.Вставить("КОплатеОПУ", "Х");
				КонецЕсли;
				
			КонецЕсли;
			
			Область.Параметры.Заполнить(СтруктураПараметровСтрокиНачисления);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачисленияМосква()

#КонецОбласти

#Область ФормаПлатДокументМосковскаяОбласть //(пост. №679/30 для МО)

////////////////////////////////////////////////////////////////////////////////
// ФОРМА "ПЛАТ. ДОКУМЕНТ (МОСКОВСКАЯ ОБЛАСТЬ по пост. №679/30 для МО)".

// Функция формирует и заполняет область заголовка ПД и область бланка показаний ИПУ по лицевому счету.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ОбщиеДанные       - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ТаблицаИПУ        - Таблица значений   - сведения о ИПУ.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью справочной информации.
//
Функция ПолучитьОбластьЗаголовкаПДИРаздела1Москва679(Макет, Знач ОбщиеДанные, Знач СтруктураНастроек, ТаблицаИПУ = Неопределено)
	
	// 1. Выведем в пустой итоговый табличный документ область заголовка ПД и область адреса л/с.
	// 2. Сначала сформируем табличный документ, расположенный слева - область заголовка раздела 1.
	// 3. Затем сформируем табличный документ, расположенный справа. Сюда входят: область одномерного штрихкода или область QR штрихкода.
	// 4. Далее выведем области слева и справа в итоговый табличный документ в "одну строку".
	// 5. Сформируем табличный документ, содержащий таблицу показаний счетчиков, и выведем в итоговый табличный документ.
	// 6. Выведем в итоговый табличный документ область подвала таблицы счетчиков.
	// 7. Выведем в итоговый табличный документ область линии отрыва.
	
	ТабличныйДокумент = Новый ТабличныйДокумент; // итоговый табличный документ.
	
	// 1.
	Область = ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "Адрес", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	// 2.
	ТабличныйДокументСлева = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "ЗаголовокНомерЛицевогоСчета", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокументСлева, Область, Истина);
	
	Если ОбщиеДанные.КвитанцияПоПени ИЛИ ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел1Пустой", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокументСлева, Область, Истина, "Присоединить");
	Иначе
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел1", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокументСлева, Область, Истина, "Присоединить");
	КонецЕсли;
	
	// 3.
	ТабличныйДокументСправа = Новый ТабличныйДокумент;
	
	Если НЕ ОбщиеДанные.КвитанцияПоПени И СтруктураНастроек.ВыводитьШК Тогда
		Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
			ИмяОбласти = ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьШКОсновнойЗаголовокСоСтрахованием", "ОбластьШКОсновнойЗаголовок");
		Иначе
			ИмяОбласти = ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "ОбластьQRШКОсновнойЗаголовокСоСтрахованием", "ОбластьQRШКОсновнойЗаголовок");
		КонецЕсли;
		Область = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
		
		// В последующем будут выведены те же самые штрихкоды. При этом платформа автоматически поменяет имена текущих штрихкодов
		// на имена по умолчанию. Это приведет к тому, что будет неверно сформирован текст штрихкода по добровольному страхованию.
		// Чтобы избежать этой проблемы, поменяем имена вручную на те, которые нам нужны.
		ПоменятьИмяШтрихкодаСоСтрахованием(Область);
		
		ВывестиОбласть(ТабличныйДокументСправа, Область, Истина);
	КонецЕсли;
	
	// 4.
	ВывестиОбласть(ТабличныйДокументСлева, ТабличныйДокументСправа, Истина, "Присоединить");
	ВывестиОбласть(ТабличныйДокумент, ТабличныйДокументСлева, Истина);
	
	Если Не ОбщиеДанные.КвитанцияНаКР И ТаблицаИПУ <> Неопределено Тогда
		
		// 5.
		Область = ПолучитьОбласть(Макет, "ЗаголовокТаблицыПоказанийРаздел1", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Если ТаблицаИПУ.Количество() > 0 Тогда
			СтрокаФормата = "ЧДЦ=3; ЧН=-";
			Для Каждого Строка Из ТаблицаИПУ Цикл
				
				Область = ПолучитьОбласть(Макет, "СтрокаТаблицыПоказанийРаздел1", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(Строка);
				Область.Параметры.Заполнить(Новый Структура("СтрокаПоказаний", Формат(Строка.ПредыдущееПоказаниеДн, СтрокаФормата)));
				
				СтруктураПараметров = Новый Структура("НаименованиеСчетчика, КодСчетчика, ЗаводскойНомер");
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, "", Строка, СтруктураПараметров);
				
				Постфикс = ?(Строка.Тарифность = "1", "", " (дн.)");
				СтруктураПараметров = Новый Структура("Услуга, ВидУслуги");
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, Постфикс, Строка, СтруктураПараметров);
				
				ВывестиОбласть(ТабличныйДокумент, Область);
				
				Если Строка.Тарифность <> "1" Тогда
					Область.Параметры.Заполнить(Новый Структура("СтрокаПоказаний", Формат(Строка.ПредыдущееПоказаниеНч, СтрокаФормата)));
					
					СтруктураПараметров = Новый Структура("НаименованиеСчетчика, КодСчетчика, ЗаводскойНомер");
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, "", Строка, СтруктураПараметров);
					
					СтруктураПараметров = Новый Структура("Услуга, ВидУслуги");
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (нч.)", Строка, СтруктураПараметров);
					
					ВывестиОбласть(ТабличныйДокумент, Область);
				КонецЕсли;
				
				Если Строка.Тарифность = "3" Тогда
					Область.Параметры.Заполнить(Новый Структура("СтрокаПоказаний", Формат(Строка.ПредыдущееПоказаниеПк, СтрокаФормата)));
					
					СтруктураПараметров = Новый Структура("НаименованиеСчетчика, КодСчетчика, ЗаводскойНомер");
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, "", Строка, СтруктураПараметров);
					
					СтруктураПараметров = Новый Структура("Услуга, ВидУслуги");
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (пик.)", Строка, СтруктураПараметров);
					
					ВывестиОбласть(ТабличныйДокумент, Область);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			Область = ПолучитьОбласть(Макет, "СтрокаТаблицыПоказанийРаздел1", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		// 6.
		Область = ПолучитьОбласть(Макет, "ПодвалТаблицыПоказанийРаздел1", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		// 7.
		Область = ПолучитьОбласть(Макет, "ЛинияОтрыва", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьЗаголовкаПДИРаздела1Москва679()

// Функция формиирует и заполняет область до квитанции в разделе 2.
//
// Параметры:
//  Макет                                - Табличный документ - макет платежного документа.
//  ОбщиеДанные                          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек                    - Структура          - структура с настройками формирования квитанций.
//  СтруктураСимволовСуммыИЛицевогоСчета - Структура          - структура с итоговой суммой к оплате и номером л/с.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с Разделом 2.
//
Функция ПолучитьОбластьРаздела2Москва679(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел2КР", СтруктураНастроек, ОбщиеДанные);
	Иначе
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел2", СтруктураНастроек, ОбщиеДанные);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ЗначениеЗаполнено(СтруктураНастроек.ИсполнительРасчетов) Тогда
		
		ПолучательПлатежаРеквизиты = ОбщиеДанные.ПолучательПлатежа + " "
								   + "ИНН: " + ОбщиеДанные.ИННПолучателя + " "
								   + "КПП: " + ОбщиеДанные.КПППолучателя + " "
								   + "Расч.счет: " + ОбщиеДанные.РасчетныйСчетИсполнителя + " "
								   + "Банк: " + ОбщиеДанные.БанкИсполнителя + " "
								   + "БИК: " + ОбщиеДанные.БИКБанкаИсполнителя + " "
								   + "Корр.счет: " + ОбщиеДанные.КоррСчетБанкаИсполнителя;
		ДопИнформация = ОбщиеДанные.ДопИнформацияИсполнителя;
		
	ИначеЕсли ОбщиеДанные.КвитанцияНаКР Тогда
		
		ПолучательПлатежаРеквизиты = ОбщиеДанные.НаименованиеВладельцаСчетаКР + " "
								   + "ИНН: " + ОбщиеДанные.ИННВладельцаСчетаКР + " "
								   + "КПП: " + ОбщиеДанные.КППВладельцаСчетаКР + " "
								   + "Расч.счет: " + ОбщиеДанные.РасчетныйСчетКР + " "
								   + "Банк: " + ОбщиеДанные.БанкКР + " "
								   + "БИК: " + ОбщиеДанные.БИККР + " "
								   + "Корр.счет: " + ОбщиеДанные.КоррСчетКР;
		ДопИнформация = ОбщиеДанные.ДопИнформацияКР;
		
	Иначе
		
		ПолучательПлатежаРеквизиты = ОбщиеДанные.ПолучательПлатежа + " "
								   + "ИНН: " + ОбщиеДанные.ИННПолучателя + " "
								   + "КПП: " + ОбщиеДанные.КПППолучателя + " "
								   + "Расч.счет: " + ОбщиеДанные.РасчетныйСчет + " "
								   + "Банк: " + ОбщиеДанные.Банк + " "
								   + "БИК: " + ОбщиеДанные.БИК + " "
								   + "Корр.счет: " + ОбщиеДанные.КоррСчет;
		ДопИнформация = ОбщиеДанные.ДопИнформация;
	КонецЕсли;
	
	СтруктураПараметровПолучателя = Новый Структура("ПолучательПлатежаРеквизиты, ДопИнформация", ПолучательПлатежаРеквизиты, ДопИнформация);
	
	СтруктураНастроек.Вставить("СтруктураПараметровПолучателя", СтруктураПараметровПолучателя);
	
	Область = ПолучитьОбласть(Макет, "ПолучательПлатежаРаздел2", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураПараметровПолучателя);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "ЛицевойСчетРаздел2", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураСимволовСуммыИЛицевогоСчета);
	
	Если СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		Область.Параметры.Заполнить(Новый Структура("ИдентификаторПД", ОбщиеДанные.ИдентификаторПДЕдиный));
	ИначеЕсли ОбщиеДанные.КвитанцияНаКР Тогда
		Область.Параметры.Заполнить(Новый Структура("ИдентификаторПД", ОбщиеДанные.ИдентификаторПДКапРемонт));
	Иначе
		Область.Параметры.Заполнить(Новый Структура("ИдентификаторПД", ОбщиеДанные.ИдентификаторПДОсн));
	КонецЕсли;
	
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	врТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		врТабличныйДокумент1 = Новый ТабличныйДокумент;
		
		Область = ПолучитьОбласть(Макет, "ИтогоКОплатеРаздел2СлеваБезСтрахования", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент1, Область, Истина);
		
		Если СтруктураНастроек.ВыводитьШК Тогда
			Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьШКРаздел2", СтруктураНастроек, ОбщиеДанные);
				УстановитьИмяШтрихкода(Область, "ШтрихКодБезСтрахования");
				ВывестиОбласть(врТабличныйДокумент1, Область, Истина);
				
			Иначе
				Область = ПолучитьОбласть(Макет, "ОбластьQRШКРаздел2", СтруктураНастроек, ОбщиеДанные);
				УстановитьИмяШтрихкода(Область, "QRШКБезСтрахования");
				ВывестиОбласть(врТабличныйДокумент1, Область, Истина, "Присоединить");
			КонецЕсли;
		КонецЕсли;
		
		врТабличныйДокумент2 = Новый ТабличныйДокумент;
		
		Если ОбщиеДанные.ВыводитьQRштрихкодДляСитикард Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент2, Область, Истина, "Присоединить");
		КонецЕсли;
		
		врТабличныйДокумент3 = Новый ТабличныйДокумент;
		
		Область = ПолучитьОбласть(Макет, "ИтогоКОплатеРаздел2СлеваСоСтрахованием", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент3, Область, Истина);
		
		Если СтруктураНастроек.ВыводитьШК Тогда
			Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
				Область = ПолучитьОбласть(Макет, "ОбластьШКРаздел2", СтруктураНастроек, ОбщиеДанные);
				УстановитьИмяШтрихкода(Область, "ШтрихКодСоСтрахованием");
				ВывестиОбласть(врТабличныйДокумент3, Область, Истина);
				
			Иначе
				Область = ПолучитьОбласть(Макет, "ОбластьQRШКРаздел2", СтруктураНастроек, ОбщиеДанные);
				УстановитьИмяШтрихкода(Область, "QRШКСоСтрахованием");
				ВывестиОбласть(врТабличныйДокумент3, Область, Истина, "Присоединить");
			КонецЕсли;
		КонецЕсли;
		
		ВывестиОбласть(врТабличныйДокумент, врТабличныйДокумент1, Истина, "Присоединить");
		ВывестиОбласть(врТабличныйДокумент, врТабличныйДокумент2, Истина, "Присоединить");
		ВывестиОбласть(врТабличныйДокумент, врТабличныйДокумент3, Истина, "Присоединить");
		
		Область = ПолучитьОбласть(Макет, "ИтогоКОплатеРаздел2Справа", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
		
	Иначе
		
		Область = ПолучитьОбласть(Макет, "ИтогоКОплатеРаздел2Слева", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина);
		
		Если ОбщиеДанные.ВыводитьQRштрихкодДляСитикард Тогда
			Область = ПолучитьОбласть(Макет, "ОбластьQRОнлайн", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
		КонецЕсли;
		
		Если СтруктураНастроек.ВыводитьШК Тогда
			ИмяОбласти = ?(СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный, "ОбластьШКРаздел2", "ОбластьQRШКРаздел2");
			Область    = ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "ИтогоКОплатеРаздел2Справа", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(врТабличныйДокумент, Область, Истина, "Присоединить");
		
	КонецЕсли;
	ВывестиОбласть(ТабличныйДокумент, врТабличныйДокумент, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция формиирует и заполняет область квитанции в разделе 2.
//
// Параметры:
//  Макет                                - Табличный документ - макет платежного документа.
//  ОбщиеДанные                          - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек                    - Структура          - структура с настройками формирования квитанций.
//  СтруктураСимволовСуммыИЛицевогоСчета - Структура          - структура с итоговой суммой к оплате и номером л/с.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с Разделом 2.
//
Функция ПолучитьОбластьРаздела2КвитанцияМосква679(Макет, ОбщиеДанные, СтруктураНастроек, СтруктураСимволовСуммыИЛицевогоСчета)
	
	ЗаполнитьШаблонПлощадиПомещенияВМакете(ОбщиеДанные, СтруктураНастроек);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		
		ОрганизацияРеквизитыСтрокой = ОбщиеДанные.НаименованиеВладельцаСчетаКР + " "
									   + "ИНН: " + ОбщиеДанные.ИННВладельцаСчетаКР + " "
									   + "КПП: " + ОбщиеДанные.КППВладельцаСчетаКР + " "
									   + "Расч.счет: " + ОбщиеДанные.РасчетныйСчетКР + " "
									   + "Банк: " + ОбщиеДанные.БанкКР + " "
									   + "БИК: " + ОбщиеДанные.БИККР + " "
									   + "Корр.счет: " + ОбщиеДанные.КоррСчетКР;
		
	Иначе
		
		ОрганизацияРеквизитыСтрокой = ОбщиеДанные.Организация + " "
									   + "ИНН: " + ОбщиеДанные.ИННОрганизации + " "
									   + "КПП: " + ОбщиеДанные.КППОрганизации + " "
									   + "Расч.счет: " + ОбщиеДанные.РасчетныйСчет + " "
									   + "Банк: " + ОбщиеДанные.Банк + " "
									   + "БИК: " + ОбщиеДанные.БИК + " "
									   + "Корр.счет: " + ОбщиеДанные.КоррСчет;
		
	КонецЕсли;
	
	СтруктураРеквизитыОрганизацииСтрокой = Новый Структура("ОрганизацияРеквизитыСтрокой", ОрганизацияРеквизитыСтрокой);
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияРаздел2КР", СтруктураНастроек, ОбщиеДанные);
	Иначе
		Область = ПолучитьОбласть(Макет, "КвитанцияРаздел2", СтруктураНастроек, ОбщиеДанные);
	КонецЕсли;
	
	Область.Параметры.Заполнить(СтруктураРеквизитыОрганизацииСтрокой);
	Область.Параметры.Заполнить(СтруктураСимволовСуммыИЛицевогоСчета);
	Область.Параметры.Заполнить(ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураНастроек.СтруктураПараметровПолучателя);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Область = ПолучитьОбласть(Макет, "КвитанцияРаздел2СуммаКОплатеСоСтрахованием", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	Иначе
		Область = ПолучитьОбласть(Макет, "КвитанцияРаздел2СуммаКОплате", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Устанавливает имя штрихкода.
// Это необходимо для того, чтобы корректно сформировать текст штрихкода.
//
Процедура УстановитьИмяШтрихкода(Область, ИмяРисунка)
	
	Для Каждого Рисунок Из Область.Рисунки Цикл
		Рисунок.Имя = ИмяРисунка;
	КонецЦикла;
	
КонецПроцедуры

// Функция формиирует и заполняет область с таблицей начислений в разделе 3.
//
// Параметры:
//  Макет                    - Табличный документ - макет платежного документа.
//  ОбщиеДанные              - Структура          - общие данные по текущей квитанции.
//  СтруктураНастроек        - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления        - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с  Разделом 3.
//
Функция ПолучитьОбластьРаздела3Москва679(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаНачисления, ТаблицаДобровольногоСтрахования)
	
	ТабличныйДокумент = Новый ТабличныйДокумент; // итоговый табличный документ.
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел3КР", СтруктураНастроек, ОбщиеДанные);
	Иначе
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел3", СтруктураНастроек, ОбщиеДанные);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ТаблицаНачисления.Количество() = 0 Тогда
		ЕстьЛьготы = Ложь;
	Иначе
		ЕстьЛьготы = ТаблицаНачисления[0].Льгота <> 0;
	КонецЕсли;
	
	СтруктураНастроек.Вставить("ЕстьЛьготы", ЕстьЛьготы);
	
	Область = ПолучитьОбласть(Макет, ?(ЕстьЛьготы, "ЗаголовокТаблицыРаздел3Льгота", "ЗаголовокТаблицыРаздел3"), СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(Новый Структура("МесяцСтрокой", ОбщиеДанные.ПериодОплаты));
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Область = ПолучитьОбласть(Макет, "НачисленияШапка", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	врУслугиПоТипам = СтруктураНастроек.УслугиПоТипам;
	
	врТаблицаНачисления = ТаблицаНачисления.Скопировать();
	
	// Добавим вспомогательную колонку для хранения факта выводить наименование вида услуги с отступом или нет.
	врТаблицаНачисления.Колонки.Добавить("ВыводитьОтступВНаименованииВидаУслуги", Новый ОписаниеТипов("Булево"));
	
	Если СтруктураНастроек.РазделятьУслугиПоТипам Тогда
		
		// Получим таблицу порядка вывода сведений по видам услуг для компоновки итоговой таблицы.
		// При этом, если необходимо разделять услуги по типам (установлена настройка "Разделять услуги по типам"
		// в Настройках сбора данных), то данный порядок услуг не влияет на вывод услуги по кап. ремонту, так как сведения по
		// кап.ремонту выводятся строго в конце таблицы.
		НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаСбораДанных.Установить(НастройкаСбораДанных);
		НаборЗаписей.Прочитать();
		
		ПорядокУслуг = НаборЗаписей.Выгрузить();
		ПорядокУслуг.Сортировать("Порядок");
		
		ТаблицаСодержанияИРемонта = ПолучитьТаблицуУслугМосква679(врТаблицаНачисления, врУслугиПоТипам, ПорядокУслуг, Новый Структура("СодержаниеИРемонт", Истина), Истина, Истина, СтруктураНастроек.СписокУслугКапРемонт);
		ТаблицаКоммунальныхУслуг  = ПолучитьТаблицуУслугМосква679(врТаблицаНачисления, врУслугиПоТипам, ПорядокУслуг, Новый Структура("Коммунальная",      Истина));
		ТаблицаПрочихУслуг        = ПолучитьТаблицуУслугМосква679(врТаблицаНачисления, врУслугиПоТипам, ПорядокУслуг, Новый Структура("Коммунальная, СодержаниеИРемонт", Ложь, Ложь));
		
		Если Не ТаблицаСодержанияИРемонта.Количество() = 0 Тогда
			
			Если Не ОбщиеДанные.КвитанцияНаКР Тогда
				Область = ПолучитьОбласть(Макет, "РазделительСодержаниеЖилогоПомещенияВзносКапРемонта", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
				
				Область = ПолучитьОбласть(Макет, ?(СтруктураНастроек.ЕстьЛьготы, "ЗаголовокДляУслугСОИЛьгота", "ЗаголовокДляУслугСОИ"), СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			ВывестиТаблицуНачисленияМосква679(Макет, СтруктураНастроек, ТаблицаСодержанияИРемонта, ОбщиеДанные, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаКоммунальныхУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "РазделительКоммунальныеУслуги", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияМосква679(Макет, СтруктураНастроек, ТаблицаКоммунальныхУслуг, ОбщиеДанные, ТабличныйДокумент);
		КонецЕсли;
		
		Если Не ТаблицаПрочихУслуг.Количество() = 0 Тогда
			Область = ПолучитьОбласть(Макет, "РазделительИныеуслуги", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			
			ВывестиТаблицуНачисленияМосква679(Макет, СтруктураНастроек, ТаблицаПрочихУслуг, ОбщиеДанные, ТабличныйДокумент);
		КонецЕсли;
		
	Иначе
		ВывестиТаблицуНачисленияМосква679(Макет, СтруктураНастроек, врТаблицаНачисления, ОбщиеДанные, ТабличныйДокумент);
	КонецЕсли;
	
	Попытка
		Пени = Число(ОбщиеДанные.Пени);
	Исключение
		Пени = 0;
	КонецПопытки;
	
	Если НЕ СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать" Тогда
		СуммаКомиссии = ОбщиеДанные.СуммаКомиссии;
	Иначе
		СуммаКомиссии = 0;
	КонецЕсли;
	
	СтруктураИтоговойСтроки = Новый Структура;
	Если ТаблицаНачисления.Количество() = 0 Тогда
		СтруктураИтоговойСтроки.Вставить("Начислено",       0);
		СтруктураИтоговойСтроки.Вставить("СуммаПовышения",  0);
		СтруктураИтоговойСтроки.Вставить("Перерасчет",      0);
		СтруктураИтоговойСтроки.Вставить("НачальноеСальдо", 0);
		СтруктураИтоговойСтроки.Вставить("Оплата",          0);
		СтруктураИтоговойСтроки.Вставить("КОплате",         0);
	Иначе
		СтруктураИтоговойСтроки.Вставить("Начислено",       ТаблицаНачисления[0].Начислено);
		СтруктураИтоговойСтроки.Вставить("СуммаПовышения",  ТаблицаНачисления[0].СуммаПовышения);
		СтруктураИтоговойСтроки.Вставить("Перерасчет",      ТаблицаНачисления[0].Перерасчет);
		СтруктураИтоговойСтроки.Вставить("Оплата",          ТаблицаНачисления[0].Оплата);
		СтруктураИтоговойСтроки.Вставить("КОплате",         ТаблицаНачисления[0].КОплате + Пени + СуммаКомиссии);
		
		Если СтруктураНастроек.ВыводитьНачальноеСальдоСРазбивкой Тогда
			СтруктураИтоговойСтроки.Вставить("НачальноеСальдо", ТаблицаНачисления[0].НачальноеСальдоСРазбивкой);
		Иначе
			СтруктураИтоговойСтроки.Вставить("НачальноеСальдо", ТаблицаНачисления[0].НачальноеСальдо);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураИтоговойСтроки.Вставить("ПериодОплаты",            ОбщиеДанные.ПериодОплаты);
	СтруктураИтоговойСтроки.Вставить("ТекстПодвалаСтрахование", ?(ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию, "без учета добр. страхования", ""));
	
	Если ЕстьЛьготы Тогда
		СтруктураИтоговойСтроки.Вставить("Льгота", ТаблицаНачисления[0].Льгота);
	КонецЕсли;
	
	Если Пени <> 0 Тогда
		СтруктураИтоговойСтроки.Вставить("Пени", Пени);
		Область = ПолучитьОбласть(Макет, "СтрокаПениТаблицыРаздел3", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураИтоговойСтроки);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Если НЕ СтруктураНастроек.ВариантУчетаКомиссииБанка = "Не учитывать" Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаКомиссияБанкаРаздел3", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Область = ПолучитьОбласть(Макет, ?(ЕстьЛьготы, "СтрокаИтогаТаблицыРаздел3Льгота", "СтрокаИтогаТаблицыРаздел3"), СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураИтоговойСтроки);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	
	Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
		Для Каждого Строка Из ТаблицаДобровольногоСтрахования Цикл
			Область = ПолучитьОбласть(Макет, ?(ЕстьЛьготы, "СтрокаДобровольногоСтрахованияЛьгота", "СтрокаДобровольногоСтрахования"), СтруктураНастроек, ОбщиеДанные);
			Область.Параметры.Заполнить(ОбщиеДанные);
			Область.Параметры.Заполнить(Строка);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЦикла;
		
		СтруктураИтоговойСтроки.Начислено               = СтруктураИтоговойСтроки.Начислено + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураИтоговойСтроки.Оплата                  = СтруктураИтоговойСтроки.Оплата + ОбщиеДанные.ВнесеноНаДобровольноеСтрахование;
		СтруктураИтоговойСтроки.КОплате                 = ?(СтруктураИтоговойСтроки.КОплате < 0, 0, СтруктураИтоговойСтроки.КОплате) + ТаблицаДобровольногоСтрахования.Итог("СуммаНачисления");
		СтруктураИтоговойСтроки.ТекстПодвалаСтрахование = "с учетом добр. страхования";
		
		Область = ПолучитьОбласть(Макет, ?(ЕстьЛьготы, "СтрокаИтогаТаблицыРаздел3Льгота", "СтрокаИтогаТаблицыРаздел3"), СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураИтоговойСтроки);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьРаздела3Москва679()

// Функция возвращает таблицу начислений с учетом разделения услуг.
//
// Параметры:
//  ТаблицаНачисления - Таблица значений - таблица с начислениями по текущему лицевому счету.
//  врУслугиПоТипам   - Таблица значений - таблица с услугами по типам.
//  Отбор             - Структура        - структура поиска услуг.
//
// Возвращаемое значение:
//  Таблица значений - сведения об услугах.
//
Функция ПолучитьТаблицуУслугМосква679(ТаблицаНачисления, врУслугиПоТипам, ПорядокУслуг, Отбор, ВыводитьУслугиСОИ = Ложь, ВыводитьУслугиКапРемонт = Ложь, СписокУслугКапРемонт = Неопределено)
	
	ТаблицаВидыУслуг = врУслугиПоТипам.Скопировать(врУслугиПоТипам.НайтиСтроки(Отбор), "ВидУслуги");
	ВидыУслуг        = ТаблицаВидыУслуг.ВыгрузитьКолонку("ВидУслуги");
	ТаблицаУслуг     = ТаблицаНачисления.СкопироватьКолонки();
	
	// Выведем сведения по услугам СОИ.
	Если ВыводитьУслугиСОИ Тогда
		СтрокиУслугСОИ = ТаблицаНачисления.НайтиСтроки(Новый Структура("СтрокаДляОбщегоИмущества", Истина));
		Для Каждого СтрокаНачисления Из СтрокиУслугСОИ Цикл
			НоваяСтрока = ТаблицаУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			Если Отбор.Свойство("СодержаниеИРемонт") Тогда
				НоваяСтрока.ВыводитьОтступВНаименованииВидаУслуги = Истина;
			КонецЕсли;
			ТаблицаНачисления.Удалить(СтрокаНачисления);
		КонецЦикла;
	КонецЕсли;
	
	СписокВидовУслугКапРемонта = Новый СписокЗначений;
	Если ВыводитьУслугиКапРемонт Тогда
		// Подготовим список видов услуг кап.ремонта.
		Если СписокУслугКапРемонт <> Неопределено
		 И СписокУслугКапРемонт.Количество() > 0 Тогда
			Для Каждого ТекущаяУслуга Из СписокУслугКапРемонт Цикл
				Если НЕ ТекущаяУслуга.Значение.Пустая() Тогда
					СписокВидовУслугКапРемонта.Добавить(ТекущаяУслуга.Значение.ВидУслуги);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Добавим сведения по услугам, не относящиеся к кап.ремонту.
	Для Каждого ТекущийВидУслуги Из ВидыУслуг Цикл
		СтрокиНачисления = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ТекущийВидУслуги));
		Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
			Если СписокВидовУслугКапРемонта.НайтиПоЗначению(СтрокаНачисления.ВидУслуги) = Неопределено
			 ИЛИ НЕ ВыводитьУслугиКапРемонт Тогда
				НоваяСтрока = ТаблицаУслуг.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				Если Отбор.Свойство("СодержаниеИРемонт") Тогда
					НоваяСтрока.ВыводитьОтступВНаименованииВидаУслуги = Истина;
				КонецЕсли;
				ТаблицаНачисления.Удалить(СтрокаНачисления);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИтоговаяТаблицаУслуг = ТаблицаУслуг.СкопироватьКолонки();
	
	Порядок = 0;
	
	// Добавим в итоговую таблицу строки по услугам с установленным порядком для вывода в квитанции.
	Для Каждого ТекущаяСтрока Из ПорядокУслуг Цикл
		ДанныеПоВидуУслуги = ТаблицаУслуг.НайтиСтроки(Новый Структура("ВидУслуги", ТекущаяСтрока.ВидУслуги));
		Если ДанныеПоВидуУслуги.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТекДанные Из ДанныеПоВидуУслуги Цикл
			Порядок = Порядок + 1;
			НоваяСтрока = ИтоговаяТаблицаУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные);
			НоваяСтрока.Порядок = Порядок;
		КонецЦикла;
	КонецЦикла;
	
	// Добавим в итоговую таблицу строки по услугам без установленного порядка для вывода в квитанции, при этом
	// проверяем, не добавляли ли строку ранее, когда порядок для услуги задан.
	Для Каждого ТекущаяСтрока Из ТаблицаУслуг Цикл
		Отбор = Новый Структура("ВидУслуги, Услуга, СтрокаДляОбщегоИмущества, ВидТарифа, ТипНачисления");
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрока);
		
		ДанныеПоВидуУслуги = ИтоговаяТаблицаУслуг.НайтиСтроки(Отбор);
		Если ДанныеПоВидуУслуги.Количество() = 0 Тогда
			НоваяСтрока = ИтоговаяТаблицаУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			НоваяСтрока.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыводитьУслугиКапРемонт Тогда
		// Последними строками выведем сведения по услугам кап.ремонта.
		Для Каждого ТекущаяСтрока Из СписокУслугКапРемонт Цикл
			СтрокиНачисления = ТаблицаНачисления.НайтиСтроки(Новый Структура("Услуга", ТекущаяСтрока.Значение));
			Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
				НоваяСтрока = ИтоговаяТаблицаУслуг.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				ТаблицаНачисления.Удалить(СтрокаНачисления);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Для сведений по услугам, рассчитанных по показаниям ОДН, выводим постфикс "(ОДН)":
	Если Не ВыводитьУслугиСОИ Тогда
		Для Каждого ТекущаяСтрока Из ИтоговаяТаблицаУслуг Цикл
			Если ТекущаяСтрока.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое Тогда
				ТекущаяСтрока.ВидДляВывода = ТекущаяСтрока.ВидДляВывода + " (ОДН)";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИтоговаяТаблицаУслуг;
	
КонецФункции

// Процедура выводит таблицу с начислениями.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ТаблицаНачисления - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  ОбщиеДанные       - Структура          - общие данные по текущей квитанции.
//  ТабличныйДокумент - Табличный документ - табличный документ для вывода сведений.
//
Процедура ВывестиТаблицуНачисленияМосква679(Макет, СтруктураНастроек, ТаблицаНачисления, ОбщиеДанные, ТабличныйДокумент)
	
	ЧН = "ЧН=0,";
	Для итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
		ЧН = ЧН + "0";
	КонецЦикла;
	СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ЧН + "; ЧГ=0";
	
	СписокФорматируемыхПараметров = Новый Структура("Количество");
	
	Для Каждого Строка ИЗ ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(Строка.ВидУслуги)
		   И (Строка.УслугаСНачислениями ИЛИ НЕ Строка.Оплата = 0 ИЛИ НЕ Строка.НачальноеСальдо = 0) Тогда
			
			Область = ПолучитьОбласть(Макет, ?(СтруктураНастроек.ЕстьЛьготы, "СтрокаТаблицыРаздел3Льгота", "СтрокаТаблицыРаздел3"), СтруктураНастроек, ОбщиеДанные);
			
			Если Строка.ВыводитьОтступВНаименованииВидаУслуги Тогда
				Строка.ВидДляВывода = " " + Строка.ВидДляВывода;
			КонецЕсли;
			
			Если СтрНайти(Строка.ВидДляВывода, "(ОДН)") = 0
			   И НЕ Строка.СтрокаДляОбщегоИмущества
			   И Строка.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое Тогда
				Строка.ВидДляВывода = Строка.ВидДляВывода + " (ОДН)";
			КонецЕсли;
			
			Область.Параметры.Заполнить(Строка);
			
			СтруктураПараметровСтрокиНачисления = Новый Структура();
			
			// Для строк детализации по видам тарифа и для итоговой строки детализации
			// по составляющим услугам единицы измерения не выводим.
			Если НЕ ЗначениеЗаполнено(Строка.ЕдИзм) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ЕдИзм", "Х");
			КонецЕсли;
			
			// Для итоговых строк детализации тариф не выводим.
			Если НЕ ЗначениеЗаполнено(Строка.Тариф) Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("ТарифДляВывода", "Х");
			КонецЕсли;
			
			Если Строка.ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое И Не Строка.СтрокаДляОбщегоИмущества Тогда
				
				Отбор = Новый Структура("ВидУслуги, ТипНачисления", Строка.ВидУслуги, Перечисления.УПЖКХ_ТипНачисления.Индивидуальное);
				
				Если ТаблицаНачисления.НайтиСтроки(Отбор).Количество() > 0 Тогда
					СтруктураПараметровСтрокиНачисления.Вставить("КОплате", "Х");
				Иначе
					СтруктураПараметровСтрокиНачисления.Вставить("КОплате", Строка.КОплате);
				КонецЕсли;
				
				// Устанавливаем крестики в том случае, когда нет индивидуальных начислений по услуге.
				Если Строка.Оплата = 0 И Строка.НачальноеСальдо = 0 И Строка.Льгота = 0 И Строка.КОплате = 0 Тогда
					
					СтруктураПараметровСтрокиНачисления.Вставить("Оплата",          "Х");
					СтруктураПараметровСтрокиНачисления.Вставить("НачальноеСальдо", "Х");
					
					Если Строка.Перерасчет = 0 Тогда
						СтруктураПараметровСтрокиНачисления.Вставить("Перерасчет", "Х");
					КонецЕсли;
					
					СтруктураПараметровСтрокиНачисления.Вставить("Льгота",          "Х");
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Для строк детализации по видам тарифа итоговые колонки не заполняем.
			Если Строка.СтрокаДетализацииТариф Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("Перерасчет",      "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Льгота",          "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате",         "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Оплата",          "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("НачальноеСальдо", "Х");
			КонецЕсли;
			
			// Для строк детализации по составляющим услугам итоговую сумму начисления не выводим.
			Если Строка.СтрокаДетализацииСост Тогда
				СтруктураПараметровСтрокиНачисления.Вставить("КОплате",         "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Оплата",          "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("НачальноеСальдо", "Х");
				СтруктураПараметровСтрокиНачисления.Вставить("Льгота",          "Х");
			КонецЕсли;
			
			Если НЕ Строка.УслугаПоСчетчикам И НЕ Строка.УслугаСоставнаяПоСчетчикам Тогда
				
				Если СтруктураНастроек.ВыводитьИндРасходДляВсехУслуг И Строка.ИмеетсяСоставнойИндивидуальныйРасход Тогда
					СтруктураПараметровСтрокиНачисления.Вставить("Количество", ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "Х", Строка.СоставноеКоличествоИнд));
				КонецЕсли;
				
			КонецЕсли;
			
			Область.Параметры.Заполнить(СтруктураПараметровСтрокиНачисления);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачисленияМосква()

// Процедура выводит таблицу Справочная информация.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  ТаблицаНачисления - Таблица значений   - таблица с начислениями по текущему лицевому счету.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ТаблицаСчетчиков  - Таблица значений   - таблица с ПУ.
//
// Возвращаемое значение:
//  Табличный документ - табличный документ с Разделом 4.
//
Функция ПолучитьОбластьРаздела4Москва679(Макет, ТаблицаНачисления, ТаблицаСчетчиков, СтруктураНастроек, ОбщиеДанные, ЕстьПерерасчеты = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ТаблицаСчетчиков.Количество() = 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		ИмяЗаголовкаРаздела         = "ЗаголовокРаздел4";
		ИмяОбластиЗаголовокаТаблицы = "ЗаголовокТаблицыРаздел4";
		ИмяОбластиСтрокиТаблицы     = "СтрокаТаблицыРаздел4";
		
		Область = ПолучитьОбласть(Макет, ИмяЗаголовкаРаздела, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, ИмяОбластиЗаголовокаТаблицы, СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		ЧН = "ЧН=0,";
		Для итератор = 1 По СтруктураНастроек.ТочностьОбъемаНачислений Цикл
			ЧН = ЧН + "0";
		КонецЦикла;
		СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; " + ЧН + "; ЧГ=0";
		
		СписокФорматируемыхПараметров = Новый Структура("Количество, ОбщРасходИнд, ОбщРасходОбщ");
		
		Сч = 0;
		
		Для Каждого ТекущаяСтрока Из ТаблицаСчетчиков Цикл
			Сч = Сч + 1;
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("НомерСтрокиПУ", Сч);
			СтруктураЗаполнения.Вставить("ВидУслуги", ТекущаяСтрока.ВидУслуги);
			
			ТипНачисления = ?(ТекущаяСтрока.ЯвляетсяОПУ, Перечисления.УПЖКХ_ТипНачисления.Общедомовое, Перечисления.УПЖКХ_ТипНачисления.Индивидуальное);
			
			Если ПустаяСтрока(ТекущаяСтрока.ЗаводскойНомер) Тогда
				СтруктураЗаполнения.Вставить("НаименованиеСчетчика", ТекущаяСтрока.Абонент);
			Иначе
				СтруктураЗаполнения.Вставить("НаименованиеСчетчика", ТекущаяСтрока.ЗаводскойНомер);
			КонецЕсли;
			
			Если ТекущаяСтрока.Тарифность = "1" Тогда
				УслугаДляВывода = "" + ТекущаяСтрока.ВидУслуги;
			Иначе
				УслугаДляВывода = "" + ТекущаяСтрока.ВидУслуги + "(дн.)";
			КонецЕсли;
			
			СтруктураЗаполнения.Вставить("УслугаДляВывода",         УслугаДляВывода);
			СтруктураЗаполнения.Вставить("ПредПредыдущееПоказание", Формат(ТекущаяСтрока.ПредПредыдущееПоказаниеДн, СтрокаФормата));
			СтруктураЗаполнения.Вставить("ПредыдущееПоказание",     Формат(ТекущаяСтрока.ПредыдущееПоказаниеДн, СтрокаФормата));
			
			// Расход подссчитываем "вручную":
			СтруктураЗаполнения.Вставить("Количество", ТекущаяСтрока.ПредыдущееПоказаниеДн - ТекущаяСтрока.ПредПредыдущееПоказаниеДн);
			
			Если ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое Тогда
				ОбщРасходИндДн  = "Х";
				ОбщРасходИндНч  = "Х";
				ОбщРасходИндПик = "Х";
			Иначе
				ОбщРасходИндДн  = 0;
				ОбщРасходИндНч  = 0;
				ОбщРасходИндПик = 0;
			КонецЕсли;
			
			Если ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное Тогда
				ОбщРасходОбщДн  = "Х";
				ОбщРасходОбщНч  = "Х";
				ОбщРасходОбщПик = "Х";
			Иначе
				ОбщРасходОбщДн  = 0;
				ОбщРасходОбщНч  = 0;
				ОбщРасходОбщПик = 0;
			КонецЕсли;
			
			Если ТекущаяСтрока.ЯвляетсяОПУ Тогда
				ТипНачисленияПредставление = "ОДН";
			Иначе
				ТипНачисленияПредставление = "Инд.";
			КонецЕсли;
			
			СтруктураЗаполнения.Вставить("ТипНачисления", ТипНачисленияПредставление);
			
			ДанныеИзНачисленийБезСвертки = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги, Услуга, ТипНачисления", ТекущаяСтрока.ВидУслуги, ТекущаяСтрока.Услуга, ТипНачисления));
			ДанныеИзНачисленийСоСверткой = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги, ТипНачисления", ТекущаяСтрока.ВидУслуги, ТипНачисления));
			
			Если ДанныеИзНачисленийБезСвертки.Количество() > 0 Тогда
				ДанныеИзНачислений = ДанныеИзНачисленийБезСвертки;
			ИначеЕсли ДанныеИзНачисленийСоСверткой.Количество() = 1 Тогда
				ДанныеИзНачислений = ДанныеИзНачисленийСоСверткой;
			Иначе
				ДанныеИзНачислений = Неопределено;
			КонецЕсли;
			
			Если НЕ ДанныеИзНачислений = Неопределено Тогда
				// Если начисления детализированы по видам тарифов, то сведения о нормах находятся в первой строке.
				СтруктураЗаполнения.Вставить("РазмерНормы",    ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеИзНачислений[0].РазмерНормы));
				СтруктураЗаполнения.Вставить("РазмерНормыОбщ", ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеИзНачислений[0].РазмерНормыОбщ));
				
				Если ДанныеИзНачислений.Количество() = 1 Тогда
					// Если начисления не детализированы.
					ОбщРасходИндДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеИзНачислений[0].ОбщРасходИнд);
					ОбщРасходОбщДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеИзНачислений[0].ОбщРасходОбщ);
				Иначе
					ТаблицаДанныхИзНачислений = ТаблицаНачисления.Скопировать(ДанныеИзНачислений);
					
					ДанныеДн = ТаблицаДанныхИзНачислений.Найти(Перечисления.КВП_ВидыТарифов.Дневной, "ВидТарифа");
					Если Не ДанныеДн = Неопределено Тогда
						ОбщРасходИндДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеДн.ОбщРасходИнд);
						ОбщРасходОбщДн = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеДн.ОбщРасходОбщ);
					КонецЕсли;
					
					ДанныеНч = ТаблицаДанныхИзНачислений.Найти(Перечисления.КВП_ВидыТарифов.Ночной, "ВидТарифа");
					Если Не ДанныеНч = Неопределено Тогда
						ОбщРасходИндНч = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеНч.ОбщРасходИнд);
						ОбщРасходОбщНч = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеНч.ОбщРасходОбщ);
					КонецЕсли;
					
					ДанныеПик = ТаблицаДанныхИзНачислений.Найти(Перечисления.КВП_ВидыТарифов.Пиковый, "ВидТарифа");
					Если Не ДанныеПик = Неопределено Тогда
						ОбщРасходИндПик = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", ДанныеПик.ОбщРасходИнд);
						ОбщРасходОбщПик = ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", ДанныеПик.ОбщРасходОбщ);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				СтруктураЗаполнения.Вставить("РазмерНормы",    ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Общедомовое,    "Х", 0));
				СтруктураЗаполнения.Вставить("РазмерНормыОбщ", ?(ТипНачисления = Перечисления.УПЖКХ_ТипНачисления.Индивидуальное, "Х", 0));
			КонецЕсли;
			
			Если НЕ (СтруктураЗаполнения.Количество = 0
			   И ТекущаяСтрока.ПредПредыдущееПоказаниеДн = 0
			   И ТекущаяСтрока.ПредыдущееПоказаниеДн = 0
			   И (СтруктураЗаполнения.РазмерНормы = 0 ИЛИ СтруктураЗаполнения.РазмерНормы = "Х")
			   И (СтруктураЗаполнения.РазмерНормыОбщ = 0 ИЛИ СтруктураЗаполнения.РазмерНормыОбщ = "Х"))
			 ИЛИ (НЕ ОбщРасходИндДн = "Х" И НЕ ОбщРасходИндДн = 0)
			 ИЛИ (НЕ ОбщРасходОбщДн = "Х" И НЕ ОбщРасходОбщДн = 0)Тогда
				
				СтруктураЗаполнения.Вставить("ОбщРасходИнд", ОбщРасходИндДн);
				СтруктураЗаполнения.Вставить("ОбщРасходОбщ", ОбщРасходОбщДн);
				
				Область = ПолучитьОбласть(Макет, ИмяОбластиСтрокиТаблицы, СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(СтруктураЗаполнения);
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЕсли;
			
			Если ТекущаяСтрока.Тарифность = "2" ИЛИ ТекущаяСтрока.Тарифность = "3" Тогда
				
				СтруктураЗаполнения.Вставить("Количество", ТекущаяСтрока.ПредыдущееПоказаниеНч - ТекущаяСтрока.ПредПредыдущееПоказаниеНч);
				
				Если НЕ (СтруктураЗаполнения.Количество = 0
				   И ТекущаяСтрока.ПредПредыдущееПоказаниеНч = 0
				   И ТекущаяСтрока.ПредыдущееПоказаниеНч = 0) Тогда
					СтруктураЗаполнения.Вставить("УслугаДляВывода",         "" + ТекущаяСтрока.ВидУслуги + "(нч.)");
					СтруктураЗаполнения.Вставить("ПредПредыдущееПоказание", Формат(ТекущаяСтрока.ПредПредыдущееПоказаниеНч, СтрокаФормата));
					СтруктураЗаполнения.Вставить("ПредыдущееПоказание",     Формат(ТекущаяСтрока.ПредыдущееПоказаниеНч, СтрокаФормата));
					
					СтруктураЗаполнения.Вставить("ОбщРасходИнд", ОбщРасходИндНч);
					СтруктураЗаполнения.Вставить("ОбщРасходОбщ", ОбщРасходОбщНч);
					
					Область = ПолучитьОбласть(Макет, ИмяОбластиСтрокиТаблицы, СтруктураНастроек, ОбщиеДанные);
					Область.Параметры.Заполнить(СтруктураЗаполнения);
					ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
					ВывестиОбласть(ТабличныйДокумент, Область, Истина);
					
				КонецЕсли;
				
				Если ТекущаяСтрока.Тарифность = "3"
				   И НЕ (СтруктураЗаполнения.Количество = 0
				   И ТекущаяСтрока.ПредПредыдущееПоказаниеПк = 0
				   И ТекущаяСтрока.ПредыдущееПоказаниеПк = 0) Тогда
					
					СтруктураЗаполнения.Вставить("Количество",              ТекущаяСтрока.ПредыдущееПоказаниеПк - ТекущаяСтрока.ПредПредыдущееПоказаниеПк);
					СтруктураЗаполнения.Вставить("УслугаДляВывода",         "" + ТекущаяСтрока.ВидУслуги + "(пк.)");
					СтруктураЗаполнения.Вставить("ПредПредыдущееПоказание", Формат(ТекущаяСтрока.ПредПредыдущееПоказаниеПк, СтрокаФормата));
					СтруктураЗаполнения.Вставить("ПредыдущееПоказание",     Формат(ТекущаяСтрока.ПредыдущееПоказаниеПк, СтрокаФормата));
					
					СтруктураЗаполнения.Вставить("ОбщРасходИнд", ОбщРасходИндПик);
					СтруктураЗаполнения.Вставить("ОбщРасходОбщ", ОбщРасходОбщПик);
					
					Область = ПолучитьОбласть(Макет, ИмяОбластиСтрокиТаблицы, СтруктураНастроек, ОбщиеДанные);
					Область.Параметры.Заполнить(СтруктураЗаполнения);
					ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
					ВывестиОбласть(ТабличныйДокумент, Область, Истина);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура выводит таблицу перерасчетов.
//
// Параметры:
//  Макет               - Табличный документ - макет платежного документа.
//  СтруктураНастроек   - Структура          - структура с настройками формирования квитанций.
//  ТаблицаПерерасчетов - Таблица значений   - сведения о перерасчетах.
//
// Возвращаемое значение:
//  Табличный документ - табличный документ с Разделом 5.
//
Функция ПолучитьОбластьРаздела5Москва679(Макет, СтруктураНастроек, ТаблицаПерерасчетов, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаПерерасчетов.Количество() <> 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел5", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "ЗаголовокТаблицыРаздел5", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Если ТаблицаПерерасчетов.Количество() <> 0 Тогда
			Область = ПолучитьОбласть(Макет, "СтрокаТаблицыРаздел5", СтруктураНастроек, ОбщиеДанные);
			КоординатыПолейДляОбъединения = ПолучитьКоординатыПолейДляОбъединения(Область, 1);
			Для Каждого ТекущаяСтрока Из ТаблицаПерерасчетов Цикл
				Область = ПолучитьОбласть(Макет, "СтрокаТаблицыРаздел5", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ТекущаяСтрока);
				Область = КорректироватьВыводСтрокОбъединением(Макет, "СтрокаТаблицыРаздел5", Область, КоординатыПолейДляОбъединения, СтруктураНастроек, ОбщиеДанные);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЦикла;
		Иначе
			Область = ПолучитьОбласть(Макет, "СтрокаТаблицыРаздел5", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура выводит таблицу рассрочки.
//
// Параметры:
//  Макет             - Табличный документ - макет платежного документа.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ТаблицаРассрочки  - Таблица значений   - сведения о рассрочках.
//
// Возвращаемое значение:
//  Табличный документ - табличный документ с Разделом 6.
//
Функция ПолучитьОбластьРаздела6Москва679(Макет, СтруктураНастроек, ТаблицаРассрочки, ОбщиеДанные)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ТаблицаРассрочки.Количество() <> 0 ИЛИ СтруктураНастроек.ВсегдаВыводитьДополнительныеОбласти Тогда
		
		Область = ПолучитьОбласть(Макет, "ЗаголовокРаздел6", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Область = ПолучитьОбласть(Макет, "ЗаголовокТаблицыРаздел6", СтруктураНастроек, ОбщиеДанные);
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
		Если ТаблицаРассрочки.Количество() <> 0 Тогда
			Для Каждого ТекущаяСтрока Из ТаблицаРассрочки Цикл
				Область = ПолучитьОбласть(Макет, "СтрокаТаблицыРаздел6", СтруктураНастроек, ОбщиеДанные);
				Область.Параметры.Заполнить(ТекущаяСтрока);
				ВывестиОбласть(ТабличныйДокумент, Область, Истина);
			КонецЦикла;
		Иначе
			Область = ПолучитьОбласть(Макет, "СтрокаТаблицыРаздел6", СтруктураНастроек, ОбщиеДанные);
			ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		КонецЕсли;
		
		Область = ПолучитьОбласть(Макет, "СтрокаИтогаТаблицыРаздел6", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(Новый Структура("КОплате", ТаблицаРассрочки.Итог("КОплате")));
		ВывестиОбласть(ТабличныйДокумент, Область, Истина);
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Функция возвращает область заголовка квитанции.
//
// Параметры:
//  Макет             - Табличный документ - макет квитанции.
//  ОбщиеДанные       - Структура          - сведения о лицевом счете.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
// 
// Возвращаемое значение:
//   Табличный документ - область заголовка квитанции.
//
Функция ПолучитьОбластьЗаголовок(Макет, ОбщиеДанные, СтруктураНастроек)
	
	ОбластьЗаголовок = ПолучитьОбласть(Макет, "Заголовок", СтруктураНастроек, ОбщиеДанные);
	ОбластьЗаголовок.Параметры.Заполнить(ОбщиеДанные);
	
	Возврат ОбластьЗаголовок;
	
КонецФункции // ПолучитьОбластьЗаголовок()

// Процедура получает текст одномерного штрих-кода.
//
// Параметры:
//  СтруктураНастроек - Структура - структура с настройками формирования квитанций.
//  ОбщиеДанные       - Структура - сведения о лицевом счете.
//
Процедура ПолучитьТекстОдномерногоШтрихКода(СтруктураНастроек, ОбщиеДанные)
	
	врТекущийВидШК = СтруктураНастроек.ПараметрыФормированияПД.ВидШтрихкода;
	СтруктураНастроек.ПараметрыФормированияПД.ВидШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный");
	
	Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		Если ОбщиеДанные.ОбщиеДанныеПоКР = Неопределено Тогда
			ТекстШтрихКодаПоКР = "";
		Иначе
			ТекстШтрихКодаПоКР = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТекстШК(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные.ОбщиеДанныеПоКР);
		КонецЕсли;
		ТекстШтрихКода = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТекстШК(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные.ОбщиеДанныеНеКР);
		
		Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
			ТекстШКСоСтрахованием = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТекстШК(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные.ОбщиеДанныеНеКР, Истина);
		КонецЕсли;
	Иначе
		ТекстШтрихКода = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТекстШК(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные);
		
		Если ОбщиеДанные.ЕстьНачисленияПоДобровольномуСтрахованию Тогда
			ТекстШКСоСтрахованием = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТекстШК(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные, Истина);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНастроек.ПараметрыФормированияПД.ВидШтрихкода = врТекущийВидШК;
	
КонецПроцедуры // ПолучитьТекстОдномерногоШтрихКода()

// Дописывает к имени штрихкода со страхованием слово "Дополнительный".
// Это необходимо для того, чтобы корректно сформировался текст штрихкода.
Процедура ПоменятьИмяШтрихкодаСоСтрахованием(Область)
	
	Для Каждого Штрихкод Из Область.Рисунки Цикл
		Если Найти(Штрихкод.Имя, "СоСтрахованием") > 0 Тогда
			Штрихкод.Имя = Штрихкод.Имя + "Дополнительный";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

// Заполняет параметр ИПУ в области отрывного корешка и в некоторых таблицах с показаниями ИПУ.
//
Процедура ЗаполнитьПараметрИндивидуальногоСчетчика(Область, ПостфиксВидТарифности, СтрокаДанных, СтруктураПараметров = Неопределено)
	
	// Очистим текст примечания в области.
	Для Сч = 1 По Область.ШиринаТаблицы Цикл
		Примечание = Область.Область(1, Сч, 1, Сч).Примечание.Текст;
		Если Не ПустаяСтрока(Примечание) Тогда
			Область.Область(1, Сч, 1, Сч).Примечание.Текст = "";
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура("НаименованиеСчетчика, КодСчетчика, ЗаводскойНомер, Услуга, ВидУслуги");
	КонецЕсли;
	
	Для Каждого ТекущийЭлемент Из СтруктураПараметров Цикл
		
		Если НЕ ЕстьРеквизитОбъекта(СтрокаДанных, ТекущийЭлемент.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийЭлемент.Ключ = "ЗаводскойНомер"
		   И ЕстьРеквизитОбъекта(СтрокаДанных, "ЗаводскойНомер")
		   И ПустаяСтрока(СтрокаДанных.ЗаводскойНомер)
		   И ЕстьРеквизитОбъекта(СтрокаДанных, "НаименованиеСчетчика")
		   И СтруктураПараметров.Свойство("ЗаводскойНомер")
		   И СтруктураПараметров.Свойство("НаименованиеСчетчика") Тогда
			СтруктураПараметров.ЗаводскойНомер = СтрокаДанных.НаименованиеСчетчика;
			Область.Параметры.Заполнить(Новый Структура("ЗаводскойНомер", "" + СтрокаДанных.НаименованиеСчетчика + ПостфиксВидТарифности));
		Иначе
			Область.Параметры.Заполнить(Новый Структура(ТекущийЭлемент.Ключ, "" + СтрокаДанных[ТекущийЭлемент.Ключ] + ПостфиксВидТарифности));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрИндивидуальногоСчетчика()

// Проверяет наличие реквизита объекта.
//
// Параметры:
//   Объект       - параметры области табличного документа.
//   ИмяРеквизита - имя проверяемого реквизита объекта.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита)
	
	ЕстьРеквизит = Ложь;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("Структура") Тогда
		
		ЕстьРеквизит = Объект.Свойство(ИмяРеквизита);
		
	Иначе
		
		КлючУникальности = "~#~#~";
		СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
		
		ЕстьРеквизит = СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
		
	КонецЕсли;
	
	Возврат ЕстьРеквизит;
	
КонецФункции // ЕстьРеквизитОбъекта()

// Форматирует параметры области в соответствии с заданным форматом.
//
// Параметры:
//  Область							 - 	Табличный документ - область с параметрами.
//  СписокФорматируемыхПараметров	 - 	Список значений - список значений форматируемых параметров.
//  СтрокаФормата					 - 	Строка - форматная строка.
//
Процедура ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата)
	
	ПараметрыОбласти = Область.Параметры;
	
	Если ПараметрыОбласти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ФорматируемыйПараметр Из СписокФорматируемыхПараметров Цикл
		
		ИмяПараметра = ФорматируемыйПараметр.Ключ;
		
		// Попытка добавлена для обработки ситуации, когда вместо числа в форматируемом параметре оказывается строка.
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, ИмяПараметра) Тогда
			Попытка
				ПараметрыОбласти[ФорматируемыйПараметр.Значение] = Число(ПараметрыОбласти[ФорматируемыйПараметр.Значение]);
			Исключение
			КонецПопытки;
			ПараметрыОбласти[ИмяПараметра] = Формат(ПараметрыОбласти[ИмяПараметра], СтрокаФормата);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОтформатироватьПараметрыОбласти()

// Выводит примечание.
//
// Параметры:
//  ДокументРезультат – Табличный документ - табличный документ для вывода сведений.
//  Макет             – Табличный документ - табличный документ отчета.
//  ОбщиеДанные       - Структура          - сведения о лицевом счете.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//
Процедура ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные, СтруктураНастроек)
	
	Если ОбщиеДанные.КвитанцияНаКР Тогда
		ТекстПримеч = СокрЛП(ОбщиеДанные.ПримечаниеКвитанцииКР);
	Иначе
		ТекстПримеч = СокрЛП(ОбщиеДанные.ПримечаниеКвитанцииОсн);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Примечание", ТекстПримеч);
	
	Если Не ПустаяСтрока(ТекстПримеч) Тогда
		Область = ПолучитьОбласть(Макет, "СтрокаПримечания", СтруктураНастроек, ОбщиеДанные);
		Область.Параметры.Заполнить(СтруктураПараметров);
		ВывестиОбласть(ДокументРезультат, Область, Истина);
	КонецЕсли;
	
КонецПроцедуры // ВывестиПримечание()

// Функция получает макет платежного документа по имени макета.
//
// Параметры:
//  ИмяМакета         - Строка    - имя макета платежного документа.
//  СтруктураНастроек - Структура - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  Табличный документ - макет платежного документа.
//
Функция ПолучитьМакетПлатежногоДокумента(ИмяМакета, СтруктураНастроек = Неопределено)
	
	// Раскомментировать для тестирования макетов внешнего отчета.
	//Возврат ПолучитьМакет(ИмяМакета);
	
	Если СтруктураНастроек <> Неопределено И ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Если СтруктураНастроек.Свойство(ИмяМакета) Тогда
			Макет = СтруктураНастроек[ИмяМакета];
		Иначе
			Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.УПЖКХ_ПлатежныйДокумент." + ИмяМакета);
			СтруктураНастроек.Вставить(ИмяМакета, Макет);
		КонецЕсли;
	Иначе
		Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.УПЖКХ_ПлатежныйДокумент." + ИмяМакета);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

// Функция проверяет, существует ли в макете указанная область.
//  Если область <ИмяОбласти> существует, то она возвращается в качестве результата функции.
//  Если область <ИмяОбласти> отсутствует в макете, то в качестве результата функции возвращается пустой табличный документ.
//  В режиме пользовательских макетов пользователь может изменить имя любой области макета.
//  Данная функция добавлена для предотвращения появления конфигураторских ошибок в случае,
//  когда пользователь изменил имя какой-либо области.
//
// Параметры:
//  Макет             - Табличный документ - макет квитанции.
//  ИмяОбласти        - Строка             - имя области макета квитанции.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
// 
// Возвращаемое значение:
//  Табличный документ.
//
Функция ПолучитьОбласть(Макет, ИмяОбласти, СтруктураНастроек, ОбщиеДанные)
	
	Область = Новый ТабличныйДокумент;
	
	Если НЕ Макет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		
		Если СтруктураНастроек.Свойство("СтруктураОбластейМакета")
		   И СтруктураНастроек["СтруктураОбластейМакета"].Свойство(ИмяОбласти)
		   И СтруктураНастроек["СтруктураОбластейМакета"][ИмяОбласти].Свойство("СтруктураИменПараметров")
		   И СтруктураНастроек["СтруктураОбластейМакета"][ИмяОбласти].Свойство("Область") Тогда
			
			СтруктураОбластейМакета = СтруктураНастроек.СтруктураОбластейМакета;
			
			Область                 = СтруктураОбластейМакета[ИмяОбласти]["Область"];
			СтруктураИменПараметров = СтруктураОбластейМакета[ИмяОбласти]["СтруктураИменПараметров"];
			
			ЗаполнитьЗначенияСвойств(Область.Параметры, СтруктураИменПараметров);
			
			ЗаполнитьДополнительныеПараметрыОбласти(Область, СтруктураНастроек, ОбщиеДанные);
			
		Иначе
			
			// Создадим сведения об области.
			
			Если НЕ СтруктураНастроек.Свойство("СтруктураОбластейМакета") Тогда
				СтруктураНастроек.Вставить("СтруктураОбластейМакета", Новый Структура)
			КонецЕсли;
			
			СтруктураОбластейМакета = СтруктураНастроек.СтруктураОбластейМакета;
			
			СтруктураОбластейМакета.Вставить(ИмяОбласти, СоздатьСтруктуруОбласти());
			
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
			
			ЗаполнитьДополнительныеПараметрыОбласти(Область, СтруктураНастроек, ОбщиеДанные);
			
			// Обновляем данные об области в структуре.
			СтруктураОбластейМакета[ИмяОбласти]["Область"]                 = Область;
			СтруктураОбластейМакета[ИмяОбласти]["СтруктураИменПараметров"] = ПолучитьСтруктуруИменПараметров(Область);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Область;
	
КонецФункции // ПолучитьОбласть()

// Возвращает структуру области для кэширования.
Функция СоздатьСтруктуруОбласти()
	
	СтруктураОбластейМакета = Новый Структура;
	СтруктураОбластейМакета.Вставить("СтруктураИменПараметров", Новый Структура);
	СтруктураОбластейМакета.Вставить("Область",                 Новый Структура);
	
	Возврат СтруктураОбластейМакета;
	
КонецФункции

// Возвращает структуру параметров с пустыми значениями (пустая строка).
Функция ПолучитьСтруктуруИменПараметров(ОбластьТабДокумента) Экспорт
	
	СтруктураИменПараметров = Новый Структура;
	
	Если ОбластьТабДокумента.Параметры.Количество() = 0 Тогда
		Возврат СтруктураИменПараметров;
	КонецЕсли;
	
	МассивИменПараметров = Новый Массив;
	Для НомерСтроки = 1 По ОбластьТабДокумента.ВысотаТаблицы Цикл
		
		Для НомерКолонки = 1 По ОбластьТабДокумента.ШиринаТаблицы Цикл
			
			Ячейка = ОбластьТабДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			ТипЗаполненияОбласти = Ячейка.Заполнение;
			Если ТипЗаполненияОбласти = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
				// если такого параметра еще нет, то добавим его
				Если ЗначениеЗаполнено(Ячейка.Параметр) И МассивИменПараметров.Найти(Ячейка.Параметр) = Неопределено тогда
					МассивИменПараметров.Добавить(Ячейка.Параметр);
				КонецЕсли;
			ИначеЕсли ТипЗаполненияОбласти = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
				// выделим все параметры в шаблоне в отдельные строки
				ТекстШаблона = Ячейка.Текст;
				ТекстШаблона = СтрЗаменить(ТекстШаблона, "[", Символы.ПС + "[");
				ТекстШаблона = СтрЗаменить(ТекстШаблона, "]", Символы.ПС);
				Для Счетчик = 1 По СтрЧислоСтрок(ТекстШаблона) Цикл
					ТекСтрока = СтрПолучитьСтроку(ТекстШаблона, Счетчик);
					Если Лев(ТекСтрока, 1) = "[" тогда
						ИмяПараметра = Сред(ТекСтрока, 2);
						// если такого параметра еще нет, то добавим его
						Если ЗначениеЗаполнено(ИмяПараметра) И МассивИменПараметров.Найти(ИмяПараметра) = Неопределено тогда
							МассивИменПараметров.Добавить(ИмяПараметра);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли // конец проверки, что в ячейке - текст, параметр или шаблон
			
		КонецЦикла // конец обхода по колонкам
		
	КонецЦикла;//конец обхода по строкам
	
	Для Каждого ТекущийПараметр Из МассивИменПараметров Цикл
		СтруктураИменПараметров.Вставить(ТекущийПараметр, "");
	КонецЦикла;
	
	Возврат СтруктураИменПараметров;
	
КонецФункции

// Процедура заполняет параметры области.
//
Процедура ЗаполнитьДополнительныеПараметрыОбласти(Область, СтруктураНастроек, ОбщиеДанные)
	
	ПараметрыОбласти    = Область.Параметры;
	СтруктураЗаполнения = Новый Структура;
	
	// Для ПД: "Плат. документ (приказ №924/пр)", "Плат. документ (пост. №679/30 для МО)", единой квитанции по основным услугам и услугам
	// капитального ремонта, - для вывода номера Единого лицевого счета для ГИС ЖКХ и Идентификатор ЖКХ текущего лицевого счета используем
	// следующие параметры области:
	
	Если СтруктураНастроек.ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР
	 ИЛИ СтруктураНастроек.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ЕЛСвГИСЖКХОсн") Тогда
			СтруктураЗаполнения.Вставить("ЕЛСвГИСЖКХОсн", ОбщиеДанные.ЕЛСвГИСЖКХОсн);
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ЕЛСвГИСЖКХКапРемонт") Тогда
			СтруктураЗаполнения.Вставить("ЕЛСвГИСЖКХКапРемонт", ОбщиеДанные.ЕЛСвГИСЖКХКапРемонт);
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ИдентификаторЖКУОсн") Тогда
			СтруктураЗаполнения.Вставить("ИдентификаторЖКУОсн", ОбщиеДанные.ИдентификаторЖКУОсн);
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ИдентификаторЖКУКапРемонт") Тогда
			СтруктураЗаполнения.Вставить("ИдентификаторЖКУКапРемонт", ОбщиеДанные.ИдентификаторЖКУКапРемонт);
		КонецЕсли;
		
	Иначе
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ЕЛСвГИСЖКХ") Тогда
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда
				СтруктураЗаполнения.Вставить("ЕЛСвГИСЖКХ", ОбщиеДанные.ЕЛСвГИСЖКХКапРемонт);
			Иначе
				СтруктураЗаполнения.Вставить("ЕЛСвГИСЖКХ", ОбщиеДанные.ЕЛСвГИСЖКХОсн);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ИдентификаторЖКУ") Тогда
			Если ОбщиеДанные.КвитанцияНаКР Тогда
				СтруктураЗаполнения.Вставить("ИдентификаторЖКУ", ОбщиеДанные.ИдентификаторЖКУКапРемонт);
			Иначе
				СтруктураЗаполнения.Вставить("ИдентификаторЖКУ", ОбщиеДанные.ИдентификаторЖКУОсн);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураНастроек.ВыводитьШК Тогда
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ТекстШК") Тогда
			СтруктураЗаполнения.Вставить("ТекстШК", ТекстШтрихКода);
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ТекстШКПоКапРемонту") Тогда
			СтруктураЗаполнения.Вставить("ТекстШКПоКапРемонту", ТекстШтрихКодаПоКР);
		КонецЕсли;
		
		Если ЕстьРеквизитОбъекта(ПараметрыОбласти, "ТекстШКСоСтрахованием") Тогда
			СтруктураЗаполнения.Вставить("ТекстШКСоСтрахованием", ТекстШКСоСтрахованием);
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗаполнения.Вставить("ИдентификаторЛС", ОбщиеДанные.ИдентификаторЛС);
	
	Область.Параметры.Заполнить(СтруктураЗаполнения);
	
КонецПроцедуры

// Процедура выводит или присоединяет область табличного документа в исходный табличный документ
// с возможностью "очищения" выводимой или присоединяемой области табличного документа. При этом "очищение"
// необходимо для оптимизации памяти программы.
//
// Параметры:
//  ТабличныйДокументПриемник - Табличный документ - табличный документ для вывода или присоединения.
//  ТабличныйДокументИсточник - Табличный документ - выводимая или присоединяемая область табличного документа.
//  ОчиститьДанныеИсточника   - Булево             - определяет, "очищать или нет выводимую или присоединяемую
//                                                   область табличного документа.
//  СпособВывода              - Строка             - определяет, выводить или присоединять область.
//
Процедура ВывестиОбласть(ТабличныйДокументПриемник, ТабличныйДокументИсточник, ОчиститьДанныеИсточника = Ложь, СпособВывода = "Вывести")
	
	Если ТабличныйДокументИсточник.ВысотаТаблицы > 0 Тогда
		Если СпособВывода = "Присоединить" Тогда
			ТабличныйДокументПриемник.Присоединить(ТабличныйДокументИсточник);
		Иначе
			ТабличныйДокументПриемник.Вывести(ТабличныйДокументИсточник);
		КонецЕсли;
	КонецЕсли;
	
	Если ОчиститьДанныеИсточника Тогда
		ТабличныйДокументИсточник = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ВывестиОбласть()

// Формирует табличный документ и выводить в него область "Отрывного корешка".
//
// Параметры:
//  Макет             - Табличный документ - макет квитанции.
//  ОбщиеДанные       - Структура          - сведения о лицевом счете.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ТаблицаСчетчиков  - Таблица значений   - таблица с информацией о счетчиках по текущему лицевому счету.
//
// Возвращаемое значение:
//  ТабличныйДокумент - табличный документ с областью "Отрывной корешок".
//
Функция ПолучитьОтрывнойКорешок(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаСчетчиков)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "КорешокПолучатель", СтруктураНастроек, ОбщиеДанные);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ВывестиОбласть(ТабличныйДокумент, Область, Истина, "Присоединить");
	
	ОбластьПоказаний = Новый ТабличныйДокумент;
	
	Область = ПолучитьОбласть(Макет, "КорешокШапкаИПУ", СтруктураНастроек, ОбщиеДанные);
	ВывестиОбласть(ОбластьПоказаний, Область, Истина);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		
		СтрокаФормата = "ЧДЦ=" + Строка(СтруктураНастроек.ТочностьОбъемаНачислений) + "; ЧН=-; ЧГ=0";
		
		врСтруктураПараметров         = Новый Структура("ПредыдущееПоказание", 0);
		СписокФорматируемыхПараметров = Новый Структура("ПредыдущееПоказание");
		
		Для Каждого ТекущаяКолонка Из ТаблицаСчетчиков.Колонки Цикл
			Если НЕ врСтруктураПараметров.Свойство(ТекущаяКолонка.Имя) Тогда
				врСтруктураПараметров.Вставить(ТекущаяКолонка.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из ТаблицаСчетчиков Цикл
			
			ЗаполнитьЗначенияСвойств(врСтруктураПараметров, Строка);
			врСтруктураПараметров.ДатаПоверки = Формат(Строка.ДатаПоверки, "ДФ=dd.MM.yyyy");
			
			// Выводим дневное показание, само значение показания выводим согласно настройке "НеВыводитьПоказанияПоПУ".
			Область = ПолучитьОбласть(Макет, "КорешокСтрокаИПУ", СтруктураНастроек, ОбщиеДанные);
			
			врСтруктураПараметров.ПредыдущееПоказание = ?(СтруктураНастроек.НеВыводитьПоказанияПоПУ, 0, Строка.ПредыдущееПоказаниеДн);
			
			Область.Параметры.Заполнить(врСтруктураПараметров);
			
			Постфикс = ?(Строка.Тарифность <> "1", " (дн.)", "");
			ЗаполнитьПараметрИндивидуальногоСчетчика(Область, Постфикс, Строка);
			
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			ВывестиОбласть(ОбластьПоказаний, Область);
			
			// Выводим ночное показание, само значение показания выводим согласно настройке "НеВыводитьПоказанияПоПУ".
			Если Строка.Тарифность <> "1" Тогда
				Область = ПолучитьОбласть(Макет, "КорешокСтрокаИПУ", СтруктураНастроек, ОбщиеДанные);
				
				врСтруктураПараметров.ПредыдущееПоказание = ?(СтруктураНастроек.НеВыводитьПоказанияПоПУ, 0, Строка.ПредыдущееПоказаниеНч);
				Область.Параметры.Заполнить(врСтруктураПараметров);
				
				ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (нч.)", Строка);
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				ВывестиОбласть(ОбластьПоказаний, Область);
				
				// Выводим пиковое показание, само значение показания выводим согласно настройке "НеВыводитьПоказанияПоПУ".
				Если Строка.Тарифность = "3" Тогда
					Область = ПолучитьОбласть(Макет, "КорешокСтрокаИПУ", СтруктураНастроек, ОбщиеДанные);
					
					врСтруктураПараметров.ПредыдущееПоказание = ?(СтруктураНастроек.НеВыводитьПоказанияПоПУ, 0, Строка.ПредыдущееПоказаниеПк);
					Область.Параметры.Заполнить(врСтруктураПараметров);
					
					ЗаполнитьПараметрИндивидуальногоСчетчика(Область, " (пик.)", Строка);
					ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
					ВывестиОбласть(ОбластьПоказаний, Область);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		СчетчикПустыхСтрок = 0;
		
		Область = ПолучитьОбласть(Макет, "КорешокСтрокаИПУПустая", СтруктураНастроек, ОбщиеДанные);
		Пока НЕ СчетчикПустыхСтрок = 4 Цикл
			ВывестиОбласть(ОбластьПоказаний, Область);
			СчетчикПустыхСтрок = СчетчикПустыхСтрок + 1;
		КонецЦикла;
	КонецЕсли;
	
	ВывестиОбласть(ТабличныйДокумент, ОбластьПоказаний, Истина, "Присоединить");
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОтрывнойКорешок()

// Функция предназначена для формирования текста заголовка платежного документа.
//
// Параметры:
//  СтруктураНастроек   - Структура - структура с настройками формирования квитанций.
//  ОбщиеДанные         - Структура - сведения о лицевом счете.
//  ЭтоОбластьКвитанция - Булево    - определяет, что это область "Квитанция".
//
// Возвращаемое значение:
//  Строка - текст заголовка платежного документа.
//
Функция ПолучитьТекстЗаголовкаКвитанции(СтруктураНастроек, ОбщиеДанные, ЭтоОбластьКвитанция = Ложь)
	
	ПараметрыФормированияПД  = СтруктураНастроек.ПараметрыФормированияПД;
	ТекстЗаголовка           = "";
	ТекстЗаголовкаИзРегистра = ?(ОбщиеДанные.КвитанцияНаКР, ПараметрыФормированияПД.ЗаголовокКР, ПараметрыФормированияПД.ЗаголовокОсн);
	ТипФондаПомещенияШапка   = ОбщиеДанные.ТипФондаПомещенияШапка;
	ВидМакета                = СтруктураНастроек.ВидМакета;
	ПериодПросмотра          = СтруктураНастроек.ПериодПросмотра;
	
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный
	 ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР
	 ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1
	 ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр Тогда
		
		ТекстЗаголовка = "ПЛАТЕЖНЫЙ ДОКУМЕНТ" + Символы.ПС;
		Если ОбщиеДанные.КвитанцияПоПени Тогда // пени.
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда // пени по услугам кап.ремонта.
				ТекстЗаголовка = ТекстЗаголовка + "для внесения платы пени по взносам на капитальный ремонт общего имущества в многоквартирном доме";
			Иначе // пени по основным услугам.
				ТекстЗаголовка = ТекстЗаголовка + "для внесения платы пени за содержание "
							   + ?(ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР, "и ремонт ", "")
							   + ТипФондаПомещенияШапка + " помещения и предоставление коммунальных услуг";
			КонецЕсли;
			
		ИначеЕсли НЕ ПараметрыФормированияПД.ИспользоватьСтандартныйЗаголовок Тогда
			
			ТекстЗаголовка = ТекстЗаголовкаИзРегистра;
			
		Иначе // не пени и не стандартный заголовок.
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда // по услугам кап.ремонта.
				ТекстЗаголовка = ТекстЗаголовка + "для внесения взносов на капитальный ремонт общего имущества в многоквартирном доме";
			Иначе // по основным услугам.
				ТекстЗаголовка = ТекстЗаголовка + "для внесения платы за содержание "
							   + ?(ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР, "и ремонт ", "")
							   + ТипФондаПомещенияШапка + " помещения и предоставление коммунальных услуг";
						   КонецЕсли;
						   
		КонецЕсли;
		
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2 Тогда
		
		Если ОбщиеДанные.КвитанцияПоПени Тогда // пени.
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда // пени по услугам кап.ремонта.
				Если ЭтоОбластьКвитанция Тогда
					ТекстЗаголовка = "СЧЕТ-КВИТАНЦИЯ" + Символы.ПС;
				Иначе
					ТекстЗаголовка = "Счет ";
				КонецЕсли;
				ТекстЗаголовка = ТекстЗаголовка + "для внесения платы пени по взносам на капитальный ремонт общего имущества в многоквартирном доме";
			Иначе // пени по основным услугам.
				Если ЭтоОбластьКвитанция Тогда
					ТекстЗаголовка = "СЧЕТ-КВИТАНЦИЯ" + Символы.ПС;
				Иначе
					ТекстЗаголовка = "Счет ";
				КонецЕсли;
				ТекстЗаголовка = ТекстЗаголовка + "для внесения платы пени за содержание жилого помещения и предоставление коммунальных услуг";
			КонецЕсли;
			ТекстЗаголовка = ТекстЗаголовка + " за " + Формат(ПериодПросмотра, "ДФ='ММММ yyyy'") + " г.";
			
		ИначеЕсли НЕ ПараметрыФормированияПД.ИспользоватьСтандартныйЗаголовок Тогда
			
			ТекстЗаголовка = ТекстЗаголовкаИзРегистра;
			
		Иначе // не пени и не стандартный заголовок.
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда // по услугам кап.ремонта.
				Если ЭтоОбластьКвитанция Тогда
					ТекстЗаголовка = "СЧЕТ-КВИТАНЦИЯ" + Символы.ПС;
				Иначе
					ТекстЗаголовка = "Счет ";
				КонецЕсли;
				ТекстЗаголовка = ТекстЗаголовка + "для внесения взносов на капитальный ремонт общего имущества в многоквартирном доме";
			Иначе // по основным услугам.
				Если ЭтоОбластьКвитанция Тогда
					ТекстЗаголовка = "СЧЕТ-КВИТАНЦИЯ" + Символы.ПС;
				Иначе
					ТекстЗаголовка = "Счет ";
				КонецЕсли;
				ТекстЗаголовка = ТекстЗаголовка + "для внесения платы за содержание жилого помещения и предоставление коммунальных услуг";
			КонецЕсли;
			ТекстЗаголовка = ТекстЗаголовка + " за " + Формат(ПериодПросмотра, "ДФ='ММММ yyyy'") + " г.";
			
		КонецЕсли;
		
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва Тогда
		
		ТекстЗаголовка = "Форма Единого платежного документа" + Символы.ПС
					   + "для внесения ";
		Если ОбщиеДанные.КвитанцияПоПени Тогда // пени.
			ТекстЗаголовка = ТекстЗаголовка + "платы пени ";
			Если ОбщиеДанные.КвитанцияНаКР Тогда // пени по услугам кап.ремонта.
				ТекстЗаголовка = ТекстЗаголовка
							   + "по взносам на капитальный ремонт общего имущества в многоквартирном доме";
			Иначе // пени по основным услугам.
				ТекстЗаголовка = ТекстЗаголовка
							   + "за содержание и ремонт " + ТипФондаПомещенияШапка + " помещения и предоставление коммунальных услуг";
			КонецЕсли;
			
		ИначеЕсли НЕ ПараметрыФормированияПД.ИспользоватьСтандартныйЗаголовок Тогда
			
			ТекстЗаголовка = ТекстЗаголовкаИзРегистра;
			
		Иначе // не пени и не стандартный заголовок.
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда // по услугам кап.ремонта.
				ТекстЗаголовка = ТекстЗаголовка + "взносов на капитальный ремонт общего имущества в многоквартирном доме";
			Иначе // по основным услугам.
				ТекстЗаголовка = ТекстЗаголовка + "платы за содержание и ремонт " + ТипФондаПомещенияШапка + " помещения и предоставление коммунальных услуг";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679 Тогда
		
		ТекстЗаголовка = "Форма Единого платежного документа для внесения платы ";
		Если ОбщиеДанные.КвитанцияПоПени Тогда // пени.
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда // пени по услугам кап.ремонта.
				ТекстЗаголовка = ТекстЗаголовка + "пени по взносам на капитальный ремонт";
			Иначе
				ТекстЗаголовка = ТекстЗаголовка + "пени за " + ТипФондаПомещенияШапка + " помещение," + Символы.ПС
							   + "предоставление коммунальных и иных услуг";
			КонецЕсли;
			
		ИначеЕсли НЕ ПараметрыФормированияПД.ИспользоватьСтандартныйЗаголовок Тогда
			
			ТекстЗаголовка = ТекстЗаголовкаИзРегистра;
			
		Иначе // не пени и не стандартный заголовок.
			
			Если ОбщиеДанные.КвитанцияНаКР Тогда // по услугам кап.ремонта.
				ТекстЗаголовка = ТекстЗаголовка + "по взносам на капитальный ремонт";
			Иначе // по основным услугам.
				ТекстЗаголовка = ТекстЗаголовка + "за " + ТипФондаПомещенияШапка + " помещение," + Символы.ПС
							   + "предоставление коммунальных и иных услуг";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции // ПолучитьТекстЗаголовкаКвитанции()

// Заполняет структуру общих данных дополнительными параметрами, необходимыми для заполнения шаблонов в макетах квитанций.
//
// Параметры:
//  СтруктураНастроек - Структура - структура с настройками формирования квитанций.
//  ОбщиеДанные       - Структура - сведения о лицевом счете.
//
Процедура ЗаполнитьШаблонПлощадиПомещенияВМакете(ОбщиеДанные, СтруктураНастроек)
	
	ЖилойФондПомещения = ОбщиеДанные.ЖилойФондПомещения;
	ВидМакета          = СтруктураНастроек.ВидМакета;
	
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2 Тогда
		
		ОбщиеДанные.Вставить("ТекстЖилаяПлощадь", ?(ЖилойФондПомещения, "жил.: " + ОбщиеДанные.ЖилаяПлощадь + " кв.м.", ""));
		
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай Тогда
		
		ОбщиеДанные.Вставить("ЗаголовокПлощадиПомещения", ОбщиеДанные.ТекстПлощадьПолный + ?(ЖилойФондПомещения, " / жилая", ""));
		ОбщиеДанные.Вставить("СтрокаПлощадиПомещения", "" + ОбщиеДанные.ОбщаяПлощадь + ?(ЖилойФондПомещения, " / " + ОбщиеДанные.ЖилаяПлощадь, ""));
		
	ИначеЕсли ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва
		  ИЛИ ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679 Тогда
		
		ОбщиеДанные.Вставить("СтрокаПлощадиПомещения", "" + ОбщиеДанные.ОбщаяПлощадь + ?(ЖилойФондПомещения, " / " + ОбщиеДанные.ЖилаяПлощадь, ""));
		
		Если СтруктураНастроек.ВыводитьРасчетнуюПлощадь Тогда
			
			ОбщиеДанные.Вставить("ЗаголовокПлощадиПомещения", "Расчетная площадь помещения" + ?(ЖилойФондПомещения, " / жилая площадь:", ":"));
			ОбщиеДанные.Вставить("ЗаголовокПлощадиЗдания",    "Расчетная площадь здания");
			
		Иначе
			
			ОбщиеДанные.Вставить("ЗаголовокПлощадиПомещения", "Общая" + ?(ЖилойФондПомещения, " / жилая площадь:", ":"));
			ОбщиеДанные.Вставить("ЗаголовокПлощадиЗдания",    "Общая площадь здания");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Корректировка_вывода_строк

// Формирует структуру координат полей области табличного документа для корректного вывода
// при увеличении высоты строки области из-за большого числа символов значения в поле.
//
// Параметры:
//  Область						 - Табличный документ - область строки табличного документа,
// 														в котором поля будут объединены для выравнивания.
//  НачальнаяКоординатаЧтения	 - Число              - позиция начального поля для объединения.
// 
// Возвращаемое значение:
//   Структура - структура полей с координатами, значения предстваляют собой структуру с ключами. Например:
//  					Поле1:
//  						"Начало"	 - Число - начальная позиция поля "Поле1", начиная от значения "НачальнаяКоординатаЧтения".
//  						"Конец"		 - Число - конечная позиция поля "Поле1", начиная от значения "НачальнаяКоординатаЧтения".
//  						"Параметр"	 - Строка - имя параметра или тект поля "Поле1".
//  					Поле2:
//  						"Начало"	 - Число - начальная позиция поля "Поле2", начиная от значения "НачальнаяКоординатаЧтения".
//  						"Конец"		 - Число - конечная позиция поля "Поле2", начиная от значения "НачальнаяКоординатаЧтения".
//  						"Параметр"	 - Строка - имя параметра или тект поля "Поле2".
//
Функция ПолучитьКоординатыПолейДляОбъединения(Область, НачальнаяКоординатаЧтения = 1)
	
	КоординатыПолейОбъединения = Новый Структура;
	
	НачальнаяКоординатаОбласти = 1;
	НомерПоля           = 0;
	
	врПараметрПоля = "";
	ШиринаТаблицы  = Область.ШиринаТаблицы;
	
	Для Сч = НачальнаяКоординатаЧтения По ШиринаТаблицы Цикл
		
		ТекущееПоле = Область.Область(1,Сч,1,Сч);
		Если ТекущееПоле.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
			текПараметрПоля = ТекущееПоле.Параметр;
		Иначе
			текПараметрПоля = ТекущееПоле.Текст;
		КонецЕсли;
		
		Если Сч = НачальнаяКоординатаЧтения ИЛИ (врПараметрПоля <> текПараметрПоля И НЕ ПустаяСтрока(текПараметрПоля)) Тогда
			врПараметрПоля = текПараметрПоля;
			НомерПоля      = НомерПоля + 1;
			
			НачальнаяКоординатаОбласти = Сч;
			
			ПоляКоординат = Новый Структура("Начало, Конец, Параметр");
			ПоляКоординат.Начало   = НачальнаяКоординатаОбласти;
			ПоляКоординат.Конец    = Сч;
			ПоляКоординат.Параметр = врПараметрПоля;
			
			КоординатыПолейОбъединения.Вставить("Поле" + НомерПоля, ПоляКоординат);
		ИначеЕсли КоординатыПолейОбъединения.Свойство("Поле" + НомерПоля) Тогда
			Поле = КоординатыПолейОбъединения["Поле" + НомерПоля];
			Поле.Конец = Сч;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоординатыПолейОбъединения;
	
КонецФункции

// Функция объединыет ячейки табличного документа по координатам полей.
//
// Параметры:
//  Макет                      - Табличный документ - макет квитанции.
//  НаименованиеОбласти        - Строка             - имя области.
//  Область                    - Табличный документ - область табличного документа с нормальной высотой.
//  КоординатыПолейОбъединения - Структура          - структура полей с координатами, значения предстваляют
//                                                    собой структуру с ключами.
//  СтруктураНастроек          - Структура          - структура с настройками формирования квитанций.
//
// Возвращаемое значение:
//  ТабличныйДокумент - область с объединенными строками.
//
Функция КорректироватьВыводСтрокОбъединением(Макет, НаименованиеОбласти, Область, КоординатыПолейОбъединения, СтруктураНастроек, ОбщиеДанные)
	
	// Получим нормальную высоту строки из макета напрямую до заполнения параметров.
	ПустаяОбласть = Макет.ПолучитьОбласть(НаименованиеОбласти);
	НормВысота    = Окр(ПолучитьВысотуСтроки(ПустаяОбласть, НаименованиеОбласти), 0);
	
	// Получим максимальную (измененную) высоту строки.
	МаксВысота = Окр(ПолучитьВысотуСтроки(Область, НаименованиеОбласти), 0);
	
	ВремТабДок = Новый ТабличныйДокумент;
	ВывестиОбласть(ВремТабДок, Область);
	
	Если НормВысота > 0 Тогда
		Отношение = Окр(МаксВысота / НормВысота, 0);
		Если Отношение > 1 Тогда
			КоличествоДобавляемыхСтрок = 0;
			
			МаксимальноеЧислоОтношения = 15;
			
			Для Сч = 2 По МаксимальноеЧислоОтношения Цикл
				Если Отношение >= Сч Тогда
					КоличествоДобавляемыхСтрок = Сч;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоДобавляемыхСтрок <> 0 Тогда
				// Добавляем пустые строки к имеющейся одной.
				Область = ПолучитьОбласть(Макет, НаименованиеОбласти, СтруктураНастроек, ОбщиеДанные);
				Для Сч = 1 По КоличествоДобавляемыхСтрок Цикл
					ВывестиОбласть(ВремТабДок, Область);
				КонецЦикла;
				// Объединяем ячейки в каждой колонке без изменения высоты строк.
				ВысотаТаблицы = ВремТабДок.ВысотаТаблицы;
				ШиринаТаблицы = ВремТабДок.ШиринаТаблицы;
				
				Для Каждого ТекПоле Из КоординатыПолейОбъединения Цикл
					ТекущиеКоординаты = КоординатыПолейОбъединения[ТекПоле.Ключ];
					Если КоординатыПолейОбъединения[ТекПоле.Ключ].Конец = 0 Тогда
						ОбластьОбъединения = ВремТабДок.Область(1, ТекущиеКоординаты.Начало, ВысотаТаблицы, ШиринаТаблицы);
					Иначе
						ОбластьОбъединения = ВремТабДок.Область(1, ТекущиеКоординаты.Начало, ВысотаТаблицы, ТекущиеКоординаты.Конец);
					КонецЕсли;
					ОбластьОбъединения.Объединить();
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВремТабДок
	
КонецФункции

// Функция возвращает высоту строки, в пунктах.
//
// Параметры:
//  Область				 - Табличный документ - область табличного документа с нормальной высотой.
//  НаименованиеОбласти	 - Строка             - имя области.
// 
// Возвращаемое значение:
//  Число - высота строки в пиках.
//
Функция ПолучитьВысотуСтроки(Область, НаименованиеОбласти)
	
	врТабДокПроверка = Новый ТабличныйДокумент;
	
	ВывестиОбласть(врТабДокПроверка, Область);
	
	ВремОбласть     = врТабДокПроверка.Область(НаименованиеОбласти);
	ПроверямНадпись = врТабДокПроверка.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	
	ПроверямНадпись.Расположить(ВремОбласть);
	
	Возврат ПроверямНадпись.Высота;
	
КонецФункции // ПолучитьВысотуСтроки()

#КонецОбласти // Корректировка_вывода_строк

#КонецОбласти // ОбщиеПроцедурыИФункции

#Область МеханизмДвустороннейПечати

////////////////////////////////////////////////////////////////////////////////
// ДВУСТОРОННЯЯ ПЕЧАТЬ.

// Установка параметров печати для формируемых квитанций.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - формируемая квитанция.
//  ВидМакета         - ТабличныйДокумент - вид макета формируемой квитанции.
//
Процедура УстановитьПараметрыПечати(ТабличныйДокумент, ВидМакета) Экспорт
	
	ТабличныйДокумент.АвтоМасштаб          = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "";
	
	// Ориентация страницы в зависимости от вида макета.
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный
	 Или ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР
	 Или ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр
	 Или ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай Тогда
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Иначе
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	КонецЕсли;
	
	ТабличныйДокумент.КлючПараметровПечати = "НастройкиПечати_КвитанцииИзвещенияКВП_" + Строка(ВидМакета);
	
КонецПроцедуры // УстановитьПараметрыПечати()

// Производит разрыв текущей страниц, переносит вывод на оборотную строну листа и выводит масштабную "закрашенную"
// область извещения.
//
// Параметры:
//  ДокументРезультат                   - ТабличныйДокумент - текущая квитанция;
//  ОбластьИзвещениеДляОборотнойСтороны - ТабличныйДокумент - масштабная область извещения.
//
Процедура ПеренестиВыводНаОбротнуюСторону(ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны)
	
	// Разрываем страницу и переходим на оборотную сторону.
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим "закрашенную" область извещения.
	ОчиститьОбластиЯчеекТабличногоДокумента(ОбластьИзвещениеДляОборотнойСтороны);
	ВывестиОбласть(ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны);
	
	// Зануляем масштабную область извещения для исключения повторного использования.
	// (имеется в виду повторное использование области при выводе доп. областей).
	ОбластьИзвещениеДляОборотнойСтороны = Новый ТабличныйДокумент;
	
КонецПроцедуры // ПеренестиВыводНаОбротнуюСторону()

// Очишает/"закрашивает" все области ячеек данного даличного документа.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - очищаяемая область табличного документа.
//  ОчищатьТекст      - Булево            - истина - очищаем ячейки от текста; ложь - "закрашиваем" текст.
//
Процедура ОчиститьОбластиЯчеекТабличногоДокумента(ТабличныйДокумент, ОчищатьТекст = Ложь)
	
	// Получаем область ячеек табличного документа, соответствующую Извещению.
	Область = ТабличныйДокумент.Область(1, 1, ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	// Удаляем рамки области, очищаем от текста, ... .
	Область.Очистить(ОчищатьТекст, Ложь, Истина);
	
	// ... либо "закрашиваем" его.
	Если Не ОчищатьТекст Тогда 
		Область.ЦветТекста = ЦветаСтиля.ЦветФонаПоля;
	КонецЕсли;
	
	УдаляемыеКартинки = Новый Массив;
	// Выводим пустые картинки вместо штрих-кода.
	Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
		УдаляемыеКартинки.Добавить(Рисунок);
	КонецЦикла;
	
	Для Каждого Рисунок Из УдаляемыеКартинки Цикл
		ТабличныйДокумент.Рисунки.Удалить(Рисунок);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьОбластиЯчеекТабличногоДокумента()

// Выводим таблицу начислений в табличный документ с предварительной проверкой. Проверяем помещается ли таблица начислений
// на лицевую (нечетную) сторону листа с платежным документом. Если помещается, то таблицу начислений выводим 
// на лицевой (нечетной) стороне. В противном случае, таблицу начислений выводим с проверкой, разбив её на три части: шапка-тело-подвал,
// причём если какая-то из этих частей (а для тела таблицы начислений - строк, т.к. проверка построчная) не помещается 
// на лицевой (нечетной) стороне, то дальнейший вывод переносится на оборотную сторону с отступом от верхнего края,
// равным суммарной высоте областей "Извещения" и "Корешка с показаниями ИПУ" (если установлен флаг "ПечататьОтрывнойКорешок").
//
// Параметры:
//  ДвусторонняяПечать - Булево           - признак необходимости работы механизма двусторонней печати.
//  ДокументРезультат - ТабличныйДокумент - текущая квитанция.
//  ОбластьИзвещениеДляОборотнойСтороны   - ТабличныйДокумент - масштабная область извещения.
//  ОбластьНачисления - ТабличныйДокумент - выводимая в ДокументРезультат таблица начислений.
//  ВысотаШапки       - Число             - высота шапки таблицы начислений в строках табличного документа.
//  ВысотаПодвала     - Число             - высота подвала таблицы начислений в строках табличного документа.
//
Процедура ВывестиТаблицуНачисленийСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьНачисления, ВысотаШапки, ВысотаПодвала)
	
	Если Не СтруктураНастроек.ДвусторонняяПечать Тогда
		
		// Обычный вывод без двусторонней печати.
		ВывестиОбласть(ДокументРезультат, ОбластьНачисления);
		
	ИначеЕсли Не СтруктураНастроек.ДвусторонняяПечатьВыводитьОтступ Тогда
		
		// Двусторонняя печать без отступа.
		
		// Вывод таблицы начислений на лицевой стороне (с возможным переносом на 2-ю страницу).
		ВывестиОбласть(ДокументРезультат, ОбластьНачисления);
		
	ИначеЕсли ДокументРезультат.ПроверитьВывод(ОбластьНачисления) Тогда
		
		// Таблица начислений целиком умещается на лицевой странице.
		ВывестиОбласть(ДокументРезультат, ОбластьНачисления);
		
	ИначеЕсли ОбластьНачисления.ВысотаТаблицы - (ВысотаШапки + ВысотаПодвала) < 0 Тогда
		
		// Таблица начислений не умещается на лицевой странице.
		
		// Выводим таблицу начислений целиком с другой стороны.
		// В таблице начислений меньше 2-х строк (с учетом того, что одна строка относится к шапке и одна к подвалу).
		ПеренестиВыводНаОбротнуюСторону(ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны);
		ВывестиОбласть(ДокументРезультат, ОбластьНачисления);
		
	Иначе
		
		// Выводим умещающуюся часть таблицы начислений на лицевой стороне, а остаток на оборотной стороне.
		
		// 1. Выводим шапку таблицы начислений.
		ОбластьШапкаТаблицыНачислений = ОбластьНачисления.ПолучитьОбласть("R" + 1 + ":R" + ВысотаШапки);
		
		Если ДокументРезультат.ПроверитьВывод(ОбластьШапкаТаблицыНачислений) Тогда
			
			// Если шапка умещается на лицевой стороне, то выводим её.
			ВывестиОбласть(ДокументРезультат, ОбластьШапкаТаблицыНачислений);
			
		Иначе
			
			// Если шапка не умещается на лицевой стороне,
			// то разрываем страницу и переходим на оборотную сторону.
			ПеренестиВыводНаОбротнуюСторону(ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны);
			
			// После вывода "закрашенной" области извещения выводим таблицу начислений целиком.
			ВывестиОбласть(ДокументРезультат, ОбластьНачисления);
			
			Возврат;
			
		КонецЕсли;
		
		// 2. Выводим тело таблицы начислений.
		ПодвалВыведен = Ложь;
		
		// Количество строк таблицы начислений с первой до начала подвала (с учётом последней строки начислений).
		ВысотаТелаТаблицыНачислений = ОбластьНачисления.ВысотаТаблицы - (ВысотаПодвала + 1);
		
		// Производим построчную проверку тела таблицы начислений с выводом.
		Для НомерСтроки = 1 + ВысотаШапки По ВысотаТелаТаблицыНачислений Цикл
			
			ОбластьСтрокаТаблицыНачислений = ОбластьНачисления.ПолучитьОбласть("R" + НомерСтроки);
			
			Если ДокументРезультат.ПроверитьВывод(ОбластьСтрокаТаблицыНачислений) Тогда
				
				// Если текущая строка умещается на лицевой стороне, то выводим её.
				ВывестиОбласть(ДокументРезультат, ОбластьСтрокаТаблицыНачислений);
				
			Иначе
				
				// Если текущая строка не умещается на лицевой стороне,
				// то разрываем страницу и переходим на оборотную сторону.
				ПеренестиВыводНаОбротнуюСторону(ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны);
				
				// после вывода "закрашенной" области извещения выводим остаток таблицы начислений.
				ОбластьОстатокТаблицыНачислений = ОбластьНачисления.ПолучитьОбласть("R" + НомерСтроки + ":R" + ОбластьНачисления.ВысотаТаблицы);
				ВывестиОбласть(ДокументРезультат, ОбластьОстатокТаблицыНачислений);
				
				ПодвалВыведен = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПодвалВыведен Тогда
			
			// 3 . Выводим подвал таблицы начислений, чтобы не утруждать себя метафизикой её разметки.
			ОбластьПодвалТаблицыНачислений = ОбластьНачисления.ПолучитьОбласть("R" + (ОбластьНачисления.ВысотаТаблицы - ВысотаПодвала) + ":R" + ОбластьНачисления.ВысотаТаблицы);
			
			Если ДокументРезультат.ПроверитьВывод(ОбластьПодвалТаблицыНачислений) Тогда
				
				// Если подвал умещается на лицевой стороне, то выводим его.
				ВывестиОбласть(ДокументРезультат, ОбластьПодвалТаблицыНачислений);
				
			Иначе
				
				// Если подвал не умещается на лицевой стороне,
				// то разрываем страницу и переходим на оборотную сторону.
				ПеренестиВыводНаОбротнуюСторону(ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны);
				
				// после вывода "закрашенной" области извещения выводим подвал таблицы начислений.
				ВывестиОбласть(ДокументРезультат, ОбластьПодвалТаблицыНачислений);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиТаблицуНачисленийСПроверкой()

// Выводим область в табличный документ с предварительной проверкой. Проверяем помещаются ли области с дополнительной 
// информации на лицевую (нечетную) сторону листа с платежным документом.  Если помещаются, то области с дополнительной 
// информации выводим на лицевой (нечетной) стороне и добавляем вывод пустой оборотной (четной) стороны. В противном 
// случае, область с дополнительной информацией выводим на оборотной стороне с отступом от верхнего края,
// равным суммарной высоте областей "Извещения" и "Корешка с показаниями ИПУ" (если установлен флаг "ПечататьОтрывнойКорешок").
//
// Параметры:
//  СтруктураНастроек                     - Структура         - структура с настройками формирования квитанций.
//  ДокументРезультат                     - ТабличныйДокумент - результирующий документ текущей квитанции.
//  ОбластьИзвещениеДляОборотнойСтороны   - ТабличныйДокумент - масштабная область извещения.
//  ОбластьДопСведения                    - ТабличныйДокумент - область квитанции.
//  ЛицевойСчет                           - Строка            - наименование текщего лицевого счета.
//
Процедура ВывестиОбластьДопСведенияСПроверкой(СтруктураНастроек, ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны, ОбластьДопСведения, ЛицевойСчет)
	
	Если Не СтруктураНастроек.ДвусторонняяПечать Тогда
		
		// Обычный вывод без двусторонней печати.
		
		ВывестиОбласть(ДокументРезультат, ОбластьДопСведения);
		
	ИначеЕсли Не СтруктураНастроек.ДвусторонняяПечатьВыводитьОтступ Тогда
		
		// Двусторонняя печать без отступа.
		
		ВывестиОбласть(ДокументРезультат, ОбластьДопСведения);
		
		// Пустая оборотная (четная) страница.
		ВыводПустойСтраницы(ДокументРезультат);
		
	Иначе
		
		// Двусторонняя печать с отступом.
		
		Если ДокументРезультат.ПроверитьВывод(ОбластьДопСведения) Тогда
			
			// Вывод доп.областей умещается на лицевой стороне.
			
			ВывестиОбласть(ДокументРезультат, ОбластьДопСведения);
			
			// Пустая оборотная (четная) страница.
			ВыводПустойСтраницы(ДокументРезультат);
			
		Иначе
			
			ПеренестиВыводНаОбротнуюСторону(ДокументРезультат, ОбластьИзвещениеДляОборотнойСтороны);
			
			// Выводим область доп.сведений.
			ВывестиОбласть(ДокументРезультат, ОбластьДопСведения);
			
			Если ДокументРезультат.КоличествоСтраниц() > 2 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("При двусторонней печати на лицевой счет """ + ЛицевойСчет + """ был произведен перенос на третью страницу!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВывестиОбластьДопСведенияСПроверкой()

// Производит вывод пустой страницы.
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - текущая квитанция.
//
Процедура ВыводПустойСтраницы(ДокументРезультат)
	
	// Дополнительная проверка: количество страниц должно быть не более двух для соблюдения четности.
	Если ДокументРезультат.КоличествоСтраниц() < 2 Тогда
		
		// Разрыв страницы, переходим на новую страницу.
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Вывод пустой страницы.
		ПустаяСтраница = Новый ТабличныйДокумент;
		ПустаяСтраница.Область("R1C1").Текст = "Пустая оборотная страница";
		
		ОчиститьОбластиЯчеекТабличногоДокумента(ПустаяСтраница);
		
		ВывестиОбласть(ДокументРезультат, ПустаяСтраница, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ВыводПустойСтраницы()

#КонецОбласти

#Область ОтрывнойКорешок

////////////////////////////////////////////////////////////////////////////////
// ОТРЫВНОЙ КОРЕШОК.

// Возвращает область отрывного корешка, предназаначенного для вывода в верху или внизу квитанции, в зависимости от настроек.
//
// Параметры:
//  Макет             - ТабличныйДокумент - макет текущего вида квитанции ПД.
//  СтруктураНастроек - Структура         - структура с настройками формирования квитанций.
//  ОбщиеДанные       - Структура         - сведения о лицевом счете.
//  ТаблицаИПУ        - ТаблицаЗначений   - сведения о ИПУ.
//
// Возвращаемое значение:
//  ТабличныйДокумент - область отрывного корешка.
//
Функция ПолучитьОбластьОтрывногоКорешка(Макет, СтруктураНастроек, ОбщиеДанные, Знач ТаблицаИПУ)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Отрывной корешок печатаем, если установлена соответствующая настройка.
	// В квитанция кап. ремонта корешок не печатаем.

	НайденныеСтроки  = ТаблицаИПУ.НайтиСтроки(Новый Структура("Отключен", Ложь));
	ТаблицаСчетчиков = ТаблицаИПУ.Скопировать(НайденныеСтроки);
	
	ОбластьЛинияОтрыва     = ПолучитьОбласть(Макет, "ЛинияОтрыва", СтруктураНастроек, ОбщиеДанные);
	ОбластьОтрывнойКорешок = ПолучитьОтрывнойКорешок(Макет, ОбщиеДанные, СтруктураНастроек, ТаблицаСчетчиков);
	
	// Выводим по необходимости отрывной корешок в внизу или вверху квитанции.
	Если СтруктураНастроек.ПечататьОтрывнойКорешокВнизу Тогда
		ВывестиОбласть(ТабличныйДокумент, ОбластьЛинияОтрыва, Истина);
		ВывестиОбласть(ТабличныйДокумент, ОбластьОтрывнойКорешок, Истина);
	Иначе
		ВывестиОбласть(ТабличныйДокумент, ОбластьОтрывнойКорешок, Истина);
		ВывестиОбласть(ТабличныйДокумент, ОбластьЛинияОтрыва, Истина);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьОбластьОтрывногоКорешка()

#КонецОбласти

#Область Механизм_формирования_штрихкодов

// Формирует штрихкоды в табличном документе.
//
// Параметры:
//  ТабличныйДокумент - Табличный документ - область текущего ПД.
//  СтруктураНастроек - Структура          - структура с настройками формирования квитанций.
//  ОбщиеДанные       - Структура          - сведения о лицевом счете.
//
Процедура СформироватьШтрихкоды(ТабличныйДокумент, СтруктураНастроекВходящая, ОбщиеДанныеВходящие, СтрокаПоставщика = Неопределено)
	
	// Двоичные данные картинок одномерного и двумерного штрихкода из библиотеки картинок.
	ДвоичныеДанныеОдномерногоШтрихКода = БиблиотекаКартинок.УПЖКХ_ШтрихКод.ПолучитьДвоичныеДанные();
	ДвоичныеДанныеQRКода               = БиблиотекаКартинок.УПЖКХ_QRкод.ПолучитьДвоичныеДанные();
	
	ВидШтрихкодаОдномерный = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный");
	ВидШтрихкодаQR         = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.QR");
	
	СтруктураНастроек = Неопределено;
	ОбщиеДанные       = Неопределено;
	
	ВидМакета                               = СтруктураНастроекВходящая.ВидМакета;
	ВыводитьШК                              = СтруктураНастроекВходящая.ВыводитьШК;
	КартинкаОдномерногоШК_Кэш               = Неопределено;
	ТекстШК_Кэш                             = "";
	КартинкаОдномерногоШККапРемонт_Кэш      = Неопределено;
	ТекстШККапРемонт_Кэш                    = "";
	КартинкаОдномерногоШКБезСтрахования_Кэш = Неопределено;
	ТекстШКБезСтрахования_Кэш               = "";
	КартинкаОдномерногоШКСоСтрахованием_Кэш = Неопределено;
	ТекстШКСоСтрахованием_Кэш               = "";
	КартинкаQRШК_Кэш                        = Неопределено;
	ТекстQRШК_Кэш                           = "";
	КартинкаQRШККапРемонт_Кэш               = Неопределено;
	ТекстQRШККапРемонт_Кэш                  = "";
	КартинкаQRШКБезСтрахования_Кэш          = Неопределено;
	ТекстQRШКБезСтрахования_Кэш             = "";
	КартинкаQRШКСоСтрахованием_Кэш          = Неопределено;
	ТекстQRШКСоСтрахованием_Кэш             = "";
	КартинкаQRДляСитикард_Кэш               = Неопределено;
	ТекстQRДляСитикард_Кэш                  = "";
	КартинкаQRДляСитикардКапРемонт_Кэш      = Неопределено;
	ТекстQRДляСитикардКапРемонт_Кэш         = "";
	ВидШтрихкода                            = Неопределено;
	ВыводитьСообщениеПоЛицевомуСчету        = Истина;
	мУдаляемыеРисункиШтрихкода              = Новый Массив;
	КвитанцияНаКР                           = ОбщиеДанныеВходящие.КвитанцияНаКР;
	
	// Перебор всех рисунков, содержащихся в табличном документе с платежкой.
	Для Каждого ТекущийШК Из ТабличныйДокумент.Рисунки Цикл
		
		КартинкаШКДляВывода = Неопределено;
		
		Если ТекущийШК.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка Тогда
			
			ДвоичныеДанныеТекущейКартинки = ТекущийШК.Картинка.ПолучитьДвоичныеДанные();
			ТекстШК                       = "";
			
			КартинкаЯвляетсяQRКодом    = ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеQRКода;
			КартинкаЯвляетсяШтрихкодом = ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеОдномерногоШтрихКода;
			
			Если (СтруктураНастроек = Неопределено ИЛИ ОбщиеДанные = Неопределено) И (КартинкаЯвляетсяQRКодом ИЛИ КартинкаЯвляетсяШтрихкодом) Тогда
				Если СтрокаПоставщика = Неопределено Тогда
					СтруктураНастроек = СтруктураНастроекВходящая;
					ОбщиеДанные       = ОбщиеДанныеВходящие;
				Иначе
					ДанныеДляПодготовкиШтрихкода = УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьДанныеДляФормированияШтрихкодаПоСтрокеПоставщика(СтруктураНастроекВходящая, ОбщиеДанныеВходящие, СтрокаПоставщика);
					
					СтруктураНастроек = ДанныеДляПодготовкиШтрихкода.СтруктураНастроек;
					ОбщиеДанные       = ДанныеДляПодготовкиШтрихкода.ОбщиеДанные;
				КонецЕсли;
			КонецЕсли;
			
			Если ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеQRКода И СтруктураНастроек.КомпонентаQRКодаПодключена Тогда // Картинка QR-штрихкода.
				
				// Сохраняем текущий вид штрихкода для того, чтобы если не удалось сформировать штрихкод,
				// то в сообщении об ошибке указать штрихкод с каким видом не удалось сформировать.
				ВидШтрихкода = ВидШтрихкодаQR;
				
				// Ситикард.
				Если Найти(ТекущийШК.Имя, "QRОнлайн") > 0 Тогда
					
					Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
						
						// Для формы "Плат. документ (приказ №924/пр)" обрабатываем условия отдельно,
						// так как в форме выводится QR-штрихкод и для основных услуг и лдя услуг капитального ремонта.
						
						Если Найти(ТекущийШК.Имя, "_КР") > 0 И ОбщиеДанные.ОбщиеДанныеПоКР.ВыводитьQRштрихкодДляСитикард Тогда
							
							ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRДляСитикардКапРемонт_Кэш, ТекстQRДляСитикардКапРемонт_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																	  ОбщиеДанные.ОбщиеДанныеПоКР, Истина, ВыводитьСообщениеПоЛицевомуСчету, , Истина);
							
							КартинкаШКДляВывода = КартинкаQRДляСитикардКапРемонт_Кэш;
							ТекстШК             = ТекстQRДляСитикардКапРемонт_Кэш;
							
						ИначеЕсли Найти(ТекущийШК.Имя, "_Осн") > 0 И ОбщиеДанные.ОбщиеДанныеНеКР.ВыводитьQRштрихкодДляСитикард Тогда
							
							ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRДляСитикард_Кэш, ТекстQRДляСитикард_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																	  ОбщиеДанные.ОбщиеДанныеНеКР, Ложь, ВыводитьСообщениеПоЛицевомуСчету, , Истина);
							
							КартинкаШКДляВывода = КартинкаQRДляСитикард_Кэш;
							ТекстШК             = ТекстQRДляСитикард_Кэш;
							
						КонецЕсли;
						
					Иначе
						
						ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRДляСитикард_Кэш, ТекстQRДляСитикард_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																  ОбщиеДанные, КвитанцияНаКР, ВыводитьСообщениеПоЛицевомуСчету, , Истина);
						
						КартинкаШКДляВывода = КартинкаQRДляСитикард_Кэш;
						ТекстШК             = ТекстQRДляСитикард_Кэш;
						
					КонецЕсли;
					
				ИначеЕсли ВыводитьШК Тогда
					
					// Получатель платежа.
					Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр
					   И Найти(ТекущийШК.Имя, "ПолучательПлатежа") = 0 Тогда
						
						// Формирование QR-ШК в случае, если учет начислений по добровольному страхованию не ведется.
						ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШК_Кэш, ТекстQRШК_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																  ОбщиеДанные, КвитанцияНаКР, ВыводитьСообщениеПоЛицевомуСчету);
						
						КартинкаШКДляВывода = КартинкаQRШК_Кэш;
						ТекстШК             = ТекстQRШК_Кэш;
						
					Иначе
						
						// Без страхования.
						Если Найти(ТекущийШК.Имя, "QRШКБезСтрахования") > 0 Тогда
							
							// Формирование QR-ШК без учета добровольного страхования в случае, если ведется учет начислений по добровольному страхованию.
							Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
								ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШКБезСтрахования_Кэш, ТекстQRШКБезСтрахования_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																		  ОбщиеДанные.ОбщиеДанныеНеКР, КвитанцияНаКР, ВыводитьСообщениеПоЛицевомуСчету);
							Иначе
								ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШКБезСтрахования_Кэш, ТекстQRШКБезСтрахования_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																		  ОбщиеДанные, КвитанцияНаКР, ВыводитьСообщениеПоЛицевомуСчету);
							КонецЕсли;
							
							КартинкаШКДляВывода = КартинкаQRШКБезСтрахования_Кэш;
							ТекстШК             = ТекстQRШКБезСтрахования_Кэш;
							
						// Со страхованием.
						ИначеЕсли Найти(ТекущийШК.Имя, "QRШКСоСтрахованием") > 0 Тогда
							
							// Формирование QR-ШК с учетом добровольного страхования в случае, если ведется учет начислений по добровольному страхованию.
							Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
								ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШКСоСтрахованием_Кэш, ТекстQRШКСоСтрахованием_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																		  ОбщиеДанные.ОбщиеДанныеНеКР, КвитанцияНаКР, ВыводитьСообщениеПоЛицевомуСчету, Истина);
							Иначе
								ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШКСоСтрахованием_Кэш, ТекстQRШКСоСтрахованием_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																		  ОбщиеДанные, КвитанцияНаКР, ВыводитьСообщениеПоЛицевомуСчету, Истина);
							КонецЕсли;
							
							КартинкаШКДляВывода = КартинкаQRШКСоСтрахованием_Кэш;
							ТекстШК             = ТекстQRШКСоСтрахованием_Кэш;
							
						// Кап. ремонт.
						ИначеЕсли Найти(ТекущийШК.Имя, "_КР") > 0 Тогда
							
							//  Формирование QR-ШК по услугам кап. ремонта для формы "Плат. документ (приказ №924/пр)".
							ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШККапРемонт_Кэш, ТекстQRШККапРемонт_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																	  ОбщиеДанные.ОбщиеДанныеПоКР, Истина, ВыводитьСообщениеПоЛицевомуСчету);
							
							КартинкаШКДляВывода = КартинкаQRШККапРемонт_Кэш;
							ТекстШК             = ТекстQRШККапРемонт_Кэш;
							
						// Основные услуги.
						ИначеЕсли Найти(ТекущийШК.Имя, "_Осн") > 0 Тогда
							
							//  Формирование QR-ШК по основным услугам для формы "Плат. документ (приказ №924/пр)".
							ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШК_Кэш, ТекстQRШК_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																	  ОбщиеДанные.ОбщиеДанныеНеКР, Ложь, ВыводитьСообщениеПоЛицевомуСчету);
							
							КартинкаШКДляВывода = КартинкаQRШК_Кэш;
							ТекстШК             = ТекстQRШК_Кэш;
							
						// Основные услуги по умолчанию.
						Иначе
							
							// Формирование QR-ШК в случае, если учет начислений по добровольному страхованию не ведется.
							ПолучитьДанныеДляФормированияТекущегоQRШК(КартинкаQRШК_Кэш, ТекстQRШК_Кэш, ВидШтрихкодаQR, СтруктураНастроек,
																	  ОбщиеДанные, КвитанцияНаКР, ВыводитьСообщениеПоЛицевомуСчету);
							
							КартинкаШКДляВывода = КартинкаQRШК_Кэш;
							ТекстШК             = ТекстQRШК_Кэш;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				УстановитьРасшифровкуОбластиШК(ТекущийШК, ТекстШК);
				
			ИначеЕсли ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеОдномерногоШтрихКода И СтруктураНастроек.КомпонентаШКПодключена Тогда // Картинка одномерного штрихкода.
				
				// Сохраняем текущий вид штрихкода для того, чтобы если не удалось сформировать штрихкод,
				// то в сообщении об ошибке указать штрихкод с каким видом не удалось сформировать.
				ВидШтрихкода = ВидШтрихкодаОдномерный;
				
				Если ВыводитьШК Тогда
					
					Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр
					   И Найти(ТекущийШК.Имя, "ПолучательПлатежа") = 0 Тогда
						
						ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШК_Кэш, ТекстШК_Кэш, ВидШтрихкодаОдномерный, 
																		  СтруктураНастроек, КвитанцияНаКР, ОбщиеДанные, ВыводитьСообщениеПоЛицевомуСчету);
						
						КартинкаШКДляВывода = КартинкаОдномерногоШК_Кэш;
						ТекстШК             = ТекстШК_Кэш;
						
					Иначе
						
						Если Найти(ТекущийШК.Имя, "ШтрихКодБезСтрахования") > 0 Тогда
							
							Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
								ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШКБезСтрахования_Кэш, ТекстШКБезСтрахования_Кэш, ВидШтрихкодаОдномерный, 
																					  СтруктураНастроек, КвитанцияНаКР, ОбщиеДанные.ОбщиеДанныеНеКР, ВыводитьСообщениеПоЛицевомуСчету);
							Иначе
								ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШКБезСтрахования_Кэш, ТекстШКБезСтрахования_Кэш, ВидШтрихкодаОдномерный, 
																				  СтруктураНастроек, КвитанцияНаКР, ОбщиеДанные, ВыводитьСообщениеПоЛицевомуСчету);
							КонецЕсли;
							
							КартинкаШКДляВывода = КартинкаОдномерногоШКБезСтрахования_Кэш;
							ТекстШК             = ТекстШКБезСтрахования_Кэш;
							
						ИначеЕсли Найти(ТекущийШК.Имя, "ШтрихКодСоСтрахованием") > 0 Тогда
							
							Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
								ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШКСоСтрахованием_Кэш, ТекстШКСоСтрахованием_Кэш, ВидШтрихкодаОдномерный, 
																				  СтруктураНастроек, КвитанцияНаКР, ОбщиеДанные.ОбщиеДанныеНеКР, ВыводитьСообщениеПоЛицевомуСчету, Истина);
							Иначе
								ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШКСоСтрахованием_Кэш, ТекстШКСоСтрахованием_Кэш, ВидШтрихкодаОдномерный, 
																				  СтруктураНастроек, КвитанцияНаКР, ОбщиеДанные, ВыводитьСообщениеПоЛицевомуСчету, Истина);
							КонецЕсли;
							
							КартинкаШКДляВывода   = КартинкаОдномерногоШКСоСтрахованием_Кэш;
							ТекстШК               = ТекстШКСоСтрахованием_Кэш;
							
						ИначеЕсли Найти(ТекущийШК.Имя, "_КР") > 0 Тогда
							
							ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШККапРемонт_Кэш, ТекстШККапРемонт_Кэш, ВидШтрихкодаОдномерный, 
																			  СтруктураНастроек, Истина, ОбщиеДанные.ОбщиеДанныеПоКР, ВыводитьСообщениеПоЛицевомуСчету);
							
							КартинкаШКДляВывода = КартинкаОдномерногоШККапРемонт_Кэш;
							ТекстШК             = ТекстШККапРемонт_Кэш;
							
						ИначеЕсли Найти(ТекущийШК.Имя, "_Осн") > 0 Тогда
							
							ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШК_Кэш, ТекстШК_Кэш, ВидШтрихкодаОдномерный, 
																			  СтруктураНастроек, Ложь, ОбщиеДанные.ОбщиеДанныеНеКР, ВыводитьСообщениеПоЛицевомуСчету);
							
							КартинкаШКДляВывода = КартинкаОдномерногоШК_Кэш;
							ТекстШК             = ТекстШК_Кэш;
							
						Иначе
							
							ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КартинкаОдномерногоШК_Кэш, ТекстШК_Кэш, ВидШтрихкодаОдномерный, 
																			  СтруктураНастроек, КвитанцияНаКР, ОбщиеДанные, ВыводитьСообщениеПоЛицевомуСчету);
							
							КартинкаШКДляВывода = КартинкаОдномерногоШК_Кэш;
							ТекстШК             = ТекстШК_Кэш;
							
						КонецЕсли;
						
					КонецЕсли;
					
					УстановитьРасшифровкуОбластиШК(ТекущийШК, ТекстШК);
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// Очищаем вид и картинку со штрихкода, если текущий рисунок не является картинкой.
			// Необходимо для того, чтобы корректно вывести сообщение об ошибке формирования штрихкода.
			ВидШтрихкода = Неопределено;
		КонецЕсли;
		
		Если ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеQRКода
		 ИЛИ ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеОдномерногоШтрихКода Тогда
			
			Если ВыводитьСообщениеПоЛицевомуСчету И КартинкаШКДляВывода = Неопределено Тогда
				Если ВидШтрихкода = ВидШтрихкодаОдномерный Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать одномерный штрихкод для лицевого счета """ + Строка(ОбщиеДанные.ЛицевойСчет) + """.");
				ИначеЕсли ВидШтрихкода = ВидШтрихкодаQR Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать QR-код для лицевого счета """ + Строка(ОбщиеДанные.ЛицевойСчет) + """.");
				КонецЕсли;
			ИначеЕсли КартинкаШКДляВывода <> Неопределено Тогда
				ТекущийШК.Картинка = КартинкаШКДляВывода;
			Иначе
				мУдаляемыеРисункиШтрихкода.Добавить(ТекущийШК);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекущийШК Из мУдаляемыеРисункиШтрихкода Цикл
		ТабличныйДокумент.Рисунки.Удалить(ТекущийШК);
	КонецЦикла;
	
КонецПроцедуры // СформироватьШтрихкоды()

// Процедура вызывает механизм получения сведений о корректности настроек QR-штрихкода.
//
Процедура ПолучитьДанныеДляФормированияТекущегоQRШК(КэшКартинки, КэшТекста, ВидШтрихкодаQR, СтруктураНастроек, ОбщиеДанные, КвитанцияНаКР,
													ВыводитьСообщениеПоЛицевомуСчету = Истина, УчитыватьДобровольноеСтрахование = Ложь, ЭтоQRДляСитикард = Ложь)
	
	// Проверяем, создана ли ранее картинка с QR-кодом.
	Если КэшКартинки = Неопределено Тогда
		
		Если УПЖКХ_ПечатьКвитанцийСервер.ПроверитьНастройкиДляQRШК(ВидШтрихкодаQR, СтруктураНастроек, КвитанцияНаКР, ЭтоQRДляСитикард) Тогда
			
			Если ЭтоQRДляСитикард Тогда
				КэшТекста = УПЖКХ_ПечатьКвитанцийСервер.СформироватьТекстQRШтрихкодаДляСитикард(ОбщиеДанные, СтруктураНастроек);
			Иначе
				КэшТекста = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтрокуQRШтрихкода(ОбщиеДанные.ЛицевойСчет, СтруктураНастроек, ОбщиеДанные, УчитыватьДобровольноеСтрахование);
			КонецЕсли;
			
			ДвоичныеДанныеКартинки = УПЖКХ_ПечатьКвитанцийСервер.ДанныеQRКода(КэшТекста, 1, 190);
			КэшКартинки            = Новый Картинка(ДвоичныеДанныеКартинки);
		Иначе
			ВыводитьСообщениеПоЛицевомуСчету = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает механизм получения сведений о корректности настроек одномерного ШК.
//
Процедура ПолучитьДанныеДляФормированияТекущегОдномерногоШК(КэшКартинки, КэшТекста, ВидШтрихкодаОдномерный, СтруктураНастроек, КвитанцияНаКР,
															ОбщиеДанные, ВыводитьСообщениеПоЛицевомуСчету, УчитыватьДобровольноеСтрахование = Ложь)
	
	Если КэшКартинки = Неопределено Тогда
		
		Если УПЖКХ_ПечатьКвитанцийСервер.ПроверитьНастройкиДляОдномерногоШК(ВидШтрихкодаОдномерный, СтруктураНастроек, КвитанцияНаКР) Тогда
			КэшКартинки = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьШтрихКод(ОбщиеДанные.ЛицевойСчет, ОбщиеДанные, СтруктураНастроек, КэшТекста, Ложь, УчитыватьДобровольноеСтрахование);
		Иначе
			ВыводитьСообщениеПоЛицевомуСчету = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает расшифровку области табличного документа.
//
// Параметры:
//  Область	 - Табличный документ - область картинки табличного документа.
//  ТекстШК	 - Строка             - значение расшифровки.
//
Процедура УстановитьРасшифровкуОбластиШК(Область, ТекстШК)
	
	Область.Расшифровка = Новый Структура("ТекстШК", ТекстШК);
	
КонецПроцедуры // УстановитьРасшифровкуОбластиШК()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// МНОГОПОТОЧНАЯ ОБРАБОТКА ДАННЫХ

#Область МногопоточныйОбменДанными

// Подготавливает структуру настроек для текущего потока.
//
Процедура ПодготовитьСтруктуруНастроекДляТекущегоПотока(СтруктураНастроек, ОбщаяСтруктураНастроек, ИндексНачальногоЛицевогоСчета, КоличествоЛСДляОтбора)
	
	СтруктураНастроек = УПЖКХ_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуруЗаполнениемЗначений(ОбщаяСтруктураНастроек, "ТаблицаОбъектов");
	
	ТаблицаОбъектовОбщая   = ОбщаяСтруктураНастроек.ТаблицаОбъектов;
	ТаблицаОбъектовТекущая = СтруктураНастроек.ТаблицаОбъектов;
	
	ТаблицаОбъектовТекущая.Очистить();
	
	// Отбираем л/с для текущего потока.
	Для ИндексТекущегоЛС = ИндексНачальногоЛицевогоСчета по ИндексНачальногоЛицевогоСчета + КоличествоЛСДляОтбора - 1 Цикл
		
		ТекСтрокаОбъекта = ТаблицаОбъектовОбщая[ИндексТекущегоЛС];
		
		НоваяСтрока = ТаблицаОбъектовТекущая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает массив наборов параметров для передачи в потоки сбора данных.
//
Функция ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныйДокумент(СтруктураНастроек, МассивГотовыхСтруктурДанных, КоличествоПотоков)
	
	МассивНаборовДанныхФоновыхЗаданий = Новый Массив;
	
	ОбщаяСтруктураНастроек = УПЖКХ_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуруЗаполнениемЗначений(СтруктураНастроек);
	
	ОбщаяТаблицаОбъектов = ОбщаяСтруктураНастроек.ТаблицаОбъектов;
	
	// Подготавливаем количество л/с, распределяемое на каждый поток.
	КоличествоЛСОбщее   = ОбщаяТаблицаОбъектов.Количество();
	КоличествоЛСНаПоток = Цел(КоличествоЛСОбщее / КоличествоПотоков);
	
	// Уже распределенное по потокам количество л/с.
	РаспределенноеКоличествоЛС = 0;
	
	// Подготавливаем все потоки.
	Для Сч = 1 по КоличествоПотоков Цикл
		
		// В последний поток может быть передано на 1 л/с больше,
		// если общее количество не делится нацело.
		КоличествоЛСДляПотокаТекущее = ?(Сч = КоличествоПотоков, КоличествоЛСОбщее - РаспределенноеКоличествоЛС, КоличествоЛСНаПоток);
		
		Если КоличествоЛСДляПотокаТекущее = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Подготавливаем структуру настроек для л/с, распределенных на текущий поток.
		ПодготовитьСтруктуруНастроекДляТекущегоПотока(СтруктураНастроек, ОбщаяСтруктураНастроек, РаспределенноеКоличествоЛС, КоличествоЛСДляПотокаТекущее);
		
		// Дополняем сведения о количестве распределенных л/с.
		РаспределенноеКоличествоЛС   = РаспределенноеКоличествоЛС + КоличествоЛСНаПоток;
		
		// Подготавливаем адрес во временном хранилище, куда будут сохранены результаты выполнения потока.
		АдресГотовойСтруктурыДанных = ПоместитьВоВременноеХранилище(Неопределено);
		
		// Дополняем массив табличных документов.
		МассивГотовыхСтруктурДанных.Добавить(АдресГотовойСтруктурыДанных);
		
		// Подготавливаем параметры текущего потока.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(УПЖКХ_ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуруЗаполнениемЗначений(СтруктураНастроек));
		МассивПараметров.Добавить(АдресГотовойСтруктурыДанных);
		
		МассивНаборовДанныхФоновыхЗаданий.Добавить(МассивПараметров);
		
	КонецЦикла;
	
	Возврат МассивНаборовДанныхФоновыхЗаданий;
	
КонецФункции

// Подготавливает массив наборов параметров для передачи в потоки формирования платежных документов.
//
Функция ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныйДокументФормирование(МассивГотовыхДокументов, МассивГотовыхСтруктурДанных, МассивИсхДанных = Неопределено)
	
	МассивНаборовДанныхФоновыхЗаданий = Новый Массив;
	
	Если Не МассивИсхДанных = Неопределено Тогда
		МассивИсхДанных = Новый Массив;
	КонецЕсли;
	
	Для каждого ТекСтруктураГотовыхДанных из МассивГотовыхСтруктурДанных Цикл
		
		АдресГотовогоДокумента = ПоместитьВоВременноеХранилище(Неопределено);
		
		// Дополняем массив табличных документов.
		МассивГотовыхДокументов.Добавить(АдресГотовогоДокумента);
		
		// Подготавливаем параметры текущего потока.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПолучитьИзВременногоХранилища(ТекСтруктураГотовыхДанных));
		МассивПараметров.Добавить(АдресГотовогоДокумента);
		
		Если Не МассивИсхДанных = Неопределено Тогда
			
			АдресИсхДанных = ПоместитьВоВременноеХранилище(Неопределено);
			
			МассивИсхДанных.Добавить(АдресИсхДанных);
			МассивПараметров.Добавить(АдресИсхДанных);
			
		КонецЕсли;
		
		МассивНаборовДанныхФоновыхЗаданий.Добавить(МассивПараметров);
		
	КонецЦикла;
	
	Возврат МассивНаборовДанныхФоновыхЗаданий;
	
КонецФункции

#КонецОбласти

#КонецЕсли