
&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ И ВОССТАНОВЛЕНИЯ НАСТРОЕК

#Область ПроцедурыBФункцииСохраненияИВосстановленияНастроек

&НаСервере
Процедура ИнициализацияМакета()
	
	// В случае формирования платежного документа с помощью меню "Все функции - Отчеты" или внешнего отчета через "Файл - Открыть".
	Если НЕ ЗначениеЗаполнено(ВидМакета) Тогда
		
		мНастройкиФормированияПДЖКХОтказ = Ложь;
		мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Отчет.Организация, мНастройкиФормированияПДЖКХОтказ);
		
		ВидМакета = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьВидМакетаПД(мНастройкиФормированияПДЖКХОтказ, мНастройкиФормированияПДЖКХ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Производит начальное заполнение параметров отчета.
//
Процедура ИнициализацияРеквизитов()
	
	Если Не Отчет.НеЗаполнятьНастройкиПриОткрытии Тогда
		
		СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("Отчет.УПЖКХ_ПлатежныйДокумент");
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			Если Отчет.Организация.Пустая() Тогда
				СтруктураПараметров.Свойство("Организация", Отчет.Организация);
			КонецЕсли;
			
			СтруктураПараметров.Свойство("ТипПодбораОбъектов",   Отчет.ТипПодбораОбъектов);
			СтруктураПараметров.Свойство("ПериодПросмотра",      Отчет.ПериодПросмотра);
			СтруктураПараметров.Свойство("НастройкаСбораДанных", Отчет.НастройкаСбораДанных);
			
			// Восстановление строк табличных частей.
			ТаблицаОбъектов = Новый ТаблицаЗначений;
			
			СтруктураПараметров.Свойство("ОбъектыОтчета", ТаблицаОбъектов);
			Если Отчет.ОбъектыОтчета.Количество() = 0 И ЗначениеЗаполнено(ТаблицаОбъектов) > 0 Тогда
				Отчет.ОбъектыОтчета.Загрузить(ТаблицаОбъектов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отчет.ТипПодбораОбъектов = ?(ЗначениеЗаполнено(Отчет.ТипПодбораОбъектов), Отчет.ТипПодбораОбъектов, мТипыПодбораОбъектов[0]);
	
КонецПроцедуры // ИнициализацияРеквизитов()

&НаСервере
// Заполняет ТЧ "Объекты отчета" лицевыми счета, в соответствии со значением,
// указанным "ОбъектОтчета".
//
Процедура ДобавитьЭлементСправочникаЛСВТабличнуюЧасть(ЛицевойСчет)
	
	Отчет.ОбъектыОтчета.Очистить();
	
	Если ЛицевойСчет.ЭтоГруппа Тогда
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоГруппам(ЛицевойСчет, Отчет.ПериодПросмотра);
		
		Для Каждого Элемент ИЗ СписокЛС Цикл
			НовыйОбъект        = Отчет.ОбъектыОтчета.Добавить();
			НовыйОбъект.Объект = Элемент.Значение;
		КонецЦикла;
	Иначе
		НовыйОбъект        = Отчет.ОбъектыОтчета.Добавить();
		НовыйОбъект.Объект = ЛицевойСчет;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЭлементСправочникаЛСВТабличнуюЧасть()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Процедура заполнения списков выбора настроек.
Процедура ЗаполнитьСпискиВыбораНастроек()
	
	СписокУслуг          = Новый СписокЗначений();
	
	// Заполнение список выбора настроек.
	мДействияНачСальдо.Добавить("НеВыводить",            "Не включать начальное сальдо и оплаты");
	мДействияНачСальдо.Добавить("ВключатьЗадолженность", "Включать задолженность и оплаты");
	мДействияНачСальдо.Добавить("ВключатьАванс",         "Включать аванс и оплаты");
	мДействияНачСальдо.Добавить("ВключатьНачСальдо",     "Включать задолженность, аванс и оплаты");
	
	мСпособПечатиКвитанцииКапРемонт = Новый СписокЗначений();
	мСпособПечатиКвитанцииКапРемонт.Добавить("основную квитанцию и квитанцию на кап. ремонт");
	мСпособПечатиКвитанцииКапРемонт.Добавить("только основную квитанцию");
	мСпособПечатиКвитанцииКапРемонт.Добавить("только квитанцию на кап. ремонт");
	мСпособПечатиКвитанцииКапРемонт.Добавить("единая квитанция на осн. услуги и кап. ремонт");
	
	мТипыПодбораОбъектов.Добавить("Выбор из справочника");
	мТипыПодбораОбъектов.Добавить("Подбор объектов");
	мТипыПодбораОбъектов.Добавить("Все действующие лицевые счета");
	Для Каждого ТекЭлемент Из мТипыПодбораОбъектов Цикл
		Элементы.СтрокаОбъектов.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпискиВыбораНастроек()

&НаСервере
// Загружает лицевые счета из списка значений в табличную часть "Объекты отчета".
//
// Параметры:
//  СписокЛС - СписокЗначений - список лицевых счетов.
//
Процедура ЗагрузитьЛицевыеСчетаВТабличнуюЧасть(СписокЛС)
	
	Отчет.ОбъектыОтчета.Очистить();
	
	Для Каждого Элемент ИЗ СписокЛС Цикл
		НоваяСтрока = Отчет.ОбъектыОтчета.Добавить();
		НоваяСтрока.Объект = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьЛицевыеСчетаВТабличнуюЧасть()

&НаСервере
// Обновляет представление выбранных объектов в поле ввода "Строка объектов".
//
Процедура ОбновитьСтрокуОбъектов()
	
	СтрокаОбъектов = "(" + Отчет.ТипПодбораОбъектов + ")" + ": ";
	
	Если Отчет.ОбъектыОтчета.Количество() = 0 Тогда
		СтрокаОбъектов = СтрокаОбъектов + "не выбраны";
		
	ИначеЕсли Отчет.ОбъектыОтчета.Количество() = 1 Тогда
		
		СтрокаЛицевогоСчета = Отчет.ОбъектыОтчета.Получить(0);
		ТекущийЛичевойСчет  = СтрокаЛицевогоСчета.Объект;
		СтрокаОбъектов      = СтрокаОбъектов + ТекущийЛичевойСчет.Наименование;
		
	Иначе
		
		ВсегоОбъектов = Отчет.ОбъектыОтчета.Количество();
		
		ПоследняяЦифра = Прав(Строка(ВсегоОбъектов), 1);
		
		ОбъектовОкончание  = "";
		Если ПоследняяЦифра = "2" ИЛИ ПоследняяЦифра = "3" ИЛИ ПоследняяЦифра = "4" Тогда
			ОбъектовОкончание = "а";
		ИначеЕсли НЕ ПоследняяЦифра = "1" Тогда
			ОбъектовОкончание = "ов";
		КонецЕсли;
		
		СтрокаОбъектов = СтрокаОбъектов + Отчет.ОбъектыОтчета.Количество() + " объект" + ОбъектовОкончание;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСтрокуОбъектов()

&НаСервереБезКонтекста
// Формирует список л/с по переданным группам.
//
// Параметры:
//  ГруппаЛС - СправочникСсылка.КВП_ЛицевыеСчет - группа л/с
//  НачалоМесяца - Дата - начало месяца актуальности
//  КонецМесяца - Дата - конец месяца актуальности.
//
// Возвращаемое значение:
//  СписокЗначений
//
Функция ПолучитьСписокЛС(ГруппаЛС, НачалоМесяца, КонецМесяца, НеПомеченныеНаУдаление = Ложь)
	
	Возврат КВП_ПолучитьСписокЛицевыхСчетовПоГруппам(ГруппаЛС, НачалоМесяца, КонецМесяца, , НеПомеченныеНаУдаление);
	
КонецФункции // ПолучитьСписокЛС()

&НаСервере
// Процедура получает сведения о настройках кап. ремонта по текущей организации
// и управляет текстом гиперссылки открытия настроек кап. ремонта.
Функция ОбновитьРеквизитыКапРемонта()
	
	ЗаполнитьРеквизитыОтчетаПоКапремонту();
	
	Если ТипЗнч(мСтруктураНастроекКапРемонта) = Тип("Структура")
	   И мСтруктураНастроекКапРемонта.НастройкиОпределены
	   И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		СписокУслугКР = мСтруктураНастроекКапРемонта.СписокУслуг;
		СтрокаУслугКР = "";
		Для Каждого ТекЭлемент Из СписокУслугКР Цикл
			СтрокаУслугКР = СтрокаУслугКР + ?(Не ПустаяСтрока(СтрокаУслугКР), ",", "") + """" + ТекЭлемент.Значение + """";
		КонецЦикла;
		
		Если Не ПустаяСтрока(СтрокаУслугКР) Тогда
			СтрокаУслугКР = " (" +?(СписокУслугКР.Количество() > 1, "услуги: ", "услуга: ") + СтрокаУслугКР + ")";
		КонецЕсли;
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Ведется раздельный учет по услугам капитального ремонта" + СтрокаУслугКР;
		
	Иначе
		
		Элементы.КнопкаНастройкаВеденияКР.Заголовок = "Не ведется раздельный учет по услугам капитального ремонта";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОтчетаПоКапремонту()
	
	Попытка
		
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Отчет.Организация, Истина);
		
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки учета капитального ремонта. Пожалуйста, проверьте, корректно ли заданы настройки учета капитального ремонта.", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

&НаСервере
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СБОРА ДАННЫХ

&НаСервере
// Производит сохранение параметров отчета.
//
Процедура СохранениеРеквизитов()
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Организация",          Отчет.Организация);
	СтруктураПараметров.Вставить("ТипПодбораОбъектов",   Отчет.ТипПодбораОбъектов);
	СтруктураПараметров.Вставить("ОбъектыОтчета",        Отчет.ОбъектыОтчета.Выгрузить());
	СтруктураПараметров.Вставить("НастройкаСбораДанных", Отчет.НастройкаСбораДанных);
	СтруктураПараметров.Вставить("ПериодПросмотра",      Отчет.ПериодПросмотра);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("Отчет.УПЖКХ_ПлатежныйДокумент",,
																	СтруктураПараметров);
	
КонецПроцедуры // СохранениеРеквизитов()

&НаСервере
// Управляет видимостью элементов формы.
Процедура УправлениеФормой()
	
	Если НЕ мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет
	   И ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст      = "Форма платежного документа ""Плат. документ (приказ №924/пр)"" предназначена для вывода сведений по основным услугам "
							 + "и услугам капитального ремонта, но настройка ведения раздельного учета не задана!
							   |Нажмите на сообщение для перехода к ""Настройкам учета по услугам капитального ремонта"".";
		Сообщение.КлючДанных = мСтруктураНастроекКапРемонта.НастройкиУчетаКапремонтаСсылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Управляет видимостью элементов формы.
//
Процедура УправлениеВидимостью()
	
	// Показываем кнопку сравнения пользовательского макета с типовым, если таковой используется.
	УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
	
	// Если база серверная и многопоточность не используется, показываем гиперссылку.
	Если УПЖКХ_МногопоточнаяОбработкаДанных.ПоказыватьСсылкиНаСтраницуНастроекМногопоточности() Тогда
		
		Если УПЖКХ_МногопоточнаяОбработкаДанных.ПроверитьВключенаЛиМногопоточнаяОбработкаДанных() Тогда
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "При формировании платежных документов используется многопоточная обработка данных. Нажмите, чтобы перейти к настройке многопоточности";
		Иначе
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "Платежные документы могут формироваться быстрее при использовании многопоточной обработки данных. Нажмите, чтобы перейти к настройке многопоточности";
		КонецЕсли;
		
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Истина;
		
	Иначе
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Ложь
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Показываем кнопку сравнения пользовательского макета с типовым, если таковой используется.
Процедура УстановитьВидимостьКнопкиСравнитьМакетСТиповым()
	
	Элементы.СравнитьМакетСТиповым.Видимость = ОпределитьИспользованиеПользовательскогоМакетаПечати();
	
КонецПроцедуры

&НаСервере
// Определяет, используется ли для текущей формы квитанции пользовательский макет печати.
//
Функция ОпределитьИспользованиеПользовательскогоМакетаПечати()
	
	НаименованиеОбъекта = "Отчет.УПЖКХ_ПлатежныйДокумент";
	НаименованиеМакета  = ОпределитьНаименованиеТекущегоМакетаПлатежногоДокумента(ВидМакета);
	
	Возврат УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати(НаименованиеОбъекта, НаименованиеМакета);
	
КонецФункции

&НаСервере
// Определяет наименование макета текущей формы квитанции.
//
Функция ОпределитьНаименованиеТекущегоМакетаПлатежногоДокумента(ВидМакета)
	
	НаименованиеМакета = "ПФ_MXL_МакетСтандартный";
	
	НайденныйМакет = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ВидМакета);
	
	Если ЗначениеЗаполнено(НайденныйМакет) Тогда
		НаименованиеМакета = НайденныйМакет;
	КонецЕсли;
	
	Возврат НаименованиеМакета;
	
КонецФункции

&НаКлиенте
// Открывает форму квитанции.
//
Процедура УстановитьКвитанциюПоВиду(Отказ)
	
	// Устанавливать квитанцию по виду нужно только при открытии форм квитанций, встроенных в конфигурацию.
	// Для внешних квитанций переход выполнять не нужно, так как это приведет к циклическому перезапуску
	// внешней квитанции.
	Если СтрНачинаетсяС(ЭтотОбъект.ИмяФормы, "Отчет.") Тогда
		
		// Перечисление.
		Если ТипЗнч(ВидМакета) = Тип("ПеречислениеСсылка.УПЖКХ_ВидыПлатежныхДокументов") Тогда
			
			УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
			УстановитьПараметрыПечатиНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			УстановитьДополнительныеНастройкиДляРежимаОтладки();
			
			Отказ = Ложь;
			
		// Из отчета "КвитанцииИзвещения".
		ИначеЕсли ТипЗнч(ВидМакета) = Тип("Строка") Тогда
			
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("ВидМакета", ВидМакета);
			ПараметрыОтчета.Вставить("Организация", Отчет.Организация);
			ОткрытьФорму("Отчет.УПЖКХ_КвитанцииИзвещения.Форма.Форма_" + ВидМакета, ПараметрыОтчета);
			
			Отказ = Истина;
			
		// Дополнительный отчет.
		ИначеЕсли ТипЗнч(ВидМакета) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			
			ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВидМакета);
			ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма",, ЭтаФорма);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ВидМакета", ВидМакета);
	
	Параметры.Свойство("СформироватьКвитанциюПриОткрытии", СформироватьКвитанциюПриОткрытии);
	
	// Скрывает кнопку "СменитьКвитанцию" если был передан параметр ЗапретитьИзменятьКвитанцию.
	Если Параметры.Свойство("ЗапретитьИзменятьКвитанцию") И Параметры.ЗапретитьИзменятьКвитанцию Тогда
		Элементы.СменитьКвитанцию.Видимость = Ложь;
	КонецЕсли;
	
	// Устанавливаем организацию из параметров формы, если при смене организации открывается её основная квитанция.
	Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
		Отчет.Организация = Параметры.Организация;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаОсновнаяКоманднаяПанель, Элементы.ГруппаШапкаГиперссылкиСправа);
	// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаОсновнаяКоманднаяПанель);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
	Попытка
		
		ЗаполнитьСпискиВыбораНастроек();
		
		СкорректироватьПорядокУслуг();
		
		ИнициализацияРеквизитов();
		
		УстановитьДополнительныеНастройкиДляРежимаОтладки();
		
		// Если открываем ПД из формы списка справочника "Лицевые счета".
		Если Параметры.Свойство("ОбъектОтчета") И ЗначениеЗаполнено(Параметры.ОбъектОтчета) Тогда
			ДобавитьЭлементСправочникаЛСВТабличнуюЧасть(Параметры.ОбъектОтчета);
		КонецЕсли;
		
		ОбновитьРеквизитыКапРемонта();
		
		УправлениеФормой();
		
		СписокФормКвитанций = УПЖКХ_ПечатьКвитанцийСервер.СформироватьСписокФормКвитанции();
		
		// Зададим заголовок ссылки на сайт интернет-портала.
		Элементы.СсылкаНаСайт.Заголовок = "Подробнее можно узнать на сайте: " + КВП_ПрочиеПроцедурыИФункции.АдресСайтаИнтернетПортала();
		
		// Сохраняем текущее значение реквизита "Организация", для того, чтобы его можно было
		// вернуть после установки настроек по умолчанию.
		ОрганизацияДляИспользованияСохраненныхНастроек = Отчет.Организация;
		
		УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
		
		Если НЕ ОрганизацияДляИспользованияСохраненныхНастроек = Справочники.Организации.ПустаяСсылка() Тогда
			
			Отчет.Организация = ОрганизацияДляИспользованияСохраненныхНастроек;
			
		КонецЕсли;
		
		ИнициализацияМакета();
		
		ОтчетОбъект().УстановитьПараметрыПечати(Результат, ВидМакета);
		
	Исключение
		
		УПЖКХ_ПечатьКвитанцийСервер.ВывестиСообщениеОбОшибкеНаСервере(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить настройки формирования квитанции. Пожалуйста, проверьте, корректно ли заданы настройки формирования квитанций."));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Отчет.ПериодПросмотра", "Период");
		
		ОбновитьСтрокуОбъектов();
		УправлениеВидимостью();
		
		ПредыдущаяОрганизация = Отчет.Организация;
		
		УстановитьКвитанциюПоВиду(Отказ);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
		
		
	Если СформироватьКвитанциюПриОткрытии И Не Отказ Тогда
		СформироватьОтчет(Команды.СформироватьОтчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОтменитьВыполнениеЗаданияНаСервере();
		
		СохранениеРеквизитов();
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось сохранить настройки формирования квитанций. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
		
	Исключение
		
		УПЖКХ_ПечатьКвитанцийСервер.ВывестиСообщениеОбОшибкеНаСервере(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось сохранить настройки формирования квитанций. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
		
		// Данный код предназначен для корректной обработки ситуации, если отчет открывается из формы списка справочника "Лицевые счета"
		// и существуют сохраненные пользовательские настройки отчета.
		//
		// Ранее, в таком случае, лицевой счет, выбранный на форме списка справочника "Лицевые счета",
		// заменялся на лицевой счет, сохраненный в пользовательских настройках отчета.
		//
		// Теперь платежный документ формируется на лицевой счет, выбранный на форме списка справочника "Лицевые счета".
		//
		Если Параметры.Свойство("ОбъектОтчета") И НЕ Параметры.ОбъектОтчета.Пустая() Тогда
			Отчет.ОбъектыОтчета.Очистить();
			
			НоваяСтрока = Отчет.ОбъектыОтчета.Добавить();
			НоваяСтрока.Объект = Параметры.ОбъектОтчета;
		КонецЕсли;
		
		ОбновитьСтрокуОбъектов();
		УправлениеФормой();
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_ПечатьКвитанцийСервер.ВывестиСообщениеОбОшибкеНаСервере(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить пользовательские настройки формирования квитанций. Пожалуйста, проверьте, корректно ли заданы пользовательские настройки формирования квитанций."));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПередачаТЗ" Тогда
		
		Попытка
			АдресВХранилище = Параметр;
			МассивЛС        = ПолучитьИзВременногоХранилища(АдресВХранилище);
			
			СписокЛС = Новый СписокЗначений;
			СписокЛС.ЗагрузитьЗначения(МассивЛС);
			
			ЗагрузитьЛицевыеСчетаВТабличнуюЧасть(СписокЛС);
			
			ОбновитьСтрокуОбъектов();
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
			
		Исключение
			
			УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить список лицевых счетов. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
			
		КонецПопытки;
		
	ИначеЕсли (ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
				И Параметр = Отчет.Организация) ИЛИ ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		
		ОбновитьРеквизитыКапРемонта();
		УправлениеФормой();
		УправлениеВидимостью();
		
	ИначеЕсли ИмяСобытия = "Запись_ТабличныйДокумент"
			И Найти(Параметр.ИмяОбъектаМетаданныхМакета, ОпределитьНаименованиеТекущегоМакетаПлатежногоДокумента(ВидМакета)) > 0 Тогда
		
		Если НЕ Параметр.Свойство("ИспользуетсяИзмененный")
		 ИЛИ (Параметр.Свойство("ИспользуетсяИзмененный") И Параметр.ИспользуетсяИзмененный = Истина) Тогда
			ЗаписатьМакет(Параметр);
		КонецЕсли;
		
		УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура записывает измененный макет листовки.
Процедура ЗаписатьМакет(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ТабличныйДокумент") Тогда
		МакетЛистовки = ПараметрыЗаписи.ТабличныйДокумент;
	Иначе
		МакетЛистовки = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет(ПараметрыЗаписи.ИмяОбъектаМетаданныхМакета);
	КонецЕсли;
	
	АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетЛистовки);
	
	УправлениеПечатью.ЗаписатьМакет(ПараметрыЗаписи.ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ИзменениеТекстаРедактирования" поля "СтрокаОбъектов".
Процедура СтрокаОбъектовИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Отчет.ПериодПросмотра", "Период");
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Отчет.ПериодПросмотра", "Период", Ложь);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "Период".
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Отчет.ПериодПросмотра", "Период", Направление);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПредыдущаяОрганизация = Отчет.Организация Тогда
		
		Попытка
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
			
			СменитьКвитанциюПриИзмененииОрганизации();
			
			ОбновитьРеквизитыКапРемонта();
			
			УправлениеФормой();
			
			ПредыдущаяОрганизация = Отчет.Организация;
			
		Исключение
			
			УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "НачалоВыбора" поля ввода "СтрокаОбъектов".
//
Процедура СтрокаОбъектовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		
		Если Отчет.ТипПодбораОбъектов = "Подбор объектов" Тогда
			ПараметрыОткрытия = Новый Структура;
			Если Не Отчет.Организация.Пустая() Тогда
				ПараметрыОткрытия.Вставить("Организация", Отчет.Организация);
			КонецЕсли;
			ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПодборОбъектов", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			
			ОписаниОповещения = Новый ОписаниеОповещения("ОбработатьВыборОбъекта",ЭтаФорма);
			ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора",,ЭтаФорма,,,,ОписаниОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			// Получим открытую формы выбора и настроим список для возможности выбора ргупп и элементов.
			Окна = ПолучитьОкна();
			Для Каждого ТекОкно Из Окна Цикл
				Если Не ТекОкно.Содержимое.Количество() = 0
				   И ТипЗнч(ТекОкно.Содержимое[0]) = Тип("УправляемаяФорма")
				   И ТекОкно.Содержимое[0].ИмяФормы = "Справочник.КВП_ЛицевыеСчета.Форма.ФормаВыбора" Тогда
					ФормаВыбора = ТекОкно.Содержимое[0];
					ФормаВыбора.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
		ОбновитьСтрокуОбъектов();
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить список лицевых счетов. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры // СтрокаОбъектовНачалоВыбора()

&НаКлиенте
// Процедура-обработчик результата выбора объекта, вызванного в процедуре "СтрокаОбъектовНачалоВыбора()".
Процедура ОбработатьВыборОбъекта(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Попытка
		
		Если НЕ ВыбранноеЗначение = Неопределено Тогда
			Отчет.ТипПодбораОбъектов = "Выбор из справочника";
			Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЭтоГруппа") Тогда
				СписокЛС = ПолучитьСписокЛС(ВыбранноеЗначение, НачалоМесяца(Отчет.ПериодПросмотра), КонецМесяца(Отчет.ПериодПросмотра));
				
				ЗагрузитьЛицевыеСчетаВТабличнуюЧасть(СписокЛС);
			Иначе
				Отчет.ОбъектыОтчета.Очистить();
				
				НоваяСтрока = Отчет.ОбъектыОтчета.Добавить();
				НоваяСтрока.Объект = ВыбранноеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьСтрокуОбъектов();
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить список лицевых счетов. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры // ОбработатьВыборОбъекта()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля ввода "СтрокаОбъектов".
//
Процедура СтрокаОбъектовПриИзменении(Элемент)
	
	Попытка
		
		Если НЕ Найти(Элемент.ТекстРедактирования, "Подбор объектов") = 0 Тогда
			Отчет.ТипПодбораОбъектов = "Подбор объектов";
		ИначеЕсли НЕ Найти(Элемент.ТекстРедактирования, "Выбор из справочника") = 0 Тогда
			Отчет.ТипПодбораОбъектов = "Выбор из справочника";
		Иначе
			Отчет.ТипПодбораОбъектов = "Все действующие лицевые счета";
			врСписок = Новый СписокЗначений;
			врСписок.Добавить(ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
			СписокЛС = ПолучитьСписокЛС(врСписок, НачалоМесяца(Отчет.ПериодПросмотра), КонецМесяца(Отчет.ПериодПросмотра), Истина);
			ЗагрузитьЛицевыеСчетаВТабличнуюЧасть(СписокЛС);
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
		КонецЕсли;
		
		Если Элементы.СтрокаОбъектов.СписокВыбора.НайтиПоЗначению(СтрокаОбъектов) = Неопределено Тогда
			Если ПустаяСтрока(СтрокаОбъектов) ИЛИ СтрДлина(СтрокаОбъектов) < 3 Тогда
				// заглушка, действия не производим.
			Иначе
				СписокПохожихЛС = ПолучитьСписокПохожихЛицевыхСчетов(Отчет.ПериодПросмотра, СтрокаОбъектов, Отчет.Организация);
				
				Если СписокПохожихЛС.Количество() = 0 Тогда
					ТестСообщения = "В поле введены некорректные данные. Отменить ввод?" + Символы.ПС + Символы.ПС +
									"Нажмите ""Да"" для отмены ввода или ""Нет"" для продолжения редактирования.";
					Ответ = Неопределено;
					ПоказатьВопрос(Новый ОписаниеОповещения("СтрокаОбъектовПриИзмененииОбработатьРезультатВопроса", ЭтотОбъект), ТестСообщения, РежимДиалогаВопрос.ДаНет, , , "1С:Предприятие");
					Возврат;
				Иначе
					ПоказатьВыборИзМеню(Новый ОписаниеОповещения("СтрокаОбъектовПриИзмененииЗавершение", ЭтотОбъект), СписокПохожихЛС, Элементы.СтрокаОбъектов);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОбъектовПриИзмененииФрагмент();
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры // СтрокаОбъектовПриИзменении()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "СтрокаОбъектовПриИзменении()".
Процедура СтрокаОбъектовПриИзмененииОбработатьРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса=КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СтрокаОбъектовПриИзмененииФрагмент();
	
КонецПроцедуры // СтрокаОбъектовПриИзмененииОбработатьРезультатВопроса()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "СтрокаОбъектовПриИзменении()".
Процедура СтрокаОбъектовПриИзмененииЗавершение(ВыборОбъектОтчета, ДополнительныеПараметры) Экспорт
	
	Если ВыборОбъектОтчета <> Неопределено Тогда
		ОбъектОтчета = ВыборОбъектОтчета.Значение;
		Отчет.ТипПодбораОбъектов = "Выбор из справочника";
		Отчет.ОбъектыОтчета.Очистить();
		Отчет.ОбъектыОтчета.Добавить().Объект = ОбъектОтчета;
	КонецЕсли;
	
	СтрокаОбъектовПриИзмененииФрагмент();
	
КонецПроцедуры // СтрокаОбъектовПриИзмененииЗавершение()

&НаКлиенте
// Продолжение процедуры "СтрокаОбъектовПриИзменении()".
Процедура СтрокаОбъектовПриИзмененииФрагмент()
	
	Попытка
		ОбновитьСтрокуОбъектов();
	Исключение
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
	КонецПопытки;
	
КонецПроцедуры // СтрокаОбъектовПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НастройкиСбораДанных".
//
Процедура НастройкиСбораДанныхПриИзменении(Элемент)
	
	Если НЕ Отчет.НастройкаСбораДанных.Пустая() Тогда
		СкорректироватьПорядокУслуг();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - открывает настройки многопоточности.
//
Процедура ГиперссылкаНаСтраницуНастройкуМногопоточностиНажатие(Элемент)
	
	КВП_РаботаСДиалогамиКлиент.ПерейтиНаСтраницуНастроекПроизводительности();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ НАСТРОЕК КАПИТАЛЬНОГО РЕМОНТА

&НаКлиенте
// Процедура - обработчик результата опроса команды "НадписьЭлементСправочника".
//
Процедура КнопкаНастройкаВеденияКРНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаВеденияКРНажатиеЗавершение()

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки на настройку учета КР.
//
Процедура КомандаПоказатьНастройкиВеденияКР(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Отчет.Организация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Отчет.Организация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			Оповещение = Новый ОписаниеОповещения("КнопкаНастройкаВеденияКРНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТА

&НаКлиенте
// Обработчик события "ОбработкаДополнительнойРасшифровки" поля "Результат".
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	Если Отчет.НастройкаСбораДанных.Пустая() Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено поле ""Настройка сбора данных"".");
		
	Иначе
		
		МассивУслугБезВидовУслуг = ПолучитьМассивУслугБезВидовУслуг();
		
		Если МассивУслугБезВидовУслуг.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
			
			// Используем подключение обработчика ожидания для того, чтобы вывести состояние табличного поля на форме в состоянии "ФормированиеОтчета".
			ПодключитьОбработчикОжидания("СформироватьОтчетКлиент", 0.1, Истина);
			
		Иначе
			
			ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОНезаполненныхВидахУслуг", ЭтотОбъект);
			ТекстВопроса = "У следующих услуг не заполнен вид услуги, что может привести к некорректному выводу данных в квитанциях:";
			
			Для каждого ТекУслуга из МассивУслугБезВидовУслуг Цикл
				
				ТекстВопроса = ТекстВопроса + "
				|" + ТекУслуга;
				
			КонецЦикла;
			
			ТекстВопроса = ТекстВопроса + "
			|Продолжить формирование квитанций?";
			
			ПоказатьВопрос(ОповещениеОВыбореОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет)
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия ссылки "СсылкаНаСайтНажатие".
Процедура СсылкаНаСайтНажатие(Элемент)
	
	Попытка
		
		КВП_РаботаСДиалогамиКлиент.ПоказатьВебСтраницу(КВП_ПрочиеПроцедурыИФункции.АдресСайтаИнтернетПортала(),
														"1С: Сайт управляющей компании ЖКХ, ТСЖ и ЖСК", Истина);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СменитьКвитанцию".
//
Процедура СменитьКвитанцию(Команда)
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборФормыКвитанции", ЭтотОбъект, Новый Структура);
	
	СписокФормКвитанций.ПоказатьВыборЭлемента(ОповещениеОВыборе, "Сменить квитанцию", СписокФормКвитанций.НайтиПоЗначению(ЭтотОбъект.ВидМакета));
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

&НаКлиенте
// Процедура - обработчик команды "КомандаОткрытьЛистовкуОнлайнОплаты".
//
Процедура КомандаОткрытьЛистовкуОнлайнОплаты(Команда)
	
	ОткрытьФормуПечатиЛистовок(Новый Структура("ИмяОбъекта, Организация", "Отчет.УПЖКХ_ПлатежныйДокумент", Отчет.Организация), Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "КомандаОткрытьСтраницуСайтаОбОнлайнОплате".
//
Процедура КомандаОткрытьСтраницуСайтаОбОнлайнОплате(Команда)
	
	ОткрытьФормуПечатиЛистовок(Новый Структура("ПерейтиПоГиперссылке", "https://vgkh.ru/faq/faq_tsj_3_0/vyvod_qr_shtrikhkoda_v_sisteme_citycard/"), Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
//
Процедура СравнитьМакетСТиповым(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским("Отчет.УПЖКХ_ПлатежныйДокумент", ОпределитьНаименованиеТекущегоМакетаПлатежногоДокумента(ВидМакета));
	
КонецПроцедуры

// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
&НаКлиенте
Процедура Подключаемый_ДанныеПоКвитанциямПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьПоЭлектроннойПочте(Команда)
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент.Подключаемый_ОтправитьПоЭлектроннойПочте(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьНаТестововуюЭлектроннуюПочту(Команда)
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент.Подключаемый_ОтправитьНаТестововуюЭлектроннуюПочту(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПользовательскиеНастройкиРассылки(Команда)
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент.Подключаемый_ПользовательскиеНастройкиРассылки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьДанныеПоКвитанциям(Команда)
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент.Подключаемый_ПоказатьДанныеПоКвитанциям(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаПодключитьРассылкуКвитанций(Команда)
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент.Подключаемый_ГиперссылкаПодключитьРассылкуКвитанций();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнструкцияПоРассылке(Команда)
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовКлиент.Подключаемый_ИнструкцияПоРассылке();
КонецПроцедуры
// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура открывает общую форму "Печать листовок ЖКХ".
Процедура ОткрытьФормуПечатиЛистовок(ПараметрыФормы, УникальностьФормы)
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПечатьЛистовокЖКХ", ПараметрыФормы, , УникальностьФормы);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет формирование отчета.
//
Процедура СформироватьОтчетКлиент()
	
	НачатьЗамерВремениВыполнения();
	
	ОчиститьСообщения();
	
	Попытка
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		
		РезультатВыполнения = СформироватьОтчетНаСервере();
		
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
			УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			
			ОстановитьЗамерВремениВыполнения();
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось сформировать квитанцию. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Функция фозвращает объект отчета.
Функция ОтчетОбъект()
	
	Возврат РеквизитФормыВЗначение("Отчет");
	
КонецФункции // ОтчетОбъект()

&НаСервере
// Процедура корректирует значения "Порядок" по возрастанию в регистре сведений
// "Порядок услуг в квитанции".
//
Процедура СкорректироватьПорядокУслуг()
	
	НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаСбораДанных.Установить(Отчет.НастройкаСбораДанных);
	НаборЗаписей.Прочитать();
	ТаблицаПорядокУслуг = НаборЗаписей.Выгрузить();
	Если Не ТаблицаПорядокУслуг.Количество() = 0 Тогда
		ТаблицаПорядокУслуг.Сортировать("Порядок Возр");
		Для Каждого ТекСтрока Из ТаблицаПорядокУслуг Цикл
			ТекСтрока.Порядок = ТаблицаПорядокУслуг.Индекс(ТекСтрока) + 1;
		КонецЦикла;
		НаборЗаписей.Загрузить(ТаблицаПорядокУслуг);
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьПорядокУслуг()

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура отменяет выполнение задания.
Процедура ОтменитьВыполнениеЗаданияНаСервере()
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
// Процедура готовит параметры на сервере.
Функция ПодготовитьПараметрыОтчета(Отказ)
	
	НастройкаСбораДанных = Отчет.НастройкаСбораДанных;
	
	Если НастройкаСбораДанных.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьКвитанцииСИтоговойСуммойВИнтервале
	   И НЕ НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыОтБезОграничений
	   И НЕ НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыДоБезОграничений
	   И НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыОт > НастройкаСбораДанных.ГраницаОтбораИтоговойСуммыДо Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В настройке сбора данных неверно указаны границы итоговой суммы для отбора квитанций!", Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПолучитьСтруктуруНастроекСбораДанныхДляКвитанцийИОбменов(НастройкаСбораДанных,
																																		  Отчет.Организация,
																																		  Отчет.ПериодПросмотра,
																																		  ВидМакета,
																																		  Отчет.ОбъектыОтчета.Выгрузить(),
																																		  Отказ);
	// Если не создана Учетная политика ЖКХ, то не даем формировать платежный документ, так как не логично 
	// печатать квитанции, не ведя учет в ЖКХ.
	Если ПараметрыОтчета.ПараметрыУПОтказ Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Если не создана Настройка формирования платежного документа, то не даем формировать платежный документ, так как
	// некоторые сведения платежного документа выводятся по заданным настройкам.
	Если ПараметрыОтчета.ПараметрыФормированияПДОтказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить Настройки формирования платежного документа. "
													   + "Пожалуйста, проверьте, корректно ли заданы Настройки платежного документа.", Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	// Для формы "Плат. документ (приказ №924/пр)" проверяем факт ведения раздельного учета по услугам капитального ремонта,
	// и, если данный учет не ведется, не формируем платежный документ.
	Если ВидМакета = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР
	   И НЕ ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		Сообщение            = Новый СообщениеПользователю;
		Сообщение.Текст      = "Форма платежного документа ""Плат. документ (приказ №924/пр)"" предназначена для вывода сведений по "
							 + "основным услугам и услугам капитального ремонта, но настройка ведения раздельного учета не задана.
							   |Нажмите на сообщение для перехода к ""Настройкам учета по услугам капитального ремонта"".";
		Сообщение.КлючДанных = ПараметрыОтчета.НастройкиУчетаКапремонтаСсылка;
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Для всех форм, кроме "Плат. документ (приказ №924/пр)" и "Плат. документ (пост. №679/30 для МО)" проверяем факт ведения раздельного учета
	// по услугам капитального ремонта, и, если данный учет не ведется, выводим информационное сообщение о том, что ПД по услугам кап.ремонта
	// не будут сформированы. Это необходимо для информативности.
	Если ВидМакета <> Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР
	   И ВидМакета <> Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679
	   И ВидМакета <> Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр
	   И (ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" ИЛИ ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт  = "только квитанцию на кап. ремонт")
	   И НЕ ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не ведется раздельный учет по услугам капитального ремонта, поэтому "
													   + "квитанция по услугам капитального ремонта не будет сформирована.");
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("АдресХранилища", АдресХранилища);
	ПараметрыОтчета.Вставить("ОтчетОбъект",    Строка(ОтчетОбъект())); // Для поддержки работоспособности внешних квитанций.
	
	Возврат ПараметрыОтчета;
	
КонецФункции // ПодготовитьПараметрыОтчета()

&НаСервере
// Функция формирует отчет на сервере.
Функция СформироватьОтчетНаСервере()
	
	Если Не ПроверитьЗаполнение() ИЛИ Не ИмеютсяОбъектыОтчета() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Если Строка(ИдентификаторЗадания) <> "00000000-0000-0000-0000-000000000000" Тогда
		УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено; // Необходимо для запуска нового задания.
	
	Отказ = Ложь;
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(Отказ);
	Если Отказ Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	Если УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая() Тогда
		
		ОтчетОбъект().СформироватьОтчет(ПараметрыОтчета, ПараметрыОтчета.АдресХранилища);
		
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		АдресХранилища      = ПараметрыОтчета.АдресХранилища;
		
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
																				 "Отчеты.УПЖКХ_ПлатежныйДокумент.СформироватьОтчет",
																				 ПараметрыОтчета,
																				 УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
// Функция проверяет наличие выбранных объектов объекта.
//
// Возвращаемое значение:
//  Булево
//
Функция ИмеютсяОбъектыОтчета()
	
	ОбъектыВыбраны = Истина;
	
	ОбъектыОтчета = Отчет.ОбъектыОтчета.Выгрузить();
	Если ОбъектыОтчета.Количество() = 0 ИЛИ ОбъектыОтчета.Количество() = 1 И ОбъектыОтчета[0].Объект.Пустая() Тогда
		ОбъектыВыбраны = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Объекты отчета не выбраны!";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат ОбъектыВыбраны;
	
КонецФункции // ИмеютсяОбъектыОтчета()

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	// Получаем документ-результат отчета.
	Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
		Если ДанныеХранилища.Свойство("ДокументРезультат") Тогда
			Результат = ДанныеХранилища.ДокументРезультат;
		КонецЕсли;
	КонецЕсли;
	
	// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ЗагрузитьПодготовленныеДанные(ЭтаФорма, ДанныеХранилища);
	// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	
	ОтчетОбъект().УстановитьПараметрыПечати(Результат, ВидМакета);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция получает список лицевых счетов, похожих по наименованию на значение,
// введенное в поле "Объекты".
Функция ПолучитьСписокПохожихЛицевыхСчетов(ДатаСреза, СтрокаОбъектов, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ СведенияОВзаиморасчетахПоОрганизации
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Дата, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Наименование КАК ЛицевойСчетНаименование,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК ОтветственныйВладелецНаименование
	|ПОМЕСТИТЬ Итоговая
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						СведенияОВзаиморасчетахПоОрганизации.ЛицевойСчет
	|					ИЗ
	|						СведенияОВзаиморасчетахПоОрганизации КАК СведенияОВзаиморасчетахПоОрганизации)
	|				И ОтветственныйВладелец.Наименование ПОДОБНО ""%"" + &СтрокаОбъектов + ""%"") КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 50
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет.Наименование,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						СведенияОВзаиморасчетахПоОрганизации.ЛицевойСчет
	|					ИЗ
	|						СведенияОВзаиморасчетахПоОрганизации КАК СведенияОВзаиморасчетахПоОрганизации)
	|				И ЛицевойСчет.Наименование ПОДОБНО ""%"" + &СтрокаОбъектов + ""%"") КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Итоговая.ЛицевойСчет КАК ЛицевойСчет,
	|	Итоговая.ЛицевойСчетНаименование + "" ("" + Итоговая.ОтветственныйВладелецНаименование + "")"" КАК ЛицевойСчетПредставление
	|ИЗ
	|	Итоговая КАК Итоговая
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	
	Запрос.УстановитьПараметр("Дата",           ДатаСреза);
	Запрос.УстановитьПараметр("СтрокаОбъектов", СтрокаОбъектов);
	Запрос.УстановитьПараметр("Организация",    Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокЗначений = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Результат Цикл
		СписокЗначений.Добавить(ТекСтрока.ЛицевойСчет, ТекСтрока.ЛицевойСчетПредставление);
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции // ПолучитьСписокПохожихЛицевыхСчетов()

&НаКлиенте
// Процедура проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если Строка(ИдентификаторЗадания) = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
			
			ОстановитьЗамерВремениВыполнения();
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Функция возвращает массив услуг с незаполненным реквизитом "Вид услуги".
Функция ПолучитьМассивУслугБезВидовУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КВП_Услуги.Ссылка,
	|	КВП_Услуги.Наименование
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа
	|	И КВП_Услуги.ВидУслуги = ЗНАЧЕНИЕ(Справочник.КВП_ВидыУслуг.ПустаяСсылка)";
	
	ТаблицаУслугБезВидаУслуг = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаУслугБезВидаУслуг.ВыгрузитьКолонку("Наименование");
	
КонецФункции

&НаКлиенте
// Процедура открывает основную форму квитанции выбранной организации.
//
Процедура СменитьКвитанциюПриИзмененииОрганизации()
	
	Попытка
		мНастройкиФормированияПДЖКХОтказ = Ложь;
		мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Отчет.Организация,
																									 мНастройкиФормированияПДЖКХОтказ);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки формирования квитанции. Пожалуйста, проверьте, корректно ли заданы настройки формирования квитанций.", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если НЕ мНастройкиФормированияПДЖКХотказ Тогда
		ОсновнаяФормаКвитанцииОрганизации = мНастройкиФормированияПДЖКХ.ФормаКвитанции;
		
		ОсновнаяФормаКвитанцииОрганизацииВСписке = Неопределено;
		Если ОсновнаяФормаКвитанцииОрганизации <> ВидМакета Тогда
			ДопПараметры = Новый Структура;
			Если Не ТипЗнч(ОсновнаяФормаКвитанцииОрганизации) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
				// Поиск формы квитанции в списке квитанций по представлению.
				Для Каждого ФормаКвитанции Из СписокФормКвитанций Цикл
					Если ФормаКвитанции.Значение = ОсновнаяФормаКвитанцииОрганизации Тогда
						ОсновнаяФормаКвитанцииОрганизацииВСписке = ФормаКвитанции;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОсновнаяФормаКвитанцииОрганизацииВСписке = СписокФормКвитанций.НайтиПоЗначению("Внешний отчет");
				ДопПараметры.Вставить("ВнешнийОтчет", ОсновнаяФормаКвитанцииОрганизации);
			КонецЕсли;
			
			Если Не ОсновнаяФормаКвитанцииОрганизацииВСписке = Неопределено Тогда
				ДопПараметры.Вставить("ОсновнаяФормаКвитанцииОрганизации", ОсновнаяФормаКвитанцииОрганизацииВСписке);
				ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("ОбработатьСменуКвитанцииПриИзмененииОрганизации", ЭтотОбъект, ДопПараметры);
				ТекстВопроса = "Сменить квитанцию на """
							+ ОсновнаяФормаКвитанцииОрганизации
							+ """, которая является основной квитанцией для организации "
							+ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.Организация, "НаименованиеСокращенное") + "?";
				ПоказатьВопрос(ОповещениеОВыбореОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СменитьКвитанциюПриИзмененииОрганизации()

&НаКлиенте
// Процедура обрабатывает изменение квитанции в случае смены организации в квитанции в соответствии с ответом пользователя.
//
Процедура ОбработатьСменуКвитанцииПриИзмененииОрганизации(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДопПараметры = Новый Структура;
		Если ДополнительныеПараметры.Свойство("ВнешнийОтчет") Тогда
			ОбработкаОткрытияВнешнейКвитанции(ДополнительныеПараметры.ВнешнийОтчет, ДопПараметры);
		Иначе
			ДопПараметры.Вставить("ИзменитьОрганизацию", Истина);
			ОбработатьВыборФормыКвитанции(ДополнительныеПараметры.ОсновнаяФормаКвитанцииОрганизации, ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСменуКвитанцииПриИзмененииОрганизации()

&НаКлиенте
// Процедура обрабатывает ответ на вопрос о формировании квитанций в случае, когда не у всех услуг заполнен "Вид услуги".
//
Процедура ОбработатьОтветНаВопросОНезаполненныхВидахУслуг(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// Используем подключение обработчика ожидания для того, чтобы вывести состояние табличного поля на форме в состоянии "ФормированиеОтчета".
		ПодключитьОбработчикОжидания("СформироватьОтчетКлиент", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Открывает при необходимости выбранную пользователем форму квитанции.
//
Процедура ОбработатьВыборФормыКвитанции(ВыбраннаяКвитанция, ДопПараметры) Экспорт
	
	Если ВыбраннаяКвитанция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяКвитанция.Значение = ВидМакета Тогда
		Возврат;
	ИначеЕсли ВыбраннаяКвитанция.Значение = "Внешний отчет" Тогда
		Попытка
			ОтборПоВиду = Новый СписокЗначений;
			ДополнительныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет");
			ОтборПоВиду.Добавить(ДополнительныйОтчет, ДополнительныйОтчет);
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Отбор",       Новый Структура("Вид", ОтборПоВиду));
			ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработкаОткрытияВнешнейКвитанции", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаВыбора", ПараметрыОткрытияФормы,,,,, ОповещениеОВыборе);
			
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		
		ПараметрыОтчета = Новый Структура;
		Если ДопПараметры.Свойство("ИзменитьОрганизацию") Тогда
			ПараметрыОтчета.Вставить("Организация", Отчет.Организация);
		КонецЕсли;
		
		СохранениеРеквизитов();
		
		Если ТипЗнч(ВыбраннаяКвитанция.Значение) = Тип("ПеречислениеСсылка.УПЖКХ_ВидыПлатежныхДокументов") Тогда
			
			ОчиститьДанныеФормыДляСменыВидаПД();
			
			ВидМакета = ВыбраннаяКвитанция.Значение;
			
			УстановитьВидимостьКнопкиСравнитьМакетСТиповым();
			
			УстановитьПараметрыПечатиНаСервере();
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			
			УстановитьДополнительныеНастройкиДляРежимаОтладки();
			
		Иначе
			
			ПараметрыОтчета.Вставить("ВидМакета", ВыбраннаяКвитанция.Значение);
			ОткрытьФорму("Отчет.УПЖКХ_КвитанцииИзвещения.Форма.Форма_" + ВыбраннаяКвитанция.Представление, ПараметрыОтчета);
			
			// Закрываем текущую форму.
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФормыКвитанции()

&НаСервере
Процедура УстановитьДополнительныеНастройкиДляРежимаОтладки()
	
	ИспользуетсяРежимОтладки = Константы.УПЖКХ_ИспользоватьРежимОтладки.Получить();
	
	Если ИспользуетсяРежимОтладки Тогда
		Заголовок = Строка(ВидМакета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Устанавливает параметры печати по макету.
Процедура УстановитьПараметрыПечатиНаСервере()
	
	ОтчетОбъект().УстановитьПараметрыПечати(Результат, ВидМакета);
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает файл отчета внешней квитанции.
//
Процедура ОбработкаОткрытияВнешнейКвитанции(ВыбраннаяКвитанция, ДопПараметры) Экспорт
	
	Если Не ВыбраннаяКвитанция = Неопределено Тогда
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВыбраннаяКвитанция);
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма",, ЭтаФорма);
		
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОткрытияВнешнейКвитанции()

&НаКлиенте
// Обработчик события "Выбор" поля "Результат".
//
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Попытка
		Расшифровка = Область.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ТекстШК") Тогда
			СтандартнаяОбработка = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Расшифровка.ТекстШК;
			Сообщение.Сообщить();
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Ложь;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура очищает табличный документ формы и таблицу данных для рассылки квитанций на эл.почту жильцов.
Процедура ОчиститьДанныеФормыДляСменыВидаПД()
	
	Результат = Новый ТабличныйДокумент;
	
	Если НЕ Элементы.Найти("ТаблицаФормы_ДанныеПоКвитанциям") = Неопределено Тогда
		ЭтаФорма["ДанныеПоКвитанциям"].Очистить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область ФунцкионалОтладки

&НаКлиенте
// Запускает замер времени выполнения.
//
Процедура НачатьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.НачатьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры

&НаКлиенте
// Завершает замер времени выполнения.
//
Процедура ОстановитьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.ОстановитьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры

#КонецОбласти
