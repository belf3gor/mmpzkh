&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2007Кв1";
	
	СтруктураДанныхРаздел1 = Новый Структура;
	СтруктураДанныхРаздел2 = Новый Структура;
	СтруктураДанныхРаздел3 = Новый Структура;
		    
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	СтруктураРеквизитовФормы.мИдГруппы1 = "П0000100001";
	СтруктураРеквизитовФормы.мИдГруппы2 = "П0000200001";
	СтруктураРеквизитовФормы.мИдГруппы3 = "П0000300001";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	КолИсхСтрокИдГруппы3 = 1;

	КолКолонокИдГруппы1 = 24;
	КолКолонокИдГруппы2 = 3;
	КолКолонокИдГруппы3 = 2;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, СтруктураРеквизитовФормы.мИдГруппы3);

	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Приложение", "ТаблицаСтраницыПриложение");
	мСтруктураМногостраничныхРазделов.Вставить("Сведения",   "ТаблицаСтраницыСведения");
	мСтруктураМногостраничныхРазделов.Вставить("Зачет",      "ТаблицаСтраницыЗачет");
	                                                                                      	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолИсхСтрокИдГруппы3);

	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, КолКолонокИдГруппы3);
    		
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
                        	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "20/07/2012";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = "1151099";

	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	
	мСтрукТЗДокументы = Новый Структура;
	
	ИмяРаздела = "Раздел1";
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
	СтруктураРеквизитовФормы.мВыбраннаяФорма   = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мПериодичность    = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок   = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация       = Параметры.Организация;
	
	ДатаПодписи	= Параметры.ДатаПодписи; 
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	Если ДополнительныеДанныеРазделов = Неопределено Тогда
		ДополнительныеДанныеРазделов = Новый Структура;
	КонецЕсли;

	Инициализация(Параметры.БезОткрытияФормы);
		
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
    СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("КодНО");	
    СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
    СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
    СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
    СтруктураРеквизитовФормы.Вставить("мДелитель");
    СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
    СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
    СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
    СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
    СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
    СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
    СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
    СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета"); 
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииАдресОрганизации");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000114", "П000010000114");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000115", "П000010000115");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000119", "П000010000119");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000010000120", "П000010000120");
			
КонецПроцедуры // ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
		
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
    		
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
    
	// для обновления листа о ФЛ, если Истина, то обновлять перезаписывать данные на листе
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	Если НЕ БезОткрытияФормы Тогда
		
		СформироватьСпискиВыбора();
						
	КонецЕсли;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;

			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

			ОбновитьТЗСпецификаций();
	
			мОбновитьКомментарий = Истина;

		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе
		Если НЕ БезОткрытияФормы Тогда
			// Установим маски, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			
			Модифицированность = Истина;
			
			ДатаПодписи	= Параметры.ДатаПодписи; 
			
			ТабличныйДокумент.Области.Число.Значение = ДатаПодписи;
			ТабличныйДокумент.Области.Месяц.Значение = ДатаПодписи;
			ТабличныйДокумент.Области.Год.Значение   = ДатаПодписи;
			
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ИзмененаОрганизация = СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация;
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		мСтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = ИзмененаОрганизация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	ТабличныйДокумент.Области.Число.Значение = ДатаПодписи;
	ТабличныйДокумент.Области.Месяц.Значение = ДатаПодписи;
	ТабличныйДокумент.Области.Год.Значение = ДатаПодписи;
	Если СтруктураРеквизитовФормы.ВидДокумента = 0 Тогда 
		НомерКорректировки = 0;
	КонецЕсли;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = ДатаПодписи;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = ДатаПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " от " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(ЭтаФорма.Заголовок, ОргСтр) = 0 Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ОргСтр;
	КонецЕсли;
	

	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");

	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
								
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			           
		КонецЦикла;
        
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

    СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение";
	СтрокаУровня1.Представление            = "Приложение";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Сведения";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о выписках";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Зачет";
	СтрокаУровня1.Представление            = "Сведения" + Символы.ПС + "о зачетах";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "ПродавецНаимОрг";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела2
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Приложения
	СтрокаУровня1.ИмяСтраницы                          = "Приложение";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва листа сведений
	СтрокаУровня1.ИмяСтраницы                          = "Сведения";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
		
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва листа "зачет"
	СтрокаУровня1.ИмяСтраницы                          = "Зачет";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	    	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2012Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код", , , МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			Если Область.Имя = "ЕдИзмПодАкцТоваров"
			 ИЛИ Область.Имя = "ЕдИзмНБ" Тогда
				ТаблСписка.Колонки.Добавить("Название", , "Название", МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Иначе
				ТаблСписка.Колонки.Добавить("Название", , "Название", МакетСоставаПоказателей.Область(ВерхОбласти, 3, ВерхОбласти, 3).ШиринаКолонки);
			КонецЕсли;
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					Если Область.Имя = "ЕдИзмПодАкцТоваров"
					 ИЛИ Область.Имя = "ЕдИзмНБ" Тогда	
						НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					Иначе
						НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
		
	СвойстваПоказателей.Очистить();
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000104", 1, , "Выбор единицы измерения подакцизного товара", КоллекцияСписковВыбора["ЕдИзмПодАкцТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000123", 1, , "Выбор единицы измерения дополнительной величины для исчисления налоговой базы", КоллекцияСписковВыбора["ЕдИзмНБ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПлат", 1, , "Выбор типа платежного документа", КоллекцияСписковВыбора["ТипПлатДокСведения"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПлатЗачет", 1, , "Выбор типа платежного документа", КоллекцияСписковВыбора["ТипПлатДокЗачет"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПрод_3", 1, , "Выбор типа продавца", КоллекцияСписковВыбора["ТипПродавцаРаздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПок_3", 1, , "Выбор типа покупателя", КоллекцияСписковВыбора["ТипПокупателяРаздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПрод_Пр", 1, , "Выбор типа продавца", КоллекцияСписковВыбора["ТипПродавцаПрил"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ТипПок_Пр", 1, , "Выбор типа покупателя", КоллекцияСписковВыбора["ТипПокупателяПрил"]);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем СтрукТЗДокументы;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
		
	СтруктураРеквизитовФормы.ЕдиницаИзмерения 		   = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения  = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи			                               = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий					                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы       = ЭлементСтруктуры.Ключ;
			СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];

			// Если лист многостраничный, то всегда выведется текущий на момент сохранения блок многострочности
			// а в процедуре вывести активную страницу, выведутся оставшиеся данные.
		    Если  СтруктураРеквизитовФормы.мИдГруппы1 = ИмяГруппы  Тогда
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
		
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// Восстанавливаем структуру, хранящую таблицы значений с данными по товаро-транспортным документам.
	СписокСохранения.Свойство("мСтрукТЗДокументы", СтрукТЗДокументы);
	
	Если СтрукТЗДокументы = Неопределено Тогда
		
		мСтрукТЗДокументы = Новый Структура;
		
	Иначе
		
		Для Каждого ЭлементСтруктуры Из СтрукТЗДокументы Цикл
			
			ТранспДокументы = Новый Массив;
			
			Для Каждого Док Из ЭлементСтруктуры.Значение Цикл
				ТранспДокументы.Добавить(Новый Структура("Серия, Номер, Дата", Док.Серия, Док.Номер, Док.Дата));
			КонецЦикла;
						
			мСтрукТЗДокументы.Вставить(ЭлементСтруктуры.Ключ, ТранспДокументы);
			
		КонецЦикла;
				
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;

	// восстанавливаем  ТЗ спецификаций Раздел1;
	ТЗСпецификацийРаздел1 = Неопределено;
	СписокСохранения.Свойство("мТЗСпецификацийРаздел1", ТЗСпецификацийРаздел1);
	ЗначениеВДанныеФормы(ТЗСпецификацийРаздел1, мТЗСпецификацийРаздел1);
																				
	// восстанавливаем ТЗ спецификаций Раздел1 стр 07;
	ТЗСпецификацийРаздел1_07 = Неопределено;
	СписокСохранения.Свойство("мТЗСпецификацийРаздел1_07", ТЗСпецификацийРаздел1_07);
	ЗначениеВДанныеФормы(ТЗСпецификацийРаздел1_07, мТЗСпецификацийРаздел1_07);
		
	// восстанавливаем ТЗ спецификаций Раздел3;
	ТЗСпецификацийРаздел3 = Неопределено;
	СписокСохранения.Свойство("мТЗСпецификацийРаздел3", ТЗСпецификацийРаздел3);
	ЗначениеВДанныеФормы(ТЗСпецификацийРаздел3, мТЗСпецификацийРаздел3);
	
	// восстанавливаем  массив ТЗ спецификаций Приложения;
	МассивТЗСпецификацийПрил = Неопределено;
	СписокСохранения.Свойство("мМассивТЗСпецификацийПрил", МассивТЗСпецификацийПрил);
		
	Для Каждого ЭлементМассива Из МассивТЗСпецификацийПрил Цикл
		
		ЗначениеВДанныеФормы(ЭлементМассива, мМассивТЗСпецификацийПрил.Добавить().Таблица);
		
	КонецЦикла;
		
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	СнятьЗащитуСЯчеек(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// Восстанавливаем структуру, хранящую данные реквизитов выгрузки.
	СписокСохранения.Свойство("мСтруктураРеквизитовВыгрузки", мСтруктураРеквизитовВыгрузки);
	Если мСтруктураРеквизитовВыгрузки = Неопределено Тогда
		мСтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
	Иначе
		// В предыдущих редакция формы эти реквизиты могут отсутствовать.
		Если НЕ мСтруктураРеквизитовВыгрузки.Свойство("НаимДовПодп2") Тогда
			мСтруктураРеквизитовВыгрузки.Вставить("НаимДовПодп2", "");
		КонецЕсли;
		Если НЕ мСтруктураРеквизитовВыгрузки.Свойство("НомерДовПодп2") Тогда
			мСтруктураРеквизитовВыгрузки.Вставить("НомерДовПодп2", "");
		КонецЕсли;
		Если НЕ мСтруктураРеквизитовВыгрузки.Свойство("ДатаДовПодп2") Тогда
			мСтруктураРеквизитовВыгрузки.Вставить("ДатаДовПодп2", "");
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ДополнительныеДанныеРазделов", ДополнительныеДанныеРазделов);

	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;

	ИмяТекРаздела = "Раздел1";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;

	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность   = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
		
	СформироватьДеревоРазделовОтчетаНаСервере();

КонецПроцедуры

&НаСервере
Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(ДатаПодписи), КонецДня(ДатаПодписи), "ФП = Истина" );
    	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "";//Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения = "ИННЮЛ, КППЮЛ, НаимЮЛПол, ";
		Сведения = Сведения + ?(Форма.СтруктураРеквизитовФормы.ИП, "АдрМЖ", "АдрЮР");
		Сведения = Сведения +", ";
	КонецЕсли;
	Сведения = Сведения + "КодНО, ФИОРук, ФИОБух, ФИО, Гражд, ГраждСтрана";

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);

	// Инициализируем переменные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		КППЮЛ = "";
		НаимЮЛПол = "";
		Адр       = "";
	КонецЕсли;

	ФИОРук = "";
	ФИОБух = "";
	ФИО = "";
	//сКодНО = "":

	// Получаем данные
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		//ОргСведения.Свойство("ИННЮЛ",      ИННЮЛ    );
		ИННЮЛ = ОргСведения.ИННЮЛ;
		//ОргСведения.Свойство("КППЮЛ",      КППЮЛ    );
		КППЮЛ = ОргСведения.КППЮЛ;
		ОргСведения.Свойство("НаимЮЛПол",  НаимЮЛПол);
		НаимЮЛПол = ОргСведения.НаимЮЛПол;
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			 Адр = ОргСведения.АдрМЖ;
		Иначе
			 Адр = ОргСведения.АдрЮР;
		КонецЕсли;

	КонецЕсли;

	ФИОРук = ОргСведения.ФИОРук;
	ОргСведения.Свойство("ФИОБух",     ФИОБух   );
	ФИОБух = ОргСведения.ФИОБух;
	ФИО = ОргСведения.ФИО;
	Если Форма.СтруктураРеквизитовФормы.ИП Тогда
		НаимЮЛПол = ФИО;
		ФИОРук = ФИО;
		ФИОБух = "";
	КонецЕсли;

	Если ВПрограммеИзмененаДатаПодписи Тогда

		// Обновим только то, что зависит от даты подписи и выйдем
		Форма.ТабличныйДокумент.Области.ФИОРук.Значение  = ФИОРук;
		Форма.ТабличныйДокумент.Области.ФИОБух.Значение = ФИОБух;
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			Форма.ТабличныйДокумент.Области.ПокупательНаимОрг.Значение = ФИО;
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Форма.СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	Форма.СтруктураРеквизитовФормы.КодНО = ОргСведения.КодНО;
	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");

	Форма.СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ПокупательМестоНахожд.Значение)) Тогда
		Адр = СтрЗаменить(Адр, ",,,,,,,,,", "");
		Форма.ТабличныйДокумент.Области.ПокупательМестоНахожд.Значение = Адр;

		Если НЕ ЗначениеЗаполнено(СтрЗаменить(Адр, ",","")) Тогда
			ОбработанныйАдр = "";
			Форма.ТабличныйДокумент.Области.ПокупательМестоНахожд.Значение = ОбработанныйАдр;
		Иначе
			ОбработанныйАдр = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адр);
			Форма.ТабличныйДокумент.Области.ПокупательМестоНахожд.Значение = ОбработанныйАдр;
		КонецЕсли;
		
		КодСтраны = ?(ПустаяСтрока(Форма.ТабличныйДокумент.Области.ПокупательБайконур.Значение), "643", "398");
		Форма.ТабличныйДокумент.Области.КодСтраныПокупатель.Значение = КодСтраны;

	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ПокупательИНН_КПП.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ПокупательИНН_КПП.Значение = Форма.СтруктураРеквизитовФормы.мИННЮЛ + ?(ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мКППЮЛ), "/","") + Форма.СтруктураРеквизитовФормы.мКППЮЛ;
	КонецЕсли;

	// Работаем с названием ЮЛ
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ПокупательНаимОрг.Значение)) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ПокупательНаимОрг.Значение = НаимЮЛПол;
	КонецЕсли;

	// Работаем с ФИО бухгалтера
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ФИОБух.Значение)) Тогда
		Форма.ТабличныйДокумент.Области.ФИОБух.Значение  = ФИОБух;
	КонецЕсли;

	// Работаем с ФИО руководителя	
	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ФИОРук.Значение)) Тогда
		
		СведенияОПредставителе = Форма.ПолучитьСведенияОПредставителе(ОргСведения.КодНО);
		Если СведенияОПредставителе.ТипПредставителя = "1" тогда
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ФИОРук, ФИО");
			ФИОПодписанта = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		Иначе
			ФИОПодписанта = СведенияОПредставителе.ФИОПредставителя;
		КонецЕсли;
		
		Форма.ТабличныйДокумент.Области.ФИОРук.Значение = ФИОПодписанта;
		
	КонецЕсли;

	// Даты проставятся всегда при открытии документа или при изменении организации
	Если (НЕ Форма.СтруктураРеквизитовФормы.мДокументВосстановлен) ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
	// Заполним даты формирования декларации (подписи)
		Модифицированность = Истина;
		ЗаполнитьДатуВЯчейках(Форма);
	КонецЕсли;
	
	Если Форма.ТабличныйДокумент.Области.КодСтраныПокупатель.Значение="" Тогда
		 Форма.ТабличныйДокумент.Области.КодСтраныПокупатель.Значение = "643";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	// Процедура "заглушка", для других механизмов.
	ИзмененияПроизошли = Ложь;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	
	Если СтруктураРеквизитовФормы.КодНО = "" ИЛИ СтруктураРеквизитовФормы.КодНО = Неопределено Тогда
		СтруктураРеквизитовФормы.КодНО = ПолучитьКодИМНС();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = ПолучитьКодИМНС();
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
    
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
		
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
    	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);

	СтрукТЗДокументы = Новый Структура;
		
	Для Каждого ЭлементСтруктуры Из мСтрукТЗДокументы Цикл
		
		ТЗДокументы = Новый ТаблицаЗначений;
		
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
		ОписаниеТиповДата   = Новый ОписаниеТипов("Дата", , Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
		ТЗДокументы.Колонки.Добавить("Серия", ОписаниеТиповСтрока, "Серия");
		ТЗДокументы.Колонки.Добавить("Номер", ОписаниеТиповСтрока, "Номер");
		ТЗДокументы.Колонки.Добавить("Дата",  ОписаниеТиповДата,   "Дата");
		
		Для Каждого Док Из ЭлементСтруктуры.Значение Цикл
						
			НовДок = ТЗДокументы.Добавить();
			НовДок.Дата  = Док.Дата;
			НовДок.Номер = Док.Номер;
			НовДок.Серия = Док.Серия;
			
		КонецЦикла;
		
		СтрукТЗДокументы.Вставить(ЭлементСтруктуры.Ключ, ТЗДокументы);
				
	КонецЦикла;
		
	// вставляем структуру, хранящую таблицы значений с данными по товаро-транспортным документам
	СписокСохранения.Вставить("мСтрукТЗДокументы", СтрукТЗДокументы);
	
	// вставляем структуру, хранящую данные об отправителе, подписантах и курьере
	СписокСохранения.Вставить("мСтруктураРеквизитовВыгрузки", мСтруктураРеквизитовВыгрузки);
	
	// вставляем спецификации раздел1
	СписокСохранения.Вставить("мТЗСпецификацийРаздел1", ДанныеФормыВЗначение(мТЗСпецификацийРаздел1, Тип("ТаблицаЗначений"))); 
	
	// вставляем спецификации раздел1
	СписокСохранения.Вставить("мТЗСпецификацийРаздел1_07", ДанныеФормыВЗначение(мТЗСпецификацийРаздел1_07, Тип("ТаблицаЗначений"))); 

	// вставляем спецификации раздел3
	СписокСохранения.Вставить("мТЗСпецификацийРаздел3", ДанныеФормыВЗначение(мТЗСпецификацийРаздел3, Тип("ТаблицаЗначений"))); 
	
	МассивТЗСпецификацийПрил = Новый Массив;
	
	Для Каждого ЭлементТаблицы Из мМассивТЗСпецификацийПрил Цикл
		
		МассивТЗСпецификацийПрил.Добавить(ДанныеФормыВЗначение(ЭлементТаблицы.Таблица, Тип("ТаблицаЗначений")));
		
	КонецЦикла;
		
	// вставляем массив спецификации Приложения
	СписокСохранения.Вставить("мМассивТЗСпецификацийПрил", МассивТЗСпецификацийПрил);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("ДополнительныеДанныеРазделов", ДополнительныеДанныеРазделов);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0 ИЛИ ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 2) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
		
		Если Раздел.ИмяСтраницы = "Приложение" Тогда
			Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]] Цикл
		   		Если Страница.ДополнительныеДанные.Количество() = 0 Тогда
					СтруктураДополнительныхДанных = Новый Структура;
					Страница.ДополнительныеДанные.Очистить();
					Страница.ДополнительныеДанные.Добавить(СтруктураДополнительныхДанных);
					Страница.ДополнительныеДанные[0].Пометка = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "Приложение" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Приложение" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыПриложение";
						
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Сведения"
		  ИЛИ НаимРаздела = "Зачет" Тогда	
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
									
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
						
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
				
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
        Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
		
	КонецЦикла;

 	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьДатуВЯчейкахНаСервере();

	// Заполнить ТОЛЬКО параметры по текущей организации зависящие от даты подписания документа
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда	
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда	
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	// Изменение связанных данных.
	Если КодПоказателя = "П000010000104" Тогда
		
		НомерСтроки = Сред(Область.Имя, 15);
		
		Область.Значение = РезультатВыбора.Название;
		ТабличныйДокумент.Области["П000010000122_" + НомерСтроки].Значение = РезультатВыбора.Код;
		
		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы1);
		
		СтруктураГруппы1 = ЭтаФорма[СтруктураГруппы1];
		
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000104 = РезультатВыбора.Название;
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000122 = РезультатВыбора.Код;
		
	ИначеЕсли КодПоказателя = "П000010000123" Тогда
		
		НомерСтроки = Сред(Область.Имя, 15);
		
		Область.Значение = РезультатВыбора.Название;
		ТабличныйДокумент.Области["П000010000124_" + НомерСтроки].Значение = РезультатВыбора.Код;
		
		СтруктураГруппы1 = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураГруппы1);
		
		СтруктураГруппы1 = ЭтаФорма[СтруктураГруппы1];
		
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000123 = РезультатВыбора.Название;
		СтруктураГруппы1[Число(НомерСтроки) - 1].П000010000124 = РезультатВыбора.Код;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "")
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат; // отключен режим АвтоЗаполнения
	КонецЕсли;
	
	НомПоз = СтрНайти(ОбластьИмя, "_");
	
	Если НомПоз > 0 Тогда
		ОбластьИмя = Лев(ОбластьИмя, НомПоз - 1);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		
		Группа1 = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, Группа1);
		
		Группа1 = Форма[Группа1];
				
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000114, ОбластьИмя) > 0 Тогда
			
			РассчитыватьИтог14 = Истина;
			ПроверитьАдвалорные = (НЕ Группа1.Количество() = 1);
			
			Если ПроверитьАдвалорные Тогда

				Для Инд = 0 По Группа1.Количество() - 1 Цикл
					СуффиксНомера = "_" + Формат(Инд + 1, "ЧГ=0");
					
					НБАкцизов = Форма.ТабличныйДокумент.Области["П000010000114" + СуффиксНомера].Значение;
					Если НБАкцизов = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтАкцизТверд = СтрЗаменить(Форма.ТабличныйДокумент.Области["П000010000116" + СуффиксНомера].Значение, ",", ".");
					ЗаполненаСтАкцизТверд = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И Число(СтАкцизТверд) <> 0));
					
					Если ЗаполненаСтАкцизТверд Тогда
						РассчитыватьИтог14 = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СуммаПоКолонке14 = 0;
			
			Для Инд = 0 По Группа1.Количество() - 1 Цикл
				
				Строка = "_" + Формат(Инд + 1, "ЧГ=0");
				
				П000010000114 = Форма.ТабличныйДокумент.Области["П000010000114" + Строка].Значение; 
				СуммаПоКолонке14 = СуммаПоКолонке14 + П000010000114;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000010000114.Значение = ?(РассчитыватьИтог14, СуммаПоКолонке14, 0);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000115, ОбластьИмя) > 0 Тогда
			
			СуммаПоКолонке15 = 0;
			
			Для Инд = 0 По Группа1.Количество() - 1 Цикл
				
				Строка = "_" + Формат(Инд + 1, "ЧГ=0");
				
				П000010000115 = Форма.ТабличныйДокумент.Области["П000010000115" + Строка].Значение;
				СуммаПоКолонке15 = СуммаПоКолонке15 + П000010000115;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000010000115.Значение = СуммаПоКолонке15;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000119, ОбластьИмя) > 0 Тогда
			
			СуммаПоКолонке19 = 0;
			
			Для Инд = 0 По Группа1.Количество() - 1 Цикл
				
				Строка = "_" + Формат(Инд + 1, "ЧГ=0");
				
				П000010000119 = Форма.ТабличныйДокумент.Области["П000010000119" + Строка].Значение; 
				СуммаПоКолонке19 = СуммаПоКолонке19 + П000010000119;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000010000119.Значение = Окр(СуммаПоКолонке19);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000010000120, ОбластьИмя) > 0 Тогда
			
			СуммаПоКолонке20 = 0;
			
			Для Инд = 0 По Группа1.Количество() - 1 Цикл
				
				Строка = "_" + Формат(Инд + 1, "ЧГ=0");
				
				П000010000120 = Форма.ТабличныйДокумент.Области["П000010000120" + Строка].Значение;
				СуммаПоКолонке20 = СуммаПоКолонке20 + П000010000120;
				
			КонецЦикла;
			
			Форма.ТабличныйДокумент.Области.П000010000120.Значение = Окр(СуммаПоКолонке20);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "" Тогда	
		
		Расчет(Форма, "Раздел1", ОбластьИмя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		Элементы.Обновить.Доступность                  = Истина;
	Иначе
		Элементы.Обновить.Доступность                  = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Сведения"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Зачет" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе 
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
						
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
		
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Приложение" Тогда
	 
	  	Если ИмяТекРаздела = "Приложение" Тогда
	    	НаимТаблицыСтраницы = "ТаблицаСтраницыПриложение";
	    КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
						
	// Многостраничные и многострочные разделы.
	//	
	ИначеЕсли ИмяТекРаздела = "Сведения"
		  ИЛИ ИмяТекРаздела = "Зачет" Тогда
		  
		Если ИмяТекРаздела = "Сведения" Тогда
			  
			НаимТаблицыСтраницы = "ТаблицаСтраницыСведения"; 
			
		ИначеЕсли ИмяТекРаздела = "Зачет" Тогда
			  
			НаимТаблицыСтраницы = "ТаблицаСтраницыЗачет";
			
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
								
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
								
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		
	// Обычные разделы.
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если НЕ ИмяТекРаздела = "Сведения"
		И НЕ ИмяТекРаздела = "Зачет" Тогда
		
		ВывестиДату(ЭтаФорма);
		
		ТабличныйДокумент.Области.НомерЗаяв.Значение = СтруктураДанныхРаздел1.НомерЗаяв;
		
	КонецЕсли;
	
	Если ИмяТекРаздела = "Раздел2" Тогда
		
	Иначе
		
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
						
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
		Если ИмяТекРаздела = "Раздел1" Тогда
			СнятьЗащитуСЯчеек(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		КонецЕсли;
						
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение" Тогда
				
		мМассивТЗСпецификацийПрил.Добавить().Таблица.Очистить();
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
		
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	Если НЕ ИмяТекущейСтраницыПанели = "Сведения"
	   И НЕ ИмяТекущейСтраницыПанели = "Зачет" Тогда 
		
		ВывестиДату(ЭтаФорма);
		
		ТабличныйДокумент.Области.НомерЗаяв.Значение = СтруктураДанныхРаздел1.НомерЗаяв;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиДату(Форма)
	Форма.ТабличныйДокумент.Области.Число.Значение = Форма.ДатаПодписи;
	Форма.ТабличныйДокумент.Области.Месяц.Значение = Форма.ДатаПодписи;
	Форма.ТабличныйДокумент.Области.Год.Значение   = Форма.ДатаПодписи;
КонецПроцедуры

&НаСервере
Функция ЗаполненЛистРазделаПриложение(ЛистРаздела)
	
	ДанныеЛиста = ЛистРаздела.Данные[0].Значение;
	
	Результат = ЗначениеЗаполнено(ДанныеЛиста.ТипПрод_Пр)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПродавецИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПродавецНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.КодСтраныПродавец)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПродавецМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПродавецБайконур)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ТипПок_Пр)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПокупательИНН_КПП)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПокупательНаимОрг)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.КодСтраныПокупатель)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПокупательМестоНахожд)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ПокупательБайконур)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.НомерДог)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ДатаДог)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.НомерСпецификации)
	        ИЛИ ЗначениеЗаполнено(ДанныеЛиста.ДатаСпецификации);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	Перем СписокПоказателейНеПодлежащихОчистке;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательИНН_КПП");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательНаимОрг");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ПокупательМестоНахожд");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОРук");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ФИОБух");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Число");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Месяц");
	СписокПоказателейНеПодлежащихОчистке.Добавить("Год");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКорректировки");
	
	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	ВыбТабличноеПоле = Форма["ТабличныйДокумент"];
	ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПолеИмя);
	
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.
		
		Форма.УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок);

		Форма["ТабличныйДокумент"] = ВыбТабличноеПоле;

	КонецЕсли;
	
	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено И ВыбТабличноеПолеИмя = "Раздел1" Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();

	КонецЦикла;
		
	ИмяСтраницыПанели = ВыбТабличноеПолеИмя;
	
	ОчиститьСлужебныеДанныеРаздела(Форма, ИмяСтраницыПанели);

	#Если НаКлиенте Тогда
		Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(ИмяСтраницыПанели);
	#Иначе
		Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(ИмяСтраницыПанели);
	#КонецЕсли
          		
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыДопСтрок);
	КонецЕсли;

	Если ВыбТабличноеПолеИмя="Раздел1" Тогда
		Расчет(Форма, ВыбТабличноеПолеИмя, "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле) Экспорт
	Перем ИдГруппы;

	Если ТекТабличноеПоле = "Раздел1" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ТекТабличноеПоле = "Сведения" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ТекТабличноеПоле = "Зачет" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;	
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции

&НаСервере
Процедура УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок) Экспорт
	
	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
	
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
	
	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.
		
		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
			
			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
			
			ИмяПервойКолонки = ИмяГруппыДопСтрок + "01";
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + Формат(НСтр, "ЧГ=0");
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			// Определим область удаляемой строки
			УдаляемаяОбласть = ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
				
			// непосредственно удаляем область строки табличного документа
			ВыбТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
				
			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
			
			НСтр = НСтр - 1;
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
    	
	Возврат;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСлужебныеДанныеРаздела(Форма, ИмяСтраницыПанели)
	
	Если ИмяСтраницыПанели = "Раздел1" Тогда
		Если ТипЗнч(Форма.ДополнительныеДанныеРазделов) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
			
		Если Форма.ДополнительныеДанныеРазделов.Свойство("АдресПродавцаРаздел1") Тогда
			ОчиститьСтруктуру(Форма.ДополнительныеДанныеРазделов.АдресПродавцаРаздел1);
		КонецЕсли;
		
		Если Форма.ДополнительныеДанныеРазделов.Свойство("АдресКомиссионераРаздел1") Тогда
			ОчиститьСтруктуру(Форма.ДополнительныеДанныеРазделов.АдресКомиссионераРаздел1);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		Если ТипЗнч(Форма.ДополнительныеДанныеРазделов) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если Форма.ДополнительныеДанныеРазделов.Свойство("АдресПродавцаРаздел3") Тогда
			ОчиститьСтруктуру(Форма.ДополнительныеДанныеРазделов.АдресПродавцаРаздел3);
		КонецЕсли;
		
		Если Форма.ДополнительныеДанныеРазделов.Свойство("АдресПокупателяРаздел3") Тогда
			ОчиститьСтруктуру(Форма.ДополнительныеДанныеРазделов.АдресПокупателяРаздел3);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Приложение" Тогда
		
		СтраницыРазделаПриложение = Неопределено;
		
		Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, СтраницыРазделаПриложение);
		СтраницыРазделаПриложение = Форма[СтраницыРазделаПриложение];
		
		АктивнаяСтраница = СтраницыРазделаПриложение.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
		Если АктивнаяСтраница.Количество() = 0 Тогда
			Возврат;
		Иначе
			АктивнаяСтраница = АктивнаяСтраница[0];
		КонецЕсли;
		
		Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		Если ТипЗнч(АктивнаяСтраница.ДополнительныеДанные[0].Значение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство("АдресПродавца") Тогда
			ОчиститьСтруктуру(АктивнаяСтраница.ДополнительныеДанные[0].Значение.АдресПродавца);
			АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		КонецЕсли;
		
		Если АктивнаяСтраница.ДополнительныеДанные[0].Значение.Свойство("АдресПокупателя") Тогда
			ОчиститьСтруктуру(АктивнаяСтраница.ДополнительныеДанные[0].Значение.АдресПокупателя);
			АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСтруктуру(ОчищаемаяСтруктура)
	
	Если ТипЗнч(ОчищаемаяСтруктура) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ОчищаемаяСтруктура Цикл
		Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
			ОчиститьСтруктуру(ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ]);
		Иначе
			ОчищаемаяСтруктура[ЭлементСтруктуры.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)

	ОбновитьНаСервере();
	
	Модифицированность = Истина;
					
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаСервере();	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	мСтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Сведения"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Зачет" Тогда 
		
		ВывестиДату(ЭтаФорма);
		
		Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			ТабличныйДокумент.Области.НомерЗаяв.Значение = СтруктураДанныхРаздел1.НомерЗаяв;
		Иначе
			НомерКорректировки = 0;
			ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ТабличныйДокумент.Области.Число.Значение = ДатаПодписи;
			ТабличныйДокумент.Области.Месяц.Значение = ДатаПодписи;
			ТабличныйДокумент.Области.Год.Значение = ДатаПодписи;
		КонецЕсли;
		
	КонецЕсли;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
		
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
    			
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел2.Очистить();
	СтруктураДанныхРаздел3.Очистить();
	
	ТаблицаСтраницыПриложение.Очистить();
	ТаблицаСтраницыСведения.Очистить();
	ТаблицаСтраницыЗачет.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ДополнительныеДанныеРазделов.Очистить();

	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	СтруктураДанныхРаздел1.Вставить("НомерКорректировки", НомерКорректировки);
	
	СтруктураДанныхРаздел1.Вставить("Число", Формат(ДатаПодписи, "ДФ='d'"));
	СтруктураДанныхРаздел1.Вставить("Месяц", Формат(ДатаПодписи, "ДФ='M'"));
	СтруктураДанныхРаздел1.Вставить("Год",   Формат(ДатаПодписи, "ДФ='yyyy'"));
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыСведения.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыЗачет.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница  		  = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
                        		
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Истина);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
						
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
			СнятьЗащитуСЯчеек(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		КонецЕсли;
		
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    	        	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировки");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = 0;
		Обл1.Формат = "";
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировкиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	
	Пока Истина Цикл 
		НадоПрервать = Истина;
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл
			Если СтрНайти(Обл.Имя, "ДобавлениеСтроки_") = 1 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда 
				ПечатнаяФорма.УдалитьОбласть(Обл, ТипСмещенияТабличногоДокумента.ПоВертикали);
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл
			Если СтрНайти(Обл.Имя, "ДобавитьСтроку") = 1 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
				ОблМод = ПечатнаяФорма.Область(Обл.Верх,,Обл.Низ);
				ПечатнаяФорма.УдалитьОбласть(ОблМод, ТипСмещенияТабличногоДокумента.ПоВертикали);
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НадоПрервать Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Сведения" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Зачет" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Раздел1", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);

		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Сведения" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Зачет" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы3].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл 
		УдалитьНенужноеИзПечатнойФормы(ПолучитьИзВременногоХранилища(Лист.Значение[0]));
	КонецЦикла;
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивНомерЗаяв   = "";
	МассивЧисло       = "";
	МассивМесяц       = "";
	МассивГод       = "";
	МассивДатаПодписи = Новый Массив(8);
					
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("НомерЗаяв");
	
	Если НЕ Область = Неопределено Тогда
		
		МассивНомерЗаяв = Область.Значение;
				
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("Число");
	
	Если НЕ Область = Неопределено Тогда
		
		МассивЧисло = Область.Значение;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("Месяц");
	
	Если НЕ Область = Неопределено Тогда
		
		МассивМесяц = Область.Значение;
		
	КонецЕсли;

	Область = ИсходныйМакет.Области.Найти("Год");
	
	Если НЕ Область = Неопределено Тогда
		
		МассивГод = Область.Значение;
		
	КонецЕсли;
			
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("НомерЗаяв", МассивНомерЗаяв);
	ОбщиеРеквизитыРазделов.Вставить("Число", МассивЧисло);
	ОбщиеРеквизитыРазделов.Вставить("Месяц", МассивМесяц);
	ОбщиеРеквизитыРазделов.Вставить("Год", МассивГод);
		
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Раздел1",    "ФормаОтчета2012кв2_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",    "ФормаОтчета2012кв2_Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел3",    "ФормаОтчета2012кв2_Раздел3");
	СоответствиеРазделовМакетам.Вставить("Приложение", "ФормаОтчета2012кв2_Приложение");
	СоответствиеРазделовМакетам.Вставить("Сведения",   "ФормаОтчета2012кв2_Сведения");
	СоответствиеРазделовМакетам.Вставить("Зачет",      "ФормаОтчета2012кв2_Зачет");
                                                                                      	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
		
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[1].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
				
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
						
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФорме).Верх;
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + Формат(мСтруктураКолвоКолонокРазделов[ИдГруппы], "ЧЦ=2; ЧВН=") + "_" + КолвоСтрокВПечатнойФорме).Низ;
				
			ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
									
			Для Ном = 1 По КолвоДопСтрок Цикл
							
				МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
													
			КонецЦикла;
			
			Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
				НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			УдаляемыеОбласти = Новый Массив;
			Для Каждого Обл Из МакетПечатнойФормы.Области Цикл
				Если Обл.Лево = 0 И Обл.Право = 0 И СтрНайти(Обл.Имя, "ОсновнаяЧасть") = 0 И СтрНайти(Обл.Имя, "Ограничители") = 0 И СтрНайти(Обл.Имя, "ПустаяСтрока") = 0 Тогда
					УдаляемыеОбласти.Добавить(Обл);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Обл Из УдаляемыеОбласти Цикл
				Обл.Имя = Неопределено;
			КонецЦикла;
			
			МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, 0, НомерНижнЯчейкиОбласти, 0).Имя = "МногострочнаяЧасть";
						
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
	
	УдалитьОбластиБайконура(МакетПечатнойФормы);
	
	УдалитьПримечания(МакетПечатнойФормы);
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбластиБайконура(ПечатнаяФорма)
	
	МассивИменУдаляемыхОбластей = Новый Массив;
	МассивИменУдаляемыхОбластей.Добавить("ПродавецБайконур");
	МассивИменУдаляемыхОбластей.Добавить("ПродавецБайконурНадпись");
	МассивИменУдаляемыхОбластей.Добавить("ПокупательБайконур");
	МассивИменУдаляемыхОбластей.Добавить("ПокупательБайконурНадпись");
	МассивИменУдаляемыхОбластей.Добавить("КомиссионерБайконур");
	МассивИменУдаляемыхОбластей.Добавить("КомиссионерБайконурНадпись");
	
	Для Каждого ИмяОбласти Из МассивИменУдаляемыхОбластей Цикл
		Если ПечатнаяФорма.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			ПечатнаяФорма.Области[ИмяОбласти].Очистить(Истина, Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПримечания(ПечатнаяФорма)
	
	ИмяОбласти = "ИННОрг_1";
	Если ПечатнаяФорма.Области.Найти(ИмяОбласти) <> Неопределено Тогда
		ПечатнаяФорма.Области[ИмяОбласти].Примечание.Текст = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Раздел1" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "НомерЗаяв") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "Число")> 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "Месяц") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "Год") > 0  Тогда
					
					Продолжить;
				КонецЕсли;
				
				Если Область.Имя = "ДатаПодписи" Тогда
					МакетПечатнойФормы.Области["ДатаПодписиРук"].Значение = Область.Значение;
					МакетПечатнойФормы.Области["ДатаПодписиБух"].Значение = Область.Значение;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;

			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		НаименованиеОбласти = Реквизит.Ключ;
		
		Если ПараметрыПечати.ИмяСтраницы <> "Сведения"
		   И ПараметрыПечати.ИмяСтраницы <> "Зачет" Тогда
			
			МакетПечатнойФормы.Области[НаименованиеОбласти].Значение = Реквизит.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
			
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
				
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КаталогВремФайлов = "";
	ИмяФайла = ПараметрыВыгрузки.ИдФайл + ".xml";
	ИмяВременногоФайла = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПолноеИмяВременногоФайла(
																КаталогВремФайлов, ИмяФайла, Истина);
	
	ПотокЗаписи = Новый ЗаписьТекста(ИмяВременногоФайла, "windows-1251");
	ПотокЗаписи.Записать(ТекстВыгрузки);
	ПотокЗаписи.Закрыть();
		
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	ПараметрыВыгрузки.Вставить("АдресФайлаВыгрузкиВоВременномХранилище", ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор()));
	
	УдалитьФайлы(КаталогВремФайлов);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
						СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;

			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;

КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	мСтруктураРеквизитовВыгрузки = Неопределено;
	ДанныеСохраненногоОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Если НЕ ДанныеСохраненногоОтчета.Свойство("мСтруктураРеквизитовВыгрузки", мСтруктураРеквизитовВыгрузки) Тогда
		мСтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
	КонецЕсли;
	
	ПараметрыВыгрузки = Новый Структура;
    	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);

	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДокДата", ТекущаяДатаСеанса()); // Используется для проверки даты выгрузки документа
	
	ПараметрыВыгрузки.Вставить("КодИФНС",		мСтруктураРеквизитовВыгрузки.КодИФНС);
	
	ПараметрыВыгрузки.Вставить("ПрОтпр", Строка(мСтруктураРеквизитовВыгрузки.ПрОтпр));

	ПараметрыВыгрузки.Вставить("ПрОтпр",		Формат(мСтруктураРеквизитовВыгрузки.ПрОтпр, ""));
                                                              	
	Если мСтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ Тогда
		ПараметрыВыгрузки.Вставить("НаимОтпр", 		мСтруктураРеквизитовВыгрузки.НаимОтпр);
		ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		мСтруктураРеквизитовВыгрузки.ИННЮЛОтпр);
		ПараметрыВыгрузки.Вставить("КППОтпр",       мСтруктураРеквизитовВыгрузки.КППОтпр);
	Иначе
		ПараметрыВыгрузки.Вставить("ИННФЛОтпр",     мСтруктураРеквизитовВыгрузки.ИННФЛОтпр);	
		ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр", мСтруктураРеквизитовВыгрузки.ФамилияФЛОтпр);
		ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",     мСтруктураРеквизитовВыгрузки.ИмяФЛОтпр);
		ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр",мСтруктураРеквизитовВыгрузки.ОтчествоФЛОтпр);	
	КонецЕсли;

	Если мСтруктураРеквизитовВыгрузки.ПрОтпр = 1 Тогда
		ПараметрыВыгрузки.Вставить("ПрПодп1",       Формат(мСтруктураРеквизитовВыгрузки.ПрПодп1, ""));
		Если НЕ ЭтоПБОЮЛ ИЛИ (ЭтоПБОЮЛ И НЕ ПустаяСтрока(мСтруктураРеквизитовВыгрузки.ФамилияПодп2 + мСтруктураРеквизитовВыгрузки.ИмяПодп2 + мСтруктураРеквизитовВыгрузки.ОтчествоПодп2)) Тогда
			ПараметрыВыгрузки.Вставить("ПрПодп2", "4");
			ПараметрыВыгрузки.Вставить("ИННФЛПодп2",    мСтруктураРеквизитовВыгрузки.ИННФЛПодп2);
			ПараметрыВыгрузки.Вставить("ДолжностьПодп2",мСтруктураРеквизитовВыгрузки.ДолжностьПодп2);
			
			ПараметрыВыгрузки.Вставить("ФамилияПодп2",  мСтруктураРеквизитовВыгрузки.ФамилияПодп2);
			ПараметрыВыгрузки.Вставить("ИмяПодп2",      мСтруктураРеквизитовВыгрузки.ИмяПодп2);
			ПараметрыВыгрузки.Вставить("ОтчествоПодп2", мСтруктураРеквизитовВыгрузки.ОтчествоПодп2);
			
			Если мСтруктураРеквизитовВыгрузки.Свойство("НаимДовПодп2") Тогда
				ПараметрыВыгрузки.Вставить("НаимДовПодп2",  мСтруктураРеквизитовВыгрузки.НаимДовПодп2);
				ПараметрыВыгрузки.Вставить("НомерДовПодп2", мСтруктураРеквизитовВыгрузки.НомерДовПодп2);
				ПараметрыВыгрузки.Вставить("ДатаДовПодп2",  Формат(мСтруктураРеквизитовВыгрузки.ДатаДовПодп2, "ДФ=дд.ММ.гггг"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если мСтруктураРеквизитовВыгрузки.ПрПодп1 = 3 Тогда
		ПараметрыВыгрузки.Вставить("НаимДовПодп1",		мСтруктураРеквизитовВыгрузки.НаимДовПодп1);
		ПараметрыВыгрузки.Вставить("НомерДовПодп1",		мСтруктураРеквизитовВыгрузки.НомерДовПодп1);
		ПараметрыВыгрузки.Вставить("ДатаДовПодп1",		Формат(мСтруктураРеквизитовВыгрузки.ДатаДовПодп1, "ДФ=дд.ММ.гггг"));
	КонецЕсли;
	                                                          	
	ПараметрыВыгрузки.Вставить("ИННФЛПодп1",    мСтруктураРеквизитовВыгрузки.ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп1",мСтруктураРеквизитовВыгрузки.ДолжностьПодп1);
                                                              	
	ПараметрыВыгрузки.Вставить("ФамилияПодп1",  мСтруктураРеквизитовВыгрузки.ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп1",      мСтруктураРеквизитовВыгрузки.ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп1", мСтруктураРеквизитовВыгрузки.ОтчествоПодп1);
	
	Если НЕ мСтруктураРеквизитовВыгрузки.ОтправленПочтой Тогда
		
		ПараметрыВыгрузки.Вставить("ПрКурьер",      Формат(мСтруктураРеквизитовВыгрузки.ПрКурьер, ""));
		ПараметрыВыгрузки.Вставить("ИННФЛКурьер",   мСтруктураРеквизитовВыгрузки.ИННФЛКурьер);
		
		ПараметрыВыгрузки.Вставить("ФамилияКурьер", мСтруктураРеквизитовВыгрузки.ФамилияКурьер);
		ПараметрыВыгрузки.Вставить("ИмяКурьер",     мСтруктураРеквизитовВыгрузки.ИмяКурьер);
		ПараметрыВыгрузки.Вставить("ОтчествоКурьер",мСтруктураРеквизитовВыгрузки.ОтчествоКурьер);
		
		Если мСтруктураРеквизитовВыгрузки.ПрКурьер = 3 Тогда
			
			ПараметрыВыгрузки.Вставить("НаимДовКурьер",  мСтруктураРеквизитовВыгрузки.НаимДовКурьер);
			ПараметрыВыгрузки.Вставить("НомерДовКурьер", мСтруктураРеквизитовВыгрузки.НомерДовКурьер);
			ПараметрыВыгрузки.Вставить("ДатаДовКурьер",  Формат(мСтруктураРеквизитовВыгрузки.ДатаДовКурьер, "ДФ=дд.ММ.гггг"));
			
		КонецЕсли;
        
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",             "ON_ZVLRPOK_2_430_14_05_05_02.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"ON_ZVLRPOK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "Документ");

	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СтруктураXML505");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
		
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
			
	ИдентОтпр = "";
	Если ПараметрыВыгрузки.Свойство("ИННФЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННФЛОтпр;
	ИначеЕсли ПараметрыВыгрузки.Свойство("ИННЮЛОтпр") И ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛОтпр) Тогда
		ИдентОтпр = ПараметрыВыгрузки.ИННЮЛОтпр + ПараметрыВыгрузки.КППОтпр;
	КонецЕсли;
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
	            + "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ПараметрыВыгрузки.КодИФНС
				+ "_" + ИдентОтпр
				+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
				+ "_" + Строка(Новый УникальныйИдентификатор);			
			
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти = Стр.Код Тогда
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);	
				ЗаполнитьСодержательнуюЧасть(Стр);
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Стр.Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Стр.Ключ]);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ (" + АдресПоказателя(Стр)+ ") меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Формирование XML: Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """  (" + АдресПоказателя(Стр)+ ") больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция АдресПоказателя(СтрокаПоказателя)
	
	Результат = СтрокаПоказателя.Код;
	
	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", ПараметрыВыгрузки.ИмяФайлаСхемы);
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	Раздел1 	= мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел3 	= мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	Приложение 	= мДанныеОтчета.Приложение;
	Сведения 	= мДанныеОтчета.Сведения;
	Зачет 		= мДанныеОтчета.Зачет;
	
	ДанныеСохраненногоОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
	УзелСвЗвл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвЗвл");
	ЗаполнитьДаннымиУзел(Раздел1, УзелСвЗвл);
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "НомерДокНП", Формат(Раздел1.НомерЗаяв,"ЧН=; ЧГ=0"));
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "ДатаДокНП", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "ПрЛизинг", ?(СокрЛП(Раздел1.ПрЛизинг) = "", "0", "1"));
	ЗадатьЗначениеЭлемента(УзелСвЗвл, "ПрДавСырья", ?(СокрЛП(Раздел1.ПрДавСырья) = "", "0", "1"));
	
	УзелСвКонтракт1 = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвКонтракт1");
	
	Если НЕ ПустаяСтрока(Раздел1.ПродавецБайконур) Тогда
		ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "ПрБкнрПродР1", "1");
	КонецЕсли;
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "ИдНомПродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "КПППродР1", РазделитьИННКПП(Раздел1.ПродавецИНН_КПП).КПП);
	
	Если НЕ ПустаяСтрока(Раздел1.ПокупательБайконур) Тогда
		ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "ПрБкнрПокР1", "1");
	КонецЕсли;
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "ИдНомПокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт1, "КПППокР1", РазделитьИННКПП(Раздел1.ПокупательИНН_КПП).КПП);
	
	УзелСвКонтр1 = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт1, "СвКонтр1");
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтр1, "СвСпециф");
	
	Для Сч = 1 По ДанныеСохраненногоОтчета.мТЗСпецификацийРаздел1.Количество() Цикл
		Строка = ДанныеСохраненногоОтчета.мТЗСпецификацийРаздел1[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтр1, ШаблонУзелСвСпециф);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	УзелСвКонтрКомисс = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвКонтрКомисс");
	
	Если НЕ ПустаяСтрока(Раздел1.КомиссионерБайконур) Тогда
		ЗадатьЗначениеЭлемента(УзелСвКонтрКомисс, "ПрБкнрОрг", "1");
	КонецЕсли;
	ЗадатьЗначениеЭлемента(УзелСвКонтрКомисс, "ИдНомОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтрКомисс, "КППОрг", РазделитьИННКПП(Раздел1.ИННОрг_1).КПП);

	УзелСвКонтракт2 = ПолучитьПодчиненныйЭлемент(УзелСвКонтрКомисс, "СвКонтракт2");
	
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт2, "СвСпециф");
	
	Для Сч = 1 По ДанныеСохраненногоОтчета.мТЗСпецификацийРаздел1_07.Количество() Цикл
		Строка = ДанныеСохраненногоОтчета.мТЗСпецификацийРаздел1_07[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтракт2, ШаблонУзелСвСпециф);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	ШаблонУзелСвТовар = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвТовар");
	ЧислоВыгруженныхСтрок = 0;
	НомерСтроки = 1;
	Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Раздел1, "П000010000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		
		Если ЗначениеЗаполнено(Раздел1["П000010000102_" + Формат(НомерСтроки, "ЧГ=")]) Тогда
			ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;					
			УзелСвТовар = СкопироватьУзел(УзелСвЗвл, ШаблонУзелСвТовар);
			ВыгрузитьСтрокуМногострочнойЧасти(Раздел1, УзелСвТовар, НомерСтроки);
			
			ЗадатьЗначениеЭлемента(УзелСвТовар, "НомТовПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
			
			// Если единица измерения указана не из списка, тогда графа 22 будет пустой,
			// в этом случае будем выгружать графу 4.
			
			ИмяСлужебногоПоля = "П000010000122_" + Формат(НомерСтроки, "ЧГ=");
			
			Если ЗначениеЗаполнено(ЭтаФорма.П0000100001[НомерСтроки - 1].П000010000122) Тогда
				ЗадатьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТов", СокрЛП(ЭтаФорма.П0000100001[НомерСтроки - 1].П000010000122));
			Иначе
				ИмяПоляЕдИзм = "П000010000104_" + Формат(НомерСтроки, "ЧГ=");
				ЗадатьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТов", СокрЛП(Раздел1[ИмяПоляЕдИзм]));
			КонецЕсли;
			
			ЗадатьЗначениеЭлемента(УзелСвТовар, "БазаВал", "1");
			
			СтАкцизТверд 	= СтрЗаменить(Раздел1["П000010000116_" + Формат(НомерСтроки, "ЧГ=")], ",", ".");
			СтАкцизАдвал 	= СтрЗаменить(Раздел1["П000010000117_" + Формат(НомерСтроки, "ЧГ=")], ",", ".");
			СтНДС 			= СтрЗаменить(Раздел1["П000010000118_" + Формат(НомерСтроки, "ЧГ=")], ",", ".");
			
			СтруктураСтавок = Новый Структура;
			СтруктураСтавок.Вставить("Ст16", СтАкцизТверд);
			СтруктураСтавок.Вставить("Ст17", СтАкцизАдвал);
			СтруктураСтавок.Вставить("Ст18", СтНДС);
			СтруктураСтавок.Вставить("Ст21", Раздел1["П000010000121_" + Формат(НомерСтроки, "ЧГ=")]);
			
			СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
						
			ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
			ЗадатьЗначениеЭлемента(УзелСвТовар, "ПрОсвАкциз", ПрОсвАкциз);
			ЗадатьЗначениеЭлемента(УзелСвТовар, "ПрОсвНДС",   ПрОсвНДС);
			
			// Значение единицы измерения дополнительной величины налоговой базы.
			ЗначениеКоличТов = Раздел1["П000010000105_" + Формат(НомерСтроки, "ЧГ=")];
			ЗначениеНБАкциз = Раздел1["П000010000114_" + Формат(НомерСтроки, "ЧГ=")];
			ЗначениеПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
			ЗаполнятьЕдИзмТовНБАкц = (ЗначениеКоличТов <> ЗначениеНБАкциз)
			                       И (ЗначениеКоличТов <>0)
			                       И (ЗначениеПрОсвАкциз <> 3 И ЗначениеПрОсвАкциз <> 4);
			Если ЗаполнятьЕдИзмТовНБАкц Тогда
				
				ЗначениеЕдИзмТовНБАкц = ЭтаФорма.П0000100001[НомерСтроки - 1].П000010000124;
				
				ЗадатьЗначениеЭлемента(УзелСвТовар, "ЕдИзмТовНБАкц", ЗначениеЕдИзмТовНБАкц);
				
			КонецЕсли;
			
			// Поскольку на форме эти показатели строковые - при выгрузке приводим к числовому виду.
			ЗаполненаТвердаяСтавкаАкцизов = (СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ (ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)) И Число(СтАкцизТверд) <> 0));
			СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), "0.00", СтАкцизТверд);
			СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), "0.00", СтАкцизАдвал);
			СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), "0.00", СтНДС);

			Если ЗаполненаТвердаяСтавкаАкцизов Тогда
				ЗадатьЗначениеЭлемента(УзелСвТовар, "СтАкцизТверд", ?(ПрОсвАкциз = 2, "-1", СтАкцизТверд));
			Иначе
				ЗадатьЗначениеЭлемента(УзелСвТовар, "СтАкцизАдвал", ?(ПрОсвАкциз = 2, "-1", СтАкцизАдвал));
			КонецЕсли;
			ЗадатьЗначениеЭлемента(УзелСвТовар, "СтНДС",        ?(ПрОсвНДС = 2,   "-1", СтНДС));
			
			// Сведения о товарно-транспортных документах.
			ШаблонУзелСвТСД = ПолучитьПодчиненныйЭлемент(УзелСвТовар, "СвТСД");
			ТТДокументы = Неопределено;
			Если НЕ ДанныеСохраненногоОтчета.мСтрукТЗДокументы.Свойство("К_" + Формат(НомерСтроки, "ЧГ="), ТТДокументы) ИЛИ НЕ ЗначениеЗаполнено(ТТДокументы) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрТТДокумент Из ТТДокументы Цикл
				
				ТТДСерия = ВРЕГ(СокрЛП(СтрТТДокумент.Серия));
				ТТДНомер = ВРЕГ(СокрЛП(СтрТТДокумент.Номер));
				ТТДДата = СтрТТДокумент.Дата;
				
				Если НЕ ЗначениеЗаполнено(ТТДСерия) И НЕ ЗначениеЗаполнено(ТТДНомер) И НЕ ЗначениеЗаполнено(ТТДДата) Тогда
					Продолжить;
				КонецЕсли;
				
				УзелСвТСД = СкопироватьУзел(УзелСвТовар, ШаблонУзелСвТСД);
				ЗадатьЗначениеЭлемента(УзелСвТСД, "СерНомТСД", ТТДСерия + ?(ПустаяСтрока(ТТДСерия) ИЛИ ПустаяСтрока(ТТДНомер), "", ", ") + ТТДНомер);
				ЗадатьЗначениеЭлемента(УзелСвТСД, "ДатаТСД", Формат(ТТДДата, "ДФ=dd.MM.yyyy"));
			КонецЦикла;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
		
	//выгрузка раздела 3
	УзелСвКонтракт3 = ПолучитьПодчиненныйЭлемент(УзелСвЗвл, "СвКонтракт3");
	ЗаполнитьДаннымиУзел(Раздел3, УзелСвКонтракт3);
	
	//тип продавца
	стрТипПрод = Раздел3.ТипПрод_3;
	Если стрТипПрод = "(комитент)" Тогда
		ТипПрод_3 = 0;
	ИначеЕсли стрТипПрод = "(доверитель)" Тогда
		ТипПрод_3 = 1;
	ИначеЕсли стрТипПрод = "(принципал)" Тогда
		ТипПрод_3 = 2;
	ИначеЕсли стрТипПрод = "(продавец)" Тогда
		ТипПрод_3 = 6;
	Иначе
		ТипПрод_3 = "";
	КонецЕсли;
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ТипПродР3", ТипПрод_3);
	
	//тип покупателя
	стрТипПок = Раздел3.ТипПок_3;
	Если стрТипПок = "(комиссионер)" Тогда
		ТипПок_3 = 3;
	ИначеЕсли стрТипПок = "(поверенный)" Тогда
		ТипПок_3 = 4;
	ИначеЕсли стрТипПок = "(агент)" Тогда
		ТипПок_3 = 5;
	ИначеЕсли стрТипПок = "(покупатель)" Тогда
		ТипПок_3 = 7;
	Иначе
		ТипПок_3 = "";                     
	КонецЕсли;
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ТипПокР3", ТипПок_3);
	
	Если НЕ ПустаяСтрока(Раздел3.ПродавецБайконур) Тогда
		ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПродР3", "1");
	КонецЕсли;
	Если НЕ ПустаяСтрока(Раздел3.ПокупательБайконур) Тогда
		ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ПрБкнрПокР3", "1");
	КонецЕсли;
	
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "КПППродР3", РазделитьИННКПП(Раздел3.ПродавецИНН_КПП).КПП);
	
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "ИдНомПокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).ИНН);
	ЗадатьЗначениеЭлемента(УзелСвКонтракт3, "КПППокР3", РазделитьИННКПП(Раздел3.ПокупательИНН_КПП).КПП);
	
	УзелСвКонтрР3 = ПолучитьПодчиненныйЭлемент(УзелСвКонтракт3, "СвКонтрР3");
	ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрР3, "СвСпециф");
	
	Для Сч = 1 По ДанныеСохраненногоОтчета.мТЗСпецификацийРаздел3.Количество() Цикл
		Строка = ДанныеСохраненногоОтчета.мТЗСпецификацийРаздел3[Сч - 1];
		
		УзелСвСпециф = СкопироватьУзел(УзелСвКонтрР3, ШаблонУзелСвСпециф);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
		ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	// выгружаем сведения о выписках раздела "Сведения"
	НомерБанкаПП = 0;
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	Для Каждого ЛистСведений Из Сведения Цикл
		ДанныеЛиста = ЛистСведений.Данные;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста,УзелСвПлДок);
		
		ШаблонУзелСвВыпБанк = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвВыпБанк");
		
		ЧислоВыгруженныхСтрок = 0;
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, "П000020000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			Если ЗначениеЗаполнено(ДанныеЛиста["П000020000102_" + Формат(НомерСтроки, "ЧГ=")]) Тогда
				
				ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;					
				УзелСвВыпБанк = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвВыпБанк);
				ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвВыпБанк, НомерСтроки);
				ЗадатьЗначениеЭлемента(УзелСвВыпБанк, "НомВыпПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			ЗадатьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
	КонецЦикла;
	
	// выгружаем сведения раздела "Зачет"
	//НомерБанкаПП = 0; //закомментировал - счетчик не нужно обнулять
	ШаблонУзелСвПлДок = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвПлДок");
	Для Каждого ЛистЗачет Из Зачет Цикл
		ДанныеЛиста = ЛистЗачет.Данные[0].Значение;
		
		УзелСвПлДок = СкопироватьУзел(УзелРодитель, ШаблонУзелСвПлДок);
		ЗаполнитьДаннымиУзел(ДанныеЛиста,УзелСвПлДок);
		ЗадатьЗначениеЭлемента(УзелСвПлДок, "ТипПлат", ДанныеЛиста.ТипПлатЗачет);
		
		ШаблонУзелСвЗачет = ПолучитьПодчиненныйЭлемент(УзелСвПлДок, "СвЗачет");
		
		ЧислоВыгруженныхСтрок = 0;
		НомерСтроки = 1;
		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, "П000030000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			Если ЗначениеЗаполнено(ДанныеЛиста["П000030000102_" + Формат(НомерСтроки, "ЧГ=")]) Тогда
				
				ЧислоВыгруженныхСтрок = ЧислоВыгруженныхСтрок + 1;					
				УзелСвЗачет = СкопироватьУзел(УзелСвПлДок, ШаблонУзелСвЗачет);
				ВыгрузитьСтрокуМногострочнойЧасти(ДанныеЛиста, УзелСвЗачет, НомерСтроки);
				ЗадатьЗначениеЭлемента(УзелСвЗачет, "НомПП", Формат(ЧислоВыгруженныхСтрок, "ЧГ="));
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если НЕ УзелПуст(УзелСвПлДок) Тогда
			НомерБанкаПП = НомерБанкаПП + 1;
			ЗадатьЗначениеЭлемента(УзелСвПлДок, "НомБПП", Формат(НомерБанкаПП, "ЧГ="));
		КонецЕсли;
	КонецЦикла;
	
	// выгружаем приложения
	НомерПриложения = 0;
	ШаблонУзелСвКонтрПр = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СвКонтрПр");
	Для Каждого ЛистПриложения Из Приложение Цикл
		
		Индекс = Приложение.Индекс(ЛистПриложения);
		
		ДанныеЛиста = ЛистПриложения.Данные[0].Значение;
		
		УзелСвКонтрПр = СкопироватьУзел(УзелРодитель, ШаблонУзелСвКонтрПр);
		ЗаполнитьДаннымиУзел(ДанныеЛиста,УзелСвКонтрПр);
		
		//тип продавеца
		стрТипПрод = ДанныеЛиста.ТипПрод_Пр;
		Если стрТипПрод = "(комитент)" Тогда
			ТипПрод_Пр = 0;
		ИначеЕсли стрТипПрод = "(доверитель)" Тогда
			ТипПрод_Пр = 1;
		ИначеЕсли стрТипПрод = "(принципал)" Тогда
			ТипПрод_Пр = 2;
		ИначеЕсли стрТипПрод = "(комиссионер)" Тогда
			ТипПрод_Пр = 3;
		ИначеЕсли стрТипПрод = "(поверенный)" Тогда
			ТипПрод_Пр = 4;
		ИначеЕсли стрТипПрод = "(агент)" Тогда
			ТипПрод_Пр = 5;
		ИначеЕсли стрТипПрод = "(продавец)" Тогда
			ТипПрод_Пр = 6;
		Иначе
			ТипПрод_Пр = "";
		КонецЕсли;
		
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ТипПродП", ТипПрод_Пр);
		
		//тип покупателя
		стрТипПок = ДанныеЛиста.ТипПок_Пр;
		Если стрТипПок = "(комитент)" Тогда
			ТипПок_Пр = 0;
		ИначеЕсли стрТипПок = "(доверитель)" Тогда
			ТипПок_Пр = 1;
		ИначеЕсли стрТипПок = "(принципал)" Тогда
			ТипПок_Пр = 2;
		ИначеЕсли стрТипПок = "(комиссионер)" Тогда
			ТипПок_Пр = 3;
		ИначеЕсли стрТипПок = "(поверенный)" Тогда
			ТипПок_Пр = 4;
		ИначеЕсли стрТипПок = "(агент)" Тогда
			ТипПок_Пр = 5;
		ИначеЕсли стрТипПок = "(покупатель)" Тогда
			ТипПок_Пр = 7;
		Иначе
			ТипПок_Пр = "";
		КонецЕсли;
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ТипПокП", ТипПок_Пр);
		
		Если НЕ ПустаяСтрока(ДанныеЛиста.ПродавецБайконур) Тогда
			ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПродП", "1");
		КонецЕсли;
		Если НЕ ПустаяСтрока(ДанныеЛиста.ПокупательБайконур) Тогда
			ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ПрБкнрПокП", "1");
		КонецЕсли;

		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПродП", РазделитьИННКПП(ДанныеЛиста.ПродавецИНН_КПП).ИНН);
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "КПППродП", 	РазделитьИННКПП(ДанныеЛиста.ПродавецИНН_КПП).КПП);
		
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "ИдНомПокП", 	РазделитьИННКПП(ДанныеЛиста.ПокупательИНН_КПП).ИНН);
		ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "КПППокП", 	РазделитьИННКПП(ДанныеЛиста.ПокупательИНН_КПП).КПП);
		
		УзелСвКонтрП = ПолучитьПодчиненныйЭлемент(УзелСвКонтрПр, "СвКонтрП");
		ШаблонУзелСвСпециф = ПолучитьПодчиненныйЭлемент(УзелСвКонтрП, "СвСпециф");
		
		Если ДанныеСохраненногоОтчета.мМассивТЗСпецификацийПрил.Количество() > 0 Тогда
			
			Для Сч = 1 По ДанныеСохраненногоОтчета.мМассивТЗСпецификацийПрил[Индекс].Количество() Цикл
				Строка = ДанныеСохраненногоОтчета.мМассивТЗСпецификацийПрил[Индекс][Сч - 1];
				
				УзелСвСпециф = СкопироватьУзел(УзелСвКонтрП, ШаблонУзелСвСпециф);
				ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомПСпециф", Сч);
				ЗадатьЗначениеЭлемента(УзелСвСпециф, "НомСпециф", СокрЛП(Строка.Номер));
				ЗадатьЗначениеЭлемента(УзелСвСпециф, "ДатаСпециф", Формат(Строка.Дата, "ДФ=dd.MM.yyyy"));
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ УзелПуст(УзелСвКонтрПр) Тогда
			НомерПриложения = НомерПриложения + 1;
			ЗадатьЗначениеЭлемента(УзелСвКонтрПр, "НомКонтрПП", Формат(НомерПриложения, "ЧГ="));
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
	
	Возврат (Окр(ЗначениеСуммы) <> 0)
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	РодительСтрока = ?(Родитель = Неопределено, Узел.Владелец(), Родитель);
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = РодительСтрока.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = РодительСтрока.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= РодительСтрока.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = РодительСтрока.Строки.Добавить();
	Иначе
		НовыйУзел = РодительСтрока.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
	
	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			Попытка
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			Исключение
				Продолжить;
			КонецПопытки;
						
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
		
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		
		УдалитьДополнительнуюСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АнализироватьПоляСтавки(СтруктураСтавок)

	СтруктураСтавокМодиф = Новый Структура;
	
	Если СтруктураСтавок.Ст18 = "Льгота" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель1", 2);
	Иначе 	
		СтруктураСтавокМодиф.Вставить("СтавкаНДС", ?(СтруктураСтавок.Ст18 = "", 0, Число(СтруктураСтавок.Ст18)));
		СтруктураСтавокМодиф.Вставить("Переключатель1", 1);
	КонецЕсли;
	
	Если СтруктураСтавок.Ст16 = "" И СтруктураСтавок.Ст17 = "" Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза",0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	ИначеЕсли СтруктураСтавок.Ст16 = "Льгота" И Число(СтруктураСтавок.Ст17) = 0 Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли СтруктураСтавок.Ст16 = "-" И СтруктураСтавок.Ст17 = "-" Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		
		Если СтруктураСтавок.Ст21 = " " Тогда
			СтруктураСтавокМодиф.Вставить("Переключатель3", 4);
		Иначе
			СтруктураСтавокМодиф.Вставить("Переключатель3", 3);
		КонецЕсли;
		
	ИначеЕсли СтруктураСтавок.Ст17 = "Льгота" И Число(СтруктураСтавок.Ст16) = 0 Тогда	
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", 0);
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 2);
	ИначеЕсли ?(СтруктураСтавок.Ст17 = "", 0, Число(СтруктураСтавок.Ст17)) = 0  Тогда
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст16 = "", 0, Число(СтруктураСтавок.Ст16)));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 1);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	Иначе 
		СтруктураСтавокМодиф.Вставить("СтавкаАкциза", ?(СтруктураСтавок.Ст17 = "", 0, Число(СтруктураСтавок.Ст17)));
		СтруктураСтавокМодиф.Вставить("Переключатель2", 2);
		СтруктураСтавокМодиф.Вставить("Переключатель3", 1);
	КонецЕсли;
	
	Возврат СтруктураСтавокМодиф

КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				Попытка
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
					
				Исключение
					
					Продолжить;
					
				КонецПопытки;
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено, ВыгружатьПустую = Ложь)
	
	Если ПоказателиИсключения = Неопределено Тогда
		СтрИсключения = Новый Структура;
	Иначе
		СтрИсключения = Новый Структура(ПоказателиИсключения);
	КонецЕсли;
	
	СуффиксТекущейСтроки = Формат(НомерСтроки, "ЧГ=");
	
	СтрокаПустая = Истина;
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
			СтрокаПустая = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтрокаПустая ИЛИ ВыгружатьПустую Тогда
		Для Каждого Стр Из Узел.Строки Цикл
			Если ЗначениеЗаполнено(Стр.Ключ) Тогда
				ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьРеквизит(Текст, ДобСтрока, Префикс)
	
	Если ЗначениеЗаполнено(ДобСтрока) Тогда
		Текст = Текст + Префикс + ДобСтрока;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)

	Перем ТаблицаСтраниц;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		Возврат;
	КонецЕсли;

	Форма.СтруктураДанныхРаздел1.Вставить("ДатаПодписиРук", Формат(Форма.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	Форма.СтруктураДанныхРаздел1.Вставить("ДатаПодписиБух", Формат(Форма.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	
	Форма.СтруктураДанныхРаздел3.Вставить("ДатаПодписиРук", Формат(Форма.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	Форма.СтруктураДанныхРаздел3.Вставить("ДатаПодписиБух", Формат(Форма.ДатаПодписи, "ДФ=дд.ММ.гггг"));
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1"
	 ИЛИ Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
		
		Форма.ТабличныйДокумент.Области.ДатаПодписиРук.Защита = Ложь;
		Форма.ТабличныйДокумент.Области.ДатаПодписиБух.Защита = Ложь;
		
		Форма.ТабличныйДокумент.Области.ДатаПодписиРук.Значение = Формат(Форма.ДатаПодписи, "ДФ=дд.ММ.гггг");
		Форма.ТабличныйДокумент.Области.ДатаПодписиБух.Значение = Формат(Форма.ДатаПодписи, "ДФ=дд.ММ.гггг");
		
		Форма.ТабличныйДокумент.Области.ДатаПодписиРук.Защита = Истина;
		Форма.ТабличныйДокумент.Области.ДатаПодписиБух.Защита = Истина;
		
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
	   		
		ВывестиДату(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
	
	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
	Иначе
		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
	КонецЕсли;
	
	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
			
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СокрЛП(Текст) <> СокрЛП(Комментарий) Тогда
		мОбновитьКомментарий = Ложь;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		мОбновитьКомментарий = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				
				Попытка
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				Исключение
					Продолжить;
				КонецПопытки;
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
              	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТЗСпецификаций()
	
	мТЗСпецификацийРаздел1.Очистить();
	
	мТЗСпецификацийРаздел1_07.Очистить();
	
	мТЗСпецификацийРаздел3.Очистить();
	
	мМассивТЗСпецификацийПрил.Очистить();
	
	мМассивТЗСпецификацийПрил.Добавить().Таблица.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
		
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмятекущейСтраницыПанели = "Сведения" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	ИначеЕсли ИмятекущейСтраницыПанели = "Зачет" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы3;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы3", СтруктураРеквизитовФормы.мИдГруппы3);
		
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		ТекТабличноеПоле = "Сведения";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы3 Тогда
		ТекТабличноеПоле = "Зачет";	
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ПолучитьКодИМНС()
	
	Если (СтруктураРеквизитовФормы.Организация = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат "";
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = "КодНО";
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, Сведения);

	Результат = ОргСведения.КодНО;

	Возврат Результат;

КонецФункции

&НаСервере
Функция ПолучитьСведенияОПредставителе(КодИФНС) Экспорт
	
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ТипПредставителя = "1";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрацииВНалоговомОргане.Код,
	|	РегистрацииВНалоговомОргане.КПП,
	|	РегистрацииВНалоговомОргане.Представитель,
	|	РегистрацииВНалоговомОргане.УполномоченноеЛицоПредставителя
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Код = &Код
	|	И РегистрацииВНалоговомОргане.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Код", КодИФНС);
	Запрос.УстановитьПараметр("Владелец", СтруктураРеквизитовФормы.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПредставителя = "2";
		Если НЕ РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			флПредставительЮрЛицо = Истина;
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
			ПредставительСсылка = Выборка.Представитель;
		Иначе
			флПредставительЮрЛицо = Ложь;
			ПредставительСсылка = Выборка.Представитель;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ТипПредставителя, флПредставительЮрЛицо, ФИОПредставителя, ПредставительСсылка", 
							 ТипПредставителя, флПредставительЮрЛицо, ФИОПредставителя, ПредставительСсылка);
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекстыИзТЗСпецификаций(ТЗСпецификаций)
	
	Тексты = Новый Структура;
	ТекстНомер 	= "";
	ТекстДата 	= "";
	
	Для Сч = 1 По ТЗСпецификаций.Количество() Цикл
		
		Строка = ТЗСпецификаций[Сч - 1];
			
		ТекстНомер = ДобавитьРеквизит(ТекстНомер, Строка.Номер, ?(ТекстНомер = "", "", "; "));
		ТекстДата  = ДобавитьРеквизит(ТекстДата,  Формат(Строка.Дата, "ДФ=dd.MM.yyyy"),  ?(ТекстДата  = "", "", "; "));
		
	КонецЦикла; 
	
	Тексты.Вставить("Номер", ТекстНомер);
	Тексты.Вставить("Дата", ТекстДата);
	
	Возврат Тексты;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	// Проверка сведений о файле выгрузки.
	ДатаДок = ПараметрыВыгрузки.ДатаДокДата;
	Если ДатаДок < '20100701' Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Дата формирования файла выгрузки не может быть раньше 01.07.2010", "Раздел1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка сведений о заявлении.
	Раздел1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	Раздел3 = мДанныеОтчета.ПолеТабличногоДокументаРаздел3;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.НомерЗаяв) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан номер заявления!", "Раздел1", "НомерЗаяв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ИННКПП = Раздел1.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПродавца = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца = СокрЛП(ИННКПП);
		КПППродавца = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПокупателя = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя = СокрЛП(ИННКПП);
		КПППокупателя = "";
	КонецЕсли;
	
	ИННКПП = Раздел1.ИННОрг_1;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННКомиссионера = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КППКомиссионера = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННКомиссионера = СокрЛП(ИННКПП);
		КППКомиссионера = "";
	КонецЕсли;
	
	// Раздел 1. Продавец.

	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПродавец) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан код страны организации-продавца!", "Раздел1", "КодСтраныПродавец");
		СтатусПроверки = Ложь;
	ИначеЕсли ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
		Если НЕ ЗначениеСодержитсяВСписке(Раздел1.КодСтраныПродавец, "112,398") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 код страны организации-продавца должен быть 112 или 398!", "Раздел1", "КодСтраныПродавец");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;	
		
	Если Раздел1.КодСтраныПродавец = "112" ИЛИ Раздел1.КодСтраныПродавец = "398" Тогда
		Если НЕ ЗначениеЗаполнено(ИННПродавца) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан УНП|ИНН|РНН(БИН|ИИН) продавца!", "Раздел1", "ПродавецИНН_КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Если Раздел1.КодСтраныПродавец = "643" ИЛИ НЕ ПустаяСтрока(Раздел1.ПродавецБайконур) Тогда
		ДлинаИНН = СтрДлина(ИННПродавца);
		
		Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 неверно задан ИНН продавца!", "Раздел1", "ПродавецИНН_КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППродавца);
			Если ДлинаКПП = 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан КПП продавца!", "Раздел1", "ПродавецИНН_КПП");
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 неверно задан КПП продавца!", "Раздел1", "ПродавецИНН_КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПродавецНаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задано местонахождение (место жительства) продавца!", "Раздел1", "ПродавецМестоНахожд");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Покупатель.
	
	Если Раздел1.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел1.ПокупательБайконур) Тогда
		ДлинаИНН = СтрДлина(ИННПокупателя);
		
		Если ДлинаИНН = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан ИНН покупателя!", "Раздел1", "ПокупательИНН_КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 неверно задан ИНН покупателя!", "Раздел1", "ПокупательИНН_КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ДлинаИНН = 10 Тогда
			ДлинаКПП = СтрДлина(КПППокупателя);
			Если ДлинаКПП = 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан КПП продавца!", "Раздел1", "ПокупательИНН_КПП");
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 неверно задан КПП продавца!", "Раздел1", "ПокупательИНН_КПП");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательНаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя)!", "Раздел1", "ПокупательНаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныПокупатель) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан код страны организации-покупателя!", "Раздел1", "КодСтраныПокупатель");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ(Раздел1.КодСтраныПокупатель = "643" ИЛИ Раздел1.КодСтраныПокупатель = "398") Тогда	
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 код страны организации-покупателя должен быть 398 или 643!", "Раздел1", "КодСтраныПокупатель");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ПокупательМестоНахожд) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задано местонахождение (место жительства) покупателя!", "Раздел1", "ПокупательМестоНахожд");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о контракте.

	Если НЕ ЗначениеЗаполнено(Раздел1.НомерДог) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан номер договора(контракта) строки 05!", "Раздел1", "НомерДог");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Раздел1.ДатаДог) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задана дата договора(контракта) строки 05!", "Раздел1", "ДатаДог");
		СтатусПроверки = Ложь;
	КонецЕсли;

	ЕстьДоговорЛизинга = НЕ ПустаяСтрока(Раздел1.ПрЛизинг);
	ЕстьДоговорПереработки = НЕ ПустаяСтрока(Раздел1.ПрДавСырья);
	
	Если ЕстьДоговорЛизинга и ЕстьДоговорПереработки Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не могут быть одновременно заданы признаки заключения договора лизинга и договора переработки давальческого сырья", "Раздел1", "ПрЛизинг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1. Сведения о комиссионере (посреднике).
	
	ЕстьСведенияОКомиссионере = НЕ ПустаяСтрока(Раздел1.ИННОрг_1)
	                        ИЛИ НЕ ПустаяСтрока(Раздел1.НаимОрг_1)
	                        ИЛИ НЕ ПустаяСтрока(Раздел1.КодСтраныОрг1)
	                        ИЛИ НЕ ПустаяСтрока(Раздел1.МестоНахождОрг_1)
	                        ИЛИ НЕ ПустаяСтрока(Раздел1.НомКонтр_2)
	                        ИЛИ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2);
	
	Если ЕстьСведенияОКомиссионере Тогда
		
		Если ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) И СтрНайти("112,398,643", Раздел1.КодСтраныОрг1) <> 0 Тогда
			Если ПустаяСтрока(ИННКомиссионера) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан УНП|ИНН|РНН(БИН|ИИН) организации строки 06!", "Раздел1", "ИННОрг_1");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Раздел1.КодСтраныОрг1 = "643" ИЛИ НЕ ПустаяСтрока(Раздел1.КомиссионерБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННКомиссионера);
			
			Если ДлинаИНН = 0 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан ИНН покупателя!", "Раздел1", "ИННОрг_1");
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 неверно задан ИНН покупателя!", "Раздел1", "ИННОрг_1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КППКомиссионера);
				Если ДлинаКПП = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан КПП продавца!", "Раздел1", "ИННОрг_1");
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 неверно задан КПП продавца!", "Раздел1", "ИННОрг_1");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.КодСтраныОрг1) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан код страны организации строки 06!", "Раздел1", "КодСтраныОрг1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.МестоНахождОрг_1) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задано местонахождение (место жительства) организации строки 06!", "Раздел1", "МестоНахождОрг_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.НомКонтр_2) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задан номер договора(контракта) строки 07!", "Раздел1", "НомКонтр_2");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1.ДатаКонтр_2) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 1 не задана дата договора(контракта) строки 07!", "Раздел1", "ДатаКонтр_2");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьВозможностьВыгрузки_Товары(Параметры, СтатусПроверки);

	// Проверка раздела 3.
		
	ИННКПП = Раздел3.ПродавецИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПродавца_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППродавца_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПродавца_Раздел3 = СокрЛП(ИННКПП);
		КПППродавца_Раздел3 = "";
	КонецЕсли;
	
	ИННКПП = Раздел3.ПокупательИНН_КПП;
	Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
		ПозицияРазделителя = СтрНайти(ИННКПП, "/");
		ИННПокупателя_Раздел3 = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
		КПППокупателя_Раздел3 = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
	Иначе
		ИННПокупателя_Раздел3 = СокрЛП(ИННКПП);
		КПППокупателя_Раздел3 = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Раздел3.ПродавецИНН_КПП) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательИНН_КПП)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПрод_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ТипПок_3)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательБайконур)
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПродавец) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательНаимОрг) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.КодСтраныПокупатель) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаДог) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.НомерСпецификации) 
	 ИЛИ ЗначениеЗаполнено(Раздел3.ДатаСпецификации) Тогда
	 
		// Продавец.
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ТипПрод_3) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан тип организации-продавца!", "Раздел3", "ТипПрод_3");

			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ИННПродавца_Раздел3) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) продавца!", "Раздел3", "ПродавецИНН_КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ПустаяСтрока(Раздел3.ПродавецБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 неверно задан ИНН продавца!", "Раздел3", "ПродавецИНН_КПП");
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Раздел3);
				Если ДлинаКПП = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан КПП продавца!", "Раздел3", "ПродавецИНН_КПП");
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 неверно задан КПП продавца!", "Раздел3", "ПродавецИНН_КПП");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(ИННПродавца_Раздел3) < 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 неверно задан УНП|ИНН|РНН(БИН|ИИН) продавца!", "Раздел3", "ПродавецИНН_КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПродавец) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан код страны организации-продавца!", "Раздел3", "КодСтраныПродавец");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ (Раздел3.КодСтраныПродавец = "112" ИЛИ Раздел3.КодСтраныПродавец = "398") Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 код страны организации-продавца должен быть 398 или 112!", "Раздел3", "КодСтраныПродавец");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя)!", "Раздел3", "ПродавецНаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецМестоНахожд) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задано местонахождение (место жительства) продавца!", "Раздел3", "ПродавецМестоНахожд");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(Раздел3.ТипПок_3) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан тип организации-покупателя!", "Раздел3", "ТипПок_3");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (Раздел3.КодСтраныПокупатель = "643" ИЛИ Раздел3.КодСтраныПокупатель = "112" ИЛИ Раздел3.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Раздел3) Тогда	
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан УНП|ИНН|РНН(БИН|ИИН) покупателя!", "Раздел3", "ПокупательИНН_КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли Раздел3.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(Раздел3.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Раздел3);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 неверно задан ИНН покупателя!", "Раздел3", "ПокупательИНН_КПП");
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Раздел3);
				Если ДлинаКПП = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан КПП покупателя!", "Раздел3", "ПокупательИНН_КПП");
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 неверно задан КПП покупателя!", "Раздел3", "ПокупательИНН_КПП");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПродавецНаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя)!", "Раздел3", "ПокупательНаимОрг");

			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Раздел3.КодСтраныПокупатель) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан код страны организации-покупателя!", "Раздел3", "КодСтраныПокупатель");
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ПокупательМестоНахожд) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задано местонахождение (место жительства) покупателя!", "Раздел3", "ПокупательМестоНахожд");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(Раздел3.НомерДог) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задан номер договора(контракта) в строке 12!", "Раздел3", "НомерДог");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел3.ДатаДог) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе 3 не задана дата договора(контракта) в строке 12!", "Раздел3", "ДатаДог");
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Проверка приложений.
	Приложение = мДанныеОтчета.Приложение;
	
	Для каждого Лист Из Приложение Цикл
		
		Если НЕ ЗаполненЛистРазделаПриложение(Лист) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерЛиста = Приложение.Индекс(Лист) + 1;
		
		ИННКПП = ДанныеЛиста.ПродавецИНН_КПП;
                                             
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = СтрНайти(ИННКПП, "/");
			ИННПродавца_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППродавца_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПродавца_Приложение = СокрЛП(ИННКПП);
			КПППродавца_Приложение = "";
		КонецЕсли;
		
		ИННКПП = ДанныеЛиста.ПокупательИНН_КПП;
		Если СтрЧислоВхождений(ИННКПП, "/") <> 0 Тогда
			ПозицияРазделителя = СтрНайти(ИННКПП, "/");
			ИННПокупателя_Приложение = СокрЛП(Лев(ИННКПП, ПозицияРазделителя - 1));
			КПППокупателя_Приложение = СокрЛП(Сред(ИННКПП, ПозицияРазделителя + 1));
		Иначе
			ИННПокупателя_Приложение = СокрЛП(ИННКПП);
			КПППокупателя_Приложение = "";
		КонецЕсли;
		
		// Продавец.
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста.ТипПрод_Пр) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан тип организации-продавца!", "Приложение", "ТипПрод_Пр", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (ДанныеЛиста.КодСтраныПродавец = "643" ИЛИ ДанныеЛиста.КодСтраныПродавец = "112" ИЛИ ДанныеЛиста.КодСтраныПродавец = "398") И ПустаяСтрока(ИННПродавца_Приложение) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе Приложение не задан УНП|ИНН|РНН(БИН|ИИН) продавца!", "Приложение", "ПродавецИНН_КПП", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли ДанныеЛиста.КодСтраныПродавец = "643" ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.ПродавецБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПродавца_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение неверно задан ИНН продавца!", "Приложение", "ПродавецИНН_КПП", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППродавца_Приложение);
				Если ДлинаКПП = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан КПП продавца!", "Приложение", "ПродавецИНН_КПП", НомерЛиста);
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение неверно задан КПП продавца!", "Приложение", "ПродавецИНН_КПП", НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеЛиста.КодСтраныПродавец) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан код страны организации-продавца!", "Приложение", "КодСтраныПродавец", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста.ПродавецНаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задано полное наименование организации-продавца (ФИО индивидуального предпринимателя)!", "Приложение", "ПродавецНаимОрг", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста.ПродавецМестоНахожд) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задано местонахождение (место жительства) продавца!", "Приложение", "ПродавецМестоНахожд", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Покупатель.
		Если ПустаяСтрока(ДанныеЛиста.ТипПок_Пр) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан тип организации-покупателя!", "Приложение", "ТипПок_Пр", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (ДанныеЛиста.КодСтраныПокупатель = "643" ИЛИ ДанныеЛиста.КодСтраныПокупатель = "112" ИЛИ ДанныеЛиста.КодСтраныПокупатель = "398") И ПустаяСтрока(ИННПокупателя_Приложение) Тогда	
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан УНП|ИНН|РНН(БИН|ИИН) покупателя!", "Приложение", "ПокупательИНН_КПП", НомерЛиста);
			СтатусПроверки = Ложь;
		ИначеЕсли ДанныеЛиста.КодСтраныПокупатель = "643" ИЛИ НЕ ПустаяСтрока(ДанныеЛиста.ПокупательБайконур) Тогда
			ДлинаИНН = СтрДлина(ИННПокупателя_Приложение);
			Если ДлинаИНН <> 10 И ДлинаИНН <> 12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение неверно задан ИНН покупателя!", "Приложение", "ПокупательИНН_КПП", НомерЛиста);
				СтатусПроверки = Ложь;
			ИначеЕсли ДлинаИНН = 10 Тогда
				ДлинаКПП = СтрДлина(КПППокупателя_Приложение);
				Если ДлинаКПП = 0 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан КПП покупателя!", "Приложение", "ПокупательИНН_КПП", НомерЛиста);
					СтатусПроверки = Ложь;
				ИначеЕсли ДлинаКПП <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение неверно задан КПП покупателя!", "Приложение", "ПокупательИНН_КПП", НомерЛиста);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста.ПродавецНаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задано полное наименование организации-покупателя (ФИО индивидуального предпринимателя)!", "Приложение", "ПокупательНаимОрг", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ДанныеЛиста.КодСтраныПокупатель) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан код страны организации-покупателя!", "Приложение", "КодСтраныПокупатель", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста.ПокупательМестоНахожд) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задано местонахождение (место жительства) покупателя!", "Приложение", "ПокупательМестоНахожд", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Контракт.
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста.НомерДог) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задан номер договора(контракта)!", "Приложение", "НомерДог", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеЛиста.ДатаДог) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На листе " + НомерЛиста + " раздела Приложение не задана дата договора(контракта)!", "Приложение", "ДатаДог", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	// Проверка сведений о банках и выписках.
	ЧислоЗаполненныхСтрокВсего = 0;
	ЧислоЗаполненныхСтрокВсегоЗачетов = 0;
	
	Сведения = мДанныеОтчета.Сведения;
	
	Для каждого Лист Из Сведения Цикл
		
		ДанныеЛиста = Лист.Данные[0].Значение;
		ИндексЛиста = Сведения.Индекс(Лист) + 1;
		
		ТипПлат = ДанныеЛиста.ТипПлат;
		БИКБанка = ВРЕГ(СокрЛП(ДанныеЛиста.БИК));
		НаименованиеБанка = ВРЕГ(СокрЛП(ДанныеЛиста.НаименованиеБанка));
                                             		
		Если НЕ ЗначениеЗаполнено(БИКБанка) И НЕ ЗначениеЗаполнено(НаименованиеБанка) И НЕ ЗначениеЗаполнено(ТипПлат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТипПлат) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Сведения о выписках банка"" на странице " + ИндексЛиста + " не заполнен тип платежного документа!", "Сведения", "ТипПлат", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (ТипПлат = 1 ИЛИ ТипПлат = 2) И ПустаяСтрока(БИКБанка) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Сведения о выписках банка"" на странице " + ИндексЛиста + " не заполнен БИК банка!", "Сведения", "БИК", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (ТипПлат = 1 ИЛИ ТипПлат = 2) И ПустаяСтрока(НаименованиеБанка) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В разделе ""Сведения о выписках банка"" на странице " + ИндексЛиста + " не заполнено наименование банка!", "Сведения", "НаименованиеБанка", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Проверяем сведения о выписках банка.
		ЧислоЗаполненныхСтрокЛиста = 0;
		НомерСтроки = 1;
		Пока ДанныеЛиста.Свойство("П000020000102_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			СтрНомерСтроки = Формат(НомерСтроки, "ЧГ=");
			
			П000020000101 = ДанныеЛиста["П000020000101_" + СтрНомерСтроки];
			П000020000102 = ДанныеЛиста["П000020000102_" + СтрНомерСтроки];
			П000020000103 = ДанныеЛиста["П000020000103_" + СтрНомерСтроки];
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) И НЕ ЗначениеЗаполнено(П000020000102) И НЕ ЗначениеЗаполнено(П000020000103) Тогда
				Продолжить;
			Иначе
				ЧислоЗаполненныхСтрокЛиста = ЧислоЗаполненныхСтрокЛиста + 1;	
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000101) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + ИндексЛиста + " раздела ""Сведения о выписках банка"" в строке " + СтрНомерСтроки + " не указана дата выписки!", "Сведения", "П000020000101_" + СтрНомерСтроки, ИндексЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000020000102) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + ИндексЛиста + " раздела ""Сведения о выписках банка"" в строке " + СтрНомерСтроки + " не указана сумма уплаченного налога по выписке!", "Сведения", "П000020000102_" + СтрНомерСтроки, ИндексЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если ТипПлат = 1 И ПустаяСтрока(П000020000103) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + ИндексЛиста + " раздела ""Сведения о выписках банка"" в строке " + СтрНомерСтроки + " не указан номер счета по выписке!", "Сведения", "П000020000103_" + СтрНомерСтроки, ИндексЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
                                              
		КонецЦикла;
		
		Если ЧислоЗаполненныхСтрокЛиста = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + ИндексЛиста + " раздела ""Сведения о выписках банка"" не определена ни одна выписка!", "Сведения", "П000020000101_1", ИндексЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЧислоЗаполненныхСтрокВсего = ЧислоЗаполненныхСтрокВсего + ЧислоЗаполненныхСтрокЛиста;
		
		Если (ТипПлат = 1 ИЛИ ТипПлат = 2) И ЧислоЗаполненныхСтрокЛиста = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Сведения о выписках банка не могут быть не заполнены при типе платежного документа 1 или 2!", "Сведения", "П000020000101_1", 1);
			СтатусПроверки = Ложь;
		КонецЕсли;

	КонецЦикла;

	// Проверка сведений о зачетах.
	
	Зачет = мДанныеОтчета.Зачет;
	
	Для Каждого Лист Из Зачет Цикл
		
		ДанныеЛиста = Лист.Данные[0].Значение;
		НомерЛиста = Зачет.Индекс(Лист) + 1;
		
		ТипПлат = ДанныеЛиста.ТипПлатЗачет;
		
		ЧислоЗаполненныхСтрокЛиста = 0;
		НомерСтроки = 1;
		Пока ДанныеЛиста.Свойство("П000030000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			
			П000030000101 = ДанныеЛиста["П000030000101_" + Формат(НомерСтроки, "ЧГ=")];
			П000030000102 = ДанныеЛиста["П000030000102_" + Формат(НомерСтроки, "ЧГ=")];
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НЕ ЗначениеЗаполнено(П000030000101) И НЕ ЗначениеЗаполнено(П000030000102) Тогда
				Продолжить;
			КонецЕсли;
			ЧислоЗаполненныхСтрокЛиста = ЧислоЗаполненныхСтрокЛиста + 1;
			
			Если НЕ ЗначениеЗаполнено(П000030000101) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела ""Сведения о зачетах"" в строке " + СтрНомерСтроки + " не указана дата зачета!", "Зачет", "П000030000101_" + СтрНомерСтроки, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(П000030000102) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела ""Сведения о зачетах"" в строке " + СтрНомерСтроки + " не указана сумма зачета!", "Зачет", "П000030000102_" + СтрНомерСтроки, НомерЛиста);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЧислоЗаполненныхСтрокВсегоЗачетов = ЧислоЗаполненныхСтрокВсегоЗачетов + 1;
			
		КонецЦикла;
		
		Если ЧислоЗаполненныхСтрокЛиста <> 0 И ТипПлат <> 3 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела ""Сведения о зачетах"" не указан тип платежного документа!", "Зачет", "ТипПлатЗачет", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ТипПлат = 3 И ЧислоЗаполненныхСтрокЛиста = 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На странице " + НомерЛиста + " раздела ""Сведения о зачетах"" не указаны сведения о зачетах!", "Зачет", "ТипПлатЗачет", НомерЛиста);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаНалогаНенулевая = (ЗначениеЗаполнено(Раздел1["П000010000119"]) ИЛИ ЗначениеЗаполнено(Раздел1["П000010000120"]));
	ЕстьСведенияОбУплатеНалога = (ЧислоЗаполненныхСтрокВсего <> 0 ИЛИ ЧислоЗаполненныхСтрокВсегоЗачетов <> 0);
	
	Если СуммаНалогаНенулевая И НЕ ЕстьСведенияОбУплатеНалога Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Сведения о выписках банка и зачетах не могут быть не заполнены при ненулевой итоговой сумме налога!", "Сведения", "П000020000101_1", 1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка заполненности параметров выгрузки, задаваемых на форме выгрузки.
	мСтруктураРеквизитовВыгрузки = Неопределено;
	ДанныеСохраненногоОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Если НЕ ДанныеСохраненногоОтчета.Свойство("мСтруктураРеквизитовВыгрузки", мСтруктураРеквизитовВыгрузки) Тогда
		мСтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
	КонецЕсли;

	КодИФНС               = мСтруктураРеквизитовВыгрузки.КодИФНС;
	ОтправительЯвляетсяЮЛ = мСтруктураРеквизитовВыгрузки.ОтправительЯвляетсяЮЛ;
	ИННЮЛОтпр             = мСтруктураРеквизитовВыгрузки.ИННЮЛОтпр;
	ИННФЛОтпр             = мСтруктураРеквизитовВыгрузки.ИННФЛОтпр;
	ПрПодп1               = мСтруктураРеквизитовВыгрузки.ПрПодп1;
	НаимДовПодп1          = мСтруктураРеквизитовВыгрузки.НаимДовПодп1;
	НомерДовПодп1         = мСтруктураРеквизитовВыгрузки.НомерДовПодп1;
	ДатаДовПодп1          = мСтруктураРеквизитовВыгрузки.ДатаДовПодп1;
	ОтправленПочтой       = мСтруктураРеквизитовВыгрузки.ОтправленПочтой;
	ПрКурьер              = мСтруктураРеквизитовВыгрузки.ПрКурьер;
	НаимДовКурьер         = мСтруктураРеквизитовВыгрузки.НаимДовКурьер;
	НомерДовКурьер        = мСтруктураРеквизитовВыгрузки.НомерДовКурьер;
	ДатаДовКурьер         = мСтруктураРеквизитовВыгрузки.ДатаДовКурьер;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнен код налогового органа! Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из командного меню отчета.", "Раздел1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННЮЛОтпр)) ИЛИ (НЕ ОтправительЯвляетсяЮЛ И НЕ ЗначениеЗаполнено(ИННФЛОтпр)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнен ИНН отправителя! Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из отчета.", "Раздел1");
		СтатусПроверки = Ложь;
	КонецЕсли; 

	Если ПрПодп1 = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(НомерДовПодп1) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовПодп1) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнены сведения о доверенности подписанта 1! Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из отчета.", "Раздел1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправленПочтой И ПрКурьер = 3 Тогда
		Если НЕ ЗначениеЗаполнено(НаимДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(НомерДовКурьер) ИЛИ НЕ ЗначениеЗаполнено(ДатаДовКурьер) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не заполнены сведения о доверенности курьера! Требуется заполнить в форме ""Параметры выгрузки"", вызываемой из отчета.", "Раздел1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьВыгрузки_Товары(Параметры, СтатусПроверки)
	
	Раздел1 = мДанныеОтчета.ПолеТабличногоДокументаРаздел1;
	
	ЧислоВыгружаемыхТоваров = 0;
	НомСтроки = 1;
	
	ЕстьДоговорЛизинга = НЕ ПустаяСтрока(Раздел1.ПрЛизинг);
	ЕстьДоговорПереработки = НЕ ПустаяСтрока(Раздел1.ПрДавСырья);
	
	Пока Раздел1.Свойство("П000010000101_" + Формат(НомСтроки, "ЧГ=")) Цикл
		СтрНомСтроки = Формат(НомСтроки, "ЧГ=");
		
		НомСтроки = НомСтроки + 1; // для следующего прохождения цикла, в этом используется лишь СтрНомСтроки
		СтрокаЗаполнена = Ложь;
		Для Инд = 2 По 13 Цикл
			Если ЗначениеЗаполнено(Раздел1["П0000100001" + Формат(Инд, "ЧЦ=2; ЧВН=; ЧГ=") + "_" + СтрНомСтроки]) Тогда
				СтрокаЗаполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СтрокаЗаполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоВыгружаемыхТоваров = ЧислоВыгружаемыхТоваров + 1;
		
		СтруктураСтавок = Новый Структура;
		СтруктураСтавок.Вставить("Ст16", СтрЗаменить(Раздел1["П000010000116_" + СтрНомСтроки], ",", "."));
		СтруктураСтавок.Вставить("Ст17", СтрЗаменить(Раздел1["П000010000117_" + СтрНомСтроки], ",", "."));
		СтруктураСтавок.Вставить("Ст18", СтрЗаменить(Раздел1["П000010000118_" + СтрНомСтроки], ",", "."));
		СтруктураСтавок.Вставить("Ст21", Раздел1["П000010000121_" + СтрНомСтроки]);
		
		СтруктураСтавокМодиф = АнализироватьПоляСтавки(СтруктураСтавок);
		ПрОсвАкциз = СтруктураСтавокМодиф.Переключатель3;
		ПрОсвНДС   = СтруктураСтавокМодиф.Переключатель1;
		
		СтАкцизТверд = СтрЗаменить(Раздел1["П000010000116_" + СтрНомСтроки], ",", ".");
		СтАкцизАдвал = СтрЗаменить(Раздел1["П000010000117_" + СтрНомСтроки], ",", ".");
		СтНДС        = СтрЗаменить(Раздел1["П000010000118_" + СтрНомСтроки], ",", ".");
		
		СтАкцизТверд = ?(СтАкцизТверд = "Льгота" ИЛИ СтАкцизТверд = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизТверд)), 0, Число(СтАкцизТверд));
		СтАкцизАдвал = ?(СтАкцизАдвал = "Льгота" ИЛИ СтАкцизАдвал = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтАкцизАдвал)), 0, Число(СтАкцизАдвал));
		СтНДС = ?(СтНДС = "Льгота" ИЛИ СтНДС = "-" ИЛИ НЕ ЗначениеЗаполнено(СокрЛП(СтНДС)), 0, Число(СтНДС));
		
		// Значение единицы измерения дополнительной величины налоговой базы.
		ЗначениеКоличТов = Раздел1["П000010000105_" + СтрНомСтроки];
		ЗначениеНБАкциз = Раздел1["П000010000114_" + СтрНомСтроки];
		ЗаполнятьЕдИзмТовНБАкц = (ЗначениеКоличТов <> ЗначениеНБАкциз)
		                       И (ЗначениеКоличТов <>0)
		                       И НЕ (ПрОсвАкциз = 3 ИЛИ ПрОсвАкциз = 4);
		ИмяСлужебногоПоля = "П000010000124_" + СтрНомСтроки;
		ИмяПоляПредставления = "П000010000123_" + СтрНомСтроки;
		Если Раздел1.Свойство(ИмяСлужебногоПоля) И НЕ ПустаяСтрока(Раздел1[ИмяСлужебногоПоля])Тогда
			ЗначениеЕдИзмТовНБАкц = Раздел1[ИмяСлужебногоПоля];
		Иначе
			ЗначениеЕдИзмТовНБАкц = Раздел1[ИмяСлужебногоПоля];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1["П000010000102_" + СтрНомСтроки]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не заполнено наименование товара!", "Раздел1", "П000010000102_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ТНВЭД = Раздел1["П000010000103_" + СтрНомСтроки];
		Если (ПрОсвАкциз <> 4)	
		 ИЛИ (ПрОсвНДС = 2)
		 ИЛИ (ПрОсвНДС = 1 И СтНДС = 10) Тогда
			Если ПустаяСтрока(ТНВЭД) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не заполнен код ТН ВЭД!", "Раздел1", "П000010000102_" + СтрНомСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Единица измерения.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(Раздел1["П000010000105_" + СтрНомСтроки])) Тогда
			Если ПустаяСтрока(Раздел1["П000010000104_" + СтрНомСтроки]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не заполнена единица измерения товара!", "Раздел1", "П000010000104_" + СтрНомСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// Количество товара.
		Если (НЕ ЕстьДоговорЛизинга И НЕ ЕстьДоговорПереработки)
		 ИЛИ (НЕ ПустаяСтрока(Раздел1["П000010000104_" + СтрНомСтроки])) Тогда
			Если НЕ ЗначениеЗаполнено(Раздел1["П000010000105_" + СтрНомСтроки]) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указано количество товара!", "Раздел1", "П000010000105_" + СтрНомСтроки);	
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтоимостьТовара = Раздел1["П000010000106_" + СтрНомСтроки];
		Если НЕ ЗначениеЗаполнено(СтоимостьТовара) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не заполнена стоимость товара!", "Раздел1", "П000010000106_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КодВалюты = Раздел1["П000010000107_" + СтрНомСтроки];
		Если ПустаяСтрока(КодВалюты) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указана валюта товара!", "Раздел1", "П000010000107_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		КурсВалюты = Раздел1["П000010000108_" + СтрНомСтроки];
		Если НЕ ЗначениеЗаполнено(КурсВалюты) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указан курс валюты товара!", "Раздел1", "П000010000108_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		ИначеЕсли КодВалюты = "643" И КурсВалюты <> 1 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " для валюты с кодом 643 (Российский рубль) курс валюты должен равняться 1!", "Раздел1", "П000010000108_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Транспортный (товаросопроводительный) документ.
		Если НЕ ЗначениеЗаполнено(Раздел1["П000010000109_" + СтрНомСтроки]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указаны серия, номер транспортного документа!", "Раздел1", "П000010000109_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1["П000010000110_" + СтрНомСтроки]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указана дата транспортного документа!", "Раздел1", "П000010000110_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Счет-фактура.
		Если НЕ ЗначениеЗаполнено(Раздел1["П000010000111_" + СтрНомСтроки]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указан номер счета-фактуры!", "Раздел1", "П000010000111_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Раздел1["П000010000112_" + СтрНомСтроки]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указана дата счета-фактуры!", "Раздел1", "П000010000112_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Дата принятия на учет товара.
		Если НЕ ЗначениеЗаполнено(Раздел1["П000010000113_" + СтрНомСтроки]) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не заполнена дата принятия товара на учет!", "Раздел1", "П000010000113_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Налоговая база.
		Если ЗаполнятьЕдИзмТовНБАкц Тогда
			Если НЕ ЗначениеЗаполнено(ЗначениеЕдИзмТовНБАкц) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не заполнена единица измерения дополнительной величины, используемой для исчисления налоговой базы (акциз)!", "Раздел1", "П000010000123_" + СтрНомСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ЗначениеЕдИзмТовНБАкц) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " ошибочно заполнена единица измерения дополнительной величины, используемой для исчисления налоговой базы (акциз)!", "Раздел1", "П000010000123_" + СтрНомСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НалоговаяБазаНДС = Раздел1["П000010000115_" + СтрНомСтроки];
		Если НалоговаяБазаНДС <= 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не заполнена налоговая база (НДС) !", "Раздел1", "П000010000115_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		
		Если (ПрОсвАкциз = 1)
		   И НЕ ЗначениеЗаполнено(СтруктураСтавокМодиф.СтавкаАкциза) Тогда
			Если НЕ ЗначениеЗаполнено(СтАкцизТверд) И НЕ ЗначениеЗаполнено(СтАкцизАдвал) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не указана ставка акцизов!", "Раздел1", "П000010000116_" + СтрНомСтроки);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ПрОсвНДС = 1 И СтНДС <> 10 И СтНДС <> 18 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " неверно задана ставка НДС!", "Раздел1", "П000010000118_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		// Суммы налогов
		Если (ПрОсвАкциз = 1 ИЛИ ПрОсвАкциз = 3) И Раздел1["П000010000119_" + СтрНомСтроки] <= 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не задана сумма Акциза!", "Раздел1", "П000010000119_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПрОсвНДС = 1 И Раздел1["П000010000120_" + СтрНомСтроки] <= 0 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 в строке " + СтрНомСтроки + " не задана сумма НДС!", "Раздел1", "П000010000120_" + СтрНомСтроки);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ЧислоВыгружаемыхТоваров = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В таблице товаров раздела 1 не заполнена ни одна строка!", "Раздел1", "П000010000102_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазделитьИННКПП(ИННКПП)
	
	ИНН = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Лев(ИННКПП, СтрНайти(ИННКПП, "/") - 1), ИННКПП));
	КПП = СокрЛП(?(СтрЧислоВхождений(ИННКПП, "/") <> 0, Сред(ИННКПП, СтрНайти(ИННКПП, "/") + 1), ""));	
	Возврат Новый Структура("ИНН, КПП", ИНН, КПП);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СнятьЗащитуСЯчеек(Форма, ПоставитьЗащиту)

	Группа1 = Неопределено;
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, Группа1);

	ЦветФонаРазБлокировки = Неопределено;
	Форма.мСтруктураЦветовРаскраски.Свойство("_0", ЦветФонаРазБлокировки);

	ЦветФонаБлокировки = Неопределено;
	Форма.мСтруктураЦветовРаскраски.Свойство("_4", ЦветФонаБлокировки);

	Цвет          = ?(ПоставитьЗащиту, ЦветФонаБлокировки, ЦветФонаРазБлокировки);

	Форма.ТабличныйДокумент.Области.П000010000114.Защита = ПоставитьЗащиту;
	Форма.ТабличныйДокумент.Области.П000010000114.ЦветФона = Цвет;

	Форма.ТабличныйДокумент.Области.П000010000115.Защита = ПоставитьЗащиту;
	Форма.ТабличныйДокумент.Области.П000010000115.ЦветФона = Цвет;

	Форма.ТабличныйДокумент.Области.П000010000119.Защита = ПоставитьЗащиту;
	Форма.ТабличныйДокумент.Области.П000010000119.ЦветФона = Цвет;

	Форма.ТабличныйДокумент.Области.П000010000120.Защита = ПоставитьЗащиту;
	Форма.ТабличныйДокумент.Области.П000010000120.ЦветФона = Цвет;

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела)
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);

	Если ТекущаяСтраница = "Раздел1" Тогда
		РасчетНаСервере("Раздел1");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
	Если ТекущаяСтраница = "Раздел1" Тогда
		РасчетНаКлиенте("Раздел1");
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(Форма,ИмяГруппы);
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						Попытка
							ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						Исключение
							Продолжить;
						КонецПопытки;
													
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					
					Попытка 
						ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					Исключение
						Продолжить;
					КонецПопытки;
										
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Если ТекущаяСтраница = "Раздел1" Тогда
	
		Расчет(Форма, ТекущаяСтраница,"");
	КонецЕсли;
		
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	Перем ТаблицаСтраницРаздела;

	ИмяОбласти = Область.Имя;
	
	Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтраницу("");
	КонецЕсли;
		
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		
		ПолеТабличногоДокументаРаздел1 = ТабличныйДокумент;
		
		Если ИмяОбласти = "КодСтраныПродавец"
		 ИЛИ ИмяОбласти = "ПродавецМестоНахожд"
		 ИЛИ ИмяОбласти = "КодСтраныОрг1" 
		 ИЛИ ИмяОбласти = "МестоНахождОрг_1" Тогда
			ВвестиМестонахождениеРаздел1(Элемент, Область, СтандартнаяОбработка);
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "ПродавецБайконур" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ИмяЭлементаСтруктуры", "АдресПродавцаРаздел1");
			ПараметрыОбработки.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПродавец");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождения", "ПродавецМестоНахожд");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождениеБайконур", "ПродавецБайконур");
			
			ОтобразитьКодСтраны(ПараметрыОбработки, ДополнительныеДанныеРазделов);
					СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "ПокупательБайконур" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
			
			КодСтраны = ?(ПустаяСтрока(Область.Значение), "643", "398");
			ПолеТабличногоДокументаРаздел1.Области.КодСтраныПокупатель.Значение = КодСтраны;
					СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "КомиссионерБайконур" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ИмяЭлементаСтруктуры", "АдресКомиссионераРаздел1");
			ПараметрыОбработки.Вставить("ИмяОбластиКодаСтраны", "КодСтраныОрг1");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождения", "МестоНахождОрг_1");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождениеБайконур", "КомиссионерБайконур");
			
			ОтобразитьКодСтраны(ПараметрыОбработки, ДополнительныеДанныеРазделов);   
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли СтрНайти(ИмяОбласти, "П000010000109") = 1 ИЛИ СтрНайти(ИмяОбласти, "П000010000110") = 1 Тогда
			
			СтандартнаяОбработка = Ложь;
						
			НомерСтроки = Сред(ИмяОбласти, 14);
			КлючСтруктуры = "К" + НомерСтроки;
			
			ТранспДокументы = Неопределено;
			мСтрукТЗДокументы.Свойство(КлючСтруктуры, ТранспДокументы);
			
			Если ТранспДокументы = Неопределено Тогда
				ТранспДокументы = Новый Массив;	
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Документы", ТранспДокументы);
			
			ФормаЗаполнения = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаЗаполнения", ПараметрыФормы, ЭтаФорма);
			
			ДополнительныеПараметры = Новый Структура("КлючСтруктуры, НомерСтроки, Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, ТранспДокументы, Элемент", КлючСтруктуры, НомерСтроки, Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, ТранспДокументы, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуЗаполненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаЗаполнения.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаЗаполнения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаЗаполнения.Открыть();
			
		ИначеЕсли ИмяОбласти = "НомерСпецификации" ИЛИ ИмяОбласти = "ДатаСпецификации" Тогда
		
			СтандартнаяОбработка = Ложь;
			ФормаВводаСпецификаций = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаВводаСпецификаций", , ЭтаФорма);
			КопироватьДанныеФормы(мТЗСпецификацийРаздел1, ФормаВводаСпецификаций.ТЗСпецификаций);
			ДополнительныеПараметры = Новый Структура("Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент", Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВводаСпецификацииРаздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаВводаСпецификаций.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВводаСпецификаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВводаСпецификаций.Открыть();
			
		ИначеЕсли ИмяОбласти = "НомерСпецификации_07" ИЛИ ИмяОбласти = "ДатаСпецификации_07" Тогда
		
			СтандартнаяОбработка = Ложь;
			ФормаВводаСпецификаций = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаВводаСпецификаций", , ЭтаФорма);
			КопироватьДанныеФормы(мТЗСпецификацийРаздел1_07, ФормаВводаСпецификаций.ТЗСпецификаций);
			ДополнительныеПараметры = Новый Структура("Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент", Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВводаСпецификации_07Раздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаВводаСпецификаций.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВводаСпецификаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВводаСпецификаций.Открыть();
			
		ИначеЕсли СтрНайти(Область.Имя, "ПрЛизинг") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			Если СокрЛП(ПолеТабличногоДокументаРаздел1.Области.ПрЛизинг.Значение) = "" Тогда
				ПолеТабличногоДокументаРаздел1.Области.ПрЛизинг.Значение = "Х";
			Иначе 
				ПолеТабличногоДокументаРаздел1.Области.ПрЛизинг.Значение = "";
			КонецЕсли;
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли СтрНайти(Область.Имя, "ПрДавСырья") > 0 Тогда
		
			СтандартнаяОбработка = Ложь;
			ПолеТабличногоДокументаРаздел1.Области.ПрДавСырья.Значение = ?(СокрЛП(ПолеТабличногоДокументаРаздел1.Области.ПрДавСырья.Значение) = "", "Х", "");
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли СтрНайти(Область.Имя, "П000010000107") > 0 Тогда
		
			СтандартнаяОбработка = Ложь;
			
			ФормаВыбора = ПолучитьФорму("Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
			ФормаВыбора.Заголовок = "Выбор кода валюты";
			ДополнительныеПараметры = Новый Структура("Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент", Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораКодаВалютыРаздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВыбора.Открыть();
			
		ИначеЕсли СтрНайти(Область.Имя, "П000010000116") > 0  
			ИЛИ СтрНайти(Область.Имя, "П000010000117") > 0
			Или СтрНайти(Область.Имя, "П000010000118") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			
			НомерДопСтр = Сред(Область.Имя,15);
			
			СтруктураСтавокТабл = Новый Структура;
			СтруктураСтавокТабл.Вставить("Ст16", ПолеТабличногоДокументаРаздел1.Области["П000010000116_" + НомерДопСтр].Значение);
			СтруктураСтавокТабл.Вставить("Ст17", ПолеТабличногоДокументаРаздел1.Области["П000010000117_" + НомерДопСтр].Значение);
			СтруктураСтавокТабл.Вставить("Ст18", ПолеТабличногоДокументаРаздел1.Области["П000010000118_" + НомерДопСтр].Значение);
			СтруктураСтавокТабл.Вставить("Ст21", ПолеТабличногоДокументаРаздел1.Области["П000010000121_" + НомерДопСтр].Значение);
			
			СтруктураСтавокФорма = АнализироватьПоляСтавки(СтруктураСтавокТабл);
			ФормаВводаСтавкиНалога = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаВводаСтавкиНалога", СтруктураСтавокФорма, ЭтаФорма);
			ДополнительныеПараметры = Новый Структура("НомерДопСтр, Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент", НомерДопСтр, Область, ПолеТабличногоДокументаРаздел1, СтандартнаяОбработка, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВводаСтавкиНалогиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаВводаСтавкиНалога.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВводаСтавкиНалога.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВводаСтавкиНалога.Открыть();
		Иначе
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
		КонецЕсли;
	
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		
		ПолеТабличногоДокументаРаздел3 = ТабличныйДокумент;
		
		Если ИмяОбласти = "КодСтраныПродавец"
		 ИЛИ ИмяОбласти = "ПродавецМестоНахожд"
		 ИЛИ ИмяОбласти = "КодСтраныПокупатель" 
		 ИЛИ ИмяОбласти = "ПокупательМестоНахожд" Тогда
			ВвестиМестонахождениеРаздел3(Элемент, Область, СтандартнаяОбработка);
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "ПродавецБайконур" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ИмяЭлементаСтруктуры", "АдресПродавцаРаздел3");
			ПараметрыОбработки.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПродавец");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождения", "ПродавецМестоНахожд");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождениеБайконур", "ПродавецБайконур");
			
			ОтобразитьКодСтраны(ПараметрыОбработки, ДополнительныеДанныеРазделов);
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "ПокупательБайконур" Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ИмяЭлементаСтруктуры", "АдресПокупателяРаздел3");
			ПараметрыОбработки.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПокупатель");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождения", "ПокупательМестоНахожд");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождениеБайконур", "ПокупательБайконур");
			
			ОтобразитьКодСтраны(ПараметрыОбработки, ДополнительныеДанныеРазделов);
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "НомерСпецификации" ИЛИ ИмяОбласти = "ДатаСпецификации" Тогда
	
			СтандартнаяОбработка = Ложь;
			ФормаВводаСпецификаций = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаВводаСпецификаций", , ЭтаФорма);
			КопироватьДанныеФормы(мТЗСпецификацийРаздел3, ФормаВводаСпецификаций.ТЗСпецификаций);
			ДополнительныеПараметры =  Новый Структура("Область, ПолеТабличногоДокументаРаздел3, СтандартнаяОбработка, Элемент", Область, ПолеТабличногоДокументаРаздел3, СтандартнаяОбработка, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВводаСпецификацииРаздел3Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаВводаСпецификаций.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВводаСпецификаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВводаСпецификаций.Открыть();
			
		КонецЕсли;
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение" Тогда
		
		ПолеТабличногоДокументаПриложение = ТабличныйДокумент;
	
		Если ИмяОбласти = "КодСтраныПродавец"
		 ИЛИ ИмяОбласти = "ПродавецМестоНахожд"
		 ИЛИ ИмяОбласти = "КодСтраныПокупатель" 
		 ИЛИ ИмяОбласти = "ПокупательМестоНахожд" Тогда
			ВвестиМестонахождениеПриложение(Элемент, Область, СтандартнаяОбработка);
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "ПродавецБайконур" Тогда
			
			Если Не мСтруктураМногостраничныхРазделов.Свойство("Приложение", ТаблицаСтраницРаздела) Тогда
				Возврат;
			КонецЕсли;
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			
			Если СтрТаблицаСтраницы.Количество() = 0 Тогда
				Возврат;
			Иначе
				СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			КонецЕсли;

			СтандартнаяОбработка = Ложь;
			Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ИмяЭлементаСтруктуры", "АдресПродавца");
			ПараметрыОбработки.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПродавец");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождения", "ПродавецМестоНахожд");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождениеБайконур", "ПродавецБайконур");
						
			Если СтрТаблицаСтраницы.ДополнительныеДанные.Количество() = 0 Тогда
				СтрТаблицаСтраницы.ДополнительныеДанные.Добавить(Новый Структура);
			КонецЕсли;
			
			ОтобразитьКодСтраны(ПараметрыОбработки, СтрТаблицаСтраницы.ДополнительныеДанные[0].Значение);
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "ПокупательБайконур" Тогда
			
			Если Не мСтруктураМногостраничныхРазделов.Свойство("Приложение", ТаблицаСтраницРаздела) Тогда
				Возврат;
			КонецЕсли;
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			
			Если СтрТаблицаСтраницы.Количество() = 0 Тогда
				Возврат;
			Иначе
				СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			КонецЕсли;

			СтандартнаяОбработка = Ложь;
			Область.Значение = ?(СокрЛП(Область.Значение) = "", "Х", "");
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("ИмяЭлементаСтруктуры", "АдресПокупателя");
			ПараметрыОбработки.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПокупатель");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождения", "ПокупательМестоНахожд");
			ПараметрыОбработки.Вставить("ИмяОбластиМестонахождениеБайконур", "ПокупательБайконур");
			
			Если СтрТаблицаСтраницы.ДополнительныеДанные.Количество() = 0 Тогда
				СтрТаблицаСтраницы.ДополнительныеДанные.Добавить(Новый Структура);
			КонецЕсли;
			
			ОтобразитьКодСтраны(ПараметрыОбработки, СтрТаблицаСтраницы.ДополнительныеДанные[0].Значение);
			СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

		ИначеЕсли ИмяОбласти = "НомерСпецификации" ИЛИ ИмяОбласти = "ДатаСпецификации" Тогда
			
			Если Не мСтруктураМногостраничныхРазделов.Свойство("Приложение", ТаблицаСтраницРаздела) Тогда
				Возврат;
			КонецЕсли;
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			
			Если СтрТаблицаСтраницы.Количество() = 0 Тогда
				Возврат;
			Иначе
				СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			КонецЕсли;

			// получаем номер текущей доп страницы		
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		
			СтандартнаяОбработка = Ложь;
		
			ТЗСтраницы = мМассивТЗСпецификацийПрил[НомерТекущейСтраницы];
		
			ФормаВводаСпецификаций = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаВводаСпецификаций", , ЭтаФорма);
			КопироватьДанныеФормы(ТЗСтраницы.Таблица, ФормаВводаСпецификаций.ТЗСпецификаций);
			ДополнительныеПараметры = Новый Структура("Область, ПолеТабличногоДокументаПриложение, СтандартнаяОбработка, ТЗСтраницы, Элемент", Область, ПолеТабличногоДокументаПриложение, СтандартнаяОбработка, ТЗСтраницы, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВводаСпецификацийПриложениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ФормаВводаСпецификаций.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
			ФормаВводаСпецификаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			ФормаВводаСпецификаций.Открыть();
			
		КонецЕсли;

	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Сведения" Тогда

		СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Зачет" Тогда	

		СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСпецификацийПриложениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ПолеТабличногоДокументаПриложение = ДополнительныеПараметры.ПолеТабличногоДокументаПриложение;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	ТЗСтраницы = ДополнительныеПараметры.ТЗСтраницы;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		КопироватьДанныеФормы(Результат, ТЗСтраницы.Таблица);
		Тексты = ПолучитьТекстыИзТЗСпецификаций(ТЗСтраницы.Таблица);
		ПолеТабличногоДокументаПриложение.Области.НомерСпецификации.Значение = Тексты.Номер;
		ПолеТабличногоДокументаПриложение.Области.ДатаСпецификации.Значение = Тексты.Дата;
		Модифицированность = Истина;
	КонецЕсли;
	СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСпецификацииРаздел3Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ПолеТабличногоДокументаРаздел3 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел3;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		КопироватьДанныеФормы(Результат, мТЗСпецификацийРаздел3);
		Тексты = ПолучитьТекстыИзТЗСпецификаций(мТЗСпецификацийРаздел3);
		ПолеТабличногоДокументаРаздел3.Области.НомерСпецификации.Значение = Тексты.Номер;
		ПолеТабличногоДокументаРаздел3.Области.ДатаСпецификации.Значение = Тексты.Дата;
		Модифицированность = Истина;
	КонецЕсли;
	СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСтавкиНалогиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НомерДопСтр = ДополнительныеПараметры.НомерДопСтр;
	Область = ДополнительныеПараметры.Область;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		НовСтруктура = Результат;
		
		Если НовСтруктура.ПредставлениеПрочерк Тогда
			ПолеТабличногоДокументаРаздел1.Области["П000010000114_" + НомерДопСтр].Значение = 0; 
			ПолеТабличногоДокументаРаздел1.Области["П000010000114_" + НомерДопСтр].Формат = "ЧН=-";
		Иначе
			ПолеТабличногоДокументаРаздел1.Области["П000010000114_" + НомерДопСтр].Формат = "ЧДЦ=6; ЧН=";
		КонецЕсли;
		
		ПолеТабличногоДокументаРаздел1.Области["П000010000116_" + НомерДопСтр].Значение = НовСтруктура.Ст16;
		ПолеТабличногоДокументаРаздел1.Области["П000010000117_" + НомерДопСтр].Значение = НовСтруктура.Ст17;
		ПолеТабличногоДокументаРаздел1.Области["П000010000118_" + НомерДопСтр].Значение = НовСтруктура.Ст18;
		ПолеТабличногоДокументаРаздел1.Области["П000010000121_" + НомерДопСтр].Значение = НовСтруктура.Ст21;
		
		РасчетНаКлиенте();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКодаВалютыРаздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область						   = ДополнительныеПараметры.Область;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	СтандартнаяОбработка 		   = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент 					   = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		КодЭлементаСправочника = КодЭлементаСправочника(Результат);
		
		Если Область.Значение = КодЭлементаСправочника Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = КодЭлементаСправочника;
			Если Область.Значение = "643" Тогда
				СуффиксНомераСтроки = Сред(Область.Имя, 14);
				ПолеТабличногоДокументаРаздел1.Области["П000010000108" + СуффиксНомераСтроки].Значение = 1;
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаСервере
Функция КодЭлементаСправочника(Результат)
	
	Возврат Результат.Код;
	
КонецФункции	

&НаКлиенте
Процедура ОткрытьФормуВводаСпецификации_07Раздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		КопироватьДанныеФормы(Результат, мТЗСпецификацийРаздел1_07);
		Тексты = ПолучитьТекстыИзТЗСпецификаций(мТЗСпецификацийРаздел1_07);
		ПолеТабличногоДокументаРаздел1.Области.НомерСпецификации_07.Значение = Тексты.Номер;
		ПолеТабличногоДокументаРаздел1.Области.ДатаСпецификации_07.Значение = Тексты.Дата;
		Модифицированность = Истина;
	КонецЕсли;
	СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСпецификацииРаздел1Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		КопироватьДанныеФормы(Результат, мТЗСпецификацийРаздел1);
		Тексты = ПолучитьТекстыИзТЗСпецификаций(мТЗСпецификацийРаздел1);
		ПолеТабличногоДокументаРаздел1.Области.НомерСпецификации.Значение = Тексты.Номер;
		ПолеТабличногоДокументаРаздел1.Области.ДатаСпецификации.Значение = Тексты.Дата;
		Модифицированность = Истина;
	КонецЕсли;
	СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаполненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КлючСтруктуры = ДополнительныеПараметры.КлючСтруктуры;
	НомерСтроки = ДополнительныеПараметры.НомерСтроки;
	Область = ДополнительныеПараметры.Область;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	СтандартнаяОбработка = ДополнительныеПараметры.СтандартнаяОбработка;
	ТранспДокументы = ДополнительныеПараметры.ТранспДокументы;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат <> Неопределено Тогда
		
		ТранспДокументы.Очистить();
		
		Для Каждого Док Из Результат Цикл
			ТранспДокументы.Добавить(Новый Структура("Серия, Номер, Дата", Док.Серия, Док.Номер, Док.Дата));
		КонецЦикла;
		
		мСтрукТЗДокументы.Вставить(КлючСтруктуры, ТранспДокументы);
		
		СерияНомерТД = "";
		ДатаТД       = "";
		
		Для каждого Док Из Результат Цикл
			
			Серия = СокрЛП(Док.Серия);                   
			Номер = СокрЛП(Док.Номер);
			Дата  = Формат(Док.Дата, "ДФ=""дд.ММ.гггг 'г.'""");
			
			Если СерияНомерТД <> "" Тогда
				СерияНомерТД = СерияНомерТД + Символы.ПС;
			КонецЕсли;
			
			Если ДатаТД <> "" Тогда
				ДатаТД = ДатаТД + Символы.ПС;
			КонецЕсли;
			
			СерияНомерТД = СерияНомерТД + Серия + ?(ПустаяСтрока(Серия) ИЛИ ПустаяСтрока(Номер), "", ", ") + Номер;
			
			ДатаТД = ДатаТД + Дата; 
			
		КонецЦикла; 
		
		ПолеТабличногоДокументаРаздел1.Области["П000010000109" + НомерСтроки].Значение = СерияНомерТД;
		ПолеТабличногоДокументаРаздел1.Области["П000010000110" + НомерСтроки].Значение = ДатаТД;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДинамическийСписокВыбора(Область, СтандартнаяОбработка, Элемент)
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
	
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений <> Неопределено Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКодСтраны(ПараметрыВвода, ХранилищеДополнительныхСведений)
	
	ИмяЭлементаСтруктуры = ПараметрыВвода.ИмяЭлементаСтруктуры;
	ИмяОбластиКодаСтраны = ПараметрыВвода.ИмяОбластиКодаСтраны;
	ИмяОбластиМестонахождения = ПараметрыВвода.ИмяОбластиМестонахождения;
	ИмяОбластиМестонахождениеБайконур = ПараметрыВвода.ИмяОбластиМестонахождениеБайконур;
	
	Если ТипЗнч(ХранилищеДополнительныхСведений) <> Тип("Структура")
	 ИЛИ НЕ ХранилищеДополнительныхСведений.Свойство(ИмяЭлементаСтруктуры) Тогда
		Возврат;
	КонецЕсли;
	           
	АдресМестонахождения = ХранилищеДополнительныхСведений[ИмяЭлементаСтруктуры];
	НаБайконуре = НЕ ПустаяСтрока(ТабличныйДокумент.Области[ИмяОбластиМестонахождениеБайконур].Значение);
	
	КодСтраны = "";
	
	Если ЗначениеЗаполнено(АдресМестонахождения.Страна) Тогда
		КодСтраны = ОпределитьКодСтраны(АдресМестонахождения.Страна);
	КонецЕсли;

	ТабличныйДокумент.Области[ИмяОбластиКодаСтраны].Значение = ?(НаБайконуре, "398", КодСтраны);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьКодСтраны(Страна)
	
	Возврат Справочники.СтраныМира.НайтиПоНаименованию(Страна).Код;
	
КонецФункции

&НаКлиенте
Процедура ВвестиМестонахождениеРаздел1(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОбласти = Область.Имя;
	
	ПараметрыВвода = Новый Структура;
	Если ИмяОбласти = "КодСтраныПродавец"
	 ИЛИ ИмяОбласти = "ПродавецМестоНахожд" Тогда
		
		ПараметрыВвода.Вставить("ИмяЭлементаСтруктуры", "АдресПродавцаРаздел1");
		ПараметрыВвода.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПродавец");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождения", "ПродавецМестоНахожд");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождениеБайконур", "ПродавецБайконур");
		
	ИначеЕсли ИмяОбласти = "КодСтраныОрг1" 
	      ИЛИ ИмяОбласти = "МестоНахождОрг_1" Тогда
		
		ПараметрыВвода.Вставить("ИмяЭлементаСтруктуры", "АдресКомиссионераРаздел1");
		ПараметрыВвода.Вставить("ИмяОбластиКодаСтраны", "КодСтраныОрг1");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождения", "МестоНахождОрг_1");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождениеБайконур", "ПокупательБайконур");
		
	КонецЕсли;
	
	ВвестиМестонахождение(ПараметрыВвода, ДополнительныеДанныеРазделов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиМестонахождениеРаздел3(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОбласти = Область.Имя;
	
	ПараметрыВвода = Новый Структура;
	Если ИмяОбласти = "КодСтраныПродавец"
	 ИЛИ ИмяОбласти = "ПродавецМестоНахожд" Тогда
		
		ПараметрыВвода.Вставить("ИмяЭлементаСтруктуры", "АдресПродавцаРаздел3");
		ПараметрыВвода.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПродавец");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождения", "ПродавецМестоНахожд");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождениеБайконур", "ПродавецБайконур");
		
	ИначеЕсли ИмяОбласти = "КодСтраныПокупатель" 
	      ИЛИ ИмяОбласти = "ПокупательМестоНахожд" Тогда
		
		ПараметрыВвода.Вставить("ИмяЭлементаСтруктуры", "АдресПокупателяРаздел3");
		ПараметрыВвода.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПокупатель");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождения", "ПокупательМестоНахожд");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождениеБайконур", "ПокупательБайконур");
		
	КонецЕсли;
	
	ВвестиМестонахождение(ПараметрыВвода, ДополнительныеДанныеРазделов, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиМестонахождениеПриложение(Элемент, Область, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяОбласти = Область.Имя;
	
	ТаблицаСтраницРаздела = Неопределено;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство("Приложение", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	СтраницыРазделаПриложение = ЭтаФорма[ТаблицаСтраницРаздела];
	
	АктивнаяСтраница = СтраницыРазделаПриложение.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
	Если АктивнаяСтраница.Количество() = 0 Тогда
		Возврат;
	Иначе
		АктивнаяСтраница = АктивнаяСтраница[0];
	КонецЕсли;
	
	Если АктивнаяСтраница.ДополнительныеДанные.Количество() = 0 Тогда
		АктивнаяСтраница.ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
			
	ПараметрыВвода = Новый Структура;
	Если ИмяОбласти = "КодСтраныПродавец"
	 ИЛИ ИмяОбласти = "ПродавецМестоНахожд" Тогда
	
		ПараметрыВвода.Вставить("ИмяЭлементаСтруктуры", "АдресПродавца");
		ПараметрыВвода.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПродавец");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождения", "ПродавецМестоНахожд");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождениеБайконур", "ПродавецБайконур");
		
	ИначеЕсли ИмяОбласти = "КодСтраныПокупатель" 
	      ИЛИ ИмяОбласти = "ПокупательМестоНахожд" Тогда
		
		ПараметрыВвода.Вставить("ИмяЭлементаСтруктуры", "АдресПокупателя");
		ПараметрыВвода.Вставить("ИмяОбластиКодаСтраны", "КодСтраныПокупатель");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождения", "ПокупательМестоНахожд");
		ПараметрыВвода.Вставить("ИмяОбластиМестонахождениеБайконур", "ПокупательБайконур");
		
	КонецЕсли;
	
	ВвестиМестонахождение(ПараметрыВвода, АктивнаяСтраница.ДополнительныеДанные[0].Значение, Элемент);
	
	АктивнаяСтраница.ДополнительныеДанные[0].Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиМестонахождение(ПараметрыВвода, ХранилищеДополнительныхСведений, Элемент)
	
	ИмяЭлементаСтруктуры = ПараметрыВвода.ИмяЭлементаСтруктуры;
	ИмяОбластиКодаСтраны = ПараметрыВвода.ИмяОбластиКодаСтраны;
	ИмяОбластиМестонахождения = ПараметрыВвода.ИмяОбластиМестонахождения;
	
	Если ТипЗнч(ХранилищеДополнительныхСведений) <> Тип("Структура") Тогда
		ХранилищеДополнительныхСведений = Новый Структура;
	КонецЕсли;
	
	ВводимыйАдрес = Неопределено;
	Если НЕ ХранилищеДополнительныхСведений.Свойство(ИмяЭлементаСтруктуры, ВводимыйАдрес) Тогда
		ВводимыйАдрес = Новый Структура;
		ВводимыйАдрес.Вставить("Страна",          "");
		ВводимыйАдрес.Вставить("Индекс",          "");
		ВводимыйАдрес.Вставить("Регион",          "");
		ВводимыйАдрес.Вставить("Район",           "");
		ВводимыйАдрес.Вставить("Город",           "");
		ВводимыйАдрес.Вставить("НаселенныйПункт", "");
		ВводимыйАдрес.Вставить("Улица",           "");
		ВводимыйАдрес.Вставить("Дом",             "");
		ВводимыйАдрес.Вставить("Корпус",          "");
		ВводимыйАдрес.Вставить("Квартира",        "");
		
		ВводимыйАдрес.Вставить("ТипДома",          "");
		ВводимыйАдрес.Вставить("ТипКорпуса",       "");
		ВводимыйАдрес.Вставить("ТипКвартиры",      "");
		
		ВводимыйАдрес.Вставить("Представление", "");
		
	КонецЕсли;
	
	ЗначенияПолей = Новый СписокЗначений;
	
	Если ВводимыйАдрес["Страна"] = "" Тогда
		ВводимыйАдрес["Страна"] = "РОССИЯ"
	КонецЕсли;
	
	КодСтраны = ОпределитьКодСтраны(ВводимыйАдрес["Страна"]);
	
	ЗначенияПолей.Добавить(КодСтраны,                        "КодСтраны");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Страна"],          "Страна");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Индекс"],          "Индекс");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Регион"],          "Регион");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Район"],           "Район");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Город"],           "Город");
	ЗначенияПолей.Добавить(ВводимыйАдрес["НаселенныйПункт"], "НаселенныйПункт");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Улица"],           "Улица");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Дом"],             "Дом");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Корпус"],          "Корпус");
	ЗначенияПолей.Добавить(ВводимыйАдрес["Квартира"],        "Квартира");
	ЗначенияПолей.Добавить(ВводимыйАдрес["ТипДома"],         "ТипДома");
	ЗначенияПолей.Добавить(ВводимыйАдрес["ТипКорпуса"],      "ТипКорпуса");
	ЗначенияПолей.Добавить(ВводимыйАдрес["ТипКвартиры"],     "ТипКвартиры");

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
	ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
	ПараметрыФормы.Вставить("Представление", 		   ВводимыйАдрес.Представление);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииАдресОрганизации);
	
	// Если это иностранное государство - удаляем из представления адреса "страну", во избежание ее дублирования.
	Если ЗначениеЗаполнено(ВводимыйАдрес["Страна"]) И ВводимыйАдрес["Страна"] <> "РОССИЯ" Тогда
		Если Лев(ВводимыйАдрес.Представление, СтрДлина(ВводимыйАдрес["Страна"]) + 2) = ВводимыйАдрес["Страна"] + ", " Тогда
			ВводимыйАдрес.Представление = Сред(ВводимыйАдрес.Представление, СтрДлина(ВводимыйАдрес["Страна"]) + 3);
			ПараметрыФормы.Вставить("Представление", ВводимыйАдрес.Представление);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВводимыйАдрес", ВводимыйАдрес);
	ДополнительныеПараметры.Вставить("ИмяЭлементаСтруктуры", ИмяЭлементаСтруктуры);
	ДополнительныеПараметры.Вставить("ПараметрыВвода", ПараметрыВвода);
	ДополнительныеПараметры.Вставить("ХранилищеДополнительныхСведений", ХранилищеДополнительныхСведений);
	ДополнительныеПараметры.Вставить("ИмяОбластиМестонахождения", ИмяОбластиМестонахождения);
	
	ТипЗначения = Тип("ОписаниеОповещения");
	ПараметрыКонструктора = Новый Массив(3);
	ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
	ПараметрыКонструктора[1] = ЭтаФорма;
	ПараметрыКонструктора[2] = ДополнительныеПараметры;
	
	Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
	
	ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.ВводимыйАдрес, Параметры.ИмяЭлементаСтруктуры, Параметры.ПараметрыВвода, Параметры.ХранилищеДополнительныхСведений, Параметры.ИмяОбластиМестонахождения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, ВводимыйАдрес, ИмяЭлементаСтруктуры, ПараметрыВвода, ХранилищеДополнительныхСведений, ИмяОбластиМестонахождения)
	
	Если Результат <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
			// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
			// соответствия "ВводимыйАдрес", передаваемого в качестве параметра.
			ВводимыйАдрес_ = ВводимыйАдрес;
			
			ВводимыйАдрес_.Вставить("Страна",          "");
			ВводимыйАдрес_.Вставить("Индекс",          "");
			ВводимыйАдрес_.Вставить("Регион",          "");
			ВводимыйАдрес_.Вставить("Район",           "");
			ВводимыйАдрес_.Вставить("Город",           "");
			ВводимыйАдрес_.Вставить("НаселенныйПункт", "");
			ВводимыйАдрес_.Вставить("Улица",           "");
			ВводимыйАдрес_.Вставить("Дом",             "");
			ВводимыйАдрес_.Вставить("Корпус",          "");
			ВводимыйАдрес_.Вставить("Квартира",        "");
			ВводимыйАдрес_.Вставить("ТипДома",         "");
			ВводимыйАдрес_.Вставить("ТипКорпуса",      "");
			ВводимыйАдрес_.Вставить("ТипКвартиры",     "");
			
			РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, ВводимыйАдрес_);
			
			ВводимыйАдрес_.Представление = Результат.Представление;
			
			ХранилищеДополнительныхСведений.Вставить(ИмяЭлементаСтруктуры, ВводимыйАдрес_);
			
			ТабличныйДокумент.Области[ИмяОбластиМестонахождения].Значение = ВводимыйАдрес_.Представление;
			
			ОтобразитьКодСтраны(ПараметрыВвода, ХранилищеДополнительныхСведений);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	Модифицированность = Истина;
		
	ИмяТекущейСтраницыПанели = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;

	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	Если ОбластьИмя = "Число" Или ОбластьИмя = "Месяц" Или ОбластьИмя = "Год" Тогда
		ДатаПодписи = Область.Значение;
		ТабличныйДокумент.Области.Число.Значение = ДатаПодписи;
		ТабличныйДокумент.Области.Месяц.Значение = ДатаПодписи;
		ТабличныйДокумент.Области.Год.Значение = ДатаПодписи;
		ДатаПодписиПриИзмененииНаСервере();
		Заголовок = СтрЗаменить(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета, ПредставлениеПериода(НачалоДня(ДатаПодписи), КонецДня(ДатаПодписи), "ФП = Истина" ));
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(ДатаПодписи), КонецДня(ДатаПодписи), "ФП = Истина");
		Возврат;
	ИначеЕсли ОбластьИмя = "НомерКорректировки" Тогда 
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = НомерКорректировки;
		Возврат;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		
		Если СтрНайти(ОбластьИмя, "П000010000104") > 0  И СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			НомерСтроки = Сред(ОбластьИмя, 15);
			ИмяСлужебногоПоля = "П000010000122_" + НомерСтроки;
			Если ТабличныйДокумент.Области.Найти(ИмяСлужебногоПоля) <> Неопределено Тогда
				ТабличныйДокумент.Области[ИмяСлужебногоПоля].Значение = ""; //очищаем служебное поле кода единицы измерения
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='При вводе единицы измерения вручную в сформированный файл выгрузки попадет введенное значение!'");
				Сообщение.Сообщить();
			КонецЕсли;
				
		ИначеЕсли СтрНайти(ОбластьИмя, "П000010000123") = 1 И СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			НомерСтроки = Сред(ОбластьИмя, 15);
			ИмяСлужебногоПоля = "П000010000124_" + НомерСтроки;
			Если ТабличныйДокумент.Области.Найти(ИмяСлужебногоПоля) <> Неопределено Тогда
				ТабличныйДокумент.Области[ИмяСлужебногоПоля].Значение = ""; //очищаем служебное поле кода единицы измерения
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='При вводе единицы измерения дополнительной величины вручную в сформированный файл выгрузки попадет введенное значение!'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;	
		
		РасчетНаКлиенте(ИмяТекущейСтраницыПанели, ОбластьИмя);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если мСтруктураРеквизитовВыгрузки = Неопределено Тогда
		мСтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
		Модифицированность = Истина;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеРевизитовВыгрузки()
	
	Если СтруктурареквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		
		ФИОПодп1Титул = ТабличныйДокумент.Области.ФИОРук.Значение;
		ФИОПодп2Титул = ТабличныйДокумент.Области.ФИОБух.Значение;
		
	Иначе
		
		ФИОПодп1Титул = СтруктураДанныхРаздел1.ФИОРук;
		ФИОПодп2Титул = СтруктураДанныхРаздел1.ФИОБух;
		
	КонецЕсли;
		
	//Сведения об организации
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	СтрокаСведений = "ИННЮЛ, ИННФЛ, КППЮЛ, НаимЮЛПол, ФИО, КодНО";
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
    	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикКПП", 	СведенияОбОрганизации.КППЮЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикИННФЛ", СведенияОбОрганизации.ИННФЛ);
	ПараметрыВыгрузки.Вставить("НалогоплательщикНаимЮЛ",СведенияОбОрганизации.НаимЮЛПол);
	ПараметрыВыгрузки.Вставить("НалогоплательщикФИО", 	СведенияОбОрганизации.ФИО);
	
	ПараметрыВыгрузки.Вставить("КодИФНС", СведенияОбОрганизации.КодНО);
	
	ДанныеПредставителя = ПолучитьСведенияОПредставителе(СведенияОбОрганизации.КодНО); //возвращает ТипПредставителя, флПредставительЮрЛицо, ФИОПредставителя, ПредставительСсылка
	
	ПараметрыВыгрузки.Вставить("ПрОтпр",	Число(ДанныеПредставителя.ТипПредставителя)); //1 - НП, 2 - представитель НП
	
	ОтправительЯвляетсяЮЛ = Истина;
	
	НаимОтпр 		= "";
	ИННЮЛОтпр		= "";
	КППОтпр         = "";

	ИННФЛОтпр       = "";

	ФамилияФЛОтпр   = "";
	ИмяФЛОтпр       = "";
	ОтчествоФЛОтпр  = "";

	ПрПодп1         = 0;
	ИННФЛПодп1      = "";
	ДолжностьПодп1  = "";
	
	ФамилияПодп1    = "";
	ИмяПодп1        = "";
	ОтчествоПодп1   = "";

	НаимДовПодп1    = "";
	НомерДовПодп1   = "";
	ДатаДовПодп1    = "";
	
	ПрПодп2         = 0;
    ИННФЛПодп2      = "";
	ДолжностьПодп2  = "";
	
	ФамилияПодп2    = "";
	ИмяПодп2        = "";
	ОтчествоПодп2   = "";
	
	НаимДовПодп2    = "";
	НомерДовПодп2   = "";
	ДатаДовПодп2    = "";

	ПрКурьер        = 0;
	ИННФЛКурьер		= "";

	ФамилияКурьер   = "";
	ИмяКурьер       = "";
	ОтчествоКурьер  = "";
	
	НаимДовКурьер   = "";
	НомерДовКурьер  = "";
	ДатаДовКурьер   = "";

	Если ДанныеПредставителя.ТипПредставителя = "1" Тогда
		//нет представителя
		Если НЕ ЭтоПБОЮЛ Тогда
			//налогоплательщик - юр.лицо
			
			//отправитель
			ОтправительЯвляетсяЮЛ = Истина;
			
			НаимОтпр 		= СведенияОбОрганизации.НаимЮЛПол;
			ИННЮЛОтпр		= СведенияОбОрганизации.ИННЮЛ;
			КППОтпр         = СведенияОбОрганизации.КППЮЛ;
			
			//подписант 1
			ПрПодп1 = 2;
			
			ФИОПодп1 = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;
			
			//подписант 2
			ПрПодп2 = 2;
			
			ФИОПодп2 = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;
			
			//курьер
			ПрКурьер = 2;

			ФамилияКурьер   = ФИОПодп1.Фамилия;
			ИмяКурьер       = ФИОПодп1.Имя;
			ОтчествоКурьер  = ФИОПодп1.Отчество;
			
		Иначе
			//налогоплательщик - ИП
			
			//отправитель
			ОтправительЯвляетсяЮЛ = Ложь;
			
			ИННФЛОтпр       = СведенияОбОрганизации.ИННФЛ;
			
			ФИОотправителя = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияФЛОтпр    = ФИОотправителя.Фамилия;
			ИмяФЛОтпр        = ФИОотправителя.Имя;
			ОтчествоФЛОтпр   = ФИОотправителя.Отчество;

			//подписант 1
			ПрПодп1 = 1;
			ФИОПодп1 = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;
			
			//курьер
			ПрКурьер = 1;
			
			ФамилияКурьер   = ФИОотправителя.Фамилия;
			ИмяКурьер       = ФИОотправителя.Имя;
			ОтчествоКурьер  = ФИОотправителя.Отчество;
		КонецЕсли;
	Иначе
		//есть представитель
		Если ДанныеПредставителя.флПредставительЮрЛицо Тогда
			//представитель - юр.лицо

			//отправитель
			ОтправительЯвляетсяЮЛ = Истина;
			
			ПредставительСсылка = ДанныеПредставителя.ПредставительСсылка;
			НаимОтпр 		= СокрЛП(ПредставительСсылка);
			ИННЮЛОтпр		= ПредставительСсылка.ИНН;
			КППОтпр         = ПредставительСсылка.КПП;	
			
			//подписант 1
			ПрПодп1 = 3;
			ФИОПодп1 = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияПодп1    = ФИОПодп1.Фамилия;
			ИмяПодп1        = ФИОПодп1.Имя;
			ОтчествоПодп1   = ФИОПодп1.Отчество;

			//подписант 2
			ФИОПодп2 = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;

			//курьер
			ПрКурьер 		= 3;

			ФамилияКурьер   = ФИОПодп1.Фамилия;
			ИмяКурьер       = ФИОПодп1.Имя;
			ОтчествоКурьер  = ФИОПодп1.Отчество;
		Иначе
			//представитель - физ.лицо
			
			//отправитель
			ОтправительЯвляетсяЮЛ = Ложь;
			
			ФИОотправителя = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп1Титул);
			ФамилияФЛОтпр    = ФИОотправителя.Фамилия;
			ИмяФЛОтпр        = ФИОотправителя.Имя;
			ОтчествоФЛОтпр   = ФИОотправителя.Отчество;
			
			//подписант 1
			ПрПодп1 		= 3;
			ФамилияПодп1    = ФИОотправителя.Фамилия;
			ИмяПодп1        = ФИОотправителя.Имя;
			ОтчествоПодп1   = ФИОотправителя.Отчество;
			
			//подписант 2
			ФИОПодп2 = РегламентированнаяОтчетность.РазложитьФИО(ФИОПодп2Титул);
			ФамилияПодп2    = ФИОПодп2.Фамилия;
			ИмяПодп2        = ФИОПодп2.Имя;
			ОтчествоПодп2   = ФИОПодп2.Отчество;
			
			//курьер
			ПрКурьер = 3;

			ФамилияКурьер   = ФИОотправителя.Фамилия;
			ИмяКурьер       = ФИОотправителя.Имя;
			ОтчествоКурьер  = ФИОотправителя.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ОтправительЯвляетсяЮЛ", ОтправительЯвляетсяЮЛ);
	
	ПараметрыВыгрузки.Вставить("НаимОтпр", 		НаимОтпр);
	ПараметрыВыгрузки.Вставить("ИННЮЛОтпр",		ИННЮЛОтпр);
	ПараметрыВыгрузки.Вставить("КППОтпр",       КППОтпр);

	ПараметрыВыгрузки.Вставить("ИННФЛОтпр",     ИННФЛОтпр);

	ПараметрыВыгрузки.Вставить("ФамилияФЛОтпр", ФамилияФЛОтпр);
	ПараметрыВыгрузки.Вставить("ИмяФЛОтпр",     ИмяФЛОтпр);
	ПараметрыВыгрузки.Вставить("ОтчествоФЛОтпр",ОтчествоФЛОтпр);

	ПараметрыВыгрузки.Вставить("ПрПодп1",       ПрПодп1);
	ПараметрыВыгрузки.Вставить("ИННФЛПодп1",    ИННФЛПодп1);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп1",ДолжностьПодп1);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп1",  ФамилияПодп1);
	ПараметрыВыгрузки.Вставить("ИмяПодп1",      ИмяПодп1);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп1", ОтчествоПодп1);

	ПараметрыВыгрузки.Вставить("НаимДовПодп1",  НаимДовПодп1);
	ПараметрыВыгрузки.Вставить("НомерДовПодп1", НомерДовПодп1);
	ПараметрыВыгрузки.Вставить("ДатаДовПодп1",  ДатаДовПодп1);
	
	ПараметрыВыгрузки.Вставить("ПрПодп2",       ПрПодп2);
	ПараметрыВыгрузки.Вставить("ИННФЛПодп2",    ИННФЛПодп2);
	ПараметрыВыгрузки.Вставить("ДолжностьПодп2",ДолжностьПодп2);
	
	ПараметрыВыгрузки.Вставить("ФамилияПодп2",  ФамилияПодп2);
	ПараметрыВыгрузки.Вставить("ИмяПодп2",      ИмяПодп2);
	ПараметрыВыгрузки.Вставить("ОтчествоПодп2", ОтчествоПодп2);

	ПараметрыВыгрузки.Вставить("НаимДовПодп2",  НаимДовПодп2);
	ПараметрыВыгрузки.Вставить("НомерДовПодп2", НомерДовПодп2);
	ПараметрыВыгрузки.Вставить("ДатаДовПодп2",  ДатаДовПодп2);
	
	ПараметрыВыгрузки.Вставить("ОтправленПочтой", Ложь);
	ПараметрыВыгрузки.Вставить("ПрКурьер",      ПрКурьер);
	ПараметрыВыгрузки.Вставить("ИННФЛКурьер",   ИННФЛКурьер);
	                 
	ПараметрыВыгрузки.Вставить("ФамилияКурьер", ФамилияКурьер);
	ПараметрыВыгрузки.Вставить("ИмяКурьер",     ИмяКурьер);
	ПараметрыВыгрузки.Вставить("ОтчествоКурьер",ОтчествоКурьер);
	
	ПараметрыВыгрузки.Вставить("НаимДовКурьер",  НаимДовКурьер);
	ПараметрыВыгрузки.Вставить("НомерДовКурьер", НомерДовКурьер);
	ПараметрыВыгрузки.Вставить("ДатаДовКурьер",  ДатаДовКурьер);
    	
	Возврат ПараметрыВыгрузки;	
	
КонецФункции

&НаКлиенте
Функция ПолучитьКопиюСтруктуры(Знач СтруктураРезультата)
	
	Результат = Новый Структура;
	
	Для Каждого Стр Из СтруктураРезультата Цикл
		Результат.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ИзменитьЗначениеОтправленПочтойПриНеобходимости(ВыполняемоеОповещение=Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьЗначениеОтправленПочтойПриНеобходимостиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеОтправленПочтойПриНеобходимостиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ТекущееЗначениеОтправленПочтой = мСтруктураРеквизитовВыгрузки.ОтправленПочтой;
	Если ТекущееЗначениеОтправленПочтой = Ложь Тогда
		мСтруктураРеквизитовВыгрузки.ОтправленПочтой = Истина;
		ИзмененоЗначениеОтправленПочтой = Истина;
	Иначе
		ИзмененоЗначениеОтправленПочтой = Ложь;
	КонецЕсли;
	
	Если ВыполняемоеОповещение <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ИзмененоЗначениеОтправленПочтой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьЗначениеОтправленПочтой()
	
	мСтруктураРеквизитовВыгрузки.ОтправленПочтой = Ложь;
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяПродолжение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	ИзменитьЗначениеОтправленПочтойПриНеобходимости(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(ИзмененоЗначениеОтправленПочтой, ДополнительныеПараметры) Экспорт
	
	Если ИзмененоЗначениеОтправленПочтой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
	Если ИзмененоЗначениеОтправленПочтой Тогда
		СброситьЗначениеОтправленПочтой()	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеПродолжение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	ИзменитьЗначениеОтправленПочтойПриНеобходимости(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(ИзмененоЗначениеОтправленПочтой, ДополнительныеПараметры) Экспорт
	
	Если ИзмененоЗначениеОтправленПочтой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
	Если ИзмененоЗначениеОтправленПочтой Тогда
		СброситьЗначениеОтправленПочтой()	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыгрузки(Команда)
	Если мСтруктураРеквизитовВыгрузки = Неопределено Тогда
		мСтруктураРеквизитовВыгрузки = ОбновитьДанныеРевизитовВыгрузки();
		Модифицированность = Истина;
	КонецЕсли;

	ФормаВыгрузки = ПолучитьФорму("Отчет.РегламентированныйОтчетЗаявлениеОВвозеТоваров.Форма.ФормаВыгрузки2012Кв2");
	ФормаВыгрузки.СтруктураРеквизитов = мСтруктураРеквизитовВыгрузки;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыВыгрузкиЗавершение", ЭтотОбъект);
	
	ФормаВыгрузки.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаВыгрузки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаВыгрузки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыгрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		мСтруктураРеквизитовВыгрузки = ПолучитьКопиюСтруктуры(Результат);		
		СохранитьНаКлиенте();
	КонецЕсли;

КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганПродолжение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПродолжение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ИзменитьЗначениеОтправленПочтойПриНеобходимости(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(ИзмененоЗначениеОтправленПочтой, ДополнительныеПараметры) Экспорт
	
	Если ИзмененоЗначениеОтправленПочтой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
	Если ИзмененоЗначениеОтправленПочтой Тогда
		СброситьЗначениеОтправленПочтой();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	Возврат мОбъектОтчета;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции