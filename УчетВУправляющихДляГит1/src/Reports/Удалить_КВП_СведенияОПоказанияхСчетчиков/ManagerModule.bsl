#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ЗАГОЛОВКА ОТЧЕТА

// Формирует заголовок отчета.
//
// Возвращаемое значение:
//  Строка - заголовок отчета
//
Функция ЗаголовокОтчета(ПараметрыОтчета) Экспорт
	
	ЗаголовокОтчета = Новый Структура();
	
	ЗаголовокОтчета.Вставить("Заголовок", "Сведения о показаниях счетчиков");
	
	Если ПараметрыОтчета.ДатаНач = '00010101000000' ИЛИ ПараметрыОтчета.ДатаКон = '00010101000000' Тогда
		ЗаголовокОтчета.Вставить("Период", "за " + Формат(ПараметрыОтчета.ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""")
										 + " - " + Формат(ПараметрыОтчета.ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""..."""));
	Иначе
		ЗаголовокОтчета.Вставить("Период", "за " + ПредставлениеПериода(НачалоДня(ПараметрыОтчета.ДатаНач), КонецДня(ПараметрыОтчета.ДатаКон)));
	КонецЕсли;
	
	ЗаголовокОтчета.Вставить("Объект", ПараметрыОтчета.Объект);
	Возврат ЗаголовокОтчета;
	
КонецФункции // ЗаголовокОтчета()

////////////////////////////////////////////////////////////////////////////////
// ПОСТРОЕНИЕ ОТЧЕТА

// Формирует список дат - список месяцев в указанном периоде.
//
// Возвращаемое значение:
//  СписокЗначений - список дат
//
Функция СформироватьСписокМесяцев(ПараметрыОтчета)
	
	СписокМесяцев = Новый СписокЗначений();
	
	ТекДата = НачалоМесяца(ПараметрыОтчета.ДатаНач);
	Пока ТекДата <= НачалоМесяца(ПараметрыОтчета.ДатаКон) Цикл
		СписокМесяцев.Добавить(ТекДата);
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	КонецЦикла;
	
	Возврат СписокМесяцев;
	
КонецФункции // СформироватьСписокМесяцев()

// Формирует таблицу показаний на начало периода.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица показаний
//
Функция СформироватьТаблицуНачальныхПоказаний(мВыборкаСчетчиков, ПараметрыОтчета)
	                                               
	ТаблицаРезультата = мВыборкаСчетчиков;
	ТаблицаРезультата.Свернуть("Счетчик");
	СписокСчетчиков = ТаблицаРезультата.ВыгрузитьКолонку("Счетчик");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК Дата,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаНач, Счетчик В (&СписокСчетчиков)) КАК КВП_ПоказанияСчетчиковСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаНач",         НачалоДня(ПараметрыОтчета.ДатаНач));
	Запрос.УстановитьПараметр("СписокСчетчиков", СписокСчетчиков);
	
	Результат = Запрос.Выполнить();
	ТаблицаПоказаний = Результат.Выгрузить();
	ТаблицаПоказаний.Индексы.Добавить("Счетчик");
	
	Возврат ТаблицаПоказаний;
	
КонецФункции // СформироватьТаблицуНачальныхПоказаний()

//Функция возвращает корректные или нет ограничения по датам для отчета
// в случае если ограничения не корректны - выдается предупреждение
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина) Экспорт
	
	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который будет осуществлен вывод
//  ПоказыватьЗаголовок - Булево - показывать ли заголовок
//  ВысотаЗаголовка - Число - переменная, в которую запишется высота
//                 области заголовка
//
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
		
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран объект");
		Возврат;
	КонецЕсли;
	
	ОграничениеПоДатамКорректно = ПроверитьКорректностьОграниченийПоДатам(ПараметрыОтчета.ДатаНач, ПараметрыОтчета.ДатаКон);
	Если НЕ ОграничениеПоДатамКорректно Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Макет = Отчеты.Удалить_КВП_СведенияОПоказанияхСчетчиков.ПолучитьМакет("Макет");
	
	ОбластьЗаголовка = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовка.Параметры.Заполнить(ЗаголовокОтчета(ПараметрыОтчета));
	ДокументРезультат.Вывести(ОбластьЗаголовка);
	
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	
	ПостроительОтчета = Новый ПостроительОтчета();
	ПостроительОтчета.Текст = ПолучитьТекстЗапроса(ПараметрыОтчета);
	ПостроительОтчета.Параметры.Вставить("Объект", ПараметрыОтчета.Объект);
	ПостроительОтчета.Параметры.Вставить("ДатаНач", НачалоДня(ПараметрыОтчета.ДатаНач));
	ПостроительОтчета.Параметры.Вставить("ДатаКон", КонецДня(ПараметрыОтчета.ДатаКон));
	Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		ПостроительОтчета.Параметры.Вставить("Здание", ПараметрыОтчета.Объект.Владелец);
		ПостроительОтчета.Параметры.Вставить("НомерПервойКвартиры",    ПараметрыОтчета.Объект.НомерПервойКвартиры);
		ПостроительОтчета.Параметры.Вставить("НомерПоследнейКвартиры", ПараметрыОтчета.Объект.НомерПоследнейКвартиры);
	КонецЕсли;
	
	ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПостроительОтчета.Результат;
	ТаблицаАнализа = РезультатЗапроса.Выгрузить();	
	СписокМесяцев = СформироватьСписокМесяцев(ПараметрыОтчета);		
	ВыборкаСчетчиков = ТаблицаАнализа.Скопировать();
	
	ЭтоПаркинг = Ложь;
	ВидОбъектаВладельца = "Здание";
	ВидОбъектаИндСч = "ЛицевойСчетПомещение";
	Если (ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Здания") И (ПараметрыОтчета.Объект.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Паркинг))
		ИЛИ (ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") И (Справочники.УПЖКХ_ВидыПомещений.Выбрать().ТипПомещения = Перечисления.КВП_ТипыПомещений.Автоместо))
			Тогда
				ЭтоПаркинг = Истина;
				ВидОбъектаВладельца = "Паркинг";
				ВидОбъектаИндСч = "ПарковочноеМесто";
	КонецЕсли;
	
	ВыборкаСчетчиков.Колонки.Добавить("ДопОбъект", Новый ОписаниеТипов("Булево"));
	ВидОбъектаВладельца = "Здание";
	ЭтоПаркинг = Ложь;
	МассивСтрокДляУдаления = Новый Массив;
	ТаблицаЗданий = ВыборкаСчетчиков.Скопировать();
	ТаблицаЗданий.Свернуть(ВидОбъектаВладельца);
	ТаблицаУслуг = ВыборкаСчетчиков.Скопировать();
	ТаблицаУслуг.Свернуть("ВидУслуги");
	КоличествоУслуг = ТаблицаУслуг.Количество();
	тмВспомогательнаяТаблица = ВыборкаСчетчиков.Скопировать();
	
	Для Каждого ТекСтрока Из ТаблицаЗданий Цикл
		СтрокаЗдания = ВыборкаСчетчиков.Найти(ТекСтрока[ВидОбъектаВладельца], "Объект");
		Если СтрокаЗдания = Неопределено Тогда
			МассивСтрокДляУдаления.Очистить();
			Для Каждого ТекУслуга Из ТаблицаУслуг Цикл
				НоваяСтрока = ВыборкаСчетчиков.Добавить();
				НоваяСтрока.ВидОбъекта = ВидОбъектаВладельца;
				НоваяСтрока[ВидОбъектаВладельца] = ТекСтрока[ВидОбъектаВладельца];
				НоваяСтрока.Объект = ТекСтрока[ВидОбъектаВладельца];
				НоваяСтрока.Счетчик = "-";
				НоваяСтрока.ВидУслуги = ТекУслуга.ВидУслуги;
				НоваяСтрока.ДопОбъект = Истина;
				Расход = 0;
				УчетноеКоличество = 0;
				Если ЭтоПаркинг Тогда
					СтрокиПаркМест = тмВспомогательнаяТаблица.НайтиСтроки(
						Новый Структура("ВидУслуги, ВидОбъекта, Паркинг", 
						ТекУслуга.ВидУслуги, "ПарковочноеМесто", НоваяСтрока.Объект));
					Для Каждого СтрокаПаркМеста Из СтрокиПаркМест Цикл
						Расход = Расход + СтрокаПаркМеста.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокаПаркМеста.УчетноеКоличество;
					КонецЦикла;
				Иначе
					СтрокиПодъездов = тмВспомогательнаяТаблица.НайтиСтроки(
							Новый Структура("ВидУслуги, ВидОбъекта, Здание", 
							ТекУслуга.ВидУслуги, "Подъезд", НоваяСтрока.Объект));
					СпПодъездов = Новый СписокЗначений;
					Для Каждого СтрокаПодъезда Из СтрокиПодъездов Цикл
						Расход = Расход + СтрокаПодъезда.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокаПодъезда.УчетноеКоличество;
						СпПодъездов.Добавить(СтрокаПодъезда.Объект);
					КонецЦикла;
					СтрокиЛС = тмВспомогательнаяТаблица.НайтиСтроки(
					Новый Структура("ВидУслуги, ВидОбъекта, Здание", 
						ТекУслуга.ВидУслуги, "ЛицевойСчет", НоваяСтрока.Объект));
					Для Каждого СтрокаЛС Из СтрокиЛС Цикл
						Если НЕ СпПодъездов.НайтиПоЗначению(СтрокаЛС.Подъезд) = Неопределено Тогда
							Продолжить;
						КонецЕсли;    
						Расход = Расход + СтрокаЛС.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокаЛС.УчетноеКоличество;
					КонецЦикла;
					
					СтрокиПомещение = тмВспомогательнаяТаблица.НайтиСтроки(
					Новый Структура("ВидУслуги, ВидОбъекта, Здание", 
						ТекУслуга.ВидУслуги, "Помещение", НоваяСтрока.Объект));
					Для Каждого СтрокиПомещение Из СтрокиПомещение Цикл
						Если НЕ СпПодъездов.НайтиПоЗначению(СтрокиПомещение.Подъезд) = Неопределено Тогда
							Продолжить;
						КонецЕсли;    
						Расход = Расход + СтрокиПомещение.Расход;
						УчетноеКоличество = УчетноеКоличество + СтрокиПомещение.УчетноеКоличество;
					КонецЦикла;
					
				КонецЕсли;
				НоваяСтрока.Расход = Расход;
				НоваяСтрока.УчетноеКоличество = УчетноеКоличество;
				Если Расход = 0 Тогда
					МассивСтрокДляУдаления.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
			КолСтрок = Мин(КоличествоУслуг, МассивСтрокДляУдаления.Количество());
			Если КолСтрок = КоличествоУслуг Тогда
				КолСтрок = КолСтрок - 1;
			КонецЕсли;
			Для Индекс = 0 По КолСтрок - 1 Цикл
				ВыборкаСчетчиков.Удалить(МассивСтрокДляУдаления[Индекс]);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаСчетчиков.Сортировать("Здание, Подъезд, КодКвартиры, УровеньИерархии, Счетчик, Месяц, Дата");
	мВыборкаСчетчиков = ВыборкаСчетчиков.Скопировать();
	ТаблицаНачальныхПоказаний = СформироватьТаблицуНачальныхПоказаний(мВыборкаСчетчиков, ПараметрыОтчета);
	
	
	//по умолчанию значения следующие
	ДнНчПк = 0;
	ДнНч   = 0;
	Дн     = 0;
	
	ДнНчПкПред = 0;
	ДнНчПред   = 0;
	ДнПред     = 0;

	Период               = "ПериодДневной";
	СтрокаТаблицы        = "СтрокаТаблицыДневные";
	СтрокаТаблицыПред    = "СтрокаТаблицыДневные";
	ЗаголовокТаблицы     = "ЗаголовокТаблицыДневные";
	ЗаголовокТаблицыПред = "СтрокаТаблицыДневные";
	ПредыдущиеПоказания  = "ПредыдущиеПоказанияДневные";
	
	//устанавливаем флаг при наличии предыдушие показаний
	Для Каждого Стр Из ТаблицаНачальныхПоказаний Цикл
		Если (ЗначениеЗаполнено(Стр.Ночноепоказание) И ЗначениеЗаполнено(Стр.ПиковоеПоказание)) Тогда
			ДнНчПкПред = 1;
		ИначеЕсли ЗначениеЗаполнено(Стр.Ночноепоказание) Тогда
			ДнНчПред = 1;
		Иначе
			ДнПред = 1;
		КонецЕсли;
	КонецЦикла;
	
	//определяем области в зависимости от флага показаний для предыдущих показаний
	Если ДнНчПкПред = 1 Тогда
		ДнНчПред = 0;
		ДнПред   = 0;
		СтрокаТаблицыПред    = "СтрокаТаблицыПиковые";
		ЗаголовокТаблицыПред = "ЗаголовокТаблицыПиковые";
		ПредыдущиеПоказания  = "ПредыдущиеПоказанияПиковые";
	ИначеЕсли ДнНчПред = 1 Тогда
		ДнНчПкПред = 0;
		ДнПред     = 0;
		СтрокаТаблицыПред        = "СтрокаТаблицы";
		ЗаголовокТаблицыПред = "ЗаголовокТаблицы";
		ПредыдущиеПоказания  = "ПредыдущиеПоказания";
	ИначеЕсли ДнПред = 1 Тогда		
		ДнНчПкПред = 0;
		ДнНчПред   = 0;
		СтрокаТаблицыПред    = "СтрокаТаблицыДневные";
		ЗаголовокТаблицыПред = "ЗаголовокТаблицыДневные";
		ПредыдущиеПоказания  = "ПредыдущиеПоказанияДневные";
	КонецЕсли;
		
	//устанавливаем флаг при наличии показаний
	Для Каждого Стр Из ТаблицаАнализа Цикл
		Если (ЗначениеЗаполнено(Стр.ПокНч) И ЗначениеЗаполнено(Стр.ПокПк)) Тогда
			ДнНчПк = 1;
		ИначеЕсли ЗначениеЗаполнено(Стр.ПокНч) Тогда
			ДнНч = 1;
		Иначе
			Дн = 1;
		КонецЕсли;
	КонецЦикла;
	
	//определяем области в зависимости от флага показаний
	Если ДнНчПк = 1 Тогда
		ДнНч = 0;
		Дн   = 0;
		Период              = "ПериодПиковый";
		ЗаголовокТаблицы    = "ЗаголовокТаблицыПиковые";
		СтрокаТаблицы       = "СтрокаТаблицыПиковые";
		Если НЕ ТаблицаНачальныхПоказаний.Количество() > 0 Тогда
			СтрокаТаблицыПред    = "СтрокаТаблицыПиковые";
			ЗаголовокТаблицыПред = "ЗаголовокТаблицыПиковые";
			ПредыдущиеПоказания  = "ПредыдущиеПоказанияПиковые";
		КонецЕсли;			
	ИначеЕсли ДнНч = 1 Тогда
		ДнНчПк = 0;
		Дн     = 0;
		Период              = "Период";
		ЗаголовокТаблицы    = "ЗаголовокТаблицы";
		СтрокаТаблицы       = "СтрокаТаблицы";
		Если НЕ ТаблицаНачальныхПоказаний.Количество() > 0 Тогда
			СтрокаТаблицыПред    = "СтрокаТаблицы";
			ЗаголовокТаблицыПред = "ЗаголовокТаблицы";
			ПредыдущиеПоказания  = "ПредыдущиеПоказания";
		КонецЕсли;
	ИначеЕсли Дн = 1 Тогда		
		ДнНчПк = 0;
		ДнНч   = 0;
		Период              = "ПериодДневной";
		ЗаголовокТаблицы    = "ЗаголовокТаблицыДневные";
		СтрокаТаблицы       = "СтрокаТаблицыДневные";
		Если НЕ ТаблицаНачальныхПоказаний.Количество() > 0 Тогда
			СтрокаТаблицыПред    = "СтрокаТаблицыДневные";
			ЗаголовокТаблицыПред = "ЗаголовокТаблицыДневные";
			ПредыдущиеПоказания  = "ПредыдущиеПоказанияДневные";
		КонецЕсли;
	КонецЕсли;
	
	
	ТЗОбъектов = ВыборкаСчетчиков.Скопировать();
	ТЗОбъектов.Свернуть("Объект, Счетчик, ВидУслуги, КодСчетчика, разрядностьСчетчика, ДатаОкончДействияСчетчика, ВидОбъекта, ВидУслугиСсылка");
	ТЗОбъектов.Колонки.Добавить("КолСтрок", Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ТЗОбъектов Цикл
		Для Каждого СтрокаУслуги Из ТаблицаУслуг Цикл
			СтрокиОбъекта = ВыборкаСчетчиков.НайтиСтроки(Новый Структура("Объект, ВидУслуги", ТекСтрока.Объект, СтрокаУслуги.ВидУслуги));
			ТекСтрока.КолСтрок = Макс(ТекСтрока.КолСтрок, СтрокиОбъекта.Количество());
		КонецЦикла;
	КонецЦикла;	
		
	//Таблица шапка.
	Область = Макет.ПолучитьОбласть(ЗаголовокТаблицы + "|Счетчик");
	ДокументРезультат.Вывести(Область);
	Область = Макет.ПолучитьОбласть(ЗаголовокТаблицыПред + "|" + ПредыдущиеПоказания);
	ДокументРезультат.Присоединить(Область);
	Для Каждого ТекМесяц Из СписокМесяцев Цикл
		Область = Макет.ПолучитьОбласть(ЗаголовокТаблицы + "|" + Период);
		Область.Параметры.Месяц = Формат(ТекМесяц.Значение, "ДФ='MMMM yy'");
		ДокументРезультат.Присоединить(Область);
	КонецЦикла;


	//Вывод данных 
	СЧ = 0;
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Пока СЧ < ТЗОбъектов.Количество() Цикл
		ТекущаяСтрока = ТЗОбъектов.Получить(Сч);
		Если (Сч + 1) < (ТЗОбъектов.Количество()) Тогда
			СледующаяСтрока = ТЗОбъектов.Получить(Сч + 1);
		КонецЕсли;
		Если (Сч - 1) >= 0 Тогда
			ПредыдущаяСтрока = ТЗОбъектов.Получить(Сч - 1);
		КонецЕсли;
			
		Область = Макет.ПолучитьОбласть(СтрокаТаблицы + "|Счетчик");
		Область.Параметры.Заполнить(ТекущаяСтрока);
		
		Если ТекущаяСтрока.ВидОбъекта = "Здание" ИЛИ ТекущаяСтрока.ВидОбъекта = "Паркинг" Тогда
			УровеньГруппировки = 0;
			Область.Область().ЦветФона = Новый Цвет(214,234,255);
		ИначеЕсли ТекущаяСтрока.ВидОбъекта = "Подъезд" ИЛИ ТекущаяСтрока.ВидОбъекта = "ПарковочноеМесто" Тогда
			УровеньГруппировки = 1;
			Область.Область().Отступ = 1;
			Область.Область().ЦветФона = Новый Цвет(231,255,239);
		ИначеЕсли ТекущаяСтрока.ВидОбъекта = "ЛицевойСчет"
			И ТекущаяСтрока.Объект.Адрес = ПредыдущаяСтрока.Объект Тогда
			УровеньГруппировки = 3;
			Область.Область().Отступ = 3;
		Иначе
			УровеньГруппировки = 2;
			Область.Область().Отступ = 2;
		КонецЕсли;
		
		Область.Параметры.ДатаОкончДействияСчетчика = Формат(ТекущаяСтрока.ДатаОкончДействияСчетчика, "ДФ=dd.MM.yyyy; ДП=-");
		ДокументРезультат.Вывести(Область, УровеньГруппировки);
		
		// Пред. показания.
		Область = Макет.ПолучитьОбласть(СтрокаТаблицыПред + "|" + ПредыдущиеПоказания);
		СтрокаПредПоказаний = ТаблицаНачальныхПоказаний.Найти(ТекущаяСтрока.Счетчик, "Счетчик");
		Если СтрокаПредПоказаний = Неопределено Тогда
			тмПредПокДн = 0;
			тмПредПокНч = 0;
			тмПредПокПк = 0;
			ТекДата     = "";
		Иначе
			тмПредПокДн = СтрокаПредПоказаний.ДневноеПоказание;
			тмПредПокНч = СтрокаПредПоказаний.НочноеПоказание;
			тмПредПокПк = СтрокаПредПоказаний.ПиковоеПоказание;
			ТекДата     = СтрокаПредПоказаний.Дата;
		КонецЕсли;
		
		Если ДнНчПкПред = 1 Тогда
			Область.Параметры.ПокДн = тмПредПокДн;
			Область.Параметры.ПокНч = тмПредПокНч;
			Область.Параметры.ПокПк = тмПредПокПк;
		ИначеЕсли ДнНчПред = 1 Тогда
			Область.Параметры.ПокДн = тмПредПокДн;
			Область.Параметры.ПокНч = тмПредПокНч;
		ИначеЕсли ДнПред = 1 Тогда		
			Область.Параметры.ПокДн = тмПредПокДн;
		КонецЕсли;
		
		Область.Параметры.Дата  = ТекДата;
		
		Если ТекущаяСтрока.ВидОбъекта = "Здание" ИЛИ ТекущаяСтрока.ВидОбъекта = "Паркинг" Тогда
			Область.Область().ЦветФона = Новый Цвет(214,234,255);
		ИначеЕсли ТекущаяСтрока.ВидОбъекта = "Подъезд" ИЛИ ТекущаяСтрока.ВидОбъекта = "ПарковочноеМесто" Тогда
			Область.Область().ЦветФона = Новый Цвет(231,255,239);
		КонецЕсли;
		
		ДокументРезультат.Присоединить(Область, УровеньГруппировки);
		
		ОбъектСчетчик = ВыборкаСчетчиков.НайтиСтроки(Новый Структура("Объект, Счетчик", ТекущаяСтрока.Объект, ТекущаяСтрока.Счетчик));
		
		Для Каждого ТекМесяц Из СписокМесяцев Цикл
			
			Для Каждого Стр Из ОбъектСчетчик Цикл
				
				
				Если Стр.Месяц = ТекМесяц.Значение Тогда
					
					тмТекПокДн = Стр.ПокДн;
					тмТекПокНч = Стр.ПокНч;
					тмТекПокПк = Стр.ПокПк;
					ТекДата    = Стр.Дата;
					
					Если Стр.Счетчик.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета Тогда
						
						РасходДн = тмТекПокДн;
						РасходНч = тмТекПокНч;
						РасходПк = тмТекПокПк;
						УчетноеКоличествоДн = Стр.Коэффициент * РасходДн;
						УчетноеКоличествоНч = Стр.Коэффициент * РасходНч;
						УчетноеКоличествоПк = Стр.Коэффициент * РасходПк;
						
						Если РасходДн = 0 И РасходНч = 0 И РасходПк = 0 Тогда
							ТекДата = "-";
						КонецЕсли;
						
					Иначе
						
						// Если новых нет, берем старые.
						Если тмТекПокДн = 0 Тогда
							тмТекПокДн = тмПредПокДн;
						КонецЕсли;
						Если тмТекПокНч = 0 Тогда
							тмТекПокНч = тмПредПокНч;
						КонецЕсли;
						Если тмТекПокПк = 0 Тогда
							тмТекПокПк = тмПредПокПк;
						КонецЕсли;					
						
						// Считаем расход и текущие показания становятся предыдущими.
						РасходДн = тмТекПокДн - тмПредПокДн;
						РасходНч = тмТекПокНч - тмПредПокНч;
						РасходПк = тмТекПокПк - тмПредПокПк;
						УчетноеКоличествоДн = Стр.Коэффициент * РасходДн;
						УчетноеКоличествоНч = Стр.Коэффициент * РасходНч;
						УчетноеКоличествоПк = Стр.Коэффициент * РасходПк;
						тмПредПокДн = тмТекПокДн;
						тмПредПокНч = тмТекПокНч;
						тмПредПокПк = тмТекПокПк;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			// Выводим область.
			Область = Макет.ПолучитьОбласть(СтрокаТаблицы + "|" + Период);
						
			Область.Параметры.Дата     = ТекДата;
			
			Если ДнНчПк = 1 Тогда
				Область.Параметры.ПокДн    = тмТекПокДн;
				Область.Параметры.РасходДн = РасходДн;
				Область.Параметры.УчетноеКоличествоДн = УчетноеКоличествоДн;
				Область.Параметры.ПокНч    = тмТекПокНч;
				Область.Параметры.РасходНч = РасходНч;
				Область.Параметры.УчетноеКоличествоНч = УчетноеКоличествоНч;
				Область.Параметры.ПокПк    = тмТекПокПк;
				Область.Параметры.РасходПк = РасходПк;
				Область.Параметры.УчетноеКоличествоПк = УчетноеКоличествоПк;
			ИначеЕсли ДнНч = 1 Тогда
				Область.Параметры.ПокДн    = тмТекПокДн;
				Область.Параметры.РасходДн = РасходДн;
				Область.Параметры.УчетноеКоличествоДн = УчетноеКоличествоДн;
				Область.Параметры.ПокНч    = тмТекПокНч;
				Область.Параметры.РасходНч = РасходНч;
				Область.Параметры.УчетноеКоличествоНч = УчетноеКоличествоНч;
			ИначеЕсли Дн = 1 Тогда		
				Область.Параметры.ПокДн    = тмТекПокДн;
				Область.Параметры.РасходДн = РасходДн;
				Область.Параметры.УчетноеКоличествоДн = УчетноеКоличествоДн;
			КонецЕсли;
			
			Если ТекущаяСтрока.ВидОбъекта = "Здание" ИЛИ ТекущаяСтрока.ВидОбъекта = "Паркинг" Тогда
				Область.Область().ЦветФона = Новый Цвет(214,234,255);
			ИначеЕсли ТекущаяСтрока.ВидОбъекта = "Подъезд" ИЛИ ТекущаяСтрока.ВидОбъекта = "ПарковочноеМесто" Тогда
				Область.Область().ЦветФона = Новый Цвет(231,255,239);
			КонецЕсли;
			
			ДокументРезультат.Присоединить(Область);
			
			ТекДата = "";
			тмТекПокДн = 0;
			РасходДн = 0;
			УчетноеКоличествоДн = 0;
			тмТекПокНч = 0;
			РасходНч = 0;
			УчетноеКоличествоНч = 0;
			тмТекПокПк = 0;
			РасходПк = 0;
			УчетноеКоличествоПк = 0;
			
		КонецЦикла;
		
		СЧ = СЧ + 1;
	КонецЦикла;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	
	// Подвал.
	Область = Макет.ПолучитьОбласть("Подвал|Счетчик");
	ДокументРезультат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("Подвал|" + ПредыдущиеПоказания);
	ДокументРезультат.Присоединить(Область);
	Для Каждого ТекМесяц Из СписокМесяцев Цикл
		Область = Макет.ПолучитьОбласть("Подвал|" + Период);
		ДокументРезультат.Присоединить(Область);
	КонецЦикла;
	
	// Зафиксируем заголовок отчета.
	ДокументРезультат.ФиксацияСверху = ВысотаЗаголовка + 5;
	
	ДокументРезультат.ПовторятьПриПечатиСтроки = ДокументРезультат.Область(ВысотаЗаголовка + 2, , ВысотаЗаголовка + 4, );
	
	// Первую колонку не печатаем.
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ДокументРезультат.ИмяПараметровПечати = "ПоказанияСчетчикаКВП";
	
	//УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ДокументРезультат, ЗаголовокОтчета(), Строка(глЗначениеПеременной("глТекущийПользователь")));
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры // СформироватьОтчет()

// Формирует и возвращает текст запроса.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ПолучитьТекстЗапроса(ПараметрыОтчета) Экспорт
	
	ТекстЗапроса =		
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ""ЛицевойСчет""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА ""Подъезд""
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|								И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Здание)
	|							ТОГДА ""Здание""
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|										И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения <> ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|									ТОГДА ""Помещение""
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|												И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Паркинг)
	|											ТОГДА ""Паркинг""
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|														И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|													ТОГДА ""ПарковочноеМесто""
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидОбъекта,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА 4
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|					ТОГДА 2
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|								И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Здание)
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|										И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|									ТОГДА 2
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|												И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Паркинг)
	|											ТОГДА 1
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|														И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения <> ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|													ТОГДА 3
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК УровеньИерархии,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Владелец
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|					ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Владелец
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|							ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Владелец
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|									ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект
	|							КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Здание,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				И ЗакрепленныеСчетчикиСрезПоследних.Объект.ВидПомещения.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Автоместо)
	|			ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Владелец
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|						И ЗакрепленныеСчетчикиСрезПоследних.Объект.ТипСооружения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипСооружения.Паркинг)
	|					ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект
	|			КОНЕЦ
	|	КОНЕЦ КАК Паркинг,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА КВП_Подъезды.Ссылка
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|					ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Подъезд
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|							ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Подъезд,
	|	ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК ВидУслугиСсылка,
	|	ЕСТЬNULL(ПоказанияСчетчиковТекущие.ДневноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.НочноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.ПиковоеПоказание, 0) КАК ПокТек,
	|	ЕСТЬNULL(ПоказанияСчетчиковТекущие.Период, ""-"") КАК ДатаТек,
	|	ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ДневноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.НочноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ПиковоеПоказание, 0) КАК ПокПред,
	|	ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.Период, ""-"") КАК ДатаПред,
	|	ВЫБОР
	|		КОГДА ЗакрепленныеСчетчикиСрезПоследних.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА ВЫБОР
	|					КОГДА ПоказанияСчетчиковТекущие.Период = ПоказанияСчетчиковПредыдущие.Период
	|						ТОГДА 0
	|					ИНАЧЕ ЕСТЬNULL(ПоказанияСчетчиковТекущие.ДневноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.НочноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.ПиковоеПоказание, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(ПоказанияСчетчиковТекущие.ДневноеПоказание, 0) - ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ДневноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.НочноеПоказание, 0) - ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.НочноеПоказание, 0) + ЕСТЬNULL(ПоказанияСчетчиковТекущие.ПиковоеПоказание, 0) - ЕСТЬNULL(ПоказанияСчетчиковПредыдущие.ПиковоеПоказание, 0)
	|	КОНЕЦ КАК Расход,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	ЕСТЬNULL(ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Код, ВЫБОР
	|			КОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|				ТОГДА ЗакрепленныеСчетчикиСрезПоследних.Объект.Код
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КодКвартиры,
	|	ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес КАК Квартира,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Разрядность КАК РазрядностьСчетчика,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.Представление КАК ВидУслуги,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Наименование КАК КодСчетчика,
	|	ПоказанияСчетчиков.ДневноеПоказание КАК ПокДн,
	|	ПоказанияСчетчиков.НочноеПоказание КАК ПокНч,
	|	ПоказанияСчетчиков.ПиковоеПоказание КАК ПокПк,
	|	ПоказанияСчетчиков.Месяц,
	|	СведенияОДатеПоверки.Период КАК ДатаОкончДействияСчетчика,
	|	ПоказанияСчетчиков.Дата,
	|	ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ втИтоговаяТаблица
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаКон, {(Счетчик).* КАК Счетчик, (Счетчик.ВидУслуги).* КАК Услуга}) КАК ЗакрепленныеСчетчикиСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаКон, {(Счетчик).* КАК Счетчик, (Счетчик.ВидУслуги).* КАК Услуга}) КАК ПоказанияСчетчиковТекущие
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Счетчик = ПоказанияСчетчиковТекущие.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаНач, {(Счетчик).* КАК Счетчик, (Счетчик.ВидУслуги).* КАК Услуга}) КАК ПоказанияСчетчиковПредыдущие
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Счетчик = ПоказанияСчетчиковПредыдущие.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Подъезды КАК КВП_Подъезды
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Подъезд = КВП_Подъезды.Ссылка
	|			И (ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес.Код МЕЖДУ КВП_Подъезды.НомерПервойКвартиры И КВП_Подъезды.НомерПоследнейКвартиры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(КВП_ПоказанияСчетчиков.ДневноеПоказание) КАК ДневноеПоказание,
	|			МАКСИМУМ(КВП_ПоказанияСчетчиков.НочноеПоказание) КАК НочноеПоказание,
	|			МАКСИМУМ(КВП_ПоказанияСчетчиков.ПиковоеПоказание) КАК ПиковоеПоказание,
	|			МАКСИМУМ(КВП_ПоказанияСчетчиков.Период) КАК Дата,
	|			КВП_ПоказанияСчетчиков.МоментВремени КАК МоментВремени,
	|			КВП_ПоказанияСчетчиков.Счетчик КАК Счетчик,
	|			НАЧАЛОПЕРИОДА(КВП_ПоказанияСчетчиков.Период, МЕСЯЦ) КАК Месяц
	|		ИЗ
	|			РегистрСведений.КВП_ПоказанияСчетчиков КАК КВП_ПоказанияСчетчиков
	|		ГДЕ
	|			КВП_ПоказанияСчетчиков.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КВП_ПоказанияСчетчиков.Счетчик,
	|			КВП_ПоказанияСчетчиков.МоментВремени,
	|			НАЧАЛОПЕРИОДА(КВП_ПоказанияСчетчиков.Период, МЕСЯЦ)) КАК ПоказанияСчетчиков
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Счетчик = ПоказанияСчетчиков.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|				,
	|				Объект В (&Объект)
	|					И Поверка) КАК СведенияОДатеПоверки
	|		ПО ЗакрепленныеСчетчикиСрезПоследних.Счетчик = СведенияОДатеПоверки.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяТаблица.ВидОбъекта,
	|	втИтоговаяТаблица.УровеньИерархии,
	|	втИтоговаяТаблица.Здание,
	|	втИтоговаяТаблица.Паркинг,
	|	втИтоговаяТаблица.Подъезд,
	|	втИтоговаяТаблица.Объект,
	|	втИтоговаяТаблица.ВидУслугиСсылка,
	|	втИтоговаяТаблица.ПокТек,
	|	втИтоговаяТаблица.ДатаТек,
	|	втИтоговаяТаблица.ПокПред,
	|	втИтоговаяТаблица.ДатаПред,
	|	втИтоговаяТаблица.Расход,
	|	втИтоговаяТаблица.Коэффициент * втИтоговаяТаблица.Расход КАК УчетноеКоличество,
	|	втИтоговаяТаблица.Счетчик,
	|	втИтоговаяТаблица.КодКвартиры,
	|	втИтоговаяТаблица.Квартира,
	|	втИтоговаяТаблица.РазрядностьСчетчика,
	|	втИтоговаяТаблица.ВидУслуги,
	|	втИтоговаяТаблица.КодСчетчика,
	|	втИтоговаяТаблица.ПокДн,
	|	втИтоговаяТаблица.ПокНч,
	|	втИтоговаяТаблица.ПокПк,
	|	втИтоговаяТаблица.Месяц,
	|	втИтоговаяТаблица.ДатаОкончДействияСчетчика,
	|	втИтоговаяТаблица.Дата,
	|	втИтоговаяТаблица.Коэффициент
	|ИЗ
	|	втИтоговаяТаблица КАК втИтоговаяТаблица";
	
	Если ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	втИтоговаяТаблица.Объект = &Объект ";
		
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	(втИтоговаяТаблица.Объект = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Владелец = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Адрес.Владелец = &Объект)";
		
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	втИтоговаяТаблица.Объект = &Объект
		|	ИЛИ (втИтоговаяТаблица.Объект.Адрес.Владелец = &Здание
		|	И втИтоговаяТаблица.Объект.Адрес.Владелец.Код >= &НомерПервойКвартиры
		|	И втИтоговаяТаблица.Объект.Адрес.Владелец.Код <= &НомерПоследнейКвартиры)";
		
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда  
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	(втИтоговаяТаблица.Объект = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Владелец = &Объект
		|	ИЛИ втИтоговаяТаблица.Объект.Адрес.Владелец = &Объект)";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|{УПОРЯДОЧИТЬ ПО
	|Объект.*}
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Объект) Тогда
		Если ПараметрыОтчета.Объект.ЭтоГруппа Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Объект", " В ИЕРАРХИИ(&Объект)");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
	
КонецФункции // ПолучитьТекстЗапроса()

#КонецЕсли