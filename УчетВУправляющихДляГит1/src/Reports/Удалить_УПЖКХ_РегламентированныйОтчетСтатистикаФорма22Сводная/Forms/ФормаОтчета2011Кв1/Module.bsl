////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// ОПИСАНИЕ ПАРМЕТРОВ ФОРМЫ
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "03/08/2011";
	СтруктураРеквизитовФормы.мКодОтчета   = "0609203";
	// Код отчета, равен коду по ОКУД
	СтруктураРеквизитовФормы.мПечатныеФормы = Новый СписокЗначений;
	
	ПолеТабличногоДокументаФормаОтчета.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("ФормаОтчета2011Кв1_ФормаОтчета"));
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация      		  = Параметры.Организация;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = 
		Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаПодписи".
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ПолеТабличногоДокументаФормаОтчета.Области.ДатаСоставленияОтчета.Значение = 
		Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	
	ЗаполнитьСведенияОбОрганизацииНаКлиенте(Истина);
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидДокументаПредставление".
Процедура ВидДокументаПредставлениеПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриИзмененииВидаДокументаИКорректировки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ВидДокументаПредставление".
Процедура ВидДокументаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ПолеТабличногоДокументаФормаОтчетаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Имя = "ОргАдрес" Тогда
		РегламентированнаяОтчетностьКлиент.ОбработкаАдресаВСтатистическомОтчете(ЭтаФорма, Область, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзмененииСодержимогоОбласти" поля "ПолеТабличногоДокументаФормаОтчета".
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если Область.СодержитЗначение И Область.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если Область.Значение = 0 И Область.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти = 0
		  И Область.ТипЗначения.КвалификаторыЧисла.Разрядность > 4 Тогда
			
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(Область.Формат);
			
			ОтображениеНуля = СокрЛП(Формат(0, ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, "ЧН=")));
			Если ПустаяСтрока(ОтображениеНуля) Тогда
				ОтображениеНуля = "0";
			КонецЕсли;
			ТипСтрокиЗаполнения = 
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(СтрДлина(ОтображениеНуля),ДопустимаяДлина.Фиксированная));
			СтрокаЗаполнения = ТипСтрокиЗаполнения.ПривестиЗначение();
			
			Список = Новый СписокЗначений;
			Список.Добавить("ЧН=' '", "  <Пустое значение>    " + СтрокаЗаполнения);
			Список.Добавить("ЧН=" + ОтображениеНуля, "  Отображать как """ + ОтображениеНуля + """  ");
			
			НайденнаяСтрока = Список.НайтиПоЗначению(ФорматПредставленияНуля);
			
			ДопПараметры = Новый Структура("Область", Область);
			ПоказатьВыборИзСписка(	Новый ОписаниеОповещения("ОбработатьРезультатВыбораИзСписка", ЭтаФорма, ДопПараметры),
									Список, Элемент, ?(НайденнаяСтрока = Неопределено, Список[0], НайденнаяСтрока));
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродожение();
	
КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти()

&НаКлиенте
// Обработчик результата выбора из списка, вызванного в процедуре "ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти()".
Процедура ОбработатьРезультатВыбораИзСписка(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если НЕ ВыбранныйЭлемент = Неопределено Тогда
		Область = ДопПараметры.Область;
		Область.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(Область.Формат, ВыбранныйЭлемент.Значение);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродожение();
	
КонецПроцедуры // ОбработатьРезультатВыбораИзСписка()

&НаКлиенте
Процедура ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбластиПродожение()
	
	РасчетНаКлиенте();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПолеТабличногоДокументаФормаОтчетаПриИзмененииСодержимогоОбласти()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НомерКорректировки".
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Заполнить".
//
Процедура ЗаполнитьОтчет(Команда)
	
	ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьОтчет", ЭтаФорма),
					"Перед автозаполнением произойдет очистка отчета. Продолжить?",
					РежимДиалогаВопрос.ДаНет,,
					КодВозвратаДиалога.Нет);
	
КонецПроцедуры // ЗаполнитьОтчет()

&НаКлиенте
Процедура ОбработатьРезультатВопросаЗаполнитьОтчет(Ответ, ДопПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчиститьОтчет(Ложь, Новый ОписаниеОповещения("ВыполнитьПроцедуруОповещенияЗаполнитьОтчет", ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьОтчет()

&НаКлиенте
Процедура ВыполнитьПроцедуруОповещенияЗаполнитьОтчет(Результат, ДопПараметры) Экспорт
	
	ЗаполнитьАвто();
	
КонецПроцедуры // ВыполнитьПроцедуруОповещенияЗаполнитьОтчет()

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Очистить".
Процедура КомандаОчиститьОтчет(Команда)
	
	ОчиститьОтчет();
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "Обновить".
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ЗаполнитьСведенияОбОрганизацииНаКлиенте();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "СохранитьОтчет".
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ПечататьСразу".
Процедура ПечататьСразу(Команда)
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ПоказатьБланк".
Процедура ПоказатьБланк(Команда)
	
	Если Команда <> Неопределено Тогда
		Печать(Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ОткрытьФормуНастроек".
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФорму("Отчет.Удалить_УПЖКХ_РегламентированныйОтчетСтатистикаФорма22Сводная.Форма.НастройкиОтчета");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура формирует структуру рквизитов формы.
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = РегламентированнаяОтчетность.СформироватьСтруктуруОбязательныхРеквизитовСтатистическогоОтчета();
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мАдресвФорматеДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
    СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");	
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");	
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");	
    СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");	
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");	
	СтруктураРеквизитовФормы.Вставить("Организация");	
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");	
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
    СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");	
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");	
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мТаблицаСоответствияУслуг");
	СтруктураРеквизитовФормы.Вставить("мТаблицаСоответствияУслугЖилищные");
	СтруктураРеквизитовФормы.Вставить("мСоциальнаяНормаНаЧеловека");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОбновитьАдресВТабличномДокументеСтатистическойОтчетности(Результат, Параметры.Область, СтруктураРеквизитовФормы);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
// Производит начальное заполнение реквизитов отчета.
Процедура Инициализация(БезОткрытияФормы = Ложь)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;

	ТекТабличноеПоле = ПолеТабличногоДокументаФормаОтчета;

	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
	ФормироватьСтруктуруСвойствСтраниц();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		КонецЕсли;

	Иначе

		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;

	КонецЕсли;

	ТекТабличноеПоле.Области.ДатаСоставленияОтчета.Значение = Формат(ДатаПодписи, "ДФ=""дд ММММ гггг 'г.'""");
	ПоказатьПериод();

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	  Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
		
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	ТекущийЭлемент = Элементы["ПолеТабличногоДокументаФормаОтчета"];
	ВидДокументаПредставление = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, "Первичный", "Корректирующий");
	Элементы.НомерКорректировки.Доступность = (СтруктураРеквизитовФормы.ВидДокумента = 1);
	
КонецПроцедуры

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИФНС.
//
&НаСервере
 Процедура ФормироватьСтруктуруСвойствСтраниц()

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
   	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета";
	СтрокаУровня1.МногострочностьВРазделе              = 0;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.НазваниеПанелиТабличногоПоляРаздела  = "ОсновнаяПанель";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()

	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = 
		ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
							 КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	ПериодОтчета = " " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	ПолеТабличногоДокументаФормаОтчета.Области.ПериодОтчета.Значение = ПериодОтчета;

КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;

	/// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> 
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		// Меняем переменную, для того, чтобы запустилась процедура ЗаполнитьСведенияОбОрганизации
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		//СтруктураРеквизитовФормы.мСохраненныйДок.Организация = СтруктураРеквизитовФормы.Организация;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;


	ДатаПодписи              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий              = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = 
						ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
				 		
	КонецЕсли;

	// восстанавливаем версию формы
	СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
   
	Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл
		ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
		ТекТабличноеПоле    = ЭтаФорма[ИмяТекТабличноеПоле];
		ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;

		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			ИмяПоказателя       = Показатель.Ключ;
			ЗначениеПоказателя  = Показатель.Значение;

			// установим значение в таблице
			Попытка
				Если Лев(ИмяПоказателя, 2) = "ЧН" Тогда
					// значение показателя с префиксом "ЧН" содержит формат представления нуля
					ОбластьПоказателя = ТекТабличноеПоле.Области[Сред(ИмяПоказателя, 3)];
					ОбластьПоказателя.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ОбластьПоказателя.Формат, ЗначениеПоказателя);
					Продолжить;
				КонецЕсли;
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение;
	ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = 
		УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(
			СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);

	УПЖКХ_ТиповыеМетодыСервер.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет сведения об организации.
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

// Процедура управляет выводом сведений о выбранной организации
// в соответствующие ячейки табличного документа.
//
// Параметры:
// ВПрограммеИзмененаДатаПодписи - Истина, если процедура запускается для обновления параметров завясящих
// от даты подписания документа, например ФИО должностных лиц
//
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)

	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено)
	  Или (Форма.СтруктураРеквизитовФормы.Организация = 
	  		УПЖКХ_ТиповыеМетодыКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "ОКПО");  // ОКПО
		Сведения.Добавить("", "АдрПочт");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОснВидДеят");
		Сведения.Добавить("", "ОКПО");
	КонецЕсли;

	Сведения.Добавить("", "ТелИсп");
	Сведения.Добавить("", "ДолжнИсп");
	Сведения.Добавить("", "ФИОИсп");

	ОргСведения = 
		УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация,
																		Форма.ДатаПодписи, Сведения);

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ИННЮЛ = "";
		ОКПО = "";
		АдрПочт     = "";
		НаимЮЛПол = "";
		ОснВидДеят = "";
		ОКПО = "";

	КонецЕсли;

	ТелИсп   = "";
	ДолжнИсп = "";
	ФИОИсп = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда

		ОргСведения.Свойство("ИННЮЛ",          ИННЮЛ);
		ОргСведения.Свойство("ОКПО",           ОКПО);
		ОргСведения.Свойство("АдрПочт",        АдрПочт);
		ОргСведения.Свойство("НаимЮЛПол",      НаимЮЛПол);
		ОргСведения.Свойство("ОКПО",           ОКПО);

	КонецЕсли;

	ОргСведения.Свойство("ТелИсп", 		   ТелИсп);
	ОргСведения.Свойство("ФИОИсп",         ФИОИсп);
	ОргСведения.Свойство("ДолжнИсп",       ДолжнИсп);

	Если ВПрограммеИзмененаДатаПодписи Тогда

		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
		Возврат;
		
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда

		Если НЕ УПЖКХ_ТиповыеМетодыВызовСервера.ЭтоЮридическоеЛицо(Форма.СтруктураРеквизитовФормы.Организация) Тогда
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;

	Если (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
	  Или (ПустаяСтрока(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение)) Тогда

		Если (ЗначениеЗаполнено(СтрЗаменить(АдрПочт, ",", ""))) Тогда
			
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = 
				УПЖКХ_ТиповыеМетодыКлиентСервер.ПредставлениеАдресаВФормате9Запятых(АдрПочт);
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = АдрПочт;
		Иначе
			Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргАдрес.Значение = "";
			Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки = "";
		КонецЕсли;

	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргИсполнитель.Значение = ФИОИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргДолжностьИсп.Значение = ДолжнИсп;
	КонецЕсли;

	Если (НЕ ЗначениеЗаполнено(Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение))
	  ИЛИ (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Тогда
		Форма.ПолеТабличногоДокументаФормаОтчета.Области.ОргТелефонИсп.Значение = ТелИсп;
	КонецЕсли;

КонецПроцедуры

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура ОчиститьОтчет(ЗапрашиватьПодтверждение = Истина, ОписаниеОповещения = Неопределено)
	
	Если ЗапрашиватьПодтверждение Тогда
		ДопПараметры = Новый Структура("ОписаниеОповещения", ОписаниеОповещения);
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьОтчет", ЭтаФорма, ДопПараметры),
						"Внимание! Будут очищены все показатели отчета. Продолжить операцию?",
						РежимДиалогаВопрос.ДаНет,,
						КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	Очистить();
	
КонецПроцедуры // Очистить()

&НаКлиенте
Процедура ОбработатьРезультатВопросаОчиститьОтчет(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Очистить();
	
	Если НЕ ДопПараметры.ОписаниеОповещения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьОтчет()

// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
&НаКлиенте
Процедура Очистить()
		
	ОчиститьТабличноеПолеНаСервере();

	// устанавливаем флаг модифицированности формы
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа на сервере.
Процедура ОчиститьТабличноеПолеНаСервере()
	
	ОчиститьТабличноеПоле(ЭтаФорма);
	РасчетНаСервере();
	
КонецПроцедуры

// Процедура очищает содержимое редактируемыхи и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма)
	
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	ВыбТабличноеПоле = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКод");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодНазв1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодЗнач1");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДолжностьИсп");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргИсполнитель");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргТелефонИсп");
	
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		// Ячейки не подлежащие очистки
		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
		ТекущаяОбласть.Формат = ЗаменитьПредставлениеНуляВСтрокеФормата(ТекущаяОбласть.Формат, "ЧН=' '");
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// Процедура заполняет сведения об организации.
Процедура ЗаполнитьСведенияОбОрганизацииНаКлиенте(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте()

	Расчет(ЭтаФорма);

КонецПроцедуры

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере()

	Расчет(ЭтаФорма);

КонецПроцедуры

// Выполняет расчет вычисляемых показателей отчета
// (ячеек, выделенных зеленым цветом).
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма)
	
	мФормаОтчета = Форма.ПолеТабличногоДокументаФормаОтчета;
	
	//////////////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 3.
	
	// итоги в строках
	мФормаОтчета.Области.П03003809.Значение = мФормаОтчета.Области.П03003804.Значение
											+ мФормаОтчета.Области.П03003805.Значение + мФормаОтчета.Области.П03003806.Значение;
	мФормаОтчета.Области.П03003909.Значение = мФормаОтчета.Области.П03003904.Значение
											+ мФормаОтчета.Области.П03003905.Значение + мФормаОтчета.Области.П03003906.Значение;
	мФормаОтчета.Области.П03004009.Значение = мФормаОтчета.Области.П03004004.Значение
											+ мФормаОтчета.Области.П03004005.Значение + мФормаОтчета.Области.П03004006.Значение;
	мФормаОтчета.Области.П03004109.Значение = мФормаОтчета.Области.П03004104.Значение
											+ мФормаОтчета.Области.П03004105.Значение + мФормаОтчета.Области.П03004106.Значение;
	мФормаОтчета.Области.П03004209.Значение = мФормаОтчета.Области.П03004204.Значение
											+ мФормаОтчета.Области.П03004205.Значение + мФормаОтчета.Области.П03004206.Значение;
	мФормаОтчета.Области.П03004309.Значение = мФормаОтчета.Области.П03004304.Значение
											+ мФормаОтчета.Области.П03004305.Значение;
	
	мФормаОтчета.Области.П03004509.Значение = мФормаОтчета.Области.П03004504.Значение
											+ мФормаОтчета.Области.П03004505.Значение + мФормаОтчета.Области.П03004506.Значение;
	мФормаОтчета.Области.П03004609.Значение = мФормаОтчета.Области.П03004604.Значение
											+ мФормаОтчета.Области.П03004605.Значение + мФормаОтчета.Области.П03004606.Значение;
	мФормаОтчета.Области.П03004709.Значение = мФормаОтчета.Области.П03004704.Значение
											+ мФормаОтчета.Области.П03004705.Значение + мФормаОтчета.Области.П03004706.Значение;
	мФормаОтчета.Области.П03004809.Значение = мФормаОтчета.Области.П03004804.Значение
											+ мФормаОтчета.Области.П03004805.Значение + мФормаОтчета.Области.П03004806.Значение;
	мФормаОтчета.Области.П03004909.Значение = мФормаОтчета.Области.П03004904.Значение
											+ мФормаОтчета.Области.П03004905.Значение + мФормаОтчета.Области.П03004906.Значение;
	мФормаОтчета.Области.П03005009.Значение = мФормаОтчета.Области.П03005004.Значение
											+ мФормаОтчета.Области.П03005005.Значение + мФормаОтчета.Области.П03005006.Значение;
	мФормаОтчета.Области.П03005109.Значение = мФормаОтчета.Области.П03005104.Значение
											+ мФормаОтчета.Области.П03005105.Значение + мФормаОтчета.Области.П03005106.Значение;
	мФормаОтчета.Области.П03005209.Значение = мФормаОтчета.Области.П03005204.Значение
											+ мФормаОтчета.Области.П03005205.Значение + мФормаОтчета.Области.П03005206.Значение;
	мФормаОтчета.Области.П03005309.Значение = мФормаОтчета.Области.П03005304.Значение
											+ мФормаОтчета.Области.П03005305.Значение + мФормаОтчета.Области.П03005306.Значение;
	мФормаОтчета.Области.П03005409.Значение = мФормаОтчета.Области.П03005404.Значение
											+ мФормаОтчета.Области.П03005405.Значение + мФормаОтчета.Области.П03005406.Значение;
	мФормаОтчета.Области.П03005509.Значение = мФормаОтчета.Области.П03005504.Значение
											+ мФормаОтчета.Области.П03005505.Значение + мФормаОтчета.Области.П03005506.Значение;
	мФормаОтчета.Области.П03005609.Значение = мФормаОтчета.Области.П03005604.Значение
											+ мФормаОтчета.Области.П03005605.Значение + мФормаОтчета.Области.П03005606.Значение;
	
	// итоги в группах
	мФормаОтчета.Области.П03003703.Значение = мФормаОтчета.Области.П03003803.Значение
											+ мФормаОтчета.Области.П03003903.Значение;
	мФормаОтчета.Области.П03003704.Значение = мФормаОтчета.Области.П03003804.Значение
											+ мФормаОтчета.Области.П03003904.Значение;
	мФормаОтчета.Области.П03003705.Значение = мФормаОтчета.Области.П03003805.Значение
											+ мФормаОтчета.Области.П03003905.Значение;
	мФормаОтчета.Области.П03003706.Значение = мФормаОтчета.Области.П03003806.Значение
											+ мФормаОтчета.Области.П03003906.Значение;
	мФормаОтчета.Области.П03003707.Значение = мФормаОтчета.Области.П03003807.Значение
											+ мФормаОтчета.Области.П03003907.Значение;
	мФормаОтчета.Области.П03003708.Значение = мФормаОтчета.Области.П03003808.Значение
											+ мФормаОтчета.Области.П03003908.Значение;
	мФормаОтчета.Области.П03003709.Значение = мФормаОтчета.Области.П03003809.Значение
											+ мФормаОтчета.Области.П03003909.Значение;
	
	мФормаОтчета.Области.П03003909.Значение = мФормаОтчета.Области.П03003904.Значение
											+ мФормаОтчета.Области.П03003905.Значение + мФормаОтчета.Области.П03003906.Значение;
	
	мФормаОтчета.Области.П03004403.Значение = мФормаОтчета.Области.П03004503.Значение
											+ мФормаОтчета.Области.П03004603.Значение + мФормаОтчета.Области.П03004703.Значение
											+ мФормаОтчета.Области.П03004803.Значение + мФормаОтчета.Области.П03004903.Значение
											+ мФормаОтчета.Области.П03005203.Значение + мФормаОтчета.Области.П03005303.Значение
											+ мФормаОтчета.Области.П03005503.Значение + мФормаОтчета.Области.П03005603.Значение;
	
	мФормаОтчета.Области.П03004404.Значение = мФормаОтчета.Области.П03004504.Значение
											+ мФормаОтчета.Области.П03004604.Значение + мФормаОтчета.Области.П03004704.Значение
											+ мФормаОтчета.Области.П03004804.Значение + мФормаОтчета.Области.П03004904.Значение
											+ мФормаОтчета.Области.П03005204.Значение + мФормаОтчета.Области.П03005304.Значение
											+ мФормаОтчета.Области.П03005504.Значение + мФормаОтчета.Области.П03005604.Значение;
	
	мФормаОтчета.Области.П03004405.Значение = мФормаОтчета.Области.П03004505.Значение
											+ мФормаОтчета.Области.П03004605.Значение + мФормаОтчета.Области.П03004705.Значение
											+ мФормаОтчета.Области.П03004805.Значение + мФормаОтчета.Области.П03004905.Значение
											+ мФормаОтчета.Области.П03005205.Значение + мФормаОтчета.Области.П03005305.Значение
											+ мФормаОтчета.Области.П03005505.Значение + мФормаОтчета.Области.П03005605.Значение;
	
	мФормаОтчета.Области.П03004406.Значение = мФормаОтчета.Области.П03004506.Значение
											+ мФормаОтчета.Области.П03004606.Значение + мФормаОтчета.Области.П03004706.Значение
											+ мФормаОтчета.Области.П03004806.Значение + мФормаОтчета.Области.П03004906.Значение
											+ мФормаОтчета.Области.П03005206.Значение + мФормаОтчета.Области.П03005306.Значение
											+ мФормаОтчета.Области.П03005506.Значение + мФормаОтчета.Области.П03005606.Значение;
	
	мФормаОтчета.Области.П03004407.Значение = мФормаОтчета.Области.П03004507.Значение
											+ мФормаОтчета.Области.П03004607.Значение + мФормаОтчета.Области.П03004707.Значение
											+ мФормаОтчета.Области.П03004807.Значение + мФормаОтчета.Области.П03004907.Значение
											+ мФормаОтчета.Области.П03005207.Значение + мФормаОтчета.Области.П03005307.Значение
											+ мФормаОтчета.Области.П03005507.Значение + мФормаОтчета.Области.П03005607.Значение;
	
	мФормаОтчета.Области.П03004408.Значение = мФормаОтчета.Области.П03004508.Значение
											+ мФормаОтчета.Области.П03004608.Значение + мФормаОтчета.Области.П03004708.Значение
											+ мФормаОтчета.Области.П03004808.Значение + мФормаОтчета.Области.П03004908.Значение
											+ мФормаОтчета.Области.П03005208.Значение + мФормаОтчета.Области.П03005308.Значение
											+ мФормаОтчета.Области.П03005508.Значение + мФормаОтчета.Области.П03005608.Значение;
	
	мФормаОтчета.Области.П03004409.Значение = мФормаОтчета.Области.П03004404.Значение
											+ мФормаОтчета.Области.П03004405.Значение + мФормаОтчета.Области.П03004406.Значение;
	
	// итоговые строки
	мФормаОтчета.Области.П03005703.Значение = мФормаОтчета.Области.П03003703.Значение
											+ мФормаОтчета.Области.П03004403.Значение;
	мФормаОтчета.Области.П03005704.Значение = мФормаОтчета.Области.П03003704.Значение
											+ мФормаОтчета.Области.П03004404.Значение;
	мФормаОтчета.Области.П03005705.Значение = мФормаОтчета.Области.П03003705.Значение
											+ мФормаОтчета.Области.П03004405.Значение;
	мФормаОтчета.Области.П03005706.Значение = мФормаОтчета.Области.П03003706.Значение
											+ мФормаОтчета.Области.П03004406.Значение;
	мФормаОтчета.Области.П03005707.Значение = мФормаОтчета.Области.П03003707.Значение
											+ мФормаОтчета.Области.П03004407.Значение;
	мФормаОтчета.Области.П03005708.Значение = мФормаОтчета.Области.П03003708.Значение
											+ мФормаОтчета.Области.П03004408.Значение;
	мФормаОтчета.Области.П03005709.Значение = мФормаОтчета.Области.П03003709.Значение
											+ мФормаОтчета.Области.П03004409.Значение;
	
КонецПроцедуры

 // Функция собирает значения редактирукемых ячеек +табличного документа
// в коллекцию значений типа "структура".
//
// Параметры:
//  ТабличноеПоле - поле табличного документа текущей формы.
//
// Возвращаемое значение:
//  Структура.
//
&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)

	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ(ТекущаяОбласть.СодержитЗначение) Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;

		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		
		// Сохраним формат отображения нуля для восстановления представления
		// в поле табличного документа и контроля выгрузки показателя в формате XML
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") И ЗначениеПоказателя = 0 Тогда
			ФорматПредставленияНуля = ПолучитьПредставлениеНуляИзСтрокиФормата(ТекущаяОбласть.Формат);
			Если ЗначениеЗаполнено(ФорматПредставленияНуля) Тогда
				СтруктураДанныхПоля.Вставить("ЧН" + ИмяПоказателя, ФорматПредставленияНуля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанныхПоля.Вставить("ОргАдрес", Форма.СтруктураРеквизитовФормы.мАдресвФорматеДляВыгрузки);
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Получает представление нуля.
Функция ПолучитьПредставлениеНуляИзСтрокиФормата(СтрокаФормата)
	
	Если ПустаяСтрока(СтрокаФормата) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, ";", Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки);
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			Возврат СокрЛП(ПодстрокаФормата);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Заменяеь представление нуля.
Функция ЗаменитьПредставлениеНуляВСтрокеФормата(СтрокаФормата, ПредставлениеНуля)
	
	НоваяСтрокаФормата = "";
	
	РазделительПодстрок = ";";
	СтрокаФорматаТекст = СтрЗаменить(СтрокаФормата, РазделительПодстрок, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаФорматаТекст) Цикл
		ПодстрокаФормата = СокрЛП(СтрПолучитьСтроку(СтрокаФорматаТекст, НомерСтроки));
		Если ПустаяСтрока(ПодстрокаФормата) Тогда
			Продолжить;
		КонецЕсли;
		Если Найти(ПодстрокаФормата, "ЧН=") > 0 Тогда
			ПодстрокаФормата = ПредставлениеНуля;
		КонецЕсли;
		НоваяСтрокаФормата = 
			НоваяСтрокаФормата + ?(ПустаяСтрока(НоваяСтрокаФормата), "", РазделительПодстрок) + ПодстрокаФормата;
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрокаФормата) Тогда
		Возврат ПредставлениеНуля;
	КонецЕсли;

	Возврат НоваяСтрокаФормата;
	
КонецФункции

&НаКлиенте
// Сохраняет отчет.
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ УПЖКХ_ТиповыеМетодыКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, ,Автосохранение,Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	#Если ВебКлиент Тогда
		ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	#Иначе
		ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета);
	#КонецЕсли
	
	РезультатСохранения = ПередСохранением(,ПодобныйОтчетСуществует, Вариант,
											ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета);
	Иначе		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
// Процедура проверяет параметры перед сохранением.
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, ПоказателиОтчета)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
		|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаКлиентеСВопросом()

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета);
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывает механизм сохранения с вопросом пользователю.
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПоказателиОтчета)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета", Автосохранение, Вариант, ВыполняемоеОповещение, ПоказателиОтчета);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВопроса.Открыть();
		
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, ПоказателиОтчета);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНаКлиентеСВопросомПродолжение()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "СохранитьНаКлиентеСВопросомПродолжение()".
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ПоказателиОтчета = ДополнительныеПараметры.ПоказателиОтчета;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, ПоказателиОтчета);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры // ВопросПриИзмененииВидаДокументаЗавершение() 

&НаКлиенте
// Выполняет обработку оповещения после сохранения.
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПослеСохраненияНаКлиенте()

&НаСервере
// Заполняет показатели отчета НаСервере.
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаСервере(ЭлементГруппы.Имя));
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Заполняет показатели отчета НаКлиенте.
Процедура ЗаполнитьПоказателиОтчетаНаКлиенте(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Группа из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ЭлементГруппы Из Группа.ПодчиненныеЭлементы Цикл 
			
			Если СтрЧислоВхождений(ЭлементГруппы.Имя, Префикс) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказателиОтчета.Вставить(ЭлементГруппы.Имя, СобратьДанныеТекущегоТаблПоляНаКлиенте(ЭлементГруппы.Имя));
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант,
						 ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, ПоказателиОтчета)
	
	Если УПЖКХ_ТиповыеМетодыСервер.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И УПЖКХ_ТиповыеМетодыСервер.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = 
		(СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено 
			ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено
	  И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено)
	  	 ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено)
		 ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		  ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , ПоказателиОтчета);
		
КонецФункции

&НаКлиенте
// Собрирает данные текущего ТаблПоля НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля)
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
// Собрирает данные текущего ТаблПоля НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля)
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаСервере
// Сохраняет отчет на сервере.
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант,
					ВидДокументаНомерКорректировкиИзменен = Неопределено, ПоказателиОтчета)
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ УПЖКХ_ТиповыеМетодыСервер.ПриЗаписиРегламентированногоОтчетаНаСервере(
				ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
				СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета			  = 
																		Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																									Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета		  = 
																		Метаданные.Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы,
																									Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала				  = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания			  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма			  = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация			  = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи			  = ДатаПодписи;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения		  = Неопределено;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность			  = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности			  = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид					  = Вариант;	
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида		  = 
																		УПЖКХ_ТиповыеМетодыСервер.ПредставлениеВидаДокумента(
																		СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", Неопределено);

	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", Неопределено);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = УПЖКХ_ТиповыеМетодыКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1'"), КВП_ПрочиеПроцедурыИФункции.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
				
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
		
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;

	Возврат Истина;

КонецФункции

// Процедура управляет выводом отчета на печать.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь)
	
	Состояние(УПЖКХ_ТиповыеМетодыКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, ,
																	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры

&НаСервере
// Процедура управляет выводом отчета на печать на сервере.
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ УПЖКХ_ТиповыеМетодыСервер.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = 
			НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер
					| и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	ОбластиСтроки = Новый Структура;
	
	Для Каждого Обл Из ПолеТабличногоДокументаФормаОтчета.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ОбластиСтроки.Вставить(Обл.Имя, ПолеТабличногоДокументаФормаОтчета.ПолучитьОбласть(Обл.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Обл Из ОбластиСтроки Цикл
		ПечатнаяФорма = Новый ТабличныйДокумент();
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
		ПечатнаяФорма.Вывести(Обл.Значение);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, "Форма 11");
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, ,СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	Возврат Истина;
	
КонецФункции

// Процедура проверяет заполнение настройки соответствия услуг.
//
&НаСервере
Процедура ПроверитьНастройкиСоответствия(УслугиНастройкиУказаны, УслугиЖилищныеНастройкиУказаны)
	
	КоличествоСтрок = СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия услуг!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		
	Иначе
		
		Для Каждого СтрокаСоответствия ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
			
			Если НЕ СтрокаСоответствия.СписокУслуг.Количество() = 0 Тогда
				
				УслугиНастройкиУказаны = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ УслугиНастройкиУказаны Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В настройках соответствия для видов услуг не указан состав услуг, входящих в эти виды!");
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоСтрок = СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия жилищных услуг!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		
	Иначе
		
		Для Каждого СтрокаСоответствия ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные Цикл
			
			Если НЕ СтрокаСоответствия.СписокУслуг.Количество() = 0 Тогда
				
				УслугиЖилищныеНастройкиУказаны = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ УслугиЖилищныеНастройкиУказаны Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"В настройках соответствия для жилищных видов услуг не указан состав услуг, входящих в эти виды!");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНастройкиСоответствия()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ АВТОЗАПОЛНЕНИЯ

// Процеудура производит автозаполнение формы регламентированного отчета.
//
&НаСервере
Процедура ЗаполнитьАвто()
	
	СтруктураПараметров = 
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СтатистикаФорма22Сводная_НастройкиОтчета");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг = 
			УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(СтруктураПараметров.ТаблицаСоответствияУслуг);
		СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные = 
			УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(СтруктураПараметров.ТаблицаСоответствияУслугЖилищные);
		СтруктураПараметров.Свойство("СоциальнаяНормаНаЧеловека", СтруктураРеквизитовФормы.мСоциальнаяНормаНаЧеловека);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия услуг!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"Для перехода к настройкам нажмите на кнопку ""Настройка"" командной панели.");
		Возврат;
	КонецЕсли;
	
	ОтчетностьЗаГод = (КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 
						КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	УслугиНастройкиУказаны         = Ложь;
	УслугиЖилищныеНастройкиУказаны = Ложь;
	ПроверитьНастройкиСоответствия(УслугиНастройкиУказаны, УслугиЖилищныеНастройкиУказаны);
	
	// список разделов учета начислений
	РазделыУчетаНачислений = Новый СписокЗначений;
	РазделыУчетаНачислений.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
	РазделыУчетаНачислений.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
	
	// список видов начислений
	ВидыНачислений = Новый СписокЗначений;
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
	ВидыНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
	
	ЗапросОбъемов  = Новый Запрос;
	ЗапросОстатков = Новый Запрос;
	ЗапросСведений = Новый Запрос;
	
	ТекстВидыУслуг       = "ВЫБОР";
	ТекстВидыУслугОбъемы = "ВЫБОР";
	
	СписокУслугОбщий = Новый СписокЗначений;
	
	Для Каждого СтрокаВидаУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
		
		Если СтрокаВидаУслуги.СписокУслуг.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВидыУслуг = ТекстВидыУслуг + "
		|		КОГДА ТаблицаУслуг.Услуга В (&" + СтрокаВидаУслуги.ВидУслуги + ")
		|			ТОГДА """ + СтрокаВидаУслуги.ВидУслуги + """";
		
		ЗапросОстатков.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		ЗапросСведений.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		
		Для Каждого СтрокаУслуги ИЗ СтрокаВидаУслуги.СписокУслуг Цикл
			СписокУслугОбщий.Добавить(СтрокаУслуги.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаВидаУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные Цикл
		
		Если СтрокаВидаУслуги.СписокУслуг.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВидыУслуг = ТекстВидыУслуг + "
		|		КОГДА ТаблицаУслуг.Услуга В (&" + СтрокаВидаУслуги.ВидУслуги + ")
		|			ТОГДА """ + СтрокаВидаУслуги.ВидУслуги + """";
		
		ЗапросОстатков.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		ЗапросСведений.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		
		Для Каждого СтрокаУслуги ИЗ СтрокаВидаУслуги.СписокУслуг Цикл
			СписокУслугОбщий.Добавить(СтрокаУслуги.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстВидыУслуг = ТекстВидыУслуг + "
	|	КОНЕЦ";
	
	ТекстВидыУслугОбъемы = "ВЫБОР";
	
	СписокУслугОбъемы = Новый СписокЗначений;
	
	Для Каждого СтрокаВидаУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслуг Цикл
		
		Если СтрокаВидаУслуги.СписокУслуг.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаВидаУслуги.ВидУслуги = "ПрочиеУслуги" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВидыУслугОбъемы = ТекстВидыУслугОбъемы + "
		|		КОГДА ТаблицаУслуг.Услуга В (&" + СтрокаВидаУслуги.ВидУслуги + ")
		|			ТОГДА """ + СтрокаВидаУслуги.ВидУслуги + """";
		
		ЗапросОбъемов.УстановитьПараметр(СтрокаВидаУслуги.ВидУслуги, СтрокаВидаУслуги.СписокУслуг);
		
		Для Каждого СтрокаУслуги ИЗ СтрокаВидаУслуги.СписокУслуг Цикл
			СписокУслугОбъемы.Добавить(СтрокаУслуги.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстВидыУслугОбъемы = ТекстВидыУслугОбъемы + "
	|	КОНЕЦ";
	
	ТабДокумент = ПолеТабличногоДокументаФормаОтчета;
	
	///////////////////////////////////////////////
	// РАЗДЕЛ 1.
	
	Если УслугиНастройкиУказаны Тогда
		
		//Состояние("Заполнение раздела 1...");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.ЛицевойСчет ССЫЛКА Справочник.КВП_ЛицевыеСчета
		|			ТОГДА УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец.Многоквартирное
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Многоквартирное
		|ПОМЕСТИТЬ ТаблицаУслуг
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбъемы)
		|				И РазделУчета В (&РазделыУчета)
		|				И ВидНачисления В (&ВидыНачислений)) КАК УПЖКХ_НачисленияОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаУслуг.Количество) КАК Количество,
		|	ТаблицаУслуг.ВидУслуги,
		|	ТаблицаУслуг.Многоквартирное
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаУслуг.Количество КАК Количество,
		|		&ТекстВидыУслугОбъемы КАК ВидУслуги,
		|		ТаблицаУслуг.Многоквартирное КАК Многоквартирное
		|	ИЗ
		|		ТаблицаУслуг КАК ТаблицаУслуг) КАК ТаблицаУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуг.ВидУслуги,
		|	ТаблицаУслуг.Многоквартирное";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидыУслугОбъемы", ТекстВидыУслугОбъемы);
		
		ЗапросОбъемов.Текст = ТекстЗапроса;
		ЗапросОбъемов.УстановитьПараметр("НачалоПериода",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросОбъемов.УстановитьПараметр("КонецПериода",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросОбъемов.УстановитьПараметр("Организация",       СтруктураРеквизитовФормы.Организация);
		ЗапросОбъемов.УстановитьПараметр("СписокУслугОбъемы", СписокУслугОбъемы);
		ЗапросОбъемов.УстановитьПараметр("РазделыУчета",      РазделыУчетаНачислений);
		ЗапросОбъемов.УстановитьПараметр("ВидыНачислений",    ВидыНачислений);
		
		ТаблицаОбъемов = ЗапросОбъемов.Выполнить().Выгрузить();
		
		Для Каждого СтрокаОбъема ИЗ ТаблицаОбъемов Цикл
			
			Если СтрокаОбъема.ВидУслуги = "ХолоднаяВода" Тогда
				
				// раздел 1, строки 01-02, графа 03
				ТабДокумент.Области["П01000103"].Значение = ТабДокумент.Области["П01000103"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000203"].Значение = ТабДокумент.Области["П01000203"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// раздел 3, строки 61, графа 03
					ТабДокумент.Области["П03006103"].Значение = ТабДокумент.Области["П03006103"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "ГорячаяВода" Тогда
				
				// раздел 1, строки 01-02, графа 04
				ТабДокумент.Области["П01000104"].Значение = ТабДокумент.Области["П01000104"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000204"].Значение = ТабДокумент.Области["П01000204"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// раздел 3, строки 62, графа 03
					ТабДокумент.Области["П03006203"].Значение = ТабДокумент.Области["П03006203"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "Водоотведение" Тогда
				
				// раздел 1, строки 01-02, графа 05
				ТабДокумент.Области["П01000105"].Значение = ТабДокумент.Области["П01000105"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000205"].Значение = ТабДокумент.Области["П01000205"].Значение + СтрокаОбъема.Количество;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "Отопление" Тогда
				
				// раздел 1, строки 01-02, графа 06
				ТабДокумент.Области["П01000106"].Значение = ТабДокумент.Области["П01000106"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000206"].Значение = ТабДокумент.Области["П01000206"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// раздел 3, строки 60, графа 03
					ТабДокумент.Области["П03006003"].Значение = ТабДокумент.Области["П03006003"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "Электроэнергия" Тогда
				
				// раздел 1, строки 01-02, графа 08
				ТабДокумент.Области["П01000108"].Значение = ТабДокумент.Области["П01000108"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000208"].Значение = ТабДокумент.Области["П01000208"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// раздел 3, строки 59, графа 03
					ТабДокумент.Области["П03005903"].Значение = ТабДокумент.Области["П03005903"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "СетевойГаз" Тогда
				
				// раздел 1, строки 01-02, графа 09
				ТабДокумент.Области["П01000109"].Значение = ТабДокумент.Области["П01000109"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000209"].Значение = ТабДокумент.Области["П01000209"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// раздел 3, строки 63, графа 03
					ТабДокумент.Области["П03006303"].Значение = ТабДокумент.Области["П03006303"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "СжиженныйГаз" Тогда
				
				// раздел 1, строки 01-02, графа 10
				ТабДокумент.Области["П01000110"].Значение = ТабДокумент.Области["П01000110"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000210"].Значение = ТабДокумент.Области["П01000210"].Значение + СтрокаОбъема.Количество;
				
				Если ОтчетностьЗаГод И СтрокаОбъема.Многоквартирное Тогда
					
					// раздел 3, строки 64, графа 03
					ТабДокумент.Области["П03006403"].Значение = ТабДокумент.Области["П03006403"].Значение + СтрокаОбъема.Количество;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаОбъема.ВидУслуги = "ЗахоронениеТБО" Тогда
				
				// раздел 1, строки 01-02, графа 11
				ТабДокумент.Области["П01000111"].Значение = ТабДокумент.Области["П01000111"].Значение + СтрокаОбъема.Количество;
				ТабДокумент.Области["П01000211"].Значение = ТабДокумент.Области["П01000211"].Значение + СтрокаОбъема.Количество;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // РАЗДЕЛ 1
	
	///////////////////////////////////////////////
	// РАЗДЕЛ 2.
	
	Если УслугиНастройкиУказаны ИЛИ УслугиЖилищныеНастройкиУказаны Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
		|ПОМЕСТИТЬ ТаблицаУслуг
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбщий)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаУслуг.СуммаДолга) КАК СуммаДолга,
		|	ТаблицаУслуг.ВидУслуги
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаУслуг.СуммаНачисленияОстаток КАК СуммаДолга,
		|		&ТекстВидыУслуг КАК ВидУслуги
		|	ИЗ
		|		ТаблицаУслуг КАК ТаблицаУслуг) КАК ТаблицаУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуг.ВидУслуги";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидыУслуг", ТекстВидыУслуг);
		
		ЗапросОстатков.Текст = ТекстЗапроса;
		ЗапросОстатков.УстановитьПараметр("КонецПериода",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросОстатков.УстановитьПараметр("Организация",      СтруктураРеквизитовФормы.Организация);
		ЗапросОстатков.УстановитьПараметр("СписокУслугОбщий", СписокУслугОбщий);
		
		ТаблицаОстатков = ЗапросОстатков.Выполнить().Выгрузить();
		
		// раздел 2, строки 25,26,29, графа 03
		СуммаДолгаЖилищные = 0;
		Для Каждого СтрокаВидуУслуги ИЗ СтруктураРеквизитовФормы.мТаблицаСоответствияУслугЖилищные Цикл
			НайденнаяСтрока = ТаблицаОстатков.Найти(СтрокаВидуУслуги.ВидУслуги, "ВидУслуги");
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				СуммаДолгаЖилищные = СуммаДолгаЖилищные + НайденнаяСтрока.СуммаДолга;
			КонецЕсли;
		КонецЦикла;
		
		ТабДокумент.Области["П02002503"].Значение = СуммаДолгаЖилищные;
		ТабДокумент.Области["П02002603"].Значение = СуммаДолгаЖилищные;
		ТабДокумент.Области["П02002903"].Значение = СуммаДолгаЖилищные;
		
		// раздел 2, строки 25,26,29, графа 04
		СуммаДолгаВодоснабжение = 0;
		НайденнаяСтрока = ТаблицаОстатков.Найти("ХолоднаяВода", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолгаВодоснабжение = СуммаДолгаВодоснабжение + НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		НайденнаяСтрока = ТаблицаОстатков.Найти("ГорячаяВода", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			СуммаДолгаВодоснабжение = СуммаДолгаВодоснабжение + НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		ТабДокумент.Области["П02002504"].Значение = СуммаДолгаВодоснабжение;
		ТабДокумент.Области["П02002604"].Значение = СуммаДолгаВодоснабжение;
		ТабДокумент.Области["П02002904"].Значение = СуммаДолгаВодоснабжение;
		
		// раздел 2, строки 25,26,29, графа 05
		НайденнаяСтрока = ТаблицаОстатков.Найти("Водоотведение", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТабДокумент.Области["П02002505"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002605"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002905"].Значение = НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 06
		НайденнаяСтрока = ТаблицаОстатков.Найти("Отопление", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТабДокумент.Области["П02002506"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002606"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002906"].Значение = НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 07
		НайденнаяСтрока = ТаблицаОстатков.Найти("Электроэнергия", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТабДокумент.Области["П02002507"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002607"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002907"].Значение = НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 08
		НайденнаяСтрока = ТаблицаОстатков.Найти("СетевойГаз", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТабДокумент.Области["П02002508"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002608"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002908"].Значение = НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 09
		НайденнаяСтрока = ТаблицаОстатков.Найти("СжиженныйГаз", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТабДокумент.Области["П02002509"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002609"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002909"].Значение = НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 10
		НайденнаяСтрока = ТаблицаОстатков.Найти("ЗахоронениеТБО", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТабДокумент.Области["П02002510"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002610"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002910"].Значение = НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
		// раздел 2, строки 25,26,29, графа 11
		НайденнаяСтрока = ТаблицаОстатков.Найти("ПрочиеУслуги", "ВидУслуги");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			ТабДокумент.Области["П02002511"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002611"].Значение = НайденнаяСтрока.СуммаДолга;
			ТабДокумент.Области["П02002911"].Значение = НайденнаяСтрока.СуммаДолга;
		КонецЕсли;
		
	КонецЕсли; // РАЗДЕЛ 2
	
	///////////////////////////////////////////////
	// РАЗДЕЛ 3.
	
	Если УслугиНастройкиУказаны ИЛИ УслугиЖилищныеНастройкиУказаны Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаОплаты
		|ПОМЕСТИТЬ втОплаты
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбщий)
		|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачисления
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Запись,
		|			Организация = &Организация
		|				И Услуга В (&СписокУслугОбщий)
		|				И РазделУчета В (&РазделыУчета)
		|				И ВидНачисления В (&ВидыНачислений)) КАК УПЖКХ_НачисленияОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втНачисления.Услуга, втОплаты.Услуга) КАК Услуга,
		|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втОплаты.ЛицевойСчет) КАК ЛицевойСчет,
		|	ЕСТЬNULL(втНачисления.Здание, втОплаты.Здание) КАК Здание,
		|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисления, 0)) КАК СуммаНачисления,
		|	СУММА(ЕСТЬNULL(втОплаты.СуммаОплаты, 0)) КАК СуммаОплаты
		|ПОМЕСТИТЬ втОплатыНачисления
		|ИЗ
		|	втНачисления КАК втНачисления
		|		ПОЛНОЕ СОЕДИНЕНИЕ втОплаты КАК втОплаты
		|		ПО втНачисления.ЛицевойСчет = втОплаты.ЛицевойСчет
		|			И втНачисления.Услуга = втОплаты.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(втНачисления.Услуга, втОплаты.Услуга),
		|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втОплаты.ЛицевойСчет),
		|	ЕСТЬNULL(втНачисления.Здание, втОплаты.Здание)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуг.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаУслуг.Здание КАК Здание,
		|	СУММА(ТаблицаУслуг.СуммаНачисления) КАК СуммаНачисления,
		|	СУММА(ТаблицаУслуг.СуммаОплаты) КАК СуммаОплаты,
		|	ТаблицаУслуг.ВидУслуги
		|ПОМЕСТИТЬ втНачисленияОплатыПоВидамУслуг
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаУслуг.ЛицевойСчет КАК ЛицевойСчет,
		|		ТаблицаУслуг.Здание КАК Здание,
		|		ТаблицаУслуг.СуммаНачисления КАК СуммаНачисления,
		|		ТаблицаУслуг.СуммаОплаты КАК СуммаОплаты,
		|		&ТекстВидыУслуг КАК ВидУслуги
		|	ИЗ
		|		втОплатыНачисления КАК ТаблицаУслуг) КАК ТаблицаУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуг.ЛицевойСчет,
		|	ТаблицаУслуг.Здание,
		|	ТаблицаУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втОплатыНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ втДействующиеЛицевыеСчетаПодготовка
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&КонецПериода, ) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Помещение,
		|	ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
		|			&КонецПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втДействующиеЛицевыеСчетаПодготовка.ЛицевойСчет
		|				ИЗ
		|					втДействующиеЛицевыеСчетаПодготовка КАК втДействующиеЛицевыеСчетаПодготовка)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДействующиеЛицевыеСчетаПодготовка.Помещение,
		|	втДействующиеЛицевыеСчетаПодготовка.ЛицевойСчет,
		|	ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0) КАК КоличествоПроживающих
		|ПОМЕСТИТЬ втДействующиеЛицевые
		|ИЗ
		|	втДействующиеЛицевыеСчетаПодготовка КАК втДействующиеЛицевыеСчетаПодготовка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
		|		ПО втДействующиеЛицевыеСчетаПодготовка.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втУчетКоличестваЖильцов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
		|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|ПОМЕСТИТЬ втПлощадиПомещений
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			&КонецПериода,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втДействующиеЛицевыеСчета.Помещение
		|					ИЗ
		|						втДействующиеЛицевыеСчета)
		|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_РазмерыДолейСрезПоследних.ЛицевойСчет,
		|	КВП_РазмерыДолейСрезПоследних.Объект КАК Помещение,
		|	ВЫБОР
		|		КОГДА КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_РазмерыДолейСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель
		|	КОНЕЦ КАК Доля
		|ПОМЕСТИТЬ втДолиЛицевыхСчетов
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&КонецПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втДействующиеЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втДействующиеЛицевыеСчета)) КАК КВП_РазмерыДолейСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДействующиеЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	втДействующиеЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	втДействующиеЛицевыеСчета.КоличествоПроживающих,
		|	втПлощадиПомещений.Площадь * втДолиЛицевыхСчетов.Доля КАК Площадь
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	втДействующиеЛицевыеСчета КАК втДействующиеЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛицевыхСчетов КАК втДолиЛицевыхСчетов
		|		ПО втДействующиеЛицевыеСчета.ЛицевойСчет = втДолиЛицевыхСчетов.ЛицевойСчет
		|			И втДействующиеЛицевыеСчета.Помещение = втДолиЛицевыхСчетов.Помещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
		|		ПО втДействующиеЛицевыеСчета.Помещение = втПлощадиПомещений.Помещение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Здание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДействующиеЛицевыеСчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДолиЛицевыхСчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втПлощадиПомещений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втЛицевыеСчета.Здание
		|ПОМЕСТИТЬ втЗдания
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втНачисленияОплатыПоВидамУслуг.Здание
		|ИЗ
		|	втНачисленияОплатыПоВидамУслуг КАК втНачисленияОплатыПоВидамУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_БлагоустройствоОбъектов.Объект КАК Здание,
		|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
		|	КВП_БлагоустройствоОбъектов.Значение
		|ПОМЕСТИТЬ втЗданияСБлагоустройствами
		|ИЗ
		|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
		|ГДЕ
		|	КВП_БлагоустройствоОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				втЗдания.Здание
		|			ИЗ
		|				втЗдания)
		|	И (КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
		|			ИЛИ КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод)
		|			ИЛИ КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗданияСБлагоустройствами.Здание,
		|	ИСТИНА КАК ЕстьЛифт
		|ПОМЕСТИТЬ втЗданияСЛифтами
		|ИЗ
		|	втЗданияСБлагоустройствами КАК втЗданияСБлагоустройствами
		|ГДЕ
		|	втЗданияСБлагоустройствами.Значение = ИСТИНА
		|	И втЗданияСБлагоустройствами.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗданияСБлагоустройствами.Здание,
		|	ИСТИНА КАК ЕстьМусоропровод
		|ПОМЕСТИТЬ втЗданияСМусоропроводом
		|ИЗ
		|	втЗданияСБлагоустройствами КАК втЗданияСБлагоустройствами
		|ГДЕ
		|	втЗданияСБлагоустройствами.Значение = ИСТИНА
		|	И втЗданияСБлагоустройствами.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Мусоропровод)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗданияСБлагоустройствами.Здание,
		|	втЗданияСБлагоустройствами.Значение КАК ТипПлиты
		|ПОМЕСТИТЬ втЗданияСПлитами
		|ИЗ
		|	втЗданияСБлагоустройствами КАК втЗданияСБлагоустройствами
		|ГДЕ
		|	втЗданияСБлагоустройствами.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЗдания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЗданияСБлагоустройствами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
		|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет
		|ПОМЕСТИТЬ втНазначенныеНачисления
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
		|			&КонецПериода,
		|			Организация = &Организация
		|				И Объект В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета)
		|				И Услуга В (&СписокУслугОбщий)) КАК КВП_НазначенныеНачисленияСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Действует
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
		|	КВП_НазначенныеНачисленияСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУслуг.ЛицевойСчет,
		|	ТаблицаУслуг.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	&ТекстВидыУслуг КАК ВидУслуги
		|ПОМЕСТИТЬ втНазначенныеВидыУслуг
		|ИЗ
		|	втНазначенныеНачисления КАК ТаблицаУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ЛицевойСчет, втНачисленияОплатыПоВидамУслуг.ЛицевойСчет) КАК ЛицевойСчет,
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.Здание, втНачисленияОплатыПоВидамУслуг.Здание) КАК Здание,
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ВидУслуги, втНачисленияОплатыПоВидамУслуг.ВидУслуги) КАК ВидУслуги,
		|	СУММА(ЕСТЬNULL(втНачисленияОплатыПоВидамУслуг.СуммаНачисления, 0)) КАК СуммаНачисления,
		|	СУММА(ЕСТЬNULL(втНачисленияОплатыПоВидамУслуг.СуммаОплаты, 0)) КАК СуммаОплаты
		|ПОМЕСТИТЬ втНазначенияНачисления
		|ИЗ
		|	втНачисленияОплатыПоВидамУслуг КАК втНачисленияОплатыПоВидамУслуг
		|		ПОЛНОЕ СОЕДИНЕНИЕ втНазначенныеВидыУслуг КАК втНазначенныеВидыУслуг
		|		ПО втНачисленияОплатыПоВидамУслуг.ЛицевойСчет = втНазначенныеВидыУслуг.ЛицевойСчет
		|			И втНачисленияОплатыПоВидамУслуг.ВидУслуги = втНазначенныеВидыУслуг.ВидУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ЛицевойСчет, втНачисленияОплатыПоВидамУслуг.ЛицевойСчет),
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.Здание, втНачисленияОплатыПоВидамУслуг.Здание),
		|	ЕСТЬNULL(втНазначенныеВидыУслуг.ВидУслуги, втНачисленияОплатыПоВидамУслуг.ВидУслуги)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНазначенныеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНазначенныеВидыУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНачисленияОплатыПоВидамУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНазначенияНачисления.ВидУслуги,
		|	СУММА(ЕСТЬNULL(втЛицевыеСчета.КоличествоПроживающих, 0)) КАК КоличествоПроживающих,
		|	СУММА(ЕСТЬNULL(втЛицевыеСчета.Площадь, 0)) КАК Площадь,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втЗданияСЛифтами.ЕстьЛифт, ЛОЖЬ)
		|				И ЕСТЬNULL(втЗданияСМусоропроводом.ЕстьМусоропровод, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьБлагоустройства,
		|	втЗданияСПлитами.ТипПлиты,
		|	СУММА(втНазначенияНачисления.СуммаНачисления) КАК СуммаНачисления,
		|	СУММА(втНазначенияНачисления.СуммаОплаты) КАК СуммаОплаты,
		|	ЕСТЬNULL(втНазначенияНачисления.Здание.Многоквартирное, ЛОЖЬ) КАК Многоквартирное
		|ИЗ
		|	втНазначенияНачисления КАК втНазначенияНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
		|		ПО втНазначенияНачисления.ЛицевойСчет = втЛицевыеСчета.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗданияСЛифтами КАК втЗданияСЛифтами
		|		ПО втНазначенияНачисления.Здание = втЗданияСЛифтами.Здание
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗданияСМусоропроводом КАК втЗданияСМусоропроводом
		|		ПО втНазначенияНачисления.Здание = втЗданияСМусоропроводом.Здание
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗданияСПлитами КАК втЗданияСПлитами
		|		ПО втНазначенияНачисления.Здание = втЗданияСПлитами.Здание
		|
		|СГРУППИРОВАТЬ ПО
		|	втНазначенияНачисления.ВидУслуги,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втЗданияСЛифтами.ЕстьЛифт, ЛОЖЬ)
		|				И ЕСТЬNULL(втЗданияСМусоропроводом.ЕстьМусоропровод, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	втЗданияСПлитами.ТипПлиты,
		|	ЕСТЬNULL(втНазначенияНачисления.Здание.Многоквартирное, ЛОЖЬ)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидыУслуг", ТекстВидыУслуг);
		
		ЗапросСведений.Текст = ТекстЗапроса;
		ЗапросСведений.УстановитьПараметр("НачалоПериода",    СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросСведений.УстановитьПараметр("КонецПериода",     СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросСведений.УстановитьПараметр("Организация",      СтруктураРеквизитовФормы.Организация);
		ЗапросСведений.УстановитьПараметр("СписокУслугОбщий", СписокУслугОбщий);
		ЗапросСведений.УстановитьПараметр("ВидПлощади",       Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь);
		ЗапросСведений.УстановитьПараметр("РазделыУчета",     РазделыУчетаНачислений);
		ЗапросСведений.УстановитьПараметр("ВидыНачислений",   ВидыНачислений);
		
		ТаблицаСведений = ЗапросСведений.Выполнить().Выгрузить();
		
		Для Каждого СтрокаСведений ИЗ ТаблицаСведений Цикл
			
			Если СтрокаСведений.ВидУслуги = "Наем" Тогда
				
				// раздел 3, строка 38, графы 3, 4, 10, 11
				ТабДокумент.Области["П03003803"].Значение = ТабДокумент.Области["П03003803"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03003804"].Значение = ТабДокумент.Области["П03003803"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03003810"].Значение = ТабДокумент.Области["П03003810"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03003811"].Значение = ТабДокумент.Области["П03003811"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "СодержаниеИРемонт" Тогда
				
				// раздел 3, строка 39, графы 3, 4, 10, 11
				ТабДокумент.Области["П03003903"].Значение = ТабДокумент.Области["П03003903"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03003904"].Значение = ТабДокумент.Области["П03003904"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03003910"].Значение = ТабДокумент.Области["П03003910"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03003911"].Значение = ТабДокумент.Области["П03003911"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
				Если СтрокаСведений.ЕстьБлагоустройства Тогда
					
					// раздел 3, строка 40, графы 3, 4, 10, 11
					ТабДокумент.Области["П03004003"].Значение = ТабДокумент.Области["П03004003"].Значение
																										  + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П03004004"].Значение = ТабДокумент.Области["П03004004"].Значение
																										  + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П03004010"].Значение = ТабДокумент.Области["П03004010"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03004011"].Значение = ТабДокумент.Области["П03004011"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				Иначе
					
					// раздел 3, строка 41, графы 3, 4, 10, 11
					ТабДокумент.Области["П03004103"].Значение = ТабДокумент.Области["П03004103"].Значение
																										  + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П03004104"].Значение = ТабДокумент.Области["П03004104"].Значение
																										  + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П03004110"].Значение = ТабДокумент.Области["П03004110"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03004111"].Значение = ТабДокумент.Области["П03004111"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "ВывозТО" Тогда
				
				// раздел 3, строка 42, графы 3, 4, 10, 11
				ТабДокумент.Области["П03004203"].Значение = ТабДокумент.Области["П03004203"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03004204"].Значение = ТабДокумент.Области["П03004204"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03004210"].Значение = ТабДокумент.Области["П03004210"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03004211"].Значение = ТабДокумент.Области["П03004211"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "КапитальныйРемонт" Тогда
				
				// раздел 3, строка 43, графы 3, 4, 10, 11
				ТабДокумент.Области["П03004303"].Значение = ТабДокумент.Области["П03004303"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03004304"].Значение = ТабДокумент.Области["П03004304"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03004310"].Значение = ТабДокумент.Области["П03004310"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03004311"].Значение = ТабДокумент.Области["П03004311"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "ХолоднаяВода" Тогда
				
				// раздел 3, строка 45, графы 3, 4, 10, 11
				ТабДокумент.Области["П03004503"].Значение = ТабДокумент.Области["П03004503"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03004504"].Значение = ТабДокумент.Области["П03004504"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03004510"].Значение = ТабДокумент.Области["П03004510"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03004511"].Значение = ТабДокумент.Области["П03004511"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// раздел 3, строки 61, графы 4, 5
					ТабДокумент.Области["П03006104"].Значение = ТабДокумент.Области["П03006104"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03006105"].Значение = ТабДокумент.Области["П03006105"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "Водоотведение" Тогда
				
				// раздел 3, строка 46, графы 3, 4, 10, 11
				ТабДокумент.Области["П03004603"].Значение = ТабДокумент.Области["П03004603"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03004604"].Значение = ТабДокумент.Области["П03004604"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03004610"].Значение = ТабДокумент.Области["П03004610"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03004611"].Значение = ТабДокумент.Области["П03004611"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "ГорячаяВода" Тогда
				
				// раздел 3, строка 47, графы 3, 4, 10, 11
				ТабДокумент.Области["П03004703"].Значение = ТабДокумент.Области["П03004703"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03004704"].Значение = ТабДокумент.Области["П03004704"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03004710"].Значение = ТабДокумент.Области["П03004710"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03004711"].Значение = ТабДокумент.Области["П03004711"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// раздел 3, строки 59, графы 4, 5
					ТабДокумент.Области["П03006204"].Значение = ТабДокумент.Области["П03006204"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03006205"].Значение = ТабДокумент.Области["П03006205"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "Отопление" Тогда
				
				// раздел 3, строка 48, графы 3, 4, 10, 11
				ТабДокумент.Области["П03004803"].Значение = ТабДокумент.Области["П03004803"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03004804"].Значение = ТабДокумент.Области["П03004804"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03004810"].Значение = ТабДокумент.Области["П03004810"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03004811"].Значение = ТабДокумент.Области["П03004811"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// раздел 3, строки 60, графы 4, 5
					ТабДокумент.Области["П03006004"].Значение = ТабДокумент.Области["П03006004"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03006005"].Значение = ТабДокумент.Области["П03006005"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "Электроэнергия" Тогда
				
				// раздел 3, строка 49, графы 3, 4, 10, 11
				ТабДокумент.Области["П03004903"].Значение = ТабДокумент.Области["П03004903"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03004904"].Значение = ТабДокумент.Области["П03004904"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03004910"].Значение = ТабДокумент.Области["П03004910"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03004911"].Значение = ТабДокумент.Области["П03004911"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// раздел 3, строки 59, графы 4, 5
					ТабДокумент.Области["П03005904"].Значение = ТабДокумент.Области["П03005904"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03005905"].Значение = ТабДокумент.Области["П03005905"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
				Если СтрокаСведений.ТипПлиты = Перечисления.КВП_Плита.Газовая Тогда
					
					// раздел 3, строка 50, графы 3, 4, 10, 11
					ТабДокумент.Области["П03005003"].Значение = ТабДокумент.Области["П03005003"].Значение
																										  + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П03005004"].Значение = ТабДокумент.Области["П03005004"].Значение
																										  + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П03005010"].Значение = ТабДокумент.Области["П03005010"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03005011"].Значение = ТабДокумент.Области["П03005011"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				ИначеЕсли СтрокаСведений.ТипПлиты = Перечисления.КВП_Плита.Электрическая Тогда
					
					// раздел 3, строка 49, графы 3, 4, 10, 11
					ТабДокумент.Области["П03005103"].Значение = ТабДокумент.Области["П03005103"].Значение
																										  + СтрокаСведений.СуммаНачисления;
					ТабДокумент.Области["П03005104"].Значение = ТабДокумент.Области["П03005104"].Значение
																										  + СтрокаСведений.СуммаОплаты;
					ТабДокумент.Области["П03005110"].Значение = ТабДокумент.Области["П03005110"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03005111"].Значение = ТабДокумент.Области["П03005111"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "СетевойГаз" Тогда
				
				// раздел 3, строка 52, графы 3, 4, 10, 11
				ТабДокумент.Области["П03005203"].Значение = ТабДокумент.Области["П03005203"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03005204"].Значение = ТабДокумент.Области["П03005204"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03005210"].Значение = ТабДокумент.Области["П03005210"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03005211"].Значение = ТабДокумент.Области["П03005211"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// раздел 3, строки 63, графы 4, 5
					ТабДокумент.Области["П03006304"].Значение = ТабДокумент.Области["П03006304"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03006305"].Значение = ТабДокумент.Области["П03006305"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			ИначеЕсли СтрокаСведений.ВидУслуги = "СжиженныйГаз" Тогда
				
				// раздел 3, строка 53, графы 3, 4, 10, 11
				ТабДокумент.Области["П03005303"].Значение = ТабДокумент.Области["П03005303"].Значение
																									  + СтрокаСведений.СуммаНачисления;
				ТабДокумент.Области["П03005304"].Значение = ТабДокумент.Области["П03005304"].Значение + СтрокаСведений.СуммаОплаты;
				ТабДокумент.Области["П03005310"].Значение = ТабДокумент.Области["П03005310"].Значение + СтрокаСведений.Площадь;
				ТабДокумент.Области["П03005311"].Значение = ТабДокумент.Области["П03005311"].Значение
																									  + СтрокаСведений.КоличествоПроживающих;
				
				Если ОтчетностьЗаГод И СтрокаСведений.Многоквартирное Тогда
					
					// раздел 3, строки 64, графы 4, 5
					ТабДокумент.Области["П03006404"].Значение = ТабДокумент.Области["П03006404"].Значение + СтрокаСведений.Площадь;
					ТабДокумент.Области["П03006405"].Значение = ТабДокумент.Области["П03006405"].Значение
																										  + СтрокаСведений.КоличествоПроживающих;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // РАЗДЕЛ 3
	
	// СОЦИАЛЬНАЯ НОРМА НА 1 ЧЕЛОВЕКА
	ТабДокумент.Области["П030058"].Значение = СтруктураРеквизитовФормы.мСоциальнаяНормаНаЧеловека;
	
	Расчет(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьАвто()