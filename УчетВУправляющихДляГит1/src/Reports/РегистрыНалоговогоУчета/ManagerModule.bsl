#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Результат.Вставить("ИспользоватьПриВыводеПодвала",       Ложь);

	Возврат Результат;

КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	// Для удобства фактически выводится другой заголовок - см. ПриВыводеЗаголовка
	
	ПредставлениеПериода = ПараметрыОтчета.ПредставлениеПериода;
	СправкиРасчеты.ДополнитьПериодОтчетаПримечанием(ПредставлениеПериода, ПараметрыОтчета);
	
	Возврат СправкиРасчетыКлиентСервер.ТекстЗаголовка(ПараметрыОтчета.НазваниеРегистра, ПредставлениеПериода);
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		ТекстОрганизация = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	ЭлементыЗаголовка = Новый Массив;
	
	ПредставлениеПериода = ПараметрыОтчета.ПредставлениеПериода;
	СправкиРасчеты.ДополнитьПериодОтчетаПримечанием(ПредставлениеПериода, ПараметрыОтчета);
	ОсновнойЗаголовок = СправкиРасчетыКлиентСервер.ТекстЗаголовка(НСтр("ru = 'Регистр налогового учета'"), ПредставлениеПериода);
	ЭлементыЗаголовка.Добавить(ОсновнойЗаголовок);
	
	ЭлементыПодзаголовка = Новый Массив;
	ЭлементыПодзаголовка.Добавить(ПараметрыОтчета.НазваниеРегистра);
	Если Не ПараметрыОтчета.ЭтоПредопределенныйВариант Тогда
		ЭлементыПодзаголовка.Добавить(ПараметрыОтчета.ИмяНастроекОтчета);
	КонецЕсли;
	ЭлементыЗаголовка.Добавить(СтрСоединить(ЭлементыПодзаголовка, ": "));
	
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = СтрСоединить(ЭлементыЗаголовка, Символы.ПС);
		
	Результат.Вывести(ОбластьЗаголовок);
	
	// Отбор
	Если ПараметрыОтчета.Свойство("ВыводитьОтбор") И ПараметрыОтчета.ВыводитьОтбор Тогда
		
		ТекстОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
		
		Если Не ПустаяСтрока(ТекстОтбор) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Отбор:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
		
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Сортировка:'");
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";

	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
	
КонецПроцедуры

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ПредопределенныеНастройки = Схема.ВариантыНастроек[ПараметрыОтчета.Регистр].Настройки;
	
	КоличествоПоказателей = 0;
	ПоказателиОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ПредопределенныеНастройки,"ПоказателиОтчета");
	ВидРегистра = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ПредопределенныеНастройки,"ВидРегистра");
	
	Если Не ВидРегистра = Неопределено Тогда
		ВидРегистра = ВидРегистра.Значение;
	Иначе
		ВидРегистра = "Расходы";
	КонецЕсли;
	
	ПрефиксназванийКолонок = ВидРегистра;
	
	Если ВидРегистра = "ДоходыБудущихПериодов" Тогда
		ПрефиксназванийКолонок = "Стоимость";
		ВидРегистра = "Расчеты";
	КонецЕсли;	
	
	Если Не ПоказателиОтчета = Неопределено Тогда
		Для каждого Показатель Из ПоказателиОтчета.Значение Цикл
			Если Не ПараметрыОтчета.Свойство(Показатель) Тогда
				ПараметрыОтчета.Вставить(Показатель,Истина);
				КоличествоПоказателей = КоличествоПоказателей + ?(СтрНайти(Показатель,"Показатель") = 0,0,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
		
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериодаГраница", Новый Граница(НачалоДня(ПараметрыОтчета.НачалоПериода), ВидГраницы.Исключая));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериодаГраница", Новый Граница(КонецДня(ПараметрыОтчета.КонецПериода), ВидГраницы.Включая));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ДиректКостинг", УчетнаяПолитика.ДиректКостинг(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода));
	
	ПериодДействующейНастройкиПрямыхРасходовНУ = РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействующейНастройки(
		ПараметрыОтчета.НачалоПериода,
		ПараметрыОтчета.Организация);
		
	Если ПериодДействующейНастройкиПрямыхРасходовНУ <> Неопределено Тогда
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек,
			"ПериодДействующейНастройкиПрямыхРасходовНУ",
			ПериодДействующейНастройкиПрямыхРасходовНУ);
		
	КонецЕсли;	
		
	Таблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	 
	// Колонка "показатели"
	Если КоличествоПоказателей > 1 Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "Показатели";
		Колонка.Использование = Истина;
		
		ГруппаПоказатели = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета.Свойство("Показатель" + ИмяПоказателя) И ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ЕНВД");
	
	// Колонка "Сальдо на начало"
	Если ПараметрыОтчета.Свойство("СальдоНаНачало") И ПараметрыОтчета.СальдоНаНачало Тогда
		
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "НачальноеСальдо";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		Группа.Заголовок = "Начальное сальдо";
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета.Свойство("Показатель" + ИмяПоказателя) И ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстаток" + ?(ВидРегистра = "Расчеты","Расчетов",""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Количество на начало"
	Если ПараметрыОтчета.Свойство("КоличествоНаНачало") И  ПараметрыОтчета.КоличествоНаНачало Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КоличествоНачальныйОстаток";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СальдоНаНачалоПериода.КоличествоНачальныйОстаток","Количество");
	КонецЕсли;
	
	// Колонка "Обороты за период Дт"
	Если ПараметрыОтчета.Свойство("ОборотыЗаПериодДт") И ПараметрыОтчета.ОборотыЗаПериодДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ПрефиксназванийКолонок + "ОборотДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета.Свойство("Показатель" + ИмяПоказателя) И ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт" + ?(ВидРегистра = "Расчеты","Расчетов",""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// Колонка "Количество обороты за период Дт"
	Если ПараметрыОтчета.Свойство("КоличествоОборотыЗаПериодДт") И ПараметрыОтчета.КоличествоОборотыЗаПериодДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КоличествоОборотДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод.КоличествоОборотДт","Количество");
	КонецЕсли;
	
	// Колонка "Количество Кор обороты за период Дт"
	Если ПараметрыОтчета.Свойство("КоличествоКорОборотыЗаПериодДт") И ПараметрыОтчета.КоличествоКорОборотыЗаПериодДт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КоличествоКорОборотДт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод.КоличествоКорОборотДт","Количество");
	КонецЕсли;
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = "Уменьшенный автоотступ" Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = "Уменьшенный автоотступ";
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
		
	// Колонка "Обороты за период Кт"
	Если  ПараметрыОтчета.Свойство("ОборотыЗаПериодКт") И  ПараметрыОтчета.ОборотыЗаПериодКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ПрефиксназванийКолонок + "ОборотКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		Группа.Заголовок = "Оборот Кт";
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета.Свойство("Показатель" + ИмяПоказателя) И ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт" + ?(ВидРегистра = "Расчеты","Расчетов",""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// Колонка "Количество обороты за период Кт"
	Если  ПараметрыОтчета.Свойство("КоличествоОборотыЗаПериодКт") И  ПараметрыОтчета.КоличествоОборотыЗаПериодКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КоличествоОборотКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод.КоличествоОборотКт","Количество");
	КонецЕсли;
	
	// Колонка "Количество Кор обороты за период Кт"
	Если ПараметрыОтчета.Свойство("КоличествоКорОборотыЗаПериодКт") И ПараметрыОтчета.КоличествоКорОборотыЗаПериодКт Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КоличествоКорОборотКт";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод.КоличествоКорОборотКт","Количество");
	КонецЕсли;
	
	// Колонка "Количество обороты за период"
	Если  ПараметрыОтчета.Свойство("КоличествоОборотыЗаПериод") И  ПараметрыОтчета.КоличествоОборотыЗаПериод Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КоличествоОборот";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод.КоличествоОборот","Количество");
	КонецЕсли;
	
	// Колонка "Обороты за период"
	Если ПараметрыОтчета.Свойство("ОборотыЗаПериод") И ПараметрыОтчета.ОборотыЗаПериод Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = ПрефиксназванийКолонок + "Оборот";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета.Свойство("Показатель" + ИмяПоказателя) И ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "ОборотыЗаПериод." + ИмяПоказателя + "Оборот" + ?(ВидРегистра = "Расчеты","Расчетов",""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Сальдо на конец"
	Если ПараметрыОтчета.Свойство("СальдоНаКонец") И  ПараметрыОтчета.СальдоНаКонец Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КонечноеСальдо";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		Группа.Заголовок = "Конечное сальдо";
		
		Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
			Если ПараметрыОтчета.Свойство("Показатель" + ИмяПоказателя) И ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СальдоНаКонецПериода." + ИмяПоказателя + "КонечныйОстаток" + ?(ВидРегистра = "Расчеты","Расчетов",""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Колонка "Количество на Конец"
	Если ПараметрыОтчета.Свойство("КоличествоНаКонец") И ПараметрыОтчета.КоличествоНаКонец Тогда
		Колонка = Таблица.Колонки.Добавить();
		Колонка.Имя           = "КоличествоКонечныйОстаток";
		Колонка.Использование = Истина;
		
		Группа = Колонка.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		Группа.Использование = Истина;
		Группа.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "СальдоНаКонецПериода.КоличествоКонечныйОстаток","Количество");
	КонецЕсли;
	
	Структура =  Новый Структура("Структура",Таблица.Строки);	
	
	КоличествоГруппировок = 0;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить();
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
			КоличествоГруппировок = КоличествоГруппировок + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	//Добавляем предопределенные недоступные группировки (всегда в конце)
	
	ПредопределеннаяГруппировка = ПредопределенныеНастройки.Структура[0].Строки;
	Пока ПредопределеннаяГруппировка.Количество() > 0 Цикл
		
		Если ПредопределеннаяГруппировка[0].ПоляГруппировки.Элементы.Количество() > 0 Тогда
			
			Если ПредопределеннаяГруппировка[0].РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный и ПредопределеннаяГруппировка[0].Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных.Включен Тогда
				Структура = Структура.Структура.Добавить();
				
				//Поля группировок
				Для Каждого ПолеПредопределеннойГруппировки Из ПредопределеннаяГруппировка[0].ПоляГруппировки.Элементы Цикл
					Если Тип(ПолеПредопределеннойГруппировки) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
						ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
					Иначе
						Если БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(Таблица.Строки, ПолеПредопределеннойГруппировки.Поле) = Неопределено Тогда
							ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ЗаполнитьЗначенияСвойств(ПолеГруппировки,ПолеПредопределеннойГруппировки);
							ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
							ПолеОформления.Поле = ПолеГруппировки.Поле;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				
				//Отборы
				Для Каждого ОтборПредопределеннойГруппировки Из ПредопределеннаяГруппировка[0].Отбор.Элементы Цикл
					ОтборГруппировки =  Структура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЗаполнитьЗначенияСвойств(ОтборГруппировки,ОтборПредопределеннойГруппировки);
				КонецЦикла;	
				
				//Условное оформление
				Для Каждого УсловноеОформлениеПредопределеннойГруппировки Из ПредопределеннаяГруппировка[0].УсловноеОформление.Элементы Цикл
					УсловноеОформлениеГруппировки =  Структура.УсловноеОформление.Элементы.Добавить();
					ЗаполнитьЗначенияСвойств(УсловноеОформлениеГруппировки,УсловноеОформлениеПредопределеннойГруппировки);
					
					//Отбор
					Для Каждого ОтборПредопределенногоОформления Из УсловноеОформлениеПредопределеннойГруппировки.Отбор.Элементы Цикл
						ОтборОформления =  УсловноеОформлениеГруппировки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ЗаполнитьЗначенияСвойств(ОтборОформления,ОтборПредопределенногоОформления);
					КонецЦикла;	
					
					//Параметры оформления
					Для ИндексПараметра = 0 По УсловноеОформлениеПредопределеннойГруппировки.Оформление.Элементы.Количество() - 1 Цикл
						ОформлениеПредопределеннаяГруппировка = УсловноеОформлениеПредопределеннойГруппировки.Оформление.Элементы[ИндексПараметра];
						ОформлениеГруппировки =  УсловноеОформлениеГруппировки.Оформление.Элементы[ИндексПараметра];
						ЗаполнитьЗначенияСвойств(ОформлениеГруппировки,ОформлениеПредопределеннаяГруппировка);
					КонецЦикла;	
					
					Для Каждого ПредопределенноеОформляемоеПолеГруппировки Из УсловноеОформлениеПредопределеннойГруппировки.Поля.Элементы Цикл
						ОформляемоеПоле = УсловноеОформлениеГруппировки.Поля.Элементы.Добавить();
						ЗаполнитьЗначенияСвойств(ОформляемоеПоле,ПредопределенноеОформляемоеПолеГруппировки);
					КонецЦикла;	
					
				КонецЦикла;	
				
				//Выбор
				Для Каждого ВыборПредопределеннойГруппировки Из ПредопределеннаяГруппировка[0].Выбор.Элементы Цикл
					Если Тип(ВыборПредопределеннойГруппировки) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
						Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
					Иначе
						Если БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(Таблица.Строки, ВыборПредопределеннойГруппировки.Поле) = Неопределено Тогда
							ВыборГруппировки =  Структура.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							ЗаполнитьЗначенияСвойств(ВыборГруппировки,ВыборПредопределеннойГруппировки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				
				//Порядок
				Для Каждого ПорядокПредопределеннойГруппировки Из ПредопределеннаяГруппировка[0].Порядок.Элементы Цикл
					Если Тип(ПорядокПредопределеннойГруппировки) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
						Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
					Иначе	
						ПорядокГруппировки =  Структура.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						ЗаполнитьЗначенияСвойств(ПорядокГруппировки,ПорядокПредопределеннойГруппировки);
					КонецЕсли;
				КонецЦикла;	
				
				//Параметры вывода
				Для ИндексПараметра = 0 По ПредопределеннаяГруппировка[0].ПараметрыВывода.Элементы.Количество() - 1 Цикл
					ПараметрыВыводаПредопределеннаяГруппировка = ПредопределеннаяГруппировка[0].ПараметрыВывода.Элементы[ИндексПараметра];
					ПараметрыВыводаГруппировки =  Структура.ПараметрыВывода.Элементы[ИндексПараметра];
					ЗаполнитьЗначенияСвойств(ПараметрыВыводаГруппировки,ПараметрыВыводаПредопределеннаяГруппировка);
				КонецЦикла;	
				
			КонецЕсли;
		КонецЕсли;
		
		ПредопределеннаяГруппировка = ПредопределеннаяГруппировка[0].Структура;
		
	КонецЦикла;
	
	// Условное оформление Общее
	ПоляДляУсловногоОформления = Новый Массив;
	ПоляДляУсловногоОформления.Добавить(Новый ПолеКомпоновкиДанных("КорСчет"));
	ПоляДляУсловногоОформления.Добавить(Новый ПолеКомпоновкиДанных("КорСубконто1"));
	ПоляДляУсловногоОформления.Добавить(Новый ПолеКомпоновкиДанных("КорСубконто2"));
	ПоляДляУсловногоОформления.Добавить(Новый ПолеКомпоновкиДанных("КорСубконто3"));
	ПоляДляУсловногоОформления.Добавить(Новый ПолеКомпоновкиДанных("Регистратор"));
	
	//Не установлен ли отбор
	ПоказыватьОстатки = Истина;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не ПоляДляУсловногоОформления.Найти(ЭлементОтбора.ЛевоеЗначение) = Неопределено И ЭлементОтбора.Использование 
				И ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда
				ПоказыватьОстатки = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоказыватьОстатки Тогда
		Для каждого ПолеОтбора Из ПоляДляУсловногоОформления Цикл
			
			ПолеУсловногоОформления 				= КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			
			ГруппаИЛИ 								= ПолеУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИЛИ.ТипГруппы 					= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ОтборУсловногоОформления 				= ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборУсловногоОформления.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ПолеОтбора);
			ОтборУсловногоОформления.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Заполнено;
			
			ОтборУсловногоОформления 				= ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборУсловногоОформления.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных(ПолеОтбора);
			ОтборУсловногоОформления.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			
			ОформлениеУсловногоОформления 				= ПолеУсловногоОформления.Оформление.Элементы.Найти("Текст");
			ОформлениеУсловногоОформления.Использование = Истина;
			ОформлениеУсловногоОформления.Значение 		= "";
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстаток");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.БУНачальныйОстаток");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.БУКонечныйОстаток");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.НУКонечныйОстаток");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстатокРасчетов");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.БУНачальныйОстатокРасчетов");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.БУКонечныйОстатокРасчетов");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.НУКонечныйОстатокРасчетов");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.КоличествоКонечныйОстаток");
			
			ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.КоличествоНачальныйОстаток");
			
		КонецЦикла;
	Иначе
		ПолеУсловногоОформления 				= КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		
		ОформлениеУсловногоОформления 				= ПолеУсловногоОформления.Оформление.Элементы.Найти("Текст");
		ОформлениеУсловногоОформления.Использование = Истина;
		ОформлениеУсловногоОформления.Значение 		= "";
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстаток");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.БУНачальныйОстаток");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.БУКонечныйОстаток");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.НУКонечныйОстаток");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.НУНачальныйОстатокРасчетов");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.БУНачальныйОстатокРасчетов");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.БУКонечныйОстатокРасчетов");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.НУКонечныйОстатокРасчетов");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода.КоличествоКонечныйОстаток");
		
		ОформляемоеПоле 						= ПолеУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода.КоличествоНачальныйОстаток");
		
	КонецЕсли;

	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);

	// Валюта
	Если ПараметрыОтчета.Свойство("ПоказательВалютнаяСумма") И  ПараметрыОтчета.ПоказательВалютнаяСумма Тогда
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	Если ПараметрыОтчета.Свойство("ПоказательКонтроль") Тогда
		БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборДляПоказателяКонтроль(ПараметрыОтчета, КомпоновщикНастроек);
	КонецЕсли;
	
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	Для Каждого ЭлементТелаМакета Из МакетКомпоновки.Тело Цикл 
		Если ТипЗнч(ЭлементТелаМакета) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ВысотаШапки", МакетКомпоновки.Макеты[ЭлементТелаМакета.МакетШапки].Макет.Количество()); 
			Прервать;	
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ГруппировкаТелаКомпоновки Из МакетКомпоновки.Тело Цикл
		Если ТипЗнч(ГруппировкаТелаКомпоновки) = Тип("ТаблицаМакетаКомпоновкиДанных") Тогда
			ПараметрыОтчета.Вставить("ШиринаШапки", МакетКомпоновки.Макеты[ГруппировкаТелаКомпоновки.МакетШапки].Макет[0].Ячейки.Количество()); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
    ЗаголовокНиз = 1;
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ЗаголовокНиз = Результат.Области.Заголовок.Низ;
		Результат.ФиксацияСверху = ЗаголовокНиз + ПараметрыОтчета.ВысотаШапки + ?(ПараметрыОтчета.ВыводитьЕдиницуИзмерения, 2, 0);
	КонецЕсли;
	
	Результат.ФиксацияСлева = 0;	
	
	//Подменяем некоторые названия в заголовке
	Для СтрокаРезультата = ЗаголовокНиз По ЗаголовокНиз + ПараметрыОтчета.ВысотаШапки Цикл
		Для КолонкаРезультата = 1 По ПараметрыОтчета.ШиринаШапки Цикл
			ОбластьЗаголовка = Результат.Область("R" + СтрокаРезультата + "C" + КолонкаРезультата);
			Текст = ОбластьЗаголовка.Текст;
			Если СтрНайти(Текст,"Кор. Субконто") > 0 Тогда
				ОбластьЗаголовка.Текст = СтрЗаменить(Текст,"Кор. Субконто","Основание ");
			ИначеЕсли СтрНайти(Текст,"Субконто") > 0 Тогда
				ОбластьЗаголовка.Текст = СтрЗаменить(Текст,"Субконто","Объект учета ");
			ИначеЕсли СтрНайти(Текст,"Регистратор") > 0 Тогда
				ОбластьЗаголовка.Текст = "Документ";
			ИначеЕсли СтрНайти(Текст,"Счет") > 0 и ПараметрыОтчета.Регистр = "ПолуфабрикатыИПродукция" Тогда
				ОбластьЗаголовка.Текст = "Вид выпуска";
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Если СправкиРасчеты.ТребуетсяДополнитьПериодОтчетаПримечанием(ПараметрыОтчета) Тогда
		
		СправкиРасчеты.ДобавитьПримечание(Результат, ПараметрыОтчета.ИнформацияНалоговыйПериод);
		
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ЕНВД");
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПолучитьПараметрыВариантовОтчета() Экспорт
	
	Параметры = Новый Соответствие;
	
	//1
	Параметры.Вставить("ВнереализационныеРасходы",								НСтр("ru = 'Внереализационные расходы'"));
	Параметры.Вставить("ДоходыОтРеализацииТоваровИУслуг",						НСтр("ru = 'Доходы от реализации товаров, работ, услуг'"));
	Параметры.Вставить("ДоходыОтРеализацииПрочегоИмущества",					НСтр("ru = 'Доходы от реализации прочего имущества, прав, ценных бумаг'"));
	Параметры.Вставить("ВнереализационныеДоходы",								НСтр("ru = 'Внереализационные доходы'"));
	Параметры.Вставить("КосвенныеРасходыНаПроизводствоИРеализацию",				НСтр("ru = 'Косвенные расходы на производство и реализацию'"));
	Параметры.Вставить("ПрямыеРасходыОтносящиесяКРеализованнымТоварамУслугам",	НСтр("ru = 'Прямые расходы, относящиеся к реализованным товарам, услугам'"));
	Параметры.Вставить("ПрямыеТранспортныеРасходы",								НСтр("ru = 'Транспортные расходы'"));
	Параметры.Вставить("РасходыОтРеализацииПрочегоИмущества",					НСтр("ru = 'Расходы, относящиеся к реализации прочего имущества, прав, ценных бумаг'"));
	Параметры.Вставить("ПрочиеКосвенныеРасходы",								НСтр("ru = 'Прочие косвенные расходы'"));
	
	//2
	Параметры.Вставить("ОплатаТруда",						НСтр("ru = 'Расходы на оплату труда'"));
	Параметры.Вставить("Амортизация",						НСтр("ru = 'Расходы по амортизации'"));
	Параметры.Вставить("МатериальныеРасходы",				НСтр("ru = 'Материальные расходы'"));
	Параметры.Вставить("РасходыНаДобровольноеСтрахование",	НСтр("ru = 'Расходы на добровольное страхование'"));
	Параметры.Вставить("ПрочиеРасходы",						НСтр("ru = 'Прочие расходы'"));
	
	//3
	Параметры.Вставить("ОсновныеСредства",						НСтр("ru = 'Стоимость основных средств'"));
	Параметры.Вставить("НематериальныеАктивы",					НСтр("ru = 'Стоимость нематериальных активов и НИОКР'"));
	Параметры.Вставить("Материалы",								НСтр("ru = 'Стоимость материалов'"));
	Параметры.Вставить("СпецоснасткаИСпецодеждаВЭксплуатации",	НСтр("ru = 'Специальная оснастка и специальная одежда в эксплуатации'"));
	Параметры.Вставить("ПолуфабрикатыИПродукция",				НСтр("ru = 'Стоимость продукции и полуфабрикатов'"));
	Параметры.Вставить("ТоварыНаСкладе",						НСтр("ru = 'Стоимость товаров на складе'"));
	Параметры.Вставить("ТоварыОтгруженные",						НСтр("ru = 'Стоимость отгруженных товаров'"));
	Параметры.Вставить("НезавершенноеПроизводство",				НСтр("ru = 'Стоимость незавершенного производства'"));
	Параметры.Вставить("РасчетыСПоставщикамиИПокупателями",		НСтр("ru = 'Дебиторская и кредиторская задолженность'"));
	Параметры.Вставить("РасчетыСБюджетом",						НСтр("ru = 'Задолженность перед бюджетом'"));
	Параметры.Вставить("РасходыБудущихПериодов",				НСтр("ru = 'Расходы будущих периодов'"));
	Параметры.Вставить("ДоходыБудущихПериодов",					НСтр("ru = 'Доходы будущих периодов'"));
	
	//4
	Параметры.Вставить("ОперацииПриобретенияИмуществаРаботУслуг",	НСтр("ru = 'Операции приобретения товаров, прочего имущества, услуг, работ, прав, ценных бумаг'"));
	Параметры.Вставить("ОперацииВыбытияИмуществаРаботУслуг",		НСтр("ru = 'Операции выбытия товаров, работ, услуг'"));
	Параметры.Вставить("ОперацииВыбытияПрочегоИмущества",			НСтр("ru = 'Операции выбытия прочего имущества, прав, ценных бумаг'"));
	Параметры.Вставить("ДенежныеСредстваНаличные",					НСтр("ru = 'Денежные средства в кассе'"));
	Параметры.Вставить("ДенежныеСредстваБезналичные",				НСтр("ru = 'Денежные средства на банковских счетах'"));
	Параметры.Вставить("ДоговораДобровольногоСтрахованияРаботников",НСтр("ru = 'Расчеты по договорам страхования'"));
	
	Возврат Параметры;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	// Интерфейс Такси
	
	// 1
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВнереализационныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыОтРеализацииТоваровИУслуг").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыОтРеализацииПрочегоИмущества").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВнереализационныеДоходы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КосвенныеРасходыНаПроизводствоИРеализацию").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрямыеРасходыОтносящиесяКРеализованнымТоварамУслугам").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыОтРеализацииПрочегоИмущества").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрочиеКосвенныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	
	//2
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОплатаТруда").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Амортизация").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "МатериальныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыНаДобровольноеСтрахование").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрочиеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	
	//3
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОсновныеСредства").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "НематериальныеАктивы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Материалы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СпецоснасткаИСпецодеждаВЭксплуатации").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПолуфабрикатыИПродукция").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыНаСкладе").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыОтгруженные").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "НезавершенноеПроизводство").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПоставщикамиИПокупателями").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСБюджетом").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыБудущихПериодов").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыБудущихПериодов").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	
	//4
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОперацииПриобретенияИмуществаРаботУслуг").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОперацииВыбытияИмуществаРаботУслуг").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОперацииВыбытияПрочегоИмущества").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДенежныеСредстваНаличные").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДенежныеСредстваБезналичные").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоговораДобровольногоСтрахованияРаботников").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрямыеТранспортныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.НалогНаПрибыль.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	
	// Интерфейс 1С:Бухгалтерии 7.7
	// 1
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВнереализационныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыОтРеализацииТоваровИУслуг").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыОтРеализацииПрочегоИмущества").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВнереализационныеДоходы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КосвенныеРасходыНаПроизводствоИРеализацию").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрямыеРасходыОтносящиесяКРеализованнымТоварамУслугам").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрямыеТранспортныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыОтРеализацииПрочегоИмущества").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрочиеКосвенныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыФормированияОтчетныхДанных, "");
	
	//2
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОплатаТруда").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Амортизация").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "МатериальныеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыНаДобровольноеСтрахование").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПрочиеРасходы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыПромежуточныхРасчетов, "");
	
	//3
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОсновныеСредства").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "НематериальныеАктивы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Материалы").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СпецоснасткаИСпецодеждаВЭксплуатации").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПолуфабрикатыИПродукция").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыНаСкладе").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ТоварыОтгруженные").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "НезавершенноеПроизводство").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСПоставщикамиИПокупателями").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасчетыСБюджетом").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "РасходыБудущихПериодов").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоходыБудущихПериодов").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаСостоянияЕдиницыНалоговогоУчета, "");
	
	//4
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОперацииПриобретенияИмуществаРаботУслуг").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОперацииВыбытияИмуществаРаботУслуг").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОперацииВыбытияПрочегоИмущества").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДенежныеСредстваНаличные").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДенежныеСредстваБезналичные").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");
	ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ДоговораДобровольногоСтрахованияРаботников").Размещение.Вставить(Метаданные.Подсистемы.Интерфейс77НалоговыйУчет.Подсистемы.РегистрыУчетаХозяйственныхОпераций, "");;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		 Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;	
	
КонецПроцедуры

#КонецЕсли