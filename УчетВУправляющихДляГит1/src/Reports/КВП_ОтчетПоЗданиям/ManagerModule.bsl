#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры исполнения отчета.
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
							|ИспользоватьПослеКомпоновкиМакета,
							|ИспользоватьПослеВыводаРезультата,
							|ИспользоватьДанныеРасшифровки,
							|ИспользоватьВнешниеНаборыДанных,
							|ИспользоватьРасширенныеПараметрыРасшифровки",
							Истина, Истина, Истина, Истина, Истина, Ложь);
	
КонецФункции

// Функция возвращает текст заголовка.
//
// Параметры:
//  ПараметрыОтчета		 - Структура - содержит передаваемые параметры.
//  ОрганизацияВНачале	 - Булево	 - признак устанвоки наименования организации в начало заголовка.
// 
// Возвращаемое значение:
//  Строка - Текст заголовка.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат "Отчет по зданиям на " + Формат(ПараметрыОтчета.Период, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции

// Функция возвращает внешние наборы данных.
//
// Параметры:
//  ПараметрыОтчета	 - Структура		 - содержит передаваемые параметры.
//  МакетКомпоновки	 - ТабличныйДокумент - макет компоновки.
// 
// Возвращаемое значение:
//  Структура - Внешние наборы данных.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	МассивВыбрПлощадей         = Новый Массив;
	МассивВыбрБлагоустройств   = Новый Массив;
	МассивВыбрПрилегТерриторий = Новый Массив;
	МассивВыбрОтветственныхЛиц = Новый Массив;
	
	Для Каждого ТекПоле Из ПараметрыОтчета.ДополнительныеПоля Цикл 
		Если ТекПоле.Использование = Истина Тогда
			ПолеСтр = Строка(ТекПоле.Поле);
	
			Если НЕ ПараметрыОтчета.СоответствиеПлощадей.Получить(ПолеСтр) = Неопределено Тогда
				МассивВыбрПлощадей.Добавить(Сред(ПолеСтр, 2));
			КонецЕсли;
	
			Если НЕ ПараметрыОтчета.СоответствиеБлагоустройств.Получить(ПолеСтр) = Неопределено Тогда
				МассивВыбрБлагоустройств.Добавить(Сред(ПолеСтр, 2));
			КонецЕсли;
	
			Если НЕ ПараметрыОтчета.СоответствиеПрилегТерриторий.Получить(ПолеСтр) = Неопределено Тогда
				МассивВыбрПрилегТерриторий.Добавить(Сред(ПолеСтр, 2));
			КонецЕсли;
	
			Если НЕ ПараметрыОтчета.СоответствиеОтветственныхЛиц.Получить(ПолеСтр) = Неопределено Тогда
				МассивВыбрОтветственныхЛиц.Добавить(Сред(ПолеСтр, 2));
			КонецЕсли;
	
		КонецЕсли;
	КонецЦикла;
	
	// Данные для компоновщика получаем запросом и передаем в СКД результат запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПараметрыОтчета.Период);
	
	ПоляВыборкиПлощадей  = "";
	ПоляТаблицПлощадей   = "";
	Для Индекс = 0 По МассивВыбрПлощадей.Количество() - 1 Цикл
		ТекПлощадь = МассивВыбрПлощадей[Индекс];
		ИмяТаблицыПлощади = "ПлощадиЗдания" + ТекПлощадь;
		ПоляВыборкиПлощадей = ПоляВыборкиПлощадей + "ЕСТЬNULL(" + ИмяТаблицыПлощади + ".Площадь, 0) КАК П" + ТекПлощадь + ",";
		ПоляТаблицПлощадей = ПоляТаблицПлощадей 
		                   + " ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		КВП_ПлощадиЗдания.Объект КАК Здание,
			|		КВП_ПлощадиЗдания.Площадь КАК Площадь
			|	ИЗ
			|		РегистрСведений.КВП_ПлощадиЗдания КАК КВП_ПлощадиЗдания
			|	ГДЕ
			|		КВП_ПлощадиЗдания.Тип = &ТипПлощади" + ТекПлощадь + ") КАК " + ИмяТаблицыПлощади + "
			|	ПО КВП_Здания.Ссылка = " + ИмяТаблицыПлощади + ".Здание";
		Запрос.УстановитьПараметр("ТипПлощади" + ТекПлощадь, ПараметрыОтчета.СоответствиеПлощадей.Получить("П"+ТекПлощадь));
	КонецЦикла;
	
	ПоляВыборкиБлагоустройств  = "";
	ПоляТаблицБлагоустройств   = "";
	Для Индекс = 0 По МассивВыбрБлагоустройств.Количество() - 1 Цикл
		ТекБлагоустройство = МассивВыбрБлагоустройств[Индекс];
		ИмяТаблицыБлагоустройства = "БлагоустройстваОбъектов" + ТекБлагоустройство;
		ПоляВыборкиБлагоустройств = ПоляВыборкиБлагоустройств + "ЕСТЬNULL(" + ИмяТаблицыБлагоустройства + ".Значение, 0) КАК Б" + ТекБлагоустройство + ",";
		ПоляТаблицБлагоустройств = ПоляТаблицБлагоустройств 
		                   + " ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		КВП_БлагоустройствоОбъектов.Объект КАК Здание,
			|		КВП_БлагоустройствоОбъектов.Значение КАК Значение
			|	ИЗ
			|		РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
			|	ГДЕ
			|		КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &ВидБлагоустройства" + ТекБлагоустройство + ") КАК " + ИмяТаблицыБлагоустройства + "
			|	ПО КВП_Здания.Ссылка = " + ИмяТаблицыБлагоустройства + ".Здание ";
		Запрос.УстановитьПараметр("ВидБлагоустройства" + ТекБлагоустройство, ПараметрыОтчета.СоответствиеБлагоустройств.Получить("Б" + ТекБлагоустройство));
	КонецЦикла;
	
	ПоляВыборкиПрилегТерриторий = "";
	ПоляТаблицПрилегТерриторий  = "";
	Для Индекс = 0 По МассивВыбрПрилегТерриторий.Количество() - 1 Цикл
		ТекПрилегТерритория = МассивВыбрПрилегТерриторий[Индекс];
		ИмяТаблицыПрилегТерритории = "ПрилегТерриторииЗдания" + ТекПрилегТерритория;
		ПоляВыборкиПрилегТерриторий = ПоляВыборкиПрилегТерриторий + "ЕСТЬNULL(" + ИмяТаблицыПрилегТерритории + ".Значение, 0) КАК Т" + ТекПрилегТерритория + ",";
		ПоляТаблицПрилегТерриторий = ПоляТаблицПрилегТерриторий 
		                   + " ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|		КВП_ПрилегающаяТерриторияЗдания.Объект КАК Здание,
			|		КВП_ПрилегающаяТерриторияЗдания.Значение КАК Значение
			|	ИЗ
			|		РегистрСведений.КВП_ПрилегающаяТерриторияЗдания КАК КВП_ПрилегающаяТерриторияЗдания
			|	ГДЕ
			|		КВП_ПрилегающаяТерриторияЗдания.Тип = &ТипПрилегТерритории" + ТекПрилегТерритория + ") КАК " + ИмяТаблицыПрилегТерритории + "
			|	ПО КВП_Здания.Ссылка = " + ИмяТаблицыПрилегТерритории + ".Здание ";
		Запрос.УстановитьПараметр("ТипПрилегТерритории" + ТекПрилегТерритория, ПараметрыОтчета.СоответствиеПрилегТерриторий.Получить("Т" + ТекПрилегТерритория));
	КонецЦикла;
	
	ПоляВыборкиОтветственныхЛиц = "";
	ПоляТаблицОтветственныхЛиц  = "";
	Для Индекс = 0 По МассивВыбрОтветственныхЛиц.Количество() - 1 Цикл
		ТекОтвЛицо = МассивВыбрОтветственныхЛиц[Индекс];
		ИмяТаблицыОтветственныхЛиц = "ОтветственныеЛица" + ТекОтвЛицо;
		ПоляВыборкиОтветственныхЛиц = ПоляВыборкиОтветственныхЛиц + "ЕСТЬNULL(" + ИмяТаблицыОтветственныхЛиц + ".Мастер, 0) КАК О" + ТекОтвЛицо + ",";
		ПоляТаблицОтветственныхЛиц = ПоляТаблицОтветственныхЛиц 
		                   + " ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|	КВП_ОбслуживающиеМастераСрезПоследних.Объект КАК Здание,
			|	КВП_ОбслуживающиеМастераСрезПоследних.Мастер КАК Мастер
			|ИЗ
			|	РегистрСведений.КВП_ОбслуживающиеМастера.СрезПоследних(&Период, ) КАК КВП_ОбслуживающиеМастераСрезПоследних
			|	ГДЕ
			|		КВП_ОбслуживающиеМастераСрезПоследних.ВидМастера = &ВидМастера" + ТекОтвЛицо + ") КАК " + ИмяТаблицыОтветственныхЛиц + "
			|	ПО КВП_Здания.Ссылка = " + ИмяТаблицыОтветственныхЛиц + ".Здание ";
		Запрос.УстановитьПараметр("ВидМастера" + ТекОтвЛицо, ПараметрыОтчета.СоответствиеОтветственныхЛиц.Получить("О" + ТекОтвЛицо));
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	МассивЗданий = Новый Массив;
	
	// Получим настройки отбора пользователя по зданиям и определим список зданий,
	// по которым нужно получить контактную информацию.
	ЗданиеСсылка       = Неопределено;
	ГруппаЗданияСсылка = Неопределено;
	УсловиеОтбора      = "ИСТИНА";
	
	Для Каждого ЭлементОтбора Из ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование И ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Здание") Тогда
				ЗданиеСсылка = ЭлементОтбора.ПравоеЗначение;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Ссылка = &ЗданиеСсылка";
				ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
					УсловиеОтбора = УсловиеОтбора + " И Ссылка В ИЕРАРХИИ(&ЗданиеСсылка)";
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ГруппаЗдания") Тогда
				ГруппаЗданияСсылка = ЭлементОтбора.ПравоеЗначение;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					УсловиеОтбора = УсловиеОтбора + " И Ссылка В ИЕРАРХИИ(&ГруппаЗданияСсылка)";
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗапросВыборкиЗданий = Новый Запрос;
	ЗапросВыборкиЗданий.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ПометкаУдаления
	|	И НЕ КВП_Здания.ЭтоГруппа
	|	И &УсловиеОтбора";
	
	ЗапросВыборкиЗданий.УстановитьПараметр("ЗданиеСсылка",       ЗданиеСсылка);
	ЗапросВыборкиЗданий.УстановитьПараметр("ГруппаЗданияСсылка", ГруппаЗданияСсылка);
	
	ЗапросВыборкиЗданий.Текст = СтрЗаменить(ЗапросВыборкиЗданий.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	ВыборкаЗданий = ЗапросВыборкиЗданий.Выполнить().Выбрать();
	Пока ВыборкаЗданий.Следующий() Цикл
		МассивЗданий.Добавить(ВыборкаЗданий.Ссылка);
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка КАК Здание,
	|	КВП_Здания.ТипСооружения,
	|	КВП_Здания.ВидСооружения,
	|	КВП_Здания.Этажей КАК МаксимальныйЭтаж,
	|	КВП_Здания.Подъездов КАК КоличествоПодъездов,
	|	КВП_Здания.Многоквартирное,
	|	КВП_Здания.ТипЖилФонда КАК ТипЖилогоФонда,
	|	КВП_Здания.ПлощадьЗданияОбщая,
	|	КВП_Здания.ПлощадьЗданияЖилыхНежилыхПомещений,
	|	КВП_Здания.ПлощадьЗданияМестОбщегоПользования,
	|	КВП_Здания.ДатаВводаВЭксплуатацию,
	|	КВП_Здания.НомерДома,
	|	КВП_Здания.НоменклатурнаяГруппа,
	|	КВП_Здания.СерияДома,
	|	КВП_Здания.ГодПостройки,
	|	КВП_Здания.ПроцентИзноса,
	|	КВП_Здания.ГодКапРемонта,
	|	КВП_Здания.ВысотаПомещений,
	|	КВП_Здания.Объем,
	|	КВП_Здания.МатериалСтен,
	|	КВП_Здания.ВидКровли,
	|	КВП_Здания.Благоустройство,
	|	КВП_Здания.ОВД,
	|	КВП_Здания.Родитель КАК ГруппаЗдания,
	|	" + ПоляВыборкиПлощадей + "
	|	" + ПоляВыборкиБлагоустройств + "
	|	" + ПоляВыборкиПрилегТерриторий + "
	|	" + ПоляВыборкиОтветственныхЛиц + "
	|	ВЫБОР
	|		КОГДА втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		ИНАЧЕ втКонтактнаяИнформация.Город
	|	КОНЕЦ + "", "" + втКонтактнаяИнформация.Улица + "", д."" + втКонтактнаяИнформация.Дом + втКонтактнаяИнформация.Корпус КАК Адрес
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО (втКонтактнаяИнформация.Объект = КВП_Здания.Ссылка)
	|			" + ПоляТаблицПлощадей + "
	|			" + ПоляТаблицБлагоустройств + "
	|			" + ПоляТаблицПрилегТерриторий + "
	|			" + ПоляТаблицОтветственныхЛиц + "
	|ГДЕ
	|	(НЕ КВП_Здания.ПометкаУдаления)
	|	И (НЕ КВП_Здания.ЭтоГруппа)";
	
	ДанныеПоЗданиям = Запрос.Выполнить().Выгрузить();
	
	ДанныеПоЗданиям.Колонки.Добавить("ВидСобственности", Новый ОписаниеТипов("Строка"));
	ЗаполнитьВидСобственностиЗданий(ДанныеПоЗданиям, ПараметрыОтчета.Период);
	
	ВнешниеНаборыДанных = Новый Структура("ДанныеПоЗданиям", ДанныеПоЗданиям);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет.
// Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета		 - Структура							 - содержит передаваемые параметры.
//  Схема				 - СхемаКомпоновкиДанных				 - схема компоновки, на основании которой будет выполняться отчет.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных	 - компоновщик настроек компоновки данных.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Период) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Период", ПараметрыОтчета.Период);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Здание) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Здание", ПараметрыОтчета.Здание,,, Истина);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПС", Символы.ПС);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	ТекГр = КомпоновщикНастроек.Настройки;
	
	Если ПараметрыОтчета.ГруппироватьЗдания Тогда
		
		ГрЗданий = ТекГр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГрЗданий.Использование = Истина;
		ПолеК = ГрЗданий.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеК.Использование = Истина;
		ПолеК.Поле = Новый ПолеКомпоновкиДанных("ГруппаЗдания");
		АвтоПоле = ГрЗданий.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		АвтоПоле.Использование = Истина;
		
		ТекГр = ГрЗданий;
		
	КонецЕсли;
	
	Гр = ТекГр.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Гр.Использование = Истина;
	АвтоПоле = Гр.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	Для Каждого Сортировка Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
		НоваяЗапись = Гр.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НоваяЗапись.Использование     = Сортировка.Использование;
		НоваяЗапись.Поле              = Сортировка.Поле;
		НоваяЗапись.ТипУпорядочивания = Сортировка.ТипУпорядочивания;
	КонецЦикла;
	
	ПолеВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Использование = Истина;
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Здание");
	
	ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

// Возникает после компоновки макета.
//
// Параметры:
//  ПараметрыОтчета	 - Структура			 - содержит передаваемые параметры.
//  МакетКомпоновки	 - МакетКомпоновкиДанных - макет компоновки данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
КонецПроцедуры

// Возникает после вывода результата.
//
// Параметры:
//  ПараметрыОтчета	 - Структура		 - содержит передаваемые параметры.
//  Результат		 - ТабличныйДокумент - результат выполнения процедуры.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

// Вызывает настройку вариантов отчета.
//
// Параметры:
//  Настройки		 - Коллекция			 - используется для описания настроек отчетов и вариантов.
//  ОписаниеОтчета	 - СтрокаДереваЗначений	 - настройки отчета и настройки "по умолчанию" для вариантов этого отчета.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
КонецПроцедуры

// Процедура используется подсистемой варианты отчетов
//
// Параметры:
//  Настройки - Коллекция - используется для описания настроек отчетов и вариантов.
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Для Каждого Вариант из Схема.ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры расшифровки отчета.
//
// Параметры:
//  Адрес					 - Строка 		 - адрес временного хранилища с данными расшифровки отчета.
//  Расшифровка	 			- Произвольный	 - значения полей расшифровки.
//  ПараметрыРасшифровки	- Структура 	 - параметры расшифровки.
//
Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Процедура получает вид собственности зданий.
Процедура ЗаполнитьВидСобственностиЗданий(ДанныеПоЗданиям, Период)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение.Владелец КАК Здание,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Период, ) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних";
	
	Запрос.УстановитьПараметр("Период", Период);
	
	ТаблицаСобственности = Запрос.Выполнить().Выгрузить();
	
	//	Тип собственности здания определяется по виду собственности помещений данного здания:
	//	если в квартирах здания все квартиры муниципальные – дом муниципальный;
	//	если в квартирах здания все квартиры государственные – дом государственный;
	//	в противном случае дом общий.
	
	Для Каждого ТекЗдание Из ДанныеПоЗданиям Цикл
		ВидСобственностиЗдания = "Общая";
		СтрокиЗдания = ТаблицаСобственности.НайтиСтроки(Новый Структура("Здание", ТекЗдание.Здание));
		Если СтрокиЗдания.Количество() = 1 Тогда
			СтрокаЗдания = СтрокиЗдания[0];
			Если СтрокаЗдания.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Муниципальная Тогда
				ВидСобственностиЗдания = "Муниципальная";
			ИначеЕсли СтрокаЗдания.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Государственная Тогда
				ВидСобственностиЗдания = "Государственная";
			ИначеЕсли СтрокаЗдания.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Ведомственная Тогда
				ВидСобственностиЗдания = "Ведомственная";
			КонецЕсли;
		КонецЕсли;
		ТекЗдание.ВидСобственности = ВидСобственностиЗдания;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидСобственностиЗданий()

// Процедура добавляет поле итога.
Процедура ДобавитьПолеИтога(Схема, ИмяПоля)
	
	ПолеИтога = Схема.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ИмяПоля;
	ПолеИтога.Выражение   = "Сумма(" + ИмяПоля + ")";
	
КонецПроцедуры

// Процедура добавляет поля для возможности их отображения.
Процедура ДобавитьПоляВНаборКомпоновки(ПараметрыОтчета, Схема) Экспорт

	Набор = Схема.НаборыДанных.Найти("ДанныеПоЗданиям");
	
	Если Набор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Схема.ПоляИтога.Очистить();
	
	Если НЕ Набор.Поля.Найти("ПлощадьЗданияОбщая") = Неопределено Тогда
		ДобавитьПолеИтога(Схема, "ПлощадьЗданияОбщая");
	КонецЕсли;

	Если НЕ Набор.Поля.Найти("ПлощадьЗданияЖилыхНежилыхПомещений") = Неопределено Тогда
		ДобавитьПолеИтога(Схема, "ПлощадьЗданияЖилыхНежилыхПомещений");
	КонецЕсли;

	Если НЕ Набор.Поля.Найти("ПлощадьЗданияМестОбщегоПользования") = Неопределено Тогда
		ДобавитьПолеИтога(Схема, "ПлощадьЗданияМестОбщегоПользования");
	КонецЕсли;
	
	СоответствиеПлощадей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ТипыПлощадейЗдания.Код КАК Код,
	|	КВП_ТипыПлощадейЗдания.Наименование КАК Наименование,
	|	КВП_ТипыПлощадейЗдания.Ссылка КАК ТипПлощади
	|ИЗ
	|	Справочник.КВП_ТипыПлощадейЗдания КАК КВП_ТипыПлощадейЗдания
	|ГДЕ
	|	НЕ КВП_ТипыПлощадейЗдания.ПометкаУдаления";
	
	ОписаниеТиповПлощади = Метаданные.РегистрыСведений.КВП_ПлощадиЗдания.Ресурсы.Площадь.Тип;
	
	ВыборкаПлощадей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПлощадей.Следующий() Цикл
		ПолеИдентификатор = "П" + УПЖКХ_ТиповыеМетодыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВыборкаПлощадей.Код);
		Заголовок = ВыборкаПлощадей.Наименование;
		Если Набор.Поля.Найти(ПолеИдентификатор) = Неопределено Тогда
			ПолеНабораДанных             = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = ПолеИдентификатор;
			ПолеНабораДанных.Заголовок   = Заголовок;
			ПолеНабораДанных.ПутьКДанным = ПолеИдентификатор;
			ПолеНабораДанных.ТипЗначения = ОписаниеТиповПлощади;
		КонецЕсли;
		ДобавитьПолеИтога(Схема, ПолеИдентификатор);
		СоответствиеПлощадей.Вставить(ПолеИдентификатор, ВыборкаПлощадей.ТипПлощади);
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("СоответствиеПлощадей", СоответствиеПлощадей);
	
	СоответствиеБлагоустройств = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВидыБлагоустройстваОбъектов.Код КАК Код,
	|	КВП_ВидыБлагоустройстваОбъектов.Наименование КАК Наименование,
	|	КВП_ВидыБлагоустройстваОбъектов.Ссылка КАК ВидБлагоустройства
	|ИЗ
	|	Справочник.КВП_ВидыБлагоустройстваОбъектов КАК КВП_ВидыБлагоустройстваОбъектов
	|ГДЕ
	|	НЕ КВП_ВидыБлагоустройстваОбъектов.ПометкаУдаления";
	
	ОписаниеТиповБлагоустройства = Метаданные.РегистрыСведений.КВП_БлагоустройствоОбъектов.Ресурсы.Значение.Тип;
	
	ВыборкаБлагоустройств = Запрос.Выполнить().Выбрать();
	Пока ВыборкаБлагоустройств.Следующий() Цикл
		ПолеИдентификатор = "Б" + УПЖКХ_ТиповыеМетодыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВыборкаБлагоустройств.Код);
		Заголовок = ВыборкаБлагоустройств.Наименование;
		Если Набор.Поля.Найти(ПолеИдентификатор) = Неопределено Тогда
			ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = ПолеИдентификатор;
			ПолеНабораДанных.Заголовок   = Заголовок;
			ПолеНабораДанных.ПутьКДанным = ПолеИдентификатор;
			ПолеНабораДанных.ТипЗначения = ОписаниеТиповБлагоустройства;
		КонецЕсли;
		СоответствиеБлагоустройств.Вставить(ПолеИдентификатор, ВыборкаБлагоустройств.ВидБлагоустройства);
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("СоответствиеБлагоустройств", СоответствиеБлагоустройств);
	
	СоответствиеПрилегТерриторий = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ПрилегающаяТерритория.Код КАК Код,
	|	КВП_ПрилегающаяТерритория.Наименование КАК Наименование,
	|	КВП_ПрилегающаяТерритория.Ссылка КАК ПрилегТерритория
	|ИЗ
	|	Справочник.КВП_ПрилегающаяТерритория КАК КВП_ПрилегающаяТерритория
	|ГДЕ
	|	НЕ КВП_ПрилегающаяТерритория.ПометкаУдаления";
	
	ОписаниеТиповПрилегТерриторий = Метаданные.РегистрыСведений.КВП_ПрилегающаяТерриторияЗдания.Ресурсы.Значение.Тип;
	
	ВыборкаПрилегТерриторий = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПрилегТерриторий.Следующий() Цикл
		ПолеИдентификатор = "Т" + УПЖКХ_ТиповыеМетодыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВыборкаПрилегТерриторий.Код);
		Заголовок = ВыборкаПрилегТерриторий.Наименование;
		Если Набор.Поля.Найти(ПолеИдентификатор) = Неопределено Тогда
			ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = ПолеИдентификатор;
			ПолеНабораДанных.Заголовок   = Заголовок;
			ПолеНабораДанных.ПутьКДанным = ПолеИдентификатор;
			ПолеНабораДанных.ТипЗначения = ОписаниеТиповПрилегТерриторий;
		КонецЕсли;
		ДобавитьПолеИтога(Схема, ПолеИдентификатор);
		СоответствиеПрилегТерриторий.Вставить(ПолеИдентификатор, ВыборкаПрилегТерриторий.ПрилегТерритория);
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("СоответствиеПрилегТерриторий", СоответствиеПрилегТерриторий);
	
	СоответствиеОтветственныхЛиц = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВидыМастеров.Код КАК Код,
	|	КВП_ВидыМастеров.Наименование КАК Наименование,
	|	КВП_ВидыМастеров.Ссылка КАК ВидМастера
	|ИЗ
	|	Справочник.КВП_ВидыМастеров КАК КВП_ВидыМастеров
	|ГДЕ
	|	НЕ КВП_ВидыМастеров.ПометкаУдаления";
	
	ОписаниеТиповОтветственныхЛиц = Метаданные.РегистрыСведений.КВП_ОбслуживающиеМастера.Ресурсы.Мастер.Тип;

	ВыборкаОтветственныхЛиц = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОтветственныхЛиц.Следующий() Цикл
		ПолеИдентификатор = "О" + УПЖКХ_ТиповыеМетодыСервер.ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВыборкаОтветственныхЛиц.Код);
		Заголовок = ВыборкаОтветственныхЛиц.Наименование;
		Если Набор.Поля.Найти(ПолеИдентификатор) = Неопределено Тогда
			ПолеНабораДанных = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = ПолеИдентификатор;
			ПолеНабораДанных.Заголовок   = Заголовок;
			ПолеНабораДанных.ПутьКДанным = ПолеИдентификатор;
			ПолеНабораДанных.ТипЗначения = ОписаниеТиповОтветственныхЛиц;
		КонецЕсли;
		СоответствиеОтветственныхЛиц.Вставить(ПолеИдентификатор, ВыборкаОтветственныхЛиц.ВидМастера);
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("СоответствиеОтветственныхЛиц", СоответствиеОтветственныхЛиц);
	
КонецПроцедуры // ДобавитьПоляВНаборКомпоновки()

#КонецОбласти

#КонецЕсли