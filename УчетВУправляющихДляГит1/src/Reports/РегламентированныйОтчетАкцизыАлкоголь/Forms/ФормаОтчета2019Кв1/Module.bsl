
#Область Переменные

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СохраненныеДанныеОтчета;

#Область ПеременныеКС

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем ДанныеКС;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем Документирование;

&НаСервере
Перем ТаблицаОписаний;

#КонецОбласти

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.мСохраненныйДок;
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2019";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_1", Новый Цвет(192, 192, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	мСтруктураЦветовРаскраски.Вставить("_5", Новый Цвет(255, 255, 255));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР1М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР21М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР22М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР23М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР241М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыР25М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП1М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП2М4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП3М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП4М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП4М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП512М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП612М1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП613М2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП614М3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП3М1_");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыП3М2_");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекущееЗначениеКоэффициентаТ");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
	СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ИнициализироватьОбычныеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ЗаполнитьЗначенияПоУмолчанию = Ложь;
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			ЗаполнитьЗначенияПоУмолчанию = Истина;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.мСохраненныйДок.Организация)
				<> РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
				ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ИП
	= НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если ЗаполнитьЗначенияПоУмолчанию ИЛИ ОтчетСкопированСЮЛНаИПИлиСИПНаЮЛ Тогда
		
		УстановитьКодПоМестуПоУмолчанию();
		
		// Установка в разделе 1 значения кода по ОКТМО.
		//
		ОргОКТМО = "";
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ОКТМО");
		Если СведенияОбОрганизации.Свойство("ОКТМО") Тогда
			ОргОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
		КонецЕсли;
		
		ДеревоРаздела1 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
		ДеревоРаздела1.Строки[0].Данные.Вставить("П000010001003", ОргОКТМО);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела1, УникальныйИдентификатор);
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение) Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СформироватьСпискиВыбора();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодПоМестуПоУмолчанию()
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "120";
		
	Иначе
		
		ТабличныйДокумент.Области.ПоМесту.Значение = "214";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "КППЮЛ");
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Если ЗначениеЗаполнено(КПП) Тогда
			Если Сред(КПП, 5, 2) = "50" И СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик Тогда
				
				ТабличныйДокумент.Области.ПоМесту.Значение = "213";
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппыР1М1   = "П00001М1";
	СтруктураРеквизитовФормы.мИдГруппыР1М2   = "П00001М2";
	СтруктураРеквизитовФормы.мИдГруппыР21М1  = "П00021М1";
	СтруктураРеквизитовФормы.мИдГруппыР22М1  = "П00022М1";
	СтруктураРеквизитовФормы.мИдГруппыР23М1  = "П00023М1";
	СтруктураРеквизитовФормы.мИдГруппыР241М1 = "П00241М1";
	СтруктураРеквизитовФормы.мИдГруппыР25М1  = "П00025М1";
	СтруктураРеквизитовФормы.мИдГруппыП1М1   = "П00101М1";
	СтруктураРеквизитовФормы.мИдГруппыП2М1   = "П00102М1";
	СтруктураРеквизитовФормы.мИдГруппыП2М2   = "П00102М2";
	СтруктураРеквизитовФормы.мИдГруппыП2М3   = "П00102М3";
	СтруктураРеквизитовФормы.мИдГруппыП2М4   = "П00102М4";
	СтруктураРеквизитовФормы.мИдГруппыП3М1   = "П00103М1";
	СтруктураРеквизитовФормы.мИдГруппыП4М1   = "П00104М1";
	СтруктураРеквизитовФормы.мИдГруппыП4М2   = "П00104М2";
	СтруктураРеквизитовФормы.мИдГруппыП512М1 = "П00105М1";
	СтруктураРеквизитовФормы.мИдГруппыП612М1 = "П00106М1";
	СтруктураРеквизитовФормы.мИдГруппыП613М2 = "П00106М2";
	СтруктураРеквизитовФормы.мИдГруппыП614М3 = "П00106М3";
	
	// Идентификаторы служебных многострочных групп для печати Приложения 3.
	СтруктураРеквизитовФормы.мИдГруппыП3М1_ = "П10103М1";
	СтруктураРеквизитовФормы.мИдГруппыП3М2_ = "П10103М2";
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П00001М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М102000");
	ИменаГраф.Добавить("П00001М105000");
	ИменаГраф.Добавить("П00001М106000");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М2);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00001М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00001М203000");
	ИменаГраф.Добавить("П00001М204000");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР1М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00021М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00021М100001");
	ИменаГраф.Добавить("П00021М100002");
	ИменаГраф.Добавить("П00021М100003");
	ИменаГраф.Добавить("П00021М100004");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР21М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00022М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00022М100001");
	ИменаГраф.Добавить("П00022М100002");
	ИменаГраф.Добавить("П00022М100003");
	ИменаГраф.Добавить("П00022М100004");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР22М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00023М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00023М100001");
	ИменаГраф.Добавить("П00023М100002");
	ИменаГраф.Добавить("П00023М100003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР23М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00241М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00241М100001");
	ИменаГраф.Добавить("П00241М100002");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР241М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00025М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00025М100001");
	ИменаГраф.Добавить("П00025М100002");
	ИменаГраф.Добавить("П00025М100003");
	ИменаГраф.Добавить("П00025М100004");
	ИменаГраф.Добавить("П00025М100005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыР25М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00101М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00101М100001");
	ИменаГраф.Добавить("П00101М100002");
	ИменаГраф.Добавить("П00101М100003");
	ИменаГраф.Добавить("П00101М100004");
	ИменаГраф.Добавить("П00101М100005");
	ИменаГраф.Добавить("П00101М100006");
	ИменаГраф.Добавить("П00101М100007");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП1М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00102М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М106000");
	ИменаГраф.Добавить("П00102М110000");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М2);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М3);
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М4);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00102М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М207003");
	ИменаГраф.Добавить("П00102М207004");
	ИменаГраф.Добавить("П00102М207005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00102М3.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М308003");
	ИменаГраф.Добавить("П00102М308004");
	ИменаГраф.Добавить("П00102М308005");
	ИменаГраф.Добавить("П00102М308006");
	ИменаГраф.Добавить("П00102М308007");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М3, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00102М4.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00102М409003");
	ИменаГраф.Добавить("П00102М409004");
	ИменаГраф.Добавить("П00102М409005");
	ИменаГраф.Добавить("П00102М409006");
	ИменаГраф.Добавить("П00102М409007");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП2М4, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00103М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00103М100001");
	ИменаГраф.Добавить("П00103М100002");
	ИменаГраф.Добавить("П00103М100003");
	ИменаГраф.Добавить("П00103М100004");
	ИменаГраф.Добавить("П00103М100005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП3М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00104М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00104М104000");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП4М2);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП4М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00104М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00104М205000");
	ИменаГраф.Добавить("П00104М206000");
	ИменаГраф.Добавить("П00104М207000");
	ИменаГраф.Добавить("П00104М208000");
	ИменаГраф.Добавить("П00104М209000");
	ИменаГраф.Добавить("П00104М210000");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП4М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	// Группа П00105М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00105М119003");
	ИменаГраф.Добавить("П00105М120003");
	ИменаГраф.Добавить("П00105М121003");
	ИменаГраф.Добавить("П00105М122003");
	ИменаГраф.Добавить("П00105М123003");
	ИменаГраф.Добавить("П00105М124003");
	ИменаГраф.Добавить("П00105М125003");
	ИменаГраф.Добавить("П00105М126003");
	ИменаГраф.Добавить("П00105М127003");
	ИменаГраф.Добавить("П00105М128003");
	ИменаГраф.Добавить("П00105М129003");
	ИменаГраф.Добавить("П00105М130003");
	ИменаГраф.Добавить("П00105М130103");
	ИменаГраф.Добавить("П00105М130203");
	ИменаГраф.Добавить("П00105М130303");
	ИменаГраф.Добавить("П00105М131003");
	ИменаГраф.Добавить("П00105М131103");
	ИменаГраф.Добавить("П00105М131203");
	ИменаГраф.Добавить("П00105М131303");
	ИменаГраф.Добавить("П00105М132003");
	ИменаГраф.Добавить("П00105М133003");
	ИменаГраф.Добавить("П00105М134003");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП512М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00106М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00106М121003");
	ИменаГраф.Добавить("П00106М122003");
	ИменаГраф.Добавить("П00106М123003");
	ИменаГраф.Добавить("П00106М124003");
	ИменаГраф.Добавить("П00106М125003");
	ИменаГраф.Добавить("П00106М125503");
	ИменаГраф.Добавить("П00106М126003");
	ИменаГраф.Добавить("П00106М126503");
	ИменаГраф.Добавить("П00106М126603");
	ИменаГраф.Добавить("П00106М126703");
	ИменаГраф.Добавить("П00106М127003");
	ИменаГраф.Добавить("П00106М127503");
	ИменаГраф.Добавить("П00106М127603");
	ИменаГраф.Добавить("П00106М127703");
	ИменаГраф.Добавить("П00106М128003");
	ИменаГраф.Добавить("П00106М128503");
	ИменаГраф.Добавить("П00106М129003");
	ИменаГраф.Добавить("П00106М129503");
	ИменаГраф.Добавить("П00106М130003");
	ИменаГраф.Добавить("П00106М130503");
	ИменаГраф.Добавить("П00106М131003");
	ИменаГраф.Добавить("П00106М131503");
	ИменаГраф.Добавить("П00106М132003");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП612М1, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00106М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00106М232503");
	ИменаГраф.Добавить("П00106М233003");
	ИменаГраф.Добавить("П00106М234003");
	ИменаГраф.Добавить("П00106М235003");
	ИменаГраф.Добавить("П00106М236003");
	ИменаГраф.Добавить("П00106М237003");
	ИменаГраф.Добавить("П00106М238003");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП613М2, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П00106М3.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П00106М338503");
	ИменаГраф.Добавить("П00106М339003");
	ИменаГраф.Добавить("П00106М340003");
	ИменаГраф.Добавить("П00106М340503");
	ИменаГраф.Добавить("П00106М341003");
	ИменаГраф.Добавить("П00106М341503");
	ИменаГраф.Добавить("П00106М342003");
	ИменаГраф.Добавить("П00106М342503");
	ИменаГраф.Добавить("П00106М343003");
	ИменаГраф.Добавить("П00106М343503");
	ИменаГраф.Добавить("П00106М344003");
	ИменаГраф.Добавить("П00106М344503");
	ИменаГраф.Добавить("П00106М345003");
	ИменаГраф.Добавить("П00106М345503");
	ИменаГраф.Добавить("П00106М346003");
	ИменаГраф.Добавить("П00106М347003");
	ИменаГраф.Добавить("П00106М348003");
	ИменаГраф.Добавить("П00106М349003");
	
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП614М3, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П10103М1.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П10103М101003");
	ИменаГраф.Добавить("П10103М102003");
	ИменаГраф.Добавить("П10103М103003");
	ИменаГраф.Добавить("П10103М104003");
	ИменаПодчиненныхГрупп = Новый Массив;
	ИменаПодчиненныхГрупп.Добавить(СтруктураРеквизитовФормы.мИдГруппыП3М2_);
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП3М1_, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П10103М2.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П10103М200001");
	ИменаГраф.Добавить("П10103М200002");
	ИменаГраф.Добавить("П10103М200003");
	ИменаГраф.Добавить("П10103М200004");
	ИменаГраф.Добавить("П10103М200005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(СтруктураРеквизитовФормы.мИдГруппыП3М2_, Новый Структура(
	"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп", ИменаГраф, 1, 1, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР21М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР22М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР23М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР241М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыР25М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП1М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП2М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение2", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП3М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение3", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП4М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение4", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП512М1);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение5", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("Многостраничность");
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Приложение612_613");
	ИменаПодчиненныхРазделов.Добавить("Приложение614");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение6", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП612М1);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП613М2);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Приложение6");
	СтруктураРаздела.Вставить("НаимСтраницы", "Разделы 1.2, 1.3");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение612_613", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппыП614М3);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("Подчиненность");
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Приложение6");
	СтруктураРаздела.Вставить("НаимСтраницы", "Раздел 1.4");
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение614", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		// Особая обработка значения показателя "Код показателя" (подраздел 2.4 раздела 2).
		Если Элем.Ключ = "Раздел2" Тогда
			ТекВетка.Данные.Вставить("П000240000001", "40001");
		КонецЕсли;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
			ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы(МассивИменРазделов = Неопределено)
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого ИмяРаздела Из МассивИменРазделов Цикл
		
		ЭтаФорма["СтруктураДанных" + ИмяРаздела] = Новый Структура;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяРаздела);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	СтрокаСведений = "НаимЮЛПол";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
	СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
	
	НаимОрганизации = "";
	СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
	
	Возврат СокрЛП(НаимОрганизации);
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел2";
	СтрокаУровня1.Представление      = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение1";
	СтрокаУровня1.Представление      = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение2";
	СтрокаУровня1.Представление      = "Приложение 2";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение3";
	СтрокаУровня1.Представление      = "Приложение 3";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение4";
	СтрокаУровня1.Представление      = "Приложение 4";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение5";
	СтрокаУровня1.Представление      = "Приложение 5";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Приложение6";
	СтрокаУровня1.Представление      = "Приложение 6";
	СтрокаУровня1.ОриентацияСтраницы = "Портрет";
	СтрокаУровня1.ВыводНаПечать      = 1;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2019Кв1");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
	"Выбор места представления", КоллекцияСписковВыбора[?(СтруктураРеквизитовФормы.ИП,
	"МестаПредставленияИП", "МестаПредставленияЮЛ")]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
	"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора["ФормыРеорганизации"]);
	
	//Раздел 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М102000", 0, ,
	"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00001М203000", 2, ,
	"Выбор кода срока уплаты", КоллекцияСписковВыбора["КодыСрокаУплаты"]);
	
	//Раздел 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	//Подраздел 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00021М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р21"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00021М100002", 1, ,
	"Выбор признака применения ставки акциза", КоллекцияСписковВыбора["ПризнакиПримененияСтавкиАкциза"]);
	//Подраздел 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00022М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р22"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00022М100002", 1, ,
	"Выбор признака применения ставки акциза", КоллекцияСписковВыбора["ПризнакиПримененияСтавкиАкциза"]);
	//Подраздел 2.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00023М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р23"]);
	//Подраздел 2.4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р24"]);
	//Подраздел 2.4.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00241М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р241"]);
	//Подраздел 2.5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00025М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Р25"]);
	
	//Приложение 1.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010001003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00101М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_П1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00101М100002", 1, ,
	"Выбор признака применения ставки акциза", КоллекцияСписковВыбора["ПризнакиПримененияСтавкиАкциза"]);
	
	//Приложение 2.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020000103", 1, ,
	"Выбор признака документа", КоллекцияСписковВыбора["ПризнакиДокумента"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М106000", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М207003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_П2_Стр070"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М308003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_П2_Стр080_Стр090"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00102М409003", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_П2_Стр080_Стр090"]);
	
	//Приложение 3.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00103М100001", 5, ,
	"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_П3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00103М100002", 3, ,
	"Выбор кода вида этилового спирта", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00103М100004", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
	//Приложение 4.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001040000103", 1, ,
	"Выбор признака организации", КоллекцияСписковВыбора["ПризнакиОрганизации"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00104М104000", 3, ,
	"Выбор кода вида денатурированного этилового спирта", КоллекцияСписковВыбора["КодыВидаДенатурЭтилСпирта"]);
	
	//Приложение 5.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001050005003", 3, ,
	"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	//Раздел 1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001050016003", 3, ,
	"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	//Раздел 1.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00105М119003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
	//Приложение 6.
	//
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001060000103", 1, ,
	"Выбор признака банковской гарантии", КоллекцияСписковВыбора["ПризнакиБанковскойГарантии"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001060009003", 3, ,
	"Выбор кода вида закупаемого этилового спирта", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	//Раздел 1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001060018003", 3, ,
	"Выбор кода вида закупаемого этилового спирта", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	//Раздел 1.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00106М121003", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	//Раздел 1.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00106М232503", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	//Раздел 1.4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П00106М338503", 3, ,
	"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	
	КодПериода = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодПериода = КодПериода + 70;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодПериода, "ЧЦ=2;ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение
	= Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
		ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаРасшифровки;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = 
		?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, 
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	ДанныеМногоуровневыхРазделов = Неопределено;
	ДеревоРаздела = Неопределено;
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов)
		И ДанныеМногоуровневыхРазделов.Свойство("Приложение6", ДеревоРаздела) Тогда
		
		Для Каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			// Подразделы 1.2, 1.3 Приложения 6.
			//
			ПодчВетка612_613 = Ветка.Строки.Добавить().Строки.Добавить();
			ПодчВетка612_613.Данные = Новый Структура;
			ПодчВетка612_613.ДанныеМногострочныхЧастей = Новый Структура;
			
			ДеревоСтарМнЧ = Ветка.ДанныеМногострочныхЧастей["П00106М1"];
			
			ДеревоНовМнЧ = Новый ДеревоЗначений;
			ДеревоНовМнЧ.Колонки.Добавить("Данные");
			ДеревоНовМнЧ.Колонки.Добавить("ДанныеМногострочныхЧастей");
			
			Для каждого СтрокаСтарМнЧ Из ДеревоСтарМнЧ.Строки Цикл
				СтрокаНовМнЧ = ДеревоНовМнЧ.Строки.Добавить();
				СтрокаНовМнЧ.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаСтарМнЧ.Данные);
				СтрокаНовМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			КонецЦикла;
			
			ПодчВетка612_613.ДанныеМногострочныхЧастей.Вставить("П00106М1", ДеревоНовМнЧ);
			Ветка.ДанныеМногострочныхЧастей.Удалить("П00106М1");
			
			ДеревоСтарМнЧ = Ветка.ДанныеМногострочныхЧастей["П00106М2"];
			
			ДеревоНовМнЧ = Новый ДеревоЗначений;
			ДеревоНовМнЧ.Колонки.Добавить("Данные");
			ДеревоНовМнЧ.Колонки.Добавить("ДанныеМногострочныхЧастей");
			
			Для каждого СтрокаСтарМнЧ Из ДеревоСтарМнЧ.Строки Цикл
				СтрокаНовМнЧ = ДеревоНовМнЧ.Строки.Добавить();
				СтрокаНовМнЧ.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаСтарМнЧ.Данные);
				СтрокаНовМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			КонецЦикла;
			
			ПодчВетка612_613.ДанныеМногострочныхЧастей.Вставить("П00106М2", ДеревоНовМнЧ);
			Ветка.ДанныеМногострочныхЧастей.Удалить("П00106М2");
			
			// Подраздел 1.4 Приложения 6.
			//
			ПодчВетка614 = Ветка.Строки.Добавить().Строки.Добавить();
			ПодчВетка614.Данные = Новый Структура;
			ПодчВетка614.ДанныеМногострочныхЧастей = Новый Структура;
			
			ДеревоСтарМнЧ = Ветка.ДанныеМногострочныхЧастей["П00106М3"];
			
			ДеревоНовМнЧ = Новый ДеревоЗначений;
			ДеревоНовМнЧ.Колонки.Добавить("Данные");
			ДеревоНовМнЧ.Колонки.Добавить("ДанныеМногострочныхЧастей");
			
			Для каждого СтрокаСтарМнЧ Из ДеревоСтарМнЧ.Строки Цикл
				СтрокаНовМнЧ = ДеревоНовМнЧ.Строки.Добавить();
				СтрокаНовМнЧ.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаСтарМнЧ.Данные);
				СтрокаНовМнЧ.ДанныеМногострочныхЧастей = Новый Структура;
			КонецЦикла;
			
			ПодчВетка614.ДанныеМногострочныхЧастей.Вставить("П00106М3", ДеревоНовМнЧ);
			Ветка.ДанныеМногострочныхЧастей.Удалить("П00106М3");
			
		КонецЦикла;
		
		ДанныеМногоуровневыхРазделов.Вставить("Приложение6", ДеревоРаздела);
		СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораИФНС();
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00025М100005")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00101М100007")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М308007")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М409007") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокГодов = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		СтруктураПараметров.Вставить("ПоследнееЧисло", 1900);
		СтруктураПараметров.Вставить("ТипСтрока", Истина);
		
		СписокГодов.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		СписокГодов.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		Элементы.ТабличныйДокумент.Доступность = Ложь;
		
		ПоказатьВыборИзСписка(Оп, СписокГодов, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокГодов.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00025М100004")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00101М100006")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М308006")
		ИЛИ СтрНачинаетсяС(Область.Имя, "П00102М409006") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокМесяцев = Новый СписокЗначений;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПервоеЧисло", 1);
		СтруктураПараметров.Вставить("ПоследнееЧисло", 12);
		СтруктураПараметров.Вставить("ДлинаСЛидирующимиНулями", 2);
		
		СписокМесяцев.ЗагрузитьЗначения(МассивЧиселЗаданныйИнтервалом(СтруктураПараметров));
		
		Для каждого Эл Из СписокМесяцев Цикл
			Если Эл.Значение = "01" Тогда
				Эл.Представление = НСтр("ru='01 - январь'");
			ИначеЕсли Эл.Значение = "02" Тогда
				Эл.Представление = НСтр("ru='02 - февраль'");
			ИначеЕсли Эл.Значение = "03" Тогда
				Эл.Представление = НСтр("ru='03 - март'");
			ИначеЕсли Эл.Значение = "04" Тогда
				Эл.Представление = НСтр("ru='04 - апрель'");
			ИначеЕсли Эл.Значение = "05" Тогда
				Эл.Представление = НСтр("ru='05 - май'");
			ИначеЕсли Эл.Значение = "06" Тогда
				Эл.Представление = НСтр("ru='06 - июнь'");
			ИначеЕсли Эл.Значение = "07" Тогда
				Эл.Представление = НСтр("ru='07 - июль'");
			ИначеЕсли Эл.Значение = "08" Тогда
				Эл.Представление = НСтр("ru='08 - август'");
			ИначеЕсли Эл.Значение = "09" Тогда
				Эл.Представление = НСтр("ru='09 - сентябрь'");
			ИначеЕсли Эл.Значение = "10" Тогда
				Эл.Представление = НСтр("ru='10 - октябрь'");
			ИначеЕсли Эл.Значение = "11" Тогда
				Эл.Представление = НСтр("ru='11 - ноябрь'");
			ИначеЕсли Эл.Значение = "12" Тогда
				Эл.Представление = НСтр("ru='12 - декабрь'");
			КонецЕсли;
		КонецЦикла;
		
		СписокМесяцев.Вставить(0, "", "Пустое значение");
		
		Оп = Новый ОписаниеОповещения("ВыбратьЧислоИзСпискаЗавершение", ЭтотОбъект, Область);
		
		Элементы.ТабличныйДокумент.Доступность = Ложь;
		
		ПоказатьВыборИзСписка(Оп, СписокМесяцев, Элементы.ТабличныйДокумент.ТекущаяОбласть,
		СписокМесяцев.НайтиПоЗначению(СокрЛП(Область.Значение)));
		
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П001060013503") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ОтображатьВыборГода", Истина);
		ДопПараметры.Вставить("ОтображатьМесяцы", Истина);
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("ДополнительныеПараметры", ДопПараметры);
		
		МесяцИГод_Дата = СтроковыеФункцииКлиентСервер.СтрокаВДату("01." + СокрЛП(Область.Значение));
		Если ЗначениеЗаполнено(МесяцИГод_Дата) Тогда
			ПараметрыВыбора.Вставить("НачалоПериода", МесяцИГод_Дата);
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(МесяцИГод_Дата));
		Иначе
			ПараметрыВыбора.Вставить("НачалоПериода", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			ПараметрыВыбора.Вставить("КонецПериода",  КонецМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		КонецЕсли;
		
		Оп = Новый ОписаниеОповещения("ВыбратьМесяцИГодЗавершение", ЭтотОбъект, Область);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ВыборОтчетногоПериода",
		ПараметрыВыбора, ЭтаФорма, , , , Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000010001003" Тогда
		ОКТМО = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаОКТМО = СтрДлина(ОКТМО);
		Если ДлинаОКТМО = 11 ИЛИ ДлинаОКТМО = 8 ИЛИ ДлинаОКТМО = 0 Тогда
			Область.Значение = ОКТМО;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код по ОКТМО должен состоять из 8 или 11 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П00001М102000") Тогда
		КБК = СтрЗаменить(ЗначПоказателя, " ", "");
		ДлинаКБК = СтрДлина(КБК);
		Если ДлинаКБК = 20 ИЛИ ДлинаКБК = 0 Тогда
			Область.Значение = КБК;
		Иначе
			Область.Значение = "";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(
			"ru='Код бюджетной классификации должен состоять из 20 цифр. Значение очищено.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Область.Очистить();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + ". Значение очищено'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если СтруктураЗависимыхЯчеекДляАвторасчета.Свойство(ИмяРаздела) Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
	"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьМесяцИГодЗавершение(РезультатВыбора, ДополнительныйПараметр) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МесяцИГод = Формат(РезультатВыбора.КонецПериода, "ДФ=""ММ.гггг""");
	
	Если МесяцИГод <> ДополнительныйПараметр.Значение Тогда
		ДополнительныйПараметр.Значение = МесяцИГод;
	Иначе
		ДополнительныйПараметр.Значение = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЧислоИзСпискаЗавершение(ВыбЭлемент, ДополнительныйПараметр) Экспорт
	
	Если ВыбЭлемент <> Неопределено Тогда
		Если ВыбЭлемент.Значение <> ДополнительныйПараметр.Значение Тогда
			ДополнительныйПараметр.Значение = ВыбЭлемент.Значение;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТабличныйДокумент.Доступность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивЧиселЗаданныйИнтервалом(СтруктураПараметров)
	
	МассивЧисел = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ПервоеЧисло    = Неопределено;
		ПоследнееЧисло = Неопределено;
		
		Если СтруктураПараметров.Свойство("ПервоеЧисло", ПервоеЧисло)
			И СтруктураПараметров.Свойство("ПоследнееЧисло", ПоследнееЧисло) Тогда
			
			Если ПервоеЧисло <= ПоследнееЧисло Тогда
				ПоУбыванию = Ложь;
			Иначе
				ПоУбыванию = Истина;
				ПромежуточноеЗначение = ПервоеЧисло;
				ПервоеЧисло = ПоследнееЧисло;
				ПоследнееЧисло = ПромежуточноеЗначение;
			КонецЕсли;
			
			ТипСтрока = Ложь;
			СтруктураПараметров.Свойство("ТипСтрока", ТипСтрока);
			ТипСтрока = ТипСтрока = Истина;
			
			ДлинаСЛидирующимиНулями = Неопределено;
			СтруктураПараметров.Свойство("ДлинаСЛидирующимиНулями", ДлинаСЛидирующимиНулями);
			Если ТипЗнч(ДлинаСЛидирующимиНулями) <> Тип("Число")
				ИЛИ ДлинаСЛидирующимиНулями = 0 Тогда
				ДлинаСЛидирующимиНулями = Неопределено;
			КонецЕсли;
			
			Для ТекущееЧисло = ПервоеЧисло По ПоследнееЧисло Цикл
				
				Если ДлинаСЛидирующимиНулями <> Неопределено Тогда
					СтрокаФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"ЧЦ=%1;ЧГ=;ЧВН=", ДлинаСЛидирующимиНулями);
					ТекущееЗначение = Формат(ТекущееЧисло, СтрокаФормата);
				ИначеЕсли ТипСтрока Тогда
					ТекущееЗначение = Формат(ТекущееЧисло, "ЧГ=");
				Иначе
					ТекущееЗначение = ТекущееЧисло;
				КонецЕсли;
				
				Если ПоУбыванию Тогда
					МассивЧисел.Вставить(0, ТекущееЗначение);
				Иначе
					МассивЧисел.Добавить(ТекущееЗначение);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивЧисел;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	Иначе
		НомПозПодчеркивания = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы + 1;
		Если НЕ (СтрДлина(ИмяОбласти) > НомПозПодчеркивания
			И Сред(ИмяОбласти, НомПозПодчеркивания, 1) = "_") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Подстрока = "строку";
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяРаздела)
	
	Перем Индекс, ИндексСтр;
	
	АвтоРасчПоказатели = Новый Массив;
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ОблНаимОрг       = Форма.ТабличныйДокумент.Области.НаимОрг;
		ОблКодФормыРеорг = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОблКодИННРеорг   = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОблКодКППРеорг   = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		
		ЗначПоМесту = СокрЛП(Форма.ТабличныйДокумент.Области.ПоМесту.Значение);
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			
			РазрешитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			
			ЗначКодФормыРеорг = СокрЛП(ОблКодФормыРеорг.Значение);
			
			Если ЗначениеЗаполнено(ЗначКодФормыРеорг)
				И ЗначКодФормыРеорг <> "0" Тогда
				
				Если ЗначПоМесту = "215" ИЛИ ЗначПоМесту = "216" Тогда
					РазрешитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Иначе
					ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
					Форма.ТабличныйДокумент.Области.НаимОрг.Значение
					= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				КонецЕсли;
				
				РазрешитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				РазрешитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			Иначе
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблНаимОрг);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение
				= Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
				
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
				ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
				
			КонецЕсли;
			
		Иначе
			
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодФормыРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодИННРеорг);
			ЗапретитьВводДанныхВОбласть(Форма, ОблКодКППРеорг);
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Приложение2"
		ИЛИ ИмяРаздела = "Приложение5"
		ИЛИ ИмяРаздела = "Приложение612_613"
		ИЛИ ИмяРаздела = "Приложение614" Тогда
		
		СтруктЗависимыхЯчеек = Форма.СтруктураЗависимыхЯчеекДляАвторасчета[ИмяРаздела];
		Для каждого Пок Из СтруктЗависимыхЯчеек Цикл
			АвтоРасчПоказатели.Добавить(Пок.Ключ);
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		КодВидаПТ = СокрЛП(Форма.ТабличныйДокумент.Области["П001010001003"].Значение);
		
		КодыВидаПТ_НедоступностьГр5 = Новый Массив;
		КодыВидаПТ_НедоступностьГр5.Добавить("232");
		КодыВидаПТ_НедоступностьГр5.Добавить("271");
		КодыВидаПТ_НедоступностьГр5.Добавить("272");
		КодыВидаПТ_НедоступностьГр5.Добавить("284");
		КодыВидаПТ_НедоступностьГр5.Добавить("285");
		КодыВидаПТ_НедоступностьГр5.Добавить("310");
		КодыВидаПТ_НедоступностьГр5.Добавить("320");
		КодыВидаПТ_НедоступностьГр5.Добавить("330");
		
		НедоступностьГр5 = КодыВидаПТ_НедоступностьГр5.Найти(КодВидаПТ) <> Неопределено;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Обл = Форма.ТабличныйДокумент.Области.Найти("П00101М100005_" + ИндексСтр);
		Пока Обл <> Неопределено Цикл
			Если НедоступностьГр5 Тогда
				ЗапретитьВводДанныхВОбласть(Форма, Обл);
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, Обл);
			КонецЕсли;
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			Обл = Форма.ТабличныйДокумент.Области.Найти("П00101М100005_" + ИндексСтр);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ИмяПок Из АвтоРасчПоказатели Цикл
		Если СтрДлина(ИмяПок) = Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы И Сред(ИмяПок, 7, 1) = "М" Тогда
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок + "_" + ИндексСтр);
			Пока Обл <> Неопределено Цикл
				Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
					Обл.Защита = Ложь;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
				Иначе
					Обл.Защита = Истина;
					Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
				КонецЕсли;
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти(ИмяПок + "_" + ИндексСтр);
			КонецЦикла;
		Иначе
			Обл = Форма.ТабличныйДокумент.Область(ИмяПок);
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ОбрабатываемаяОбласть.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если МногострочнаяЧастьТекущейОбласти(ЭтаФорма, ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[
		ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		ДеревоДанныхРаздела = Неопределено;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Приложение1"
		ИЛИ ИмяРаздела = "Приложение2"
		ИЛИ ИмяРаздела = "Приложение3"
		ИЛИ ИмяРаздела = "Приложение4"
		ИЛИ ИмяРаздела = "Приложение5"
		ИЛИ ИмяРаздела = "Приложение6" Тогда
		ДобавитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(Отчеты[Сред(
	Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	// Особая обработка значения показателя "Код показателя" (подраздел 2.4 раздела 2).
	Если ИмяРаздела = "Раздел2" Тогда
		ТабличныйДокумент.Область("П000240000001").Значение = "40001";
	КонецЕсли;
	
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	ДеревоРаздела = Неопределено;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Приложение1"
		ИЛИ ИмяРаздела = "Приложение2"
		ИЛИ ИмяРаздела = "Приложение3"
		ИЛИ ИмяРаздела = "Приложение4"
		ИЛИ ИмяРаздела = "Приложение5"
		ИЛИ ИмяРаздела = "Приложение6" Тогда
		УдалитьСтраницуУровня0(ИмяРаздела);
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуУровня0(ИмяРаздела)
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
	НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
	= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	ДеревоДанных = Неопределено;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
		Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НачПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		КонецЕсли;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ВремТаблДок.Области.Найти("УдалитьСтроку" + НовПостфикс);
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Если НовИндекс_Число = 2 Тогда
					Если Обл <> Неопределено Тогда
						Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
						Обл.Гиперссылка = Истина;
						Обл.Текст = "х";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		КонецЕсли;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Если Обл <> Неопределено Тогда
			Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		КонецЕсли;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОблПреемник_ = ТабличныйДокумент.Область(
			ОблПреемник.Верх, , ОблПреемник.Верх + ИскомаяОбласть.Низ - ИскомаяОбласть.Верх, );
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник_, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблПервУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
	ОблУдалитьСтроку = ТабличныйДокумент.Область("УдалитьСтроку" + ИмяГруппы + ТекКоординаты + ТекИндекс);
	СмещениеОтВерхаМнЧ = ОблПервУдаляемогоПоказателя.Верх - ОблУдалитьСтроку.Верх;
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблПервУдаляемогоПоказателя.Верх - СмещениеОтВерхаМнЧ;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - СмещениеОтВерхаМнЧ - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			Если ЭлемСписка.Представление = ИмяГруппы Тогда
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх - СмещениеОтВерхаМнЧ;
			Иначе
				ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			КонецЕсли;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока, Индекс, ИндексСтр, ИндексПодч, ИндексПодчСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				// Расчет в подразделе 2.4.
				//
				КодыОперацийДляСуммирования = Новый Массив;
				КодыОперацийДляСуммирования.Добавить("20003");
				КодыОперацийДляСуммирования.Добавить("20004");
				КодыОперацийДляСуммирования.Добавить("20005");
				КодыОперацийДляСуммирования.Добавить("20007");
				КодыОперацийДляСуммирования.Добавить("20009");
				КодыОперацийДляСуммирования.Добавить("20011");
				КодыОперацийДляСуммирования.Добавить("20013");
				КодыОперацийДляСуммирования.Добавить("20015");
				
				Сумма = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00021М100004_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00021М100004_" + ИндексСтр);
				КонецЦикла;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00022М100004_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.Найти("П00022М100001_" + ИндексСтр).Значение);
					Если КодыОперацийДляСуммирования.Найти(КодОперации) <> Неопределено Тогда
						Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
					КонецЕсли;
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00022М100004_" + ИндексСтр);
				КонецЦикла;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00023М100003_" + ИндексСтр);
				Пока Обл <> Неопределено Цикл
					Сумма = Сумма - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Обл.Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00023М100003_" + ИндексСтр);
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области["П000240000001"].Значение = ?(Сумма >= 0, "40001", "40002");
				Форма.ТабличныйДокумент.Области["П000240000002"].Значение = ?(Сумма >= 0, Сумма, - Сумма);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СуммаСтр055 = 0;
				
				// Расчет в строках 100.
				//
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				ОблСтр100 = Форма.ТабличныйДокумент.Области.Найти("П00102М110000_" + ИндексСтр);
				
				Пока ОблСтр100 <> Неопределено Цикл
					
					СуммаСтр100 = 0;
					
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексПодч, ИндексПодчСтр);
					ОблСтр070 = Форма.ТабличныйДокумент.Области.Найти("П00102М207005_" + ИндексСтр + "_" + ИндексПодчСтр);
					Пока ОблСтр070 <> Неопределено Цикл
						СуммаСтр100 = СуммаСтр100
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОблСтр070.Значение);
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексПодч, ИндексПодчСтр);
						ОблСтр070 = Форма.ТабличныйДокумент.Области.Найти("П00102М207005_" + ИндексСтр + "_" + ИндексПодчСтр);
					КонецЦикла;
					
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексПодч, ИндексПодчСтр);
					ОблСтр080 = Форма.ТабличныйДокумент.Области.Найти("П00102М308005_" + ИндексСтр + "_" + ИндексПодчСтр);
					Пока ОблСтр080 <> Неопределено Цикл
						СуммаСтр100 = СуммаСтр100
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОблСтр080.Значение);
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексПодч, ИндексПодчСтр);
						ОблСтр080 = Форма.ТабличныйДокумент.Области.Найти("П00102М308005_" + ИндексСтр + "_" + ИндексПодчСтр);
					КонецЦикла;
					
					РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(ИндексПодч, ИндексПодчСтр);
					ОблСтр090 = Форма.ТабличныйДокумент.Области.Найти("П00102М409005_" + ИндексСтр + "_" + ИндексПодчСтр);
					Пока ОблСтр090 <> Неопределено Цикл
						СуммаСтр100 = СуммаСтр100
						- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, ОблСтр090.Значение);
						РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(ИндексПодч, ИндексПодчСтр);
						ОблСтр090 = Форма.ТабличныйДокумент.Области.Найти("П00102М409005_" + ИндексСтр + "_" + ИндексПодчСтр);
					КонецЦикла;
					
					ОблСтр100.Значение = СуммаСтр100;
					
					СуммаСтр055 = СуммаСтр055 + СуммаСтр100;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					ОблСтр100 = Форма.ТабличныйДокумент.Области.Найти("П00102М110000_" + ИндексСтр);
					
				КонецЦикла;
				
				// Расчет в строке 055.
				//
				Форма.ТабличныйДокумент.Области["П001020005503"].Значение = СуммаСтр055;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение5" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СуммаСтр060 = 0;
				СуммаСтр100 = 0;
				СуммаСтр110 = 0;
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00105М130003_" + ИндексСтр);
				
				Пока Обл <> Неопределено Цикл
					
					// Расчет в строке 300.
					//
					Форма.ТабличныйДокумент.Области["П00105М130003_" + ИндексСтр].Значение
					= Форма.ТабличныйДокумент.Области["П00105М130103_" + ИндексСтр].Значение
					+ Форма.ТабличныйДокумент.Области["П00105М130203_" + ИндексСтр].Значение
					+ Форма.ТабличныйДокумент.Области["П00105М130303_" + ИндексСтр].Значение;
					
					// Расчет в строке 310.
					//
					Форма.ТабличныйДокумент.Области["П00105М131003_" + ИндексСтр].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00105М131103_" + ИндексСтр].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00105М131203_" + ИндексСтр].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00105М131303_" + ИндексСтр].Значение);
					
					// Расчет в строке 320.
					//
					Форма.ТабличныйДокумент.Области["П00105М132003_" + ИндексСтр].Значение
					= Форма.ТабличныйДокумент.Области["П00105М120003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00105М121003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00105М123003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00105М124003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00105М127003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00105М129003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00105М130003_" + ИндексСтр].Значение;
					
					СуммаСтр060 = СуммаСтр060 + Форма.ТабличныйДокумент.Области["П00105М120003_" + ИндексСтр].Значение;
					
					СуммаСтр100 = СуммаСтр100 + Форма.ТабличныйДокумент.Области["П00105М132003_" + ИндексСтр].Значение;
					
					СуммаСтр110 = СуммаСтр110 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00105М133003_" + ИндексСтр].Значение);
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00105М130003_" + ИндексСтр);
					
				КонецЦикла;
				
				// Расчет в строке 060.
				//
				Форма.ТабличныйДокумент.Области["П001050006003"].Значение = СуммаСтр060;
				
				// Расчет в строке 100.
				//
				Форма.ТабличныйДокумент.Области["П001050010003"].Значение = СуммаСтр100;
				
				// Расчет в строке 110.
				//
				Форма.ТабличныйДокумент.Области["П001050011003"].Значение = СуммаСтр110;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение612_613" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				СуммыСтр230ПоКодамВидаПТ = Новый Структура;
				
				// Расчет в строке 320.
				//
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М132003_" + ИндексСтр);
				
				Пока Обл <> Неопределено Цикл
					
					Форма.ТабличныйДокумент.Области["П00106М132003_" + ИндексСтр].Значение
					= Форма.ТабличныйДокумент.Области["П00106М122003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М125003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М126003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М127003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М128003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М129003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М130003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М131003_" + ИндексСтр].Значение;
					
					КодВидаПТСтр210 = СокрЛП(Форма.ТабличныйДокумент.Области["П00106М121003_" + ИндексСтр].Значение);
					
					СуммаСтр230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М123003_" + ИндексСтр].Значение);
					
					Если ЗначениеЗаполнено(КодВидаПТСтр210) Тогда
						Если СуммыСтр230ПоКодамВидаПТ.Свойство("_" + КодВидаПТСтр210) Тогда
							СуммаСтр230 = СуммаСтр230 + СуммыСтр230ПоКодамВидаПТ["_" + КодВидаПТСтр210];
						КонецЕсли;
						СуммыСтр230ПоКодамВидаПТ.Вставить("_" + КодВидаПТСтр210, СуммаСтр230);
					КонецЕсли;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М132003_" + ИндексСтр);
					
				КонецЦикла;
				
				// Расчет в строке 370.
				//
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М237003_" + ИндексСтр);
				
				Пока Обл <> Неопределено Цикл
					
					КодВидаПТСтр325 = СокрЛП(Форма.ТабличныйДокумент.Области["П00106М232503_" + ИндексСтр].Значение);
					
					СуммаСтр230ПоКодуВидаПТСтр325 = ?(СуммыСтр230ПоКодамВидаПТ.Свойство("_" + КодВидаПТСтр325),
					СуммыСтр230ПоКодамВидаПТ["_" + КодВидаПТСтр325], 0);
					
					Форма.ТабличныйДокумент.Области["П00106М237003_" + ИндексСтр].Значение = СуммаСтр230ПоКодуВидаПТСтр325
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М233003_" + ИндексСтр].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М234003_" + ИндексСтр].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М236003_" + ИндексСтр].Значение);
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М237003_" + ИндексСтр);
					
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение614" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М346003_" + ИндексСтр);
				
				Пока Обл <> Неопределено Цикл
					
					// Расчет в строке 460.
					//
					Форма.ТабличныйДокумент.Области["П00106М346003_" + ИндексСтр].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М341503_" + ИндексСтр].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М342503_" + ИндексСтр].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М343503_" + ИндексСтр].Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М344503_" + ИндексСтр].Значение);
					
					// Расчет в строке 480.
					//
					Форма.ТабличныйДокумент.Области["П00106М348003_" + ИндексСтр].Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М340003_" + ИндексСтр].Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области["П00106М346003_" + ИндексСтр].Значение);
					
					// Расчет в строке 490.
					//
					Форма.ТабличныйДокумент.Области["П00106М349003_" + ИндексСтр].Значение
					= Форма.ТабличныйДокумент.Области["П00106М340503_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М341003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М342003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М343003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М344003_" + ИндексСтр].Значение
					- Форма.ТабличныйДокумент.Области["П00106М345003_" + ИндексСтр].Значение;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					Обл = Форма.ТабличныйДокумент.Области.Найти("П00106М346003_" + ИндексСтр);
					
				КонецЦикла;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Для каждого Раздел Из Форма.СтруктураЗависимыхЯчеекДляАвторасчета Цикл
			Расчет(Форма, Раздел.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	ДеревоДанных = Неопределено;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		КодыОперацийДляСуммирования = Новый Массив;
		КодыОперацийДляСуммирования.Добавить("20003");
		КодыОперацийДляСуммирования.Добавить("20004");
		КодыОперацийДляСуммирования.Добавить("20005");
		КодыОперацийДляСуммирования.Добавить("20007");
		КодыОперацийДляСуммирования.Добавить("20009");
		КодыОперацийДляСуммирования.Добавить("20011");
		КодыОперацийДляСуммирования.Добавить("20013");
		КодыОперацийДляСуммирования.Добавить("20015");
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧР21М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР21М1;
		СтруктураГруппыМнЧР21М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР21М1];
		ИменаГрафМнЧР21М1 = СтруктураГруппыМнЧР21М1["ИменаГраф"];
		
		ИмяГруппыМнЧР22М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР22М1;
		СтруктураГруппыМнЧР22М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР22М1];
		ИменаГрафМнЧР22М1 = СтруктураГруппыМнЧР22М1["ИменаГраф"];
		
		ИмяГруппыМнЧР23М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыР23М1;
		СтруктураГруппыМнЧР23М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧР23М1];
		ИменаГрафМнЧР23М1 = СтруктураГруппыМнЧР23М1["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧР21М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР21М1];
			ДеревоМнЧР22М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР22М1];
			ДеревоМнЧР23М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧР23М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР21М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР21М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР22М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР22М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР23М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР23М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			// Расчет в подразделе 2.4.
			//
			Сумма = 0;
			Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
				Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, СтрокаМнЧ.Данные["П00021М100004"]);
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
				КодОперации = СокрЛП(СтрокаМнЧ.Данные["П00022М100001"]);
				Если КодыОперацийДляСуммирования.Найти(КодОперации) <> Неопределено Тогда
					Сумма = Сумма + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, СтрокаМнЧ.Данные["П00022М100004"]);
				КонецЕсли;
			КонецЦикла;
			Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
				Сумма = Сумма - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
				Форма, СтрокаМнЧ.Данные["П00023М100003"]);
			КонецЦикла;
			Ветка.Данные.Вставить("П000240000001", ?(Сумма >= 0, "40001", "40002"));
			Ветка.Данные.Вставить("П000240000002", ?(Сумма >= 0, Сумма, - Сумма));
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР21М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР21М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР21М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР22М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР22М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР22М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧР23М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧР23М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧР23М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение2" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП2М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М1;
		СтруктураГруппыМнЧП2М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М1];
		ИменаГрафМнЧП2М1 = СтруктураГруппыМнЧП2М1["ИменаГраф"];
		
		ИмяГруппыМнЧП2М2 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М2;
		СтруктураГруппыМнЧП2М2 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М2];
		ИменаГрафМнЧП2М2 = СтруктураГруппыМнЧП2М2["ИменаГраф"];
		
		ИмяГруппыМнЧП2М3 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М3;
		СтруктураГруппыМнЧП2М3 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М3];
		ИменаГрафМнЧП2М3 = СтруктураГруппыМнЧП2М3["ИменаГраф"];
		
		ИмяГруппыМнЧП2М4 = Форма.СтруктураРеквизитовФормы.мИдГруппыП2М4;
		СтруктураГруппыМнЧП2М4 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП2М4];
		ИменаГрафМнЧП2М4 = СтруктураГруппыМнЧП2М4["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧП2М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М1];
			
			Если Ветка = АктивнаяВетка Тогда
				
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
					
					ИндСтроки = Формат(ДеревоМнЧП2М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
					
					ДеревоМнЧП2М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М2.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М2.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М2 Цикл
							СтрокаПодчМнЧ.Данные.Вставить(ИмяГрафы,
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М3 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М3];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М3.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М3.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М3 Цикл
							СтрокаПодчМнЧ.Данные.Вставить(ИмяГрафы,
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М4 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М4];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М4.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М4.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М4 Цикл
							СтрокаПодчМнЧ.Данные.Вставить(ИмяГрафы,
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение);
						КонецЦикла;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СуммаСтр055 = 0;
			
			// Расчет в строках 100.
			//
			Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
				
				СуммаСтр100 = 0;
				
				ДеревоМнЧП2М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
				Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М2.Строки Цикл
					СуммаСтр100 = СуммаСтр100 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, СтрокаПодчМнЧ.Данные["П00102М207005"]);
				КонецЦикла;
				ДеревоМнЧП2М3 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М3];
				Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М3.Строки Цикл
					СуммаСтр100 = СуммаСтр100 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, СтрокаПодчМнЧ.Данные["П00102М308005"]);
				КонецЦикла;
				ДеревоМнЧП2М4 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М4];
				Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М4.Строки Цикл
					СуммаСтр100 = СуммаСтр100 - РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, СтрокаПодчМнЧ.Данные["П00102М409005"]);
				КонецЦикла;
				
				СтрокаМнЧ.Данные.Вставить("П00102М110000", СуммаСтр100);
				
				СуммаСтр055 = СуммаСтр055 + СуммаСтр100;
				
			КонецЦикла;
			
			// Расчет в строке 055.
			//
			Ветка.Данные.Вставить("П001020005503", СуммаСтр055);
			
			Если Ветка = АктивнаяВетка Тогда
				
				Для каждого Пок Из Ветка.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				
				Для каждого СтрокаМнЧ Из ДеревоМнЧП2М1.Строки Цикл
					
					ИндСтроки = Формат(ДеревоМнЧП2М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП2М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
					
					ДеревоМнЧП2М2 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М2];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М2.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М2.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М2 Цикл
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение
							= СтрокаПодчМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М3 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М3];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М3.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М3.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М3 Цикл
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение
							= СтрокаПодчМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
					ДеревоМнЧП2М4 = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП2М4];
					Для каждого СтрокаПодчМнЧ Из ДеревоМнЧП2М4.Строки Цикл
						ИндПодчСтроки = Формат(ДеревоМнЧП2М4.Строки.Индекс(СтрокаПодчМнЧ) + 1, "ЧГ=");
						Для каждого ИмяГрафы Из ИменаГрафМнЧП2М4 Цикл
							Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки + "_" + ИндПодчСтроки].Значение
							= СтрокаПодчМнЧ.Данные[ИмяГрафы];
						КонецЦикла;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение5" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП512М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП512М1;
		СтруктураГруппыМнЧП512М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП512М1];
		ИменаГрафМнЧП512М1 = СтруктураГруппыМнЧП512М1["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			ДеревоМнЧП512М1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП512М1];
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Ветка.Данные.Вставить(Пок.Ключ, Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение);
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП512М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП512М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП512М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			СуммаСтр060 = 0;
			СуммаСтр100 = 0;
			СуммаСтр110 = 0;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧП512М1.Строки Цикл
				
				// Расчет в строке 300.
				//
				СтрокаМнЧ.Данные.Вставить("П00105М130003",
				СтрокаМнЧ.Данные["П00105М130103"] + СтрокаМнЧ.Данные["П00105М130203"] + СтрокаМнЧ.Данные["П00105М130303"]);
				
				// Расчет в строке 310.
				//
				СтрокаМнЧ.Данные.Вставить("П00105М131003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00105М131103"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00105М131203"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00105М131303"]));
				
				// Расчет в строке 320.
				//
				СтрокаМнЧ.Данные.Вставить("П00105М132003", СтрокаМнЧ.Данные["П00105М120003"]
				- СтрокаМнЧ.Данные["П00105М121003"] - СтрокаМнЧ.Данные["П00105М123003"] - СтрокаМнЧ.Данные["П00105М124003"]
				- СтрокаМнЧ.Данные["П00105М127003"] - СтрокаМнЧ.Данные["П00105М129003"] - СтрокаМнЧ.Данные["П00105М130003"]);
				
				СуммаСтр060 = СуммаСтр060 + СтрокаМнЧ.Данные["П00105М120003"];
				
				СуммаСтр100 = СуммаСтр100 + СтрокаМнЧ.Данные["П00105М132003"];
				
				СуммаСтр110 = СуммаСтр110 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
				СтрокаМнЧ.Данные["П00105М133003"]);
				
			КонецЦикла;
			
			// Расчет в строке 060.
			//
			Ветка.Данные.Вставить("П001050006003", СуммаСтр060);
			
			// Расчет в строке 100.
			//
			Ветка.Данные.Вставить("П001050010003", СуммаСтр100);
			
			// Расчет в строке 110.
			//
			Ветка.Данные.Вставить("П001050011003", СуммаСтр110);
			
			Если Ветка = АктивнаяВетка Тогда
				Для каждого Пок Из Ветка.Данные Цикл
					Форма.ТабличныйДокумент.Области[Пок.Ключ].Значение = Пок.Значение;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП512М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП512М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП512М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение612_613" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка612_613 = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка612_613 = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП612М1 = Форма.СтруктураРеквизитовФормы.мИдГруппыП612М1;
		СтруктураГруппыМнЧП612М1 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП612М1];
		ИменаГрафМнЧП612М1 = СтруктураГруппыМнЧП612М1["ИменаГраф"];
		
		ИмяГруппыМнЧП613М2 = Форма.СтруктураРеквизитовФормы.мИдГруппыП613М2;
		СтруктураГруппыМнЧП613М2 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП613М2];
		ИменаГрафМнЧП613М2 = СтруктураГруппыМнЧП613М2["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Ветка612_613 = Ветка.Строки[0].Строки[0];
			
			ДеревоМнЧП612М1 = Ветка612_613.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП612М1];
			ДеревоМнЧП613М2 = Ветка612_613.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП613М2];
			
			Если Ветка612_613 = АктивнаяВетка612_613 Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧП612М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП612М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП612М1 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП613М2.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП613М2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП613М2 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			СуммыСтр230ПоКодамВидаПТ = Новый Структура;
			
			// Расчет в строке 320.
			//
			Для каждого СтрокаМнЧ Из ДеревоМнЧП612М1.Строки Цикл
				
				СтрокаМнЧ.Данные.Вставить("П00106М132003", СтрокаМнЧ.Данные["П00106М122003"] - СтрокаМнЧ.Данные["П00106М125003"]
				- СтрокаМнЧ.Данные["П00106М126003"] - СтрокаМнЧ.Данные["П00106М127003"] - СтрокаМнЧ.Данные["П00106М128003"]
				- СтрокаМнЧ.Данные["П00106М129003"] - СтрокаМнЧ.Данные["П00106М130003"] - СтрокаМнЧ.Данные["П00106М131003"]);
				
				КодВидаПТСтр210 = СокрЛП(СтрокаМнЧ.Данные["П00106М121003"]);
				
				СуммаСтр230 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
				СтрокаМнЧ.Данные["П00106М123003"]);
				
				Если ЗначениеЗаполнено(КодВидаПТСтр210) Тогда
					Если СуммыСтр230ПоКодамВидаПТ.Свойство("_" + КодВидаПТСтр210) Тогда
						СуммаСтр230 = СуммаСтр230 + СуммыСтр230ПоКодамВидаПТ["_" + КодВидаПТСтр210];
					КонецЕсли;
					СуммыСтр230ПоКодамВидаПТ.Вставить("_" + КодВидаПТСтр210, СуммаСтр230);
				КонецЕсли;
				
			КонецЦикла;
			
			// Расчет в строке 370.
			//
			Для каждого СтрокаМнЧ Из ДеревоМнЧП613М2.Строки Цикл
				
				КодВидаПТСтр325 = СокрЛП(СтрокаМнЧ.Данные["П00106М232503"]);
				
				СуммаСтр230ПоКодуВидаПТСтр325 = ?(СуммыСтр230ПоКодамВидаПТ.Свойство("_" + КодВидаПТСтр325),
				СуммыСтр230ПоКодамВидаПТ["_" + КодВидаПТСтр325], 0);
				
				СтрокаМнЧ.Данные.Вставить("П00106М237003", СуммаСтр230ПоКодуВидаПТСтр325
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М233003"])
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М234003"])
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М236003"]));
				
			КонецЦикла;
			
			Если Ветка612_613 = АктивнаяВетка612_613 Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧП612М1.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП612М1.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП612М1 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
				Для каждого СтрокаМнЧ Из ДеревоМнЧП613М2.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП613М2.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП613М2 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяРаздела = "Приложение614" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		АктивнаяВетка614 = Неопределено;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка614 = ДеревоДанных.Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		ИмяГруппыМнЧП614М3 = Форма.СтруктураРеквизитовФормы.мИдГруппыП614М3;
		СтруктураГруппыМнЧП614М3 = Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧП614М3];
		ИменаГрафМнЧП614М3 = СтруктураГруппыМнЧП614М3["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанных.Строки Цикл
			
			Ветка614 = Ветка.Строки[1].Строки[0];
			
			ДеревоМнЧП614М3 = Ветка614.ДанныеМногострочныхЧастей[ИмяГруппыМнЧП614М3];
			
			Если Ветка614 = АктивнаяВетка614 Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧП614М3.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП614М3.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП614М3 Цикл
						СтрокаМнЧ.Данные.Вставить(ИмяГрафы, Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаМнЧ Из ДеревоМнЧП614М3.Строки Цикл
				
				// Расчет в строке 460.
				//
				СтрокаМнЧ.Данные.Вставить("П00106М346003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М341503"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М342503"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М343503"])
				+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М344503"]));
				
				// Расчет в строке 480.
				//
				СтрокаМнЧ.Данные.Вставить("П00106М348003",
				РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М340003"])
				- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, СтрокаМнЧ.Данные["П00106М346003"]));
				
				// Расчет в строке 490.
				//
				СтрокаМнЧ.Данные.Вставить("П00106М349003",
				СтрокаМнЧ.Данные["П00106М340503"] - СтрокаМнЧ.Данные["П00106М341003"] - СтрокаМнЧ.Данные["П00106М342003"]
				- СтрокаМнЧ.Данные["П00106М343003"] - СтрокаМнЧ.Данные["П00106М344003"] - СтрокаМнЧ.Данные["П00106М345003"]);
				
			КонецЦикла;
			
			Если Ветка614 = АктивнаяВетка614 Тогда
				Для каждого СтрокаМнЧ Из ДеревоМнЧП614М3.Строки Цикл
					ИндСтроки = Формат(ДеревоМнЧП614М3.Строки.Индекс(СтрокаМнЧ) + 1, "ЧГ=");
					Для каждого ИмяГрафы Из ИменаГрафМнЧП614М3 Цикл
						Форма.ТабличныйДокумент.Области[ИмяГрафы + "_" + ИндСтроки].Значение = СтрокаМнЧ.Данные[ИмяГрафы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДеревоДанных <> Неопределено Тогда
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	Структ = Новый Структура;
	Структ.Вставить("П00106М346003");
	Структ.Вставить("П00106М348003");
	Структ.Вставить("П00106М349003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение614", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П00106М132003");
	Структ.Вставить("П00106М237003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение612_613", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П001050006003");
	Структ.Вставить("П001050010003");
	Структ.Вставить("П001050011003");
	Структ.Вставить("П00105М130003");
	Структ.Вставить("П00105М131003");
	Структ.Вставить("П00105М132003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение5", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П001020005503");
	Структ.Вставить("П00102М110000");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Приложение2", Структ);
	
	Структ = Новый Структура;
	Структ.Вставить("П000240000001");
	Структ.Вставить("П000240000002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("Раздел2", Структ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставленияИЗагрузкаОтчетаИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгр = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгр, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
		РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ПараметрыВыгрузки.Вставить("ЭтоИП", СтруктураРеквизитовФормы.ИП);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период",   СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО",    СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр",  Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",  СокрЛП(Титульный.ПоМесту));
	
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
	СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "АкцСпиртАлк");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, "NO_AKCALK"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("331");
	
	ВозможныеКодыПериода = Новый Массив;
	Для Инд = 1 По 12 Цикл
		ВозможныеКодыПериода.Добавить(Формат(Инд, "ЧЦ=2;ЧВН="));
	КонецЦикла;
	
	ВозможныеКодыПериодаРеорг = Новый Массив;
	Для Инд = 71 По 82 Цикл
		ВозможныеКодыПериодаРеорг.Добавить(Формат(Инд, "ЧГ="));
	КонецЦикла;
	
	ВозможныеКодыФормыРеорганизции = Новый Массив;
	ВозможныеКодыФормыРеорганизции.Добавить("0");
	ВозможныеКодыФормыРеорганизции.Добавить("1");
	ВозможныеКодыФормыРеорганизции.Добавить("2");
	ВозможныеКодыФормыРеорганизции.Добавить("3");
	ВозможныеКодыФормыРеорганизции.Добавить("5");
	ВозможныеКодыФормыРеорганизции.Добавить("6");
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 12 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 12 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС("Не задана фамилия налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС("Не задано имя налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			СообщитьВТС("Не задан ИНН налогоплательщика", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			СообщитьВТС("Задан ИНН налогоплательщика, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС("Не задан КПП налогоплательщика", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС("Задан КПП налогоплательщика, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС("Не задано наименование налогоплательщика", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		СообщитьВТС("Не задан код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено
		И ВозможныеКодыПериодаРеорг.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код налогового периода", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС("Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС("Задан код налогового органа, не состоящий из 4 цифр", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("Не задан код места представления налоговой декларации", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("Задан некорректный код места представления налоговой декларации", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ПараметрыВыгрузки.ПоМесту = "213" Тогда
		Символы56КПП = Сред(ПараметрыВыгрузки.КПП, 5, 2);
		Если Символы56КПП <> "50" Тогда
			СообщитьВТС("Если код места представления декларации равен 213, 5-й и 6-й символы КПП организации должны быть равны 50", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" ИЛИ (НЕ ПараметрыВыгрузки.ЭтоИП И ПараметрыВыгрузки.ПрПодп = "1") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
			СообщитьВТС("Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
			СообщитьВТС("Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС("Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации",
			"Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
				СообщитьВТС("Задано некорректное значение кода формы реорганизации",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10 Тогда
					СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно")
					+ " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно")
					+ " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	НомСтраницы = "1";
	Если ЗаполненРаздел(ДеревоРаздела, "Раздел1") Тогда
		
		ВозмКодыР1Стр030 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00001М203000");
		
		Ветка = ДеревоРаздела.Строки[0];
		
		ДлинаЗначПок = СтрДлина(СокрЛП(Ветка.Данные.П000010001003));
		Если ДлинаЗначПок <> 8 И ДлинаЗначПок <> 11 Тогда
			СообщитьВТС("В разделе 1 не" + ?(ДлинаЗначПок = 0, "", "верно") + " задан код по ОКТМО",
			"Раздел1", "П000010001003", НомСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
		
		Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
			
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
				НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
				
				ДлинаЗначПок = СтрДлина(СокрЛП(СтрокаМнЧ.Данные["П00001М102000"]));
				Если ДлинаЗначПок <> 20 Тогда
					СообщитьВТС("Строка " + НомСтроки + " раздела 1: не" + ?(ДлинаЗначПок = 0, "", "верно")
					+ " задан код бюджетной классификации", "Раздел1", "П00001М102000_" + НомСтроки, НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
				КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
				
				Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
					Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
						ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
						НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
						
						Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1, "", "в строке " + НомСтрокиПодчМнЧ + " группы строк 030-040 ");
						
						ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00001М203000"]);
						Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
							СообщитьВТС("Строка " + НомСтроки + " раздела 1: " + Текст_СтрокаГруппыСтрок + "не задан код срока уплаты",
							"Раздел1", "П00001М203000_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
							СтатусПроверки = Ложь;
						ИначеЕсли ВозмКодыР1Стр030.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
							СообщитьВТС("Строка " + НомСтроки + " раздела 1: " + Текст_СтрокаГруппыСтрок
							+ "код срока уплаты должен принимать одно из значений: " + ВозмКодыР1Стр030.СтрокаЗначений,
							"Раздел1", "П00001М203000_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			СообщитьВТС("В разделе 1 не заполнены строки 020-060", "Раздел1", "П00001М102000_1", НомСтраницы);
			СтатусПроверки = Ложь;
			
		КонецЕсли;
		
	Иначе
		СообщитьВТС("Не заполнен раздел 1", "Раздел1", "П000010001003", НомСтраницы);
		СтатусПроверки = Ложь;
		
	КонецЕсли;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	
	ВозмКодыР21Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00021М100001");
	ВозмКодыР21Гр2 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00021М100002");
	
	ВозмКодыР22Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00022М100001");
	ВозмКодыР22Гр2 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00022М100002");
	
	ВозмКодыР23Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00023М100001");
	
	ВозмКодыР24Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П000240000001");
	
	ВозмКодыР241Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00241М100001");
	
	ВозмКодыР25Гр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00025М100001");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Раздел2") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П000020001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": не задан код вида подакцизного товара", "Раздел2", "П000020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": задан код вида подакцизного товара, не состоящий из 3 цифр", "Раздел2", "П000020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Подраздел 2.1.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00021М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.1 не задан код показателя", "Раздел2", "П00021М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР21Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.1 код показателя должен принимать одно из значений: "
						+ ВозмКодыР21Гр1.СтрокаЗначений, "Раздел2", "П00021М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00021М100002"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.1 не задан признак применения ставки акциза",
						"Раздел2", "П00021М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР21Гр2.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.1 признак применения ставки акциза должен принимать одно из значений: "
						+ ВозмКодыР21Гр2.СтрокаЗначений, "Раздел2", "П00021М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.2.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00022М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.2 не задан код показателя", "Раздел2", "П00022М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР22Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.2 код показателя должен принимать одно из значений: "
						+ ВозмКодыР22Гр1.СтрокаЗначений, "Раздел2", "П00022М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00022М100002"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.2 не задан признак применения ставки акциза",
						"Раздел2", "П00022М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР22Гр2.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.2 признак применения ставки акциза должен принимать одно из значений: "
						+ ВозмКодыР22Гр2.СтрокаЗначений, "Раздел2", "П00022М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.3.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР23М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00023М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 не задан код показателя", "Раздел2", "П00023М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР23Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.3 код показателя должен принимать одно из значений: "
						+ ВозмКодыР23Гр1.СтрокаЗначений, "Раздел2", "П00023М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.4.
			ЗначПок = СокрЛП(Ветка.Данные["П000240000001"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в подразделе 2.4 не задан код показателя",
				"Раздел2", "П000240000001", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыР24Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы
				+ ": в подразделе 2.4 код показателя должен принимать одно из значений: " + ВозмКодыР24Гр1.СтрокаЗначений,
				"Раздел2", "П000240000001", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Подраздел 2.4.1.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР241М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00241М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.4.1 не задан код показателя", "Раздел2", "П00241М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР241Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.4.1 код показателя должен принимать одно из значений: "
						+ ВозмКодыР241Гр1.СтрокаЗначений, "Раздел2", "П00241М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// Подраздел 2.5.
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР25М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 не задан код показателя", "Раздел2", "П00025М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыР25Гр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 код показателя должен принимать одно из значений: "
						+ ВозмКодыР25Гр1.СтрокаЗначений, "Раздел2", "П00025М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100004"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 не задан код налогового периода", "Раздел2", "П00025М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозможныеКодыПериода.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 код налогового периода должен принимать одно из значений: "
						+ СтрСоединить(ВозможныеКодыПериода, ", "), "Раздел2", "П00025М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00025М100005"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 не задан год налогового периода", "Раздел2", "П00025М100005_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " подраздела 2.5 задан год налогового периода, не состоящий из 4 цифр",
						"Раздел2", "П00025М100005_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение1"];
	
	ВозмКодыГр2 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00101М100002");
	
	КодыГр1_ОбязательностьГр6и7
	= СтрРазделить("50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,", ",", Ложь);
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение1") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001010001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
				+ ": не задан код вида подакцизного товара", "Приложение1", "П001010001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы
				+ ": задан код вида подакцизного товара, не состоящий из 3 цифр", "Приложение1", "П001010001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					КодПоказателя_Гр1 = СокрЛП(СтрокаМнЧ.Данные["П00101М100001"]);
					
					ЗначПок = КодПоказателя_Гр1;
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код показателя", "Приложение1", "П00101М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 5 Тогда
						СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задан код показателя, не состоящий из 5 цифр", "Приложение1", "П00101М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00101М100002"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан признак применения ставки акциза", "Приложение1", "П00101М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыГр2.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " признак применения ставки акциза должен принимать одно из значений: "
						+ ВозмКодыГр2.СтрокаЗначений, "Приложение1", "П00101М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00101М100006"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						Если КодыГр1_ОбязательностьГр6и7.Найти(КодПоказателя_Гр1) <> Неопределено Тогда
							СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
							+ " не задан код налогового периода", "Приложение1", "П00101М100006_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					ИначеЕсли ВозможныеКодыПериода.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " код налогового периода должен принимать одно из значений: "
						+ СтрСоединить(ВозможныеКодыПериода, ", "), "Приложение1", "П00101М100006_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00101М100007"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						Если КодыГр1_ОбязательностьГр6и7.Найти(КодПоказателя_Гр1) <> Неопределено Тогда
							СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
							+ " не задан год налогового периода", "Приложение1", "П00101М100007_" + НомСтроки, НомСтраницы);
							СтатусПроверки = Ложь;
						КонецЕсли;
					ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
						СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задан год налогового периода, не состоящий из 4 цифр",
						"Приложение1", "П00101М100007_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				СообщитьВТС("Приложение 1 -> Страница " + НомСтраницы + ": не заполнены строки расчета налоговой базы",
				"Приложение1", "П00101М100001_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение2"];
	
	ВозмКодыСтр001 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001020000103");
	ВозмКодыСтр070 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00102М207003");
	ВозмКодыСтр080 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00102М308003");
	ВозмКодыСтр090 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00102М409003");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение2") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001020000103"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": не задан признак документа",
				"Приложение2", "П001020000103", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыСтр001.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": признак документа должен принимать одно из значений: "
				+ ВозмКодыСтр001.СтрокаЗначений, "Приложение2", "П001020000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001020001003"])) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задан номер банковской гарантии (договора поручительства)", "Приложение2", "П001020001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001020002003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата выдачи банковской гарантии (дата заключения договора поручительства)",
				"Приложение2", "П001020002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001020003003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата начала срока действия банковской гарантии (договора поручительства)",
				"Приложение2", "П001020003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001020004003"]) Тогда
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не задана дата окончания срока действия банковской гарантии (договора поручительства)",
				"Приложение2", "П001020004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00102М106000"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код вида подакцизного товара", "Приложение2", "П00102М106000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задан код вида подакцизного товара, не состоящий из 3 цифр",
						"Приложение2", "П00102М106000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М2];
					КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
					
					Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
							ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
							НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
							
							Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
							"Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
							"Приложение 2 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки + ": в " + НомСтрокиПодчМнЧ
							+ "-й строке группы ""Сумма акциза, освобожденная от уплаты в связи с представлением банковской гарантии (договора поручительства) при реализации подакцизного товара за пределы территории Российской Федерации (стр. 070)""");
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М207003"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код показателя",
								"Приложение2", "П00102М207003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозмКодыСтр070.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код показателя должен принимать одно из значений: "
								+ ВозмКодыСтр070.СтрокаЗначений,
								"Приложение2", "П00102М207003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М3];
					КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
					
					Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
							ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
							НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
							
							Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
							"Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
							"Приложение 2 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки + ": в " + НомСтрокиПодчМнЧ
							+ "-й строке группы ""Реализация подакцизных товаров, факт экспорта (реэкспорта) которых документально подтвержден в налоговом периоде (стр. 080)""");
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М308003"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код показателя",
								"Приложение2", "П00102М308003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозмКодыСтр080.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код показателя должен принимать одно из значений: "
								+ ВозмКодыСтр080.СтрокаЗначений,
								"Приложение2", "П00102М308003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М308006"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код налогового периода",
								"Приложение2", "П00102М308006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозможныеКодыПериода.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код налогового периода должен принимать одно из значений: "
								+ СтрСоединить(ВозможныеКодыПериода, ", "),
								"Приложение2", "П00102М308006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М308007"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан год налогового периода",
								"Приложение2", "П00102М308007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " задан год налогового периода, не состоящий из 4 цифр",
								"Приложение2", "П00102М308007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М4];
					КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
					
					Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
						Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
							ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
							НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
							
							Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
							"Приложение 2 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
							"Приложение 2 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки + ": в " + НомСтрокиПодчМнЧ
							+ "-й строке группы ""Реализация подакцизных товаров, факт экспорта (реэкспорта) которых документально подтвержден в предыдущих налоговых периодах (стр. 090)""");
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М409003"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код показателя",
								"Приложение2", "П00102М409003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозмКодыСтр090.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код показателя должен принимать одно из значений: "
								+ ВозмКодыСтр090.СтрокаЗначений,
								"Приложение2", "П00102М409003_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М409006"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан код налогового периода",
								"Приложение2", "П00102М409006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли ВозможныеКодыПериода.Найти(ЗначПок) = Неопределено Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " код налогового периода должен принимать одно из значений: "
								+ СтрСоединить(ВозможныеКодыПериода, ", "),
								"Приложение2", "П00102М409006_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							ЗначПок = СокрЛП(СтрокаПодчМнЧ.Данные["П00102М409007"]);
							Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан год налогового периода",
								"Приложение2", "П00102М409007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							ИначеЕсли СтрДлина(ЗначПок) <> 4 Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " задан год налогового периода, не состоящий из 4 цифр",
								"Приложение2", "П00102М409007_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				СообщитьВТС("Приложение 2 -> Страница " + НомСтраницы
				+ ": не заполнены ""Сведения о реализации подакцизных товаров за пределы территории РФ и документальном подтверждении факта экспорта (реэкспорта) подакцизных товаров""",
				"Приложение2", "П00102М106000_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение3"];
	
	Если ЗаполненРаздел(ДеревоРаздела, "Приложение3") Тогда
		
		ВозмКодыГр1 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00103М100001");
		
		Для каждого Ветка Из ДеревоРаздела.Строки Цикл
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не задан ИНН организации",
				"Приложение3", "П001030001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": задан ИНН организации, не состоящий из 10 цифр",
				"Приложение3", "П001030001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001030002003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не задан КПП организации",
				"Приложение3", "П001030002003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 9 Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": задан КПП организации, не состоящий из 9 символов",
				"Приложение3", "П001030002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001030003003"])) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не задан регистрационный номер извещения",
				"Приложение3", "П001030003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001030004003"]) Тогда
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не задана дата регистрации извещения",
				"Приложение3", "П001030004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП3М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00103М100001"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код показателя", "Приложение3", "П00103М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыГр1.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " код показателя должен принимать одно из значений: "
						+ ВозмКодыГр1.СтрокаЗначений, "Приложение3", "П00103М100001_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00103М100002"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код вида этилового спирта", "Приложение3", "П00103М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задан код вида этилового спирта, не состоящий из 3 цифр",
						"Приложение3", "П00103М100002_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00103М100004"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код вида подакцизного товара", "Приложение3", "П00103М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задан код вида подакцизного товара, не состоящий из 3 цифр",
						"Приложение3", "П00103М100004_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				СообщитьВТС("Приложение 3 -> Страница " + НомСтраницы + ": не заполнены сведения об объемах этилового спирта",
				"Приложение3", "П00103М100001_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 4.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение4"];
	
	ВозмКодыСтр001 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001040000103");
	ВозмКодыСтр040 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П00104М104000");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение4") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001040000103"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": не задан признак организации",
				"Приложение4", "П001040000103", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыСтр001.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": признак организации должен принимать одно из значений: "
				+ ВозмКодыСтр001.СтрокаЗначений, "Приложение4", "П001040000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001040001003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": не задан ИНН",
				"Приложение4", "П001040001003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": задан ИНН, не состоящий из 10 цифр",
				"Приложение4", "П001040001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001040002003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": не задан КПП",
				"Приложение4", "П001040002003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 9 Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": задан КПП, не состоящий из 9 символов",
				"Приложение4", "П001040002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001040003003"])) Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы
				+ ": не задана серия свидетельства", "Приложение4", "П001040003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001040003004"])) Тогда
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы
				+ ": не задан номер свидетельства", "Приложение4", "П001040003004", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00104М104000"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код вида денатурированного этилового спирта",
						"Приложение4", "П00104М104000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли ВозмКодыСтр040.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
						СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " код вида денатурированного этилового спирта должен принимать одно из значений: "
						+ ВозмКодыСтр040.СтрокаЗначений, "Приложение4", "П00104М104000_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М2];
					КолСтрокПодчМнЧ = ДанныеПодчМнЧ.Строки.Количество();
					
					Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
						Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
							ИндСтрокиПодчМнЧ = ДанныеПодчМнЧ.Строки.Индекс(СтрокаПодчМнЧ);
							НомСтрокиПодчМнЧ = Формат(ИндСтрокиПодчМнЧ + 1, "ЧГ=");
							
							Текст_СтрокаГруппыСтрок = ?(КолСтрокПодчМнЧ = 1,
							"Приложение 4 -> Страница " + НомСтраницы + ": в строке " + НомСтроки,
							"Приложение 4 -> Страница " + НомСтраницы + " -> Строка " + НомСтроки + ": в " + НомСтрокиПодчМнЧ
							+ "-й строке ""Сведений счета-фактуры""");
							
							Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПодчМнЧ.Данные["П00104М205000"])) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задан номер счета-фактуры",
								"Приложение4", "П00104М205000_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							Если НЕ ЗначениеЗаполнено(СтрокаПодчМнЧ.Данные["П00104М206000"]) Тогда
								СообщитьВТС(Текст_СтрокаГруппыСтрок + " не задана дата счета-фактуры",
								"Приложение4", "П00104М206000_" + НомСтроки + "_" + НомСтрокиПодчМнЧ, НомСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не заданы ""Сведения счета-фактуры""",
						"Приложение4", "П00104М205000_" + НомСтроки + "_1", НомСтраницы);
						СтатусПроверки = Ложь;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				СообщитьВТС("Приложение 4 -> Страница " + НомСтраницы
				+ ": не заполнены ""Сведения о денатурированном этиловом спирте""",
				"Приложение4", "П00104М104000_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 5.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение5"];
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение5") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001050001003"])) Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": не задан регистрационный номер извещения",
				"Приложение5", "П001050001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001050002003"]) Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": не задана дата регистрации извещения",
				"Приложение5", "П001050002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001050003003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": не задан ИНН организации",
				"Приложение5", "П001050003003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": задан ИНН организации, не состоящий из 10 цифр",
				"Приложение5", "П001050003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001050004003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": не задан КПП организации",
				"Приложение5", "П001050004003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 9 Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": задан КПП организации, не состоящий из 9 символов",
				"Приложение5", "П001050004003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001050005003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
				+ ": не задан код вида закупаемого этилового спирта",
				"Приложение5", "П001050005003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
				+ ": задан код вида закупаемого этилового спирта, не состоящий из 3 цифр",
				"Приложение5", "П001050005003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Раздел 1.1.
			//
			Заполнен_Р1_1_П5 = ЗначениеЗаполнено(Ветка.Данные["П001050012003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001050013003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001050014003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001050015003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001050016003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001050017003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001050018003"]);
			
			Если Заполнен_Р1_1_П5 Тогда
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001050012003"])) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан регистрационный номер извещения",
					"Приложение5", "П001050012003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001050013003"]) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задана дата регистрации извещения",
					"Приложение5", "П001050013003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П001050014003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан ИНН организации",
					"Приложение5", "П001050014003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 задан ИНН организации, не состоящий из 10 цифр",
					"Приложение5", "П001050014003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П001050015003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан КПП организации",
					"Приложение5", "П001050015003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 9 Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 задан КПП организации, не состоящий из 9 символов",
					"Приложение5", "П001050015003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П001050016003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан код вида закупаемого этилового спирта",
					"Приложение5", "П001050016003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 задан код вида закупаемого этилового спирта, не состоящий из 3 цифр",
					"Приложение5", "П001050016003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			// Раздел 1.2.
			//
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП512М1];
			Если ЗаполненаМногострочнаяЧасть(ДанныеМнЧ) Тогда
				Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00105М119003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " не задан код вида подакцизного товара",
						"Приложение5", "П00105М119003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы + ": в строке " + НомСтроки
						+ " задан код вида подакцизного товара, не состоящий из 3 цифр",
						"Приложение5", "П00105М119003_" + НомСтроки, НомСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				СообщитьВТС("Приложение 5 -> Страница " + НомСтраницы
				+ ": не заполнен раздел 1.2 ""Сведения об использовании этилового спирта по виду алкогольной или подакцизной спиртосодержащей продукции""",
				"Приложение5", "П00105М119003_1", НомСтраницы);
				СтатусПроверки = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Приложение 6.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение6"];
	
	ВозмКодыСтр001 = ВозможныеЗначенияИзСпискаВыбораПоказателя("П001060000103");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		Если ЗаполненаСтраницаРаздела(Ветка, "Приложение6") Тогда
			
			НомСтраницы = Формат(ДеревоРаздела.Строки.Индекс(Ветка) + 1, "ЧГ=");
			
			ЗначПок = СокрЛП(Ветка.Данные["П001060000103"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задан признак банковской гарантии",
				"Приложение6", "П001060000103", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли ВозмКодыСтр001.МассивЗначений.Найти(ЗначПок) = Неопределено Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
				+ ": признак банковской гарантии должен принимать одно из значений: "
				+ ВозмКодыСтр001.СтрокаЗначений, "Приложение6", "П001060000103", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001060001003"])) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задан номер банковской гарантии",
				"Приложение6", "П001060001003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001060001503"]) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задана дата выдачи банковской гарантии",
				"Приложение6", "П001060001503", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001060002003"]) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
				+ ": не задана дата начала срока действия банковской гарантии",
				"Приложение6", "П001060002003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001060003003"]) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
				+ ": не задана дата окончания срока действия банковской гарантии",
				"Приложение6", "П001060003003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001060005003"])) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задан регистрационный номер извещения",
				"Приложение6", "П001060005003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001060006003"]) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задана дата регистрации извещения",
				"Приложение6", "П001060006003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001060007003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задан ИНН организации",
				"Приложение6", "П001060007003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": задан ИНН организации, не состоящий из 10 цифр",
				"Приложение6", "П001060007003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001060008003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задан КПП организации",
				"Приложение6", "П001060008003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 9 Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": задан КПП организации, не состоящий из 9 символов",
				"Приложение6", "П001060008003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001060009003"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": не задан код вида закупаемого этилового спирта",
				"Приложение6", "П001060009003", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
				+ ": задан код вида закупаемого этилового спирта, не состоящий из 3 цифр",
				"Приложение6", "П001060009003", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗначПок = СокрЛП(Ветка.Данные["П001060013503"]);
			Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
				+ ": не заданы месяц и год, на которые приходится 100-й календарный  день (190-й или 250-й календарный день) с начала первого налогового периода расчетного срока",
				"Приложение6", "П001060013503", НомСтраницы);
				СтатусПроверки = Ложь;
			ИначеЕсли НЕ ЗначениеЗаполнено(СтроковыеФункцииКлиентСервер.СтрокаВДату("01." + ЗначПок)) Тогда
				СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
				+ ": заданы месяц и год, на которые приходится 100-й календарный  день (190-й или 250-й календарный день) с начала первого налогового периода расчетного срока, не соответствующее шаблону ММ.ГГГГ",
				"Приложение6", "П001060013503", НомСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Раздел 1.1.
			//
			Заполнен_Р1_1_П6 = ЗначениеЗаполнено(Ветка.Данные["П001060014003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001060015003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001060016003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001060017003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001060018003"])
			ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001060019003"]) ИЛИ ЗначениеЗаполнено(Ветка.Данные["П001060020003"]);
			
			Если Заполнен_Р1_1_П6 Тогда
				
				Если НЕ ЗначениеЗаполнено(СокрЛП(Ветка.Данные["П001060014003"])) Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан регистрационный номер извещения",
					"Приложение6", "П001060014003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Ветка.Данные["П001060015003"]) Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задана дата регистрации извещения",
					"Приложение6", "П001060015003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П001060016003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан ИНН организации",
					"Приложение6", "П001060016003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 10 Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 задан ИНН организации, не состоящий из 10 цифр",
					"Приложение6", "П001060016003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П001060017003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан КПП организации",
					"Приложение6", "П001060017003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 9 Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 задан КПП организации, не состоящий из 9 символов",
					"Приложение6", "П001060017003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЗначПок = СокрЛП(Ветка.Данные["П001060018003"]);
				Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 не задан код вида закупаемого этилового спирта",
					"Приложение6", "П001060018003", НомСтраницы);
					СтатусПроверки = Ложь;
				ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы
					+ ": в разделе 1.1 задан код вида закупаемого этилового спирта, не состоящий из 3 цифр",
					"Приложение6", "П001060018003", НомСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Ветка612_613 = Ветка.Строки[0].Строки[0];
			
			НомСтраницы612_613 = "1";
			Координаты612_613 = НомСтраницы + "," + НомСтраницы612_613;
			
			ДанныеМнЧ = Ветка612_613.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП612М1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00106М121003"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 1.2 не задан код вида подакцизного товара",
						"Приложение612_613", "П00106М121003_" + НомСтроки, Координаты612_613);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 1.2 задан код вида подакцизного товара, не состоящий из 3 цифр",
						"Приложение612_613", "П00106М121003_" + НомСтроки, Координаты612_613);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			ДанныеМнЧ = Ветка612_613.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП613М2];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00106М232503"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 1.3 не задан код вида подакцизного товара",
						"Приложение612_613", "П00106М232503_" + НомСтроки, Координаты612_613);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 1.3 задан код вида подакцизного товара, не состоящий из 3 цифр",
						"Приложение612_613", "П00106М232503_" + НомСтроки, Координаты612_613);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Ветка614 = Ветка.Строки[1].Строки[0];
			
			НомСтраницы614 = "2";
			Координаты614 = НомСтраницы + "," + НомСтраницы614;
			
			ДанныеМнЧ = Ветка614.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП614М3];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
					ИндСтрокиМнЧ = ДанныеМнЧ.Строки.Индекс(СтрокаМнЧ);
					НомСтроки = Формат(ИндСтрокиМнЧ + 1, "ЧГ=");
					
					ЗначПок = СокрЛП(СтрокаМнЧ.Данные["П00106М338503"]);
					Если НЕ ЗначениеЗаполнено(ЗначПок) Тогда
						СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 1.4 не задан код вида подакцизного товара",
						"Приложение614", "П00106М338503_" + НомСтроки, Координаты614);
						СтатусПроверки = Ложь;
					ИначеЕсли СтрДлина(ЗначПок) <> 3 Тогда
						СообщитьВТС("Приложение 6 -> Страница " + НомСтраницы + ": в строке "
						+ НомСтроки + " раздела 1.4 задан код вида подакцизного товара, не состоящий из 3 цифр",
						"Приложение614", "П00106М338503_" + НомСтроки, Координаты614);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПоказателиНеанализируемыеНаЗаполненность()
	
	ИменаПоказателей = Новый Массив;
	ИменаПоказателей.Добавить("П000240000001");
	
	Возврат ИменаПоказателей;
	
КонецФункции

&НаСервере
Функция ЗаполненРаздел(Знач ДеревоРаздела, Знач ИмяРаздела)
	
	Для каждого СтраницаРаздела Из ДеревоРаздела.Строки Цикл
		Если ЗаполненаСтраницаРаздела(СтраницаРаздела, ИмяРаздела) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтраницаРаздела(Знач СтраницаРаздела, Знач ИмяРаздела)
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Данные = СтраницаРаздела.Данные;
	Для каждого Пок Из Данные Цикл
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаГруппМнЧ") Тогда
		ИменаГруппМнЧ = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаГруппМнЧ"];
		Для каждого ИмяГруппы Из ИменаГруппМнЧ Цикл
			ДеревоМнЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ИмяГруппы];
			Если ЗаполненаМногострочнаяЧасть(ДеревоМнЧ) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для ИндПодчРаздела = 0 По ИменаПодчРазделов.Количество() - 1 Цикл
			ДеревоПодчРаздела = СтраницаРаздела.Строки[ИндПодчРаздела];
			ИмяПодчРаздела = ИменаПодчРазделов[ИндПодчРаздела];
			Если ЗаполненРаздел(ДеревоПодчРаздела, ИмяПодчРаздела) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаМногострочнаяЧасть(Знач ДеревоМнЧ)
	
	Для Каждого СтрокаМнЧ Из ДеревоМнЧ.Строки Цикл
		Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаМнЧ) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаполненаСтрокаМногострочнойЧасти(Знач СтрокаМнЧ)
	
	ИмяГруппыМнЧ = Неопределено;
	
	ПоказателиНеанализируемыеНаЗаполненность = ПоказателиНеанализируемыеНаЗаполненность();
	
	Для каждого Пок Из СтрокаМнЧ.Данные Цикл
		Если НЕ ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
			ИмяГруппыМнЧ = Лев(Пок.Ключ, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		КонецЕсли;
		Если ЗначениеЗаполнено(Пок.Значение) И ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИмяГруппыМнЧ) Тогда
		ИменаПодчГруппМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппыМнЧ Из ИменаПодчГруппМнЧ Цикл
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[ИмяПодчГруппыМнЧ];
			Для Каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				Если ЗаполненаСтрокаМногострочнойЧасти(СтрокаПодчМнЧ) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВозможныеЗначенияИзСпискаВыбораПоказателя(ИмяПоказателя)
	
	МассивЗначений = ДанныеФормыВЗначение(РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(
	ЭтаФорма, ИмяПоказателя).ТаблицаЗначений, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("Код");
	КоличествоЗначений = МассивЗначений.Количество();
	Для Ном = 1 По КоличествоЗначений Цикл
		ОбрИнд = КоличествоЗначений - Ном;
		Если НЕ ЗначениеЗаполнено(МассивЗначений[ОбрИнд]) Тогда
			МассивЗначений.Удалить(ОбрИнд);
		КонецЕсли;
	КонецЦикла;
	СтрокаЗначений = СтрСоединить(МассивЗначений, ", ");
	
	Возврат Новый Структура("МассивЗначений, СтрокаЗначений", МассивЗначений, СтрокаЗначений);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	
	// Раздел 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	
	Для каждого Эл Из СумНалПУ.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, ДеревоРаздела.Строки[0].Данные[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	
	СумНалПУ_МО = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумНалПУ_МО");
	ДанныеМнЧ = ДеревоРаздела.Строки[0].ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М1];
	
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		
		ЭкзСумНалПУ_МО = СкопироватьУзел(СумНалПУ, СумНалПУ_МО, СумНалПУ.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзСумНалПУ_МО.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СумНалПУ_КБК = ПолучитьПодчиненныйЭлемент(ЭкзСумНалПУ_МО, "СумНалПУ_КБК");
		ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР1М2];
		
		Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
			
			ЭкзСумНалПУ_КБК = СкопироватьУзел(ЭкзСумНалПУ_МО, СумНалПУ_КБК, ЭкзСумНалПУ_МО.Строки.Количество() - 1);
			Для каждого Эл Из ЭкзСумНалПУ_КБК.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтрокаПодчМнЧ.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел2"];
	РасчАкц = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкц");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзРасчАкц = СкопироватьУзел(УзелРодитель, РасчАкц, УзелРодитель.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзРасчАкц.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		// Подраздел 2.1.
		ОперПТРФ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ОперПТРФ");
		ОперПТРФКод = ПолучитьПодчиненныйЭлемент(ОперПТРФ, "ОперПТРФКод");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР21М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзОперПТРФКод = СкопироватьУзел(ОперПТРФ, ОперПТРФКод, ОперПТРФ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзОперПТРФКод);
		КонецЦикла;
		
		// Подраздел 2.2.
		ОперПТнеРФ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ОперПТнеРФ");
		ОперПТнеРФКод = ПолучитьПодчиненныйЭлемент(ОперПТнеРФ, "ОперПТнеРФКод");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР22М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзОперПТнеРФКод = СкопироватьУзел(ОперПТнеРФ, ОперПТнеРФКод, ОперПТнеРФ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзОперПТнеРФКод);
		КонецЦикла;
		
		// Подраздел 2.3.
		АкцизВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизВыч");
		АкцизВычКод = ПолучитьПодчиненныйЭлемент(АкцизВыч, "АкцизВычКод");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР23М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзАкцизВычКод = СкопироватьУзел(АкцизВыч, АкцизВычКод, АкцизВыч.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзАкцизВычКод);
		КонецЦикла;
		
		// Подраздел 2.4.
		ЗаполнитьДаннымиУзел(Ветка.Данные, ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизПУ"));
		
		// Подраздел 2.4.1.
		Акциз203_6 = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "Акциз203.6");
		Акциз203_6Код = ПолучитьПодчиненныйЭлемент(Акциз203_6, "Акциз203.6Код");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР241М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзАкциз203_6Код = СкопироватьУзел(Акциз203_6, Акциз203_6Код, Акциз203_6.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзАкциз203_6Код);
		КонецЦикла;
		
		// Подраздел 2.5.
		ДокЭкспПТ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ДокЭкспПТ");
		ДокЭкспПТКод = ПолучитьПодчиненныйЭлемент(ДокЭкспПТ, "ДокЭкспПТКод");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыР25М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзДокЭкспПТКод = СкопироватьУзел(ДокЭкспПТ, ДокЭкспПТКод, ДокЭкспПТ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзДокЭкспПТКод);
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 1.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение1"];
	РасчНБВидПТ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНБВидПТ");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзРасчНБВидПТ = СкопироватьУзел(УзелРодитель, РасчНБВидПТ, УзелРодитель.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзРасчНБВидПТ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		РасчНБКод = ПолучитьПодчиненныйЭлемент(ЭкзРасчНБВидПТ, "РасчНБКод");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП1М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзРасчНБКод = СкопироватьУзел(ЭкзРасчНБВидПТ, РасчНБКод, ЭкзРасчНБВидПТ.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзРасчНБКод);
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 2.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение2"];
	РеалПТЭкспБГ184 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РеалПТЭкспБГ184");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзРеалПТЭкспБГ184 = СкопироватьУзел(УзелРодитель, РеалПТЭкспБГ184, УзелРодитель.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзРеалПТЭкспБГ184.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СвРеалПТЭксп = ПолучитьПодчиненныйЭлемент(ЭкзРеалПТЭкспБГ184, "СвРеалПТЭксп");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М1];
		
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			
			// Строки 060.
			ЭкзСвРеалПТЭксп = СкопироватьУзел(ЭкзРеалПТЭкспБГ184, СвРеалПТЭксп, ЭкзРеалПТЭкспБГ184.Строки.Количество() - 1);
			Для каждого Эл Из ЭкзСвРеалПТЭксп.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Строки 070.
			АкОсвЭксп = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "АкОсвЭксп");
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М2];
			Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ЭкзАкОсвЭксп = СкопироватьУзел(ЭкзСвРеалПТЭксп, АкОсвЭксп, ЭкзСвРеалПТЭксп.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные, ЭкзАкОсвЭксп);
			КонецЦикла;
			
			// Строки 080.
			РеалПТЭкПдтвПер = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "РеалПТЭкПдтвПер");
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М3];
			Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ЭкзРеалПТЭкПдтвПер = СкопироватьУзел(ЭкзСвРеалПТЭксп, РеалПТЭкПдтвПер, ЭкзСвРеалПТЭксп.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные, ЭкзРеалПТЭкПдтвПер);
			КонецЦикла;
			
			// Строки 090.
			РеалПТЭкПдтвПред = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "РеалПТЭкПдтвПред");
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП2М4];
			Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ЭкзРеалПТЭкПдтвПред = СкопироватьУзел(ЭкзСвРеалПТЭксп, РеалПТЭкПдтвПред, ЭкзСвРеалПТЭксп.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные, ЭкзРеалПТЭкПдтвПред);
			КонецЦикла;
			
			// Строка 100. Особая обработка при выводе узла "ПревАкОсвПдтв".
			ПревАкОсвПдтв = ПолучитьПодчиненныйЭлемент(ЭкзСвРеалПТЭксп, "ПревАкОсвПдтв");
			ЭкзПревАкОсвПдтв = СкопироватьУзел(ЭкзСвРеалПТЭксп, ПревАкОсвПдтв, ЭкзСвРеалПТЭксп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзПревАкОсвПдтв);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 3.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение3"];
	СпРеалПер = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпРеалПер");
	
	// Особая обработка при выводе узла "СпРеалПер".
	ЭкзСпРеалПер = СкопироватьУзел(УзелРодитель, СпРеалПер, УзелРодитель.Строки.Количество() - 1);
	
	СпРеалПокуп = ПолучитьПодчиненныйЭлемент(ЭкзСпРеалПер, "СпРеалПокуп");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзСпРеалПокуп = СкопироватьУзел(ЭкзСпРеалПер, СпРеалПокуп, ЭкзСпРеалПер.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзСпРеалПокуп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СпРеалПерКод = ПолучитьПодчиненныйЭлемент(ЭкзСпРеалПокуп, "СпРеалПерКод");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП3М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзСпРеалПерКод = СкопироватьУзел(ЭкзСпРеалПокуп, СпРеалПерКод, ЭкзСпРеалПокуп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСпРеалПерКод);
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 4.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение4"];
	СпПолучОрг = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпПолучОрг");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		ЭкзСпПолучОрг = СкопироватьУзел(УзелРодитель, СпПолучОрг, УзелРодитель.Строки.Количество() - 1);
		Для каждого Эл Из ЭкзСпПолучОрг.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, Ветка.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		СвДенСпирт = ПолучитьПодчиненныйЭлемент(ЭкзСпПолучОрг, "СвДенСпирт");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М1];
		
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			
			// Строки 040.
			ЭкзСвДенСпирт = СкопироватьУзел(ЭкзСпПолучОрг, СвДенСпирт, ЭкзСпПолучОрг.Строки.Количество() - 1);
			Для каждого Эл Из ЭкзСвДенСпирт.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Строки 050-100.
			СвОбСпСчФ = ПолучитьПодчиненныйЭлемент(ЭкзСвДенСпирт, "СвОбСпСчФ");
			ДанныеПодчМнЧ = СтрокаМнЧ.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП4М2];
			Для каждого СтрокаПодчМнЧ Из ДанныеПодчМнЧ.Строки Цикл
				ЭкзСвОбСпСчФ = СкопироватьУзел(ЭкзСвДенСпирт, СвОбСпСчФ, ЭкзСвДенСпирт.Строки.Количество() - 1);
				ЗаполнитьДаннымиУзел(СтрокаПодчМнЧ.Данные, ЭкзСвОбСпСчФ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 5.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение5"];
	СпПриобИзвУп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпПриобИзвУп");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		// "Шапка" и Раздел 1.1.
		ЭкзСпПриобИзвУп = СкопироватьУзел(УзелРодитель, СпПриобИзвУп, УзелРодитель.Строки.Количество() - 1);
		ЗаполнитьДаннымиУзел(Ветка.Данные, ЭкзСпПриобИзвУп);
		
		// Раздел 1.2.
		СвИспСпВид = ПолучитьПодчиненныйЭлемент(ЭкзСпПриобИзвУп, "СвИспСпВид");
		ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП512М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзСвИспСпВид = СкопироватьУзел(ЭкзСпПриобИзвУп, СвИспСпВид, ЭкзСпПриобИзвУп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСвИспСпВид);
		КонецЦикла;
		
	КонецЦикла;
	
	// Приложение 6.
	//
	ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов["Приложение6"];
	СпПриобИзвОсвУп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпПриобИзвОсвУп");
	
	Для каждого Ветка Из ДеревоРаздела.Строки Цикл
		
		// "Шапка" и Раздел 1.1.
		ЭкзСпПриобИзвОсвУп = СкопироватьУзел(УзелРодитель, СпПриобИзвОсвУп, УзелРодитель.Строки.Количество() - 1);
		ЗаполнитьДаннымиУзел(Ветка.Данные, ЭкзСпПриобИзвОсвУп);
		
		ПодчВетка = Ветка.Строки[0].Строки[0];
		// Раздел 1.2.
		СведИспСпВидПП = ПолучитьПодчиненныйЭлемент(ЭкзСпПриобИзвОсвУп, "СведИспСпВидПП");
		ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП612М1];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзСведИспСпВидПП = СкопироватьУзел(ЭкзСпПриобИзвОсвУп, СведИспСпВидПП, ЭкзСпПриобИзвОсвУп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСведИспСпВидПП);
		КонецЦикла;
		// Раздел 1.3.
		СведФИспОбязБГ = ПолучитьПодчиненныйЭлемент(ЭкзСпПриобИзвОсвУп, "СведФИспОбязБГ");
		ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП613М2];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзСведФИспОбязБГ = СкопироватьУзел(ЭкзСпПриобИзвОсвУп, СведФИспОбязБГ, ЭкзСпПриобИзвОсвУп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСведФИспОбязБГ);
		КонецЦикла;
		
		ПодчВетка = Ветка.Строки[1].Строки[0];
		// Раздел 1.4.
		СвАвКонРасчВыч = ПолучитьПодчиненныйЭлемент(ЭкзСпПриобИзвОсвУп, "СвАвКонРасчВыч");
		ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП614М3];
		Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
			ЭкзСвАвКонРасчВыч = СкопироватьУзел(ЭкзСпПриобИзвОсвУп, СвАвКонРасчВыч, ЭкзСпПриобИзвОсвУп.Строки.Количество() - 1);
			ЗаполнитьДаннымиУзел(СтрокаМнЧ.Данные, ЭкзСвАвКонРасчВыч);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	ИначеЕсли Узел.Ключ = "П000240000001" Тогда
		// Особая обработка значения показателя "Код показателя" (подраздел 2.4 раздела 2).
		Возврат Истина;
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоИП Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КПП);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
	+ "_" + ПараметрыВыгрузки.КодНО
	+ "_" + ИННКПП
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ДекларацияПоАкцизамНаАлкоголь");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
	"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки502");
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура(
	"ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
	ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
	"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт",
	НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны, ЗначениеЕдИзм, ЗначениеЗпт);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаИРассчитатьНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);
			
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаИРассчитатьНаСервере(ИмяРаздела)
	
	УстановитьФорматВыводаНаСервере(ИмяРаздела);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(ИмяРаздела)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
	ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ТабличныйДокумент.Очистить();
	КонецЕсли;
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение612_613"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение614" Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение614" Тогда
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(2);
		Иначе
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		КонецЕсли;
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущееЗначениеКоэффициентаТ = 0;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ПолучитьМакет(
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
	Иначе
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
			
			// Особая обработка значения показателя "Код показателя" (подраздел 2.4 раздела 2).
			ТабличныйДокумент.Область("П000240000001").Значение = "40001";
			
		КонецЕсли;
		
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
	"ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда // возможны 3 состояния флага
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
	ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			ВывестиДанныеВТабличныйДокумент(СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Раздел1" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ1 = СтруктураРеквизитовФормы.мИдГруппыР1М1;
		ИменаГрафМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1]["ИменаГраф"];
		СтрокВБлокеМнЧ1 = 2;
		
		ИмяГруппыМнЧ2 = СтруктураРеквизитовФормы.мИдГруппыР1М2;
		ИменаГрафМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2]["ИменаГраф"];
		СтрокВБлокеМнЧ2 = 4;
		
		МассивДанныхМнЧДляПечати = Новый Массив;
		ДанныеМнЧДляПечати = Новый Структура;
		
		НомерСтрокиВБлокеМнЧ1 = 0;
		
		ДанныеМнЧ1 = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
		Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
			
			НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
			Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
				
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				ДанныеМнЧДляПечати = Новый Структура;
				
				НомерСтрокиВБлокеМнЧ1 = 1;
				
			КонецЕсли;
			
			Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
				ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1),
				СтрокаМнЧ1.Данные[ИмяГрафы]);
			КонецЦикла;
			
			НомерСтрокиВБлокеМнЧ2 = 0;
			
			ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
			Для каждого СтрокаМнЧ2 Из ДанныеМнЧ2.Строки Цикл
				
				НомерСтрокиВБлокеМнЧ2 = НомерСтрокиВБлокеМнЧ2 + 1;
				Если НомерСтрокиВБлокеМнЧ2 > СтрокВБлокеМнЧ2 Тогда
					
					НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
					Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
						
						МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
						ДанныеМнЧДляПечати = Новый Структура;
						
						НомерСтрокиВБлокеМнЧ1 = 1;
						
					КонецЕсли;
					
					НомерСтрокиВБлокеМнЧ2 = 1;
					
				КонецЕсли;
				
				Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1)
					+ СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ2), СтрокаМнЧ2.Данные[ИмяГрафы]);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
		
		Для НомЛиста = 1 По МассивДанныхМнЧДляПечати.Количество() Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Если НомЛиста = 1 Тогда
				НемногострочныйДанные = ДеревоДанныхРаздела.Строки[0].Данные;
				Для каждого Пок Из НемногострочныйДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
						// Обработка значения кода по ОКТМО.
						Если Пок.Ключ = "П000010001003" Тогда
							Обл.Значение = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СокрЛП(Пок.Значение), 11, "-", 1);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Ном1 = 1 По СтрокВБлокеМнЧ1 - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ1 + СтрокаСИндексомПоказателя(Ном1);
				ВставитьДопСтроку(ИмяГруппыМнЧ1, ИмяОбластиПреемника);
			КонецЦикла;
			Для Ном1 = 1 По СтрокВБлокеМнЧ1 Цикл
				Для Ном2 = 1 По СтрокВБлокеМнЧ2 - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ2 + СтрокаСИндексомПоказателя(Ном1) + СтрокаСИндексомПоказателя(Ном2);
					ВставитьДопСтроку(ИмяГруппыМнЧ2, ИмяОбластиПреемника);
				КонецЦикла;
			КонецЦикла;
			
			ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ21  = СтруктураРеквизитовФормы.мИдГруппыР21М1;
		ИмяГруппыМнЧ22  = СтруктураРеквизитовФормы.мИдГруппыР22М1;
		ИмяГруппыМнЧ23  = СтруктураРеквизитовФормы.мИдГруппыР23М1;
		ИмяГруппыМнЧ241 = СтруктураРеквизитовФормы.мИдГруппыР241М1;
		ИмяГруппыМнЧ25  = СтруктураРеквизитовФормы.мИдГруппыР25М1;
		
		СтрокМнЧ21НаЛисте  = 3;
		СтрокМнЧ22НаЛисте  = 2;
		СтрокМнЧ23НаЛисте  = 3;
		СтрокМнЧ241НаЛисте = 2;
		СтрокМнЧ25НаЛисте  = 2;
		
		ИменаГрафМнЧ21  = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ21]["ИменаГраф"];
		ИменаГрафМнЧ22  = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ22]["ИменаГраф"];
		ИменаГрафМнЧ23  = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ23]["ИменаГраф"];
		ИменаГрафМнЧ241 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ241]["ИменаГраф"];
		ИменаГрафМнЧ25  = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ25]["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Определение количества листов.
			//
			ДанныеМнЧ21 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ21];
			КолСтрокМнЧ = ДанныеМнЧ21.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ21НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ21НаЛисте);
			КолЛистовМнЧ21 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ22 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ22];
			КолСтрокМнЧ = ДанныеМнЧ22.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ22НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ22НаЛисте);
			КолЛистовМнЧ22 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ23 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ23];
			КолСтрокМнЧ = ДанныеМнЧ23.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ23НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ23НаЛисте);
			КолЛистовМнЧ23 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ241 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ241];
			КолСтрокМнЧ = ДанныеМнЧ241.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ241НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ241НаЛисте);
			КолЛистовМнЧ241 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			ДанныеМнЧ25 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ25];
			КолСтрокМнЧ = ДанныеМнЧ25.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧ25НаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧ25НаЛисте);
			КолЛистовМнЧ25 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			КолЛистовРаздела = Макс(КолЛистовМнЧ21, КолЛистовМнЧ22, КолЛистовМнЧ23, КолЛистовМнЧ241, КолЛистовМнЧ25);
			
			// Подготовка многострочных данных для заполнения листов.
			//
			МассивДанныхМнЧ21ДляПечати = Новый Массив;
			МассивДанныхМнЧ22ДляПечати = Новый Массив;
			МассивДанныхМнЧ23ДляПечати = Новый Массив;
			МассивДанныхМнЧ241ДляПечати = Новый Массив;
			МассивДанныхМнЧ25ДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ21НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ21НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ21.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ21 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ21.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ21ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ22НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ22НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ22.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ22 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ22.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ22ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ23НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ23НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ23.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ23 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ23.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ23ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ241НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ241НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ241.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ241 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ241.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ241ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧ25НаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧ25НаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ25.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ25 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ25.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧ25ДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧ21НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ21 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ21, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ22НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ22 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ22, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ23НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ23 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ23, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ241НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ241 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ241, ИмяОбластиПреемника);
				КонецЦикла;
				Для Ном = 1 По СтрокМнЧ25НаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ25 + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ25, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧ21ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ22ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ23ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ241ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				ДанныеМнЧДляПечати = МассивДанныхМнЧ25ДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение1" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП1М1;
		
		СтрокМнЧНаЛисте = 11;
		
		ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Определение количества листов.
			//
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения листов.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныеДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныеДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном = 1 По СтрокМнЧНаЛисте - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ + СтрокаСИндексомПоказателя(Ном);
					ВставитьДопСтроку(ИмяГруппыМнЧ, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение2" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ1 = СтруктураРеквизитовФормы.мИдГруппыП2М1;
		ИменаГрафМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1]["ИменаГраф"];
		СтрокВБлокеМнЧ1 = 1;
		
		ИмяГруппыМнЧ2 = СтруктураРеквизитовФормы.мИдГруппыП2М2;
		ИменаГрафМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2]["ИменаГраф"];
		СтрокВБлокеМнЧ2 = 1;
		
		ИмяГруппыМнЧ3 = СтруктураРеквизитовФормы.мИдГруппыП2М3;
		ИменаГрафМнЧ3 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ3]["ИменаГраф"];
		СтрокВБлокеМнЧ3 = 1;
		
		ИмяГруппыМнЧ4 = СтруктураРеквизитовФормы.мИдГруппыП2М4;
		ИменаГрафМнЧ4 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ4]["ИменаГраф"];
		СтрокВБлокеМнЧ4 = 1;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			МассивДанныхМнЧДляПечати = Новый Массив;
			ДанныеМнЧДляПечати = Новый Структура;
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
			Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
				
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1", СтрокаМнЧ1.Данные[ИмяГрафы]);
				КонецЦикла;
				
				ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
				ДанныеМнЧ3 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ3];
				ДанныеМнЧ4 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ4];
				
				НаибольшееКоличествоПодчиненныхСтрок = Макс(
				ДанныеМнЧ2.Строки.Количество(), ДанныеМнЧ3.Строки.Количество(), ДанныеМнЧ4.Строки.Количество());
				
				Для НомПодчСтроки = 1 По НаибольшееКоличествоПодчиненныхСтрок Цикл
					
					Если НомПодчСтроки <= ДанныеМнЧ2.Строки.Количество() Тогда
						Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
							ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1_1", ДанныеМнЧ2.Строки[НомПодчСтроки - 1].Данные[ИмяГрафы]);
						КонецЦикла;
					КонецЕсли;
					Если НомПодчСтроки <= ДанныеМнЧ3.Строки.Количество() Тогда
						Для каждого ИмяГрафы Из ИменаГрафМнЧ3 Цикл
							ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1_1", ДанныеМнЧ3.Строки[НомПодчСтроки - 1].Данные[ИмяГрафы]);
						КонецЦикла;
					КонецЕсли;
					Если НомПодчСтроки <= ДанныеМнЧ4.Строки.Количество() Тогда
						Для каждого ИмяГрафы Из ИменаГрафМнЧ4 Цикл
							ДанныеМнЧДляПечати.Вставить(ИмяГрафы + "_1_1", ДанныеМнЧ4.Строки[НомПодчСтроки - 1].Данные[ИмяГрафы]);
						КонецЦикла;
					КонецЕсли;
					
					МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					ДанныеМнЧДляПечати = Новый Структура;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для НомЛиста = 1 По МассивДанныхМнЧДляПечати.Количество() Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныйДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныйДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение3" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение3_Печать");
		
		ИмяГруппыМнЧ1 = СтруктураРеквизитовФормы.мИдГруппыП3М1_;
		ИменаГрафМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1]["ИменаГраф"];
		СтрокВБлокеМнЧ1 = 3;
		
		ИмяГруппыМнЧ2 = СтруктураРеквизитовФормы.мИдГруппыП3М2_;
		ИменаГрафМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2]["ИменаГраф"];
		СтрокВБлокеМнЧ2 = 3;
		
		МассивДанныхМнЧДляПечати = Новый Массив;
		ДанныеМнЧДляПечати = Новый Структура;
		
		НомерСтрокиВБлокеМнЧ1 = 0;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
			Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
				
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				ДанныеМнЧДляПечати = Новый Структура;
				
				НомерСтрокиВБлокеМнЧ1 = 1;
				
			КонецЕсли;
			
			Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
				ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1),
				Ветка.Данные["П0010300" + Прав(ИмяГрафы, 5)]);
			КонецЦикла;
			
			НомерСтрокиВБлокеМнЧ2 = 0;
			
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппыП3М1];
			Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
				
				НомерСтрокиВБлокеМнЧ2 = НомерСтрокиВБлокеМнЧ2 + 1;
				Если НомерСтрокиВБлокеМнЧ2 > СтрокВБлокеМнЧ2 Тогда
					
					НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
					Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
						
						МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
						ДанныеМнЧДляПечати = Новый Структура;
						
						НомерСтрокиВБлокеМнЧ1 = 1;
						
					КонецЕсли;
					
					НомерСтрокиВБлокеМнЧ2 = 1;
					
				КонецЕсли;
				
				Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1)
					+ СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ2), СтрокаМнЧ.Данные["П00103М1" + Прав(ИмяГрафы, 5)]);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
		
		Для НомЛиста = 1 По МассивДанныхМнЧДляПечати.Количество() Цикл
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			Если НомЛиста = 1 Тогда
				НемногострочныйДанные = ДеревоДанныхРаздела.Строки[0].Данные;
				Для каждого Пок Из НемногострочныйДанные Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Для Ном1 = 1 По СтрокВБлокеМнЧ1 - 1 Цикл
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ1 + СтрокаСИндексомПоказателя(Ном1);
				ВставитьДопСтроку(ИмяГруппыМнЧ1, ИмяОбластиПреемника);
			КонецЦикла;
			Для Ном1 = 1 По СтрокВБлокеМнЧ1 Цикл
				Для Ном2 = 1 По СтрокВБлокеМнЧ2 - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ2 + СтрокаСИндексомПоказателя(Ном1) + СтрокаСИндексомПоказателя(Ном2);
					ВставитьДопСтроку(ИмяГруппыМнЧ2, ИмяОбластиПреемника);
				КонецЦикла;
			КонецЦикла;
			
			ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
			Для каждого Пок Из ДанныеМнЧДляПечати Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение4" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ1 = СтруктураРеквизитовФормы.мИдГруппыП4М1;
		ИменаГрафМнЧ1 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ1]["ИменаГраф"];
		СтрокВБлокеМнЧ1 = 1;
		
		ИмяГруппыМнЧ2 = СтруктураРеквизитовФормы.мИдГруппыП4М2;
		ИменаГрафМнЧ2 = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ2]["ИменаГраф"];
		СтрокВБлокеМнЧ2 = 2;
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			МассивДанныхМнЧДляПечати = Новый Массив;
			ДанныеМнЧДляПечати = Новый Структура;
			
			НомерСтрокиВБлокеМнЧ1 = 0;
			
			ДанныеМнЧ1 = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ1];
			Для каждого СтрокаМнЧ1 Из ДанныеМнЧ1.Строки Цикл
				
				НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
				Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
					
					МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
					ДанныеМнЧДляПечати = Новый Структура;
					
					НомерСтрокиВБлокеМнЧ1 = 1;
					
				КонецЕсли;
				
				Для каждого ИмяГрафы Из ИменаГрафМнЧ1 Цикл
					ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1),
					СтрокаМнЧ1.Данные[ИмяГрафы]);
				КонецЦикла;
				
				НомерСтрокиВБлокеМнЧ2 = 0;
				
				ДанныеМнЧ2 = СтрокаМнЧ1.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ2];
				Для каждого СтрокаМнЧ2 Из ДанныеМнЧ2.Строки Цикл
					
					НомерСтрокиВБлокеМнЧ2 = НомерСтрокиВБлокеМнЧ2 + 1;
					Если НомерСтрокиВБлокеМнЧ2 > СтрокВБлокеМнЧ2 Тогда
						
						НомерСтрокиВБлокеМнЧ1 = НомерСтрокиВБлокеМнЧ1 + 1;
						Если НомерСтрокиВБлокеМнЧ1 > СтрокВБлокеМнЧ1 Тогда
							
							МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
							ДанныеМнЧДляПечати = Новый Структура;
							
							НомерСтрокиВБлокеМнЧ1 = 1;
							
						КонецЕсли;
						
						НомерСтрокиВБлокеМнЧ2 = 1;
						
					КонецЕсли;
					
					Для каждого ИмяГрафы Из ИменаГрафМнЧ2 Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ1)
						+ СтрокаСИндексомПоказателя(НомерСтрокиВБлокеМнЧ2), СтрокаМнЧ2.Данные[ИмяГрафы]);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
			
			Для НомЛиста = 1 По МассивДанныхМнЧДляПечати.Количество() Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				Если НомЛиста = 1 Тогда
					НемногострочныйДанные = Ветка.Данные;
					Для каждого Пок Из НемногострочныйДанные Цикл
						Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = Пок.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Ном2 = 1 По СтрокВБлокеМнЧ2 - 1 Цикл
					ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппыМнЧ2 + "_1" + СтрокаСИндексомПоказателя(Ном2);
					ВставитьДопСтроку(ИмяГруппыМнЧ2, ИмяОбластиПреемника);
				КонецЦикла;
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела);
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение5" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП512М1;
		
		СтрокМнЧНаЛисте = 1;
		
		ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Вывод первых листов.
			//
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			НемногострочныеДанные = Ветка.Данные;
			Для каждого Пок Из НемногострочныеДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист1");
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
			// Определение количества вторых листов.
			//
			ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения вторых листов.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод вторых листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела);
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист2");
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Приложение6" Тогда
		
		МакетРаздела = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		
		МакетРаздела612_613 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение612_613");
		
		МакетРаздела614 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
		ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение614");
		
		СтрокМнЧНаЛисте = 1; // для подразделов 1.2 - 1.4 приложения 6
		
		Для каждого Ветка Из ДеревоДанныхРаздела.Строки Цикл
			
			// Вывод первых листов.
			//
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетРаздела);
			
			НемногострочныеДанные = Ветка.Данные;
			Для каждого Пок Из НемногострочныеДанные Цикл
				Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = Пок.Значение;
					// Переопределение значения строки 135 приложения 6 в случае, если оно не заполнено.
					Если Пок.Ключ = "П001060013503" И НЕ ЗначениеЗаполнено(Пок.Значение) Тогда
						Обл.Значение = "--.----";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
			СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист1");
			ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
			
			// Подразделы 1.2, 1.3 приложения 6.
			//
			ПодчВетка = Ветка.Строки[0].Строки[0];
			
			// Определение количества вторых листов.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП612М1;
			ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
			
			ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения вторых листов.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод вторых листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела612_613);
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист2");
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
			// Определение количества третьих листов.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП613М2;
			ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
			
			ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения третьих листов.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод третьих листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела612_613);
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист3");
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
			// Подразделы 1.4 приложения 6.
			//
			ПодчВетка = Ветка.Строки[1].Строки[0];
			
			// Определение количества четвертых листов.
			//
			ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппыП614М3;
			ИменаГрафМнЧ = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ]["ИменаГраф"];
			
			ДанныеМнЧ = ПодчВетка.ДанныеМногострочныхЧастей[ИмяГруппыМнЧ];
			КолСтрокМнЧ = ДанныеМнЧ.Строки.Количество();
			ДробКол = КолСтрокМнЧ / СтрокМнЧНаЛисте;
			ЦелКол = Цел(КолСтрокМнЧ / СтрокМнЧНаЛисте);
			КолЛистовРаздела = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
			
			// Подготовка многострочных данных для заполнения четвертых листов.
			//
			МассивДанныхМнЧДляПечати = Новый Массив;
			
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ПриращениеКНомеру = (НомЛиста - 1) * СтрокМнЧНаЛисте;
				ДанныеМнЧДляПечати = Новый Структура;
				Для ИндСтроки = 1 По СтрокМнЧНаЛисте Цикл
					_ИндСтроки = СтрокаСИндексомПоказателя(ИндСтроки);
					ИндСПриращением = ИндСтроки + ПриращениеКНомеру;
					Если ИндСПриращением > ДанныеМнЧ.Строки.Количество() Тогда
						Прервать;
					КонецЕсли;
					Для каждого ИмяГрафы Из ИменаГрафМнЧ Цикл
						ДанныеМнЧДляПечати.Вставить(ИмяГрафы + _ИндСтроки, ДанныеМнЧ.Строки[ИндСПриращением - 1].Данные[ИмяГрафы]);
					КонецЦикла;
				КонецЦикла;
				МассивДанныхМнЧДляПечати.Добавить(ДанныеМнЧДляПечати);
				
			КонецЦикла;
			
			// Вывод четвертых листов.
			//
			Для НомЛиста = 1 По КолЛистовРаздела Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(МакетРаздела614);
				
				ДанныеМнЧДляПечати = МассивДанныхМнЧДляПечати[НомЛиста - 1];
				Для каждого Пок Из ДанныеМнЧДляПечати Цикл
					Обл = ТабличныйДокумент.Области.Найти(Пок.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = Пок.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметровРаздела = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметровРаздела.Вставить("ИмяСтраницы", ИмяТекРаздела + "_Лист4");
				ВывестиНаПечатьЛист(СтруктураПараметровРаздела, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоДанныхРаздела = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2019Кв1_";
	
	ИмяМЧБ = ПрефиксИменМакетов + Парам1.ИмяСтраницы;
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМЧБ);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	МакетМЧБ = Неопределено;
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
		КонецЕсли;
	КонецЕсли;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	Обл = ТабличныйДокумент.Области.Найти("ИНН");
	Если НЕ Обл = Неопределено Тогда
		СтрИНН = СокрЛП(Обл.Значение);
		СтрИНН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(СтрИНН, 12, "-", 1);
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("КПП");
	Если НЕ Обл = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Обл.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Обл.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
	Если НЕ Обл = Неопределено Тогда
		Если ТипЗнч(Обл.Значение) = Тип("Строка") Тогда
			СтрДатаПодписи = Лев(СтрЗаменить(Обл.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Обл.Значение) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(Обл.Значение) Тогда
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО, ТелОрганизации";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		
		ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", ТабличныйДокумент.Области.НаимОрг.Значение);
		
		ТелОрганизации = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
		ТелОрганизации = СтрЗаменить(ТелОрганизации, " ", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "(", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, ")", "");
		ТелОрганизации = СтрЗаменить(ТелОрганизации, "-", "");
		ТабличныйДокумент.Области.ТелОрганизации.Значение = ТелОрганизации;
		
		ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
	СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
			СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел2"
		ИЛИ Ячейка.Раздел = "Приложение1"
		ИЛИ Ячейка.Раздел = "Приложение2"
		ИЛИ Ячейка.Раздел = "Приложение3"
		ИЛИ Ячейка.Раздел = "Приложение4"
		ИЛИ Ячейка.Раздел = "Приложение5"
		ИЛИ Ячейка.Раздел = "Приложение6" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Приложение612_613" ИЛИ Ячейка.Раздел = "Приложение614" Тогда
		
		ИмяГлРаздела = мСтруктураМногоуровневыхРазделов[Ячейка.Раздел]["ИмяГлавногоРаздела"];
		
		НомераСтрокМногоуровнегоРаздела = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраница = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяПодчСтраница Из ТекСтраница.ПолучитьЭлементы() Цикл
			Если Ячейка.Раздел = НайденнаяПодчСтраница.КолонкаРазделыОтчетаСокрНаим Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяПодчСтраница.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						НаимСтраницы = ?(СтруктураРаздела.Свойство("НаимСтраницы"),
						СтруктураРаздела["НаимСтраницы"], "Стр. ");
						ЭлементРаздел.КолонкаРазделыОтчета = НаимСтраницы
						+ ?(Прав(НаимСтраницы, 1) = " ", "", ". Стр. ") + Формат(НомерСтраницыРаздела, "ЧГ=");
						
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								ЭлементПодчРаздел = ЭлементРаздел.ПолучитьЭлементы().Добавить();
								НаимСтраницы = ?(СтруктураПодчРаздела.Свойство("НаимСтраницы"),
								СтруктураПодчРаздела["НаимСтраницы"], "Стр. ");
								ЭлементПодчРаздел.КолонкаРазделыОтчета = НаимСтраницы;
								ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяПодчРаздела;
								ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = 1;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ДеревоДанныхРаздела = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				ТекЭлемент = Элемент.ТекущиеДанные;
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[ТекЭлемент.КолонкаРазделыОтчетаСокрНаим];
					Если СтруктураЭлемента.Свойство("Подчиненность") Тогда
						ИмяГлРаздела = СтруктураЭлемента["ИмяГлавногоРаздела"];
						СтруктураРодителя = мСтруктураМногоуровневыхРазделов[ИмяГлРаздела];
						ИндексПодчРаздела = СтруктураРодителя["ИменаПодчиненныхРазделов"].Найти(ТекЭлемент.КолонкаРазделыОтчетаСокрНаим);
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ИндексПодчРаздела + 1);
					Иначе
						НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, 1);
					КонецЕсли;
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекЭлемент = ТекРодитель;
					ТекРодитель = ТекЭлемент.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			СтруктураЭлемента = мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим];
			Если СтруктураЭлемента.Свойство("Многостраничность") Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			Иначе
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

#Область ПроцедурыИФункцииМеханизмаПроверкиКонтрольныхСоотношений

#Область КС_Управление

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	Документирование = Ложь;
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок"	, 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок"	, 0);
	СтруктураРезультата.Вставить("СтруктураОшибок"				, Новый Структура);
	СтруктураРезультата.Вставить("ДопСведенияВОписаниеКС"		, Истина);
	
	СписокРасшифровкиПоказателей	= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	СписокРасшифровкиформулы		= РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	СчетчикФормулДляРасшифровок		= 0;
	
	ДанныеКС = Новый Структура;
	СформироватьДанныеОтчета(СтруктураРеквизитовФормы.мСохраненныйДок, ДанныеКС);
	СформироватьСлужебныеДанные();
	СформироватьТаблицыОтчета();
	ЗаполнитьТаблицыОтчета(ДанныеКС);
	СформироватьДанныеОтчетаПРП();
	СформироватьВременныеТаблицы();
	
	// проверки Титульного листа
	ПроверкаКС_1_01(СтруктураРезультата);
	
	// проверки Раздела 1
	ПроверкаКС_2_01(СтруктураРезультата);
	//ПроверкаКС_2_02(СтруктураРезультата);
	ПроверкаКС_2_03(СтруктураРезультата);
	ПроверкаКС_2_04(СтруктураРезультата);
	ПроверкаКС_2_05(СтруктураРезультата);
	ПроверкаКС_2_06(СтруктураРезультата);
	ПроверкаКС_2_07(СтруктураРезультата);
	ПроверкаКС_2_08(СтруктураРезультата);
	ПроверкаКС_2_09(СтруктураРезультата);
	ПроверкаКС_2_10(СтруктураРезультата);
	
	// проверки Раздела 2
	ПроверкаКС_3_01(СтруктураРезультата);
	ПроверкаКС_3_02(СтруктураРезультата);
	ПроверкаКС_3_03(СтруктураРезультата);
	ПроверкаКС_3_04(СтруктураРезультата);
	ПроверкаКС_3_05(СтруктураРезультата);
	ПроверкаКС_3_06(СтруктураРезультата);
	ПроверкаКС_3_07(СтруктураРезультата);
	//ПроверкаКС_3_08(СтруктураРезультата);
	
	// проверки Приложения 1
	ПроверкаКС_4_01(СтруктураРезультата);
	ПроверкаКС_4_02(СтруктураРезультата);
	ПроверкаКС_4_03(СтруктураРезультата);
	ПроверкаКС_4_04(СтруктураРезультата);
	ПроверкаКС_4_05(СтруктураРезультата);
	ПроверкаКС_4_06(СтруктураРезультата);
	ПроверкаКС_4_07(СтруктураРезультата);
	ПроверкаКС_4_08(СтруктураРезультата);
	ПроверкаКС_4_09(СтруктураРезультата);
	ПроверкаКС_4_10(СтруктураРезультата);
	
	// проверки Приложения 2
	ПроверкаКС_5_01(СтруктураРезультата);
	ПроверкаКС_5_02(СтруктураРезультата);
	ПроверкаКС_5_03(СтруктураРезультата);
	ПроверкаКС_5_04(СтруктураРезультата);
	ПроверкаКС_5_05(СтруктураРезультата);
	ПроверкаКС_5_06(СтруктураРезультата);
	ПроверкаКС_5_07(СтруктураРезультата);
	ПроверкаКС_5_08(СтруктураРезультата);
	ПроверкаКС_5_09а(СтруктураРезультата);
	ПроверкаКС_5_09б(СтруктураРезультата);
	ПроверкаКС_5_10а(СтруктураРезультата);
	ПроверкаКС_5_10б(СтруктураРезультата);
	//ПроверкаКС_5_11(СтруктураРезультата);
	//ПроверкаКС_5_12(СтруктураРезультата);
	ПроверкаКС_5_13(СтруктураРезультата);
	
	// проверки Приложения 3
	ПроверкаКС_6_01(СтруктураРезультата);
	ПроверкаКС_6_02(СтруктураРезультата);
	ПроверкаКС_6_03(СтруктураРезультата);
	ПроверкаКС_6_04(СтруктураРезультата);
	ПроверкаКС_6_05(СтруктураРезультата);
	//ПроверкаКС_6_06(СтруктураРезультата);
	
	// проверки Приложения 4
	ПроверкаКС_7_01(СтруктураРезультата);
	ПроверкаКС_7_02(СтруктураРезультата);
	ПроверкаКС_7_03(СтруктураРезультата);
	ПроверкаКС_7_04(СтруктураРезультата);
	ПроверкаКС_7_05(СтруктураРезультата);
	ПроверкаКС_7_06(СтруктураРезультата);
	ПроверкаКС_7_07(СтруктураРезультата);
	ПроверкаКС_7_08(СтруктураРезультата);
	ПроверкаКС_7_09(СтруктураРезультата);
	
	// проверки Приложения 5
	ПроверкаКС_8_01(СтруктураРезультата);
	ПроверкаКС_8_02(СтруктураРезультата);
	ПроверкаКС_8_03(СтруктураРезультата);
	ПроверкаКС_8_04(СтруктураРезультата);
	ПроверкаКС_8_05(СтруктураРезультата);
	ПроверкаКС_8_06(СтруктураРезультата);
	//ПроверкаКС_8_07(СтруктураРезультата);
	ПроверкаКС_8_08(СтруктураРезультата);
	ПроверкаКС_8_09(СтруктураРезультата);
	ПроверкаКС_8_10(СтруктураРезультата);
	ПроверкаКС_8_11(СтруктураРезультата);
	ПроверкаКС_8_12(СтруктураРезультата);
	ПроверкаКС_8_13(СтруктураРезультата);
	ПроверкаКС_8_14(СтруктураРезультата);
	ПроверкаКС_8_15(СтруктураРезультата);
	ПроверкаКС_8_16(СтруктураРезультата);
	ПроверкаКС_8_17(СтруктураРезультата);
	ПроверкаКС_8_18(СтруктураРезультата);
	ПроверкаКС_8_19(СтруктураРезультата);
	ПроверкаКС_8_20(СтруктураРезультата);
	//ПроверкаКС_8_21(СтруктураРезультата);
	//ПроверкаКС_8_22(СтруктураРезультата);
	//ПроверкаКС_8_23(СтруктураРезультата);
	//ПроверкаКС_8_24(СтруктураРезультата);
	//ПроверкаКС_8_25(СтруктураРезультата);
	//ПроверкаКС_8_26(СтруктураРезультата);
	//ПроверкаКС_8_27(СтруктураРезультата);
	//ПроверкаКС_8_28(СтруктураРезультата);
	ПроверкаКС_8_29(СтруктураРезультата);
	//ПроверкаКС_8_30(СтруктураРезультата);
	
	// проверки Приложения 6
	ПроверкаКС_9_01(СтруктураРезультата);
	ПроверкаКС_9_02(СтруктураРезультата);
	ПроверкаКС_9_03(СтруктураРезультата);
	ПроверкаКС_9_04(СтруктураРезультата);
	ПроверкаКС_9_05(СтруктураРезультата);
	ПроверкаКС_9_06(СтруктураРезультата);
	ПроверкаКС_9_07(СтруктураРезультата);
	ПроверкаКС_9_08(СтруктураРезультата);
	ПроверкаКС_9_09(СтруктураРезультата);
	ПроверкаКС_9_10(СтруктураРезультата);
	ПроверкаКС_9_11(СтруктураРезультата);
	ПроверкаКС_9_12(СтруктураРезультата);
	ПроверкаКС_9_13(СтруктураРезультата);
	ПроверкаКС_9_14(СтруктураРезультата);
	ПроверкаКС_9_15(СтруктураРезультата);
	ПроверкаКС_9_16(СтруктураРезультата);
	ПроверкаКС_9_17(СтруктураРезультата);
	ПроверкаКС_9_18(СтруктураРезультата);
	ПроверкаКС_9_19(СтруктураРезультата);
	ПроверкаКС_9_20(СтруктураРезультата);
	ПроверкаКС_9_21(СтруктураРезультата);
	ПроверкаКС_9_22(СтруктураРезультата);
	ПроверкаКС_9_23(СтруктураРезультата);
	ПроверкаКС_9_24(СтруктураРезультата);
	ПроверкаКС_9_25(СтруктураРезультата);
	//ПроверкаКС_9_26(СтруктураРезультата);
	ПроверкаКС_9_27(СтруктураРезультата);
	ПроверкаКС_9_28(СтруктураРезультата);
	//ПроверкаКС_9_29(СтруктураРезультата);
	ПроверкаКС_9_30(СтруктураРезультата);
	//ПроверкаКС_9_31(СтруктураРезультата);
	ПроверкаКС_9_32(СтруктураРезультата);
	//ПроверкаКС_9_33(СтруктураРезультата);
	ПроверкаКС_9_34(СтруктураРезультата);
	//ПроверкаКС_9_35(СтруктураРезультата);
	ПроверкаКС_9_36(СтруктураРезультата);
	//ПроверкаКС_9_37(СтруктураРезультата);
	ПроверкаКС_9_38(СтруктураРезультата);
	//ПроверкаКС_9_39(СтруктураРезультата);
	ПроверкаКС_9_40(СтруктураРезультата);
	//ПроверкаКС_9_41(СтруктураРезультата);
	ПроверкаКС_9_42(СтруктураРезультата);
	//ПроверкаКС_9_43(СтруктураРезультата);
	ПроверкаКС_9_44(СтруктураРезультата);
	//ПроверкаКС_9_45(СтруктураРезультата);
	ПроверкаКС_9_46(СтруктураРезультата);
	//ПроверкаКС_9_47(СтруктураРезультата);
	//ПроверкаКС_9_48(СтруктураРезультата);
	//ПроверкаКС_9_49(СтруктураРезультата);
	//ПроверкаКС_9_50(СтруктураРезультата);
	//ПроверкаКС_9_51(СтруктураРезультата);
	ПроверкаКС_9_52(СтруктураРезультата);
	ПроверкаКС_9_53(СтруктураРезультата);
	ПроверкаКС_9_54(СтруктураРезультата);
	ПроверкаКС_9_55(СтруктураРезультата);
	ПроверкаКС_9_56(СтруктураРезультата);
	ПроверкаКС_9_57(СтруктураРезультата);
	ПроверкаКС_9_58(СтруктураРезультата);
	ПроверкаКС_9_59(СтруктураРезультата);
	ПроверкаКС_9_60(СтруктураРезультата);
	//ПроверкаКС_9_61(СтруктураРезультата);
	ПроверкаКС_9_62(СтруктураРезультата);
	ПроверкаКС_9_63(СтруктураРезультата);
	ПроверкаКС_9_64(СтруктураРезультата);
	ПроверкаКС_9_65(СтруктураРезультата);
	//ПроверкаКС_9_66(СтруктураРезультата);
	//ПроверкаКС_9_67(СтруктураРезультата);
	//ПроверкаКС_9_68(СтруктураРезультата);
	//ПроверкаКС_9_69(СтруктураРезультата);
	//ПроверкаКС_9_70(СтруктураРезультата);
	//ПроверкаКС_9_71(СтруктураРезультата);
	//ПроверкаКС_9_72(СтруктураРезультата);
	//ПроверкаКС_9_73(СтруктураРезультата);
	//ПроверкаКС_9_74(СтруктураРезультата);
	//ПроверкаКС_9_75(СтруктураРезультата);
	ПроверкаКС_9_76(СтруктураРезультата);
	//ПроверкаКС_9_77(СтруктураРезультата);
	ПроверкаКС_9_78(СтруктураРезультата);
	//ПроверкаКС_9_79(СтруктураРезультата);
	ПроверкаКС_9_80(СтруктураРезультата);
	//ПроверкаКС_9_81(СтруктураРезультата);
	//ПроверкаКС_9_82(СтруктураРезультата);
	ПроверкаКС_9_83(СтруктураРезультата);
	
	Если СписокРасшифровкиформулы.Количество() = 0 Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	АдресФормул			= ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы	, Новый УникальныйИдентификатор);
	АдресПоказателей	= ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("СписокРасшифровкиформулы"		, АдресФормул);
	СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей"	, АдресПоказателей);
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область КС_Документирование

&НаКлиенте
Функция ВыполнитьДокументирование() Экспорт
	
	Возврат ВыполнитьДокументированиеНаСервере();
	
КонецФункции

&НаСервере
Функция ВыполнитьДокументированиеНаСервере()
	
	Документирование	= Истина;	
	СтруктураРезультата	= Новый Структура;
	СтруктураРезультата.Вставить("НаименованиеОтчета"	, "Декларация по акцизам на алкогольную продукцию");
	СтруктураРезультата.Вставить("НаименованиеФормы"	, "2019Кв1");
	
	ТаблицаОписаний		= СформироватьТаблицуОписаний();
	
	// проверки Титульного листа
	ПроверкаКС_1_01(СтруктураРезультата);
	
	// проверки Раздела 1
	ПроверкаКС_2_01(СтруктураРезультата);
	ПроверкаКС_2_02(СтруктураРезультата);
	ПроверкаКС_2_03(СтруктураРезультата);
	ПроверкаКС_2_04(СтруктураРезультата);
	ПроверкаКС_2_05(СтруктураРезультата);
	ПроверкаКС_2_06(СтруктураРезультата);
	ПроверкаКС_2_07(СтруктураРезультата);
	ПроверкаКС_2_08(СтруктураРезультата);
	ПроверкаКС_2_09(СтруктураРезультата);
	ПроверкаКС_2_10(СтруктураРезультата);
	
	// проверки Раздела 2
	ПроверкаКС_3_01(СтруктураРезультата);
	ПроверкаКС_3_02(СтруктураРезультата);
	ПроверкаКС_3_03(СтруктураРезультата);
	ПроверкаКС_3_04(СтруктураРезультата);
	ПроверкаКС_3_05(СтруктураРезультата);
	ПроверкаКС_3_06(СтруктураРезультата);
	ПроверкаКС_3_07(СтруктураРезультата);
	ПроверкаКС_3_08(СтруктураРезультата);
	
	// проверки Приложения 1
	ПроверкаКС_4_01(СтруктураРезультата);
	ПроверкаКС_4_02(СтруктураРезультата);
	ПроверкаКС_4_03(СтруктураРезультата);
	ПроверкаКС_4_04(СтруктураРезультата);
	ПроверкаКС_4_05(СтруктураРезультата);
	ПроверкаКС_4_06(СтруктураРезультата);
	ПроверкаКС_4_07(СтруктураРезультата);
	ПроверкаКС_4_08(СтруктураРезультата);
	ПроверкаКС_4_09(СтруктураРезультата);
	ПроверкаКС_4_10(СтруктураРезультата);
	
	// проверки Приложения 2
	ПроверкаКС_5_01(СтруктураРезультата);
	ПроверкаКС_5_02(СтруктураРезультата);
	ПроверкаКС_5_03(СтруктураРезультата);
	ПроверкаКС_5_04(СтруктураРезультата);
	ПроверкаКС_5_05(СтруктураРезультата);
	ПроверкаКС_5_06(СтруктураРезультата);
	ПроверкаКС_5_07(СтруктураРезультата);
	ПроверкаКС_5_08(СтруктураРезультата);
	ПроверкаКС_5_09а(СтруктураРезультата);
	ПроверкаКС_5_09б(СтруктураРезультата);
	ПроверкаКС_5_10а(СтруктураРезультата);
	ПроверкаКС_5_10б(СтруктураРезультата);
	ПроверкаКС_5_11(СтруктураРезультата);
	ПроверкаКС_5_12(СтруктураРезультата);
	ПроверкаКС_5_13(СтруктураРезультата);
	
	// проверки Приложения 3
	ПроверкаКС_6_01(СтруктураРезультата);
	ПроверкаКС_6_02(СтруктураРезультата);
	ПроверкаКС_6_03(СтруктураРезультата);
	ПроверкаКС_6_04(СтруктураРезультата);
	ПроверкаКС_6_05(СтруктураРезультата);
	ПроверкаКС_6_06(СтруктураРезультата);
	
	// проверки Приложения 4
	ПроверкаКС_7_01(СтруктураРезультата);
	ПроверкаКС_7_02(СтруктураРезультата);
	ПроверкаКС_7_03(СтруктураРезультата);
	ПроверкаКС_7_04(СтруктураРезультата);
	ПроверкаКС_7_05(СтруктураРезультата);
	ПроверкаКС_7_06(СтруктураРезультата);
	ПроверкаКС_7_07(СтруктураРезультата);
	ПроверкаКС_7_08(СтруктураРезультата);
	ПроверкаКС_7_09(СтруктураРезультата);
	
	// проверки Приложения 5
	ПроверкаКС_8_01(СтруктураРезультата);
	ПроверкаКС_8_02(СтруктураРезультата);
	ПроверкаКС_8_03(СтруктураРезультата);
	ПроверкаКС_8_04(СтруктураРезультата);
	ПроверкаКС_8_05(СтруктураРезультата);
	ПроверкаКС_8_06(СтруктураРезультата);
	ПроверкаКС_8_07(СтруктураРезультата);
	ПроверкаКС_8_08(СтруктураРезультата);
	ПроверкаКС_8_09(СтруктураРезультата);
	ПроверкаКС_8_10(СтруктураРезультата);
	ПроверкаКС_8_11(СтруктураРезультата);
	ПроверкаКС_8_12(СтруктураРезультата);
	ПроверкаКС_8_13(СтруктураРезультата);
	ПроверкаКС_8_14(СтруктураРезультата);
	ПроверкаКС_8_15(СтруктураРезультата);
	ПроверкаКС_8_16(СтруктураРезультата);
	ПроверкаКС_8_17(СтруктураРезультата);
	ПроверкаКС_8_18(СтруктураРезультата);
	ПроверкаКС_8_19(СтруктураРезультата);
	ПроверкаКС_8_20(СтруктураРезультата);
	ПроверкаКС_8_21(СтруктураРезультата);
	ПроверкаКС_8_22(СтруктураРезультата);
	ПроверкаКС_8_23(СтруктураРезультата);
	ПроверкаКС_8_24(СтруктураРезультата);
	ПроверкаКС_8_25(СтруктураРезультата);
	ПроверкаКС_8_26(СтруктураРезультата);
	ПроверкаКС_8_27(СтруктураРезультата);
	ПроверкаКС_8_28(СтруктураРезультата);
	ПроверкаКС_8_29(СтруктураРезультата);
	ПроверкаКС_8_30(СтруктураРезультата);
	
	// проверки Приложения 6
	ПроверкаКС_9_01(СтруктураРезультата);
	ПроверкаКС_9_02(СтруктураРезультата);
	ПроверкаКС_9_03(СтруктураРезультата);
	ПроверкаКС_9_04(СтруктураРезультата);
	ПроверкаКС_9_05(СтруктураРезультата);
	ПроверкаКС_9_06(СтруктураРезультата);
	ПроверкаКС_9_07(СтруктураРезультата);
	ПроверкаКС_9_08(СтруктураРезультата);
	ПроверкаКС_9_09(СтруктураРезультата);
	ПроверкаКС_9_10(СтруктураРезультата);
	ПроверкаКС_9_11(СтруктураРезультата);
	ПроверкаКС_9_12(СтруктураРезультата);
	ПроверкаКС_9_13(СтруктураРезультата);
	ПроверкаКС_9_14(СтруктураРезультата);
	ПроверкаКС_9_15(СтруктураРезультата);
	ПроверкаКС_9_16(СтруктураРезультата);
	ПроверкаКС_9_17(СтруктураРезультата);
	ПроверкаКС_9_18(СтруктураРезультата);
	ПроверкаКС_9_19(СтруктураРезультата);
	ПроверкаКС_9_20(СтруктураРезультата);
	ПроверкаКС_9_21(СтруктураРезультата);
	ПроверкаКС_9_22(СтруктураРезультата);
	ПроверкаКС_9_23(СтруктураРезультата);
	ПроверкаКС_9_24(СтруктураРезультата);
	ПроверкаКС_9_25(СтруктураРезультата);
	ПроверкаКС_9_26(СтруктураРезультата);
	ПроверкаКС_9_27(СтруктураРезультата);
	ПроверкаКС_9_28(СтруктураРезультата);
	ПроверкаКС_9_29(СтруктураРезультата);
	ПроверкаКС_9_30(СтруктураРезультата);
	ПроверкаКС_9_31(СтруктураРезультата);
	ПроверкаКС_9_32(СтруктураРезультата);
	ПроверкаКС_9_33(СтруктураРезультата);
	ПроверкаКС_9_34(СтруктураРезультата);
	ПроверкаКС_9_35(СтруктураРезультата);
	ПроверкаКС_9_36(СтруктураРезультата);
	ПроверкаКС_9_37(СтруктураРезультата);
	ПроверкаКС_9_38(СтруктураРезультата);
	ПроверкаКС_9_39(СтруктураРезультата);
	ПроверкаКС_9_40(СтруктураРезультата);
	ПроверкаКС_9_41(СтруктураРезультата);
	ПроверкаКС_9_42(СтруктураРезультата);
	ПроверкаКС_9_43(СтруктураРезультата);
	ПроверкаКС_9_44(СтруктураРезультата);
	ПроверкаКС_9_45(СтруктураРезультата);
	ПроверкаКС_9_46(СтруктураРезультата);
	ПроверкаКС_9_47(СтруктураРезультата);
	ПроверкаКС_9_48(СтруктураРезультата);
	ПроверкаКС_9_49(СтруктураРезультата);
	ПроверкаКС_9_50(СтруктураРезультата);
	ПроверкаКС_9_51(СтруктураРезультата);
	ПроверкаКС_9_52(СтруктураРезультата);
	ПроверкаКС_9_53(СтруктураРезультата);
	ПроверкаКС_9_54(СтруктураРезультата);
	ПроверкаКС_9_55(СтруктураРезультата);
	ПроверкаКС_9_56(СтруктураРезультата);
	ПроверкаКС_9_57(СтруктураРезультата);
	ПроверкаКС_9_58(СтруктураРезультата);
	ПроверкаКС_9_59(СтруктураРезультата);
	ПроверкаКС_9_60(СтруктураРезультата);
	ПроверкаКС_9_61(СтруктураРезультата);
	ПроверкаКС_9_62(СтруктураРезультата);
	ПроверкаКС_9_63(СтруктураРезультата);
	ПроверкаКС_9_64(СтруктураРезультата);
	ПроверкаКС_9_65(СтруктураРезультата);
	ПроверкаКС_9_66(СтруктураРезультата);
	ПроверкаКС_9_67(СтруктураРезультата);
	ПроверкаКС_9_68(СтруктураРезультата);
	ПроверкаКС_9_69(СтруктураРезультата);
	ПроверкаКС_9_70(СтруктураРезультата);
	ПроверкаКС_9_71(СтруктураРезультата);
	ПроверкаКС_9_72(СтруктураРезультата);
	ПроверкаКС_9_73(СтруктураРезультата);
	ПроверкаКС_9_74(СтруктураРезультата);
	ПроверкаКС_9_75(СтруктураРезультата);
	ПроверкаКС_9_76(СтруктураРезультата);
	ПроверкаКС_9_77(СтруктураРезультата);
	ПроверкаКС_9_78(СтруктураРезультата);
	ПроверкаКС_9_79(СтруктураРезультата);
	ПроверкаКС_9_80(СтруктураРезультата);
	ПроверкаКС_9_81(СтруктураРезультата);
	ПроверкаКС_9_82(СтруктураРезультата);
	ПроверкаКС_9_83(СтруктураРезультата);
	
	АдресТаблицыОписаний = ПоместитьВоВременноеХранилище(ТаблицаОписаний, Новый УникальныйИдентификатор);
	СтруктураРезультата.Вставить("АдресТаблицыОписаний", АдресТаблицыОписаний);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция СформироватьТаблицуОписаний()
	
	ТипСтрока20		= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(20));
	ТипСтрока100	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипСтрока900	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(900));
	ТипБулево		= Новый ОписаниеТипов("Булево");
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("НомерКС"			, ТипСтрока20);
	ТаблицаОписаний.Колонки.Добавить("Раздел"			, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеКС"		, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Нарушение"		, ТипСтрока100);
	ТаблицаОписаний.Колонки.Добавить("ОписаниеОшибки"	, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Условие"			, ТипСтрока900);
	ТаблицаОписаний.Колонки.Добавить("Комментарий"		, ТипСтрока900);
	
	Возврат ТаблицаОписаний;
	
КонецФункции // СформироватьТаблицуОписаний;()

#КонецОбласти

#Область КС_Проверки

#Область КС_Проверки_Титульного_листа

&НаСервере
Процедура ПроверкаКС_1_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='1.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Титульный лист'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"			, 
		НСтр("ru='Контрольное соотношение не распространяется на плательщиков акциза, указанных в п.3.1 ст.204 НК РФ'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Титульного листа (КС 1.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='п.1 ст.119, п.1 ст.126 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата представления первичного отчета должна быть <= установленному п.5 ст.204 НК РФ сроку '") +
		НСтр("ru='представления налоговой декларации по акцизам на алкогольную продукцию'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Возможно нарушение установленного срока представления отчета'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р00С001"		, "ДатаПодписи");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатели(Показатели, ДанныеКС.Раздел0);
	
	ГодУстановленногоСрока	= Формат(?(ДанныеКС.МесОтчета = 12, ДанныеКС.ГодОтчета + 1, ДанныеКС.ГодОтчета), 
		"ЧЦ=4; ЧВН=; ЧГ=0");
	МесУстановленногоСрока	= Формат(?(ДанныеКС.МесОтчета = 12, 1, ДанныеКС.МесОтчета + 1), "ЧЦ=2; ЧВН=");
	УстановленныйСрок		= СтроковыеФункцииКлиентСервер.СтрокаВДату("25." + МесУстановленногоСрока + "." + 
		ГодУстановленногоСрока);
	УстановленныйСрокСтр	= Формат(УстановленныйСрок, "ДФ=dd.MM.yy; ДП=(...)");
	
	Настройки.ЭтоОшибка = ДанныеКС.Отчет.Вид = 0 И Показатели.Р00С001.Значение > УстановленныйСрок;
	Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
		Показатели.Р00С001.ЗначениеСтр, УстановленныйСрокСтр);
		
	ДополнитьСтруктуруОшибок(Настройки);
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_1

&НаСервере
Процедура ПроверкаКС_2_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода ОКТМО в стр.010 Раздела 1 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение ОКТМО %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не указан код ОКТМО'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С010"		, "П000010001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	ЗарегистрироватьФормулу(Настройки);
	ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С010, ДанныеКС.Раздел1);
	
	Настройки.ЭтоОшибка = РазделЗаполнен(ДанныеКС.Раздел1) И НЕ ЗначениеЗаполнено(Показатели.Р01С010.Значение);
	Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С010.ЗначениеСтр);
	ДополнитьСтруктуруОшибок(Настройки);
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_02(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация отложена'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода ОКТМО в стр.010 Раздела 1 должно соответствовать Общероссийскому '") +
		НСтр("ru='классификатору территорий муниципальных образований'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код ОКТМО'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода бюджетной классификации в стр.020 Раздела 1 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение КБК %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не указан код бюджетной классификации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	КолвоСтрок = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р01С020.ИмяПоказателя);
	Раздел1Заполнен	= РазделЗаполнен(ДанныеКС.Раздел1);
	
	Для Счетчик = 1 По КолвоСтрок Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, XMLСтрока(Счетчик));
		
		Настройки.ЭтоОшибка = Раздел1Заполнен И НЕ ЗначениеЗаполнено(Показатели.Р01С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода бюджетной классификации в стр.020 Раздела 1 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код бюджетной классификации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р01С020.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		КолвоСтрок = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р01С020.ИмяПоказателя);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, ДанныеКС.Раздел1, XMLСтрока(Счетчик));
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р01С020.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С020.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода срока уплаты в стр.030 Раздела 1 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код срока уплаты'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	ИменаПоказателей.Вставить("Р01С030"		, "П00001М203000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р01С030.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		КолвоСтрок1 = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р01С020.ИмяПоказателя);
		
		Для Счетчик1 = 1 По КолвоСтрок1 Цикл
			Показатели.Р01С030.ИмяПоказателя = Лев(Показатели.Р01С030.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			ДлинаПоказателя = СтрДлина(Показатели.Р01С030.ИмяПоказателя);
			КолвоСтрок2 = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р01С030.ИмяПоказателя, Ложь);
		
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				ЗарегистрироватьФормулу(Настройки);
				Показатели.Р01С030.ИмяПоказателя = Лев(Показатели.Р01С030.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С030, ДанныеКС.Раздел1, XMLСтрока(Счетчик2), Ложь);
				
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р01С030.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С030.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Ст.040 Раздела 1 с кодом срока уплаты 03, 04 (или с пустым значением кода срока уплаты в стр.030 '") +
		НСтр("ru='Раздела 1) должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40001 и КБК. '") +
		НСтр("ru='Если несколько сумм акциза, рассчитанных по разным видам подакцизных товаров, подлежат зачислению '") +
		НСтр("ru='на один и тот же КБК, для заполнения стр.040 Раздела 1 необходимо определить конечный результат '") +
		НСтр("ru='расчета с бюджетом по соответствующему КБК.'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ШаблонРасшифровки2"	, НСтр("ru='%1 = %2 - %3 Итог [%4] по КБК %5'"));
	Настройки.Вставить("ШаблонРасшифровки3"	, НСтр("ru='%1 = %2 - %3 + %4 - %5 Итог [%6] по КБК %7'"));
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	ИменаПоказателей.Вставить("Р01С041"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С042"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С050"		, "П00001М105000_");
	ИменаПоказателей.Вставить("Р01С060"		, "П00001М106000_");
	ИменаПоказателей.Вставить("Р24Г021"		, "П000240000002");
	ИменаПоказателей.Вставить("Р24Г022"		, "П000240000002");
	ИменаПоказателей.Вставить("Р26Г021"		, "П00241М100002_");
	ИменаПоказателей.Вставить("Р26Г022"		, "П00241М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ИменаР2 = Новый Массив;
	ИменаР2.Добавить("Р24Г021");
	ИменаР2.Добавить("Р24Г022");
	ИменаР2.Добавить("Р26Г021");
	ИменаР2.Добавить("Р26Г022");
	
	РезультатЗапроса = ПолучитьЗапросПоСводнымДанным();
	ВыборкаР1 = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Показатели.Р24Г022.Инверсия = Истина;
	Показатели.Р26Г022.Инверсия = Истина;
	
	Пока ВыборкаР1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаР21	= 0;
		СуммаР22	= 0;
		СуммаР23	= 0;
		СуммаР24	= 0;
		Сумма1		= 0;
		Сумма2		= 0;
		Сумма3		= 0;
		
		Источник = ИсточникИзВыборки(ВыборкаР1, Показатели.Р01С020, ВыборкаР1.Строка_);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, Источник, ВыборкаР1.Строка_);
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Р01С041) Тогда
				Продолжить;
			КонецЕсли;
			
			Источник = ИсточникИзВыборки(Выборка, Показатели.Р01С041, Выборка.Строка_, Выборка.Строка2);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С041, Источник, Выборка.Строка2, Ложь);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("КБК", ВыборкаР1.Р01С020)) Тогда
			
			СуммаР21	= ВыборкаР2.Р24Г021;
			СуммаР22	= ВыборкаР2.Р24Г022;
			СуммаР23	= ВыборкаР2.Р26Г021;
			СуммаР24	= ВыборкаР2.Р26Г022;
			Сумма1		= СуммаР21 - СуммаР22;
			Сумма2		= СуммаР23 - СуммаР24;
			Сумма3		= СуммаР21 - СуммаР22 + СуммаР23 - СуммаР24;
			
			Выборка = ВыборкаР2.Выбрать();
			
			Для Счетчик = 0 По 3 Цикл
				Пока Выборка.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(Выборка[ИменаР2[Счетчик]]) Тогда
						Продолжить;
					КонецЕсли;
					
					Источник = ИсточникИзВыборки(Выборка, Показатели[ИменаР2[Счетчик]], Выборка.Строка_);
					Показатели[ИменаР2[Счетчик]].Дополнение = "страница " + Выборка.Страница + ", код товара " 
						+ Выборка.КодТовара + ", код показателя " + Выборка.КодПоказателя;
					ЗаполнитьИРасшифроватьПоказатель(Показатели[ИменаР2[Счетчик]], Источник, Выборка.Строка_);
				КонецЦикла;
				
				Если Счетчик = 0 И СуммаР21 = Сумма3 Тогда
					Прервать;
				ИначеЕсли Счетчик = 1 И (Сумма1 <= 0 ИЛИ Сумма2 >= 0) Тогда
					Прервать;
				КонецЕсли;
				
				Выборка.Сбросить();
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаР21 = 0 И Сумма1 = 0 Тогда
			РасчетнаяСумма = СуммаР21;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				ВыборкаР1.Р01С041, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		ИначеЕсли Сумма1 <= 0 ИЛИ Сумма2 >= 0 Тогда
			РасчетнаяСумма = Макс(Сумма1, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки2,
				ВыборкаР1.Р01С041, СуммаР21, СуммаР22, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		Иначе
			РасчетнаяСумма = Макс(Сумма3, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки3,
				ВыборкаР1.Р01С041, СуммаР21, СуммаР22, СуммаР23, СуммаР24, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		КонецЕсли;
			
		Настройки.ЭтоОшибка = НЕ ВыборкаР1.Р01С041 = РасчетнаяСумма;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Ст.040 Раздела 1 с кодом срока уплаты 01, 02 в стр.030 Раздела 1 должна быть равна гр.2 '") +
		НСтр("ru='подраздела 2.4.1 Раздела 2 по коду показателя 60005, 60006, 60007, 60009 и КБК. Если '") +
		НСтр("ru='несколько сумм акциза, рассчитанных по разным видам подакцизных товаров, подлежат зачислению '") +
		НСтр("ru='на один и тот же КБК, для заполнения стр.040 Раздела 1 необходимо определить конечный результат '") +
		НСтр("ru='расчета с бюджетом по соответствующему КБК.'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза, подлежащей уплате в бюджет'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ШаблонРасшифровки2"	, НСтр("ru='%1 = %2 - %3 Итог [%4] по КБК %5'"));
	Настройки.Вставить("ШаблонРасшифровки3"	, НСтр("ru='%1 = %2 - %3 + %4 - %5 Итог [%6] по КБК %7'"));
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	ИменаПоказателей.Вставить("Р01С041"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С042"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С050"		, "П00001М105000_");
	ИменаПоказателей.Вставить("Р01С060"		, "П00001М106000_");
	ИменаПоказателей.Вставить("Р24Г021"		, "П000240000002");
	ИменаПоказателей.Вставить("Р24Г022"		, "П000240000002");
	ИменаПоказателей.Вставить("Р26Г021"		, "П00241М100002_");
	ИменаПоказателей.Вставить("Р26Г022"		, "П00241М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ИменаР2 = Новый Массив;
	ИменаР2.Добавить("Р26Г021");
	ИменаР2.Добавить("Р26Г022");
	ИменаР2.Добавить("Р24Г021");
	ИменаР2.Добавить("Р24Г022");
	
	РезультатЗапроса = ПолучитьЗапросПоСводнымДанным();
	ВыборкаР1 = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Показатели.Р24Г022.Инверсия = Истина;
	Показатели.Р26Г022.Инверсия = Истина;
	
	Пока ВыборкаР1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаР21	= 0;
		СуммаР22	= 0;
		СуммаР23	= 0;
		СуммаР24	= 0;
		Сумма1		= 0;
		Сумма2		= 0;
		Сумма3		= 0;
		
		Источник = ИсточникИзВыборки(ВыборкаР1, Показатели.Р01С020, ВыборкаР1.Строка_);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, Источник, ВыборкаР1.Строка_);
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Р01С042) Тогда
				Продолжить;
			КонецЕсли;
			
			Источник = ИсточникИзВыборки(Выборка, Показатели.Р01С042, Выборка.Строка_, Выборка.Строка2);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С042, Источник, Выборка.Строка2, Ложь);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("КБК", ВыборкаР1.Р01С020)) Тогда
			
			СуммаР21	= ВыборкаР2.Р26Г021;
			СуммаР22	= ВыборкаР2.Р26Г022;
			СуммаР23	= ВыборкаР2.Р24Г021;
			СуммаР24	= ВыборкаР2.Р24Г022;
			Сумма1		= СуммаР21 - СуммаР22;
			Сумма2		= СуммаР23 - СуммаР24;
			Сумма3		= СуммаР21 - СуммаР22 + СуммаР23 - СуммаР24;
			
			Выборка = ВыборкаР2.Выбрать();
			
			Для Счетчик = 0 По 3 Цикл
				Пока Выборка.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(Выборка[ИменаР2[Счетчик]]) Тогда
						Продолжить;
					КонецЕсли;
					
					Источник = ИсточникИзВыборки(Выборка, Показатели[ИменаР2[Счетчик]], Выборка.Строка_);
					Показатели[ИменаР2[Счетчик]].Дополнение = "страница " + Выборка.Страница + ", код товара " 
						+ Выборка.КодТовара + ", код показателя " + Выборка.КодПоказателя;
					ЗаполнитьИРасшифроватьПоказатель(Показатели[ИменаР2[Счетчик]], Источник, Выборка.Строка_);
				КонецЦикла;
				
				Если Счетчик = 0 И СуммаР21 = Сумма3 Тогда
					Прервать;
				ИначеЕсли Счетчик = 1 И (Сумма1 <= 0 ИЛИ Сумма2 >= 0) Тогда
					Прервать;
				КонецЕсли;
				
				Выборка.Сбросить();
			КонецЦикла;
		КонецЕсли;
		
		Если СуммаР21 = 0 И Сумма1 = 0 Тогда
			РасчетнаяСумма = СуммаР21;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				ВыборкаР1.Р01С042, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		ИначеЕсли Сумма1 <= 0 ИЛИ Сумма2 >= 0 Тогда
			РасчетнаяСумма = Макс(Сумма1, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки2,
				ВыборкаР1.Р01С042, СуммаР21, СуммаР22, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		Иначе
			РасчетнаяСумма = Макс(Сумма3, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки3,
				ВыборкаР1.Р01С042, СуммаР21, СуммаР22, СуммаР23, СуммаР24, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		КонецЕсли;
			
		Настройки.ЭтоОшибка = НЕ ВыборкаР1.Р01С042 = РасчетнаяСумма;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Ст.050 Раздела 1 должна быть равна гр.2 подраздела 2.4 Раздела 2 по коду показателя 40002 и КБК. '") +
		НСтр("ru='Если несколько сумм акциза, рассчитанных по разным видам подакцизных товаров, подлежат зачислению '") +
		НСтр("ru='на один и тот же КБК, для заполнения стр.050 Раздела 1 необходимо определить конечный результат '") +
		НСтр("ru='расчета с бюджетом по соответствующему КБК.'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза, начисленная к уменьшению'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ШаблонРасшифровки2"	, НСтр("ru='%1 = %2 - %3 Итог [%4] по КБК %5'"));
	Настройки.Вставить("ШаблонРасшифровки3"	, НСтр("ru='%1 = %2 - %3 + %4 - %5 Итог [%6] по КБК %7'"));
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	ИменаПоказателей.Вставить("Р01С041"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С042"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С050"		, "П00001М105000_");
	ИменаПоказателей.Вставить("Р01С060"		, "П00001М106000_");
	ИменаПоказателей.Вставить("Р24Г021"		, "П000240000002");
	ИменаПоказателей.Вставить("Р24Г022"		, "П000240000002");
	ИменаПоказателей.Вставить("Р26Г021"		, "П00241М100002_");
	ИменаПоказателей.Вставить("Р26Г022"		, "П00241М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ИменаР2 = Новый Массив;
	ИменаР2.Добавить("Р24Г022");
	ИменаР2.Добавить("Р24Г021");
	ИменаР2.Добавить("Р26Г022");
	ИменаР2.Добавить("Р26Г021");
	
	РезультатЗапроса = ПолучитьЗапросПоСводнымДанным();
	ВыборкаР1 = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Показатели.Р24Г021.Инверсия = Истина;
	Показатели.Р26Г021.Инверсия = Истина;
	
	Пока ВыборкаР1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаР21	= 0;
		СуммаР22	= 0;
		СуммаР23	= 0;
		СуммаР24	= 0;
		Сумма1		= 0;
		Сумма2		= 0;
		Сумма3		= 0;
		
		Источник = ИсточникИзВыборки(ВыборкаР1, Показатели.Р01С020, ВыборкаР1.Строка_);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, Источник, ВыборкаР1.Строка_);
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Р01С050) Тогда
				Продолжить;
			КонецЕсли;
			
			Источник = ИсточникИзВыборки(Выборка, Показатели.Р01С050, Выборка.Строка_);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С050, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("КБК", ВыборкаР1.Р01С020)) Тогда
			
			СуммаР21	= ВыборкаР2.Р24Г022;
			СуммаР22	= ВыборкаР2.Р24Г021;
			СуммаР23	= ВыборкаР2.Р26Г022;
			СуммаР24	= ВыборкаР2.Р26Г021;
			Сумма1		= СуммаР21 - СуммаР22;
			Сумма2		= СуммаР23 - СуммаР24;
			Сумма3		= СуммаР21 - СуммаР22 + СуммаР23 - СуммаР24;
			
			Выборка = ВыборкаР2.Выбрать();
			
			Для Счетчик = 0 По 3 Цикл
				Пока Выборка.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(Выборка[ИменаР2[Счетчик]]) Тогда
						Продолжить;
					КонецЕсли;
					
					Источник = ИсточникИзВыборки(Выборка, Показатели[ИменаР2[Счетчик]], Выборка.Строка_);
					Показатели[ИменаР2[Счетчик]].Дополнение = "страница " + Выборка.Страница + ", код товара " 
						+ Выборка.КодТовара + ", код показателя " + Выборка.КодПоказателя;
					ЗаполнитьИРасшифроватьПоказатель(Показатели[ИменаР2[Счетчик]], Источник, Выборка.Строка_);
				КонецЦикла;
				
				Если Счетчик = 0 И СуммаР21 = Сумма3 Тогда
					Прервать;
				ИначеЕсли Счетчик = 1 И (Сумма1 <= 0 ИЛИ Сумма2 >= 0) Тогда
					Прервать;
				КонецЕсли;
				
				Выборка.Сбросить();
			КонецЦикла;
		КонецЕсли; 
			
		Если СуммаР21 = 0 И Сумма1 = 0 Тогда
			РасчетнаяСумма = СуммаР21;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				ВыборкаР1.Р01С050, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		ИначеЕсли Сумма1 <= 0 ИЛИ Сумма2 >= 0 Тогда
			РасчетнаяСумма = Макс(Сумма1, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки2,
				ВыборкаР1.Р01С050, СуммаР21, СуммаР22, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		Иначе
			РасчетнаяСумма = Макс(Сумма3, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки3,
				ВыборкаР1.Р01С050, СуммаР21, СуммаР22, СуммаР23, СуммаР24, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ ВыборкаР1.Р01С050 = РасчетнаяСумма;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_2_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Ст.060 Раздела 1 должна быть равна гр.2 подраздела 2.4.1 Раздела 2 по коду показателя 60008 и КБК. '") +
		НСтр("ru='Если несколько сумм акциза, рассчитанных по разным видам подакцизных товаров, подлежат зачислению '") +
		НСтр("ru='на один и тот же КБК, для заполнения стр.060 Раздела 1 необходимо определить конечный результат '") +
		НСтр("ru='расчета с бюджетом по соответствующему КБК.'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по КБК %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза, подлежащая возврату при реорганизации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ШаблонРасшифровки2"	, НСтр("ru='%1 = %2 - %3 Итог [%4] по КБК %5'"));
	Настройки.Вставить("ШаблонРасшифровки3"	, НСтр("ru='%1 = %2 - %3 + %4 - %5 Итог [%6] по КБК %7'"));
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"		, "П00001М102000_");
	ИменаПоказателей.Вставить("Р01С041"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С042"		, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С050"		, "П00001М105000_");
	ИменаПоказателей.Вставить("Р01С060"		, "П00001М106000_");
	ИменаПоказателей.Вставить("Р24Г021"		, "П000240000002");
	ИменаПоказателей.Вставить("Р24Г022"		, "П000240000002");
	ИменаПоказателей.Вставить("Р26Г021"		, "П00241М100002_");
	ИменаПоказателей.Вставить("Р26Г022"		, "П00241М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	ИменаР2 = Новый Массив;
	ИменаР2.Добавить("Р26Г022");
	ИменаР2.Добавить("Р26Г021");
	ИменаР2.Добавить("Р24Г022");
	ИменаР2.Добавить("Р24Г021");
	
	РезультатЗапроса = ПолучитьЗапросПоСводнымДанным();
	ВыборкаР1 = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Показатели.Р24Г021.Инверсия = Истина;
	Показатели.Р26Г021.Инверсия = Истина;
	
	Пока ВыборкаР1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаР21	= 0;
		СуммаР22	= 0;
		СуммаР23	= 0;
		СуммаР24	= 0;
		Сумма1		= 0;
		Сумма2		= 0;
		Сумма3		= 0;
		
		Источник = ИсточникИзВыборки(ВыборкаР1, Показатели.Р01С020, ВыборкаР1.Строка_);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С020, Источник, ВыборкаР1.Строка_);
		
		Выборка = ВыборкаР1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.Р01С060) Тогда
				Продолжить;
			КонецЕсли;
			
			Источник = ИсточникИзВыборки(Выборка, Показатели.Р01С060, Выборка.Строка_);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С060, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("КБК", ВыборкаР1.Р01С020)) Тогда
			
			СуммаР21	= ВыборкаР2.Р26Г022;
			СуммаР22	= ВыборкаР2.Р26Г021;
			СуммаР23	= ВыборкаР2.Р24Г022;
			СуммаР24	= ВыборкаР2.Р24Г021;
			Сумма1		= СуммаР21 - СуммаР22;
			Сумма2		= СуммаР23 - СуммаР24;
			Сумма3		= СуммаР21 - СуммаР22 + СуммаР23 - СуммаР24;
			
			Выборка = ВыборкаР2.Выбрать();
			
			Для Счетчик = 0 По 3 Цикл
				Пока Выборка.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(Выборка[ИменаР2[Счетчик]]) Тогда
						Продолжить;
					КонецЕсли;
					
					Источник = ИсточникИзВыборки(Выборка, Показатели[ИменаР2[Счетчик]], Выборка.Строка_);
					Показатели[ИменаР2[Счетчик]].Дополнение = "страница " + Выборка.Страница + ", код товара " 
						+ Выборка.КодТовара + ", код показателя " + Выборка.КодПоказателя;
					ЗаполнитьИРасшифроватьПоказатель(Показатели[ИменаР2[Счетчик]], Источник, Выборка.Строка_);
				КонецЦикла;
				
				Если Счетчик = 0 И СуммаР21 = Сумма3 Тогда
					Прервать;
				ИначеЕсли Счетчик = 1 И (Сумма1 <= 0 ИЛИ Сумма2 >= 0) Тогда
					Прервать;
				КонецЕсли;
				
				Выборка.Сбросить();
			КонецЦикла;
		КонецЕсли; 
			
		Если СуммаР21 = 0 И Сумма1 = 0 Тогда
			РасчетнаяСумма = СуммаР21;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				ВыборкаР1.Р01С060, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		ИначеЕсли Сумма1 <= 0 ИЛИ Сумма2 >= 0 Тогда
			РасчетнаяСумма = Макс(Сумма1, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки2,
				ВыборкаР1.Р01С060, СуммаР21, СуммаР22, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		Иначе
			РасчетнаяСумма = Макс(Сумма3, 0);
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки3,
				ВыборкаР1.Р01С060, СуммаР21, СуммаР22, СуммаР23, СуммаР24, РасчетнаяСумма, Показатели.Р01С020.ЗначениеСтр);
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ ВыборкаР1.Р01С060 = РасчетнаяСумма;
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросПоСводнымДанным()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел11.КБК КАК КБК,
	|	Раздел11.КодСрока КАК КодСрока,
	|	Раздел11.Р01С040 КАК Р01С041,
	|	0 КАК Р01С042,
	|	0 КАК Р01С050,
	|	0 КАК Р01С060,
	|	Раздел11.Отчет КАК Отчет,
	|	Раздел11.Страница КАК Страница,
	|	Раздел11.Строка_ КАК Строка_,
	|	Раздел11.Строка2 КАК Строка2
	|ПОМЕСТИТЬ ВТ_Раздел1
	|ИЗ
	|	ВТ_Р1а КАК Раздел11
	|ГДЕ
	|	Раздел11.Отчет = &Отчет
	|	И Раздел11.КодСрока В ("""", ""03"", ""04"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Раздел12.КБК,
	|	Раздел12.КодСрока,
	|	0,
	|	Раздел12.Р01С040,
	|	0,
	|	0,
	|	Раздел12.Отчет,
	|	Раздел12.Страница,
	|	Раздел12.Строка_,
	|	Раздел12.Строка2
	|ИЗ
	|	ВТ_Р1а КАК Раздел12
	|ГДЕ
	|	Раздел12.Отчет = &Отчет
	|	И Раздел12.КодСрока В (""01"", ""02"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Раздел13.КБК,
	|	0,
	|	0,
	|	0,
	|	Раздел13.Р01С050,
	|	Раздел13.Р01С060,
	|	Раздел13.Отчет,
	|	Раздел13.Страница,
	|	Раздел13.Строка_,
	|	0
	|ИЗ
	|	ВТ_Р1б КАК Раздел13
	|ГДЕ
	|	Раздел13.Отчет = &Отчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел21.КБК КАК КБК,
	|	Раздел21.КодТовара КАК КодТовара,
	|	Раздел21.КодПоказателя КАК КодПоказателя,
	|	Раздел21.Р24Г002 КАК Р24Г021,
	|	0 КАК Р26Г021,
	|	0 КАК Р24Г022,
	|	0 КАК Р26Г022,
	|	Раздел21.Отчет КАК Отчет,
	|	Раздел21.Страница КАК Страница,
	|	0 КАК Строка_
	|ПОМЕСТИТЬ ВТ_Раздел2
	|ИЗ
	|	ВТ_Р24 КАК Раздел21
	|ГДЕ
	|	Раздел21.Отчет = &Отчет
	|	И Раздел21.КодПоказателя = ""40001""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Раздел22.КБК,
	|	Раздел22.КодТовара,
	|	Раздел22.КодПоказателя,
	|	0,
	|	Раздел22.Р26Г002,
	|	0,
	|	0,
	|	Раздел22.Отчет,
	|	Раздел22.Страница,
	|	Раздел22.Строка_
	|ИЗ
	|	ВТ_Р26 КАК Раздел22
	|ГДЕ
	|	Раздел22.Отчет = &Отчет
	|	И Раздел22.КодПоказателя В (""60005"", ""60006"", ""60007"", ""60009"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Раздел23.КБК,
	|	Раздел23.КодТовара,
	|	Раздел23.КодПоказателя,
	|	0,
	|	0,
	|	Раздел23.Р24Г002,
	|	0,
	|	Раздел23.Отчет,
	|	Раздел23.Страница,
	|	0
	|ИЗ
	|	ВТ_Р24 КАК Раздел23
	|ГДЕ
	|	Раздел23.Отчет = &Отчет
	|	И Раздел23.КодПоказателя В (""40002"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Раздел24.КБК,
	|	Раздел24.КодТовара,
	|	Раздел24.КодПоказателя,
	|	0,
	|	0,
	|	0,
	|	Раздел24.Р26Г002,
	|	Раздел24.Отчет,
	|	Раздел24.Страница,
	|	Раздел24.Строка_
	|ИЗ
	|	ВТ_Р26 КАК Раздел24
	|ГДЕ
	|	Раздел24.Отчет = &Отчет
	|	И Раздел24.КодПоказателя В (""60008"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел1.КБК КАК Р01С020,
	|	ВТ_Раздел1.КодСрока КАК КодСрока,
	|	ВТ_Раздел1.Р01С041 КАК Р01С041,
	|	ВТ_Раздел1.Р01С042 КАК Р01С042,
	|	ВТ_Раздел1.Р01С050 КАК Р01С050,
	|	ВТ_Раздел1.Р01С060 КАК Р01С060,
	|	ВТ_Раздел1.Отчет КАК Отчет,
	|	ВТ_Раздел1.Страница КАК Страница,
	|	ВТ_Раздел1.Строка_ КАК Строка_,
	|	ВТ_Раздел1.Строка2 КАК Строка2
	|ИЗ
	|	ВТ_Раздел1 КАК ВТ_Раздел1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Р01С020,
	|	Страница,
	|	Строка_,
	|	Строка2
	|ИТОГИ
	|	МИНИМУМ(Отчет),
	|	МИНИМУМ(Страница),
	|	МИНИМУМ(Строка_),
	|	СУММА(Р01С041),
	|	СУММА(Р01С042),
	|	СУММА(Р01С050),
	|	СУММА(Р01С060)
	|ПО
	|	Р01С020
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Раздел2.КБК КАК КБК,
	|	ВТ_Раздел2.КодТовара КАК КодТовара,
	|	ВТ_Раздел2.КодПоказателя КАК КодПоказателя,
	|	ВТ_Раздел2.Р24Г021 КАК Р24Г021,
	|	ВТ_Раздел2.Р26Г021 КАК Р26Г021,
	|	ВТ_Раздел2.Р24Г022 КАК Р24Г022,
	|	ВТ_Раздел2.Р26Г022 КАК Р26Г022,
	|	ВТ_Раздел2.Отчет КАК Отчет,
	|	ВТ_Раздел2.Страница КАК Страница,
	|	ВТ_Раздел2.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Раздел2 КАК ВТ_Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	КБК,
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р24Г021),
	|	СУММА(Р26Г021),
	|	СУММА(Р24Г022),
	|	СУММА(Р26Г022)
	|ПО
	|	КБК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Раздел1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Раздел2";
	
	Возврат Запрос.ВыполнитьПакет();

КонецФункции // ПолучитьЗапросПоСводнымДанным()

&НаСервере
Процедура ПроверкаКС_2_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='2.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 1 (КС 2.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма акциза, подлежащая возврату в стр.060 Раздела 1 >= 0, если код формы реорганизации '") +
		НСтр("ru='на Титульном листе = 0 '"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза, подлежащая зачету (возврату)'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р00С003"		, "КодФормыРеорганизации");
	ИменаПоказателей.Вставить("Р01С060"		, "П00001М106000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	КолвоСтрок = КоличествоСтрок(ДанныеКС.Раздел1, Показатели.Р01С060.ИмяПоказателя);
	
	Для Счетчик = 1 По КолвоСтрок Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р00С003, ДанныеКС.Раздел0);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.Р01С060, ДанныеКС.Раздел1, XMLСтрока(Счетчик));
		
		Настройки.ЭтоОшибка = НЕ Показатели.Р01С060.Значение >= 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р01С060.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Раздела_2

&НаСервере
Процедура ПроверкаКС_3_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида подакцизного товара в стр.010 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010"		, "П000020001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.Р02С010.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р02С010, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р02С010.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р02С010.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 подр. 2.1 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р21Г001"		, "П00021М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р21Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.Р21Г001.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р21Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р21Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 подр. 2.2 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р22Г001"		, "П00022М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р22Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.Р22Г001.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р22Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р22Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 подр. 2.3 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р23Г001"		, "П00023М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р23Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.Р23Г001.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р23Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р23Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 подр. 2.4 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р24Г001"		, "П000240000001");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.Р24Г001.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.Р24Г001, СтраницаРаздела);
		
			Настройки.ЭтоОшибка = Список.Получить(Показатели.Р24Г001.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р24Г001.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 подр. 2.4.1 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р26Г001"		, "П00241М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р26Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.Р26Г001.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р26Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р26Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р26Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 подр. 2.5 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р25Г001"		, "П00025М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.Р25Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Раздел2 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.Р25Г001.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р25Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.Р25Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.Р25Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_3_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='3.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Раздел 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Раздела 2 (КС 3.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_1

&НаСервере
Процедура ПроверкаКС_4_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида подакцизного товара в стр.010 Приложения 1 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01С010"		, "П001010001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П01С010.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01С010, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П01С010.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П01С010.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 подр. 2.1 Раздела 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г001"		, "П00101М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П01Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение1 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П01Г001.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П01Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П01Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 232, 271, 272, 284, 285, 310, 320, 330 или не '") +
		НСтр("ru='заполнен, код показателя в гр.1 = 10001, 10006-10012, 10020, 10022 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.010 Приложения 1 должна равняться гр.3 подраздела 2.1 Раздела 2 по кодам подакцизных '") +
		НСтр("ru='товаров 232, 271, 272, 284, 285, 310, 320, 330 и кодам показателей 10001, 10006-10012, 10020, 10022'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТБезПересчета);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р21);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел21.КодТовара + Раздел21.КодПоказателя КАК Ключ,
	|	Раздел21.КодТовара КАК КодТовара,
	|	Раздел21.КодПоказателя КАК КодПоказателя,
	|	Раздел21.Р21Г003 КАК Р21Г003,
	|	Раздел21.Отчет КАК Отчет,
	|	Раздел21.Страница КАК Страница,
	|	Раздел21.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р21 КАК Раздел21
	|ГДЕ
	|	Раздел21.Отчет = &Отчет
	|	И Раздел21.КодТовара В(&МассивКодовТоваров)
	|	И Раздел21.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р21Г003)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г004 КАК П01Г004,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	СУММА(П01Г004)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г004"		, "П00101М100004_");
	ИменаПоказателей.Вставить("Р21Г003"		, "П00021М100003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г004;
		СуммаР21	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г004, Выборка.Строка_);
			Показатели.П01Г004.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г004, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР21	= ВыборкаР2.Р21Г003;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р21Г003, Выборка.Строка_);
				Показатели.Р21Г003.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г003, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР21;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР21, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 232, 271, 272, 284, 285, 310, 320, 330 или не '") +
		НСтр("ru='заполнен, код показателя в гр.1 = 20001-20015 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.010 Приложения 1 должна равняться гр.3 подраздела 2.2 Раздела 2 по кодам подакцизных '") +
		НСтр("ru='товаров 232, 271, 272, 284, 285, 310, 320, 330 и кодам показателей 20001-20015'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТБезПересчета);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р22);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел22.КодТовара + Раздел22.КодПоказателя КАК Ключ,
	|	Раздел22.КодТовара КАК КодТовара,
	|	Раздел22.КодПоказателя КАК КодПоказателя,
	|	Раздел22.Р22Г003 КАК Р22Г003,
	|	Раздел22.Отчет КАК Отчет,
	|	Раздел22.Страница КАК Страница,
	|	Раздел22.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р22 КАК Раздел22
	|ГДЕ
	|	Раздел22.Отчет = &Отчет
	|	И Раздел22.КодТовара В(&МассивКодовТоваров)
	|	И Раздел22.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р22Г003)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г004 КАК П01Г004,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	СУММА(П01Г004)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г004"		, "П00101М100004_");
	ИменаПоказателей.Вставить("Р22Г003"		, "П00022М100003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г004;
		СуммаР22	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г004, Выборка.Строка_);
			Показатели.П01Г004.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г004, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР22	= ВыборкаР2.Р22Г003;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р22Г003, Выборка.Строка_);
				Показатели.Р22Г003.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г003, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР22;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР22, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 232, 271, 272, 284, 285, 310, 320, 330 или не '") +
		НСтр("ru='заполнен, код показателя в гр.1 = 30001-30005, 30008-30010, 30012 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.010 Приложения 1 должна равняться гр.2 подраздела 2.3 Раздела 2 по кодам подакцизных '") +
		НСтр("ru='товаров 232, 271, 272, 284, 285, 310, 320, 330 и кодам показателей 30001-30005, 30008-30010, 30012'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТБезПересчета);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р23);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел23.КодТовара + Раздел23.КодПоказателя КАК Ключ,
	|	Раздел23.КодТовара КАК КодТовара,
	|	Раздел23.КодПоказателя КАК КодПоказателя,
	|	Раздел23.Р23Г002 КАК Р23Г002,
	|	Раздел23.Отчет КАК Отчет,
	|	Раздел23.Страница КАК Страница,
	|	Раздел23.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р23 КАК Раздел23
	|ГДЕ
	|	Раздел23.Отчет = &Отчет
	|	И Раздел23.КодТовара В(&МассивКодовТоваров)
	|	И Раздел23.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р23Г002)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г004 КАК П01Г004,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	СУММА(П01Г004)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г004"		, "П00101М100004_");
	ИменаПоказателей.Вставить("Р23Г002"		, "П00023М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г004;
		СуммаР23	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г004, Выборка.Строка_);
			Показатели.П01Г004.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г004, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР23	= ВыборкаР2.Р23Г002;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р23Г002, Выборка.Строка_);
				Показатели.Р23Г002.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г002, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР23;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР23, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 232, 271, 272, 284, 285, 310, 320, 330 или не '") +
		НСтр("ru='заполнен, код показателя в гр.1 = 50001-50011 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.010 Приложения 1 должна равняться гр.2 подраздела 2.5 Раздела 2 по кодам подакцизных товаров '") +
		НСтр("ru='232, 271, 272, 284, 285, 310, 320, 330, кодам показателей 50001-50011, соответствующему коду НП и году'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, году %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТБезПересчета);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р25);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел25.КодТовара + Раздел25.КодПоказателя + Раздел25.Р25Г004 + Раздел25.Р25Г005 КАК Ключ,
	|	Раздел25.КодТовара КАК КодТовара,
	|	Раздел25.КодПоказателя КАК КодПоказателя,
	|	Раздел25.Р25Г002 КАК Р25Г002,
	|	Раздел25.Р25Г004 КАК Р25Г004,
	|	Раздел25.Р25Г005 КАК Р25Г005,
	|	Раздел25.Отчет КАК Отчет,
	|	Раздел25.Страница КАК Страница,
	|	Раздел25.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р25 КАК Раздел25
	|ГДЕ
	|	Раздел25.Отчет = &Отчет
	|	И Раздел25.КодТовара В(&МассивКодовТоваров)
	|	И Раздел25.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р25Г002)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя + Приложение1.П01Г006 + Приложение1.П01Г007 КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г004 КАК П01Г004,
	|	Приложение1.П01Г006 КАК П01Г006,
	|	Приложение1.П01Г007 КАК П01Г007,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	МИНИМУМ(П01Г006),
	|	МИНИМУМ(П01Г007),
	|	СУММА(П01Г004)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г004"		, "П00101М100004_");
	ИменаПоказателей.Вставить("Р25Г002"		, "П00025М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г004;
		СуммаР25	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г004, Выборка.Строка_);
			Показатели.П01Г004.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г004, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР25	= ВыборкаР2.Р25Г002;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р25Г002, Выборка.Строка_);
				Показатели.Р25Г002.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р25Г002, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР25;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР25, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя),
			ЗначениеСтр(ВыборкаП1.П01Г006), ЗначениеСтр(ВыборкаП1.П01Г007));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 111, 121, 130, 140, 150, 160, 161, 162, '") +
		НСтр("ru='163, 164, 165, 170, 224, 231, 291, 292, 293 или не заполнен, код показателя в гр.1 = '") +
		НСтр("ru='10001, 10006-10012, 10020, 10022 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.010 Приложения 1 должна равняться гр.3 подраздела 2.1 Раздела 2 по кодам подакцизных '") +
		НСтр("ru='товаров 111, 121, 130, 140, 150, 160, 161, 162, 163, 164, 165, 170, 224, 231, 291, 292, 293 и '") +
		НСтр("ru='кодам показателей 10001, 10006-10012, 10020, 10022'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТСПересчетом);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р21);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел21.КодТовара + Раздел21.КодПоказателя КАК Ключ,
	|	Раздел21.КодТовара КАК КодТовара,
	|	Раздел21.КодПоказателя КАК КодПоказателя,
	|	Раздел21.Р21Г003 КАК Р21Г003,
	|	Раздел21.Отчет КАК Отчет,
	|	Раздел21.Страница КАК Страница,
	|	Раздел21.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р21 КАК Раздел21
	|ГДЕ
	|	Раздел21.Отчет = &Отчет
	|	И Раздел21.КодТовара В(&МассивКодовТоваров)
	|	И Раздел21.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р21Г003)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г005 КАК П01Г005,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	СУММА(П01Г005)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г005"		, "П00101М100005_");
	ИменаПоказателей.Вставить("Р21Г003"		, "П00021М100003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г005;
		СуммаР21	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г005, Выборка.Строка_);
			Показатели.П01Г005.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г005, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР21	= ВыборкаР2.Р21Г003;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р21Г003, Выборка.Строка_);
				Показатели.Р21Г003.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р21Г003, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР21;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР21, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 111, 121, 130, 140, 150, 160, 161, 162, '") +
		НСтр("ru='163, 164, 165, 170, 224, 231, 291, 292, 293 или не заполнен, код показателя в гр.1 = '") +
		НСтр("ru='20001-20015 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.010 Приложения 1 должна равняться гр.3 подраздела 2.2 Раздела 2 по кодам подакцизных '") +
		НСтр("ru='товаров 111, 121, 130, 140, 150, 160, 161, 162, 163, 164, 165, 170, 224, 231, 291, 292, 293 и '") +
		НСтр("ru='кодам показателей 20001-20015'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТСПересчетом);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р22);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел22.КодТовара + Раздел22.КодПоказателя КАК Ключ,
	|	Раздел22.КодТовара КАК КодТовара,
	|	Раздел22.КодПоказателя КАК КодПоказателя,
	|	Раздел22.Р22Г003 КАК Р22Г003,
	|	Раздел22.Отчет КАК Отчет,
	|	Раздел22.Страница КАК Страница,
	|	Раздел22.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р22 КАК Раздел22
	|ГДЕ
	|	Раздел22.Отчет = &Отчет
	|	И Раздел22.КодТовара В(&МассивКодовТоваров)
	|	И Раздел22.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р22Г003)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г005 КАК П01Г005,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	СУММА(П01Г005)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г005"		, "П00101М100005_");
	ИменаПоказателей.Вставить("Р22Г003"		, "П00022М100003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г005;
		СуммаР22	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г005, Выборка.Строка_);
			Показатели.П01Г005.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г005, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР22	= ВыборкаР2.Р22Г003;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р22Г003, Выборка.Строка_);
				Показатели.Р22Г003.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р22Г003, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР22;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР22, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 111, 121, 130, 140, 150, 160, 161, 162, '") +
		НСтр("ru='163, 164, 165, 170, 224, 231, 291, 292, 293 или не заполнен, код показателя в гр.1 = '") +
		НСтр("ru='30001-30005, 30008-30010, 30012 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.010 Приложения 1 должна равняться гр.2 подраздела 2.3 Раздела 2 по кодам подакцизных '") +
		НСтр("ru='товаров 111, 121, 130, 140, 150, 160, 161, 162, 163, 164, 165, 170, 224, 231, 291, 292, 293 и '") +
		НСтр("ru='кодам показателей 30001-30005, 30008-30010, 30012'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТСПересчетом);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р23);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел23.КодТовара + Раздел23.КодПоказателя КАК Ключ,
	|	Раздел23.КодТовара КАК КодТовара,
	|	Раздел23.КодПоказателя КАК КодПоказателя,
	|	Раздел23.Р23Г002 КАК Р23Г002,
	|	Раздел23.Отчет КАК Отчет,
	|	Раздел23.Страница КАК Страница,
	|	Раздел23.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р23 КАК Раздел23
	|ГДЕ
	|	Раздел23.Отчет = &Отчет
	|	И Раздел23.КодТовара В(&МассивКодовТоваров)
	|	И Раздел23.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р23Г002)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г005 КАК П01Г005,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	СУММА(П01Г005)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г005"		, "П00101М100005_");
	ИменаПоказателей.Вставить("Р23Г002"		, "П00023М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г005;
		СуммаР23	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г005, Выборка.Строка_);
			Показатели.П01Г005.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г005, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР23	= ВыборкаР2.Р23Г002;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р23Г002, Выборка.Строка_);
				Показатели.Р23Г002.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р23Г002, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР23;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР23, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_4_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='4.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 1'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код подакцизного товара в стр.010 Приложения 1 = 111, 121, 130, 140, 150, 160, 161, 162, '") +
		НСтр("ru='163, 164, 165, 170, 224, 231, 291, 292, 293 или не заполнен, код показателя в гр.1 = '") +
		НСтр("ru='50001-50011 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 1 (КС 4.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.010 Приложения 1 должна равняться гр.2 подраздела 2.5 Раздела 2 по кодам подакцизных '") +
		НСтр("ru='товаров 111, 121, 130, 140, 150, 160, 161, 162, 163, 164, 165, 170, 224, 231, 291, 292, 293, '") +
		НСтр("ru='кодам показателей 50001-50011, соответствующему коду НП и году'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, году %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовТоваров"		, ДанныеКС.МассивКодовПТСПересчетом);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, ДанныеКС.МассивКодовПТ_Р25);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел25.КодТовара + Раздел25.КодПоказателя + Раздел25.Р25Г004 + Раздел25.Р25Г005 КАК Ключ,
	|	Раздел25.КодТовара КАК КодТовара,
	|	Раздел25.КодПоказателя КАК КодПоказателя,
	|	Раздел25.Р25Г002 КАК Р25Г002,
	|	Раздел25.Р25Г004 КАК Р25Г004,
	|	Раздел25.Р25Г005 КАК Р25Г005,
	|	Раздел25.Отчет КАК Отчет,
	|	Раздел25.Страница КАК Страница,
	|	Раздел25.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р25 КАК Раздел25
	|ГДЕ
	|	Раздел25.Отчет = &Отчет
	|	И Раздел25.КодТовара В(&МассивКодовТоваров)
	|	И Раздел25.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р25Г002)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение1.КодТовара + Приложение1.КодПоказателя + Приложение1.П01Г006 + Приложение1.П01Г007 КАК Ключ,
	|	Приложение1.КодТовара КАК КодТовара,
	|	Приложение1.КодПоказателя КАК КодПоказателя,
	|	Приложение1.П01Г005 КАК П01Г005,
	|	Приложение1.П01Г006 КАК П01Г006,
	|	Приложение1.П01Г007 КАК П01Г007,
	|	Приложение1.Отчет КАК Отчет,
	|	Приложение1.Страница КАК Страница,
	|	Приложение1.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_П01 КАК Приложение1
	|ГДЕ
	|	Приложение1.Отчет = &Отчет
	|	И Приложение1.КодТовара В(&МассивКодовТоваров)
	|	И Приложение1.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(КодПоказателя),
	|	МИНИМУМ(П01Г006),
	|	МИНИМУМ(П01Г007),
	|	СУММА(П01Г005)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01Г005"		, "П00101М100005_");
	ИменаПоказателей.Вставить("Р25Г002"		, "П00025М100002_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП1 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП1.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП01	= ВыборкаП1.П01Г005;
		СуммаР25	= 0;
		
		Выборка = ВыборкаП1.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели.П01Г005, Выборка.Строка_);
			Показатели.П01Г005.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П01Г005, Источник, Выборка.Строка_);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП1.Ключ)) Тогда
			
			СуммаР25	= ВыборкаР2.Р25Г002;
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели.Р25Г002, Выборка.Строка_);
				Показатели.Р25Г002.Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели.Р25Г002, Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП01 = СуммаР25;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП01, СуммаР25, ЗначениеСтр(ВыборкаП1.КодТовара), ЗначениеСтр(ВыборкаП1.КодПоказателя),
			ЗначениеСтр(ВыборкаП1.П01Г006), ЗначениеСтр(ВыборкаП1.П01Г007));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_2

&НаСервере
Процедура ПроверкаКС_5_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода признака документа в стр.001 Приложения 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код признака документа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С001"		, "П001020000103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П02С001.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С001, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П02С001.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02С001.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение номера банковской гарантии в стр.010 Приложения 2 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение номера банковской гарантии %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не указан номер банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С010"		, "П001020001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С010, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П02С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата выдачи банковской гарантии в стр.020 Приложения 2 <= стр.030 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная дата выдачи банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С020"		, "П001020002003");
	ИменаПоказателей.Вставить("П02С030"		, "П001020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02С020.Значение <= Показатели.П02С030.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С020.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С030.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата начала действия банковской гарантии в стр.030 Приложения 2 >= стр.020 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная дата начала действия банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С030"		, "П001020003003");
	ИменаПоказателей.Вставить("П02С020"		, "П001020002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02С030.Значение >= Показатели.П02С020.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С030.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата окончания действия банковской гарантии в стр.040 Приложения 2 > стр.020, 030 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 > %2, %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная дата окончания действия банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С040"		, "П001020004003");
	ИменаПоказателей.Вставить("П02С020"		, "П001020002003");
	ИменаПоказателей.Вставить("П02С030"		, "П001020003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ (Показатели.П02С040.Значение 
			> Показатели.П02С020.Значение И Показатели.П02С040.Значение > Показатели.П02С030.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С040.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С020.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%3", Показатели.П02С030.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма банковской гарантии в стр.050 Приложения 2 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С050"		, "П001020005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ Показатели.П02С050.Значение > 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С050.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Превышение суммы акциза в стр.055 Приложения 2 должно быть равно сумме стр.100 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С055"		, "П001020005503");
	ИменаПоказателей.Вставить("П02С100"		, "П00102М110000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С055, СтраницаРаздела);
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П02С100.ИмяПоказателя, 14));
		Показатели.П02С100.Итог = 0;
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С100, СтраницаРаздела, XMLСтрока(Счетчик));
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П02С055.Значение = Показатели.П02С100.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П02С055.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П02С100.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида подакцизного товара в стр.060 Приложения 2 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С060"		, "П00102М106000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П02С060.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П02С060.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С060, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П02С060.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П02С060.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_09а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.9а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код показателя в гр.3 стр.070 Приложения 2 = 20001, 20008, 20012 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.9а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.070 Приложения 2 >= гр.3 подраздела 2.2 Раздела 2 по соответствующему '") +
		НСтр("ru='коду подакцизного товара и кодам показателей 20001, 20008, 20012'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru='%1 >= %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательП2", "П02В074");
	Настройки.Вставить("ПоказательР2", "Р22Г003");
	ПроверкаКС_5_09(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_09б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.9б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код показателя в гр.3 стр.070 Приложения 2 = 20001, 20008, 20012 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.9б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.070 Приложения 2 >= гр.4 подраздела 2.2 Раздела 2 по соответствующему '") +
		НСтр("ru='коду подакцизного товара и кодам показателей 20001, 20008, 20012'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru='%1 >= %2 по коду товара %3, коду показателя %4'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательП2", "П02В075");
	Настройки.Вставить("ПоказательР2", "Р22Г004");
	ПроверкаКС_5_09(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_09(Настройки, СтруктураРезультата)
	
	Перем Показатели;
	
	ПоказательП2 = Настройки.ПоказательП2;
	ПоказательР2 = Настройки.ПоказательР2;
	
	МассивКодовПоказателей = Новый Массив;
	МассивКодовПоказателей.Добавить("");
	МассивКодовПоказателей.Добавить("20001");
	МассивКодовПоказателей.Добавить("20008");
	МассивКодовПоказателей.Добавить("20012");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, МассивКодовПоказателей);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел22.КодТовара + Раздел22.КодПоказателя КАК Ключ,
	|	Раздел22.КодТовара КАК КодТовара,
	|	Раздел22.КодПоказателя КАК КодПоказателя,
	|	Раздел22.Р22Г003 КАК Р22Г003,
	|	Раздел22.Р22Г004 КАК Р22Г004,
	|	Раздел22.Отчет КАК Отчет,
	|	Раздел22.Страница КАК Страница,
	|	Раздел22.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р22 КАК Раздел22
	|ГДЕ
	|	Раздел22.Отчет = &Отчет
	|	И Раздел22.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р22Г003),
	|	СУММА(Р22Г004)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2.КодТовара + Приложение2.П02В073 КАК Ключ,
	|	Приложение2.КодТовара КАК КодТовара,
	|	Приложение2.П02В073 КАК П02В073,
	|	Приложение2.П02В074 КАК П02В074,
	|	Приложение2.П02В075 КАК П02В075,
	|	Приложение2.Отчет КАК Отчет,
	|	Приложение2.Страница КАК Страница,
	|	Приложение2.Строка_ КАК Строка_,
	|	Приложение2.Строка2 КАК Строка2
	|ИЗ
	|	ВТ_П21 КАК Приложение2
	|ГДЕ
	|	Приложение2.Отчет = &Отчет
	|	И Приложение2.П02В073 В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_,
	|	Строка2
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(П02В073),
	|	СУММА(П02В074),
	|	СУММА(П02В075)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02В074"		, "П00102М207004_");
	ИменаПоказателей.Вставить("П02В075"		, "П00102М207005_");
	ИменаПоказателей.Вставить("Р22Г003"		, "П00022М100003_");
	ИменаПоказателей.Вставить("Р22Г004"		, "П00022М100004_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП2.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП02	= ВыборкаП2[ПоказательП2];
		СуммаР22	= 0;
		
		Выборка = ВыборкаП2.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели[ПоказательП2], Выборка.Строка_, Выборка.Строка2);
			Показатели[ПоказательП2].Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_ 
				+ "," + Выборка.Строка2;
			ЗаполнитьИРасшифроватьПоказатель(Показатели[ПоказательП2], Источник, Выборка.Строка2, Ложь);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП2.Ключ)) Тогда
			
			СуммаР22	= ВыборкаР2[ПоказательР2];
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели[ПоказательР2], Выборка.Строка_);
				Показатели[ПоказательР2].Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели[ПоказательР2], Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП02 >= СуммаР22;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП02, СуммаР22, ЗначениеСтр(ВыборкаП2.КодТовара), ЗначениеСтр(ВыборкаП2.П02В073));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_10а(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.10а'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код показателя в гр.3 стр.080 Приложения 2 = 50003, 50008, 50009 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.10а)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.4 стр.080 Приложения 2 = гр.2 подраздела 2.5 Раздела 2 по соответствующему '") +
		НСтр("ru='коду подакцизного товара, кодам показателей 50003, 50008, 50009, коду НП и года'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательП2", "П02В084");
	Настройки.Вставить("ПоказательР2", "Р25Г002");
	ПроверкаКС_5_10(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_10б(СтруктураРезультата)
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.10б'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, 
		НСтр("ru='Код показателя в гр.3 стр.080 Приложения 2 = 50003, 50008, 50009 или не заполнен'"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.10б)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Гр.5 стр.080 Приложения 2 = гр.3 подраздела 2.5 Раздела 2 по соответствующему '") +
		НСтр("ru='коду подакцизного товара, кодам показателей 50003, 50008, 50009, коду НП и года'"));
	Заголовки.Вставить("ШаблонРасшифровки"	
		, НСтр("ru='%1 = %2 по коду товара %3, коду показателя %4, коду НП %5, коду года %6'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Вставить("ПоказательП2", "П02В085");
	Настройки.Вставить("ПоказательР2", "Р25Г003");
	ПроверкаКС_5_10(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_10(Настройки, СтруктураРезультата)
	
	Перем Показатели;
	
	ПоказательП2 = Настройки.ПоказательП2;
	ПоказательР2 = Настройки.ПоказательР2;
	
	МассивКодовПоказателей = Новый Массив;
	МассивКодовПоказателей.Добавить("");
	МассивКодовПоказателей.Добавить("50003");
	МассивКодовПоказателей.Добавить("50008");
	МассивКодовПоказателей.Добавить("50009");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеКС.ВременныеТаблицы;
	Запрос.УстановитьПараметр("Отчет"		, ДанныеКС.Отчет);
	Запрос.УстановитьПараметр("МассивКодовПоказателей"	, МассивКодовПоказателей);
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Раздел25.КодТовара + Раздел25.КодПоказателя + Раздел25.Р25Г004 + Раздел25.Р25Г005 КАК Ключ,
	|	Раздел25.КодТовара КАК КодТовара,
	|	Раздел25.КодПоказателя КАК КодПоказателя,
	|	Раздел25.Р25Г002 КАК Р25Г002,
	|	Раздел25.Р25Г003 КАК Р25Г003,
	|	Раздел25.Р25Г004 КАК Р25Г004,
	|	Раздел25.Р25Г005 КАК Р25Г005,
	|	Раздел25.Отчет КАК Отчет,
	|	Раздел25.Страница КАК Страница,
	|	Раздел25.Строка_ КАК Строка_
	|ИЗ
	|	ВТ_Р25 КАК Раздел25
	|ГДЕ
	|	Раздел25.Отчет = &Отчет
	|	И Раздел25.КодПоказателя В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_
	|ИТОГИ
	|	СУММА(Р25Г002),
	|	СУММА(Р25Г003)
	|ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2.КодТовара + Приложение2.П02В083 + Приложение2.П02В086 + Приложение2.П02В087 КАК Ключ,
	|	Приложение2.КодТовара КАК КодТовара,
	|	Приложение2.П02В083 КАК П02В083,
	|	Приложение2.П02В084 КАК П02В084,
	|	Приложение2.П02В085 КАК П02В085,
	|	Приложение2.П02В086 КАК П02В086,
	|	Приложение2.П02В087 КАК П02В087,
	|	Приложение2.Отчет КАК Отчет,
	|	Приложение2.Страница КАК Страница,
	|	Приложение2.Строка_ КАК Строка_,
	|	Приложение2.Строка2 КАК Строка2
	|ИЗ
	|	ВТ_П22 КАК Приложение2
	|ГДЕ
	|	Приложение2.Отчет = &Отчет
	|	И Приложение2.П02В083 В(&МассивКодовПоказателей)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Страница,
	|	Строка_,
	|	Строка2
	|ИТОГИ
	|	МИНИМУМ(КодТовара),
	|	МИНИМУМ(П02В083),
	|	МИНИМУМ(П02В086),
	|	МИНИМУМ(П02В087),
	|	СУММА(П02В084),
	|	СУММА(П02В085)
	|ПО
	|	Ключ";	
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02В084"		, "П00102М308004_");
	ИменаПоказателей.Вставить("П02В085"		, "П00102М308005_");
	ИменаПоказателей.Вставить("Р25Г002"		, "П00025М100002_");
	ИменаПоказателей.Вставить("Р25Г003"		, "П00025М100003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаП2 = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаР2 = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаП2.Следующий() Цикл
		
		ЗарегистрироватьФормулу(Настройки);
		СуммаП02	= ВыборкаП2[ПоказательП2];
		СуммаР25	= 0;
		
		Выборка = ВыборкаП2.Выбрать();
		Пока Выборка.Следующий() Цикл
			Источник = ИсточникИзВыборки(Выборка, Показатели[ПоказательП2], Выборка.Строка_, Выборка.Строка2);
			Показатели[ПоказательП2].Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_ 
				+ "," + Выборка.Строка2;
			ЗаполнитьИРасшифроватьПоказатель(Показатели[ПоказательП2], Источник, Выборка.Строка2, Ложь);
		КонецЦикла; 
		
		Если ВыборкаР2.НайтиСледующий(Новый Структура("Ключ", ВыборкаП2.Ключ)) Тогда
			
			СуммаР25	= ВыборкаР2[ПоказательР2];
			Выборка		= ВыборкаР2.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Источник = ИсточникИзВыборки(Выборка, Показатели[ПоказательР2], Выборка.Строка_);
				Показатели[ПоказательР2].Дополнение = "Страница " + Выборка.Страница + ", строка " + Выборка.Строка_;
				ЗаполнитьИРасшифроватьПоказатель(Показатели[ПоказательР2], Источник, Выборка.Строка_);
			КонецЦикла;
			
			Выборка.Сбросить();
		КонецЕсли;
		
		Настройки.ЭтоОшибка = НЕ СуммаП02 = СуммаР25;
		Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
			СуммаП02, СуммаР25, ЗначениеСтр(ВыборкаП2.КодТовара), ЗначениеСтр(ВыборкаП2.П02В083), 
			ЗначениеСтр(ВыборкаП2.П02В086), ЗначениеСтр(ВыборкаП2.П02В087));
		ДополнитьСтруктуруОшибок(Настройки);
		ВыборкаР2.Сбросить();
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_5_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='5.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 2'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 2 (КС 5.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Превышение суммы акциза в стр.100 Приложения 2 = стр.070 - стр.080 - стр.090 Приложения 2 '") +
		НСтр("ru='по каждому коду подакцизного товара в стр.060 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2 - %3 - %4 Итог [%5]'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С100"		, "П00102М110000_");
	ИменаПоказателей.Вставить("П02С070"		, "П00102М207005_");
	ИменаПоказателей.Вставить("П02С080"		, "П00102М308005_");
	ИменаПоказателей.Вставить("П02С090"		, "П00102М409005_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение2 Цикл
		КолвоСтрок1 = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П02С100.ИмяПоказателя, 14));
		
		Для Счетчик1 = 1 По КолвоСтрок1 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С100, СтраницаРаздела, XMLСтрока(Счетчик1));
			
			Показатели.П02С070.ИмяПоказателя = Лев(Показатели.П02С070.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			Показатели.П02С080.ИмяПоказателя = Лев(Показатели.П02С080.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			Показатели.П02С090.ИмяПоказателя = Лев(Показатели.П02С090.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			ДлинаПоказателя = СтрДлина(Показатели.П02С070.ИмяПоказателя);
			
			Показатели.П02С070.Итог = 0;
			КолвоСтрок2 = КоличествоСтрок(СтраницаРаздела, Показатели.П02С070.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				Показатели.П02С070.ИмяПоказателя = Лев(Показатели.П02С070.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С070, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
			КонецЦикла;
			
			Показатели.П02С080.Итог = 0;
			КолвоСтрок2 = КоличествоСтрок(СтраницаРаздела, Показатели.П02С080.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				Показатели.П02С080.ИмяПоказателя = Лев(Показатели.П02С080.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С080, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
			КонецЦикла;
			
			Показатели.П02С090.Итог = 0;
			КолвоСтрок2 = КоличествоСтрок(СтраницаРаздела, Показатели.П02С090.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				Показатели.П02С090.ИмяПоказателя = Лев(Показатели.П02С090.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П02С090, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
			КонецЦикла;
			
			РасчетнаяСумма = Показатели.П02С070.Итог - Показатели.П02С080.Итог - Показатели.П02С090.Итог;
			Настройки.ЭтоОшибка = НЕ Показатели.П02С100.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Настройки.ШаблонРасшифровки,
				Показатели.П02С100.Значение, Показатели.П02С070.Итог, Показатели.П02С080.Итог, Показатели.П02С090.Итог, 
				РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_3

&НаСервере
Процедура ПроверкаКС_6_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ИНН организации - покупателя в стр.010 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение ИНН %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении ИНН'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С010"		, "П001030001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С010, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П03С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КПП организации - покупателя в стр.020 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение КПП %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении КПП'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С020"		, "П001030002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С020, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П03С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение регистрационного номера в стр.030 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение регистрационного номера %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении регистрационного номера'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С030"		, "П001030003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С030, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П03С030.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С030.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение даты регистрации в стр.040 Приложения 3 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение даты регистрации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении даты регистрации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03С040"		, "П001030004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П03С040, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П03С040.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03С040.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода показателя в гр.1 Приложения 3 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код показателя'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П03Г001"		, "П00103М100001_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П03Г001.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение3 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П03Г001.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П03Г001, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П03Г001.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П03Г001.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_6_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='6.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 3'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 3 (КС 6.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_4

&НаСервере
Процедура ПроверкаКС_7_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение признака организации в стр.001 Приложения 4 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан признак организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С001"		, "П001040000103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П04С001.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С001, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П04С001.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С001.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ИНН организации в стр.010 Приложения 4 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение ИНН %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении ИНН'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С010"		, "П001040001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С010, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П04С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КПП организации в стр.020 Приложения 4 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение КПП %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении КПП'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С020"		, "П001040002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С020, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П04С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение серии и номера свидетельства в стр.030 Приложения 4 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение серии %1 и номера %2 заполнены'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении серии и номера свидетельства'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С0301"	, "П001040003003");
	ИменаПоказателей.Вставить("П04С0302"	, "П001040003004");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
	
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) 
			И НЕ (ЗначениеЗаполнено(Показатели.П04С0301.Значение) И ЗначениеЗаполнено(Показатели.П04С0302.Значение));
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П04С0301.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П04С0302.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида этилового спирта в стр.040 Приложения 4 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С040"		, "П00104М104000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П04С040.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П04С040.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С040, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П04С040.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С040.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение номера счета-фактуры в стр.050 Приложения 4 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение номера счета-фактуры %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении номера счета-фактуры'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С040"		, "П00104М104000_");
	ИменаПоказателей.Вставить("П04С050"		, "П00104М205000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П04С040.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
		КолвоСтрок1 = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П04С040.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
		
		Для Счетчик1 = 1 По КолвоСтрок1 Цикл
			Показатели.П04С050.ИмяПоказателя = Лев(Показатели.П04С050.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			ДлинаПоказателя = СтрДлина(Показатели.П04С050.ИмяПоказателя);
			
			КолвоСтрок2 = КоличествоСтрок(СтраницаРаздела, Показатели.П04С050.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				ЗарегистрироватьФормулу(Настройки);
				Показатели.П04С050.ИмяПоказателя = Лев(Показатели.П04С050.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С050, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
			
				Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П04С050.Значение);
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С050.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение даты счета-фактуры в стр.060 Приложения 4 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение даты счета-фактуры %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении даты счета-фактуры'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С040"		, "П00104М104000_");
	ИменаПоказателей.Вставить("П04С060"		, "П00104М206000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П04С040.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
		КолвоСтрок1 = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П04С040.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
		
		Для Счетчик1 = 1 По КолвоСтрок1 Цикл
			Показатели.П04С060.ИмяПоказателя = Лев(Показатели.П04С060.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			ДлинаПоказателя = СтрДлина(Показатели.П04С060.ИмяПоказателя);
			
			КолвоСтрок2 = КоличествоСтрок(СтраницаРаздела, Показатели.П04С060.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				ЗарегистрироватьФормулу(Настройки);
				Показатели.П04С060.ИмяПоказателя = Лев(Показатели.П04С060.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С060, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
			
				Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П04С060.Значение);
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С060.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема этилового спирта в стр.070 Приложения 4 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение объема этилового спирта %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С040"		, "П00104М104000_");
	ИменаПоказателей.Вставить("П04С070"		, "П00104М207000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П04С040.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
		КолвоСтрок1 = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П04С040.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
		
		Для Счетчик1 = 1 По КолвоСтрок1 Цикл
			Показатели.П04С070.ИмяПоказателя = Лев(Показатели.П04С070.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			ДлинаПоказателя = СтрДлина(Показатели.П04С070.ИмяПоказателя);
			
			КолвоСтрок2 = КоличествоСтрок(СтраницаРаздела, Показатели.П04С070.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				ЗарегистрироватьФормулу(Настройки);
				Показатели.П04С070.ИмяПоказателя = Лев(Показатели.П04С070.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С070, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
			
				Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П04С070.Значение);
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П04С070.Значение);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_7_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='7.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 4'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 4 (КС 7.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значения реквизитов корректировочной счета-фактуры в стр.080, 090, 100 Приложения 4 должны '") +
		НСтр("ru='быть заполнены в случае заполнения одного из значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значения %1, %2, %3 заполнены'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении реквизитов корректировочной счета-фактуры'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П04С040"		, "П00104М104000_");
	ИменаПоказателей.Вставить("П04С080"		, "П00104М208000_");
	ИменаПоказателей.Вставить("П04С090"		, "П00104М209000_");
	ИменаПоказателей.Вставить("П04С100"		, "П00104М210000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Показатели.П04С040.Расшифровывать = Ложь;
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение4 Цикл
		КолвоСтрок1 = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П04С040.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
		
		Для Счетчик1 = 1 По КолвоСтрок1 Цикл
			Показатели.П04С080.ИмяПоказателя = Лев(Показатели.П04С080.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			Показатели.П04С090.ИмяПоказателя = Лев(Показатели.П04С090.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			Показатели.П04С100.ИмяПоказателя = Лев(Показатели.П04С100.ИмяПоказателя, 14) + XMLСтрока(Счетчик1) + "_";
			ДлинаПоказателя = СтрДлина(Показатели.П04С080.ИмяПоказателя);
			
			КолвоСтрок2 = КоличествоСтрок(СтраницаРаздела, Показатели.П04С080.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				
				ЗарегистрироватьФормулу(Настройки);
				Показатели.П04С080.ИмяПоказателя = Лев(Показатели.П04С080.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П04С090.ИмяПоказателя = Лев(Показатели.П04С090.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П04С100.ИмяПоказателя = Лев(Показатели.П04С100.ИмяПоказателя, ДлинаПоказателя);
				
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С080, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С090, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П04С100, СтраницаРаздела, XMLСтрока(Счетчик2), Ложь);
				
				Стр080Заполнена = ЗначениеЗаполнено(Показатели.П04С080.Значение);
				Стр090Заполнена = ЗначениеЗаполнено(Показатели.П04С090.Значение);
				Стр100Заполнена = ЗначениеЗаполнено(Показатели.П04С100.Значение);
			
				Настройки.ЭтоОшибка = РазделЗаполнен И НЕ(((Стр080Заполнена ИЛИ Стр090Заполнена ИЛИ Стр100Заполнена) = Ложь) 
					ИЛИ ((Стр080Заполнена И Стр090Заполнена И Стр100Заполнена) = Истина));
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П04С080.ЗначениеСтр);
				Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П04С090.ЗначениеСтр);
				Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%3", Показатели.П04С100.Значение);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_5

&НаСервере
Процедура ПроверкаКС_8_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение регистрационного номера извещения в стр.010 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение регистрационного номера %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении регистрационного номера'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С010"		, "П001050001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С010, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П05С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение даты регистрации извещения в стр.020 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение даты регистрации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении даты регистрации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С020"		, "П001050002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С020, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П05С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ИНН организации в стр.030 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение ИНН организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении ИНН организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С030"		, "П001050003003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С030, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П05С030.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С030.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КПП организации в стр.040 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение КПП организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении КПП организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С040"		, "П001050004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С040, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П05С040.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С040.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида этилового спирта в стр.050 Приложения 5 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С050"		, "П001050005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П05С050.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С050, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П05С050.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С050.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Объем этилового спирта в стр.060 Приложения 5 должен быть равен сумме стр.200 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С060"		, "П001050006003");
	ИменаПоказателей.Вставить("П05С200"		, "П00105М120003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С060, СтраницаРаздела);
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П05С200.ИмяПоказателя, 14));
		Показатели.П05С200.Итог = 0;
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С200, СтраницаРаздела, XMLСтрока(Счетчик));
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П05С060.Значение = Показатели.П05С200.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П05С060.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П05С200.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Объем закупленного спирта в стр.080 Приложения 5 должен быть заполнен'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Объем закупленного спирта %1 заполнен'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема закупленного спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С080"		, "П001050008003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С080, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П05С080.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С080.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма авансового платежа в стр.090 Приложения 5 должна быть заполнена'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Сумма авансового платежа %1 заполнена'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С090"		, "П001050009003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С090, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П05С090.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С090.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Остаток этилового спирта в стр.100 Приложения 5 должен быть равен сумме стр.320 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочный объем остатка этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С100"		, "П001050010003");
	ИменаПоказателей.Вставить("П05С320"		, "П00105М132003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С100, СтраницаРаздела);
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П05С320.ИмяПоказателя, 14));
		Показатели.П05С320.Итог = 0;
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С320, СтраницаРаздела, XMLСтрока(Счетчик));
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П05С100.Значение = Показатели.П05С320.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П05С100.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П05С320.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма авансового платежа в стр.110 Приложения 5 должен быть равен сумме стр.330 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С110"		, "П001050011003");
	ИменаПоказателей.Вставить("П05С330"		, "П00105М133003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С110, СтраницаРаздела);
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П05С330.ИмяПоказателя, 14));
		Показатели.П05С330.Итог = 0;
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С330, СтраницаРаздела, XMLСтрока(Счетчик));
		КонецЦикла;
		
		Настройки.ЭтоОшибка = НЕ Показатели.П05С110.Значение = Показатели.П05С330.Итог;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П05С110.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П05С330.Итог);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение регистрационного номера извещения в стр.120 Приложения 5 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение регистрационного номера %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении регистрационного номера'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С120"		, "П001050012003");
	ИменаПоказателей.Вставить("П05С130"		, "П001050013003");
	ИменаПоказателей.Вставить("П05С140"		, "П001050014003");
	ИменаПоказателей.Вставить("П05С150"		, "П001050015003");
	ИменаПоказателей.Вставить("П05С160"		, "П001050016003");
	ИменаПоказателей.Вставить("П05С170"		, "П001050017003");
	ИменаПоказателей.Вставить("П05С180"		, "П001050018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П05С120);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С120.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С120.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение даты регистрации извещения в стр.130 Приложения 5 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение даты регистрации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении даты регистрации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С120"		, "П001050012003");
	ИменаПоказателей.Вставить("П05С130"		, "П001050013003");
	ИменаПоказателей.Вставить("П05С140"		, "П001050014003");
	ИменаПоказателей.Вставить("П05С150"		, "П001050015003");
	ИменаПоказателей.Вставить("П05С160"		, "П001050016003");
	ИменаПоказателей.Вставить("П05С170"		, "П001050017003");
	ИменаПоказателей.Вставить("П05С180"		, "П001050018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П05С130);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С130.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С130.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_14(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ИНН организации в стр.140 Приложения 5 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение ИНН организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении ИНН организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С120"		, "П001050012003");
	ИменаПоказателей.Вставить("П05С130"		, "П001050013003");
	ИменаПоказателей.Вставить("П05С140"		, "П001050014003");
	ИменаПоказателей.Вставить("П05С150"		, "П001050015003");
	ИменаПоказателей.Вставить("П05С160"		, "П001050016003");
	ИменаПоказателей.Вставить("П05С170"		, "П001050017003");
	ИменаПоказателей.Вставить("П05С180"		, "П001050018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П05С140);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С140.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С140.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_15(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КПП организации в стр.150 Приложения 5 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение КПП организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении КПП организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С120"		, "П001050012003");
	ИменаПоказателей.Вставить("П05С130"		, "П001050013003");
	ИменаПоказателей.Вставить("П05С140"		, "П001050014003");
	ИменаПоказателей.Вставить("П05С150"		, "П001050015003");
	ИменаПоказателей.Вставить("П05С160"		, "П001050016003");
	ИменаПоказателей.Вставить("П05С170"		, "П001050017003");
	ИменаПоказателей.Вставить("П05С180"		, "П001050018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П05С150);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С150.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С150.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_16(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида этилового спирта в стр.160 Приложения 5 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С160"		, "П001050016003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П05С160.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С160, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П05С160.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С160.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_17(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема этилового спирта в стр.170 Приложения 5 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение объема этилового спирта %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С120"		, "П001050012003");
	ИменаПоказателей.Вставить("П05С130"		, "П001050013003");
	ИменаПоказателей.Вставить("П05С140"		, "П001050014003");
	ИменаПоказателей.Вставить("П05С150"		, "П001050015003");
	ИменаПоказателей.Вставить("П05С160"		, "П001050016003");
	ИменаПоказателей.Вставить("П05С170"		, "П001050017003");
	ИменаПоказателей.Вставить("П05С180"		, "П001050018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П05С170);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С170.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С170.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_18(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.180 Приложения 5 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 5'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение суммы авансового платежа %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С120"		, "П001050012003");
	ИменаПоказателей.Вставить("П05С130"		, "П001050013003");
	ИменаПоказателей.Вставить("П05С140"		, "П001050014003");
	ИменаПоказателей.Вставить("П05С150"		, "П001050015003");
	ИменаПоказателей.Вставить("П05С160"		, "П001050016003");
	ИменаПоказателей.Вставить("П05С170"		, "П001050017003");
	ИменаПоказателей.Вставить("П05С180"		, "П001050018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П05С180);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С180.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С180.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_19(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида подакцизного товара в стр.190 Приложения 5 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С190"		, "П00105М119003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П05С190.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П05С190.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С190, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П05С190.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П05С190.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_20(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема этилового спирта в стр.200 Приложения 5 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение объема этилового спирта %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С200"		, "П00105М120003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П05С200.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С200, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П05С200.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П05С200.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_21(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_22(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_23(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_24(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_25(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_26(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_27(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_28(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_29(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема потерь этилового спирта в стр.290 Приложения 5 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема потерь этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П05С290"		, "П00105М129003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение5 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П05С290.ИмяПоказателя, 14));
		
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П05С290, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = НЕ Показатели.П05С290.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П05С290.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_8_30(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='8.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 5'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 5 (КС 8.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КС_Проверки_Приложения_6

&НаСервере
Процедура ПроверкаКС_9_01(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.1'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.1)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение признака банковской гарантии в стр.001 Приложения 6 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан признак банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С001"		, "П001060000103");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П06С001.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С001, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П06С001.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С001.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_02(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.2'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.2)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение номера банковской гарантии в стр.010 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение номера банковской гарантии %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не указан номер банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С010"		, "П001060001003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С010, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С010.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С010.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_03(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.3'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.3)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата выдачи банковской гарантии в стр.015 Приложения 6 <= стр.020 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 <= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная дата выдачи банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С015"		, "П001060001503");
	ИменаПоказателей.Вставить("П06С020"		, "П001060002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П06С015.Значение <= Показатели.П06С020.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П06С015.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П06С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_04(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.4'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.4)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата начала действия банковской гарантии в стр.020 Приложения 2 >= стр.015 Приложения 2'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная дата начала действия банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С020"		, "П001060002003");
	ИменаПоказателей.Вставить("П06С015"		, "П001060001503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = НЕ Показатели.П06С020.Значение >= Показатели.П06С015.Значение;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П06С020.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П06С015.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_05(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.5'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.5)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Дата окончания действия банковской гарантии в стр.030 Приложения 6 > стр.015, 020 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 > %2, %3'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная дата окончания действия банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С030"		, "П001060003003");
	ИменаПоказателей.Вставить("П06С015"		, "П001060001503");
	ИменаПоказателей.Вставить("П06С020"		, "П001060002003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ (Показатели.П06С030.Значение 
			> Показатели.П06С015.Значение И Показатели.П06С030.Значение > Показатели.П06С020.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П06С030.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", Показатели.П06С015.ЗначениеСтр);
		Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%3", Показатели.П06С020.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_06(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.6'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.6)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Сумма банковской гарантии в стр.040 Приложения 6 > 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 > 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибочная сумма банковской гарантии'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С040"		, "П001060004003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ Показатели.П06С040.Значение > 0;
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П06С040.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_07(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.7'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.7)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение регистрационного номера извещения в стр.050 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение регистрационного номера %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении регистрационного номера'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С050"		, "П001060005003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С050, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С050.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С050.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_08(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.8'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.8)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение даты регистрации извещения в стр.060 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение даты регистрации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении даты регистрации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С060"		, "П001060006003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С060, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С060.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С060.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_09(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.9'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.9)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ИНН организации в стр.070 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение ИНН организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении ИНН организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С070"		, "П001060007003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С070, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С070.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С070.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_10(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.10'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.10)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КПП организации в стр.080 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение КПП организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении КПП организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С080"		, "П001060008003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С080, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С080.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С080.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_11(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.11'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.11)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида этилового спирта в стр.090 Приложения 6 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С090"		, "П001060009003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П06С090.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С090, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П06С090.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С090.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_12(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.12'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.12)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема этилового спирта в стр.100 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение объема этилового спирта %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С100"		, "П001060010003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С100, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С100.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С100.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_13(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.13'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.13)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.110 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение суммы авансового платежа %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С110"		, "П001060011003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С110, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С110.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С110.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_14(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.14'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.14)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема этилового спирта в стр.120 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение объема этилового спирта %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С120"		, "П001060012003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С120, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С120.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С120.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_15(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.15'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.15)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.130 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение суммы авансового платежа %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С130"		, "П001060013003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С130, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С130.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С130.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_16(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.16'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.16)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение месяца и года в стр.135 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение месяца и года %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении месяца и года'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П06С135"		, "П001060013503");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьИРасшифроватьПоказатель(Показатели.П06С135, СтраницаРаздела);
		
		Настройки.ЭтоОшибка = РазделЗаполнен(СтраницаРаздела) И НЕ ЗначениеЗаполнено(Показатели.П06С135.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П06С135.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_17(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.17'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.17)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение регистрационного номера извещения в стр.140 Приложения 6 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение регистрационного номера %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении регистрационного номера'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П61С140"		, "П001060014003");
	ИменаПоказателей.Вставить("П61С150"		, "П001060015003");
	ИменаПоказателей.Вставить("П61С160"		, "П001060016003");
	ИменаПоказателей.Вставить("П61С170"		, "П001060017003");
	ИменаПоказателей.Вставить("П61С180"		, "П001060018003");
	ИменаПоказателей.Вставить("П61С190"		, "П001060019003");
	ИменаПоказателей.Вставить("П61С200"		, "П001060020003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П61С140);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П61С140.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П61С140.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_18(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.18'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.18)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение даты регистрации извещения в стр.150 Приложения 6 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение даты регистрации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении даты регистрации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П61С140"		, "П001060014003");
	ИменаПоказателей.Вставить("П61С150"		, "П001060015003");
	ИменаПоказателей.Вставить("П61С160"		, "П001060016003");
	ИменаПоказателей.Вставить("П61С170"		, "П001060017003");
	ИменаПоказателей.Вставить("П61С180"		, "П001060018003");
	ИменаПоказателей.Вставить("П61С190"		, "П001060019003");
	ИменаПоказателей.Вставить("П61С200"		, "П001060020003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П61С150);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П61С150.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П61С150.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_19(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.19'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.19)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение ИНН организации в стр.160 Приложения 6 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение ИНН организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении ИНН организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П61С140"		, "П001060014003");
	ИменаПоказателей.Вставить("П61С150"		, "П001060015003");
	ИменаПоказателей.Вставить("П61С160"		, "П001060016003");
	ИменаПоказателей.Вставить("П61С170"		, "П001060017003");
	ИменаПоказателей.Вставить("П61С180"		, "П001060018003");
	ИменаПоказателей.Вставить("П61С190"		, "П001060019003");
	ИменаПоказателей.Вставить("П61С200"		, "П001060020003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П61С160);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П61С160.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П61С160.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_20(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.20'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.20)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение КПП организации в стр.170 Приложения 6 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение КПП организации %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении КПП организации'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П61С140"		, "П001060014003");
	ИменаПоказателей.Вставить("П61С150"		, "П001060015003");
	ИменаПоказателей.Вставить("П61С160"		, "П001060016003");
	ИменаПоказателей.Вставить("П61С170"		, "П001060017003");
	ИменаПоказателей.Вставить("П61С180"		, "П001060018003");
	ИменаПоказателей.Вставить("П61С190"		, "П001060019003");
	ИменаПоказателей.Вставить("П61С200"		, "П001060020003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П61С170);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П61С170.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П61С170.ЗначениеСтр);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_21(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.21'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.21)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида этилового спирта в стр.180 Приложения 6 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П61С180"		, "П001060018003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Показатели.П61С180.ИмяПоказателя);
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П61С180, СтраницаРаздела);
			
			Настройки.ЭтоОшибка = Список.Получить(Показатели.П61С180.Значение) = Неопределено;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П61С180.ЗначениеСтр);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_22(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.22'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.22)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема этилового спирта в стр.190 Приложения 6 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение объема этилового спирта %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П61С140"		, "П001060014003");
	ИменаПоказателей.Вставить("П61С150"		, "П001060015003");
	ИменаПоказателей.Вставить("П61С160"		, "П001060016003");
	ИменаПоказателей.Вставить("П61С170"		, "П001060017003");
	ИменаПоказателей.Вставить("П61С180"		, "П001060018003");
	ИменаПоказателей.Вставить("П61С190"		, "П001060019003");
	ИменаПоказателей.Вставить("П61С200"		, "П001060020003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П61С190);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П61С190.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П61С190.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_23(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.23'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.23)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.200 Приложения 6 должно быть заполнено '") +
		НСтр("ru='в случае заполнения подраздела 1.1 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение суммы авансового платежа %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П61С140"		, "П001060014003");
	ИменаПоказателей.Вставить("П61С150"		, "П001060015003");
	ИменаПоказателей.Вставить("П61С160"		, "П001060016003");
	ИменаПоказателей.Вставить("П61С170"		, "П001060017003");
	ИменаПоказателей.Вставить("П61С180"		, "П001060018003");
	ИменаПоказателей.Вставить("П61С190"		, "П001060019003");
	ИменаПоказателей.Вставить("П61С200"		, "П001060020003");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		ЗарегистрироватьФормулу(Настройки);
		ЗаполнитьПоказатели(Показатели, СтраницаРаздела);
		РасшифроватьПоказатель(Показатели.П61С200);
		
		РазделЗаполнен = Ложь;
		Для каждого Показатель Из Показатели Цикл
			Если ЗначениеЗаполнено(Показатель.Значение.Значение) Тогда
				РазделЗаполнен = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П61С200.Значение);
		Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П61С200.Значение);
		ДополнитьСтруктуруОшибок(Настройки);
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_24(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.24'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.24)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида подакцизного товара в стр.210 Приложения 6 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С210"		, "П00106М121003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П62С210.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С210.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С210, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П62С210.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С210.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_25(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.25'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.25)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема этилового спирта в стр.220 Приложения 6 должно быть заполнено'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='Значение объема этилового спирта %1 заполнено'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С220"		, "П00106М122003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С220.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С220, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ ЗначениеЗаполнено(Показатели.П62С220.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С220.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_26(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.26'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.26)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_27(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.27'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.27)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение остатка этилового спирта в стр.240 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении остатка этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С240"		, "П00106М124003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С240.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С240, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С240.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С240.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_28(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.28'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.28)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема подакцизных товаров в стр.250 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема подакцизных товаров'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С250"		, "П00106М125003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С250.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С250, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С250.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С250.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_29(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.29'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.29)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_30(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.30'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.30)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.255 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С255"		, "П00106М125503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С255.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С255, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С255.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С255.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_31(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.31'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.31)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_32(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.32'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.32)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема подакцизных товаров в стр.260 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема подакцизных товаров'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С260"		, "П00106М126003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С260.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С260, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С260.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С260.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_33(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.33'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.33)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_34(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.34'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.34)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.265 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С265"		, "П00106М126503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С265.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С265, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С265.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С265.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_35(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.35'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.35)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_36(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.36'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.36)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема подакцизных товаров в стр.266 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема подакцизных товаров'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С266"		, "П00106М126603_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С266.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С266, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С266.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С266.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_37(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.37'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.37)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_38(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.38'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.38)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.267 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С267"		, "П00106М126703_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С267.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С267, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С267.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С267.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_39(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.39'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.39)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_40(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.40'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.40)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема подакцизных товаров в стр.270 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема подакцизных товаров'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С270"		, "П00106М127003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С270.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С270, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С270.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С270.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_41(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.41'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.41)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_42(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.42'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.42)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.275 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С275"		, "П00106М127503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С275.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С275, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С275.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С275.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_43(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.43'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.43)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_44(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.44'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.44)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема подакцизных товаров в стр.276 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема подакцизных товаров'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С276"		, "П00106М127603_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С276.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С276, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С276.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С276.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_45(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.45'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.45)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_46(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.46'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.46)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.277 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С277"		, "П00106М127703_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С277.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С277, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С277.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С277.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_47(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.47'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.47)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_48(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.48'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.48)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_49(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.49'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.49)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_50(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.50'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.50)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_51(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.51'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.51)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_52(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.52'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.52)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема фактических потерь в стр.300 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема фактических потерь'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С300"		, "П00106М130003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С300.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С300, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С300.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С300.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_53(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.53'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.53)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.305 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С305"		, "П00106М130503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С305.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С305, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С305.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С305.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_54(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.54'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.54)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема фактических потерь в стр.310 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема фактических потерь'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С310"		, "П00106М131003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С310.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С310, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С310.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С310.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_55(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.55'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.55)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.315 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П62С315"		, "П00106М131503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П62С315.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П62С315, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П62С315.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П62С315.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_56(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.56'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.56)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида подакцизного товара в стр.325 Приложения 6 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П63С325"		, "П00106М232503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П63С325.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П63С325.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П63С325, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П63С325.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П63С325.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_57(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.57'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.57)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.330 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П63С330"		, "П00106М233003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П63С330.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П63С330, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П63С330.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П63С330.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_58(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.58'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.58)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.340 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П63С340"		, "П00106М234003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П63С340.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П63С340, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П63С340.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П63С340.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_59(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.59'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.59)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы акциза в стр.350 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы акциза'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П63С350"		, "П00106М235003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П63С350.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П63С350, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П63С350.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П63С350.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_60(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.60'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.60)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.360 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П63С360"		, "П00106М236003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П63С360.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П63С360, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П63С360.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П63С360.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_61(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.61'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.61)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_62(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.62'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.62)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение остатка этилового спирта в стр.380 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении остатка этилового спирта'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П63С380"		, "П00106М238003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П63С380.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П63С380, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П63С380.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П63С380.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_63(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.63'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.63)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение кода вида подакцизного товара в стр.385 Приложения 6 должно соответствовать списку '") +
		НСтр("ru='допустимых значений'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 в списке допустимых значений'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Не верно указан код вида подакцизного товара'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П64С385"		, "П00106М338503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	Список	= ДанныеКС.СоответствиеСписков.Получить(Лев(Показатели.П64С385.ИмяПоказателя, 13));
	
	Если НЕ Список = Неопределено Тогда
		Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
			КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П64С385.ИмяПоказателя, 14));
		
			Для Счетчик = 1 По КолвоСтрок Цикл
				ЗарегистрироватьФормулу(Настройки);
				ЗаполнитьИРасшифроватьПоказатель(Показатели.П64С385, СтраницаРаздела, XMLСтрока(Счетчик));
			
				Настройки.ЭтоОшибка = Список.Получить(Показатели.П64С385.Значение) = Неопределено;
				Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П64С385.ЗначениеСтр);
				ДополнитьСтруктуруОшибок(Настройки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_64(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.64'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.64)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.390 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П64С390"		, "П00106М339003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П64С390.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П64С390, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П64С390.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П64С390.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_65(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.65'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.65)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.400 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П64С400"		, "П00106М340003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П64С400.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П64С400, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П64С400.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П64С400.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_66(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.66'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.66)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_67(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.67'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.67)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_68(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.68'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.68)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_69(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.69'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.69)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_70(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.70'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.70)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_71(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.71'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.71)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_72(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.72'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.72)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_73(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.73'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.73)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_74(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.74'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.74)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_75(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.75'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.75)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_76(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.76'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.76)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема фактических потерь в стр.440 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема фактических потерь'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П64С440"		, "П00106М344003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П64С440.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П64С440, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П64С440.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П64С440.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_77(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.77'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.77)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_78(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.78'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.78)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение объема фактических потерь в стр.450 Приложения 6 >= 0'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 >= 0'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении объема фактических потерь'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П64С450"		, "П00106М345003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П64С450.ИмяПоказателя, 14));
		РазделЗаполнен = РазделЗаполнен(СтраницаРаздела);
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатель(Показатели.П64С450, СтраницаРаздела, XMLСтрока(Счетчик));
		
			Настройки.ЭтоОшибка = РазделЗаполнен И НЕ Показатели.П64С450.Значение >= 0;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки, "%1", Показатели.П64С450.Значение);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_79(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.79'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.79)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_80(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.80'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.80)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.460 Приложения 6 = стр.415 + стр.425 + стр.435 + '") +
		НСтр("ru='стр.445 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П64С460"		, "П00106М346003_");
	ИменаПоказателей.Вставить("П64С415"		, "П00106М341503_");
	ИменаПоказателей.Вставить("П64С425"		, "П00106М342503_");
	ИменаПоказателей.Вставить("П64С435"		, "П00106М343503_");
	ИменаПоказателей.Вставить("П64С445"		, "П00106М344503_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П64С460.ИмяПоказателя, 14));
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = СуммаПоказателей(Показатели) - Показатели.П64С460.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П64С460.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П64С460.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_81(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.81'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.81)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_82(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.82'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru='Реализация ожидается'"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.82)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru=''") +
		НСтр("ru=''"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru=''"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru=''"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаКС_9_83(СтруктураРезультата)
	
	Перем Показатели;
	
	Заголовки = Новый Структура;
	Заголовки.Вставить("НомерКС"			, НСтр("ru='9.83'"));
	Заголовки.Вставить("Раздел"				, НСтр("ru='Приложение 6'"));
	Заголовки.Вставить("Условие"			, НСтр("ru=''"));
	Заголовки.Вставить("Комментарий"		, НСтр("ru=''"));
	Заголовки.Вставить("ТекстФормулы"		, НСтр("ru='Проверка Приложения 6 (КС 9.83)'"));
	Заголовки.Вставить("Нарушение"			, НСтр("ru='ст.80 НК РФ'"));
	Заголовки.Вставить("ОписаниеКС"			, 
		НСтр("ru='Значение суммы авансового платежа в стр.480 Приложения 6 = стр.400 - стр.460 Приложения 6'"));
	Заголовки.Вставить("ШаблонРасшифровки"	, НСтр("ru='%1 = %2'"));
	Заголовки.Вставить("ОписаниеОшибки"		, НСтр("ru='Ошибка при заполнении суммы авансового платежа'"));
	Настройки = ОбработатьНастройки(		, Заголовки, СтруктураРезультата);

	Если Документирование Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П64С480"		, "П00106М348003_");
	ИменаПоказателей.Вставить("П64С400"		, "П00106М340003_");
	ИменаПоказателей.Вставить("П64С460"		, "П00106М346003_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела Из ДанныеКС.Приложение6 Цикл
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела, Лев(Показатели.П64С480.ИмяПоказателя, 14));
	
		Для Счетчик = 1 По КолвоСтрок Цикл
			ЗарегистрироватьФормулу(Настройки);
			ЗаполнитьИРасшифроватьПоказатели(Показатели, СтраницаРаздела, XMLСтрока(Счетчик));
			
			РасчетнаяСумма = Показатели.П64С400.Значение - Показатели.П64С460.Значение;
			Настройки.ЭтоОшибка = НЕ Показатели.П64С480.Значение = РасчетнаяСумма;
			Настройки.Расшифровка = СтрЗаменить(Настройки.ШаблонРасшифровки	, "%1", Показатели.П64С480.Значение);
			Настройки.Расшифровка = СтрЗаменить(Настройки.Расшифровка		, "%2", РасчетнаяСумма);
			ДополнитьСтруктуруОшибок(Настройки);
		КонецЦикла;
	КонецЦикла;
	
	СтруктураРезультата = ОбработатьРезультат(Настройки, СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КС_ФормированиеКонтекста

&НаСервере
Процедура СформироватьДанныеОтчета(ОтчетСсылка, СтруктураОтчета)
	
	СтруктураДанных = ПолучитьДанныеОтчета(ОтчетСсылка);
	
	СтруктураОтчета.Вставить("Отчет"		, ОтчетСсылка);
	СтруктураОтчета.Вставить("ГодОтчета"	, Год(ОтчетСсылка.ДатаОкончания));
	СтруктураОтчета.Вставить("МесОтчета"	, Месяц(ОтчетСсылка.ДатаОкончания));
	СтруктураОтчета.Вставить("Раздел0"		, ПолучитьДанныеРаздела0(СтруктураДанных));
	СтруктураОтчета.Вставить("Раздел1"		, ПолучитьДанныеРаздела1(СтруктураДанных));
	СтруктураОтчета.Вставить("Раздел2"		, ПолучитьДанныеМногостраничныхРазделов(СтруктураДанных, "Раздел2"));
	СтруктураОтчета.Вставить("Приложение1"	, ПолучитьДанныеМногостраничныхРазделов(СтруктураДанных, "Приложение1"));
	СтруктураОтчета.Вставить("Приложение2"	, ПолучитьДанныеМногостраничныхРазделов(СтруктураДанных, "Приложение2"));
	СтруктураОтчета.Вставить("Приложение3"	, ПолучитьДанныеМногостраничныхРазделов(СтруктураДанных, "Приложение3"));
	СтруктураОтчета.Вставить("Приложение4"	, ПолучитьДанныеМногостраничныхРазделов(СтруктураДанных, "Приложение4"));
	СтруктураОтчета.Вставить("Приложение5"	, ПолучитьДанныеМногостраничныхРазделов(СтруктураДанных, "Приложение5"));
	СтруктураОтчета.Вставить("Приложение6"	, ПолучитьДанныеМногостраничныхРазделов(СтруктураДанных, "Приложение6"));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицыОтчета()
	
	ТипСтрока	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ТипСтрока5	= Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(5));
	ТипЧисло	= Новый ОписаниеТипов("Число");
	ТипРО		= Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет");

	ТаблицаР1а = Новый ТаблицаЗначений;
	ТаблицаР1а.Колонки.Добавить("КБК"			, ТипСтрока);
	ТаблицаР1а.Колонки.Добавить("КодСрока"		, ТипСтрока5);
	ТаблицаР1а.Колонки.Добавить("Р01С040"		, ТипЧисло);
	ТаблицаР1а.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР1а.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаР1а.Колонки.Добавить("Строка_"		, ТипЧисло);
	ТаблицаР1а.Колонки.Добавить("Строка2"		, ТипЧисло);

	ТаблицаР1б = Новый ТаблицаЗначений;
	ТаблицаР1б.Колонки.Добавить("КБК"			, ТипСтрока);
	ТаблицаР1б.Колонки.Добавить("Р01С050"		, ТипЧисло);
	ТаблицаР1б.Колонки.Добавить("Р01С060"		, ТипЧисло);
	ТаблицаР1б.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР1б.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаР1б.Колонки.Добавить("Строка_"		, ТипЧисло);

	ТаблицаР21 = Новый ТаблицаЗначений;
	ТаблицаР21.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР21.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР21.Колонки.Добавить("Признак"		, ТипСтрока5);
	ТаблицаР21.Колонки.Добавить("Р21Г003"		, ТипЧисло);
	ТаблицаР21.Колонки.Добавить("Р21Г004"		, ТипЧисло);
	ТаблицаР21.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР21.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаР21.Колонки.Добавить("Строка_"		, ТипЧисло);

	ТаблицаР22 = Новый ТаблицаЗначений;
	ТаблицаР22.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР22.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР22.Колонки.Добавить("Признак"		, ТипСтрока5);
	ТаблицаР22.Колонки.Добавить("Р22Г003"		, ТипЧисло);
	ТаблицаР22.Колонки.Добавить("Р22Г004"		, ТипЧисло);
	ТаблицаР22.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР22.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаР22.Колонки.Добавить("Строка_"		, ТипЧисло);

	ТаблицаР23 = Новый ТаблицаЗначений;
	ТаблицаР23.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР23.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР23.Колонки.Добавить("Р23Г002"		, ТипЧисло);
	ТаблицаР23.Колонки.Добавить("Р23Г003"		, ТипЧисло);
	ТаблицаР23.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР23.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаР23.Колонки.Добавить("Строка_"		, ТипЧисло);
	
	ТаблицаР24 = Новый ТаблицаЗначений;
	ТаблицаР24.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР24.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР24.Колонки.Добавить("КБК"			, ТипСтрока);
	ТаблицаР24.Колонки.Добавить("Р24Г002"		, ТипЧисло);
	ТаблицаР24.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР24.Колонки.Добавить("Страница"		, ТипЧисло);

	ТаблицаР25 = Новый ТаблицаЗначений;
	ТаблицаР25.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР25.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР25.Колонки.Добавить("Р25Г002"		, ТипЧисло);
	ТаблицаР25.Колонки.Добавить("Р25Г003"		, ТипЧисло);
	ТаблицаР25.Колонки.Добавить("Р25Г004"		, ТипСтрока5);
	ТаблицаР25.Колонки.Добавить("Р25Г005"		, ТипСтрока5);
	ТаблицаР25.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР25.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаР25.Колонки.Добавить("Строка_"		, ТипЧисло);
	
	ТаблицаР26 = Новый ТаблицаЗначений;
	ТаблицаР26.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаР26.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаР26.Колонки.Добавить("КБК"			, ТипСтрока);
	ТаблицаР26.Колонки.Добавить("Р26Г002"		, ТипЧисло);
	ТаблицаР26.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаР26.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаР26.Колонки.Добавить("Строка_"		, ТипЧисло);
	
	ТаблицаП01 = Новый ТаблицаЗначений;
	ТаблицаП01.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП01.Колонки.Добавить("КодПоказателя"	, ТипСтрока5);
	ТаблицаП01.Колонки.Добавить("Содержание"	, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("П01Г003"		, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("П01Г004"		, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("П01Г005"		, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("П01Г006"		, ТипСтрока5);
	ТаблицаП01.Колонки.Добавить("П01Г007"		, ТипСтрока5);
	ТаблицаП01.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП01.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаП01.Колонки.Добавить("Строка_"		, ТипЧисло);
	
	ТаблицаП21 = Новый ТаблицаЗначений;
	ТаблицаП21.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП21.Колонки.Добавить("П02В073"		, ТипСтрока5);
	ТаблицаП21.Колонки.Добавить("П02В074"		, ТипЧисло);
	ТаблицаП21.Колонки.Добавить("П02В075"		, ТипЧисло);
	ТаблицаП21.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП21.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаП21.Колонки.Добавить("Строка_"		, ТипЧисло);
	ТаблицаП21.Колонки.Добавить("Строка2"		, ТипЧисло);
	
	ТаблицаП22 = Новый ТаблицаЗначений;
	ТаблицаП22.Колонки.Добавить("КодТовара"		, ТипСтрока5);
	ТаблицаП22.Колонки.Добавить("П02В083"		, ТипСтрока5);
	ТаблицаП22.Колонки.Добавить("П02В084"		, ТипЧисло);
	ТаблицаП22.Колонки.Добавить("П02В085"		, ТипЧисло);
	ТаблицаП22.Колонки.Добавить("П02В086"		, ТипСтрока5);
	ТаблицаП22.Колонки.Добавить("П02В087"		, ТипСтрока5);
	ТаблицаП22.Колонки.Добавить("Отчет"			, ТипРО);
	ТаблицаП22.Колонки.Добавить("Страница"		, ТипЧисло);
	ТаблицаП22.Колонки.Добавить("Строка_"		, ТипЧисло);
	ТаблицаП22.Колонки.Добавить("Строка2"		, ТипЧисло);
	
	ДанныеКС.Вставить("ТаблицаР1а"				, ТаблицаР1а);
	ДанныеКС.Вставить("ТаблицаР1б"				, ТаблицаР1б);
	ДанныеКС.Вставить("ТаблицаР21"				, ТаблицаР21);
	ДанныеКС.Вставить("ТаблицаР22"				, ТаблицаР22);
	ДанныеКС.Вставить("ТаблицаР23"				, ТаблицаР23);
	ДанныеКС.Вставить("ТаблицаР24"				, ТаблицаР24);
	ДанныеКС.Вставить("ТаблицаР25"				, ТаблицаР25);
	ДанныеКС.Вставить("ТаблицаР26"				, ТаблицаР26);
	ДанныеКС.Вставить("ТаблицаП01"				, ТаблицаП01);
	ДанныеКС.Вставить("ТаблицаП21"				, ТаблицаП21);
	ДанныеКС.Вставить("ТаблицаП22"				, ТаблицаП22);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыОтчета(СтруктураОтчета)
	
	Перем Показатели;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р01С020"	, "П00001М102000_");
	ИменаПоказателей.Вставить("Р01С030"	, "П00001М203000_");
	ИменаПоказателей.Вставить("Р01С040"	, "П00001М204000_");
	ИменаПоказателей.Вставить("Р01С050"	, "П00001М105000_");
	ИменаПоказателей.Вставить("Р01С060"	, "П00001М106000_");
	
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	КолвоСтрок = КоличествоСтрок(СтруктураОтчета.Раздел1, Показатели.Р01С020.ИмяПоказателя);
	
	Для Счетчик = 1 По КолвоСтрок Цикл
		
		ЗаполнитьПоказатель(Показатели.Р01С020, СтруктураОтчета.Раздел1, Счетчик);
		ЗаполнитьПоказатель(Показатели.Р01С050, СтруктураОтчета.Раздел1, Счетчик);
		ЗаполнитьПоказатель(Показатели.Р01С060, СтруктураОтчета.Раздел1, Счетчик);
		
		НоваяСтрока				= ДанныеКС.ТаблицаР1б.Добавить();
		НоваяСтрока.КБК			= Показатели.Р01С020.Значение;
		НоваяСтрока.Р01С050		= Показатели.Р01С050.Значение;
		НоваяСтрока.Р01С060		= Показатели.Р01С060.Значение;
		НоваяСтрока.Отчет		= СтруктураОтчета.Отчет;
		НоваяСтрока.Страница	= 1;
		НоваяСтрока.Строка_		= Счетчик;

		Показатели.Р01С030.ИмяПоказателя = Лев(Показатели.Р01С030.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
		Показатели.Р01С040.ИмяПоказателя = Лев(Показатели.Р01С040.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
		ДлинаПоказателя = СтрДлина(Показатели.Р01С030.ИмяПоказателя);
		КолвоСтрок2 = КоличествоСтрок(СтруктураОтчета.Раздел1, Показатели.Р01С030.ИмяПоказателя, Ложь);
	
		Для Счетчик2 = 1 По КолвоСтрок2 Цикл
			
			Показатели.Р01С030.ИмяПоказателя = Лев(Показатели.Р01С030.ИмяПоказателя, ДлинаПоказателя);
			Показатели.Р01С040.ИмяПоказателя = Лев(Показатели.Р01С040.ИмяПоказателя, ДлинаПоказателя);
			ЗаполнитьПоказатель(Показатели.Р01С030, СтруктураОтчета.Раздел1, XMLСтрока(Счетчик2), Ложь);
			ЗаполнитьПоказатель(Показатели.Р01С040, СтруктураОтчета.Раздел1, XMLСтрока(Счетчик2), Ложь);
			
			НоваяСтрока				= ДанныеКС.ТаблицаР1а.Добавить();
			НоваяСтрока.КБК			= Показатели.Р01С020.Значение;
			НоваяСтрока.КодСрока	= Показатели.Р01С030.Значение;
			НоваяСтрока.Р01С040		= Показатели.Р01С040.Значение;
			НоваяСтрока.Отчет		= СтруктураОтчета.Отчет;
			НоваяСтрока.Страница	= 1;
			НоваяСтрока.Строка_		= Счетчик;
			НоваяСтрока.Строка2		= Счетчик2;
			
		КонецЦикла;
	КонецЦикла; 
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("Р02С010", "П000020001003");
	ИменаПоказателей.Вставить("Р21Г001", "П00021М100001_");
	ИменаПоказателей.Вставить("Р21Г002", "П00021М100002_");
	ИменаПоказателей.Вставить("Р21Г003", "П00021М100003_");
	ИменаПоказателей.Вставить("Р21Г004", "П00021М100004_");
	ИменаПоказателей.Вставить("Р22Г001", "П00022М100001_");
	ИменаПоказателей.Вставить("Р22Г002", "П00022М100002_");
	ИменаПоказателей.Вставить("Р22Г003", "П00022М100003_");
	ИменаПоказателей.Вставить("Р22Г004", "П00022М100004_");
	ИменаПоказателей.Вставить("Р23Г001", "П00023М100001_");
	ИменаПоказателей.Вставить("Р23Г002", "П00023М100002_");
	ИменаПоказателей.Вставить("Р23Г003", "П00023М100003_");
	ИменаПоказателей.Вставить("Р24Г001", "П000240000001");
	ИменаПоказателей.Вставить("Р24Г002", "П000240000002");
	ИменаПоказателей.Вставить("Р25Г001", "П00025М100001_");
	ИменаПоказателей.Вставить("Р25Г002", "П00025М100002_");
	ИменаПоказателей.Вставить("Р25Г003", "П00025М100003_");
	ИменаПоказателей.Вставить("Р25Г004", "П00025М100004_");
	ИменаПоказателей.Вставить("Р25Г005", "П00025М100005_");
	ИменаПоказателей.Вставить("Р26Г001", "П00241М100001_");
	ИменаПоказателей.Вставить("Р26Г002", "П00241М100002_");
	
	Показатели = Неопределено;
	НомерСтраницы = 1;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаРаздела2 Из СтруктураОтчета.Раздел2 Цикл
	
		ЗаполнитьПоказатель(Показатели.Р02С010, СтраницаРаздела2);
		ЗаполнитьПоказатель(Показатели.Р24Г001, СтраницаРаздела2);
		ЗаполнитьПоказатель(Показатели.Р24Г002, СтраницаРаздела2);
		
		КБК = ДанныеКС.СоответствиеКБК.Получить(Показатели.Р02С010.Значение);
		
		НоваяСтрока					= ДанныеКС.ТаблицаР24.Добавить();
		НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
		НоваяСтрока.КодПоказателя	= Показатели.Р24Г001.Значение;
		НоваяСтрока.Р24Г002			= Показатели.Р24Г002.Значение;
		НоваяСтрока.Отчет			= СтруктураОтчета.Отчет;
		НоваяСтрока.Страница		= НомерСтраницы;
		НоваяСтрока.КБК				= КБК;
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела2, Показатели.Р21Г001.ИмяПоказателя);
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			ЗаполнитьПоказатель(Показатели.Р21Г001, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р21Г002, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р21Г003, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р21Г004, СтраницаРаздела2, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР21.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р21Г001.Значение;
			НоваяСтрока.Признак			= Показатели.Р21Г002.Значение;
			НоваяСтрока.Р21Г003			= Показатели.Р21Г003.Значение;
			НоваяСтрока.Р21Г004			= Показатели.Р21Г004.Значение;
			НоваяСтрока.Отчет			= СтруктураОтчета.Отчет;
			НоваяСтрока.Страница		= НомерСтраницы;
			НоваяСтрока.Строка_			= Счетчик;
		
		КонецЦикла;
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела2, Показатели.Р22Г001.ИмяПоказателя);
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			ЗаполнитьПоказатель(Показатели.Р22Г001, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р22Г002, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р22Г003, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р22Г004, СтраницаРаздела2, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР22.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р22Г001.Значение;
			НоваяСтрока.Признак			= Показатели.Р22Г002.Значение;
			НоваяСтрока.Р22Г003			= Показатели.Р22Г003.Значение;
			НоваяСтрока.Р22Г004			= Показатели.Р22Г004.Значение;
			НоваяСтрока.Отчет			= СтруктураОтчета.Отчет;
			НоваяСтрока.Страница		= НомерСтраницы;
			НоваяСтрока.Строка_			= Счетчик;
		
		КонецЦикла;
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела2, Показатели.Р23Г001.ИмяПоказателя);
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			ЗаполнитьПоказатель(Показатели.Р23Г001, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р23Г002, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р23Г003, СтраницаРаздела2, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР23.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р23Г001.Значение;
			НоваяСтрока.Р23Г002			= Показатели.Р23Г002.Значение;
			НоваяСтрока.Р23Г003			= Показатели.Р23Г003.Значение;
			НоваяСтрока.Отчет			= СтруктураОтчета.Отчет;
			НоваяСтрока.Страница		= НомерСтраницы;
			НоваяСтрока.Строка_			= Счетчик;
		
		КонецЦикла;
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела2, Показатели.Р25Г001.ИмяПоказателя);
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			ЗаполнитьПоказатель(Показатели.Р25Г001, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г002, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г003, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г004, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р25Г005, СтраницаРаздела2, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР25.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р25Г001.Значение;
			НоваяСтрока.Р25Г002			= Показатели.Р25Г002.Значение;
			НоваяСтрока.Р25Г003			= Показатели.Р25Г003.Значение;
			НоваяСтрока.Р25Г004			= Показатели.Р25Г004.Значение;
			НоваяСтрока.Р25Г005			= Показатели.Р25Г005.Значение;
			НоваяСтрока.Отчет			= СтруктураОтчета.Отчет;
			НоваяСтрока.Страница		= НомерСтраницы;
			НоваяСтрока.Строка_			= Счетчик;
		
		КонецЦикла;
		
		КолвоСтрок = КоличествоСтрок(СтраницаРаздела2, Показатели.Р26Г001.ИмяПоказателя);
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			ЗаполнитьПоказатель(Показатели.Р26Г001, СтраницаРаздела2, Счетчик);
			ЗаполнитьПоказатель(Показатели.Р26Г002, СтраницаРаздела2, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаР26.Добавить();
			НоваяСтрока.КодТовара		= Показатели.Р02С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.Р26Г001.Значение;
			НоваяСтрока.Р26Г002			= Показатели.Р26Г002.Значение;
			НоваяСтрока.Отчет			= СтруктураОтчета.Отчет;
			НоваяСтрока.Страница		= НомерСтраницы;
			НоваяСтрока.Строка_			= Счетчик;
			НоваяСтрока.КБК				= КБК;
		
		КонецЦикла;
	
		НомерСтраницы = НомерСтраницы + 1;
	
	КонецЦикла;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П01С010", "П001010001003");
	ИменаПоказателей.Вставить("П01Г001", "П00101М100001_");
	ИменаПоказателей.Вставить("П01Г002", "П00101М100002_");
	ИменаПоказателей.Вставить("П01Г003", "П00101М100003_");
	ИменаПоказателей.Вставить("П01Г004", "П00101М100004_");
	ИменаПоказателей.Вставить("П01Г005", "П00101М100005_");
	ИменаПоказателей.Вставить("П01Г006", "П00101М100006_");
	ИменаПоказателей.Вставить("П01Г007", "П00101М100007_");
	
	Показатели = Неопределено;
	НомерСтраницы = 1;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаПриложения1 Из СтруктураОтчета.Приложение1 Цикл
	
		ЗаполнитьПоказатель(Показатели.П01С010, СтраницаПриложения1);
		
		КолвоСтрок = КоличествоСтрок(СтраницаПриложения1, Показатели.П01Г001.ИмяПоказателя);
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			ЗаполнитьПоказатель(Показатели.П01Г001, СтраницаПриложения1, Счетчик);
			ЗаполнитьПоказатель(Показатели.П01Г002, СтраницаПриложения1, Счетчик);
			ЗаполнитьПоказатель(Показатели.П01Г003, СтраницаПриложения1, Счетчик);
			ЗаполнитьПоказатель(Показатели.П01Г004, СтраницаПриложения1, Счетчик);
			ЗаполнитьПоказатель(Показатели.П01Г005, СтраницаПриложения1, Счетчик);
			ЗаполнитьПоказатель(Показатели.П01Г006, СтраницаПриложения1, Счетчик);
			ЗаполнитьПоказатель(Показатели.П01Г007, СтраницаПриложения1, Счетчик);
		
			НоваяСтрока					= ДанныеКС.ТаблицаП01.Добавить();
			НоваяСтрока.КодТовара		= Показатели.П01С010.Значение;
			НоваяСтрока.КодПоказателя	= Показатели.П01Г001.Значение;
			НоваяСтрока.Содержание		= Показатели.П01Г002.Значение;
			НоваяСтрока.П01Г003			= Показатели.П01Г003.Значение;
			НоваяСтрока.П01Г004			= Показатели.П01Г004.Значение;
			НоваяСтрока.П01Г005			= Показатели.П01Г005.Значение;
			НоваяСтрока.П01Г006			= Показатели.П01Г006.Значение;
			НоваяСтрока.П01Г007			= Показатели.П01Г007.Значение;
			НоваяСтрока.Отчет			= СтруктураОтчета.Отчет;
			НоваяСтрока.Страница		= НомерСтраницы;
			НоваяСтрока.Строка_			= Счетчик;
		
		КонецЦикла;
	
		НомерСтраницы = НомерСтраницы + 1;
	
	КонецЦикла;
	
	ИменаПоказателей = Новый Структура;
	ИменаПоказателей.Вставить("П02С060"	, "П00102М106000_");
	ИменаПоказателей.Вставить("П02В073"	, "П00102М207003_");
	ИменаПоказателей.Вставить("П02В074"	, "П00102М207004_");
	ИменаПоказателей.Вставить("П02В075"	, "П00102М207005_");
	ИменаПоказателей.Вставить("П02В083"	, "П00102М308003_");
	ИменаПоказателей.Вставить("П02В084"	, "П00102М308004_");
	ИменаПоказателей.Вставить("П02В085"	, "П00102М308005_");
	ИменаПоказателей.Вставить("П02В086"	, "П00102М308006_");
	ИменаПоказателей.Вставить("П02В087"	, "П00102М308007_");
	
	Показатели = Неопределено;
	НомерСтраницы = 1;
	СформироватьПоказатели(Показатели, ИменаПоказателей);
	
	Для каждого СтраницаПриложения2 Из СтруктураОтчета.Приложение2 Цикл
	
		КолвоСтрок = КоличествоСтрок(СтраницаПриложения2, Показатели.П02С060.ИмяПоказателя);
		Для Счетчик = 1 По КолвоСтрок Цикл
			
			ЗаполнитьПоказатель(Показатели.П02С060, СтраницаПриложения2, Счетчик);

			Показатели.П02В073.ИмяПоказателя = Лев(Показатели.П02В073.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			Показатели.П02В074.ИмяПоказателя = Лев(Показатели.П02В074.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			Показатели.П02В075.ИмяПоказателя = Лев(Показатели.П02В075.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			Показатели.П02В083.ИмяПоказателя = Лев(Показатели.П02В083.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			Показатели.П02В084.ИмяПоказателя = Лев(Показатели.П02В084.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			Показатели.П02В085.ИмяПоказателя = Лев(Показатели.П02В085.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			Показатели.П02В086.ИмяПоказателя = Лев(Показатели.П02В086.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			Показатели.П02В087.ИмяПоказателя = Лев(Показатели.П02В087.ИмяПоказателя, 14) + XMLСтрока(Счетчик) + "_";
			ДлинаПоказателя = СтрДлина(Показатели.П02В073.ИмяПоказателя);
			
			КолвоСтрок2 = КоличествоСтрок(СтраницаПриложения2, Показатели.П02В073.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				
				Показатели.П02В073.ИмяПоказателя = Лев(Показатели.П02В073.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П02В074.ИмяПоказателя = Лев(Показатели.П02В074.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П02В075.ИмяПоказателя = Лев(Показатели.П02В075.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьПоказатель(Показатели.П02В073, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьПоказатель(Показатели.П02В074, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьПоказатель(Показатели.П02В075, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				
				НоваяСтрока				= ДанныеКС.ТаблицаП21.Добавить();
				НоваяСтрока.КодТовара	= Показатели.П02С060.Значение;
				НоваяСтрока.П02В073		= Показатели.П02В073.Значение;
				НоваяСтрока.П02В074		= Показатели.П02В074.Значение;
				НоваяСтрока.П02В075		= Показатели.П02В075.Значение;
				НоваяСтрока.Отчет		= СтруктураОтчета.Отчет;
				НоваяСтрока.Страница	= НомерСтраницы;
				НоваяСтрока.Строка_		= Счетчик;
				НоваяСтрока.Строка2		= Счетчик2;
				
			КонецЦикла;
			
			КолвоСтрок2 = КоличествоСтрок(СтраницаПриложения2, Показатели.П02В083.ИмяПоказателя, Ложь);
			Для Счетчик2 = 1 По КолвоСтрок2 Цикл
				
				Показатели.П02В083.ИмяПоказателя = Лев(Показатели.П02В083.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П02В084.ИмяПоказателя = Лев(Показатели.П02В084.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П02В085.ИмяПоказателя = Лев(Показатели.П02В085.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П02В086.ИмяПоказателя = Лев(Показатели.П02В086.ИмяПоказателя, ДлинаПоказателя);
				Показатели.П02В087.ИмяПоказателя = Лев(Показатели.П02В087.ИмяПоказателя, ДлинаПоказателя);
				ЗаполнитьПоказатель(Показатели.П02В083, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьПоказатель(Показатели.П02В084, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьПоказатель(Показатели.П02В085, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьПоказатель(Показатели.П02В086, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				ЗаполнитьПоказатель(Показатели.П02В087, СтраницаПриложения2, XMLСтрока(Счетчик2), Ложь);
				
				НоваяСтрока				= ДанныеКС.ТаблицаП22.Добавить();
				НоваяСтрока.КодТовара	= Показатели.П02С060.Значение;
				НоваяСтрока.П02В083		= Показатели.П02В083.Значение;
				НоваяСтрока.П02В084		= Показатели.П02В084.Значение;
				НоваяСтрока.П02В085		= Показатели.П02В085.Значение;
				НоваяСтрока.П02В086		= Показатели.П02В086.Значение;
				НоваяСтрока.П02В087		= Показатели.П02В087.Значение;
				НоваяСтрока.Отчет		= СтруктураОтчета.Отчет;
				НоваяСтрока.Страница	= НомерСтраницы;
				НоваяСтрока.Строка_		= Счетчик;
				НоваяСтрока.Строка2		= Счетчик2;
				
			КонецЦикла;
		КонецЦикла;
	
		НомерСтраницы = НомерСтраницы + 1;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДанныеОтчетаПРП()
	
	Возврат;
	
	ОтчетПРП = Неопределено;
	
	ГодОтчета	= Год(ДанныеКС.Отчет.ДатаОкончания);
	МесяцОтчета	= Месяц(ДанныеКС.Отчет.ДатаОкончания);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"	, СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ГодОтчета"	, ГодОтчета);
	Запрос.УстановитьПараметр("МесяцОтчета"	, МесяцОтчета);
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументРО.Ссылка КАК Ссылка,
	|	ДокументРО.Вид КАК Вид,
	|	МЕСЯЦ(ДокументРО.ДатаОкончания) КАК Мес
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК ДокументРО
	|ГДЕ
	|	ДокументРО.ИсточникОтчета = ""РегламентированныйОтчетАкцизыАлкоголь""
	|	И ДокументРО.Организация = &Организация
	|	И ГОД(ДокументРО.ДатаОкончания) = &ГодОтчета
	|	И МЕСЯЦ(ДокументРО.ДатаОкончания) < &МесяцОтчета
	|	И НЕ ДокументРО.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Мес УБЫВ,
	|	Вид УБЫВ";
	
	Выборка	= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтчетПРП = Выборка.Ссылка;
		СтруктураОтчета = Новый Структура;
		СформироватьДанныеОтчета(Выборка.Ссылка, СтруктураОтчета);
		ЗаполнитьТаблицыОтчета(СтруктураОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеЭлементаРаздела(ВнешнийЭлемент, 
										СтруктураДанных, 
										МногострочнаяЧасть = Ложь, 
										НомерСтроки = "", 
										НомерПриложения = 0)
	
	Если Не ВнешнийЭлемент.Данные = Неопределено Тогда
		Для каждого Элемент Из ВнешнийЭлемент.Данные Цикл
			
			СтрокаКлюча = ?(МногострочнаяЧасть, Элемент.Ключ + НомерСтроки, Элемент.Ключ);
			СтрокаКлюча = ?(СтрокаКлюча = "ПризнакВключения", "Приложение" + НомерПриложения + "Включено", СтрокаКлюча);
			СтруктураДанных.Вставить(СтрокаКлюча, Элемент.Значение);
		
		КонецЦикла;
	КонецЕсли; 
	
	Если Не ВнешнийЭлемент.ДанныеМногострочныхЧастей = Неопределено Тогда
		Для каждого Элемент Из ВнешнийЭлемент.ДанныеМногострочныхЧастей Цикл
			Для каждого ЭлементМнЧасти Из Элемент.Значение.Строки Цикл
				
				НомерТекущейСтроки = Элемент.Значение.Строки.Индекс(ЭлементМнЧасти) + 1;
				НомерСтрокиИтоговый = НомерСтроки + "_" + НомерТекущейСтроки;
				ПолучитьДанныеЭлементаРаздела(ЭлементМнЧасти, СтруктураДанных, Истина, НомерСтрокиИтоговый);
			
			КонецЦикла;
		КонецЦикла;
	КонецЕсли; 
	
	Для каждого Элемент Из ВнешнийЭлемент.Строки Цикл
	
		НомерРезультат = ВнешнийЭлемент.Строки.Индекс(Элемент) + 1;
		НомерПриложения = ?(НомерРезультат = 5 ИЛИ НомерРезультат = 7, НомерРезультат, НомерПриложения);
		ПолучитьДанныеЭлементаРаздела(Элемент, СтруктураДанных,,, НомерПриложения);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСлужебныеДанные()
	
	ПредставлениеРазделов = Новый Структура();
	
	ПредставлениеРазделов.Вставить("Р00", "Титульный лист");
	ПредставлениеРазделов.Вставить("Р01", "Раздела 1");
	ПредставлениеРазделов.Вставить("Р02", "Раздела 2");
	ПредставлениеРазделов.Вставить("Р21", "подраздела 2.1 Раздела 2");
	ПредставлениеРазделов.Вставить("Р22", "подраздела 2.2 Раздела 2");
	ПредставлениеРазделов.Вставить("Р23", "подраздела 2.3 Раздела 2");
	ПредставлениеРазделов.Вставить("Р24", "подраздела 2.4 Раздела 2");
	ПредставлениеРазделов.Вставить("Р25", "подраздела 2.5 Раздела 2");
	ПредставлениеРазделов.Вставить("Р26", "подраздела 2.4.1 Раздела 2");
	ПредставлениеРазделов.Вставить("П01", "Приложения 1");
	ПредставлениеРазделов.Вставить("П02", "Приложения 2");
	ПредставлениеРазделов.Вставить("П03", "Приложения 3");
	ПредставлениеРазделов.Вставить("П04", "Приложения 4");
	ПредставлениеРазделов.Вставить("П05", "Приложения 5");
	ПредставлениеРазделов.Вставить("П06", "Приложения 6");
	ПредставлениеРазделов.Вставить("П61", "подраздела 1.1 Приложения 6");
	ПредставлениеРазделов.Вставить("П62", "подраздела 1.2 Приложения 6");
	ПредставлениеРазделов.Вставить("П63", "подраздела 1.3 Приложения 6");
	ПредставлениеРазделов.Вставить("П64", "подраздела 1.4 Приложения 6");
	
	ДанныеКС.Вставить("ПредставлениеРазделов", ПредставлениеРазделов);
	
	РазделыПоказателей = Новый Структура();
	
	РазделыПоказателей.Вставить("Р00", "Титульный");
	РазделыПоказателей.Вставить("Р01", "Раздел1");
	РазделыПоказателей.Вставить("Р02", "Раздел2");
	РазделыПоказателей.Вставить("Р21", "Раздел2");
	РазделыПоказателей.Вставить("Р22", "Раздел2");
	РазделыПоказателей.Вставить("Р23", "Раздел2");
	РазделыПоказателей.Вставить("Р24", "Раздел2");
	РазделыПоказателей.Вставить("Р25", "Раздел2");
	РазделыПоказателей.Вставить("Р26", "Раздел2");
	РазделыПоказателей.Вставить("П01", "Приложение1");
	РазделыПоказателей.Вставить("П02", "Приложение2");
	РазделыПоказателей.Вставить("П03", "Приложение3");
	РазделыПоказателей.Вставить("П04", "Приложение4");
	РазделыПоказателей.Вставить("П05", "Приложение5");
	РазделыПоказателей.Вставить("П06", "Приложение6");
	РазделыПоказателей.Вставить("П61", "Приложение6");
	РазделыПоказателей.Вставить("П62", "Приложение612_613");
	РазделыПоказателей.Вставить("П63", "Приложение612_613");
	РазделыПоказателей.Вставить("П64", "Приложение614");
	
	ДанныеКС.Вставить("РазделыПоказателей", РазделыПоказателей);
	
	ПоляТитульногоЛиста = Новый Структура();
	ПоляТитульногоЛиста.Вставить("Р00С001", "Дата подписи");
	ПоляТитульногоЛиста.Вставить("Р00С002", "Отчетный год");
	ПоляТитульногоЛиста.Вставить("Р00С003", "Код формы реорганизации");
	
	ДанныеКС.Вставить("ПоляТитульногоЛиста", ПоляТитульногоЛиста);
	
	МногостраничныеРазделы = Новый Массив;
	
	МногостраничныеРазделы.Добавить("Р02");
	МногостраничныеРазделы.Добавить("Р21");
	МногостраничныеРазделы.Добавить("Р22");
	МногостраничныеРазделы.Добавить("Р23");
	МногостраничныеРазделы.Добавить("Р24");
	МногостраничныеРазделы.Добавить("Р25");
	МногостраничныеРазделы.Добавить("Р26");
	МногостраничныеРазделы.Добавить("П01");
	МногостраничныеРазделы.Добавить("П02");
	МногостраничныеРазделы.Добавить("П03");
	МногостраничныеРазделы.Добавить("П04");
	МногостраничныеРазделы.Добавить("П05");
	МногостраничныеРазделы.Добавить("П06");
	
	ДанныеКС.Вставить("МногостраничныеРазделы", МногостраничныеРазделы);
	
	ЦелочисленныеРазделы = Новый Массив;
	ЦелочисленныеРазделы.Добавить("Р01");
	ЦелочисленныеРазделы.Добавить("Р02");
	ЦелочисленныеРазделы.Добавить("Р24");
	ЦелочисленныеРазделы.Добавить("Р26");
	
	ДанныеКС.Вставить("ЦелочисленныеРазделы", ЦелочисленныеРазделы);
	
	МассивПолейИсключений = Новый Массив;
	МассивПолейИсключений.Добавить("П000010001003");
	МассивПолейИсключений.Добавить("П000240000001");
	МассивПолейИсключений.Добавить("Страница");
	
	ДанныеКС.Вставить("МассивПолейИсключений", МассивПолейИсключений);
	
	МассивПолейСписочныхЗначений = Новый Массив;
	// Раздел 1
	МассивПолейСписочныхЗначений.Добавить("П00001М102000");
	МассивПолейСписочныхЗначений.Добавить("П00001М203000");
	// Раздел 2
	МассивПолейСписочныхЗначений.Добавить("П000020001003");
	МассивПолейСписочныхЗначений.Добавить("П00021М100001");
	МассивПолейСписочныхЗначений.Добавить("П00022М100001");
	МассивПолейСписочныхЗначений.Добавить("П00023М100001");
	МассивПолейСписочныхЗначений.Добавить("П000240000001");
	МассивПолейСписочныхЗначений.Добавить("П00241М100001");
	МассивПолейСписочныхЗначений.Добавить("П00025М100001");
	// Приложение 1
	МассивПолейСписочныхЗначений.Добавить("П001010001003");
	МассивПолейСписочныхЗначений.Добавить("П00101М100001");
	// Приложение 2
	МассивПолейСписочныхЗначений.Добавить("П001020000103");
	МассивПолейСписочныхЗначений.Добавить("П00102М106000");
	// Приложение 3
	МассивПолейСписочныхЗначений.Добавить("П00103М100001");
	// Приложение 4
	МассивПолейСписочныхЗначений.Добавить("П001040000103");
	МассивПолейСписочныхЗначений.Добавить("П00104М104000");
	// Приложение 5
	МассивПолейСписочныхЗначений.Добавить("П001050005003");
	МассивПолейСписочныхЗначений.Добавить("П001050016003");
	МассивПолейСписочныхЗначений.Добавить("П00105М119003");
	// Приложение 6
	МассивПолейСписочныхЗначений.Добавить("П001060000103");
	МассивПолейСписочныхЗначений.Добавить("П001060009003");
	МассивПолейСписочныхЗначений.Добавить("П001060018003");
	МассивПолейСписочныхЗначений.Добавить("П00106М121003");
	МассивПолейСписочныхЗначений.Добавить("П00106М232503");
	МассивПолейСписочныхЗначений.Добавить("П00106М338503");
	
	ТаблицаСписков = РеквизитФормыВЗначение("СвойстваПоказателей", Тип("ТаблицаЗначений"));
	СоответствиеСписков = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из ТаблицаСписков Цикл
		Если НЕ МассивПолейСписочныхЗначений.Найти(СтрокаТЗ.Показатель) = Неопределено Тогда
			СоответствиеЗначений = Новый Соответствие;
			Для каждого СтрокаЗначения Из СтрокаТЗ.ТаблицаЗначений Цикл
				СоответствиеЗначений.Вставить(СтрокаЗначения.Код, 1);
			КонецЦикла;
			СоответствиеСписков.Вставить(СтрокаТЗ.Показатель, СоответствиеЗначений);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеКС.Вставить("СоответствиеСписков", СоответствиеСписков);
	
	МассивКодовПТ_Р21 = Новый Массив;
	СтрокаТЗ = ТаблицаСписков.Найти("П00021М100001", "Показатель");
	Если НЕ СтрокаТЗ = Неопределено Тогда
		МассивКодовПТ_Р21 = СтрокаТЗ.ТаблицаЗначений.ВыгрузитьКолонку("Код");
	КонецЕсли; 
	
	ДанныеКС.Вставить("МассивКодовПТ_Р21", МассивКодовПТ_Р21);
	
	МассивКодовПТ_Р22 = Новый Массив;
	СтрокаТЗ = ТаблицаСписков.Найти("П00022М100001", "Показатель");
	Если НЕ СтрокаТЗ = Неопределено Тогда
		МассивКодовПТ_Р22 = СтрокаТЗ.ТаблицаЗначений.ВыгрузитьКолонку("Код");
	КонецЕсли; 
	
	ДанныеКС.Вставить("МассивКодовПТ_Р22", МассивКодовПТ_Р22);
	
	МассивКодовПТ_Р23 = Новый Массив;
	СтрокаТЗ = ТаблицаСписков.Найти("П00023М100001", "Показатель");
	Если НЕ СтрокаТЗ = Неопределено Тогда
		МассивКодовПТ_Р23 = СтрокаТЗ.ТаблицаЗначений.ВыгрузитьКолонку("Код");
	КонецЕсли; 
	
	ДанныеКС.Вставить("МассивКодовПТ_Р23", МассивКодовПТ_Р23);
	
	МассивКодовПТ_Р25 = Новый Массив;
	СтрокаТЗ = ТаблицаСписков.Найти("П00025М100001", "Показатель");
	Если НЕ СтрокаТЗ = Неопределено Тогда
		МассивКодовПТ_Р25 = СтрокаТЗ.ТаблицаЗначений.ВыгрузитьКолонку("Код");
	КонецЕсли; 
	
	ДанныеКС.Вставить("МассивКодовПТ_Р25", МассивКодовПТ_Р25);
	
	СоответствиеКБК = Новый Соответствие;
	СоответствиеКБК.Вставить("111"	,"18210302011011000110");
	СоответствиеКБК.Вставить("121"	,"18210302012011000110");
	СоответствиеКБК.Вставить("130"	,"18210302013011000110");
	СоответствиеКБК.Вставить("140"	,"18210302011011000110");
	СоответствиеКБК.Вставить("150"	,"18210302012011000110");
	СоответствиеКБК.Вставить("160"	,"18210302011011000110");
	СоответствиеКБК.Вставить("161"	,"18210302013011000110");
	СоответствиеКБК.Вставить("162"	,"18210302013011000110");
	СоответствиеКБК.Вставить("163"	,"18210302013011000110");
	СоответствиеКБК.Вставить("164"	,"18210302013011000110");
	СоответствиеКБК.Вставить("165"	,"18210302013011000110");
	СоответствиеКБК.Вставить("170"	,"18210302012011000110");
	СоответствиеКБК.Вставить("224"	,"18210302110011000110");
	СоответствиеКБК.Вставить("231"	,"18210302130011000110");
	СоответствиеКБК.Вставить("232"	,"18210302120011000110");
	СоответствиеКБК.Вставить("271"	,"18210302090011000110");
	СоответствиеКБК.Вставить("272"	,"18210302350011000110");
	СоответствиеКБК.Вставить("284"	,"18210302090011000110");
	СоответствиеКБК.Вставить("285"	,"18210302340011000110");
	СоответствиеКБК.Вставить("291"	,"18210302020011000110");
	СоответствиеКБК.Вставить("292"	,"18210302020011000110");
	СоответствиеКБК.Вставить("293"	,"18210302020011000110");
	СоответствиеКБК.Вставить("310"	,"18210302100011000110");
	СоответствиеКБК.Вставить("320"	,"18210302100011000110");
	СоответствиеКБК.Вставить("330"	,"18210302100011000110");
	СоответствиеКБК.Вставить(""		,"");
	
	ДанныеКС.Вставить("СоответствиеКБК", СоответствиеКБК);
	
	СтрокаКодовПТСПересчетом	= ",111,121,130,140,150,160,161,162,163,164,165,170,224,231,291,292,293";
	СтрокаКодовПТБезПересчета	= ",232,271,272,284,285,310,320,330";
	
	МассивКодовПТСПересчетом	= СтрРазделить(СтрокаКодовПТСПересчетом	, ",");
	МассивКодовПТБезПересчета	= СтрРазделить(СтрокаКодовПТБезПересчета, ",");
	
	ДанныеКС.Вставить("МассивКодовПТСПересчетом"	, МассивКодовПТСПересчетом);
	ДанныеКС.Вставить("МассивКодовПТБезПересчета"	, МассивКодовПТБезПересчета);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОтчета(ОтчетСсылка)
	
	ДанныеОтчета = Неопределено;
	
	Если ОтчетСсылка = Неопределено Тогда
		Возврат ДанныеОтчета;
	КонецЕсли;
		
	ДанныеОтчета = ОтчетСсылка.ДанныеОтчета.Получить();
	
	Если ДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ДанныеОтчета);
	КонецЕсли;
	
	Возврат ДанныеОтчета;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеРаздела0(ДанныеОтчета)
	
	СтруктураР0 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный);
	СтруктураР0.Вставить("Страница", 1);
	
	Возврат СтруктураР0;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеРаздела1(ДанныеОтчета)
	
	Раздел1 = ДанныеОтчета.ДанныеМногоуровневыхРазделов.Раздел1.Строки;
	Для каждого СтраницаР1 Из Раздел1 Цикл
		СтруктураР1 = Новый Структура;
		
		ПолучитьДанныеЭлементаРаздела(СтраницаР1, СтруктураР1);
		
	КонецЦикла;
	
	СтруктураР1.Вставить("Страница", 1);
	
	Возврат СтруктураР1;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеМногостраничныхРазделов(ДанныеОтчета, Раздел)
	
	МассивСтраниц = Новый Массив;
	
	Если ДанныеОтчета = Неопределено Тогда
		Возврат МассивСтраниц;
	КонецЕсли;
	
	ДанныеРаздела = ДанныеОтчета.ДанныеМногоуровневыхРазделов[Раздел].Строки;
	Для каждого Страница Из ДанныеРаздела Цикл
		СтруктураДанных = Новый Структура;
		
		НомерСтраницы = ДанныеРаздела.Индекс(Страница) + 1;
		ПолучитьДанныеЭлементаРаздела(Страница, СтруктураДанных);
		СтруктураДанных.Вставить("Страница", НомерСтраницы);
		МассивСтраниц.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат МассивСтраниц;
	
КонецФункции

&НаСервере
Процедура СформироватьВременныеТаблицы()
	
	ВременныеТаблицы	= Новый МенеджерВременныхТаблиц;
	СхемаЗапроса		= Новый СхемаЗапроса;
	
	ИменаТаблиц			= Новый Структура;
	ИменаТаблиц.Вставить("ТаблицаР1а"	, "Т_Р1а");
	ИменаТаблиц.Вставить("ТаблицаР1б"	, "Т_Р1б");
	ИменаТаблиц.Вставить("ТаблицаР21"	, "Т_Р21");
	ИменаТаблиц.Вставить("ТаблицаР22"	, "Т_Р22");
	ИменаТаблиц.Вставить("ТаблицаР23"	, "Т_Р23");
	ИменаТаблиц.Вставить("ТаблицаР24"	, "Т_Р24");
	ИменаТаблиц.Вставить("ТаблицаР25"	, "Т_Р25");
	ИменаТаблиц.Вставить("ТаблицаР26"	, "Т_Р26");
	ИменаТаблиц.Вставить("ТаблицаП01"	, "Т_П01");
	ИменаТаблиц.Вставить("ТаблицаП21"	, "Т_П21");
	ИменаТаблиц.Вставить("ТаблицаП22"	, "Т_П22");
	
	// Формирование временных таблиц с данными разделов
	Для каждого Таблица Из ИменаТаблиц Цикл
		
		Пакет		= СхемаЗапроса.ПакетЗапросов.Добавить();
		Оператор	= Пакет.Операторы[0];
		ОписаниеВТ	= Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&" + Таблица.Значение);
		Пакет.ТаблицаДляПомещения = "В" + Таблица.Значение;
		
		Для каждого Колонка Из ДанныеКС[Таблица.Ключ].Колонки Цикл
			ОписаниеВТ.Источник.ДоступныеПоля.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Для каждого ДоступноеПоле Из ОписаниеВТ.Источник.ДоступныеПоля Цикл
			Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
		КонецЦикла;
		
	КонецЦикла;
	
	// Выполнение запроса
	Запрос			= Новый Запрос;
	Запрос.Текст	= СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.УстановитьПараметр("Т_Р1а"		, ДанныеКС.ТаблицаР1а);
	Запрос.УстановитьПараметр("Т_Р1б"		, ДанныеКС.ТаблицаР1б);
	Запрос.УстановитьПараметр("Т_Р21"		, ДанныеКС.ТаблицаР21);
	Запрос.УстановитьПараметр("Т_Р22"		, ДанныеКС.ТаблицаР22);
	Запрос.УстановитьПараметр("Т_Р23"		, ДанныеКС.ТаблицаР23);
	Запрос.УстановитьПараметр("Т_Р24"		, ДанныеКС.ТаблицаР24);
	Запрос.УстановитьПараметр("Т_Р25"		, ДанныеКС.ТаблицаР25);
	Запрос.УстановитьПараметр("Т_Р26"		, ДанныеКС.ТаблицаР26);
	Запрос.УстановитьПараметр("Т_П01"		, ДанныеКС.ТаблицаП01);
	Запрос.УстановитьПараметр("Т_П21"		, ДанныеКС.ТаблицаП21);
	Запрос.УстановитьПараметр("Т_П22"		, ДанныеКС.ТаблицаП22);
	
	Запрос.Выполнить();
	
	ДанныеКС.Вставить("ВременныеТаблицы"	, ВременныеТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область КС_Сервис

&НаСервере
Процедура СформироватьПоказатели(Показатели, ИменаПоказателей)
	
	Показатели = ?(Показатели = Неопределено, Новый Структура, Показатели);
	
	Для каждого Элемент Из ИменаПоказателей Цикл
		Показатели.Вставить(Элемент.Ключ, Новый Структура());
		
		МассивПредставления	= Новый Массив;
		ПодстрокаРаздела	= "";
		ПодстрокаСтраницы	= "";
		
		ИндексРаздела		= Сред(Элемент.Ключ, 1, 3);
		ИндексДополнения	= Сред(Элемент.Ключ, 4, 1);
		ПодстрокаДополнения	= Сред(Элемент.Ключ, 9, 1);
		ПодстрокаСтроки		= Сред(Элемент.Значение, 9, 3);
		ПодстрокаГрафы		= Сред(Элемент.Значение, 12,2);
		
		ДанныеКС.ПредставлениеРазделов.Свойство(ИндексРаздела	, ПодстрокаРаздела);
		ДанныеКС.РазделыПоказателей.Свойство(ИндексРаздела		, ПодстрокаСтраницы);
		
		Если ИндексРаздела = "Р00" Тогда
			МассивПредставления.Добавить(ПодстрокаРаздела);
			ДанныеКС.ПоляТитульногоЛиста.Свойство(Элемент.Ключ, ПодстрокаСтроки);
			МассивПредставления.Добавить(ПодстрокаСтроки);
		Иначе
			Если ИндексДополнения = "С" Тогда
				МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
			ИначеЕсли ИндексДополнения = "Г" Тогда
				МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
			Иначе
				МассивПредставления.Добавить("Графа " + ПодстрокаГрафы);
				МассивПредставления.Добавить("Строка " + ПодстрокаСтроки);
			КонецЕсли;
			МассивПредставления.Добавить(ПодстрокаРаздела);
			Если ПодстрокаДополнения = "П" Тогда
				МассивПредставления.Добавить("предыдущего отчетного периода");
			КонецЕсли;
		КонецЕсли;
		
		Представление		= СтрСоединить(МассивПредставления, " ");
		Многострочный		= СтрДлина(Элемент.Значение) = 14;
		Многостраничный		= НЕ ДанныеКС.МногостраничныеРазделы.Найти(ИндексРаздела) = Неопределено;
		Округление			= НЕ ДанныеКС.ЦелочисленныеРазделы.Найти(ИндексРаздела) = Неопределено;
		
		// постоянные данные
		Показатели[Элемент.Ключ].Вставить("Раздел"			, ИндексРаздела);
		Показатели[Элемент.Ключ].Вставить("ИмяПоказателя"	, Элемент.Значение);
		Показатели[Элемент.Ключ].Вставить("Представление"	, Представление);
		Показатели[Элемент.Ключ].Вставить("ИмяСтраницы"		, ПодстрокаСтраницы);
		
		// переменные данные
		Показатели[Элемент.Ключ].Вставить("Отчет");
		Показатели[Элемент.Ключ].Вставить("Страница"		, "");
		Показатели[Элемент.Ключ].Вставить("Значение");
		Показатели[Элемент.Ключ].Вставить("ЗначениеСтр"		, "");
		Показатели[Элемент.Ключ].Вставить("Итог"			, 0);
		
		// сервисные данные
		Показатели[Элемент.Ключ].Вставить("Многостраничный"	, Многостраничный);
		Показатели[Элемент.Ключ].Вставить("Многострочный"	, Многострочный);
		Показатели[Элемент.Ключ].Вставить("Округление"		, Округление);
		Показатели[Элемент.Ключ].Вставить("Синоним"			, Элемент.Ключ);
		Показатели[Элемент.Ключ].Вставить("Дополнение"		, "");
		Показатели[Элемент.Ключ].Вставить("Расшифровывать"	, Истина);
		Показатели[Элемент.Ключ].Вставить("Инверсия"		, Ложь);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьПоказатель(Показатель)
		
	НоваяСтрока	= СписокРасшифровкиПоказателей.Добавить();
	НоваяСтрока.Номер					= СчетчикФормулДляРасшифровок;
	
	НоваяСтрока.ИмяПоказателя			= Показатель.ИмяПоказателя;
	НоваяСтрока.ПредставлениеПоказателя = ?(ЗначениеЗаполнено(Показатель.Дополнение), 
	Показатель.Представление + ", (" + Показатель.Дополнение + ")", Показатель.Представление);
	НоваяСтрока.ИмяСтраницы				= Показатель.ИмяСтраницы;
	
	НоваяСтрока.СсылкаНаДокументРО		= ?(ЗначениеЗаполнено(Показатель.Отчет), 
		Показатель.Отчет, СтруктураРеквизитовФормы.мСохраненныйДок);
	НоваяСтрока.СсылкаНаДокументРО		= ?(Лев(Показатель.ИмяПоказателя, 7) = Лев(Показатель.Синоним, 7), 
		Неопределено, НоваяСтрока.СсылкаНаДокументРО);
	НоваяСтрока.Страница				= Показатель.Страница;
	
	Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
		НоваяСтрока.ЗначениеПоказателя		= Показатель.Значение;
	Иначе
		НоваяСтрока.ЗначениеПоказателя		= Показатель.ЗначениеСтр;
	КонецЕсли;
	
	Показатель.Дополнение = "";
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки = Неопределено, ОграничениеПоДлине = Истина)
	
	Перем ЗначениеВИсточнике;
	
	Если ЗначениеЗаполнено(НомерСтроки) И Сред(Показатель.ИмяПоказателя, 14, 1) = "_" Тогда
		Показатель.ИмяПоказателя = ?(ОграничениеПоДлине, Лев(Показатель.ИмяПоказателя, 14), Показатель.ИмяПоказателя) 
			+ XMLСтрока(НомерСтроки);
	КонецЕсли;
	
	Если Источник.Свойство(Показатель.ИмяПоказателя, ЗначениеВИсточнике) Тогда
		Показатель.Страница = Источник.Страница;
		
		Если ТипЗнч(ЗначениеВИсточнике) = Тип("Число") И Показатель.Округление Тогда
			ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
			Показатель.Значение = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, 
				ЗначениеВИсточнике);
			Показатель.Итог = Показатель.Итог + Показатель.Значение;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Число") Тогда
			ЗначениеВИсточнике = ?(Показатель.Инверсия, -ЗначениеВИсточнике, ЗначениеВИсточнике);
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.Итог = Показатель.Итог + ЗначениеВИсточнике;
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Строка") Тогда
			Показатель.Значение = СокрЛП(ЗначениеВИсточнике);
			Показатель.ЗначениеСтр = ?(ЗначениеЗаполнено(ЗначениеВИсточнике), Показатель.Значение, "(...)");
		ИначеЕсли ТипЗнч(ЗначениеВИсточнике) = Тип("Дата") Тогда
			Показатель.Значение = ЗначениеВИсточнике;
			Показатель.ЗначениеСтр = Формат(ЗначениеВИсточнике, "ДФ=dd.MM.yy; ДП=(...)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказатели(Показатели, Источник)
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		Для каждого ЭлементМассива Из Источник Цикл
			ЗаполнитьПоказатели(Показатели, ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из Показатели Цикл
		
		Если Элемент.Значение.Многострочный Тогда
			КоличествоСтрок = КоличествоСтрок(Источник, Лев(Элемент.Значение.ИмяПоказателя, 14));
			Если КоличествоСтрок = 0 Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			КоличествоСтрок = 1;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			Если Элемент.Значение.Многострочный Тогда
				Элемент.Значение.ИмяПоказателя = Лев(Элемент.Значение.ИмяПоказателя, 14) + XMLСтрока(НомерСтроки);
			КонецЕсли;
				
			ЗаполнитьПоказатель(Элемент.Значение, Источник);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатель(Показатель, Источник, НомерСтроки = Неопределено, 
		ОграничениеПоДлине = Истина)
	
	ЗаполнитьПоказатель(Показатель, Источник, НомерСтроки, ОграничениеПоДлине);
		
	Если Показатель.Расшифровывать Тогда
		РасшифроватьПоказатель(Показатель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРасшифроватьПоказатели(Показатели, Источник, НомерСтроки = Неопределено)
	
	Для каждого Элемент Из Показатели Цикл
			
		ЗаполнитьИРасшифроватьПоказатель(Элемент.Значение, Источник, НомерСтроки);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулу(Знач Настройки);

	СчетчикФормулДляРасшифровок				= СчетчикФормулДляРасшифровок + 1;
	НовСтр									= СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы	= Настройки.ОписаниеКС;
	НовСтр.Номер							= СчетчикФормулДляРасшифровок;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОшибок(Настройки)
	
	Если Настройки.ЭтоОшибка Тогда
		Настройки.КоличествоНайденныхОшибок = Настройки.КоличествоНайденныхОшибок + 1;
	Иначе
		Настройки.КоличествоНайденныхБезОшибок = Настройки.КоличествоНайденныхБезОшибок + 1;
	КонецЕсли;
	
	Счетчик		= XMLСтрока(Настройки.КоличествоНайденныхОшибок + Настройки.КоличествоНайденныхБезОшибок);
	ОписаниеКС	= СформироватьОписаниеКС(Настройки, "ДопСведенияВОписаниеКС");
	ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) + ОписаниеКС;
	
	Настройки.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Счетчик, ОписаниеКС);
	Настройки.СтруктураОшибок.Вставить("Расшифровка"	+ Счетчик, Настройки.Расшифровка);
	Настройки.СтруктураОшибок.Вставить("ЭтоОшибка"		+ Счетчик, Настройки.ЭтоОшибка);
	Настройки.СтруктураОшибок.Вставить("Нарушение"		+ Счетчик, Настройки.Нарушение);
	Настройки.СтруктураОшибок.Вставить("Описание"		+ Счетчик, Настройки.ОписаниеОшибки);
	Настройки.СтруктураОшибок.Вставить("Комментарий"	+ Счетчик, Настройки.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОписаниеКС(Знач Настройки, ЗначениеСвойства)
	
	Если Настройки[ЗначениеСвойства] Тогда
		Если ЗначениеЗаполнено(Настройки.ДопСведения) Тогда
				
			Возврат Настройки.ОписаниеКС + " (" + Настройки.ДопСведения + ")"; 
			
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Настройки.ОписаниеКС;
	
КонецФункции

&НаСервере
Функция ОбработатьНастройки(Знач Настройки = Неопределено, 
	Знач ИзменяемыеСвойства 	= Неопределено, 
	Знач СтруктураРезультата 	= Неопределено)
	
	Если Настройки = Неопределено Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("ТекстФормулы"			, (НСтр("ru=''")));
		Настройки.Вставить("Нарушение"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеКС"				, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибки"			, (НСтр("ru=''")));
		Настройки.Вставить("ОписаниеОшибок"			, Новый Массив);
		Настройки.Вставить("Расшифровка"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонРасшифровки"		, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведения"			, (НСтр("ru=''")));
		Настройки.Вставить("ШаблонДопСведений"		, (НСтр("ru=''")));
		Настройки.Вставить("Комментарий"			, (НСтр("ru=''")));
		Настройки.Вставить("ДопСведенияПараметры"	, Новый Структура);
		Настройки.Вставить("ЭтоОшибка"				, Ложь);
		Настройки.Вставить("СтруктураОшибок");
		Настройки.Вставить("КоличествоНайденныхОшибок");
		Настройки.Вставить("КоличествоНайденныхБезОшибок");
		Настройки.Вставить("ДопСведенияВОписаниеКС");
		Настройки.Вставить("ДопСведенияВЗаголовокРасшифровки");
		Настройки.Вставить("ДопСведенияВСтрокуРасшифровки");
		Настройки.Вставить("ПредставлениеПоказателя", "");
		Настройки.Вставить("РасшифровкаСписка"		, "");
		
		Если Документирование Тогда
			
			Настройки.Вставить("НомерКС");
			Настройки.Вставить("Раздел");
			Настройки.Вставить("Условие");
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если Не ИзменяемыеСвойства = Неопределено Тогда
		Для каждого ЭлементКоллекции Из ИзменяемыеСвойства Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Если Документирование Тогда
		СтрокаОписания = ТаблицаОписаний.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОписания, Настройки);
		СтрокаОписания.ОписаниеКС	= ?(ПустаяСтрока(Настройки.ТекстФормулы), "", Настройки.ТекстФормулы + Символы.ПС) 
			+ Настройки.ОписаниеКС;
		Возврат Настройки;
	КонецЕсли;
	
	Если Не СтруктураРезультата = Неопределено Тогда
		Для каждого ЭлементКоллекции Из СтруктураРезультата Цикл
			Если Настройки.Свойство(ЭлементКоллекции.Ключ) Тогда
				Настройки.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
				
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаСервере
Функция ОбработатьРезультат(Знач Настройки, Знач СтруктураРезультата);
	
	ЗаполнитьЗначенияСвойств(СтруктураРезультата, Настройки,
		"КоличествоНайденныхОшибок, КоличествоНайденныхБезОшибок");
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция КоличествоСтрок(Источник, ИмяПоказателя, ОграничениеПоДлине = Истина)
	
	Количество = 0;
	ИмяПоказателя = ?(ОграничениеПоДлине, Лев(ИмяПоказателя, 14), ИмяПоказателя);
	
	Пока Источник.Свойство(ИмяПоказателя + XMLСтрока(Количество + 1)) Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Функция СуммаПоказателей(Показатели, КодПоказателя = "")
	
	Результат = 0;
	
	Для каждого Показатель Из Показатели Цикл
		Если НЕ ЗначениеЗаполнено(КодПоказателя) Тогда
			Результат = Результат + Показатель.Значение.Значение;
		ИначеЕсли СтрНайти(Показатель.Ключ, КодПоказателя) = 0 Тогда
			Продолжить;
		Иначе
			Результат = Результат + Показатель.Значение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазделЗаполнен(Раздел)
	
	Если НЕ ТипЗнч(Раздел) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого Элемент Из Раздел Цикл
		Если НЕ ДанныеКС.МассивПолейИсключений.Найти(Элемент.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ИсточникИзВыборки(Выборка, Показатель, НомерСтроки = "", НомерСтроки2 = "")
	
	Результат = Новый Структура;
	ИмяВВыборке = Показатель.Синоним;
	ИмяБазовое = ?(Показатель.Многострочный, Лев(Показатель.ИмяПоказателя, 14), Показатель.ИмяПоказателя);
	
	Если ЗначениеЗаполнено(НомерСтроки2) Тогда
		Показатель.ИмяПоказателя = ИмяБазовое + НомерСтроки + "_";
		ИмяВИсточнике = Показатель.ИмяПоказателя + НомерСтроки2;
		
	ИначеЕсли ЗначениеЗаполнено(НомерСтроки) Тогда
		Показатель.ИмяПоказателя = ИмяБазовое;
		ИмяВИсточнике = Показатель.ИмяПоказателя + НомерСтроки;
	Иначе
		ИмяВИсточнике = ИмяБазовое;
	КонецЕсли;
	
	ЗначениеВыборки = Выборка[ИмяВВыборке];
	Результат.Вставить(ИмяВИсточнике, ЗначениеВыборки);
	Результат.Вставить("Страница"	, Выборка.Страница);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначениеСтр(ВхСтрока)
	
	Если НЕ ТипЗнч(ВхСтрока) = Тип("Строка") Тогда
		Возврат ВхСтрока;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВхСтрока) Тогда
		Возврат "(...)";
	Иначе
		Возврат СокрЛП(ВхСтрока);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
	ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции
