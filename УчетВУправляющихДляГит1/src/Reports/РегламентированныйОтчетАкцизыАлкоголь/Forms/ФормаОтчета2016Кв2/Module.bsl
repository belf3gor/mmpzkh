&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016Кв2";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 2));
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы11  = "П0001100001";
	СтруктураРеквизитовФормы.мИдГруппы12  = "П0001200001";
	СтруктураРеквизитовФормы.мИдГруппы21  = "П0002100001";
	СтруктураРеквизитовФормы.мИдГруппы22  = "П0002200001";
	СтруктураРеквизитовФормы.мИдГруппы241 = "П0002400001";
	СтруктураРеквизитовФормы.мИдГруппы242 = "П0002400002";
	СтруктураРеквизитовФормы.мИдГруппы25  = "П0002500001";
	СтруктураРеквизитовФормы.мИдГруппы26  = "П0002600001";
	СтруктураРеквизитовФормы.мИдГруппы101 = "П0010100001";
	СтруктураРеквизитовФормы.мИдГруппы131 = "П0013100001";
	СтруктураРеквизитовФормы.мИдГруппы132 = "П0013200001";
	СтруктураРеквизитовФормы.мИдГруппы104 = "П0010400001";
	СтруктураРеквизитовФормы.мИдГруппы105 = "П0010500001";
	
	// Идентификаторы структур с данными немногостраничных разделов.
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел11  = Новый Структура;
	СтруктураДанныхРаздел12  = Новый Структура;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Приложение21", 2);
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,  СтруктураРеквизитовФормы.мИдГруппы11);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,  СтруктураРеквизитовФормы.мИдГруппы12);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  СтруктураРеквизитовФормы.мИдГруппы21);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  СтруктураРеквизитовФормы.мИдГруппы22);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, СтруктураРеквизитовФормы.мИдГруппы241);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, СтруктураРеквизитовФормы.мИдГруппы242);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  СтруктураРеквизитовФормы.мИдГруппы25);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  СтруктураРеквизитовФормы.мИдГруппы26);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, СтруктураРеквизитовФормы.мИдГруппы101);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы131, СтруктураРеквизитовФормы.мИдГруппы131);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы132, СтруктураРеквизитовФормы.мИдГруппы132);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, СтруктураРеквизитовФормы.мИдГруппы104);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы105, СтруктураРеквизитовФормы.мИдГруппы105);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы131, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы132, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы105, Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2",      "ТаблицаСтраницыРаздел2");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел31",     "ТаблицаСтраницыРаздел31");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел32",     "ТаблицаСтраницыРаздел32");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел33",     "ТаблицаСтраницыРаздел33");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение1",  "ТаблицаСтраницыПриложение1");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение31", "ТаблицаСтраницыПриложение31");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение32", "ТаблицаСтраницыПриложение32");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение4",  "ТаблицаСтраницыПриложение4");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение5",  "ТаблицаСтраницыПриложение5");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение6",  "ТаблицаСтраницыПриложение6");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение7",  "ТаблицаСтраницыПриложение7");
	мСтруктураМногостраничныхРазделов.Вставить("Приложение8",  "ТаблицаСтраницыПриложение8");
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы131, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы132, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы105, 1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12,  2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22,  3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы241, 5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы242, 3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы25,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы26,  5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы101, 4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы131, 5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы132, 5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы104, 7);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы105, 7);
	
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);

	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "11/05/2016";
	
	// Код отчета, равен КНД.
	СтруктураРеквизитовФормы.мКодОтчета = 1151090;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(
		СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.01", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1151090";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
	= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы21");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы22");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы241");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы242");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы25");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы26");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы101");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы131");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы132");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы104");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы105");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("ИмяАктивнойОбластиРаздела2", "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногоуровневыхРазделов()
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел31.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел32.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел33.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение31.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение32.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение5.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение6.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение7.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыПриложение8.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено, СохранятьДанныеТекущейСтраницы = Истина)
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, СохранятьДанныеТекущейСтраницы);
	КонецЕсли;
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];

	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(Форма, ИмяТекТабличногоПоля);

	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		
		// Раздел 2 содержит несколько многострочных блоков,
		// Поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы21);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы22);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы241);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы242);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы25);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы26);
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы21 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы21].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы21);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ТаблицаДопСтрокГруппы21);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы22 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы22].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы22);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ТаблицаДопСтрокГруппы22);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы241 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы241].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы241);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ТаблицаДопСтрокГруппы241);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы242 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы242].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы242);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ТаблицаДопСтрокГруппы242);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы25 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы25].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы25);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ТаблицаДопСтрокГруппы25);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы26 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы26].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы26);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ТаблицаДопСтрокГруппы26);
		
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// Создаем исходную таблицу значений многостраничных разделов.
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
		 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
			СтрТаблицаСтраницы.Представление = "Новая страница";
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
			СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
		Иначе
			СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
		КонецЕсли;
		
		Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
		КонецЕсли;
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление    = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница = Истина;
		
		// Очищаем показатели текущей страницы и в случае, если страница содержит
		// многострочный раздел, удаляем все дополнительно созданные строки.
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);
		
		// Выполняем расчет показателей добавленной страницы.
		Расчет(Форма, ИмяТекущейСтраницыПанели);
		
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Ложь;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел11";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы11;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 8;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел12";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 4;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы21;
	НовСтр.Область = "МногострочнаяЧасть21";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы22;
	НовСтр.Область = "МногострочнаяЧасть22";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы241;
	НовСтр.Область = "МногострочнаяЧасть241";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы242;
	НовСтр.Область = "МногострочнаяЧасть242";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы25;
	НовСтр.Область = "МногострочнаяЧасть25";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы26;
	НовСтр.Область = "МногострочнаяЧасть26";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел31";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел32";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Раздел33";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение1";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы101;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение21";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение22";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение31";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы131;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение32";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы132;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение4";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы104;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 8;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение5";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы105;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 8;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение6";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение7";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                   = "Приложение8";
	СтрокаУровня1.СохранятьМногострКакТЗ        = Истина;
	СтрокаУровня1.МногостраничностьВРазделе     = Истина;
	СтрокаУровня1.МаксКолвоЭкз                  = 0;
	СтрокаУровня1.ОчищатьРаздел                 = Истина;
	СтрокаУровня1.ИмяПредставления              = "";
	СтрокаУровня1.ПредставлениеДанных           = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки   = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыМногострочныхГрупп(Форма)
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11",  Форма.СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12",  Форма.СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы21",  Форма.СтруктураРеквизитовФормы.мИдГруппы21);
	ИдГрупп.Вставить("мИдГруппы22",  Форма.СтруктураРеквизитовФормы.мИдГруппы22);
	ИдГрупп.Вставить("мИдГруппы241", Форма.СтруктураРеквизитовФормы.мИдГруппы241);
	ИдГрупп.Вставить("мИдГруппы242", Форма.СтруктураРеквизитовФормы.мИдГруппы242);
	ИдГрупп.Вставить("мИдГруппы25",  Форма.СтруктураРеквизитовФормы.мИдГруппы25);
	ИдГрупп.Вставить("мИдГруппы26",  Форма.СтруктураРеквизитовФормы.мИдГруппы26);
	ИдГрупп.Вставить("мИдГруппы101", Форма.СтруктураРеквизитовФормы.мИдГруппы101);
	ИдГрупп.Вставить("мИдГруппы131", Форма.СтруктураРеквизитовФормы.мИдГруппы131);
	ИдГрупп.Вставить("мИдГруппы132", Форма.СтруктураРеквизитовФормы.мИдГруппы132);
	ИдГрупп.Вставить("мИдГруппы104", Форма.СтруктураРеквизитовФормы.мИдГруппы104);
	ИдГрупп.Вставить("мИдГруппы105", Форма.СтруктураРеквизитовФормы.мИдГруппы105);
	
	Возврат ИдГрупп;
	
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы11 Тогда
		ТекТабличноеПоле = "Раздел11";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы12 Тогда
		ТекТабличноеПоле = "Раздел12";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы21
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы22
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы241
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы242
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы25
		ИЛИ ИдГруппы = ИдГрупп.мИдГруппы26 Тогда
		ТекТабличноеПоле = "Раздел2";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы101 Тогда
		ТекТабличноеПоле = "Приложение1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы131 Тогда
		ТекТабличноеПоле = "Приложение31";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы132 Тогда
		ТекТабличноеПоле = "Приложение32";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы104 Тогда
		ТекТабличноеПоле = "Приложение4";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы105 Тогда
		ТекТабличноеПоле = "Приложение5";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = ИдентификаторыМногострочныхГрупп(ЭтаФорма);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;
	
	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел11" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы11;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел12" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы12;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы101;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение31" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы131;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение32" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы132;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы104;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы105;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];
	
	СтруктураДанныхПоля = Новый Структура;
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];
		
		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
			И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Истина;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	Попытка
		ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		Если Лев(ИмяПоказателя, 1) = "_" Тогда
			Возврат ИзмененияПроизошли;
		КонецЕсли;
	Исключение
		ИзмененияПроизошли = Ложь;
	КонецПопытки;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ЭтаФорма, ТипНП);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт
	
	УправлениеЛистами(ЭтаФорма, ТипНП);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТелОрганизации, ФИО, ОКТМО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = Форма.ТабличныйДокумент.Области.НаимОрг.Значение;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		ОКТМО = СокрЛП(СведенияОбОрганизации.ОКТМО);
		Если НЕ ЗначениеЗаполнено(Форма.СтруктураДанныхРаздел11.П000110001003) Тогда
			Форма.СтруктураДанныхРаздел11.П000110001003 = ОКТМО;
		КонецЕсли;
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	// Выясним, есть ли представитель.
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации
				= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		КонецЕсли;
	Иначе
		// Есть представитель, подписант - он.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура(
		"ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим",
		ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу
			= мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
				"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
					ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
				"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2016Кв2_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",    ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел31",     ПрефиксИменМакетов + "Раздел31");
	СоответствиеРазделовМакетам.Вставить("Раздел32",     ПрефиксИменМакетов + "Раздел32");
	СоответствиеРазделовМакетам.Вставить("Раздел33",     ПрефиксИменМакетов + "Раздел33");
	СоответствиеРазделовМакетам.Вставить("Приложение1",  ПрефиксИменМакетов + "Приложение1");
	СоответствиеРазделовМакетам.Вставить("Приложение21", ПрефиксИменМакетов + "Приложение21");
	СоответствиеРазделовМакетам.Вставить("Приложение22", ПрефиксИменМакетов + "Приложение22");
	СоответствиеРазделовМакетам.Вставить("Приложение31", ПрефиксИменМакетов + "Приложение31");
	СоответствиеРазделовМакетам.Вставить("Приложение32", ПрефиксИменМакетов + "Приложение32");
	СоответствиеРазделовМакетам.Вставить("Приложение4",  ПрефиксИменМакетов + "Приложение4");
	СоответствиеРазделовМакетам.Вставить("Приложение5",  ПрефиксИменМакетов + "Приложение5");
	СоответствиеРазделовМакетам.Вставить("Приложение6",  ПрефиксИменМакетов + "Приложение6");
	СоответствиеРазделовМакетам.Вставить("Приложение7",  ПрефиксИменМакетов + "Приложение7");
	СоответствиеРазделовМакетам.Вставить("Приложение8",  ПрефиксИменМакетов + "Приложение8");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		// Определение исходного количества строк на листе МЧБ.
		Если Парам1.ИмяСтраницы = "Приложение1" Тогда
			ИсхКолвоСтрокБлока = 20;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение31"
			ИЛИ Парам1.ИмяСтраницы = "Приложение32" Тогда
			ИсхКолвоСтрокБлока = 18;
		ИначеЕсли Парам1.ИмяСтраницы = "Приложение4"
			ИЛИ Парам1.ИмяСтраницы = "Приложение5" Тогда
			ИсхКолвоСтрокБлока = 3;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя.
					СписокОбластейПереименования.Добавить(ТекущаяОбласть,
						СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
				КонецЦикла;
				
				Если Сч > 1 Тогда
					Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
						ИмяЯчейки = ТекущаяОбласть.Имя;
						Если Лев(ИмяЯчейки, 2) = "П0" И СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
							СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
				
				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЛистМЧБ.ПолеСверху = 5;
				ЛистМЧБ.ПолеСправа = 5;
				ЛистМЧБ.ПолеСнизу  = 5;
				ЛистМЧБ.ПолеСлева  = 5;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) > 0 Тогда
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
					ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
				
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
		ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Значение = Область.Значение;
			НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
		КонецЕсли;
	КонецЦикла;
	
	НайдЗнач = Показатели.Найти("ИНН", "Имя");
	Если НЕ НайдЗнач = Неопределено Тогда
		Показатели.Удалить(НайдЗнач);
	КонецЕсли;
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН1";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайдЗнач = Показатели.Найти("КПП", "Имя");
	Если НЕ НайдЗнач = Неопределено Тогда
		Показатели.Удалить(НайдЗнач);
	КонецЕсли;
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП1";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайдЗнач = Показатели.Найти("ДатаПодписи", "Имя");
	Если НЕ НайдЗнач = Неопределено Тогда
		Показатели.Удалить(НайдЗнач);
	КонецЕсли;
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// Особая обработка ФИО на титульном листе.
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
		
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// Особая обработка ОКВЭД.
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// Особая обработка ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000110001003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000120001003") > 0 Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню = Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст = "." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень = ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ = ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							// Разделение числа на 2 части.
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							// Разделение областей показателя на 2 части.
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								// На МЧБ нет разделения на целую и дробную части.
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;
							Иначе
								// Определяем какая часть выводится (Целая, дробная или точка).
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится целая часть.
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									// Выводится дробная часть.
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									// Выводится точка. Считаем, что область заполненяется корректно.
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1"".'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		Если ИмяСтраницы = "Раздел2" Тогда
			ВывестиНаПечатьРаздел2(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		Иначе
			ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
	
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма,
		ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя,
			ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки       = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ПостфиксВИмениОбластиМногострочнаяЧасть = "";
	Если ИмяГруппы = "П0002100001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "21";
	ИначеЕсли ИмяГруппы = "П0002200001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "22";
	ИначеЕсли ИмяГруппы = "П0002400001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "241";
	ИначеЕсли ИмяГруппы = "П0002400002" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "242";
	ИначеЕсли ИмяГруппы = "П0002500001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "25";
	ИначеЕсли ИмяГруппы = "П0002600001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "26";
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ;
	
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, ,
		МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				ОбластьТаблДок = ТекТабличноеПоле.Область(
					КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
					Область.Лево,
					КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки,
					Область.Право);
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх, ,
	ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// Реальное кол-во строк (колво заполненных строк).
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти  = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти = КоординатаВерх;
		// Координаты текущей области.
		Если Зап.Область = НазвОбласти Тогда
			Низ  = КоординатаНиз;
			Верх = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
	
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
	
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
	
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
	
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=")).Имя = Зап.Область;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;
	
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];
	
	НомерТекущейСтраницы = 1;
	
	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела.
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа
		
		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели.
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		
		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа
		
		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию.'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11" Тогда
		СохрТЗМногострочнойГруппы11 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы11].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		СохрТЗМногострочнойГруппы12 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы12].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СохрТЗМногострочнойГруппы21 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы21].Выгрузить();
		СохрТЗМногострочнойГруппы22 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы22].Выгрузить();
		СохрТЗМногострочнойГруппы241 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы241].Выгрузить();
		СохрТЗМногострочнойГруппы242 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы242].Выгрузить();
		СохрТЗМногострочнойГруппы25 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы25].Выгрузить();
		СохрТЗМногострочнойГруппы26 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы26].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		СохрТЗМногострочнойГруппы101 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы101].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение31" Тогда
		СохрТЗМногострочнойГруппы131 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы131].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение32" Тогда
		СохрТЗМногострочнойГруппы132 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы132].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение4" Тогда
		СохрТЗМногострочнойГруппы104 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы104].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		СохрТЗМногострочнойГруппы105 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы105].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Раздел1ВыводилсяНаПечать = Ложь;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			Если СтрокаУровня1.ИмяСтраницы = "Раздел11"
				ИЛИ СтрокаУровня1.ИмяСтраницы = "Раздел12" Тогда
				
				Если Раздел1ВыводилсяНаПечать Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПараметров.Вставить("ИмяСтраницы", "Раздел1");
				СтруктураПараметров.Вставить("НаименованиеЛиста", "Раздел 1");
				
				ВывестиНаПечатьРаздел1(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
				Раздел1ВыводилсяНаПечать = Истина;
				
			Иначе
				
				Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
					
					ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
					ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
					
				Иначе
					
					СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
					ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы11].Загрузить(СохрТЗМногострочнойГруппы11);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы12].Загрузить(СохрТЗМногострочнойГруппы12);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы21].Загрузить(СохрТЗМногострочнойГруппы21);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы22].Загрузить(СохрТЗМногострочнойГруппы22);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы241].Загрузить(СохрТЗМногострочнойГруппы241);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы242].Загрузить(СохрТЗМногострочнойГруппы242);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы25].Загрузить(СохрТЗМногострочнойГруппы25);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы26].Загрузить(СохрТЗМногострочнойГруппы26);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы101].Загрузить(СохрТЗМногострочнойГруппы101);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение31" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы131].Загрузить(СохрТЗМногострочнойГруппы131);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение32" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы132].Загрузить(СохрТЗМногострочнойГруппы132);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение4" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы104].Загрузить(СохрТЗМногострочнойГруппы104);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение5" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы105].Загрузить(СохрТЗМногострочнойГруппы105);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
	ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьРаздел1(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел11"));
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанныхРаздел11"] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел11");
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел12"));
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанныхРаздел12"] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел12");
	СтруктураГруппы = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатныйБланк2016Кв2_Раздел1");
	
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы11 = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел11");
	ИдГруппы12 = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел12");
	
	ИсхКолвоСтрокБлока = 3;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	ТекКолвоСтрокБлока11 = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы11]].Количество();
	ТекКолвоСтрокБлока12 = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы12]].Количество();
	
	КолвоЛистовМЧБДляБлока11 = Цел(ТекКолвоСтрокБлока11 / ИсхКолвоСтрокБлока);
	Если ТекКолвоСтрокБлока11 % ИсхКолвоСтрокБлока > 0 Тогда
		КолвоЛистовМЧБДляБлока11 = КолвоЛистовМЧБДляБлока11 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока12 = Цел(ТекКолвоСтрокБлока12 / ИсхКолвоСтрокБлока);
	Если ТекКолвоСтрокБлока12 % ИсхКолвоСтрокБлока > 0 Тогда
		КолвоЛистовМЧБДляБлока12 = КолвоЛистовМЧБДляБлока12 + 1;
	КонецЕсли;
	КолвоЛистовМЧБ = Макс(КолвоЛистовМЧБДляБлока11, КолвоЛистовМЧБДляБлока12);
	
	// Заполнение строки имен показателей (для проверки перед переименованием).
	СтрИменаПоказателей11 = "";
	СтрИменаПоказателей12 = "";
	
	Колонки11 = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы11]], Тип("ТаблицаЗначений")).Колонки;
	Колонки12 = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы12]], Тип("ТаблицаЗначений")).Колонки;
	
	Для каждого КолонкаСтруктуры Из Колонки11 Цикл
		СтрИменаПоказателей11 = СтрИменаПоказателей11 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки12 Цикл
		СтрИменаПоказателей12 = СтрИменаПоказателей12 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	
	// Заполнение списка листов МЧБ.
	СписокЛистовМЧБ = Новый СписокЗначений;
	Для Сч = 1 По КолвоЛистовМЧБ Цикл
		
		СписокОчищаемыхОбластей = Новый Массив;
		СписокОбластейПереименования = Новый СписокЗначений;
		
		Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
			ИмяЯчейки = ТекущаяОбласть.Имя;
			
			Если СтрДлина(ИмяЯчейки) < 13
				ИЛИ (СтрНайти(СтрИменаПоказателей11, Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей12, Лев(ИмяЯчейки, 13)) = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказательИНомерСтрокиСРазделителем
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина);
			
			ПоказательИНомерСтроки
			= Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
			
			НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
			
			СмысловаяЧастьСРазделителем
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина);
			
			СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
			
			ТекущийСчетчик
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
			
			// Окончательная проверка на вхождение в данную многострочную часть.
			ЭтоПоказательБлока11 = Ложь;
			ЭтоПоказательБлока12 = Ложь;
			Если СтрНайти(СтрИменаПоказателей11,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока11 = Истина;
			ИначеЕсли СтрНайти(СтрИменаПоказателей12,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока12 = Истина;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
			
			Если ЭтоПоказательБлока11 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока11 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока12 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока12 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Подготовка к переименованию.
			// Заполнение списка: значение - область, представление - будущее имя.
			СписокОбластейПереименования.Добавить(
			ТекущаяОбласть, СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
			
		КонецЦикла;
		
		// Очищение.
		Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
			ОбластьСписка.Имя = "";
			ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
		КонецЦикла;
		
		// Переименование.
		Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
			ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
		КонецЦикла;
		
		СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
		
	КонецЦикла;
	
	Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
		ЛистМЧБ = элЛистМЧБ.Значение;
		
		ЛистМЧБ.ПолеСверху = 5;
		ЛистМЧБ.ПолеСправа = 5;
		ЛистМЧБ.ПолеСнизу  = 5;
		ЛистМЧБ.ПолеСлева  = 5;
		
		ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
		
		ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЛистМЧБ);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьРаздел2(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатныйБланк2016Кв2_Раздел2");
	
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы21  = СтруктураРеквизитовФормы.мИдГруппы21;
	ИдГруппы22  = СтруктураРеквизитовФормы.мИдГруппы22;
	ИдГруппы241 = СтруктураРеквизитовФормы.мИдГруппы241;
	ИдГруппы242 = СтруктураРеквизитовФормы.мИдГруппы242;
	ИдГруппы25  = СтруктураРеквизитовФормы.мИдГруппы25;
	ИдГруппы26  = СтруктураРеквизитовФормы.мИдГруппы26;
	
	ИсхКолвоСтрокБлока21  = 8;
	ИсхКолвоСтрокБлока22  = 8;
	ИсхКолвоСтрокБлока241 = 4;
	ИсхКолвоСтрокБлока242 = 4;
	ИсхКолвоСтрокБлока25  = 4;
	ИсхКолвоСтрокБлока26  = 4;
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	ТекКолвоСтрокБлока21  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы21]].Количество();
	ТекКолвоСтрокБлока22  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы22]].Количество();
	ТекКолвоСтрокБлока241 = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы241]].Количество();
	ТекКолвоСтрокБлока242 = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы242]].Количество();
	ТекКолвоСтрокБлока25  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы25]].Количество();
	ТекКолвоСтрокБлока26  = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы26]].Количество();
	
	КолвоЛистовМЧБДляБлока21 = Цел(ТекКолвоСтрокБлока21 / ИсхКолвоСтрокБлока21);
	Если ТекКолвоСтрокБлока21 % ИсхКолвоСтрокБлока21 > 0 Тогда
		КолвоЛистовМЧБДляБлока21 = КолвоЛистовМЧБДляБлока21 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока22 = Цел(ТекКолвоСтрокБлока22 / ИсхКолвоСтрокБлока22);
	Если ТекКолвоСтрокБлока22 % ИсхКолвоСтрокБлока22 > 0 Тогда
		КолвоЛистовМЧБДляБлока22 = КолвоЛистовМЧБДляБлока22 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока241 = Цел(ТекКолвоСтрокБлока241 / ИсхКолвоСтрокБлока241);
	Если ТекКолвоСтрокБлока241 % ИсхКолвоСтрокБлока241 > 0 Тогда
		КолвоЛистовМЧБДляБлока241 = КолвоЛистовМЧБДляБлока241 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока242 = Цел(ТекКолвоСтрокБлока242 / ИсхКолвоСтрокБлока242);
	Если ТекКолвоСтрокБлока242 % ИсхКолвоСтрокБлока242 > 0 Тогда
		КолвоЛистовМЧБДляБлока242 = КолвоЛистовМЧБДляБлока242 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока25 = Цел(ТекКолвоСтрокБлока25 / ИсхКолвоСтрокБлока25);
	Если ТекКолвоСтрокБлока25 % ИсхКолвоСтрокБлока25 > 0 Тогда
		КолвоЛистовМЧБДляБлока25 = КолвоЛистовМЧБДляБлока25 + 1;
	КонецЕсли;
	КолвоЛистовМЧБДляБлока26 = Цел(ТекКолвоСтрокБлока26 / ИсхКолвоСтрокБлока26);
	Если ТекКолвоСтрокБлока26 % ИсхКолвоСтрокБлока26 > 0 Тогда
		КолвоЛистовМЧБДляБлока26 = КолвоЛистовМЧБДляБлока26 + 1;
	КонецЕсли;
	
	КолвоЛистовМЧБ = Макс(
	КолвоЛистовМЧБДляБлока21, КолвоЛистовМЧБДляБлока22, КолвоЛистовМЧБДляБлока241,
	КолвоЛистовМЧБДляБлока242, КолвоЛистовМЧБДляБлока25, КолвоЛистовМЧБДляБлока26);
	
	// Заполнение строки имен показателей (для проверки перед переименованием).
	СтрИменаПоказателей21  = "";
	СтрИменаПоказателей22  = "";
	СтрИменаПоказателей241 = "";
	СтрИменаПоказателей242 = "";
	СтрИменаПоказателей25  = "";
	СтрИменаПоказателей26  = "";
	
	Колонки21  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы21]], Тип("ТаблицаЗначений")).Колонки;
	Колонки22  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы22]], Тип("ТаблицаЗначений")).Колонки;
	Колонки241 = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы241]], Тип("ТаблицаЗначений")).Колонки;
	Колонки242 = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы242]], Тип("ТаблицаЗначений")).Колонки;
	Колонки25  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы25]], Тип("ТаблицаЗначений")).Колонки;
	Колонки26  = ДанныеФормыВЗначение(
	ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы26]], Тип("ТаблицаЗначений")).Колонки;
	
	Для каждого КолонкаСтруктуры Из Колонки21 Цикл
		СтрИменаПоказателей21 = СтрИменаПоказателей21 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки22 Цикл
		СтрИменаПоказателей22 = СтрИменаПоказателей22 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки241 Цикл
		СтрИменаПоказателей241 = СтрИменаПоказателей241 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки242 Цикл
		СтрИменаПоказателей242 = СтрИменаПоказателей242 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки25 Цикл
		СтрИменаПоказателей25 = СтрИменаПоказателей25 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	Для каждого КолонкаСтруктуры Из Колонки26 Цикл
		СтрИменаПоказателей26 = СтрИменаПоказателей26 + КолонкаСтруктуры.Имя;
	КонецЦикла;
	
	// Заполнение списка листов МЧБ.
	СписокЛистовМЧБ = Новый СписокЗначений;
	Для Сч = 1 По КолвоЛистовМЧБ Цикл
		
		СписокОчищаемыхОбластей = Новый Массив;
		СписокОбластейПереименования = Новый СписокЗначений;
		
		Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
			ИмяЯчейки = ТекущаяОбласть.Имя;
			
			Если СтрДлина(ИмяЯчейки) < 13
				ИЛИ (СтрНайти(СтрИменаПоказателей21, Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей22,  Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей241, Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей242, Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей25,  Лев(ИмяЯчейки, 13)) = 0
				И СтрНайти(СтрИменаПоказателей26,  Лев(ИмяЯчейки, 13)) = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			ПоказательИНомерСтрокиСРазделителем
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина);
			
			ПоказательИНомерСтроки
			= Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
			
			НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
			
			СмысловаяЧастьСРазделителем
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина);
			
			СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
			
			ТекущийСчетчик
			= РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
			
			// Окончательная проверка на вхождение в данную многострочную часть.
			ЭтоПоказательБлока21  = Ложь;
			ЭтоПоказательБлока22  = Ложь;
			ЭтоПоказательБлока241 = Ложь;
			ЭтоПоказательБлока242 = Ложь;
			ЭтоПоказательБлока25  = Ложь;
			ЭтоПоказательБлока26  = Ложь;
			
			Если СтрНайти(СтрИменаПоказателей21,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока21 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока21;
			ИначеЕсли СтрНайти(СтрИменаПоказателей22,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока22 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока22;
			ИначеЕсли СтрНайти(СтрИменаПоказателей241,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока241 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока241;
			ИначеЕсли СтрНайти(СтрИменаПоказателей242,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока242 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока242;
			ИначеЕсли СтрНайти(СтрИменаПоказателей25,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока25 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока25;
			ИначеЕсли СтрНайти(СтрИменаПоказателей26,СмысловаяЧасть) > 0 Тогда
				ЭтоПоказательБлока26 = Истина;
				ИсхКолвоСтрокБлока = ИсхКолвоСтрокБлока26;
			Иначе
				Продолжить;
			КонецЕсли;
			
			НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
			
			Если ЭтоПоказательБлока21 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока21 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока22 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока22 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока241 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока241 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока242 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока242 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока25 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока25 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			ИначеЕсли ЭтоПоказательБлока26 Тогда
				Если НовыйСчетчик > ТекКолвоСтрокБлока26 Тогда
					СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Подготовка к переименованию.
			// Заполнение списка: значение - область, представление - будущее имя.
			СписокОбластейПереименования.Добавить(
			ТекущаяОбласть, СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
			
		КонецЦикла;
		
		// Очищение.
		Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
			ОбластьСписка.Имя = "";
			ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
		КонецЦикла;
		
		// Переименование.
		Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
			ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
		КонецЦикла;
		
		СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
		
	КонецЦикла;
	
	Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
		
		ЛистМЧБ = элЛистМЧБ.Значение;
		
		ЛистМЧБ.ПолеСверху = 5;
		ЛистМЧБ.ПолеСправа = 5;
		ЛистМЧБ.ПолеСнизу  = 5;
		ЛистМЧБ.ПолеСлева  = 5;
		
		ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
		
		Если СписокЛистовМЧБ.Индекс(элЛистМЧБ) > 0 Тогда
			ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЛистМЧБ);
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля);
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(
			ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
		ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяТекРаздела]);
	
	Если ИмяТекРаздела = "Приложение21" Тогда
		
		// Вывод листов с кодом "13501099".
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка21 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			ТабличныйДокумент.Очистить();
			
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
			
			Для Каждого ЭлСтруктуры Из Ветка21.Данные Цикл
				Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
			// Вывод листов с кодом "13501105".
			Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
				
				Ветка22 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
				
				ТабличныйДокумент.Очистить();
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложение22"));
				
				Для Каждого ЭлСтруктуры Из Ветка22.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				СтруктураПараметров21 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПараметров);
				СтруктураПараметров21.Вставить("ИмяСтраницы", "Приложение22");
				
				ВывестиНаПечатьЛист(СтруктураПараметров21, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН         = Новый Массив(12);
	МассивКПП         = Новый Массив(9);
	МассивДатаПодписи = Новый Массив(8);
	
	ИсходныйМакет = ТабличныйДокумент;
	
	Область = ИсходныйМакет.Области.Найти("ИНН");
	Если НЕ Область = Неопределено Тогда
		СтрИНН = Область.Значение;
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("КПП");
	Если НЕ Область = Неопределено Тогда
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
		КонецЦикла;
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если СтруктураДанныхТитульный.Количество() = 0
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// Значения реквизитов документа.
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП                      = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
			
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
				
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Если ЭлементСтруктуры.Ключ = "Раздел2" Тогда
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
							
							СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
							
						КонецЦикла;
						
					Иначе
						
						Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
							
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
							
							Ном = Ном + 1;
							
							Продолжить;
							
						КонецЕсли;
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
							СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));
							
						КонецЦикла;
						
					КонецЕсли;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		МассивТаблЗнач = Новый Массив;
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
		КонецЦикла;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
	   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Приложение21"
			И Раздел.ИмяСтраницы <> "Приложение22" Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневые разделы и входящие в них подразделы.
		Если Раздел.ИмяСтраницы = "Приложение21"
		 ИЛИ Раздел.ИмяСтраницы = "Приложение22" Тогда
			
			ИмяМногоуровневогоРаздела = "Приложение21";
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяМногоуровневогоРаздела]);
			
			Если Раздел.ИмяСтраницы = "Приложение21" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
						СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Раздел.ИмяСтраницы = "Приложение22" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					ДеревоДанныхРазделУровень1 = ДеревоДанныхРазделУровень0.Строки[0];
					Если ДеревоДанныхРазделУровень1.Строки.Количество() = 1 Тогда
						Если ДеревоДанныхРазделУровень1.Строки[0].Данные.Количество() = 0 Тогда
							ТабличныйДокумент.Очистить();
							ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногоуровневыхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если СписокСохранения.Свойство("ОкружениеСохранения") Тогда
		Для каждого Строка Из ДеревоНастройкиСтраниц.Строки Цикл
			Если Строка.ИмяСтраницы = "Раздел1" Тогда
				Строка.ИмяСтраницы = "Раздел11";
				Строка.Представление = "Раздел 1.1";
				Строка.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел11";
				НовСтрока = ДеревоНастройкиСтраниц.Строки.Вставить(ДеревоНастройкиСтраниц.Строки.Индекс(Строка) + 1);
				НовСтрока.ИмяСтраницы = "Раздел12";
				НовСтрока.Представление = "Раздел 1.2";
				НовСтрока.ИмяПоляТабличногоДокум = "ПолеТабличногоДокументаРаздел12";
				НовСтрока.ВыводНаПечать = Строка.ВыводНаПечать;
				НовСтрока.ПоказатьСтраницу = Строка.ПоказатьСтраницу;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для каждого Строка Из ДеревоНастройкиСтраниц.Строки Цикл
			Если Строка.ИмяСтраницы = "Приложение22" Тогда
				ДеревоНастройкиСтраниц.Строки.Удалить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Приложение21"
			И Раздел.ИмяСтраницы <> "Приложение22" Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Перем ДанныеВариантовАвтоЗаполнения;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	
	// Данные вариантов автозаполнения.
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения) Тогда
		Если ДанныеВариантовАвтоЗаполнения.Свойство("Приложение21") Тогда
			ДанныеВариантовАвтоЗаполнения.Удалить("Приложение21");
		КонецЕсли;
		Если ДанныеВариантовАвтоЗаполнения.Свойство("Приложение22") Тогда
			ДанныеВариантовАвтоЗаполнения.Удалить("Приложение22");
		КонецЕсли;
	КонецЕсли;
	
	// Данные многостраничных разделов, имеющих 1 многострочную часть.
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			Если ЭлементСтруктуры.Значение.Колонки.Найти("ДанныеДопСтрок") <> Неопределено Тогда
				Для Каждого СтрокаТЗ Из ЭлементСтруктуры.Значение Цикл
					Если ЭлементСтруктуры.Ключ = "Приложение1" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0010100001;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение31" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0013100001;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение32" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0013200001;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение4" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0010400001;
					ИначеЕсли ЭлементСтруктуры.Ключ = "Приложение5" Тогда
						СтрокаТЗ.ДанныеДопСтрок = СтрокаТЗ.ДанныеДопСтрок.П0010500001;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	КонецЕсли;
	
	// Титульный лист.
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	Для Каждого Показатель Из ДанныеТит Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 10 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН, 2) = "00" Тогда
				ДанныеТит.ИНН = Сред(ДанныеТит.ИНН, 3);
			КонецЕсли;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
				+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Данные немногостраничных разделов, имеющих 1 многострочную часть.
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		// Раздел 1.
		СтарИмяРаздела = "Раздел1";
		СтарДанные = СписокСохранения.ПоказателиОтчета[ПрефиксТД + СтарИмяРаздела];
		
		// Подраздел 1.1.
		ИмяРаздела = "Раздел11";
		ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы11;
		НовДанные = Новый Структура;
		ИмяПок = "П000010000100";
		НовДанные.Вставить(ИмяПок, СтарДанные[ИмяПок]);
		ИмяПок = "П000110001003";
		НовДанные.Вставить(ИмяПок, СтарДанные[ИмяПок]);
		Инд = 1;
		ИндСтр = "1";
		ТЗ_МнЧ = ДанныеМногострочныхРазделов[ИмяГруппыМнЧ];
		Пока СтарДанные.Свойство(ИмяГруппыМнЧ + "01_" + ИндСтр) Цикл
			СтрокаТЗ = ТЗ_МнЧ[Инд - 1];
			Для ИндКол = 1 По 4 Цикл
				ИмяПок = ИмяГруппыМнЧ + "0" + ИндКол + "_" + ИндСтр;
				НовДанные.Вставить(ИмяПок, СтарДанные[ИмяПок]);
				СтрокаТЗ[ИмяГруппыМнЧ + "0" + ИндКол] = СтарДанные[ИмяПок];
			КонецЦикла;
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
		КонецЦикла;
		СписокСохранения.ПоказателиОтчета.Вставить(ПрефиксТД + ИмяРаздела, НовДанные);
		ДанныеМногострочныхРазделов.Вставить(ИмяГруппыМнЧ, ТЗ_МнЧ);
		
		// Подраздел 1.2.
		ИмяРаздела = "Раздел12";
		ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы12;
		НовДанные = Новый Структура;
		ИмяПок = "П000120001003";
		НовДанные.Вставить(ИмяПок, СтарДанные[ИмяПок]);
		Инд = 1;
		ИндСтр = "1";
		ТЗ_МнЧ = ДанныеМногострочныхРазделов[ИмяГруппыМнЧ];
		Пока СтарДанные.Свойство(ИмяГруппыМнЧ + "01_" + ИндСтр) Цикл
			СтрокаТЗ = ТЗ_МнЧ[Инд - 1];
			Для ИндКол = 1 По 2 Цикл
				ИмяПок = ИмяГруппыМнЧ + "0" + ИндКол + "_" + ИндСтр;
				НовДанные.Вставить(ИмяПок, СтарДанные[ИмяПок]);
				СтрокаТЗ[ИмяГруппыМнЧ + "0" + ИндКол] = СтарДанные[ИмяПок];
			КонецЦикла;
			Инд = Инд + 1;
			ИндСтр = Формат(Инд, "ЧГ=");
		КонецЦикла;
		СписокСохранения.ПоказателиОтчета.Вставить(ПрефиксТД + ИмяРаздела, НовДанные);
		ДанныеМногострочныхРазделов.Вставить(ИмяГруппыМнЧ, ТЗ_МнЧ);
		
		СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
		
	КонецЕсли;
	
	ИнициализацияМногоуровневыхРазделов();
	
	// Приложение 2.1.
	ИмяРаздела = "Приложение21";
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НачСтруктураДанных21 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ДеревоРаздела.Строки[0].Данные);
	
	НачСтруктураДанных22 = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ДеревоРаздела.Строки[0].Строки[0].Данные);
	
	ДеревоРаздела.Строки.Удалить(0);
	
	ТЗ_Прил21 = ДанныеМногостраничныхРазделов[ИмяРаздела].Скопировать();
	ТЗ_Прил22 = ДанныеМногостраничныхРазделов["Приложение22"];
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	
	Для каждого СтрокаТЗ_Прил21 Из ТЗ_Прил21 Цикл
		
		ВеткаПрил21 = ДеревоДанных.Строки.Добавить();
		ВеткаПрил21.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаТЗ_Прил21.Данные);
		
		ЕстьПодчПрил22ДляТекПрил21 = Ложь;
		КолСтрок22 = ТЗ_Прил22.Количество();
		
		Для НомСтр22 = 1 По КолСтрок22 Цикл
			ОбрИнд22 = КолСтрок22 - НомСтр22;
			Данные22 = ТЗ_Прил22[ОбрИнд22].Данные;
			Если СокрЛП(ВеткаПрил21.Данные.П001020001003) = СокрЛП(Данные22.П001020011003) Тогда
				ВеткаПрил22 = ВеткаПрил21.Строки.Вставить(0);
				ВеткаПрил22.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Данные22);
				ТЗ_Прил22.Удалить(ОбрИнд22);
				ЕстьПодчПрил22ДляТекПрил21 = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПодчПрил22ДляТекПрил21 Тогда
			ВеткаПрил22 = ВеткаПрил21.Строки.Добавить();
			ВеткаПрил22.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НачСтруктураДанных22);
		КонецЕсли;
		
	КонецЦикла;
	
	СтраницыПрил21ПоДаннымПрил22 = Новый СписокЗначений;
	Для каждого СтрокаТЗ_Прил22 Из ТЗ_Прил22 Цикл
		
		Данные22 = СтрокаТЗ_Прил22.Данные;
		Элем = СтраницыПрил21ПоДаннымПрил22.НайтиПоЗначению(СокрЛП(Данные22.П001020011003));
		
		Если Элем = Неопределено Тогда
			ВеткаПрил21 = ДеревоДанных.Строки.Добавить();
			СтраницыПрил21ПоДаннымПрил22.Добавить(СокрЛП(Данные22.П001020011003),
			Формат(ДеревоДанных.Строки.Индекс(ВеткаПрил21), "ЧГ="));
		Иначе
			ВеткаПрил21 = ДеревоДанных.Строки[Число(Элем.Представление)];
		КонецЕсли;
		
		ВеткаПрил22 = ВеткаПрил21.Строки.Добавить();
		ВеткаПрил22.Данные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Данные22);
		
	КонецЦикла;
	
	ДанныеМногоуровневыхРазделов.Вставить(ИмяРаздела, ДеревоДанных);
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;
	
	// Создаем исходную структуру многострочных разделов.
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000230000102", "П000210000104;П000220000103");
	
	// Раздел 3.3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330011003", "П000330008003;П000330009003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330011004", "П000330008004;П000330009004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000330014004", "П000330006004;П000330013004");
	
	// Приложение 1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001010000104", "П001010000102;П001010000103");
	
	// Приложение 2.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020008004", "П001020006004;П001020007004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020010004", "П001020006004;П001020007004;П001020004004");
	
	// Приложение 2.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020020003", "П001020018003;П001020019003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П001020020004", "П001020018004;П001020019004");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НачальныеОперацииСМногострочнымиБлоками();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ТабличныйДокумент.Области.ПоМесту.Значение
			= ?(РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
			СтруктураРеквизитовФормы.Организация), "214", "120");
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если СтруктураРеквизитовФормы.ИП
			И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
			И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
			ТабличныйДокумент.Области.КодФормыРеорганизации.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		И НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
		И НЕ СтруктураРеквизитовФормы.ИП Тогда
		Если Сред(СокрЛП(ТабличныйДокумент.Области.КПП.Значение), 5, 2) = "50" Тогда
			ТабличныйДокумент.Области.ПоМесту.Значение = "213";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодОтчетногоПериода = МесяцОкончания + 70;
	Иначе
		КодОтчетногоПериода = МесяцОкончания;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел11";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел12";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел31";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел32";
	СтрокаУровня1.Представление            = "Раздел 3.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел33";
	СтрокаУровня1.Представление            = "Раздел 3.3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = "Приложение 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение21";
	СтрокаУровня1.Представление            = "Приложение 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение31";
	СтрокаУровня1.Представление            = "Приложение 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение32";
	СтрокаУровня1.Представление            = "Приложение 3.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение4";
	СтрокаУровня1.Представление            = "Приложение 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение5";
	СтрокаУровня1.Представление            = "Приложение 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение6";
	СтрокаУровня1.Представление            = "Приложение 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение7";
	СтрокаУровня1.Представление            = "Приложение 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение8";
	СтрокаУровня1.Представление            = "Приложение 8";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		Если ИмяСтраницы = "Приложение21" ИЛИ ИмяСтраницы = "Приложение22" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;
			
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			чКолСтрокИсходный  = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;
			
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
		Конецесли;
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2016Кв2");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180101' Тогда
		ИмяСекции_КодыПоказателей_Раздел21 = "КодыПоказателей_Раздел21_20180101";
		ИмяСекции_КодыПоказателей_Раздел24 = "КодыПоказателей_Раздел24_20180101";
		ИмяСекции_КодыПоказателей_Раздел25 = "КодыПоказателей_Раздел25_20180101";
		ИмяСекции_КодыПоказателей_Приложение1 = "КодыПоказателей_Приложение1_20180101";
	Иначе
		ИмяСекции_КодыПоказателей_Раздел21 = "КодыПоказателей_Раздел21";
		ИмяСекции_КодыПоказателей_Раздел24 = "КодыПоказателей_Раздел24";
		ИмяСекции_КодыПоказателей_Раздел25 = "КодыПоказателей_Раздел25";
		ИмяСекции_КодыПоказателей_Приложение1 = "КодыПоказателей_Приложение1";
	КонецЕсли;
	
	// Титульный лист.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
		"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	Если СтруктураРеквизитовФормы.ИП Тогда
		ИмяСекцииФормРеорг = "ФормыРеорганизацииИП";
	Иначе
		ИмяСекцииФормРеорг = "ФормыРеорганизацииОрг";
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
		"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора[ИмяСекцииФормРеорг]);
	
	//Раздел 1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000010000100", 1, ,
		"Выбор признака наличия свидетельства (свидетельств)", КоллекцияСписковВыбора["ПризнакиНаличияСвидетельства"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000110000101", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000120000101", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора["КБК"]);
	
	//Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000020001003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
	//Раздел 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Раздел21]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000210000102", 1, ,
		"Выбор признака применения ставки акциза на спирт", КоллекцияСписковВыбора["ПризнакиПримененияСтавкиАкциза"]);
	
	//Раздел 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000220000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Раздел22"]);
	
	//Раздел 2.4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Раздел24]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000104", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000240000202", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
	//Раздел 2.5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Раздел25]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000250000104", 1, ,
		"Выбор признака наличия банковской гарантии", КоллекцияСписковВыбора["ПризнакиНаличияБанковскойГарантии"]);
	
	//Раздел 2.6.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000260000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Раздел26"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000260000104", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
	//Раздел 3.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310001003", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000310002003", 3, ,
		"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	
	//Раздел 3.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320001003", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000320002003", 3, ,
		"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	
	//Раздел 3.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000330001003", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000330002003", 3, ,
		"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	
	//Приложение 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010001003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001010000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора[ИмяСекции_КодыПоказателей_Приложение1]);
	
	//Приложение 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020001003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	
	//Приложение 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020011003", 3, ,
		"Выбор кода вида подакцизного товара", КоллекцияСписковВыбора["КодыВидаПодакцизныхТоваров"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020017005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020018005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020020005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001020021005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
	//Приложение 3.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001310000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Приложение31"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001310000102", 3, ,
		"Выбор кода вида спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001310000104", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	
	//Приложение 3.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001320000101", 5, ,
		"Выбор кода показателя", КоллекцияСписковВыбора["КодыПоказателей_Приложение32"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001320000102", 3, ,
		"Выбор кода вида спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001320000104", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	
	//Приложение 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001040000101", 3, ,
		"Выбор кода вида денатурированного спирта",
		КоллекцияСписковВыбора["КодыВидаДенатурированногоСпирта"]);
	
	//Приложение 5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001050000101", 3, ,
		"Выбор кода вида денатурированного спирта",
		КоллекцияСписковВыбора["КодыВидаДенатурированногоСпирта"]);
	
	//Приложение 6.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001060003003", 3, ,
		"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001060004003", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	
	//Приложение 7.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001070003003", 3, ,
		"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001070004003", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	
	//Приложение 8.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001080003003", 3, ,
		"Выбор кода вида закупаемого спирта", КоллекцияСписковВыбора["КодыВидаСпирта"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001080004003", 3, ,
		"Выбор кода вида подакцизной продукции", КоллекцияСписковВыбора["КодыВидаПодакцизнойПродукции"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001080020005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001080021005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П001080023005", 2, ,
		"Выбор кода налогового периода", КоллекцияСписковВыбора["КодыПериодов"]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура(
		"ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент",
		ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
		ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя
		ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки501");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",     РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",          СтруктураРеквизитовФормы.КНД);
	ПараметрыВыгрузки.Вставить("ДатаДок",      Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",    СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",      СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("ВидДок",       Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",      СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",     СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",       СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",      СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",       СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",       СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",        СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",
		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      ?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",     "Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",  ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",      ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв", ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",      СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_AKCALK");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "АкцСпиртАлк");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг",  СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг", СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",   СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
	+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
	+ "_" + ПараметрыВыгрузки.КодИФНС
	+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
	+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
	+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("220");
	ВозможныеКодыПоМесту.Добавить("331");
	
	ВозможныеКодыПериода = "01|02|03|04|05|06|07|08|09|10|11|12|71|72|73|74|75|76|77|78|79|80|81|82";
	
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	ВозможныеПризнакиПримененияСтавкиАкциза = "-|0|1|2|3";
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика.", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика.", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано наименование налогоплательщика.", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНС) Тогда
		СообщитьВТС("Не задан код налогового органа.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		СообщитьВТС("Не задан код по ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		СообщитьВТС("Задано некорректное значение кода по ОКВЭД. Допустимы значения, соответствующие шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("На титульном листе не задан код места нахождения (учета).", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("На титульном листе задан некорректный код места нахождения (учета).", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		СообщитьВТС("На титульном листе не задан код налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.ПериодОтч) = 0 Тогда
		СообщитьВТС("На титульном листе задано некорректное значение кода налогового периода.", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2") И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2") И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта.", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		СообщитьВТС("Не задано наименование документа, удостоверяющего полномочия представителя.", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации (ликвидации).", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации.", "Титульный", "ИННРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации.", "Титульный", "КППРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	//
	Раздел11 = мДанныеОтчета.Раздел11;
	Если НЕ ЗначениеЗаполнено(Раздел11.П000010000100) Тогда
		СообщитьВТС("Раздел 1: не задан признак наличия свидетельства (свидетельств).", "Раздел11", "П000010000100");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ (Раздел11.П000010000100 = "1" ИЛИ Раздел11.П000010000100 = "0") Тогда
		СообщитьВТС("Раздел 1: неверно задан признак наличия свидетельства (свидетельств). Возможные значения: 1, 0.", "Раздел11", "П000010000100");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Раздел 1.1.
	ОКТМОРаздел11 = СокрЛП(Раздел11["П000110001003"]);
	ДлинаОКТМОРаздел11 = СтрДлина(ОКТМОРаздел11);
	Если ДлинаОКТМОРаздел11 <> 11 И ДлинаОКТМОРаздел11 <> 8 Тогда
		СообщитьВТС("Раздел 1.1: не" + ?(ДлинаОКТМОРаздел11 = 0, "", "верно") + " задан код по ОКТМО.", "Раздел11", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Многострочная часть раздела 1.1.
	НомерСтроки = 1;
	ЗаполненХотяБыОдинИзБлоковРаздела11 = Ложь;
	Пока Раздел11.Свойство("П000110000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ИмяЯчейкиКБК11 = "П000110000101_" + Формат(НомерСтроки, "ЧГ=");
		ИмяЯчейкиСуммаКУплате11 = "П000110000102_" + Формат(НомерСтроки, "ЧГ=");
		ИмяЯчейкиСуммаКУменьш11 = "П000110000103_" + Формат(НомерСтроки, "ЧГ=");
		ИмяЯчейкиСуммаКЗачету11 = "П000110000104_" + Формат(НомерСтроки, "ЧГ=");
		
		КБК11 = СокрЛП(Раздел11[ИмяЯчейкиКБК11]);
		СуммаКУплате11 = Раздел11[ИмяЯчейкиСуммаКУплате11];
		СуммаКУменьш11 = Раздел11[ИмяЯчейкиСуммаКУменьш11];
		СуммаКЗачету11 = Раздел11[ИмяЯчейкиСуммаКЗачету11];
		
		Если НЕ ЗначениеЗаполнено(КБК11)
			И НЕ ЗначениеЗаполнено(СуммаКУплате11)
			И НЕ ЗначениеЗаполнено(СуммаКУменьш11)
			И НЕ ЗначениеЗаполнено(СуммаКЗачету11) Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		ДлинаКБК11 = СтрДлина(КБК11);
		Если ДлинаКБК11 <> 20 Тогда
			СообщитьВТС("Раздел 1.1: в блоке " + Формат(НомерСтроки, "ЧГ=") + " строк 020-050 не" + ?(ДлинаКБК11 = 0,
			"", "верно") + " задан код бюджетной классификации.", "Раздел11", ИмяЯчейкиКБК11);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СуммаКУплате11) И ЗначениеЗаполнено(СуммаКУменьш11) Тогда
			СообщитьВТС("Раздел 1.1: в блоке " + Формат(НомерСтроки, "ЧГ=")
			+ " строк 020-050 одновременно заполнены строки 030 и 040.", "Раздел11", ИмяЯчейкиСуммаКУплате11);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаполненХотяБыОдинИзБлоковРаздела11 = Истина;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела11 Тогда
		СообщитьВТС("Раздел 1.1: не заполнен ни один из блоков строк 020-050", "Раздел11", "П000110000101_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	// Раздел 1.2.
	// Определение необходимости проверки раздела 1.2.
	Раздел12 = мДанныеОтчета.Раздел12;
	ПроверятьРаздел12 = Ложь;
	Если НЕ СтраницаПуста(Раздел12, "Раздел12", ДеревоВыгрузки) Тогда
		ПроверятьРаздел12 = Истина;
	КонецЕсли;
	Если ПроверятьРаздел12 Тогда
		ОКТМОРаздел12 = СокрЛП(Раздел12["П000120001003"]);
		ДлинаОКТМОРаздел12 = СтрДлина(ОКТМОРаздел12);
		Если ДлинаОКТМОРаздел12 <> 11 И ДлинаОКТМОРаздел12 <> 8 Тогда
			СообщитьВТС("Раздел 1.2: не" + ?(ДлинаОКТМОРаздел12 = 0, "", "верно") + " задан код по ОКТМО.", "Раздел12", "П000120001003");
			СтатусПроверки = Ложь;
		КонецЕсли;
		// Многострочная часть раздела 1.2.
		НомерСтроки = 1;
		ЗаполненХотяБыОдинИзБлоковРаздела12 = Ложь;
		Пока Раздел12.Свойство("П000120000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ИмяЯчейкиКБК12 = "П000120000101_" + Формат(НомерСтроки, "ЧГ=");
			ИмяЯчейкиСуммаКЗачету12 = "П000120000102_" + Формат(НомерСтроки, "ЧГ=");
			
			КБК12 = СокрЛП(Раздел12[ИмяЯчейкиКБК12]);
			СуммаКЗачету12 = Раздел12[ИмяЯчейкиСуммаКЗачету12];
			
			Если НЕ ЗначениеЗаполнено(КБК12)
				И НЕ ЗначениеЗаполнено(СуммаКЗачету12) Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ДлинаКБК12 = СтрДлина(КБК12);
			Если ДлинаКБК12 <> 20 Тогда
				СообщитьВТС("Раздел 1.2: в блоке " + Формат(НомерСтроки, "ЧГ=") + " строк 020-030 не" + ?(ДлинаКБК12 = 0,
				"", "верно") + " задан код бюджетной классификации.", "Раздел12", ИмяЯчейкиКБК12);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗаполненХотяБыОдинИзБлоковРаздела12 = Истина;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела12 Тогда
			СообщитьВТС("Раздел 1.2: не заполнен ни один из блоков строк 020-030", "Раздел12", "П000120000101_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 2.
	// Определение необходимости проверки раздела 2.
	Раздел2 = мДанныеОтчета.Раздел2;
	Для Каждого СтраницаРаздела2 Из Раздел2 Цикл
		Данные2 = СтраницаРаздела2.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные2, "Раздел2", ДеревоВыгрузки) Тогда
			НомерСтраницы2 = Раздел2.Индекс(СтраницаРаздела2) + 1;
			КодВидаПТ2 = СокрЛП(Данные2["П000020001003"]);
			// Код вида подакцизного товара.
			КодВидаПТ2Длина = СтрДлина(КодВидаПТ2);
			Если КодВидаПТ2Длина <> 3 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
				+ ": не" + ?(КодВидаПТ2Длина = 0, "", "верно")
				+ " задан код вида подакцизного товара.", "Раздел2", "П000020001003", НомерСтраницы2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Многострочная часть раздела 2.1.
			ЗаполненХотяБыОдинИзБлоковРаздела21 = Ложь;
			НомерСтроки21 = 1;
			Пока Данные2.Свойство("П000210000101_" + Формат(НомерСтроки21, "ЧГ=")) Цикл
				КодПок21  = СокрЛП(Данные2["П000210000101_" + Формат(НомерСтроки21, "ЧГ=")]);
				Признак21 = СокрЛП(Данные2["П000210000102_" + Формат(НомерСтроки21, "ЧГ=")]);
				НалБаза21 = Данные2["П000210000103_" + Формат(НомерСтроки21, "ЧГ=")];
				СумАкц21  = Данные2["П000210000104_" + Формат(НомерСтроки21, "ЧГ=")];
				Если НЕ ЗначениеЗаполнено(КодПок21)
					И НЕ ЗначениеЗаполнено(Признак21)
					И НЕ ЗначениеЗаполнено(НалБаза21)
					И НЕ ЗначениеЗаполнено(СумАкц21) Тогда
					НомерСтроки21 = НомерСтроки21 + 1;
					Продолжить;
				КонецЕсли;
				ЗаполненХотяБыОдинИзБлоковРаздела21 = Истина;
				// Код показателя.
				КодПок21Длина = СтрДлина(КодПок21);
				Если КодПок21Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки21, "ЧГ=")
					+ " подраздела 2.1 не" + ?(КодПок21Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000210000101_" + Формат(НомерСтроки21, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Признак применения ставки акциза на спирт.
				Если ЗначениеЗаполнено(Признак21)
					И СтрНайти(ВозможныеПризнакиПримененияСтавкиАкциза, Признак21) = 0 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки21, "ЧГ=")
					+ " подраздела 2.1 неверно задан признак применения ставки акциза на этиловый спирт.", "Раздел2",
					"П000210000102_" + Формат(НомерСтроки21, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки21 = НомерСтроки21 + 1;
			КонецЦикла;
			Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела21 Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке 1 подраздела 2.1 не задан код показателя.",
				"Раздел2", "П000210000101_1", НомерСтраницы2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Многострочная часть раздела 2.2.
			НомерСтроки22 = 1;
			Пока Данные2.Свойство("П000220000101_" + Формат(НомерСтроки22, "ЧГ=")) Цикл
				КодПок22 = СокрЛП(Данные2["П000220000101_" + Формат(НомерСтроки22, "ЧГ=")]);
				ОбъТов22 = Данные2["П000220000102_" + Формат(НомерСтроки22, "ЧГ=")];
				СумВыч22 = Данные2["П000220000103_" + Формат(НомерСтроки22, "ЧГ=")];
				Если НЕ ЗначениеЗаполнено(КодПок22)
					И НЕ ЗначениеЗаполнено(ОбъТов22)
					И НЕ ЗначениеЗаполнено(СумВыч22) Тогда
					НомерСтроки22 = НомерСтроки22 + 1;
					Продолжить;
				КонецЕсли;
				// Код показателя.
				КодПок22Длина = СтрДлина(КодПок22);
				Если КодПок22Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки22, "ЧГ=")
					+ " подраздела 2.2 не" + ?(КодПок22Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000220000101_" + Формат(НомерСтроки22, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки22 = НомерСтроки22 + 1;
			КонецЦикла;
			// Раздел 2.3.
			Если ЗначениеЗаполнено(Данные2["П000230000102"])
				И ЗначениеЗаполнено(Данные2["П000230000202"]) Тогда
				СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
				+ ": в подразделе 2.3 одновременно заполнены строки с кодами показателей 40001 и 40002.",
				"Раздел2", "П000230000102", НомерСтраницы2);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Многострочная часть раздела 2.4.
			ЗаполненХотяБыОдинИзБлоковРаздела241 = Ложь;
			НомерСтроки241 = 1;
			Пока Данные2.Свойство("П000240000101_" + Формат(НомерСтроки241, "ЧГ=")) Цикл
				КодПок241  = СокрЛП(Данные2["П000240000101_" + Формат(НомерСтроки241, "ЧГ=")]);
				НалБаза241 = Данные2["П000240000102_" + Формат(НомерСтроки241, "ЧГ=")];
				СумАкц241  = Данные2["П000240000103_" + Формат(НомерСтроки241, "ЧГ=")];
				ПерЭксп241 = СокрЛП(Данные2["П000240000104_" + Формат(НомерСтроки241, "ЧГ=")]);
				ГодЭксп241 = Формат(Данные2["П000240000105_" + Формат(НомерСтроки241, "ЧГ=")], "ЧГ=");
				Если НЕ ЗначениеЗаполнено(КодПок241)
					И НЕ ЗначениеЗаполнено(НалБаза241)
					И НЕ ЗначениеЗаполнено(СумАкц241)
					И НЕ ЗначениеЗаполнено(ПерЭксп241)
					И НЕ ЗначениеЗаполнено(ГодЭксп241) Тогда
					НомерСтроки241 = НомерСтроки241 + 1;
					Продолжить;
				КонецЕсли;
				ЗаполненХотяБыОдинИзБлоковРаздела241 = Истина;
				// Код показателя.
				КодПок241Длина = СтрДлина(КодПок241);
				Если КодПок241Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
					+ " подраздела 2.4 не" + ?(КодПок241Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000240000101_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код и год налогового периода, в котором осуществлена реализация товаров на экспорт.
				ПерЭксп241Длина = СтрДлина(ПерЭксп241);
				Если ПерЭксп241Длина <> 2 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
					+ " подраздела 2.4 не" + ?(ПерЭксп241Длина = 0, "", "верно")
					+ " задан код налогового периода, в котором осуществлена реализация товаров на экспорт.",
					"Раздел2", "П000240000104_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				Иначе
					Если СтрНайти(ВозможныеКодыПериода, ПерЭксп241) = 0 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
						+ " подраздела 2.4 неверно задан код налогового периода, в котором осуществлена реализация товаров на экспорт.",
						"Раздел2", "П000240000104_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ГодЭксп241Длина = СтрДлина(ГодЭксп241);
				Если ГодЭксп241Длина <> 4 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки241, "ЧГ=")
					+ " подраздела 2.4 не" + ?(ГодЭксп241Длина = 0, "", "верно")
					+ " задан год налогового периода, в котором осуществлена реализация товаров на экспорт.", "Раздел2",
					"П000240000105_" + Формат(НомерСтроки241, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки241 = НомерСтроки241 + 1;
			КонецЦикла;
			// В случае, если заполнена многострочная часть строки 010 раздела 2.4,
			// должна быть заполнена многострочная часть раздела 2.4.
			Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела241 Тогда
				ЗаполненХотяБыОдинИзБлоковРаздела242 = Ложь;
				НомерСтроки242 = 1;
				Пока Данные2.Свойство("П000240000201_" + Формат(НомерСтроки242, "ЧГ=")) Цикл
					ЗначПок242  = Данные2["П000240000201_" + Формат(НомерСтроки242, "ЧГ=")];
					ПерЭксп242 = СокрЛП(Данные2["П000240000202_" + Формат(НомерСтроки242, "ЧГ=")]);
					ГодЭксп242 = Формат(Данные2["П000240000203_" + Формат(НомерСтроки242, "ЧГ=")], "ЧГ=");
					Если НЕ ЗначениеЗаполнено(ЗначПок242)
						И НЕ ЗначениеЗаполнено(ПерЭксп242)
						И НЕ ЗначениеЗаполнено(ГодЭксп242) Тогда
						НомерСтроки242 = НомерСтроки242 + 1;
						Продолжить;
					КонецЕсли;
					ЗаполненХотяБыОдинИзБлоковРаздела242 = Истина;
					Прервать;
				КонецЦикла;
				Если ЗаполненХотяБыОдинИзБлоковРаздела242 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": подраздел 2.4 должен быть заполнен, если заполнена строка 010.",
					"Раздел2", "П000240000101_1", НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			// Многострочная часть строки 010 раздела 2.4.
			НомерСтроки242 = 1;
			Пока Данные2.Свойство("П000240000201_" + Формат(НомерСтроки242, "ЧГ=")) Цикл
				ЗначПок242  = Данные2["П000240000201_" + Формат(НомерСтроки242, "ЧГ=")];
				ПерЭксп242 = СокрЛП(Данные2["П000240000202_" + Формат(НомерСтроки242, "ЧГ=")]);
				ГодЭксп242 = Формат(Данные2["П000240000203_" + Формат(НомерСтроки242, "ЧГ=")], "ЧГ=");
				Если НЕ ЗначениеЗаполнено(ЗначПок242)
					И НЕ ЗначениеЗаполнено(ПерЭксп242)
					И НЕ ЗначениеЗаполнено(ГодЭксп242) Тогда
					НомерСтроки242 = НомерСтроки242 + 1;
					Продолжить;
				КонецЕсли;
				// Код и год налогового периода, в котором осуществлена реализация товаров на экспорт.
				ПерЭксп242Длина = СтрДлина(ПерЭксп242);
				Если ПерЭксп242Длина <> 2 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в блоке " + Формат(НомерСтроки242, "ЧГ=")
					+ " строк 010 подраздела 2.4 не" + ?(ПерЭксп242Длина = 0, "", "верно")
					+ " задан код налогового периода.",
					"Раздел2", "П000240000202_" + Формат(НомерСтроки242, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				Иначе
					Если СтрНайти(ВозможныеКодыПериода, ПерЭксп242) = 0 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": в блоке " + Формат(НомерСтроки242, "ЧГ=")
						+ " строк 010 подраздела 2.4 неверно задан код налогового периода.",
						"Раздел2", "П000240000202_" + Формат(НомерСтроки242, "ЧГ="), НомерСтраницы2);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ГодЭксп242Длина = СтрДлина(ГодЭксп242);
				Если ГодЭксп242Длина <> 4 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в блоке " + Формат(НомерСтроки242, "ЧГ=")
					+ " строк 010 подраздела 2.4 не" + ?(ГодЭксп242Длина = 0, "", "верно")
					+ " задан год налогового периода.", "Раздел2",
					"П000240000203_" + Формат(НомерСтроки242, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки242 = НомерСтроки242 + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.5.
			НомерСтроки25 = 1;
			Пока Данные2.Свойство("П000250000101_" + Формат(НомерСтроки25, "ЧГ=")) Цикл
				КодПок25 = СокрЛП(Данные2["П000250000101_" + Формат(НомерСтроки25, "ЧГ=")]);
				НалБаза25 = Данные2["П000250000102_" + Формат(НомерСтроки25, "ЧГ=")];
				СумВыч25 = Данные2["П000250000103_" + Формат(НомерСтроки25, "ЧГ=")];
				НаличБГ25 = СокрЛП(Данные2["П000250000104_" + Формат(НомерСтроки25, "ЧГ=")]);
				Если НЕ ЗначениеЗаполнено(КодПок25)
					И НЕ ЗначениеЗаполнено(НалБаза25)
					И НЕ ЗначениеЗаполнено(СумВыч25)
					И НЕ ЗначениеЗаполнено(НаличБГ25) Тогда
					НомерСтроки25 = НомерСтроки25 + 1;
					Продолжить;
				КонецЕсли;
				// Код показателя.
				КодПок25Длина = СтрДлина(КодПок25);
				Если КодПок25Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки25, "ЧГ=")
					+ " подраздела 2.5 не" + ?(КодПок25Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000250000101_" + Формат(НомерСтроки25, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Признак наличия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(НаличБГ25) Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки25, "ЧГ=")
					+ " подраздела 2.5 не задан признак наличия банковской гарантии.", "Раздел2",
					"П000250000104_" + Формат(НомерСтроки25, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки25 = НомерСтроки25 + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.6.
			НомерСтроки26 = 1;
			Пока Данные2.Свойство("П000260000101_" + Формат(НомерСтроки26, "ЧГ=")) Цикл
				КодПок26  = СокрЛП(Данные2["П000260000101_" + Формат(НомерСтроки26, "ЧГ=")]);
				НалБаза26 = Данные2["П000260000102_" + Формат(НомерСтроки26, "ЧГ=")];
				СумАкц26  = Данные2["П000260000103_" + Формат(НомерСтроки26, "ЧГ=")];
				ПерЭксп26 = СокрЛП(Данные2["П000260000104_" + Формат(НомерСтроки26, "ЧГ=")]);
				ГодЭксп26 = Формат(Данные2["П000260000105_" + Формат(НомерСтроки26, "ЧГ=")], "ЧГ=");
				Если НЕ ЗначениеЗаполнено(КодПок26)
					И НЕ ЗначениеЗаполнено(НалБаза26)
					И НЕ ЗначениеЗаполнено(СумАкц26)
					И НЕ ЗначениеЗаполнено(ПерЭксп26)
					И НЕ ЗначениеЗаполнено(ГодЭксп26) Тогда
					НомерСтроки26 = НомерСтроки26 + 1;
					Продолжить;
				КонецЕсли;
				// Код показателя.
				КодПок26Длина = СтрДлина(КодПок26);
				Если КодПок26Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
					+ " подраздела 2.6 не" + ?(КодПок26Длина = 0, "", "верно")
					+ " задан код показателя.", "Раздел2",
					"П000260000101_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код и год налогового периода, в котором осуществлена реализация товаров на экспорт.
				ПерЭксп26Длина = СтрДлина(ПерЭксп26);
				Если ПерЭксп26Длина <> 2 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
					+ " подраздела 2.6 не" + ?(КодПок26Длина = 0, "", "верно")
					+ " задан код налогового периода, в котором осуществлена реализация товаров в государства - члены Евразийского экономического союза.",
					"Раздел2", "П000260000104_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				Иначе
					Если СтрНайти(ВозможныеКодыПериода, ПерЭксп26) = 0 Тогда
						СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
						+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
						+ " подраздела 2.6 неверно задан код налогового периода, в котором осуществлена реализация товаров в государства - члены Евразийского экономического союза.",
						"Раздел2", "П000260000104_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
				ГодЭксп26Длина = СтрДлина(ГодЭксп26);
				Если ГодЭксп26Длина <> 4 Тогда
					СообщитьВТС("Раздел 2 -> Страница " + НомерСтраницы2
					+ ": в строке " + Формат(НомерСтроки26, "ЧГ=")
					+ " подраздела 2.6 не" + ?(ГодЭксп26Длина = 0, "", "верно")
					+ " задан год налогового периода, в котором осуществлена реализация товаров в государства - члены Евразийского экономического союза.",
					"Раздел2", "П000260000105_" + Формат(НомерСтроки26, "ЧГ="), НомерСтраницы2);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомерСтроки26 = НомерСтроки26 + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Раздел 3.
	//
	// Определение необходимости проверки раздела 3.1.
	Раздел31 = мДанныеОтчета.Раздел31;
	ПроверятьРаздел31 = Ложь;
	Для Каждого СтраницаРаздела31 Из Раздел31 Цикл
		Данные31 = СтраницаРаздела31.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные31, "Раздел31", ДеревоВыгрузки) Тогда
			ПроверятьРаздел31 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьРаздел31 Тогда
		Для Каждого СтраницаРаздела31 Из Раздел31 Цикл
			Данные31 = СтраницаРаздела31.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные31, "Раздел31", ДеревоВыгрузки) Тогда
				НомерСтраницы31 = Раздел31.Индекс(СтраницаРаздела31) + 1;
				КодВидаПП31 = СокрЛП(Данные31["П000310001003"]);
				КодВидаЗС31 = СокрЛП(Данные31["П000310002003"]);
				// Код вида подакцизной продукции.
				КодВидаПП31Длина = СтрДлина(КодВидаПП31);
				Если КодВидаПП31Длина <> 3 Тогда
					СообщитьВТС("Раздел 3.1 -> Страница " + НомерСтраницы31
					+ ": не" + ?(КодВидаПП31Длина = 0, "", "верно")
					+ " задан код вида подакцизной продукции.", "Раздел31", "П000310001003", НомерСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида закупаемого спирта.
				КодВидаЗС31Длина = СтрДлина(КодВидаЗС31);
				Если КодВидаЗС31Длина <> 3 Тогда
					СообщитьВТС("Раздел 3.1 -> Страница " + НомерСтраницы31
					+ ": не" + ?(КодВидаЗС31Длина = 0, "", "верно")
					+ " задан код вида закупаемого спирта.", "Раздел31", "П000310002003", НомерСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Определение необходимости проверки раздела 3.2.
	Раздел32 = мДанныеОтчета.Раздел32;
	ПроверятьРаздел32 = Ложь;
	Для Каждого СтраницаРаздела32 Из Раздел32 Цикл
		Данные32 = СтраницаРаздела32.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные32, "Раздел32", ДеревоВыгрузки) Тогда
			ПроверятьРаздел32 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьРаздел32 Тогда
		Для Каждого СтраницаРаздела32 Из Раздел32 Цикл
			Данные32 = СтраницаРаздела32.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные32, "Раздел32", ДеревоВыгрузки) Тогда
				НомерСтраницы32 = Раздел32.Индекс(СтраницаРаздела32) + 1;
				КодВидаПП32 = СокрЛП(Данные32["П000320001003"]);
				КодВидаЗС32 = СокрЛП(Данные32["П000320002003"]);
				// Код вида подакцизной продукции.
				КодВидаПП32Длина = СтрДлина(КодВидаПП32);
				Если КодВидаПП32Длина <> 3 Тогда
					СообщитьВТС("Раздел 3.2 -> Страница " + НомерСтраницы32
					+ ": не" + ?(КодВидаПП32Длина = 0, "", "верно")
					+ " задан код вида подакцизной продукции.", "Раздел32", "П000320001003", НомерСтраницы32);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида закупаемого спирта.
				КодВидаЗС32Длина = СтрДлина(КодВидаЗС32);
				Если КодВидаЗС32Длина <> 3 Тогда
					СообщитьВТС("Раздел 3.2 -> Страница " + НомерСтраницы32
					+ ": не" + ?(КодВидаЗС32Длина = 0, "", "верно")
					+ " задан код вида закупаемого спирта.", "Раздел32", "П000320002003", НомерСтраницы32);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Определение необходимости проверки раздела 3.3.
	Раздел33 = мДанныеОтчета.Раздел33;
	ПроверятьРаздел33 = Ложь;
	Для Каждого СтраницаРаздела33 Из Раздел33 Цикл
		Данные33 = СтраницаРаздела33.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные33, "Раздел33", ДеревоВыгрузки) Тогда
			ПроверятьРаздел33 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьРаздел33 Тогда
		Для Каждого СтраницаРаздела33 Из Раздел33 Цикл
			Данные33 = СтраницаРаздела33.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные33, "Раздел33", ДеревоВыгрузки) Тогда
				НомерСтраницы33 = Раздел33.Индекс(СтраницаРаздела33) + 1;
				КодВидаПП33 = СокрЛП(Данные33["П000330001003"]);
				КодВидаЗС33 = СокрЛП(Данные33["П000330002003"]);
				// Код вида подакцизной продукции.
				КодВидаПП33Длина = СтрДлина(КодВидаПП33);
				Если КодВидаПП33Длина <> 3 Тогда
					СообщитьВТС("Раздел 3.3 -> Страница " + НомерСтраницы33
					+ ": не" + ?(КодВидаПП33Длина = 0, "", "верно")
					+ " задан код вида подакцизной продукции.", "Раздел33", "П000330001003", НомерСтраницы33);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида закупаемого спирта.
				КодВидаЗС33Длина = СтрДлина(КодВидаЗС33);
				Если КодВидаЗС33Длина <> 3 Тогда
					СообщитьВТС("Раздел 3.3 -> Страница " + НомерСтраницы33
					+ ": не" + ?(КодВидаЗС33Длина = 0, "", "верно")
					+ " задан код вида закупаемого спирта.", "Раздел33", "П000330002003", НомерСтраницы33);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 1.
	// Определение необходимости проверки Приложения 1.
	Приложение1 = мДанныеОтчета.Приложение1;
	ПроверятьПриложение1 = Ложь;
	Для Каждого СтраницаПриложения1 Из Приложение1 Цикл
		Данные101 = СтраницаПриложения1.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные101, "Приложение1", ДеревоВыгрузки) Тогда
			ПроверятьПриложение1 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение1 Тогда
		Для Каждого СтраницаПриложения1 Из Приложение1 Цикл
			Данные101 = СтраницаПриложения1.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные101, "Приложение1", ДеревоВыгрузки) Тогда
				НомерСтраницы101 = Приложение1.Индекс(СтраницаПриложения1) + 1;
				КодВидаПТ101 = СокрЛП(Данные101["П001010001003"]);
				// Код вида подакцизного товара.
				КодВидаПТ101Длина = СтрДлина(КодВидаПТ101);
				Если КодВидаПТ101Длина <> 3 Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомерСтраницы101
					+ ": не" + ?(КодВидаПТ101Длина = 0, "", "верно")
					+ " задан код вида подакцизного товара.", "Приложение1", "П001010001003", НомерСтраницы101);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Многострочная часть приложения 1.
				ЗаполненХотяБыОдинИзБлоковПриложения1 = Ложь;
				НомерСтроки101 = 1;
				Пока Данные101.Свойство("П001010000101_" + Формат(НомерСтроки101, "ЧГ=")) Цикл
					КодПок101  = СокрЛП(Данные101["П001010000101_" + Формат(НомерСтроки101, "ЧГ=")]);
					СодСпир101 = Данные101["П001010000102_" + Формат(НомерСтроки101, "ЧГ=")];
					ОбъТов101  = Данные101["П001010000103_" + Формат(НомерСтроки101, "ЧГ=")];
					НалБаза101 = Данные101["П001010000104_" + Формат(НомерСтроки101, "ЧГ=")];
					Если НЕ ЗначениеЗаполнено(КодПок101)
						И НЕ ЗначениеЗаполнено(СодСпир101)
						И НЕ ЗначениеЗаполнено(ОбъТов101)
						И НЕ ЗначениеЗаполнено(НалБаза101) Тогда
						НомерСтроки101 = НомерСтроки101 + 1;
						Продолжить;
					КонецЕсли;
					ЗаполненХотяБыОдинИзБлоковПриложения1 = Истина;
					// Код показателя.
					КодПок101Длина = СтрДлина(КодПок101);
					Если КодПок101Длина <> 5 Тогда
						СообщитьВТС("Приложение 1 -> Страница " + НомерСтраницы101
						+ ": в строке " + Формат(НомерСтроки101, "ЧГ=")
						+ " не" + ?(КодПок101Длина = 0, "", "верно")
						+ " задан код показателя.", "Приложение1",
						"П001010000101_" + Формат(НомерСтроки101, "ЧГ="), НомерСтраницы101);
						СтатусПроверки = Ложь;
					КонецЕсли;
					НомерСтроки101 = НомерСтроки101 + 1;
				КонецЦикла;
				Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения1 Тогда
					СообщитьВТС("Приложение 1 -> Страница " + НомерСтраницы101
						+ ": в строке 1 не задан код показателя.",
					"Приложение1", "П001010000101_1", НомерСтраницы101);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 2.
	// Определение необходимости проверки приложения 2.
	Приложение21 = ДанныеМногоуровневыхРазделов.Приложение21;
	ПроверятьПриложение21 = Ложь;
	Для каждого СтраницаПриложения21 Из Приложение21.Строки Цикл
		Если НЕ СтраницаПуста(СтраницаПриложения21.Данные, "Приложение21", ДеревоВыгрузки) Тогда
			ПроверятьПриложение21 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаПриложения22 Из СтраницаПриложения21.Строки Цикл
			Если НЕ СтраницаПуста(СтраницаПриложения22.Данные, "Приложение22", ДеревоВыгрузки) Тогда
				ПроверятьПриложение21 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьПриложение21 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение21 Тогда
		Для каждого СтраницаПриложения21 Из Приложение21.Строки Цикл
			НомерСтраницыПрил21 = Приложение21.Строки.Индекс(СтраницаПриложения21) + 1;
			
			// Код вида подакцизного товара.
			КодВидаПТПрил21Длина = СтрДлина(СокрЛП(СтраницаПриложения21.Данные["П001020001003"]));
			Если КодВидаПТПрил21Длина <> 3 Тогда
				СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
				+ ": не" + ?(КодВидаПТПрил21Длина = 0, "", "верно")
				+ " задан код вида подакцизного товара.", "Приложение21", "П001020001003", НомерСтраницыПрил21);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			Для каждого СтраницаПриложения22 Из СтраницаПриложения21.Строки Цикл
				Если СтраницаПуста(СтраницаПриложения22.Данные, "Приложение22", ДеревоВыгрузки) Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСтраницыПрил22 = СтраницаПриложения21.Строки.Индекс(СтраницаПриложения22) + 1;
				КоординатыСтраницыПрил22 = Строка(НомерСтраницыПрил21) + "," + Строка(НомерСтраницыПрил22);
				
				ДатаВыдБГ102 = СтраницаПриложения22.Данные["П001020011503"];
				НомерБГ102   = СокрЛП(СтраницаПриложения22.Данные["П001020012003"]);
				ДатаНачБГ102 = СтраницаПриложения22.Данные["П001020013003"];
				ДатаКонБГ102 = СтраницаПриложения22.Данные["П001020014003"];
				
				// Дата выдачи банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаВыдБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задана дата выдачи банковской гарантии.",
					"Приложение22", "П001020011503", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Номер банковской гарантии.
				Если НЕ ЗначениеЗаполнено(НомерБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задан номер банковской гарантии.",
					"Приложение22", "П001020012003", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата начала срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаНачБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задана дата начала действия банковской гарантии.",
					"Приложение22", "П001020013003", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата окончания срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаКонБГ102) Тогда
					СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
					+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
					+ ": не задана дата окончания действия банковской гарантии.",
					"Приложение22", "П001020014003", КоординатыСтраницыПрил22);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Единообразные проверки в строках 170, 180, 200, 210.
				МассивПрефиксов = Новый Массив;
				МассивПрефиксов.Добавить("П0010200170");
				МассивПрефиксов.Добавить("П0010200180");
				МассивПрефиксов.Добавить("П0010200200");
				МассивПрефиксов.Добавить("П0010200210");
				Для каждого Префикс Из МассивПрефиксов Цикл
					ОбъТовПрил22 = СтраницаПриложения22.Данные[Префикс + "03"];
					СумАкцПрил22 = СтраницаПриложения22.Данные[Префикс + "04"];
					ПерЭксПрил22 = СокрЛП(СтраницаПриложения22.Данные[Префикс + "05"]);
					ГодЭксПрил22 = Формат(СтраницаПриложения22.Данные[Префикс + "06"], "ЧГ=");
					Если ЗначениеЗаполнено(ОбъТовПрил22)
						ИЛИ ЗначениеЗаполнено(СумАкцПрил22)
						ИЛИ ЗначениеЗаполнено(ПерЭксПрил22)
						ИЛИ ЗначениеЗаполнено(ГодЭксПрил22) Тогда
						// Код налогового периода, в котором осуществлена реализация товаров на экспорт.
						ПерЭксПрил22Длина = СтрДлина(ПерЭксПрил22);
						Если ПерЭксПрил22Длина <> 2 Тогда
							СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
							+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
							+ ": в строке " + Прав(Префикс, 3) + " не" + ?(ПерЭксПрил22Длина = 0, "", "верно")
							+ " задан код налогового периода, в котором осуществлена реализация товаров на экспорт.",
							"Приложение22", Префикс + "05", КоординатыСтраницыПрил22);
							СтатусПроверки = Ложь;
						Иначе
							Если СтрНайти(ВозможныеКодыПериода, ПерЭксПрил22) = 0 Тогда
								СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
								+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
								+ ": в строке " + Прав(Префикс, 3) + " неверно задан код налогового периода, в котором осуществлена реализация товаров на экспорт.",
								"Приложение22", Префикс + "05", КоординатыСтраницыПрил22);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
						// Год налогового периода, в котором осуществлена реализация товаров на экспорт.
						ГодЭксПрил22Длина = СтрДлина(ГодЭксПрил22);
						Если ГодЭксПрил22Длина <> 4 Тогда
							СообщитьВТС("Приложение 2 -> Расчет акциза. Страница " + НомерСтраницыПрил21
							+ " -> Банковская гарантия. Страница " + НомерСтраницыПрил22
							+ ": в строке " + Прав(Префикс, 3) + " не" + ?(ГодЭксПрил22Длина = 0, "", "верно")
							+ " задан год налогового периода, в котором осуществлена реализация товаров на экспорт.",
							"Приложение22", Префикс + "06", КоординатыСтраницыПрил22);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 3.1.
	// Определение необходимости проверки Приложения 3.1.
	Приложение31 = мДанныеОтчета.Приложение31;
	ПроверятьПриложение31 = Ложь;
	Для Каждого СтраницаПриложения31 Из Приложение31 Цикл
		Данные131 = СтраницаПриложения31.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные131, "Приложение31", ДеревоВыгрузки) Тогда
			ПроверятьПриложение31 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение31 Тогда
		Для Каждого СтраницаПриложения31 Из Приложение31 Цикл
			Данные131 = СтраницаПриложения31.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные131, "Приложение31", ДеревоВыгрузки) Тогда
				НомерСтраницы131 = Приложение31.Индекс(СтраницаПриложения31) + 1;
				ИННЮЛ131 = СокрЛП(Данные131["П001310001003"]);
				КПП131   = СокрЛП(Данные131["П001310002003"]);
				// ИНН покупателя (или организации, осуществляющей передачу спирта в структуре).
				ИННЮЛ131Длина = СтрДлина(ИННЮЛ131);
				Если ИННЮЛ131Длина <> 10 Тогда
					СообщитьВТС("Приложение 3. Раздел 1 -> Страница " + НомерСтраницы131
					+ ": не" + ?(ИННЮЛ131Длина = 0, "", "верно")
					+ " задан ИНН покупателя (организации, осуществляющей передачу спирта в структуре).",
					"Приложение31", "П001310001003", НомерСтраницы131);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// КПП покупателя (или организации, осуществляющей передачу спирта в структуре).
				КПП131Длина = СтрДлина(КПП131);
				Если КПП131Длина <> 9 Тогда
					СообщитьВТС("Приложение 3. Раздел 1 -> Страница " + НомерСтраницы131
					+ ": не" + ?(КПП131Длина = 0, "", "верно")
					+ " задан КПП покупателя (организации, осуществляющей передачу спирта в структуре).",
					"Приложение31", "П001310002003", НомерСтраницы131);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Многострочная часть приложения 3.1.
				ЗаполненХотяБыОдинИзБлоковПриложения31 = Ложь;
				НомерСтроки131 = 1;
				Пока Данные131.Свойство("П001310000101_" + Формат(НомерСтроки131, "ЧГ=")) Цикл
					КодПок131     = СокрЛП(Данные131["П001310000101_" + Формат(НомерСтроки131, "ЧГ=")]);
					КодРСпирта131 = СокрЛП(Данные131["П001310000102_" + Формат(НомерСтроки131, "ЧГ=")]);
					ОбъРСпирта131 = Данные131["П001310000103_" + Формат(НомерСтроки131, "ЧГ=")];
					КодВидаПП131  = СокрЛП(Данные131["П001310000104_" + Формат(НомерСтроки131, "ЧГ=")]);
					СумАвАкц131   = Данные131["П001310000105_" + Формат(НомерСтроки131, "ЧГ=")];
					Если НЕ ЗначениеЗаполнено(КодПок131)
						И НЕ ЗначениеЗаполнено(КодРСпирта131)
						И НЕ ЗначениеЗаполнено(ОбъРСпирта131)
						И НЕ ЗначениеЗаполнено(КодВидаПП131)
						И НЕ ЗначениеЗаполнено(СумАвАкц131) Тогда
						НомерСтроки131 = НомерСтроки131 + 1;
						Продолжить;
					КонецЕсли;
					ЗаполненХотяБыОдинИзБлоковПриложения31 = Истина;
					// Код показателя.
					КодПок131Длина = СтрДлина(КодПок131);
					Если КодПок131Длина <> 5 Тогда
						СообщитьВТС("Приложение 3. Раздел 1 -> Страница " + НомерСтраницы131
						+ ": в строке " + Формат(НомерСтроки131, "ЧГ=")
						+ " не" + ?(КодПок131Длина = 0, "", "верно")
						+ " задан код показателя.", "Приложение31",
						"П001310000101_" + Формат(НомерСтроки131, "ЧГ="), НомерСтраницы131);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Код вида реализованного (переданного в структуре) спирта.
					КодРСпирта131Длина = СтрДлина(КодРСпирта131);
					Если КодРСпирта131Длина <> 3 Тогда
						СообщитьВТС("Приложение 3. Раздел 1 -> Страница " + НомерСтраницы131
						+ ": в строке " + Формат(НомерСтроки131, "ЧГ=")
						+ " не" + ?(КодРСпирта131Длина = 0, "", "верно")
						+ " задан код вида реализованного (переданного в структуре) спирта.", "Приложение31",
						"П001310000102_" + Формат(НомерСтроки131, "ЧГ="), НомерСтраницы131);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Код вида подакцизной продукции, для производства которой реализован (передан в структуре) спирт.
					КодВидаПП131Длина = СтрДлина(КодВидаПП131);
					Если КодВидаПП131Длина <> 3 Тогда
						СообщитьВТС("Приложение 3. Раздел 1 -> Страница " + НомерСтраницы131
						+ ": в строке " + Формат(НомерСтроки131, "ЧГ=")
						+ " не" + ?(КодВидаПП131Длина = 0, "", "верно")
						+ " задан код вида подакцизной продукции, для производства которой реализован (передан в структуре) спирт.",
						"Приложение31", "П001310000104_" + Формат(НомерСтроки131, "ЧГ="), НомерСтраницы131);
						СтатусПроверки = Ложь;
					КонецЕсли;
					НомерСтроки131 = НомерСтроки131 + 1;
				КонецЦикла;
				Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения31 Тогда
					СообщитьВТС("Приложение 3. Раздел 1 -> Страница " + НомерСтраницы131
						+ ": в строке 1 не задан код показателя.",
					"Приложение31", "П001310000101_1", НомерСтраницы131);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 3.2.
	// Определение необходимости проверки Приложения 3.2.
	Приложение32 = мДанныеОтчета.Приложение32;
	ПроверятьПриложение32 = Ложь;
	Для Каждого СтраницаПриложения32 Из Приложение32 Цикл
		Данные132 = СтраницаПриложения32.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные132, "Приложение32", ДеревоВыгрузки) Тогда
			ПроверятьПриложение32 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение32 Тогда
		Для Каждого СтраницаПриложения32 Из Приложение32 Цикл
			Данные132 = СтраницаПриложения32.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные132, "Приложение32", ДеревоВыгрузки) Тогда
				НомерСтраницы132 = Приложение32.Индекс(СтраницаПриложения32) + 1;
				ИННЮЛ132 = СокрЛП(Данные132["П001320001003"]);
				КПП132   = СокрЛП(Данные132["П001320002003"]);
				// ИНН продавца спирта (или организации, осуществляющей передачу спирта в структуре).
				ИННЮЛ132Длина = СтрДлина(ИННЮЛ132);
				Если ИННЮЛ132Длина <> 10 Тогда
					СообщитьВТС("Приложение 3. Раздел 2 -> Страница " + НомерСтраницы132
					+ ": не" + ?(ИННЮЛ132Длина = 0, "", "верно")
					+ " задан ИНН продавца спирта (организации, осуществляющей передачу в структуре).",
					"Приложение32", "П001320001003", НомерСтраницы132);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// КПП продавца спирта (или организации, осуществляющей передачу спирта в структуре).
				КПП132Длина = СтрДлина(КПП132);
				Если КПП132Длина <> 9 Тогда
					СообщитьВТС("Приложение 3. Раздел 2 -> Страница " + НомерСтраницы132
					+ ": не" + ?(КПП132Длина = 0, "", "верно")
					+ " задан КПП продавца спирта (организации, осуществляющей передачу в структуре).",
					"Приложение32", "П001320002003", НомерСтраницы132);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Многострочная часть приложения 3.2.
				ЗаполненХотяБыОдинИзБлоковПриложения32 = Ложь;
				НомерСтроки132 = 1;
				Пока Данные132.Свойство("П001320000101_" + Формат(НомерСтроки132, "ЧГ=")) Цикл
					КодПок132     = СокрЛП(Данные132["П001320000101_" + Формат(НомерСтроки132, "ЧГ=")]);
					КодРСпирта132 = СокрЛП(Данные132["П001320000102_" + Формат(НомерСтроки132, "ЧГ=")]);
					ОбъРСпирта132 = Данные132["П001320000103_" + Формат(НомерСтроки132, "ЧГ=")];
					КодВидаПП132  = СокрЛП(Данные132["П001320000104_" + Формат(НомерСтроки132, "ЧГ=")]);
					СумАвАкц132   = Данные132["П001320000105_" + Формат(НомерСтроки132, "ЧГ=")];
					Если НЕ ЗначениеЗаполнено(КодПок132)
						И НЕ ЗначениеЗаполнено(КодРСпирта132)
						И НЕ ЗначениеЗаполнено(ОбъРСпирта132)
						И НЕ ЗначениеЗаполнено(КодВидаПП132)
						И НЕ ЗначениеЗаполнено(СумАвАкц132) Тогда
						НомерСтроки132 = НомерСтроки132 + 1;
						Продолжить;
					КонецЕсли;
					ЗаполненХотяБыОдинИзБлоковПриложения32 = Истина;
					// Код показателя.
					КодПок132Длина = СтрДлина(КодПок132);
					Если КодПок132Длина <> 5 Тогда
						СообщитьВТС("Приложение 3. Раздел 2 -> Страница " + НомерСтраницы132
						+ ": в строке " + Формат(НомерСтроки132, "ЧГ=")
						+ " не" + ?(КодПок132Длина = 0, "", "верно")
						+ " задан код показателя.", "Приложение32",
						"П001320000101_" + Формат(НомерСтроки132, "ЧГ="), НомерСтраницы132);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Код вида приобретенного (переданного в структуре) спирта.
					КодРСпирта132Длина = СтрДлина(КодРСпирта132);
					Если КодРСпирта132Длина <> 3 Тогда
						СообщитьВТС("Приложение 3. Раздел 2 -> Страница " + НомерСтраницы132
						+ ": в строке " + Формат(НомерСтроки132, "ЧГ=")
						+ " не" + ?(КодРСпирта132Длина = 0, "", "верно")
						+ " задан код вида приобретенного (переданного в структуре) спирта.", "Приложение32",
						"П001320000102_" + Формат(НомерСтроки132, "ЧГ="), НомерСтраницы132);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Код вида подакцизной продукции, для производства которой приобретен (передан в структуре) спирт.
					КодВидаПП132Длина = СтрДлина(КодВидаПП132);
					Если КодВидаПП132Длина <> 3 Тогда
						СообщитьВТС("Приложение 3. Раздел 2 -> Страница " + НомерСтраницы132
						+ ": в строке " + Формат(НомерСтроки132, "ЧГ=")
						+ " не" + ?(КодВидаПП132Длина = 0, "", "верно")
						+ " задан код вида подакцизной продукции, для производства которой приобретен (передан в структуре) спирт.",
						"Приложение32", "П001320000104_" + Формат(НомерСтроки132, "ЧГ="), НомерСтраницы132);
						СтатусПроверки = Ложь;
					КонецЕсли;
					НомерСтроки132 = НомерСтроки132 + 1;
				КонецЦикла;
				Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения32 Тогда
					СообщитьВТС("Приложение 3. Раздел 2 -> Страница " + НомерСтраницы132
						+ ": в строке 1 не задан код показателя.",
					"Приложение32", "П001320000101_1", НомерСтраницы132);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 4.
	// Определение необходимости проверки Приложения 4.
	Приложение4 = мДанныеОтчета.Приложение4;
	ПроверятьПриложение4 = Ложь;
	Для Каждого СтраницаПриложения4 Из Приложение4 Цикл
		Данные104 = СтраницаПриложения4.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные104, "Приложение4", ДеревоВыгрузки) Тогда
			ПроверятьПриложение4 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение4 Тогда
		Для Каждого СтраницаПриложения4 Из Приложение4 Цикл
			Данные104 = СтраницаПриложения4.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные104, "Приложение4", ДеревоВыгрузки) Тогда
				НомерСтраницы104 = Приложение4.Индекс(СтраницаПриложения4) + 1;
				НаимОрг104 = СокрЛП(Данные104["П001040001001"]);
				ИННЮЛ104   = СокрЛП(Данные104["П001040002001"]);
				КПП104     = СокрЛП(Данные104["П001040003001"]);
				СерСвид104 = СокрЛП(Данные104["П001040004001"]);
				НомСвид104 = СокрЛП(Данные104["П001040004002"]);
				// Наименование организации - поставщика.
				Если НЕ ЗначениеЗаполнено(НаимОрг104) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": не задано наименование поставщика.",
					"Приложение4", "П001040001001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// ИНН поставщика.
				ИННЮЛ104Длина = СтрДлина(ИННЮЛ104);
				Если ИННЮЛ104Длина <> 10 Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": не" + ?(ИННЮЛ104Длина = 0, "", "верно") + " задан ИНН поставщика.",
					"Приложение4", "П001040002001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// КПП поставщика.
				КПП104Длина = СтрДлина(КПП104);
				Если КПП104Длина <> 9 Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": не" + ?(КПП104Длина = 0, "", "верно") + " задан КПП поставщика.",
					"Приложение4", "П001040003001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Серия свидетельства поставщика.
				Если НЕ ЗначениеЗаполнено(СерСвид104) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": не задана серия свидетельства поставщика.",
					"Приложение4", "П001040004001", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Номер свидетельства поставщика.
				Если НЕ ЗначениеЗаполнено(НомСвид104) Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": не задан номер свидетельства поставщика.",
					"Приложение4", "П001040004002", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Многострочная часть приложения 4.
				ЗаполненХотяБыОдинИзБлоковПриложения4 = Ложь;
				НомерСтроки104 = 1;
				Пока Данные104.Свойство("П001040000101_" + Формат(НомерСтроки104, "ЧГ=")) Цикл
					КодСпирт104 = СокрЛП(Данные104["П001040000101_" + Формат(НомерСтроки104, "ЧГ=")]);
					НомСчФ104   = СокрЛП(Данные104["П001040000102_" + Формат(НомерСтроки104, "ЧГ=")]);
					ДатаСчФ104  = Данные104["П001040000103_" + Формат(НомерСтроки104, "ЧГ=")];
					ОбСпСчФ104  = Данные104["П001040000104_" + Формат(НомерСтроки104, "ЧГ=")];
					НомКСчФ104  = СокрЛП(Данные104["П001040000105_" + Формат(НомерСтроки104, "ЧГ=")]);
					ДатаКСчФ104 = Данные104["П001040000106_" + Формат(НомерСтроки104, "ЧГ=")];
					ОбСпКСчФ104 = Данные104["П001040000107_" + Формат(НомерСтроки104, "ЧГ=")];
					Если НЕ ЗначениеЗаполнено(КодСпирт104)
						И НЕ ЗначениеЗаполнено(НомСчФ104)
						И НЕ ЗначениеЗаполнено(ДатаСчФ104)
						И НЕ ЗначениеЗаполнено(ОбСпСчФ104)
						И НЕ ЗначениеЗаполнено(НомКСчФ104)
						И НЕ ЗначениеЗаполнено(ДатаКСчФ104)
						И НЕ ЗначениеЗаполнено(ОбСпКСчФ104) Тогда
						НомерСтроки104 = НомерСтроки104 + 1;
						Продолжить;
					КонецЕсли;
					ЗаполненХотяБыОдинИзБлоковПриложения4 = Истина;
					// Код вида денатурированного спирта.
					КодСпирт104Длина = СтрДлина(КодСпирт104);
					Если КодСпирт104Длина <> 3 Тогда
						СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
						+ ": в строке " + Формат(НомерСтроки104, "ЧГ=")
						+ " не" + ?(КодСпирт104Длина = 0, "", "верно")
						+ " задан код вида денатурированного спирта.", "Приложение4",
						"П001040000101_" + Формат(НомерСтроки104, "ЧГ="), НомерСтраницы104);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Номер счета-фактуры.
					Если НЕ ЗначениеЗаполнено(НомСчФ104) Тогда
						СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
						+ ": в строке " + Формат(НомерСтроки104, "ЧГ=")
						+ " не задан номер счета-фактуры.", "Приложение4",
						"П001040000102_" + Формат(НомерСтроки104, "ЧГ="), НомерСтраницы104);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Дата счета-фактуры.
					Если НЕ ЗначениеЗаполнено(ДатаСчФ104) Тогда
						СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
						+ ": в строке " + Формат(НомерСтроки104, "ЧГ=")
						+ " не задана дата счета-фактуры.", "Приложение4",
						"П001040000103_" + Формат(НомерСтроки104, "ЧГ="), НомерСтраницы104);
						СтатусПроверки = Ложь;
					КонецЕсли;
					НомерСтроки104 = НомерСтроки104 + 1;
				КонецЦикла;
				Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения4 Тогда
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": в строке 1 не задан код вида денатурированного спирта.",
					"Приложение4", "П001040000101_1", НомерСтраницы104);
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": в строке 1 не задан номер счета-фактуры.",
					"Приложение4", "П001040000102_1", НомерСтраницы104);
					СообщитьВТС("Приложение 4 -> Страница " + НомерСтраницы104
					+ ": в строке 1 не задана дата счета-фактуры.",
					"Приложение4", "П001040000103_1", НомерСтраницы104);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 5.
	// Определение необходимости проверки Приложения 5.
	Приложение5 = мДанныеОтчета.Приложение5;
	ПроверятьПриложение5 = Ложь;
	Для Каждого СтраницаПриложения5 Из Приложение5 Цикл
		Данные105 = СтраницаПриложения5.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные105, "Приложение5", ДеревоВыгрузки) Тогда
			ПроверятьПриложение5 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение5 Тогда
		Для Каждого СтраницаПриложения5 Из Приложение5 Цикл
			Данные105 = СтраницаПриложения5.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные105, "Приложение5", ДеревоВыгрузки) Тогда
				НомерСтраницы105 = Приложение5.Индекс(СтраницаПриложения5) + 1;
				НаимОрг105 = СокрЛП(Данные105["П001050001001"]);
				ИННЮЛ105   = СокрЛП(Данные105["П001050002001"]);
				КПП105     = СокрЛП(Данные105["П001050003001"]);
				СерСвид105 = СокрЛП(Данные105["П001050004001"]);
				НомСвид105 = СокрЛП(Данные105["П001050004002"]);
				// Наименование организации - покупателя (получателя).
				Если НЕ ЗначениеЗаполнено(НаимОрг105) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": не задано наименование покупателя (получателя).",
					"Приложение5", "П001050001001", НомерСтраницы105);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// ИНН получателя.
				ИННЮЛ105Длина = СтрДлина(ИННЮЛ105);
				Если ИННЮЛ105Длина <> 10 Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": не" + ?(ИННЮЛ105Длина = 0, "", "верно") + " задан ИНН покупателя (получателя).",
					"Приложение5", "П001050002001", НомерСтраницы105);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// КПП получателя.
				КПП105Длина = СтрДлина(КПП105);
				Если КПП105Длина <> 9 Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": не" + ?(КПП105Длина = 0, "", "верно") + " задан КПП покупателя (получателя).",
					"Приложение5", "П001050003001", НомерСтраницы105);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Серия свидетельства получателя.
				Если НЕ ЗначениеЗаполнено(СерСвид105) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": не задана серия свидетельства получателя.",
					"Приложение5", "П001050004001", НомерСтраницы105);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Номер свидетельства получателя.
				Если НЕ ЗначениеЗаполнено(НомСвид105) Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": не задан номер свидетельства получателя.",
					"Приложение5", "П001050004002", НомерСтраницы105);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Многострочная часть приложения 5.
				ЗаполненХотяБыОдинИзБлоковПриложения5 = Ложь;
				НомерСтроки105 = 1;
				Пока Данные105.Свойство("П001050000101_" + Формат(НомерСтроки105, "ЧГ=")) Цикл
					КодСпирт105 = СокрЛП(Данные105["П001050000101_" + Формат(НомерСтроки105, "ЧГ=")]);
					НомСчФ105   = СокрЛП(Данные105["П001050000102_" + Формат(НомерСтроки105, "ЧГ=")]);
					ДатаСчФ105  = Данные105["П001050000103_" + Формат(НомерСтроки105, "ЧГ=")];
					ОбСпСчФ105  = Данные105["П001050000104_" + Формат(НомерСтроки105, "ЧГ=")];
					НомКСчФ105  = СокрЛП(Данные105["П001050000105_" + Формат(НомерСтроки105, "ЧГ=")]);
					ДатаКСчФ105 = Данные105["П001050000106_" + Формат(НомерСтроки105, "ЧГ=")];
					ОбСпКСчФ105 = Данные105["П001050000107_" + Формат(НомерСтроки105, "ЧГ=")];
					Если НЕ ЗначениеЗаполнено(КодСпирт105)
						И НЕ ЗначениеЗаполнено(НомСчФ105)
						И НЕ ЗначениеЗаполнено(ДатаСчФ105)
						И НЕ ЗначениеЗаполнено(ОбСпСчФ105)
						И НЕ ЗначениеЗаполнено(НомКСчФ105)
						И НЕ ЗначениеЗаполнено(ДатаКСчФ105)
						И НЕ ЗначениеЗаполнено(ОбСпКСчФ105) Тогда
						НомерСтроки105 = НомерСтроки105 + 1;
						Продолжить;
					КонецЕсли;
					ЗаполненХотяБыОдинИзБлоковПриложения5 = Истина;
					// Код вида денатурированного спирта.
					КодСпирт105Длина = СтрДлина(КодСпирт105);
					Если КодСпирт105Длина <> 3 Тогда
						СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
						+ ": в строке " + Формат(НомерСтроки105, "ЧГ=")
						+ " не" + ?(КодСпирт105Длина = 0, "", "верно")
						+ " задан код вида денатурированного спирта.", "Приложение5",
						"П001050000101_" + Формат(НомерСтроки105, "ЧГ="), НомерСтраницы105);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Номер счета-фактуры.
					Если НЕ ЗначениеЗаполнено(НомСчФ105) Тогда
						СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
						+ ": в строке " + Формат(НомерСтроки105, "ЧГ=")
						+ " не задан номер счета-фактуры.", "Приложение5",
						"П001050000102_" + Формат(НомерСтроки105, "ЧГ="), НомерСтраницы105);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Дата счета-фактуры.
					Если НЕ ЗначениеЗаполнено(ДатаСчФ105) Тогда
						СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
						+ ": в строке " + Формат(НомерСтроки105, "ЧГ=")
						+ " не задана дата счета-фактуры.", "Приложение5",
						"П001050000103_" + Формат(НомерСтроки105, "ЧГ="), НомерСтраницы105);
						СтатусПроверки = Ложь;
					КонецЕсли;
					НомерСтроки105 = НомерСтроки105 + 1;
				КонецЦикла;
				Если НЕ ЗаполненХотяБыОдинИзБлоковПриложения5 Тогда
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": в строке 1 не задан код вида денатурированного спирта.",
					"Приложение5", "П001050000101_1", НомерСтраницы105);
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": в строке 1 не задан номер счета-фактуры.",
					"Приложение5", "П001050000102_1", НомерСтраницы105);
					СообщитьВТС("Приложение 5 -> Страница " + НомерСтраницы105
					+ ": в строке 1 не задана дата счета-фактуры.",
					"Приложение5", "П001050000103_1", НомерСтраницы105);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 6.
	// Определение необходимости проверки Приложения 6.
	Приложение6 = мДанныеОтчета.Приложение6;
	ПроверятьПриложение6 = Ложь;
	Для Каждого СтраницаПриложения6 Из Приложение6 Цикл
		Данные106 = СтраницаПриложения6.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные106, "Приложение6", ДеревоВыгрузки) Тогда
			ПроверятьПриложение6 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение6 Тогда
		Для Каждого СтраницаПриложения6 Из Приложение6 Цикл
			Данные106 = СтраницаПриложения6.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные106, "Приложение6", ДеревоВыгрузки) Тогда
				НомерСтраницы106 = Приложение6.Индекс(СтраницаПриложения6) + 1;
				РегНом106   = СокрЛП(Данные106["П001060001003"]);
				ДатаРег106  = Данные106["П001060002003"];
				КодСпирт106 = СокрЛП(Данные106["П001060003003"]);
				КодПП106    = СокрЛП(Данные106["П001060004003"]);
				// Регистрационный номер извещения.
				Если НЕ ЗначениеЗаполнено(РегНом106) Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомерСтраницы106
					+ ": не задан регистрационный номер извещения.",
					"Приложение6", "П001060001003", НомерСтраницы106);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата регистрации извещения.
				Если НЕ ЗначениеЗаполнено(ДатаРег106) Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомерСтраницы106
					+ ": не задана дата регистрации извещения.",
					"Приложение6", "П001060002003", НомерСтраницы106);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида закупаемого спирта.
				КодСпирт106Длина = СтрДлина(КодСпирт106);
				Если КодСпирт106Длина <> 3 Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомерСтраницы106
					+ ": не" + ?(КодСпирт106Длина = 0, "", "верно")
					+ " задан код вида закупаемого спирта.",
					"Приложение6", "П001060003003", НомерСтраницы106);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида подакцизной продукции, для производства которой закупается спирт.
				КодПП106Длина = СтрДлина(КодПП106);
				Если КодПП106Длина <> 3 Тогда
					СообщитьВТС("Приложение 6 -> Страница " + НомерСтраницы106
					+ ": не" + ?(КодПП106Длина = 0, "", "верно")
					+ " задан код вида подакцизной продукции, для производства которой закупается спирт.",
					"Приложение6", "П001060004003", НомерСтраницы106);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 7.
	// Определение необходимости проверки Приложения 7.
	Приложение7 = мДанныеОтчета.Приложение7;
	ПроверятьПриложение7 = Ложь;
	Для Каждого СтраницаПриложения7 Из Приложение7 Цикл
		Данные107 = СтраницаПриложения7.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные107, "Приложение7", ДеревоВыгрузки) Тогда
			ПроверятьПриложение7 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение7 Тогда
		Для Каждого СтраницаПриложения7 Из Приложение7 Цикл
			Данные107 = СтраницаПриложения7.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные107, "Приложение7", ДеревоВыгрузки) Тогда
				НомерСтраницы107 = Приложение7.Индекс(СтраницаПриложения7) + 1;
				РегНом107    = СокрЛП(Данные107["П001070001003"]);
				ДатаРег107   = Данные107["П001070002003"];
				КодСпирт107  = СокрЛП(Данные107["П001070003003"]);
				КодПП107     = СокрЛП(Данные107["П001070004003"]);
				ДатаВыдБГ107 = Данные107["П001070004503"];
				НомБГ107     = СокрЛП(Данные107["П001070005003"]);
				ДатаНачБГ107 = Данные107["П001070006003"];
				ДатаКонБГ107 = Данные107["П001070007003"];
				// Регистрационный номер извещения.
				Если НЕ ЗначениеЗаполнено(РегНом107) Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не задан регистрационный номер извещения.",
					"Приложение7", "П001070001003", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата регистрации извещения.
				Если НЕ ЗначениеЗаполнено(ДатаРег107) Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не задана дата регистрации извещения.",
					"Приложение7", "П001070002003", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида закупаемого спирта.
				КодСпирт107Длина = СтрДлина(КодСпирт107);
				Если КодСпирт107Длина <> 3 Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не" + ?(КодСпирт107Длина = 0, "", "верно")
					+ " задан код вида закупаемого спирта.",
					"Приложение7", "П001070003003", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида подакцизной продукции, для производства которой закупается спирт.
				КодПП107Длина = СтрДлина(КодПП107);
				Если КодПП107Длина <> 3 Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не" + ?(КодПП107Длина = 0, "", "верно")
					+ " задан код вида подакцизной продукции, для производства которой закупается спирт.",
					"Приложение7", "П001070004003", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата выдачи банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаВыдБГ107) Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не задана дата выдачи банковской гарантии.",
					"Приложение7", "П001070004503", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Номер банковской гарантии.
				Если НЕ ЗначениеЗаполнено(НомБГ107) Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не задан номер банковской гарантии.",
					"Приложение7", "П001070005003", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата начала срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаНачБГ107) Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не задана дата начала действия банковской гарантии.",
					"Приложение7", "П001070006003", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата окончания срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаНачБГ107) Тогда
					СообщитьВТС("Приложение 7 -> Страница " + НомерСтраницы107
					+ ": не задана дата окончания действия банковской гарантии.",
					"Приложение7", "П001070007003", НомерСтраницы107);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 8.
	// Определение необходимости проверки Приложения 8.
	Приложение8 = мДанныеОтчета.Приложение8;
	ПроверятьПриложение8 = Ложь;
	Для Каждого СтраницаПриложения8 Из Приложение8 Цикл
		Данные108 = СтраницаПриложения8.Данные[0].Значение;
		Если НЕ СтраницаПуста(Данные108, "Приложение8", ДеревоВыгрузки) Тогда
			ПроверятьПриложение8 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроверятьПриложение8 Тогда
		Для Каждого СтраницаПриложения8 Из Приложение8 Цикл
			Данные108 = СтраницаПриложения8.Данные[0].Значение;
			Если НЕ СтраницаПуста(Данные108, "Приложение8", ДеревоВыгрузки) Тогда
				НомерСтраницы108 = Приложение8.Индекс(СтраницаПриложения8) + 1;
				РегНом108    = СокрЛП(Данные108["П001080001003"]);
				ДатаРег108   = Данные108["П001080002003"];
				КодСпирт108  = СокрЛП(Данные108["П001080003003"]);
				КодПП108     = СокрЛП(Данные108["П001080004003"]);
				ДатаВыдБГ108 = Данные108["П001080004503"];
				НомБГ108     = СокрЛП(Данные108["П001080005003"]);
				ДатаНачБГ108 = Данные108["П001080006003"];
				ДатаКонБГ108 = Данные108["П001080007003"];
				// Регистрационный номер извещения.
				Если НЕ ЗначениеЗаполнено(РегНом108) Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не задан регистрационный номер извещения.",
					"Приложение8", "П001080001003", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата регистрации извещения.
				Если НЕ ЗначениеЗаполнено(ДатаРег108) Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не задана дата регистрации извещения.",
					"Приложение8", "П001080002003", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида закупаемого спирта.
				КодСпирт108Длина = СтрДлина(КодСпирт108);
				Если КодСпирт108Длина <> 3 Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не" + ?(КодСпирт108Длина = 0, "", "верно")
					+ " задан код вида закупаемого спирта.",
					"Приложение8", "П001080003003", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код вида подакцизной продукции, для производства которой закупается спирт.
				КодПП108Длина = СтрДлина(КодПП108);
				Если КодПП108Длина <> 3 Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не" + ?(КодПП108Длина = 0, "", "верно")
					+ " задан код вида подакцизной продукции, для производства которой закупается спирт.",
					"Приложение8", "П001080004003", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата выдачи банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаВыдБГ108) Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не задана дата выдачи банковской гарантии.",
					"Приложение8", "П001080004503", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Номер банковской гарантии.
				Если НЕ ЗначениеЗаполнено(НомБГ108) Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не задан номер банковской гарантии.",
					"Приложение8", "П001080005003", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата начала срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаНачБГ108) Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не задана дата начала действия банковской гарантии.",
					"Приложение8", "П001080006003", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Дата окончания срока действия банковской гарантии.
				Если НЕ ЗначениеЗаполнено(ДатаНачБГ108) Тогда
					СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
					+ ": не задана дата окончания действия банковской гарантии.",
					"Приложение8", "П001080007003", НомерСтраницы108);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Единообразные проверки в строках 200, 210, 230.
				МассивПрефиксов = Новый Массив;
				МассивПрефиксов.Добавить("П0010800200");
				МассивПрефиксов.Добавить("П0010800210");
				МассивПрефиксов.Добавить("П0010800230");
				Для каждого Префикс Из МассивПрефиксов Цикл
					ОбъРеалПрил8 = Данные108[Префикс + "03"];
					СумАкцПрил8  = Данные108[Префикс + "04"];
					ПерЭксПрил8  = СокрЛП(Данные108[Префикс + "05"]);
					ГодЭксПрил8  = Формат(Данные108[Префикс + "06"], "ЧГ=");
					Если ЗначениеЗаполнено(ОбъРеалПрил8)
						ИЛИ ЗначениеЗаполнено(СумАкцПрил8)
						ИЛИ ЗначениеЗаполнено(ПерЭксПрил8)
						ИЛИ ЗначениеЗаполнено(ГодЭксПрил8) Тогда
						// Код налогового периода, в котором осуществлена реализация товаров на экспорт.
						ПерЭксПрил8Длина = СтрДлина(ПерЭксПрил8);
						Если ПерЭксПрил8Длина <> 2 Тогда
							СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
							+ ": в строке " + Прав(Префикс, 3) + " не" + ?(ПерЭксПрил8Длина = 0, "", "верно")
							+ " задан код налогового периода, в котором осуществлена реализация продукции на экспорт.",
							"Приложение8", Префикс + "05", НомерСтраницы108);
							СтатусПроверки = Ложь;
						Иначе
							Если СтрНайти(ВозможныеКодыПериода, ПерЭксПрил8) = 0 Тогда
								СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
								+ ": в строке " + Прав(Префикс, 3) + " неверно задан код налогового периода, в котором осуществлена реализация продукции на экспорт.",
								"Приложение8", Префикс + "05", НомерСтраницы108);
								СтатусПроверки = Ложь;
							КонецЕсли;
						КонецЕсли;
						// Год налогового периода, в котором осуществлена реализация товаров на экспорт.
						ГодЭксПрил8Длина = СтрДлина(ГодЭксПрил8);
						Если ГодЭксПрил8Длина <> 4 Тогда
							СообщитьВТС("Приложение 8 -> Страница " + НомерСтраницы108
							+ ": в строке " + Прав(Префикс, 3) + " не" + ?(ГодЭксПрил8Длина = 0, "", "верно")
							+ " задан год налогового периода, в котором осуществлена реализация продукции на экспорт.",
							"Приложение8", Префикс + "06", НомерСтраницы108);
							СтатусПроверки = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// Обработка всех узлов "ПризнСтав" разделов 2.1.
	УзлыПризнСтав = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "ПризнСтав", "Раздел2"), Истина);
	Для Каждого Узел Из УзлыПризнСтав Цикл
		Узел.Значение = ?(Узел.Значение = "-", "", Узел.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Раздел 1.
	Данные11 = мДанныеОтчета.Раздел11;
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	Для каждого Эл Из СумНалПУ.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, Данные11[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	// Раздел 1.1.
	СумНалПУ_МО = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумНалПУ_МО");
	Для каждого Эл Из СумНалПУ_МО.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, Данные11[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	// Многострочная часть раздела 1.1.
	СумНалПУКод = ПолучитьПодчиненныйЭлемент(СумНалПУ_МО, "СумНалПУКод");
	НомерСтроки = 1;
	НомерСтрокиСтр = "1";
	Пока Данные11.Свойство("П000110000101_" + НомерСтрокиСтр) Цикл
		ЭкзСумНалПУКод = СкопироватьУзел(СумНалПУ_МО, СумНалПУКод);
		Для Каждого Эл Из ЭкзСумНалПУКод.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Ключ = "П100110000102" Тогда
					СуммаКУплате = Данные11["П000110000102_" + НомерСтрокиСтр];
					СуммаКУменьш = Данные11["П000110000103_" + НомерСтрокиСтр];
					ВывестиПоказательВXML(Эл, СуммаКУплате - СуммаКУменьш);
				Иначе
					ВывестиПоказательВXML(Эл, Данные11[Эл.Ключ + "_" + НомерСтрокиСтр]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
		НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
	КонецЦикла;
	// Раздел 1.2.
	Данные12 = мДанныеОтчета.Раздел12;
	СумАвУпл = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумАвУпл");
	Для каждого Эл Из СумАвУпл.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, Данные12[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	// Многострочная часть раздела 1.2.
	СумАвУплКод = ПолучитьПодчиненныйЭлемент(СумАвУпл, "СумАвУплКод");
	НомерСтроки = 1;
	Пока Данные12.Свойство("П000120000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЭкзСумАвУплКод = СкопироватьУзел(СумАвУпл, СумАвУплКод);
		ЗаполнитьДаннымиУзел(Данные12, ЭкзСумАвУплКод, НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Раздел 2.
	Данные2 = мДанныеОтчета.Раздел2;
	РасчАкц = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкц");
	Для Каждого СтраницаРаздела Из Данные2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Раздел2", УзелРодитель.Владелец()) Тогда
			ЭкзРасчАкц = СкопироватьУзел(УзелРодитель, РасчАкц);
			Для каждого Эл Из ЭкзРасчАкц.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Многострочная часть раздела 2.1.
			ОперПТ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "ОперПТ");
			ОперПТКод = ПолучитьПодчиненныйЭлемент(ОперПТ, "ОперПТКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000210000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзОперПТКод = СкопироватьУзел(ОперПТ, ОперПТКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзОперПТКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.2.
			АкцизВыч = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизВыч");
			АкцизВычКод = ПолучитьПодчиненныйЭлемент(АкцизВыч, "АкцизВычКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000220000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзАкцизВычКод = СкопироватьУзел(АкцизВыч, АкцизВычКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзАкцизВычКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Раздела 2.3.
			АкцизПУ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизПУ");
			Для каждого Эл Из АкцизПУ.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
						ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
					Иначе
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			АкцизУм = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизУм");
			Для каждого Эл Из АкцизУм.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
						ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
					Иначе
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ДанныеСтраницы["П000230000302"]) Тогда
				Акциз203_6 = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "Акциз203.6");
				Для каждого Эл Из Акциз203_6.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
							ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
						Иначе
							ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Раздел 2.4.
			АкцизВозм = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "АкцизВозм");
			// Многострочная часть раздела 2.4.
			АкцизВозмКод = ПолучитьПодчиненныйЭлемент(АкцизВозм, "АкцизВозмКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000240000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзАкцизВозмКод = СкопироватьУзел(АкцизВозм, АкцизВозмКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзАкцизВозмКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть строк "010".
			ПревУплВозм = ПолучитьПодчиненныйЭлемент(АкцизВозм, "ПревУплВозм");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000240000201_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзПревУплВозм = СкопироватьУзел(АкцизВозм, ПревУплВозм);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзПревУплВозм, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.5.
			РеалПТБГ = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "РеалПТБГ");
			РеалПТБГКод = ПолучитьПодчиненныйЭлемент(РеалПТБГ, "РеалПТБГКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000250000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзРеалПТБГКод = СкопироватьУзел(РеалПТБГ, РеалПТБГКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзРеалПТБГКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			// Многострочная часть раздела 2.6.
			РеалПТЕЭС = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкц, "РеалПТЕЭС");
			РеалПТЕЭСКод = ПолучитьПодчиненныйЭлемент(РеалПТЕЭС, "РеалПТЕЭСКод");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000260000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзРеалПТЕЭСКод = СкопироватьУзел(РеалПТЕЭС, РеалПТЕЭСКод);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзРеалПТЕЭСКод, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Раздел 3.
	РасчАвАкц = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАвАкц");
	// Раздел 3.1.
	Данные31 = мДанныеОтчета.Раздел31;
	АвАкцУплЗак = ПолучитьПодчиненныйЭлемент(РасчАвАкц, "АвАкцУплЗак");
	Для Каждого СтраницаРаздела Из Данные31 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзАвАкцУплЗак = СкопироватьУзел(РасчАвАкц, АвАкцУплЗак);
		Для каждого Эл Из ЭкзАвАкцУплЗак.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Раздел 3.2.
	Данные32 = мДанныеОтчета.Раздел32;
	АвАкцОсвБГ204 = ПолучитьПодчиненныйЭлемент(РасчАвАкц, "АвАкцОсвБГ204");
	Для Каждого СтраницаРаздела Из Данные32 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзАвАкцОсвБГ204 = СкопироватьУзел(РасчАвАкц, АвАкцОсвБГ204);
		Для каждого Эл Из ЭкзАвАкцОсвБГ204.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Раздел 3.3.
	Данные33 = мДанныеОтчета.Раздел33;
	АвАкцОсвБГ184 = ПолучитьПодчиненныйЭлемент(РасчАвАкц, "АвАкцОсвБГ184");
	Для Каждого СтраницаРаздела Из Данные33 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзАвАкцОсвБГ184 = СкопироватьУзел(РасчАвАкц, АвАкцОсвБГ184);
		Для каждого Эл Из ЭкзАвАкцОсвБГ184.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			Иначе
				ТекУзел = ПолучитьПодчиненныйЭлемент(ЭкзАвАкцОсвБГ184, СокрЛП(Эл.Код));
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ТекУзел);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 1.
	//
	ДанныеПрил1 = мДанныеОтчета.Приложение1;
	РасчНБВидПТ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчНБВидПТ");
	Для Каждого СтраницаРаздела Из ДанныеПрил1 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзРасчНБВидПТ = СкопироватьУзел(УзелРодитель, РасчНБВидПТ);
		Для каждого Эл Из ЭкзРасчНБВидПТ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть Приложения 1.
		РасчНБКод = ПолучитьПодчиненныйЭлемент(ЭкзРасчНБВидПТ, "РасчНБКод");
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П001010000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЭкзРасчНБКод = СкопироватьУзел(ЭкзРасчНБВидПТ, РасчНБКод);
			ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзРасчНБКод, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 2.
	//
	// Приложение 2.1.
	Прил21 = ДанныеМногоуровневыхРазделов.Приложение21;
	РасчАкОсвБГЭксп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "РасчАкОсвБГЭксп");
	Для каждого СтраницаПрил21 Из Прил21.Строки Цикл
		ЭкзРасчАкОсвБГЭксп = СкопироватьУзел(УзелРодитель, РасчАкОсвБГЭксп);
		Для каждого Эл Из ЭкзРасчАкОсвБГЭксп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, СтраницаПрил21.Данные[Эл.Ключ]);
			Иначе
				Если СокрЛП(Эл.Код) <> "БГОсвРеалЭксп" Тогда
					ТекУзел = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкОсвБГЭксп, СокрЛП(Эл.Код));
					ЗаполнитьДаннымиУзел(СтраницаПрил21.Данные, ТекУзел);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Приложение 2.2.
		БГОсвРеалЭксп = ПолучитьПодчиненныйЭлемент(ЭкзРасчАкОсвБГЭксп, "БГОсвРеалЭксп");
		Для каждого СтраницаПрил22 Из СтраницаПрил21.Строки Цикл
			ЭкзБГОсвРеалЭксп = СкопироватьУзел(ЭкзРасчАкОсвБГЭксп, БГОсвРеалЭксп);
			Для каждого Эл Из ЭкзБГОсвРеалЭксп.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаПрил22.Данные[Эл.Ключ]);
				Иначе
					ТекУзел = ПолучитьПодчиненныйЭлемент(ЭкзБГОсвРеалЭксп, СокрЛП(Эл.Код));
					ЗаполнитьДаннымиУзел(СтраницаПрил22.Данные, ТекУзел);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 3.1.
	ДанныеПрил31 = мДанныеОтчета.Приложение31;
	СпРеалПерПокуп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпРеалПерПокуп");
	Для Каждого СтраницаРаздела Из ДанныеПрил31 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзСпРеалПерПокуп = СкопироватьУзел(УзелРодитель, СпРеалПерПокуп);
		Для каждого Эл Из ЭкзСпРеалПерПокуп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть Приложения 3.1.
		ОбРеалСпПок = ПолучитьПодчиненныйЭлемент(ЭкзСпРеалПерПокуп, "ОбРеалСпПок");
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П001310000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЭкзОбРеалСпПок = СкопироватьУзел(ЭкзСпРеалПерПокуп, ОбРеалСпПок);
			ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзОбРеалСпПок, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 3.2.
	ДанныеПрил32 = мДанныеОтчета.Приложение32;
	СпПриобПерПрод = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпПриобПерПрод");
	Для Каждого СтраницаРаздела Из ДанныеПрил32 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзСпПриобПерПрод = СкопироватьУзел(УзелРодитель, СпПриобПерПрод);
		Для каждого Эл Из ЭкзСпПриобПерПрод.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть Приложения 3.2.
		ОбПриобСпПрод = ПолучитьПодчиненныйЭлемент(ЭкзСпПриобПерПрод, "ОбПриобСпПрод");
		НомерСтроки = 1;
		Пока ДанныеСтраницы.Свойство("П001320000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
			ЭкзОбПриобСпПрод = СкопироватьУзел(ЭкзСпПриобПерПрод, ОбПриобСпПрод);
			ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзОбПриобСпПрод, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 4.
	ДанныеПрил4 = мДанныеОтчета.Приложение4;
	// Определение необходимости выгрузки приложения 4.
	ВыгружатьПрил4 = Ложь;
	Для Каждого СтраницаРаздела Из ДанныеПрил4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение4", УзелРодитель.Владелец()) Тогда
			ВыгружатьПрил4 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыгружатьПрил4 Тогда
		СпПолучСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпПолучСвид");
		Для Каждого СтраницаРаздела Из ДанныеПрил4 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			ЭкзСпПолучСвид = СкопироватьУзел(УзелРодитель, СпПолучСвид);
			Для каждого Эл Из ЭкзСпПолучСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ДанныеСтраницы["П001040005003"]) Тогда
				ОбПолучСпПер111 = ПолучитьПодчиненныйЭлемент(ЭкзСпПолучСвид, "ОбПолучСпПер111");
				Для каждого Эл Из ОбПолучСпПер111.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
							ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
						Иначе
							ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы["П001040006003"]) Тогда
				ОбПолучСпПер121 = ПолучитьПодчиненныйЭлемент(ЭкзСпПолучСвид, "ОбПолучСпПер121");
				Для каждого Эл Из ОбПолучСпПер121.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
							ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
						Иначе
							ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Многострочная часть Приложения 4.
			СвОбСпСчФ = ПолучитьПодчиненныйЭлемент(ЭкзСпПолучСвид, "СвОбСпСчФ");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П001040000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзСвОбСпСчФ = СкопироватьУзел(ЭкзСпПолучСвид, СвОбСпСчФ);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзСвОбСпСчФ, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 5.
	ДанныеПрил5 = мДанныеОтчета.Приложение5;
	// Определение необходимости выгрузки приложения 5.
	ВыгружатьПрил5 = Ложь;
	Для Каждого СтраницаРаздела Из ДанныеПрил5 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		Если НЕ СтраницаПуста(ДанныеСтраницы, "Приложение5", УзелРодитель.Владелец()) Тогда
			ВыгружатьПрил5 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыгружатьПрил5 Тогда
		СпРеалСвид = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СпРеалСвид");
		Для Каждого СтраницаРаздела Из ДанныеПрил5 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			ЭкзСпРеалСвид = СкопироватьУзел(УзелРодитель, СпРеалСвид);
			Для каждого Эл Из ЭкзСпРеалСвид.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ДанныеСтраницы["П001050005003"]) Тогда
				ОбРеалСпПер111 = ПолучитьПодчиненныйЭлемент(ЭкзСпРеалСвид, "ОбРеалСпПер111");
				Для каждого Эл Из ОбРеалСпПер111.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
							ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
						Иначе
							ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеСтраницы["П001050006003"]) Тогда
				ОбРеалСпПер121 = ПолучитьПодчиненныйЭлемент(ЭкзСпРеалСвид, "ОбРеалСпПер121");
				Для каждого Эл Из ОбРеалСпПер121.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						Если НЕ ЗначениеЗаполнено(Эл.Ключ) И ЗначениеЗаполнено(Эл.ЗначениеПоУмолчанию) Тогда
							ВывестиПоказательВXML(Эл, Эл.ЗначениеПоУмолчанию);
						Иначе
							ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// Многострочная часть Приложения 5.
			СвОбСпСчФ = ПолучитьПодчиненныйЭлемент(ЭкзСпРеалСвид, "СвОбСпСчФ");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П001050000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзСвОбСпСчФ = СкопироватьУзел(ЭкзСпРеалСвид, СвОбСпСчФ);
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ЭкзСвОбСпСчФ, НомерСтроки);
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Приложение 6.
	ДанныеПрил6 = мДанныеОтчета.Приложение6;
	АвППЗакупСп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "АвППЗакупСп");
	Для Каждого СтраницаРаздела Из ДанныеПрил6 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзАвППЗакупСп = СкопироватьУзел(УзелРодитель, АвППЗакупСп);
		Для каждого Эл Из ЭкзАвППЗакупСп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			Иначе
				ТекУзел = ПолучитьПодчиненныйЭлемент(ЭкзАвППЗакупСп, СокрЛП(Эл.Код));
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ТекУзел);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 7.
	ДанныеПрил7 = мДанныеОтчета.Приложение7;
	АвОсвБГ204 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "АвОсвБГ204");
	Для Каждого СтраницаРаздела Из ДанныеПрил7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзАвОсвБГ204 = СкопироватьУзел(УзелРодитель, АвОсвБГ204);
		Для каждого Эл Из ЭкзАвОсвБГ204.Строки Цикл
			ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
		КонецЦикла;
	КонецЦикла;
	
	// Приложение 8.
	ДанныеПрил8 = мДанныеОтчета.Приложение8;
	АвОсвБГ184Эксп = ПолучитьПодчиненныйЭлемент(УзелРодитель, "АвОсвБГ184Эксп");
	Для Каждого СтраницаРаздела Из ДанныеПрил8 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзАвОсвБГ184Эксп = СкопироватьУзел(УзелРодитель, АвОсвБГ184Эксп);
		Для каждого Эл Из ЭкзАвОсвБГ184Эксп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			Иначе
				Если СокрЛП(Эл.Код) <> "АкОсвБГРеалЭксп"
					И СокрЛП(Эл.Код) <> "АвРеалРФОсвБГ" Тогда
					ТекУзел = ПолучитьПодчиненныйЭлемент(ЭкзАвОсвБГ184Эксп, СокрЛП(Эл.Код));
					ЗаполнитьДаннымиУзел(ДанныеСтраницы, ТекУзел);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		АкОсвБГРеалЭксп = ПолучитьПодчиненныйЭлемент(ЭкзАвОсвБГ184Эксп, "АкОсвБГРеалЭксп");
		Для каждого Эл Из АкОсвБГРеалЭксп.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			Иначе
				ТекУзел = ПолучитьПодчиненныйЭлемент(АкОсвБГРеалЭксп, СокрЛП(Эл.Код));
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ТекУзел);
			КонецЕсли;
		КонецЦикла;
		АвРеалРФОсвБГ = ПолучитьПодчиненныйЭлемент(ЭкзАвОсвБГ184Эксп, "АвРеалРФОсвБГ");
		Для каждого Эл Из АвРеалРФОсвБГ.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			Иначе
				ТекУзел = ПолучитьПодчиненныйЭлемент(АвРеалРФОсвБГ, СокрЛП(Эл.Код));
				ЗаполнитьДаннымиУзел(ДанныеСтраницы, ТекУзел);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя) Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// Находим узел с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(Узел.Формат = "N",
		Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
		НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
			ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ЧГ=");
		КонецЕсли;
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателя = Формат(ЗначениеПоказателя, "ДФ=дд.ММ.гггг");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана. Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(
	НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Приложение21" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Приложение22" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
				Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела21 = НайденнаяСтраница;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница22 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница22.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница22.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Приложение21"
		ИЛИ Ячейка.Раздел = "Приложение22" Тогда
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		ИначеЕсли Ячейка.СтрокаПП <> Неопределено И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				Иначе
					Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
				
				ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
				
				КолСтрокВДеревеДанныхПриложение21 = Макс(ДеревоДанныхПриложение21.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыПриложение21 = 1 По КолСтрокВДеревеДанныхПриложение21 Цикл
					
					ЭлементПриложение21 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементПриложение21.КолонкаРазделыОтчета              = "Расчет акциза. Стр. " + НомерСтраницыПриложение21;
					ЭлементПриложение21.КолонкаРазделыОтчетаСокрНаим      = "Приложение21";
					ЭлементПриложение21.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПриложение21;
					ЭлементПриложение21.ИндексКартинки                    = 0;
					ЭлементПриложение21.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементПриложение21.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхПриложение22
						= Макс(ДеревоДанныхПриложение21.Строки[НомерСтраницыПриложение21 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыПриложение22 = 1 По КолСтрокВДеревеДанныхПриложение22 Цикл
						
						ЭлементПриложение22 = ЭлементПриложение21.ПолучитьЭлементы().Добавить();
						
						ЭлементПриложение22.КолонкаРазделыОтчета              = "Банковская гарантия. Стр. " + НомерСтраницыПриложение22;
						ЭлементПриложение22.КолонкаРазделыОтчетаСокрНаим      = "Приложение22";
						ЭлементПриложение22.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПриложение22;
						ЭлементПриложение22.ИндексКартинки                    = 1;
						ЭлементПриложение22.РазделМногостраничный             = ЭлементПриложение21.РазделМногостраничный;
						ЭлементПриложение22.РазделМногострочный               = ЭлементПриложение21.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение22" Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		Если СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Расчет акциза") > 0
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Расчет акциза""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Банковская гарантия") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Банковская гарантия""";
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть
		= ТекущаяОбластьТабличногоДокумента(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяОбластьТабличногоДокумента(ИмяРаздела)
	
	ИмяАктивнойОбласти = Неопределено;
	
	Если ИмяРаздела = "Раздел2"
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2)
		И ТабличныйДокумент.Области.Найти(
		СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2) <> Неопределено Тогда
		ИмяАктивнойОбласти = СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2;
		СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "";
	КонецЕсли;
	
	Возврат ?(ИмяАктивнойОбласти <> Неопределено,
		ТабличныйДокумент.Область(ИмяАктивнойОбласти), ТабличныйДокумент.Область(1, 1));
	
КонецФункции

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел2" Тогда
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы21);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы22);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы241);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы242);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы25);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы26);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы21].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы22].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы241].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы241, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы242].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы242, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы25].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы25, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы26].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы26, ТаблицаДопСтрокГруппы);
		
	ИначеЕсли ИмяСтраницы = "Приложение1"
		ИЛИ ИмяСтраницы = "Приложение31"
		ИЛИ ИмяСтраницы = "Приложение32"
		ИЛИ ИмяСтраницы = "Приложение4"
		ИЛИ ИмяСтраницы = "Приложение5" Тогда
		
		Если ИмяСтраницы = "Приложение1" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы101;
		ИначеЕсли ИмяСтраницы = "Приложение31" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы131;
		ИначеЕсли ИмяСтраницы = "Приложение32" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы132;
		ИначеЕсли ИмяСтраницы = "Приложение4" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы104;
		ИначеЕсли ИмяСтраницы = "Приложение5" Тогда
			ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы105;
		КонецЕсли;
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИдГруппы);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочного блока.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + ИдГруппы].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела = ТаблицаДопСтрокГруппы;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные разделы (без многострочных частей).
	//
	Если НаимРаздела = "Раздел31"
	 ИЛИ НаимРаздела = "Раздел32"
	 ИЛИ НаимРаздела = "Раздел33"
	 ИЛИ НаимРаздела = "Приложение6"
	 ИЛИ НаимРаздела = "Приложение7"
	 ИЛИ НаимРаздела = "Приложение8" Тогда
		
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[НаимРаздела];
		
		АктивныеСтраницы = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивныеСтраницы.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивныеСтраницы[0];
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2"
		ИЛИ НаимРаздела = "Приложение1"
		ИЛИ НаимРаздела = "Приложение31"
		ИЛИ НаимРаздела = "Приложение32"
		ИЛИ НаимРаздела = "Приложение4"
		ИЛИ НаимРаздела = "Приложение5" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) Тогда
				СтрТаблицаСтраницы.Представление = "Новая страница";
			КонецЕсли;
			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел11"
		ИЛИ НаимРаздела = "Раздел12" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	// Многоуровневые разделы.
	//
	ИначеЕсли НаимРаздела = "Приложение21"
		ИЛИ НаимРаздела = "Приложение22" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ТекВетка.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	Иначе
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы (без многострочных частей).
	//
	Если ИмяТекРаздела = "Раздел31"
	 ИЛИ ИмяТекРаздела = "Раздел32"
	 ИЛИ ИмяТекРаздела = "Раздел33"
	 ИЛИ ИмяТекРаздела = "Приложение6"
	 ИЛИ ИмяТекРаздела = "Приложение7"
	 ИЛИ ИмяТекРаздела = "Приложение8" Тогда
	 
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для Каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
			
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
			
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
	// Многостраничные и многострочные разделы (количество многострочных частей более 1).
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
		НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел2";
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппыДопСтрок);
				Если ЭтаФорма[ИмяГруппыДопСтрок].Количество() = 1 Тогда 
					Обл = ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1"];
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_2");
			Если Обл = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	// Многостраничные и многострочные разделы (1 многострочная часть).
	//
	ИначеЕсли ИмяТекРаздела = "Приложение1"
		ИЛИ ИмяТекРаздела = "Приложение31"
		ИЛИ ИмяТекРаздела = "Приложение32"
		ИЛИ ИмяТекРаздела = "Приложение4"
		ИЛИ ИмяТекРаздела = "Приложение5" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей.
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными.
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела.
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многострочные (немногостраничные) разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел11"
		ИЛИ ИмяТекРаздела = "Раздел12" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппыДопСтрок = КЗ.Ключ;
			Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	// Многоуровневые разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Приложение21"
		ИЛИ ИмяТекРаздела = "Приложение22" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы (немногостраничные, немногострочные).
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный"
		И ИмяТекРаздела <> "Приложение21"
		И ИмяТекРаздела <> "Приложение22" Тогда
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение22" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОчиститьОтчетЗавершение", ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
			ЭтаФорма, "ОчиститьВесьОтчет", ОписаниеОповещения);
	Иначе
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
			ЭтаФорма, "ОчиститьВесьОтчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДеревоРазделовВФормеОтчета(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	Иначе
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Модифицированность = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
		
		ДобавитьСтраницуВПриложение21НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение22" Тогда
		
		Родитель22 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя22 = Родитель22.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВПриложение22НаСервере(НомСтраницыРодителя22);
		
	Иначе
		
		ВставитьДополнительнуюСтраницуНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВПриложение21НаСервере()
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	// Ур. 0.
	ВеткаПриложение21 = ДеревоДанныхПриложение21.Строки.Добавить();
	ВеткаПриложение21.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаПриложение22 = ВеткаПриложение21.Строки.Добавить();
	ВеткаПриложение22.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхПриложение21.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаПриложение21 = ДеревоДанныхПриложение21.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаПриложение21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Приложение22"));
	ВеткаПриложение22.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Приложение21"));
	ВеткаПриложение21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница5 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВПриложение22НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	// Ур. 0.
	ВеткаПриложение21 = ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаПриложение22 = ВеткаПриложение21.Строки.Добавить();
	ВеткаПриложение22.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаПриложение22 = ДеревоДанныхПриложение21.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаПриложение22.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы,
		СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Приложение22"));
	
	// Установка кода вида подакцизного товара родительской страницы Раздела 1 Приложения 2.
	ТабличныйДокумент.Области["П001020011003"].Значение = СокрЛП(ВеткаПриложение21.Данные["П001020001003"]);
	
	ВеткаПриложение22.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница21 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаПриложения21 = НайденнаяСтраница21;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница22 Из ТекСтраницаПриложения21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница22.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница22.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел2" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000230000102, Лев(ОбластьИмя, 13)) > 0) Тогда
				// По коду показателя 40001 отражается положительная разница между
				// итоговой суммой акциза по всем строкам графы 4 всех листов подраздела 2.1 и
				// итоговой суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
				
				// По коду показателя 40002 отражается отрицательная разница (без знака "минус") между
				// итоговой суммой акциза по всем строкам графы 4 всех листов подраздела 2.1 и
				// итоговой суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
				
				ИтогСумма_Разд21_Гр4 = 0;
				Инд = 1;
				Пока Форма.ТабличныйДокумент.Области.Найти("П000210000104_" + Формат(Инд, "ЧГ=")) <> Неопределено Цикл
					ИтогСумма_Разд21_Гр4 = ИтогСумма_Разд21_Гр4
						+ Форма.ТабличныйДокумент.Области["П000210000104_" + Формат(Инд, "ЧГ=")].Значение;
					Инд = Инд + 1;
				КонецЦикла;
				
				ИтогСумма_Разд22_Гр3 = 0;
				Инд = 1;
				Пока Форма.ТабличныйДокумент.Области.Найти("П000220000103_" + Формат(Инд, "ЧГ=")) <> Неопределено Цикл
					ИтогСумма_Разд22_Гр3 = ИтогСумма_Разд22_Гр3
						+ Форма.ТабличныйДокумент.Области["П000220000103_" + Формат(Инд, "ЧГ=")].Значение;
					Инд = Инд + 1;
				КонецЦикла;
				
				Форма.ТабличныйДокумент.Области["П000230000102"].Значение
					= Макс(ИтогСумма_Разд21_Гр4 - ИтогСумма_Разд22_Гр3, 0);
				Форма.ТабличныйДокумент.Области["П000230000202"].Значение
					= Макс(ИтогСумма_Разд22_Гр3 - ИтогСумма_Разд21_Гр4, 0);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
			
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел33" Тогда
		
		// Стр. 110(3) = стр. 080(3) - стр. 090(3).
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330011003, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000330011003.Значение
					= Форма.ТабличныйДокумент.Области.П000330008003.Значение
					- Форма.ТабличныйДокумент.Области.П000330009003.Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
		// Стр. 110(4) = стр. 080(4) - стр. 090(4).
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330011004, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000330011004.Значение
					= Форма.ТабличныйДокумент.Области.П000330008004.Значение
					- Форма.ТабличныйДокумент.Области.П000330009004.Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
		// Стр. 140(4) = стр. 060(4) - стр. 130(4).
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000330014004, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000330014004.Значение
					= Форма.ТабличныйДокумент.Области.П000330006004.Значение
					- Форма.ТабличныйДокумент.Области.П000330013004.Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение1" Тогда
		
		// Графа(4) = графа(2) * графа(3) / 100.
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001010000104, Лев(ОбластьИмя, 13)) > 0) Тогда
				Постфикс = Сред(ОбластьИмя, 14);
				Форма.ТабличныйДокумент.Области["П001010000104" + Постфикс].Значение
					= Форма.ТабличныйДокумент.Области["П001010000102" + Постфикс].Значение
					* Форма.ТабличныйДокумент.Области["П001010000103" + Постфикс].Значение
					/ 100;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВСтруктуре(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВСтруктуре(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение21" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020008004, ОбластьИмя) > 0) Тогда
				// Стр. 080(4) = стр. 060(4) + стр. 070(4).
				Форма.ТабличныйДокумент.Области.П001020008004.Значение
					= Форма.ТабличныйДокумент.Области.П001020006004.Значение
					+ Форма.ТабличныйДокумент.Области.П001020007004.Значение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020010004, ОбластьИмя) > 0) Тогда
				// Стр. 100(4) = стр. 040(4) - стр. 080(4).
				Форма.ТабличныйДокумент.Области.П001020010004.Значение
					= Форма.ТабличныйДокумент.Области.П001020004004.Значение
					- Форма.ТабличныйДокумент.Области.П001020008004.Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение22" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020020003, ОбластьИмя) > 0) Тогда
				// Стр. 200(3) = стр. 180(3) + стр. 190(3).
				Форма.ТабличныйДокумент.Области.П001020020003.Значение
					= Форма.ТабличныйДокумент.Области.П001020018003.Значение
					+ Форма.ТабличныйДокумент.Области.П001020019003.Значение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П001020020004, ОбластьИмя) > 0) Тогда
				// Стр. 200(4) = стр. 180(4) + стр. 190(4).
				Форма.ТабличныйДокумент.Области.П001020020004.Значение
					= Форма.ТабличныйДокумент.Области.П001020018004.Значение
					+ Форма.ТабличныйДокумент.Области.П001020019004.Значение;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Приложение6"
	 ИЛИ ИмяРаздела = "Приложение7"
	 ИЛИ ИмяРаздела = "Приложение8" Тогда
		
		РасчетВСтруктуре(Форма, ИмяРаздела);
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Приложение8");
		Расчет(Форма, "Приложение7");
		Расчет(Форма, "Приложение6");
		Расчет(Форма, "Приложение22");
		Расчет(Форма, "Приложение21");
		Расчет(Форма, "Приложение1");
		Расчет(Форма, "Раздел33");
		Расчет(Форма, "Раздел2");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста)
	
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		
		Если ИмяЛиста = "Раздел2" Тогда
			
			ДанныеДопСтрок = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрок = Неопределено) ИЛИ (Тип(ДанныеДопСтрок) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			
			ДанныеДопСтрокПодразд21 = ДанныеДопСтрок.П0002100001;
			ДанныеДопСтрокПодразд22 = ДанныеДопСтрок.П0002200001;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд21.Количество() Цикл
					ДопСтрокаПодразд21 = ДанныеДопСтрокПодразд21[НомДопСтроки - 1];
					ДопСтрокаПодразд21.П000210000104
						= Форма.ТабличныйДокумент.Области["П000210000104_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд22.Количество() Цикл
					ДопСтрокаПодразд22 = ДанныеДопСтрокПодразд22[НомДопСтроки - 1];
					ДопСтрокаПодразд22.П000220000103
						= Форма.ТабличныйДокумент.Области["П000220000103_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
			КонецЕсли;
			
			ИтогСумма_Разд21_Гр4 = 0;
			Для каждого ДопСтрокаПодразд21 Из ДанныеДопСтрокПодразд21 Цикл
				ИтогСумма_Разд21_Гр4 = ИтогСумма_Разд21_Гр4 + ДопСтрокаПодразд21.П000210000104;
			КонецЦикла;
			ИтогСумма_Разд22_Гр3 = 0;
			Для каждого ДопСтрокаПодразд22 Из ДанныеДопСтрокПодразд22 Цикл
				ИтогСумма_Разд22_Гр3 = ИтогСумма_Разд22_Гр3 + ДопСтрокаПодразд22.П000220000103;
			КонецЦикла;
			
			// По коду показателя 40001 отражается положительная разница между
			// итоговой суммой акциза по всем строкам графы 4 всех листов подраздела 2.1 и итоговой
			// суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
			Данные.П000230000102 = Макс(ИтогСумма_Разд21_Гр4 - ИтогСумма_Разд22_Гр3, 0);
			
			// По коду показателя 40002 отражается отрицательная разница (без знака "минус") между
			// итоговой суммой акциза по всем строкам графы 4 всех листов подраздела 2.1 и итоговой
			// суммой акциза, подлежащей вычету, по всем строкам графы 3 всех листов подраздела 2.2.
			Данные.П000230000202 = Макс(ИтогСумма_Разд22_Гр3 - ИтогСумма_Разд21_Гр4, 0);
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Форма.ТабличныйДокумент.Области["П000230000102"].Значение = Данные.П000230000102;
				Форма.ТабличныйДокумент.Области["П000230000202"].Значение = Данные.П000230000202;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Раздел33" Тогда
			
			// Стр. 110(3) = стр. 080(3) - стр. 090(3).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000330011003.Значение
					= Форма.ТабличныйДокумент.Области.П000330008003.Значение
					- Форма.ТабличныйДокумент.Области.П000330009003.Значение;
				Данные.Вставить("П000330011003", Форма.ТабличныйДокумент.Области.П000330011003.Значение);
			Иначе
				Данные.Вставить("П000330011003",
					Данные.П000330008003 - Данные.П000330009003);
			КонецЕсли;
			
			// Стр. 110(4) = стр. 080(4) - стр. 090(4).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000330011004.Значение
					= Форма.ТабличныйДокумент.Области.П000330008004.Значение
					- Форма.ТабличныйДокумент.Области.П000330009004.Значение;
				Данные.Вставить("П000330011004", Форма.ТабличныйДокумент.Области.П000330011004.Значение);
			Иначе
				Данные.Вставить("П000330011004",
					Данные.П000330008004 - Данные.П000330009004);
			КонецЕсли;
			
			// Стр. 140(4) = стр. 060(4) - стр. 130(4).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000330014004.Значение
					= Форма.ТабличныйДокумент.Области.П000330006004.Значение
					- Форма.ТабличныйДокумент.Области.П000330013004.Значение;
				Данные.Вставить("П000330014004", Форма.ТабличныйДокумент.Области.П000330014004.Значение);
			Иначе
				Данные.Вставить("П000330014004",
					Данные.П000330006004 - Данные.П000330013004);
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение1" Тогда
			
			// Графа 4 = графа 2 * графа 3 / 100 (для каждой строки).
			ДанныеДопСтрокПрил1 = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрокПрил1 = Неопределено)
				ИЛИ (Тип(ДанныеДопСтрокПрил1) <> Тип("ДанныеФормыКоллекция")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПрил1.Количество() Цикл
					ДопСтрокаПрил1 = ДанныеДопСтрокПрил1[НомДопСтроки - 1];
					ДопСтрокаПрил1.П001010000102
						= Форма.ТабличныйДокумент.Области["П001010000102_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
					ДопСтрокаПрил1.П001010000103
						= Форма.ТабличныйДокумент.Области["П001010000103_" + Формат(НомДопСтроки, "ЧГ=")].Значение;
				КонецЦикла;
			КонецЕсли;
			
			Для каждого ДопСтрокаПрил1 Из ДанныеДопСтрокПрил1 Цикл
				ДопСтрокаПрил1.П001010000104
					= ДопСтрокаПрил1.П001010000102 * ДопСтрокаПрил1.П001010000103 / 100;
			КонецЦикла;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПрил1.Количество() Цикл
					Форма.ТабличныйДокумент.Области["П001010000104_" + Формат(НомДопСтроки, "ЧГ=")].Значение
						= ДанныеДопСтрокПрил1[НомДопСтроки - 1].П001010000104;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение6" Тогда
			
			// Стр. 150 = стр. 070 + стр. 090 - стр. 110 - стр. 130.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001060015003.Значение
					= Форма.ТабличныйДокумент.Области.П001060007003.Значение
					+ Форма.ТабличныйДокумент.Области.П001060009003.Значение
					- Форма.ТабличныйДокумент.Области.П001060011003.Значение
					- Форма.ТабличныйДокумент.Области.П001060013003.Значение;
				Данные.Вставить("П001060015003", Форма.ТабличныйДокумент.Области.П001060015003.Значение);
			Иначе
				Данные.Вставить("П001060015003",
					Данные.П001060007003 + Данные.П001060009003 - Данные.П001060011003 - Данные.П001060013003);
			КонецЕсли;
			
			// Стр. 160 = стр. 080 + стр. 100 - стр. 120 - стр. 140.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001060016003.Значение
					= Форма.ТабличныйДокумент.Области.П001060008003.Значение
					+ Форма.ТабличныйДокумент.Области.П001060010003.Значение
					- Форма.ТабличныйДокумент.Области.П001060012003.Значение
					- Форма.ТабличныйДокумент.Области.П001060014003.Значение;
				Данные.Вставить("П001060016003", Форма.ТабличныйДокумент.Области.П001060016003.Значение);
			Иначе
				Данные.Вставить("П001060016003",
					Данные.П001060008003 + Данные.П001060010003 - Данные.П001060012003 - Данные.П001060014003);
			КонецЕсли;
			
			// Стр. 190(3) = стр. 170.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001060019003.Значение
					= Форма.ТабличныйДокумент.Области.П001060017003.Значение;
				Данные.Вставить("П001060019003", Форма.ТабличныйДокумент.Области.П001060019003.Значение);
			Иначе
				Данные.Вставить("П001060019003", Данные.П001060017003);
			КонецЕсли;
			
			// Стр. 190(5) = стр. 190(3) * 190(4) / 100.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001060019005.Значение
					= Форма.ТабличныйДокумент.Области.П001060019003.Значение
					* Форма.ТабличныйДокумент.Области.П001060019004.Значение / 100;
				Данные.Вставить("П001060019005", Форма.ТабличныйДокумент.Области.П001060019005.Значение);
			Иначе
				Данные.Вставить("П001060019005",
					Данные.П001060019003 * Данные.П001060019004 / 100);
			КонецЕсли;
			
			// Стр. 230 = стр. 190(5) - стр. 210.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001060023003.Значение
					= Форма.ТабличныйДокумент.Области.П001060019005.Значение
					- Форма.ТабличныйДокумент.Области.П001060021003.Значение;
				Данные.Вставить("П001060023003", Форма.ТабличныйДокумент.Области.П001060023003.Значение);
			Иначе
				Данные.Вставить("П001060023003",
					Данные.П001060019005 - Данные.П001060021003);
			КонецЕсли;
			
			// Стр. 240 = стр. 200 - стр. 220.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001060024003.Значение
					= Форма.ТабличныйДокумент.Области.П001060020003.Значение
					- Форма.ТабличныйДокумент.Области.П001060022003.Значение;
				Данные.Вставить("П001060024003", Форма.ТабличныйДокумент.Области.П001060024003.Значение);
			Иначе
				Данные.Вставить("П001060024003",
					Данные.П001060020003 - Данные.П001060022003);
			КонецЕсли;
			
			// Стр. 270 = стр. 180 + стр. 260.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001060027003.Значение
					= Форма.ТабличныйДокумент.Области.П001060018003.Значение
					+ Форма.ТабличныйДокумент.Области.П001060026003.Значение;
				Данные.Вставить("П001060027003", Форма.ТабличныйДокумент.Области.П001060027003.Значение);
			Иначе
				Данные.Вставить("П001060027003",
					Данные.П001060018003 + Данные.П001060026003);
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение7" Тогда
			
			// Стр. 180 = стр. 160 + стр. 170.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001070018003.Значение
					= Форма.ТабличныйДокумент.Области.П001070016003.Значение
					+ Форма.ТабличныйДокумент.Области.П001070017003.Значение;
				Данные.Вставить("П001070018003", Форма.ТабличныйДокумент.Области.П001070018003.Значение);
			Иначе
				Данные.Вставить("П001070018003",
					Данные.П001070016003 + Данные.П001070017003);
			КонецЕсли;
			
			// Стр. 190 = стр. 140 - стр. 180.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001070019003.Значение
					= Форма.ТабличныйДокумент.Области.П001070014003.Значение
					- Форма.ТабличныйДокумент.Области.П001070018003.Значение;
				Данные.Вставить("П001070019003", Форма.ТабличныйДокумент.Области.П001070019003.Значение);
			Иначе
				Данные.Вставить("П001070019003",
					Данные.П001070014003 - Данные.П001070018003);
			КонецЕсли;
			
		ИначеЕсли ИмяЛиста = "Приложение8" Тогда
			
			// Стр. 150(3) = стр. 210(3) + стр. 220(3).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001080015003.Значение
					= Форма.ТабличныйДокумент.Области.П001080021003.Значение
					+ Форма.ТабличныйДокумент.Области.П001080022003.Значение;
				Данные.Вставить("П001080015003", Форма.ТабличныйДокумент.Области.П001080015003.Значение);
			Иначе
				Данные.Вставить("П001080015003",
					Данные.П001080021003 + Данные.П001080022003);
			КонецЕсли;
			
			// Стр. 150(4) = стр. 210(4) + стр. 220(4).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001080015004.Значение
					= Форма.ТабличныйДокумент.Области.П001080021004.Значение
					+ Форма.ТабличныйДокумент.Области.П001080022004.Значение;
				Данные.Вставить("П001080015004", Форма.ТабличныйДокумент.Области.П001080015004.Значение);
			Иначе
				Данные.Вставить("П001080015004",
					Данные.П001080021004 + Данные.П001080022004);
			КонецЕсли;
			
			// Стр. 160(3) = стр. 240(3) + стр. 250(3).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001080016003.Значение
					= Форма.ТабличныйДокумент.Области.П001080024003.Значение
					+ Форма.ТабличныйДокумент.Области.П001080025003.Значение;
				Данные.Вставить("П001080016003", Форма.ТабличныйДокумент.Области.П001080016003.Значение);
			Иначе
				Данные.Вставить("П001080016003",
					Данные.П001080024003 + Данные.П001080025003);
			КонецЕсли;
			
			// Стр. 160(4) = стр. 240(4) + стр. 250(4).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001080016004.Значение
					= Форма.ТабличныйДокумент.Области.П001080024004.Значение
					+ Форма.ТабличныйДокумент.Области.П001080025004.Значение;
				Данные.Вставить("П001080016004", Форма.ТабличныйДокумент.Области.П001080016004.Значение);
			Иначе
				Данные.Вставить("П001080016004",
					Данные.П001080024004 + Данные.П001080025004);
			КонецЕсли;
			
			// Стр. 170(3) = стр. 150(3) + стр. 160(3).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001080017003.Значение
					= Форма.ТабличныйДокумент.Области.П001080015003.Значение
					+ Форма.ТабличныйДокумент.Области.П001080016003.Значение;
				Данные.Вставить("П001080017003", Форма.ТабличныйДокумент.Области.П001080017003.Значение);
			Иначе
				Данные.Вставить("П001080017003",
					Данные.П001080015003 + Данные.П001080016003);
			КонецЕсли;
			
			// Стр. 170(4) = стр. 150(4) + стр. 160(4).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001080017004.Значение
					= Форма.ТабличныйДокумент.Области.П001080015004.Значение
					+ Форма.ТабличныйДокумент.Области.П001080016004.Значение;
				Данные.Вставить("П001080017004", Форма.ТабличныйДокумент.Области.П001080017004.Значение);
			Иначе
				Данные.Вставить("П001080017004",
					Данные.П001080015004 + Данные.П001080016004);
			КонецЕсли;
			
			// Стр. 180(4) = стр. 140 - стр. 170(4).
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П001080018004.Значение
					= Форма.ТабличныйДокумент.Области.П001080014003.Значение
					- Форма.ТабличныйДокумент.Области.П001080017004.Значение;
				Данные.Вставить("П001080018004", Форма.ТабличныйДокумент.Области.П001080018004.Значение);
			Иначе
				Данные.Вставить("П001080018004",
					Данные.П001080014003 - Данные.П001080017004);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Приложение21" Тогда
		
		ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхПриложение21.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаПриложение21 Из ДеревоДанныхПриложение21.Строки Цикл
			
			Если ВеткаПриложение21 = АктивнаяВеткаДереваЗначений Тогда
				ВеткаПриложение21.Данные.Вставить("П001020004004",
					Форма.ТабличныйДокумент.Области["П001020004004"].Значение);
				ВеткаПриложение21.Данные.Вставить("П001020006004",
					Форма.ТабличныйДокумент.Области["П001020006004"].Значение);
				ВеткаПриложение21.Данные.Вставить("П001020007004",
					Форма.ТабличныйДокумент.Области["П001020007004"].Значение);
			КонецЕсли;
			
			ВеткаПриложение21.Данные.Вставить("П001020008004",
				ВеткаПриложение21.Данные.П001020006004 + ВеткаПриложение21.Данные.П001020007004);
			ВеткаПриложение21.Данные.Вставить("П001020010004",
				ВеткаПриложение21.Данные.П001020004004 - ВеткаПриложение21.Данные.П001020008004);
			
			Если ВеткаПриложение21 = АктивнаяВеткаДереваЗначений Тогда
				Форма.ТабличныйДокумент.Области["П001020008004"].Значение
					= ВеткаПриложение21.Данные.П001020008004;
				Форма.ТабличныйДокумент.Области["П001020010004"].Значение
					= ВеткаПриложение21.Данные.П001020010004;
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяРаздела = "Приложение22" Тогда
		
		ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхПриложение21.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		КонецЕсли;
		
		Для каждого ВеткаПриложение21 Из ДеревоДанныхПриложение21.Строки Цикл
			Для каждого ВеткаПриложение22 Из ВеткаПриложение21.Строки Цикл
				
				Если ВеткаПриложение22 = АктивнаяВеткаДереваЗначений Тогда
					ВеткаПриложение22.Данные.Вставить("П001020018003",
						Форма.ТабличныйДокумент.Области["П001020018003"].Значение);
					ВеткаПриложение22.Данные.Вставить("П001020019003",
						Форма.ТабличныйДокумент.Области["П001020019003"].Значение);
					ВеткаПриложение22.Данные.Вставить("П001020018004",
						Форма.ТабличныйДокумент.Области["П001020018004"].Значение);
					ВеткаПриложение22.Данные.Вставить("П001020019004",
						Форма.ТабличныйДокумент.Области["П001020019004"].Значение);
				КонецЕсли;
				
				ВеткаПриложение22.Данные.Вставить("П001020020003",
					ВеткаПриложение22.Данные.П001020018003 + ВеткаПриложение22.Данные.П001020019003);
				ВеткаПриложение22.Данные.Вставить("П001020020004",
					ВеткаПриложение22.Данные.П001020018004 + ВеткаПриложение22.Данные.П001020019004);
				
				Если ВеткаПриложение22 = АктивнаяВеткаДереваЗначений Тогда
					Форма.ТабличныйДокумент.Области["П001020020003"].Значение
						= ВеткаПриложение22.Данные.П001020020003;
					Форма.ТабличныйДокумент.Области["П001020020004"].Значение
						= ВеткаПриложение22.Данные.П001020020004;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	Перем ТаблицаСтраницРаздела;
	
	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];
	
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];
	
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);
		
		// Очищаем редактируемые ячейки удаляемой страницы.
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);
		
		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];
			
			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
				
				// Предварительно проверим, содержит ли страница многострочные части
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;
				
				Если ДанныеДопСтрокРаздела <> Неопределено Тогда
					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
						
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
						
						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						// Выводим в табличный документ строки многострочной группы.
						ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;
			
			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;
				
				Попытка
					Форма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;
		
		Расчет(Форма, ИмяТекущейСтраницыПанели);
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		УдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		
		ЭлементыДанныхФормыДерево = ТекущиеДанные.ПолучитьЭлементы();
		ИмяКолонки = "КолонкаНомерСтраницыРазделаОтчета";
		ИскомоеЗначение = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
		ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
		Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
			ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
			Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
				ТекущаяСтраницаРазделаПослеУдаления = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуПриложение21НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение22" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуПриложение22НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	Иначе
		
		УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
		НомерСтраницы = 1;
		Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
			СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЦикла;
		Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
		КонецЕсли;
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуПриложение21НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	КолСтраницПриложение21 = ДеревоДанныхПриложение21.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницПриложение21, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхПриложение21.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница21 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Приложение21", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуПриложение22НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхПриложение21 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	КолСтраницПриложение22 = ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницПриложение22, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхПриложение21.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхПриложение21, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденноеПриложение21 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденноеПриложение21.КолонкаРазделыОтчетаСокрНаим = "Приложение21" Тогда
			Для каждого НайденнаяСтраница21 Из НайденноеПриложение21.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаПриложения21 = НайденнаяСтраница21;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница22 Из ТекСтраницаПриложения21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница22.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница22.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Приложение22", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;
	
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;
		
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		
	Иначе
		
		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана. Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
		Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(
		Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(
		ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы,
		НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(
				НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки,
				НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк.
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(
					ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(
					ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;
	
	Если ИмяТекущейСтраницы = "Раздел11" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы11;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел12" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	ИначеЕсли ИмяТекущейСтраницы = "Приложение1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы101;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение31" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы131;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение32" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы132;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение4" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы104;
	ИначеЕсли ИмяТекущейСтраницы = "Приложение5" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы105;
	КонецЕсли;
	
	Возврат ИмяГруппы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)
	
	ИмяГруппы = Лев(ИмяПоказателя, 11);
	
	СтруктураГруппы = Неопределено;
	
	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// Предварительно обновим структуру многострочных разделов.
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// Номер строки многострочного раздела определим по имени выделенной ячейки.
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// Удаляется добавленная строка.
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойЯчейки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		// Область первой ячейки удаляемой строки многострочного раздела.
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(
			Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// Номера строк удаляемой области.
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(
			ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// Обновим имена ячеек сдвинутых строк.
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр, "ЧГ=");
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + Формат(НСтр - 1, "ЧГ=");
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(
								ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// Обновляем порядковый номер строки.
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// Обновляем значение элемента таблицы значений.
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновляем структуру многострочного раздела.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// Строка не удаляется в форме табличного документа, должен осуществляться сдвиг строк.
		// Обновляем структуру многострочного раздела: удаляем выбранную строку и добавляем пустую строку.
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// Обновляем порядковые номера строк, выводимых в табличный документ.
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки            = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// Обновляем порядковый номер строки.
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Обновляем экранную форму табличного документа.
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	
	// Назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае.
	
	// Определяем текущую область таблицы.
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "10_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
			УдалятьсяВсеДопЭкземпляры = Истина;
		Иначе
			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(
		ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
	
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(
		"ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобратьДанные(ИмяОбласти)
	
	Если СтрЧислоВхождений(ИмяОбласти, "Строки010Раздела24") > 0 Тогда
		СформироватьСтроки010Раздела24(
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "Раздел25") > 0 Тогда
		СформироватьРаздел25(
			Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "Раздел31") > 0 Тогда
		СформироватьРаздел31();
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "Раздел32") > 0 Тогда
		СформироватьРаздел32();
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "Раздел33") > 0 Тогда
		СформироватьРаздел33();
	ИначеЕсли СтрЧислоВхождений(ИмяОбласти, "Приложение21") > 0 Тогда
		СформироватьПриложение21();
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Приложение21" Тогда
		Если ЭтаФорма["ТаблицаСтраницы"
			+ СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() > 0 Тогда
			Для Каждого Область Из ТабличныйДокумент.Области Цикл
				Если СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 Тогда
					Если ЭтаФорма["ТаблицаСтраницы"
						+ СтруктураРеквизитовФормы.НаимТекущегоРаздела].Количество() = 1 Тогда
						Область.Текст = "";
						Область.Гиперссылка = Ложь;
					Иначе
						Если СтрЧислоВхождений(Область.Имя, "Значок") > 0 Тогда
							Область.Текст = "х";
						Иначе
							Область.Текст = "Удалить страницу";
						КонецЕсли;
						Область.Гиперссылка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтроки010Раздела24(НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ТекСтраницаРаздела2 = ТаблицаСтраницыРаздел2[НомерСтраницыРазделаОтчета - 1];
	
	СтруктураДанныхДопСтрокРаздела = ТекСтраницаРаздела2.ДанныеДопСтрок[0].Значение;
	
	ДанныеДопСтрокРаздела24 = Неопределено;
	ДанныеДопСтрок010Раздела24 = Неопределено;
	Если СтруктураДанныхДопСтрокРаздела.Свойство("П0002400001", ДанныеДопСтрокРаздела24)
		И СтруктураДанныхДопСтрокРаздела.Свойство("П0002400002", ДанныеДопСтрок010Раздела24) Тогда
		
		ДанныеДопСтрок010Раздела24.Очистить();
		
		ТЗ = ДанныеФормыВЗначение(ДанныеДопСтрокРаздела24, Тип("ТаблицаЗначений"));
		
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20180101' Тогда
			
			КодыПоказателей_2ХХХХ = СтрРазделить("20003,20009,20011,20013,20015", ",", Ложь);
			КодыПоказателей_5ХХХХ = СтрРазделить("50001,50006,50007", ",", Ложь);
			
			Для каждого СтрокаТЗ Из ТЗ Цикл
				КодПок = СокрЛП(СтрокаТЗ.П000240000101);
				Если КодыПоказателей_2ХХХХ.Найти(КодПок) <> Неопределено Тогда
					СтрокаТЗ.П000240000101 = "2ХХХХ";
				ИначеЕсли КодыПоказателей_5ХХХХ.Найти(КодПок) <> Неопределено Тогда
					СтрокаТЗ.П000240000101 = "5ХХХХ";
				КонецЕсли;
			КонецЦикла;
			
			ТЗ.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
			Для каждого СтрокаТЗ Из ТЗ Цикл
				Если СокрЛП(СтрокаТЗ.П000240000101) = "2ХХХХ"
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000104)
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000105) Тогда
					Превышение = 0;
					МассивСтрок_5ХХХХ = ТЗ.НайтиСтроки(Новый Структура(
					"П000240000101,П000240000104,П000240000105",
					"5ХХХХ", СтрокаТЗ.П000240000104, СтрокаТЗ.П000240000105));
					Если МассивСтрок_5ХХХХ.Количество() > 0 Тогда
						ТЗ_5ХХХХ = ТЗ.Скопировать(МассивСтрок_5ХХХХ);
						ТЗ_5ХХХХ.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
						Превышение = Макс(СтрокаТЗ.П000240000103 - ТЗ_5ХХХХ[0].П000240000103, 0);
					Иначе
						Превышение = СтрокаТЗ.П000240000103;
					КонецЕсли;
					НовСтрока010 = ДанныеДопСтрок010Раздела24.Добавить();
					НовСтрока010.П000240000201 = Превышение;
					НовСтрока010.П000240000202 = СтрокаТЗ.П000240000104;
					НовСтрока010.П000240000203 = СтрокаТЗ.П000240000105;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ТЗ.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
			Для каждого СтрокаТЗ Из ТЗ Цикл
				Если СокрЛП(СтрокаТЗ.П000240000101) = "20003"
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000104)
					И ЗначениеЗаполнено(СтрокаТЗ.П000240000105) Тогда
					Превышение = 0;
					МассивСтрок_50001 = ТЗ.НайтиСтроки(Новый Структура(
					"П000240000101,П000240000104,П000240000105",
					"50001", СтрокаТЗ.П000240000104, СтрокаТЗ.П000240000105));
					Если МассивСтрок_50001.Количество() > 0 Тогда
						ТЗ_50001 = ТЗ.Скопировать(МассивСтрок_50001);
						ТЗ_50001.Свернуть("П000240000101,П000240000104,П000240000105", "П000240000103");
						Превышение = Макс(СтрокаТЗ.П000240000103 - ТЗ_50001[0].П000240000103, 0);
					Иначе
						Превышение = СтрокаТЗ.П000240000103;
					КонецЕсли;
					НовСтрока010 = ДанныеДопСтрок010Раздела24.Добавить();
					НовСтрока010.П000240000201 = Превышение;
					НовСтрока010.П000240000202 = СтрокаТЗ.П000240000104;
					НовСтрока010.П000240000203 = СтрокаТЗ.П000240000105;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДопСтрок010Раздела24.Количество() = 0 Тогда
		ДанныеДопСтрок010Раздела24.Добавить();
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "П000240000201_1";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел25(НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ТекСтраницаРаздела2 = ТаблицаСтраницыРаздел2[НомерСтраницыРазделаОтчета - 1];
	
	КодВидаПодакцизТовара_Раздел2 = СокрЛП(ТекСтраницаРаздела2.Данные[0].Значение.П000020001003);
	
	Если НЕ ЗначениеЗаполнено(КодВидаПодакцизТовара_Раздел2) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не заполнен код вида подакцизного товара на странице "
			+ НомерСтраницыРазделаОтчета + " Раздела 2.'");
		Сообщение.Сообщить();
		ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
			НомерСтраницыРазделаОтчета);
		СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "П000020001003";
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхДопСтрокРаздела = ТекСтраницаРаздела2.ДанныеДопСтрок[0].Значение;
	
	ДанныеДопСтрокРаздела25 = Неопределено;
	Если СтруктураДанныхДопСтрокРаздела.Свойство("П0002500001", ДанныеДопСтрокРаздела25) Тогда
		
		ТЗ = ДанныеФормыВЗначение(ДанныеДопСтрокРаздела25, Тип("ТаблицаЗначений"));
		ТЗ.Очистить();
		
		Для каждого Страница33 Из ТаблицаСтраницыРаздел33 Цикл
			КодВидаПодакцизПродукции_Раздел33 = СокрЛП(Страница33.Данные[0].Значение.П000330001003);
			Если КодВидаПодакцизПродукции_Раздел33 = КодВидаПодакцизТовара_Раздел2 Тогда
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.П000250000101 = "20001";
				СтрокаТЗ.П000250000102 = Страница33.Данные[0].Значение.П000330007003;
				СтрокаТЗ.П000250000103 = Страница33.Данные[0].Значение.П000330007004;
				СтрокаТЗ.П000250000104 = "1";
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.П000250000101 = "50003";
				СтрокаТЗ.П000250000102 = Страница33.Данные[0].Значение.П000330009003;
				СтрокаТЗ.П000250000103 = Страница33.Данные[0].Значение.П000330009004;
				СтрокаТЗ.П000250000104 = "1";
			КонецЕсли;
		КонецЦикла;
		
		ДеревоДанныхПрил21 = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
		Для каждого Ветка21 Из ДеревоДанныхПрил21.Строки Цикл
			КодВидаПодакцизТовара_Прил21 = СокрЛП(Ветка21.Данные.П001020001003);
			Если КодВидаПодакцизТовара_Прил21 = КодВидаПодакцизТовара_Раздел2 Тогда
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.П000250000101 = "20001";
				СтрокаТЗ.П000250000102 = Ветка21.Данные.П001020004003;
				СтрокаТЗ.П000250000103 = Ветка21.Данные.П001020004004;
				СтрокаТЗ.П000250000104 = "1";
				СтрокаТЗ = ТЗ.Добавить();
				СтрокаТЗ.П000250000101 = "50003";
				СтрокаТЗ.П000250000102 = Ветка21.Данные.П001020006003;
				СтрокаТЗ.П000250000103 = Ветка21.Данные.П001020006004;
				СтрокаТЗ.П000250000104 = "1";
			КонецЕсли;
		КонецЦикла;
		
		ТЗ.Свернуть("П000250000101,П000250000104", "П000250000102,П000250000103");
		
		ЗначениеВДанныеФормы(ТЗ, ДанныеДопСтрокРаздела25);
		
		Если ДанныеДопСтрокРаздела25.Количество() = 0 Тогда
			ДанныеДопСтрокРаздела25.Добавить();
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.ИмяАктивнойОбластиРаздела2 = "П000250000101_1";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел31()
	
	Перем ТаблСтраницРаздела31;
	Перем ТаблСтраницПриложения6;
	
	Если НЕ (мСтруктураМногостраничныхРазделов.Свойство("Раздел31", ТаблСтраницРаздела31)
		И мСтруктураМногостраничныхРазделов.Свойство("Приложение6", ТаблСтраницПриложения6)) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблСтраницРаздела31   = ЭтаФорма[ТаблСтраницРаздела31];
	ТаблСтраницПриложения6 = ЭтаФорма[ТаблСтраницПриложения6];
	
	// Подготовка Раздела 3.1.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
		КолСтраницРаздел31 = ТаблСтраницРаздела31.Количество();
		Для ОбратныйИндекс = 1 По КолСтраницРаздел31 Цикл
			Инд = КолСтраницРаздел31 - ОбратныйИндекс;
			СтрокаТаблицы = ТаблСтраницРаздела31[Инд];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				Если ТаблСтраницРаздела31.Количество() = 1 Тогда
					// В таблице должно быть не менее одной строки.
					СтрокаТаблицы.АктивнаяСтраница = Истина;
				Иначе
					ТаблСтраницРаздела31.Удалить(СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОчиститьТабличноеПолеНаСервере("Раздел31");
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел31");
	Иначе
		ТаблСтраницРаздела31.Очистить();
		СтрПерваяСтраница = ЭтаФорма.ТаблСтраницРаздела31.Добавить();
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		ЗаполнитьПустыеСтруктурыДанных();
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел31");
	КонецЕсли;
	
	// Промежуточная таблица значений с данными авансовых платежей Приложения 6.
	// Имена колонок таблицы значений соответствуют именам показателей Раздела 3.1.
	ОписаниеТиповСтрока3 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3));
	ОписаниеТиповЧисло11   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 0));
	ОписаниеТиповЧисло13_3 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 3));
	
	ТЗ_АвПл_Прил6 = Новый ТаблицаЗначений;
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310001003", ОписаниеТиповСтрока3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310002003", ОписаниеТиповСтрока3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310003003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310004003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310005003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310006003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310007003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310008003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310009003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310010003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310011003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310012003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310013003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310014003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310015003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310016003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310017003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310018003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310019003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310020003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310021003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310022003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310023003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310024003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил6.Колонки.Добавить("П000310025003", ОписаниеТиповЧисло11);
	
	КолСтраницПриложения6 = ТаблСтраницПриложения6.Количество();
	
	Для Инд = 0 По КолСтраницПриложения6 - 1 Цикл
		СтрокаТЗ = ТЗ_АвПл_Прил6.Добавить();
		СтрокаТЗ.П000310001003 = СокрЛП(ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060004003"]);
		СтрокаТЗ.П000310002003 = СокрЛП(ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060003003"]);
		СтрокаТЗ.П000310003003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060007003"];
		СтрокаТЗ.П000310004003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060008003"];
		СтрокаТЗ.П000310005003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060009003"];
		СтрокаТЗ.П000310006003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060010003"];
		СтрокаТЗ.П000310007003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060011003"];
		СтрокаТЗ.П000310008003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060012003"];
		СтрокаТЗ.П000310009003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060013003"];
		СтрокаТЗ.П000310010003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060014003"];
		СтрокаТЗ.П000310011003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060015003"];
		СтрокаТЗ.П000310012003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060016003"];
		СтрокаТЗ.П000310013003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060017003"];
		СтрокаТЗ.П000310014003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060018003"];
		СтрокаТЗ.П000310015003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060019005"];
		СтрокаТЗ.П000310016003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060020003"];
		СтрокаТЗ.П000310017003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060021003"];
		СтрокаТЗ.П000310018003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060022003"];
		СтрокаТЗ.П000310019003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060023003"];
		СтрокаТЗ.П000310020003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060024003"];
		СтрокаТЗ.П000310021003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060025003"];
		СтрокаТЗ.П000310022003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060027003"];
		СтрокаТЗ.П000310023003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060028003"];
		СтрокаТЗ.П000310024003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060005003"];
		СтрокаТЗ.П000310025003 = ТаблСтраницПриложения6[Инд].Данные[0].Значение["П001060006003"];
	КонецЦикла;
	
	ТЗ_АвПл_Прил6.Свернуть("П000310001003,П000310002003",
	"П000310003003,П000310004003,П000310005003,П000310006003,П000310007003,П000310008003,П000310009003,П000310010003,П000310011003,П000310012003,П000310013003,П000310014003,П000310015003,П000310016003,П000310017003,П000310018003,П000310019003,П000310020003,П000310021003,П000310022003,П000310023003,П000310024003,П000310025003");
	
	// Формирование Раздела 3.2 по данным промежуточной таблицы значений.
	Для Инд = 0 По ТЗ_АвПл_Прил6.Количество() - 1 Цикл
		// Добавление страницы в Раздел 3.2.
		Если Инд <> 0 Тогда
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
				ВставитьДополнительнуюСтраницуНаСервере("Раздел31");
			Иначе
				ВставитьДополнительнуюСтраницуНаСервере("Раздел31", Ложь);
			КонецЕсли;
		КонецЕсли;
		// Заполнение страницы Раздела 3.2 данными.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31" Тогда
			Для каждого Колонка Из ТЗ_АвПл_Прил6.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ТабличныйДокумент.Области[ИмяКолонки].Значение = ТЗ_АвПл_Прил6[Инд][ИмяКолонки];
			КонецЦикла;
		Иначе
			Для каждого ИмяКолонки Из ТЗ_АвПл_Прил6.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ДанныеСтраницыРаздела31 = ТаблСтраницРаздела31[Инд].Данные[0].Значение;
				ДанныеСтраницыРаздела31[ИмяКолонки] = ТЗ_АвПл_Прил6[Инд][ИмяКолонки];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	НайденныйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "Раздел31");
	НайденнаяСтраница = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		НайденныйРаздел.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", 1);
	Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере("Раздел31", 1);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел32()
	
	Перем ТаблСтраницРаздела32;
	Перем ТаблСтраницПриложения7;
	
	Если НЕ (мСтруктураМногостраничныхРазделов.Свойство("Раздел32", ТаблСтраницРаздела32)
		И мСтруктураМногостраничныхРазделов.Свойство("Приложение7", ТаблСтраницПриложения7)) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблСтраницРаздела32   = ЭтаФорма[ТаблСтраницРаздела32];
	ТаблСтраницПриложения7 = ЭтаФорма[ТаблСтраницПриложения7];
	
	// Подготовка Раздела 3.2.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
		КолСтраницРаздел32 = ТаблСтраницРаздела32.Количество();
		Для ОбратныйИндекс = 1 По КолСтраницРаздел32 Цикл
			Инд = КолСтраницРаздел32 - ОбратныйИндекс;
			СтрокаТаблицы = ТаблСтраницРаздела32[Инд];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				Если ТаблСтраницРаздела32.Количество() = 1 Тогда
					// В таблице должно быть не менее одной строки.
					СтрокаТаблицы.АктивнаяСтраница = Истина;
				Иначе
					ТаблСтраницРаздела32.Удалить(СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОчиститьТабличноеПолеНаСервере("Раздел32");
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел32");
	Иначе
		ТаблСтраницРаздела32.Очистить();
		СтрПерваяСтраница = ЭтаФорма.ТаблСтраницРаздела32.Добавить();
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		ЗаполнитьПустыеСтруктурыДанных();
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел32");
	КонецЕсли;
	
	// Промежуточная таблица значений с данными авансовых платежей Приложения 7.
	// Имена колонок таблицы значений соответствуют именам показателей Раздела 3.2.
	ОписаниеТиповСтрока3 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3));
	ОписаниеТиповЧисло4    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0));
	ОписаниеТиповЧисло11   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 0));
	ОписаниеТиповЧисло13_3 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 3));
	
	ТЗ_АвПл_Прил7 = Новый ТаблицаЗначений;
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320001003", ОписаниеТиповСтрока3);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320002003", ОписаниеТиповСтрока3);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320003003", ОписаниеТиповЧисло4);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320004003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320005003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320006003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320007003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320008003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320009003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320010003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320011003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320012003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320013003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил7.Колонки.Добавить("П000320014003", ОписаниеТиповЧисло11);
	
	КолСтраницПриложения7 = ТаблСтраницПриложения7.Количество();
	
	Для Инд = 0 По КолСтраницПриложения7 - 1 Цикл
		СтрокаТЗ = ТЗ_АвПл_Прил7.Добавить();
		СтрокаТЗ.П000320001003 = СокрЛП(ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070004003"]);
		СтрокаТЗ.П000320002003 = СокрЛП(ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070003003"]);
		СтрокаТЗ.П000320003003 = 1;
		СтрокаТЗ.П000320004003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070008003"];
		СтрокаТЗ.П000320005003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070011003"];
		СтрокаТЗ.П000320006003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070012003"];
		СтрокаТЗ.П000320007003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070013003"];
		СтрокаТЗ.П000320008003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070014003"];
		СтрокаТЗ.П000320009003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070015003"];
		СтрокаТЗ.П000320010003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070016003"];
		СтрокаТЗ.П000320011003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070018003"];
		СтрокаТЗ.П000320012003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070019003"];
		СтрокаТЗ.П000320013003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070009003"];
		СтрокаТЗ.П000320014003 = ТаблСтраницПриложения7[Инд].Данные[0].Значение["П001070010003"];
	КонецЦикла;
	
	ТЗ_АвПл_Прил7.Свернуть("П000320001003,П000320002003",
	"П000320003003,П000320004003,П000320005003,П000320006003,П000320007003,П000320008003,П000320009003,П000320010003,П000320011003,П000320012003,П000320013003,П000320014003");
	
	// Формирование Раздела 3.2 по данным промежуточной таблицы значений.
	Для Инд = 0 По ТЗ_АвПл_Прил7.Количество() - 1 Цикл
		// Добавление страницы в Раздел 3.2.
		Если Инд <> 0 Тогда
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
				ВставитьДополнительнуюСтраницуНаСервере("Раздел32");
			Иначе
				ВставитьДополнительнуюСтраницуНаСервере("Раздел32", Ложь);
			КонецЕсли;
		КонецЕсли;
		// Заполнение страницы Раздела 3.2 данными.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел32" Тогда
			Для каждого Колонка Из ТЗ_АвПл_Прил7.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ТабличныйДокумент.Области[ИмяКолонки].Значение = ТЗ_АвПл_Прил7[Инд][ИмяКолонки];
			КонецЦикла;
		Иначе
			Для каждого ИмяКолонки Из ТЗ_АвПл_Прил7.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ДанныеСтраницыРаздела32 = ТаблСтраницРаздела32[Инд].Данные[0].Значение;
				ДанныеСтраницыРаздела32[ИмяКолонки] = ТЗ_АвПл_Прил7[Инд][ИмяКолонки];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	НайденныйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "Раздел32");
	НайденнаяСтраница = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		НайденныйРаздел.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", 1);
	Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере("Раздел32", 1);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРаздел33()
	
	Перем ТаблСтраницРаздела33;
	Перем ТаблСтраницПриложения8;
	
	Если НЕ (мСтруктураМногостраничныхРазделов.Свойство("Раздел33", ТаблСтраницРаздела33)
		И мСтруктураМногостраничныхРазделов.Свойство("Приложение8", ТаблСтраницПриложения8)) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблСтраницРаздела33   = ЭтаФорма[ТаблСтраницРаздела33];
	ТаблСтраницПриложения8 = ЭтаФорма[ТаблСтраницПриложения8];
	
	// Подготовка Раздела 3.3.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел33" Тогда
		КолСтраницРаздел33 = ТаблСтраницРаздела33.Количество();
		Для ОбратныйИндекс = 1 По КолСтраницРаздел33 Цикл
			Инд = КолСтраницРаздел33 - ОбратныйИндекс;
			СтрокаТаблицы = ТаблСтраницРаздела33[Инд];
			Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
				Если ТаблСтраницРаздела33.Количество() = 1 Тогда
					// В таблице должно быть не менее одной строки.
					СтрокаТаблицы.АктивнаяСтраница = Истина;
				Иначе
					ТаблСтраницРаздела33.Удалить(СтрокаТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОчиститьТабличноеПолеНаСервере("Раздел33");
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел33");
	Иначе
		ТаблСтраницРаздела33.Очистить();
		СтрПерваяСтраница = ЭтаФорма.ТаблСтраницРаздела33.Добавить();
		СтрПерваяСтраница.Представление               = "Новая страница";
		СтрПерваяСтраница.АктивнаяСтраница            = Истина;
		СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
		ЗаполнитьПустыеСтруктурыДанных();
		РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма, "Раздел33");
	КонецЕсли;
	
	// Промежуточная таблица значений с данными авансовых платежей Приложения 8.
	// Имена колонок таблицы значений соответствуют именам показателей Раздела 3.3.
	ОписаниеТиповСтрока3 = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3));
	ОписаниеТиповЧисло4    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0));
	ОписаниеТиповЧисло11   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 0));
	ОписаниеТиповЧисло13_3 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(13, 3));
	
	ТЗ_АвПл_Прил8 = Новый ТаблицаЗначений;
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330001003", ОписаниеТиповСтрока3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330002003", ОписаниеТиповСтрока3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330003003", ОписаниеТиповЧисло4);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330004003", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330005003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330005004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330006003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330006004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330007003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330007004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330008003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330008004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330009003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330009004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330010003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330010004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330011003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330011004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330012003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330012004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330013003", ОписаниеТиповЧисло13_3);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330013004", ОписаниеТиповЧисло11);
	ТЗ_АвПл_Прил8.Колонки.Добавить("П000330014004", ОписаниеТиповЧисло11);
	
	КолСтраницПриложения8 = ТаблСтраницПриложения8.Количество();
	
	Для Инд = 0 По КолСтраницПриложения8 - 1 Цикл
		СтрокаТЗ = ТЗ_АвПл_Прил8.Добавить();
		СтрокаТЗ.П000330001003 = СокрЛП(ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080004003"]);
		СтрокаТЗ.П000330002003 = СокрЛП(ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080003003"]);
		СтрокаТЗ.П000330003003 = 1;
		СтрокаТЗ.П000330004003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080008003"];
		СтрокаТЗ.П000330005003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080009003"];
		СтрокаТЗ.П000330005004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080010003"];
		СтрокаТЗ.П000330006003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080013003"];
		СтрокаТЗ.П000330006004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080014003"];
		СтрокаТЗ.П000330007003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080019003"];
		СтрокаТЗ.П000330007004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080019004"];
		СтрокаТЗ.П000330008003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080020003"];
		СтрокаТЗ.П000330008004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080020004"];
		СтрокаТЗ.П000330009003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080021003"];
		СтрокаТЗ.П000330009004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080021004"];
		СтрокаТЗ.П000330010003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080015003"];
		СтрокаТЗ.П000330010004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080015004"];
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			СтрокаТЗ.П000330011003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080023003"];
			СтрокаТЗ.П000330011004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080023004"];
		Иначе
			СтрокаТЗ.П000330011003 = СтрокаТЗ.П000330008003 - СтрокаТЗ.П000330009003;
			СтрокаТЗ.П000330011004 = СтрокаТЗ.П000330008004 - СтрокаТЗ.П000330009004;
		КонецЕсли;
		
		СтрокаТЗ.П000330012003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080016003"];
		СтрокаТЗ.П000330012004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080016004"];
		СтрокаТЗ.П000330013003 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080017003"];
		СтрокаТЗ.П000330013004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080017004"];
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			СтрокаТЗ.П000330014004 = ТаблСтраницПриложения8[Инд].Данные[0].Значение["П001080018004"];
		Иначе
			СтрокаТЗ.П000330014004 = СтрокаТЗ.П000330006004 - СтрокаТЗ.П000330013004;
		КонецЕсли;
		
	КонецЦикла;
	
	ТЗ_АвПл_Прил8.Свернуть("П000330001003,П000330002003",
	"П000330003003,П000330004003,П000330005003,П000330005004,П000330006003,П000330006004,П000330007003,П000330007004,П000330008003,П000330008004,П000330009003,П000330009004,П000330010003,П000330010004,П000330011003,П000330011004,П000330012003,П000330012004,П000330013003,П000330013004,П000330014004");
	
	// Формирование Раздела 3.3 по данным промежуточной таблицы значений.
	Для Инд = 0 По ТЗ_АвПл_Прил8.Количество() - 1 Цикл
		// Добавление страницы в Раздел 3.3.
		Если Инд <> 0 Тогда
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел33" Тогда
				ВставитьДополнительнуюСтраницуНаСервере("Раздел33");
			Иначе
				ВставитьДополнительнуюСтраницуНаСервере("Раздел33", Ложь);
			КонецЕсли;
		КонецЕсли;
		// Заполнение страницы Раздела 3.3 данными.
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел33" Тогда
			Для каждого Колонка Из ТЗ_АвПл_Прил8.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ТабличныйДокумент.Области[ИмяКолонки].Значение = ТЗ_АвПл_Прил8[Инд][ИмяКолонки];
			КонецЦикла;
		Иначе
			Для каждого ИмяКолонки Из ТЗ_АвПл_Прил8.Колонки Цикл
				ИмяКолонки = Колонка.Имя;
				ДанныеСтраницыРаздела33 = ТаблСтраницРаздела33[Инд].Данные[0].Значение;
				ДанныеСтраницыРаздела33[ИмяКолонки] = ТЗ_АвПл_Прил8[Инд][ИмяКолонки];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	НайденныйРаздел = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", "Раздел33");
	НайденнаяСтраница = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
		НайденныйРаздел.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", 1);
	Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере("Раздел33", 1);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПриложение21()
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	ТекВетка21 = ДеревоДанныхРаздела.Строки[(СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1)];
	
	ТекВетка21.Данные["П001020001003"] = ТабличныйДокумент.Области["П001020001003"].Значение;
	
	Для каждого Показатель Из ТекВетка21.Данные Цикл
		Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
			ТекВетка21.Данные[Показатель.Ключ] = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТекВетка21.Данные.Вставить("П001020002003", ТекВетка21.Строки.Количество());
	
	Для каждого Ветка22 Из ТекВетка21.Строки Цикл
		ТекВетка21.Данные.Вставить(
		"П001020003003", ТекВетка21.Данные["П001020003003"] + Ветка22.Данные["П001020015003"]);
		ТекВетка21.Данные.Вставить(
		"П001020004003", ТекВетка21.Данные["П001020004003"] + Ветка22.Данные["П001020016003"]);
		ТекВетка21.Данные.Вставить(
		"П001020004004", ТекВетка21.Данные["П001020004004"] + Ветка22.Данные["П001020016004"]);
		ТекВетка21.Данные.Вставить(
		"П001020005004", ТекВетка21.Данные["П001020005004"] + Ветка22.Данные["П001020017004"]);
		ТекВетка21.Данные.Вставить(
		"П001020006003", ТекВетка21.Данные["П001020006003"] + Ветка22.Данные["П001020018003"]);
		ТекВетка21.Данные.Вставить(
		"П001020006004", ТекВетка21.Данные["П001020006004"] + Ветка22.Данные["П001020018004"]);
		ТекВетка21.Данные.Вставить(
		"П001020007004", ТекВетка21.Данные["П001020007004"] + Ветка22.Данные["П001020019004"]);
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ТекВетка21.Данные.Вставить(
			"П001020008004", ТекВетка21.Данные["П001020008004"] + Ветка22.Данные["П001020020004"]);
		Иначе
			ТекВетка21.Данные.Вставить(
			"П001020008004", ТекВетка21.Данные["П001020006004"] + ТекВетка21.Данные["П001020007004"]);
		КонецЕсли;
		ТекВетка21.Данные.Вставить(
		"П001020009004", ТекВетка21.Данные["П001020009004"] + Ветка22.Данные["П001020021004"]);
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ТекВетка21.Данные.Вставить(
			"П001020010004", ТекВетка21.Данные["П001020010004"] + Ветка22.Данные["П001020022004"]);
		Иначе
			ТекВетка21.Данные.Вставить(
			"П001020010004", ТекВетка21.Данные["П001020004004"] - ТекВетка21.Данные["П001020008004"]);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение21" Тогда
		Для каждого Показатель Из ТекВетка21.Данные Цикл
			ТабличныйДокумент.Области[Показатель.Ключ].Значение = Показатель.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Гиперссылка Тогда
		СобратьДанные(Область.Имя);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя)
			И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения
			= "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД." + Символы.ПС
			+ "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
			+ """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0
			И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + ".'");
			Сообщение.Сообщить();
		КонецЕсли;
	ИначеЕсли Лев(ИмяПоказателя, 13) = "П000240000105"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000240000203"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000260000105"
		ИЛИ ИмяПоказателя = "П001020017006"
		ИЛИ ИмяПоказателя = "П001020018006"
		ИЛИ ИмяПоказателя = "П001020020006"
		ИЛИ ИмяПоказателя = "П001020021006"
		ИЛИ ИмяПоказателя = "П001080020006"
		ИЛИ ИмяПоказателя = "П001080021006"
		ИЛИ ИмяПоказателя = "П001080023006" Тогда
		Если Область.Значение > 0 И Область.Значение < 1000 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна 4.'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Титульный" Тогда
		ЗаполнитьПериодОтчета(ЭтаФорма);
	Иначе
		
		Если Область.Имя = "П001020001003" Тогда
			УстановитьКодВидаПодакцизногоТовараВПодчиненныхРазделах2Приложений2(Область.Значение);
		КонецЕсли;
		
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодВидаПодакцизногоТовараВПодчиненныхРазделах2Приложений2(КодВидаПТ)
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]);
	
	ТекВетка21 = ДеревоДанныхРаздела.Строки[(СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1)];
	Для каждого Ветка22 Из ТекВетка21.Строки Цикл
		Ветка22.Данные.Вставить("П001020011003", КодВидаПТ);
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхПриложение21"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел11.Очистить();
	СтруктураДанныхРаздел12.Очистить();
	
	ТаблицаСтраницыРаздел2.Очистить();
	ТаблицаСтраницыРаздел31.Очистить();
	ТаблицаСтраницыРаздел32.Очистить();
	ТаблицаСтраницыРаздел33.Очистить();
	ТаблицаСтраницыПриложение1.Очистить();
	ТаблицаСтраницыПриложение31.Очистить();
	ТаблицаСтраницыПриложение32.Очистить();
	ТаблицаСтраницыПриложение4.Очистить();
	ТаблицаСтраницыПриложение5.Очистить();
	ТаблицаСтраницыПриложение6.Очистить();
	ТаблицаСтраницыПриложение7.Очистить();
	ТаблицаСтраницыПриложение8.Очистить();
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение21" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение22" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложение22" Тогда
		ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели)
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		ОпредОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
		ОбрабОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
		ОбрабОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
		Если ПустаяСтрока(ОпредОбласть.Значение)
		 ИЛИ ОпредОбласть.Значение = "0" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабОбласть2);
		КонецЕсли;
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			ОпредОбласть1 = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОпредОбласть2 = Форма.ТабличныйДокумент.Области.ПоМесту;
			ОбрабОбласть = Форма.ТабличныйДокумент.Области.НаимОрг;
			Если ЗначениеЗаполнено(ОпредОбласть1.Значение) И ОпредОбласть1.Значение <> "0"
				И (ОпредОбласть2.Значение = "215" ИЛИ ОпредОбласть2.Значение = "216") Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабОбласть);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Приложение21" Тогда
		
		ОбрабОбласть1 = Форма.ТабличныйДокумент.Области["П001020008004"];
		ОбрабОбласть2 = Форма.ТабличныйДокумент.Области["П001020010004"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабОбласть1.Защита   = Ложь;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			ОбрабОбласть2.Защита   = Ложь;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабОбласть1.Защита   = Истина;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			ОбрабОбласть2.Защита   = Истина;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Приложение22" Тогда
		
		ОбрабОбласть = Форма.ТабличныйДокумент.Области["П001020011003"];
		ЗапретитьВводДанныхВОбласть(Форма, ОбрабОбласть, Ложь);
		
		ОбрабОбласть1 = Форма.ТабличныйДокумент.Области["П001020020003"];
		ОбрабОбласть2 = Форма.ТабличныйДокумент.Области["П001020020004"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабОбласть1.Защита   = Ложь;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			ОбрабОбласть2.Защита   = Ложь;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабОбласть1.Защита   = Истина;
			ОбрабОбласть1.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			ОбрабОбласть2.Защита   = Истина;
			ОбрабОбласть2.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт
	
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку11" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы11;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку12" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы12;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку21" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы21;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку22" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы22;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку241" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы241;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку242" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы242;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку25" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы25;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку26" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы26;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку101" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы101;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку131" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы131;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку132" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы132;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку104" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы104;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку105" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы105;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 
			И ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции