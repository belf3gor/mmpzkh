&НаСервере
Перем мОбъектОтчета;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов  = Новый Структура;
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	ЦветЗаполняетсяТолькоВручную    = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир    = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика   = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяВсегдаВручную    = Новый Цвет(255, 255, 192);
	ЦветНеЗаполняется    			= Новый Цвет(255, 255, 255);
	
	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяВсегдаВручную);
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветНеЗаполняется);
	
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс = Новый Массив;
	// Вычитаемые показатели, в показателях отчета хранятся со знаком "-", при выгрузке должны быть положительными.
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100132006");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100212005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100221005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100222005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100233005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100235005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П000100241005");
	// Виртуальные вычитаемые многострочные показатели.
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100132006");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100212005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100221005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100222005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100233005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100235005");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241004");
	СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс.Добавить("П200100241005");
	
	СтруктураДанныхБаланс              = Новый Структура;
	СтруктураДанныхФормаОтчета         = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "25/01/2012";
	
	СтруктураРеквизитовФормы.ИмяМакетаССоставомПоказателей    = "СоставПоказателей2011Кв3";
	СтруктураРеквизитовФормы.ИмяМакетаНастроекСоставаДопСтрок = "НастройкаСоставаПоказателей2011Кв3";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	СтруктураРеквизитовФормы.СпособСозданияОрганизации = Параметры.СпособСозданияОрганизации;
	СтруктураРеквизитовФормы.ДатаСозданияОрганизации   = Параметры.ДатаСозданияОрганизации;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	

	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");

	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
	КонецЕсли;
	
	Если Область.Имя = "НастройкаСоставаСтрок" Тогда 
		НастроитьСтроки(Неопределено);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "ВидОтчетности" Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("1", "Обычная");
		Периоды.Добавить("2", "Промежуточная при ликвидации/реорганизации");
		Периоды.Добавить("3", "Ликвидационная");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаВидОтчетностиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		Модифицированность = Истина;
		Возврат;
	ИначеЕсли Область.Имя = "ОргПочтАдрес" Тогда

		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ПолныйАдрЮР, ПолныйАдрПочт");
		
		ТаблицаВыбора.Очистить();
		
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Пустое значение";
		НовСтр.Название = "Адрес не указывается";
		
		Если ЗначениеЗаполнено(Адреса.ПолныйАдрПочт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Почтовый адрес";
			НовСтр.Название = Адреса.ПолныйАдрПочт;
		КонецЕсли;

		Если ЗначениеЗаполнено(Адреса.ПолныйАдрЮР) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Юридический адрес";
			НовСтр.Название = Адреса.ПолныйАдрЮР;
		КонецЕсли;
			
		Если ТаблицаВыбора.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru='В контактной информации юридический и почтовый адрес не указаны.'"));
			Возврат;
		КонецЕсли;

		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
		ПараметрыФормы.Вставить("ТаблицаЗначений",     ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
		ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если НЕ ((Область.Имя = "ОргНазв") ИЛИ (Область.Имя = "ОргКодОКПО") ИЛИ (Область.Имя = "ОргОтрасль")
	 ИЛИ (Область.Имя = "ОргКодОКВЭД") ИЛИ (Область.Имя = "ОргФорма") ИЛИ (Область.Имя = "ОргФормаСобств")
	 ИЛИ (Область.Имя = "ОргКодОКОПФ") ИЛИ (Область.Имя = "ОргКодОКФС") ИЛИ (Область.Имя = "ОргПочтАдрес")
	 ИЛИ (Область.Имя = "ОргДиректор") ИЛИ (Область.Имя = "ОргБухгалтер")) Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	КонецЕсли;
	
	Если Область.Имя = "ДатаПодписиОтчета" Тогда 
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхФормаОтчета.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
			СтруктураРеквизитовФормы,
			ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
			СтруктураРеквизитовФормы,
			ТабличныйДокумент.Области.ОргОтрасль.Значение);
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтроки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДеревоНастроек", ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов[СтруктураРеквизитовФормы.НаимТекущегоРаздела]]);
	
	ФормаНастроек = ПолучитьФорму("Отчет.РегламентированныйОтчетБухОтчетность.Форма.НастройкаРасшифровкиОтдельныхПоказателей", ПараметрыФормы);
	
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей " + ?(СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс", "бухгалтерского баланса", "отчета о прибылях и убытках");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСтрокиЗавершение", ЭтотОбъект);
	
	ФормаНастроек.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроек.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели текущего отчета.%1Продолжить операцию?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                         СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",             СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	Если РазделТекущейОбласти(ЭтаФорма, ТабличныйДокумент.ТекущаяОбласть) = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект,
		Новый Структура("ИмяПоказателя", ИмяПоказателя));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мТипАдреса");
	СтруктураРеквизитовФормы.Вставить("мАдресДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетная");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаКонцаПозапрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериода");
	СтруктураРеквизитовФормы.Вставить("ЗаголовокДатаОтчетногоПериодаПрошлогоГода");
	СтруктураРеквизитовФормы.Вставить("ПериодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("ОтчетныйГодЗагрузкиДанных");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	СтруктураРеквизитовФормы.Вставить("ПрименениеЕНВД");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ИмяМакетаНастроекСоставаДопСтрок");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс11199");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс11299");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс11399");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс11499");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс11599");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс11699");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс11799");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс12199");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс12299");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс12399");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс12499");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс12599");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс12699");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс13199");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс13299");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс13499");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс13599");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс13699");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс13799");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс14199");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс14299");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс14599");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс15199");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс15299");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс15399");
	СтруктураРеквизитовФормы.Вставить("мИдБаланс15599");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02100");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02110");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02120");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02200");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02210");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02220");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02300");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02340");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02350");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02421");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02430");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02450");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета02460");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета21001");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета21002");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета21101");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета21102");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета21201");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета21202");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета22001");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета22002");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета22101");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета22102");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета22201");
	СтруктураРеквизитовФормы.Вставить("мИдФормаОтчета22202");
	СтруктураРеквизитовФормы.Вставить("ИмяМакетаССоставомПоказателей");
	СтруктураРеквизитовФормы.Вставить("ИменаПоказателейСоЗнакомПлюс");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("СпособСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ДатаСозданияОрганизации");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят",  "");
	СтруктураРеквизитовФормы.Вставить("ОснВидДеят2", "");
	
	// Параметр используется для открытия формы длительной операции
	// при автоматическом заполнении отчета при создании.
	//   Значения:
	//     Неопределено - задание не запускалось.
	//     Структура    - параметры запуска и результат.
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
		СтруктураГруппыКоличество = СтруктураГруппы.Количество();
		
		Для НСтр = СтруктураГруппыКоличество + 1 По ИсходноеКоличествоСтрокГруппы Цикл
			СтруктураГруппы.Добавить();
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	// При восстановлении отчета из сохраненных данных необходимо восстановить
	// значение реквизита Организация до того как будут выполняться настройки формы.
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ЗаполнитьЗависимыеНастройки();
	
	ИмяРаздела = "Баланс";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			// Инициализация переменных настройки формы
			СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
			// При создании нового всегда по умолчанию подставляем почтовый адрес организации.
			// Перевыбрать адрес можно на форме отчета.
			СтруктураРеквизитовФормы.мТипАдреса = "ПолныйАдрПочт";
			
			// Заполним настройки состава дополнительных строк по умолчанию.
			СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
		
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	УстановитьЦветФонаЯчейкиНаСервере( , , СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	Если ВидСдачиОтчетности = 1 Тогда 
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
	КонецЕсли;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	УстановитьВидимостьДополнительныхСтрок(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
		
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
    	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ФормаОтчета"; // Отчет о прибылях и убытках
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	// БАЛАНС
	//
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120004", "П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120005", "П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120006", "П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160004", "П000100110004;П000100120004;П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160005", "П000100110005;П000100120005;П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160006", "П000100110006;П000100120006;П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130004", "П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130005", "П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130006", "П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140004", "П000100141004;П000100142004;П000100143004;П000100145004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140005", "П000100141005;П000100142005;П000100143005;П000100145005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140006", "П000100141006;П000100142006;П000100143006;П000100145006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150004", "П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150005", "П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150006", "П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170004", "П000100130004;П000100140004;П000100150004;П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170005", "П000100130005;П000100140005;П000100150005;П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170006", "П000100130006;П000100140006;П000100150006;П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	
	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	//
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210004", "П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210005", "П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220004", "П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220005", "П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230004", "П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230005", "П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240004", "П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240005", "П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100104", "П000102110104;П000102120104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100105", "П000102110105;П000102120105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100204", "П000102110204;П000102120204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100205", "П000102110205;П000102120205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200104", "П000102110104;П000102120104;П000102210104;П000102220104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200105", "П000102110105;П000102120105;П000102210105;П000102220105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200205", "П000102110205;П000102120205;П000102210205;П000102220205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300104", "П000102110104;П000102120104;П000102210104;П000102220104;П000100231004;П000100232004;П000100234004;П000100233004;П000100235004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300105", "П000102110105;П000102120105;П000102210105;П000102220105;П000100231005;П000100232005;П000100234005;П000100233005;П000100235005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300205", "П000102110205;П000102120205;П000102210205;П000102220205");
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	ФормироватьСтруктуруСтраницОтчета();
	
	УстановитьВидСдачиОтчетности(1);
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.ИмяМакетаССоставомПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть = МакетСоставаПоказателей.Области[Инд];
		
		Если ТекОбласть.Имя = "ФормаОтчетаЕНВД" И ИспользуютсяМакетыЕНВД() Тогда
			ИмяСтраницы = "ФормаОтчета";
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаЕНВД" И НЕ ИспользуютсяМакетыЕНВД() Тогда
			Продолжить;
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаНеЕНВД" И НЕ ИспользуютсяМакетыЕНВД() Тогда
			ИмяСтраницы = "ФормаОтчета";
		ИначеЕсли ТекОбласть.Имя = "ФормаОтчетаНеЕНВД" И ИспользуютсяМакетыЕНВД() Тогда
			Продолжить;
		Иначе
			ИмяСтраницы = ТекОбласть.Имя;
		КонецЕсли;
		           		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			// Переопределение варианты заполнения для отдельных показателей
			// отчета движения денежных средств по сведениям до 2010 года
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20110101' Тогда
				// графа 03
				Если КодПоказателя = "П000100411203"
				 ИЛИ КодПоказателя = "П000100411303"
				 ИЛИ КодПоказателя = "П000100412303"
				 ИЛИ КодПоказателя = "П000100412403"
				 ИЛИ КодПоказателя = "П000100421203"
				 ИЛИ КодПоказателя = "П000100422203"
				 ИЛИ КодПоказателя = "П000100431203" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12) < '20110101' Тогда
				// Графа 04
				Если КодПоказателя = "П000100411204"
				 ИЛИ КодПоказателя = "П000100411304"
				 ИЛИ КодПоказателя = "П000100412304"
				 ИЛИ КодПоказателя = "П000100412404"
				 ИЛИ КодПоказателя = "П000100421204"
				 ИЛИ КодПоказателя = "П000100422204"
				 ИЛИ КодПоказателя = "П000100431204" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Переопределение вариантов заполнения строки 2510 и строк расшифровки показателей строки 2510
			// при заполнении промежуточной отчетности
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета <> КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				Если КодПоказателя = "П000100251004"
				 ИЛИ КодПоказателя = "П000100251005"
				 ИЛИ КодПоказателя = "П000102510104"
				 ИЛИ КодПоказателя = "П000102510105"
				 ИЛИ КодПоказателя = "П000102510204"
				 ИЛИ КодПоказателя = "П000102510205" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВОтчетномПериоде Тогда
				Если КодПоказателя = "П000100242104"
				 ИЛИ КодПоказателя = "П000100243004"
				 ИЛИ КодПоказателя = "П000100245004" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВПредыдущемГоду Тогда
				Если КодПоказателя = "П000100242105"
				 ИЛИ КодПоказателя = "П000100243005"
				 ИЛИ КодПоказателя = "П000100245005" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда			
			// имеются автоматически заполняемые ячейки
			
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
	УстановитьВидимостьПолейПоПБУ18();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела)
	Перем СтруктураГруппы;
	
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";

	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";

	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 15; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 6";

	КонецЕсли;
	
	ПоказатьКодЕИ(Форма);
	
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если ТипДанныхПоказателя = "Е" Тогда

			ТекТабличноеПоле = Форма.ТабличныйДокумент;

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				
				// определяем колво строк многострочного раздела
				// и прменяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНастройкиСоставаДополнительныхСтрок(ПеременнаяНастроекСостава)
	
	ПеременнаяНастроекСостава = Новый Структура;
	МакетНастроекПоУмолчанию = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.ИмяМакетаНастроекСоставаДопСтрок);
			
	ОбластьВерсии = МакетНастроекПоУмолчанию.Области["Версия"];
	НаименованиеВерсии = МакетНастроекПоУмолчанию.Область(ОбластьВерсии.Верх, 1).Текст;
	ПеременнаяНастроекСостава.Вставить("Версия", НаименованиеВерсии);
	ПеременнаяНастроекСостава.Вставить("Модифицированность", Ложь); // Настройки по умолчанию не модифицированы
	ПеременнаяНастроекСостава.Вставить("СтруктураСоставов", Новый Структура);
	
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, "Баланс", ДеревоНастроекБаланс);
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, ?(ИспользуютсяМакетыЕНВД(), "ОПУ_ЕНВД", "ОПУ_НеЕНВД"), ДеревоНастроекФормаОтчета);
	
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Баланс", "ДеревоНастроекБаланс");
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("ФормаОтчета", "ДеревоНастроекФормаОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод(НаимТекущегоРаздела)

	Если НаимТекущегоРаздела = "Баланс" Тогда
		
		// Период в заголовке отчета
		Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда 
			СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + "г." ;
		Иначе
			СтруктураРеквизитовФормы.СтрПериодОтчета = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + "г." ;
		КонецЕсли;
		
		//БАЛАНС
		// Период в заголовке баланса
		ТабличныйДокумент.Области.ДатаБаланса.Значение = "на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ "г.";
		
		ДатаКонцаПрошлогоГода 		= Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода 	= Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная 				= "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ "г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода 	= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ "г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ "г.";
		
		ТабличныйДокумент.Области.ДатаОтчетная.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаОтчетная2.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода2.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		
		// Период в списке кодов в форме баланса
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
	ИначеЕсли НаимТекущегоРаздела = "ФормаОтчета" Тогда
		
		//ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		Иначе
			СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + "г.";
		КонецЕсли;  
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		//Заголовки таблиц
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
		
	КолонкаРазделыОтчетаСокрНаим      = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КолонкаНомерСтраницыРазделаОтчета = Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(КолонкаРазделыОтчетаСокрНаим, КолонкаНомерСтраницыРазделаОтчета);
								
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс" Тогда
		Элементы.Обновить.Доступность    = Истина;
	Иначе
		Элементы.Обновить.Доступность    = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
		
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
		
	ЗаполнитьСведенияОбОрганизацииНаСервере();

КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		
		Если НаимРаздела = "Баланс" И НЕ Лев(ИмяГруппы, 7) = "П000101"
			ИЛИ НаимРаздела = "ФормаОтчета" И Лев(ИмяГруппы, 7) = "П000101" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);
		
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	
	Если ИмяТекРаздела = "ФормаОтчета" Тогда
		Если ИспользуютсяМакетыЕНВД() Тогда
			ИмяМакетаОтчета = "ОПУ_ЕНВД";
		Иначе
			ИмяМакетаОтчета = "ОПУ_НеЕНВД";
		КонецЕсли;
		
	Иначе
		ИмяМакетаОтчета = ИмяТекРаздела;
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяМакетаОтчета));
	
	// Многострочные разделы.
	Если ИмяТекРаздела = "Баланс"
	 ИЛИ ИмяТекРаздела = "ФормаОтчета" Тогда
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			
			Если ИмяТекРаздела = "Баланс" И НЕ Лев(ИмяГруппы, 7) = "П000101"
			 ИЛИ ИмяТекРаздела = "ФормаОтчета" И Лев(ИмяГруппы, 7) = "П000101" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Баланс" Тогда
		Если ТабличныйДокумент.Области.Найти("ОргДиректор") <> Неопределено
			И СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
			ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБаланс.ОргДиректор;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	УстановитьЦветФонаЯчейкиНаСервере( , , ИмяТекРаздела);
	УстановитьВидимостьДополнительныхСтрок(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)

	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// При превышении реального кол-ва строк над исходным (по шаблону) кол-вом,
		// автоматически добавляем необходимое колво строк.
		Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы + 1 По ТекущееКоличествоСтрокГруппы Цикл

			НомИсходнойСтроки = НомНовойСтроки - 1;

			НомерГрафы = 2;
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			// определяем имя первой ячейки последней из исходных строк
			ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;

			// область первой ячейки последней из исходных строк
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

			// номера строк исходной области
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

			СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

			// Строки многострочного раздела должны входят в именованную секцию
			// для предотвращения вывода на печать пустых строк.
			// Определим именованую секцию, куда входит добавляемая строка.
			ИмяПервойЯчейкиПервойСтроки = КолонкаТаблицыИмя + "_" + 1;
			// область первой ячейки первой строки многострочного раздела
			ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
			// номер первой строки именованной секции
			НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
			// область именованной секции
			ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
			ИмяСекции                   = ОбластьИменованСекции.Имя;
			
			// Если имя секции начинается на R то это неименованный блок
			// возможно в именованную секцию включена строка-заголовок "в том числе"
			Пока Лев(ИмяСекции, 1) = "R" И НомерВерхЯчейкиСекции > 0 Цикл
				НомерВерхЯчейкиСекции = НомерВерхЯчейкиСекции - 1;
				ОбластьИменованСекции = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиОбласти, );
				ИмяСекции             = ОбластьИменованСекции.Имя;
			КонецЦикла;
			
			// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
			ОбластьИменованСекции.Имя   = "";

			// номера строк вставляемой области
			НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
			НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
			
			РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			Форма.ТабличныйДокумент = ТекТабличноеПоле;
			
			Для НомерГрафы = 2 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				// переопределяем имена вставленной области
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + НомИсходнойСтроки;
					ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + НомНовойСтроки;
					
					ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
					ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
					
					// определяем границы ячейки исходной области
					НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
					НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
					НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
					НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
					
					// Назначаем имя ячейки исходной области,
					// (т.к. в результате вставки новой области оно было очищено)
					ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
					ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
					
					// Назначаем имена областей для удаления строк
					Если НомерГрафы = 2 Тогда
						НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
						НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
						ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
						ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
					КонецЕсли;
					
					// очищаем значения ячеек вставленной области
					Если ОбластьЯчейки.СодержитЗначение Тогда
						ОбластьЯчейки.Очистить();
					Иначе
						// порядековый номер последней строки перед вставкой
						ИсходныйНомер        = Число(ОбластьЯчейки.Текст);
						НовыйПорядковыйНомер = ИсходныйНомер + 1;
						
						ОбластьЯчейки.Текст  = Формат(НовыйПорядковыйНомер, "ЧЦ = 3") + ".";
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;

			Если Лев(ИмяСекции, 1) = "П" ИЛИ СтрНайти(ИмяСекции, "ДопСтрока") = 1 Тогда	
				// Имеется именованная секция многострочного раздела.
				// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
				ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиСекции, , НомерНижнЯчейкиНовойОбласти, );
				ОбластьИменованСекции.Имя = ИмяСекции;
				
				// Далее проверим вхождение именованной секции многострочного раздела
				// как составляющая часть в другие секции табличного документа.
				// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
				// до добавленной строки. Данный механизм применяем в силу того, что 
				// при добавлении новой строки вышестоящая секция автоматически не
				// расширяется, и вместо этого получаем пересекающиеся секции.
				Для каждого Секция Из ТекТабличноеПоле.Области Цикл
					
					Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
						// Секция, куда входила именованная секция многострочного раздела
						// до добавления строки, подлежит расширению (включению в нее
						// добавленной строки).
						НомерВерхнейСтрокиСекции = Секция.Верх;
						ИмяСекции                = Секция.Имя;
						
						// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
						Секция.Имя      = "";
						// создаем новую секцию, охватывающую добавленную строку
						НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
						НоваяСекция.Имя = ИмяСекции;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли; 

		КонецЦикла;
	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		Для НомерГрафы = 2 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
				НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение Тогда
					// задаем значение ячейки
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
					
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст    = ЗначениеЯчейки;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Список данных, необходимых для вывода в шапках отчетов.
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", Форма.СтруктураРеквизитовФормы.мТипАдреса);
		Сведения.Добавить("", "ПолныйАдрЮР");
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	
	//В поле "Адрес" указывается:
	//- для организации - место ее государственной регистрации (место нахождения);
	//- для обособленного подразделения - место его нахождения;
	//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ИННЮЛ = "";
		НаимЮЛПол = "";
		ОКПО = "";
		ПолныйАдрЮР = "";
		ФормСобств = "";
		ОКОПФ = "";
		ОКФС = "";
		ОргПравФорм1 = "";
		ПолныйАдрПочт = "";
	КонецЕсли;
	
	ФИОРук = "";
	ФИОБух = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);
		ОргСведения.Свойство(Форма.СтруктураРеквизитовФормы.мТипАдреса, ПолныйАдрПочт);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено Тогда
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
			Форма.СтруктураРеквизитовФормы,
			Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено Тогда
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(Форма.ДатаПодписи,
			Форма.СтруктураРеквизитовФормы,
			Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение);
	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		
		Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргБухгалтер") = Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;
	
	мИННЮЛ = ИННЮЛ;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргИНН") = Неопределено Тогда
		Форма.ТабличныйДокумент.Области.ОргИНН.Значение = мИННЮЛ;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргНазв") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргНазв.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКПО") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение))) Тогда
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФорма") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФорма.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;
		
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКОПФ") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКФС") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФормаСобств") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;
	
	Если (НЕ Форма.ТабличныйДокумент.Области.Найти("ОргПочтАдрес") = Неопределено)
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение))) Тогда
		Если НЕ ЗначениеЗаполнено(ПолныйАдрПочт) Тогда
			Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение = "";
			ЮридическийАдрес = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "ПолныйАдрЮР").ПолныйАдрЮР;
			Если ЗначениеЗаполнено(ЮридическийАдрес) Тогда
				Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение = ЮридическийАдрес;
				Форма.СтруктураРеквизитовФормы.мТипАдреса = "ПолныйАдрЮР";
				Форма.СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "АдрЮР").АдрЮР;
			КонецЕсли;
		Иначе
			Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение = ПолныйАдрПочт;
			Форма.СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, "АдрПочт").АдрПочт;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргБухгалтер") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
		
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
				
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		ИначеЕсли ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ВБлокеВсеПоказателиЗаполняются = Истина;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					
				КонецЕсли;

				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если Форма.ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				ИначеЕсли ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДополнительныхСтрок(Форма, ИмяОтчета)
	
	Если ИмяОтчета = "Баланс"
	 ИЛИ ИмяОтчета = "ФормаОтчета" Тогда
		
		ДеревоНастроек = Форма[Форма.СоставДополнительныхСтрок.СтруктураСоставов[ИмяОтчета]];
		
		Для Каждого СтрокаОсновногоПоказателя Из ДеревоНастроек.ПолучитьЭлементы() Цикл
			Если Не ПустаяСтрока(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки) Тогда
				ОбластьДополнительнойСтроки = Форма.ТабличныйДокумент.Области.Найти(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
				ОбластьДополнительнойСтроки = Форма.ТабличныйДокумент.Области.Найти("ДобавлениеСтроки_" + СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ДополнительнаяСтрока Из СтрокаОсновногоПоказателя.ПолучитьЭлементы() Цикл
				Если Не ПустаяСтрока(ДополнительнаяСтрока.ИмяОбластиДопСтроки) Тогда
					ОбластьДополнительнойСтроки = Форма.ТабличныйДокумент.Области.Найти(ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
					ОбластьДополнительнойСтроки = Форма.ТабличныйДокумент.Области.Найти("ДобавлениеСтроки_" + ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаУровня3 Из ДополнительнаяСтрока.ПолучитьЭлементы() Цикл
					Если Не ПустаяСтрока(СтрокаУровня3.ИмяОбластиДопСтроки) Тогда
						ОбластьДополнительнойСтроки = Форма.ТабличныйДокумент.Области.Найти(СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
						ОбластьДополнительнойСтроки = Форма.ТабличныйДокумент.Области.Найти("ДобавлениеСтроки_" + СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяОтчета = "ФормаОтчета" И Форма.ИспользуютсяМакетыЕНВД() Тогда
		
		ДеревоНастройкиСостава = Форма[Форма.СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета];
		
		Форма.ТабличныйДокумент.Области.ВТомЧисле2110.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
		                                          			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		Форма.ТабличныйДокумент.Области.ВТомЧисле2120.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
		                                        			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		Форма.ТабличныйДокумент.Области.ВТомЧисле2210.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		Форма.ТабличныйДокумент.Области.ВТомЧисле2220.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		Форма.ТабличныйДокумент.Области.ВТомЧисле2100.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		Форма.ТабличныйДокумент.Области.ВТомЧисле2200.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
		Форма.ТабличныйДокумент.Области.ВТомЧисле2300.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002");
															  
		Форма.ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21101.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
		                                          			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		Форма.ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21201.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
		                                        			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		Форма.ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22101.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		Форма.ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22201.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		Форма.ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21001.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		Форма.ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22001.Видимость = ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
		                                           			  ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользуютсяМакетыЕНВД() Экспорт
	
	Перем СохраненноеПрименениеЕНВД;
	
	// Инициализируем признак применения организацией ЕНВД, если эти сведения сохранены в информационной базе.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено И СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СписокСохранения.Свойство("ПрименениеЕНВД", СохраненноеПрименениеЕНВД) Тогда
			СтруктураРеквизитовФормы.ПрименениеЕНВД = СохраненноеПрименениеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	// Если признак не был сохранен, то определяем его на основании учетной политики организации.
	Если СтруктураРеквизитовФормы.ПрименениеЕНВД = Неопределено Тогда
		СтруктураРеквизитовФормы.ПрименениеЕНВД = (ОрганизацияПрименяетЕНВД(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
	                 ИЛИ ОрганизацияПрименяетЕНВД(СтруктураРеквизитовФормы.Организация, ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12)));
	КонецЕсли;
	
	Возврат СтруктураРеквизитовФормы.ПрименениеЕНВД;
	
КонецФункции

&НаСервере
Функция ПрименяетсяПБУ18НаКонецПериода(ДатаОпределения)
	
	ЕстьОрганизацияПрименяющаяПБУ18 = Ложь;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(СтруктураРеквизитовФормы.Организация);
	
	Для Каждого ЭлементСпискаОрганизаций Из СписокОрганизаций Цикл
		ПроверяемаяОрганизация = ЭлементСпискаОрганизаций.Значение;
		Если ОрганизацияПрименяетПБУ18(ПроверяемаяОрганизация, ДатаОпределения) Тогда
			ЕстьОрганизацияПрименяющаяПБУ18 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОрганизацияПрименяющаяПБУ18;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Бухгалтерский баланс";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФормаОтчета";
	СтрокаУровня1.Представление            = "Отчет о прибылях"+Символы.ПС+"и убытках";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)

	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 2 ИЛИ КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	
	Если ВидСдачиОтчетности = 1 Тогда
		ПолеВыбораВидСдачиОтчетности = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		ПолеВыбораВидСдачиОтчетности = "Промежуточная при ликвидации/реорганизации";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда	
	    ПолеВыбораВидСдачиОтчетности = "Ликвидационная";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейПоПБУ18()
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	СкрыватьСтрокиРасшифровкиПоПБУ18 = (НЕ (ПрименяетсяПБУ18ВОтчетномПериоде ИЛИ ПрименяетсяПБУ18ВПредыдущемГоду));
	Если СкрыватьСтрокиРасшифровкиПоПБУ18
	   И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
		ТабличныйДокумент.Области.ВТомЧисле2421.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2421.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2430.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2430.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2450.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2450.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьИсходнуюСтруктуруНастроек(Знач МакетНастроек, ИмяСекции, ДеревоНастроек)

	Если ТипЗнч(МакетНастроек) = Тип("Строка") Тогда
		МакетНастроек = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МакетНастроек);
	КонецЕсли;
		
	Если ПустаяСтрока(ИмяСекции) Тогда
		
		ДеревоНастроек.Очистить();
		
		Возврат;
		
	КонецЕсли;
	
	ПерваяСтрокаМакетаСостава = МакетНастроек.Области[ИмяСекции].Верх;
	ВысотаМакетаСостава = МакетНастроек.Области[ИмяСекции].Низ;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По МакетНастроек.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		МакетНастроек.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = ПерваяСтрокаМакетаСостава По ВысотаМакетаСостава Цикл
			НомСтр = ВысотаМакетаСостава - (НомерСтроки - ПерваяСтрокаМакетаСостава);
			Если МакетНастроек.Область(НомСтр, 1, НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоНастроек;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 1 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.ПолучитьЭлементы().Вставить(0);
				НовСтр.Наименование = СокрЛП(МакетНастроек.Область(НомСтр, 1).Текст);
				НовСтр.Код = СокрЛП(МакетНастроек.Область(НомСтр, 2).Текст);
				НовСтр.ВключатьВОтчет = НЕ ПустаяСтрока(МакетНастроек.Область(НомСтр, 3).Текст);
				НовСтр.Существенность = СокрЛП(МакетНастроек.Область(НомСтр, 4).Текст);
				НовСтр.ИмяОбластиДопСтроки = СокрЛП(МакетНастроек.Область(НомСтр, 5).Текст);
				НовСтр.ТипСостава = СокрЛП(МакетНастроек.Область(НомСтр, 6).Текст);
				НовСтр.МаксимальноеКоличество = СокрЛП(МакетНастроек.Область(НомСтр, 7).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПоле = Форма[ТабличноеПоле];
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ОрганизацияПрименяетЕНВД(Организация, ДатаОпределения)
	
	Возврат РегламентированнаяОтчетностьПереопределяемый.ПлательщикЕНВД(Организация, ДатаОпределения);
	
КонецФункции

&НаСервере
Функция ОрганизацияПрименяетПБУ18(Организация, ДатаОпределения)
	
	// При применении УСН ПБУ 18 применяться не может.
	// Однако возможна ситуация, когда в регистре учетной политики установлен признак
	// применения ПБУ 18 при системе налогообложения УСН.
				
	ОрганизацияПерешлаНаУСН   = (РегламентированнаяОтчетностьПереопределяемый.СистемаНалогообложения(Организация, ДатаОпределения) = "Упрощенная");
	ОрганизацияПрименяетПБУ18 = РегламентированнаяОтчетностьПереопределяемый.ПрименяетсяПБУ18(Организация, ДатаОпределения);
		
	Возврат (НЕ ОрганизацияПерешлаНаУСН И ОрганизацияПрименяетПБУ18);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьКодЕИ(Форма)

	Если Форма.ТабличныйДокумент.Области.Найти("КодЕИ") = Неопределено
	 ИЛИ Форма.ТабличныйДокумент.Области.Найти("НазвЕИ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.ТабличныйДокумент.Области.КодЕИ.Значение = "383";
		Форма.ТабличныйДокумент.Области.НазвЕИ.Значение = "в рублях";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.ТабличныйДокумент.Области.КодЕИ.Значение = "384";
		Форма.ТабличныйДокумент.Области.НазвЕИ.Значение = "в тыс. рублей";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.ТабличныйДокумент.Области.КодЕИ.Значение = "385";
		Форма.ТабличныйДокумент.Области.НазвЕИ.Значение = "в млн. рублей";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВключенВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки)
	
	НайденнаяВетвьНастройки = РегламентированнаяотчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ДеревоНастроекСтрокРасшифровки.ПолучитьЭлементы(), "ИмяОбластиДопСтроки", ИмяОбластиДопСтроки);
			      	
	Если НайденнаяВетвьНастройки = Неопределено Тогда
		// если настройка не обнаружена, считаем что допстрока должна входить в отчет
		Возврат Истина;
	Иначе
		Возврат НайденнаяВетвьНастройки.ВключатьВОтчет;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапускаАвтозаполнения = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапускаАвтозаполнения<> Неопределено И РезультатЗапускаАвтозаполнения.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаАвтозаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтрокиЗавершение(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
		КопироватьДанныеФормы(РезультатНастройки, ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов[СтруктураРеквизитовФормы.НаимТекущегоРаздела]]);
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	ТекстОбластиТаблДок = ТабличныйДокумент.Область().Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтроку(ИмяПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
    	
	Перем СтруктураГруппы;

	ТекТабличноеПоле = ТабличныйДокумент;

	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;

	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана добавляемая строка многострочного раздела.'");

		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];

	КолСтрок = СтруктураГруппы.Количество();
	
	НомерГрафы = 2;
			
	КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
	
	ИмяПервойЯчейкиПоследнейСтроки = КолонкаТаблицыИмя + "_" + КолСтрок;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// Строки многострочного раздела должны входят в именованную секцию
	// для предотвращения вывода на печать пустых строк.
	// Определим именованую секцию, куда входит добавляемая строка.
	ИмяПервойЯчейкиПервойСтроки = КолонкаТаблицыИмя + "_" + 1;
	// область первой ячейки первой строки многострочного раздела
	ОбластьЯчейки               = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПервойСтроки];
	// номер первой строки именованной секции
	НомерВерхЯчейкиСекции       = ОбластьЯчейки.Верх;
		
	НомерВерхЯчейкиИменованнойСекции = НомерВерхЯчейкиСекции;
	ОбластьИменованСекции       = ТекТабличноеПоле.Область(НомерВерхЯчейкиИменованнойСекции, , НомерНижнЯчейкиОбласти, );
	ИмяСекции                   = ОбластьИменованСекции.Имя;
	
	// Допстрока должна быть включена в именованную область строк
	Пока Лев(ИмяСекции, 1) = "R" И НомерВерхЯчейкиИменованнойСекции > 0 Цикл
		НомерВерхЯчейкиИменованнойСекции = НомерВерхЯчейкиИменованнойСекции - 1;
		ОбластьИменованСекции            = ТекТабличноеПоле.Область(НомерВерхЯчейкиИменованнойСекции, , НомерНижнЯчейкиОбласти, );
		ИмяСекции                        = ОбластьИменованСекции.Имя;
	КонецЦикла;
		
	ИмяСекции                   = ОбластьИменованСекции.Имя;
	// предварительно очищаем прежнюю секцию, так как она смещается вниз вместе с добавляемой строкой
	ОбластьИменованСекции.Имя   = "";

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
    	
	РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	ТабличныйДокумент = ТекТабличноеПоле;
	
	Для НомерГрафы = 2 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
			
			ИмяОбластиЯчейки    = КолонкаТаблицыИмя + "_" + КолСтрок;
			ИмяНовОбластиЯчейки = КолонкаТаблицыИмя + "_" + (КолСтрок + 1);
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 2 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;

	НомерГрафы = 2;
				
	КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = КолонкаТаблицыИмя + "_" + (КолСтрок + 1);

	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Элементы.ТабличныйДокумент;

	// Добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Если Лев(ИмяСекции, 1) = "П"
	 ИЛИ СтрНайти(ИмяСекции, "ДопСтрока") = 1 Тогда
		// Имеется именованная секция многострочного раздела.
		// Добавляем исходную строку в секцию табличного документа с именем ИмяСекции.
		ОбластьИменованСекции     = ТекТабличноеПоле.Область(НомерВерхЯчейкиИменованнойСекции, , НомерНижнЯчейкиНовойОбласти, );
		ОбластьИменованСекции.Имя = ИмяСекции;

		// Далее проверим вхождение именованной секции многострочного раздела
		// как составляющая часть в другие секции табличного документа.
		// В случае обнаржения такого вхождения расширяем обнаруженныую секцию
		// до добавленной строки. Данный механизм применяем в силу того, что 
		// при добавлении новой строки вышестоящая секция автоматически не
		// расширяется, и вместо этого получаем пересекающиеся секции.
		Для каждого Секция Из ТекТабличноеПоле.Области Цикл

			Если Секция.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ((Секция.Верх <= НомерВерхЯчейкиСекции) И (Секция.Низ >= НомерНижнЯчейкиОбласти)) Тогда
				Продолжить;
			КонецЕсли;

			Если Секция.Низ < НомерНижнЯчейкиНовойОбласти Тогда
				// Секция, куда входила именованная секция многострочного раздела
				// до добавления строки, подлежит расширению (включению в нее
				// добавленной строки).
				НомерВерхнейСтрокиСекции = Секция.Верх;
				ИмяСекции                = Секция.Имя;

				// удаляем прежнюю секцию, куда входила именованная секция многострочного раздела
				Секция.Имя      = "";
				// создаем новую секцию, охватывающую добавленную строку
				НоваяСекция     = ТекТабличноеПоле.Область(НомерВерхнейСтрокиСекции, , НомерНижнЯчейкиНовойОбласти, );
				НоваяСекция.Имя = ИмяСекции;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли; 
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтроку(ИмяПоказателя)
		
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекТабличноеПоле = ТабличныйДокумент;

	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);

	// исходное количество строк группы
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1)); 
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		
		НомерГрафы = 2;
			
		КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = КолонкаТаблицыИмя + "_" + НомУдаляемойСтроки;

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
        		
		РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ТабличныйДокумент = ТекТабличноеПоле;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				Для НомерГрафы = 2 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
						ИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаТаблицыИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 2 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЦикла;

		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			Для НомерГрафы = 2 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
					НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если НЕ(ОбластьЯчейкиТаблицы.СодержитЗначение) Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Формат(ПервыйНомерВГруппе + НомерСтрокиВТаблице, "ЧЦ = 3") + ".";
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;

		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	
	НомерГрафы = 2;
			
	КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
	ИмяТекущейОбласти = КолонкаТаблицыИмя + "_" + НомТекущейСтроки;

	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "")	
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	// БАЛАНС
	//
	Если ИмяСтраницыПанели = "Баланс" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			
			мБаланс = Форма.ТабличныйДокумент.Области;
		
			// Актив
			// Строка 1100
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110004, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110004.Значение = мБаланс.П000100111004.Значение
				+ мБаланс.П000100112004.Значение
				+ мБаланс.П000100113004.Значение
				+ мБаланс.П000100114004.Значение
				+ мБаланс.П000100115004.Значение
				+ мБаланс.П000100116004.Значение
				+ мБаланс.П000100117004.Значение;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110005, ОбластьИмя) > 0 Тогда									   
				
				мБаланс.П000100110005.Значение = мБаланс.П000100111005.Значение
				+ мБаланс.П000100112005.Значение
				+ мБаланс.П000100113005.Значение
				+ мБаланс.П000100114005.Значение
				+ мБаланс.П000100115005.Значение
				+ мБаланс.П000100116005.Значение
				+ мБаланс.П000100117005.Значение;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110006, ОбластьИмя) > 0 Тогда									   
				
				мБаланс.П000100110006.Значение = мБаланс.П000100111006.Значение
				+ мБаланс.П000100112006.Значение
				+ мБаланс.П000100113006.Значение
				+ мБаланс.П000100114006.Значение
				+ мБаланс.П000100115006.Значение
				+ мБаланс.П000100116006.Значение
				+ мБаланс.П000100117006.Значение;
				
			КонецЕсли;									   
			
			// строка 1200
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120004.Значение = мБаланс.П000100121004.Значение
				+ мБаланс.П000100122004.Значение
				+ мБаланс.П000100123004.Значение
				+ мБаланс.П000100124004.Значение
				+ мБаланс.П000100125004.Значение
				+ мБаланс.П000100126004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120005.Значение = мБаланс.П000100121005.Значение
				+ мБаланс.П000100122005.Значение
				+ мБаланс.П000100123005.Значение
				+ мБаланс.П000100124005.Значение
				+ мБаланс.П000100125005.Значение
				+ мБаланс.П000100126005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120006.Значение = мБаланс.П000100121006.Значение
				+ мБаланс.П000100122006.Значение
				+ мБаланс.П000100123006.Значение
				+ мБаланс.П000100124006.Значение
				+ мБаланс.П000100125006.Значение
				+ мБаланс.П000100126006.Значение;
			КонецЕсли;									   
			
			// строка 1600
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160004.Значение = мБаланс.П000100110004.Значение
				+ мБаланс.П000100120004.Значение;	
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160005.Значение = мБаланс.П000100110005.Значение
				+ мБаланс.П000100120005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160006.Значение = мБаланс.П000100110006.Значение
				+ мБаланс.П000100120006.Значение;
			КонецЕсли;
			
			// Пассив
			// строка 1300
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130004, ОбластьИмя) > 0 Тогда
											
				мБаланс.П000100130004.Значение = мБаланс.П000100131004.Значение
				+ мБаланс.П000100132004.Значение
				+ мБаланс.П000100134004.Значение
				+ мБаланс.П000100135004.Значение
				+ мБаланс.П000100136004.Значение
				+ мБаланс.П000100137004.Значение;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130005, ОбластьИмя) > 0 Тогда									   
				
				мБаланс.П000100130005.Значение = мБаланс.П000100131005.Значение
				+ мБаланс.П000100132005.Значение
				+ мБаланс.П000100134005.Значение
				+ мБаланс.П000100135005.Значение
				+ мБаланс.П000100136005.Значение
				+ мБаланс.П000100137005.Значение;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130006, ОбластьИмя) > 0 Тогда									   
	
				мБаланс.П000100130006.Значение = мБаланс.П000100131006.Значение
				+ мБаланс.П000100132006.Значение
				+ мБаланс.П000100134006.Значение
				+ мБаланс.П000100135006.Значение
				+ мБаланс.П000100136006.Значение
				+ мБаланс.П000100137006.Значение;
				
			КонецЕсли;									   
			
			// строка 1400
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140004.Значение = мБаланс.П000100141004.Значение
				+ мБаланс.П000100142004.Значение
				+ мБаланс.П000100143004.Значение
				+ мБаланс.П000100145004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140005.Значение = мБаланс.П000100141005.Значение
				+ мБаланс.П000100142005.Значение
				+ мБаланс.П000100143005.Значение
				+ мБаланс.П000100145005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140006.Значение = мБаланс.П000100141006.Значение
				+ мБаланс.П000100142006.Значение
				+ мБаланс.П000100143006.Значение
				+ мБаланс.П000100145006.Значение;
			КонецЕсли;									   
			
			// строка 1500
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150004.Значение = мБаланс.П000100151004.Значение
				+ мБаланс.П000100152004.Значение
				+ мБаланс.П000100153004.Значение
				+ мБаланс.П000100154004.Значение
				+ мБаланс.П000100155004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150005.Значение = мБаланс.П000100151005.Значение
				+ мБаланс.П000100152005.Значение
				+ мБаланс.П000100153005.Значение
				+ мБаланс.П000100154005.Значение
				+ мБаланс.П000100155005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150006.Значение = мБаланс.П000100151006.Значение
				+ мБаланс.П000100152006.Значение
				+ мБаланс.П000100153006.Значение
				+ мБаланс.П000100154006.Значение
				+ мБаланс.П000100155006.Значение;
			КонецЕсли;									   
			
			// строка 1700
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170004.Значение = мБаланс.П000100130004.Значение
				+ мБаланс.П000100140004.Значение
				+ мБаланс.П000100150004.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170005.Значение = мБаланс.П000100130005.Значение
				+ мБаланс.П000100140005.Значение
				+ мБаланс.П000100150005.Значение;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170006.Значение = мБаланс.П000100130006.Значение
				+ мБаланс.П000100140006.Значение
				+ мБаланс.П000100150006.Значение;
			КонецЕсли;									   
						
		Иначе
			
			мБаланс = Форма.СтруктураДанныхБаланс;
			
			// Актив
			// Строка 1100
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110004, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110004 = мБаланс.П000100111004
				+ мБаланс.П000100112004
				+ мБаланс.П000100113004
				+ мБаланс.П000100114004
				+ мБаланс.П000100115004
				+ мБаланс.П000100116004
				+ мБаланс.П000100117004;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110005, ОбластьИмя) > 0 Тогда									   
				
				мБаланс.П000100110005 = мБаланс.П000100111005
				+ мБаланс.П000100112005
				+ мБаланс.П000100113005
				+ мБаланс.П000100114005
				+ мБаланс.П000100115005
				+ мБаланс.П000100116005
				+ мБаланс.П000100117005;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110006, ОбластьИмя) > 0 Тогда									   
				
				мБаланс.П000100110006 = мБаланс.П000100111006
				+ мБаланс.П000100112006
				+ мБаланс.П000100113006
				+ мБаланс.П000100114006
				+ мБаланс.П000100115006
				+ мБаланс.П000100116006
				+ мБаланс.П000100117006;
				
			КонецЕсли;									   
			
			// строка 1200
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120004 = мБаланс.П000100121004
				+ мБаланс.П000100122004
				+ мБаланс.П000100123004
				+ мБаланс.П000100124004
				+ мБаланс.П000100125004
				+ мБаланс.П000100126004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120005 = мБаланс.П000100121005
				+ мБаланс.П000100122005
				+ мБаланс.П000100123005
				+ мБаланс.П000100124005
				+ мБаланс.П000100125005
				+ мБаланс.П000100126005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100120006 = мБаланс.П000100121006
				+ мБаланс.П000100122006
				+ мБаланс.П000100123006
				+ мБаланс.П000100124006
				+ мБаланс.П000100125006
				+ мБаланс.П000100126006;
			КонецЕсли;									   
			
			// строка 1600
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160004 = мБаланс.П000100110004
				+ мБаланс.П000100120004;	
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160005 = мБаланс.П000100110005
				+ мБаланс.П000100120005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100160006 = мБаланс.П000100110006
				+ мБаланс.П000100120006;
			КонецЕсли;
			
			// Пассив
			// строка 1300
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130004, ОбластьИмя) > 0 Тогда
												
				мБаланс.П000100130004 = мБаланс.П000100131004
				+ мБаланс.П000100132004
				+ мБаланс.П000100134004
				+ мБаланс.П000100135004
				+ мБаланс.П000100136004
				+ мБаланс.П000100137004;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130005, ОбластьИмя) > 0 Тогда									   
								
				мБаланс.П000100130005 = мБаланс.П000100131005
				+ мБаланс.П000100132005
				+ мБаланс.П000100134005
				+ мБаланс.П000100135005
				+ мБаланс.П000100136005
				+ мБаланс.П000100137005;
				
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130006, ОбластьИмя) > 0 Тогда									   
								
				мБаланс.П000100130006 = мБаланс.П000100131006
				+ мБаланс.П000100132006
				+ мБаланс.П000100134006
				+ мБаланс.П000100135006
				+ мБаланс.П000100136006
				+ мБаланс.П000100137006;
				
			КонецЕсли;									   
			
			// строка 1400
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140004 = мБаланс.П000100141004
				+ мБаланс.П000100142004
				+ мБаланс.П000100143004
				+ мБаланс.П000100145004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140005 = мБаланс.П000100141005
				+ мБаланс.П000100142005
				+ мБаланс.П000100143005
				+ мБаланс.П000100145005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100140006 = мБаланс.П000100141006
				+ мБаланс.П000100142006
				+ мБаланс.П000100143006
				+ мБаланс.П000100145006;
			КонецЕсли;									   
			
			// строка 1500
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150004 = мБаланс.П000100151004
				+ мБаланс.П000100152004
				+ мБаланс.П000100153004
				+ мБаланс.П000100154004
				+ мБаланс.П000100155004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150005 = мБаланс.П000100151005
				+ мБаланс.П000100152005
				+ мБаланс.П000100153005
				+ мБаланс.П000100154005
				+ мБаланс.П000100155005;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100150006 = мБаланс.П000100151006
				+ мБаланс.П000100152006
				+ мБаланс.П000100153006
				+ мБаланс.П000100154006
				+ мБаланс.П000100155006;
			КонецЕсли;									   
			
			// строка 1700
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170004 = мБаланс.П000100130004
				+ мБаланс.П000100140004
				+ мБаланс.П000100150004;
			КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170005, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170005 = мБаланс.П000100130005
				+ мБаланс.П000100140005
				+ мБаланс.П000100150005;
		КонецЕсли;									   
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170006, ОбластьИмя) > 0 Тогда									   
				мБаланс.П000100170006 = мБаланс.П000100130006
				+ мБаланс.П000100140006
				+ мБаланс.П000100150006;
			КонецЕсли;									   
		
		КонецЕсли;
		
	// ОТЧЕТ О ПРИБЫЛЯХ И УБЫТКАХ
	//
	ИначеЕсли ИмяСтраницыПанели = "ФормаОтчета" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФормаОтчета" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210004, ОбластьИмя) > 0 Тогда									   
				
				П000100211004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211004.Значение);
				П000100212004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212004.Значение);
								
				мФормаОтчета.П000100210004.Значение = П000100211004 + П000100212004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210005, ОбластьИмя) > 0 Тогда									   
				
				П000100211005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211005.Значение);
				П000100212005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212005.Значение);
				
				мФормаОтчета.П000100210005.Значение = П000100211005 + П000100212005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220004, ОбластьИмя) > 0 Тогда									   
				
				П000100210004 = мФормаОтчета.П000100210004.Значение;
				П000100221004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221004.Значение);
				П000100222004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222004.Значение);
				
				П000100220004 = П000100210004 + П000100221004 + П000100222004;
				
				мФормаОтчета.П000100220004.Значение = П000100220004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220005, ОбластьИмя) > 0 Тогда
				
				П000100210005 = мФормаОтчета.П000100210005.Значение;
				П000100221005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221005.Значение);
				П000100222005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222005.Значение);
				
				П000100220005 = П000100210005 + П000100221005 + П000100222005;
				
				мФормаОтчета.П000100220005.Значение = П000100220005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230004, ОбластьИмя) > 0 Тогда
				
				П000100220004 = мФормаОтчета.П000100220004.Значение;
				
				П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004.Значение);
				П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004.Значение);
				П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004.Значение);
				П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004.Значение);
				П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004.Значение);
								
				П000100230004 = П000100220004 + П000100231004 + П000100232004 + П000100233004 + П000100234004 + П000100235004;
				
				мФормаОтчета.П000100230004.Значение = П000100230004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230005, ОбластьИмя) > 0 Тогда
				
				П000100220005 = мФормаОтчета.П000100220005.Значение;
				
				П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005.Значение);
				П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005.Значение);
				П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005.Значение);
				П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005.Значение);
				П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005.Значение);
				
				П000100230005 = П000100220005 + П000100231005 + П000100232005 + П000100233005 + П000100234005 + П000100235005;
				
				мФормаОтчета.П000100230005.Значение = П000100230005;
				
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240004, ОбластьИмя) > 0 Тогда
				
				П000100230004 = мФормаОтчета.П000100230004.Значение;
				
				П000100241004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241004.Значение);
				П000100243004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243004.Значение);
				П000100245004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245004.Значение);
				П000100246004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246004.Значение);
				
				П000100240004 = П000100230004 + П000100241004 + П000100243004 + П000100245004 + П000100246004;
				
				мФормаОтчета.П000100240004.Значение = П000100240004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240005, ОбластьИмя) > 0 Тогда
				
				П000100230005 = мФормаОтчета.П000100230005.Значение;
				
				П000100241005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241005.Значение);
				П000100243005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243005.Значение);
				П000100245005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245005.Значение);
				П000100246005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246005.Значение);
				
				П000100240005 = П000100230005 + П000100241005 + П000100243005 + П000100245005 + П000100246005;
				
				мФормаОтчета.П000100240005.Значение = П000100240005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250004, ОбластьИмя) > 0 Тогда
				
				П000100240004 = мФормаОтчета.П000100240004.Значение;
				
				П000100251004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251004.Значение);
				П000100252004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252004.Значение);
				
				П000100250004 = П000100240004 + П000100251004 + П000100252004;
				
				мФормаОтчета.П000100250004.Значение = П000100250004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250005, ОбластьИмя) > 0 Тогда
				
				П000100240005 = мФормаОтчета.П000100240005.Значение;
				
				П000100251005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251005.Значение);
				П000100252005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252005.Значение);
				
				П000100250005 = П000100240005 + П000100251005 + П000100252005;
				
				мФормаОтчета.П000100250005.Значение = П000100250005;
				
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
				
				ДеревоНастройкиСостава = Форма[Форма.СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета];
				
				// отключаемые автозаполняемые строки расшифровки
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101") Тогда
					П000102110104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110104.Значение);
					П000102110105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110105.Значение);
				Иначе
					П000102110104 = 0;
					П000102110105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102") Тогда
					П000102110204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110204.Значение);
					П000102110205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110205.Значение);
				Иначе
					П000102110204 = 0;
					П000102110205 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201") Тогда
					П000102120104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120104.Значение);
					П000102120105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120105.Значение);
				Иначе
					П000102120104 = 0;
					П000102120105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202") Тогда
					П000102120204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120204.Значение);
					П000102120205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120205.Значение);
				Иначе
					П000102120204 = 0;
					П000102120205 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101") Тогда
					П000102210104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210104.Значение);
					П000102210105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210105.Значение);
				Иначе
					П000102210104 = 0;
					П000102210105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102") Тогда
					П000102210204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210204.Значение);
					П000102210205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210205.Значение);
				Иначе
					П000102210204 = 0;
					П000102210205 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201") Тогда
					П000102220104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220104.Значение);
					П000102220105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220105.Значение);
				Иначе
					П000102220104 = 0;
					П000102220105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202") Тогда
					П000102220204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220204.Значение);
					П000102220205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220205.Значение);
				Иначе
					П000102220204 = 0;
					П000102220205 = 0;
				КонецЕсли;
				
				// отключаемые расчитываемые строки расшифровки
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001") Тогда
					П000102100104 = П000102110104 + П000102120104;
					П000102100105 = П000102110105 + П000102120105;
				Иначе
					П000102100104 = 0;
					П000102100105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100104.Значение = П000102100104;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100105.Значение = П000102100105;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002") Тогда
					П000102100204 = П000102110204 + П000102120204;
					П000102100205 = П000102110205 + П000102120205;
				Иначе
					П000102100204 = 0;
					П000102100205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100204.Значение = П000102100204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100205.Значение = П000102100205;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001") Тогда
					П000102200104 = П000102100104 + П000102210104 + П000102220104;
					П000102200105 = П000102100105 + П000102210105 + П000102220105;
				Иначе
					П000102200104 = 0;
					П000102200105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200104.Значение = П000102200104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200105.Значение = П000102200105;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002") Тогда
					П000102200204 = П000102100204 + П000102210204 + П000102220204;
					П000102200205 = П000102100205 + П000102210205 + П000102220205;
				Иначе
					П000102200204 = 0;
					П000102200205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200204.Значение = П000102200204;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200205.Значение = П000102200205;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001") Тогда
					
					П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004.Значение);
					П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004.Значение);
					П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004.Значение);
					П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004.Значение);
					П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004.Значение);
					
					П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005.Значение);
					П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005.Значение);
					П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005.Значение);
					П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005.Значение);
					П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005.Значение);
										
					П000102300104 = П000102200104 + П000100231004 + П000100232004 + П000100234004 + П000100233004 + П000100235004;
					П000102300105 = П000102200105 + П000100231005 + П000100232005 + П000100234005 + П000100233005 + П000100235005;
					
				Иначе
					П000102300104 = 0;
					П000102300105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300104.Значение = П000102300104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300105.Значение = П000102300105;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002") Тогда
					П000102300204 = П000102200204;
					П000102300205 = П000102200205;
				Иначе
					П000102300204 = 0;
					П000102300205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300204.Значение = П000102300204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300205.Значение = П000102300205;
				КонецЕсли;	
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхФормаОтчета;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210004, ОбластьИмя) > 0 Тогда									   
				
				П000100211004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211004);
				П000100212004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212004);
								
				мФормаОтчета.П000100210004 = П000100211004 + П000100212004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100210005, ОбластьИмя) > 0 Тогда									   
				
				П000100211005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100211005);
				П000100212005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100212005);
				
				мФормаОтчета.П000100210005 = П000100211005 + П000100212005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220004, ОбластьИмя) > 0 Тогда									   
				
				П000100210004 = мФормаОтчета.П000100210004;
				П000100221004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221004);
				П000100222004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222004);
				
				П000100220004 = П000100210004 + П000100221004 + П000100222004;
				
				мФормаОтчета.П000100220004 = П000100220004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100220005, ОбластьИмя) > 0 Тогда
				
				П000100210005 = мФормаОтчета.П000100210005;
				П000100221005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100221005);
				П000100222005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100222005);
				
				П000100220005 = П000100210005 + П000100221005 + П000100222005;
				
				мФормаОтчета.П000100220005 = П000100220005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230004, ОбластьИмя) > 0 Тогда
				
				П000100220004 = мФормаОтчета.П000100220004;
				
				П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004);
				П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004);
				П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004);
				П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004);
				П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004);
								
				П000100230004 = П000100220004 + П000100231004 + П000100232004 + П000100233004 + П000100234004 + П000100235004;
				
				мФормаОтчета.П000100230004 = П000100230004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100230005, ОбластьИмя) > 0 Тогда
				
				П000100220005 = мФормаОтчета.П000100220005;
				
				П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005);
				П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005);
				П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005);
				П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005);
				П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005);
				
				П000100230005 = П000100220005 + П000100231005 + П000100232005 + П000100233005 + П000100234005 + П000100235005;
				
				мФормаОтчета.П000100230005 = П000100230005;
				
			КонецЕсли;		
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240004, ОбластьИмя) > 0 Тогда
				
				П000100230004 = мФормаОтчета.П000100230004;
				
				П000100241004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241004);
				П000100243004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243004);
				П000100245004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245004);
				П000100246004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246004);
				
				П000100240004 = П000100230004 + П000100241004 + П000100243004 + П000100245004 + П000100246004;
				
				мФормаОтчета.П000100240004 = П000100240004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100240005, ОбластьИмя) > 0 Тогда
				
				П000100230005 = мФормаОтчета.П000100230005;
				
				П000100241005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100241005);
				П000100243005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100243005);
				П000100245005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100245005);
				П000100246005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100246005);
				
				П000100240005 = П000100230005 + П000100241005 + П000100243005 + П000100245005 + П000100246005;
				
				мФормаОтчета.П000100240005 = П000100240005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250004, ОбластьИмя) > 0 Тогда
				
				П000100240004 = мФормаОтчета.П000100240004;
				
				П000100251004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251004);
				П000100252004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252004);
				
				П000100250004 = П000100240004 + П000100251004 + П000100252004;
				
				мФормаОтчета.П000100250004 = П000100250004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100250005, ОбластьИмя) > 0 Тогда
				
				П000100240005 = мФормаОтчета.П000100240005;
				
				П000100251005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100251005);
				П000100252005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100252005);
				
				П000100250005 = П000100240005 + П000100251005 + П000100252005;
				
				мФормаОтчета.П000100250005 = П000100250005;
				
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
				
				ДеревоНастройкиСостава = Форма[Форма.СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета];
				
				// отключаемые автозаполняемые строки расшифровки
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101") Тогда
					П000102110104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110104);
					П000102110105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110105);
				Иначе
					П000102110104 = 0;
					П000102110105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102") Тогда
					П000102110204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110204);
					П000102110205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102110205);
				Иначе
					П000102110204 = 0;
					П000102110205 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201") Тогда
					П000102120104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120104);
					П000102120105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120105);
				Иначе
					П000102120104 = 0;
					П000102120105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202") Тогда
					П000102120204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120204);
					П000102120205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102120205);
				Иначе
					П000102120204 = 0;
					П000102120205 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101") Тогда
					П000102210104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210104);
					П000102210105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210105);
				Иначе
					П000102210104 = 0;
					П000102210105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102") Тогда
					П000102210204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210204);
					П000102210205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102210205);
				Иначе
					П000102210204 = 0;
					П000102210205 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201") Тогда
					П000102220104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220104);
					П000102220105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220105);
				Иначе
					П000102220104 = 0;
					П000102220105 = 0;
				КонецЕсли;
				
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202") Тогда
					П000102220204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220204);
					П000102220205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000102220205);
				Иначе
					П000102220204 = 0;
					П000102220205 = 0;
				КонецЕсли;
				
				// отключаемые расчитываемые строки расшифровки
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001") Тогда
					П000102100104 = П000102110104 + П000102120104;
					П000102100105 = П000102110105 + П000102120105;
				Иначе
					П000102100104 = 0;
					П000102100105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100104 = П000102100104;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100105 = П000102100105;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002") Тогда
					П000102100204 = П000102110204 + П000102120204;
					П000102100205 = П000102110205 + П000102120205;
				Иначе
					П000102100204 = 0;
					П000102100205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100204 = П000102100204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102100205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102100205 = П000102100205;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001") Тогда
					П000102200104 = П000102100104 + П000102210104 + П000102220104;
					П000102200105 = П000102100105 + П000102210105 + П000102220105;
				Иначе
					П000102200104 = 0;
					П000102200105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200104 = П000102200104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200105 = П000102200105;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002") Тогда
					П000102200204 = П000102100204 + П000102210204 + П000102220204;
					П000102200205 = П000102100205 + П000102210205 + П000102220205;
				Иначе
					П000102200204 = 0;
					П000102200205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200204 = П000102200204;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102200205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102200205 = П000102200205;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001") Тогда
					
					П000100231004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231004);
					П000100232004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232004);
					П000100233004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233004);
					П000100234004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234004);
					П000100235004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235004);
					
					П000100231005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100231005);
					П000100232005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100232005);
					П000100233005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100233005);
					П000100234005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100234005);
					П000100235005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, мФормаОтчета.П000100235005);
										
					П000102300104 = П000102200104 + П000100231004 + П000100232004 + П000100234004 + П000100233004 + П000100235004;
					П000102300105 = П000102200105 + П000100231005 + П000100232005 + П000100234005 + П000100233005 + П000100235005;
					
				Иначе
					П000102300104 = 0;
					П000102300105 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300104, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300104 = П000102300104;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300105, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300105 = П000102300105;
				КонецЕсли;
								
				Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002") Тогда
					П000102300204 = П000102200204;
					П000102300205 = П000102200205;
				Иначе
					П000102300204 = 0;
					П000102300205 = 0;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300204, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300204 = П000102300204;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000102300205, ОбластьИмя) > 0 Тогда
					мФормаОтчета.П000102300205 = П000102300205;
				КонецЕсли;	
				
			КонецЕсли;
						
		КонецЕсли;	
	
	ИначеЕсли ИмяСтраницыПанели = "" Тогда
		
		Расчет(Форма, "Баланс",        ОбластьИмя);
		Расчет(Форма, "ФормаОтчета",   ОбластьИмя);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаВидОтчетностиЗавершение(ПериодЭлемент, ДополнительныеПараметры) Экспорт
	Если ПериодЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ВидОтчетности"].Значение = ПериодЭлемент.Представление;
		ВидСдачиОтчетности = ПериодЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		// По умолчанию для следующих обновлений поставим, что тип адреса должен быть почтовым.
		СтруктураРеквизитовФормы.мТипАдреса = "ПолныйАдрПочт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		СтруктураРеквизитовФормы.мТипАдреса = "ПолныйАдрЮР";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		СтруктураРеквизитовФормы.мТипАдреса = "ПолныйАдрПочт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности()
	
	Если СтруктураДанныхБаланс.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргКодОКВЭД);
		
	КонецЕсли;	
		
	Если СтруктураДанныхФормаОтчета.Свойство("ОргКодОКВЭД") Тогда
	
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхФормаОтчета.ОргКодОКВЭД);
																	 
	КонецЕсли;																 
																	 
	Если СтруктураДанныхБаланс.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргОтрасль);
		
	КонецЕсли;	
	
	Если СтруктураДанныхФормаОтчета.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхФормаОтчета.ОргОтрасль);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
			
	РасчетНаСервере();

	Модифицированность = Истина;
	      	             		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		ПоказательДатаПодписиРаздела = '00010101';
		ВРазделеТолькоДатаПодписи
			= ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 1
			И ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ДатаПодписиОтчета");
		Если ВРазделеТолькоДатаПодписи Тогда
			// Предварительное сохранение значения единственного
			// показателя раздела - "Даты подписи отчета".
			ПоказательДатаПодписиРаздела = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].ДатаПодписиОтчета;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0
		  ИЛИ ВРазделеТолькоДатаПодписи) Тогда
		  
			ТабличныйДокумент.Очистить();
			
			Если Раздел.ИмяСтраницы = "ФормаОтчета" Тогда
				
				Если СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
					ИмяМакетаОтчета = "ОПУ_ЕНВД";
				Иначе
					ИмяМакетаОтчета = "ОПУ_НеЕНВД";
				КонецЕсли;
				
			Иначе
				
				ИмяМакетаОтчета = Раздел.ИмяСтраницы;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяМакетаОтчета));
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			Если НЕ ТабличныйДокумент.Области.Найти("НомерКорректировки") = Неопределено Тогда
				ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
			КонецЕсли;
			Если НЕ ТабличныйДокумент.Области.Найти("ВидОтчетности") = Неопределено Тогда
				Если ВидСдачиОтчетности = 1 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
				ИначеЕсли ВидСдачиОтчетности = 2 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Промежуточная при ликвидации/реорганизации";
				ИначеЕсли ВидСдачиОтчетности = 3 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
				КонецЕсли;
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
			Если ВРазделеТолькоДатаПодписи Тогда
				// Восстановление предварительно сохраненного значения единственного
				// показателя раздела - "Даты подписи отчета".
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(
					"ДатаПодписиОтчета", ПоказательДатаПодписиРаздела);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в миллионах рублей точность не может превышать 6 знаков.'");

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета				= Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		= Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
    СтруктураРеквизитовФормы.мВариант                                   = Вариант;

	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
	КонецЕсли;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
    
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;

	// Сохраним тип адреса выводимый в отчете.
	СписокСохранения.Вставить("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	
	СписокСохранения.Вставить("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);

	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
		
	СписокСохранения.Вставить("ПрименениеЕНВД", ИспользуютсяМакетыЕНВД());
	
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СохрСоставДополнительныхСтрок = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из СоставДополнительныхСтрок Цикл
		
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			
			СтруктураСоставов = Новый Структура;
			
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				
				СтруктураСоставов.Вставить(Элемент.Ключ, РеквизитФормыВЗначение(Элемент.Значение));
			
			КонецЦикла;
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, СтруктураСоставов);
			
		Иначе	
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		
		КонецЕсли;
			
	КонецЦикла;
	
	СписокСохранения.Вставить("СоставДополнительныхСтрок", СохрСоставДополнительныхСтрок);
		
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	
	СписокСохранения.Вставить("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	СписокСохранения.Вставить("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
    		
	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;

	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногострочногоРаздела;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаРасшифровки;
	Перем Авторасчет;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// Восстанавливаем реквизиты отчета.
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// Восстанавливаем сохраненные данные отчета.
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// Данные многострочных разделов.
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			НайденноеЗначение = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппы = ЭлементСтруктуры.Ключ;
			
			Если НЕ Лев(ИмяГруппы, 7) = "П000101" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураГруппы = ЭлементСтруктуры.Значение;
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СписокСохранения.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если СохраненныйСоставДополнительныхСтрок = Неопределено Тогда
		
		СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
		
	Иначе
		
		Если ТипЗнч(СохраненныйСоставДополнительныхСтрок) = Тип("Структура")
		   И СохраненныйСоставДополнительныхСтрок.Свойство("СтруктураСоставов")
		   И СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ФормаОтчета")
		   И ТипЗнч(СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Баланс) = Тип("ДеревоЗначений") Тогда
			НайденнаяСтрока = СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета.Строки.Найти("ДопСтрока24601", "ИмяОбластиДопСтроки", Истина);
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока.Наименование = "Налоги, уплачиваемые в связи с применением специальных налоговых режимов";
			КонецЕсли;
			
		КонецЕсли;
		
		СоставДополнительныхСтрок = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
			Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
				СтруктураСоставов = Новый Структура;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					ЗначениеВРеквизитФормы(Элемент.Значение, "ДеревоНастроек" + Элемент.Ключ);
					СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
				КонецЦикла;
				
				СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
				
			Иначе
				СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство( "ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД );
	
	СписокСохранения.Свойство("Авторасчет", Авторасчет);
	Если НЕ Авторасчет = Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
									
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");

		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
		
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
		    	
	СписокСохранения.Свойство("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	Если СтруктураРеквизитовФормы.мТипАдреса = Неопределено Тогда
		СтруктураРеквизитовФормы.мТипАдреса = "ПолныйАдрПочт";
	ИначеЕсли СтрНайти(СтруктураРеквизитовФормы.мТипАдреса, "Полный") = 0 Тогда
		СтруктураРеквизитовФормы.мТипАдреса = "Полный" + СтруктураРеквизитовФормы.мТипАдреса;	
	КонецЕсли;
	
	СписокСохранения.Свойство("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	Если СтруктураРеквизитовФормы.мАдресДляВыгрузки = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мТипАдреса = "ПолныйАдрЮР" Тогда
			СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		Иначе
			СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;	
		КонецЕсли;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда	
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		НомСтр = 1;
		
		Для Каждого ДопСтрока Из ЭтаФорма[ЭлементСтруктуры.Ключ] Цикл
			
			Если Лев(ЭлементСтруктуры.Ключ, 7) = "П000101" Тогда
				ИмяТекРаздела = "Баланс";
			Иначе
				ИмяТекРаздела = "ФормаОтчета";
			КонецЕсли;
			
			Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ЭлементСтруктуры.Ключ] Цикл
				
				КолонкаТаблицыИмя = ЭлементСтруктуры.Ключ + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если ДопСтрока.Свойство(КолонкаТаблицыИмя)
				И НЕ ЗначениеЗаполнено(ДопСтрока[КолонкаТаблицыИмя]) Тогда
					
					ДопСтрока[КолонкаТаблицыИмя] = ЭтаФорма["СтруктураДанных" + ИмяТекРаздела][КолонкаТаблицыИмя + "_" + НомСтр];
				
				КонецЕсли;
				
			КонецЦикла;
			
			НомСтр = НомСтр + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИмяТекРаздела = "Баланс";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	СписокСохранения.Свойство("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере();
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере()
	
	Модифицированность = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                     СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",        СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",         СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы",    ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",       СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс", ДанныеФормыВЗначение(ДеревоНастроекБаланс, Тип("ДеревоЗначений")));
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОПУ",    ДанныеФормыВЗначение(ДеревоНастроекФормаОтчета, Тип("ДеревоЗначений")));
	ПараметрыОтчета.Вставить("ПрименениеЕНВД",                  СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей", СтруктураМногострочныхЧастей());
	
	СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
	СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
	
	Если ВидСдачиОтчетности = 1 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
	ИначеЕсли ВидСдачиОтчетности = 2 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
	КонецЕсли;
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Баланс",        СтруктураДанныхБаланс);
	Контейнер.Вставить("ФормаОтчета",   СтруктураДанныхФормаОтчета);
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Функция СтруктураМногострочныхЧастей()
	
	СтруктураМногострочныхЧастей = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение].Выгрузить();
		
		СтруктураМногострочнойЧасти = Новый Структура;
		СтруктураМногострочныхЧастей.Вставить(ИмяГруппы, СтруктураМногострочнойЧасти);
		
		СоставСтрокиМногострочнойЧасти = Новый Структура;
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			СоставСтрокиМногострочнойЧасти.Вставить(Колонка.Имя);
		КонецЦикла;
		
		СоставМногострочнойЧасти = Новый Массив;
		СоставМногострочнойЧасти.Добавить(СоставСтрокиМногострочнойЧасти);
		
		СтруктураМногострочнойЧасти.Вставить("Состав", СоставМногострочнойЧасти);
		
	КонецЦикла;
	
	Возврат СтруктураМногострочныхЧастей;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер) И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			ЭтаФорма["СтруктураДанных" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	СтруктураМСЧ = Неопределено;
	Если СтруктураДанных.Свойство("СтруктураМногострочныхЧастей", СтруктураМСЧ) И ТипЗнч(СтруктураМСЧ) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураМСЧ Цикл
			ИмяМСЧ = ЭлементСтруктуры.Ключ;
			СтрокиМСЧ = ЭлементСтруктуры.Значение.Состав;
			
			Если СтрокиМСЧ.Количество() > 0 Тогда
				ОписаниеМСЧ = ЭтотОбъект[ИмяМСЧ];
				ОписаниеМСЧ.Очистить();
				
				Для Инд = 1 По СтрокиМСЧ.Количество() Цикл
					ОписаниеМСЧ.Добавить();
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		ОчиститьНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере(НаимТекущегоРаздела = "", ОчищатьНомерКорректировки = Истина)
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
	 	СтруктураДанныхБаланс.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ФормаОтчета" Тогда
		СтруктураДанныхФормаОтчета.Очистить();
	КонецЕсли;
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		
		Если НаимТекущегоРаздела = "Баланс" И НЕ Лев(мнгРаздел.Ключ, 7) = "П000101"
		 ИЛИ НаимТекущегоРаздела = "ФормаОтчета" И Лев(мнгРаздел.Ключ, 7) = "П000101" Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
				
	КонецЦикла;
		
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда 
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			
			Если ВидСдачиОтчетности = 1 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ИначеЕсли ВидСдачиОтчетности = 2 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Промежуточная при ликвидации/реорганизации");
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
			КонецЕсли;
		ИначеЕсли ОчищатьНомерКорректировки Тогда  
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ВидСдачиОтчетности = 1;
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ОблВидОтчетности = ТабличныйДокумент.Области.Найти("ВидОтчетности");
			Если ОблВидОтчетности <> Неопределено Тогда 
				ОблВидОтчетности.Значение = "Обычная";
				ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
				ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьТабличноеПоле(НаимТекущегоРаздела);
				
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Очищаем расшифровку.
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если НЕ ПустаяСтрока(НаимТекущегоРаздела) Тогда
			Для Каждого ОбластьОтчета Из ТабличныйДокумент.Области Цикл
				Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
					Продолжить;
				КонецЕсли;
				СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ОбластьОтчета.Имя));
				Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
				КонецЦикла;
			КонецЦикла;
		Иначе
			ТаблицаРасшифровки.Очистить();
			Элементы.Расшифровать.Доступность = Ложь;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
			
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(НаимТекущегоРаздела = "")
	
	// Список ячеек, очищать которые не нужно
	Перем СписокПоказателейНеПодлежащихОчистке;

	СписокПоказателейНеПодлежащихОчистке = Новый СписокЗначений;
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргНазв");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКПО");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргОтрасль");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКВЭД");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФорма");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКОПФ");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргФормаСобств");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргКодОКФС");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргПочтАдрес");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргДиректор");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ОргБухгалтер");
	СписокПоказателейНеПодлежащихОчистке.Добавить("НомерКорректировки");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ВидОтчетности");
	СписокПоказателейНеПодлежащихОчистке.Добавить("ДатаПодписиОтчета");
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		Если СписокПоказателейНеПодлежащихОчистке.НайтиПоЗначению(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.СодержитЗначение Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", НЕ СтруктураРеквизитовФормы.ИП);
	КонецЕсли;
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма, ПараметрыОтчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс);
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
			
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ФОРМАТЕ 5 (XML)
//

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в тысячах"" или ""в миллионах"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		мДанныеОтчета = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		мДанныеОтчета = Неопределено;
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	мДанныеОтчета = Неопределено;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки501_Кв3");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьПоказателиПередВыгрузкой()
	
	Перем ЗначениеПоказателя;
	
	Разделы = Новый Массив;
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаБаланс);
	Разделы.Добавить(мДанныеОтчета.ПолеТабличногоДокументаФормаОтчета);
	
	Для Каждого Пок Из СтруктураРеквизитовФормы.ИменаПоказателейСоЗнакомПлюс Цикл
		Для Каждого ПоказателиТекущегоРаздела Из Разделы Цикл
			Если ПоказателиТекущегоРаздела.Свойство(Пок + "_1") Тогда
				НомерСтроки = 1;
				Пока ПоказателиТекущегоРаздела.Свойство(Пок + "_" + Формат(НомерСтроки, "ЧГ="), ЗначениеПоказателя) Цикл	
					Если ЗначениеПоказателя < 0 Тогда
						ПоказателиТекущегоРаздела.Вставить(Пок + "_" + Формат(НомерСтроки, "ЧГ="), -ЗначениеПоказателя);
					КонецЕсли;
					НомерСтроки = НомерСтроки + 1;
				КонецЦикла;
			ИначеЕсли ПоказателиТекущегоРаздела.Свойство(Пок, ЗначениеПоказателя) И ЗначениеПоказателя < 0 Тогда
				ПоказателиТекущегоРаздела.Вставить(Пок, -ЗначениеПоказателя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВиртуальныеСтрокиРасшифровки(Раздел, ДанныеРаздела, СоставДополнительныхСтрок, ПрименяетсяЕНВД = Ложь)

	Если Раздел = "ПолеТабличногоДокументаБаланс" Тогда
		ДеревоНастройкиСостава = ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов.Баланс];
		
		// Строки расшифровки строки 1110
		НомерСтроки = 1;
		ПрефиксВиртуальнойСтроки = "П2001001110";
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11101") Тогда
			ПрефиксСтроки = "П0001011101";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Нематериальные активы в организации");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11102") Тогда
			ПрефиксСтроки = "П0001011102";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Приобретение нематериальных активов");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		ПрефиксСтроки = "П0001011199";
		НомерСтрокиМногострочнойЧасти = 1;
		Пока ДанныеРаздела.Свойство(ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06_" + НомерСтрокиМногострочнойЧасти]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
		
		// Строки расшифровки строки 1120
		НомерСтроки = 1;
		ПрефиксВиртуальнойСтроки = "П2001001120";
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11201") Тогда
			ПрефиксСтроки = "П0001011201";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Расходы на научно-исследовательские, опытно-конструкторские и технологические работы");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока11202") Тогда
			ПрефиксСтроки = "П0001011202";
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, "Выполнение научно-исследовательских, опытно-конструкторских и технологических работ");
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		ПрефиксСтроки = "П0001011299";
		НомерСтрокиМногострочнойЧасти = 1;
		Пока ДанныеРаздела.Свойство(ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "02_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06_" + НомерСтрокиМногострочнойЧасти]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
		
		// Строки расшифровки строки 1130
		ПрефиксВиртуальнойСтроки  = "П2001001130";
		ПрефиксМногострочнойЧасти = "П0001011399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11301", "Основные средства в организации");
		СписокФиксированныхСтрок.Добавить("11302", "Объекты недвижимости, права собственности на которые не зарегистрированы");
		СписокФиксированныхСтрок.Добавить("11303", "Оборудование к установке");
		СписокФиксированныхСтрок.Добавить("11304", "Приобретение земельных участков");
		СписокФиксированныхСтрок.Добавить("11305", "Приобретение объектов природопользования");
		СписокФиксированныхСтрок.Добавить("11306", "Строительство объектов основных средств");
		СписокФиксированныхСтрок.Добавить("11307", "Приобретение объектов основных средств");
		СписокФиксированныхСтрок.Добавить("11308", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1140
		ПрефиксВиртуальнойСтроки  = "П2001001140";
		ПрефиксМногострочнойЧасти = "П0001011499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11401", "Материальные ценности в организации");
		СписокФиксированныхСтрок.Добавить("11402", "Материальные ценности предоставленные во временное владение и пользование");
		СписокФиксированныхСтрок.Добавить("11403", "Материальные ценности предоставленные во временное пользование");
		СписокФиксированныхСтрок.Добавить("11404", "Прочие доходные вложения");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1150
		ПрефиксВиртуальнойСтроки  = "П2001001150";
		ПрефиксМногострочнойЧасти = "П0001011599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11501", "Паи");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1160
		ПрефиксВиртуальнойСтроки  = "П2001001160";
		ПрефиксМногострочнойЧасти = "П0001011699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1170
		ПрефиксВиртуальнойСтроки  = "П2001001170";
		ПрефиксМногострочнойЧасти = "П0001011799";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("11701", "Перевод молодняка животных в основное стадо");
		СписокФиксированныхСтрок.Добавить("11702", "Приобретение взрослых животных");
		СписокФиксированныхСтрок.Добавить("11703", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1210
		ПрефиксВиртуальнойСтроки  = "П2001001210";
		ПрефиксМногострочнойЧасти = "П0001012199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12101", "Материалы");
		СписокФиксированныхСтрок.Добавить("12102", "Брак в производстве");
		СписокФиксированныхСтрок.Добавить("12103", "Товары отгруженные");
		СписокФиксированныхСтрок.Добавить("12104", "Товары");
		СписокФиксированныхСтрок.Добавить("12105", "Готовая продукция");
		СписокФиксированныхСтрок.Добавить("12106", "Расходы на продажу");
		СписокФиксированныхСтрок.Добавить("12107", "Выполненные этапы по незавершенным работам");
		СписокФиксированныхСтрок.Добавить("12108", "Основное производство");
		СписокФиксированныхСтрок.Добавить("12109", "Полуфабрикаты собственного производства");
		СписокФиксированныхСтрок.Добавить("12110", "Вспомогательные производства");
		СписокФиксированныхСтрок.Добавить("12111", "Обслуживающие производства и хозяйства");
		СписокФиксированныхСтрок.Добавить("12112", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1220
		ПрефиксВиртуальнойСтроки  = "П2001001220";
		ПрефиксМногострочнойЧасти = "П0001012299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12201", "НДС по приобретенным ОС");
		СписокФиксированныхСтрок.Добавить("12202", "НДС по приобретенным НМА");
		СписокФиксированныхСтрок.Добавить("12203", "НДС по приобретенным материально-производственным запасам");
		СписокФиксированныхСтрок.Добавить("12204", "НДС по приобретенным услугам");
		СписокФиксированныхСтрок.Добавить("12205", "НДС, уплаченный при ввозе товаров на территорию РФ");
		СписокФиксированныхСтрок.Добавить("12206", "НДС по товарам, реализованным по ставке 0% (экспорт)");
		СписокФиксированныхСтрок.Добавить("12207", "НДС при строительстве ОС");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1230
		ПрефиксВиртуальнойСтроки  = "П2001001230";
		ПрефиксМногострочнойЧасти = "П0001012399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12301", "Расчеты с поставщиками и подрядчиками");
		СписокФиксированныхСтрок.Добавить("12302", "Расчеты с покупателями и заказчиками");
		СписокФиксированныхСтрок.Добавить("12303", "Расчеты по налогам и сборам");
		СписокФиксированныхСтрок.Добавить("12304", "Расчеты по социальному страхованию и обеспечению");
		СписокФиксированныхСтрок.Добавить("12305", "Расчеты с подотчетными лицами");
		СписокФиксированныхСтрок.Добавить("12306", "Расчеты с персоналом по прочим операциям");
		СписокФиксированныхСтрок.Добавить("12307", "Расчеты по вкладам в уставный (складочный) капитал");
		СписокФиксированныхСтрок.Добавить("12308", "Расчеты с разными дебиторами и кредиторами");
		СписокФиксированныхСтрок.Добавить("12309", "Расходы будущих периодов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1240
		ПрефиксВиртуальнойСтроки  = "П2001001240";
		ПрефиксМногострочнойЧасти = "П0001012499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12401", "Акции");
		СписокФиксированныхСтрок.Добавить("12402", "Долговые ценные бумаги");
		СписокФиксированныхСтрок.Добавить("12403", "Предоставленные займы");
		СписокФиксированныхСтрок.Добавить("12404", "Вклады по договору простого товарищества");
		СписокФиксированныхСтрок.Добавить("12405", "Приобретенные права в рамках оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("12406", "Депозитные счета");
		СписокФиксированныхСтрок.Добавить("12407", "Депозитные счета (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1250
		ПрефиксВиртуальнойСтроки  = "П2001001250";
		ПрефиксМногострочнойЧасти = "П0001012599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12501", "Касса организации");
		СписокФиксированныхСтрок.Добавить("12502", "Операционная касса");
		СписокФиксированныхСтрок.Добавить("12503", "Касса организации (в валюте)");
		СписокФиксированныхСтрок.Добавить("12504", "Расчетные счета");
		СписокФиксированныхСтрок.Добавить("12505", "Валютные счета");
		СписокФиксированныхСтрок.Добавить("12506", "Аккредитивы");
		СписокФиксированныхСтрок.Добавить("12507", "Чековые книжки");
		СписокФиксированныхСтрок.Добавить("12508", "Прочие специальные счета");
		СписокФиксированныхСтрок.Добавить("12509", "Аккредитивы (в валюте)");
		СписокФиксированныхСтрок.Добавить("12510", "Прочие специальные счета (в валюте)");
		СписокФиксированныхСтрок.Добавить("12511", "Переводы в пути");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1260
		ПрефиксВиртуальнойСтроки  = "П2001001260";
		ПрефиксМногострочнойЧасти = "П0001012699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("12601", "Акцизы по оплаченным материальным ценностям");
		СписокФиксированныхСтрок.Добавить("12602", "Денежные документы");
		СписокФиксированныхСтрок.Добавить("12603", "Денежные документы (в валюте)");
		СписокФиксированныхСтрок.Добавить("12604", "НДС по экспорту к возмещению");
		СписокФиксированныхСтрок.Добавить("12605", "НДС по авансам и предоплатам");
		СписокФиксированныхСтрок.Добавить("12606", "НДС, начисленный по отгрузке");
		СписокФиксированныхСтрок.Добавить("12607", "Расчеты по НДС при исполнении обязанностей налогового агента");
		СписокФиксированныхСтрок.Добавить("12608", "Расходы будущих периодов");
		СписокФиксированныхСтрок.Добавить("12609", "Недостачи и потери от порчи ценностей");
		СписокФиксированныхСтрок.Добавить("12610", "Оценочные обязательства");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1310
		ПрефиксВиртуальнойСтроки  = "П2001001310";
		ПрефиксМногострочнойЧасти = "П0001013199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1320
		ПрефиксВиртуальнойСтроки  = "П2001001320";
		ПрефиксМногострочнойЧасти = "П0001013299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1340
		ПрефиксВиртуальнойСтроки  = "П2001001340";
		ПрефиксМногострочнойЧасти = "П0001013499";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13401", "Переоценка основных средств");
		СписокФиксированныхСтрок.Добавить("13402", "Переоценка НМА");
		СписокФиксированныхСтрок.Добавить("13403", "Переоценка прочих внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1350
		ПрефиксВиртуальнойСтроки  = "П2001001350";
		ПрефиксМногострочнойЧасти = "П0001013599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1360
		ПрефиксВиртуальнойСтроки  = "П2001001360";
		ПрефиксМногострочнойЧасти = "П0001013699";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("13601", "Резервы, образованные в соответствии с законодательством");
		СписокФиксированныхСтрок.Добавить("13602", "Резервы, образованные в соответствии с учредительными документами");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1370
		ПрефиксВиртуальнойСтроки  = "П2001001370";
		ПрефиксМногострочнойЧасти = "П0001013799";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1410
		ПрефиксВиртуальнойСтроки  = "П2001001410";
		ПрефиксМногострочнойЧасти = "П0001014199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("14101", "Долгосрочные кредиты");
		СписокФиксированныхСтрок.Добавить("14102", "Долгосрочные займы");
		СписокФиксированныхСтрок.Добавить("14103", "Долгосрочные кредиты (в валюте)");
		СписокФиксированныхСтрок.Добавить("14104", "Долгосрочные займы (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1420
		ПрефиксВиртуальнойСтроки  = "П2001001420";
		ПрефиксМногострочнойЧасти = "П0001014299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1450
		ПрефиксВиртуальнойСтроки  = "П2001001450";
		ПрефиксМногострочнойЧасти = "П0001014599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1510
		ПрефиксВиртуальнойСтроки  = "П2001001510";
		ПрефиксМногострочнойЧасти = "П0001015199";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15101", "Краткосрочные кредиты");
		СписокФиксированныхСтрок.Добавить("15102", "Краткосрочные займы");
		СписокФиксированныхСтрок.Добавить("15103", "Проценты по краткосрочным кредитам");
		СписокФиксированныхСтрок.Добавить("15104", "Проценты по долгосрочным кредитам");
		СписокФиксированныхСтрок.Добавить("15105", "Проценты по краткосрочным займам");
		СписокФиксированныхСтрок.Добавить("15106", "Проценты по долгосрочным займам");
		СписокФиксированныхСтрок.Добавить("15107", "Краткосрочные кредиты (в валюте)");
		СписокФиксированныхСтрок.Добавить("15108", "Краткосрочные займы (в валюте)");
		СписокФиксированныхСтрок.Добавить("15109", "Проценты по краткосрочным кредитам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15110", "Проценты по долгосрочным кредитам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15111", "Проценты по краткосрочным займам (в валюте)");
		СписокФиксированныхСтрок.Добавить("15112", "Проценты по долгосрочным займам (в валюте)");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1520
		ПрефиксВиртуальнойСтроки  = "П2001001520";
		ПрефиксМногострочнойЧасти = "П0001015299";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15201", "Расчеты с поставщиками и подрядчиками");
		СписокФиксированныхСтрок.Добавить("15202", "Расчеты с покупателями и заказчиками");
		СписокФиксированныхСтрок.Добавить("15203", "Расчеты по налогам и сборам");
		СписокФиксированныхСтрок.Добавить("15204", "Расчеты по социальному страхованию и обеспечению");
		СписокФиксированныхСтрок.Добавить("15205", "Расчеты с персоналом по оплате труда");
		СписокФиксированныхСтрок.Добавить("15206", "Расчеты с подотчетными лицами");
		СписокФиксированныхСтрок.Добавить("15207", "Задолженность участникам (учредителям) по выплате доходов");
		СписокФиксированныхСтрок.Добавить("15208", "Расчеты с разными дебиторами и кредиторами");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1530
		ПрефиксВиртуальнойСтроки  = "П2001001530";
		ПрефиксМногострочнойЧасти = "П0001015399";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("15301", "Целевое финансирование");
		СписокФиксированныхСтрок.Добавить("15302", "Доходы, полученные в счет будущих периодов");
		СписокФиксированныхСтрок.Добавить("15303", "Безвозмездные поступления");
		СписокФиксированныхСтрок.Добавить("15304", "Предстоящие поступления по недостачам, выявленным за прошлые годы");
		СписокФиксированныхСтрок.Добавить("15305", "Разница между суммой, подлежащей взысканию с виновных лиц, и балансовой стоимостью по недостачам ценностей");
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 1550
		ПрефиксВиртуальнойСтроки  = "П2001001550";
		ПрефиксМногострочнойЧасти = "П0001015599";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
	КонецЕсли;
	
	Если Раздел = "ПолеТабличногоДокументаФормаОтчета" Тогда
		
		ДеревоНастройкиСостава = ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета];
		
		// Строки расшифровки строки 2110
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002110";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21101", "Выручка по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21102", "Выручка по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002110";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2110"), "П1001002110", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2120
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002120";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21201", "Себестоимость продаж по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21202", "Себестоимость продаж по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002120";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2120"), "П1001002120", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2100
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002100";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("21001", "Валовая прибыль (убыток) по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("21002", "Валовая прибыль (убыток) по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002100";
			ПрефиксМногострочнойЧасти = "П1001002100";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2210
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002210";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22101", "Коммерческие расходы по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22102", "Коммерческие расходы по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002210";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2210"), "П1001002210", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2220
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002220";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22201", "Управленческие расходы по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22202", "Управленческие  расходы по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002220";
			ПрефиксМногострочнойЧасти = ?(ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока2220"), "П1001002220", "");
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2200
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002200";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("22001", "Прибыль (убыток) от продаж по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("22002", "Прибыль (убыток) от продаж по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002200";
			ПрефиксМногострочнойЧасти = "П1001002200";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2310
		ПрефиксВиртуальнойСтроки  = "П2001002310";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23101", "Доходы (расходы), связанные с участием в других организациях");
		СписокФиксированныхСтрок.Добавить("23102", "Долевое участие в иностранных организациях");
		СписокФиксированныхСтрок.Добавить("23103", "Долевое участие в российских организациях");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2320
		ПрефиксВиртуальнойСтроки  = "П2001002320";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23201", "Проценты к получению");
		СписокФиксированныхСтрок.Добавить("23202", "Проценты по государственным ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23203", "Проценты по государственным ценным бумагам по ставке 0%");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2330
		ПрефиксВиртуальнойСтроки  = "П2001002330";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23301", "Проценты к уплате");
		СписокФиксированныхСтрок.Добавить("23302", "Проценты, начисленные в соответствии со статьей 269 НК РФ");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2340
		ПрефиксВиртуальнойСтроки  = "П2001002340";
		ПрефиксМногострочнойЧасти = "П1001002340";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23401", "Доходы, связанные с реализацией основных средств");
		СписокФиксированныхСтрок.Добавить("23402", "Доходы, связанные с ликвидацией основных средств");
		СписокФиксированныхСтрок.Добавить("23403", "Доходы, связанные с реализацией нематериальных активов");
		СписокФиксированныхСтрок.Добавить("23404", "Доходы, связанные с реализацией прочего имущества");
		СписокФиксированныхСтрок.Добавить("23405", "Доходы, связанные с реализацией права требования как оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("23406", "Доходы, связанные с реализацией права до наступления платежа");
		СписокФиксированныхСтрок.Добавить("23407", "Доходы, связанные с реализацией права после наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23408", "Доходы, связанные с реализацией имущественных прав, кроме права требования");
		СписокФиксированныхСтрок.Добавить("23409", "Доходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
		СписокФиксированныхСтрок.Добавить("23410", "Доходы, связанные с реализацией ценных бумаг");
		СписокФиксированныхСтрок.Добавить("23411", "Доходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23412", "Доходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23413", "Доходы, связанные со сдачей имущества в аренду (субаренду)");
		СписокФиксированныхСтрок.Добавить("23414", "Доходы в виде восстановленных оценочных резервов");
		СписокФиксированныхСтрок.Добавить("23415", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23416", "Прочие операционные доходы");
		СписокФиксированныхСтрок.Добавить("23417", "Штрафы, пени, неустойки к получению");
		СписокФиксированныхСтрок.Добавить("23418", "Прибыль прошлых лет");
		СписокФиксированныхСтрок.Добавить("23419", "Возмещение убытков к получению");
		СписокФиксированныхСтрок.Добавить("23420", "Курсовые разницы");
		СписокФиксированныхСтрок.Добавить("23421", "Курсовые разницы по расчетам в у.е.");
		СписокФиксированныхСтрок.Добавить("23422", "Доходы в виде списанной кредиторской задолженности");
		СписокФиксированныхСтрок.Добавить("23423", "Доходы, связанные с переоценкой внеоборотных активов");
		СписокФиксированныхСтрок.Добавить("23424", "Прочие внереализационные доходы");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2350
		ПрефиксВиртуальнойСтроки  = "П2001002350";
		ПрефиксМногострочнойЧасти = "П1001002350";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("23501", "Расходы, связанные с участием в других организациях");
		СписокФиксированныхСтрок.Добавить("23502", "Расходы, связанные с участием в российских организациях");
		СписокФиксированныхСтрок.Добавить("23503", "Расходы, связанные с участием в иностранных организациях");
		СписокФиксированныхСтрок.Добавить("23504", "Расходы, связанные с реализацией основных средств");
		СписокФиксированныхСтрок.Добавить("23505", "Расходы, связанные с ликвидацией основных средств");
		СписокФиксированныхСтрок.Добавить("23506", "Расходы, связанные с реализацией нематериальных активов");
		СписокФиксированныхСтрок.Добавить("23507", "Расходы, связанные с реализацией прочего имущества");
		СписокФиксированныхСтрок.Добавить("23508", "Расходы, связанный с реализацией права требования как оказания финансовых услуг");
		СписокФиксированныхСтрок.Добавить("23509", "Расходы, связанные с реализацией права требования до наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23510", "Расходы, связанные с реализацией права требования после наступления срока платежа");
		СписокФиксированныхСтрок.Добавить("23511", "Расходы, связанные с реализацией имущественных прав, кроме права требования");
		СписокФиксированныхСтрок.Добавить("23512", "Расходы, связанные с реализацией имущественных прав по объектам обслуживающих производств и хозяйств");
		СписокФиксированныхСтрок.Добавить("23513", "Расходы, связанные с реализацией ценных бумаг");
		СписокФиксированныхСтрок.Добавить("23514", "Расходы по операциям с финансовыми инструментами срочных сделок, не обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23515", "Расходы по операциям с финансовыми инструментами срочных сделок, обращающимися на организованном рынке");
		СписокФиксированныхСтрок.Добавить("23516", "Расходы, связанные со сдачей имущества в аренду (субаренду)");
		СписокФиксированныхСтрок.Добавить("23517", "Расходы в виде образованных оценочных резервов");
		СписокФиксированныхСтрок.Добавить("23518", "Разница между первоначальной и номинальной стоимостью по долговым ценным бумагам");
		СписокФиксированныхСтрок.Добавить("23519", "Расходы на услуги банков");
		СписокФиксированныхСтрок.Добавить("23520", "Прочие операционные расходы");
		СписокФиксированныхСтрок.Добавить("23521", "Штрафы, пени, неустойки к уплате");
		СписокФиксированныхСтрок.Добавить("23522", "Убытки прошлых лет");
		СписокФиксированныхСтрок.Добавить("23523", "Курсовые разницы");
		СписокФиксированныхСтрок.Добавить("23524", "Курсовые разницы по расчетам в у.е.");
		СписокФиксированныхСтрок.Добавить("23525", "Налоги и сборы");
		СписокФиксированныхСтрок.Добавить("23526", "Премия, выплаченная покупателю");
		СписокФиксированныхСтрок.Добавить("23527", "Расходы в виде списанной дебиторской задолженности");
		СписокФиксированныхСтрок.Добавить("23528", "Расходы, связанные с безвозмездным получением имущества, работ, услуг или имущественных прав");
		СписокФиксированныхСтрок.Добавить("23529", "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд");
		СписокФиксированныхСтрок.Добавить("23530", "Прочие внереализационные расходы");
		СписокФиксированныхСтрок.Добавить("23531", "Прочие косвенные расходы");
		СписокФиксированныхСтрок.Добавить("23532", "Расходы, связанные с переоценкой внеоборотных активов");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2300
		Если ПрименяетсяЕНВД Тогда
			ПрефиксВиртуальнойСтроки  = "П2001002300";
			ПрефиксМногострочнойЧасти = "";
			СписокФиксированныхСтрок = Новый СписокЗначений;
			СписокФиксированныхСтрок.Добавить("23001", "Прибыль (убыток) до налогообложения по деятельности с основной системой налогообложения");
			СписокФиксированныхСтрок.Добавить("23002", "Прибыль (убыток) до налогообложения по отдельным видам деятельности (ЕНВД)");
		Иначе
			ПрефиксВиртуальнойСтроки  = "П2001002300";
			ПрефиксМногострочнойЧасти = "П1001002300";
			СписокФиксированныхСтрок = Новый СписокЗначений;
		КонецЕсли;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2421
		ПрефиксВиртуальнойСтроки  = "П2001002421";
		ПрефиксМногострочнойЧасти = "П1001002421";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2430
		ПрефиксВиртуальнойСтроки  = "П2001002430";
		ПрефиксМногострочнойЧасти = "П1001002430";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2450
		ПрефиксВиртуальнойСтроки  = "П2001002450";
		ПрефиксМногострочнойЧасти = "П1001002450";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2460
		ПрефиксВиртуальнойСтроки  = "П2001002460";
		ПрефиксМногострочнойЧасти = "П1001002460";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("24601", "Налоги, уплачиваемые в связи с применением специальных налоговых режимов");
		СписокФиксированныхСтрок.Добавить("24602", "Штрафные санкции и пени за нарушение налогового и иного законодательства");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
		// Строки расшифровки строки 2510
		ПрефиксВиртуальнойСтроки  = "П2001002510";
		ПрефиксМногострочнойЧасти = "";
		СписокФиксированныхСтрок = Новый СписокЗначений;
		СписокФиксированныхСтрок.Добавить("25101", "Результат от переоценки основных средств, не включаемый в чистую прибыль (убыток) периода");
		СписокФиксированныхСтрок.Добавить("25102", "Результат от переоценки нематериальных активов, не включаемый в чистую прибыль (убыток) периода");
		ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СписокФиксированныхСтрок, ПрефиксМногострочнойЧасти);
		
	КонецЕсли;
	
	Возврат ДанныеРаздела; 
	
КонецФункции

&НаСервере
Процедура ВнестиВиртуальныеСтрокиРасшифровкиБаланс(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)

	НомерСтроки = 1;
	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "06"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	НомерСтрокиМногострочнойЧасти = 1;
	Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
		Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + НомерСтрокиМногострочнойЧасти]);
			ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "06_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "06_" + НомерСтрокиМногострочнойЧасти]);
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
		НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиВиртуальныеСтрокиРасшифровкиФормаОтчета(ДанныеРаздела, ДеревоНастройкиСостава, ПрефиксВиртуальнойСтроки, СтруктураФиксированныхСтрок = Неопределено, ПрефиксМногострочнойЧасти)
	
	НомерСтроки = 1;
	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Значение;
			НаименованиеСтроки = ФиксированнаяСтрока.Представление;
			ПрефиксСтроки = "П00010" + КодСтроки;
			Если ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока" + КодСтроки) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, НаименованиеСтроки);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "04"]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксСтроки + "05"]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Если Не ПустаяСтрока(ПрефиксМногострочнойЧасти) Тогда
		НомерСтрокиМногострочнойЧасти = 1;
		
		Пока ДанныеРаздела.Свойство(ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти) Цикл
			Если Не ПустаяСтрока(ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]) Тогда
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "02_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "02_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "04_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "04_" + НомерСтрокиМногострочнойЧасти]);
				ДанныеРаздела.Вставить(ПрефиксВиртуальнойСтроки + "05_" + НомерСтроки, ДанныеРаздела[ПрефиксМногострочнойЧасти + "05_" + НомерСтрокиМногострочнойЧасти]);
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			НомерСтрокиМногострочнойЧасти = НомерСтрокиМногострочнойЧасти + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	ПрименяетсяЕНВД = СохрСтруктура.ПрименениеЕНВД;
		
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		// Подмена строк расшифровки виртуальной многострочной частью
		ЗначенияРаздела = ПолучитьВиртуальныеСтрокиРасшифровки(Раздел.Ключ, Раздел.Значение, СоставДополнительныхСтрок, ПрименяетсяЕНВД);
		мДанныеОтчета.Вставить(Раздел.Ключ, ЗначенияРаздела);
	КонецЦикла;
	
	ОбработатьПоказателиПередВыгрузкой();
	
	АдресДляВыгрузки = "";
	Если ПустаяСтрока(ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргПочтАдрес) Тогда
		мАдресДляВыгрузки = "";
	ИначеЕсли НЕ СохрСтруктура.Свойство("Адрес9Запятых", АдресДляВыгрузки) ИЛИ НЕ ЗначениеЗаполнено(АдресДляВыгрузки) Тогда
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР, АдрПочт");
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			АдрЮР = "";
		Иначе
			АдрЮР = Адреса.АдрЮР;
		КонецЕсли;
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			АдрПочт = "";
		Иначе
			АдрПочт = Адреса.АдрПочт;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдрПочт) Тогда
			АдресДляВыгрузки = АдрПочт;
		Иначе
			АдресДляВыгрузки = АдрЮР;
		КонецЕсли;
	КонецЕсли;
	мДанныеОтчета.Вставить("АдресДляВыгрузки", АдресДляВыгрузки);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ВидСдачиОтчетности; // переопределяем переменную для восстановления вида отчетности из сведений сохраненного документа
	
	Титульный = мДанныеОтчета.ПолеТабличногоДокументаБаланс;
	
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода = Новый Соответствие;
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(3, "21");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(6, "31");
	СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода.Вставить(9, "33");
	
	СоответствиеЕдиницыИзмеренияСдвигу = Новый Соответствие;
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000000, 6);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1000, 3);
	СоответствиеЕдиницыИзмеренияСдвигу.Вставить(Перечисления.ПорядкиОкругленияОтчетности.Окр1, 0);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",      "0710099");
	ПараметрыВыгрузки.Вставить("ДатаДок",  Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	
	// Для промежуточного и ликвидационного баланса период определяется другими кодами
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Если СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности) Тогда
		Если ВидСдачиОтчетности = 2 Тогда
			// промежуточная отчетность при ликвидации/реорганизации
			ПараметрыВыгрузки.Вставить("Период", "94");
		ИначеЕсли ВидСдачиОтчетности = 3 Тогда
			// ликвидационная отчетность
			ПараметрыВыгрузки.Вставить("Период", "90");
		Иначе
			// обычная отчетность
			ПараметрыВыгрузки.Вставить("Период", СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)]);
		КонецЕсли;
	Иначе
		ПараметрыВыгрузки.Вставить("Период", СоответствиеМесяцаОкончанияПериодаОтчетаПризнакуПериода[Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания)]);
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ОтчетГод",			Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ВидДок",			""); //показатель выгружается только для годовых отчетов, перед выгрузкой будет удален
	ПараметрыВыгрузки.Вставить("НаимОрг",			СокрЛП(Титульный.ОргНазв));
	ПараметрыВыгрузки.Вставить("ИННОрг",			СокрЛП(Титульный.ОргИНН));
	ПараметрыВыгрузки.Вставить("КППОрг", 			СокрЛП(СтруктураРеквизитовФормы.Организация.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНС",			СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	// различные коды
	ПараметрыВыгрузки.Вставить("ОКПО",				СокрЛП(Титульный.ОргКодОКПО));
	ПараметрыВыгрузки.Вставить("ОКВЭД",				СокрЛП(Титульный.ОргКодОКВЭД));
	ПараметрыВыгрузки.Вставить("ОКОПФ",				СокрЛП(Титульный.ОргКодОКОПФ));
	ПараметрыВыгрузки.Вставить("ОКФС",				СокрЛП(Титульный.ОргКодОКФС));
	ПараметрыВыгрузки.Вставить("ОКЕИ",				СокрЛП(Титульный.КодЕИ));
	
	// ОКУД
	ПараметрыВыгрузки.Вставить("ОКУД1",				"0710001");
	ПараметрыВыгрузки.Вставить("ОКУД2",				"0710002");
	
	// определяем форматную строку, используемую для получения суммовых значений, помещаемых в файл выгрузки
	ПараметрыВыгрузки.Вставить("ФорматВывода",		"ЧДЦ=0; ЧН=0; ЧС=" + СоответствиеЕдиницыИзмеренияСдвигу[СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения]);
	
	// ФИО руководителя
	ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргДиректор);
	ПараметрыВыгрузки.Вставить("ФамилияРук",  СокрЛП(ФИОРук.Фамилия));
	ПараметрыВыгрузки.Вставить("ИмяРук",      СокрЛП(ФИОРук.Имя));
	ПараметрыВыгрузки.Вставить("ОтчествоРук", СокрЛП(ФИОРук.Отчество));
	
	// ФИО главного бухгалтера
	ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргБухгалтер);
	ПараметрыВыгрузки.Вставить("ФамилияБух",  СокрЛП(ФИОБух.Фамилия));
	ПараметрыВыгрузки.Вставить("ИмяБух",      СокрЛП(ФИОБух.Имя));
	ПараметрыВыгрузки.Вставить("ОтчествоБух", СокрЛП(ФИОБух.Отчество));
	
	// телефон
	ПараметрыВыгрузки.Вставить("ТелОрг", РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.мСохраненныйДок.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ТелОрганизации").ТелОрганизации);
	
	// адрес
	СтруктураАдреса = РегламентированнаяОтчетностьКлиентСервер.РазложитьАдрес(мДанныеОтчета.АдресДляВыгрузки);
	ПараметрыВыгрузки.Вставить("АдрИндекс",     СокрЛП(СтруктураАдреса.Индекс));
	ПараметрыВыгрузки.Вставить("АдрКодРегион",  РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(СокрЛП(СтруктураАдреса.Регион)));
	ПараметрыВыгрузки.Вставить("АдрРегион",     СокрЛП(СтруктураАдреса.Регион));
	ПараметрыВыгрузки.Вставить("АдрРайон",      СокрЛП(СтруктураАдреса.Район));
	ПараметрыВыгрузки.Вставить("АдрГород",      СокрЛП(СтруктураАдреса.Город));
	ПараметрыВыгрузки.Вставить("АдрНаселПункт", СокрЛП(СтруктураАдреса.НаселенныйПункт));
	ПараметрыВыгрузки.Вставить("АдрУлица",      СокрЛП(СтруктураАдреса.Улица));
	ПараметрыВыгрузки.Вставить("АдрДом",        СокрЛП(СтруктураАдреса.Дом));
	ПараметрыВыгрузки.Вставить("АдрКорпус",     СокрЛП(СтруктураАдреса.Корпус));
	ПараметрыВыгрузки.Вставить("АдрКварт",      СокрЛП(СтруктураАдреса.Квартира));
	
	ПараметрыВыгрузки.Вставить("ВерсФорм",		"5.01");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_BUHOTCH");
	
	// формируем ИдФайл на основании значений других параметров
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));
		
	Возврат ПараметрыВыгрузки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	СтатусПроверки = Истина;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КодИФНС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан код ИФНС, необходимый для формирования имени файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.КППОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "В справочнике ""Организации"" для текущей организации не задан КПП, необходимый для формирования корректного файла выгрузки!", "Баланс");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.НаимОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На указано полное наименование организации!", "Баланс", "ОргНазв");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Формат выгрузки допускает выгрузку отчетов только за I квартал, полугодие, 9 месяцев!", "Баланс", "ДатаБаланса");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан ИНН организации!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ПараметрыВыгрузки.ИННОрг, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный ИНН юридического лица!", "Баланс", "ОргИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияРук) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяРук) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя руководителя!", "Баланс", "ОргДиректор");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ФамилияБух) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить фамилию главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ИмяБух) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не удалось определить имя главного бухгалтера!", "Баланс", "ОргБухгалтер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ОКПО) И (СтрДлина(ПараметрыВыгрузки.ОКПО) < 8 ИЛИ СтрДлина(ПараметрыВыгрузки.ОКПО) > 10 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКПО)) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "На титульном листе задан некорректный код по ОКПО!", "Баланс", "ОргКодОКПО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не указано значение кода вида деятельности по ОКВЭД!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Указано некорректное значение кода вида деятельности по ОКВЭД! Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).!", "Баланс", "ОргКодОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКОПФ) <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКОПФ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКОПФ!", "Баланс", "ОргКодОКОПФ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКФС) <> 2 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКФС) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКФС!", "Баланс", "ОргКодОКФС");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.ОКЕИ) <> 3 ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ОКЕИ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Задан некорректный код по ОКЕИ!", "Баланс", "КодЕИ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдрКодРегион) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Требуется указание как минимум кода региона в адресе!", "Баланс", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
		
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки); // заполняем дерево данными
	
	ПостобработкаДереваВыгрузки(ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		УзелПуст = УзелПуст(Узел);
		Если УзелПуст Тогда
			Если СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0 Тогда // учтем оба варианта: кириллицу и латиницу
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
				РегламентированнаяОтчетность.УдалитьУзел(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
						   
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));			   
				   
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметровПрочиеОтчеты(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие, "Баланс") Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйКлючВПодчиненииКУзлу(Узел)
	
	Если ЗначениеЗаполнено(Узел.Ключ) Тогда
		Возврат Узел.Ключ;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		КлючВПодчинении = ПолучитьПервыйКлючВПодчиненииКУзлу(Стр);
		Если ЗначениеЗаполнено(КлючВПодчинении) Тогда
			Возврат КлючВПодчинении;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Узел)
	
	ПервыйКлюч = ПолучитьПервыйКлючВПодчиненииКУзлу(Узел);
	Если ЗначениеЗаполнено(ПервыйКлюч) Тогда
		НомерСтроки = 1;
		Пока ПараметрыВыгрузки.Свойство(ПервыйКлюч + "_" + Формат(НомерСтроки, "ЧГ=")) Цикл	
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		Возврат НомерСтроки - 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗначениеПериведенноеКЕдиницеИзмерения(Значение, ПараметрыВыгрузки)
	
	Возврат Число(Формат(Значение, ПараметрыВыгрузки.ФорматВывода));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	МассивУзлов = Новый Массив;
	Для Каждого Ед Из Узел.Строки Цикл
		МассивУзлов.Добавить(Ед);
	КонецЦикла;
	
	Для Каждого Стр из МассивУзлов Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многострочность Тогда
				КоличествоСтрок = ОпределитьКоличествоСтрокМногострочнойЧасти(ПараметрыВыгрузки, Стр);
				Для НомСтр = 1 По КоличествоСтрок Цикл
					НовыйУзел = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, НовыйУзел, НомСтр);
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ИмяСвойства = Стр.Ключ + ?(НомерСтроки = Неопределено, "", "_" + Формат(НомерСтроки, "ЧГ="));
					Если ПараметрыВыгрузки.Свойство(ИмяСвойства) Тогда
						ЗначениеСвойства = ПараметрыВыгрузки[ИмяСвойства];
						Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
							ВывестиПоказательВXML(Стр, ЗначениеСвойства);
						Иначе
							ВывестиПоказательВXML(Стр, ЗначениеПериведенноеКЕдиницеИзмерения(ЗначениеСвойства, ПараметрыВыгрузки));
						КонецЕсли;
					Иначе
						Стр.Значение = ?(Стр.Формат = "N", "0", "");
					КонецЕсли;
				Иначе
					Стр.Значение = ?(Стр.Формат = "N", "0", "");
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Баланс", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Баланс", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, СтрНайти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
    	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();

	СтруктураПараметров = Новый Структура;
	СтруктураРеквизитовФормы.мРежимПечати = Истина;

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
			
	ВывестиМакетВТаблДокНаСервере("Баланс", 0);
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
				
		Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня1);

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если СтрокаУровня1.ПолучитьЭлементы().Количество() > 0 Тогда

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.ПолучитьЭлементы() Цикл
				Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня2);

				ИмяСтраницыПанели  = СтрокаУровня2.ИмяСтраницы;
				НаименованиеЛиста  = СтрокаУровня2.Представление;
				ОриентацияЛиста    = СтрокаУровня2.ОриентацияСтраницы;
				ИмяОбластиТаблПоля = СтрокаУровня2.ИмяОбластиТабличногоПоля;
				
				Если СтрокаУровня2.ПолучитьЭлементы().Количество() > 0 Тогда
					Для Каждого СтрокаУровня3 Из СтрокаУровня2.ПолучитьЭлементы() Цикл

						Пометка = РегламентированнаяОтчетность.ПечататьРаздел(ЭтаФорма, СтрокаУровня3);
						Если Пометка = 0 Тогда
							Продолжить;
						КонецЕсли;

						ИмяСтраницыПанели  = СтрокаУровня3.ИмяСтраницы;
						НаименованиеЛиста  = СтрокаУровня3.Представление;
						ОриентацияЛиста    = СтрокаУровня3.ОриентацияСтраницы;
						ИмяОбластиТаблПоля = СтрокаУровня3.ИмяОбластиТабличногоПоля;

						СтруктураПараметров.Очистить();
						СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
						СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
						Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
						СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
						СтруктураПараметров.Вставить("ИмяСтраницы",	       ИмяСтраницыПанели);
												
						ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
						
						Если ЭтаФорма["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
							
							ЗаполнитьСведенияОбОрганизацииНаСервере();
							ПоказатьПериод(ИмяСтраницыПанели);

							Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
								ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
							КонецЕсли;
							
						КонецЕсли;	
							
						ВывестиНаПечатьЛист(СтруктураПараметров);
						
					КонецЦикла;

					Продолжить;

				КонецЕсли;

				Если Пометка = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПараметров.Очистить();
				СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
				СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
				Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
				СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				СтруктураПараметров.Вставить("ИмяСтраницы",	       ИмяСтраницыПанели);
                				
				ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
				
				Если ЭтаФорма["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
					
					ЗаполнитьСведенияОбОрганизацииНаСервере();
					ПоказатьПериод(ИмяСтраницыПанели);

					Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
						ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
					КонецЕсли;
					
				КонецЕсли;	
				
				ВывестиНаПечатьЛист(СтруктураПараметров);
				
			КонецЦикла;

			Продолжить;

		КонецЕсли;

		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяСтраницы",	       ИмяСтраницыПанели);
        		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтаФорма["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			ПоказатьПериод(ИмяСтраницыПанели);

			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;	
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, Ложь, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл 
		УдалитьНенужноеИзПечатнойФормы(ПолучитьИзВременногоХранилища(Лист.Значение[0]));
	КонецЦикла;
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировки");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = 0;
		Обл1.Формат = "";
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировкиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетности");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = "";
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетностиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("ОрганизацииДляЗаполненияОтчета");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	Обл1 = ПечатнаяФорма.Области.Найти("НастройкаСоставаСтрок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл
		Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Ложь Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Пока Истина Цикл 
		НадоПрервать = Истина;
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл
			Если СтрНайти(Обл.Имя, "ДобавлениеСтроки_") = 1 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда 
				ПечатнаяФорма.УдалитьОбласть(Обл, ТипСмещенияТабличногоДокумента.ПоВертикали);
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл
			Если СтрНайти(Обл.Имя, "ДобавитьСтроку") = 1 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
				ОблМод = ПечатнаяФорма.Область(Обл.Верх,,Обл.Низ);
				ПечатнаяФорма.УдалитьОбласть(ОблМод, ТипСмещенияТабличногоДокумента.ПоВертикали);
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НадоПрервать Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1)
	
	МассивСкрытыхОбластей = Новый Массив;
	
	// Скрываем области макетов отчетов, не предназначенные для вывода
	Если Парам1.ИмяСтраницы = "Баланс" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюБаланс();
	ИначеЕсли Парам1.ИмяСтраницы = "ФормаОтчета" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюФормаОтчета();
	КонецЕсли;
		
	Если Парам1.ИмяСтраницы = "ФормаПечатиБаланс" Тогда
		ВывестиНаПечатьЛистБаланс(Парам1);
	ИначеЕсли Парам1.ИмяСтраницы = "ФормаПечатиФормаОтчета" Тогда
		ВывестиНаПечатьЛистФормаОтчета(Парам1);
	Иначе
		ВывестиНаПечатьЛистОбщая(Парам1);
	КонецЕсли;
		
	// Восстанавливаем скрытые области после формирования листов
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Истина;
	КонецЦикла;
	
	Если Парам1.ИмяСтраницы = "ФормаОтчета" Тогда
		УстановитьВидимостьПолейПоПБУ18();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СкрытьОбластиПередПечатьюБаланс()
	
	МассивСкрытыхОбластей = Новый Массив;
	ДеревоНастройкиСостава = ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов.Баланс];
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс11199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11199"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс11299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11299"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11301, ДопСтрока11302, ДопСтрока11303, ДопСтрока11304, ДопСтрока11305, ДопСтрока11306, ДопСтрока11307, ДопСтрока11308");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс11399;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11399"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11401, ДопСтрока11402, ДопСтрока11403, ДопСтрока11404");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс11499;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11499"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11501");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс11599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11599"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс11699;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11699"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701, ДопСтрока11702, ДопСтрока11703");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс11799;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока11799"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105, 
															 |ДопСтрока12106, ДопСтрока12107, ДопСтрока12108, ДопСтрока12109, ДопСтрока12110, 
															 |ДопСтрока12111, ДопСтрока12112");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс12199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12199"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205, 
															 |ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс12299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12299"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305, 
															 |ДопСтрока12306, ДопСтрока12307, ДопСтрока12308, ДопСтрока12309");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс12399;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12399"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405, 
															 |ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс12499;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12499"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505, 
															 |ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510, 
															 |ДопСтрока12511");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс12599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12599"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, ДопСтрока12605, 
															 |ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс12699;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока12699"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс13199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13199"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс13299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13299"]);
	КонецЕсли;
	
	// Строка 1340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс13499;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13499"]);
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс13599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13599"]);
	КонецЕсли;
	
	// Строка 1360
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс13699;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13699"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс13799;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока13799"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс14199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока14199"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс14299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока14299"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс14599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока14599"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105, 
															 |ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110, 
															 |ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс15199;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15199"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205, 
															 |ДопСтрока15206, ДопСтрока15207, ДопСтрока15208");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс15299;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15299"]);
	КонецЕсли;
	
	// Строка 1530
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс15399;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15399"]);
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдБаланс15599;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока15599"]);
	КонецЕсли;
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция СкрытьОбластиПередПечатьюФормаОтчета()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ДеревоНастройкиСостава = ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета];

	Если НЕ ИспользуютсяМакетыЕНВД() Тогда
		
		// Строка 2100
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02100;
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2100"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2100"]);
		КонецЕсли;
	
		// Строка 2200
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02200;
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2200"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2200"]);
		КонецЕсли;
	
		// Строка 2300
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02300;
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2300"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2300"]);
		КонецЕсли;
	
	КонецЕсли;
	
	// Строка 2310
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23101, ДопСтрока23102, ДопСтрока23103");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2310"]);
	КонецЕсли;
	
	// Строка 2320
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23201, ДопСтрока23202, ДопСтрока23203");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2320"]);
	КонецЕсли;
	
	// Строка 2330
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23301, ДопСтрока23302");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2330"]);
	КонецЕсли;
	
	// Строка 2340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23401, ДопСтрока23402, ДопСтрока23403, ДопСтрока23404, ДопСтрока23405, 
															 |ДопСтрока23406, ДопСтрока23407, ДопСтрока23408, ДопСтрока23409, ДопСтрока23410, 
															 |ДопСтрока23411, ДопСтрока23412, ДопСтрока23413, ДопСтрока23414, ДопСтрока23415, 
															 |ДопСтрока23416, ДопСтрока23417, ДопСтрока23418, ДопСтрока23419, ДопСтрока23420, 
															 |ДопСтрока23421, ДопСтрока23422, ДопСтрока23423, ДопСтрока23424");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02340;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2340"]);
	КонецЕсли;
	
	// Строка 2350
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23501, ДопСтрока23502, ДопСтрока23503, ДопСтрока23504, ДопСтрока23505, 
															 |ДопСтрока23506, ДопСтрока23507, ДопСтрока23508, ДопСтрока23509, ДопСтрока23510, 
															 |ДопСтрока23511, ДопСтрока23512, ДопСтрока23513, ДопСтрока23514, ДопСтрока23515, 
															 |ДопСтрока23516, ДопСтрока23517, ДопСтрока23518, ДопСтрока23519, ДопСтрока23520, 
															 |ДопСтрока23521, ДопСтрока23522, ДопСтрока23523, ДопСтрока23524, ДопСтрока23525, 
															 |ДопСтрока23526, ДопСтрока23527, ДопСтрока23528, ДопСтрока23529, ДопСтрока23530, 
															 |ДопСтрока23521, ДопСтрока23532");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02350;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2350"]);
	КонецЕсли;
	
	// Строка 2421
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02421;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2421"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2421"]);
	КонецЕсли;
	
	// Строка 2430
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02430;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2430"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2430"]);
	КонецЕсли;
	
	// Строка 2450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02450;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2450"]);
	КонецЕсли;
	
	// Строка 2460
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока24601, ДопСтрока24602");
	МногострочнаяЧасть = СтруктураРеквизитовФормы.мИдФормаОтчета02460;
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2460"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2460"]);
	КонецЕсли;
	
	// Строка 2510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока25101, ДопСтрока25102");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2510"]);
	КонецЕсли;
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрок, МногострочнаяЧасть)

	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Ключ;
			Если ВключенВОтчет(ДеревоНастройкиСостава, КодСтроки) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Возврат ОтображатьМногострочнуюЧасть(МногострочнаяЧасть);
	
КонецФункции

&НаСервере
Функция ОтображатьМногострочнуюЧасть(МногострочнаяЧасть)
	
	Если НЕ ПустаяСтрока(МногострочнаяЧасть) Тогда
		ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[МногострочнаяЧасть];
		
		ТаблицаМногострочногоРаздела = ЭтаФорма[ТаблицаМногострочногоРаздела];
		
		Если ТаблицаМногострочногоРаздела.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
			
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[МногострочнаяЧасть] Цикл
			
			КолонкаТаблицыИмя = МногострочнаяЧасть + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если ТаблицаМногострочногоРаздела[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				Если ЗначениеЗаполнено(ТабличныйДокумент.Области[КолонкаТаблицыИмя + "_1"].Значение) Тогда
					Возврат Истина;
				КонецЕсли;
												
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛистОбщая(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");

	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);	
	
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(ИмяЛиста);
	НомЛиста = 0;
	
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
						
		СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", ПолучитьКартуМногострочныхСекцийЛиста(Стр.Верх, Стр.Низ));
			
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста);
		
		Для Каждого Эл Из ПечатныеЛисты Цикл
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Эл.Значение, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКартуЛистовРаздела(ИмяРаздела)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	КолСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТабличныйДокумент.Область(Сч, , Сч, ).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	
	Возврат Карта;
	
КонецФункции

&НаСервере
Функция	ПолучитьКартуМногострочныхСекцийЛиста(Верх, Низ)
	
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТабличныйДокумент.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И СтрНайти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
		Возврат СписокПечатныхФорм;
	КонецЕсли;

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(ИмяРаздела, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(ИмяРаздела, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(ИмяРаздела, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	флПрервать = Ложь;
	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;//?(Ном = 1, ПустыеСтрокиМногострочныхЧастей[НомерМнЧ], ПустойТабличныйДокумент);
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		//Защита против частей разделов, которые не помещаются на лист, если даже
		//выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			Если Рез <> Ложь ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа
		ТаблПоле = ТабличныйДокумент.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем области, скрытые от пользователя
			Если Область.Видимость <> Неопределено И НЕ Область.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
				Иначе
					ПечатнаяФорма.Вывести(ОбластьОграничители);
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			// выводим область без расширения пустыми строками
			ПечатнаяФорма.Вывести(ОбластьОграничители);
		КонецЕсли;
			
	КонецЦикла;		
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Функция ПолучитьНизМногострочнойЧасти(Раздел, ИмяОбласти)
	
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Раздел);
	Обл = ТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
	Низ = ТабличныйДокумент.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	Конеццикла;
	Возврат Низ - 1;
	
КонецФункции

&НаСервере
Функция ПолучитьОбластиМногострочнойЧасти(Раздел, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Раздел);
	Обл = ТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТабличныйДокумент.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТабличныйДокумент.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТабличныйДокумент.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	Конеццикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции

&НаСервере
Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
	
КонецФункции

&НаСервере
Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 по 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКартуИменованныхГруппСтрок(Раздел)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");

	Для Каждого Обл Из ТабличныйДокумент.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	Возврат Карта;
	
КонецФункции

&НаСервере
Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ПолеТабличногоДокумента, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка)
	
	МакетБланковРасшифровки = СтруктураМакетаБланка.МакетБланковРасшифровки;
	СекцияШапка = СтруктураМакетаБланка.СекцияШапка;
	СекцияСтрокаРасшифровки =  СтруктураМакетаБланка.СекцияСтрокаРасшифровки;
	СекцияСтрокаПоказателя =  СтруктураМакетаБланка.СекцияСтрокаПоказателя;
	СтруктураГрафОтчета = СтруктураМакетаБланка.СтруктураГрафОтчета;
	
	ЭтоПерваяСтрокаРасшифровки = Истина;
	ВРасшифровкиВыведеныДанные = Ложь;
	
	Для Каждого СтрокаРасшифровки Из МассивСтрокРасшифровки Цикл
		
		// определяем, отмечена ли строка для вывода в дереве настроек
		// для поиска используется строка состоящая из "ДопСтрока" объединенного со значением из массива строк расшифровки (коды строк)
		// по этой строке в дереве настроек осуществляется связь области табличного документа и строки показателя отчета
		РезультатыПоиска = ДеревоНастроекСтрокРасшифровки.Строки.Найти("ДопСтрока" + СтрокаРасшифровки, "ИмяОбластиДопСтроки", Истина);
		Если РезультатыПоиска <> Неопределено И НЕ РезультатыПоиска.ВключатьВОтчет Тогда
			// на печать не выводятся только строки для которых это явно указано
			Продолжить;
		КонецЕсли;
		
		Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
			СекцияСтрокаРасшифровки.Параметры[ГрафаОтчета.Ключ]	= ПолеТабличногоДокумента.Области["П00010" + СтрокаРасшифровки + ГрафаОтчета.Значение].Текст;
		КонецЦикла;
		
		// заголовок расшифровываемого показателя не должен быть оторван от первой строки своих данных
		Если ЭтоПерваяСтрокаРасшифровки Тогда
			МассивЗаголовокПерваяСтрока = Новый Массив;
			МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
			МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);
			Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
				// начинаем новую страницу
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
				ПечатнаяФорма = Новый ТабличныйДокумент;
				ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
				ПечатнаяФорма.ОтображатьСетку     = Ложь;
				ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
				ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
				ПечатнаяФорма.Автомасштаб         = Истина;
				ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
				ПечатнаяФорма.Вывести(СекцияШапка);
			КонецЕсли;
			ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
			ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
			ЭтоПерваяСтрокаРасшифровки = Ложь;
			ВРасшифровкиВыведеныДанные = Истина;
		Иначе
			Если НЕ ПечатнаяФорма.ПроверитьВывод(СекцияСтрокаРасшифровки) Тогда
				// начинаем новую страницу
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
				ПечатнаяФорма = Новый ТабличныйДокумент;
				ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
				ПечатнаяФорма.ОтображатьСетку     = Ложь;
				ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
				ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
				ПечатнаяФорма.Автомасштаб         = Истина;
				ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
				ПечатнаяФорма.Вывести(СекцияШапка);
			КонецЕсли;
			ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
			ВРасшифровкиВыведеныДанные = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
	Если НЕ ПустаяСтрока(ИдентификаторМногострочногоРаздела) Тогда
		ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[ИдентификаторМногострочногоРаздела];
		
		Для НомерСтроки = 1 По ТаблицаМногострочногоРаздела.Количество() Цикл
			
			ВыводитьМногострочнуюСтроку = Ложь;
			Для Каждого Колонка Из ТаблицаМногострочногоРаздела.Колонки Цикл
				ВыводитьМногострочнуюСтроку = ВыводитьМногострочнуюСтроку ИЛИ ЗначениеЗаполнено(ПолеТабличногоДокумента.Области[Колонка.Имя + "_" + НомерСтроки].Значение);
			КонецЦикла;
			
			Если ВыводитьМногострочнуюСтроку Тогда
				
				Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
					СекцияСтрокаРасшифровки.Параметры[ГрафаОтчета.Ключ]	= ПолеТабличногоДокумента.Области[ИдентификаторМногострочногоРаздела + ГрафаОтчета.Значение + "_" + НомерСтроки].Текст;
				КонецЦикла;
				
				Если ЭтоПерваяСтрокаРасшифровки Тогда
					МассивЗаголовокПерваяСтрока = Новый Массив;
					МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
					МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);
					Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
						// начинаем новую страницу
						СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
						ПечатнаяФорма = Новый ТабличныйДокумент;
						ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
						ПечатнаяФорма.ОтображатьСетку     = Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
						ПечатнаяФорма.Автомасштаб         = Истина;
						ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
						ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
						ПечатнаяФорма.Вывести(СекцияШапка);
					КонецЕсли;
					ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
					ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
					ЭтоПерваяСтрокаРасшифровки = Ложь;
					ВРасшифровкиВыведеныДанные = Истина;
				Иначе
					Если НЕ ПечатнаяФорма.ПроверитьВывод(СекцияСтрокаРасшифровки) Тогда
						// начинаем новую страницу
						СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
						ПечатнаяФорма = Новый ТабличныйДокумент;
						ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
						ПечатнаяФорма.ОтображатьСетку     = Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
						ПечатнаяФорма.Автомасштаб         = Истина;
						ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
						ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
						ПечатнаяФорма.Вывести(СекцияШапка);
					КонецЕсли;
					ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
					ВРасшифровкиВыведеныДанные = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВРасшифровкиВыведеныДанные;
	
КонецФункции

&НаСервере
Функция ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ПолеТабличногоДокумента, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка)
	
	МакетБланковРасшифровки = СтруктураМакетаБланка.МакетБланковРасшифровки;
	СекцияШапка = СтруктураМакетаБланка.СекцияШапка;
	СекцияСтрокаПоказателя =  СтруктураМакетаБланка.СекцияСтрокаПоказателя;
	СекцияСтрокаРасшифровки =  СтруктураМакетаБланка.СекцияСтрокаРасшифровки;
	СекцияСтрокаРасшифровкиЕНВД =  СтруктураМакетаБланка.СекцияСтрокаРасшифровкиЕНВД;
	СтруктураГрафОтчета = СтруктураМакетаБланка.СтруктураГрафОтчета;
	
	ВыводилсяЗаголовокСтроки = Ложь;
	ВРасшифровкиВыведеныДанные = Ложь;
	
	Для Каждого СтрокаРасшифровки Из МассивСтрокРасшифровки Цикл
		
		ВыводиласьРасшифровка1Уровня = Ложь;
		
		Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
			СекцияСтрокаРасшифровки.Параметры[ГрафаОтчета.Ключ]	= ПолеТабличногоДокумента.Области["П00010" + СтрокаРасшифровки.Код + ГрафаОтчета.Значение].Текст;
		КонецЦикла;
		
		// пропускаем строки расшифровки показателя 2 уровня если он не отмечен в дереве настроек строк расшифровки
		НастройкаСтрокиРасшифровки = ДеревоНастроекСтрокРасшифровки.Строки.Найти(СтрокаРасшифровки.Код, "Код");
		Если НастройкаСтрокиРасшифровки <> Неопределено И НастройкаСтрокиРасшифровки.ВключатьВОтчет Тогда
			ТаблицаМногострочногоРаздела = мСтруктураМногострочныхРазделов[СтрокаРасшифровки.ИдентификаторМногострочногоРаздела];
			
			Для НомерСтроки = 1 По ТаблицаМногострочногоРаздела.Количество() Цикл
				// строку расшифровки добавленную пользователем выводим только если в ней есть заполненные значения
				ВыводитьМногострочнуюСтроку = Ложь;
				Для Каждого Колонка Из ТаблицаМногострочногоРаздела.Колонки Цикл
					ВыводитьМногострочнуюСтроку = ВыводитьМногострочнуюСтроку ИЛИ ЗначениеЗаполнено(ПолеТабличногоДокумента.Области[Колонка.Имя + "_" + НомерСтроки].Значение);
				КонецЦикла;
				
				Если ВыводитьМногострочнуюСтроку Тогда
					
					Для Каждого ГрафаОтчета Из СтруктураГрафОтчета Цикл
						СекцияСтрокаРасшифровкиЕНВД.Параметры[ГрафаОтчета.Ключ] = ПолеТабличногоДокумента.Области[СтрокаРасшифровки.ИдентификаторМногострочногоРаздела + ГрафаОтчета.Значение + "_" + НомерСтроки].Текст;
					КонецЦикла;
					
					// массив строк для вывода в табличный документ определяем с учетом 
					МассивЗаголовокПерваяСтрока = Новый Массив;
					Если НЕ ВыводилсяЗаголовокСтроки Тогда
						МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
					КонецЕсли;
					Если НЕ ВыводиласьРасшифровка1Уровня Тогда
						МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);
					КонецЕсли;
					МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровкиЕНВД);
					
					Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
						// начинаем новую страницу
						СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
						ПечатнаяФорма = Новый ТабличныйДокумент;
						ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
						ПечатнаяФорма.ОтображатьСетку     = Ложь;
						ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
						ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
						ПечатнаяФорма.Автомасштаб         = Истина;
						ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
						ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
						ПечатнаяФорма.Вывести(СекцияШапка);
					КонецЕсли;
					
					Если НЕ ВыводилсяЗаголовокСтроки Тогда
						ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
						ВыводилсяЗаголовокСтроки = Истина;
					КонецЕсли;
					
					Если НЕ ВыводиласьРасшифровка1Уровня Тогда
						// так как есть строки 2 уровня, то к наименованию добавляем подстроку ", в том числе"
						СекцияСтрокаРасшифровки.Параметры.Наименование = СекцияСтрокаРасшифровки.Параметры.Наименование + ", в том числе";
						ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
						ВыводиласьРасшифровка1Уровня = Истина;
					КонецЕсли;
					ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровкиЕНВД);

					ВРасшифровкиВыведеныДанные = Истина;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// показатель первого уровня выводится в любом случае
		Если Не ВыводиласьРасшифровка1Уровня Тогда
			МассивЗаголовокПерваяСтрока = Новый Массив;
			Если НЕ ВыводилсяЗаголовокСтроки Тогда
				МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаПоказателя);
			КонецЕсли;
			МассивЗаголовокПерваяСтрока.Добавить(СекцияСтрокаРасшифровки);

			Если НЕ ПечатнаяФорма.ПроверитьВывод(МассивЗаголовокПерваяСтрока) Тогда
				// начинаем новую страницу
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
				ПечатнаяФорма = Новый ТабличныйДокумент;
				ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
				ПечатнаяФорма.ОтображатьСетку     = Ложь;
				ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
				ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
				ПечатнаяФорма.Автомасштаб         = Истина;
				ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
				ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
				ПечатнаяФорма.Вывести(СекцияШапка);
			КонецЕсли;
		
			Если НЕ ВыводилсяЗаголовокСтроки Тогда
				ПечатнаяФорма.Вывести(СекцияСтрокаПоказателя);
				ВыводилсяЗаголовокСтроки = Истина;
			КонецЕсли;
			ПечатнаяФорма.Вывести(СекцияСтрокаРасшифровки);
			
			ВРасшифровкиВыведеныДанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВРасшифровкиВыведеныДанные;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛистБаланс(СтруктураПараметровЛиста)
    	
	МакетБланкаБаланс = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Бланк_Баланс_2011Кв3");
	МакетБланковРасшифровки = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("БланкиРасшифровки_2011Кв3");
	
	ЗаполнитьМакетБланкаПечати(МакетБланкаБаланс);

	ВывестиНаПечатьЛистыРаздела(СтруктураПараметровЛиста, МакетБланкаБаланс);
	
	// Вывод строк расшифровки
	
	ДеревоНастроекСтрокРасшифровки = ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов.Баланс];
	
	// структура макета бланка для вызова функции печати строк
	СтруктураМакетаБланка = Новый Структура;
	СтруктураМакетаБланка.Вставить("МакетБланковРасшифровки", МакетБланковРасшифровки);
	СтруктураМакетаБланка.Вставить("СекцияШапка", МакетБланковРасшифровки.ПолучитьОбласть("БалансШапка"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаПоказателя", МакетБланковРасшифровки.ПолучитьОбласть("БалансСтрокаПоказателя"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаРасшифровки", МакетБланковРасшифровки.ПолучитьОбласть("БалансСтрокаРасшифровки"));
	
	// структура граф отчета описанного макета бланка, где имя ключа соответствует имени параметра, а значение - номеру графы в имени показателя
	// передается в функцию печати строк в составе структуры макета бланка
	СтруктураГрафОтчета = Новый Структура;
	СтруктураГрафОтчета.Вставить("Наименование", "02");
	СтруктураГрафОтчета.Вставить("Код", "03");
	СтруктураГрафОтчета.Вставить("Графа04", "04");
	СтруктураГрафОтчета.Вставить("Графа05", "05");
	СтруктураГрафОтчета.Вставить("Графа06", "06");
	
	СтруктураМакетаБланка.Вставить("СтруктураГрафОтчета", СтруктураГрафОтчета);
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПечатнаяФорма.Вывести(СтруктураМакетаБланка.СекцияШапка);
	
	ВРасшифровкиВыведеныДанные = Ложь;
	
	// Расшифровка строки 1110
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Нематериальные активы (стр. 1110), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11101");
	МассивСтрокРасшифровки.Добавить("11102");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс11199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1120
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Результаты исследований и разработок (стр. 1120), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11201");
	МассивСтрокРасшифровки.Добавить("11202");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс11299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1130
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Основные средства (стр. 1130), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11301");
	МассивСтрокРасшифровки.Добавить("11302");
	МассивСтрокРасшифровки.Добавить("11303");
	МассивСтрокРасшифровки.Добавить("11304");
	МассивСтрокРасшифровки.Добавить("11305");
	МассивСтрокРасшифровки.Добавить("11306");
	МассивСтрокРасшифровки.Добавить("11307");
	МассивСтрокРасшифровки.Добавить("11308");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс11399;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1140
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Доходные вложения в материальные ценности (стр. 1140), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11401");
	МассивСтрокРасшифровки.Добавить("11402");
	МассивСтрокРасшифровки.Добавить("11403");
	МассивСтрокРасшифровки.Добавить("11404");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс11499;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1150
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Финансовые вложения (стр. 1150), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11501");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс11599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1160
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Отложенные налоговые активы (стр. 1160), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс11699;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1170
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие внеоборотные активы (стр. 1170), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("11701");
	МассивСтрокРасшифровки.Добавить("11702");
	МассивСтрокРасшифровки.Добавить("11703");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс11799;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1210
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Запасы (стр. 1210), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12101");
	МассивСтрокРасшифровки.Добавить("12102");
	МассивСтрокРасшифровки.Добавить("12103");
	МассивСтрокРасшифровки.Добавить("12104");
	МассивСтрокРасшифровки.Добавить("12105");
	МассивСтрокРасшифровки.Добавить("12106");
	МассивСтрокРасшифровки.Добавить("12107");
	МассивСтрокРасшифровки.Добавить("12108");
	МассивСтрокРасшифровки.Добавить("12109");
	МассивСтрокРасшифровки.Добавить("12110");
	МассивСтрокРасшифровки.Добавить("12111");
	МассивСтрокРасшифровки.Добавить("12112");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс12199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1220
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Налог на добавленную стоимость по приобретенным ценностям (стр. 1220), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12201");
	МассивСтрокРасшифровки.Добавить("12202");
	МассивСтрокРасшифровки.Добавить("12203");
	МассивСтрокРасшифровки.Добавить("12204");
	МассивСтрокРасшифровки.Добавить("12205");
	МассивСтрокРасшифровки.Добавить("12206");
	МассивСтрокРасшифровки.Добавить("12207");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс12299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1230
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Дебиторская задолженность (стр. 1230), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12301");
	МассивСтрокРасшифровки.Добавить("12302");
	МассивСтрокРасшифровки.Добавить("12303");
	МассивСтрокРасшифровки.Добавить("12304");
	МассивСтрокРасшифровки.Добавить("12305");
	МассивСтрокРасшифровки.Добавить("12306");
	МассивСтрокРасшифровки.Добавить("12307");
	МассивСтрокРасшифровки.Добавить("12308");
	МассивСтрокРасшифровки.Добавить("12309");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс12399;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1240
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Финансовые вложения (за исключением денежных эквивалентов) (стр. 1240), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12401");
	МассивСтрокРасшифровки.Добавить("12402");
	МассивСтрокРасшифровки.Добавить("12403");
	МассивСтрокРасшифровки.Добавить("12404");
	МассивСтрокРасшифровки.Добавить("12405");
	МассивСтрокРасшифровки.Добавить("12406");
	МассивСтрокРасшифровки.Добавить("12407");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс12499;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1250
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Денежные средства и денежные эквиваленты (стр. 1250), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12501");
	МассивСтрокРасшифровки.Добавить("12502");
	МассивСтрокРасшифровки.Добавить("12503");
	МассивСтрокРасшифровки.Добавить("12504");
	МассивСтрокРасшифровки.Добавить("12505");
	МассивСтрокРасшифровки.Добавить("12506");
	МассивСтрокРасшифровки.Добавить("12507");
	МассивСтрокРасшифровки.Добавить("12508");
	МассивСтрокРасшифровки.Добавить("12509");
	МассивСтрокРасшифровки.Добавить("12510");
	МассивСтрокРасшифровки.Добавить("12511");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс12599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1260
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие оборотные активы (стр. 1260), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("12601");
	МассивСтрокРасшифровки.Добавить("12602");
	МассивСтрокРасшифровки.Добавить("12603");
	МассивСтрокРасшифровки.Добавить("12604");
	МассивСтрокРасшифровки.Добавить("12605");
	МассивСтрокРасшифровки.Добавить("12606");
	МассивСтрокРасшифровки.Добавить("12607");
	МассивСтрокРасшифровки.Добавить("12608");
	МассивСтрокРасшифровки.Добавить("12609");
	МассивСтрокРасшифровки.Добавить("12610");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс12699;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1310
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Уставный капитал (складочный капитал, уставный фонд, вклады товарищей) (стр. 1310), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс13199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1320
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Собственные акции, выкупленные у акционеров (стр. 1320), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс13299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1340
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Переоценка внеоборотных активов (стр. 1340), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("13401");
	МассивСтрокРасшифровки.Добавить("13402");
	МассивСтрокРасшифровки.Добавить("13403");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс13499;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1350
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Добавочный капитал (без переоценки) (стр. 1350), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс13599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1360
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Резервный капитал (стр. 1360), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("13601");
	МассивСтрокРасшифровки.Добавить("13602");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс13699;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1370
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Нераспределенная прибыль (непокрытый убыток) (стр. 1370), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс13799;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1410
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Заемные средства (стр. 1410), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("14101");
	МассивСтрокРасшифровки.Добавить("14102");
	МассивСтрокРасшифровки.Добавить("14103");
	МассивСтрокРасшифровки.Добавить("14104");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс14199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1420
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Отложенные налоговые обязательства (стр. 1420), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс14299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1450
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие обязательства (стр. 1450), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс14599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1510
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Заемные средства (стр. 1510), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("15101");
	МассивСтрокРасшифровки.Добавить("15102");
	МассивСтрокРасшифровки.Добавить("15103");
	МассивСтрокРасшифровки.Добавить("15104");
	МассивСтрокРасшифровки.Добавить("15105");
	МассивСтрокРасшифровки.Добавить("15106");
	МассивСтрокРасшифровки.Добавить("15107");
	МассивСтрокРасшифровки.Добавить("15108");
	МассивСтрокРасшифровки.Добавить("15109");
	МассивСтрокРасшифровки.Добавить("15110");
	МассивСтрокРасшифровки.Добавить("15111");
	МассивСтрокРасшифровки.Добавить("15112");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс15199;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1520
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Кредиторская задолженность (стр. 1520), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("15201");
	МассивСтрокРасшифровки.Добавить("15202");
	МассивСтрокРасшифровки.Добавить("15203");
	МассивСтрокРасшифровки.Добавить("15204");
	МассивСтрокРасшифровки.Добавить("15205");
	МассивСтрокРасшифровки.Добавить("15206");
	МассивСтрокРасшифровки.Добавить("15207");
	МассивСтрокРасшифровки.Добавить("15208");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс15299;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1530
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Доходы будущих периодов (стр. 1530), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("15301");
	МассивСтрокРасшифровки.Добавить("15302");
	МассивСтрокРасшифровки.Добавить("15303");
	МассивСтрокРасшифровки.Добавить("15304");
	МассивСтрокРасшифровки.Добавить("15305");
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс15399;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 1550
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие обязательства (стр. 1550), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдБаланс15599;
	
	// фиксируем факт вывода сведений в печатную форму
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Выводим последний сформированный лист
	Если ВРасшифровкиВыведеныДанные Тогда
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистФормаОтчета(СтруктураПараметровЛиста)

	МакетБланкаОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Бланк_ОПУ_2011Кв3");
	МакетБланковРасшифровки = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("БланкиРасшифровки_2011Кв3");
	
	ЗаполнитьМакетБланкаПечати(МакетБланкаОтчета);
	
	// Вывод основной формы отчета
	
	ВывестиНаПечатьЛистыРаздела(СтруктураПараметровЛиста, МакетБланкаОтчета);
	
	// Вывод строк расшифровки
	
	ДеревоНастроекСтрокРасшифровки = ЭтаФорма[СоставДополнительныхСтрок.СтруктураСоставов.ФормаОтчета];
	
	// структура макета бланка для вызова функции печати строк
	// остальные элементы структуры будут определяться непосредственно при выводе строк
	СтруктураМакетаБланка = Новый Структура;
	СтруктураМакетаБланка.Вставить("МакетБланковРасшифровки", МакетБланковРасшифровки);
	СтруктураМакетаБланка.Вставить("СекцияШапка", МакетБланковРасшифровки.ПолучитьОбласть("ОПУШапка"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаПоказателя", МакетБланковРасшифровки.ПолучитьОбласть("ОПУСтрокаПоказателя"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаРасшифровки", МакетБланковРасшифровки.ПолучитьОбласть("ОПУСтрокаРасшифровки"));
	СтруктураМакетаБланка.Вставить("СекцияСтрокаРасшифровкиЕНВД", МакетБланковРасшифровки.ПолучитьОбласть("ОПУСтрокаРасшифровкиЕНВД"));
	
	// структура граф отчета описанного макета бланка, где имя ключа соответствует имени параметра, а значение - номеру графы в имени показателя
	// передается в функцию печати строк в составе структуры макета бланка
	СтруктураГрафОтчета = Новый Структура;
	СтруктураГрафОтчета.Вставить("Наименование", "02");
	СтруктураГрафОтчета.Вставить("Код", "03");
	СтруктураГрафОтчета.Вставить("Графа04", "04");
	СтруктураГрафОтчета.Вставить("Графа05", "05");
	
	СтруктураМакетаБланка.Вставить("СтруктураГрафОтчета", СтруктураГрафОтчета);
	
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, МакетБланковРасшифровки, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПечатнаяФорма.Вывести(СтруктураМакетаБланка.СекцияШапка);
	
	ВРасшифровкиВыведеныДанные = Ложь;
	
	// Расшифровка строки 2110
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Выручка (стр. 2110), в том числе:";
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21101", СтруктураРеквизитовФормы.мИдФормаОтчета21101));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21102", СтруктураРеквизитовФормы.мИдФормаОтчета21102));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2110", "Код").ВключатьВОтчет, СтруктураРеквизитовФормы.мИдФормаОтчета02110, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2120
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Себестоимость продаж (стр. 2120), в том числе:";
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21201", СтруктураРеквизитовФормы.мИдФормаОтчета21201));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21202", СтруктураРеквизитовФормы.мИдФормаОтчета21202));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2120", "Код").ВключатьВОтчет, СтруктураРеквизитовФормы.мИдФормаОтчета02120, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2100
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Валовая прибыль (убыток) (стр. 2100), в том числе:";
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21001", СтруктураРеквизитовФормы.мИдФормаОтчета21001));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "21002", СтруктураРеквизитовФормы.мИдФормаОтчета21002));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02100;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2100", "Код").ВключатьВОтчет, СтруктураРеквизитовФормы.мИдФормаОтчета02100, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2210
	// вывод расшифровки зависит от применения ЕНВД

	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Коммерческие расходы (стр. 2210), в том числе:";
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22101", СтруктураРеквизитовФормы.мИдФормаОтчета22101));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22102", СтруктураРеквизитовФормы.мИдФормаОтчета22102));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2210", "Код").ВключатьВОтчет, СтруктураРеквизитовФормы.мИдФормаОтчета02210, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2220
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Управленческие расходы (стр. 2220), в том числе:";
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22201", СтруктураРеквизитовФормы.мИдФормаОтчета22201));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22202", СтруктураРеквизитовФормы.мИдФормаОтчета22202));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = ?(ДеревоНастроекСтрокРасшифровки.Строки.Найти("2220", "Код").ВключатьВОтчет, СтруктураРеквизитовФормы.мИдФормаОтчета02220, "");
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2200
	// вывод расшифровки зависит от применения ЕНВД
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прибыль (убыток) от продаж (стр. 2200), в том числе:";
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22001", СтруктураРеквизитовФормы.мИдФормаОтчета22001));
		МассивСтрокРасшифровки.Добавить(Новый Структура("Код, ИдентификаторМногострочногоРаздела", "22002", СтруктураРеквизитовФормы.мИдФормаОтчета22002));
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки2Уровня(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02200;
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2310
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Доходы от участия в других организациях (стр. 2310), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23101");
	МассивСтрокРасшифровки.Добавить("23102");
	МассивСтрокРасшифровки.Добавить("23103");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2320
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Проценты к получению (стр. 2320), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23201");
	МассивСтрокРасшифровки.Добавить("23202");
	МассивСтрокРасшифровки.Добавить("23203");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2330
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Проценты к уплате (стр. 2330), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23301");
	МассивСтрокРасшифровки.Добавить("23302");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2340
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие доходы (стр. 2340), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23401");
	МассивСтрокРасшифровки.Добавить("23402");
	МассивСтрокРасшифровки.Добавить("23403");
	МассивСтрокРасшифровки.Добавить("23404");
	МассивСтрокРасшифровки.Добавить("23405");
	МассивСтрокРасшифровки.Добавить("23406");
	МассивСтрокРасшифровки.Добавить("23407");
	МассивСтрокРасшифровки.Добавить("23408");
	МассивСтрокРасшифровки.Добавить("23409");
	МассивСтрокРасшифровки.Добавить("23410");
	МассивСтрокРасшифровки.Добавить("23411");
	МассивСтрокРасшифровки.Добавить("23412");
	МассивСтрокРасшифровки.Добавить("23413");
	МассивСтрокРасшифровки.Добавить("23414");
	МассивСтрокРасшифровки.Добавить("23415");
	МассивСтрокРасшифровки.Добавить("23416");
	МассивСтрокРасшифровки.Добавить("23417");
	МассивСтрокРасшифровки.Добавить("23418");
	МассивСтрокРасшифровки.Добавить("23419");
	МассивСтрокРасшифровки.Добавить("23420");
	МассивСтрокРасшифровки.Добавить("23421");
	МассивСтрокРасшифровки.Добавить("23422");
	МассивСтрокРасшифровки.Добавить("23423");
	МассивСтрокРасшифровки.Добавить("23424");
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02340;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2350
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочие расходы (стр. 2350), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("23501");
	МассивСтрокРасшифровки.Добавить("23502");
	МассивСтрокРасшифровки.Добавить("23503");
	МассивСтрокРасшифровки.Добавить("23504");
	МассивСтрокРасшифровки.Добавить("23505");
	МассивСтрокРасшифровки.Добавить("23506");
	МассивСтрокРасшифровки.Добавить("23507");
	МассивСтрокРасшифровки.Добавить("23508");
	МассивСтрокРасшифровки.Добавить("23509");
	МассивСтрокРасшифровки.Добавить("23510");
	МассивСтрокРасшифровки.Добавить("23511");
	МассивСтрокРасшифровки.Добавить("23512");
	МассивСтрокРасшифровки.Добавить("23513");
	МассивСтрокРасшифровки.Добавить("23514");
	МассивСтрокРасшифровки.Добавить("23515");
	МассивСтрокРасшифровки.Добавить("23516");
	МассивСтрокРасшифровки.Добавить("23517");
	МассивСтрокРасшифровки.Добавить("23518");
	МассивСтрокРасшифровки.Добавить("23519");
	МассивСтрокРасшифровки.Добавить("23520");
	МассивСтрокРасшифровки.Добавить("23521");
	МассивСтрокРасшифровки.Добавить("23522");
	МассивСтрокРасшифровки.Добавить("23523");
	МассивСтрокРасшифровки.Добавить("23524");
	МассивСтрокРасшифровки.Добавить("23525");
	МассивСтрокРасшифровки.Добавить("23526");
	МассивСтрокРасшифровки.Добавить("23527");
	МассивСтрокРасшифровки.Добавить("23528");
	МассивСтрокРасшифровки.Добавить("23529");
	МассивСтрокРасшифровки.Добавить("23530");
	МассивСтрокРасшифровки.Добавить("23531");
	МассивСтрокРасшифровки.Добавить("23532");
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02350;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2300
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прибыль (убыток) до налогообложения (стр. 2300), в том числе:";
	
	Если ИспользуютсяМакетыЕНВД() Тогда
		МассивСтрокРасшифровки = Новый Массив;
		МассивСтрокРасшифровки.Добавить("23001");
		МассивСтрокРасшифровки.Добавить("23002");
		ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	Иначе
		МассивСтрокРасшифровки = Новый Массив;
		ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02300;
		
		РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	КонецЕсли;
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2421
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "В том числе постоянные налоговые обязательства (активы) (стр. 2421), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02421;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2430
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Изменение отложенных налоговых обязательств (стр. 2430), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02430;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2450
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Изменение отложенных налоговых активов (стр. 2450), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02450;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2460
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Прочее (стр. 2460), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("24601");
	МассивСтрокРасшифровки.Добавить("24602");
	ИдентификаторМногострочногоРаздела = СтруктураРеквизитовФормы.мИдФормаОтчета02460;
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Расшифровка строки 2510
	
	СтруктураМакетаБланка.СекцияСтрокаПоказателя.Параметры.ОсновнойПоказательНаименование = "Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода (стр. 2510), в том числе:";
	
	МассивСтрокРасшифровки = Новый Массив;
	МассивСтрокРасшифровки.Добавить("25101");
	МассивСтрокРасшифровки.Добавить("25102");
	ИдентификаторМногострочногоРаздела = ""; // пользовательские строки расшифровки не предусмотрены
	
	РезультатВывода = ВывестиВМакетБлокСтрокРасшифровки(ПечатнаяФорма, ТабличныйДокумент, ДеревоНастроекСтрокРасшифровки, МассивСтрокРасшифровки, ИдентификаторМногострочногоРаздела, СтруктураПараметровЛиста, СтруктураМакетаБланка);
	// фиксируем факт вывода сведений в печатную форму
	ВРасшифровкиВыведеныДанные = ВРасшифровкиВыведеныДанные ИЛИ РезультатВывода;
	
	// Выводим последний сформированный лист
	Если ВРасшифровкиВыведеныДанные Тогда
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛистыРаздела(СтруктураПараметровЛиста, МакетБланка = Неопределено)
	
	Перем Ориентация;
	Перем ИмяТабличногоПоля;
	Перем ИмяОбластиТаблПоля;

	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений;
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), "ПУСТАЯСТРОКА") = 0 Тогда
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		Пока ПечатнаяФорма.ПроверитьВывод(ВыводимыеОбласти) Цикл
			ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ПечатнаяФорма.Вывести(ОбластьОграничители);
		
		ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
		
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(ПечатнаяФорма, СтруктураПараметровЛиста.НаименованиеЛиста);
		
		// инициализируем печатную форму для следующей страницы
		ПечатнаяФорма = Новый ТабличныйДокумент;
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = СтруктураПараметровЛиста.ОриентацияЛиста;
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеНастройки()
				
	// Многострочный раздел Баланс 11199
	СтруктураРеквизитовФормы.мИдБаланс11199 = "П0001011199";
    
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11199, СтруктураРеквизитовФормы.мИдБаланс11199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11199, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11199, 6);

	// Многострочный раздел Баланс 11299
	СтруктураРеквизитовФормы.мИдБаланс11299 = "П0001011299";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11299, СтруктураРеквизитовФормы.мИдБаланс11299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11299, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11299, 6);

	// Многострочный раздел Баланс 11399
	СтруктураРеквизитовФормы.мИдБаланс11399 = "П0001011399";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11399, СтруктураРеквизитовФормы.мИдБаланс11399);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11399, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11399, 6);

	// Многострочный раздел Баланс 11499
	СтруктураРеквизитовФормы.мИдБаланс11499 = "П0001011499";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11499, СтруктураРеквизитовФормы.мИдБаланс11499);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11499, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11499, 6);

	// Многострочный раздел Баланс 11599
	СтруктураРеквизитовФормы.мИдБаланс11599 = "П0001011599";
    
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11599, СтруктураРеквизитовФормы.мИдБаланс11599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11599, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11599, 6);

	// Многострочный раздел Баланс 11699
	СтруктураРеквизитовФормы.мИдБаланс11699 = "П0001011699";

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11699, СтруктураРеквизитовФормы.мИдБаланс11699);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11699, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11699, 6);

	// Многострочный раздел Баланс 11799
	СтруктураРеквизитовФормы.мИдБаланс11799 = "П0001011799";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11799, СтруктураРеквизитовФормы.мИдБаланс11799);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11799, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс11799, 6);

	// Многострочный раздел Баланс 12199
	СтруктураРеквизитовФормы.мИдБаланс12199 = "П0001012199";
    
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12199, СтруктураРеквизитовФормы.мИдБаланс12199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12199, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12199, 6);

	// Многострочный раздел Баланс 12299
	СтруктураРеквизитовФормы.мИдБаланс12299 = "П0001012299";
    
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12299, СтруктураРеквизитовФормы.мИдБаланс12299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12299, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12299, 6);

	// Многострочный раздел Баланс 12399
	СтруктураРеквизитовФормы.мИдБаланс12399 = "П0001012399";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12399, СтруктураРеквизитовФормы.мИдБаланс12399);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12399, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12399, 6);

	// Многострочный раздел Баланс 12499
	СтруктураРеквизитовФормы.мИдБаланс12499 = "П0001012499";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12499, СтруктураРеквизитовФормы.мИдБаланс12499);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12499, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12499, 6);

	// Многострочный раздел Баланс 12599
	СтруктураРеквизитовФормы.мИдБаланс12599 = "П0001012599";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12599, СтруктураРеквизитовФормы.мИдБаланс12599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12599, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12599, 6);

	// Многострочный раздел Баланс 12699
	СтруктураРеквизитовФормы.мИдБаланс12699 = "П0001012699";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12699, СтруктураРеквизитовФормы.мИдБаланс12699);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12699, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс12699, 6);

	// Многострочный раздел Баланс 13199
	СтруктураРеквизитовФормы.мИдБаланс13199 = "П0001013199";
    
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13199, СтруктураРеквизитовФормы.мИдБаланс13199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13199, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13199, 6);

	// Многострочный раздел Баланс 13299
	СтруктураРеквизитовФормы.мИдБаланс13299 = "П0001013299";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13299, СтруктураРеквизитовФормы.мИдБаланс13299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13299, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13299, 6);

	// Многострочный раздел Баланс 13499
	СтруктураРеквизитовФормы.мИдБаланс13499 = "П0001013499";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13499, СтруктураРеквизитовФормы.мИдБаланс13499);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13499, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13499, 6);

	// Многострочный раздел Баланс 13599
	СтруктураРеквизитовФормы.мИдБаланс13599 = "П0001013599";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13599, СтруктураРеквизитовФормы.мИдБаланс13599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13599, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13599, 6);

	// Многострочный раздел Баланс 13699
	СтруктураРеквизитовФормы.мИдБаланс13699 = "П0001013699";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13699, СтруктураРеквизитовФормы.мИдБаланс13699);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13699, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13699, 6);

	// Многострочный раздел Баланс 13799
	СтруктураРеквизитовФормы.мИдБаланс13799 = "П0001013799";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13799, СтруктураРеквизитовФормы.мИдБаланс13799);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13799, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс13799, 6);

	// Многострочный раздел Баланс 14199
	СтруктураРеквизитовФормы.мИдБаланс14199 = "П0001014199";
    
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14199, СтруктураРеквизитовФормы.мИдБаланс14199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14199, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14199, 6);

	// Многострочный раздел Баланс 14299
	СтруктураРеквизитовФормы.мИдБаланс14299 = "П0001014299";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14299, СтруктураРеквизитовФормы.мИдБаланс14299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14299, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14299, 6);

	// Многострочный раздел Баланс 14599
	СтруктураРеквизитовФормы.мИдБаланс14599 = "П0001014599";

	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14599, СтруктураРеквизитовФормы.мИдБаланс14599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14599, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс14599, 6);

	// Многострочный раздел Баланс 15199
	СтруктураРеквизитовФормы.мИдБаланс15199 = "П0001015199";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15199, СтруктураРеквизитовФормы.мИдБаланс15199);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15199, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15199, 6);

	// Многострочный раздел Баланс 15299
	СтруктураРеквизитовФормы.мИдБаланс15299 = "П0001015299";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15299, СтруктураРеквизитовФормы.мИдБаланс15299);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15299, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15299, 6);

	// Многострочный раздел Баланс 15399
	СтруктураРеквизитовФормы.мИдБаланс15399 = "П0001015399";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15399, СтруктураРеквизитовФормы.мИдБаланс15399);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15399, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15399, 6);

	// Многострочный раздел Баланс 15599
	СтруктураРеквизитовФормы.мИдБаланс15599 = "П0001015599";
    	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15599, СтруктураРеквизитовФормы.мИдБаланс15599);
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15599, 1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдБаланс15599, 6);

	// многострочные части отчета о прибылях и убытках, зависящие от использования ЕНВД
	Если ИспользуютсяМакетыЕНВД() Тогда
		
		// Многострочный раздел ФормаОтчета 02340
		СтруктураРеквизитовФормы.мИдФормаОтчета02340 = "П1001002340";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02340, СтруктураРеквизитовФормы.мИдФормаОтчета02340);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02340, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02340, 5);

		// Многострочный раздел ФормаОтчета 02350
		СтруктураРеквизитовФормы.мИдФормаОтчета02350 = "П1001002350";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02350, СтруктураРеквизитовФормы.мИдФормаОтчета02350);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02350, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02350, 5);

		// Многострочный раздел ФормаОтчета 02421
		СтруктураРеквизитовФормы.мИдФормаОтчета02421 = "П1001002421";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02421, СтруктураРеквизитовФормы.мИдФормаОтчета02421);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02421, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02421, 5);

		// Многострочный раздел ФормаОтчета 02430
		СтруктураРеквизитовФормы.мИдФормаОтчета02430 = "П1001002430";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02430, СтруктураРеквизитовФормы.мИдФормаОтчета02430);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02430, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02430, 5);

		// Многострочный раздел ФормаОтчета 02450
		СтруктураРеквизитовФормы.мИдФормаОтчета02450 = "П1001002450";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02450, СтруктураРеквизитовФормы.мИдФормаОтчета02450);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02450, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02450, 5);

		// Многострочный раздел ФормаОтчета 02460
		СтруктураРеквизитовФормы.мИдФормаОтчета02460 = "П1001002460";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02460, СтруктураРеквизитовФормы.мИдФормаОтчета02460);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02460, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02460, 5);

		// Многострочный раздел ФормаОтчета 21001
		СтруктураРеквизитовФормы.мИдФормаОтчета21001 = "П1001021001";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21001, СтруктураРеквизитовФормы.мИдФормаОтчета21001);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21001, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21001, 5);

		// Многострочный раздел ФормаОтчета 21002
		СтруктураРеквизитовФормы.мИдФормаОтчета21002 = "П1001021002";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21002, СтруктураРеквизитовФормы.мИдФормаОтчета21002);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21002, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21002, 5);

		// Многострочный раздел ФормаОтчета 21101
		СтруктураРеквизитовФормы.мИдФормаОтчета21101 = "П1001021101";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21101, СтруктураРеквизитовФормы.мИдФормаОтчета21101);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21101, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21101, 5);

		// Многострочный раздел ФормаОтчета 21102
		СтруктураРеквизитовФормы.мИдФормаОтчета21102 = "П1001021102";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21102, СтруктураРеквизитовФормы.мИдФормаОтчета21102);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21102, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21102, 5);

		// Многострочный раздел ФормаОтчета 21201
		СтруктураРеквизитовФормы.мИдФормаОтчета21201 = "П1001021201";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21201, СтруктураРеквизитовФормы.мИдФормаОтчета21201);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21201, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21201, 5);

		// Многострочный раздел ФормаОтчета 21202
		СтруктураРеквизитовФормы.мИдФормаОтчета21202 = "П1001021202";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21202, СтруктураРеквизитовФормы.мИдФормаОтчета21202);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21202, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета21202, 5);

		// Многострочный раздел ФормаОтчета 22001
		СтруктураРеквизитовФормы.мИдФормаОтчета22001 = "П1001022001";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22001, СтруктураРеквизитовФормы.мИдФормаОтчета22001);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22001, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22001, 5);

		// Многострочный раздел ФормаОтчета 22002
		СтруктураРеквизитовФормы.мИдФормаОтчета22002 = "П1001022002";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22002, СтруктураРеквизитовФормы.мИдФормаОтчета22002);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22002, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22002, 5);

		// Многострочный раздел ФормаОтчета 22101
		СтруктураРеквизитовФормы.мИдФормаОтчета22101 = "П1001022101";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22101, СтруктураРеквизитовФормы.мИдФормаОтчета22101);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22101, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22101, 5);

		// Многострочный раздел ФормаОтчета 22102
		СтруктураРеквизитовФормы.мИдФормаОтчета22102 = "П1001022102";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22102, СтруктураРеквизитовФормы.мИдФормаОтчета22102);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22102, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22102, 5);

		// Многострочный раздел ФормаОтчета 22201
		СтруктураРеквизитовФормы.мИдФормаОтчета22201 = "П1001022201";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22201, СтруктураРеквизитовФормы.мИдФормаОтчета22201);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22201, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22201, 5);

		// Многострочный раздел ФормаОтчета 22202
		СтруктураРеквизитовФормы.мИдФормаОтчета22202 = "П1001022202";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22202, СтруктураРеквизитовФормы.мИдФормаОтчета22202);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22202, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета22202, 5);

	Иначе
		// Многострочный раздел ФормаОтчета 02100
		СтруктураРеквизитовФормы.мИдФормаОтчета02100 = "П1001002100";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02100, СтруктураРеквизитовФормы.мИдФормаОтчета02100);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02100, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02100, 5);

		// Многострочный раздел ФормаОтчета 02110
		СтруктураРеквизитовФормы.мИдФормаОтчета02110 = "П1001002110";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02110, СтруктураРеквизитовФормы.мИдФормаОтчета02110);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02110, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02110, 5);

		// Многострочный раздел ФормаОтчета 02120
		СтруктураРеквизитовФормы.мИдФормаОтчета02120 = "П1001002120";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02120, СтруктураРеквизитовФормы.мИдФормаОтчета02120);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02120, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02120, 5);

		// Многострочный раздел ФормаОтчета 02200
		СтруктураРеквизитовФормы.мИдФормаОтчета02200 = "П1001002200";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02200, СтруктураРеквизитовФормы.мИдФормаОтчета02200);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02200, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02200, 5);

		// Многострочный раздел ФормаОтчета 02210
		СтруктураРеквизитовФормы.мИдФормаОтчета02210 = "П1001002210";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02210, СтруктураРеквизитовФормы.мИдФормаОтчета02210);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02210, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02210, 5);

		// Многострочный раздел ФормаОтчета 02220
		СтруктураРеквизитовФормы.мИдФормаОтчета02220 = "П1001002220";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02220, СтруктураРеквизитовФормы.мИдФормаОтчета02220);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02220, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02220, 5);

		// Многострочный раздел ФормаОтчета 02300
		СтруктураРеквизитовФормы.мИдФормаОтчета02300 = "П1001002300";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02300, СтруктураРеквизитовФормы.мИдФормаОтчета02300);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02300, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02300, 5);

		// Многострочный раздел ФормаОтчета 02340
		СтруктураРеквизитовФормы.мИдФормаОтчета02340 = "П1001002340";

		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02340, СтруктураРеквизитовФормы.мИдФормаОтчета02340);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02340, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02340, 5);

		// Многострочный раздел ФормаОтчета 02350
		СтруктураРеквизитовФормы.мИдФормаОтчета02350 = "П1001002350";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02350, СтруктураРеквизитовФормы.мИдФормаОтчета02350);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02350, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02350, 5);

		// Многострочный раздел ФормаОтчета 02421
		СтруктураРеквизитовФормы.мИдФормаОтчета02421 = "П1001002421";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02421, СтруктураРеквизитовФормы.мИдФормаОтчета02421);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02421, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02421, 5);

		// Многострочный раздел ФормаОтчета 02430
		СтруктураРеквизитовФормы.мИдФормаОтчета02430 = "П1001002430";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02430, СтруктураРеквизитовФормы.мИдФормаОтчета02430);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02430, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02430, 5);

		// Многострочный раздел ФормаОтчета 02450
		СтруктураРеквизитовФормы.мИдФормаОтчета02450 = "П1001002450";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02450, СтруктураРеквизитовФормы.мИдФормаОтчета02450);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02450, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02450, 5);

		// Многострочный раздел ФормаОтчета 02460
		СтруктураРеквизитовФормы.мИдФормаОтчета02460 = "П1001002460";
        		
		// структура многострочных разделов формы
		мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02460, СтруктураРеквизитовФормы.мИдФормаОтчета02460);
		// структура исходных строк (минимального кол-ва) многострочных разделов формы
		мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02460, 1);
		мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдФормаОтчета02460, 5);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетБланкаПечати(МакетБланка)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Область");
	
	Показатели.Индексы.Добавить("Имя");
	
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			НовСтр.Область = Область;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетБланка.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска <> Неопределено Тогда
				Если РезультатПоиска.Область.СодержитЗначение Тогда
					Область.Формат = РезультатПоиска.Область.Формат;
					Область.Значение = РезультатПоиска.Область.Значение;
				Иначе
					Область.Текст = РезультатПоиска.Область.Текст;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдБаланс11199", СтруктураРеквизитовФормы.мИдБаланс11199);
	ИдГрупп.Вставить("мИдБаланс11299", СтруктураРеквизитовФормы.мИдБаланс11299);
	ИдГрупп.Вставить("мИдБаланс11399", СтруктураРеквизитовФормы.мИдБаланс11399);
	ИдГрупп.Вставить("мИдБаланс11499", СтруктураРеквизитовФормы.мИдБаланс11499);
	ИдГрупп.Вставить("мИдБаланс11599", СтруктураРеквизитовФормы.мИдБаланс11599);
	ИдГрупп.Вставить("мИдБаланс11699", СтруктураРеквизитовФормы.мИдБаланс11699);
	ИдГрупп.Вставить("мИдБаланс11799", СтруктураРеквизитовФормы.мИдБаланс11799);
	ИдГрупп.Вставить("мИдБаланс12199", СтруктураРеквизитовФормы.мИдБаланс12199);
	ИдГрупп.Вставить("мИдБаланс12299", СтруктураРеквизитовФормы.мИдБаланс12299);
	ИдГрупп.Вставить("мИдБаланс12399", СтруктураРеквизитовФормы.мИдБаланс12399);
	ИдГрупп.Вставить("мИдБаланс12499", СтруктураРеквизитовФормы.мИдБаланс12499);
	ИдГрупп.Вставить("мИдБаланс12599", СтруктураРеквизитовФормы.мИдБаланс12599);
	ИдГрупп.Вставить("мИдБаланс12699", СтруктураРеквизитовФормы.мИдБаланс12699);
	ИдГрупп.Вставить("мИдБаланс13199", СтруктураРеквизитовФормы.мИдБаланс13199);
	ИдГрупп.Вставить("мИдБаланс13299", СтруктураРеквизитовФормы.мИдБаланс13299);
	ИдГрупп.Вставить("мИдБаланс13499", СтруктураРеквизитовФормы.мИдБаланс13499);
	ИдГрупп.Вставить("мИдБаланс13599", СтруктураРеквизитовФормы.мИдБаланс13599);
	ИдГрупп.Вставить("мИдБаланс13699", СтруктураРеквизитовФормы.мИдБаланс13699);
	ИдГрупп.Вставить("мИдБаланс13799", СтруктураРеквизитовФормы.мИдБаланс13799);
	ИдГрупп.Вставить("мИдБаланс14199", СтруктураРеквизитовФормы.мИдБаланс14199);
	ИдГрупп.Вставить("мИдБаланс14299", СтруктураРеквизитовФормы.мИдБаланс14299);
	ИдГрупп.Вставить("мИдБаланс14599", СтруктураРеквизитовФормы.мИдБаланс14599);
	ИдГрупп.Вставить("мИдБаланс15199", СтруктураРеквизитовФормы.мИдБаланс15199);
	ИдГрупп.Вставить("мИдБаланс15299", СтруктураРеквизитовФормы.мИдБаланс15299);
	ИдГрупп.Вставить("мИдБаланс15399", СтруктураРеквизитовФормы.мИдБаланс15399);
	ИдГрупп.Вставить("мИдБаланс15599", СтруктураРеквизитовФормы.мИдБаланс15599);
	ИдГрупп.Вставить("мИдФормаОтчета02340", СтруктураРеквизитовФормы.мИдФормаОтчета02340);
	ИдГрупп.Вставить("мИдФормаОтчета02350", СтруктураРеквизитовФормы.мИдФормаОтчета02350);
	ИдГрупп.Вставить("мИдФормаОтчета02421", СтруктураРеквизитовФормы.мИдФормаОтчета02421);
	ИдГрупп.Вставить("мИдФормаОтчета02430", СтруктураРеквизитовФормы.мИдФормаОтчета02430);
	ИдГрупп.Вставить("мИдФормаОтчета02450", СтруктураРеквизитовФормы.мИдФормаОтчета02450);
	ИдГрупп.Вставить("мИдФормаОтчета02460", СтруктураРеквизитовФормы.мИдФормаОтчета02460);
	ИдГрупп.Вставить("мИдФормаОтчета21001", СтруктураРеквизитовФормы.мИдФормаОтчета21001);
	ИдГрупп.Вставить("мИдФормаОтчета21002", СтруктураРеквизитовФормы.мИдФормаОтчета21002);
	ИдГрупп.Вставить("мИдФормаОтчета21101", СтруктураРеквизитовФормы.мИдФормаОтчета21101);
	ИдГрупп.Вставить("мИдФормаОтчета21102", СтруктураРеквизитовФормы.мИдФормаОтчета21102);
	ИдГрупп.Вставить("мИдФормаОтчета21201", СтруктураРеквизитовФормы.мИдФормаОтчета21201);
	ИдГрупп.Вставить("мИдФормаОтчета21202", СтруктураРеквизитовФормы.мИдФормаОтчета21202);
	ИдГрупп.Вставить("мИдФормаОтчета22001", СтруктураРеквизитовФормы.мИдФормаОтчета22001);
	ИдГрупп.Вставить("мИдФормаОтчета22002", СтруктураРеквизитовФормы.мИдФормаОтчета22002);
	ИдГрупп.Вставить("мИдФормаОтчета22101", СтруктураРеквизитовФормы.мИдФормаОтчета22101);
	ИдГрупп.Вставить("мИдФормаОтчета22102", СтруктураРеквизитовФормы.мИдФормаОтчета22102);
	ИдГрупп.Вставить("мИдФормаОтчета22201", СтруктураРеквизитовФормы.мИдФормаОтчета22201);
	ИдГрупп.Вставить("мИдФормаОтчета22202", СтруктураРеквизитовФормы.мИдФормаОтчета22202);
	ИдГрупп.Вставить("мИдФормаОтчета02100", СтруктураРеквизитовФормы.мИдФормаОтчета02100);
	ИдГрупп.Вставить("мИдФормаОтчета02110", СтруктураРеквизитовФормы.мИдФормаОтчета02110);
	ИдГрупп.Вставить("мИдФормаОтчета02120", СтруктураРеквизитовФормы.мИдФормаОтчета02120);
	ИдГрупп.Вставить("мИдФормаОтчета02200", СтруктураРеквизитовФормы.мИдФормаОтчета02200);
	ИдГрупп.Вставить("мИдФормаОтчета02210", СтруктураРеквизитовФормы.мИдФормаОтчета02210);
	ИдГрупп.Вставить("мИдФормаОтчета02220", СтруктураРеквизитовФормы.мИдФормаОтчета02220);
	ИдГрупп.Вставить("мИдФормаОтчета02300", СтруктураРеквизитовФормы.мИдФормаОтчета02300);
	ИдГрупп.Вставить("мИдФормаОтчета02340", СтруктураРеквизитовФормы.мИдФормаОтчета02340);
	ИдГрупп.Вставить("мИдФормаОтчета02350", СтруктураРеквизитовФормы.мИдФормаОтчета02350);
	ИдГрупп.Вставить("мИдФормаОтчета02421", СтруктураРеквизитовФормы.мИдФормаОтчета02421);
	ИдГрупп.Вставить("мИдФормаОтчета02430", СтруктураРеквизитовФормы.мИдФормаОтчета02430);
	ИдГрупп.Вставить("мИдФормаОтчета02450", СтруктураРеквизитовФормы.мИдФормаОтчета02450);
	ИдГрупп.Вставить("мИдФормаОтчета02460", СтруктураРеквизитовФормы.мИдФормаОтчета02460);
			
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдБаланс11199", СтруктураРеквизитовФормы.мИдБаланс11199);
	ИдГрупп.Вставить("мИдБаланс11299", СтруктураРеквизитовФормы.мИдБаланс11299);
	ИдГрупп.Вставить("мИдБаланс11399", СтруктураРеквизитовФормы.мИдБаланс11399);
	ИдГрупп.Вставить("мИдБаланс11499", СтруктураРеквизитовФормы.мИдБаланс11499);
	ИдГрупп.Вставить("мИдБаланс11599", СтруктураРеквизитовФормы.мИдБаланс11599);
	ИдГрупп.Вставить("мИдБаланс11699", СтруктураРеквизитовФормы.мИдБаланс11699);
	ИдГрупп.Вставить("мИдБаланс11799", СтруктураРеквизитовФормы.мИдБаланс11799);
	ИдГрупп.Вставить("мИдБаланс12199", СтруктураРеквизитовФормы.мИдБаланс12199);
	ИдГрупп.Вставить("мИдБаланс12299", СтруктураРеквизитовФормы.мИдБаланс12299);
	ИдГрупп.Вставить("мИдБаланс12399", СтруктураРеквизитовФормы.мИдБаланс12399);
	ИдГрупп.Вставить("мИдБаланс12499", СтруктураРеквизитовФормы.мИдБаланс12499);
	ИдГрупп.Вставить("мИдБаланс12599", СтруктураРеквизитовФормы.мИдБаланс12599);
	ИдГрупп.Вставить("мИдБаланс12699", СтруктураРеквизитовФормы.мИдБаланс12699);
	ИдГрупп.Вставить("мИдБаланс13199", СтруктураРеквизитовФормы.мИдБаланс13199);
	ИдГрупп.Вставить("мИдБаланс13299", СтруктураРеквизитовФормы.мИдБаланс13299);
	ИдГрупп.Вставить("мИдБаланс13499", СтруктураРеквизитовФормы.мИдБаланс13499);
	ИдГрупп.Вставить("мИдБаланс13599", СтруктураРеквизитовФормы.мИдБаланс13599);
	ИдГрупп.Вставить("мИдБаланс13699", СтруктураРеквизитовФормы.мИдБаланс13699);
	ИдГрупп.Вставить("мИдБаланс13799", СтруктураРеквизитовФормы.мИдБаланс13799);
	ИдГрупп.Вставить("мИдБаланс14199", СтруктураРеквизитовФормы.мИдБаланс14199);
	ИдГрупп.Вставить("мИдБаланс14299", СтруктураРеквизитовФормы.мИдБаланс14299);
	ИдГрупп.Вставить("мИдБаланс14599", СтруктураРеквизитовФормы.мИдБаланс14599);
	ИдГрупп.Вставить("мИдБаланс15199", СтруктураРеквизитовФормы.мИдБаланс15199);
	ИдГрупп.Вставить("мИдБаланс15299", СтруктураРеквизитовФормы.мИдБаланс15299);
	ИдГрупп.Вставить("мИдБаланс15399", СтруктураРеквизитовФормы.мИдБаланс15399);
	ИдГрупп.Вставить("мИдБаланс15599", СтруктураРеквизитовФормы.мИдБаланс15599);
	ИдГрупп.Вставить("мИдФормаОтчета02340", СтруктураРеквизитовФормы.мИдФормаОтчета02340);
	ИдГрупп.Вставить("мИдФормаОтчета02350", СтруктураРеквизитовФормы.мИдФормаОтчета02350);
	ИдГрупп.Вставить("мИдФормаОтчета02421", СтруктураРеквизитовФормы.мИдФормаОтчета02421);
	ИдГрупп.Вставить("мИдФормаОтчета02430", СтруктураРеквизитовФормы.мИдФормаОтчета02430);
	ИдГрупп.Вставить("мИдФормаОтчета02450", СтруктураРеквизитовФормы.мИдФормаОтчета02450);
	ИдГрупп.Вставить("мИдФормаОтчета02460", СтруктураРеквизитовФормы.мИдФормаОтчета02460);
	ИдГрупп.Вставить("мИдФормаОтчета21001", СтруктураРеквизитовФормы.мИдФормаОтчета21001);
	ИдГрупп.Вставить("мИдФормаОтчета21002", СтруктураРеквизитовФормы.мИдФормаОтчета21002);
	ИдГрупп.Вставить("мИдФормаОтчета21101", СтруктураРеквизитовФормы.мИдФормаОтчета21101);
	ИдГрупп.Вставить("мИдФормаОтчета21102", СтруктураРеквизитовФормы.мИдФормаОтчета21102);
	ИдГрупп.Вставить("мИдФормаОтчета21201", СтруктураРеквизитовФормы.мИдФормаОтчета21201);
	ИдГрупп.Вставить("мИдФормаОтчета21202", СтруктураРеквизитовФормы.мИдФормаОтчета21202);
	ИдГрупп.Вставить("мИдФормаОтчета22001", СтруктураРеквизитовФормы.мИдФормаОтчета22001);
	ИдГрупп.Вставить("мИдФормаОтчета22002", СтруктураРеквизитовФормы.мИдФормаОтчета22002);
	ИдГрупп.Вставить("мИдФормаОтчета22101", СтруктураРеквизитовФормы.мИдФормаОтчета22101);
	ИдГрупп.Вставить("мИдФормаОтчета22102", СтруктураРеквизитовФормы.мИдФормаОтчета22102);
	ИдГрупп.Вставить("мИдФормаОтчета22201", СтруктураРеквизитовФормы.мИдФормаОтчета22201);
	ИдГрупп.Вставить("мИдФормаОтчета22202", СтруктураРеквизитовФормы.мИдФормаОтчета22202);
	ИдГрупп.Вставить("мИдФормаОтчета02100", СтруктураРеквизитовФормы.мИдФормаОтчета02100);
	ИдГрупп.Вставить("мИдФормаОтчета02110", СтруктураРеквизитовФормы.мИдФормаОтчета02110);
	ИдГрупп.Вставить("мИдФормаОтчета02120", СтруктураРеквизитовФормы.мИдФормаОтчета02120);
	ИдГрупп.Вставить("мИдФормаОтчета02200", СтруктураРеквизитовФормы.мИдФормаОтчета02200);
	ИдГрупп.Вставить("мИдФормаОтчета02210", СтруктураРеквизитовФормы.мИдФормаОтчета02210);
	ИдГрупп.Вставить("мИдФормаОтчета02220", СтруктураРеквизитовФормы.мИдФормаОтчета02220);
	ИдГрупп.Вставить("мИдФормаОтчета02300", СтруктураРеквизитовФормы.мИдФормаОтчета02300);
	ИдГрупп.Вставить("мИдФормаОтчета02340", СтруктураРеквизитовФормы.мИдФормаОтчета02340);
	ИдГрупп.Вставить("мИдФормаОтчета02350", СтруктураРеквизитовФормы.мИдФормаОтчета02350);
	ИдГрупп.Вставить("мИдФормаОтчета02421", СтруктураРеквизитовФормы.мИдФормаОтчета02421);
	ИдГрупп.Вставить("мИдФормаОтчета02430", СтруктураРеквизитовФормы.мИдФормаОтчета02430);
	ИдГрупп.Вставить("мИдФормаОтчета02450", СтруктураРеквизитовФормы.мИдФормаОтчета02450);
	ИдГрупп.Вставить("мИдФормаОтчета02460", СтруктураРеквизитовФормы.мИдФормаОтчета02460);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдБаланс11199
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс11299
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс11399
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс11499
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс11599
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс11699
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс11799
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс12199
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс12299
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс12399
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс12499
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс12599
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс12699
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс13199
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс13299
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс13499
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс13599
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс13699
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс13799
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс14199
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс14299
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс14599
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс15199
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс15299
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс15399
	 ИЛИ ИдГруппы = ИдГрупп.мИдБаланс15599 Тогда
		
		ТекТабличноеПоле = "Баланс";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдФормаОтчета02340
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02350
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02421
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02430
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02450
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02460
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета21001
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета21002
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета21101
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета21102
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета21201
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета21202
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета22001
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета22002
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета22101
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета22102
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета22201
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета22202
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02100
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02110
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02120
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02200
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02210
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02220
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02300
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02340
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02350
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02421
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02430
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02450
		  ИЛИ ИдГруппы = ИдГрупп.мИдФормаОтчета02460 Тогда
		
		ТекТабличноеПоле = "ФормаОтчета";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции

&НаСервере
Процедура ПостобработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// находим ключевые узлы выгрузки многострочных частей
	ГоловнойУзелТЧ = ДеревоВыгрузки.Строки.Найти("ПрочЦен", "Код", Истина);
	Если ГоловнойУзелТЧ <> Неопределено Тогда
		
		СуммыПоАтрибутам = Новый Структура;
		УзлыВтчНаим = ГоловнойУзелТЧ.Строки.НайтиСтроки(Новый Структура("Код", "ВтчНаим"));
		Для Каждого УзелВтчНаим Из УзлыВтчНаим Цикл
			Для Каждого СтрАтрибут Из УзелВТчНаим.Строки Цикл
				Если СтрАтрибут.Тип = "А" И СтрАтрибут.Формат = "N" Тогда
					ЗначениеАтрибутаЧисло = ЧисловоеЗначение(СтрАтрибут.Значение);
					СуммаПоАтрибуту = ?(СуммыПоАтрибутам.Свойство(СтрАтрибут.Код), СуммыПоАтрибутам[СтрАтрибут.Код], 0);
					СуммыПоАтрибутам.Вставить(СтрАтрибут.Код, СуммаПоАтрибуту + ЗначениеАтрибутаЧисло);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СуммыПоАтрибутам Цикл
			АтрибутГоловногоУзлаТЧ = ГоловнойУзелТЧ.Строки.Найти(КлючИЗначение.Ключ, "Код");
			Если АтрибутГоловногоУзлаТЧ <> Неопределено Тогда
				АтрибутГоловногоУзлаТЧ.Значение = Формат(КлючИЗначение.Значение, "ЧН=; ЧГ=");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЧисловоеЗначение(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Число") Тогда
		Возврат Значение;
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Попытка
			Возврат Число(Значение);
		Исключение
			Возврат 0;
		КонецПопытки;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если СтрНайти(ИмяТекущейОбласти, "ДобавитьСтроку_") = 1 Тогда 
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "ДобавитьСтроку_", "") + "_1";
	Иначе 
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
	
КонецФункции

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции
