#Область ОписаниеПеременных

&НаСервере
Перем мОбъектОтчета;

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ВремяНачалаОперации;

&НаСервере
Перем КлючеваяОперация;
// СтандартныеПодсистемы.ОценкаПроизводительности

&НаКлиенте
Перем ФормаВыгрузкиРеглОтчета; // Обход ошибки в платформе.

&НаСервере
Перем СтруктураМногострочныхЧастей;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем ДеревоНастроекБаланс,
      ДеревоНастроекОФР;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы "Параметр сеанса отсутствует или удален".
	ТабличныйДокумент.Очистить();
	
	ОбъектОтчета(ЭтаФорма.ИмяФормы).СформироватьСтруктуруРеквизитовФормы(
		ИмяФормыОтчета(ЭтаФорма.ИмяФормы), СтруктураРеквизитовФормы);
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	// Имена вспомогательных макетов и форм.
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("МакетСоставаПоказателей",           "СоставПоказателей2019Кв1");
	НастройкиФормы.Вставить("МакетНастройкиСоставаПоказателей",  "НастройкаСоставаПоказателей2019Кв1");
	НастройкиФормы.Вставить("МакетСтруктурыМногострочныхЧастей", "СтруктураМногострочныхЧастей2019Кв1");
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	СтруктураМногострочныхЧастей = Новый Структура;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	ДеревоНастроекБаланс = Новый ДеревоЗначений;
	ДеревоНастроекОФР = Новый ДеревоЗначений;
	
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекБаланс);
	ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроекОФР);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
		= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР
		= ПоместитьВоВременноеХранилище(ДеревоНастроекОФР, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию = Новый Соответствие;
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	РегламентированнаяОтчетность.СформироватьСтруктуруЦветовРаскраски(ЭтотОбъект);
	
	СтруктураДанныхБаланс              = Новый Структура;
	СтруктураДанныхОФР                 = Новый Структура;
	СтруктураДанныхОДДС                = Новый Структура;
	СтруктураДанныхОИК                 = Новый Структура;
	СтруктураДанныхОЦИС                = Новый Структура;
	СтруктураДанныхПояснения1          = Новый Структура;
	СтруктураДанныхПояснения2          = Новый Структура;
	СтруктураДанныхПояснения3          = Новый Структура;
	СтруктураДанныхПояснения4          = Новый Структура;
	СтруктураДанныхПояснения5          = Новый Структура;
	СтруктураДанныхПояснения6          = Новый Структура;
	СтруктураДанныхПояснения7          = Новый Структура;
	СтруктураДанныхПояснения8          = Новый Структура;
	СтруктураДанныхПояснения9          = Новый Структура;
	СтруктураДанныхРасчетАктивов       = Новый Структура;
	СтруктураДанныхДополнительныеФайлы = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма           = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.РедакцияФормы             = Параметры.РедакцияФормы;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета   = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета  = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма         = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок           = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация               = Параметры.Организация;
	СтруктураРеквизитовФормы.СпособСозданияОрганизации = Параметры.СпособСозданияОрганизации;
	СтруктураРеквизитовФормы.ДатаСозданияОрганизации   = Параметры.ДатаСозданияОрганизации;
	СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации = Параметры.ЭтоБалансНекоммерческойОрганизации;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417
		= Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить(
		"РасходыУчитываютсяПоЭЗВОтчетномГоду", Неопределено);
	СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.Вставить(
		"РасходыУчитываютсяПоЭЗВПредыдущемГоду", Неопределено);
	
	СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки                = ПустаяСтруктураДанныхФайла();
	СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения              = ПустаяСтруктураДанныхФайла();
	
	СтруктураРеквизитовФормы.ОборотыСчета75_01 = Новый Структура;
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа04", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа05", 0);
	СтруктураРеквизитовФормы.ОборотыСчета75_01.Вставить("Графа06", 0);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	КлючеваяОперация = "ЗаполнениеФормыБухгалтерскаяОтчетность";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Отправка бух. отчетности в Росстат
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец Отправка бух. отчетности в Росстат
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличныйДокумент

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
	КонецЕсли;
	
	Если Область.Имя = "НастройкаСоставаСтрок" Тогда
		НастроитьСтроки(Неопределено);
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ОрганизацииДляЗаполненияОтчета" И Область.Текст <> "" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Новый Структура("Организация", СтруктураРеквизитовФормы.Организация));
		ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		
		ФормаВыбораОрганизаций = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораОрганизаций", ПараметрыФормы, ЭтаФорма);
		ФормаВыбораОрганизаций.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораОрганизаций.Открыть();
		Модифицированность = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "ВидОтчетности" Тогда
		СтандартнаяОбработка = Ложь;
		Периоды = Новый СписокЗначений;
		Периоды.Добавить("1", "Обычная");
		Периоды.Добавить("3", "Ликвидационная");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаВидОтчетностиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Периоды);
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ОргПочтАдрес" Тогда
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			Адреса.АдрФакт = "";
		Иначе
			Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			Адреса.АдрЮР = "";
		Иначе
			Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			Адреса.АдрПочт = "";
		Иначе
			Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
		КонецЕсли;
		
		ТаблицаВыбора.Очистить();
		
		НовСтр = ТаблицаВыбора.Добавить();
		НовСтр.Код = "Пустое значение";
		НовСтр.Название = "Адрес не указывается";
		
		Если ЗначениеЗаполнено(Адреса.АдрФакт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Фактический адрес";
			НовСтр.Название = Адреса.АдрФакт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрЮР) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Юридический адрес";
			НовСтр.Название = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрПочт) Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			НовСтр.Код = "Почтовый адрес";
			НовСтр.Название = Адреса.АдрПочт;
		КонецЕсли;
			
		Если ТаблицаВыбора.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru='В контактной информации не указаны адреса организации.'"));
			Возврат;
		КонецЕсли;
		
		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
		ПараметрыФормы.Вставить("ТаблицаЗначений",     ТаблицаВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
		ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ТабличныйДокументВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы",
			ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "АудитДа" Тогда
		АудитДа = ТабличныйДокумент.Области.АудитДа.Значение;
		Если НЕ ЗначениеЗаполнено(АудитДа) Тогда
			ТабличныйДокумент.Области.АудитДа.Значение = "Х";
			ТабличныйДокумент.Области.АудитНет.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Область.Имя = "АудитНет" Тогда
		АудитНет = ТабличныйДокумент.Области.АудитНет.Значение;
		Если НЕ ЗначениеЗаполнено(АудитНет) Тогда
			ТабличныйДокумент.Области.АудитНет.Значение = "Х";
			ТабличныйДокумент.Области.АудитДа.Значение = "";
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Если НЕ ((Область.Имя = "ОргНазв") Или (Область.Имя = "ОргКодОКПО") Или (Область.Имя = "ОргОтрасль")
		Или (Область.Имя = "ОргКодОКВЭД") Или (Область.Имя = "ОргФорма") Или (Область.Имя = "ОргФормаСобств")
		Или (Область.Имя = "ОргКодОКОПФ") Или (Область.Имя = "ОргКодОКФС") Или (Область.Имя = "ОргПочтАдрес")
		Или (Область.Имя = "ОргДиректор") Или (Область.Имя = "ОргБухгалтер")) Тогда
		
		Если Область.Имя = "П000100123004" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		ИначеЕсли Область.Имя = "П000100123005" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		ИначеЕсли Область.Имя = "П000100123006" Тогда
			СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
		КонецЕсли;
		
		Если Лев(Область.Имя, 12) = "П00010056650"
			ИЛИ Лев(Область.Имя, 12) = "П00010056700"
			ИЛИ Лев(Область.Имя, 12) = "П00010056800" Тогда
			НомГрафы_Стр = Прав(Область.Имя, 1);
			Период_Стр = ?(НомГрафы_Стр = "3", "за период отчетного года", "за период предыдущего года");
			МассивСообщений = Новый Массив;
			Если Лев(Область.Имя, 12) = "П00010056650"
				И ЗначениеЗаполнено(Область.Значение) Тогда
				ТекСтрока = "5665";
				Обл = ТабличныйДокумент.Области.Найти("П00010056700" + НомГрафы_Стр);
				Если ЗначениеЗаполнено(Обл.Значение) Тогда
					Обл.Очистить();
					МассивСообщений.Добавить("Не допускается заполнение строки " + ТекСтрока
					+ " и строки 5670 в одной графе. Значение в строке 5670 " + Период_Стр + " очищено.");
				КонецЕсли;
				Обл = ТабличныйДокумент.Области.Найти("П00010056800" + НомГрафы_Стр);
				Если ЗначениеЗаполнено(Обл.Значение) Тогда
					Обл.Очистить();
					МассивСообщений.Добавить("Не допускается заполнение строки " + ТекСтрока
					+ " и строки 5680 в одной графе. Значение в строке 5680 " + Период_Стр + " очищено.");
				КонецЕсли;
			ИначеЕсли (Лев(Область.Имя, 12) = "П00010056700"
				ИЛИ Лев(Область.Имя, 12) = "П00010056800")
				И ЗначениеЗаполнено(Область.Значение) Тогда
				ТекСтрока = Сред(Область.Имя, 8, 4);
				Обл = ТабличныйДокумент.Области.Найти("П00010056650" + НомГрафы_Стр);
				Если ЗначениеЗаполнено(Обл.Значение) Тогда
					Обл.Очистить();
					МассивСообщений.Добавить("Не допускается заполнение строки " + ТекСтрока
					+ " и строки 5665 в одной графе. Значение в строке 5665 " + Период_Стр + " очищено.");
				КонецЕсли;
			КонецЕсли;
			Для каждого Сообщ Из МассивСообщений Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Сообщ;
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
		
	КонецЕсли;
	
	Если Область.Имя = "ОргОтрасль" Тогда
		
		СтруктураДанныхОДДС.Вставить("ОргОтрасль",		  Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", 		  Область.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргОтрасль", 	  Область.Значение);
		СтруктураДанныхОФР.Вставить("ОргОтрасль", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СтруктураДанныхОФР.Вставить("ОргКодОКВЭД", ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
				
	ИначеЕсли Область.Имя = "ОргКодОКВЭД" Тогда
		
		СтруктураДанныхОДДС.Вставить("ОргКодОКВЭД",		   Область.Значение);
		СтруктураДанныхОИК.Вставить("ОргКодОКВЭД", 		   Область.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргКодОКВЭД", 	   Область.Значение);
		СтруктураДанныхОФР.Вставить("ОргКодОКВЭД", Область.Значение);
		
		СтруктураДанныхОДДС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОИК.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОЦИС.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СтруктураДанныхОФР.Вставить("ОргОтрасль", ТабличныйДокумент.Области.ОргОтрасль.Значение);
				
	ИначеЕсли Область.Имя = "ДатаПодписиОтчета" Тогда 
		
		ДатаПодписи = Область.Значение;
		
		ДатаПодписиПриИзмененииНаСервере();
		
		СтруктураДанныхОДДС.Вставить("ДатаПодписиОтчета",        ДатаПодписи);
		СтруктураДанныхОИК.Вставить("ДатаПодписиОтчета",         ДатаПодписи);
		СтруктураДанныхОЦИС.Вставить("ДатаПодписиОтчета",       ДатаПодписи);
		СтруктураДанныхОФР.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
		СтруктураДанныхПояснения1.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения2.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения3.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения4.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения5.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения6.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения7.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения8.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		СтруктураДанныхПояснения9.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	ИначеЕсли Область.Имя = "НомерКорректировки" Тогда
		
		НомерКорректировки = Область.Значение;
		
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОргОтрасль.Значение);															 
																	 
		ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности();
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "П") = 1 Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			ОбновитьПараметрыАвтозаполненияЯчейки();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	
	Если Лев(ИмяОбласти, 1) = "П"
		И Элемент.ТекущаяОбласть.СодержитЗначение = Истина// здесь исключаем значение Неопределено
		И ТипЗнч(Элемент.ТекущаяОбласть.Значение) = Тип("Число") Тогда
		ЦветФонаЯчейки = Элемент.ТекущаяОбласть.ЦветФона;
		Если ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_1"]
		 ИЛИ ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_2"] Тогда
			УправлениеБлокомВариантЗаполнения(ИмяОбласти);
		ИначеЕсли ЦветФонаЯчейки = мСтруктураЦветовРаскраски["_3"] Тогда
			ОчиститьБлокВариантЗаполнения(Истина);
		ИначеЕсли ЭтаФорма.Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	Иначе
		Если ЭтаФорма.Элементы.ВариантЗаполнения.Доступность Тогда
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
		
		Если СтрНайти(ИмяОбласти, "ДобавитьСтроку") = 1 Тогда 
			ИмяПоказателя = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок_", "");
			ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
		ИначеЕсли СтрНайти(ИмяОбласти, "УдалитьСтроку") = 1 Тогда 
			ИмяПоказателя = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяПоказателя);
		ИначеЕсли СтрНайти(ИмяОбласти, "П") = 1 И СтрНайти(ИмяОбласти, "_") > 1 Тогда
			ИмяПоказателя = ИмяПоказателяБезСчетчика(ИмяОбласти);
		Иначе 
			Возврат;
		КонецЕсли;
		
		ИмяГруппы = ?(ЗначениеЗаполнено(ИмяПоказателя), Лев(ИмяПоказателя, СтрДлина(ИмяПоказателя) - 2), "");
		
		Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
			ТестовоеИмя = ИмяГруппы + "01_2";
			Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
			Если СтрЧислоВхождений(ИмяОбласти, "ДобавитьСтроку") = 0 И
				ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
				Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	
	УведомитьОРелизацииВыгрузкиВБудущихВерсиях();
	Возврат;
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	ВставитьДополнительнуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтроки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДеревоНастроек",
		СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроек"
		+ СтруктураРеквизитовФормы.НаимТекущегоРаздела]);
	
	ФормаНастроек = ПолучитьФорму("Отчет.РегламентированныйОтчетБухОтчетность.Форма.НастройкаРасшифровкиОтдельныхПоказателей", ПараметрыФормы);
	
	КонецЗаголовка = "";
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		КонецЗаголовка = "бухгалтерского баланса";
	Иначе
		КонецЗаголовка = "отчета о финансовых результатах";
	КонецЕсли;
	ФормаНастроек.Заголовок = "Настройка расшифровки отдельных показателей " + КонецЗаголовка;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьСтрокиЗавершение", ЭтотОбъект);
	ФормаНастроек.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастроек.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	
	ОбновитьСведенияОбОрганизацииВРазделахНаСервере();
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	УведомитьОРелизацииВыгрузкиВБудущихВерсиях();
	Возврат;
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(
		ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	УведомитьОРелизацииВыгрузкиВБудущихВерсиях();
	Возврат;
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будут очищены все показатели отчета.%1Продолжить операцию?'"), Символы.ПС);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Внимание! Будут очищены сведения о дополнительных файлах.%1Продолжить операцию?'"), Символы.ПС);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Внимание! Будут очищены все показатели текущего отчета.%1Продолжить операцию?'"), Символы.ПС);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	СформироватьНастройкиФормыВыбораПечати();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыПечати", НастройкиФормыВыбораПечати);
	ПараметрыФормы.Вставить("РедакцияФормы", "от 19.04.2019 № 61н");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Отчет.РегламентированныйОтчетБухОтчетность.Форма.ВыборПечатнойФормы", ПараметрыФормы,
		ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	УведомитьОРелизацииВыгрузкиВБудущихВерсиях();
	Возврат;
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиОтправкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	УведомитьОРелизацииВыгрузкиВБудущихВерсиях();
	Возврат;
	
	Если СтруктураРеквизитовФормы.ИП Тогда
		РегламентированнаяОтчетностьКлиент.ПоказатьПредупреждениеОНевозможностиВыгрузкиОтчета();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки",
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(
		ИмяОтчета(ЭтаФорма.ИмяФормы), ИмяФормыОтчета(ЭтаФорма.ИмяФормы), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПояснения(Команда)
	
	АдресФайлаВХранилище = СформироватьФайлXLSВХранилище();
	
	Если АдресФайлаВХранилище <> Неопределено Тогда
		ИмяСохраняемогоФайла = "Пояснения к бухгалтерскому балансу и отчету о финансовых результатах за "
		                     + НРег(СтруктураРеквизитовФормы.СтрПериодОтчета)
		                     + " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		
		ПолучитьФайл(АдресФайлаВХранилище, ИмяСохраняемогоФайла + ".xls", Истина);
		
	Иначе
		ПоказатьПредупреждение( , НСтр("ru='В отчет не включено ни одно из пояснений.
		                                   |Установите флажки у соответствующих разделов в настройках отчета.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ДополнительныеПараметры = Новый Структура("ИмяПоказателя", ИмяПоказателя);
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура ИнициализироватьДеревоНастроекСоставаДопСтрок(ДеревоНастроек)
	
	ОписаниеТиповСтрока   = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки());
	ОписаниеТиповЧисло1   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло3   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло5_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповБулево   = Новый ОписаниеТипов("Булево");
	
	КолонкиДН = ДеревоНастроек.Колонки;
	
	КолонкиДН.Добавить("Наименование", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("Код", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("ВключатьВОтчет", ОписаниеТиповЧисло1);
	КолонкиДН.Добавить("Существенность", ОписаниеТиповЧисло5_2);
	КолонкиДН.Добавить("ИмяОбластиДопСтроки", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("ТипСостава", ОписаниеТиповСтрока);
	КолонкиДН.Добавить("МаксимальноеКоличество", ОписаниеТиповЧисло3);
	КолонкиДН.Добавить("ДостДляРедактирования_Существенность", ОписаниеТиповБулево);
	КолонкиДН.Добавить("ДостДляРедактирования_МаксимальноеКоличество", ОписаниеТиповБулево);
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	ТабличныйДокумент.Очистить(); // очистка необходима в случае повторного вызова процедуры "Инициализация"
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД = ДопСтрокиОФРПриПримененииЕНВД();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		КонецЕсли;
		СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
		СписокСохранения.Свойство("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
		
		ИнициализацияЗаполнитьСтруктурыДанных(СписокСохранения);
		
	Иначе
		ИнициализацияЗаполнитьСтруктурыДанных();
		
	КонецЕсли;
	
	ИнициализироватьСтруктуруЗаголовковОтчетов();
	
	ИнициализироватьОписанияМногострочныхЧастей();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду);
	
	НачалоПредшествующегоПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12);
	КонецПредшествующегоПериодаОтчета  = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,  -12);
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьПризнакУчетаРасходовПоЭлементамЗатрат(
		НачалоПредшествующегоПериодаОтчета,
		КонецПредшествующегоПериодаОтчета,
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду);
	
	ЗаполнитьНачальныеНастройки();
	
	Если Не СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		// Новый документ.
		СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
		СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
		
		// Инициализация переменных настройки формы.
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
		
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		
		СтруктураРеквизитовФормы.мТипАдреса = ТипАдресаПоУмолчанию();
		
		// Заполним настройки состава дополнительных строк по умолчанию.
		СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
		
		Модифицированность = Истина;
		
	Иначе
		// Сохраненный или скопированный документ.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
		   И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПризнакиПримененияУСН();
	
	ИмяРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	Если НЕ ИмяРаздела = "ДополнительныеФайлы" Тогда
		Если ТабличныйДокумент.Области.Количество() = 0 Тогда
			ТабличныйДокумент.Вывести(МакетОтчета(ИмяРаздела));
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяРаздела);
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
		
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		
	Иначе
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи, СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
	// Отправка бухгалтерской отчетности в Росстат.
	ОтправкаБухгалтерскойОтчетностиВРосстат.ОпределитьСсылкуНаСуществующийОтчетВРосстат(ЭтотОбъект);
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиентСервер.УстановитьВидимостьСсылкиНаОтчетРосстатаИПанелиПредупреждения(ЭтотОбъект);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	ЗаполнитьЗаголовкиПоЕдиницеИзмерения(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	Если ВидСдачиОтчетности = 1 Тогда 
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
	КонецЕсли;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	Если СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически Тогда
		РезультатЗапуска = ЗаполнитьАвтоНаСервере();
		СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании", РезультатЗапуска);
		
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
			ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлПояснительнойЗаписки"];
	ИмяФайлаПояснительнойЗаписки = СтруктураХранения.ИмяФайла;
	СтруктураХранения = СтруктураРеквизитовФормы["ФайлАудиторскогоЗаключения"];
	ИмяФайлаАудиторскогоЗаключения = СтруктураХранения.ИмяФайла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу", ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ПризнМногострочности",   ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",    ОписаниеТиповСтрока15);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей =
		ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ДопСтрокиОФРПриПримененииЕНВД()
	
	НовМассив = Новый Массив;
	
	НовМассив.Добавить("ДопСтрока21101");
	НовМассив.Добавить("ДопСтрока21102");
	НовМассив.Добавить("ДопСтрока21201");
	НовМассив.Добавить("ДопСтрока21202");
	НовМассив.Добавить("ДопСтрока22101");
	НовМассив.Добавить("ДопСтрока22102");
	НовМассив.Добавить("ДопСтрока22201");
	НовМассив.Добавить("ДопСтрока22202");
	НовМассив.Добавить("ДопСтрока21001");
	НовМассив.Добавить("ДопСтрока21002");
	НовМассив.Добавить("ДопСтрока22001");
	НовМассив.Добавить("ДопСтрока22002");
	НовМассив.Добавить("ДопСтрока23001");
	НовМассив.Добавить("ДопСтрока23002");
	
	Возврат НовМассив;
	
КонецФункции

&НаСервере
Процедура ИнициализацияЗаполнитьСтруктурыДанных(СохраненныеДанные = Неопределено)
	
	Если СохраненныеДанные = Неопределено Тогда
		// Создание нового отчета.
		Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2020-01-01'
		 ИЛИ СтрНайти(СтруктураРеквизитовФормы.РедакцияФормы, "за 2020") <> 0 Тогда
			СтруктураОтчета = СтруктураОтчета2020Кв1();
		Иначе
			СтруктураОтчета = СтруктураОтчета2019Кв1();
		КонецЕсли;
		
	Иначе
		// Восстановление сохраненного отчета.
		СохраненнаяСтруктураОтчета = Неопределено;
		Если СохраненныеДанные.Свойство("СтруктураОтчета", СохраненнаяСтруктураОтчета) Тогда
			СтруктураОтчета = СохраненнаяСтруктураОтчета;
			
			Для Каждого Элемент Из СтруктураОтчета Цикл
				Если СтрЧислоВхождений(Элемент.Значение.ИмяМакета, Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета"))) > 0 Тогда
					Элемент.Значение.ИмяМакета = Сред(Элемент.Значение.ИмяМакета,
						СтрДлина(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_") + 1);
				КонецЕсли;
				
				Элемент.Значение.ИмяМакета = СтрЗаменить(Элемент.Значение.ИмяМакета, "_2011Кв4", "");
				
				Если Элемент.Значение.Свойство("ИдентификаторАвтозаполнения") Тогда
					Элемент.Значение.ИдентификаторАвтозаполнения = СтрЗаменить(Элемент.Значение.ИдентификаторАвтозаполнения, "_2011Кв4", "");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСтруктуруЗаголовковОтчетов()
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов = Новый Соответствие;
	
	КонецПредыдущегоГода = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецГодаПредшествующегоПредыдущему = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -24));
	
	ГодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
	ГодПредыдущий = Формат(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12), "ДФ = 'гггг'");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодОтчетногоГода", "за " + ГодОтчета + "г.");
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("ЗаПериодПредыдущегоГода", "за " + ГодПредыдущий + "г.");
	
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаОтчетнуюДату",
		"На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецПредыдущегоГода",
		"На " + Формат(КонецПредыдущегоГода, "ДЛФ=DD"));
	СтруктураРеквизитовФормы.ЗаголовкиОтчетов.Вставить("НаКонецГодаПредшествующегоПредыдущему",
		"На " + Формат(КонецГодаПредшествующегоПредыдущему, "ДЛФ=DD"));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхЧастей()
	
	ИмяМакетаСтруктурыМногострочныхЧастей = НастройкиФормы.МакетСтруктурыМногострочныхЧастей;
	ТекстОписанияСтруктуры = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакетаСтруктурыМногострочныхЧастей).ПолучитьТекст();
	ИнициализироватьОписанияМногострочныхПоXML(ТекстОписанияСтруктуры);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Заполнение соответствия показателей и их описаний в структуре
	// для возможности получения описания по имени показателя.
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		ИдентификаторМногострочнойЧасти = МногострочнаяЧасть.Ключ;
		ПоказателиМногострочнойЧасти    = МногострочнаяЧасть.Значение.Состав;
		
		Если ТипЗнч(ПоказателиМногострочнойЧасти) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Показатель Из ПоказателиМногострочнойЧасти[0] Цикл
			СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию.Вставить(Показатель.Ключ, ИдентификаторМногострочнойЧасти);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
	
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Баланс"; // Бухгалтерский баланс
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОФР"; // Отчет о финансовых результатах
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОИК"; // Отчет об изменениях капитала
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОДДС"; // Отчет о движении денежных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	СтрокаУровня1.МногострочностьВРазделе.Добавить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОЦИС"; // Отчет о целевом использовании полученных средств
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РасчетАктивов";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения8";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Пояснения9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ДополнительныеФайлы";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	// Бухгалтерский баланс.
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100110006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120004", "П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120005", "П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100120006", "П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160004", "П000100110004;П000100120004;П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160005", "П000100110005;П000100120005;П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100160006", "П000100110006;П000100120006;П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130004", "П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130005", "П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100130006", "П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140004", "П000100141004;П000100142004;П000100143004;П000100145004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140005", "П000100141005;П000100142005;П000100143005;П000100145005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100140006", "П000100141006;П000100142006;П000100143006;П000100145006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150004", "П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150005", "П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100150006", "П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170004", "П000100130004;П000100140004;П000100150004;П000100131004;П000100132004;П000100134004;П000100135004;П000100136004;П000100137004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100153004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170005", "П000100130005;П000100140005;П000100150005;П000100131005;П000100132005;П000100134005;П000100135005;П000100136005;П000100137005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100153005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100170006", "П000100130006;П000100140006;П000100150006;П000100131006;П000100132006;П000100134006;П000100135006;П000100136006;П000100137006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100153006;П000100154006;П000100155006");
	
	// Отчет о финансовых результатах.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210004", "П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100210005", "П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220004", "П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100220005", "П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230004", "П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100230005", "П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100104", "П000102110104;П000102120104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100105", "П000102110105;П000102120105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100204", "П000102110204;П000102120204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102100205", "П000102110205;П000102120205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200104", "П000102110104;П000102120104;П000102210104;П000102220104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200105", "П000102110105;П000102120105;П000102210105;П000102220105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102200205", "П000102110205;П000102120205;П000102210205;П000102220205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300104", "П000102110104;П000102120104;П000102210104;П000102220104;П000100231004;П000100232004;П000100234004;П000100233004;П000100235004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300105", "П000102110105;П000102120105;П000102210105;П000102220105;П000100231005;П000100232005;П000100234005;П000100233005;П000100235005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300204", "П000102110204;П000102120204;П000102210204;П000102220204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000102300205", "П000102110205;П000102120205;П000102210205;П000102220205");
	
	Если ЭтоОФР2019(СтруктураОтчета) Тогда
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240004", "П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240005", "П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100230004;П000100241004;П000100243004;П000100245004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100230005;П000100241005;П000100243005;П000100245005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	КонецЕсли;
	
	Если ЭтоОФР2020(СтруктураОтчета) Тогда
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240004", "П000100230004;П000100241004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100240005", "П000100230005;П000100241005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250004", "П000100240004;П000100251004;П000100252004;П000100230004;П000100241004;П000100246004;П000100220004;П000100231004;П000100232004;П000100233004;П000100234004;П000100235004;П000100210004;П000100221004;П000100222004;П000100211004;П000100212004");
		СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100250005", "П000100240005;П000100251005;П000100252005;П000100230005;П000100241005;П000100246005;П000100220005;П000100231005;П000100232005;П000100233005;П000100234005;П000100235005;П000100210005;П000100221005;П000100222005;П000100211005;П000100212005");
	КонецЕсли;
	
	// Отчет об изменениях капитала.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100310008", "П000100310003;П000100310004;П000100310005;П000100310006;П000100310007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321108", "П000100321107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321208", "П000100321205;П000100321207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321308", "П000100321305;П000100321307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321408", "П000100321403;П000100321404;П000100321405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321608", "П000100321603;П000100321604;П000100321605;П000100321606;П000100321607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100321008", "П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321003", "П000100321403;П000100321503;П000100321603;П100100321003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321004", "П000100321404;П000100321504;П000100321604;П100100321004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321005", "П000100321205;П000100321305;П000100321405;П000100321505;П000100321605;П100100321005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321006", "П000100321606;П100100321006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321007", "П000100321107;П000100321207;П000100321307;П000100321507;П000100321607;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100321008", "П000100321108;П000100321208;П000100321308;П000100321408;П000100321608;П100100321008;П000100321107;П000100321205;П000100321207;П000100321305;П000100321307;П000100321403;П000100321404;П000100321405;П000100321603;П000100321604;П000100321605;П000100321606;П000100321607;П100100321003;П100100321004;П100100321005;П100100321006;П100100321007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322108", "П000100322107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322208", "П000100322205;П000100322207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322308", "П000100322305;П000100322307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322408", "П000100322403;П000100322404;П000100322405;П000100322407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322508", "П000100322503;П000100322504;П000100322505;П000100322507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322608", "П000100322603;П000100322604;П000100322605;П000100322606;П000100322607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322708", "П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100324007", "П000100324006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322003", "П000100322403;П000100322503;П000100322603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322004", "П000100322404;П000100322504;П000100322604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322005", "П000100322205;П000100322305;П000100322405;П000100322505;П000100322605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322006", "П000100322606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322007", "П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100322008", "П000100322108;П000100322208;П000100322308;П000100322408;П000100322508;П000100322608;П000100322708;П000100322107;П000100322205;П000100322207;П000100322305;П000100322307;П000100322403;П000100322404;П000100322405;П000100322407;П000100322503;П000100322504;П000100322505;П000100322507;П000100322603;П000100322604;П000100322605;П000100322606;П000100322607;П000100322707;П000100322003;П000100322004;П000100322005;П000100322006;П000100322007;П000100322403;П000100322503;П000100322603;П000100322404;П000100322504;П000100322604;П000100322205;П000100322305;П000100322405;П000100322505;П000100322605;П000100322606;П000100322107;П000100322207;П000100322307;П000100322407;П000100322507;П000100322607;П000100322707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100320008", "П000100320003;П000100320004;П000100320005;П000100320006;П000100320007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331108", "П000100331107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331208", "П000100331205;П000100331207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331308", "П000100331305;П000100331307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331408", "П000100331403;П000100331404;П000100331405");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331608", "П000100331603;П000100331604;П000100331605;П000100331606;П000100331607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100331008", "П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331003", "П000100331403;П000100331503;П000100331603;П100100331003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331004", "П000100331404;П000100331504;П000100331604;П100100331004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331005", "П000100331205;П000100331305;П000100331405;П000100331505;П000100331605;П100100331005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331006", "П000100331606;П100100331006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331007", "П000100331107;П000100331207;П000100331307;П000100331507;П000100331607;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100331008", "П000100331108;П000100331208;П000100331308;П000100331408;П000100331608;П100100331008;П000100331107;П000100331205;П000100331207;П000100331305;П000100331307;П000100331403;П000100331404;П000100331405;П000100331603;П000100331604;П000100331605;П000100331606;П000100331607;П100100331003;П100100331004;П100100331005;П100100331006;П100100331007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332108", "П000100332107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332208", "П000100332205;П000100332207");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332308", "П000100332305;П000100332307");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332408", "П000100332403;П000100332404;П000100332405;П000100332407");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332508", "П000100332503;П000100332504;П000100332505;П000100332507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332608", "П000100332603;П000100332604;П000100332605;П000100332606;П000100332607");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332708", "П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332003", "П000100332403;П000100332503;П000100332603");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332004", "П000100332404;П000100332504;П000100332604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332005", "П000100332205;П000100332305;П000100332405;П000100332505;П000100332605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332006", "П000100332606");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332007", "П000100332107;П000100332207;П000100332307;П000100332407;П000100332507;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100332008", "П000100332108;П000100332208;П000100332308;П000100332408;П000100332508;П000100332608;П000100332708;П000100332107;П000100332205;П000100332207;П000100332305;П000100332307;П000100332403;П000100332404;П000100332405;П000100332407;П000100332503;П000100332504;П000100332505;П000100332507;П000100332603;П000100332604;П000100332605;П000100332606;П000100332607;П000100332707");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100334007", "П000100334006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100330008", "П000100330003;П000100330004;П000100330005;П000100330006;П000100330007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340105", "П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341106", "П000100341103;П000100341104;П000100341105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342106", "П000100342103;П000100342104;П000100342105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350103", "П000100340103;П000100341103;П000100342103");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350104", "П000100340104;П000100341104;П000100342104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350105", "П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350106", "П000100350103;П000100350104;П000100350105;П000100340103;П000100341103;П000100342103;П000100340104;П000100341104;П000100342104;П000100340105;П000100341105;П000100342105;П000100340106;П000100340103;П000100340104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340206", "П000100340203;П000100340204;П000100340205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341206", "П000100341203;П000100341204;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342206", "П000100342203;П000100342204;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350203", "П000100340203;П000100341203;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350204", "П000100340204;П000100341204;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350205", "П000100340205;П000100341205;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350206", "П000100350203;П000100350204;П000100350205;П000100340203;П000100341203;П000100342203;П000100340204;П000100341204;П000100342204;П000100340205;П000100341205;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341003", "П000100341103;П000100341203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341004", "П000100341104;П000100341204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341005", "П000100341105;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342003", "П000100342103;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342004", "П000100342104;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342005", "П000100342105;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100340005", "П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100341006", "П000100341003;П000100341004;П000100341005;П000100341103;П000100341203;П000100341104;П000100341204;П000100341105;П000100341205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100342006", "П000100342003;П000100342004;П000100342005;П000100342103;П000100342203;П000100342104;П000100342204;П000100342105;П000100342205");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350003", "П000100340003;П000100341003;П000100342003;П000100341103;П000100341203;П000100342103;П000100342203");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350004", "П000100340004;П000100341004;П000100342004;П000100341104;П000100341204;П000100342104;П000100342204");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350005", "П000100340005;П000100341005;П000100342005;П000100341105;П000100341205;П000100342105;П000100342205;П000100340006;П000100340003;П000100340004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100350006", "П000100350003;П000100350004;П000100350005;П000100340003;П000100341003;П000100342003;П000100341103;П000100341203;П000100342103;П000100342203;П000100340004;П000100341004;П000100342004;П000100341104;П000100341204;П000100342104;П000100342204;П000100340005;П000100341005;П000100342005;П000100341105;П000100341205;П000100342105;П000100342205;П000100340006;П000100340003;П000100340004");
	
	// Данные "Стоимости чистых активов" (из Расчета активов).
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360003", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360004", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100360005", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
	
	// Отчет о движении денежных средств.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411003", "П000100411103;П000100411203;П000100411303;П100100411003;П000100411903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100411004", "П000100411104;П000100411204;П000100411304;П100100411004;П000100411904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412003", "П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100412004", "П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410003", "П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100410004", "П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421003", "П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100421004", "П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422003", "П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100422004", "П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420003", "П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100420004", "П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431003", "П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100431004", "П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432003", "П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100432004", "П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430003", "П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100430004", "П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440003", "П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100440004", "П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450003", "П000100440003;П000100445003;П000100449003;П000100410003;П000100420003;П000100430003;П000100411003;П000100412003;П000100411103;П000100411203;П000100411303;П100100411003;П000100411903;П000100412103;П000100412203;П000100412303;П000100412403;П100100412003;П000100412903;П000100421003;П000100422003;П000100421103;П000100421203;П000100421303;П000100421403;П100100421003;П000100421903;П000100422103;П000100422203;П000100422303;П000100422403;П100100422003;П000100422903;П000100431003;П000100432003;П000100431103;П000100431203;П000100431303;П000100431403;П100100431003;П000100431903;П000100432103;П000100432203;П000100432303;П100100432003;П000100432903");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100450004", "П000100440004;П000100445004;П000100449004;П000100410004;П000100420004;П000100430004;П000100411004;П000100412004;П000100411104;П000100411204;П000100411304;П100100411004;П000100411904;П000100412104;П000100412204;П000100412304;П000100412404;П100100412004;П000100412904;П000100421004;П000100422004;П000100421104;П000100421204;П000100421304;П000100421404;П100100421004;П000100421904;П000100422104;П000100422204;П000100422304;П000100422404;П100100422004;П000100422904;П000100431004;П000100432004;П000100431104;П000100431204;П000100431304;П000100431404;П100100431004;П000100431904;П000100432104;П000100432204;П000100432304;П100100432004;П000100432904");
	
	// Отчет о целевом использовании средств.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620004", "П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100631004", "П000100631104;П000100631204;П000100631304");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100632004", "П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630004", "П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640004", "П000100610004;П000100620004;П000100630004;П000100621004;П000100621504;П000100622004;П000100623004;П000100624004;П000100625004;П000100631004;П000100632004;П000100633004;П000100635004;П000100631104;П000100631204;П000100631304;П000100632104;П000100632204;П000100632304;П000100632404;П000100632504;П000100632604");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100620005", "П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100631005", "П000100631105;П000100631205;П000100631305");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100632005", "П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100630005", "П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100640005", "П000100610005;П000100620005;П000100630005;П000100621005;П000100621505;П000100622005;П000100623005;П000100624005;П000100625005;П000100631005;П000100632005;П000100633005;П000100635005;П000100631105;П000100631205;П000100631305;П000100632105;П000100632205;П000100632305;П000100632405;П000100632505;П000100632605");
	
	// Расчет активов.
	// Активы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111004", "П000100111004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111005", "П000100111005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110111006", "П000100111006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112004", "П000100112004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112005", "П000100112005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110112006", "П000100112006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113004", "П000100113004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113005", "П000100113005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110113006", "П000100113006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114004", "П000100114004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114005", "П000100114005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110114006", "П000100114006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115004", "П000100115004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115005", "П000100115005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110115006", "П000100115006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116004", "П000100116004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116005", "П000100116005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110116006", "П000100116006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117004", "П000100117004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117005", "П000100117005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110117006", "П000100117006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118004", "П000100118004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118005", "П000100118005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110118006", "П000100118006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119004", "П000100119004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119005", "П000100119005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110119006", "П000100119006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121004", "П000100121004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121005", "П000100121005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110121006", "П000100121006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122004", "П000100122004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122005", "П000100122005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110122006", "П000100122006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123004", "П000100123004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123005", "П000100123005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110123006", "П000100123006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124004", "П000100124004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124005", "П000100124005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110124006", "П000100124006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125004", "П000100125004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125005", "П000100125005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110125006", "П000100125006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126004", "П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126005", "П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110126006", "П000100126006");
	
	// ИТОГО активы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110100006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006");
	
	// Пассивы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141004", "П000100141004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141005", "П000100141005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110141006", "П000100141006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142004", "П000100142004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142005", "П000100142005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110142006", "П000100142006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143004", "П000100143004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143005", "П000100143005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110143006", "П000100143006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145004", "П000100145004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145005", "П000100145005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110145006", "П000100145006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151004", "П000100151004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151005", "П000100151005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110151006", "П000100151006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152004", "П000100152004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152005", "П000100152005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110152006", "П000100152006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154004", "П000100154004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154005", "П000100154005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110154006", "П000100154006");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155004", "П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155005", "П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110155006", "П000100155006");
	
	// ИТОГО пассивы.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200004", "П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200005", "П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110200006", "П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
	
	// Стоимость чистых активов.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300004", "П000100111004;П000100112004;П000100113004;П000100114004;П000100115004;П000100116004;П000100117004;П000100118004;П000100119004;П000100121004;П000100122004;П000100123004;П000100124004;П000100125004;П000100126004;П000100141004;П000100142004;П000100143004;П000100145004;П000100151004;П000100152004;П000100154004;П000100155004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300005", "П000100111005;П000100112005;П000100113005;П000100114005;П000100115005;П000100116005;П000100117005;П000100118005;П000100119005;П000100121005;П000100122005;П000100123005;П000100124005;П000100125005;П000100126005;П000100141005;П000100142005;П000100143005;П000100145005;П000100151005;П000100152005;П000100154005;П000100155005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000110300006", "П000100111006;П000100112006;П000100113006;П000100114006;П000100115006;П000100116006;П000100117006;П000100118006;П000100119006;П000100121006;П000100122006;П000100123006;П000100124006;П000100125006;П000100126006;П000100141006;П000100142006;П000100143006;П000100145006;П000100151006;П000100152006;П000100154006;П000100155006");
	
	// Пояснения 3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530004", "П000100530104;П000100530504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530005", "П000100530105;П000100530505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530006", "П000100530106;П000100530506");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530007", "П000100530107;П000100530507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530008", "П000100530108;П000100530508");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530009", "П000100530109;П000100530509");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530010", "П000100530110;П000100530510");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530011", "П000100530111;П000100530511");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100530012", "П000100530112;П000100530512");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531004", "П000100531104;П000100531504");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531005", "П000100531105;П000100531505");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531006", "П000100531106;П000100531506");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531007", "П000100531107;П000100531507");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531008", "П000100531108;П000100531508");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531009", "П000100531109;П000100531509");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531010", "П000100531110;П000100531510");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531011", "П000100531111;П000100531511");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100531012", "П000100531112;П000100531512");
	
	// Пояснения 5.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550004", "П000100550104;П000100551104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552004", "П000100552104;П000100553104");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550005", "П000100550105;П000100551105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552005", "П000100552105;П000100553105");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550006", "П000100550106;П000100551106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552006", "П000100552106;П000100553106");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550007", "П000100550107;П000100551107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552007", "П000100552107;П000100553107");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550008", "П000100550108;П000100551108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552008", "П000100552108;П000100553108");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550009", "П000100550109;П000100551109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552009", "П000100552109;П000100553109");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550010", "П000100550110;П000100551110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552010", "П000100552110;П000100553110");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550012", "П000100550112;П000100551112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552012", "П000100552112;П000100553112");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100550013", "П000100550113;П000100551113");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100552013", "П000100552113;П000100553113");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555004", "П000100555104;П000100556004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557004", "П000100557104;П000100558004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555005", "П000100555105;П000100556005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557005", "П000100557105;П000100558005");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555006", "П000100555106;П000100556006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557006", "П000100557106;П000100558006");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555007", "П000100555107;П000100556007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557007", "П000100557107;П000100558007");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555008", "П000100555108;П000100556008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557008", "П000100557108;П000100558008");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100555010", "П000100555110;П000100556010");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100557010", "П000100557110;П000100558010");
	
	// Пояснения 6.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100566003", "П000100561003;П000100562003;П000100563003;П000100564003;П000100565003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100566004", "П000100561004;П000100562004;П000100563004;П000100564004;П000100565004");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100560003", "П000100561003;П000100562003;П000100563003;П000100564003;П000100565003;П000100566503;П000100567003;П000100568003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100560004", "П000100561004;П000100562004;П000100563004;П000100564004;П000100565004;П000100566504;П000100567004;П000100568004");
	
	// Пояснения 7.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П100100570007", "П100100570003;П100100570004;П100100570005;П100100570006");
	
	// Пояснения 9.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100590003", "П000100590103;П000100590503");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000100590004", "П000100590104;П000100590504");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	УстановитьВидСдачиОтчетности(1);
	ФормироватьСтруктуруСтраницОтчета();
	СформироватьСоставПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиПримененияУСН()
	
	ОтчетныйПериодКонец  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	ОтчетныйПериодНачало = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	
	ПредшествующийПериодКонец  = ОтчетныйПериодНачало - 1;
	ПредшествующийПериодНачало = НачалоГода(ПредшествующийПериодКонец);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ОтчетныйПериодНачало, ОтчетныйПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН0 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
	ОбъектНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
		СтруктураРеквизитовФормы.Организация, ПредшествующийПериодНачало, ПредшествующийПериодКонец);
	СтруктураРеквизитовФормы.ПрименениеУСН1 = ЗначениеЗаполнено(ОбъектНалогообложения);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтчета

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ИмяРаздела = Неопределено;
	Если Команда.Имя = "ЗаполнитьТекущий" Тогда
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	РезультатЗапускаФоновогоЗадания = ЗаполнитьАвтоНаСервере(ИмяРаздела, ВремяНачалаОперации);
	
	Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаФоновогоЗадания, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеАвтозаполненияВФоне(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Статус = "Выполнено" Тогда
			ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации);
			ЗагрузитьПодготовленныеДанные();
			
		ИначеЕсли Результат.Статус = "Ошибка" Тогда
			ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвтоНаСервере(ИмяРаздела = Неопределено, ВремяНачалаОперации = Неопределено)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ЗначениеТаймера();
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Модифицированность = Истина;
	
	РезультатПроверкиАктуализацииДанныхУчета = Неопределено;
	
	РегламентированнаяОтчетностьПереопределяемый.ПолучитьРезультатПроверкиАктуализацииДанныхУчета(
		СтруктураРеквизитовФормы.Организация,
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,
		РезультатПроверкиАктуализацииДанныхУчета);
	
	Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Ложь;
	
	Если НЕ РезультатПроверкиАктуализацииДанныхУчета = Неопределено 
	   И РезультатПроверкиАктуализацииДанныхУчета.ТребуетсяАктуализация Тогда
		
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок = Новый Массив;
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru='Данные учета неактуальны с '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(Формат(РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности, "ДЛФ=Д"), Новый Шрифт(, , Истина)));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru='. Рекомендуется выполнить '"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='закрытие месяца'"), , , , "ОткрытьФормуЗакрытияМесяца"));
		ПроверкаАктуализацииДанныхПредупреждениеЗаголовок.Добавить(НСтр("ru=' и автозаполнить отчет повторно.'"));
		
		Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок =
		Новый ФорматированнаяСтрока(ПроверкаАктуализацииДанныхПредупреждениеЗаголовок);
		
		СтруктураРеквизитовФормы.ДатаАктуальностиДанных = РезультатПроверкиАктуализацииДанныхУчета.ДатаАктуальности;
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                     СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("ГруппаОрганизаций",               СтруктураРеквизитовФормы.ГруппаОрганизаций);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",        СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",         СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы",    ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("АдресВоВременномХранилище",       СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	ПараметрыОтчета.Вставить("СтруктураОтчета",                 СтруктураОтчета);
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокБаланс", ДеревоНастроекБаланс);
	ПараметрыОтчета.Вставить("СоставДополнительныхСтрокОФР",    ДеревоНастроекОФР);
	ПараметрыОтчета.Вставить("ПрименениеЕНВД",                  СтруктураРеквизитовФормы.ПрименениеЕНВД);
	ПараметрыОтчета.Вставить("ПрименениеУСН0",                  СтруктураРеквизитовФормы.ПрименениеУСН0);
	ПараметрыОтчета.Вставить("ПрименениеУСН1",                  СтруктураРеквизитовФормы.ПрименениеУСН1);
	ПараметрыОтчета.Вставить("СтруктураМногострочныхЧастей",    СтруктураМногострочныхЧастей);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	Иначе
		ТаблицаРасшифровки = Неопределено;
	КонецЕсли;
	ПараметрыОтчета.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	ИменаЗаполняемыхРазделов = Новый Массив;
	
	ОтметитьРазделКакАвтозаполняемый("Баланс",     ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОФР",        ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОИК",        ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОДДС",       ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("ОЦИС",       ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения1", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения2", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения3", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения4", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения5", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения6", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения7", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения8", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	ОтметитьРазделКакАвтозаполняемый("Пояснения9", ИмяРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов);
	
	СтруктураРеквизитовФормы.Вставить("ИменаАвтоЗаполняемыхРазделов", ИменаЗаполняемыхРазделов);
	
	ОчиститьНаСервере(ИмяРаздела, Ложь);
	
	СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
	СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
	Если ВидСдачиОтчетности = 1 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
	КонецЕсли;
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("Баланс",        СтруктураДанныхБаланс);
	Контейнер.Вставить("ОФР",           СтруктураДанныхОФР);
	Контейнер.Вставить("ОИК",           СтруктураДанныхОИК);
	Контейнер.Вставить("ОДДС",          СтруктураДанныхОДДС);
	Контейнер.Вставить("ОЦИС",          СтруктураДанныхОЦИС);
	Контейнер.Вставить("РасчетАктивов", СтруктураДанныхРасчетАктивов);
	Контейнер.Вставить("Пояснения1",    СтруктураДанныхПояснения1);
	Контейнер.Вставить("Пояснения2",    СтруктураДанныхПояснения2);
	Контейнер.Вставить("Пояснения3",    СтруктураДанныхПояснения3);
	Контейнер.Вставить("Пояснения4",    СтруктураДанныхПояснения4);
	Контейнер.Вставить("Пояснения5",    СтруктураДанныхПояснения5);
	Контейнер.Вставить("Пояснения6",    СтруктураДанныхПояснения6);
	Контейнер.Вставить("Пояснения7",    СтруктураДанныхПояснения7);
	Контейнер.Вставить("Пояснения8",    СтруктураДанныхПояснения8);
	Контейнер.Вставить("Пояснения9",    СтруктураДанныхПояснения9);
	
	НаименованиеЗадания = НСтр("ru = 'Автоматическое заполнение по данным информационной базы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИДОтчета", ИмяОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ИДРедакцииОтчета", ИмяФормыОтчета(ЭтаФорма.ИмяФормы));
	ПараметрыПроцедуры.Вставить("ПараметрыОтчета", ПараметрыОтчета);
	ПараметрыПроцедуры.Вставить("Контейнер", Контейнер);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("РегламентированнаяОтчетность.ЗаполнитьОтчетВФоне",
		ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации);
		ЗагрузитьПодготовленныеДанные();
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
		
	КонецЕсли;
	
	Возврат РезультатЗапуска;
	
КонецФункции

&НаСервере
Процедура ОтметитьРазделКакАвтозаполняемый(ИмяРаздела, ИмяТекущегоРаздела, ПараметрыОтчета, ИменаЗаполняемыхРазделов)
	
	ЗаполнятьВсеВидимые = (НЕ ЗначениеЗаполнено(ИмяТекущегоРаздела));
	
	ЗаполнятьРаздел = (ЗаполнятьВсеВидимые ИЛИ ИмяТекущегоРаздела = ИмяРаздела)
	                И СтраницаВидимаНаСервере(ИмяРаздела);
	
	ПараметрыОтчета.Вставить("Заполнять" + ИмяРаздела, ЗаполнятьРаздел);
	
	Если ЗаполнятьРаздел Тогда
		ИменаЗаполняемыхРазделов.Добавить(ИмяРаздела);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетПоказателей

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", Знач ОбластьИмя = "")
	
	Перем Индекс, ИндексСтр;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Баланс" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			
			мБаланс = Форма.ТабличныйДокумент.Области;
			
			// Актив
			// Строка 1100
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110004, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110004.Значение = мБаланс.П000100111004.Значение
					+ мБаланс.П000100112004.Значение
					+ мБаланс.П000100113004.Значение
					+ мБаланс.П000100114004.Значение
					+ мБаланс.П000100115004.Значение
					+ мБаланс.П000100116004.Значение
					+ мБаланс.П000100117004.Значение
					+ мБаланс.П000100118004.Значение
					+ мБаланс.П000100119004.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110005, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110005.Значение = мБаланс.П000100111005.Значение
					+ мБаланс.П000100112005.Значение
					+ мБаланс.П000100113005.Значение
					+ мБаланс.П000100114005.Значение
					+ мБаланс.П000100115005.Значение
					+ мБаланс.П000100116005.Значение
					+ мБаланс.П000100117005.Значение
					+ мБаланс.П000100118005.Значение
					+ мБаланс.П000100119005.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110006, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110006.Значение = мБаланс.П000100111006.Значение
				+ мБаланс.П000100112006.Значение
				+ мБаланс.П000100113006.Значение
				+ мБаланс.П000100114006.Значение
				+ мБаланс.П000100115006.Значение
				+ мБаланс.П000100116006.Значение
				+ мБаланс.П000100117006.Значение
				+ мБаланс.П000100118006.Значение
				+ мБаланс.П000100119006.Значение;
				
			КонецЕсли;
			
			// строка 1200
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120004.Значение
				= мБаланс.П000100121004.Значение
				+ мБаланс.П000100122004.Значение
				+ мБаланс.П000100123004.Значение
				+ мБаланс.П000100124004.Значение
				+ мБаланс.П000100125004.Значение
				+ мБаланс.П000100126004.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120005.Значение
				= мБаланс.П000100121005.Значение
				+ мБаланс.П000100122005.Значение
				+ мБаланс.П000100123005.Значение
				+ мБаланс.П000100124005.Значение
				+ мБаланс.П000100125005.Значение
				+ мБаланс.П000100126005.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120006.Значение
				= мБаланс.П000100121006.Значение
				+ мБаланс.П000100122006.Значение
				+ мБаланс.П000100123006.Значение
				+ мБаланс.П000100124006.Значение
				+ мБаланс.П000100125006.Значение
				+ мБаланс.П000100126006.Значение;
			КонецЕсли;
			
			// строка 1600
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160004.Значение
				= мБаланс.П000100110004.Значение
				+ мБаланс.П000100120004.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160005.Значение
				= мБаланс.П000100110005.Значение
				+ мБаланс.П000100120005.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160006.Значение
				= мБаланс.П000100110006.Значение
				+ мБаланс.П000100120006.Значение;
			КонецЕсли;
			
			// Пассив
			// строка 1300
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130004, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134004.Значение;
				КонецЕсли;
				
				мБаланс.П000100130004.Значение
				= мБаланс.П000100131004.Значение
				+ мБаланс.П000100132004.Значение
				+ Строка1340
				+ мБаланс.П000100135004.Значение
				+ мБаланс.П000100136004.Значение
				+ мБаланс.П000100137004.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130005, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134005.Значение;
				КонецЕсли;
				
				мБаланс.П000100130005.Значение
				= мБаланс.П000100131005.Значение
				+ мБаланс.П000100132005.Значение
				+ Строка1340
				+ мБаланс.П000100135005.Значение
				+ мБаланс.П000100136005.Значение
				+ мБаланс.П000100137005.Значение;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130006, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134006.Значение;
				КонецЕсли;
				
				мБаланс.П000100130006.Значение
				= мБаланс.П000100131006.Значение
				+ мБаланс.П000100132006.Значение
				+ Строка1340
				+ мБаланс.П000100135006.Значение
				+ мБаланс.П000100136006.Значение
				+ мБаланс.П000100137006.Значение;
				
			КонецЕсли;
			
			// строка 1400
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140004.Значение
				= мБаланс.П000100141004.Значение
				+ мБаланс.П000100142004.Значение
				+ мБаланс.П000100143004.Значение
				+ мБаланс.П000100145004.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140005.Значение
				= мБаланс.П000100141005.Значение
				+ мБаланс.П000100142005.Значение
				+ мБаланс.П000100143005.Значение
				+ мБаланс.П000100145005.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140006.Значение
				= мБаланс.П000100141006.Значение
				+ мБаланс.П000100142006.Значение
				+ мБаланс.П000100143006.Значение
				+ мБаланс.П000100145006.Значение;
			КонецЕсли;
			
			// строка 1500
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150004.Значение
				= мБаланс.П000100151004.Значение
				+ мБаланс.П000100152004.Значение
				+ мБаланс.П000100153004.Значение
				+ мБаланс.П000100154004.Значение
				+ мБаланс.П000100155004.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150005.Значение
				= мБаланс.П000100151005.Значение
				+ мБаланс.П000100152005.Значение
				+ мБаланс.П000100153005.Значение
				+ мБаланс.П000100154005.Значение
				+ мБаланс.П000100155005.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150006.Значение
				= мБаланс.П000100151006.Значение
				+ мБаланс.П000100152006.Значение
				+ мБаланс.П000100153006.Значение
				+ мБаланс.П000100154006.Значение
				+ мБаланс.П000100155006.Значение;
			КонецЕсли;
			
			// строка 1700
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170004.Значение
				= мБаланс.П000100130004.Значение
				+ мБаланс.П000100140004.Значение
				+ мБаланс.П000100150004.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170005.Значение
				= мБаланс.П000100130005.Значение
				+ мБаланс.П000100140005.Значение
				+ мБаланс.П000100150005.Значение;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170006.Значение
				= мБаланс.П000100130006.Значение
				+ мБаланс.П000100140006.Значение
				+ мБаланс.П000100150006.Значение;
			КонецЕсли;
			
			// Расчет стоимости чистых активов.
			Если Истина Тогда
				// Активы.
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110111004", мБаланс.П000100111004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110111005", мБаланс.П000100111005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110111006", мБаланс.П000100111006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110112004", мБаланс.П000100112004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110112005", мБаланс.П000100112005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110112006", мБаланс.П000100112006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110113004", мБаланс.П000100113004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110113005", мБаланс.П000100113005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110113006", мБаланс.П000100113006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110114004", мБаланс.П000100114004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110114005", мБаланс.П000100114005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110114006", мБаланс.П000100114006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110115004", мБаланс.П000100115004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110115005", мБаланс.П000100115005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110115006", мБаланс.П000100115006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110116004", мБаланс.П000100116004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110116005", мБаланс.П000100116005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110116006", мБаланс.П000100116006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110117004", мБаланс.П000100117004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110117005", мБаланс.П000100117005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110117006", мБаланс.П000100117006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110118004", мБаланс.П000100118004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110118005", мБаланс.П000100118005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110118006", мБаланс.П000100118006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110119004", мБаланс.П000100119004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110119005", мБаланс.П000100119005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110119006", мБаланс.П000100119006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110121004", мБаланс.П000100121004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110121005", мБаланс.П000100121005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110121006", мБаланс.П000100121006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110122004", мБаланс.П000100122004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110122005", мБаланс.П000100122005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110122006", мБаланс.П000100122006.Значение);
				КонецЕсли;
				
				// Перенос значений строки 1230 с учетом исключения счета 75.01.
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110123004",
					мБаланс.П000100123004.Значение - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа04"]);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110123005",
					мБаланс.П000100123005.Значение - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа05"]);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110123006",
					мБаланс.П000100123006.Значение - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа06"]);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110124004", мБаланс.П000100124004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110124005", мБаланс.П000100124005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110124006", мБаланс.П000100124006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110125004", мБаланс.П000100125004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110125005", мБаланс.П000100125005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110125006", мБаланс.П000100125006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110126004", мБаланс.П000100126004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110126005", мБаланс.П000100126005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110126006", мБаланс.П000100126006.Значение);
				КонецЕсли;
				
				// ИТОГО активы.
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110100004",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110111004"), Форма.СтруктураДанныхРасчетАктивов.П000110111004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110112004"), Форма.СтруктураДанныхРасчетАктивов.П000110112004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110113004"), Форма.СтруктураДанныхРасчетАктивов.П000110113004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110114004"), Форма.СтруктураДанныхРасчетАктивов.П000110114004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110115004"), Форма.СтруктураДанныхРасчетАктивов.П000110115004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110116004"), Форма.СтруктураДанныхРасчетАктивов.П000110116004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110117004"), Форма.СтруктураДанныхРасчетАктивов.П000110117004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110118004"), Форма.СтруктураДанныхРасчетАктивов.П000110118004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110119004"), Форма.СтруктураДанныхРасчетАктивов.П000110119004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110121004"), Форма.СтруктураДанныхРасчетАктивов.П000110121004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110122004"), Форма.СтруктураДанныхРасчетАктивов.П000110122004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110123004"), Форма.СтруктураДанныхРасчетАктивов.П000110123004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110124004"), Форма.СтруктураДанныхРасчетАктивов.П000110124004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110125004"), Форма.СтруктураДанныхРасчетАктивов.П000110125004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110126004"), Форма.СтруктураДанныхРасчетАктивов.П000110126004, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110100005",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110111005"), Форма.СтруктураДанныхРасчетАктивов.П000110111005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110112005"), Форма.СтруктураДанныхРасчетАктивов.П000110112005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110113005"), Форма.СтруктураДанныхРасчетАктивов.П000110113005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110114005"), Форма.СтруктураДанныхРасчетАктивов.П000110114005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110115005"), Форма.СтруктураДанныхРасчетАктивов.П000110115005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110116005"), Форма.СтруктураДанныхРасчетАктивов.П000110116005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110117005"), Форма.СтруктураДанныхРасчетАктивов.П000110117005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110118005"), Форма.СтруктураДанныхРасчетАктивов.П000110118005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110119005"), Форма.СтруктураДанныхРасчетАктивов.П000110119005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110121005"), Форма.СтруктураДанныхРасчетАктивов.П000110121005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110122005"), Форма.СтруктураДанныхРасчетАктивов.П000110122005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110123005"), Форма.СтруктураДанныхРасчетАктивов.П000110123005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110124005"), Форма.СтруктураДанныхРасчетАктивов.П000110124005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110125005"), Форма.СтруктураДанныхРасчетАктивов.П000110125005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110126005"), Форма.СтруктураДанныхРасчетАктивов.П000110126005, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110100006",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110111006"), Форма.СтруктураДанныхРасчетАктивов.П000110111006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110112006"), Форма.СтруктураДанныхРасчетАктивов.П000110112006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110113006"), Форма.СтруктураДанныхРасчетАктивов.П000110113006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110114006"), Форма.СтруктураДанныхРасчетАктивов.П000110114006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110115006"), Форма.СтруктураДанныхРасчетАктивов.П000110115006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110116006"), Форма.СтруктураДанныхРасчетАктивов.П000110116006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110117006"), Форма.СтруктураДанныхРасчетАктивов.П000110117006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110118006"), Форма.СтруктураДанныхРасчетАктивов.П000110118006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110119006"), Форма.СтруктураДанныхРасчетАктивов.П000110119006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110121006"), Форма.СтруктураДанныхРасчетАктивов.П000110121006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110122006"), Форма.СтруктураДанныхРасчетАктивов.П000110122006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110123006"), Форма.СтруктураДанныхРасчетАктивов.П000110123006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110124006"), Форма.СтруктураДанныхРасчетАктивов.П000110124006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110125006"), Форма.СтруктураДанныхРасчетАктивов.П000110125006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110126006"), Форма.СтруктураДанныхРасчетАктивов.П000110126006, 0));
				КонецЕсли;
				
				// Пассивы.
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110141004", мБаланс.П000100141004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110141005", мБаланс.П000100141005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110141006", мБаланс.П000100141006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110142004", мБаланс.П000100142004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110142005", мБаланс.П000100142005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110142006", мБаланс.П000100142006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110143004", мБаланс.П000100143004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110143005", мБаланс.П000100143005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110143006", мБаланс.П000100143006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110145004", мБаланс.П000100145004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110145005", мБаланс.П000100145005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110145006", мБаланс.П000100145006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110151004", мБаланс.П000100151004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110151005", мБаланс.П000100151005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110151006", мБаланс.П000100151006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110152004", мБаланс.П000100152004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110152005", мБаланс.П000100152005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110152006", мБаланс.П000100152006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110154004", мБаланс.П000100154004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110154005", мБаланс.П000100154005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110154006", мБаланс.П000100154006.Значение);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110155004", мБаланс.П000100155004.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110155005", мБаланс.П000100155005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110155006", мБаланс.П000100155006.Значение);
				КонецЕсли;
				
				// ИТОГО пассивы.
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110200004",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110141004"), Форма.СтруктураДанныхРасчетАктивов.П000110141004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110142004"), Форма.СтруктураДанныхРасчетАктивов.П000110142004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110143004"), Форма.СтруктураДанныхРасчетАктивов.П000110143004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110145004"), Форма.СтруктураДанныхРасчетАктивов.П000110145004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110151004"), Форма.СтруктураДанныхРасчетАктивов.П000110151004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110152004"), Форма.СтруктураДанныхРасчетАктивов.П000110152004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110154004"), Форма.СтруктураДанныхРасчетАктивов.П000110154004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110155004"), Форма.СтруктураДанныхРасчетАктивов.П000110155004, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110200005",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110141005"), Форма.СтруктураДанныхРасчетАктивов.П000110141005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110142005"), Форма.СтруктураДанныхРасчетАктивов.П000110142005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110143005"), Форма.СтруктураДанныхРасчетАктивов.П000110143005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110145005"), Форма.СтруктураДанныхРасчетАктивов.П000110145005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110151005"), Форма.СтруктураДанныхРасчетАктивов.П000110151005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110152005"), Форма.СтруктураДанныхРасчетАктивов.П000110152005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110154005"), Форма.СтруктураДанныхРасчетАктивов.П000110154005, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110155005"), Форма.СтруктураДанныхРасчетАктивов.П000110155005, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110200006",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110141006"), Форма.СтруктураДанныхРасчетАктивов.П000110141006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110142006"), Форма.СтруктураДанныхРасчетАктивов.П000110142006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110143006"), Форма.СтруктураДанныхРасчетАктивов.П000110143006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110145006"), Форма.СтруктураДанныхРасчетАктивов.П000110145006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110151006"), Форма.СтруктураДанныхРасчетАктивов.П000110151006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110152006"), Форма.СтруктураДанныхРасчетАктивов.П000110152006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110154006"), Форма.СтруктураДанныхРасчетАктивов.П000110154006, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110155006"), Форма.СтруктураДанныхРасчетАктивов.П000110155006, 0));
				КонецЕсли;
				
				// Стоимость чистых активов.
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110300004",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110100004"), Форма.СтруктураДанныхРасчетАктивов.П000110100004, 0)
					- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110200004"), Форма.СтруктураДанныхРасчетАктивов.П000110200004, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110300005",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110100005"), Форма.СтруктураДанныхРасчетАктивов.П000110100005, 0)
					- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110200005"), Форма.СтруктураДанныхРасчетАктивов.П000110200005, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300006, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110300006",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110100006"), Форма.СтруктураДанныхРасчетАктивов.П000110100006, 0)
					- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110200006"), Форма.СтруктураДанныхРасчетАктивов.П000110200006, 0));
				КонецЕсли;
				
				// Расчет в табл. 3 Отчета об изменении капитала.
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360003, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхОИК.Вставить("П000100360003", Форма.СтруктураДанныхРасчетАктивов.П000110300004);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхОИК.Вставить("П000100360004", Форма.СтруктураДанныхРасчетАктивов.П000110300005);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360005, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхОИК.Вставить("П000100360005", Форма.СтруктураДанныхРасчетАктивов.П000110300006);
				КонецЕсли;
				
			Иначе // Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20141101'
				
				// строка 1
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000103, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000103", мБаланс.П000100111005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000104, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000104", мБаланс.П000100111004.Значение);
				КонецЕсли;
				
				Если Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20120101' Тогда
					
					// Строка 2
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000203", мБаланс.П000100115005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000204", мБаланс.П000100115004.Значение);
					КонецЕсли;
					// Строка 3
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000303", мБаланс.П000100119005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000304", мБаланс.П000100119004.Значение);
					КонецЕсли;
					// Строка 4
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000403", мБаланс.П000100116005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000404", мБаланс.П000100116004.Значение);
					КонецЕсли;
					// Строка 5
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000503",
						мБаланс.П000100117005.Значение + мБаланс.П000100124005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000504",
						мБаланс.П000100117004.Значение + мБаланс.П000100124004.Значение);
					КонецЕсли;
					// Строка 6
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000603", мБаланс.П000100112005.Значение
						+ мБаланс.П000100113005.Значение + мБаланс.П000100114005.Значение + мБаланс.П000100118005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000604", мБаланс.П000100112004.Значение
						+ мБаланс.П000100113004.Значение + мБаланс.П000100114004.Значение + мБаланс.П000100118004.Значение);
					КонецЕсли;
					
				Иначе
					
					// строка 2
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000203", мБаланс.П000100113005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000204", мБаланс.П000100113004.Значение);
					КонецЕсли;
					// строка 3
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000303", мБаланс.П000100117005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000304", мБаланс.П000100117004.Значение);
					КонецЕсли;
					// строка 4
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000403", мБаланс.П000100114005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000404", мБаланс.П000100114004.Значение);
					КонецЕсли;
					// строка 5
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000503", мБаланс.П000100115005.Значение
						+ мБаланс.П000100124005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000504", мБаланс.П000100115004.Значение
						+ мБаланс.П000100124004.Значение);
					КонецЕсли;
					// строка 6
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000603", мБаланс.П000100112005.Значение
						+ мБаланс.П000100116005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000604", мБаланс.П000100112004.Значение
						+ мБаланс.П000100116004.Значение);
					КонецЕсли;
					
				КонецЕсли;
				
				// строка 7
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000703, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000703", мБаланс.П000100121005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000704, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000704", мБаланс.П000100121004.Значение);
				КонецЕсли;
				// строка 8
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000803, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000803", мБаланс.П000100122005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000804, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000804", мБаланс.П000100122004.Значение);
				КонецЕсли;
				// строка 9
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000903, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000903", мБаланс.П000100123005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000904, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000904", мБаланс.П000100123004.Значение);
				КонецЕсли;
				// строка 10
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001003, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001003", мБаланс.П000100125005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001004", мБаланс.П000100125004.Значение);
				КонецЕсли;
				// строка 11
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001103, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001103", мБаланс.П000100126005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001104, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001104", мБаланс.П000100126004.Значение);
				КонецЕсли;
				// Строка 12
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001203, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001203",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000103"), Форма.СтруктураДанныхРасчетАктивов.П000100000103, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000203"), Форма.СтруктураДанныхРасчетАктивов.П000100000203, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000303"), Форма.СтруктураДанныхРасчетАктивов.П000100000303, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000403"), Форма.СтруктураДанныхРасчетАктивов.П000100000403, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000503"), Форма.СтруктураДанныхРасчетАктивов.П000100000503, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000603"), Форма.СтруктураДанныхРасчетАктивов.П000100000603, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000703"), Форма.СтруктураДанныхРасчетАктивов.П000100000703, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000803"), Форма.СтруктураДанныхРасчетАктивов.П000100000803, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000903"), Форма.СтруктураДанныхРасчетАктивов.П000100000903, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001003"), Форма.СтруктураДанныхРасчетАктивов.П000100001003, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001103"), Форма.СтруктураДанныхРасчетАктивов.П000100001103, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001204, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001204",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000104"), Форма.СтруктураДанныхРасчетАктивов.П000100000104, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000204"), Форма.СтруктураДанныхРасчетАктивов.П000100000204, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000304"), Форма.СтруктураДанныхРасчетАктивов.П000100000304, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000404"), Форма.СтруктураДанныхРасчетАктивов.П000100000404, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000504"), Форма.СтруктураДанныхРасчетАктивов.П000100000504, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000604"), Форма.СтруктураДанныхРасчетАктивов.П000100000604, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000704"), Форма.СтруктураДанныхРасчетАктивов.П000100000704, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000804"), Форма.СтруктураДанныхРасчетАктивов.П000100000804, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000904"), Форма.СтруктураДанныхРасчетАктивов.П000100000904, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001004"), Форма.СтруктураДанныхРасчетАктивов.П000100001004, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001104"), Форма.СтруктураДанныхРасчетАктивов.П000100001104, 0));
				КонецЕсли;
				// строка 13
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001303, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001303", мБаланс.П000100141005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001304, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001304", мБаланс.П000100141004.Значение);
				КонецЕсли;
				// строка 14
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001403, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001403",
					мБаланс.П000100142005.Значение + мБаланс.П000100145005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001404, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001404",
					мБаланс.П000100142004.Значение + мБаланс.П000100145004.Значение);
				КонецЕсли;
				// строка 15
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001503, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001503", мБаланс.П000100151005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001504, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001504", мБаланс.П000100151004.Значение);
				КонецЕсли;
				// строка 16
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001603, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001603", мБаланс.П000100152005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001604, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001604", мБаланс.П000100152004.Значение);
				КонецЕсли;
				// строка 17
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001703, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001703", мБаланс.П000101520705.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001704, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001704", мБаланс.П000101520704.Значение);
				КонецЕсли;
				// строка 18
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001803, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001803", мБаланс.П000100154005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001804, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001804", мБаланс.П000100154004.Значение);
				КонецЕсли;
				// строка 19
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001903, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001903", мБаланс.П000100155005.Значение);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001904, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001904", мБаланс.П000100155004.Значение);
				КонецЕсли;
				// строка 20
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002003, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002003",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001303"), Форма.СтруктураДанныхРасчетАктивов.П000100001303, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001403"), Форма.СтруктураДанныхРасчетАктивов.П000100001403, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001503"), Форма.СтруктураДанныхРасчетАктивов.П000100001503, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001603"), Форма.СтруктураДанныхРасчетАктивов.П000100001603, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001803"), Форма.СтруктураДанныхРасчетАктивов.П000100001803, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001903"), Форма.СтруктураДанныхРасчетАктивов.П000100001903, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002004, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002004",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001304"), Форма.СтруктураДанныхРасчетАктивов.П000100001304, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001404"), Форма.СтруктураДанныхРасчетАктивов.П000100001404, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001504"), Форма.СтруктураДанныхРасчетАктивов.П000100001504, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001604"), Форма.СтруктураДанныхРасчетАктивов.П000100001604, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001804"), Форма.СтруктураДанныхРасчетАктивов.П000100001804, 0)
					+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001904"), Форма.СтруктураДанныхРасчетАктивов.П000100001904, 0));
				КонецЕсли;
				// строка 21
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002103, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002103",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001203"), Форма.СтруктураДанныхРасчетАктивов.П000100001203, 0)
					- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100002003"), Форма.СтруктураДанныхРасчетАктивов.П000100002003, 0));
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
					Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002104, ОбластьИмя) > 0 Тогда
					Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002104",
					?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001204"), Форма.СтруктураДанныхРасчетАктивов.П000100001204, 0)
					- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100002004"), Форма.СтруктураДанныхРасчетАктивов.П000100002004, 0));
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			мБаланс = Форма.СтруктураДанныхБаланс;
			
			// Актив
			// Строка 1100
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110004, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110004 = мБаланс.П000100111004
					+ мБаланс.П000100112004
					+ мБаланс.П000100113004
					+ мБаланс.П000100114004
					+ мБаланс.П000100115004
					+ мБаланс.П000100116004
					+ мБаланс.П000100117004
					+ мБаланс.П000100118004
					+ мБаланс.П000100119004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110005, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110005 = мБаланс.П000100111005
					+ мБаланс.П000100112005
					+ мБаланс.П000100113005
					+ мБаланс.П000100114005
					+ мБаланс.П000100115005
					+ мБаланс.П000100116005
					+ мБаланс.П000100117005
					+ мБаланс.П000100118005
					+ мБаланс.П000100119005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100110006, ОбластьИмя) > 0 Тогда
				
				мБаланс.П000100110006 = мБаланс.П000100111006
					+ мБаланс.П000100112006
					+ мБаланс.П000100113006
					+ мБаланс.П000100114006
					+ мБаланс.П000100115006
					+ мБаланс.П000100116006
					+ мБаланс.П000100117006
					+ мБаланс.П000100118006
					+ мБаланс.П000100119006;
				
			КонецЕсли;
			
			// строка 1200
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120004
				= мБаланс.П000100121004
				+ мБаланс.П000100122004
				+ мБаланс.П000100123004
				+ мБаланс.П000100124004
				+ мБаланс.П000100125004
				+ мБаланс.П000100126004;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120005
				= мБаланс.П000100121005
				+ мБаланс.П000100122005
				+ мБаланс.П000100123005
				+ мБаланс.П000100124005
				+ мБаланс.П000100125005
				+ мБаланс.П000100126005;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100120006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100120006
				= мБаланс.П000100121006
				+ мБаланс.П000100122006
				+ мБаланс.П000100123006
				+ мБаланс.П000100124006
				+ мБаланс.П000100125006
				+ мБаланс.П000100126006;
			КонецЕсли;
			
			// строка 1600
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160004 = мБаланс.П000100110004 + мБаланс.П000100120004;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160005 = мБаланс.П000100110005 + мБаланс.П000100120005;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100160006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100160006 = мБаланс.П000100110006 + мБаланс.П000100120006;
			КонецЕсли;
			
			// Пассив
			// строка 1300
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130004, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134004;
				КонецЕсли;
				
				мБаланс.П000100130004
				= мБаланс.П000100131004
				+ мБаланс.П000100132004
				+ Строка1340
				+ мБаланс.П000100135004
				+ мБаланс.П000100136004
				+ мБаланс.П000100137004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130005, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134005;
				КонецЕсли;
				
				мБаланс.П000100130005
				= мБаланс.П000100131005
				+ мБаланс.П000100132005
				+ Строка1340
				+ мБаланс.П000100135005
				+ мБаланс.П000100136005
				+ мБаланс.П000100137005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100130006, ОбластьИмя) > 0 Тогда
				
				Строка1340 = 0;
				Если НЕ Форма.СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
					Строка1340 = мБаланс.П000100134006;
				КонецЕсли;
				
				мБаланс.П000100130006
				= мБаланс.П000100131006
				+ мБаланс.П000100132006
				+ Строка1340
				+ мБаланс.П000100135006
				+ мБаланс.П000100136006
				+ мБаланс.П000100137006;
				
			КонецЕсли;
			
			// строка 1400
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140004
				= мБаланс.П000100141004
				+ мБаланс.П000100142004
				+ мБаланс.П000100143004
				+ мБаланс.П000100145004;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140005
				= мБаланс.П000100141005
				+ мБаланс.П000100142005
				+ мБаланс.П000100143005
				+ мБаланс.П000100145005;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100140006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100140006
				= мБаланс.П000100141006
				+ мБаланс.П000100142006
				+ мБаланс.П000100143006
				+ мБаланс.П000100145006;
			КонецЕсли;
			
			// строка 1500
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150004
				= мБаланс.П000100151004
				+ мБаланс.П000100152004
				+ мБаланс.П000100153004
				+ мБаланс.П000100154004
				+ мБаланс.П000100155004;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150005
				= мБаланс.П000100151005
				+ мБаланс.П000100152005
				+ мБаланс.П000100153005
				+ мБаланс.П000100154005
				+ мБаланс.П000100155005;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100150006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100150006
				= мБаланс.П000100151006
				+ мБаланс.П000100152006
				+ мБаланс.П000100153006
				+ мБаланс.П000100154006
				+ мБаланс.П000100155006;
			КонецЕсли;
			
			// строка 1700
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170004, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170004
				= мБаланс.П000100130004
				+ мБаланс.П000100140004
				+ мБаланс.П000100150004;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170005, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170005
				= мБаланс.П000100130005
				+ мБаланс.П000100140005
				+ мБаланс.П000100150005;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100170006, ОбластьИмя) > 0 Тогда
				мБаланс.П000100170006
				= мБаланс.П000100130006
				+ мБаланс.П000100140006
				+ мБаланс.П000100150006;
			КонецЕсли;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "РасчетАктивов" Тогда
				
				// Расчет стоимости чистых активов на клиенте.
				
				мРасчетАктивов = Форма.ТабличныйДокумент.Области;
				
				Если ИСТИНА Тогда
					
					// Активы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110111004.Значение = мБаланс.П000100111004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110111005.Значение = мБаланс.П000100111005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110111006.Значение = мБаланс.П000100111006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110112004.Значение = мБаланс.П000100112004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110112005.Значение = мБаланс.П000100112005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110112006.Значение = мБаланс.П000100112006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110113004.Значение = мБаланс.П000100113004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110113005.Значение = мБаланс.П000100113005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110113006.Значение = мБаланс.П000100113006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110114004.Значение = мБаланс.П000100114004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110114005.Значение = мБаланс.П000100114005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110114006.Значение = мБаланс.П000100114006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110115004.Значение = мБаланс.П000100115004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110115005.Значение = мБаланс.П000100115005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110115006.Значение = мБаланс.П000100115006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110116004.Значение = мБаланс.П000100116004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110116005.Значение = мБаланс.П000100116005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110116006.Значение = мБаланс.П000100116006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110117004.Значение = мБаланс.П000100117004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110117005.Значение = мБаланс.П000100117005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110117006.Значение = мБаланс.П000100117006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110118004.Значение = мБаланс.П000100118004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110118005.Значение = мБаланс.П000100118005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110118006.Значение = мБаланс.П000100118006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110119004.Значение = мБаланс.П000100119004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110119005.Значение = мБаланс.П000100119005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110119006.Значение = мБаланс.П000100119006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110121004.Значение = мБаланс.П000100121004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110121005.Значение = мБаланс.П000100121005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110121006.Значение = мБаланс.П000100121006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110122004.Значение = мБаланс.П000100122004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110122005.Значение = мБаланс.П000100122005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110122006.Значение = мБаланс.П000100122006;
					КонецЕсли;
					
					// Перенос значений строки 1230 с учетом исключения счета 75.01.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110123004.Значение
						= мБаланс.П000100123004 - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа04"];
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110123005.Значение
						= мБаланс.П000100123005 - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа05"];
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110123006.Значение
						= мБаланс.П000100123006 - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа06"];
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110124004.Значение = мБаланс.П000100124004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110124005.Значение = мБаланс.П000100124005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110124006.Значение = мБаланс.П000100124006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110125004.Значение = мБаланс.П000100125004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110125005.Значение = мБаланс.П000100125005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110125006.Значение = мБаланс.П000100125006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110126004.Значение = мБаланс.П000100126004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110126005.Значение = мБаланс.П000100126005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110126006.Значение = мБаланс.П000100126006;
					КонецЕсли;
					
					// ИТОГО активы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110100004.Значение
						= мРасчетАктивов.П000110111004.Значение
						+ мРасчетАктивов.П000110112004.Значение
						+ мРасчетАктивов.П000110113004.Значение
						+ мРасчетАктивов.П000110114004.Значение
						+ мРасчетАктивов.П000110115004.Значение
						+ мРасчетАктивов.П000110116004.Значение
						+ мРасчетАктивов.П000110117004.Значение
						+ мРасчетАктивов.П000110118004.Значение
						+ мРасчетАктивов.П000110119004.Значение
						+ мРасчетАктивов.П000110121004.Значение
						+ мРасчетАктивов.П000110122004.Значение
						+ мРасчетАктивов.П000110123004.Значение
						+ мРасчетАктивов.П000110124004.Значение
						+ мРасчетАктивов.П000110125004.Значение
						+ мРасчетАктивов.П000110126004.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110100005.Значение
						= мРасчетАктивов.П000110111005.Значение
						+ мРасчетАктивов.П000110112005.Значение
						+ мРасчетАктивов.П000110113005.Значение
						+ мРасчетАктивов.П000110114005.Значение
						+ мРасчетАктивов.П000110115005.Значение
						+ мРасчетАктивов.П000110116005.Значение
						+ мРасчетАктивов.П000110117005.Значение
						+ мРасчетАктивов.П000110118005.Значение
						+ мРасчетАктивов.П000110119005.Значение
						+ мРасчетАктивов.П000110121005.Значение
						+ мРасчетАктивов.П000110122005.Значение
						+ мРасчетАктивов.П000110123005.Значение
						+ мРасчетАктивов.П000110124005.Значение
						+ мРасчетАктивов.П000110125005.Значение
						+ мРасчетАктивов.П000110126005.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110100006.Значение
						= мРасчетАктивов.П000110111006.Значение
						+ мРасчетАктивов.П000110112006.Значение
						+ мРасчетАктивов.П000110113006.Значение
						+ мРасчетАктивов.П000110114006.Значение
						+ мРасчетАктивов.П000110115006.Значение
						+ мРасчетАктивов.П000110116006.Значение
						+ мРасчетАктивов.П000110117006.Значение
						+ мРасчетАктивов.П000110118006.Значение
						+ мРасчетАктивов.П000110119006.Значение
						+ мРасчетАктивов.П000110121006.Значение
						+ мРасчетАктивов.П000110122006.Значение
						+ мРасчетАктивов.П000110123006.Значение
						+ мРасчетАктивов.П000110124006.Значение
						+ мРасчетАктивов.П000110125006.Значение
						+ мРасчетАктивов.П000110126006.Значение;
					КонецЕсли;
					
					// Пассивы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110141004.Значение = мБаланс.П000100141004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110141005.Значение = мБаланс.П000100141005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110141006.Значение = мБаланс.П000100141006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110142004.Значение = мБаланс.П000100142004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110142005.Значение = мБаланс.П000100142005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110142006.Значение = мБаланс.П000100142006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110143004.Значение = мБаланс.П000100143004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110143005.Значение = мБаланс.П000100143005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110143006.Значение = мБаланс.П000100143006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110145004.Значение = мБаланс.П000100145004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110145005.Значение = мБаланс.П000100145005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110145006.Значение = мБаланс.П000100145006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110151004.Значение = мБаланс.П000100151004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110151005.Значение = мБаланс.П000100151005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110151006.Значение = мБаланс.П000100151006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110152004.Значение = мБаланс.П000100152004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110152005.Значение = мБаланс.П000100152005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110152006.Значение = мБаланс.П000100152006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110154004.Значение = мБаланс.П000100154004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110154005.Значение = мБаланс.П000100154005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110154006.Значение = мБаланс.П000100154006;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110155004.Значение = мБаланс.П000100155004;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110155005.Значение = мБаланс.П000100155005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110155006.Значение = мБаланс.П000100155006;
					КонецЕсли;
					
					// ИТОГО пассивы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110200004.Значение
						= мРасчетАктивов.П000110141004.Значение
						+ мРасчетАктивов.П000110142004.Значение
						+ мРасчетАктивов.П000110143004.Значение
						+ мРасчетАктивов.П000110145004.Значение
						+ мРасчетАктивов.П000110151004.Значение
						+ мРасчетАктивов.П000110152004.Значение
						+ мРасчетАктивов.П000110154004.Значение
						+ мРасчетАктивов.П000110155004.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110200005.Значение
						= мРасчетАктивов.П000110141005.Значение
						+ мРасчетАктивов.П000110142005.Значение
						+ мРасчетАктивов.П000110143005.Значение
						+ мРасчетАктивов.П000110145005.Значение
						+ мРасчетАктивов.П000110151005.Значение
						+ мРасчетАктивов.П000110152005.Значение
						+ мРасчетАктивов.П000110154005.Значение
						+ мРасчетАктивов.П000110155005.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110200006.Значение
						= мРасчетАктивов.П000110141006.Значение
						+ мРасчетАктивов.П000110142006.Значение
						+ мРасчетАктивов.П000110143006.Значение
						+ мРасчетАктивов.П000110145006.Значение
						+ мРасчетАктивов.П000110151006.Значение
						+ мРасчетАктивов.П000110152006.Значение
						+ мРасчетАктивов.П000110154006.Значение
						+ мРасчетАктивов.П000110155006.Значение;
					КонецЕсли;
					
					// Стоимость чистых активов.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110300004.Значение
						= мРасчетАктивов.П000110100004.Значение - мРасчетАктивов.П000110200004.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300005, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110300005.Значение
						= мРасчетАктивов.П000110100005.Значение - мРасчетАктивов.П000110200005.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300006, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000110300006.Значение
						= мРасчетАктивов.П000110100006.Значение - мРасчетАктивов.П000110200006.Значение;
					КонецЕсли;
					
					// Расчет в табл. 3 Отчета об изменении капитала на сервере.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360003, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхОИК.Вставить("П000100360003", мРасчетАктивов.П000110300004.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхОИК.Вставить("П000100360004", мРасчетАктивов.П000110300005.Значение);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхОИК.Вставить("П000100360005", мРасчетАктивов.П000110300006.Значение);
					КонецЕсли;
					
				Иначе // Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20141101'
					
					// строка 1
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000103, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000103.Значение = мБаланс.П000100111005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000104, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000104.Значение = мБаланс.П000100111004;
					КонецЕсли;
					
					Если Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20120101' Тогда
						
						// Строка 2
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000203.Значение = мБаланс.П000100115005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000204.Значение = мБаланс.П000100115004;
						КонецЕсли;
						// Строка 3
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000303.Значение = мБаланс.П000100119005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000304.Значение = мБаланс.П000100119004;
						КонецЕсли;
						// Строка 4
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000403.Значение = мБаланс.П000100116005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000404.Значение = мБаланс.П000100116004;
						КонецЕсли;
						// Строка 5
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000503.Значение = мБаланс.П000100117005 + мБаланс.П000100124005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000504.Значение = мБаланс.П000100117004 + мБаланс.П000100124004;
						КонецЕсли;
						// Строка 6
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000603.Значение
							= мБаланс.П000100112005
							+ мБаланс.П000100113005
							+ мБаланс.П000100114005
							+ мБаланс.П000100118005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000604.Значение
							= мБаланс.П000100112004
							+ мБаланс.П000100113004
							+ мБаланс.П000100114004
							+ мБаланс.П000100118004;
						КонецЕсли;
						
					Иначе
						
						// строка 2
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000203.Значение = мБаланс.П000100113005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000204.Значение = мБаланс.П000100113004;
						КонецЕсли;
						// строка 3
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000303.Значение = мБаланс.П000100117005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000304.Значение = мБаланс.П000100117004;
						КонецЕсли;
						// строка 4
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000403.Значение = мБаланс.П000100114005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000404.Значение = мБаланс.П000100114004;
						КонецЕсли;
						// строка 5
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000503.Значение = мБаланс.П000100115005
							+ мБаланс.П000100124005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000504.Значение = мБаланс.П000100115004
							+ мБаланс.П000100124004;
						КонецЕсли;
						// строка 6
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000603.Значение = мБаланс.П000100112005
							+ мБаланс.П000100116005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
							мРасчетАктивов.П000100000604.Значение = мБаланс.П000100112004
							+ мБаланс.П000100116004;
						КонецЕсли;
						
					КонецЕсли;
					
					// строка 7
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000703, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000703.Значение = мБаланс.П000100121005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000704, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000704.Значение = мБаланс.П000100121004;
					КонецЕсли;
					// строка 8
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000803, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000803.Значение = мБаланс.П000100122005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000804, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000804.Значение = мБаланс.П000100122004;
					КонецЕсли;
					// строка 9
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000903, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000903.Значение = мБаланс.П000100123005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000904, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100000904.Значение = мБаланс.П000100123004;
					КонецЕсли;
					// строка 10
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001003, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001003.Значение = мБаланс.П000100125005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001004.Значение = мБаланс.П000100125004;
					КонецЕсли;
					// строка 11
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001103, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001103.Значение = мБаланс.П000100126005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001104, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001104.Значение = мБаланс.П000100126004;
					КонецЕсли;
					// Строка 12
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001203, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001203.Значение
						= мРасчетАктивов.П000100000103.Значение
						+ мРасчетАктивов.П000100000203.Значение
						+ мРасчетАктивов.П000100000303.Значение
						+ мРасчетАктивов.П000100000403.Значение
						+ мРасчетАктивов.П000100000503.Значение
						+ мРасчетАктивов.П000100000603.Значение
						+ мРасчетАктивов.П000100000703.Значение
						+ мРасчетАктивов.П000100000803.Значение
						+ мРасчетАктивов.П000100000903.Значение
						+ мРасчетАктивов.П000100001003.Значение
						+ мРасчетАктивов.П000100001103.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001204, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001204.Значение
						= мРасчетАктивов.П000100000104.Значение
						+ мРасчетАктивов.П000100000204.Значение
						+ мРасчетАктивов.П000100000304.Значение
						+ мРасчетАктивов.П000100000404.Значение
						+ мРасчетАктивов.П000100000504.Значение
						+ мРасчетАктивов.П000100000604.Значение
						+ мРасчетАктивов.П000100000704.Значение
						+ мРасчетАктивов.П000100000804.Значение
						+ мРасчетАктивов.П000100000904.Значение
						+ мРасчетАктивов.П000100001004.Значение
						+ мРасчетАктивов.П000100001104.Значение;
					КонецЕсли;
					// строка 13
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001303, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001303.Значение = мБаланс.П000100141005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001304, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001304.Значение = мБаланс.П000100141004;
					КонецЕсли;
					// строка 14
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001403, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001403.Значение = мБаланс.П000100142005 + мБаланс.П000100145005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001404, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001404.Значение = мБаланс.П000100142004 + мБаланс.П000100145004;
					КонецЕсли;
					// строка 15
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001503, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001503.Значение = мБаланс.П000100151005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001504, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001504.Значение = мБаланс.П000100151004;
					КонецЕсли;
					// строка 16
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001603, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001603.Значение = мБаланс.П000100152005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001604, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001604.Значение = мБаланс.П000100152004;
					КонецЕсли;
					// строка 17
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001703, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001703.Значение = мБаланс.П000101520705;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001704, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001704.Значение = мБаланс.П000101520704;
					КонецЕсли;
					// строка 18
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001803, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001803.Значение = мБаланс.П000100154005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001804, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001804.Значение = мБаланс.П000100154004;
					КонецЕсли;
					// строка 19
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001903, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001903.Значение = мБаланс.П000100155005;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001904, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100001904.Значение = мБаланс.П000100155004;
					КонецЕсли;
					// строка 20
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002003, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100002003.Значение
						= мРасчетАктивов.П000100001303.Значение
						+ мРасчетАктивов.П000100001403.Значение
						+ мРасчетАктивов.П000100001503.Значение
						+ мРасчетАктивов.П000100001603.Значение
						+ мРасчетАктивов.П000100001803.Значение
						+ мРасчетАктивов.П000100001903.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002004, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100002004.Значение
						= мРасчетАктивов.П000100001304.Значение
						+ мРасчетАктивов.П000100001404.Значение
						+ мРасчетАктивов.П000100001504.Значение
						+ мРасчетАктивов.П000100001604.Значение
						+ мРасчетАктивов.П000100001804.Значение
						+ мРасчетАктивов.П000100001904.Значение;
					КонецЕсли;
					// строка 21
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002103, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100002103.Значение
						= мРасчетАктивов.П000100001203.Значение - мРасчетАктивов.П000100002003.Значение;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002104, ОбластьИмя) > 0 Тогда
						мРасчетАктивов.П000100002104.Значение
						= мРасчетАктивов.П000100001204.Значение - мРасчетАктивов.П000100002004.Значение;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе// Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "РасчетАктивов"
				
				// Расчет стоимости чистых активов на сервере.
				Если ИСТИНА Тогда
					
					// Активы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110111004", мБаланс.П000100111004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110111005", мБаланс.П000100111005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110111006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110111006", мБаланс.П000100111006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110112004", мБаланс.П000100112004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110112005", мБаланс.П000100112005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110112006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110112006", мБаланс.П000100112006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110113004", мБаланс.П000100113004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110113005", мБаланс.П000100113005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110113006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110113006", мБаланс.П000100113006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110114004", мБаланс.П000100114004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110114005", мБаланс.П000100114005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110114006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110114006", мБаланс.П000100114006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110115004", мБаланс.П000100115004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110115005", мБаланс.П000100115005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110115006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110115006", мБаланс.П000100115006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110116004", мБаланс.П000100116004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110116005", мБаланс.П000100116005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110116006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110116006", мБаланс.П000100116006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110117004", мБаланс.П000100117004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110117005", мБаланс.П000100117005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110117006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110117006", мБаланс.П000100117006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110118004", мБаланс.П000100118004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110118005", мБаланс.П000100118005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110118006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110118006", мБаланс.П000100118006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110119004", мБаланс.П000100119004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110119005", мБаланс.П000100119005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110119006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110119006", мБаланс.П000100119006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110121004", мБаланс.П000100121004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110121005", мБаланс.П000100121005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110121006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110121006", мБаланс.П000100121006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110122004", мБаланс.П000100122004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110122005", мБаланс.П000100122005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110122006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110122006", мБаланс.П000100122006);
					КонецЕсли;
					
					// Перенос значений строки 1230 с учетом исключения счета 75.01.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110123004",
						мБаланс.П000100123004 - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа04"]);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110123005",
						мБаланс.П000100123005 - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа05"]);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110123006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110123006",
						мБаланс.П000100123006 - Форма.СтруктураРеквизитовФормы.ОборотыСчета75_01["Графа06"]);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110124004", мБаланс.П000100124004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110124005", мБаланс.П000100124005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110124006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110124006", мБаланс.П000100124006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110125004", мБаланс.П000100125004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110125005", мБаланс.П000100125005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110125006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110125006", мБаланс.П000100125006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110126004", мБаланс.П000100126004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110126005", мБаланс.П000100126005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110126006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110126006", мБаланс.П000100126006);
					КонецЕсли;
					
					// ИТОГО активы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110100004",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110111004"), Форма.СтруктураДанныхРасчетАктивов.П000110111004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110112004"), Форма.СтруктураДанныхРасчетАктивов.П000110112004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110113004"), Форма.СтруктураДанныхРасчетАктивов.П000110113004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110114004"), Форма.СтруктураДанныхРасчетАктивов.П000110114004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110115004"), Форма.СтруктураДанныхРасчетАктивов.П000110115004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110116004"), Форма.СтруктураДанныхРасчетАктивов.П000110116004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110117004"), Форма.СтруктураДанныхРасчетАктивов.П000110117004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110118004"), Форма.СтруктураДанныхРасчетАктивов.П000110118004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110119004"), Форма.СтруктураДанныхРасчетАктивов.П000110119004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110121004"), Форма.СтруктураДанныхРасчетАктивов.П000110121004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110122004"), Форма.СтруктураДанныхРасчетАктивов.П000110122004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110123004"), Форма.СтруктураДанныхРасчетАктивов.П000110123004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110124004"), Форма.СтруктураДанныхРасчетАктивов.П000110124004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110125004"), Форма.СтруктураДанныхРасчетАктивов.П000110125004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110126004"), Форма.СтруктураДанныхРасчетАктивов.П000110126004, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110100005",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110111005"), Форма.СтруктураДанныхРасчетАктивов.П000110111005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110112005"), Форма.СтруктураДанныхРасчетАктивов.П000110112005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110113005"), Форма.СтруктураДанныхРасчетАктивов.П000110113005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110114005"), Форма.СтруктураДанныхРасчетАктивов.П000110114005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110115005"), Форма.СтруктураДанныхРасчетАктивов.П000110115005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110116005"), Форма.СтруктураДанныхРасчетАктивов.П000110116005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110117005"), Форма.СтруктураДанныхРасчетАктивов.П000110117005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110118005"), Форма.СтруктураДанныхРасчетАктивов.П000110118005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110119005"), Форма.СтруктураДанныхРасчетАктивов.П000110119005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110121005"), Форма.СтруктураДанныхРасчетАктивов.П000110121005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110122005"), Форма.СтруктураДанныхРасчетАктивов.П000110122005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110123005"), Форма.СтруктураДанныхРасчетАктивов.П000110123005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110124005"), Форма.СтруктураДанныхРасчетАктивов.П000110124005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110125005"), Форма.СтруктураДанныхРасчетАктивов.П000110125005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110126005"), Форма.СтруктураДанныхРасчетАктивов.П000110126005, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110100006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110100006",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110111006"), Форма.СтруктураДанныхРасчетАктивов.П000110111006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110112006"), Форма.СтруктураДанныхРасчетАктивов.П000110112006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110113006"), Форма.СтруктураДанныхРасчетАктивов.П000110113006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110114006"), Форма.СтруктураДанныхРасчетАктивов.П000110114006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110115006"), Форма.СтруктураДанныхРасчетАктивов.П000110115006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110116006"), Форма.СтруктураДанныхРасчетАктивов.П000110116006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110117006"), Форма.СтруктураДанныхРасчетАктивов.П000110117006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110118006"), Форма.СтруктураДанныхРасчетАктивов.П000110118006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110119006"), Форма.СтруктураДанныхРасчетАктивов.П000110119006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110121006"), Форма.СтруктураДанныхРасчетАктивов.П000110121006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110122006"), Форма.СтруктураДанныхРасчетАктивов.П000110122006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110123006"), Форма.СтруктураДанныхРасчетАктивов.П000110123006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110124006"), Форма.СтруктураДанныхРасчетАктивов.П000110124006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110125006"), Форма.СтруктураДанныхРасчетАктивов.П000110125006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110126006"), Форма.СтруктураДанныхРасчетАктивов.П000110126006, 0));
					КонецЕсли;
					
					// Пассивы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110141004", мБаланс.П000100141004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110141005", мБаланс.П000100141005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110141006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110141006", мБаланс.П000100141006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110142004", мБаланс.П000100142004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110142005", мБаланс.П000100142005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110142006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110142006", мБаланс.П000100142006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110143004", мБаланс.П000100143004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110143005", мБаланс.П000100143005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110143006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110143006", мБаланс.П000100143006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110145004", мБаланс.П000100145004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110145005", мБаланс.П000100145005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110145006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110145006", мБаланс.П000100145006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110151004", мБаланс.П000100151004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110151005", мБаланс.П000100151005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110151006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110151006", мБаланс.П000100151006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110152004", мБаланс.П000100152004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110152005", мБаланс.П000100152005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110152006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110152006", мБаланс.П000100152006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110154004", мБаланс.П000100154004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110154005", мБаланс.П000100154005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110154006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110154006", мБаланс.П000100154006);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110155004", мБаланс.П000100155004);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110155005", мБаланс.П000100155005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110155006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110155006", мБаланс.П000100155006);
					КонецЕсли;
					
					// ИТОГО пассивы.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110200004",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110141004"), Форма.СтруктураДанныхРасчетАктивов.П000110141004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110142004"), Форма.СтруктураДанныхРасчетАктивов.П000110142004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110143004"), Форма.СтруктураДанныхРасчетАктивов.П000110143004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110145004"), Форма.СтруктураДанныхРасчетАктивов.П000110145004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110151004"), Форма.СтруктураДанныхРасчетАктивов.П000110151004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110152004"), Форма.СтруктураДанныхРасчетАктивов.П000110152004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110154004"), Форма.СтруктураДанныхРасчетАктивов.П000110154004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110155004"), Форма.СтруктураДанныхРасчетАктивов.П000110155004, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110200005",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110141005"), Форма.СтруктураДанныхРасчетАктивов.П000110141005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110142005"), Форма.СтруктураДанныхРасчетАктивов.П000110142005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110143005"), Форма.СтруктураДанныхРасчетАктивов.П000110143005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110145005"), Форма.СтруктураДанныхРасчетАктивов.П000110145005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110151005"), Форма.СтруктураДанныхРасчетАктивов.П000110151005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110152005"), Форма.СтруктураДанныхРасчетАктивов.П000110152005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110154005"), Форма.СтруктураДанныхРасчетАктивов.П000110154005, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110155005"), Форма.СтруктураДанныхРасчетАктивов.П000110155005, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110200006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110200006",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110141006"), Форма.СтруктураДанныхРасчетАктивов.П000110141006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110142006"), Форма.СтруктураДанныхРасчетАктивов.П000110142006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110143006"), Форма.СтруктураДанныхРасчетАктивов.П000110143006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110145006"), Форма.СтруктураДанныхРасчетАктивов.П000110145006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110151006"), Форма.СтруктураДанныхРасчетАктивов.П000110151006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110152006"), Форма.СтруктураДанныхРасчетАктивов.П000110152006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110154006"), Форма.СтруктураДанныхРасчетАктивов.П000110154006, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110155006"), Форма.СтруктураДанныхРасчетАктивов.П000110155006, 0));
					КонецЕсли;
					
					// Стоимость чистых активов.
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110300004",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110100004"), Форма.СтруктураДанныхРасчетАктивов.П000110100004, 0)
						- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110200004"), Форма.СтруктураДанныхРасчетАктивов.П000110200004, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300005, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110300005",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110100005"), Форма.СтруктураДанныхРасчетАктивов.П000110100005, 0)
						- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110200005"), Форма.СтруктураДанныхРасчетАктивов.П000110200005, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000110300006, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000110300006",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110100006"), Форма.СтруктураДанныхРасчетАктивов.П000110100006, 0)
						- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110200006"), Форма.СтруктураДанныхРасчетАктивов.П000110200006, 0));
					КонецЕсли;
					
					Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК" Тогда
						
						// Расчет в табл. 3 Отчета об изменении капитала на клиенте.
						мОИК = Форма.ТабличныйДокумент.Области;
						
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360003, ОбластьИмя) > 0 Тогда
							мОИК.П000100360003.Значение = Форма.СтруктураДанныхРасчетАктивов.П000110300004;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360004, ОбластьИмя) > 0 Тогда
							мОИК.П000100360004.Значение = Форма.СтруктураДанныхРасчетАктивов.П000110300005;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360005, ОбластьИмя) > 0 Тогда
							мОИК.П000100360005.Значение = Форма.СтруктураДанныхРасчетАктивов.П000110300006;
						КонецЕсли;
						
					Иначе
						
						// Расчет в табл. 3 Отчета об изменении капитала на сервере.
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360003, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхОИК.Вставить("П000100360003", Форма.СтруктураДанныхРасчетАктивов.П000110300004);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360004, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхОИК.Вставить("П000100360004", Форма.СтруктураДанныхРасчетАктивов.П000110300005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100360005, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхОИК.Вставить("П000100360005", Форма.СтруктураДанныхРасчетАктивов.П000110300006);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе // Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20141101'
				
					// строка 1
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000103, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000103", мБаланс.П000100111005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000104, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000104", мБаланс.П000100111004);
					КонецЕсли;
					
					Если Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '20120101' Тогда
						
						// Строка 2
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000203", мБаланс.П000100115005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000204", мБаланс.П000100115004);
						КонецЕсли;
						// Строка 3
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000303", мБаланс.П000100119005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000304", мБаланс.П000100119004);
						КонецЕсли;
						// Строка 4
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000403", мБаланс.П000100116005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000404", мБаланс.П000100116004);
						КонецЕсли;
						// Строка 5
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000503", мБаланс.П000100117005 + мБаланс.П000100124005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000504", мБаланс.П000100117004 + мБаланс.П000100124004);
						КонецЕсли;
						// Строка 6
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000603",
							мБаланс.П000100112005
							+ мБаланс.П000100113005
							+ мБаланс.П000100114005
							+ мБаланс.П000100118005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000604",
							мБаланс.П000100112004
							+ мБаланс.П000100113004
							+ мБаланс.П000100114004
							+ мБаланс.П000100118004);
						КонецЕсли;
						
					Иначе
						
						// строка 2
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000203, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000203", мБаланс.П000100113005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000204, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000204", мБаланс.П000100113004);
						КонецЕсли;
						// строка 3
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000303, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000303", мБаланс.П000100117005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000304, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000304", мБаланс.П000100117004);
						КонецЕсли;
						// строка 4
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000403, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000403", мБаланс.П000100114005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000404, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000404", мБаланс.П000100114004);
						КонецЕсли;
						// строка 5
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000503, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000503", мБаланс.П000100115005
							+ мБаланс.П000100124005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000504, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000504", мБаланс.П000100115004
							+ мБаланс.П000100124004);
						КонецЕсли;
						// строка 6
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000603, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000603", мБаланс.П000100112005
							+ мБаланс.П000100116005);
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
							Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000604, ОбластьИмя) > 0 Тогда
							Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000604", мБаланс.П000100112004
							+ мБаланс.П000100116004);
						КонецЕсли;
						
					КонецЕсли;
					
					// строка 7
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000703, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000703", мБаланс.П000100121005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000704, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000704", мБаланс.П000100121004);
					КонецЕсли;
					// строка 8
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000803, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000803", мБаланс.П000100122005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000804, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000804", мБаланс.П000100122004);
					КонецЕсли;
					// строка 9
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000903, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000903", мБаланс.П000100123005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100000904, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100000904", мБаланс.П000100123004);
					КонецЕсли;
					// строка 10
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001003, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001003", мБаланс.П000100125005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001004", мБаланс.П000100125004);
					КонецЕсли;
					// строка 11
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001103, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001103", мБаланс.П000100126005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001104, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001104", мБаланс.П000100126004);
					КонецЕсли;
					// Строка 12
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001203, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001203",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000103"), Форма.СтруктураДанныхРасчетАктивов.П000100000103, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000203"), Форма.СтруктураДанныхРасчетАктивов.П000100000203, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000303"), Форма.СтруктураДанныхРасчетАктивов.П000100000303, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000403"), Форма.СтруктураДанныхРасчетАктивов.П000100000403, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000503"), Форма.СтруктураДанныхРасчетАктивов.П000100000503, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000603"), Форма.СтруктураДанныхРасчетАктивов.П000100000603, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000703"), Форма.СтруктураДанныхРасчетАктивов.П000100000703, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000803"), Форма.СтруктураДанныхРасчетАктивов.П000100000803, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000903"), Форма.СтруктураДанныхРасчетАктивов.П000100000903, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001003"), Форма.СтруктураДанныхРасчетАктивов.П000100001003, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001103"), Форма.СтруктураДанныхРасчетАктивов.П000100001103, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001204, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001204",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000104"), Форма.СтруктураДанныхРасчетАктивов.П000100000104, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000204"), Форма.СтруктураДанныхРасчетАктивов.П000100000204, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000304"), Форма.СтруктураДанныхРасчетАктивов.П000100000304, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000404"), Форма.СтруктураДанныхРасчетАктивов.П000100000404, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000504"), Форма.СтруктураДанныхРасчетАктивов.П000100000504, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000604"), Форма.СтруктураДанныхРасчетАктивов.П000100000604, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000704"), Форма.СтруктураДанныхРасчетАктивов.П000100000704, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000804"), Форма.СтруктураДанныхРасчетАктивов.П000100000804, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100000904"), Форма.СтруктураДанныхРасчетАктивов.П000100000904, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001004"), Форма.СтруктураДанныхРасчетАктивов.П000100001004, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001104"), Форма.СтруктураДанныхРасчетАктивов.П000100001104, 0));
					КонецЕсли;
					// строка 13
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001303, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001303", мБаланс.П000100141005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001304, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001304", мБаланс.П000100141004);
					КонецЕсли;
					// строка 14
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001403, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001403", мБаланс.П000100142005 + мБаланс.П000100145005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001404, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001404", мБаланс.П000100142004 + мБаланс.П000100145004);
					КонецЕсли;
					// строка 15
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001503, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001503", мБаланс.П000100151005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001504, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001504", мБаланс.П000100151004);
					КонецЕсли;
					// строка 16
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001603, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001603", мБаланс.П000100152005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001604, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001604", мБаланс.П000100152004);
					КонецЕсли;
					// строка 17
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001703, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001703", мБаланс.П000101520705);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001704, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001704", мБаланс.П000101520704);
					КонецЕсли;
					// строка 18
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001803, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001803", мБаланс.П000100154005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001804, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001804", мБаланс.П000100154004);
					КонецЕсли;
					// строка 19
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001903, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001903", мБаланс.П000100155005);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100001904, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100001904", мБаланс.П000100155004);
					КонецЕсли;
					// строка 20
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002003, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002003",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001303"), Форма.СтруктураДанныхРасчетАктивов.П000100001303, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001403"), Форма.СтруктураДанныхРасчетАктивов.П000100001403, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001503"), Форма.СтруктураДанныхРасчетАктивов.П000100001503, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001603"), Форма.СтруктураДанныхРасчетАктивов.П000100001603, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001803"), Форма.СтруктураДанныхРасчетАктивов.П000100001803, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001903"), Форма.СтруктураДанныхРасчетАктивов.П000100001903, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002004, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002004",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001304"), Форма.СтруктураДанныхРасчетАктивов.П000100001304, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001404"), Форма.СтруктураДанныхРасчетАктивов.П000100001404, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001504"), Форма.СтруктураДанныхРасчетАктивов.П000100001504, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001604"), Форма.СтруктураДанныхРасчетАктивов.П000100001604, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001804"), Форма.СтруктураДанныхРасчетАктивов.П000100001804, 0)
						+ ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001904"), Форма.СтруктураДанныхРасчетАктивов.П000100001904, 0));
					КонецЕсли;
					// строка 21
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002103, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002103",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001203"), Форма.СтруктураДанныхРасчетАктивов.П000100001203, 0)
						- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100002003"), Форма.СтруктураДанныхРасчетАктивов.П000100002003, 0));
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
						Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100002104, ОбластьИмя) > 0 Тогда
						Форма.СтруктураДанныхРасчетАктивов.Вставить("П000100002104",
						?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100001204"), Форма.СтруктураДанныхРасчетАктивов.П000100001204, 0)
						- ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000100002004"), Форма.СтруктураДанныхРасчетАктивов.П000100002004, 0));
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОФР" Тогда
		РасчетНаСервере_ОФР(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОИК" Тогда
		РасчетНаСервере_ОИК(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОДДС" Тогда
		
		НомПозиции = СтрНайти(ОбластьИмя, "_");
		
		Если НомПозиции > 0 Тогда
			ОбластьИмя = Лев(ОбластьИмя, НомПозиции - 1);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОДДС" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411003, ОбластьИмя) > 0 Тогда
				
				П000100411103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411103.Значение);
				П000100411203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411203.Значение);
				П000100411303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411303.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100411003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100411003_" + ИндексСтр) = Неопределено Цикл
					
					П100100411003 = П100100411003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100411003_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100411903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411903.Значение);
				мФормаОтчета.П000100411003.Значение
				= П000100411103 + П000100411203 + П000100411303 + П100100411003 + П000100411903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411004, ОбластьИмя) > 0 Тогда
				
				П000100411104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411104.Значение);
				П000100411204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411204.Значение);
				П000100411304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411304.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100411004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100411004_" + ИндексСтр) = Неопределено Цикл
					
					П100100411004 = П100100411004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100411004_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100411904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411904.Значение);
				мФормаОтчета.П000100411004.Значение
				= П000100411104 + П000100411204 + П000100411304 + П100100411004 + П000100411904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412003, ОбластьИмя) > 0 Тогда
				
				П000100412103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412103.Значение);
				П000100412203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412203.Значение);
				П000100412303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412303.Значение);
				П000100412403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412403.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100412003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100412003_" + ИндексСтр) = Неопределено Цикл
					
					П100100412003 = П100100412003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100412003_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100412903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412903.Значение);
				мФормаОтчета.П000100412003.Значение
				= П000100412103 + П000100412203 + П000100412303 + П000100412403 + П100100412003 + П000100412903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412004, ОбластьИмя) > 0 Тогда
				
				П000100412104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412104.Значение);
				П000100412204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412204.Значение);
				П000100412304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412304.Значение);
				П000100412404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412404.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100412004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100412004_" + ИндексСтр) = Неопределено Цикл
					
					П100100412004 = П100100412004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100412004_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100412904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412904.Значение);
				мФормаОтчета.П000100412004.Значение
				= П000100412104 + П000100412204 + П000100412304 + П000100412404 + П100100412004 + П000100412904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410003, ОбластьИмя) > 0 Тогда
				
				П000100411003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411003.Значение);
				П000100412003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412003.Значение);
				
				мФормаОтчета.П000100410003.Значение = П000100411003 + П000100412003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410004, ОбластьИмя) > 0 Тогда
				
				П000100411004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411004.Значение);
				П000100412004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412004.Значение);
				
				мФормаОтчета.П000100410004.Значение = П000100411004 + П000100412004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421003, ОбластьИмя) > 0 Тогда
				
				П000100421103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421103.Значение);
				П000100421203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421203.Значение);
				П000100421303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421303.Значение);
				П000100421403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421403.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100421003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100421003_" + ИндексСтр) = Неопределено Цикл
					
					П100100421003 = П100100421003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100421003_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100421903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421903.Значение);
				мФормаОтчета.П000100421003.Значение
				= П000100421103 + П000100421203 + П000100421303 + П000100421403 + П100100421003 + П000100421903;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421004, ОбластьИмя) > 0 Тогда
				
				П000100421104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421104.Значение);
				П000100421204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421204.Значение);
				П000100421304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421304.Значение);
				П000100421404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421404.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100421004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100421004_" + ИндексСтр) = Неопределено Цикл
					
					П100100421004 = П100100421004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100421004_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100421904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421904.Значение);
				мФормаОтчета.П000100421004.Значение
				= П000100421104 + П000100421204 + П000100421304 + П000100421404 + П100100421004 + П000100421904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422003, ОбластьИмя) > 0 Тогда
				
				П000100422103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422103.Значение);
				П000100422203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422203.Значение);
				П000100422303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422303.Значение);
				П000100422403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422403.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100422003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100422003_" + ИндексСтр) = Неопределено Цикл
					
					П100100422003 = П100100422003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100422003_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100422903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422903.Значение);
				мФормаОтчета.П000100422003.Значение
				= П000100422103 + П000100422203 + П000100422303 + П000100422403 + П100100422003 + П000100422903;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422004, ОбластьИмя) > 0 Тогда
				
				П000100422104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422104.Значение);
				П000100422204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422204.Значение);
				П000100422304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422304.Значение);
				П000100422404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422404.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100422004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100422004_" + ИндексСтр) = Неопределено Цикл
					
					П100100422004 = П100100422004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100422004_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100422904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422904.Значение);
				мФормаОтчета.П000100422004.Значение
				= П000100422104 + П000100422204 + П000100422304 + П000100422404 + П100100422004 + П000100422904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420003, ОбластьИмя) > 0 Тогда
				
				П000100421003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421003.Значение);
				П000100422003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422003.Значение);
				
				мФормаОтчета.П000100420003.Значение = П000100421003 + П000100422003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420004, ОбластьИмя) > 0 Тогда
				
				П000100421004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421004.Значение);
				П000100422004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422004.Значение);
				
				мФормаОтчета.П000100420004.Значение = П000100421004 + П000100422004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431003, ОбластьИмя) > 0 Тогда
				
				П000100431103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431103.Значение);
				П000100431203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431203.Значение);
				П000100431303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431303.Значение);
				П000100431403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431403.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100431003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100431003_" + ИндексСтр) = Неопределено Цикл
					
					П100100431003 = П100100431003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100431003_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100431903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431903.Значение);
				мФормаОтчета.П000100431003.Значение
				= П000100431103 + П000100431203 + П000100431303 + П000100431403 + П100100431003 + П000100431903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431004, ОбластьИмя) > 0 Тогда
				
				П000100431104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431104.Значение);
				П000100431204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431204.Значение);
				П000100431304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431304.Значение);
				П000100431404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431404.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100431004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100431004_" + ИндексСтр) = Неопределено Цикл
					
					П100100431004 = П100100431004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100431004_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100431904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431904.Значение);
				мФормаОтчета.П000100431004.Значение
				= П000100431104 + П000100431204 + П000100431304 + П000100431404 + П100100431004 + П000100431904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432003, ОбластьИмя) > 0 Тогда
				
				П000100432103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432103.Значение);
				П000100432203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432203.Значение);
				П000100432303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432303.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100432003 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100432003_" + ИндексСтр) = Неопределено Цикл
					
					П100100432003 = П100100432003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100432003_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100432903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432903.Значение);
				мФормаОтчета.П000100432003.Значение
				= П000100432103 + П000100432203 + П000100432303 + П100100432003 + П000100432903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432004, ОбластьИмя) > 0 Тогда
				
				П000100432104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432104.Значение);
				П000100432204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432204.Значение);
				П000100432304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432304.Значение);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100432004 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100432004_" + ИндексСтр) = Неопределено Цикл
					
					П100100432004 = П100100432004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100432004_" + ИндексСтр].Значение);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100432904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432904.Значение);
				мФормаОтчета.П000100432004.Значение
				= П000100432104 + П000100432204 + П000100432304 + П100100432004 + П000100432904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430003, ОбластьИмя) > 0 Тогда
				
				П000100431003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431003.Значение);
				П000100432003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432003.Значение);
				
				мФормаОтчета.П000100430003.Значение = П000100431003 + П000100432003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430004, ОбластьИмя) > 0 Тогда
				
				П000100431004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431004.Значение);
				П000100432004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432004.Значение);
				
				мФормаОтчета.П000100430004.Значение = П000100431004 + П000100432004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440003, ОбластьИмя) > 0 Тогда
				
				П000100410003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100410003.Значение);
				П000100420003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100420003.Значение);
				П000100430003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100430003.Значение);
				
				мФормаОтчета.П000100440003.Значение = П000100410003 + П000100420003 + П000100430003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440004, ОбластьИмя) > 0 Тогда
				
				П000100410004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100410004.Значение);
				П000100420004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100420004.Значение);
				П000100430004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100430004.Значение);
				
				мФормаОтчета.П000100440004.Значение = П000100410004 + П000100420004 + П000100430004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450003, ОбластьИмя) > 0 Тогда
				
				П000100440003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100440003.Значение);
				П000100445003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100445003.Значение);
				П000100449003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100449003.Значение);
				
				мФормаОтчета.П000100450003.Значение = П000100440003 + П000100445003 + П000100449003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450004, ОбластьИмя) > 0 Тогда
				
				П000100440004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100440004.Значение);
				П000100445004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100445004.Значение);
				П000100449004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100449004.Значение);
				
				мФормаОтчета.П000100450004.Значение = П000100440004 + П000100445004 + П000100449004;
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхОДДС;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411003, ОбластьИмя) > 0 Тогда
				
				П000100411103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411103);
				П000100411203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411203);
				П000100411303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411303);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100411003  = 0;
				П100100411003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100411003_" + ИндексСтр, П100100411003_) Цикл
					
					П100100411003 = П100100411003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100411003_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100411903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411903);
				мФормаОтчета.П000100411003 = П000100411103 + П000100411203 + П000100411303 + П100100411003 + П000100411903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100411004, ОбластьИмя) > 0 Тогда
				
				П000100411104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411104);
				П000100411204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411204);
				П000100411304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411304);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100411004  = 0;
				П100100411004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100411004_" + ИндексСтр, П100100411004_) Цикл
					
					П100100411004 = П100100411004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100411004_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100411904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411904);
				мФормаОтчета.П000100411004 = П000100411104 + П000100411204 + П000100411304 + П100100411004 + П000100411904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412003, ОбластьИмя) > 0 Тогда
				
				П000100412103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412103);
				П000100412203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412203);
				П000100412303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412303);
				П000100412403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412403);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100412003  = 0;
				П100100412003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100412003_" + ИндексСтр, П100100412003_) Цикл
					
					П100100412003 = П100100412003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100412003_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100412903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412903);
				
				мФормаОтчета.П000100412003
				= П000100412103 + П000100412203 + П000100412303 + П000100412403 + П100100412003 + П000100412903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100412004, ОбластьИмя) > 0 Тогда
				
				П000100412104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412104);
				П000100412204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412204);
				П000100412304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412304);
				П000100412404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412404);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100412004  = 0;
				П100100412004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100412004_" + ИндексСтр, П100100412004_) Цикл
					
					П100100412004 = П100100412004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100412004_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100412904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412904);
				мФормаОтчета.П000100412004
				= П000100412104 + П000100412204 + П000100412304 + П000100412404 + П100100412004 + П000100412904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410003, ОбластьИмя) > 0 Тогда
				
				П000100411003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411003);
				П000100412003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412003);
				
				мФормаОтчета.П000100410003 = П000100411003 + П000100412003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100410004, ОбластьИмя) > 0 Тогда
				
				П000100411004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100411004);
				П000100412004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100412004);
				
				мФормаОтчета.П000100410004 = П000100411004 + П000100412004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421003, ОбластьИмя) > 0 Тогда
				
				П000100421103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421103);
				П000100421203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421203);
				П000100421303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421303);
				П000100421403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421403);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100421003  = 0;
				П100100421003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100421003_" + ИндексСтр, П100100421003_) Цикл
					
					П100100421003 = П100100421003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100421003_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100421903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421903);
				мФормаОтчета.П000100421003
				= П000100421103 + П000100421203 + П000100421303 + П000100421403 + П100100421003 + П000100421903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100421004, ОбластьИмя) > 0 Тогда
				
				П000100421104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421104);
				П000100421204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421204);
				П000100421304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421304);
				П000100421404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421404);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100421004  = 0;
				П100100421004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100421004_" + ИндексСтр, П100100421004_) Цикл
					
					П100100421004 = П100100421004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100421004_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100421904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421904);
				мФормаОтчета.П000100421004
				= П000100421104 + П000100421204 + П000100421304 + П000100421404 + П100100421004 + П000100421904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422003, ОбластьИмя) > 0 Тогда
				
				П000100422103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422103);
				П000100422203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422203);
				П000100422303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422303);
				П000100422403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422403);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100422003  = 0;
				П100100422003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100422003_" + ИндексСтр, П100100422003_) Цикл
					
					П100100422003 = П100100422003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100422003_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100422903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422903);
				мФормаОтчета.П000100422003
				= П000100422103 + П000100422203 + П000100422303 + П000100422403 + П100100422003 + П000100422903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100422004, ОбластьИмя) > 0 Тогда
				
				П000100422104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422104);
				П000100422204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422204);
				П000100422304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422304);
				П000100422404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422404);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100422004  = 0;
				П100100422004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100422004_" + ИндексСтр, П100100422004_) Цикл
					
					П100100422004 = П100100422004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100422004_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100422904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422904);
				мФормаОтчета.П000100422004
				= П000100422104 + П000100422204 + П000100422304 + П000100422404 + П100100422004 + П000100422904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420003, ОбластьИмя) > 0 Тогда
				
				П000100421003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421003);
				П000100422003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422003);
				
				мФормаОтчета.П000100420003 = П000100421003 + П000100422003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100420004, ОбластьИмя) > 0 Тогда
				
				П000100421004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100421004);
				П000100422004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100422004);
				
				мФормаОтчета.П000100420004 = П000100421004 + П000100422004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431003, ОбластьИмя) > 0 Тогда
				
				П000100431103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431103);
				П000100431203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431203);
				П000100431303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431303);
				П000100431403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431403);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100431003  = 0;
				П100100431003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100431003_" + ИндексСтр, П100100431003_) Цикл
					
					П100100431003 = П100100431003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100431003_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100431903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431903);
				мФормаОтчета.П000100431003
				= П000100431103 + П000100431203 + П000100431303 + П000100431403 + П100100431003 + П000100431903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100431004, ОбластьИмя) > 0 Тогда
				
				П000100431104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431104);
				П000100431204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431204);
				П000100431304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431304);
				П000100431404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431404);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100431004  = 0;
				П100100431004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100431004_" + ИндексСтр, П100100431004_) Цикл
					
					П100100431004 = П100100431004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100431004_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100431904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431904);
				мФормаОтчета.П000100431004
				= П000100431104 + П000100431204 + П000100431304 + П000100431404 + П100100431004 + П000100431904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432003, ОбластьИмя) > 0 Тогда
				
				П000100432103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432103);
				П000100432203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432203);
				П000100432303 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432303);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100432003  = 0;
				П100100432003_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100432003_" + ИндексСтр, П100100432003_) Цикл
					
					П100100432003 = П100100432003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100432003_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100432903 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432903);
				мФормаОтчета.П000100432003 = П000100432103 + П000100432203 + П000100432303 + П100100432003 + П000100432903;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100432004, ОбластьИмя) > 0 Тогда
				
				П000100432104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432104);
				П000100432204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432204);
				П000100432304 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432304);
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100432004  = 0;
				П100100432004_ = 0;
				
				Пока мФормаОтчета.Свойство("П100100432004_" + ИндексСтр, П100100432004_) Цикл
					
					П100100432004 = П100100432004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, П100100432004_);
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
				П000100432904 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432904);
				мФормаОтчета.П000100432004 = П000100432104 + П000100432204 + П000100432304 + П100100432004 + П000100432904;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430003, ОбластьИмя) > 0 Тогда
				
				П000100431003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431003);
				П000100432003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432003);
				
				мФормаОтчета.П000100430003 = П000100431003 + П000100432003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100430004, ОбластьИмя) > 0 Тогда
				
				П000100431004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100431004);
				П000100432004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100432004);
				
				мФормаОтчета.П000100430004 = П000100431004 + П000100432004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440003, ОбластьИмя) > 0 Тогда
				
				П000100410003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100410003);
				П000100420003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100420003);
				П000100430003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100430003);
				
				мФормаОтчета.П000100440003 = П000100410003 + П000100420003 + П000100430003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100440004, ОбластьИмя) > 0 Тогда
				
				П000100410004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100410004);
				П000100420004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100420004);
				П000100430004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100430004);
				
				мФормаОтчета.П000100440004 = П000100410004 + П000100420004 + П000100430004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450003, ОбластьИмя) > 0 Тогда
				
				П000100440003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100440003);
				П000100445003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100445003);
				П000100449003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100449003);
				
				мФормаОтчета.П000100450003 = П000100440003 + П000100445003 + П000100449003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100450004, ОбластьИмя) > 0 Тогда
				
				П000100440004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100440004);
				П000100445004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100445004);
				П000100449004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100449004);
				
				мФормаОтчета.П000100450004 = П000100440004 + П000100445004 + П000100449004;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "ОЦИС" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОЦИС" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100620004, ОбластьИмя) > 0 Тогда
				
				П000100621004 = мФормаОтчета.П000100621004.Значение;
				П000100621504 = мФормаОтчета.П000100621504.Значение;
				П000100622004 = мФормаОтчета.П000100622004.Значение;
				П000100623004 = мФормаОтчета.П000100623004.Значение;
				П000100624004 = мФормаОтчета.П000100624004.Значение;
				П000100625004 = мФормаОтчета.П000100625004.Значение;
				
				мФормаОтчета.П000100620004.Значение
				= П000100621004 + П000100621504 + П000100622004 + П000100623004 + П000100624004 + П000100625004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100631004, ОбластьИмя) > 0 Тогда
				
				П000100631104 = мФормаОтчета.П000100631104.Значение;
				П000100631204 = мФормаОтчета.П000100631204.Значение;
				П000100631304 = мФормаОтчета.П000100631304.Значение;
				
				мФормаОтчета.П000100631004.Значение = П000100631104 + П000100631204 + П000100631304;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100632004, ОбластьИмя) > 0 Тогда
				
				П000100632104 = мФормаОтчета.П000100632104.Значение;
				П000100632204 = мФормаОтчета.П000100632204.Значение;
				П000100632304 = мФормаОтчета.П000100632304.Значение;
				П000100632404 = мФормаОтчета.П000100632404.Значение;
				П000100632504 = мФормаОтчета.П000100632504.Значение;
				П000100632604 = мФормаОтчета.П000100632604.Значение;
				
				мФормаОтчета.П000100632004.Значение
				= П000100632104 + П000100632204 + П000100632304 + П000100632404 + П000100632504 + П000100632604;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100630004, ОбластьИмя) > 0 Тогда
				
				П000100631004 = мФормаОтчета.П000100631004.Значение;
				П000100632004 = мФормаОтчета.П000100632004.Значение;
				П000100633004 = мФормаОтчета.П000100633004.Значение;
				П000100635004 = мФормаОтчета.П000100635004.Значение;
				
				мФормаОтчета.П000100630004.Значение = П000100631004 + П000100632004 + П000100633004 + П000100635004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640004, ОбластьИмя) > 0 Тогда
				
				П000100610004 = мФормаОтчета.П000100610004.Значение;
				П000100620004 = мФормаОтчета.П000100620004.Значение;
				П000100630004 = мФормаОтчета.П000100630004.Значение;
				
				мФормаОтчета.П000100640004.Значение = П000100610004 + П000100620004 + П000100630004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100620005, ОбластьИмя) > 0 Тогда
				
				П000100621005 = мФормаОтчета.П000100621005.Значение;
				П000100621505 = мФормаОтчета.П000100621505.Значение;
				П000100622005 = мФормаОтчета.П000100622005.Значение;
				П000100623005 = мФормаОтчета.П000100623005.Значение;
				П000100624005 = мФормаОтчета.П000100624005.Значение;
				П000100625005 = мФормаОтчета.П000100625005.Значение;
				
				мФормаОтчета.П000100620005.Значение
				= П000100621005 + П000100621505 + П000100622005 + П000100623005 + П000100624005 + П000100625005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100631005, ОбластьИмя) > 0 Тогда
				
				П000100631105 = мФормаОтчета.П000100631105.Значение;
				П000100631205 = мФормаОтчета.П000100631205.Значение;
				П000100631305 = мФормаОтчета.П000100631305.Значение;
				
				мФормаОтчета.П000100631005.Значение = П000100631105 + П000100631205 + П000100631305;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100632005, ОбластьИмя) > 0 Тогда
				
				П000100632105 = мФормаОтчета.П000100632105.Значение;
				П000100632205 = мФормаОтчета.П000100632205.Значение;
				П000100632305 = мФормаОтчета.П000100632305.Значение;
				П000100632405 = мФормаОтчета.П000100632405.Значение;
				П000100632505 = мФормаОтчета.П000100632505.Значение;
				П000100632605 = мФормаОтчета.П000100632605.Значение;
				
				мФормаОтчета.П000100632005.Значение
				= П000100632105 + П000100632205 + П000100632305 + П000100632405 + П000100632505 + П000100632605;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100630005, ОбластьИмя) > 0 Тогда
				
				П000100631005 = мФормаОтчета.П000100631005.Значение;
				П000100632005 = мФормаОтчета.П000100632005.Значение;
				П000100633005 = мФормаОтчета.П000100633005.Значение;
				П000100635005 = мФормаОтчета.П000100635005.Значение;
				
				мФормаОтчета.П000100630005.Значение = П000100631005 + П000100632005 + П000100633005 + П000100635005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640005, ОбластьИмя) > 0 Тогда
				
				П000100610005 = мФормаОтчета.П000100610005.Значение;
				П000100620005 = мФормаОтчета.П000100620005.Значение;
				П000100630005 = мФормаОтчета.П000100630005.Значение;
				
				мФормаОтчета.П000100640005.Значение = П000100610005 + П000100620005 + П000100630005;
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхОЦИС;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100620004, ОбластьИмя) > 0 Тогда
				
				П000100621004 = мФормаОтчета.П000100621004;
				П000100621504 = мФормаОтчета.П000100621504;
				П000100622004 = мФормаОтчета.П000100622004;
				П000100623004 = мФормаОтчета.П000100623004;
				П000100624004 = мФормаОтчета.П000100624004;
				П000100625004 = мФормаОтчета.П000100625004;
				
				мФормаОтчета.П000100620004
				= П000100621004 + П000100621504 + П000100622004 + П000100623004 + П000100624004 + П000100625004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100631004, ОбластьИмя) > 0 Тогда
				
				П000100631104 = мФормаОтчета.П000100631104;
				П000100631204 = мФормаОтчета.П000100631204;
				П000100631304 = мФормаОтчета.П000100631304;
				
				мФормаОтчета.П000100631004 = П000100631104 + П000100631204 + П000100631304;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100632004, ОбластьИмя) > 0 Тогда
				
				П000100632104 = мФормаОтчета.П000100632104;
				П000100632204 = мФормаОтчета.П000100632204;
				П000100632304 = мФормаОтчета.П000100632304;
				П000100632404 = мФормаОтчета.П000100632404;
				П000100632504 = мФормаОтчета.П000100632504;
				П000100632604 = мФормаОтчета.П000100632604;
				
				мФормаОтчета.П000100632004
				= П000100632104 + П000100632204 + П000100632304 + П000100632404 + П000100632504 + П000100632604;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100630004, ОбластьИмя) > 0 Тогда
				
				П000100631004 = мФормаОтчета.П000100631004;
				П000100632004 = мФормаОтчета.П000100632004;
				П000100633004 = мФормаОтчета.П000100633004;
				П000100635004 = мФормаОтчета.П000100635004;
				
				мФормаОтчета.П000100630004 = П000100631004 + П000100632004 + П000100633004 + П000100635004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640004, ОбластьИмя) > 0 Тогда
				
				П000100610004 = мФормаОтчета.П000100610004;
				П000100620004 = мФормаОтчета.П000100620004;
				П000100630004 = мФормаОтчета.П000100630004;
				
				мФормаОтчета.П000100640004 = П000100610004 + П000100620004 + П000100630004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100620005, ОбластьИмя) > 0 Тогда
				
				П000100621005 = мФормаОтчета.П000100621005;
				П000100621505 = мФормаОтчета.П000100621505;
				П000100622005 = мФормаОтчета.П000100622005;
				П000100623005 = мФормаОтчета.П000100623005;
				П000100624005 = мФормаОтчета.П000100624005;
				П000100625005 = мФормаОтчета.П000100625005;
				
				мФормаОтчета.П000100620005
				= П000100621005 + П000100621505 + П000100622005 + П000100623005 + П000100624005 + П000100625005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100631005, ОбластьИмя) > 0 Тогда
				
				П000100631105 = мФормаОтчета.П000100631105;
				П000100631205 = мФормаОтчета.П000100631205;
				П000100631305 = мФормаОтчета.П000100631305;
				
				мФормаОтчета.П000100631005 = П000100631105 + П000100631205 + П000100631305;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100632005, ОбластьИмя) > 0 Тогда
				
				П000100632105 = мФормаОтчета.П000100632105;
				П000100632205 = мФормаОтчета.П000100632205;
				П000100632305 = мФормаОтчета.П000100632305;
				П000100632405 = мФормаОтчета.П000100632405;
				П000100632505 = мФормаОтчета.П000100632505;
				П000100632605 = мФормаОтчета.П000100632605;
				
				мФормаОтчета.П000100632005
				= П000100632105 + П000100632205 + П000100632305 + П000100632405 + П000100632505 + П000100632605;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100630005, ОбластьИмя) > 0 Тогда
				
				П000100631005 = мФормаОтчета.П000100631005;
				П000100632005 = мФормаОтчета.П000100632005;
				П000100633005 = мФормаОтчета.П000100633005;
				П000100635005 = мФормаОтчета.П000100635005;
				
				мФормаОтчета.П000100630005 = П000100631005 + П000100632005 + П000100633005 + П000100635005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100640005, ОбластьИмя) > 0 Тогда
				
				П000100610005 = мФормаОтчета.П000100610005;
				П000100620005 = мФормаОтчета.П000100620005;
				П000100630005 = мФормаОтчета.П000100630005;
				
				мФормаОтчета.П000100640005 = П000100610005 + П000100620005 + П000100630005;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения3" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения3" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530004, ОбластьИмя) > 0 Тогда
				
				П000100530104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530104.Значение);
				П000100530504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530504.Значение);
				
				мФормаОтчета.П000100530004.Значение = П000100530104 + П000100530504;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530005, ОбластьИмя) > 0 Тогда
				
				П000100530105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530105.Значение);
				П000100530505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530505.Значение);
				
				мФормаОтчета.П000100530005.Значение = П000100530105 + П000100530505;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530006, ОбластьИмя) > 0 Тогда
				
				П000100530106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530106.Значение);
				П000100530506 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530506.Значение);
				
				мФормаОтчета.П000100530006.Значение = П000100530106 + П000100530506;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530007, ОбластьИмя) > 0 Тогда
				
				П000100530107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530107.Значение);
				П000100530507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530507.Значение);
				
				мФормаОтчета.П000100530007.Значение = П000100530107 + П000100530507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530008, ОбластьИмя) > 0 Тогда
				
				П000100530108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530108.Значение);
				П000100530508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530508.Значение);
				
				мФормаОтчета.П000100530008.Значение = П000100530108 + П000100530508;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530009, ОбластьИмя) > 0 Тогда
				
				П000100530109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530109.Значение);
				П000100530509 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530509.Значение);
				
				мФормаОтчета.П000100530009.Значение = П000100530109 + П000100530509;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530010, ОбластьИмя) > 0 Тогда
				
				П000100530110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530110.Значение);
				П000100530510 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530510.Значение);
				
				мФормаОтчета.П000100530010.Значение = П000100530110 + П000100530510;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530011, ОбластьИмя) > 0 Тогда
				
				П000100530111 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530111.Значение);
				П000100530511 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530511.Значение);
				
				мФормаОтчета.П000100530011.Значение = П000100530111 + П000100530511;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530012, ОбластьИмя) > 0 Тогда
				
				П000100530112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530112.Значение);
				П000100530512 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530512.Значение);
				
				мФормаОтчета.П000100530012.Значение = П000100530112 + П000100530512;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531004, ОбластьИмя) > 0 Тогда
				
				П000100531104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531104.Значение);
				П000100531504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531504.Значение);
				
				мФормаОтчета.П000100531004.Значение = П000100531104 + П000100531504;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531005, ОбластьИмя) > 0 Тогда
				
				П000100531105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531105.Значение);
				П000100531505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531505.Значение);
				
				мФормаОтчета.П000100531005.Значение = П000100531105 + П000100531505;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531006, ОбластьИмя) > 0 Тогда
				
				П000100531106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531106.Значение);
				П000100531506 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531506.Значение);
				
				мФормаОтчета.П000100531006.Значение = П000100531106 + П000100531506;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531007, ОбластьИмя) > 0 Тогда
				
				П000100531107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531107.Значение);
				П000100531507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531507.Значение);
				
				мФормаОтчета.П000100531007.Значение = П000100531107 + П000100531507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531008, ОбластьИмя) > 0 Тогда
				
				П000100531108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531108.Значение);
				П000100531508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531508.Значение);
				
				мФормаОтчета.П000100531008.Значение = П000100531108 + П000100531508;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531009, ОбластьИмя) > 0 Тогда
				
				П000100531109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531109.Значение);
				П000100531509 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531509.Значение);
				
				мФормаОтчета.П000100531009.Значение = П000100531109 + П000100531509;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531010, ОбластьИмя) > 0 Тогда
				
				П000100531110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531110.Значение);
				П000100531510 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531510.Значение);
				
				мФормаОтчета.П000100531010.Значение = П000100531110 + П000100531510;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531011, ОбластьИмя) > 0 Тогда
				
				П000100531111 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531111.Значение);
				П000100531511 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531511.Значение);
				
				мФормаОтчета.П000100531011.Значение = П000100531111 + П000100531511;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531012, ОбластьИмя) > 0 Тогда
				
				П000100531112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531112.Значение);
				П000100531512 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531512.Значение);
				
				мФормаОтчета.П000100531012.Значение = П000100531112 + П000100531512;
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхПояснения3;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530004, ОбластьИмя) > 0 Тогда
				
				П000100530104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530104);
				П000100530504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530504);
				
				мФормаОтчета.П000100530004 = П000100530104 + П000100530504;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530005, ОбластьИмя) > 0 Тогда
				
				П000100530105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530105);
				П000100530505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530505);
				
				мФормаОтчета.П000100530005 = П000100530105 + П000100530505;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530006, ОбластьИмя) > 0 Тогда
				
				П000100530106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530106);
				П000100530506 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530506);
				
				мФормаОтчета.П000100530006 = П000100530106 + П000100530506;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530007, ОбластьИмя) > 0 Тогда
				
				П000100530107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530107);
				П000100530507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530507);
				
				мФормаОтчета.П000100530007 = П000100530107 + П000100530507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530008, ОбластьИмя) > 0 Тогда
				
				П000100530108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530108);
				П000100530508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530508);
				
				мФормаОтчета.П000100530008 = П000100530108 + П000100530508;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530009, ОбластьИмя) > 0 Тогда
				
				П000100530109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530109);
				П000100530509 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530509);
				
				мФормаОтчета.П000100530009 = П000100530109 + П000100530509;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530010, ОбластьИмя) > 0 Тогда
				
				П000100530110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530110);
				П000100530510 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530510);
				
				мФормаОтчета.П000100530010 = П000100530110 + П000100530510;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530011, ОбластьИмя) > 0 Тогда
				
				П000100530111 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530111);
				П000100530511 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530511);
				
				мФормаОтчета.П000100530011 = П000100530111 + П000100530511;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100530012, ОбластьИмя) > 0 Тогда
				
				П000100530112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530112);
				П000100530512 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100530512);
				
				мФормаОтчета.П000100530012 = П000100530112 + П000100530512;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531004, ОбластьИмя) > 0 Тогда
				
				П000100531104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531104);
				П000100531504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531504);
				
				мФормаОтчета.П000100531004 = П000100531104 + П000100531504;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531005, ОбластьИмя) > 0 Тогда
				
				П000100531105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531105);
				П000100531505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531505);
				
				мФормаОтчета.П000100531005 = П000100531105 + П000100531505;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531006, ОбластьИмя) > 0 Тогда
				
				П000100531106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531106);
				П000100531506 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531506);
				
				мФормаОтчета.П000100531006 = П000100531106 + П000100531506;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531007, ОбластьИмя) > 0 Тогда
				
				П000100531107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531107);
				П000100531507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531507);
				
				мФормаОтчета.П000100531007 = П000100531107 + П000100531507;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531008, ОбластьИмя) > 0 Тогда
				
				П000100531108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531108);
				П000100531508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531508);
				
				мФормаОтчета.П000100531008 = П000100531108 + П000100531508;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531009, ОбластьИмя) > 0 Тогда
				
				П000100531109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531109);
				П000100531509 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531509);
				
				мФормаОтчета.П000100531009 = П000100531109 + П000100531509;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531010, ОбластьИмя) > 0 Тогда
				
				П000100531110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531110);
				П000100531510 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531510);
				
				мФормаОтчета.П000100531010 = П000100531110 + П000100531510;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531011, ОбластьИмя) > 0 Тогда
				
				П000100531111 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531111);
				П000100531511 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531511);
				
				мФормаОтчета.П000100531011 = П000100531111 + П000100531511;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100531012, ОбластьИмя) > 0 Тогда
				
				П000100531112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531112);
				П000100531512 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100531512);
				
				мФормаОтчета.П000100531012 = П000100531112 + П000100531512;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения5" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения5" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550004, ОбластьИмя) > 0 Тогда
				
				П000100550104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550104.Значение);
				П000100551104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551104.Значение);
				
				мФормаОтчета.П000100550004.Значение = П000100550104 + П000100551104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552004, ОбластьИмя) > 0 Тогда
				
				П000100552104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552104.Значение);
				П000100553104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553104.Значение);
				
				мФормаОтчета.П000100552004.Значение = П000100552104 + П000100553104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550005, ОбластьИмя) > 0 Тогда
				
				П000100550105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550105.Значение);
				П000100551105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551105.Значение);
				
				мФормаОтчета.П000100550005.Значение = П000100550105 + П000100551105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552005, ОбластьИмя) > 0 Тогда
				
				П000100552105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552105.Значение);
				П000100553105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553105.Значение);
				
				мФормаОтчета.П000100552005.Значение = П000100552105 + П000100553105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550006, ОбластьИмя) > 0 Тогда
				
				П000100550106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550106.Значение);
				П000100551106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551106.Значение);
				
				мФормаОтчета.П000100550006.Значение = П000100550106 + П000100551106;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552006, ОбластьИмя) > 0 Тогда
				
				П000100552106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552106.Значение);
				П000100553106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553106.Значение);
				
				мФормаОтчета.П000100552006.Значение = П000100552106 + П000100553106;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550007, ОбластьИмя) > 0 Тогда
				
				П000100550107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550107.Значение);
				П000100551107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551107.Значение);
				
				мФормаОтчета.П000100550007.Значение = П000100550107 + П000100551107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552007, ОбластьИмя) > 0 Тогда
				
				П000100552107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552107.Значение);
				П000100553107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553107.Значение);
				
				мФормаОтчета.П000100552007.Значение = П000100552107 + П000100553107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550008, ОбластьИмя) > 0 Тогда
				
				П000100550108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550108.Значение);
				П000100551108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551108.Значение);
				
				мФормаОтчета.П000100550008.Значение = П000100550108 + П000100551108;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552008, ОбластьИмя) > 0 Тогда
				
				П000100552108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552108.Значение);
				П000100553108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553108.Значение);
				
				мФормаОтчета.П000100552008.Значение = П000100552108 + П000100553108;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550009, ОбластьИмя) > 0 Тогда
				
				П000100550109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550109.Значение);
				П000100551109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551109.Значение);
				
				мФормаОтчета.П000100550009.Значение = П000100550109 + П000100551109;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552009, ОбластьИмя) > 0 Тогда
				
				П000100552109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552109.Значение);
				П000100553109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553109.Значение);
				
				мФормаОтчета.П000100552009.Значение = П000100552109 + П000100553109;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550010, ОбластьИмя) > 0 Тогда
				
				П000100550110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550110.Значение);
				П000100551110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551110.Значение);
				
				мФормаОтчета.П000100550010.Значение = П000100550110 + П000100551110;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552010, ОбластьИмя) > 0 Тогда
				
				П000100552110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552110.Значение);
				П000100553110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553110.Значение);
				
				мФормаОтчета.П000100552010.Значение = П000100552110 + П000100553110;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550012, ОбластьИмя) > 0 Тогда
				
				П000100550112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550112.Значение);
				П000100551112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551112.Значение);
				
				мФормаОтчета.П000100550012.Значение = П000100550112 + П000100551112;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552012, ОбластьИмя) > 0 Тогда
				
				П000100552112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552112.Значение);
				П000100553112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553112.Значение);
				
				мФормаОтчета.П000100552012.Значение = П000100552112 + П000100553112;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550013, ОбластьИмя) > 0 Тогда
				
				П000100550113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550113.Значение);
				П000100551113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551113.Значение);
				
				мФормаОтчета.П000100550013.Значение = П000100550113 + П000100551113;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552013, ОбластьИмя) > 0 Тогда
				
				П000100552113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552113.Значение);
				П000100553113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553113.Значение);
				
				мФормаОтчета.П000100552013.Значение = П000100552113 + П000100553113;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555004, ОбластьИмя) > 0 Тогда
				
				П000100555104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555104.Значение);
				П000100556004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556004.Значение);
				
				мФормаОтчета.П000100555004.Значение = П000100555104 + П000100556004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557004, ОбластьИмя) > 0 Тогда
				
				П000100557104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557104.Значение);
				П000100558004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558004.Значение);
				
				мФормаОтчета.П000100557004.Значение = П000100557104 + П000100558004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555005, ОбластьИмя) > 0 Тогда
				
				П000100555105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555105.Значение);
				П000100556005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556005.Значение);
				
				мФормаОтчета.П000100555005.Значение = П000100555105 + П000100556005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557005, ОбластьИмя) > 0 Тогда
				
				П000100557105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557105.Значение);
				П000100558005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558005.Значение);
				
				мФормаОтчета.П000100557005.Значение = П000100557105 + П000100558005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555006, ОбластьИмя) > 0 Тогда
				
				П000100555106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555106.Значение);
				П000100556006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556006.Значение);
				
				мФормаОтчета.П000100555006.Значение = П000100555106 + П000100556006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557006, ОбластьИмя) > 0 Тогда
				
				П000100557106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557106.Значение);
				П000100558006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558006.Значение);
				
				мФормаОтчета.П000100557006.Значение = П000100557106 + П000100558006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555007, ОбластьИмя) > 0 Тогда
				
				П000100555107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555107.Значение);
				П000100556007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556007.Значение);
				
				мФормаОтчета.П000100555007.Значение = П000100555107 + П000100556007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557007, ОбластьИмя) > 0 Тогда
				
				П000100557107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557107.Значение);
				П000100558007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558007.Значение);
				
				мФормаОтчета.П000100557007.Значение = П000100557107 + П000100558007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555008, ОбластьИмя) > 0 Тогда
				
				П000100555108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555108.Значение);
				П000100556008 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556008.Значение);
				
				мФормаОтчета.П000100555008.Значение = П000100555108 + П000100556008;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557008, ОбластьИмя) > 0 Тогда
				
				П000100557108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557108.Значение);
				П000100558008 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558008.Значение);
				
				мФормаОтчета.П000100557008.Значение = П000100557108 + П000100558008;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555010, ОбластьИмя) > 0 Тогда
				
				П000100555110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555110.Значение);
				П000100556010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556010.Значение);
				
				мФормаОтчета.П000100555010.Значение = П000100555110 + П000100556010;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557010, ОбластьИмя) > 0 Тогда
				
				П000100557110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557110.Значение);
				П000100558010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558010.Значение);
				
				мФормаОтчета.П000100557010.Значение = П000100557110 + П000100558010;
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхПояснения5;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550004, ОбластьИмя) > 0 Тогда
				
				П000100550104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550104);
				П000100551104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551104);
				
				мФормаОтчета.П000100550004 = П000100550104 + П000100551104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552004, ОбластьИмя) > 0 Тогда
				
				П000100552104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552104);
				П000100553104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553104);
				
				мФормаОтчета.П000100552004 = П000100552104 + П000100553104;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550005, ОбластьИмя) > 0 Тогда
				
				П000100550105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550105);
				П000100551105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551105);
				
				мФормаОтчета.П000100550005 = П000100550105 + П000100551105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552005, ОбластьИмя) > 0 Тогда
				
				П000100552105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552105);
				П000100553105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553105);
				
				мФормаОтчета.П000100552005 = П000100552105 + П000100553105;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550006, ОбластьИмя) > 0 Тогда
				
				П000100550106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550106);
				П000100551106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551106);
				
				мФормаОтчета.П000100550006 = П000100550106 + П000100551106;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552006, ОбластьИмя) > 0 Тогда
				
				П000100552106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552106);
				П000100553106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553106);
				
				мФормаОтчета.П000100552006 = П000100552106 + П000100553106;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550007, ОбластьИмя) > 0 Тогда
				
				П000100550107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550107);
				П000100551107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551107);
				
				мФормаОтчета.П000100550007 = П000100550107 + П000100551107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552007, ОбластьИмя) > 0 Тогда
				
				П000100552107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552107);
				П000100553107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553107);
				
				мФормаОтчета.П000100552007 = П000100552107 + П000100553107;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550008, ОбластьИмя) > 0 Тогда
				
				П000100550108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550108);
				П000100551108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551108);
				
				мФормаОтчета.П000100550008 = П000100550108 + П000100551108;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552008, ОбластьИмя) > 0 Тогда
				
				П000100552108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552108);
				П000100553108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553108);
				
				мФормаОтчета.П000100552008 = П000100552108 + П000100553108;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550009, ОбластьИмя) > 0 Тогда
				
				П000100550109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550109);
				П000100551109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551109);
				
				мФормаОтчета.П000100550009 = П000100550109 + П000100551109;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552009, ОбластьИмя) > 0 Тогда
				
				П000100552109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552109);
				П000100553109 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553109);
				
				мФормаОтчета.П000100552009 = П000100552109 + П000100553109;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550010, ОбластьИмя) > 0 Тогда
				
				П000100550110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550110);
				П000100551110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551110);
				
				мФормаОтчета.П000100550010 = П000100550110 + П000100551110;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552010, ОбластьИмя) > 0 Тогда
				
				П000100552110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552110);
				П000100553110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553110);
				
				мФормаОтчета.П000100552010 = П000100552110 + П000100553110;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550012, ОбластьИмя) > 0 Тогда
				
				П000100550112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550112);
				П000100551112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551112);
				
				мФормаОтчета.П000100550012 = П000100550112 + П000100551112;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552012, ОбластьИмя) > 0 Тогда
				
				П000100552112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552112);
				П000100553112 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553112);
				
				мФормаОтчета.П000100552012 = П000100552112 + П000100553112;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100550013, ОбластьИмя) > 0 Тогда
				
				П000100550113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100550113);
				П000100551113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100551113);
				
				мФормаОтчета.П000100550013 = П000100550113 + П000100551113;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100552013, ОбластьИмя) > 0 Тогда
				
				П000100552113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100552113);
				П000100553113 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100553113);
				
				мФормаОтчета.П000100552013 = П000100552113 + П000100553113;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555004, ОбластьИмя) > 0 Тогда
				
				П000100555104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555104);
				П000100556004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556004);
				
				мФормаОтчета.П000100555004 = П000100555104 + П000100556004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557004, ОбластьИмя) > 0 Тогда
				
				П000100557104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557104);
				П000100558004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558004);
				
				мФормаОтчета.П000100557004 = П000100557104 + П000100558004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555005, ОбластьИмя) > 0 Тогда
				
				П000100555105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555105);
				П000100556005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556005);
				
				мФормаОтчета.П000100555005 = П000100555105 + П000100556005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557005, ОбластьИмя) > 0 Тогда
				
				П000100557105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557105);
				П000100558005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558005);
				
				мФормаОтчета.П000100557005 = П000100557105 + П000100558005;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555006, ОбластьИмя) > 0 Тогда
				
				П000100555106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555106);
				П000100556006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556006);
				
				мФормаОтчета.П000100555006 = П000100555106 + П000100556006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557006, ОбластьИмя) > 0 Тогда
				
				П000100557106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557106);
				П000100558006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558006);
				
				мФормаОтчета.П000100557006 = П000100557106 + П000100558006;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555007, ОбластьИмя) > 0 Тогда
				
				П000100555107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555107);
				П000100556007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556007);
				
				мФормаОтчета.П000100555007 = П000100555107 + П000100556007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557007, ОбластьИмя) > 0 Тогда
				
				П000100557107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557107);
				П000100558007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558007);
				
				мФормаОтчета.П000100557007 = П000100557107 + П000100558007;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555008, ОбластьИмя) > 0 Тогда
				
				П000100555108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555108);
				П000100556008 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556008);
				
				мФормаОтчета.П000100555008 = П000100555108 + П000100556008;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557008, ОбластьИмя) > 0 Тогда
				
				П000100557108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557108);
				П000100558008 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558008);
				
				мФормаОтчета.П000100557008 = П000100557108 + П000100558008;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100555010, ОбластьИмя) > 0 Тогда
				
				П000100555110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100555110);
				П000100556010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100556010);
				
				мФормаОтчета.П000100555010 = П000100555110 + П000100556010;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100557010, ОбластьИмя) > 0 Тогда
				
				П000100557110 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100557110);
				П000100558010 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100558010);
				
				мФормаОтчета.П000100557010 = П000100557110 + П000100558010;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения6" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения6" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100566003, ОбластьИмя) > 0 Тогда
				
				П000100561003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100561003.Значение);
				П000100562003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100562003.Значение);
				П000100563003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100563003.Значение);
				П000100564003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100564003.Значение);
				П000100565003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100565003.Значение);
				
				мФормаОтчета.П000100566003.Значение
				= П000100561003 + П000100562003 + П000100563003 + П000100564003 + П000100565003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100566004, ОбластьИмя) > 0 Тогда
				
				П000100561004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100561004.Значение);
				П000100562004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100562004.Значение);
				П000100563004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100563004.Значение);
				П000100564004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100564004.Значение);
				П000100565004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100565004.Значение);
				
				мФормаОтчета.П000100566004.Значение
				= П000100561004 + П000100562004 + П000100563004 + П000100564004 + П000100565004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100560003, ОбластьИмя) > 0 Тогда
				
				П000100566003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566003.Значение);
				П000100566503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566503.Значение);
				П000100567003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100567003.Значение);
				П000100568003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100568003.Значение);
				
				Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду
					= Неопределено Тогда
					// В момент ввода значений не допускается одновременное заполнение строки 5665 и строк 5670, 5680.
					мФормаОтчета.П000100560003.Значение = П000100566003 + П000100566503 + П000100567003 + П000100568003;
				Иначе
					Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду Тогда
						мФормаОтчета.П000100560003.Значение = П000100566003 + П000100566503;
					Иначе
						мФормаОтчета.П000100560003.Значение = П000100566003 + П000100567003 + П000100568003;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100560004, ОбластьИмя) > 0 Тогда
				
				П000100566004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566004.Значение);
				П000100566504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566504.Значение);
				П000100567004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100567004.Значение);
				П000100568004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100568004.Значение);
				
				Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду
					= Неопределено Тогда
					// В момент ввода значений не допускается одновременное заполнение строки 5665 и строк 5670, 5680.
					мФормаОтчета.П000100560004.Значение = П000100566004 + П000100566504 + П000100567004 + П000100568004;
				Иначе
					Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду Тогда
						мФормаОтчета.П000100560004.Значение = П000100566004 + П000100566504;
					Иначе
						мФормаОтчета.П000100560004.Значение = П000100566004 + П000100567004 + П000100568004;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхПояснения6;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100566003, ОбластьИмя) > 0 Тогда
				
				П000100561003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100561003);
				П000100562003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100562003);
				П000100563003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100563003);
				П000100564003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100564003);
				П000100565003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100565003);
				
				мФормаОтчета.П000100566003 = П000100561003 + П000100562003 + П000100563003 + П000100564003 + П000100565003;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100566004, ОбластьИмя) > 0 Тогда
				
				П000100561004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100561004);
				П000100562004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100562004);
				П000100563004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100563004);
				П000100564004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100564004);
				П000100565004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100565004);
				
				мФормаОтчета.П000100566004 = П000100561004 + П000100562004 + П000100563004 + П000100564004 + П000100565004;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100560003, ОбластьИмя) > 0 Тогда
				
				П000100566003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566003);
				П000100566503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566503);
				П000100567003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100567003);
				П000100568003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100568003);
				
				Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду
					= Неопределено Тогда
					// В момент ввода значений не допускается одновременное заполнение строки 5665 и строк 5670, 5680.
					мФормаОтчета.П000100560003 = П000100566003 + П000100566503 + П000100567003 + П000100568003;
				Иначе
					Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду Тогда
						мФормаОтчета.П000100560003 = П000100566003 + П000100566503;
					Иначе
						мФормаОтчета.П000100560003 = П000100566003 + П000100567003 + П000100568003;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100560004, ОбластьИмя) > 0 Тогда
				
				П000100566004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566004);
				П000100566504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100566504);
				П000100567004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100567004);
				П000100568004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета.П000100568004);
				
				Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду
					= Неопределено Тогда
					// В момент ввода значений не допускается одновременное заполнение строки 5665 и строк 5670, 5680.
					мФормаОтчета.П000100560004 = П000100566004 + П000100566504 + П000100567004 + П000100568004;
				Иначе
					Если Форма.СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду Тогда
						мФормаОтчета.П000100560004 = П000100566004 + П000100566504;
					Иначе
						мФормаОтчета.П000100560004 = П000100566004 + П000100567004 + П000100568004;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	// ПОЯСНЕНИЯ 7
	//
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения7" Тогда
	
		НомПозиции = СтрНайти(ОбластьИмя, "_");
		
		Если ЗначениеЗаполнено(ОбластьИмя) Тогда
			Постфикс = "_" + СтрокаЧГ0(Сред(ОбластьИмя, НомПозиции + 1));
		Иначе
			Постфикс = "_" + СтрокаЧГ0(1);
		КонецЕсли;
		
		Если НомПозиции > 0 Тогда
			ОбластьИмя = Лев(ОбластьИмя, НомПозиции - 1);
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения7" Тогда
			
			мФормаОтчета = Форма.ТабличныйДокумент.Области;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100570007, ОбластьИмя) > 0 Тогда
				
				П100100570003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100570003" + Постфикс].Значение);
				П100100570004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100570004" + Постфикс].Значение);
				П100100570005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100570005" + Постфикс].Значение);
				П100100570006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100570006" + Постфикс].Значение);
				
				мФормаОтчета["П100100570007" + Постфикс].Значение = П100100570003 + П100100570004 + П100100570005 + П100100570006;
				
			КонецЕсли;
			
		Иначе
			
			мФормаОтчета = Форма.СтруктураДанныхПояснения7;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100570007, ОбластьИмя) > 0 Тогда
				
				ЗначениеПоказателя = Неопределено;
				П100100570003 = 0;
				П100100570004 = 0;
				П100100570005 = 0;
				П100100570006 = 0;
				
				Если мФормаОтчета.Свойство("П100100570003" + Постфикс, ЗначениеПоказателя) Тогда
					П100100570003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100570004" + Постфикс, ЗначениеПоказателя) Тогда
					П100100570004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100570005" + Постфикс, ЗначениеПоказателя) Тогда
					П100100570005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100570006" + Постфикс, ЗначениеПоказателя) Тогда
					П100100570006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				мФормаОтчета.Вставить("П100100570007" + Постфикс, П100100570003 + П100100570004 + П100100570005 + П100100570006);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "Пояснения9" Тогда
		РасчетНаСервере_Пояснения9(Форма, ОбластьИмя);
	КонецЕсли;
	
	Если ИмяСтраницыПанели = "" Тогда
		Расчет(Форма, "Баланс",        ОбластьИмя);
		Расчет(Форма, "ОФР",           ОбластьИмя);
		Расчет(Форма, "ОИК",           ОбластьИмя);
		Расчет(Форма, "ОДДС",          ОбластьИмя);
		Расчет(Форма, "ОЦИС",          ОбластьИмя);
		Расчет(Форма, "РасчетАктивов", ОбластьИмя);
		Расчет(Форма, "Пояснения3",    ОбластьИмя);
		Расчет(Форма, "Пояснения5",    ОбластьИмя);
		Расчет(Форма, "Пояснения6",    ОбластьИмя);
		Расчет(Форма, "Пояснения7",    ОбластьИмя);
		Расчет(Форма, "Пояснения9",    ОбластьИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетНаСервере_ОФР(Форма, ОбластьИмя)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
		РазмещениеДанных = Форма.ТабличныйДокумент;
	Иначе
		РазмещениеДанных = Форма.СтруктураДанныхОФР;
	КонецЕсли;
	
	ВключенныеДопСтроки = Форма.СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД;
	
	Для Графа = 4 По 5 Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010021000" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка2110 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010021100" + Графа);
			Строка2120 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010021200" + Графа);
			
			РасчетСтроки2100 = Строка2110 + Строка2120;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010021000" + Графа, РасчетСтроки2100);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010022000" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка2100 = ПоказательОтчета(Форма, РазмещениеДанных, "П00010021000" + Графа);
			Строка2210 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010022100" + Графа);
			Строка2220 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010022200" + Графа);
			
			РасчетСтроки2200 = Строка2100 + Строка2210 + Строка2220;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010022000" + Графа, РасчетСтроки2200);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010023000" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка2200 = ПоказательОтчета(Форма, РазмещениеДанных, "П00010022000" + Графа);
			
			Строка2310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023100" + Графа);
			Строка2320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023200" + Графа);
			Строка2330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023300" + Графа);
			Строка2340 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023400" + Графа);
			Строка2350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023500" + Графа);
			
			РасчетСтроки2300 = Строка2200 + Строка2310 + Строка2320 + Строка2330 + Строка2340 + Строка2350;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010023000" + Графа, РасчетСтроки2300);
			
		КонецЕсли;
		
		Если ЭтоОФР2019(Форма.СтруктураОтчета) Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010024000" + Графа], ОбластьИмя) > 0 Тогда
				
				Строка2300 = ПоказательОтчета(Форма, РазмещениеДанных, "П00010023000" + Графа);
				
				Строка2410 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010024100" + Графа);
				Строка2430 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010024300" + Графа);
				Строка2450 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010024500" + Графа);
				Строка2460 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010024600" + Графа);
				
				РасчетСтроки2400 = Строка2300 + Строка2410 + Строка2430 + Строка2450 + Строка2460;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010024000" + Графа, РасчетСтроки2400);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоОФР2020(Форма.СтруктураОтчета) Тогда
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010024000" + Графа], ОбластьИмя) > 0 Тогда
				
				Строка2300 = ПоказательОтчета(Форма, РазмещениеДанных, "П00010023000" + Графа);
				
				Строка2410 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010024100" + Графа);
				Строка2460 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010024600" + Графа);
				
				РасчетСтроки2400 = Строка2300 + Строка2410 + Строка2460;
				
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010024000" + Графа, РасчетСтроки2400);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010025000" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка2400 = ПоказательОтчета(Форма, РазмещениеДанных, "П00010024000" + Графа);
			
			Строка2510 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010025100" + Графа);
			Строка2520 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010025200" + Графа);
			
			РасчетСтроки2500 = Строка2400 + Строка2510 + Строка2520;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010025000" + Графа, РасчетСтроки2500);
			
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.ПрименениеЕНВД Тогда
			// Определение значений.
			Строка21101 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21101") <> Неопределено Тогда
				Строка21101 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010211010" + Графа);
			КонецЕсли;
			
			Строка21102 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21102") <> Неопределено Тогда
				Строка21102 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010211020" + Графа);
			КонецЕсли;
			
			Строка21201 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21201") <> Неопределено Тогда
				Строка21201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010212010" + Графа);
			КонецЕсли;
			
			Строка21202 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21202") <> Неопределено Тогда
				Строка21202 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010212020" + Графа);
			КонецЕсли;
			
			Строка22101 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22101") <> Неопределено Тогда
				Строка22101 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010221010" + Графа);
			КонецЕсли;
			
			Строка22102 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22102") <> Неопределено Тогда
				Строка22102 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010221020" + Графа);
			КонецЕсли;
			
			Строка22201 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22201") <> Неопределено Тогда
				Строка22201 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010222010" + Графа);
			КонецЕсли;
			
			Строка22202 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22202") <> Неопределено Тогда
				Строка22202 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010222020" + Графа);
			КонецЕсли;
			
			// Расчеты.
			РасчетСтроки21001 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
				РасчетСтроки21001 = Строка21101 + Строка21201;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010210010" + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010210010" + Графа, РасчетСтроки21001);
			КонецЕсли;
			
			РасчетСтроки21002 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
				РасчетСтроки21002 = Строка21102 + Строка21202;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010210020" + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010210020" + Графа, РасчетСтроки21002);
			КонецЕсли;
			
			Строка21001 =0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21001") <> Неопределено Тогда
				Строка21001= ПоказательОтчета(Форма, РазмещениеДанных, "П00010210010" + Графа);
			КонецЕсли;
			
			Строка21002 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока21002") <> Неопределено Тогда
				Строка21002= ПоказательОтчета(Форма, РазмещениеДанных, "П00010210020" + Графа);
			КонецЕсли;
			
			РасчетСтроки22001 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
				РасчетСтроки22001 = Строка21001 + Строка22101 + Строка22201;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010220010" + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010220010" + Графа, РасчетСтроки22001);
			КонецЕсли;
			
			РасчетСтроки22002 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
				РасчетСтроки22002 = Строка21002 + Строка22102 + Строка22202;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010220020" + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010220020" + Графа, РасчетСтроки22002);
			КонецЕсли;
			
			Строка22001 =0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22001") <> Неопределено Тогда
				Строка22001= ПоказательОтчета(Форма, РазмещениеДанных, "П00010220010" + Графа);
			КонецЕсли;
			
			Строка22002 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока22002") <> Неопределено Тогда
				Строка22002= ПоказательОтчета(Форма, РазмещениеДанных, "П00010220020" + Графа);
			КонецЕсли;
			
			РасчетСтроки23001 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока23001") <> Неопределено Тогда
				Строка2310 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023100" + Графа);
				Строка2320 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023200" + Графа);
				Строка2330 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023300" + Графа);
				Строка2340 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023400" + Графа);
				Строка2350 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010023500" + Графа);
				
				РасчетСтроки23001 = Строка22001 + Строка2310 + Строка2320 + Строка2340 + Строка2330 + Строка2350;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010230010" + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010230010" + Графа, РасчетСтроки23001);
			КонецЕсли;
			
			РасчетСтроки23002 = 0;
			Если ВключенныеДопСтроки.Найти("ДопСтрока23002") <> Неопределено Тогда
				РасчетСтроки23002 = Строка22002;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
				Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010230020" + Графа], ОбластьИмя) > 0 Тогда
				УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010230020" + Графа, РасчетСтроки23002);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетНаСервере_ОИК(Форма, ОбластьИмя)
	
	Перем Индекс, ИндексСтр;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК" Тогда
		РазмещениеДанных = Форма.ТабличныйДокумент;
	Иначе
		РазмещениеДанных = Форма.СтруктураДанныхОИК;
	КонецЕсли;
	
	НомПозиции = СтрНайти(ОбластьИмя, "_");
	
	Если ЗначениеЗаполнено(ОбластьИмя) Тогда
		ИндексВИмениОбласти = "_" + СтрокаЧГ0(Сред(ОбластьИмя, НомПозиции + 1));
	Иначе
		ИндексВИмениОбласти = "_" + СтрокаЧГ0(1);
	КонецЕсли;
	
	Если НомПозиции > 0 Тогда
		ОбластьИмя = Лев(ОбластьИмя, НомПозиции - 1);
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК" Тогда
		
		мФормаОтчета = Форма.ТабличныйДокумент.Области;
		
		// Таблица 1
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
			
			П000100310003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310003.Значение);
			П000100310004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310004.Значение);
			П000100310005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310005.Значение);
			П000100310006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310006.Значение);
			П000100310007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310007.Значение);
			
			мФормаОтчета.П000100310008.Значение
			= П000100310003 + П000100310004 + П000100310005 + П000100310006 + П000100310007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
			
			П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321107.Значение);
			
			мФормаОтчета.П000100321108.Значение = П000100321107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
			
			П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321205.Значение);
			П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321207.Значение);
			
			мФормаОтчета.П000100321208.Значение = П000100321205 + П000100321207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
			
			П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321305.Значение);
			П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321307.Значение);
			
			мФормаОтчета.П000100321308.Значение = П000100321305 + П000100321307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
			
			П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321403.Значение);
			П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321404.Значение);
			П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321405.Значение);
			
			мФормаОтчета.П000100321408.Значение = П000100321403 + П000100321404 + П000100321405;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
			
			П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321603.Значение);
			П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321604.Значение);
			П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321605.Значение);
			П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321606.Значение);
			П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321607.Значение);
			
			мФормаОтчета.П000100321608.Значение
			= П000100321603 + П000100321604 + П000100321605 + П000100321606 + П000100321607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100321008, ОбластьИмя) > 0 Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321003" + ИндексВИмениОбласти].Значение);
				П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321004" + ИндексВИмениОбласти].Значение);
				П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321005" + ИндексВИмениОбласти].Значение);
				П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321006" + ИндексВИмениОбласти].Значение);
				П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321007" + ИндексВИмениОбласти].Значение);
				
				мФормаОтчета["П100100321008" + ИндексВИмениОбласти].Значение
				= П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007;
				
			Иначе
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100321003 = 0;
				П100100321004 = 0;
				П100100321005 = 0;
				П100100321006 = 0;
				П100100321007 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100321008_" + ИндексСтр) = Неопределено Цикл
					
					П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100321003_" + ИндексСтр].Значение);
					П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100321004_" + ИндексСтр].Значение);
					П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100321005_" + ИндексСтр].Значение);
					П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100321006_" + ИндексСтр].Значение);
					П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100321007_" + ИндексСтр].Значение);
					
					мФормаОтчета["П100100321008_" + ИндексСтр].Значение
					= П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
			
			П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321403.Значение);
			П000100321503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321503.Значение);
			П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321603.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321003 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100321003_" + ИндексСтр) = Неопределено Цикл
				П100100321003 = П100100321003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321003_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321003.Значение = П000100321403 + П000100321503 + П000100321603 + П100100321003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
			
			П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321404.Значение);
			П000100321504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321504.Значение);
			П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321604.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321004 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100321004_" + ИндексСтр) = Неопределено Цикл
				П100100321004 = П100100321004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321004_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321004.Значение = П000100321404 + П000100321504 + П000100321604 + П100100321004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
			
			П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321205.Значение);
			П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321305.Значение);
			П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321405.Значение);
			П000100321505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321505.Значение);
			П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321605.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321005 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100321005_" + ИндексСтр) = Неопределено Цикл
				П100100321005 = П100100321005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321005_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321005.Значение
			= П000100321205 + П000100321305 + П000100321405 + П000100321505 + П000100321605 + П100100321005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
			
			П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321606.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321006 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100321006_" + ИндексСтр) = Неопределено Цикл
				П100100321006 = П100100321006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321006_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321006.Значение = П000100321606 + П100100321006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
			
			П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321107.Значение);
			П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321207.Значение);
			П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321307.Значение);
			П000100321507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321507.Значение);
			П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321607.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321007 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100321007_" + ИндексСтр) = Неопределено Цикл
				П100100321007 = П100100321007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321007_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321007.Значение
			= П000100321107 + П000100321207 + П000100321307 + П000100321507 + П000100321607 + П100100321007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
			
			П000100321108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321108.Значение);
			П000100321208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321208.Значение);
			П000100321308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321308.Значение);
			П000100321408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321408.Значение);
			П000100321608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321608.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321008 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100321008_" + ИндексСтр) = Неопределено Цикл
				П100100321008 = П100100321008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100321008_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321008.Значение
			= П000100321108 + П000100321208 + П000100321308 + П000100321408 + П000100321608 + П100100321008;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
			
			П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322107.Значение);
			
			мФормаОтчета.П000100322108.Значение = П000100322107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
			
			П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322205.Значение);
			П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322207.Значение);
			
			мФормаОтчета.П000100322208.Значение = П000100322205 + П000100322207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
			
			П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322305.Значение);
			П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322307.Значение);
			
			мФормаОтчета.П000100322308.Значение = П000100322305 + П000100322307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
			
			П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322403.Значение);
			П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322404.Значение);
			П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322405.Значение);
			П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322407.Значение);
			
			мФормаОтчета.П000100322408.Значение = П000100322403 + П000100322404 + П000100322405 + П000100322407;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
			
			П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322503.Значение);
			П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322504.Значение);
			П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322505.Значение);
			П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322507.Значение);
			
			мФормаОтчета.П000100322508.Значение = П000100322503 + П000100322504 + П000100322505 + П000100322507;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
			
			П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322603.Значение);
			П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322604.Значение);
			П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322605.Значение);
			П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322606.Значение);
			П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322607.Значение);
			
			мФормаОтчета.П000100322608.Значение
			= П000100322603 + П000100322604 + П000100322605 + П000100322606 + П000100322607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
			
			П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322707.Значение);
			
			мФормаОтчета.П000100322708.Значение = П000100322707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
			
			П000100322003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322003.Значение);
			П000100322004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322004.Значение);
			П000100322005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322005.Значение);
			П000100322006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322006.Значение);
			П000100322007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322007.Значение);
			
			мФормаОтчета.П000100322008.Значение
			= П000100322003 + П000100322004 + П000100322005 + П000100322006 + П000100322007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
			
			П000100324006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100324006.Значение);
			
			мФормаОтчета.П000100324007.Значение = -П000100324006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
			
			П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322403.Значение);
			П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322503.Значение);
			П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322603.Значение);
			
			мФормаОтчета.П000100322003.Значение = П000100322403 + П000100322503 + П000100322603;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
			
			П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322404.Значение);
			П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322504.Значение);
			П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322604.Значение);
			
			мФормаОтчета.П000100322004.Значение = П000100322404 + П000100322504 + П000100322604;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
			
			П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322205.Значение);
			П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322305.Значение);
			П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322405.Значение);
			П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322505.Значение);
			П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322605.Значение);
			
			мФормаОтчета.П000100322005.Значение
			= П000100322205 + П000100322305 + П000100322405 + П000100322505 + П000100322605;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
			
			П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322606.Значение);
			
			мФормаОтчета.П000100322006.Значение = П000100322606;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
			
			П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322107.Значение);
			П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322207.Значение);
			П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322307.Значение);
			П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322407.Значение);
			П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322507.Значение);
			П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322607.Значение);
			П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322707.Значение);
			
			мФормаОтчета.П000100322007.Значение
			= П000100322107 + П000100322207 + П000100322307 + П000100322407 + П000100322507 + П000100322607 + П000100322707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
			
			П000100322108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322108.Значение);
			П000100322208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322208.Значение);
			П000100322308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322308.Значение);
			П000100322408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322408.Значение);
			П000100322508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322508.Значение);
			П000100322608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322608.Значение);
			П000100322708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322708.Значение);
			
			мФормаОтчета.П000100322008.Значение
			= П000100322108 + П000100322208 + П000100322308 + П000100322408 + П000100322508 + П000100322608 + П000100322708;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
			
			П000100320003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320003.Значение);
			П000100320004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320004.Значение);
			П000100320005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320005.Значение);
			П000100320006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320006.Значение);
			П000100320007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320007.Значение);
			
			мФормаОтчета.П000100320008.Значение
			= П000100320003 + П000100320004 + П000100320005 + П000100320006 + П000100320007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
			
			П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331107.Значение);
			
			мФормаОтчета.П000100331108.Значение = П000100331107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
			
			П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331205.Значение);
			П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331207.Значение);
			
			мФормаОтчета.П000100331208.Значение = П000100331205 + П000100331207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
			
			П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331305.Значение);
			П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331307.Значение);
			
			мФормаОтчета.П000100331308.Значение = П000100331305 + П000100331307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
			
			П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331403.Значение);
			П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331404.Значение);
			П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331405.Значение);
			
			мФормаОтчета.П000100331408.Значение = П000100331403 + П000100331404 + П000100331405;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
			
			П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331603.Значение);
			П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331604.Значение);
			П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331605.Значение);
			П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331606.Значение);
			П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331607.Значение);
			
			мФормаОтчета.П000100331608.Значение
			= П000100331603 + П000100331604 + П000100331605 + П000100331606 + П000100331607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100331008, ОбластьИмя) > 0 Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331003" + ИндексВИмениОбласти].Значение);
				П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331004" + ИндексВИмениОбласти].Значение);
				П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331005" + ИндексВИмениОбласти].Значение);
				П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331006" + ИндексВИмениОбласти].Значение);
				П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331007" + ИндексВИмениОбласти].Значение);
				
				мФормаОтчета["П100100331008" + ИндексВИмениОбласти].Значение
				= П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007;
				
			Иначе
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				П100100331003 = 0;
				П100100331004 = 0;
				П100100331005 = 0;
				П100100331006 = 0;
				П100100331007 = 0;
				
				Пока НЕ мФормаОтчета.Найти("П100100331008_" + ИндексСтр) = Неопределено Цикл
					
					П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100331003_" + ИндексСтр].Значение);
					П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100331004_" + ИндексСтр].Значение);
					П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100331005_" + ИндексСтр].Значение);
					П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100331006_" + ИндексСтр].Значение);
					П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, мФормаОтчета["П100100331007_" + ИндексСтр].Значение);
					
					мФормаОтчета["П100100331008_" + ИндексСтр].Значение
					= П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007;
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
			
			П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331403.Значение);
			П000100331503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331503.Значение);
			П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331603.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331003 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100331003_" + ИндексСтр) = Неопределено Цикл
				П100100331003 = П100100331003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331003_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331003.Значение = П000100331403 + П000100331503 + П000100331603 + П100100331003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
			
			П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331404.Значение);
			П000100331504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331504.Значение);
			П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331604.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331004 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100331004_" + ИндексСтр) = Неопределено Цикл
				П100100331004 = П100100331004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331004_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331004.Значение = П000100331404 + П000100331504 + П000100331604 + П100100331004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
			
			П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331205.Значение);
			П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331305.Значение);
			П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331405.Значение);
			П000100331505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331505.Значение);
			П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331605.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331005 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100331005_" + ИндексСтр) = Неопределено Цикл
				П100100331005 = П100100331005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331005_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331005.Значение
			= П000100331205 + П000100331305 + П000100331405 + П000100331505 + П000100331605 + П100100331005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
			
			П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331606.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331006 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100331006_" + ИндексСтр) = Неопределено Цикл
				П100100331006 = П100100331006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331006_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331006.Значение = П000100331606 + П100100331006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
			
			П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331107.Значение);
			П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331207.Значение);
			П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331307.Значение);
			П000100331507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331507.Значение);
			П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331607.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331007 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100331007_" + ИндексСтр) = Неопределено Цикл
				П100100331007 = П100100331007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331007_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331007.Значение
			= П000100331107 + П000100331207 + П000100331307 + П000100331507 + П000100331607 + П100100331007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
			
			П000100331108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331108.Значение);
			П000100331208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331208.Значение);
			П000100331308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331308.Значение);
			П000100331408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331408.Значение);
			П000100331608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331608.Значение);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331008 = 0;
			
			Пока НЕ мФормаОтчета.Найти("П100100331008_" + ИндексСтр) = Неопределено Цикл
				П100100331008 = П100100331008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, мФормаОтчета["П100100331008_" + ИндексСтр].Значение);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331008.Значение
			= П000100331108 + П000100331208 + П000100331308 + П000100331408 + П000100331608 + П100100331008;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
			
			П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332107.Значение);
			
			мФормаОтчета.П000100332108.Значение = П000100332107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
			
			П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332205.Значение);
			П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332207.Значение);
			
			мФормаОтчета.П000100332208.Значение = П000100332205 + П000100332207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
			
			П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332305.Значение);
			П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332307.Значение);
			
			мФормаОтчета.П000100332308.Значение = П000100332305 + П000100332307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
			
			П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332403.Значение);
			П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332404.Значение);
			П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332405.Значение);
			П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332407.Значение);
			
			мФормаОтчета.П000100332408.Значение = П000100332403 + П000100332404 + П000100332405 + П000100332407;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
			
			П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332503.Значение);
			П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332504.Значение);
			П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332505.Значение);
			П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332507.Значение);
			
			мФормаОтчета.П000100332508.Значение = П000100332503 + П000100332504 + П000100332505 + П000100332507;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
			
			П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332603.Значение);
			П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332604.Значение);
			П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332605.Значение);
			П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332606.Значение);
			П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332607.Значение);
			
			мФормаОтчета.П000100332608.Значение
			= П000100332603 + П000100332604 + П000100332605 + П000100332606 + П000100332607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
			
			П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332707.Значение);
			
			мФормаОтчета.П000100332708.Значение = П000100332707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
			
			П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332403.Значение);
			П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332503.Значение);
			П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332603.Значение);
			
			мФормаОтчета.П000100332003.Значение = П000100332403 + П000100332503 + П000100332603;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
			
			П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332404.Значение);
			П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332504.Значение);
			П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332604.Значение);
			
			мФормаОтчета.П000100332004.Значение = П000100332404 + П000100332504 + П000100332604;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
			
			П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332205.Значение);
			П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332305.Значение);
			П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332405.Значение);
			П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332505.Значение);
			П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332605.Значение);
			
			мФормаОтчета.П000100332005.Значение
			= П000100332205 + П000100332305 + П000100332405 + П000100332505 + П000100332605;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
			
			П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332606.Значение);
			
			мФормаОтчета.П000100332006.Значение = П000100332606;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
			
			П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332107.Значение);
			П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332207.Значение);
			П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332307.Значение);
			П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332407.Значение);
			П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332507.Значение);
			П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332607.Значение);
			П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332707.Значение);
			
			мФормаОтчета.П000100332007.Значение
			= П000100332107 + П000100332207 + П000100332307 + П000100332407 + П000100332507 + П000100332607 + П000100332707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
			
			П000100332108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332108.Значение);
			П000100332208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332208.Значение);
			П000100332308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332308.Значение);
			П000100332408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332408.Значение);
			П000100332508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332508.Значение);
			П000100332608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332608.Значение);
			П000100332708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332708.Значение);
			
			мФормаОтчета.П000100332008.Значение
			= П000100332108 + П000100332208 + П000100332308 + П000100332408 + П000100332508 + П000100332608 + П000100332708;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
			
			П000100334006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100334006.Значение);
			
			мФормаОтчета.П000100334007.Значение = -П000100334006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
			
			П000100330003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330003.Значение);
			П000100330004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330004.Значение);
			П000100330005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330005.Значение);
			П000100330006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330006.Значение);
			П000100330007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330007.Значение);
			
			мФормаОтчета.П000100330008.Значение
			= П000100330003 + П000100330004 + П000100330005 + П000100330006 + П000100330007;
			
		КонецЕсли;
		
		// Таблица 2
		//
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
			
			П000100340106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340106.Значение);
			П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340103.Значение);
			П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340104.Значение);
			
			мФормаОтчета.П000100340105.Значение = П000100340106 - П000100340103 - П000100340104;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
			
			П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341103.Значение);
			П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341104.Значение);
			П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341105.Значение);
			
			мФормаОтчета.П000100341106.Значение = П000100341103 + П000100341104 + П000100341105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
			
			П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342103.Значение);
			П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342104.Значение);
			П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342105.Значение);
			
			мФормаОтчета.П000100342106.Значение = П000100342103 + П000100342104 + П000100342105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
			
			П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340103.Значение);
			П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341103.Значение);
			П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342103.Значение);
			
			мФормаОтчета.П000100350103.Значение = П000100340103 + П000100341103 + П000100342103;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
			
			П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340104.Значение);
			П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341104.Значение);
			П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342104.Значение);
			
			мФормаОтчета.П000100350104.Значение = П000100340104 + П000100341104 + П000100342104;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
			
			П000100340105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340105.Значение);
			П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341105.Значение);
			П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342105.Значение);
			
			мФормаОтчета.П000100350105.Значение = П000100340105 + П000100341105 + П000100342105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
			
			П000100350103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350103.Значение);
			П000100350104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350104.Значение);
			П000100350105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350105.Значение);
			
			мФормаОтчета.П000100350106.Значение = П000100350103 + П000100350104 + П000100350105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340206, ОбластьИмя) > 0 Тогда
			
			П000100340203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340203.Значение);
			П000100340204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340204.Значение);
			П000100340205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340205.Значение);
			
			мФормаОтчета.П000100340206.Значение = П000100340203 + П000100340204 + П000100340205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341206, ОбластьИмя) > 0 Тогда
			
			П000100341203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341203.Значение);
			П000100341204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341204.Значение);
			П000100341205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341205.Значение);
			
			мФормаОтчета.П000100341206.Значение = П000100341203 + П000100341204 + П000100341205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342206, ОбластьИмя) > 0 Тогда
			
			П000100342203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342203.Значение);
			П000100342204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342204.Значение);
			П000100342205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342205.Значение);
			
			мФормаОтчета.П000100342206.Значение = П000100342203 + П000100342204 + П000100342205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350203, ОбластьИмя) > 0 Тогда
			
			П000100340203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340203.Значение);
			П000100341203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341203.Значение);
			П000100342203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342203.Значение);
			
			мФормаОтчета.П000100350203.Значение = П000100340203 + П000100341203 + П000100342203;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350204, ОбластьИмя) > 0 Тогда
			
			П000100340204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340204.Значение);
			П000100341204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341204.Значение);
			П000100342204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342204.Значение);
			
			мФормаОтчета.П000100350204.Значение = П000100340204 + П000100341204 + П000100342204;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350205, ОбластьИмя) > 0 Тогда
			
			П000100340205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340205.Значение);
			П000100341205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341205.Значение);
			П000100342205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342205.Значение);
			
			мФормаОтчета.П000100350205.Значение = П000100340205 + П000100341205 + П000100342205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350206, ОбластьИмя) > 0 Тогда
			
			П000100350203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350203.Значение);
			П000100350204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350204.Значение);
			П000100350205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350205.Значение);
			
			мФормаОтчета.П000100350206.Значение = П000100350203 + П000100350204 + П000100350205;
			
		КонецЕсли;
		
		// заглавный блок
		// значения в суммируемых показателях уже прошли стадию округления, если это было необходимо
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
			
			П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341103.Значение);
			П000100341003 = П000100341003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341203.Значение);
			
			мФормаОтчета.П000100341003.Значение = П000100341003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
			
			П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341104.Значение);
			П000100341004 = П000100341004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341204.Значение);
			
			мФормаОтчета.П000100341004.Значение = П000100341004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
			
			П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341105.Значение);
			П000100341005 = П000100341005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341205.Значение);
			
			мФормаОтчета.П000100341005.Значение = П000100341005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
			
			П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342103.Значение);
			П000100342003 = П000100342003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342203.Значение);
			
			мФормаОтчета.П000100342003.Значение = П000100342003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
			
			П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342104.Значение);
			П000100342004 = П000100342004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342204.Значение);
			
			мФормаОтчета.П000100342004.Значение = П000100342004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
			
			П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342105.Значение);
			П000100342005 = П000100342005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342205.Значение);
			
			мФормаОтчета.П000100342005.Значение = П000100342005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
			
			П000100340006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340006.Значение);
			П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340003.Значение);
			П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340004.Значение);
			
			мФормаОтчета.П000100340005.Значение = П000100340006 - П000100340003 - П000100340004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
			
			П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341003.Значение);
			П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341004.Значение);
			П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341005.Значение);
			
			мФормаОтчета.П000100341006.Значение = П000100341003 + П000100341004 + П000100341005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
			
			П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342003.Значение);
			П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342004.Значение);
			П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342005.Значение);
			
			мФормаОтчета.П000100342006.Значение = П000100342003 + П000100342004 + П000100342005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
			
			П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340003.Значение);
			П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341003.Значение);
			П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342003.Значение);
			
			мФормаОтчета.П000100350003.Значение = П000100340003 + П000100341003 + П000100342003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
			
			П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340004.Значение);
			П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341004.Значение);
			П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342004.Значение);
			
			мФормаОтчета.П000100350004.Значение = П000100340004 + П000100341004 + П000100342004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
			
			П000100340005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340005.Значение);
			П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341005.Значение);
			П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342005.Значение);
			
			мФормаОтчета.П000100350005.Значение = П000100340005 + П000100341005 + П000100342005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
			
			П000100350003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350003.Значение);
			П000100350004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350004.Значение);
			П000100350005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350005.Значение);
			
			мФормаОтчета.П000100350006.Значение = П000100350003 + П000100350004 + П000100350005;
			
		КонецЕсли;
		
		Если ИСТИНА Тогда
			
			мФормаОтчета.П000100360003.Значение = ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110300004"),
			Форма.СтруктураДанныхРасчетАктивов.П000110300004, 0);
			мФормаОтчета.П000100360004.Значение = ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110300005"),
			Форма.СтруктураДанныхРасчетАктивов.П000110300005, 0);
			мФормаОтчета.П000100360005.Значение = ?(Форма.СтруктураДанныхРасчетАктивов.Свойство("П000110300006"),
			Форма.СтруктураДанныхРасчетАктивов.П000110300006, 0);
			
		КонецЕсли;
		
	Иначе
		
		мФормаОтчета = Форма.СтруктураДанныхОИК;
		
		// Таблица 1
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100310008, ОбластьИмя) > 0 Тогда
			
			П000100310003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310003);
			П000100310004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310004);
			П000100310005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310005);
			П000100310006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310006);
			П000100310007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100310007);
			
			мФормаОтчета.П000100310008 = П000100310003 + П000100310004 + П000100310005 + П000100310006 + П000100310007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321108, ОбластьИмя) > 0 Тогда
			
			П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321107);
			
			мФормаОтчета.П000100321108 = П000100321107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321208, ОбластьИмя) > 0 Тогда
			
			П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321205);
			П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321207);
			
			мФормаОтчета.П000100321208 = П000100321205 + П000100321207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321308, ОбластьИмя) > 0 Тогда
			
			П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321305);
			П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321307);
			
			мФормаОтчета.П000100321308 = П000100321305 + П000100321307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321408, ОбластьИмя) > 0 Тогда
			
			П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321403);
			П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321404);
			П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321405);
			
			мФормаОтчета.П000100321408 = П000100321403 + П000100321404 + П000100321405;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321608, ОбластьИмя) > 0 Тогда
			
			П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321603);
			П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321604);
			П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321605);
			П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321606);
			П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321607);
			
			мФормаОтчета.П000100321608 = П000100321603 + П000100321604 + П000100321605 + П000100321606 + П000100321607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100321008, ОбластьИмя) > 0 Тогда
			
			ЗначениеПоказателя = Неопределено;
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				П100100321003 = 0;
				П100100321004 = 0;
				П100100321005 = 0;
				П100100321006 = 0;
				П100100321007 = 0;
				
				Если мФормаОтчета.Свойство("П100100321003" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100321004" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100321005" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100321006" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100321007" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				мФормаОтчета.Вставить("П100100321008" + ИндексВИмениОбласти,
				П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
				
			Иначе
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				
				Пока мФормаОтчета.Свойство("П100100321003_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100321004_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100321005_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100321006_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100321007_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100321008_" + ИндексСтр) Цикл
					
					П100100321003 = 0;
					П100100321004 = 0;
					П100100321005 = 0;
					П100100321006 = 0;
					П100100321007 = 0;
					
					Если мФормаОтчета.Свойство("П100100321003_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100321003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321004_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100321004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321005_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100321005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321006_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100321006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100321007_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100321007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					мФормаОтчета.Вставить("П100100321008_" + ИндексСтр,
					П100100321003 + П100100321004 + П100100321005 + П100100321006 + П100100321007);
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321003, ОбластьИмя) > 0 Тогда
			
			П000100321403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321403);
			П000100321503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321503);
			П000100321603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321603);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321003  = 0;
			П100100321003_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100321003_" + ИндексСтр, П100100321003_) Цикл
				П100100321003 = П100100321003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100321003_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321003 = П000100321403 + П000100321503 + П000100321603 + П100100321003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321004, ОбластьИмя) > 0 Тогда
			
			П000100321404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321404);
			П000100321504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321504);
			П000100321604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321604);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321004  = 0;
			П100100321004_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100321004_" + ИндексСтр, П100100321004_) Цикл
				П100100321004 = П100100321004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100321004_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321004 = П000100321404 + П000100321504 + П000100321604 + П100100321004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321005, ОбластьИмя) > 0 Тогда
			
			П000100321205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321205);
			П000100321305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321305);
			П000100321405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321405);
			П000100321505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321505);
			П000100321605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321605);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321005  = 0;
			П100100321005_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100321005_" + ИндексСтр, П100100321005_) Цикл
				П100100321005 = П100100321005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100321005_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321005
			= П000100321205 + П000100321305 + П000100321405 + П000100321505 + П000100321605 + П100100321005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321006, ОбластьИмя) > 0 Тогда
			
			П000100321606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321606);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321006  = 0;
			П100100321006_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100321006_" + ИндексСтр, П100100321006_) Цикл
				П100100321006 = П100100321006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100321006_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321006 = П000100321606 + П100100321006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321007, ОбластьИмя) > 0 Тогда
			
			П000100321107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321107);
			П000100321207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321207);
			П000100321307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321307);
			П000100321507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321507);
			П000100321607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321607);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321007  = 0;
			П100100321007_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100321007_" + ИндексСтр, П100100321007_) Цикл
				П100100321007 = П100100321007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100321007_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321007
			= П000100321107 + П000100321207 + П000100321307 + П000100321507 + П000100321607 + П100100321007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100321008, ОбластьИмя) > 0 Тогда
			
			П000100321108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321108);
			П000100321208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321208);
			П000100321308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321308);
			П000100321408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321408);
			П000100321608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100321608);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100321008  = 0;
			П100100321008_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100321008_" + ИндексСтр, П100100321008_) Цикл
				П100100321008 = П100100321008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100321008_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100321008
			= П000100321108 + П000100321208 + П000100321308 + П000100321408 + П000100321608 + П100100321008;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322108, ОбластьИмя) > 0 Тогда
			
			П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322107);
			
			мФормаОтчета.П000100322108 = П000100322107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322208, ОбластьИмя) > 0 Тогда
			
			П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322205);
			П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322207);
			
			мФормаОтчета.П000100322208 = П000100322205 + П000100322207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322308, ОбластьИмя) > 0 Тогда
			
			П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322305);
			П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322307);
			
			мФормаОтчета.П000100322308 = П000100322305 + П000100322307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322408, ОбластьИмя) > 0 Тогда
			
			П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322403);
			П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322404);
			П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322405);
			П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322407);
			
			мФормаОтчета.П000100322408 = П000100322403 + П000100322404 + П000100322405 + П000100322407;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322508, ОбластьИмя) > 0 Тогда
			
			П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322503);
			П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322504);
			П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322505);
			П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322507);
			
			мФормаОтчета.П000100322508 = П000100322503 + П000100322504 + П000100322505 + П000100322507;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322608, ОбластьИмя) > 0 Тогда
			
			П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322603);
			П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322604);
			П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322605);
			П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322606);
			П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322607);
			
			мФормаОтчета.П000100322608 = П000100322603 + П000100322604 + П000100322605 + П000100322606 + П000100322607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322708, ОбластьИмя) > 0 Тогда
			
			П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322707);
			
			мФормаОтчета.П000100322708 = П000100322707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
			
			П000100322003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322003);
			П000100322004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322004);
			П000100322005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322005);
			П000100322006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322006);
			П000100322007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322007);
			
			мФормаОтчета.П000100322008 = П000100322003 + П000100322004 + П000100322005 + П000100322006 + П000100322007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100324007, ОбластьИмя) > 0 Тогда
			
			П000100324006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100324006);
			
			мФормаОтчета.П000100324007 = -П000100324006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322003, ОбластьИмя) > 0 Тогда
			
			П000100322403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322403);
			П000100322503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322503);
			П000100322603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322603);
			
			мФормаОтчета.П000100322003 = П000100322403 + П000100322503 + П000100322603;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322004, ОбластьИмя) > 0 Тогда
			
			П000100322404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322404);
			П000100322504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322504);
			П000100322604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322604);
			
			мФормаОтчета.П000100322004 = П000100322404 + П000100322504 + П000100322604;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322005, ОбластьИмя) > 0 Тогда
			
			П000100322205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322205);
			П000100322305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322305);
			П000100322405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322405);
			П000100322505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322505);
			П000100322605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322605);
			
			мФормаОтчета.П000100322005 = П000100322205 + П000100322305 + П000100322405 + П000100322505 + П000100322605;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322006, ОбластьИмя) > 0 Тогда
			
			П000100322606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322606);
			
			мФормаОтчета.П000100322006 = П000100322606;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322007, ОбластьИмя) > 0 Тогда
			
			П000100322107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322107);
			П000100322207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322207);
			П000100322307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322307);
			П000100322407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322407);
			П000100322507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322507);
			П000100322607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322607);
			П000100322707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322707);
			
			мФормаОтчета.П000100322007
			= П000100322107 + П000100322207 + П000100322307 + П000100322407 + П000100322507 + П000100322607 + П000100322707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100322008, ОбластьИмя) > 0 Тогда
			
			П000100322108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322108);
			П000100322208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322208);
			П000100322308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322308);
			П000100322408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322408);
			П000100322508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322508);
			П000100322608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322608);
			П000100322708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100322708);
			
			мФормаОтчета.П000100322008
			= П000100322108 + П000100322208 + П000100322308 + П000100322408 + П000100322508 + П000100322608 + П000100322708;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100320008, ОбластьИмя) > 0 Тогда
			
			П000100320003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320003);
			П000100320004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320004);
			П000100320005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320005);
			П000100320006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320006);
			П000100320007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100320007);
			
			мФормаОтчета.П000100320008 = П000100320003 + П000100320004 + П000100320005 + П000100320006 + П000100320007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331108, ОбластьИмя) > 0 Тогда
			
			П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331107);
			
			мФормаОтчета.П000100331108 = П000100331107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331208, ОбластьИмя) > 0 Тогда
			
			П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331205);
			П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331207);
			
			мФормаОтчета.П000100331208 = П000100331205 + П000100331207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331308, ОбластьИмя) > 0 Тогда
			
			П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331305);
			П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331307);
			
			мФормаОтчета.П000100331308 = П000100331305 + П000100331307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331408, ОбластьИмя) > 0 Тогда
			
			П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331403);
			П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331404);
			П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331405);
			
			мФормаОтчета.П000100331408 = П000100331403 + П000100331404 + П000100331405;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331608, ОбластьИмя) > 0 Тогда
			
			П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331603);
			П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331604);
			П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331605);
			П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331606);
			П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331607);
			
			мФормаОтчета.П000100331608 = П000100331603 + П000100331604 + П000100331605 + П000100331606 + П000100331607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П100100331008, ОбластьИмя) > 0 Тогда
			
			ЗначениеПоказателя = Неопределено;
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				П100100331003 = 0;
				П100100331004 = 0;
				П100100331005 = 0;
				П100100331006 = 0;
				П100100331007 = 0;
				
				Если мФормаОтчета.Свойство("П100100331003" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100331004" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100331005" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100331006" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				Если мФормаОтчета.Свойство("П100100331007" + ИндексВИмениОбласти, ЗначениеПоказателя) Тогда
					П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
					Форма, ЗначениеПоказателя);
				КонецЕсли;
				
				мФормаОтчета.Вставить("П100100331008" + ИндексВИмениОбласти,
				П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
				
			Иначе
				
				РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
				
				Пока мФормаОтчета.Свойство("П100100331003_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100331004_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100331005_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100331006_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100331007_" + ИндексСтр)
					ИЛИ мФормаОтчета.Свойство("П100100331008_" + ИндексСтр) Цикл
					
					П100100331003 = 0;
					П100100331004 = 0;
					П100100331005 = 0;
					П100100331006 = 0;
					П100100331007 = 0;
					
					Если мФормаОтчета.Свойство("П100100331003_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100331003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331004_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100331004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331005_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100331005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331006_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100331006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					Если мФормаОтчета.Свойство("П100100331007_" + ИндексСтр, ЗначениеПоказателя) Тогда
						П100100331007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
						Форма, ЗначениеПоказателя);
					КонецЕсли;
					
					мФормаОтчета.Вставить("П100100331008_" + ИндексСтр,
					П100100331003 + П100100331004 + П100100331005 + П100100331006 + П100100331007);
					
					РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331003, ОбластьИмя) > 0 Тогда
			
			П000100331403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331403);
			П000100331503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331503);
			П000100331603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331603);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331003  = 0;
			П100100331003_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100331003_" + ИндексСтр, П100100331003_) Цикл
				П100100331003 = П100100331003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100331003_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331003 = П000100331403 + П000100331503 + П000100331603 + П100100331003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331004, ОбластьИмя) > 0 Тогда
			
			П000100331404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331404);
			П000100331504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331504);
			П000100331604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331604);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331004  = 0;
			П100100331004_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100331004_" + ИндексСтр, П100100331004_) Цикл
				П100100331004 = П100100331004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100331004_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331004 = П000100331404 + П000100331504 + П000100331604 + П100100331004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331005, ОбластьИмя) > 0 Тогда
			
			П000100331205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331205);
			П000100331305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331305);
			П000100331405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331405);
			П000100331505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331505);
			П000100331605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331605);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331005  = 0;
			П100100331005_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100331005_" + ИндексСтр, П100100331005_) Цикл
				П100100331005 = П100100331005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100331005_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331005
			= П000100331205 + П000100331305 + П000100331405 + П000100331505 + П000100331605 + П100100331005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331006, ОбластьИмя) > 0 Тогда
			
			П000100331606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331606);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331006  = 0;
			П100100331006_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100331006_" + ИндексСтр, П100100331006_) Цикл
				П100100331006 = П100100331006 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100331006_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331006 = П000100331606 + П100100331006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331007, ОбластьИмя) > 0 Тогда
			
			П000100331107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331107);
			П000100331207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331207);
			П000100331307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331307);
			П000100331507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331507);
			П000100331607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331607);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331007  = 0;
			П100100331007_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100331007_" + ИндексСтр, П100100331007_) Цикл
				П100100331007 = П100100331007 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100331007_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331007
			= П000100331107 + П000100331207 + П000100331307 + П000100331507 + П000100331607 + П100100331007;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100331008, ОбластьИмя) > 0 Тогда
			
			П000100331108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331108);
			П000100331208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331208);
			П000100331308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331308);
			П000100331408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331408);
			П000100331608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100331608);
			
			РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
			П100100331008  = 0;
			П100100331008_ = 0;
			
			Пока мФормаОтчета.Свойство("П100100331008_" + ИндексСтр, П100100331008_) Цикл
				П100100331008 = П100100331008 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
				Форма, П100100331008_);
				РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
			КонецЦикла;
			
			мФормаОтчета.П000100331008
			= П000100331108 + П000100331208 + П000100331308 + П000100331408 + П000100331608 + П100100331008;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332108, ОбластьИмя) > 0 Тогда
			
			П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332107);
			
			мФормаОтчета.П000100332108 = П000100332107;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332208, ОбластьИмя) > 0 Тогда
			
			П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332205);
			П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332207);
			
			мФормаОтчета.П000100332208 = П000100332205 + П000100332207;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332308, ОбластьИмя) > 0 Тогда
			
			П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332305);
			П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332307);
			
			мФормаОтчета.П000100332308 = П000100332305 + П000100332307;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332408, ОбластьИмя) > 0 Тогда
			
			П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332403);
			П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332404);
			П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332405);
			П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332407);
			
			мФормаОтчета.П000100332408 = П000100332403 + П000100332404 + П000100332405 + П000100332407;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332508, ОбластьИмя) > 0 Тогда
			
			П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332503);
			П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332504);
			П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332505);
			П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332507);
			
			мФормаОтчета.П000100332508 = П000100332503 + П000100332504 + П000100332505 + П000100332507;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332608, ОбластьИмя) > 0 Тогда
			
			П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332603);
			П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332604);
			П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332605);
			П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332606);
			П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332607);
			
			мФормаОтчета.П000100332608 = П000100332603 + П000100332604 + П000100332605 + П000100332606 + П000100332607;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332708, ОбластьИмя) > 0 Тогда
			
			П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332707);
			
			мФормаОтчета.П000100332708 = П000100332707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332003, ОбластьИмя) > 0 Тогда
			
			П000100332403 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332403);
			П000100332503 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332503);
			П000100332603 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332603);
			
			мФормаОтчета.П000100332003 = П000100332403 + П000100332503 + П000100332603;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332004, ОбластьИмя) > 0 Тогда
			
			П000100332404 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332404);
			П000100332504 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332504);
			П000100332604 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332604);
			
			мФормаОтчета.П000100332004 = П000100332404 + П000100332504 + П000100332604;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332005, ОбластьИмя) > 0 Тогда
			
			П000100332205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332205);
			П000100332305 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332305);
			П000100332405 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332405);
			П000100332505 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332505);
			П000100332605 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332605);
			
			мФормаОтчета.П000100332005 = П000100332205 + П000100332305 + П000100332405 + П000100332505 + П000100332605;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332006, ОбластьИмя) > 0 Тогда
			
			П000100332606 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332606);
			
			мФормаОтчета.П000100332006 = П000100332606;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332007, ОбластьИмя) > 0 Тогда
			
			П000100332107 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332107);
			П000100332207 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332207);
			П000100332307 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332307);
			П000100332407 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332407);
			П000100332507 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332507);
			П000100332607 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332607);
			П000100332707 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332707);
			
			мФормаОтчета.П000100332007
			= П000100332107 + П000100332207 + П000100332307 + П000100332407 + П000100332507 + П000100332607 + П000100332707;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100332008, ОбластьИмя) > 0 Тогда
			
			П000100332108 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332108);
			П000100332208 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332208);
			П000100332308 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332308);
			П000100332408 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332408);
			П000100332508 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332508);
			П000100332608 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332608);
			П000100332708 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100332708);
			
			мФормаОтчета.П000100332008
			= П000100332108 + П000100332208 + П000100332308 + П000100332408 + П000100332508 + П000100332608 + П000100332708;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100334007, ОбластьИмя) > 0 Тогда
			
			П000100334006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100334006);
			
			мФормаОтчета.П000100334007 = -П000100334006;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100330008, ОбластьИмя) > 0 Тогда
			
			П000100330003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330003);
			П000100330004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330004);
			П000100330005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330005);
			П000100330006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330006);
			П000100330007 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100330007);
			
			мФормаОтчета.П000100330008 = П000100330003 + П000100330004 + П000100330005 + П000100330006 + П000100330007;
			
		КонецЕсли;
		
		// Таблица 2
		//
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340105, ОбластьИмя) > 0 Тогда
			
			П000100340106 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340106);
			П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340103);
			П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340104);
			
			мФормаОтчета.П000100340105 = П000100340106 - П000100340103 - П000100340104;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341106, ОбластьИмя) > 0 Тогда
			
			П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341103);
			П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341104);
			П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341105);
			
			мФормаОтчета.П000100341106 = П000100341103 + П000100341104 + П000100341105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342106, ОбластьИмя) > 0 Тогда
			
			П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342103);
			П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342104);
			П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342105);
			
			мФормаОтчета.П000100342106 = П000100342103 + П000100342104 + П000100342105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350103, ОбластьИмя) > 0 Тогда
			
			П000100340103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340103);
			П000100341103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341103);
			П000100342103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342103);
			
			мФормаОтчета.П000100350103 = П000100340103 + П000100341103 + П000100342103;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350104, ОбластьИмя) > 0 Тогда
			
			П000100340104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340104);
			П000100341104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341104);
			П000100342104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342104);
			
			мФормаОтчета.П000100350104 = П000100340104 + П000100341104 + П000100342104;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350105, ОбластьИмя) > 0 Тогда
			
			П000100340105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340105);
			П000100341105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341105);
			П000100342105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342105);
			
			мФормаОтчета.П000100350105 = П000100340105 + П000100341105 + П000100342105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350106, ОбластьИмя) > 0 Тогда
			
			П000100350103 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350103);
			П000100350104 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350104);
			П000100350105 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350105);
			
			мФормаОтчета.П000100350106 = П000100350103 + П000100350104 + П000100350105;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340206, ОбластьИмя) > 0 Тогда
			
			П000100340203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340203);
			П000100340204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340204);
			П000100340205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340205);
			
			мФормаОтчета.П000100340206 = П000100340203 + П000100340204 + П000100340205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341206, ОбластьИмя) > 0 Тогда
			
			П000100341203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341203);
			П000100341204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341204);
			П000100341205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341205);
			
			мФормаОтчета.П000100341206 = П000100341203 + П000100341204 + П000100341205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342206, ОбластьИмя) > 0 Тогда
			
			П000100342203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342203);
			П000100342204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342204);
			П000100342205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342205);
			
			мФормаОтчета.П000100342206 = П000100342203 + П000100342204 + П000100342205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350203, ОбластьИмя) > 0 Тогда
			
			П000100340203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340203);
			П000100341203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341203);
			П000100342203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342203);
			
			мФормаОтчета.П000100350203 = П000100340203 + П000100341203 + П000100342203;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350204, ОбластьИмя) > 0 Тогда
			
			П000100340204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340204);
			П000100341204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341204);
			П000100342204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342204);
			
			мФормаОтчета.П000100350204 = П000100340204 + П000100341204 + П000100342204;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350205, ОбластьИмя) > 0 Тогда
			
			П000100340205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340205);
			П000100341205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341205);
			П000100342205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342205);
			
			мФормаОтчета.П000100350205 = П000100340205 + П000100341205 + П000100342205;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350206, ОбластьИмя) > 0 Тогда
			
			П000100350203 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350203);
			П000100350204 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350204);
			П000100350205 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350205);
			
			мФормаОтчета.П000100350206 = П000100350203 + П000100350204 + П000100350205;
			
		КонецЕсли;
		
		// заглавный блок
		// значения в суммируемых показателях уже прошли стадию округления, если это было необходимо
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341003, ОбластьИмя) > 0 Тогда
			
			П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341103);
			П000100341003 = П000100341003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341203);
			
			мФормаОтчета.П000100341003 = П000100341003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341004, ОбластьИмя) > 0 Тогда
			
			П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341104);
			П000100341004 = П000100341004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341204);
			
			мФормаОтчета.П000100341004 = П000100341004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341005, ОбластьИмя) > 0 Тогда
			
			П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341105);
			П000100341005 = П000100341005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341205);
			
			мФормаОтчета.П000100341005 = П000100341005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342003, ОбластьИмя) > 0 Тогда
			
			П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342103);
			П000100342003 = П000100342003 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342203);
			
			мФормаОтчета.П000100342003 = П000100342003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342004, ОбластьИмя) > 0 Тогда
			
			П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342104);
			П000100342004 = П000100342004 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342204);
			
			мФормаОтчета.П000100342004 = П000100342004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342005, ОбластьИмя) > 0 Тогда
			
			П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342105);
			П000100342005 = П000100342005 + РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342205);
			
			мФормаОтчета.П000100342005 = П000100342005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100340005, ОбластьИмя) > 0 Тогда
			
			П000100340006 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340006);
			П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340003);
			П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340004);
			
			мФормаОтчета.П000100340005 = П000100340006 - П000100340003 - П000100340004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100341006, ОбластьИмя) > 0 Тогда
			
			П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341003);
			П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341004);
			П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341005);
			
			мФормаОтчета.П000100341006 = П000100341003 + П000100341004 + П000100341005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100342006, ОбластьИмя) > 0 Тогда
			
			П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342003);
			П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342004);
			П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342005);
			
			мФормаОтчета.П000100342006 = П000100342003 + П000100342004 + П000100342005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350003, ОбластьИмя) > 0 Тогда
			
			П000100340003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340003);
			П000100341003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341003);
			П000100342003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342003);
			
			мФормаОтчета.П000100350003 = П000100340003 + П000100341003 + П000100342003;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350004, ОбластьИмя) > 0 Тогда
			
			П000100340004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340004);
			П000100341004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341004);
			П000100342004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342004);
			
			мФормаОтчета.П000100350004 = П000100340004 + П000100341004 + П000100342004;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350005, ОбластьИмя) > 0 Тогда
			
			П000100340005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100340005);
			П000100341005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100341005);
			П000100342005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100342005);
			
			мФормаОтчета.П000100350005 = П000100340005 + П000100341005 + П000100342005;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000100350006, ОбластьИмя) > 0 Тогда
			
			П000100350003 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350003);
			П000100350004 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350004);
			П000100350005 = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(
			Форма, мФормаОтчета.П000100350005);
			
			мФормаОтчета.П000100350006 = П000100350003 + П000100350004 + П000100350005;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетНаСервере_Пояснения9(Форма, ОбластьИмя)
	
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения9" Тогда
		РазмещениеДанных = Форма.ТабличныйДокумент;
	Иначе
		РазмещениеДанных = Форма.СтруктураДанныхПояснения9;
	КонецЕсли;
	
	Для Графа = 3 По 4 Цикл
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ СтрЧислоВхождений(
			Форма.СтруктураЗависимыхЯчеекДляАвторасчета["П00010059000" + Графа], ОбластьИмя) > 0 Тогда
			
			Строка5901 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010059010" + Графа);
			Строка5905 = ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, "П00010059050" + Графа);
			
			РасчетСтроки5900 = Строка5901 + Строка5905;
			
			УстановитьЗначениеПоказателя(РазмещениеДанных, "П00010059000" + Графа, РасчетСтроки5900);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		ЗначениеПоказателя = РазмещениеДанных.Области[ИмяПоказателя].Значение;
	Иначе
		ЗначениеПоказателя = РазмещениеДанных[ИмяПоказателя];
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательОтчетаОкрЕд(Форма, РазмещениеДанных, ИмяПоказателя)
	
	ЗначениеПоказателя = ПоказательОтчета(Форма, РазмещениеДанных, ИмяПоказателя);
	
	ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФорматуДелителя(Форма, ЗначениеПоказателя);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеПоказателя(РазмещениеДанных, ИмяПоказателя, ЗначениеПоказателя)
	
	Если ТипЗнч(РазмещениеДанных) = Тип("ТабличныйДокумент") Тогда
		РазмещениеДанных.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	Иначе
		РазмещениеДанных[ИмяПоказателя] = ЗначениеПоказателя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановлениеОтчета

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета				= Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		= Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала                 = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания              = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма             = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация                = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи                = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения           = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности              = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий                = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                        = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида          = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
    СтруктураРеквизитовФормы.мВариант                                   = Вариант;

	Если СтруктураРеквизитовФормы.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана = СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана;
	КонецЕсли;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
    
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
		
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// Список организаций, по которому необходимо собирать отчет.
	СписокСохранения.Вставить("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	
	// Тип адреса выводимый в отчете.
	СписокСохранения.Вставить("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	
	СписокСохранения.Вставить("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	
	// Флажок разрешения печати без штрихкода.
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	СписокСохранения.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Вставить("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	СписокСохранения.Вставить("Авторасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СохрСоставДополнительныхСтрок = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из СоставДополнительныхСтрок Цикл
		
		Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
			
			СтруктураСоставов = Новый Структура;
			
			Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
				
				ПолучитьДеревоНастроекСоставаДопСтрок(Элемент.Ключ);
				
				Если Элемент.Ключ = "Баланс" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекБаланс);
				ИначеЕсли Элемент.Ключ = "ОФР" Тогда
					СтруктураСоставов.Вставить(Элемент.Ключ, ДеревоНастроекОФР);
				КонецЕсли;
			
			КонецЦикла;
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, СтруктураСоставов);
			
		Иначе	
			
			СохрСоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		
		КонецЕсли;
			
	КонецЦикла;
	
	СписокСохранения.Вставить("СоставДополнительныхСтрок", СохрСоставДополнительныхСтрок);
	
	СохрСтруктураМногострочныхЧастей = Новый Структура;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Для Каждого МногострочнаяЧасть Из СтруктураМногострочныхЧастей Цикл
		
		НовыйЭлементСтруктуры = Новый Структура;
		
		Для Каждого ЭлементСтруктуры Из МногострочнаяЧасть.Значение Цикл
			
			Если ЭлементСтруктуры.Ключ = "ИмяПоляТабличногоДокумента" Тогда
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, "ПолеТабличногоДокумента" + ЭлементСтруктуры.Значение);
				
			ИначеЕсли ЭлементСтруктуры.Ключ = "Состав" Тогда	
				
				ТаблЗнач = Новый ТаблицаЗначений;
				
				Колонки = ЭлементСтруктуры.Значение[0];
				
				Для Каждого Колонка Из Колонки Цикл
					
					ТаблЗнач.Колонки.Добавить(Колонка.Ключ);
					
				КонецЦикла;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					
					СтрТаблЗнач = ТаблЗнач.Добавить();
					
					Для Каждого ЗначениеКолонки Из Элемент Цикл
						
						СтрТаблЗнач[ЗначениеКолонки.Ключ] = ЗначениеКолонки.Значение;
						
					КонецЦикла;
					
				КонецЦикла;
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ТаблЗнач);
				
			Иначе 
				
				НовыйЭлементСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СохрСтруктураМногострочныхЧастей.Вставить(МногострочнаяЧасть.Ключ, НовыйЭлементСтруктуры);
		
	КонецЦикла;
	
	СписокСохранения.Вставить("СтруктураМногострочныхЧастей", СохрСтруктураМногострочныхЧастей);
	СписокСохранения.Вставить("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Вставить("ОтчетностьВРосстат", ОтчетностьВРосстат);
	СписокСохранения.Вставить("БалансНекоммерческойОрганизации", СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации);
	
	СписокДополнительныхФайлов = Новый Структура;
	СписокДополнительныхФайлов.Вставить("ИмяФайлаПояснительнойЗаписки",       ИмяФайлаПояснительнойЗаписки);
	СписокДополнительныхФайлов.Вставить("ИмяФайлаАудиторскогоЗаключения",     ИмяФайлаАудиторскогоЗаключения);
	
	СписокСохранения.Вставить("СписокДополнительныхФайлов", СписокДополнительныхФайлов);
	
	СписокСохранения.Вставить("СтруктураОтчета", СтруктураОтчета);
	
	СписокСохранения.Вставить("ОборотыСчета75_01", СтруктураРеквизитовФормы.ОборотыСчета75_01);
	
	СписокСохранения.Вставить("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СписокСохранения.Вставить("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СписокСохранения.Вставить("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", "");
	
	Если Элементы.ПанельПроверкиАктуальностиДанных.Видимость Тогда
		
		СписокСохранения.Вставить("ПроверкаАктуализацииДанныхПредупреждение", Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
		
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// Записываем документ, хранящий данные отчета.
	Попытка
		
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
		
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка");
		СохранитьДанныеДополнительногоФайла(СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение");
		
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	Модифицированность = Ложь;

	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногострочногоРаздела;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаРасшифровки;
	Перем СохраненнаяСтруктураМногострочныхЧастей;
	Перем Авторасчет;
	
	// Обновление сведений об организации в случае копирования отчета.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;

	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	УстановитьПризнакиПримененияУСН();
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство("Авторасчет", Авторасчет);
	Если НЕ Авторасчет = Неопределено Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Авторасчет;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
			КонвертироватьТаблицуВариантовЗаполнения();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокСохранения.Свойство("ВидСдачиОтчетности", ВидСдачиОтчетности);
	СписокСохранения.Свойство("ОтчетностьВРосстат", ОтчетностьВРосстат);
	УстановитьВидСдачиОтчетности(ВидСдачиОтчетности);
	
	СписокСохранения.Свойство("СтруктураМногострочныхЧастей", СохраненнаяСтруктураМногострочныхЧастей);
	
	Если СохраненнаяСтруктураМногострочныхЧастей <> Неопределено Тогда
		
		Для Каждого ЭлементСтруктуры Из СохраненнаяСтруктураМногострочныхЧастей Цикл
			
			ТаблЗнач = ЭлементСтруктуры.Значение.Состав;
			
			СтруктураЗнач = Новый Структура;
			МассивЗнач    = Новый Массив;
			
			Для Каждого СтрТаблЗнач Из ТаблЗнач Цикл
				
				СтруктураЗнач.Очистить();
				
				Для Каждого Колонка Из ТаблЗнач.Колонки Цикл
					
					СтруктураЗнач.Вставить(Колонка.Имя, СтрТаблЗнач[Колонка.Имя]);
					
				КонецЦикла;
				
				МассивЗнач.Добавить(СтруктураЗнач);
				
			КонецЦикла;
			
			ЭлементСтруктуры.Значение.Состав = МассивЗнач;
			
			ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = СтрЗаменить(ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента, "ПолеТабличногоДокумента", "");
			
		КонецЦикла;
		
		Если СохраненнаяСтруктураМногострочныхЧастей.Свойство("ДопСтрока5590") Тогда
			СохраненнаяСтруктураМногострочныхЧастей.ДопСтрока5590.Кодификаторы[0].Код = 5594;
			СохраненнаяСтруктураМногострочныхЧастей.ДопСтрока5590.Масштаб.МаксимальноеКоличествоСтрок = 6;
		КонецЕсли;
		
		КонвертироватьСтруктуруМногострочныхЧастей(СохраненнаяСтруктураМногострочныхЧастей);
		
		СтруктураМногострочныхЧастей = СохраненнаяСтруктураМногострочныхЧастей;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	// Восстанавливаем сведения о настройке состава дополнительных строк.
	СформироватьНастройкиСоставаДополнительныхСтрок(СоставДополнительныхСтрок);
	СохраненныйСоставДополнительныхСтрок = Неопределено;
	СписокСохранения.Свойство("СоставДополнительныхСтрок", СохраненныйСоставДополнительныхСтрок);
	
	Если СохраненныйСоставДополнительныхСтрок = Неопределено Тогда
		// Используются настройки по умолчанию.
	ИначеЕсли Число(СоставДополнительныхСтрок.Версия) > Число (СохраненныйСоставДополнительныхСтрок.Версия) Тогда
		Если СохраненныйСоставДополнительныхСтрок.Модифицированность Тогда
			ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок);
		Иначе
			// Используются настройки по умолчанию новой версии.
		КонецЕсли;
	Иначе
		СоставДополнительныхСтрок.Очистить();
		
		Для Каждого ЭлементСтруктуры Из СохраненныйСоставДополнительныхСтрок Цикл
			Если ЭлементСтруктуры.Ключ = "СтруктураСоставов" Тогда
				СтруктураСоставов = Новый Структура;
				
				Для Каждого Элемент Из ЭлементСтруктуры.Значение Цикл
					
					Если Элемент.Значение.Колонки.Найти("ДостДляРедактирования_Существенность") = Неопределено Тогда
						
						Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_Существенность");
						Элемент.Значение.Колонки.Добавить("ДостДляРедактирования_МаксимальноеКоличество");
						
						Для Каждого СтрокаДерева Из Элемент.Значение.Строки Цикл
							
							СтрокаДерева.ДостДляРедактирования_Существенность
								= ЗначениеЗаполнено(СтрокаДерева.Существенность);
							
							СтрокаДерева.ДостДляРедактирования_МаксимальноеКоличество
								= ЗначениеЗаполнено(СтрокаДерева.Существенность);
							
							СтрокаДерева.МаксимальноеКоличество
								= ?(ЗначениеЗаполнено(СтрокаДерева.Существенность), 10, 0);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Если Элемент.Ключ = "Баланс" Тогда
						ДеревоНастроекБаланс = Элемент.Значение.Скопировать();
						СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
							= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
					ИначеЕсли Элемент.Ключ = "ОФР" Тогда
						ДеревоНастроекОФР = Элемент.Значение.Скопировать();
						СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР
							= ПоместитьВоВременноеХранилище(ДеревоНастроекОФР, УникальныйИдентификатор);
						ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
					КонецЕсли;
					
					СтруктураСоставов.Вставить(Элемент.Ключ, "ДеревоНастроек" + Элемент.Ключ);
					
				КонецЦикла;
				
				СоставДополнительныхСтрок.Вставить("СтруктураСоставов", СтруктураСоставов);
				
			Иначе
				
				СоставДополнительныхСтрок.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) И ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы)
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		СформироватьСоставПоказателей();
		
		ЭлементВДереве = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			мДеревоСтраницОтчета.ПолучитьЭлементы(), "ИмяСтраницы", "РасчетАктивов");
		
		// Перекрашивание фона ячеек в цвет ручного ввода данных.
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			// Для корректной работы универсального механизма, необходимо проинициализировать
			// свойство "НаимТекущегоРаздела" структуры "СтруктураРеквизитовФормы".
			ВременноОпределеноНаимТекущегоРаздела = Ложь;
			Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = Неопределено Тогда
				СтруктураРеквизитовФормы.НаимТекущегоРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
				ВременноОпределеноНаимТекущегоРаздела = Истина;
			КонецЕсли;
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
			Если ВременноОпределеноНаимТекущегоРаздела Тогда
				СтруктураРеквизитовФормы.НаимТекущегоРаздела = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// восстанавливаем флажок проверки соотношения показателей при печати и выгрузке
	СписокСохранения.Свойство("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("ПрименениеЕНВД", СтруктураРеквизитовФормы.ПрименениеЕНВД);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаРасшифровки.Колонки.Найти("НомСтроки") <> Неопределено Тогда
			
			ИмяПоказателя     = ТаблицаРасшифровки.Колонки.Найти("ИмяПоказателя");
			ИмяПоказателя.Имя = "НаименованиеПоказателя";
			
			ИмяЯчейки     = ТаблицаРасшифровки.Колонки.Найти("ИмяЯчейки");
			ИмяЯчейки.Имя = "ИмяПоказателя";
			
			Раздел     = ТаблицаРасшифровки.Колонки.Найти("Раздел");
			Раздел.Имя = "ИмяРаздела";
			
			ИмяСлагаемого     = ТаблицаРасшифровки.Колонки.Найти("ИмяСлагаемого");
			ИмяСлагаемого.Имя = "НаименованиеСлагаемого";
			
			ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
			
			Для Каждого Элемент Из ТаблицаРасшифровки Цикл
				
				Если ЗначениеЗаполнено(Элемент.КодСчета) Тогда
					Элемент.НаименованиеСлагаемого = Элемент.НаименованиеСлагаемого + Элемент.КодСчета.Код;
				КонецЕсли;
				
				ДопПараметры = Новый Структура;
				
				Если ЗначениеЗаполнено(Элемент.Субконто1) Тогда
					ДопПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[0].ВидСубконто, Элемент.Субконто1));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто2) Тогда
					ДопПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[1].ВидСубконто, Элемент.Субконто2));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Элемент.Субконто3) Тогда
					ДопПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто,ЗначениеСубконто", Элемент.КодСчета.ВидыСубконто[2].ВидСубконто, Элемент.Субконто3));
				КонецЕсли;
				
				Элемент.ДополнительныеПараметры = ДопПараметры;
				
			КонецЦикла;
			
			ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(, "ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры");
			
		КонецЕсли;
		
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
		
	КонецЕсли;
	
	СохраненныеОборотыСчета75_01 = Неопределено;
	Если СписокСохранения.Свойство("ОборотыСчета75_01", СохраненныеОборотыСчета75_01) Тогда
		УстановитьОборотыСчета75_01(СохраненныеОборотыСчета75_01);
	КонецЕсли;
	
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	Если НЕ ПоказателиОтчета.ПолеТабличногоДокументаПояснения1.Свойство("ОргДиректор") Тогда
		ЗаполнитьПодписиПоясненийПоБалансу(ПоказателиОтчета);
	КонецЕсли;
	
	СписокДополнительныхФайлов = Неопределено;
	Если СписокСохранения.Свойство("СписокДополнительныхФайлов", СписокДополнительныхФайлов) И СписокДополнительныхФайлов <> Неопределено Тогда
		ИмяФайлаПояснительнойЗаписки       = СписокДополнительныхФайлов.ИмяФайлаПояснительнойЗаписки;
		ИмяФайлаАудиторскогоЗаключения     = СписокДополнительныхФайлов.ИмяФайлаАудиторскогоЗаключения;
	КонецЕсли;
	
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлПояснительнойЗаписки, "Пояснительная записка", ИмяФайлаПояснительнойЗаписки);
	ВосстановитьДанныеДополнительногоФайла(
		СтруктураРеквизитовФормы.ФайлАудиторскогоЗаключения, "Аудиторское заключение", ИмяФайлаАудиторскогоЗаключения);
	
	СписокСохранения.Свойство("ГруппаОрганизаций", СтруктураРеквизитовФормы.ГруппаОрганизаций);
	Если СтруктураРеквизитовФормы.ГруппаОрганизаций = Неопределено Тогда
		СтруктураРеквизитовФормы.ГруппаОрганизаций = Новый СписокЗначений;
	КонецЕсли;
	
	СписокСохранения.Свойство("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	Если СтруктураРеквизитовФормы.мТипАдреса = Неопределено ИЛИ ПустаяСтрока(СтруктураРеквизитовФормы.мТипАдреса) ИЛИ СтрНайти("АдрФакт, АдрЮР, АдрПочт", СтруктураРеквизитовФормы.мТипАдреса) = 0 Тогда
		СтруктураРеквизитовФормы.мТипАдреса = ТипАдресаПоУмолчанию();
	КонецЕсли;
	
	СписокСохранения.Свойство("Адрес9Запятых", СтруктураРеквизитовФормы.мАдресДляВыгрузки);
	Если СтруктураРеквизитовФормы.мАдресДляВыгрузки = Неопределено Тогда
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтруктураРеквизитовФормы.мТипАдреса)[СтруктураРеквизитовФормы.мТипАдреса];
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		Если НЕ Раздел.МногостраничностьВРазделе
		   И НЕ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	КонецЦикла;
	
	ИмяТекРаздела = РазделыОтчета.ПолучитьЭлементы()[0].КолонкаРазделыОтчетаСокрНаим;
	
	Если НЕ ИмяТекРаздела = "ДополнительныеФайлы" Тогда
		ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
		
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
			Если ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
				ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных(Ложь);
	
	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) % 3 = 0 Тогда
		Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
			СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
		КонецЕсли;
	Иначе
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("СпособСозданияОрганизации", СтруктураРеквизитовФормы.СпособСозданияОрганизации);
	
	СписокСохранения.Свойство("ДатаСозданияОрганизации", СтруктураРеквизитовФормы.ДатаСозданияОрганизации);
	
	СписокСохранения.Свойство("ДатаАктуальностиДанных", СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
	
	СписокСохранения.Свойство("ПроверкаАктуализацииДанныхПредупреждение", Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок);
		
	Если ЗначениеЗаполнено(Элементы.ПроверкаАктуализацииДанныхПредупреждение.Заголовок) Тогда
		
		Элементы.ПанельПроверкиАктуальностиДанных.Видимость = Истина;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	ПеренумероватьСтрокиРасшифровкиБаланса();
	
	СформироватьСтруктуруДанныхПояснения6();
	
	РасчетНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьОтчетности

&НаКлиенте
Процедура ПечататьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		НастройкиФормыВыбораПечати = Результат;
		
		Если Результат.АктивныйПункт = 1 Тогда
			РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, "ПоказатьСДвухмернымШтрихкодомPDF417");
			
		ИначеЕсли Результат.АктивныйПункт = 2 Тогда
			Если Результат.ВключатьКодыСтрок Тогда
				ПечататьИзФормы("ПоказатьБланк");
			Иначе
				ПечататьИзФормы("ПоказатьБланк");
			КонецЕсли;
			
		ИначеЕсли Результат.АктивныйПункт = 3 Тогда
			ПечататьИзФормы("ПоказатьБланкКНД0710099");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормы(ВидПечати)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ВидПечати", ВидПечати);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечататьИзФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьИзФормыЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидПечати = ДополнительныеПараметры.ВидПечати;
	
	Печать(ВидПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок);
	Состояние(ТекстСостояния, , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ВывестиМакетВТаблДокНаСервере("Баланс", 0);
	
	Если ВидПечати = "ПоказатьБланкКНД0710099" Тогда
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма по КНД 0710099");
		СтруктураПараметров.Вставить("ОриентацияЛиста",    "Портрет");
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", "");
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		ВывестиНаПечатьКНД0710099(СтруктураПараметров);
		
		Если ВидПечати = "ПоказатьБланкКНД0710099" Тогда
			ВидПечати = "ПоказатьБланк";
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		ЭтоЗакладкаДополнительныхФайлов = СтрокаУровня1.ИмяСтраницы = "ДополнительныеФайлы";
		Если ЭтоЗакладкаДополнительныхФайлов Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтаФорма["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
			ПоказатьПериод(ИмяСтраницыПанели);
			ЗаполнитьПериодыВРазделахОтчетности(ИмяСтраницыПанели);
			
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(
		ЭтаФорма, Ложь, СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	Для Каждого Лист Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл
		УдалитьНенужноеИзПечатнойФормы(ПолучитьИзВременногоХранилища(Лист.Значение[0]));
	КонецЦикла;
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьКНД0710099(ПараметрыПечати)
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	// Подготовка данных для вывода.
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("ИНН", СокрЛП(ТабличныйДокумент.Области.ОргИНН.Значение));
	ДанныеОтчета.Вставить("КПП", СокрЛП(СтруктураРеквизитовФормы.Организация.КПП));
	ДанныеОтчета.Вставить("НомерКорректировки",
		Формат(СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки, "ЧЦ=3; ЧН=; ЧГ=0"));
	
	Если ВидСдачиОтчетности = 3 Тогда
		// Промежуточная отчетность при ликвидации/реорганизации.
		ПериодОтчетности = "90";
	Иначе
		// Обычная отчетность.
		ПериодОтчетности = 34;
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
		  <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			// 94 – первый отчетный год, отличный по продолжительности от календарного.
			ПериодОтчетности = "94";
		КонецЕсли;
		
	КонецЕсли;
	ДанныеОтчета.Вставить("Период", ПериодОтчетности);
	
	ДанныеОтчета.Вставить("ОтчетГод", Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг"));
	
	ДанныеОтчета.Вставить("НаимОрг",ВРег(СокрЛП(ТабличныйДокумент.Области.ОргНазв.Значение)));
	ДанныеОтчета.Вставить("ОКВЭД",  СокрЛП(СтрЗаменить(ТабличныйДокумент.Области.ОргКодОКВЭД.Значение,".", "")));
	ДанныеОтчета.Вставить("ОКПО",   СокрЛП(ТабличныйДокумент.Области.ОргКодОКПО.Значение));
	ДанныеОтчета.Вставить("ОКОПФ",  СокрЛП(ТабличныйДокумент.Области.ОргКодОКОПФ.Значение));
	ДанныеОтчета.Вставить("ОКФС",   СокрЛП(ТабличныйДокумент.Области.ОргКодОКФС.Значение));
	ДанныеОтчета.Вставить("ОКЕИ",   СокрЛП(ТабличныйДокумент.Области.КодЕИ.Значение));
	
	ДанныеОтчета.Вставить("ДатаПодписи", Формат(ДатаПодписи, "ДФ=ddMMyyyy"));
	
	ДанныеОтчета.Вставить("Адрес", ВРег(СокрЛП(ТабличныйДокумент.Области.ОргПочтАдрес.Значение)));
	
	Аудит = "";
	Если ЗначениеЗаполнено(ТабличныйДокумент.Области.АудитДа.Значение) Тогда
		Аудит = "1";
	ИначеЕсли ЗначениеЗаполнено(ТабличныйДокумент.Области.АудитНет.Значение) Тогда
		Аудит = "0";
	КонецЕсли;
	
	ДанныеОтчета.Вставить("Аудит",        Аудит);
	ДанныеОтчета.Вставить("НаимАудитора", ВРег(СокрЛП(ТабличныйДокумент.Области.НаимАудитора.Значение)));
	ДанныеОтчета.Вставить("АудиторИНН",   СокрЛП(ТабличныйДокумент.Области.АудиторИНН.Значение));
	ДанныеОтчета.Вставить("АудиторОГРН",  СокрЛП(ТабличныйДокумент.Области.АудиторОГРН.Значение));
	
	ПечатнаяФорма = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ФормаПечати2019Кв1_КНД0710099");
	
	ПечатнаяФорма.ПолеСверху = 10;
	ПечатнаяФорма.ПолеСправа = 10;
	ПечатнаяФорма.ПолеСнизу  = 10;
	ПечатнаяФорма.ПолеСлева  = 10;
	
	КодНО = СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОргана);
	КПП = СокрЛП(СтруктураРеквизитовФормы.Организация.КПП);
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Руководитель организации.
		ДанныеОтчета.Вставить("ПризнакПодписанта", "1");
		
		ФИОРук = РегламентированнаяОтчетность.РазложитьФИО(ВРег(ТабличныйДокумент.Области.ОргДиректор.Значение));
		ДанныеОтчета.Вставить("ПодписантФамилия",  ВРег(СокрЛП(ФИОРук.Фамилия)));
		ДанныеОтчета.Вставить("ПодписантИмя",      ВРег(СокрЛП(ФИОРук.Имя)));
		ДанныеОтчета.Вставить("ПодписантОтчество", ВРег(СокрЛП(ФИОРук.Отчество)));
		
		ДанныеОтчета.Вставить("ДокументПредставителя", "");
	Иначе
		// Уполномоченный представитель.
		ДанныеОтчета.Вставить("ПризнакПодписанта", "2");
		
		ФИОПредставителя = РегламентированнаяОтчетность.РазложитьФИО(ВРег(СведенияОПредставителе.ФИОПредставителя));
		ДанныеОтчета.Вставить("ПодписантФамилия",  ВРег(СокрЛП(ФИОПредставителя.Фамилия)));
		ДанныеОтчета.Вставить("ПодписантИмя",      ВРег(СокрЛП(ФИОПредставителя.Имя)));
		ДанныеОтчета.Вставить("ПодписантОтчество", ВРег(СокрЛП(ФИОПредставителя.Отчество)));
		
		ДанныеОтчета.Вставить("ДокументПредставителя", ВРег(СведенияОПредставителе.ДокументПредставителя));
		
	КонецЕсли;
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(ПараметрыПечати.ОриентацияЛиста = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета);
	СписокПечатныхФорм.Добавить(ПечатнаяФорма);
	
	Для Каждого СформированныйЛист Из СписокПечатныхФорм Цикл
		Если ТипЗнч(СформированныйЛист.Значение) = Тип("ТабличныйДокумент") Тогда 
			УдалитьНенужноеИзПечатнойФормы(СформированныйЛист.Значение);
		КонецЕсли;
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(СформированныйЛист.Значение, ПараметрыПечати.НаименованиеЛиста);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаОтчетности

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте( , ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено; // обход ошибки в платформе
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Возврат УниверсальнаяВыгрузкаXML(Текст);
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузкаXML(ТекстВыгрузки = Неопределено) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в тысячах"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	ПараметрыРеглОтчета = Новый Структура;
	ПараметрыРеглОтчета.Вставить("СохраненныйОтчет",  СтруктураРеквизитовФормы.мСохраненныйДок);
	ПараметрыРеглОтчета.Вставить("ИсточникОтчета",    СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета);
	ПараметрыРеглОтчета.Вставить("ВыбраннаяФорма",    СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма);
	ПараметрыРеглОтчета.Вставить("РезультатВыгрузки", РегламентированнаяОтчетность.НовыйРезультатВыгрузкиРеглОтчета());
	
	ПараметрыРеглОтчета.РезультатВыгрузки.ТаблицаСообщений = ЭтаФорма.ТаблицаСообщений;
	
	РезультатВыгрузки = ОбъектОтчета(ЭтаФорма.ИмяФормы).УниверсальнаяВыгрузка(ПараметрыРеглОтчета);
	
	Если РезультатВыгрузки.РеглОтчетВыгружен Тогда
		ФайлВыгрузки = ПолучитьИзВременногоХранилища(РезультатВыгрузки.АдресФайлаВыгрузки);
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлВыгрузки.Записать(ИмяВременногоФайла);
		
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, РезультатВыгрузки.КодировкаФайлаВыгрузки);
		
		ТекстВыгрузки = ЧтениеТекста.Прочитать();
		
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат РезультатВыгрузки.РеглОтчетВыгружен;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВозможностиВыгрузки

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьВозможностьВыгрузки(СтруктураРеквизитовФормы.мВыбраннаяФорма,
		СтруктураРеквизитовФормы,
		мДанныеОтчета,
		ПараметрыВыгрузки,
		ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ПризнакПроверкиПоказателей = ПроверитьПоказателиXML();
	
	мДанныеОтчета = Неопределено;
	
	Возврат ПризнакПроверкиПоказателей;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказателиXML() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	Возврат ОбъектОтчета.ПроверитьДанные(СтруктураРеквизитовФормы.мВыбраннаяФорма, Узел, Этаформа);
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОФР2019(ОписаниеСтруктурыОтчета)
	
	ЭтоОФР2019 = ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_ЕНВД"
	        ИЛИ ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_НеЕНВД";
	
	Возврат ЭтоОФР2019;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОФР2020(ОписаниеСтруктурыОтчета)
	
	ЭтоОФР2020 = ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_ЕНВД_2020Кв1"
	        ИЛИ ОписаниеСтруктурыОтчета.ОФР.ИмяМакета = "ОФР_НеЕНВД_2020Кв1";
	
	Возврат ЭтоОФР2020;
	
КонецФункции

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыОтчета(ЭтаФормаИмя)
	
	Возврат Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, ".Форма.") + 7);
	
КонецФункции

&НаСервере
Функция МакетОтчета(ИмяРаздела)
	
	ИмяМакетаОтчета = Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета"))
	                + "_" + СтруктураОтчета[ИмяРаздела].ИмяМакета;
	МакетОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакетаОтчета);
	
	Возврат МакетОтчета;
	
КонецФункции

&НаКлиенте
Процедура УведомитьОРелизацииВыгрузкиВБудущихВерсиях()
	
	ПоказатьПредупреждение(, НСтр("ru='Выгрузка и отправка бухгалтерской отчетности в редакции приказа Минфина России от 19.04.2019 № 61н будет реализована в будущих версиях отчета'"));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПустаяСтруктураДанныхФайла()
	
	СтруктураДанныхФайла = Новый Структура;
	СтруктураДанныхФайла.Вставить("СведенияИзменены", Ложь);
	СтруктураДанныхФайла.Вставить("ХранилищеФайла");
	СтруктураДанныхФайла.Вставить("ИмяФайла");
	СтруктураДанныхФайла.Вставить("Размер");
	СтруктураДанныхФайла.Вставить("ДатаДобавления");
	
	Возврат СтруктураДанныхФайла;
	
КонецФункции

&НаСервере
Процедура ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД()
	
	СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Очистить();
	
	МассивДопСтрок = ДопСтрокиОФРПриПримененииЕНВД();
	
	Для каждого ДопСтрока Из МассивДопСтрок Цикл
		Если ВключенВОтчет(ДеревоНастроекОФР, ДопСтрока) Тогда
			СтруктураРеквизитовФормы.ВключенныеДопСтрокиОФРПриПримененииЕНВД.Добавить(ДопСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьСтраницуПанелиПоКодуПоказателя(Знач КодПоказателя)
	
	ПолучитьТаблицуСоставаПоказателей();
	
	НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоСоставу", КодПоказателя));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
	Иначе
		НайденныеСтроки = ТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("КодПоказателяПоФорме", КодПоказателя));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].ИмяПоляТаблДокумента;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПолучитьДеревоНастроекСоставаДопСтрок(ИмяРаздела)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	ОбъектОтчета.ПолучитьДеревоНастроекСоставаДопСтрок2019(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		ИмяРаздела,
		СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс,
		ДеревоНастроекОФР);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтруктуруМногострочныхЧастей()
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки)
	
	Если РезультатНастройки <> Неопределено Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
			ДеревоНастроекБаланс = ДанныеФормыВЗначение(РезультатНастройки, Тип("ДеревоЗначений"));
			СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроекБаланс"]
				= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
				
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
			ДеревоНастроекОФР = ДанныеФормыВЗначение(РезультатНастройки, Тип("ДеревоЗначений"));
			СтруктураРеквизитовФормы["АдресВоВремХранилищеДеревоНастроекОФР"]
				= ПоместитьВоВременноеХранилище(ДеревоНастроекОФР, УникальныйИдентификатор);
			ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДополнительныхСтрок(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
		ПеренумероватьСтрокиРасшифровкиОФР();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СтруктураОтчета2019Кв1()
	
	СоставНастройкаОтчета = Новый Структура;
	
	ЗаполнитьОбщуюСтруктуруОтчета(СоставНастройкаОтчета);
	
	// Отчет о финансовых результатах.
	СтруктураОтчета = Новый Структура;
	Если ОбъектОтчета(ЭтаФорма.ИмяФормы).ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_ЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_ЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_ЕНВД");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_НеЕНВД");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_НеЕНВД");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОФР", СтруктураОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Функция СтруктураОтчета2020Кв1()
	
	СоставНастройкаОтчета = Новый Структура;
	
	ЗаполнитьОбщуюСтруктуруОтчета(СоставНастройкаОтчета);
	
	// Отчет о финансовых результатах.
	СтруктураОтчета = Новый Структура;
	Если ОбъектОтчета(ЭтаФорма.ИмяФормы).ИспользуютсяМакетыЕНВД(ИмяФормы, СтруктураРеквизитовФормы) Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_ЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_ЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_ЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_ЕНВД");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "ОФР");
		СтруктураОтчета.Вставить("ИмяМакета",                            "ОФР_НеЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "ОФР_НеЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "ОФР_НеЕНВД_2020Кв1");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "ОФР_НеЕНВД");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("ОФР", СтруктураОтчета);
	
	Возврат СоставНастройкаОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОбщуюСтруктуруОтчета(СоставНастройкаОтчета)
	
	// Бухгалтерский баланс.
	СтруктураОтчета = Новый Структура;
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета",                            "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "БалансНКО");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "БалансНКО");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "БалансНКО");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения",          "БалансНКО");
	Иначе
		СтруктураОтчета.Вставить("ИмяСтраницы",                          "Баланс");
		СтруктураОтчета.Вставить("ИмяМакета",                            "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииПоказателей",                 "Баланс");
		СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей",       "Баланс");
		СтруктураОтчета.Вставить("ИмяСекцииНастройкиСоставаПоказателей", "Баланс");
		СтруктураОтчета.Вставить("ИдентификаторАвтозаполнения",          "Баланс");
	КонецЕсли;
	
	СоставНастройкаОтчета.Вставить("Баланс", СтруктураОтчета);
	
	// Отчет об изменениях капитала.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОИК");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОИК");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОИК");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОИК");
	
	СоставНастройкаОтчета.Вставить("ОИК", СтруктураОтчета);
	
	// Отчет о движении денежных средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "ОДДС");
	СтруктураОтчета.Вставить("ИмяМакета",                      "ОДДС");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "ОДДС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "ОДДС");
	
	СоставНастройкаОтчета.Вставить("ОДДС", СтруктураОтчета);
	
	// Отчет о целевом использовании средств.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                   "ОЦИС");
	СтруктураОтчета.Вставить("ИмяМакета",                     "ОЦИС");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",          "ОЦИС");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("ОЦИС", СтруктураОтчета);
	
	// Расчет стоимости чистых активов акционерного общества.
	СтруктураРаздела = Новый Структура();
	СтруктураРаздела.Вставить("ИмяСтраницы",                    "РасчетАктивов");
	СтруктураРаздела.Вставить("ИмяМакета",                      "РасчетАктивов");
	СтруктураРаздела.Вставить("ИмяСекцииПоказателей",           "РасчетАктивов");
	СтруктураРаздела.Вставить("ИмяОписанияМногострочныхЧастей", "");
	
	СоставНастройкаОтчета.Вставить("РасчетАктивов", СтруктураРаздела);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 1.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения1");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения1");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения1");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения1");
	
	СоставНастройкаОтчета.Вставить("Пояснения1", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 2.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения2");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения2");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения2");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения2");
	
	СоставНастройкаОтчета.Вставить("Пояснения2", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 3.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения3");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения3");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения3");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения3");
	
	СоставНастройкаОтчета.Вставить("Пояснения3", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 4.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения4");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения4");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения4");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения4");
	
	СоставНастройкаОтчета.Вставить("Пояснения4", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 5.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения5");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения5");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения5");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения5");
	
	СоставНастройкаОтчета.Вставить("Пояснения5", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 6.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения6");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения6");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения6");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения6");
	
	СоставНастройкаОтчета.Вставить("Пояснения6", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 7.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения7");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения7");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения7");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения7");
	
	СоставНастройкаОтчета.Вставить("Пояснения7", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 8.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения8");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения8");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения8");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения8");
	
	СоставНастройкаОтчета.Вставить("Пояснения8", СтруктураОтчета);
	
	// Пояснения к бухгалтерскому балансу и отчету о прибылях и убытках. Раздел 9.
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("ИмяСтраницы",                    "Пояснения9");
	СтруктураОтчета.Вставить("ИмяМакета",                      "Пояснения9");
	СтруктураОтчета.Вставить("ИмяСекцииПоказателей",           "Пояснения9");
	СтруктураОтчета.Вставить("ИмяОписанияМногострочныхЧастей", "Пояснения9");
	
	СоставНастройкаОтчета.Вставить("Пояснения9", СтруктураОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, ИмяТекРаздела)

	Перем Кодификаторы;
	Перем Заголовки;
	
	Если НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
		Возврат;
	КонецЕсли;
	
	// Если в описании структуры многострочной части указаны кодификаторы, то производится перенумерация
	Если СтруктураМногострочнойЧасти.Свойство("Кодификаторы", Кодификаторы) Тогда
		Если ТипЗнч(Кодификаторы) = Тип("Массив") Тогда
			Для Каждого Кодификатор Из Кодификаторы Цикл
				
				КоличествоКодов = СтруктураМногострочнойЧасти.Состав.Количество();
				МаксимальноеКоличествоСтрок = Неопределено;
				Если СтруктураМногострочнойЧасти.Свойство("Масштаб")
				   И СтруктураМногострочнойЧасти.Масштаб.Свойство("МаксимальноеКоличествоСтрок", МаксимальноеКоличествоСтрок)
				   И МаксимальноеКоличествоСтрок <> 0 Тогда
					КоличествоКодов = Мин(МаксимальноеКоличествоСтрок, КоличествоКодов);
				КонецЕсли;
				Для Инд = 1 По КоличествоКодов Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = СтрокаЧГ0(Кодификатор.Код + Инд - 1);
				КонецЦикла;
				// Для остальных строк коды не назначаются.
				Для Инд = КоличествоКодов + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьСКодом = ТабличныйДокумент.Области[Кодификатор.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьСКодом.Текст = "";
				КонецЦикла;
				
			КонецЦикла;
		ИначеЕсли ТипЗнч(Кодификаторы) = Тип("Структура") Тогда
			Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
				ОбластьСКодом = ТабличныйДокумент.Области[Кодификаторы.Область + "_" + СтрокаЧГ0(Инд)];
				ОбластьСКодом.Текст = СтрокаЧГ0(Кодификаторы.Код + Инд - 1);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// Если в описании структуры встречаются поля с датами, то производится их заполнение
	Если СтруктураМногострочнойЧасти.Свойство("Заголовки", Заголовки) Тогда
		Если ТипЗнч(Заголовки) = Тип("Массив") Тогда
			Для Каждого ЗаголовокСтроки Из Заголовки Цикл
				Для Инд = 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
					ОбластьОтчета = ТабличныйДокумент.Области[ЗаголовокСтроки.Область + "_" + СтрокаЧГ0(Инд)];
					ОбластьОтчета.Текст = СтруктураРеквизитовФормы.ЗаголовкиОтчетов[ЗаголовокСтроки.Заголовок];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьСоставПоказателей()
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(НастройкиФормы.МакетСоставаПоказателей);
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		ИмяСтраницы = Отчет.Значение.ИмяСтраницы;
		ИмяОбласти  = Отчет.Значение.ИмяСекцииПоказателей;
		
		ТекОбласть = МакетСоставаПоказателей.Области[ИмяОбласти];
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			
			// Переопределение варианты заполнения для отдельных показателей
			// отчета движения денежных средств по сведениям до 2010 года
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета < '20110101' Тогда
				// графа 03
				Если КодПоказателя = "П000100411203"
				 ИЛИ КодПоказателя = "П000100411303"
				 ИЛИ КодПоказателя = "П000100412303"
				 ИЛИ КодПоказателя = "П000100412403"
				 ИЛИ КодПоказателя = "П000100421203"
				 ИЛИ КодПоказателя = "П000100422203"
				 ИЛИ КодПоказателя = "П000100431203" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12) < '20110101' Тогда
				// Графа 04
				Если КодПоказателя = "П000100411204"
				 ИЛИ КодПоказателя = "П000100411304"
				 ИЛИ КодПоказателя = "П000100412304"
				 ИЛИ КодПоказателя = "П000100412404"
				 ИЛИ КодПоказателя = "П000100421204"
				 ИЛИ КодПоказателя = "П000100422204"
				 ИЛИ КодПоказателя = "П000100431204" Тогда
					чВариантЗаполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Переопределение вариантов заполнения строки 2510 и строк расшифровки показателей строки 2510
			// при заполнении промежуточной отчетности
			Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета <> КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
				Если КодПоказателя = "П000100251004"
				 ИЛИ КодПоказателя = "П000100251005"
				 ИЛИ КодПоказателя = "П000102510104"
				 ИЛИ КодПоказателя = "П000102510105"
				 ИЛИ КодПоказателя = "П000102510204"
				 ИЛИ КодПоказателя = "П000102510205" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВОтчетномПериоде Тогда
				Если КодПоказателя = "П000100242104"
				 ИЛИ КодПоказателя = "П000100243004"
				 ИЛИ КодПоказателя = "П000100245004" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ПрименяетсяПБУ18ВПредыдущемГоду Тогда
				Если КодПоказателя = "П000100242105"
				 ИЛИ КодПоказателя = "П000100243005"
				 ИЛИ КодПоказателя = "П000100245005" Тогда
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если КодПоказателя = "П000100566503" Тогда
				Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду = Ложь Тогда// возможно состояние Неопределено
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			Если КодПоказателя = "П000100566504" Тогда
				Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду = Ложь Тогда// возможно состояние Неопределено
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			Если КодПоказателя = "П000100567003"
			 ИЛИ КодПоказателя = "П000100568003" Тогда
				Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду = Истина Тогда// возможно состояние Неопределено
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			Если КодПоказателя = "П000100567004"
			 ИЛИ КодПоказателя = "П000100568004" Тогда
				Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду = Истина Тогда// возможно состояние Неопределено
					чВариантЗаполнения = 5;
				КонецЕсли;
			КонецЕсли;
			
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				
			КонецЕсли;
			
		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0
		 ИЛИ СтрЧислоВхождений(ИмяСтраницы, "Пояснения") > 0 Тогда
			
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
			
		Конецесли;
		
	КонецЦикла;
	
	УстановитьВидимостьПолейПоПБУ18();
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	Перем СтруктураГруппы;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения
			+ "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 0";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		СтруктураРеквизитовФормы.мДелитель = 1000;
		СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения
			+ "; ЧРД=,; ЧН=-; ЧО=0; ЧС = 3";
		
	КонецЕсли;
	
	ПоказатьКодЕИ();
	
	ПолучитьТаблицуСоставаПоказателей();
	
	Для Каждого СтрПоказатели Из ТаблицаСоставПоказателей Цикл
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;
		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;
		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;
		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		Если ТипДанныхПоказателя = "Е" Тогда
			ТекТабличноеПоле = ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				УстановитьФорматВыводаМногострочногоПоказателя(ТекТабличноеПоле, ИмяПоказателя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНастройкиСоставаДополнительныхСтрок(ПеременнаяНастроекСостава)
	
	ПеременнаяНастроекСостава = Новый Структура;
	МакетНастроекПоУмолчанию = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(НастройкиФормы.МакетНастройкиСоставаПоказателей);
	
	ОбластьВерсии = МакетНастроекПоУмолчанию.Области["Версия"];
	НаименованиеВерсии = МакетНастроекПоУмолчанию.Область(ОбластьВерсии.Верх, 1).Текст;
	ПеременнаяНастроекСостава.Вставить("Версия", НаименованиеВерсии);
	ПеременнаяНастроекСостава.Вставить("Модифицированность", Ложь); // Настройки по умолчанию не модифицированы
	ПеременнаяНастроекСостава.Вставить("СтруктураСоставов", Новый Структура);
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.Баланс.ИмяСекцииНастройкиСоставаПоказателей, ДеревоНастроекБаланс);
	ИзвлечьИсходнуюСтруктуруНастроек(МакетНастроекПоУмолчанию, СтруктураОтчета.ОФР.ИмяСекцииНастройкиСоставаПоказателей, ДеревоНастроекОФР);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
		= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
	СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР
		= ПоместитьВоВременноеХранилище(ДеревоНастроекОФР, УникальныйИдентификатор);
	ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
	
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("Баланс", "ДеревоНастроекБаланс");
	ПеременнаяНастроекСостава.СтруктураСоставов.Вставить("ОФР", "ДеревоНастроекОФР");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод(НаимТекущегоРаздела)
	
	Если НаимТекущегоРаздела = "Баланс" Тогда
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 1 Тогда 
				СтруктураРеквизитовФормы.СтрПериодОтчета = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтруктураРеквизитовФормы.СтрПериодОтчета = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Области.ДатаБаланса.Значение = "на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная 				= "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода 	= "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаОтчетная.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаОтчетная2.Значение 			  = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПрошлогоГода2.Значение 	  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода.Значение  = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКонцаПозапрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		
		// Период в списке кодов в форме баланса.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
	ИначеЕсли НаимТекущегоРаздела = "ОФР" Тогда
		//Отчет о финансовых результатах.
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОИК" Тогда
		
		ДатаКонцаПериодаОтчета 	  = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		ДатаКонцаПрошлогоГода 	  = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
		ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПозапрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПрошлогоГода.Значение = "Величина капитала на " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		ТабличныйДокумент.Области.ДатаВеличиныКапиталаПериодаОтчета.Значение = "Величина капитала на " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПрошлогоГода.Значение = "За " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		ТабличныйДокумент.Области.ПериодИзмененияКапиталаПериодаОтчета.Значение = "За " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'гггг'")+ " г.";
		
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаКорректировокПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаКорректировокПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ПериодКорректировокПрошлогоГода.Значение   = "Изменения капитала за " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'гггг'")+ " г.";
		
		ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
		
	ИначеЕсли НаимТекущегоРаздела = "ОДДС" Тогда
		
		//ОТЧЕТ О ДВИЖЕНИИ ДЕНЕЖНЫХ СРЕДСТВ
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода2.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "ОЦИС" Тогда
		
		ДатаКонцаПериодаОтчета = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
		
		Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
				СтрПериод = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			Иначе
				СтрПериод = "Январь - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
			КонецЕсли;
		КонецЕсли;
		
		Если Месяц(ДатаКонцаПериодаОтчета) = 1 Тогда
			СтрПериодПрошлыйГод = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			СтрПериодПрошлыйГод = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
		
		ПериодОтчета = " за " + СтрПериод;
		
		// Период в заголовке.
		ТабличныйДокумент.Области.ПериодОтчета.Значение = ПериодОтчета;
		
		// Период в списке кодов в форме отчета.
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаГод.Значение   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаМесяц.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'ММ'");
		ТабличныйДокумент.Области.ДатаКонцаПериодаОтчетаЧисло.Значение = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд'");
		
		// Заголовки таблиц.
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода = "За " + СтрПериод;
		СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода = "За " + СтрПериодПрошлыйГод;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериода;
		
		ТабличныйДокумент.Области.ДатаОтчетногоПериодаПрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетногоПериодаПрошлогоГода;
		
	ИначеЕсли НаимТекущегоРаздела = "РасчетАктивов" Тогда
			ДатаКонцаПрошлогоГода     = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 1, 12, 31);
			ДатаКонцаПозапрошлогоГода = Дата(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - 2, 12, 31);
			
			СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная              = "На " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода     = "На " + Формат(ДатаКонцаПрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода = "На " + Формат(ДатаКонцаПозапрошлогоГода, "ДФ = 'дд ММММ гггг'")+ " г.";
			
			// Заголовки таблицы.
			ТабличныйДокумент.Области.ДатаАктивовПозапрошлогоГода.Значение = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПозапрошлогоГода;
			ТабличныйДокумент.Области.ДатаАктивовПрошлогоГода.Значение     = СтруктураРеквизитовФормы.ЗаголовокДатаКонцаПрошлогоГода;
			ТабличныйДокумент.Области.ДатаАктивовПериодаОтчета.Значение    = СтруктураРеквизитовФормы.ЗаголовокДатаОтчетная;
			
	КонецЕсли;
	
	// Заголовки для использования в расшфировках ОФР.
	ДатаКонцаАналогичногоПериодаПрошлогоГода = КонецМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	Если НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) <> НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		ОписаниеПериода = Формат(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy") + " - " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ='ММММ гггг'") + " г." ;	
	Иначе
		Если НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
			ОписаниеПериода = Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		Иначе
			ОписаниеПериода = "Январь - " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'ММММ гггг'") + " г.";
		КонецЕсли;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЗаголовокДатаАналогичногоПериодаПрошлогоГода =  "За " + ОписаниеПериода;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовкиПоЕдиницеИзмерения(ИмяТекРаздела)
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		НазваниеЕдиницыИзмерения = "руб";
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		НазваниеЕдиницыИзмерения = "тыс. руб";
	Иначе
		НазваниеЕдиницыИзмерения = "";
	КонецЕсли;
	
	Если ИмяТекРаздела = "Пояснения1" Тогда
		ЗаголовокПояснения1 = "Пояснения к бухгалтерскому балансу" + Символы.ПС 
		                    + "и отчету о финансовых результатах" 
		                    + " (" + НазваниеЕдиницыИзмерения + ")";
		
		ТабличныйДокумент.Области.ЗаголовокРаздела.Текст = ЗаголовокПояснения1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетности(ИмяРаздела)

	Если ИмяРаздела = "Пояснения1" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения1();
	ИначеЕсли ИмяРаздела = "Пояснения2" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения2();
	ИначеЕсли ИмяРаздела = "Пояснения3" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения3();
	ИначеЕсли ИмяРаздела = "Пояснения4" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения4();
	ИначеЕсли ИмяРаздела = "Пояснения5" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения5();
	ИначеЕсли ИмяРаздела = "Пояснения6" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения6();
	ИначеЕсли ИмяРаздела = "Пояснения8" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения8();
	ИначеЕсли ИмяРаздела = "Пояснения9" Тогда
		ЗаполнитьПериодыВРазделахОтчетностиПояснения9();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения1()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5100.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5110.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату12.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода12.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему12.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.НаОтчетнуюДату13.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода13.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему13.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5140.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5150.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5160.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5170.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5180.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5190.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения2()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5200.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5210.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5220.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5230.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5240.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5250.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода23.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода23.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату24.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода24.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему24.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения3()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5301.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5311.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5305.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5315.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5300.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5310.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату32.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода32.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему32.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения4()
	
	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];
	
	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5400.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5420.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5401.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5421.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5402.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5422.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5403.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5423.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5404.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5424.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5405.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5425.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5406.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5426.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5407.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5427.Текст = ЗаголовокЗаПериодПредыдущегоГода;
	
	ТабличныйДокумент.Области.НаОтчетнуюДату42.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода42.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему42.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения5()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5501.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5521.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5502.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5522.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5503.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5523.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5504.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5524.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5511.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5531.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5512.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5532.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5513.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5533.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5514.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5534.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5500.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5520.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату52.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода52.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему52.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5551.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5571.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5552.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5572.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5553.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5573.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5554.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5574.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5560.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5580.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5561.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5581.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5562.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5582.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5563.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5583.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5564.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5584.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5565.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5585.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5566.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5586.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5550.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5570.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.НаОтчетнуюДату54.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода54.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему54.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения6()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода6.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода6.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения8()

	ЗаголовокНаОтчетнуюДату                        = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаОтчетнуюДату"];
	ЗаголовокНаКонецПредыдущегоГода                = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецПредыдущегоГода"];
	ЗаголовокНаКонецГодаПредшествующегоПредыдущему = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["НаКонецГодаПредшествующегоПредыдущему"];

	ТабличныйДокумент.Области.НаОтчетнуюДату8.Текст                        = ЗаголовокНаОтчетнуюДату;
	ТабличныйДокумент.Области.НаКонецПредыдущегоГода8.Текст                = ЗаголовокНаКонецПредыдущегоГода;
	ТабличныйДокумент.Области.НаКонецГодаПредшествующегоПредыдущему8.Текст = ЗаголовокНаКонецГодаПредшествующегоПредыдущему;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыВРазделахОтчетностиПояснения9()

	ЗаголовокЗаПериодОтчетногоГода   = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодОтчетногоГода"];
	ЗаголовокЗаПериодПредыдущегоГода = СтруктураРеквизитовФормы.ЗаголовкиОтчетов["ЗаПериодПредыдущегоГода"];

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода9.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода9.Текст = ЗаголовокЗаПериодПредыдущегоГода;

	ТабличныйДокумент.Области.ЗаПериодОтчетногоГода5910.Текст   = ЗаголовокЗаПериодОтчетногоГода;
	ТабличныйДокумент.Области.ЗаПериодПредыдущегоГода5920.Текст = ЗаголовокЗаПериодПредыдущегоГода;

КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	КолонкаРазделыОтчетаСокрНаим      = Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КолонкаНомерСтраницыРазделаОтчета = Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Ложь;
	Элементы.ЗаполнитьТекущий.Доступность = Истина;
	
	Если КолонкаРазделыОтчетаСокрНаим = "ДополнительныеФайлы" Тогда
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ДопФайлы;
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		
	ИначеЕсли СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(КолонкаРазделыОтчетаСокрНаим, КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		Элементы.СтраницыОтчета.ТекущаяСтраница = Элементы.ТаблДок;
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс" Тогда
		Элементы.Обновить.Доступность    = Истина;
	Иначе
		Элементы.Обновить.Доступность    = Ложь;
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "Баланс"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОФР" Тогда
	 
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Истина;
		
	ИначеЕсли КолонкаРазделыОтчетаСокрНаим = "ОДДС"
		  ИЛИ КолонкаРазделыОтчетаСокрНаим = "ОИК"
		  ИЛИ (СтрЧислоВхождений(КолонкаРазделыОтчетаСокрНаим, "Пояснения") > 0
			И НЕ КолонкаРазделыОтчетаСокрНаим = "Пояснения6") Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Видимость  = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Видимость   = Истина;
		
	КонецЕсли;
	
	Если КолонкаРазделыОтчетаСокрНаим = "ОЦИС" Тогда
		
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		
		ТаблВариантыЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + КолонкаРазделыОтчетаСокрНаим];
		Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
			Для каждого Элем Из ТаблВариантыЗаполнения[0].ТаблицаВариантовЗаполнения Цикл
				Если Элем.ВариантЗаполнения = 3 Тогда
					Элементы.ЗаполнитьТекущий.Доступность = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли КолонкаРазделыОтчетаСокрНаим = "РасчетАктивов"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "Пояснения3"
	 ИЛИ КолонкаРазделыОтчетаСокрНаим = "Пояснения9" Тогда
		
		Элементы.ЗаполнитьТекущий.Доступность = Ложь;
		
	КонецЕсли;
	
	ОчиститьБлокВариантЗаполнения();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
			
	ПоказатьПериод(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
		ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
	КонецЕсли;
		
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетОтчета(ИмяТекРаздела));
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если ИмяТекРаздела = "Баланс"
	 ИЛИ ИмяТекРаздела = "ОФР"
	 ИЛИ ИмяТекРаздела = "ОИК"
	 ИЛИ ИмяТекРаздела = "ОДДС"
	 ИЛИ ИмяТекРаздела = "Пояснения1"
	 ИЛИ ИмяТекРаздела = "Пояснения2"
	 ИЛИ ИмяТекРаздела = "Пояснения3"
	 ИЛИ ИмяТекРаздела = "Пояснения4"
	 ИЛИ ИмяТекРаздела = "Пояснения5"
	 ИЛИ ИмяТекРаздела = "Пояснения7"
	 ИЛИ ИмяТекРаздела = "Пояснения8"
	 ИЛИ ИмяТекРаздела = "Пояснения9" Тогда
		Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
			Если ЭлементСтруктуры.Значение.ИмяПоляТабличногоДокумента = ИмяТекРаздела Тогда
				ВывестиРазделВТабличныйДокумент(ЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
		Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПериодыВРазделахОтчетности(ИмяТекРаздела);
	
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ЭлементСтруктуры.Значение, ИмяТекРаздела)
	КонецЦикла;
	
	УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере( , , ИмяТекРаздела);
	
	УстановитьВидимостьДополнительныхСтрок(ИмяТекРаздела);
	
	Если ИмяТекРаздела = "Баланс" Тогда
		ПеренумероватьСтрокиРасшифровкиБаланса();
	ИначеЕсли ИмяТекРаздела = "ОФР" Тогда
		ПеренумероватьСтрокиРасшифровкиОФР();
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Баланс" Тогда
		Если ТабличныйДокумент.Области.Найти("ОргДиректор") <> Неопределено
			И СтруктураДанныхБаланс.Свойство("ОргДиректор") Тогда
			ТабличныйДокумент.Области.ОргДиректор.Значение = СтруктураДанныхБаланс.ОргДиректор;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТекРаздела = "Баланс"
	 ИЛИ ИмяТекРаздела = "ОФР"
	 ИЛИ ИмяТекРаздела = "ОИК"
	 ИЛИ ИмяТекРаздела = "ОДДС"
	 ИЛИ ИмяТекРаздела = "Пояснения1"
	 ИЛИ ИмяТекРаздела = "Пояснения2"
	 ИЛИ ИмяТекРаздела = "Пояснения3"
	 ИЛИ ИмяТекРаздела = "Пояснения4"
	 ИЛИ ИмяТекРаздела = "Пояснения5"
	 ИЛИ ИмяТекРаздела = "Пояснения7"
	 ИЛИ ИмяТекРаздела = "Пояснения8"
	 ИЛИ ИмяТекРаздела = "Пояснения9" Тогда
		ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	КонецЕсли;
	
	ЗаполнитьЗаголовкиПоЕдиницеИзмерения(ИмяТекРаздела);
	СкрытьСсылкуНастройкаСоставаОрганизаций();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокумент(ИдентификаторМногострочнойЧасти)
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	СтрокВМакете = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Если СтрокВМакете < КоличествоСтрокВМногострочнойЧасти Тогда
		
		// Удаление имени области многострочной части.
		ИмяОблМнЧ = ИдентификаторМногострочнойЧасти;
		Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
			КодСтроки = Сред(ИмяОблМнЧ, 7);
			Пока Лев(КодСтроки, 1) = "0" Цикл
				КодСтроки = Сред(КодСтроки, 2);
			КонецЦикла;
			ИмяОблМнЧ = "ДопСтрока" + КодСтроки;
		КонецЕсли;
		ОблМнЧ = ТабличныйДокумент.Области.Найти(ИмяОблМнЧ);
		Если ОблМнЧ <> Неопределено Тогда
			ИсходнаяОбластьСтрокВерх = ОблМнЧ.Верх;
			ИсходнаяОбластьСтрокНиз  = ОблМнЧ.Низ;
			ОблМнЧ.Имя = "";
		Иначе
			ИсходнаяОбластьСтрокВерх = 0;
			ИсходнаяОбластьСтрокНиз  = 0;
		КонецЕсли;
		
		ПостфиксСтрокВМакете = "_" + СтрокаЧГ0(СтрокВМакете);
		
		ИмяВерхнегоЭлементаСтроки = СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксСтрокВМакете;
		ИмяНижнегоЭлементаСтроки  = СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки + ПостфиксСтрокВМакете;
		
		ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
		ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
		
		ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		
		// Добавление необходимого количества дополнительных строк.
		ОбластьВставляемойСтроки
			= ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз);
		ОбластьСтрокиПреемника
			= ТабличныйДокумент.Область(ОбластьВставляемойСтрокиНиз + 1, , ОбластьВставляемойСтрокиНиз
			+ (КоличествоСтрокВМногострочнойЧасти - СтрокВМакете) * ВысотаСтроки);
		ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, ОбластьСтрокиПреемника,
			ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
		
		// Назначение имени области многострочной части.
		Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
			ОблМнЧ = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, ,
			ОбластьВставляемойСтрокиНиз + (КоличествоСтрокВМногострочнойЧасти - СтрокВМакете) * ВысотаСтроки);
			Если ОблМнЧ <> Неопределено Тогда
				ОблМнЧ.Имя = ИмяОблМнЧ;
			КонецЕсли;
		КонецЕсли;
		
		// Назначение имен ячеек с показателями в добавленных дополнительных строках.
		Для НомДопСтроки = СтрокВМакете + 1 По КоличествоСтрокВМногострочнойЧасти Цикл
			
			Смещение = ВысотаСтроки * (НомДопСтроки - 1);
			
			ПостфиксНомДопСтроки = "_" + СтрокаЧГ0(НомДопСтроки);
			
			ОсноваИмениОблУдаленияСтроки = "";
			
			Для Каждого ЭлементСтруктуры Из СтруктураМногострочнойЧасти.Состав[НомДопСтроки - 1] Цикл
				
				ОсноваИмениПоказателя = ЭлементСтруктуры.Ключ;
				
				ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
				
				ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(
				ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
				ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
				
				ОбластьПоказателяНовойСтроки.Имя = ОсноваИмениПоказателя + ПостфиксНомДопСтроки;
				
				// Установка значений показателей в добавленных дополнительных строках.
				Если ОбластьПоказателяНовойСтроки.СодержитЗначение Тогда
					ОбластьПоказателяНовойСтроки.Значение = ЭлементСтруктуры.Значение;
				Иначе
					ОбластьПоказателяНовойСтроки.Текст = ЭлементСтруктуры.Значение;
				КонецЕсли;
				
				// Получение основы для последующего назначения имени
				// ячейки со значком удаления дополнительной строки.
				Если ОсноваИмениОблУдаленияСтроки = "" Тогда
					Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда
						ОсноваИмениОблУдаленияСтроки = ОсноваИмениПоказателя;
					КонецЕсли;
				КонецЕсли;
				
			Конеццикла;
			
			// Назначение имени ячейки со значком удаления дополнительной строки.
			Если ОсноваИмениОблУдаленияСтроки <> "" Тогда
				
				ОбластьУдалитьНовая = ТабличныйДокумент.Область(
				ОбластьВставляемойСтрокиВерх + Смещение, 2,
				ОбластьВставляемойСтрокиВерх + Смещение, 2);
				
				ОбластьУдалитьНовая.Имя
				= "УдалитьСтроку" + ОсноваИмениОблУдаленияСтроки + ПостфиксНомДопСтроки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь, СведенияОбОрганизации = Неопределено)
	
	Если (Форма.СтруктураРеквизитовФормы.Организация  = Неопределено) Или (Форма.СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;
	
	// Составляем список данных, необходимых для вывода в декларацию
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		Сведения.Добавить("", "ИННЮЛ"); // ИНН
		Сведения.Добавить("", "НаимЮЛПол"); // Полное наименование 
		Сведения.Добавить("", "ОКПО");
		Сведения.Добавить("", "ОКОПФ");
		Сведения.Добавить("", "ОКФС");
		Сведения.Добавить("", "ФормСобств");
		Сведения.Добавить("", "ОргПравФорм");
		Сведения.Добавить("", Форма.СтруктураРеквизитовФормы.мТипАдреса);
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук"); // ФИО руководителя
	Сведения.Добавить("", "ФИОБух"); // ФИО бухгалтера
	
	//В поле "Адрес" указывается:
	//- для организации - место ее государственной регистрации (место нахождения);
	//- для обособленного подразделения - место его нахождения;
	//- для физического лица - полный адрес постоянного места жительства физического лица на основании документа, удостоверяющего его личность, либо иного документа, подтверждающего адрес постоянного места жительства.
	
	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		// Инициализируем переменные
		ИННЮЛ = ""; // ИНН
		НаимЮЛПол = ""; // Полное наименование 
		ОКПО = "";
		ПолныйАдрЮР = "";
		ФормСобств = "";
		ОКОПФ = "";
		ОКФС = "";
		ОргПравФорм1 = "";
		ПолныйАдрес = "";
	КонецЕсли;
	
	ФИОРук = ""; // ФИО руководителя
	ФИОБух = ""; // ФИО бухгалтера
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОКПО", ОКПО);
		ОргСведения.Свойство("ОКОПФ", ОКОПФ);
		ОргСведения.Свойство("ОКФС", ОКФС);
		ОргСведения.Свойство("ПолныйАдрЮР", ПолныйАдрЮР);
		ОргСведения.Свойство("ФормСобств", ФормСобств);
		ОргСведения.Свойство("ОргПравФорм", ОргПравФорм1);
		ОргСведения.Свойство(Форма.СтруктураРеквизитовФормы.мТипАдреса, ПолныйАдрес);
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		// Обновим только то, что зависит от даты подписи
		Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено Тогда
			Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
		КонецЕсли;
		
	КонецЕсли;
	
	// Анализируем переменную ИННЮЛ, в которой хранится идентификационный
	// номер налогоплательщика, на предмет пустого значения.
	
	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = "";
	КонецЕсли;
	
	мИННЮЛ = ИННЮЛ;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргИНН") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргИНН.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргИНН.Значение = мИННЮЛ;
	КонецЕсли;
	
	// Работаем с названием ЮЛ
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргНазв") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргНазв.Значение))) Тогда
		// Если пустая строка на Титульном листе, то запишем имеющееся у нас значение
		Форма.ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	// Работаем с ФИО руководителя
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКПО") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение))) Тогда	
				
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = "";
		Иначе
			Форма.ТабличныйДокумент.Области.ОргКодОКПО.Значение = ОКПО;
		КонецЕсли;
		
	КонецЕсли;
			
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФорма") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФорма.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргФорма.Значение = ОргПравФорм1;
	КонецЕсли;
		
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКОПФ") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргКодОКОПФ.Значение = ОКОПФ;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКФС") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргКодОКФС.Значение = ОКФС;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргФормаСобств") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение))) Тогда	
		Форма.ТабличныйДокумент.Области.ОргФормаСобств.Значение = ФормСобств;
	КонецЕсли;
	
	Если (НЕ Форма.ТабличныйДокумент.Области.Найти("ОргПочтАдрес") = Неопределено) И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) Или (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение))) Тогда	
		
		Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес);
		Форма.СтруктураРеквизитовФормы.мАдресДляВыгрузки = ПолныйАдрес;
		
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргДиректор") = Неопределено И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "РасчетАктивов")
	   И НЕ Форма.ТабличныйДокумент.Области.Найти("ОргБухгалтер") = Неопределено
	   И ((Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) ИЛИ (ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение))) Тогда
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;
	
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено
		И (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
		ИЛИ ВПрограммеИзмененаДатаПодписи
		ИЛИ НЕ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение)) Тогда
		
		РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																		 Форма.СтруктураРеквизитовФормы,
																		 Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		
	КонецЕсли;																 
																	 
	Если НЕ Форма.ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено
		И (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
		ИЛИ ВПрограммеИзмененаДатаПодписи
		ИЛИ НЕ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение)) Тогда	
		
		РегламентированнаяОтчетность.ПолучитьЗначениеВидаЭкономическойДеятельности(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(Форма.ДатаПодписи,
																		 						 Форма.СтруктураРеквизитовФормы,
																		 						 Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение);
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОбОрганизации) = Тип("Структура") Тогда
		СведенияОбОрганизации.Вставить("ОргДиректор",    ФИОРук);
		СведенияОбОрганизации.Вставить("ОргБухгалтер",   ФИОБух);
		СведенияОбОрганизации.Вставить("ОргИНН",         мИННЮЛ);
		СведенияОбОрганизации.Вставить("ОргНазв",        НаимЮЛПол);
		СведенияОбОрганизации.Вставить("ОргКодОКПО",     ОКПО);
		СведенияОбОрганизации.Вставить("ОргКодОКВЭД",    Форма.ТабличныйДокумент.Области.ОргКодОКВЭД.Значение);
		СведенияОбОрганизации.Вставить("ОргФорма",       ОргПравФорм1);
		СведенияОбОрганизации.Вставить("ОргОтрасль",     Форма.ТабличныйДокумент.Области.ОргОтрасль.Значение);
		СведенияОбОрганизации.Вставить("ОргКодОКОПФ",    ОКОПФ);
		СведенияОбОрганизации.Вставить("ОргКодОКФС",     ОКФС);
		СведенияОбОрганизации.Вставить("ОргФормаСобств", ФормСобств);
		СведенияОбОрганизации.Вставить("ОргПочтАдрес",
			РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;
	
	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если СтруктураРеквизитовФормы.мБезОткрытияФормы Или СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = ОпределитьСтраницуПанелиПоКодуПоказателя(ИмяЯчейки);
		
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляТаблДокумента = "ТабличныйДокумент";
		
		Ключ = "_" + ВариантЗаполнения;
		мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
		
		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(ЭтаФорма, ИмяЯчейки);
		
		Если ВариантЗаполнения = 4 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;
			
		ИначеЕсли ВариантЗаполнения = 5 Тогда
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			ЭтаФорма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;
		
	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				
			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + СтрокаЧГ0(Инд);
					
				КонецЕсли;
				
				// пропускаем фантомные ячейки несуществующих многострочных частей
				Если ТабличныйДокумент.Области.Найти(ИмяПоказателя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТекОбластьЯчеек = ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);
				
				Если ВариантЗаполнения = 4 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				ИначеЕсли ВариантЗаполнения = 5 Тогда
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(ЭтаФорма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДополнительныхСтрок(ИмяОтчета)
	
	Если ИмяОтчета = "Баланс"
	 ИЛИ ИмяОтчета = "ОФР" Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		
		Если ИмяОтчета = "Баланс" Тогда
			ДеревоНастроек = ДеревоНастроекБаланс;
		ИначеЕсли ИмяОтчета = "ОФР" Тогда
			ДеревоНастроек = ДеревоНастроекОФР;
		КонецЕсли;
		
		Для Каждого СтрокаОсновногоПоказателя Из ДеревоНастроек.Строки Цикл
			Если Не ПустаяСтрока(СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки) Тогда
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
				ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
					"ДобавлениеСтроки_" + СтрокаОсновногоПоказателя.ИмяОбластиДопСтроки);
				Если ОбластьДополнительнойСтроки <> Неопределено Тогда
					ОбластьДополнительнойСтроки.Видимость = СтрокаОсновногоПоказателя.ВключатьВОтчет;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ДополнительнаяСтрока Из СтрокаОсновногоПоказателя.Строки Цикл
				Если Не ПустаяСтрока(ДополнительнаяСтрока.ИмяОбластиДопСтроки) Тогда
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
					ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
						"ДобавлениеСтроки_" + ДополнительнаяСтрока.ИмяОбластиДопСтроки);
					Если ОбластьДополнительнойСтроки <> Неопределено Тогда
						ОбластьДополнительнойСтроки.Видимость = ДополнительнаяСтрока.ВключатьВОтчет;
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтрокаУровня3 Из ДополнительнаяСтрока.Строки Цикл
					Если Не ПустаяСтрока(СтрокаУровня3.ИмяОбластиДопСтроки) Тогда
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
						ОбластьДополнительнойСтроки = ТабличныйДокумент.Области.Найти(
							"ДобавлениеСтроки_" + СтрокаУровня3.ИмяОбластиДопСтроки);
						Если ОбластьДополнительнойСтроки <> Неопределено Тогда
							ОбластьДополнительнойСтроки.Видимость = СтрокаУровня3.ВключатьВОтчет;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяОтчета = "ОФР" И ИспользуютсяМакетыЕНВД() Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок(ИмяОтчета);
		ДеревоНастройкиСостава = ДеревоНастроекОФР;
		
		ТабличныйДокумент.Области.ВТомЧисле2110.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		ТабличныйДокумент.Области.ВТомЧисле2120.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		ТабличныйДокумент.Области.ВТомЧисле2210.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		ТабличныйДокумент.Области.ВТомЧисле2220.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		ТабличныйДокумент.Области.ВТомЧисле2100.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		ТабличныйДокумент.Области.ВТомЧисле2200.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
		ТабличныйДокумент.Области.ВТомЧисле2300.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока23002");
		
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21101.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21102");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21201.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21202");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22101.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22101")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22102");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22201.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22201")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22202");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока21001.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока21002");
		ТабличныйДокумент.Области.ДобавлениеСтроки_ДопСтрока22001.Видимость
			= ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22001")
			ИЛИ ВключенВОтчет(ДеревоНастройкиСостава, "ДопСтрока22002");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользуютсяМакетыЕНВД() Экспорт
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	Возврат ОбъектОтчета.ИспользуютсяМакетыЕНВД(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьОписанияМногострочныхПоXML(ТекстXML);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстXML);
	ПостроительDOM = Новый ПостроительDOM;
	
	КорневойУзел = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Для Каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочныеЧасти" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УзелМногострочныхЧастей Из Узел.ДочерниеУзлы Цикл
			ИмяРазделаМногострочныхЧастей = ПолучитьАтрибутКакСтроку(УзелМногострочныхЧастей, "ИмяРаздела");
			Если ИспользоватьОписаниеМногострочнойЧасти(ИмяРазделаМногострочныхЧастей) Тогда
				ВнестиОписаниеМногострочныхЧастейРаздела(УзелМногострочныхЧастей);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрименяетсяПБУ18НаКонецПериода(ДатаОпределения)
	
	ЕстьОрганизацияПрименяющаяПБУ18 = Ложь;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(СтруктураРеквизитовФормы.Организация);
	
	Для Каждого ЭлементСпискаОрганизаций Из СписокОрганизаций Цикл
		ПроверяемаяОрганизация = ЭлементСпискаОрганизаций.Значение;
		Если ОрганизацияПрименяетПБУ18(ПроверяемаяОрганизация, ДатаОпределения) Тогда
			ЕстьОрганизацияПрименяющаяПБУ18 = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОрганизацияПрименяющаяПБУ18;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	ЭтоОтчетностьЗаГод = (СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета = КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Если ЭтоОтчетностьЗаГод Тогда
		ПризнакПоказаСтраницы = 1;
		ПризнакПечатиСтраницы = 1;
	Иначе
		ПризнакПоказаСтраницы = 0;
		ПризнакПечатиСтраницы = 0;
	КонецЕсли;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Баланс";
	СтрокаУровня1.Представление            = "Бухгалтерский баланс";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОФР";
	СтрокаУровня1.Представление            = "Отчет о финансовых результатах";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОИК";
	СтрокаУровня1.Представление            = "Отчет об изменениях капитала";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОДДС";
	СтрокаУровня1.Представление            = "Отчет о движении денежных средств";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОЦИС";
	СтрокаУровня1.Представление            = "Отчет о целевом использовании средств";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать
	= ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 1, ПризнакПечатиСтраницы);
	СтрокаУровня1.ПоказатьСтраницу
	= ?(СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации, 1, ПризнакПоказаСтраницы);
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РасчетАктивов";
	СтрокаУровня1.Представление            = "Расчет стоимости чистых активов";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения1";
	СтрокаУровня1.Представление            = "Пояснения 1. НМА и НИОКР";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения2";
	СтрокаУровня1.Представление            = "Пояснения 2. Основные средства";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения3";
	СтрокаУровня1.Представление            = "Пояснения 3. Финансовые вложения";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения4";
	СтрокаУровня1.Представление            = "Пояснения 4. Запасы";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения5";
	СтрокаУровня1.Представление            = "Пояснения 5. Дебиторская и кредиторская задолженность";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения6";
	СтрокаУровня1.Представление            = "Пояснения 6. Затраты на производство";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения7";
	СтрокаУровня1.Представление            = "Пояснения 7. Оценочные обязательства";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения8";
	СтрокаУровня1.Представление            = "Пояснения 8. Обеспечения обязательств";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Пояснения9";
	СтрокаУровня1.Представление            = "Пояснения 9. Государственная помощь";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = ПризнакПечатиСтраницы;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДополнительныеФайлы";
	СтрокаУровня1.Представление            = "Дополнительные файлы";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = Ложь;
	СтрокаУровня1.ПоказатьСтраницу         = ПризнакПоказаСтраницы;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	СтрокаУровня1.АвторасчетПоказателей    = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСдачиОтчетности(КодВидаСдачиОтчетности = 1)

	Если КодВидаСдачиОтчетности <> Неопределено Тогда
		Если НЕ (КодВидаСдачиОтчетности = 3) Тогда
			КодВидаСдачиОтчетности = 1;
		КонецЕсли;
	Иначе
		КодВидаСдачиОтчетности = 1;
	КонецЕсли;
	
	ВидСдачиОтчетности = КодВидаСдачиОтчетности;
	
	Если ВидСдачиОтчетности = 1 Тогда
		ПолеВыбораВидСдачиОтчетности = "Обычная";
	ИначеЕсли ВидСдачиОтчетности = 3 Тогда
		ПолеВыбораВидСдачиОтчетности = "Ликвидационная";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПолейПоПБУ18()
	
	ПрименяетсяПБУ18ВОтчетномПериоде = ПрименяетсяПБУ18НаКонецПериода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПрименяетсяПБУ18ВПредыдущемГоду  = ПрименяетсяПБУ18НаКонецПериода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	
	СкрыватьСтрокиРасшифровкиПоПБУ18 = (НЕ (ПрименяетсяПБУ18ВОтчетномПериоде ИЛИ ПрименяетсяПБУ18ВПредыдущемГоду));
	Если СкрыватьСтрокиРасшифровкиПоПБУ18
	   И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
		ТабличныйДокумент.Области.ВТомЧисле2421.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2421.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2430.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2430.Видимость = Ложь;
		
		ТабличныйДокумент.Области.ВТомЧисле2450.Видимость = Ложь;
		ТабличныйДокумент.Области.ДопСтрока2450.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзвлечьИсходнуюСтруктуруНастроек(Знач МакетНастроек, ИмяСекции, ДеревоНастроек)

	Если ТипЗнч(МакетНастроек) = Тип("Строка") Тогда
		МакетНастроек = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МакетНастроек);
	КонецЕсли;
		
	Если ПустаяСтрока(ИмяСекции) Тогда
		ДеревоНастроек.Очистить();
		Возврат;
	КонецЕсли;
	
	ПерваяСтрокаМакетаСостава = МакетНастроек.Области[ИмяСекции].Верх;
	ВысотаМакетаСостава = МакетНастроек.Области[ИмяСекции].Низ;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По МакетНастроек.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		МакетНастроек.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = ПерваяСтрокаМакетаСостава По ВысотаМакетаСостава Цикл
			НомСтр = ВысотаМакетаСостава - (НомерСтроки - ПерваяСтрокаМакетаСостава);
			Если МакетНастроек.Область(НомСтр, 1, НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоНастроек;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 1 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Наименование = СокрЛП(МакетНастроек.Область(НомСтр, 1).Текст);
				НовСтр.Код = СокрЛП(МакетНастроек.Область(НомСтр, 2).Текст);
				НовСтр.ВключатьВОтчет = НЕ ПустаяСтрока(МакетНастроек.Область(НомСтр, 3).Текст);
				НовСтр.Существенность = СокрЛП(МакетНастроек.Область(НомСтр, 4).Текст);
				НовСтр.ИмяОбластиДопСтроки = СокрЛП(МакетНастроек.Область(НомСтр, 5).Текст);
				НовСтр.ТипСостава = СокрЛП(МакетНастроек.Область(НомСтр, 6).Текст);
				НовСтр.МаксимальноеКоличество = СокрЛП(МакетНастроек.Область(НомСтр, 7).Текст);
				
				НовСтр.ДостДляРедактирования_Существенность = ЗначениеЗаполнено(НовСтр.Существенность);
				НовСтр.ДостДляРедактирования_МаксимальноеКоличество = ЗначениеЗаполнено(НовСтр.МаксимальноеКоличество);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;

	ТабличноеПоле = Форма[ТабличноеПоле];
	
	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакСтроку(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = "";
	Иначе
		Значение = Атрибут.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Функция ИспользоватьОписаниеМногострочнойЧасти(ИмяОписанияМногострочныхЧастей)
	
	Результат = Ложь;
	
	Для Каждого Отчет Из СтруктураОтчета Цикл
		Если Отчет.Значение.ИмяОписанияМногострочныхЧастей = ИмяОписанияМногострочныхЧастей Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеМногострочныхЧастейРаздела(УзелРаздела)
	
	ОписаниеТиповЧисло  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	
	ИмяПоляТабличногоДокумента = СтрЗаменить(УзелРаздела.Атрибуты.ПолучитьИменованныйЭлемент("РасположениеРаздела").Значение, "ПолеТабличногоДокумента", "");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	Для Каждого Узел Из УзелРаздела.ДочерниеУзлы Цикл
		
		Если Узел.ИмяУзла <> "МногострочнаяЧасть" Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторМногострочнойЧасти = ПолучитьАтрибутКакСтроку(Узел, "Идентификатор");
		МинимальноеКоличествоСтрок  = ПолучитьАтрибутКакЧисло(Узел, "МинимальноеКоличествоСтрок");
		МаксимальноеКоличествоСтрок = ПолучитьАтрибутКакЧисло(Узел, "МаксимальноеКоличествоСтрок");
		ВерхнийЭлементСтроки = ПолучитьАтрибутКакСтроку(Узел, "ВерхнийЭлементСтроки");
		НижнийЭлементСтроки  = ПолучитьАтрибутКакСтроку(Узел, "НижнийЭлементСтроки");
		
		СтруктураМногострочнойЧасти = Новый Структура;
		СтруктураМногострочнойЧасти.Вставить("Масштаб", Новый Структура("МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок", МинимальноеКоличествоСтрок, МаксимальноеКоличествоСтрок));
		СтруктураМногострочнойЧасти.Вставить("Габариты", Новый Структура("ВерхнийЭлементСтроки, НижнийЭлементСтроки", ВерхнийЭлементСтроки, НижнийЭлементСтроки));
		СтруктураМногострочнойЧасти.Вставить("ИмяПоляТабличногоДокумента", ИмяПоляТабличногоДокумента);
		
		Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
			
			Если ДочернийУзел.ИмяУзла = "Кодификаторы" Тогда
				ВнестиОписаниеКодификаторовМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Заголовки" Тогда
				ВнестиОписаниеЗаголовковМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			ИначеЕсли ДочернийУзел.ИмяУзла = "Состав" Тогда
				ВнестиОписаниеСоставаМногострочнойЧасти(ДочернийУзел, СтруктураМногострочнойЧасти);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураМногострочныхЧастей.Вставить(ИдентификаторМногострочнойЧасти, СтруктураМногострочнойЧасти);
		
	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияПрименяетПБУ18(Организация, ДатаОпределения)
	
	// При применении УСН ПБУ 18 применяться не может.
	// Однако возможна ситуация, когда в регистре учетной политики установлен признак
	// применения ПБУ 18 при системе налогообложения УСН.
				
	ОрганизацияПерешлаНаУСН   = (РегламентированнаяОтчетностьПереопределяемый.СистемаНалогообложения(Организация, ДатаОпределения) = "Упрощенная");
	ОрганизацияПрименяетПБУ18 = РегламентированнаяОтчетностьПереопределяемый.ПрименяетсяПБУ18(Организация, ДатаОпределения);
		
	Возврат (НЕ ОрганизацияПерешлаНаУСН И ОрганизацияПрименяетПБУ18);
	
КонецФункции

&НаСервере
Функция ПолучитьАтрибутКакЧисло(Узел, ИмяАтрибута)
	
	Атрибут = Узел.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);
	
	Если Атрибут = Неопределено Тогда
		Значение = 0;
	Иначе
		Значение = Число(Атрибут.Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ВнестиОписаниеКодификаторовМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивКодификаторов = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Кодификатор" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьКода = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьКода");
		НачальныйКод = ПолучитьАтрибутКакЧисло(ДочернийУзел, "НачальныйКод");
		
		МассивКодификаторов.Добавить(Новый Структура("Область, Код", ОбластьКода, НачальныйКод));
		
	КонецЦикла;
	
	Если МассивКодификаторов.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Кодификаторы", МассивКодификаторов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеЗаголовковМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
	
	МассивЗаголовков = Новый Массив;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Если ДочернийУзел.ИмяУзла <> "Заголовок" Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ОбластьЗаголовка");
		ШаблонЗаголовка = ПолучитьАтрибутКакСтроку(ДочернийУзел, "ШаблонЗаголовка");
		
		МассивЗаголовков.Добавить(Новый Структура("Область, Заголовок", ОбластьЗаголовка, ШаблонЗаголовка));
		
	КонецЦикла;
	
	Если МассивЗаголовков.Количество() > 0 Тогда
		СтруктураМногострочнойЧасти.Вставить("Заголовки", МассивЗаголовков);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВнестиОписаниеСоставаМногострочнойЧасти(Узел, СтруктураМногострочнойЧасти)
		
	ТаблицаСостава = Новый Массив;
	СтруктураСостава = Новый Структура;
	
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		
		Если ДочернийУзел.ИмяУзла <> "ЭлементСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ПолучитьАтрибутКакСтроку(ДочернийУзел, "Область");
		
		СтруктураСостава.Вставить(Область);
		
	КонецЦикла;
	
	НачальноеКоличествоСтрок = СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок;
	Для Инд = 1 По НачальноеКоличествоСтрок Цикл
		ТаблицаСостава.Добавить(СтруктураСостава);
	КонецЦикла;
	
	СтруктураМногострочнойЧасти.Вставить("Состав", ТаблицаСостава);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКодЕИ()

	Если ТабличныйДокумент.Области.Найти("КодЕИ") = Неопределено
	 ИЛИ ТабличныйДокумент.Области.Найти("НазвЕИ") = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "383";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в рублях";
		
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		ТабличныйДокумент.Области.КодЕИ.Значение = "384";
		ТабличныйДокумент.Области.НазвЕИ.Значение = "в тыс. рублей";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаМногострочногоПоказателя(ПолеТабличногоДокумента, ИмяПоказателяБезСчетчика)
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	ПолучитьСтруктуруМногострочныхЧастей();
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	КоличествоСтрокВМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
	
	Для Инд = 1 По КоличествоСтрокВМногострочнойЧасти Цикл
		ИмяОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(Инд);
		Область = ПолеТабличногоДокумента.Области[ИмяОбласти];
		Область.Формат = СтруктураРеквизитовФормы.мСтрокаФормата;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказательВходитВМногострочнуюЧасть(ИмяПоказателя)
	
	// Поиск показателя в множестве альтернативных описаний многострочных частей.
	ИмяСтруктурыМногострочнойЧасти
		= СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	Если ИмяСтруктурыМногострочнойЧасти <> Неопределено Тогда
		ПолучитьСтруктуруМногострочныхЧастей();
		СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИмяСтруктурыМногострочнойЧасти];
		КоличествоСтрокМногострочнойЧасти = СтруктураМногострочнойЧасти.Состав.Количество();
		Возврат КоличествоСтрокМногострочнойЧасти;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ВключенВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяОбластиДопСтроки)
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	Возврат ОбъектОтчета.ВключенВОтчет(СтруктураРеквизитовФормы.мВыбраннаяФорма,
									   ДеревоНастроекСтрокРасшифровки,
									   ИмяОбластиДопСтроки);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	РезультатЗапускаАвтозаполнения = СтруктураРеквизитовФормы.РезультатЗапускаАвтозаполненияПриСоздании;
	
	Если РезультатЗапускаАвтозаполнения <> Неопределено И РезультатЗапускаАвтозаполнения.Статус = "Выполняется" Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеАвтозаполненияВФоне", ЭтотОбъект);
		ПараметрыОжидания = ПараметрыОжидания();
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапускаАвтозаполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСтрокиЗавершение(РезультатНастройки, ДополнительныеПараметры) Экспорт
	
	Если РезультатНастройки <> Неопределено Тогда
		Модифицированность = Истина;
		СоставДополнительныхСтрок.Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДопСтрокПеренумероватьСтрокиРасшифровкиНаСервере(РезультатНастройки);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОФР" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	ТекстОбластиТаблДок = ТабличныйДокумент.Область().Текст;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиБаланса()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	
	ДеревоНастроек = ДеревоНастроекБаланс;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
			НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
			
			Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации И НомерСтроки = 15302 Тогда
				НомерСтроки = 15301;
			КонецЕсли;
			
			Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
				Если ЗначениеЗаполнено(Строка2Уровня.ВключатьВОтчет) Тогда
					ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
					НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
					ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
					
					КодСтроки = СтрокаЧГ0(НомерСтроки);
					
					Если НЕ ТабличныйДокумент.Области.Найти(ИмяОбластиНомера) = Неопределено Тогда
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						НомерСтроки = НомерСтроки + 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьСтрокиРасшифровкиОФР()
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	
	ДеревоНастроек = ДеревоНастроекОФР;
	
	ДлинаПрефиксаИмениДопстроки = СтрДлина("ДопСтрока");
	
	Для Каждого СтрокаДерева1Уровня Из ДеревоНастроек.Строки Цикл
		Если СтрокаДерева1Уровня.Строки.Количество() > 0 Тогда
			ИмяОбластиДопСтрокиПервогоЭлемента = СтрокаДерева1Уровня.Строки[0].ИмяОбластиДопСтроки;
			Если НЕ ПустаяСтрока(ИмяОбластиДопСтрокиПервогоЭлемента) Тогда
				НомерДопСтрокиПервогоЭлемента = Сред(ИмяОбластиДопСтрокиПервогоЭлемента, ДлинаПрефиксаИмениДопстроки + 1);
				НомерСтроки = Число(НомерДопСтрокиПервогоЭлемента);
				Для Каждого Строка2Уровня Из СтрокаДерева1Уровня.Строки Цикл
					Если Строка2Уровня.ВключатьВОтчет Тогда
						ИмяОбластиДопСтроки = Строка2Уровня.ИмяОбластиДопСтроки;
						НомерДопСтроки = Сред(ИмяОбластиДопСтроки, ДлинаПрефиксаИмениДопстроки + 1);
						ИмяОбластиНомера = "П00010" + НомерДопСтроки + "03";
						
						КодСтроки = СтрокаЧГ0(НомерСтроки);
						
						ОбластьНомера = ТабличныйДокумент.Области[ИмяОбластиНомера];
						ОбластьНомера.Текст = КодСтроки;
						
						НомерСтроки = НомерСтроки + 1;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ИмяПоказателя = ДополнительныеПараметры.ИмяПоказателя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "УдалитьСтроку", "");
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтроку(ИмяПоказателя);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОИК"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ОДДС"
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Пояснения3" Тогда
		РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ТекущаяОбласть = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если СтрНайти(ТекущаяОбласть.Имя, "ДобавитьСтроку") = 1 Тогда 
		ИмяПоказателя = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок_", "");
		ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "ДобавитьСтроку_", "");
	Иначе
		ИмяПоказателя = ИмяПоказателяБезСчетчика(ТекущаяОбласть.Имя);
	КонецЕсли;
	
	ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтрокуПоСистемеБухОтчетности(ИмяПоказателя)
	
	// Идентификатор многострочной части должен совпадать с именем области многострочной части в таблице.
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателя];
	
	Попытка
		
		Если ИдентификаторМногострочнойЧасти = "ДопСтрока3400" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ПолучитьСтруктуруМногострочныхЧастей();
		
		ОписаниеМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецПопытки;
	
	// Если количество строк достигло предела, то добавления не производится.
	КоличествоСтрокВМногострочнойЧасти = ОписаниеМногострочнойЧасти.Состав.Количество();
	Если ЛОЖЬ И ОписаниеМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок <> 0	
	   И КоличествоСтрокВМногострочнойЧасти >= ОписаниеМногострочнойЧасти.Масштаб.МаксимальноеКоличествоСтрок Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Невозможно добавить строку многострочного раздела: достигнуто максимальное количество.'");

		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Очищаем именованную область многострочной части и сохраняем исходную позицию.
	ИмяОбластиМногострочнойЧастиВТаблице = ИдентификаторМногострочнойЧасти;
	Если СтрНайти(ИдентификаторМногострочнойЧасти, "П00010") = 1 ИЛИ СтрНайти(ИдентификаторМногострочнойЧасти, "П10010") Тогда
		КодСтроки = Сред(ИмяОбластиМногострочнойЧастиВТаблице, 7);
		Пока Лев(КодСтроки, 1) = "0" Цикл
			КодСтроки = Сред(КодСтроки, 2);
		КонецЦикла;
		ИмяОбластиМногострочнойЧастиВТаблице = "ДопСтрока" + КодСтроки;
	КонецЕсли;
	
	Если ТабличныйДокумент.Области.Найти(ИмяОбластиМногострочнойЧастиВТаблице) <> Неопределено Тогда
		ИсходнаяОбластьСтрокВерх = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Верх;
		ИсходнаяОбластьСтрокНиз  = ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Низ;
		ТабличныйДокумент.Области[ИмяОбластиМногострочнойЧастиВТаблице].Имя = "";
	Иначе
		ИсходнаяОбластьСтрокВерх = 0;
		ИсходнаяОбластьСтрокНиз  = 0;
	КонецЕсли;
	
	ПостфиксКоличествоСтрокВМногострочнойЧасти  = "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти);
	ПостфиксКоличествоСтрокВМногострочнойЧасти1 = "_" + СтрокаЧГ0(КоличествоСтрокВМногострочнойЧасти + 1);
	
	// За основу для копирования используется последняя строка многострочного раздела.
	ИмяВерхнегоЭлементаСтроки = ОписаниеМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксКоличествоСтрокВМногострочнойЧасти;
	ИмяНижнегоЭлементаСтроки  = ОписаниеМногострочнойЧасти.Габариты.НижнийЭлементСтроки + ПостфиксКоличествоСтрокВМногострочнойЧасти;
	
	ОбластьВставляемойСтрокиВерх = ТабличныйДокумент.Области[ИмяВерхнегоЭлементаСтроки].Верх;
	ОбластьВставляемойСтрокиНиз  = ТабличныйДокумент.Области[ИмяНижнегоЭлементаСтроки].Низ;
	
	ОбластьВставляемойСтроки = ТабличныйДокумент.Область(ОбластьВставляемойСтрокиВерх, , ОбластьВставляемойСтрокиНиз, );
	
	// Добавляем строку к макету и назначаем имена областям показателей.
	ТабличныйДокумент.ВставитьОбласть(ОбластьВставляемойСтроки, , ТипСмещенияТабличногоДокумента.ПоВертикали, Ложь);
	
	ВысотаСтроки = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
	Смещение = ВысотаСтроки * КоличествоСтрокВМногострочнойЧасти;
	
	СтруктураЭлементовМногострочнойЧасти = Новый Структура;
	
	ОсноваИмениПоказателяДляДопСтроки = "";
	Для Каждого Элемент Из ОписаниеМногострочнойЧасти.Состав[0] Цикл
		ОсноваИмениПоказателя = Элемент.Ключ;
		Если Лев(ОсноваИмениПоказателя, 1) = "П" И Прав(ОсноваИмениПоказателя, 2) = "01" Тогда 
			ОсноваИмениПоказателяДляДопСтроки = ОсноваИмениПоказателя;
		КонецЕсли;
		
		СтруктураЭлементовМногострочнойЧасти.Вставить(ОсноваИмениПоказателя);
		
		ИсходнаяОбластьПоказателя = ТабличныйДокумент.Области[ОсноваИмениПоказателя + "_1"];
		
		ОбластьПоказателяНовойСтроки = ТабличныйДокумент.Область(ИсходнаяОбластьПоказателя.Верх + Смещение, ИсходнаяОбластьПоказателя.Лево,
		                                                               ИсходнаяОбластьПоказателя.Низ + Смещение, ИсходнаяОбластьПоказателя.Право);
		ИмяОбластиНовойСтроки = ОсноваИмениПоказателя + ПостфиксКоличествоСтрокВМногострочнойЧасти1;
		
		ОбластьПоказателяНовойСтроки.Имя = ИмяОбластиНовойСтроки;
		
		Если ТабличныйДокумент.Области[ИмяОбластиНовойСтроки].СодержитЗначение Тогда
			ОбластьПоказателяНовойСтроки.Значение = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	// Назначаем новую именнованную область многострочной части.
	Если ИсходнаяОбластьСтрокВерх <> 0 Тогда
		ОбластьДляИменования = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокВерх, , ИсходнаяОбластьСтрокНиз + ВысотаСтроки, );
		ОбластьДляИменования.Имя = ИмяОбластиМногострочнойЧастиВТаблице;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(ИсходнаяОбластьСтрокНиз + 1, 2, ИсходнаяОбластьСтрокНиз + 1, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениПоказателяДляДопСтроки  + ПостфиксКоличествоСтрокВМногострочнойЧасти1;
	Иначе 
		Верх = ОбластьВставляемойСтрокиВерх;
		Шаг = ОбластьВставляемойСтрокиНиз - ОбластьВставляемойСтрокиВерх + 1;
		ОбластьУдалитьНовая = ТабличныйДокумент.Область(Верх + Шаг, 2, Верх + Шаг, 2);
		ОбластьУдалитьНовая.Имя = "УдалитьСтроку" + ОсноваИмениПоказателяДляДопСтроки  + "_" + СтрокаЧГ0(ОписаниеМногострочнойЧасти.Состав.Количество() + 1);
	КонецЕсли;
	
	// Зафиксируем увеличение многострочной части в структуре описаний.
	ОписаниеМногострочнойЧасти.Состав.Добавить(СтруктураЭлементовМногострочнойЧасти);
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(ОписаниеМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Установим первое поле добавленной строки текущим.
	НомерПоследнейСтроки = ОписаниеМногострочнойЧасти.Состав.Количество();
	ИмяОбластиДляФокусаВвода = ИмяПоказателя + "_" + СтрокаЧГ0(НомерПоследнейСтроки);
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяОбластиДляФокусаВвода];
	
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоказателяБезСчетчика(Знач ИмяПоказателя)
	
	ПозицияСчетчика = СтрНайти(ИмяПоказателя, "_");
	
	Если ПозицияСчетчика > 0 Тогда
		Возврат Лев(ИмяПоказателя, ПозицияСчетчика - 1);
	КонецЕсли;
	
	Возврат ИмяПоказателя;
	
КонецФункции

&НаСервере
Процедура УдалитьДополнительнуюСтроку(ИмяПоказателя)
	
	УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуПосистемеБухОтчетности(ИмяПоказателя)
	
	// Идентификатор многострочной части должен совпадать с областью многострочной части в таблице.
	ИмяПоказателяБезСчетчика = ИмяПоказателяБезСчетчика(ИмяПоказателя);
	
	ИдентификаторМногострочнойЧасти = СтруктураРеквизитовФормы.СоответствиеПоказателейМногострочныхЧастейИхОписанию[ИмяПоказателяБезСчетчика];
	
	Если ИдентификаторМногострочнойЧасти = Неопределено
	 ИЛИ ИдентификаторМногострочнойЧасти = "ДопСтрока3400" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	СтруктураМногострочнойЧасти = СтруктураМногострочныхЧастей[ИдентификаторМногострочнойЧасти];
	
	// Номер строки удаляемой многострочной части определим по имени выделенной ячейки.
	НомерУдаляемойСтроки = Число(Сред(ИмяПоказателя, СтрНайти(ИмяПоказателя, "_") + 1));
	ИндексСтрокиТаблицы = НомерУдаляемойСтроки - 1;
	
	Если СтруктураМногострочнойЧасти.Состав.Количество() > СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Тогда
		
		ПеремещатьФокусВвода = (НомерУдаляемойСтроки = СтруктураМногострочнойЧасти.Состав.Количество());
		
		ПостфиксНомерУдаляемойСтроки = "_" + СтрокаЧГ0(НомерУдаляемойСтроки);
		
		УдаляемаяОбластьВерх = ТабличныйДокумент.Области[СтруктураМногострочнойЧасти.Габариты.ВерхнийЭлементСтроки + ПостфиксНомерУдаляемойСтроки].Верх;
		УдаляемаяОбластьНиз  = ТабличныйДокумент.Области[СтруктураМногострочнойЧасти.Габариты.НижнийЭлементСтроки  + ПостфиксНомерУдаляемойСтроки].Низ;
		
		ВысотаСтроки = УдаляемаяОбластьНиз - УдаляемаяОбластьВерх + 1;
		УдаляемаяОбласть = ТабличныйДокумент.Область(УдаляемаяОбластьВерх, , УдаляемаяОбластьНиз, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		// Переименование областей многострочной части.
		Для Инд = НомерУдаляемойСтроки + 1 По СтруктураМногострочнойЧасти.Состав.Количество() Цикл
			ПостфиксИнд  = "_" + СтрокаЧГ0(Инд);
			ПостфиксИнд1 = "_" + СтрокаЧГ0(Инд - 1);
			Для Каждого Элемент Из СтруктураМногострочнойЧасти.Состав[0] Цикл
				ОсноваИмениОбласти = Элемент.Ключ;
				Если Прав(ОсноваИмениОбласти, 2) = "01" И Лев(ОсноваИмениОбласти, 1) = "П" Тогда 
					ПереименуемаяОбласть = ТабличныйДокумент.Области["УдалитьСтроку" + ОсноваИмениОбласти + ПостфиксИнд];
					ПереименуемаяОбласть.Имя = "УдалитьСтроку" + ОсноваИмениОбласти + ПостфиксИнд1;
				КонецЕсли;
				ПереименуемаяОбласть = ТабличныйДокумент.Области[ОсноваИмениОбласти + ПостфиксИнд];
				ПереименуемаяОбласть.Имя = ОсноваИмениОбласти + ПостфиксИнд1;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураМногострочнойЧасти.Состав.Удалить(ИндексСтрокиТаблицы);
		
		Если ПеремещатьФокусВвода Тогда
			// Установим первое поле добавленной строки текущим.
			НомерПоследнейСтроки = СтруктураМногострочнойЧасти.Состав.Количество();
			ИмяБудущейТекущейОбласти = ИмяПоказателяБезСчетчика + "_" + СтрокаЧГ0(НомерПоследнейСтроки);
			Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[ИмяБудущейТекущейОбласти];
		КонецЕсли;
		
	Иначе
		Для Инд = 1 По СтруктураМногострочнойЧасти.Масштаб.МинимальноеКоличествоСтрок Цикл
			ПостфиксИнд  = "_" + СтрокаЧГ0(Инд);
			Для Каждого Элемент Из СтруктураМногострочнойЧасти.Состав[0] Цикл
				ИмяОчищаемойОбласти = Элемент.Ключ + ПостфиксИнд;
				ОчищаемаяОбласть = ТабличныйДокумент.Области[ИмяОчищаемойОбласти];
				Если ОчищаемаяОбласть.СодержитЗначение Тогда
					Если ТипЗнч(ОчищаемаяОбласть.Значение) = Тип("Строка") Тогда
						ОчищаемаяОбласть.Значение = "";
					Иначе
						ОчищаемаяОбласть.Значение = 0;
					КонецЕсли;
				Иначе
					ОчищаемаяОбласть.Текст = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренумероватьСтрокиИЗаполнитьЗаголовкиМногострочнойЧасти(СтруктураМногострочнойЧасти, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ОтрисоватьЗначкиУдаленияСтрок(ТабличныйДокумент);
	ТекущийЭлемент = Элементы.ТабличныйДокумент;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеСтруктураМногострочныхЧастей
		= ПоместитьВоВременноеХранилище(СтруктураМногострочныхЧастей, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаВидОтчетностиЗавершение(ПериодЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ПериодЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ВидОтчетности"].Значение = ПериодЭлемент.Представление;
		ВидСдачиОтчетности = ПериодЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = "";
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Фактический адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрФакт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт").АдрФакт;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрЮР";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрЮР").АдрЮР;
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрПочт";
		СтруктураРеквизитовФормы.мАдресДляВыгрузки = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрПочт").АдрПочт;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияОКВЭДиВидаЭкономическойДеятельности()
	
	Если СтруктураДанныхБаланс.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргКодОКВЭД);
		
	КонецЕсли;	
	
	Если СтруктураДанныхОДДС.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОДДС.ОргКодОКВЭД);
																	 
	КонецЕсли;																 
	
	Если СтруктураДанныхОИК.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОИК.ОргКодОКВЭД);
																	 
	КонецЕсли;																 
		
	Если СтруктураДанныхОЦИС.Свойство("ОргКодОКВЭД") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИС.ОргКодОКВЭД);
																	 
	КонецЕсли;																 
		
	Если СтруктураДанныхОФР.Свойство("ОргКодОКВЭД") Тогда
	
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОФР.ОргКодОКВЭД);
																	 
	КонецЕсли;																 
																	 
	Если СтруктураДанныхБаланс.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхБаланс.ОргОтрасль);
		
	КонецЕсли;	
	
	Если СтруктураДанныхОДДС.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОДДС.ОргОтрасль);
		
	КонецЕсли;
		
	Если СтруктураДанныхОИК.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОИК.ОргОтрасль);
		
	КонецЕсли;
	
	Если СтруктураДанныхОЦИС.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОЦИС.ОргОтрасль);
		
	КонецЕсли;	
	
	Если СтруктураДанныхОФР.Свойство("ОргОтрасль") Тогда
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеВидаЭкономическойДеятельности(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 СтруктураДанныхОФР.ОргОтрасль);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДискФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда 
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, Истина);
				
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайл(ИмяУдаляемогоФайла)
	
	УдаляемыйФайл = Новый Файл(ИмяУдаляемогоФайла);
	Если УдаляемыйФайл.Существует() Тогда
		УдалитьФайлы(ИмяУдаляемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = Неопределено;
	СтруктураХранения.ИмяФайла         = Неопределено;
	СтруктураХранения.Размер           = Неопределено;
	СтруктураХранения.ДатаДобавления   = Неопределено;
	
	// Учет различий в хранении дополнительных файлов в "старой" и "новой" версии реализации.
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = "";
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог, ВидДополнительногоФайла)
	
	СтруктураХранения = СтруктураРеквизитовФормы[ВидДополнительногоФайла];
	
	ИмяФайла     = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузки = ПолучитьИмяВременногоФайла();
	
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ФайлЗагрузкиДвоичныеДанные.Записать(ФайлЗагрузки);
	
	Файл = Новый Файл(ФайлЗагрузки);
	
	СтруктураХранения.СведенияИзменены = Истина;
	СтруктураХранения.ХранилищеФайла   = АдресФайла;
	СтруктураХранения.ИмяФайла         = ИмяФайла;
	СтруктураХранения.Размер           = Файл.Размер();
	СтруктураХранения.ДатаДобавления   = ТекущаяДатаСеанса();
	
	Модифицированность = Истина;
	
	УдалитьВременныйФайл(ФайлЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(ВидДополнительногоФайла)
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект, ВидДополнительногоФайла);
	
	Попытка
		
		НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, ВидДополнительногоФайла) Экспорт
	
	Если НЕ Результат Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		
		Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".DOC"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".XLS"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".RTF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".TIF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
			
			ТекстПредупреждения = НСтр(
				"ru='Файл пояснительной записки должен иметь одно из допустимых расширений: DOC, XLS, RTF, TIF, PDF, JPG!'");
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".TIF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
			 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
			
			Если ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
				ВидДопФайла = "Файл аудиторского заключения";
			Иначе
				ВидДопФайла = "Файл заявления ревизионного союза сельскохозяйственных производителей";
			КонецЕсли;
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
				"ru='%1 должен иметь одно из допустимых расширений: TIF, PDF, JPG!'"), ВидДопФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			
			Прервать;
			
		Иначе
			
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ВыбИмяФайла, Каталог, ВидДополнительногоФайла);
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
	Если ВидДополнительногоФайла = "ФайлПояснительнойЗаписки" Тогда
		ИмяФайлаПояснительнойЗаписки = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	ИначеЕсли ВидДополнительногоФайла = "ФайлАудиторскогоЗаключения" Тогда
		ИмяФайлаАудиторскогоЗаключения = СтруктураРеквизитовФормы[ВидДополнительногоФайла].ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ЗаполнитьЗаголовкиПоЕдиницеИзмерения(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи()
	
	ДанныеРаздела = ЭтаФорма["СтруктураДанныхОИК"];
	
	Если ДанныеРаздела.Количество() <= 4
		И (ДанныеРаздела.Свойство("П000100360003")
		ИЛИ ДанныеРаздела.Свойство("П000100360004")
		ИЛИ ДанныеРаздела.Свойство("П000100360005")
		ИЛИ ДанныеРаздела.Свойство("ДатаПодписиОтчета")) Тогда
		
		МассивПоказателей = Новый Массив;
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360003"),
			ДанныеРаздела["П000100360003"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360004"),
			ДанныеРаздела["П000100360004"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("П000100360005"),
			ДанныеРаздела["П000100360005"], 0));
		МассивПоказателей.Добавить(?(ДанныеРаздела.Свойство("ДатаПодписиОтчета"),
			ДанныеРаздела["ДатаПодписиОтчета"], '00010101'));
		
		Возврат МассивПоказателей;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных(ЗаполнятьСведенияОбОрганизации = Истина)
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		МассивПоказателейОИК = Неопределено;
		Если Раздел.ИмяСтраницы = "ОИК" Тогда
			// Предварительное сохранение данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			МассивПоказателейОИК = ДанныеРазделаОИКСодержащегоТолькоЧистыеАктивыИДатуПодписи();
		КонецЕсли;
		
		ПоказательДатаПодписиРаздела = '00010101';
		ВРазделеТолькоДатаПодписи
			= ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 1
			И ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ДатаПодписиОтчета");
		Если ВРазделеТолькоДатаПодписи Тогда
			// Предварительное сохранение значения единственного
			// показателя раздела - "Даты подписи отчета".
			ПоказательДатаПодписиРаздела = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].ДатаПодписиОтчета;
		КонецЕсли;
				  
		Если НЕ Раздел.МногостраничностьВРазделе
			И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0
			ИЛИ (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 2
			И ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль")
			И ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД"))
			ИЛИ (МассивПоказателейОИК <> Неопределено ИЛИ ВРазделеТолькоДатаПодписи))
			И НЕ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда 
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(МакетОтчета(Раздел.ИмяСтраницы));
			
			ПоказатьПериод(Раздел.ИмяСтраницы);
	
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("НомерКорректировки") = Неопределено Тогда
				ТабличныйДокумент.Области.НомерКорректировки.Значение = НомерКорректировки;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ВидОтчетности") = Неопределено Тогда
				Если ВидСдачиОтчетности = 1 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Обычная";
				ИначеЕсли ВидСдачиОтчетности = 3 Тогда
					ТабличныйДокумент.Области.ВидОтчетности.Значение = "Ликвидационная";
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргОтрасль") = Неопределено
			   И ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргОтрасль") Тогда
				ТабличныйДокумент.Области.ОргОтрасль.Значение = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].ОргОтрасль;
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.Области.Найти("ОргКодОКВЭД") = Неопределено
			   И ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Свойство("ОргКодОКВЭД") Тогда
				ТабличныйДокумент.Области.ОргКодОКВЭД.Значение = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].ОргКодОКВЭД;
			КонецЕсли;
			
			Если ЗаполнятьСведенияОбОрганизации Тогда
				ЗаполнитьСведенияОбОрганизацииНаСервере();
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
			// Восстановление предварительно сохраненных данных "Чистых активов"
			// и "Даты подписи отчета" раздела ОИК.
			Если МассивПоказателейОИК <> Неопределено Тогда
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360003", МассивПоказателейОИК[0]);
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360004", МассивПоказателейОИК[1]);
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("П000100360005", МассивПоказателейОИК[2]);
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить("ДатаПодписиОтчета", МассивПоказателейОИК[3]);
			КонецЕсли;
			
			Если ВРазделеТолькоДатаПодписи Тогда
				// Восстановление предварительно сохраненного значения единственного
				// показателя раздела - "Даты подписи отчета".
				ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Вставить(
					"ДатаПодписиОтчета", ПоказательДатаПодписиРаздела);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в рублях точность не может превышать 2 знака.'");
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;
	
	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Баланс: при выводе сумм в тысячах рублей точность не может превышать 3 знака.'");
			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
// СохранитьНаКлиенте

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Процедура СохранитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла)
	
	Если СтруктураДопФайла.СведенияИзменены = Истина
	 ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		Если ЗначениеЗаполнено(СтруктураДопФайла.ХранилищеФайла) Тогда
			
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СтруктураДопФайла.ХранилищеФайла));
			ЗаписьРегистраСведений.ИмяФайла = СтруктураДопФайла.ИмяФайла;
			ЗаписьРегистраСведений.Размер = СтруктураДопФайла.Размер;
			ЗаписьРегистраСведений.ДатаДобавления = СтруктураДопФайла.ДатаДобавления;
			ЗаписьРегистраСведений.Записать();
			
		Иначе
			
			ЗаписьРегистраСведений.Удалить();
			
		КонецЕсли;
		
		СтруктураДопФайла.СведенияИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписиПоясненийПоБалансу(ПоказателиОтчета)
	
	РасшифровкаПодписи = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ОргДиректор;
	ДатаПодписи        = ПоказателиОтчета.ПолеТабличногоДокументаБаланс.ДатаПодписиОтчета;
	
	Для Инд = 1 По 9 Цикл
		ПоказателиПояснения = ПоказателиОтчета["ПолеТабличногоДокументаПояснения" + Инд];
		
		ПоказателиПояснения.Вставить("ОргДиректор", РасшифровкаПодписи);
		ПоказателиПояснения.Вставить("ДатаПодписиОтчета", ДатаПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОборотыСчета75_01(СохраненноеЗначение)
	
	Если ТипЗнч(СохраненноеЗначение) = Тип("Структура") Тогда
		
		Для Каждого ЭлементСтруктуры Из СохраненноеЗначение Цикл
			
			ИмяЭлемента = ЭлементСтруктуры.Ключ;
			ЗначениеЭлемента = ЭлементСтруктуры.Значение;
			
			Если ТипЗнч(ЗначениеЭлемента) = Тип("Число")
				И СтруктураРеквизитовФормы.ОборотыСчета75_01.Свойство(ИмяЭлемента) Тогда
				СтруктураРеквизитовФормы.ОборотыСчета75_01[ИмяЭлемента] = ЗначениеЭлемента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруДанныхПояснения6()
	
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100561003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100561003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100562003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100562003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100563003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100563003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100564003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100564003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100565003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100565003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100566003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100566503") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566503", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100567003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100567003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100568003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100568003", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100560003") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100560003", 0);
	КонецЕсли;
	
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100561004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100561004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100562004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100562004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100563004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100563004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100564004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100564004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100565004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100565004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100566004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100566504") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566504", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100567004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100567004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100568004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100568004", 0);
	КонецЕсли;
	Если НЕ СтруктураДанныхПояснения6.Свойство("П000100560004") Тогда
		СтруктураДанныхПояснения6.Вставить("П000100560004", 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьТаблицуВариантовЗаполнения()
	
	Если ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.НайтиСтроки(
		Новый Структура("КодПоказателя", "П100100321008")).Количество() = 0 Тогда
		
		НовыйЭлемент = ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.Добавить();
		НовыйЭлемент["КодПоказателя"] = "П100100321008";
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			НовыйЭлемент["ВариантЗаполнения"] = 0;
		Иначе
			НовыйЭлемент["ВариантЗаполнения"] = 4;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.НайтиСтроки(
		Новый Структура("КодПоказателя", "П100100331008")).Количество() = 0 Тогда
		
		НовыйЭлемент = ЭтаФорма["ТаблицаВариантыЗаполненияОИК"][0].ТаблицаВариантовЗаполнения.Добавить();
		НовыйЭлемент["КодПоказателя"] = "П100100331008";
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			НовыйЭлемент["ВариантЗаполнения"] = 0;
		Иначе
			НовыйЭлемент["ВариантЗаполнения"] = 4;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонвертироватьСтруктуруМногострочныхЧастей(СохрСтруктураМногострочныхЧастей)
	
	Для каждого ЭлемИницСтруктурыМногострочныхЧастей Из СтруктураМногострочныхЧастей Цикл
		Если НЕ СохрСтруктураМногострочныхЧастей.Свойство(ЭлемИницСтруктурыМногострочныхЧастей.Ключ) Тогда
			СохрСтруктураМногострочныхЧастей.Вставить(
				ЭлемИницСтруктурыМногострочныхЧастей.Ключ,
				ЭлемИницСтруктурыМногострочныхЧастей.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьДанныеДополнительногоФайла(СтруктураДопФайла, ВидДопФайла, ИмяДопФайлаПредыдущейВерсии)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		ЗаписьРегистраСведений.ВидДополнительногоФайла = ВидДопФайла;
		
		ЗаписьРегистраСведений.Прочитать();
		
		Если ЗначениеЗаполнено(ЗаписьРегистраСведений.ВидДополнительногоФайла) Тогда
			СтруктураДопФайла.Вставить("СведенияИзменены", Ложь);
			СтруктураДопФайла.ХранилищеФайла
				= ПоместитьВоВременноеХранилище(ЗаписьРегистраСведений.СодержимоеФайла.Получить(), Новый УникальныйИдентификатор);
			СтруктураДопФайла.Вставить("ИмяФайла",       ЗаписьРегистраСведений.ИмяФайла);
			СтруктураДопФайла.Вставить("Размер",         ЗаписьРегистраСведений.Размер);
			СтруктураДопФайла.Вставить("ДатаДобавления", ЗаписьРегистраСведений.ДатаДобавления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставДополнительныхСтрокИзСохраненныхДанных(СохраненныйСоставДополнительныхСтрок)
	
	// Обновление настроек Бухгалтерского баланса.
	СохраненныйСоставДопСтрокБаланса = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("Баланс", СохраненныйСоставДопСтрокБаланса) Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопстрокБаланса.Строки Цикл
			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
				ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
				НайденныеСтроки = ДеревоНастроекБаланс.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекБаланс
			= ПоместитьВоВременноеХранилище(ДеревоНастроекБаланс, УникальныйИдентификатор);
		
	КонецЕсли;
	
	// Обновление настроек Отчета о прибылях и убытках.
	СохраненныйСоставДопСтрокОФР = Неопределено;
	Если СохраненныйСоставДополнительныхСтрок.СтруктураСоставов.Свойство("ОФР", СохраненныйСоставДопСтрокОФР) Тогда
		
		ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
		
		Для Каждого СтрокаУровня1 Из СохраненныйСоставДопСтрокОФР.Строки Цикл
			
			ЭтоФиксированныеДопстроки = ПустаяСтрока(СтрокаУровня1.ТипСостава);
			
			Если ЭтоФиксированныеДопстроки Тогда
				Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
					ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
					НайденныеСтроки = ДеревоНастроекОФР.Строки.НайтиСтроки(
						Новый Структура("ИмяОбластиДопСтроки", ИмяОбластиДопСтроки), Истина);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ВключатьВОтчет = СтрокаУровня2.ВключатьВОтчет;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НайденныеСтрокиУровня1 = ДеревоНастроекОФР.Строки.НайтиСтроки(
					Новый Структура("ИмяОбластиДопСтроки", СтрокаУровня1.ИмяОбластиДопСтроки), Истина);
				Если НайденныеСтрокиУровня1.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(НайденныеСтрокиУровня1[0], СтрокаУровня1);
					Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
						НоваяПользовательскаяСтрока = НайденныеСтрокиУровня1[0].Строки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяПользовательскаяСтрока, СтрокаУровня2);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураРеквизитовФормы.АдресВоВремХранилищеДеревоНастроекОФР
			= ПоместитьВоВременноеХранилище(ДеревоНастроекОФР, УникальныйИдентификатор);
		ОбновитьВключенныеДопСтрокиОФРПриПримененииЕНВД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизацииВРазделахНаСервере()
	
	СведенияОбОрганизации = Новый Структура;
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, , СведенияОбОрганизации);
	
	Если ТипЗнч(СведенияОбОрганизации) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.МногостраничностьВРазделе
			ИЛИ Лев(Раздел.ИмяСтраницы, 6) = "Баланс"
			ИЛИ Раздел.ИмяСтраницы = "ДополнительныеФайлы" Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы];
		
		Если ДанныеРаздела.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Пок Из СведенияОбОрганизации Цикл
			Если ДанныеРаздела.Свойство(Пок.Ключ) Тогда
				Если Пок.Ключ = "ОргБухгалтер" Тогда
					Если Раздел.ИмяСтраницы = "РасчетАктивов" Тогда
						ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
					КонецЕсли;
				ИначеЕсли Пок.Ключ = "ОргКодОКПО" Тогда
					Если СтруктураРеквизитовФормы.ИП Тогда
						ДанныеРаздела.Вставить(Пок.Ключ, "");
					Иначе
						ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
					КонецЕсли;
				Иначе
					ДанныеРаздела.Вставить(Пок.Ключ, Пок.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтраницаВидимаНаСервере(ИмяСтраницыОтчета)
	
	Результат = Ложь;
	
	ДеревоСтраницОтчета = ДанныеФормыВЗначение(мДеревоВыбранныхСтраниц, Тип("ДеревоЗначений"));
	
	НайденнаяСтраницаОтчета = ДеревоСтраницОтчета.Строки.Найти(ИмяСтраницыОтчета, "ИмяСтраницы");
	Если НайденнаяСтраницаОтчета <> Неопределено Тогда
		Результат = (НайденнаяСтраницаОтчета.ПоказатьСтраницу <> 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВоВременномХранилище);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер = Неопределено;
	Если СтруктураДанных.Свойство("Контейнер", Контейнер) И ТипЗнч(Контейнер) = Тип("Структура") Тогда
		
		ИменаЗаполняемыхРазделов = СтруктураРеквизитовФормы.ИменаАвтоЗаполняемыхРазделов;
		
		Для Каждого ЭлементСтруктуры Из Контейнер Цикл
			
			ИмяРаздела    = ЭлементСтруктуры.Ключ;
			ДанныеРаздела = ЭлементСтруктуры.Значение;
			Для каждого ДанныеПоказателя Из ДанныеРаздела Цикл
				ИмяПоказателя      = ДанныеПоказателя.Ключ;
				ЗначениеПоказателя = ДанныеПоказателя.Значение;
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
					ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
					МассивСтрок = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
					Если МассивСтрок.Количество() > 0 Тогда
						МассивСтрок[0].ЗначениеАвто = ЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ИменаЗаполняемыхРазделов.Найти(ИмяРаздела) <> Неопределено Тогда
				
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 1);
				МассивСтрокВЗ_1 = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				ПарамОтбора = Новый Структура("ВариантЗаполнения", 2);
				МассивСтрокВЗ_2 = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПарамОтбора);
				
				ЭтаФорма["СтруктураДанных" + ИмяРаздела] = ЭлементСтруктуры.Значение;
				
				Для каждого ЭлМассива Из МассивСтрокВЗ_1 Цикл
					ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] = 0;
				КонецЦикла;
				Для каждого ЭлМассива Из МассивСтрокВЗ_2 Цикл
					ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя]
						= ЭтаФорма["СтруктураДанных" + ИмяРаздела][ЭлМассива.КодПоказателя] + ЭлМассива.Дельта;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Получение данных оборотов по счету 75.01, для исключения их
	// при последующем расчете из данных строки 1230 в форме "Расчет активов".
	ОборотыСчета75_01 = Неопределено;
	Если СтруктураДанных.Свойство("ОборотыСчета75_01", ОборотыСчета75_01) Тогда
		УстановитьОборотыСчета75_01(ОборотыСчета75_01);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду = Неопределено Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566503", 0);
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду Тогда
			СтруктураДанныхПояснения6.Вставить("П000100567003", 0);
			СтруктураДанныхПояснения6.Вставить("П000100568003", 0);
		Иначе
			СтруктураДанныхПояснения6.Вставить("П000100566503", 0);
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду = Неопределено Тогда
		СтруктураДанныхПояснения6.Вставить("П000100566504", 0);
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду Тогда
			СтруктураДанныхПояснения6.Вставить("П000100567004", 0);
			СтруктураДанныхПояснения6.Вставить("П000100568004", 0);
		Иначе
			СтруктураДанныхПояснения6.Вставить("П000100566504", 0);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураДанных.Свойство("ТаблицаРасшифровки", ТаблицаРасшифровки) И ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
		Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Истина;
	КонецЕсли;
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	Если СтруктураМногострочныхЧастей = Неопределено Тогда
		СтруктураМногострочныхЧастей = Новый Структура;
	КонецЕсли;
	
	СтруктураМСЧ = Неопределено;
	Если СтруктураДанных.Свойство("СтруктураМногострочныхЧастей", СтруктураМСЧ) И ТипЗнч(СтруктураМСЧ) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры ИЗ СтруктураМСЧ Цикл
			СтруктураМногострочныхЧастей.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		ОчиститьНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере(НаимТекущегоРаздела = "", ОчищатьНомерКорректировки = Истина)
	
	СохраняемыеЗначения = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		СохраняемыеЗначения.Вставить("АудитДа",      СтруктураДанныхБаланс.АудитДа);
		СохраняемыеЗначения.Вставить("АудитНет",     СтруктураДанныхБаланс.АудитНет);
		СохраняемыеЗначения.Вставить("АудиторИНН",   СтруктураДанныхБаланс.АудиторИНН);
		СохраняемыеЗначения.Вставить("АудиторОГРН",  СтруктураДанныхБаланс.АудиторОГРН);
		СохраняемыеЗначения.Вставить("НаимАудитора", СтруктураДанныхБаланс.НаимАудитора);
		
		СтруктураДанныхБаланс.Очистить();
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа04 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа05 = 0;
		СтруктураРеквизитовФормы.ОборотыСчета75_01.Графа06 = 0;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОФР" Тогда
		СтруктураДанныхОФР.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОИК" Тогда
		СтруктураДанныхОИК.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОДДС" Тогда
		СтруктураДанныхОДДС.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "ОЦИС" Тогда
		СтруктураДанныхОЦИС.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "РасчетАктивов" Тогда
		СтруктураДанныхРасчетАктивов.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения1" Тогда
		СтруктураДанныхПояснения1.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения2" Тогда
		СтруктураДанныхПояснения2.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения3" Тогда
		СтруктураДанныхПояснения3.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения4" Тогда
		СтруктураДанныхПояснения4.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения5" Тогда
		СтруктураДанныхПояснения5.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения6" Тогда
		СтруктураДанныхПояснения6.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения7" Тогда
		СтруктураДанныхПояснения7.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения8" Тогда
		СтруктураДанныхПояснения8.Очистить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Пояснения9" Тогда
		СтруктураДанныхПояснения9.Очистить();
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела)
	 ИЛИ НаимТекущегоРаздела = "Баланс" Тогда
		Если НЕ ЗначениеЗаполнено(НаимТекущегоРаздела) Тогда 
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			
			Если ВидСдачиОтчетности = 1 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ИначеЕсли ВидСдачиОтчетности = 3 Тогда
				СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Ликвидационная");
			КонецЕсли;
			
		ИначеЕсли ОчищатьНомерКорректировки Тогда
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ВидСдачиОтчетности = 1;
			СтруктураДанныхБаланс.Вставить("НомерКорректировки", НомерКорректировки);
			СтруктураДанныхБаланс.Вставить("ДатаПодписиОтчета", ДатаПодписи);
			СтруктураДанныхБаланс.Вставить("ВидОтчетности", "Обычная");
			ОблВидОтчетности = ТабличныйДокумент.Области.Найти("ВидОтчетности");
			Если ОблВидОтчетности <> Неопределено Тогда 
				ОблВидОтчетности.Значение = "Обычная";
				ТабличныйДокумент.Области.Найти("НомерКорректировки").Значение = НомерКорректировки;
				ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета").Значение = ДатаПодписи;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДанныхБаланс.Вставить("АудитДа",      СохраняемыеЗначения.АудитДа);
		СтруктураДанныхБаланс.Вставить("АудитНет",     СохраняемыеЗначения.АудитНет);
		СтруктураДанныхБаланс.Вставить("АудиторИНН",   СохраняемыеЗначения.АудиторИНН);
		СтруктураДанныхБаланс.Вставить("АудиторОГРН",  СохраняемыеЗначения.АудиторОГРН);
		СтруктураДанныхБаланс.Вставить("НаимАудитора", СохраняемыеЗначения.НаимАудитора);
		
	КонецЕсли;
	
	ОчиститьТабличноеПоле(НаимТекущегоРаздела);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	// Очищаем расшифровку.
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
		
		Если НЕ ПустаяСтрока(НаимТекущегоРаздела) Тогда
			Если НаимТекущегоРаздела <> "ДополнительныеФайлы" Тогда
				Для Каждого ОбластьОтчета Из ТабличныйДокумент.Области Цикл
					Если ОбластьОтчета.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
						Продолжить;
					КонецЕсли;
					СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяПоказателя", ОбластьОтчета.Имя));
					Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
						ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТаблицаРасшифровки.Очистить();
			Элементы.Расшифровать.Доступность = Ложь;
			Элементы.ТабличныйДокументКонтекстноеМенюРасшифровать.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПоле(НаимТекущегоРаздела = "")
	
	ПоказателиНеПодлежащиеОчистке = Новый Массив;
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргНазв");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКПО");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргОтрасль");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКВЭД");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФорма");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКОПФ");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргФормаСобств");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргКодОКФС");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргПочтАдрес");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргДиректор");
	ПоказателиНеПодлежащиеОчистке.Добавить("ОргБухгалтер");
	ПоказателиНеПодлежащиеОчистке.Добавить("НомерКорректировки");
	ПоказателиНеПодлежащиеОчистке.Добавить("ВидОтчетности");
	ПоказателиНеПодлежащиеОчистке.Добавить("ДатаПодписиОтчета");
	
	ПоказателиНеПодлежащиеОчистке.Добавить("АудитДа");
	ПоказателиНеПодлежащиеОчистке.Добавить("АудитНет");
	ПоказателиНеПодлежащиеОчистке.Добавить("АудиторИНН");
	ПоказателиНеПодлежащиеОчистке.Добавить("АудиторОГРН");
	ПоказателиНеПодлежащиеОчистке.Добавить("НаимАудитора");
	
	ПолучитьСтруктуруМногострочныхЧастей();
	
	// Определяем содержание многострочных блоков и удаляем все строки кроме первой
	Для Каждого ЭлементСтруктуры Из СтруктураМногострочныхЧастей Цикл
		
		СтруктураМногострочнойЧасти = ЭлементСтруктуры.Значение;
		
		Если ЗначениеЗаполнено(НаимТекущегоРаздела)
		   И НЕ СтруктураМногострочнойЧасти.ИмяПоляТабличногоДокумента = НаимТекущегоРаздела Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГруппы = СтруктураМногострочнойЧасти.Состав;
		
		КопияСтруктураГруппы = СтруктураГруппы[0];
		
		// очищаем структуру группы и воссоздаем строку по умолчанию
		СтруктураГруппы.Очистить();
		СтруктураГруппы.Добавить(КопияСтруктураГруппы);
		
	КонецЦикла;
	
	Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличныйДокумент.Области[Инд];

		// Ячейки не подлежащие очистки
		Если ПоказателиНеПодлежащиеОчистке.Найти(ТекущаяОбласть.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение = Неопределено ИЛИ НЕ ТекущаяОбласть.СодержитЗначение Тогда	
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита <> Неопределено И ТекущаяОбласть.Защита Тогда
			Если НЕ (СтруктураРеквизитовФормы.НаимТекущегоРаздела = "РасчетАктивов"
				И НаимТекущегоРаздела <> "РасчетАктивов"
				И ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число")) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("ЗначенияИзСписка", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", Истина);
	КонецЕсли;
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	КонецЕсли;
	
	ДоступныеЕдиницыИзмерения = Новый Массив;
	ДоступныеЕдиницыИзмерения.Добавить(ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1);
	ДоступныеЕдиницыИзмерения.Добавить(ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	ПараметрыФормы.Вставить("ДоступныеЕдиницыИзмерения", ДоступныеЕдиницыИзмерения);
	
	ФормаНастройкиОтчета = ПолучитьФорму("Отчет.РегламентированныйОтчетБухОтчетность.Форма.НастройкиОтчета",
		ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт   = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ПолучитьСведенияОПоказателяхОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтруктураОтчета", СтруктураОтчета);
	ПараметрыОтчета.Вставить("СтруктураРеквизитовФормы", СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма, ПараметрыОтчета);
	
	ПереопределитьВариантыЗаполненияИЗначенияПоказателей();
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьВариантыЗаполненияИЗначенияПоказателей()
	
	// Переопределение вариантов заполнения строк 5670 и 5680 в случае учета
	// расходов по элементам затрат, отдельно для отчетного и предыдущего года,
	// с обнулением значений, т.к. отчет мог быть создан путем копирования.
	
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду = Неопределено Тогда
		РазрешитьВводЗначенияПоказателя(
			ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100566503");
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВОтчетномГоду Тогда
			ЗапретитьВводЗначенияПоказателя(
				ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100567003");
			ЗапретитьВводЗначенияПоказателя(
				ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100568003");
		Иначе
			ЗапретитьВводЗначенияПоказателя(
				ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100566503");
		КонецЕсли;
	КонецЕсли;
	Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду = Неопределено Тогда
		РазрешитьВводЗначенияПоказателя(
			ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100566504");
	Иначе
		Если СтруктураРеквизитовФормы.УчетРасходовПоЭлементамЗатрат.РасходыУчитываютсяПоЭЗВПредыдущемГоду Тогда
			ЗапретитьВводЗначенияПоказателя(
				ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100567004");
			ЗапретитьВводЗначенияПоказателя(
				ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100568004");
		Иначе
			ЗапретитьВводЗначенияПоказателя(
				ТаблицаВариантыЗаполненияПояснения6, СтруктураДанныхПояснения6, "П000100566504");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		РасчетНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазрешитьВводЗначенияПоказателя(ТаблВариантовЗаполнения, СтруктураДанныхРаздела, ИмяПоказателя)
	
	Массив = ТаблВариантовЗаполнения[0].ТаблицаВариантовЗаполнения.НайтиСтроки(
		Новый Структура("КодПоказателя", ИмяПоказателя));
	Если Массив.Количество() > 0 Тогда
		Массив[0].ВариантЗаполнения = 0;
	Иначе
		НовЭлем = ТаблВариантовЗаполнения[0].ТаблицаВариантовЗаполнения.Добавить();
		НовЭлем["КодПоказателя"] = ИмяПоказателя;
		НовЭлем["ВариантЗаполнения"] = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗапретитьВводЗначенияПоказателя(ТаблВариантовЗаполнения, СтруктураДанныхРаздела, ИмяПоказателя)
	
	Массив = ТаблВариантовЗаполнения[0].ТаблицаВариантовЗаполнения.НайтиСтроки(
		Новый Структура("КодПоказателя", ИмяПоказателя));
	Если Массив.Количество() > 0 Тогда
		Массив[0].ВариантЗаполнения = 5;
	Иначе
		НовЭлем = ТаблВариантовЗаполнения[0].ТаблицаВариантовЗаполнения.Добавить();
		НовЭлем["КодПоказателя"] = ИмяПоказателя;
		НовЭлем["ВариантЗаполнения"] = 5;
	КонецЕсли;
	
	Если СтруктураДанныхРаздела.Свойство(ИмяПоказателя) Тогда
		СтруктураДанныхРаздела.Вставить(ИмяПоказателя, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ПараметрыОтчета.Вставить("ИменаВычитаемыхПоказателей", ПолучитьСписокВычитаемыхПоказателей());
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаАктуализацииДанныхПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуЗакрытияМесяца" Тогда
		
		РегламентированнаяОтчетностьКлиентПереопределяемый.ОткрытьФормуЗакрытияМесяца(
														   СтруктураРеквизитовФормы.Организация,
														   СтруктураРеквизитовФормы.ДатаАктуальностиДанных);
		
	КонецЕсли;												   
													   
КонецПроцедуры

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
		
	Если СтрНайти(ЭтаФорма.Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	Возврат ОбъектОтчета.ИзвлечьСтруктуруXML(СтруктураРеквизитовФормы.мВыбраннаяФорма,
											 СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	ОбъектОтчета.СформироватьСтруктуруПоказателей(
		СтруктураРеквизитовФормы.мВыбраннаяФорма,
		мДанныеОтчета,
		СтруктураРеквизитовФормы,
		ДеревоНастроекБаланс,
		ДеревоНастроекОФР);
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	Возврат ОбъектОтчета.ПараметрыВыгрузкиОтчета(СтруктураРеквизитовФормы.мВыбраннаяФорма,
												 СтруктураРеквизитовФормы,
												 мДанныеОтчета);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
			
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	
	ОбъектОтчета.ЗаполнитьДанными(СтруктураРеквизитовФормы.мВыбраннаяФорма,
								  ПараметрыВыгрузки,
								  ДеревоВыгрузки,
								  ЭтаФорма,
								  мДанныеОтчета,
								  СтруктураРеквизитовФормы);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВычитаемыхПоказателей()
	
	ОбъектОтчета = ОбъектОтчета(ЭтаФорма.ИмяФормы);
	Возврат ОбъектОтчета.ПолучитьСписокВычитаемыхПоказателей(СтруктураРеквизитовФормы.мВыбраннаяФорма,
															 СтруктураРеквизитовФормы);
	
КонецФункции

&НаСервере
Процедура УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма)
	
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировки");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = 0;
		Обл1.Формат = "";
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("НомерКорректировкиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетности");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Значение = "";
		Обл1.ГраницаСверху = НетЛинии;
		Обл1.ГраницаСнизу = НетЛинии;
		Обл1.ГраницаСлева = НетЛинии;
		Обл1.ГраницаСправа = НетЛинии;
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("ВидОтчетностиЗаголовок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("ОрганизацииДляЗаполненияОтчета");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	
	Обл1 = ПечатнаяФорма.Области.Найти("НастройкаСоставаСтрок");
	Если Обл1 <> Неопределено Тогда 
		Обл1.Текст = "";
	КонецЕсли;
	
	Для Каждого Обл Из ПечатнаяФорма.Области Цикл
		Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 
			И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение = Ложь Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Пока Истина Цикл 
		НадоПрервать = Истина;
		
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл
			Если СтрНайти(Обл.Имя, "ДобавлениеСтроки_") = 1 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда 
				ПечатнаяФорма.УдалитьОбласть(Обл, ТипСмещенияТабличногоДокумента.ПоВертикали);
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Обл Из ПечатнаяФорма.Области Цикл
			Если СтрНайти(Обл.Имя, "ДобавитьСтроку") = 1 И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
				ОблМод = ПечатнаяФорма.Область(Обл.Верх,,Обл.Низ);
				ПечатнаяФорма.УдалитьОбласть(ОблМод, ТипСмещенияТабличногоДокумента.ПоВертикали);
				НадоПрервать = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НадоПрервать Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1)
	
	МассивСкрытыхОбластей = Новый Массив;
	
	// Скрываем области макетов отчетов, не предназначенные для вывода
	Если Парам1.ИмяСтраницы = "Баланс" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюБаланс();
	ИначеЕсли Парам1.ИмяСтраницы = "ОФР" Тогда
		МассивСкрытыхОбластей = СкрытьОбластиПередПечатьюОФР();
	КонецЕсли;
		
	ВывестиНаПечатьЛистОбщая(Парам1);
		
	// Восстанавливаем скрытые области после формирования листов
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Истина;
	КонецЦикла;
	
	Если Парам1.ИмяСтраницы = "ФормаОтчета" Тогда
		УстановитьВидимостьПолейПоПБУ18();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкрытьОбластиПередПечатьюБаланс()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	СкрытьОбластиПередПечатьюБаланс_2012(МассивСкрытыхОбластей);
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Процедура СкрытьОбластиПередПечатьюБаланс_2012(МассивСкрытыхОбластей)
	
	СтрокаОтраженияСчета46 = "1230";
	СтрокаОтраженияСчета96 = "1230";
	
	СтрокаОтраженияСчета76_АВ = "1520";
	СтрокаОтраженияСчета76_ВА = "1230";
	
	ПолучитьДеревоНастроекСоставаДопСтрок("Баланс");
	ДеревоНастройкиСостава = ДеревоНастроекБаланс;
	
	// Строка 1110
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11101, ДопСтрока11102");
	МногострочнаяЧасть = "П1001001110";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1110"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1110"]);
	КонецЕсли;
	
	// Строка 1120
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11201, ДопСтрока11202");
	МногострочнаяЧасть = "П1001001120";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1120"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1120"]);
	КонецЕсли;
	
	// Строка 1130
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001130";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1130"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1130"]);
	КонецЕсли;
	
	// Строка 1140
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001140";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1140"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1140"]);
	КонецЕсли;
	
	// Строка 1150
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11501, ДопСтрока11502, ДопСтрока11503, ДопСтрока11504, ДопСтрока11505, ДопСтрока11506, ДопСтрока11507, ДопСтрока11508, ДопСтрока11509");
	МногострочнаяЧасть = "П1001001150";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1150"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1150"]);
	КонецЕсли;
	
	// Строка 1160
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11601, ДопСтрока11602, ДопСтрока11603, ДопСтрока11604");
	МногострочнаяЧасть = "П1001001160";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1160"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1160"]);
	КонецЕсли;
	
	// Строка 1170
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11701");
	МногострочнаяЧасть = "П1001001170";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1170"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1170"]);
	КонецЕсли;
	
	// Строка 1180
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001180";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1180"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1180"]);
	КонецЕсли;
	
	// Строка 1190
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока11901, ДопСтрока11902, ДопСтрока11903");
	МногострочнаяЧасть = "П1001001190";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1190"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1190"]);
	КонецЕсли;
	
	// Строка 1210
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12101, ДопСтрока12102, ДопСтрока12103, ДопСтрока12104, ДопСтрока12105, 
															 |ДопСтрока12106, " + ?(СтрокаОтраженияСчета46 = "1210", "ДопСтрока12107", "") + ", ДопСтрока12108, ДопСтрока12109, ДопСтрока12110, 
															 |ДопСтрока12111, ДопСтрока12112");
	МногострочнаяЧасть = "П1001001210";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1210"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1210"]);
	КонецЕсли;
	
	// Строка 1220
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12201, ДопСтрока12202, ДопСтрока12203, ДопСтрока12204, ДопСтрока12205, 
															 |ДопСтрока12206, ДопСтрока12207");
	МногострочнаяЧасть = "П1001001220";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1220"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1220"]);
	КонецЕсли;
	
	// Строка 1230
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12301, ДопСтрока12302, ДопСтрока12303, ДопСтрока12304, ДопСтрока12305, 
	                                                         |ДопСтрока12306, ДопСтрока12307, ДопСтрока12308, ДопСтрока12309, ДопСтрока12310"
	                                                         + ?(СтрокаОтраженияСчета46 = "1230", ", ДопСтрока12311", "")
	                                                         + ?(СтрокаОтраженияСчета96 = "1230", ", ДопСтрока12312", "")
	                                                         + ", ДопСтрока12313");
	МногострочнаяЧасть = "П1001001230";
	
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1230"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1230"]);
	КонецЕсли;
	
	// Строка 1240
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12401, ДопСтрока12402, ДопСтрока12403, ДопСтрока12404, ДопСтрока12405, 
															 |ДопСтрока12406, ДопСтрока12407");
	МногострочнаяЧасть = "П1001001240";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1240"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1240"]);
	КонецЕсли;
	
	// Строка 1250
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12501, ДопСтрока12502, ДопСтрока12503, ДопСтрока12504, ДопСтрока12505, 
															 |ДопСтрока12506, ДопСтрока12507, ДопСтрока12508, ДопСтрока12509, ДопСтрока12510, 
															 |ДопСтрока12511, ДопСтрока12512");
	МногострочнаяЧасть = "П1001001250";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1250"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1250"]);
	КонецЕсли;
	
	// Строка 1260
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока12601, ДопСтрока12602, ДопСтрока12603, ДопСтрока12604, " + ?(СтрокаОтраженияСчета76_АВ = "1260", "ДопСтрока12605,", "")
															 + "ДопСтрока12606, ДопСтрока12607, ДопСтрока12608, ДопСтрока12609, ДопСтрока12610"
															 + ?(СтрокаОтраженияСчета96 = "1260", ", ДопСтрока12610", "")
															 + ?(СтрокаОтраженияСчета46 = "1260", ", ДопСтрока12611", ""));
															 
	МногострочнаяЧасть = "П1001001260";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1260"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1260"]);
	КонецЕсли;
	
	// Строка 1310
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001310";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1310"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1310"]);
	КонецЕсли;
	
	// Строка 1320
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001320";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1320"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1320"]);
	КонецЕсли;
	
	// Строка 1340
	Если НЕ СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13401, ДопСтрока13402, ДопСтрока13403");
		МногострочнаяЧасть = "П1001001340";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1340"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1340"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1350
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1350"]);
	КонецЕсли;
	
	// Строка 1360
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока13601, ДопСтрока13602");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001360";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1360"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1360"]);
	КонецЕсли;
	
	// Строка 1370
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001370";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1370"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1370"]);
	КонецЕсли;
	
	// Строка 1410
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока14101, ДопСтрока14102, ДопСтрока14103, ДопСтрока14104");
	МногострочнаяЧасть = "П1001001410";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1410"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1410"]);
	КонецЕсли;
	
	// Строка 1420
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001420";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1420"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1420"]);
	КонецЕсли;
	
	// Строка 1450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1450"]);
	КонецЕсли;
	
	// Строка 1510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15101, ДопСтрока15102, ДопСтрока15103, ДопСтрока15104, ДопСтрока15105, 
															 |ДопСтрока15106, ДопСтрока15107, ДопСтрока15108, ДопСтрока15109, ДопСтрока15110, 
															 |ДопСтрока15111, ДопСтрока15112");
	МногострочнаяЧасть = "П1001001510";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1510"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1510"]);
	КонецЕсли;
	
	// Строка 1520
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15201, ДопСтрока15202, ДопСтрока15203, ДопСтрока15204, ДопСтрока15205, 
															 |ДопСтрока15206, ДопСтрока15207, ДопСтрока15208, ДопСтрока15209");
	МногострочнаяЧасть = "П1001001520";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1520"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1520"]);
	КонецЕсли;
	
	// Строка 1530
	Если СтруктураРеквизитовФормы.ЭтоБалансНекоммерческойОрганизации Тогда
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	Иначе
		СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока15301, ДопСтрока15302, ДопСтрока15303, ДопСтрока15304, ДопСтрока15305");
	КонецЕсли;
	МногострочнаяЧасть = "П1001001530";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1530"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1530"]);
	КонецЕсли;
	
	// Строка 1540
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001540";
	Если НЕ ТабличныйДокумент.Области.Найти(МногострочнаяЧасть + "01_1") = Неопределено Тогда
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1540"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1540"]);
		КонецЕсли;
	КонецЕсли;
	
	// Строка 1550
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001001550";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле1550"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока1550"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СкрытьОбластиПередПечатьюОФР()
	
	МассивСкрытыхОбластей = Новый Массив;
	
	ПолучитьДеревоНастроекСоставаДопСтрок("ОФР");
	ДеревоНастройкиСостава = ДеревоНастроекОФР;
	
	Если НЕ ИспользуютсяМакетыЕНВД() Тогда
		
		// Строка 2100
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002100";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2100"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2100"]);
		КонецЕсли;
	
		// Строка 2200
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002200";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2200"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2200"]);
		КонецЕсли;
	
		// Строка 2300
		СтруктураФиксированныхСтрокРасшифровки = Неопределено;
		МногострочнаяЧасть = "П1001002300";
		Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2300"]);
		КонецЕсли;
		Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
			МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2300"]);
		КонецЕсли;
	
	КонецЕсли;
	
	// Строка 2310
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23101, ДопСтрока23102, ДопСтрока23103");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2310"]);
	КонецЕсли;
	
	// Строка 2320
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23201, ДопСтрока23202, ДопСтрока23203");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2320"]);
	КонецЕсли;
	
	// Строка 2330
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока23301, ДопСтрока23302");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2330"]);
	КонецЕсли;
	
	// Строка 2340
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока23401, ДопСтрока23402, ДопСтрока23403, ДопСтрока23404, ДопСтрока23405,
		|ДопСтрока23406, ДопСтрока23407, ДопСтрока23408, ДопСтрока23409, ДопСтрока23410,
		|ДопСтрока23411, ДопСтрока23412, ДопСтрока23413, ДопСтрока23414, ДопСтрока23415,
		|ДопСтрока23416, ДопСтрока23417, ДопСтрока23418, ДопСтрока23419, ДопСтрока23420,
		|ДопСтрока23421, ДопСтрока23422, ДопСтрока23423, ДопСтрока23424, ДопСтрока23425,
		|ДопСтрока23426");
	МногострочнаяЧасть = "П1001002340";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2340"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2340"]);
	КонецЕсли;
	
	// Строка 2350
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура(
		"ДопСтрока23501, ДопСтрока23502, ДопСтрока23503, ДопСтрока23504, ДопСтрока23505,
		|ДопСтрока23506, ДопСтрока23507, ДопСтрока23508, ДопСтрока23509, ДопСтрока23510,
		|ДопСтрока23511, ДопСтрока23512, ДопСтрока23513, ДопСтрока23514, ДопСтрока23515,
		|ДопСтрока23516, ДопСтрока23517, ДопСтрока23518, ДопСтрока23519, ДопСтрока23520,
		|ДопСтрока23521, ДопСтрока23522, ДопСтрока23523, ДопСтрока23524, ДопСтрока23525,
		|ДопСтрока23526, ДопСтрока23527, ДопСтрока23528, ДопСтрока23529, ДопСтрока23530,
		|ДопСтрока23521, ДопСтрока23532, ДопСтрока23533, ДопСтрока23534");
	МногострочнаяЧасть = "П1001002350";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2350"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2350"]);
	КонецЕсли;
	
	// Строка 2421
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002421";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2421"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2421"]);
	КонецЕсли;
	
	// Строка 2430
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002430";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2430"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2430"]);
	КонецЕсли;
	
	// Строка 2450
	СтруктураФиксированныхСтрокРасшифровки = Неопределено;
	МногострочнаяЧасть = "П1001002450";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2450"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2450"]);
	КонецЕсли;
	
	// Строка 2460
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока24601, ДопСтрока24602, ДопСтрока24603");
	МногострочнаяЧасть = "П1001002460";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2460"]);
	КонецЕсли;
	Если НЕ ОтображатьМногострочнуюЧасть(МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ДопСтрока2460"]);
	КонецЕсли;
	
	// Строка 2510
	СтруктураФиксированныхСтрокРасшифровки = Новый Структура("ДопСтрока25101, ДопСтрока25102");
	МногострочнаяЧасть = "";
	Если НЕ ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрокРасшифровки, МногострочнаяЧасть) Тогда
		МассивСкрытыхОбластей.Добавить(ТабличныйДокумент.Области["ВТомЧисле2510"]);
	КонецЕсли;
	
	// Скрываем области согласно полученному массиву
	Для Каждого СкрываемаяОбласть Из МассивСкрытыхОбластей Цикл
		СкрываемаяОбласть.Видимость = Ложь;
	КонецЦикла;
	
	Возврат МассивСкрытыхОбластей;
	
КонецФункции

&НаСервере
Функция ОтображатьВТомЧисле(ДеревоНастройкиСостава, СтруктураФиксированныхСтрок, МногострочнаяЧасть)

	// обработка фиксированных строк
	Если СтруктураФиксированныхСтрок <> Неопределено Тогда
		Для Каждого ФиксированнаяСтрока Из СтруктураФиксированныхСтрок Цикл
			КодСтроки = ФиксированнаяСтрока.Ключ;
			Если ВключенВОтчет(ДеревоНастройкиСостава, КодСтроки) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// обработка пользовательских строк
	Возврат ОтображатьМногострочнуюЧасть(МногострочнаяЧасть);
	
КонецФункции

&НаСервере
Функция ОтображатьМногострочнуюЧасть(МногострочнаяЧасть)
	
	Если НЕ ПустаяСтрока(МногострочнаяЧасть) Тогда
		
		ПолучитьСтруктуруМногострочныхЧастей();
		
		Если НЕ СтруктураМногострочныхЧастей.Свойство(МногострочнаяЧасть) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТаблицаМногострочногоРаздела = СтруктураМногострочныхЧастей[МногострочнаяЧасть].Состав;
		
		Если ТаблицаМногострочногоРаздела.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаМногострочногоРаздела[0] Цикл
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области[Колонка.Ключ + "_1"].Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьЛистОбщая(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");

	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяЛиста);	
	
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(ИмяЛиста);
	НомЛиста = 0;
	
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
						
		СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", ПолучитьКартуМногострочныхСекцийЛиста(Стр.Верх, Стр.Низ));
			
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста);
		
		Для Каждого Эл Из ПечатныеЛисты Цикл
			Для Каждого Обл Из Эл.Значение.Области Цикл
				Если СтрНайти(Обл.Имя, "УдалитьСтроку") = 1 
					И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
					И Обл.СодержитЗначение = Ложь Тогда 
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЦикла;
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(Эл.Значение, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКартуЛистовРаздела(ИмяРаздела)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	КолСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТабличныйДокумент.Область(Сч, , Сч, ).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	
	Возврат Карта;
	
КонецФункции

&НаСервере
Функция ПолучитьКартуМногострочныхСекцийЛиста(Верх, Низ)
	
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТабличныйДокумент.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И СтрНайти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРаздела(СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста));
		Возврат СписокПечатныхФорм;
	КонецЕсли;

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличныйДокумент.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(ИмяРаздела, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(ИмяРаздела, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(ИмяРаздела, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	флПрервать = Ложь;
	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;//?(Ном = 1, ПустыеСтрокиМногострочныхЧастей[НомерМнЧ], ПустойТабличныйДокумент);
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		//Защита против частей разделов, которые не помещаются на лист, если даже
		//выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			Если Рез <> Ложь ИЛИ СтрНайти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа
		ТаблПоле = ТабличныйДокумент.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокПечатныхФорм;
	
КонецФункции

&НаСервере
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(СтруктураПараметровЛиста)
	
	Перем ИмяЛиста;           // имя выводимого на печать листа
	Перем Ориентация;         // ориентация страницы
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = ?(Ориентация = "Портрет", ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличныйДокумент, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для каждого Область Из ТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем области, скрытые от пользователя
			Если Область.Видимость <> Неопределено И НЕ Область.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	
	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			ОбластьВыводимаяНаПечать = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		УдалитьНенужноеИзПечатнойФормы(ПечатнаяФорма);
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличныйДокумент.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
				Иначе
					ПечатнаяФорма.Вывести(ОбластьОграничители);
					ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			// выводим область без расширения пустыми строками
			ПечатнаяФорма.Вывести(ОбластьОграничители);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	КонецЕсли;
	
	ПечатнаяФорма.Область().ЦветФона = Новый Цвет;
	
	Возврат ПечатнаяФорма;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПечатнаяФорма, ДанныеОтчета)
	
	Перем Индекс, ИндексСтр;
	
	Для Каждого ЭкземплярДанных Из ДанныеОтчета Цикл
		ИмяОбласти = ЭкземплярДанных.Ключ;
		Значение   = ЭкземплярДанных.Значение;
		
		Если ПечатнаяФорма.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			ПечатнаяФорма.Области[ИмяОбласти].Текст = Значение;
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
		Пока ПечатнаяФорма.Области.Найти(ИмяОбласти + "_" + ИндексСтр) <> Неопределено Цикл
			ПечатнаяФорма.Области[ИмяОбласти + "_" + ИндексСтр].Текст = Сред(Значение, Индекс, 1);
			РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьНастройкиФормыВыбораПечати()
	
	ЭтоЛиквидационнаяОтчетность = (ВидСдачиОтчетности = 3);
	ЭтоГодоваяОтчетность = Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12;
	ПечатьPDF417Разрешена = НЕ СтруктураРеквизитовФормы.ИП
		И (ЭтоГодоваяОтчетность ИЛИ ЭтоЛиквидационнаяОтчетность);
	
	Если НастройкиФормыВыбораПечати = Неопределено Тогда
		НастройкиФормыВыбораПечати = Новый Структура;
	КонецЕсли;
	
	НастройкиФормыВыбораПечати.Вставить("ДоступенПункт1", ЛОЖЬ);
	НастройкиФормыВыбораПечати.Вставить("ВключатьКодыСтрок", Истина);
	
	Возврат НастройкиФормыВыбораПечати;
	
КонецФункции

&НаСервере
Функция ПолучитьНизМногострочнойЧасти(Раздел, ИмяОбласти)
	
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Раздел);
	Обл = ТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
	Низ = ТабличныйДокумент.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	Конеццикла;
	Возврат Низ - 1;
	
КонецФункции

&НаСервере
Функция ПолучитьОбластиМногострочнойЧасти(Раздел, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Раздел);
	Обл = ТабличныйДокумент.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТабличныйДокумент.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТабличныйДокумент.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТабличныйДокумент.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	Конеццикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции

&НаСервере
Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
	
КонецФункции

&НаСервере
Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
	
КонецФункции

&НаСервере
Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 по 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКартуИменованныхГруппСтрок(Раздел)
	
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");

	Для Каждого Обл Из ТабличныйДокумент.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	Возврат Карта;
	
КонецФункции

&НаСервере
Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СоздатьБухгалтерскуюОтчетностьВРосстатНажатие(Элемент)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.СоздатьБухгалтерскуюОтчетностьВРосстатНажатие(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧГ=");
	
КонецФункции

&НаСервере
Функция ТипАдресаПоУмолчанию()
	
	Результат = "АдрФакт";
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
		Адреса.АдрФакт = "";
	Иначе
		Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
		Адреса.АдрЮР = "";
	Иначе
		Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
		Адреса.АдрПочт = "";
	Иначе
		Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Адреса.АдрФакт) Тогда
		Результат = "АдрФакт";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрЮР) Тогда
		Результат = "АдрЮР";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрПочт) Тогда
		Результат = "АдрПочт";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьДлительностьКлючевойОперации(ВремяНачалаОперации)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачалаОперации <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		
		ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительности").ЗакончитьЗамерВремени(
			"ЗаполнениеФормыБухгалтерскаяОтчетность", 
			ВремяНачалаОперации
		);
		ВремяНачалаОперации = Неопределено;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеТаймера()
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВыполнятьЗамерыПроизводительности = ОбщегоНазначения.ОбщийМодуль("ОценкаПроизводительностиВызовСервераПовтИсп").ВыполнятьЗамерыПроизводительности();
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") 
	   И ВыполнятьЗамерыПроизводительности Тогда
		
		Возврат ОценкаПроизводительности.НачатьЗамерВремени();
			
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Неопределено;
	
КонецФункции

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура СкрытьСсылкуНастройкаСоставаОрганизаций()
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Обл = ТабличныйДокумент.Области.Найти("ОрганизацииДляЗаполненияОтчета");
		Если Обл <> Неопределено И Не Обл.СодержитЗначение Тогда 
			Обл.Текст = "";
			Обл.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиОчистка(Элемент, СтандартнаяОбработка)
	УдалитьФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлПояснительнойЗаписки");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПояснительнойЗапискиПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИмяФайлаПояснительнойЗаписки) Тогда
		УдалитьФайл("ФайлПояснительнойЗаписки");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СохранитьНаДискФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УдалитьФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьФайл("ФайлАудиторскогоЗаключения");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАудиторскогоЗаключенияПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ИмяФайлаАудиторскогоЗаключения) Тогда
		УдалитьФайл("ФайлАудиторскогоЗаключения");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьЗначкиУдаленияСтрок(ТабДок)
	
	МассивОбластейСДопСтроками = Новый Массив;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если СтрЧислоВхождений(ОбластьТД.Имя, "_2") > 0 Тогда
				МассивОбластейСДопСтроками.Добавить(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбластьТД Из ТабДок.Области Цикл
		Если СтрЧислоВхождений(ОбластьТД.Имя, "УдалитьСтроку") > 0 Тогда
			Если МассивОбластейСДопСтроками.Найти(Лев(ОбластьТД.Имя, СтрНайти(ОбластьТД.Имя, "_") - 1)) = Неопределено Тогда
				ОбластьТД.Гиперссылка = Ложь;
				ОбластьТД.Текст = "";
			Иначе
				ОбластьТД.Гиперссылка = Истина;
				ОбластьТД.Текст = "х";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

#Область БлокВариантЗаполнения

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ИмяПоказателя = ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НовыйВариант = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора.Индекс(
			ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора.НайтиПоЗначению(ВариантЗаполнения)) + 1;
		
		НайденнаяСтрокаТВЗ.ВариантЗаполнения = НовыйВариант;
		
		Если НовыйВариант = 1 Тогда
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			ВеличинаАвтокорректировки = 0;
			
		ИначеЕсли НовыйВариант = 2 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0 И НайденнаяСтрокаТВЗ.Дельта = 0)
				И НайденнаяСтрокаТВЗ.ЗначениеАвто <> 0 Тогда
				
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
				Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела, ИмяПоказателя);
				
			КонецЕсли;
			
			Дельта = ТабличныйДокумент.Области[ИмяПоказателя].Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
			
			НайденнаяСтрокаТВЗ.Дельта = Дельта;
			ВеличинаАвтокорректировки = Дельта;
			
		ИначеЕсли НовыйВариант = 3 Тогда
			
			Если (ТабличныйДокумент.Области[ИмяПоказателя].Значение = 0) И (НайденнаяСтрокаТВЗ.Дельта = 0) Тогда
				ТабличныйДокумент.Области[ИмяПоказателя].Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто;
			КонецЕсли;
			
			НайденнаяСтрокаТВЗ.Дельта = 0;
			НайденнаяСтрокаТВЗ.Комментарий = "";
			
			ВеличинаАвтокорректировки = 0;
			КомментарийКВариантуЗаполнения = "";
			
		КонецЕсли;
		
		ТабличныйДокумент.ТекущаяОбласть.ЦветФона = мСтруктураЦветовРаскраски["_" + НовыйВариант];
		
		УправлениеБлокомВариантЗаполнения(НайденнаяСтрокаТВЗ);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеБлокомВариантЗаполнения(ДанныеПоказателя)
	
	// ДанныеПоказателя - имя показателя.
	//
	Если ТипЗнч(ДанныеПоказателя) = Тип("Строка") Тогда
		
		ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		
		НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ДанныеПоказателя);
		
		Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
			
			ТекВариант     = НайденнаяСтрокаТВЗ.ВариантЗаполнения;
			ТекДельта      = НайденнаяСтрокаТВЗ.Дельта;
			ТекКомментарий = НайденнаяСтрокаТВЗ.Комментарий;
			Если ТекВариант = 1
			 ИЛИ ТекВариант = 2
			 ИЛИ ТекВариант = 3 Тогда
				ВариантЗаполнения = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
				ВеличинаАвтокорректировки = ТекДельта;
				КомментарийКВариантуЗаполнения = ТекКомментарий;
				ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = Истина;
				ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
				ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
				ТабличныйДокумент.Области[ДанныеПоказателя].Примечание.Текст = ТекКомментарий;
			КонецЕсли;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	// ДанныеПоказателя - строка таблицы вариантов заполнения.
	//
	ИначеЕсли ТипЗнч(ДанныеПоказателя) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		
		ТекВариант     = ДанныеПоказателя.ВариантЗаполнения;
		ТекДельта      = ДанныеПоказателя.Дельта;
		ТекКомментарий = ДанныеПоказателя.Комментарий;
		Если ТекВариант = 1
		 ИЛИ ТекВариант = 2
		 ИЛИ ТекВариант = 3 Тогда
			ВариантЗаполнения = ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[ТекВариант - 1].Значение;
			ВеличинаАвтокорректировки = ТекДельта;
			КомментарийКВариантуЗаполнения = ТекКомментарий;
			ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = Истина;
			ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = ТекВариант = 2;
			ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = ТекВариант <> 3;
			ТабличныйДокумент.Области[ДанныеПоказателя.КодПоказателя].Примечание.Текст = ТекКомментарий;
		Иначе
			ОчиститьБлокВариантЗаполнения();
		КонецЕсли;
		
	Иначе
		ОчиститьБлокВариантЗаполнения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьБлокВариантЗаполнения(АвтозаполнениеБезКорректировки = Ложь)
	
	ВариантЗаполнения = ?(АвтозаполнениеБезКорректировки, ЭтаФорма.Элементы.ВариантЗаполнения.СписокВыбора[2].Значение, "");
	ВеличинаАвтокорректировки = 0;
	КомментарийКВариантуЗаполнения = "";
	ЭтаФорма.Элементы.ВариантЗаполнения.Доступность = АвтозаполнениеБезКорректировки;
	ЭтаФорма.Элементы.ВеличинаАвтокорректировки.Доступность = Ложь;
	ЭтаФорма.Элементы.КомментарийКВариантуЗаполнения.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеличинаАвтокорректировкиПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Дельта = ВеличинаАвтокорректировки;
		
		ТекущаяОбласть.Значение = НайденнаяСтрокаТВЗ.ЗначениеАвто + НайденнаяСтрокаТВЗ.Дельта;
		
		РасчетНаКлиенте(ИмяРаздела, ИмяПоказателя);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийКВариантуЗаполненияПриИзменении(Элемент)
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		НайденнаяСтрокаТВЗ.Комментарий = КомментарийКВариантуЗаполнения;
		
		ТабличныйДокумент.Области[ИмяПоказателя].Примечание.Текст = КомментарийКВариантуЗаполнения;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыАвтозаполненияЯчейки()
	
	ТекущаяОбласть = ТабличныйДокумент.ТекущаяОбласть;
	ИмяПоказателя = ТекущаяОбласть.Имя;
	
	ИмяРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	
	НайденнаяСтрокаТВЗ = ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя);
	
	Если НайденнаяСтрокаТВЗ <> Неопределено Тогда
		
		Если ТипЗнч(ТекущаяОбласть.Значение) = Тип("Число") Тогда
			Дельта = ТекущаяОбласть.Значение - НайденнаяСтрокаТВЗ.ЗначениеАвто;
		Иначе
			Дельта = 0;
		КонецЕсли;
		
		НайденнаяСтрокаТВЗ.Дельта = Дельта;
		
		ВеличинаАвтокорректировки = Дельта;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВариантЗаполненияПоказателя(ИмяРаздела, ИмяПоказателя)
	
	Если ИмяРаздела = Неопределено ИЛИ ИмяПоказателя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПараметрыОтбора = Новый Структура("КодПоказателя", ИмяПоказателя);
		МассивСтрок = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			Возврат МассивСтрок[0];
		КонецЕсли;
	#Иначе
		Для каждого ТекСтрока Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяРаздела][0].ТаблицаВариантовЗаполнения Цикл
			КодПоказателя = ТекСтрока.КодПоказателя;
			Если КодПоказателя = ИмяПоказателя Тогда
				Возврат ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Отправка бух. отчетности в Росстат
&НаКлиенте
Процедура ОтправкаБухОтчетностиВРосстатПредупреждениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОбработкаНавигационнойСсылкиКраснойПанели(
		ЭтотОбъект, 
		Элемент, 
		НавигационнаяСсылкаФорматированнойСтроки, 
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаБухОтчетностиВРосстатСкрытьНажатие(Элемент)
	
	ОтправкаБухгалтерскойОтчетностиВРосстатКлиент.ОтправкаБухОтчетностиВРосстатСкрытьНажатие(
		ЭтотОбъект, 
		Элемент);
		
КонецПроцедуры
// Конец Отправка бух. отчетности в Росстат

#Область СохранениеПоясненийВMSExcel

&НаСервере
Функция СформироватьФайлXLSВХранилище()
	
	ИсходныйТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть();
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	
	СтруктураПараметров = Новый Структура;
	
	Для Каждого СтрокаУровня1 Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл
		
		ЭтоЗакладкаПояснения = (Лев(СтрокаУровня1.ИмяСтраницы, 9) = "Пояснения");
		Если НЕ ЭтоЗакладкаПояснения Тогда
			Продолжить;
		КонецЕсли;
		
		Пометка = СтрокаУровня1.ПоказатьСтраницу;
		
		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		НаименованиеЛиста  = СтрокаУровня1.Представление;
		ОриентацияЛиста    = СтрокаУровня1.ОриентацияСтраницы;
		ИмяОбластиТаблПоля = СтрокаУровня1.ИмяОбластиТабличногоПоля;
		
		Если Пометка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров.Очистить();
		СтруктураПараметров.Вставить("НаименованиеЛиста",  НаименованиеЛиста);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    ОриентацияЛиста);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
		СтруктураПараметров.Вставить("ВидПечати",          "ВидПечати");
		СтруктураПараметров.Вставить("ИмяСтраницы",        ИмяСтраницыПанели);
		
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницыПанели, 0);
		
		Если ЭтаФорма["СтруктураДанных" + ИмяСтраницыПанели].Количество() = 0 Тогда
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			ПоказатьПериод(ИмяСтраницыПанели);
			ЗаполнитьПериодыВРазделахОтчетности(ИмяСтраницыПанели);
			Если НЕ ТабличныйДокумент.Области.Найти("ДатаПодписиОтчета") = Неопределено Тогда
				ТабличныйДокумент.Области.ДатаПодписиОтчета.Значение = ДатаПодписи;
			КонецЕсли;
		КонецЕсли;
		
		ВывестиНаПечатьЛист(СтруктураПараметров);
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ИсходныйТабличныйДокумент);
	
	ТабличныйДокументДляСохранения = Новый ТабличныйДокумент;
	
	Для Каждого ТабличныйДокументПояснений Из СтруктураРеквизитовФормы.мПечатныеФормы Цикл
		УдалитьНенужноеИзПечатнойФормы(ТабличныйДокументПояснений.Значение);
		ТабличныйДокументДляСохранения.Вывести(ТабличныйДокументПояснений.Значение);
	КонецЦикла;
	
	АдресВХранилище = Неопределено;
	
	// Удаление лишних пустых строк из заполненного документа.
	ВсегоСтрок = ТабличныйДокументДляСохранения.ВысотаТаблицы;
	
	Если ВсегоСтрок > 0 Тогда
		ИспользованиеСтрок = Новый Массив(ВсегоСтрок);
		
		Для Каждого Область Из ТабличныйДокументДляСохранения.Области Цикл
			Если Область.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Продолжить;
			КонецЕсли;
			
			Для Инд = Область.Верх По Область.Низ Цикл
				ИспользованиеСтрок[Инд-1] = Истина;
			КонецЦикла;
		КонецЦикла;
		
		Для Инд = 1 По ВсегоСтрок Цикл
			Если ИспользованиеСтрок[ВсегоСтрок - Инд] = Неопределено Тогда
				НомерСтроки = ВсегоСтрок - Инд + 1;
				УдаляемаяОбласть = ТабличныйДокументДляСохранения.Область(НомерСтроки, , НомерСтроки, );
				ТабличныйДокументДляСохранения.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокументДляСохранения.Область().ЦветФона = Новый Цвет();
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		
		ТабличныйДокументДляСохранения.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS);
		
		СохраняемыйФайл = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(СохраняемыйФайл, ЭтаФорма.УникальныйИдентификатор);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПараметрыОжидания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отчет формируется.'");
	
	Возврат ПараметрыОжидания;
	
КонецФункции
