// Область "Настройки" описывает параметры инициализации механизма загрузки
// регламентированных отчетов из файлов выгрузки. Формат области настроек - JSON.
//
// Описание параметров:
//  * Установкой параметра "РазрешитьЗагрузку" в "true" или "false" регулируем видимость
//    кнопки "Загрузить" и возможность загрузки из файла в форме отчета.
//  * Параметр "ФорматыСхемВыгрузки" описывает соответствие имен макетов схем выгрузки
//    поддерживаемым форматам загрузки. Если у формы единственная схема выгрузки или
//    нужно всегда использовать схему по умолчанию - указываем значение "null".
//  * Параметр "ОбластиОбработчиков" содержит список имен используемых обработчиков
//    загружаемых данных. Имена соответствуют областям макета, в которых можно размещать
//    произвольные алгоритмы на языке "1С:Предприятие" для обработки доступных объектов.
//
// Примечание:
//  Сопоставление имен узлов из файла XML и имен показателей отчета выполняется по данным схемы выгрузки,
//  поэтому обработчики используются для получения значений показателей не описанных в схеме выгрузки.
//
#Область Настройки
{
	"РазрешитьЗагрузку"   : true,
	
	"ФорматыСхемВыгрузки" : {
		"СхемаВыгрузки502" : "5.02",
		"СхемаВыгрузки504" : "5.04",
		"СхемаВыгрузки505" : "5.05",
		"СхемаВыгрузки506" : "5.06",
		"СхемаВыгрузки507" : "5.07",
	},
	"ОбластиОбработчиков" : {
		"ПередЗагрузкой"  : "ПредОбработкаСхемыЗагрузки",
		"ПослеЗагрузки"   : "ПостОбработкаДокументаОтчета",
	}
}
#КонецОбласти

// Доступны параметры:
//
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПредОбработкаСхемыЗагрузки
	
#КонецОбласти

// Доступны параметры:
//
//  П.ДанныеОтчета      - заполненные данные документа регламентированного отчета;
//  П.ДеревоДляЗагрузки - выбранное дерево схемы загрузки, не заполненное данными;
//  П.ПараметрыОтчета   - параметры, сформированные в форме отчета, используются для выгрузки.
//
#Область ПостОбработкаДокументаОтчета
	
	СоставДополнительныхСтрок = П.ДанныеОтчета.СоставДополнительныхСтрок;
	
	СтруктураСоставов = Неопределено;
	Если ТипЗнч(СоставДополнительныхСтрок) = Тип("Структура") 
	   И СоставДополнительныхСтрок.Свойство("СтруктураСоставов", СтруктураСоставов)
	   И ТипЗнч(СтруктураСоставов) = Тип("Структура") Тогда
		
		Для Каждого СоставДопСтрок Из СтруктураСоставов Цикл
			ИмяРаздела = "ПолеТабличногоДокумента" + СоставДопСтрок.Ключ;
			
			РазделОтчета = Неопределено;
			П.ДанныеОтчета.ПоказателиОтчета.Свойство(ИмяРаздела, РазделОтчета);
			Если РазделОтчета <> Неопределено И СоставДопСтрок.Значение <> Неопределено Тогда
				
				Для Каждого СтрокаУровня1 Из СоставДопСтрок.Значение.Строки Цикл
					ЭтоФиксированныеДопСтроки = ПустаяСтрока(СтрокаУровня1.ТипСостава);
					НачалоИмениПоказателяМнЧ = "П100100" + СтрокаУровня1.Код;
					
					Если СтрокаУровня1.Строки.Количество() > 0 Тогда
						
						ИменаКолонок = Новый Массив;
						ТаблицаСтрок = Новый ТаблицаЗначений; // создаем таблицу для многострочной части
						Для НомКол = 1 По 7 Цикл
							ИмяПоказателяМнЧ = НачалоИмениПоказателяМнЧ + Формат(НомКол, "ЧЦ=2; ЧВН=");
							ЗначениеПоказателя = Неопределено;
							Если РазделОтчета.Свойство(ИмяПоказателяМнЧ + "_1", ЗначениеПоказателя) Тогда
								ТаблицаСтрок.Колонки.Добавить(ИмяПоказателяМнЧ, Новый ОписаниеТипов(Строка(ТипЗнч(ЗначениеПоказателя))));
								ИменаКолонок.Добавить(ИмяПоказателяМнЧ);
							КонецЕсли;
						КонецЦикла;
						
						Если ЗначениеЗаполнено(ИменаКолонок) Тогда
							
							НомСтр = 1; СтрНомСтр = "_1";
							Пока РазделОтчета.Свойство(ИменаКолонок[1] + СтрНомСтр)
							 ИЛИ РазделОтчета.Свойство(ИменаКолонок[3] + СтрНомСтр)
							 ИЛИ РазделОтчета.Свойство(ИменаКолонок[4] + СтрНомСтр) Цикл // многострочную часть перенесем в таблицу
								НовСтрока = ТаблицаСтрок.Добавить();
								Для каждого ИмяКолонки Из ИменаКолонок Цикл
									Если РазделОтчета.Свойство(ИмяКолонки + СтрНомСтр, НовСтрока[ИмяКолонки]) Тогда
										РазделОтчета.Удалить(ИмяКолонки + СтрНомСтр);
									КонецЕсли;
								КонецЦикла;
								НомСтр = НомСтр + 1;
								СтрНомСтр = "_" + Формат(НомСтр, "ЧГ=");
							КонецЦикла;
							
							// Найдем соответствие составу строк по наименованию статьи и перенесем строку в фиксированную часть.
							Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
								ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
								НачалоИмениПоказателя = "П00010" + СтрЗаменить(ИмяОбластиДопСтроки, "ДопСтрока", "");
								ЗначениеПоказателя = СокрЛП(СтрокаУровня2.Наименование);
								НайденнаяСтрока = ТаблицаСтрок.Найти(ЗначениеПоказателя, ТаблицаСтрок.Колонки[1].Имя);
								Если НайденнаяСтрока <> Неопределено Тогда
									Для НомКол = 1 По ИменаКолонок.Количество() Цикл
										РазделОтчета.Вставить(НачалоИмениПоказателя + Формат(НомКол, "ЧЦ=2; ЧВН="),
											НайденнаяСтрока[ИменаКолонок[НомКол - 1]]);
									КонецЦикла;
									ТаблицаСтрок.Удалить(НайденнаяСтрока);
								КонецЕсли;
							КонецЦикла;
							
							Для НомСтр = 1 По ТаблицаСтрок.Количество() Цикл // развернем многострочную часть из таблицы
								СтрокаТаблицы = ТаблицаСтрок[НомСтр - 1];
								Для Каждого ИмяКолонки Из ИменаКолонок Цикл
									РазделОтчета.Вставить(ИмяКолонки + "_" + Формат(НомСтр, "ЧГ="), СтрокаТаблицы[ИмяКолонки]);
								КонецЦикла;
							КонецЦикла;
							
						Иначе
							
							// Найдем соответствие составу строк по наименованию статьи и перенесем строку на соответствующее место.
							ТаблицаЗамен = Новый ТаблицаЗначений;
							ТаблицаЗамен.Колонки.Добавить("ИмяПоказателя1", Новый ОписаниеТипов("Строка"));
							ТаблицаЗамен.Колонки.Добавить("ИмяПоказателя2", Новый ОписаниеТипов("Строка"));
							ТаблицаЗамен.Колонки.Добавить("ЗначениеПоказателя1");
							ТаблицаЗамен.Колонки.Добавить("ЗначениеПоказателя2");
							
							Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл
								ИмяОбластиДопСтроки = СтрокаУровня2.ИмяОбластиДопСтроки;
								НачалоИмениПоказателя = "П00010" + СтрЗаменить(ИмяОбластиДопСтроки, "ДопСтрока", "");
								
								ЗначениеПоказателя = Неопределено;
								ЗначениеПоказателяИзСтруктурыСоставов = СокрЛП(СтрокаУровня2.Наименование);
								Если РазделОтчета.Свойство(НачалоИмениПоказателя + "02", ЗначениеПоказателя) И ЗначениеЗаполнено(ЗначениеПоказателя)
									И ЗначениеПоказателя <> ЗначениеПоказателяИзСтруктурыСоставов Тогда
									
									НайденнаяСтрока = СтрокаУровня1.Строки.Найти(ЗначениеПоказателя, "Наименование");
									Если НайденнаяСтрока <> Неопределено Тогда
										НачалоИмениПоказателяНовРасп = "П00010" + СтрЗаменить(НайденнаяСтрока.ИмяОбластиДопСтроки, "ДопСтрока", "");
										Для НомКол = 1 По 7 Цикл
											ЗначениеПоказателяНовРасп = Неопределено;
											ИмяТекущегоПоказателя = НачалоИмениПоказателя + Формат(НомКол, "ЧЦ=2; ЧВН=");
											Если РазделОтчета.Свойство(ИмяТекущегоПоказателя, ЗначениеПоказателяНовРасп) Тогда
												ОписаниеТиповЗначения = Новый ОписаниеТипов(Строка(ТипЗнч(ЗначениеПоказателяНовРасп)));
												
												НовСтрока = ТаблицаЗамен.Добавить();
												НовСтрока.ИмяПоказателя1 = ИмяТекущегоПоказателя;
												НовСтрока.ЗначениеПоказателя1 = ОписаниеТиповЗначения.ПривестиЗначение(); // очищаем значение;
												НовСтрока.ИмяПоказателя2 = НачалоИмениПоказателяНовРасп + Формат(НомКол, "ЧЦ=2; ЧВН=");
												НовСтрока.ЗначениеПоказателя2 = ЗначениеПоказателяНовРасп;
												
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									
								КонецЕсли;
							КонецЦикла;
							
							Для Каждого СтрокаТаблицыЗамен Из ТаблицаЗамен Цикл // очистка
								РазделОтчета[СтрокаТаблицыЗамен.ИмяПоказателя1] = СтрокаТаблицыЗамен.ЗначениеПоказателя1;
							КонецЦикла;
							Для Каждого СтрокаТаблицыЗамен Из ТаблицаЗамен Цикл // заполнение
								РазделОтчета.Вставить(СтрокаТаблицыЗамен.ИмяПоказателя2, СтрокаТаблицыЗамен.ЗначениеПоказателя2);
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
#КонецОбласти